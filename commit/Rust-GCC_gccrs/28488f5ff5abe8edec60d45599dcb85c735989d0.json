{"sha": "28488f5ff5abe8edec60d45599dcb85c735989d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0ODhmNWZmNWFiZThlZGVjNjBkNDU1OTlkY2I4NWM3MzU5ODlkMA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-10-14T22:39:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-25T13:22:38Z"}, "message": "[Ada] Simplify aspect processing with membership tests\n\ngcc/ada/\n\n\t* sem_ch13.adb (Analyze_One_Aspect): Detect aspect identifiers\n\twith membership tests.\n\t(Check_Aspect_At_End_Of_Declarations): Likewise.\n\t(Freeze_Entity_Checks): Likewise; a local constant is no longer\n\tneeded.\n\t(Is_Operational_Item): Similar simplification for attribute\n\tidentifiers.\n\t(Is_Type_Related_Rep_Item): Likewise.\n\t(Resolve_Iterable_Operation): Detect names with a membership\n\ttest.\n\t(Validate_Independence): Replace repeated Ekind with a\n\tmembership test.", "tree": {"sha": "db5d592d23e3247b099a1fd67e661f4ca3ed767f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5d592d23e3247b099a1fd67e661f4ca3ed767f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28488f5ff5abe8edec60d45599dcb85c735989d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28488f5ff5abe8edec60d45599dcb85c735989d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28488f5ff5abe8edec60d45599dcb85c735989d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28488f5ff5abe8edec60d45599dcb85c735989d0/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a79039c0ebcfbc1cd5b81004828626f1a81e790d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79039c0ebcfbc1cd5b81004828626f1a81e790d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79039c0ebcfbc1cd5b81004828626f1a81e790d"}], "stats": {"total": 190, "additions": 83, "deletions": 107}, "files": [{"sha": "45e9d7517955e9289f872eb1190b7455eab74bf6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 83, "deletions": 107, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28488f5ff5abe8edec60d45599dcb85c735989d0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28488f5ff5abe8edec60d45599dcb85c735989d0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=28488f5ff5abe8edec60d45599dcb85c735989d0", "patch": "@@ -1439,9 +1439,9 @@ package body Sem_Ch13 is\n                      --  Aspect Full_Access_Only must be analyzed last so that\n                      --  aspects Volatile and Atomic, if any, are analyzed.\n \n-                     if A_Id /= Aspect_Export\n-                       and then A_Id /= Aspect_Import\n-                       and then A_Id /= Aspect_Full_Access_Only\n+                     if A_Id not in Aspect_Export\n+                                  | Aspect_Full_Access_Only\n+                                  | Aspect_Import\n                      then\n                         Make_Pragma_From_Boolean_Aspect (ASN);\n                      end if;\n@@ -2800,9 +2800,7 @@ package body Sem_Ch13 is\n \n             Ent := New_Occurrence_Of (E, Sloc (Id));\n \n-            if A_Id = Aspect_Attach_Handler\n-              or else A_Id = Aspect_Interrupt_Handler\n-            then\n+            if A_Id in Aspect_Attach_Handler | Aspect_Interrupt_Handler then\n \n                --  Treat the specification as a reference to the protected\n                --  operation, which might otherwise appear unreferenced and\n@@ -2846,10 +2844,10 @@ package body Sem_Ch13 is\n             --  Check some general restrictions on language defined aspects\n \n             if not Implementation_Defined_Aspect (A_Id)\n-              or else A_Id = Aspect_Async_Readers\n-              or else A_Id = Aspect_Async_Writers\n-              or else A_Id = Aspect_Effective_Reads\n-              or else A_Id = Aspect_Effective_Writes\n+              or else A_Id in Aspect_Async_Readers\n+                            | Aspect_Async_Writers\n+                            | Aspect_Effective_Reads\n+                            | Aspect_Effective_Writes\n             then\n                Error_Msg_Name_1 := Nam;\n \n@@ -2873,16 +2871,16 @@ package body Sem_Ch13 is\n                        (\"aspect % not allowed for formal type declaration\",\n                         Aspect);\n \n-                  elsif A_Id /= Aspect_Atomic\n-                     and then A_Id /= Aspect_Volatile\n-                     and then A_Id /= Aspect_Independent\n-                     and then A_Id /= Aspect_Atomic_Components\n-                     and then A_Id /= Aspect_Independent_Components\n-                     and then A_Id /= Aspect_Volatile_Components\n-                     and then A_Id /= Aspect_Async_Readers\n-                     and then A_Id /= Aspect_Async_Writers\n-                     and then A_Id /= Aspect_Effective_Reads\n-                     and then A_Id /= Aspect_Effective_Writes\n+                  elsif A_Id not in Aspect_Atomic\n+                                  | Aspect_Volatile\n+                                  | Aspect_Independent\n+                                  | Aspect_Atomic_Components\n+                                  | Aspect_Independent_Components\n+                                  | Aspect_Volatile_Components\n+                                  | Aspect_Async_Readers\n+                                  | Aspect_Async_Writers\n+                                  | Aspect_Effective_Reads\n+                                  | Aspect_Effective_Writes\n                   then\n                      Error_Msg_N\n                        (\"aspect % not allowed for formal type declaration\",\n@@ -2938,11 +2936,11 @@ package body Sem_Ch13 is\n                   --  an attribute reference whose prefix is Standard, for\n                   --  example Standard'Maximum_Alignment or Standard'Word_Size.\n \n-                  elsif (A_Id = Aspect_Alignment\n-                          or else A_Id = Aspect_Component_Size\n-                          or else A_Id = Aspect_Object_Size\n-                          or else A_Id = Aspect_Size\n-                          or else A_Id = Aspect_Value_Size)\n+                  elsif A_Id in Aspect_Alignment\n+                              | Aspect_Component_Size\n+                              | Aspect_Object_Size\n+                              | Aspect_Size\n+                              | Aspect_Value_Size\n                     and then Present (Expr)\n                     and then Nkind (Expr) = N_Attribute_Reference\n                     and then Nkind (Prefix (Expr)) = N_Identifier\n@@ -3011,9 +3009,8 @@ package body Sem_Ch13 is\n                =>\n                   --  Indexing aspects apply only to tagged type\n \n-                  if (A_Id = Aspect_Constant_Indexing\n-                        or else\n-                      A_Id = Aspect_Variable_Indexing)\n+                  if A_Id in Aspect_Constant_Indexing\n+                           | Aspect_Variable_Indexing\n                     and then not (Is_Type (E)\n                                    and then Is_Tagged_Type (E))\n                   then\n@@ -3040,10 +3037,10 @@ package body Sem_Ch13 is\n                   --  illegal specification of this aspect for a subtype now,\n                   --  to prevent malformed rep_item chains.\n \n-                  if A_Id = Aspect_Input  or else\n-                     A_Id = Aspect_Output or else\n-                     A_Id = Aspect_Read   or else\n-                     A_Id = Aspect_Write\n+                  if A_Id in Aspect_Input\n+                           | Aspect_Output\n+                           | Aspect_Read\n+                           | Aspect_Write\n                   then\n                      if not Is_First_Subtype (E) then\n                         Error_Msg_N\n@@ -4262,7 +4259,7 @@ package body Sem_Ch13 is\n                   Pname : Name_Id;\n \n                begin\n-                  if A_Id = Aspect_Pre or else A_Id = Aspect_Precondition then\n+                  if A_Id in Aspect_Pre | Aspect_Precondition then\n                      Pname := Name_Precondition;\n                   else\n                      Pname := Name_Postcondition;\n@@ -4509,7 +4506,7 @@ package body Sem_Ch13 is\n \n                      goto Continue;\n \n-                  elsif A_Id = Aspect_Export or else A_Id = Aspect_Import then\n+                  elsif A_Id in Aspect_Export | Aspect_Import then\n                      Analyze_Aspect_Export_Import;\n \n                   --  Disable_Controlled\n@@ -4581,9 +4578,7 @@ package body Sem_Ch13 is\n                      --  Exclude aspects Export and Import because their pragma\n                      --  syntax does not map directly to a Boolean aspect.\n \n-                     if A_Id /= Aspect_Export\n-                       and then A_Id /= Aspect_Import\n-                     then\n+                     if A_Id not in Aspect_Export | Aspect_Import then\n                         Aitem := Make_Aitem_Pragma\n                           (Pragma_Argument_Associations => New_List (\n                              Make_Pragma_Argument_Association (Sloc (Ent),\n@@ -10578,22 +10573,22 @@ package body Sem_Ch13 is\n       --  name, so we need to verify that one of these interpretations is\n       --  the one available at at the freeze point.\n \n-      elsif A_Id = Aspect_Input  or else\n-            A_Id = Aspect_Output or else\n-            A_Id = Aspect_Read   or else\n-            A_Id = Aspect_Write  or else\n-            A_Id = Aspect_Put_Image\n+      elsif A_Id in Aspect_Input\n+                  | Aspect_Output\n+                  | Aspect_Read\n+                  | Aspect_Write\n+                  | Aspect_Put_Image\n       then\n          Analyze (End_Decl_Expr);\n          Check_Overloaded_Name;\n \n-      elsif A_Id = Aspect_Variable_Indexing or else\n-            A_Id = Aspect_Constant_Indexing or else\n-            A_Id = Aspect_Default_Iterator  or else\n-            A_Id = Aspect_Iterator_Element  or else\n-            A_Id = Aspect_Integer_Literal   or else\n-            A_Id = Aspect_Real_Literal      or else\n-            A_Id = Aspect_String_Literal\n+      elsif A_Id in Aspect_Variable_Indexing\n+                  | Aspect_Constant_Indexing\n+                  | Aspect_Default_Iterator\n+                  | Aspect_Iterator_Element\n+                  | Aspect_Integer_Literal\n+                  | Aspect_Real_Literal\n+                  | Aspect_String_Literal\n       then\n          --  Make type unfrozen before analysis, to prevent spurious errors\n          --  about late attributes.\n@@ -10619,9 +10614,7 @@ package body Sem_Ch13 is\n          --  also make its potential components accessible.\n \n          if not Analyzed (Freeze_Expr) and then Inside_A_Generic then\n-            if A_Id = Aspect_Dynamic_Predicate\n-              or else A_Id = Aspect_Predicate\n-            then\n+            if A_Id in Aspect_Dynamic_Predicate | Aspect_Predicate then\n                Push_Type (Ent);\n                Preanalyze_Spec_Expression (Freeze_Expr, Standard_Boolean);\n                Pop_Type (Ent);\n@@ -10647,9 +10640,9 @@ package body Sem_Ch13 is\n          --  visible for aspects that may reference them.\n \n          if Present (Freeze_Expr) and then No (T) then\n-            if A_Id = Aspect_Dynamic_Predicate\n-              or else A_Id = Aspect_Predicate\n-              or else A_Id = Aspect_Priority\n+            if A_Id in Aspect_Dynamic_Predicate\n+                     | Aspect_Predicate\n+                     | Aspect_Priority\n             then\n                Push_Type (Ent);\n                Check_Aspect_At_Freeze_Point (ASN);\n@@ -10665,20 +10658,18 @@ package body Sem_Ch13 is\n          --  partial view is visible. The expression must be scalar, so use\n          --  the full view to resolve.\n \n-         elsif (A_Id = Aspect_Default_Value\n-                  or else\n-                A_Id = Aspect_Default_Component_Value)\n+         elsif A_Id in Aspect_Default_Component_Value | Aspect_Default_Value\n             and then Is_Private_Type (T)\n          then\n             Preanalyze_Spec_Expression (End_Decl_Expr, Full_View (T));\n \n          --  The following aspect expressions may contain references to\n          --  components and discriminants of the type.\n \n-         elsif A_Id = Aspect_Dynamic_Predicate\n-           or else A_Id = Aspect_Predicate\n-           or else A_Id = Aspect_Priority\n-           or else A_Id = Aspect_CPU\n+         elsif A_Id in Aspect_CPU\n+                     | Aspect_Dynamic_Predicate\n+                     | Aspect_Predicate\n+                     | Aspect_Priority\n          then\n             Push_Type (Ent);\n             Preanalyze_Spec_Expression (End_Decl_Expr, T);\n@@ -12700,7 +12691,6 @@ package body Sem_Ch13 is\n         and then Scope (E) = Current_Scope\n       then\n          declare\n-            A_Id  : Aspect_Id;\n             Ritem : Node_Id;\n \n          begin\n@@ -12712,12 +12702,10 @@ package body Sem_Ch13 is\n                  and then Entity (Ritem) = E\n                  and then Is_Delayed_Aspect (Ritem)\n                then\n-                  A_Id := Get_Aspect_Id (Ritem);\n-\n-                  if A_Id = Aspect_Dynamic_Predicate\n-                    or else A_Id = Aspect_Predicate\n-                    or else A_Id = Aspect_Priority\n-                    or else A_Id = Aspect_CPU\n+                  if Get_Aspect_Id (Ritem) in Aspect_CPU\n+                                            | Aspect_Dynamic_Predicate\n+                                            | Aspect_Predicate\n+                                            | Aspect_Priority\n                   then\n                     --  Retrieve the visibility to components and discriminants\n                     --  in order to properly analyze the aspects.\n@@ -13463,31 +13451,23 @@ package body Sem_Ch13 is\n \n    function Is_Operational_Item (N : Node_Id) return Boolean is\n    begin\n-      if Nkind (N) /= N_Attribute_Definition_Clause then\n-         return False;\n-\n-      else\n-         declare\n-            Id : constant Attribute_Id := Get_Attribute_Id (Chars (N));\n-         begin\n-\n-            --  List of operational items is given in AARM 13.1(8.mm/1).\n-            --  It is clearly incomplete, as it does not include iterator\n-            --  aspects, among others.\n-\n-            return    Id = Attribute_Constant_Indexing\n-              or else Id = Attribute_Default_Iterator\n-              or else Id = Attribute_Implicit_Dereference\n-              or else Id = Attribute_Input\n-              or else Id = Attribute_Iterator_Element\n-              or else Id = Attribute_Iterable\n-              or else Id = Attribute_Output\n-              or else Id = Attribute_Read\n-              or else Id = Attribute_Variable_Indexing\n-              or else Id = Attribute_Write\n-              or else Id = Attribute_External_Tag;\n-         end;\n-      end if;\n+      --  List of operational items is given in AARM 13.1(8.mm/1). It is\n+      --  clearly incomplete, as it does not include iterator aspects, among\n+      --  others.\n+\n+      return Nkind (N) = N_Attribute_Definition_Clause\n+          and then\n+        Get_Attribute_Id (Chars (N)) in Attribute_Constant_Indexing\n+                                      | Attribute_External_Tag\n+                                      | Attribute_Default_Iterator\n+                                      | Attribute_Implicit_Dereference\n+                                      | Attribute_Input\n+                                      | Attribute_Iterable\n+                                      | Attribute_Iterator_Element\n+                                      | Attribute_Output\n+                                      | Attribute_Read\n+                                      | Attribute_Variable_Indexing\n+                                      | Attribute_Write;\n    end Is_Operational_Item;\n \n    -------------------------\n@@ -13695,17 +13675,13 @@ package body Sem_Ch13 is\n    begin\n       case Nkind (N) is\n          when N_Attribute_Definition_Clause =>\n-            declare\n-               Id : constant Attribute_Id := Get_Attribute_Id (Chars (N));\n-               --  See AARM 13.1(8.f-8.x) list items that end in \"clause\"\n-               --  ???: include any GNAT-defined attributes here?\n-            begin\n-               return    Id = Attribute_Component_Size\n-                 or else Id = Attribute_Bit_Order\n-                 or else Id = Attribute_Storage_Pool\n-                 or else Id = Attribute_Stream_Size\n-                 or else Id = Attribute_Machine_Radix;\n-            end;\n+            --  See AARM 13.1(8.f-8.x) list items that end in \"clause\"\n+            --  ???: include any GNAT-defined attributes here?\n+            return Get_Attribute_Id (Chars (N)) in Attribute_Bit_Order\n+                                                 | Attribute_Component_Size\n+                                                 | Attribute_Machine_Radix\n+                                                 | Attribute_Storage_Pool\n+                                                 | Attribute_Stream_Size;\n \n          when N_Pragma =>\n             case Get_Pragma_Id (N) is\n@@ -15135,7 +15111,7 @@ package body Sem_Ch13 is\n          Ent := Entity (N);\n          F1  := First_Formal (Ent);\n \n-         if Nam = Name_First or else Nam = Name_Last then\n+         if Nam in Name_First | Name_Last then\n \n             --  First or Last (Container) => Cursor\n \n@@ -16026,7 +16002,7 @@ package body Sem_Ch13 is\n \n          --  Deal with component case\n \n-         if Ekind (E) = E_Discriminant or else Ekind (E) = E_Component then\n+         if Ekind (E) in E_Component | E_Discriminant then\n             if not OK_Component (E) then\n                No_Independence;\n                Reason_Bad_Component (E);"}]}