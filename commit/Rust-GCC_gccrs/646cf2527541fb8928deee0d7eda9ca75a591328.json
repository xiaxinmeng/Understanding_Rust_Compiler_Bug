{"sha": "646cf2527541fb8928deee0d7eda9ca75a591328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2Y2YyNTI3NTQxZmI4OTI4ZGVlZTBkN2VkYTljYTc1YTU5MTMyOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-04-17T05:40:39Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-04-17T05:40:39Z"}, "message": "Make redirection only for target_clones: V3 (PR ipa/85329).\n\n2018-04-17  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/85329\n\t* multiple_target.c (create_dispatcher_calls): Set apostrophes\n\tfor target_clone error message.  Make default implementation\n        clone to be a local declaration.\n\t(separate_attrs): Add new argument and check for an empty\n\tstring.\n\t(expand_target_clones): Handle it.\n\t(ipa_target_clone): Make redirection just for target_clones\n\tfunctions.\n2018-04-17  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/85329\n\t* g++.dg/ext/pr85329-2.C: New test.\n\t* g++.dg/ext/pr85329.C: New test.\n\t* gcc.target/i386/mvc12.c: New test.\n\nFrom-SVN: r259428", "tree": {"sha": "90085775e60ac8e9e866e3202e20f96c3a272e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90085775e60ac8e9e866e3202e20f96c3a272e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646cf2527541fb8928deee0d7eda9ca75a591328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646cf2527541fb8928deee0d7eda9ca75a591328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646cf2527541fb8928deee0d7eda9ca75a591328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646cf2527541fb8928deee0d7eda9ca75a591328/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42c884b130825022f3ff3621b6393eefa4cf36f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c884b130825022f3ff3621b6393eefa4cf36f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c884b130825022f3ff3621b6393eefa4cf36f6"}], "stats": {"total": 126, "additions": 112, "deletions": 14}, "files": [{"sha": "a96c8decffc446000c73ad1832019df3a3599e6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -1,3 +1,15 @@\n+2018-04-17  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/85329\n+\t* multiple_target.c (create_dispatcher_calls): Set apostrophes\n+\tfor target_clone error message.  Make default implementation\n+        clone to be a local declaration.\n+\t(separate_attrs): Add new argument and check for an empty\n+\tstring.\n+\t(expand_target_clones): Handle it.\n+\t(ipa_target_clone): Make redirection just for target_clones\n+\tfunctions.\n+\n 2018-04-16  Cesar Philippidis  <cesar@codesourcery.com>\n \t    Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "a1fe09a598318a154a23ca72d280767eccac9407", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -88,7 +88,7 @@ create_dispatcher_calls (struct cgraph_node *node)\n   if (!idecl)\n     {\n       error_at (DECL_SOURCE_LOCATION (node->decl),\n-\t\t\"default target_clones attribute was not set\");\n+\t\t\"default %<target_clones%> attribute was not set\");\n       return;\n     }\n \n@@ -161,10 +161,25 @@ create_dispatcher_calls (struct cgraph_node *node)\n \t}\n     }\n \n-  TREE_PUBLIC (node->decl) = 0;\n   symtab->change_decl_assembler_name (node->decl,\n \t\t\t\t      clone_function_name (node->decl,\n \t\t\t\t\t\t\t   \"default\"));\n+\n+  /* FIXME: copy of cgraph_node::make_local that should be cleaned up\n+\t    in next stage1.  */\n+  node->make_decl_local ();\n+  node->set_section (NULL);\n+  node->set_comdat_group (NULL);\n+  node->externally_visible = false;\n+  node->forced_by_abi = false;\n+  node->set_section (NULL);\n+  node->unique_name = ((node->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t\t\t|| node->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\t       && !flag_incremental_link);\n+  node->resolution = LDPR_PREVAILING_DEF_IRONLY;\n+\n+  DECL_ARTIFICIAL (node->decl) = 1;\n+  node->force_output = true;\n }\n \n /* Return length of attribute names string,\n@@ -216,26 +231,30 @@ get_attr_str (tree arglist, char *attr_str)\n }\n \n /* Return number of attributes separated by comma and put them into ARGS.\n-   If there is no DEFAULT attribute return -1.  */\n+   If there is no DEFAULT attribute return -1.  If there is an empty\n+   string in attribute return -2.  */\n \n static int\n-separate_attrs (char *attr_str, char **attrs)\n+separate_attrs (char *attr_str, char **attrs, int attrnum)\n {\n   int i = 0;\n-  bool has_default = false;\n+  int default_count = 0;\n \n   for (char *attr = strtok (attr_str, \",\");\n        attr != NULL; attr = strtok (NULL, \",\"))\n     {\n       if (strcmp (attr, \"default\") == 0)\n \t{\n-\t  has_default = true;\n+\t  default_count++;\n \t  continue;\n \t}\n       attrs[i++] = attr;\n     }\n-  if (!has_default)\n+  if (default_count == 0)\n     return -1;\n+  else if (i + default_count < attrnum)\n+    return -2;\n+\n   return i;\n }\n \n@@ -321,7 +340,7 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n     {\n       warning_at (DECL_SOURCE_LOCATION (node->decl),\n \t\t  0,\n-\t\t  \"single target_clones attribute is ignored\");\n+\t\t  \"single %<target_clones%> attribute is ignored\");\n       return false;\n     }\n \n@@ -345,7 +364,7 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n   int attrnum = get_attr_str (arglist, attr_str);\n   char **attrs = XNEWVEC (char *, attrnum);\n \n-  attrnum = separate_attrs (attr_str, attrs);\n+  attrnum = separate_attrs (attr_str, attrs, attrnum);\n   if (attrnum == -1)\n     {\n       error_at (DECL_SOURCE_LOCATION (node->decl),\n@@ -354,6 +373,14 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n       XDELETEVEC (attr_str);\n       return false;\n     }\n+  else if (attrnum == -2)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"an empty string cannot be in %<target_clones%> attribute\");\n+      XDELETEVEC (attrs);\n+      XDELETEVEC (attr_str);\n+      return false;\n+    }\n \n   cgraph_function_version_info *decl1_v = NULL;\n   cgraph_function_version_info *decl2_v = NULL;\n@@ -427,14 +454,14 @@ static unsigned int\n ipa_target_clone (void)\n {\n   struct cgraph_node *node;\n+  auto_vec<cgraph_node *> to_dispatch;\n \n-  bool target_clone_pass = false;\n   FOR_EACH_FUNCTION (node)\n-    target_clone_pass |= expand_target_clones (node, node->definition);\n+    if (expand_target_clones (node, node->definition))\n+      to_dispatch.safe_push (node);\n \n-  if (target_clone_pass)\n-    FOR_EACH_FUNCTION (node)\n-      create_dispatcher_calls (node);\n+  for (unsigned i = 0; i < to_dispatch.length (); i++)\n+    create_dispatcher_calls (to_dispatch[i]);\n \n   return 0;\n }"}, {"sha": "a7dd355e5a5af328c4c0a5e529d68c742fd29a90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -1,3 +1,10 @@\n+2018-04-17  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/85329\n+\t* g++.dg/ext/pr85329-2.C: New test.\n+\t* g++.dg/ext/pr85329.C: New test.\n+\t* gcc.target/i386/mvc12.c: New test.\n+\n 2018-04-16  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/85039"}, {"sha": "24622d404f7610b19221733b2263f910f778dc86", "filename": "gcc/testsuite/g++.dg/ext/pr85329-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329-2.C?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" } */\n+\n+class b\n+{\n+public:\n+  __attribute__ ((target (\"aes\"))) b () {}\n+  __attribute__ ((target (\"default\"))) b () {}\n+};\n+class c\n+{\n+  b d;\n+};\n+void\n+fn1 ()\n+{\n+  c a;\n+}\n+__attribute__ ((target_clones (\"sse\", \"default\"))) void\n+e ()\n+{\n+}"}, {"sha": "fb77e42cd7893d44acbcbd4d389cdc24bcf125c5", "filename": "gcc/testsuite/g++.dg/ext/pr85329.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr85329.C?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-ifunc \"\" } */\n+\n+struct a\n+{\n+  __attribute__((target_clones(\"sse\", \"default\"))) void operator^=(a) {}\n+} * b;\n+\n+class c {\n+public:\n+  a *d();\n+};\n+\n+class f {\n+  void g();\n+  c e;\n+};\n+\n+void f::g() { *e.d() ^= b[0]; }"}, {"sha": "f42ae8080e67d47e87db1db61bfba8911f499918", "filename": "gcc/testsuite/gcc.target/i386/mvc12.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646cf2527541fb8928deee0d7eda9ca75a591328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc12.c?ref=646cf2527541fb8928deee0d7eda9ca75a591328", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+\n+__attribute__((target_clones(\"\",\"arch=slm\",\"arch=core-avx2\", \"default\")))\n+int foo (); /* { dg-error \"an empty string cannot be in .target_clones. attribute\" } */\n+\n+int\n+bar ()\n+{\n+  return foo();\n+}"}]}