{"sha": "9c3c8ad74024641107dc60942263e502371eb50b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzYzhhZDc0MDI0NjQxMTA3ZGM2MDk0MjI2M2U1MDIzNzFlYjUwYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-11T13:25:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-11T13:25:37Z"}, "message": "re PR lto/45959 (ICE: tree code 'template_type_parm' is not supported in gimple streams with -flto/-fwhopr)\n\n\tPR lto/45959\n\tPR lto/45960\n\t* pt.c (tsubst_copy) [INTEGER_CST]: Instantiate the type.\n\nFrom-SVN: r165306", "tree": {"sha": "b3746a8c2d5dee63f0cbc52c321f3735ed994ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3746a8c2d5dee63f0cbc52c321f3735ed994ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c3c8ad74024641107dc60942263e502371eb50b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3c8ad74024641107dc60942263e502371eb50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3c8ad74024641107dc60942263e502371eb50b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3c8ad74024641107dc60942263e502371eb50b/comments", "author": null, "committer": null, "parents": [{"sha": "d6d5951a4a7f3ed219ea5be8c9a377cfb16f62d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d5951a4a7f3ed219ea5be8c9a377cfb16f62d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d5951a4a7f3ed219ea5be8c9a377cfb16f62d8"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "0bf00e752a5b5cde2d94b4fee115f388fcc9a8db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c3c8ad74024641107dc60942263e502371eb50b", "patch": "@@ -1,3 +1,9 @@\n+2010-10-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR lto/45959\n+\tPR lto/45960\n+\t* pt.c (tsubst_copy) [INTEGER_CST]: Instantiate the type.\n+\n 2010-10-07  Andi Kleen  <ak@linux.intel.com>\n \n \t* Make-lang.in (c++_OBJS): Remove dummy-checksum.o."}, {"sha": "b84cc785bedad9a34cf1b2c1a56057149e4d0178", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9c3c8ad74024641107dc60942263e502371eb50b", "patch": "@@ -11373,6 +11373,17 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       error (\"use %<...%> to expand argument pack\");\n       return error_mark_node;\n \n+    case INTEGER_CST:\n+    case REAL_CST:\n+    case STRING_CST:\n+      {\n+\t/* Instantiate any typedefs in the type.  */\n+\ttree type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\tr = fold_convert (type, t);\n+\tgcc_assert (TREE_CODE (r) == code);\n+\treturn r;\n+      }\n+\n     default:\n       return t;\n     }"}, {"sha": "c6ab6da50cd1fecbb55d0d640e163d78201508ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c3c8ad74024641107dc60942263e502371eb50b", "patch": "@@ -1,3 +1,8 @@\n+2010-10-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* g++.dg/lto/20101010-1_0.C: New testcase.\n+\t* g++.dg/lto/20101010-2_0.C: Likewise.\n+\n 2010-10-11  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/45902"}, {"sha": "6eb40efc86842b642d69f78939570626445e077a", "filename": "gcc/testsuite/g++.dg/lto/20101010-1_0.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C?ref=9c3c8ad74024641107dc60942263e502371eb50b", "patch": "@@ -0,0 +1,109 @@\n+// { dg-lto-do link }\n+\n+typedef long size_t;\n+template < class, class > struct pair\n+{\n+}\n+;\n+template < typename > class allocator;\n+template < typename > struct equal_to;\n+\n+template < class > struct hash;\n+template\n+<\n+class, class, class, class, class, class > struct dense_hashtable_iterator;\n+template\n+<\n+class,\n+    class, class, class, class, class > struct dense_hashtable_const_iterator;\n+template\n+<\n+class\n+Value,\n+    class\n+    Key,\n+    class\n+    HashFcn,\n+    class ExtractKey, class EqualKey, class Alloc > class dense_hashtable\n+{\n+public:\n+    typedef Key key_type;\n+    typedef Value value_type;\n+    typedef size_t size_type;\n+    typedef\n+\tdense_hashtable_iterator\n+\t< Value, Key, HashFcn, ExtractKey, EqualKey, Alloc > iterator;\n+    typedef\n+\tdense_hashtable_const_iterator\n+\t< Value, Key, HashFcn, ExtractKey, EqualKey, Alloc > const_iterator;\n+    static const size_type ILLEGAL_BUCKET = (-1);\n+    pair < size_type, size_type > find_position (key_type)\n+      {\n+\tsize_type insert_pos = ILLEGAL_BUCKET;\n+      }\n+    pair < iterator, bool > insert_noresize (value_type obj)\n+      {\n+\tpair < size_type, size_type > pos = find_position ((obj));\n+      }\n+    pair < iterator, bool > insert (value_type & obj)\n+      {\n+\tinsert_noresize (obj);\n+      }\n+    ExtractKey get_key;\n+}\n+\n+;\n+template\n+<\n+class\n+Value,\n+    class\n+    HashFcn\n+    =\n+    hash\n+    <\n+    Value\n+    >,\n+    class\n+    EqualKey\n+    =\n+    equal_to < Value >, class Alloc = allocator < Value > >class dense_hash_set\n+{\n+  struct Identity\n+    {\n+    }\n+  ;\n+  typedef\n+      dense_hashtable < Value, Value, HashFcn, Identity, EqualKey, Alloc > ht;\n+  ht rep;\n+public:\n+  typedef typename ht::value_type value_type;\n+  typedef typename ht::const_iterator iterator;\n+  pair < iterator, bool > insert (value_type obj)\n+    {\n+      pair < typename ht::iterator, bool > p = rep.insert (obj);\n+    }\n+}\n+\n+;\n+class blah_46\n+{\n+}\n+;\n+struct foo_10:dense_hash_set < blah_46 >\n+{\n+}\n+;\n+class foo_14\n+{\n+  void hmmmmh_5 (blah_46);\n+  foo_10 negative_rrrrrrr_type_data_;\n+}\n+;\n+void\n+foo_14::hmmmmh_5 (blah_46 hahaha_id)\n+{\n+  negative_rrrrrrr_type_data_.insert (hahaha_id);\n+}\n+\n+int main () { return 0; }"}, {"sha": "c68bcd632384fc526a7c3293eb2214aa7af48f9e", "filename": "gcc/testsuite/g++.dg/lto/20101010-2_0.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3c8ad74024641107dc60942263e502371eb50b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C?ref=9c3c8ad74024641107dc60942263e502371eb50b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-lto-do link }\n+\n+typedef int size_t;\n+template < size_t _Nw > struct _Base_bitset\n+{\n+  typedef unsigned _WordT;\n+  _WordT _M_w[_Nw];\n+  void _M_do_set ()\n+  {\n+    for (size_t __i;;)\n+      _M_w[__i] = static_cast < _WordT > (0);\n+  }\n+};\n+\n+template < size_t > class bitset:\n+_Base_bitset < ((sizeof (unsigned)) + ((sizeof (unsigned)) ? : 1)) >\n+{\n+public:\n+  bitset set ()\n+  {\n+    _M_do_set ();\n+  }\n+};\n+\n+void\n+test01 ()\n+{\n+  bitset < 96 > z6;\n+  z6.set ();\n+}\n+\n+int main() { return 0; }"}]}