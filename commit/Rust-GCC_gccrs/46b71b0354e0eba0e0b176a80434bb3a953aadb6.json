{"sha": "46b71b0354e0eba0e0b176a80434bb3a953aadb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNzFiMDM1NGUwZWJhMGUwYjE3NmE4MDQzNGJiM2E5NTNhYWRiNg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2008-04-07T17:36:59Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2008-04-07T17:36:59Z"}, "message": "PR middle-end/PR28690\n\n\tPR middle-end/PR28690\n\t* rtlanal.c: Update copyright years.\n\t(commutative_operand_precedence): Give SYMBOL_REF's the same precedence\n\tas REG_POINTER and MEM_POINTER operands.\n\t* emit-rtl.c (gen_reg_rtx_and_attrs): New function.\n\t(set_reg_attrs_from_value): Call mark_reg_pointer as appropriate.\n\t* rtl.h (gen_reg_rtx_and_attrs): Add prototype for new function.\n\t* gcse.c: Update copyright years.\n\t(pre_delete): Call gen_reg_rtx_and_attrs.\n\t(hoist_code): Likewise.\n\t(build_store_vectors): Likewise.\n\t(delete_store): Likewise.\n\t* loop-invariant.c (move_invariant_reg): Likewise.\n\tUpdate copyright years.\n\nFrom-SVN: r133985", "tree": {"sha": "1d70b0b5be2385ffac16616696a1ca2968a86039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d70b0b5be2385ffac16616696a1ca2968a86039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b71b0354e0eba0e0b176a80434bb3a953aadb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b71b0354e0eba0e0b176a80434bb3a953aadb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b71b0354e0eba0e0b176a80434bb3a953aadb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b71b0354e0eba0e0b176a80434bb3a953aadb6/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64ef8953e3507ad5e3f356e4d65a0d7fd9d10355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ef8953e3507ad5e3f356e4d65a0d7fd9d10355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ef8953e3507ad5e3f356e4d65a0d7fd9d10355"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "e60847d6bfcabc5b5286c5d83f8085c3edadfb08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -1,3 +1,20 @@\n+2008-04-07  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR middle-end/PR28690\n+\t* rtlanal.c: Update copyright years.\n+\t(commutative_operand_precedence): Give SYMBOL_REF's the same precedence\n+\tas REG_POINTER and MEM_POINTER operands.\n+\t* emit-rtl.c (gen_reg_rtx_and_attrs): New function.\n+\t(set_reg_attrs_from_value): Call mark_reg_pointer as appropriate.\n+\t* rtl.h (gen_reg_rtx_and_attrs): Add prototype for new function.\n+\t* gcse.c: Update copyright years.\n+\t(pre_delete): Call gen_reg_rtx_and_attrs.\n+\t(hoist_code): Likewise.\n+\t(build_store_vectors): Likewise.\n+\t(delete_store): Likewise.\n+\t* loop-invariant.c (move_invariant_reg): Likewise.\n+\tUpdate copyright years.\n+\n 2008-04-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (\"*sse_prologue_save_insn\"): Use braced output"}, {"sha": "2fe9116334617a896ed6f5ac5569b113a5c03a2c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -964,11 +964,32 @@ set_reg_attrs_from_value (rtx reg, rtx x)\n   int offset;\n \n   offset = byte_lowpart_offset (GET_MODE (reg), GET_MODE (x));\n-  if (MEM_P (x) && MEM_OFFSET (x) && GET_CODE (MEM_OFFSET (x)) == CONST_INT)\n-    REG_ATTRS (reg)\n-      = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);\n-  if (REG_P (x) && REG_ATTRS (x))\n-    update_reg_offset (reg, x, offset);\n+  if (MEM_P (x))\n+    {\n+      if (MEM_OFFSET (x) && GET_CODE (MEM_OFFSET (x)) == CONST_INT)\n+\tREG_ATTRS (reg)\n+\t  = get_reg_attrs (MEM_EXPR (x), INTVAL (MEM_OFFSET (x)) + offset);\n+      if (MEM_POINTER (x))\n+\tmark_reg_pointer (reg, MEM_ALIGN (x));\n+    }\n+  else if (REG_P (x))\n+    {\n+      if (REG_ATTRS (x))\n+\tupdate_reg_offset (reg, x, offset);\n+      if (REG_POINTER (x))\n+\tmark_reg_pointer (reg, REGNO_POINTER_ALIGN (REGNO (x)));\n+    }\n+}\n+\n+/* Generate a REG rtx for a new pseudo register, copying the mode\n+   and attributes from X.  */\n+\n+rtx\n+gen_reg_rtx_and_attrs (rtx x)\n+{\n+  rtx reg = gen_reg_rtx (GET_MODE (x));\n+  set_reg_attrs_from_value (reg, x);\n+  return reg;\n }\n \n /* Set the register attributes for registers contained in PARM_RTX."}, {"sha": "20bb0804d2e4ab699ace0a1d09341472e6eda4ac", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -1,7 +1,7 @@\n /* Global common subexpression elimination/Partial redundancy elimination\n    and global constant/copy propagation for GNU compiler.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007 Free Software Foundation, Inc.\n+   2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -4463,8 +4463,7 @@ pre_delete (void)\n \t\t   expressions into.  Get the mode for the new pseudo from\n \t\t   the mode of the original destination pseudo.  */\n \t\tif (expr->reaching_reg == NULL)\n-\t\t  expr->reaching_reg\n-\t\t    = gen_reg_rtx (GET_MODE (SET_DEST (set)));\n+\t\t  expr->reaching_reg = gen_reg_rtx_and_attrs (SET_DEST (set));\n \n \t\tgcse_emit_move_after (expr->reaching_reg, SET_DEST (set), insn);\n \t\tdelete_insn (insn);\n@@ -4988,7 +4987,7 @@ hoist_code (void)\n \t\t\t from the mode of the original destination pseudo.  */\n \t\t      if (expr->reaching_reg == NULL)\n \t\t\texpr->reaching_reg\n-\t\t\t  = gen_reg_rtx (GET_MODE (SET_DEST (set)));\n+\t\t\t  = gen_reg_rtx_and_attrs (SET_DEST (set));\n \n \t\t      gcse_emit_move_after (expr->reaching_reg, SET_DEST (set), insn);\n \t\t      delete_insn (insn);\n@@ -6121,7 +6120,7 @@ build_store_vectors (void)\n \t     are any side effects.  */\n \t  if (TEST_BIT (ae_gen[bb->index], ptr->index))\n \t    {\n-\t      rtx r = gen_reg_rtx (GET_MODE (ptr->pattern));\n+\t      rtx r = gen_reg_rtx_and_attrs (ptr->pattern);\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Removing redundant store:\\n\");\n \t      replace_store_insn (r, XEXP (st, 0), bb, ptr);\n@@ -6444,7 +6443,7 @@ delete_store (struct ls_expr * expr, basic_block bb)\n   rtx reg, i, del;\n \n   if (expr->reaching_reg == NULL_RTX)\n-    expr->reaching_reg = gen_reg_rtx (GET_MODE (expr->pattern));\n+    expr->reaching_reg = gen_reg_rtx_and_attrs (expr->pattern);\n \n   reg = expr->reaching_reg;\n "}, {"sha": "f043884b15a29adc2dc6792dd969253cc35500b8", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -1,5 +1,5 @@\n /* RTL-level loop invariant motion.\n-   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1193,7 +1193,7 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n \t need to create a temporary register.  */\n       set = single_set (inv->insn);\n       dest = SET_DEST (set);\n-      reg = gen_reg_rtx (GET_MODE (dest));\n+      reg = gen_reg_rtx_and_attrs (dest);\n \n       /* Try replacing the destination by a new pseudoregister.  */\n       if (!validate_change (inv->insn, &SET_DEST (set), reg, false))"}, {"sha": "aaa1a925a9d5e798771525319ba024b2f62a0bc3", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -1502,6 +1502,7 @@ extern rtvec gen_rtvec_v (int, rtx *);\n extern rtx gen_reg_rtx (enum machine_mode);\n extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);\n extern rtx gen_reg_rtx_offset (rtx, enum machine_mode, int);\n+extern rtx gen_reg_rtx_and_attrs (rtx);\n extern rtx gen_label_rtx (void);\n extern rtx gen_lowpart_common (enum machine_mode, rtx);\n "}, {"sha": "f80d0ed1754e06996424fe0e901b47287fefc4a2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b71b0354e0eba0e0b176a80434bb3a953aadb6/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=46b71b0354e0eba0e0b176a80434bb3a953aadb6", "patch": "@@ -1,6 +1,6 @@\n /* Analyze RTL for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software\n    Foundation, Inc.\n \n This file is part of GCC.\n@@ -2898,6 +2898,8 @@ commutative_operand_precedence (rtx op)\n   switch (GET_RTX_CLASS (code))\n     {\n     case RTX_CONST_OBJ:\n+      if (code == SYMBOL_REF)\n+\treturn -1;\n       if (code == CONST_INT)\n         return -6;\n       if (code == CONST_DOUBLE)"}]}