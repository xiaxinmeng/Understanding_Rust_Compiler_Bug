{"sha": "f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5MjMyNTcwYjhiMTBkYWU3M2JmZTU0ZDY3ODJjYmQ0NmEzYzJhYw==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2004-10-14T08:36:09Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2004-10-14T08:36:09Z"}, "message": "tree-vectorizer.c (get_vectype_for_scalar_type): Added debug prinouts.\n\n        * tree-vectorizer.c (get_vectype_for_scalar_type): Added debug prinouts.\n        Added check that vectype is VECTOR_MODE_P, instead of check for BLKmode.\n        (vect_analyze_operations): Make sure the vectorization factor > 1. Add\n        gcc_assert under ENABLE_CHECKING.\n        (vectorizable_operation): Remove check for VECTOR_MODE_P (moved to\n        get_vectype_for_scalar_type).\n\n        (vect_get_vec_def_for_operand): Remove redundant variables.\n        (vect_transform_loop): Likewise.\n\nFrom-SVN: r89032", "tree": {"sha": "fe662c92996bc73d7a9042b8f64869f45b5a0049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe662c92996bc73d7a9042b8f64869f45b5a0049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/comments", "author": null, "committer": null, "parents": [{"sha": "a25036452a7713a01174787b1b13c96eff1534c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25036452a7713a01174787b1b13c96eff1534c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25036452a7713a01174787b1b13c96eff1534c6"}], "stats": {"total": 217, "additions": 195, "deletions": 22}, "files": [{"sha": "e17ef50c710e501440e8f9a31a691d7dc7a882df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -1,3 +1,15 @@\n+2004-10-14  Dorit Naishlos  <dorit@il.bim.com>\n+\n+\t* tree-vectorizer.c (get_vectype_for_scalar_type): Added debug prinouts.\n+\tAdded check that vectype is VECTOR_MODE_P, instead of check for BLKmode.\n+\t(vect_analyze_operations): Make sure the vectorization factor > 1. Add\n+\tgcc_assert under ENABLE_CHECKING.\n+\t(vectorizable_operation): Remove check for VECTOR_MODE_P (moved to\n+\tget_vectype_for_scalar_type).\n+\n+\t(vect_get_vec_def_for_operand): Remove redundant variables.\n+\t(vect_transform_loop): Likewise.\n+\n 2004-10-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Make r11 fixed and"}, {"sha": "141024acf0700824f749d6312d5a37a21b225e43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -1,3 +1,10 @@\n+2004-10-14  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-82.c: New testcase.\t\n+\t* gcc.dg/vect/vect-82_64.c: New testcase.\t\n+\t* gcc.dg/vect/vect-83.c: New testcase.\t\n+\t* gcc.dg/vect/vect-83_64.c: New testcase.\t\n+\n 2004-10-14  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/cpp/error-1.c: New test."}, {"sha": "133005c4f26821a50e2eb326031be5a7e6813f9c", "filename": "gcc/testsuite/gcc.dg/vect/vect-82.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82.c?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  long long unsigned int ca[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = 0;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != 0)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */"}, {"sha": "088e5d896ded185638ba0fe32ef0dbf84218c5f1", "filename": "gcc/testsuite/gcc.dg/vect/vect-82_64.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82_64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82_64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-82_64.c?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -mpowerpc64 -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  long long unsigned int ca[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = 0;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != 0)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "0b65f7660721cc363184109fc3aef7e444bbc6e0", "filename": "gcc/testsuite/gcc.dg/vect/vect-83.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83.c?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  long long unsigned int ca[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = 2;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != 2)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */"}, {"sha": "f74d6992cf36e58f8f3712bd516fa45695f6b707", "filename": "gcc/testsuite/gcc.dg/vect/vect-83_64.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83_64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83_64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-83_64.c?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -mpowerpc64 -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  long long unsigned int ca[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = 2;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != 2)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */"}, {"sha": "dc93116303a20eca82d86945e65411fc9df6d70a", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09232570b8b10dae73bfe54d6782cbd46a3c2ac/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=f09232570b8b10dae73bfe54d6782cbd46a3c2ac", "patch": "@@ -848,8 +848,31 @@ get_vectype_for_scalar_type (tree scalar_type)\n   nunits = UNITS_PER_SIMD_WORD / nbytes;\n \n   vectype = build_vector_type (scalar_type, nunits);\n-  if (TYPE_MODE (vectype) == BLKmode)\n+  if (vect_debug_details (NULL))\n+    {\n+      fprintf (dump_file, \"get vectype with %d units of type \", nunits);\n+      print_generic_expr (dump_file, scalar_type, TDF_SLIM);\n+    }\n+\n+  if (!vectype)\n     return NULL_TREE;\n+\n+  if (vect_debug_details (NULL))\n+    {\n+      fprintf (dump_file, \"vectype: \");\n+      print_generic_expr (dump_file, vectype, TDF_SLIM);\n+    }\n+\n+  if (!VECTOR_MODE_P (TYPE_MODE (vectype)))\n+    {\n+      /* TODO: tree-complex.c sometimes can parallelize operations\n+         on generic vectors.  We can vectorize the loop in that case,\n+         but then we should re-run the lowering pass.  */\n+      if (vect_debug_details (NULL))\n+        fprintf (dump_file, \"mode not supported by target.\");\n+      return NULL_TREE;\n+    }\n+\n   return vectype;\n }\n \n@@ -1157,11 +1180,6 @@ vect_get_vec_def_for_operand (tree op, tree stmt)\n       /* Create 'vect_cst_ = {cst,cst,...,cst}'  */\n \n       tree vec_cst;\n-      stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n-      tree vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n-      int nunits = GET_MODE_NUNITS (TYPE_MODE (vectype));\n-      tree t = NULL_TREE;\n-      int i;\n \n       /* Build a tree with vector elements.  */\n       if (vect_debug_details (NULL))\n@@ -1408,16 +1426,6 @@ vectorizable_operation (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n       return false;\n     }\n   vec_mode = TYPE_MODE (vectype);\n-  if (!VECTOR_MODE_P (vec_mode))\n-    {\n-      /* TODO: tree-complex.c sometimes can parallelize operations\n-\t on generic vectors.  We can vectorize the loop in that case,\n-\t but then we should re-run the lowering pass.  */\n-      if (vect_debug_details (NULL))\n-\tfprintf (dump_file, \"mode not supported by target.\");\n-      return false;\n-    }\n-\n   if (optab->handlers[(int) vec_mode].insn_code == CODE_FOR_nothing)\n     {\n       if (vect_debug_details (NULL))\n@@ -1905,9 +1913,6 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n \t  tree stmt = bsi_stmt (si);\n \t  stmt_vec_info stmt_info;\n \t  bool is_store;\n-#ifdef ENABLE_CHECKING\n-\t  tree vectype;\n-#endif\n \n \t  if (vect_debug_details (NULL))\n \t    {\n@@ -1924,8 +1929,7 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n #ifdef ENABLE_CHECKING\n \t  /* FORNOW: Verify that all stmts operate on the same number of\n \t             units and no inner unrolling is necessary.  */\n-\t  vectype = STMT_VINFO_VECTYPE (stmt_info);\n-\t  gcc_assert (GET_MODE_NUNITS (TYPE_MODE (vectype))\n+\t  gcc_assert (GET_MODE_NUNITS (TYPE_MODE (STMT_VINFO_VECTYPE (stmt_info)))\n \t\t      == vectorization_factor);\n #endif\n \t  /* -------- vectorize statement ------------ */\n@@ -2155,11 +2159,17 @@ vect_analyze_operations (loop_vec_info loop_vinfo)\n \t    }\n \t  else\n \t    vectorization_factor = nunits;\n+\n+#ifdef ENABLE_CHECKING\n+\t  gcc_assert (GET_MODE_SIZE (TYPE_MODE (scalar_type))\n+\t\t\t* vectorization_factor == UNITS_PER_SIMD_WORD);\n+#endif\n \t}\n     }\n \n   /* TODO: Analyze cost. Decide if worth while to vectorize.  */\n-  if (!vectorization_factor)\n+\n+  if (vectorization_factor <= 1)\n     {\n       if (vect_debug_stats (loop) || vect_debug_details (loop))\n         fprintf (dump_file, \"not vectorized: unsupported data-type\");"}]}