{"sha": "896dff99e18d67afdbe4d1effec20a3da474b22b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2ZGZmOTllMThkNjdhZmRiZTRkMWVmZmVjMjBhM2RhNDc0YjIyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-30T15:46:28Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-31T17:40:40Z"}, "message": "aarch64: Add Armv8.6 SVE bfloat16 support\n\nThis patch adds support for the SVE intrinsics that map to Armv8.6\nbfloat16 instructions.  This means that svcvtnt is now a base SVE\nfunction for one type suffix combination; the others are still\nSVE2-specific.\n\nThis relies on a binutils fix:\n\n    https://sourceware.org/ml/binutils/2020-01/msg00450.html\n\nso anyone testing older binutils 2.34 or binutils master sources will\nneed to upgrade to get clean test results.  (At the time of writing,\nno released version of binutils has this bug.)\n\n2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.h (TARGET_SVE_BF16): New macro.\n\t* config/aarch64/aarch64-sve-builtins-sve2.h (svcvtnt): Move to\n\taarch64-sve-builtins-base.h.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc (svcvtnt): Move to\n\taarch64-sve-builtins-base.cc.\n\t* config/aarch64/aarch64-sve-builtins-base.h (svbfdot, svbfdot_lane)\n\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n\t(svcvtnt): Declare.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (svbfdot, svbfdot_lane)\n\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n\t(svcvtnt): New functions.\n\t* config/aarch64/aarch64-sve-builtins-base.def (svbfdot, svbfdot_lane)\n\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n\t(svcvtnt): New functions.\n\t(svcvt): Add a form that converts f32 to bf16.\n\t* config/aarch64/aarch64-sve-builtins-shapes.h (ternary_bfloat)\n\t(ternary_bfloat_lane, ternary_bfloat_lanex2, ternary_bfloat_opt_n):\n\tDeclare.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc (parse_element_type):\n\tTreat B as bfloat16_t.\n\t(ternary_bfloat_lane_base): New class.\n\t(ternary_bfloat_def): Likewise.\n\t(ternary_bfloat): New shape.\n\t(ternary_bfloat_lane_def): New class.\n\t(ternary_bfloat_lane): New shape.\n\t(ternary_bfloat_lanex2_def): New class.\n\t(ternary_bfloat_lanex2): New shape.\n\t(ternary_bfloat_opt_n_def): New class.\n\t(ternary_bfloat_opt_n): New shape.\n\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_cvt_bfloat): New macro.\n\t* config/aarch64/aarch64-sve.md (@aarch64_sve_<sve_fp_op>vnx4sf)\n\t(@aarch64_sve_<sve_fp_op>_lanevnx4sf): New patterns.\n\t(@aarch64_sve_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>)\n\t(@cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>): Likewise.\n\t(*cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>): Likewise.\n\t(@aarch64_sve_cvtnt<VNx8BF_ONLY:mode>): Likewise.\n\t* config/aarch64/aarch64-sve2.md (@aarch64_sve2_cvtnt<mode>): Key\n\tthe pattern off the narrow mode instead of the wider one.\n\t* config/aarch64/iterators.md (VNx8BF_ONLY): New mode iterator.\n\t(UNSPEC_BFMLALB, UNSPEC_BFMLALT, UNSPEC_BFMMLA): New unspecs.\n\t(sve_fp_op): Handle them.\n\t(SVE_BFLOAT_TERNARY_LONG): New int itertor.\n\t(SVE_BFLOAT_TERNARY_LONG_LANE): Likewise.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_aarch64_asm_bf16_ok):\n\tNew proc.\n\t* gcc.target/aarch64/sve/acle/asm/bfdot_f32.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/bfdot_lane_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/bfmlalb_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/bfmlalb_lane_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/bfmlalt_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/bfmlalt_lane_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/bfmmla_f32.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/cvt_bf16.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/asm/cvtnt_bf16.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_1.c: Likweise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lane_1.c:\n\tLikweise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lanex2_1.c:\n\tLikweise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c:\n\tLikweise.", "tree": {"sha": "a9748a224c469e33702b6bdb082dd12e444bc897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9748a224c469e33702b6bdb082dd12e444bc897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896dff99e18d67afdbe4d1effec20a3da474b22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896dff99e18d67afdbe4d1effec20a3da474b22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896dff99e18d67afdbe4d1effec20a3da474b22b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896dff99e18d67afdbe4d1effec20a3da474b22b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fcd8ac408be56d2a6e67e2e09b26532862f233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fcd8ac408be56d2a6e67e2e09b26532862f233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fcd8ac408be56d2a6e67e2e09b26532862f233"}], "stats": {"total": 1123, "additions": 1112, "deletions": 11}, "files": [{"sha": "234e32844ff952938698928d858b275f1682df42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -1,3 +1,49 @@\n+2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.h (TARGET_SVE_BF16): New macro.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.h (svcvtnt): Move to\n+\taarch64-sve-builtins-base.h.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc (svcvtnt): Move to\n+\taarch64-sve-builtins-base.cc.\n+\t* config/aarch64/aarch64-sve-builtins-base.h (svbfdot, svbfdot_lane)\n+\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n+\t(svcvtnt): Declare.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svbfdot, svbfdot_lane)\n+\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n+\t(svcvtnt): New functions.\n+\t* config/aarch64/aarch64-sve-builtins-base.def (svbfdot, svbfdot_lane)\n+\t(svbfmlalb, svbfmlalb_lane, svbfmlalt, svbfmlalt_lane, svbfmmla)\n+\t(svcvtnt): New functions.\n+\t(svcvt): Add a form that converts f32 to bf16.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.h (ternary_bfloat)\n+\t(ternary_bfloat_lane, ternary_bfloat_lanex2, ternary_bfloat_opt_n):\n+\tDeclare.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc (parse_element_type):\n+\tTreat B as bfloat16_t.\n+\t(ternary_bfloat_lane_base): New class.\n+\t(ternary_bfloat_def): Likewise.\n+\t(ternary_bfloat): New shape.\n+\t(ternary_bfloat_lane_def): New class.\n+\t(ternary_bfloat_lane): New shape.\n+\t(ternary_bfloat_lanex2_def): New class.\n+\t(ternary_bfloat_lanex2): New shape.\n+\t(ternary_bfloat_opt_n_def): New class.\n+\t(ternary_bfloat_opt_n): New shape.\n+\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_cvt_bfloat): New macro.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_sve_<sve_fp_op>vnx4sf)\n+\t(@aarch64_sve_<sve_fp_op>_lanevnx4sf): New patterns.\n+\t(@aarch64_sve_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>)\n+\t(@cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>): Likewise.\n+\t(*cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>): Likewise.\n+\t(@aarch64_sve_cvtnt<VNx8BF_ONLY:mode>): Likewise.\n+\t* config/aarch64/aarch64-sve2.md (@aarch64_sve2_cvtnt<mode>): Key\n+\tthe pattern off the narrow mode instead of the wider one.\n+\t* config/aarch64/iterators.md (VNx8BF_ONLY): New mode iterator.\n+\t(UNSPEC_BFMLALB, UNSPEC_BFMLALT, UNSPEC_BFMMLA): New unspecs.\n+\t(sve_fp_op): Handle them.\n+\t(SVE_BFLOAT_TERNARY_LONG): New int itertor.\n+\t(SVE_BFLOAT_TERNARY_LONG_LANE): Likewise.\n+\n 2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/arm_sve.h: Include arm_bf16.h."}, {"sha": "9b63ea76ecd4c1cc3484d0ae6c4185db62cc9b34", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -2544,6 +2544,16 @@ FUNCTION (svandv, reduction, (UNSPEC_ANDV))\n FUNCTION (svasr, rtx_code_function, (ASHIFTRT, ASHIFTRT))\n FUNCTION (svasr_wide, shift_wide, (ASHIFTRT, UNSPEC_ASHIFTRT_WIDE))\n FUNCTION (svasrd, unspec_based_function, (UNSPEC_ASRD, -1, -1))\n+FUNCTION (svbfdot, fixed_insn_function, (CODE_FOR_aarch64_sve_bfdotvnx4sf))\n+FUNCTION (svbfdot_lane, fixed_insn_function,\n+\t  (CODE_FOR_aarch64_sve_bfdot_lanevnx4sf))\n+FUNCTION (svbfmlalb, fixed_insn_function, (CODE_FOR_aarch64_sve_bfmlalbvnx4sf))\n+FUNCTION (svbfmlalb_lane, fixed_insn_function,\n+\t  (CODE_FOR_aarch64_sve_bfmlalb_lanevnx4sf))\n+FUNCTION (svbfmlalt, fixed_insn_function, (CODE_FOR_aarch64_sve_bfmlaltvnx4sf))\n+FUNCTION (svbfmlalt_lane, fixed_insn_function,\n+\t  (CODE_FOR_aarch64_sve_bfmlalt_lanevnx4sf))\n+FUNCTION (svbfmmla, fixed_insn_function, (CODE_FOR_aarch64_sve_bfmmlavnx4sf))\n FUNCTION (svbic, svbic_impl,)\n FUNCTION (svbrka, svbrk_unary_impl, (UNSPEC_BRKA))\n FUNCTION (svbrkb, svbrk_unary_impl, (UNSPEC_BRKB))\n@@ -2592,6 +2602,7 @@ FUNCTION (svcreate2, svcreate_impl, (2))\n FUNCTION (svcreate3, svcreate_impl, (3))\n FUNCTION (svcreate4, svcreate_impl, (4))\n FUNCTION (svcvt, svcvt_impl,)\n+FUNCTION (svcvtnt, CODE_FOR_MODE0 (aarch64_sve_cvtnt),)\n FUNCTION (svdiv, rtx_code_function, (DIV, UDIV, UNSPEC_COND_FDIV))\n FUNCTION (svdivr, rtx_code_function_rotated, (DIV, UDIV, UNSPEC_COND_FDIV))\n FUNCTION (svdot, svdot_impl,)"}, {"sha": "27ab05d4ef207b8c8409a0b77c768ab66a774dcf", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -318,6 +318,18 @@ DEF_SVE_FUNCTION (svzip2, binary, all_data, none)\n DEF_SVE_FUNCTION (svzip2, binary_pred, all_pred, none)\n #undef REQUIRED_EXTENSIONS\n \n+#define REQUIRED_EXTENSIONS AARCH64_FL_BF16\n+DEF_SVE_FUNCTION (svbfdot, ternary_bfloat_opt_n, s_float, none)\n+DEF_SVE_FUNCTION (svbfdot_lane, ternary_bfloat_lanex2, s_float, none)\n+DEF_SVE_FUNCTION (svbfmlalb, ternary_bfloat_opt_n, s_float, none)\n+DEF_SVE_FUNCTION (svbfmlalb_lane, ternary_bfloat_lane, s_float, none)\n+DEF_SVE_FUNCTION (svbfmlalt, ternary_bfloat_opt_n, s_float, none)\n+DEF_SVE_FUNCTION (svbfmlalt_lane, ternary_bfloat_lane, s_float, none)\n+DEF_SVE_FUNCTION (svbfmmla, ternary_bfloat, s_float, none)\n+DEF_SVE_FUNCTION (svcvt, unary_convert, cvt_bfloat, mxz)\n+DEF_SVE_FUNCTION (svcvtnt, unary_convert_narrowt, cvt_bfloat, mx)\n+#undef REQUIRED_EXTENSIONS\n+\n #define REQUIRED_EXTENSIONS AARCH64_FL_I8MM\n DEF_SVE_FUNCTION (svmmla, mmla, s_integer, none)\n DEF_SVE_FUNCTION (svusmmla, ternary_uintq_intq, s_signed, none)"}, {"sha": "957ace8ed645b22825b96cebe48402de526e3f8a", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -42,6 +42,13 @@ namespace aarch64_sve\n     extern const function_base *const svasr;\n     extern const function_base *const svasr_wide;\n     extern const function_base *const svasrd;\n+    extern const function_base *const svbfdot;\n+    extern const function_base *const svbfdot_lane;\n+    extern const function_base *const svbfmlalb;\n+    extern const function_base *const svbfmlalb_lane;\n+    extern const function_base *const svbfmlalt;\n+    extern const function_base *const svbfmlalt_lane;\n+    extern const function_base *const svbfmmla;\n     extern const function_base *const svbic;\n     extern const function_base *const svbrka;\n     extern const function_base *const svbrkb;\n@@ -84,6 +91,7 @@ namespace aarch64_sve\n     extern const function_base *const svcreate3;\n     extern const function_base *const svcreate4;\n     extern const function_base *const svcvt;\n+    extern const function_base *const svcvtnt;\n     extern const function_base *const svdiv;\n     extern const function_base *const svdivr;\n     extern const function_base *const svdot;"}, {"sha": "5f8c85d213ece1c19d44946f19e8ac1dfac3fc51", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -78,6 +78,7 @@ apply_predication (const function_instance &instance, tree return_type,\n    [01]    - the element type in type suffix 0 or 1 of INSTANCE\n    f<bits> - a floating-point type with the given number of bits\n    f[01]   - a floating-point type with the same width as type suffix 0 or 1\n+   B       - bfloat16_t\n    h<elt>  - a half-sized version of <elt>\n    p       - a predicate (represented as TYPE_SUFFIX_b)\n    q<elt>  - a quarter-sized version of <elt>\n@@ -117,6 +118,9 @@ parse_element_type (const function_instance &instance, const char *&format)\n   if (ch == 'p')\n     return TYPE_SUFFIX_b;\n \n+  if (ch == 'B')\n+    return TYPE_SUFFIX_bf16;\n+\n   if (ch == 'q')\n     {\n       type_suffix_index suffix = parse_element_type (instance, format);\n@@ -921,6 +925,26 @@ struct ternary_resize2_lane_base : public overloaded_base<0>\n   }\n };\n \n+/* A specialization of ternary_resize2_lane_base for bfloat16 elements,\n+   indexed in groups of N elements.  */\n+template<unsigned int N>\n+struct ternary_bfloat_lane_base\n+  : public ternary_resize2_lane_base<16, TYPE_bfloat, TYPE_bfloat>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vB,vB,su64\", group, MODE_none);\n+  }\n+\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_lane_index (3, N);\n+  }\n+};\n+\n /* A specialization of ternary_resize2_lane_base for quarter-sized\n    elements.  */\n template<type_class_index TYPE_CLASS2 = function_resolver::SAME_TYPE_CLASS,\n@@ -2695,6 +2719,48 @@ struct tbl_tuple_def : public overloaded_base<0>\n };\n SHAPE (tbl_tuple)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, svbfloatt16_t, svbfloat16_t).  */\n+struct ternary_bfloat_def\n+  : public ternary_resize2_base<16, TYPE_bfloat, TYPE_bfloat>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vB,vB\", group, MODE_none);\n+  }\n+};\n+SHAPE (ternary_bfloat)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, svbfloat16_t, svbfloat16_t, uint64_t)\n+\n+   where the final argument is an integer constant expression in the range\n+   [0, 7].  */\n+typedef ternary_bfloat_lane_base<1> ternary_bfloat_lane_def;\n+SHAPE (ternary_bfloat_lane)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, svbfloat16_t, svbfloat16_t, uint64_t)\n+\n+   where the final argument is an integer constant expression in the range\n+   [0, 3].  */\n+typedef ternary_bfloat_lane_base<2> ternary_bfloat_lanex2_def;\n+SHAPE (ternary_bfloat_lanex2)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, svbfloatt16_t, svbfloat16_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, svbfloat16_t, bfloat16_t).  */\n+struct ternary_bfloat_opt_n_def\n+  : public ternary_resize2_opt_n_base<16, TYPE_bfloat, TYPE_bfloat>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vB,vB\", group, MODE_none);\n+    build_all (b, \"v0,v0,vB,sB\", group, MODE_n);\n+  }\n+};\n+SHAPE (ternary_bfloat_opt_n)\n+\n /* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:int:quarter>_t, sv<t0:uint:quarter>_t,\n \t\t       uint64_t)\n "}, {"sha": "3a19982ea2b79769266773d42997e2ecca0a02ca", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -148,6 +148,10 @@ namespace aarch64_sve\n     extern const function_shape *const store_scatter_offset;\n     extern const function_shape *const store_scatter_offset_restricted;\n     extern const function_shape *const tbl_tuple;\n+    extern const function_shape *const ternary_bfloat;\n+    extern const function_shape *const ternary_bfloat_lane;\n+    extern const function_shape *const ternary_bfloat_lanex2;\n+    extern const function_shape *const ternary_bfloat_opt_n;\n     extern const function_shape *const ternary_intq_uintq_lane;\n     extern const function_shape *const ternary_intq_uintq_opt_n;\n     extern const function_shape *const ternary_lane;"}, {"sha": "9e7219cfecb56495a85e40e8eacf4bcfdad36014", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -487,7 +487,6 @@ FUNCTION (svbsl2n, CODE_FOR_MODE0 (aarch64_sve2_bsl2n),)\n FUNCTION (svcdot, svcdot_impl,)\n FUNCTION (svcdot_lane, svcdot_lane_impl,)\n FUNCTION (svcvtlt, unspec_based_function, (-1, -1, UNSPEC_COND_FCVTLT))\n-FUNCTION (svcvtnt, CODE_FOR_MODE1 (aarch64_sve2_cvtnt),)\n FUNCTION (svcvtx, unspec_based_function, (-1, -1, UNSPEC_COND_FCVTX))\n FUNCTION (svcvtxnt, CODE_FOR_MODE1 (aarch64_sve2_cvtxnt),)\n FUNCTION (sveor3, CODE_FOR_MODE0 (aarch64_sve2_eor3),)"}, {"sha": "06d4a9369ffcf86308ac6c5ea4e4d7e24bd9cc0e", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -54,7 +54,6 @@ namespace aarch64_sve\n     extern const function_base *const svcdot;\n     extern const function_base *const svcdot_lane;\n     extern const function_base *const svcvtlt;\n-    extern const function_base *const svcvtnt;\n     extern const function_base *const svcvtx;\n     extern const function_base *const svcvtxnt;\n     extern const function_base *const sveor3;"}, {"sha": "2c5543b6e6ad9abf61541ae07be1b1024473f226", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -354,6 +354,10 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n   D (u32, f16), D (u32, f32), D (u32, f64), \\\n   D (u64, f16), D (u64, f32), D (u64, f64)\n \n+/* _bf16_f32.  */\n+#define TYPES_cvt_bfloat(S, D) \\\n+  D (bf16, f32)\n+\n /* _f32_f16\n    _f64_f32.  */\n #define TYPES_cvt_long(S, D) \\\n@@ -471,6 +475,7 @@ DEF_SVE_TYPES_ARRAY (d_unsigned);\n DEF_SVE_TYPES_ARRAY (d_integer);\n DEF_SVE_TYPES_ARRAY (d_data);\n DEF_SVE_TYPES_ARRAY (cvt);\n+DEF_SVE_TYPES_ARRAY (cvt_bfloat);\n DEF_SVE_TYPES_ARRAY (cvt_long);\n DEF_SVE_TYPES_ARRAY (cvt_narrow_s);\n DEF_SVE_TYPES_ARRAY (cvt_narrow);"}, {"sha": "fa3852992e1341a68b927db81f2712091dbf72ce", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -115,6 +115,7 @@\n ;; ---- [FP] General ternary arithmetic corresponding to unspecs\n ;; ---- [FP] Complex multiply-add\n ;; ---- [FP] Trigonometric multiply-add\n+;; ---- [FP] Bfloat16 long ternary arithmetic (SF,BF,BF)\n ;; ---- [FP] Matrix multiply-accumulate\n ;;\n ;; == Comparisons and selects\n@@ -150,6 +151,7 @@\n ;; ---- [FP<-INT] Packs\n ;; ---- [FP<-INT] Unpacks\n ;; ---- [FP<-FP] Packs\n+;; ---- [FP<-FP] Packs (bfloat16)\n ;; ---- [FP<-FP] Unpacks\n ;; ---- [PRED<-PRED] Packs\n ;; ---- [PRED<-PRED] Unpacks\n@@ -6547,6 +6549,46 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Bfloat16 long ternary arithmetic (SF,BF,BF)\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - BFDOT (BF16)\n+;; - BFMLALB (BF16)\n+;; - BFMLALT (BF16)\n+;; - BFMMLA (BF16)\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_fp_op>vnx4sf\"\n+  [(set (match_operand:VNx4SF 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:VNx4SF\n+\t  [(match_operand:VNx4SF 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:VNx8BF 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:VNx8BF 3 \"register_operand\" \"w, w\")]\n+\t  SVE_BFLOAT_TERNARY_LONG))]\n+  \"TARGET_SVE_BF16\"\n+  \"@\n+   <sve_fp_op>\\t%0.s, %2.h, %3.h\n+   movprfx\\t%0, %1\\;<sve_fp_op>\\t%0.s, %2.h, %3.h\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; The immediate range is enforced before generating the instruction.\n+(define_insn \"@aarch64_sve_<sve_fp_op>_lanevnx4sf\"\n+  [(set (match_operand:VNx4SF 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:VNx4SF\n+\t  [(match_operand:VNx4SF 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:VNx8BF 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:VNx8BF 3 \"register_operand\" \"y, y\")\n+\t   (match_operand:SI 4 \"const_int_operand\")]\n+\t  SVE_BFLOAT_TERNARY_LONG_LANE))]\n+  \"TARGET_SVE_BF16\"\n+  \"@\n+   <sve_fp_op>\\t%0.s, %2.h, %3.h[%4]\n+   movprfx\\t%0, %1\\;<sve_fp_op>\\t%0.s, %2.h, %3.h[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Matrix multiply-accumulate\n ;; -------------------------------------------------------------------------\n@@ -8109,6 +8151,77 @@\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP<-FP] Packs (bfloat16)\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - BFCVT (BF16)\n+;; - BFCVTNT (BF16)\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated BFCVT.\n+(define_insn \"@aarch64_sve_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>\"\n+  [(set (match_operand:VNx8BF_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx8BF_ONLY\n+\t  [(match_operand:VNx4BI 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:VNx4SF_ONLY 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FCVT))]\n+  \"TARGET_SVE_BF16\"\n+  \"bfcvt\\t%0.h, %1/m, %2.s\"\n+)\n+\n+;; Predicated BFCVT with merging.\n+(define_expand \"@cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>\"\n+  [(set (match_operand:VNx8BF_ONLY 0 \"register_operand\")\n+\t(unspec:VNx8BF_ONLY\n+\t  [(match_operand:VNx4BI 1 \"register_operand\")\n+\t   (unspec:VNx8BF_ONLY\n+\t     [(match_dup 1)\n+\t      (const_int SVE_STRICT_GP)\n+\t      (match_operand:VNx4SF_ONLY 2 \"register_operand\")]\n+\t     SVE_COND_FCVT)\n+\t   (match_operand:VNx8BF_ONLY 3 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE_BF16\"\n+)\n+\n+(define_insn \"*cond_<optab>_trunc<VNx4SF_ONLY:mode><VNx8BF_ONLY:mode>\"\n+  [(set (match_operand:VNx8BF_ONLY 0 \"register_operand\" \"=w, ?&w, ?&w\")\n+\t(unspec:VNx8BF_ONLY\n+\t  [(match_operand:VNx4BI 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:VNx8BF_ONLY\n+\t     [(match_dup 1)\n+\t      (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:VNx4SF_ONLY 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE_COND_FCVT)\n+\t   (match_operand:VNx8BF_ONLY 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE_BF16\"\n+  \"@\n+   bfcvt\\t%0.h, %1/m, %2.s\n+   movprfx\\t%0.s, %1/z, %2.s\\;bfcvt\\t%0.h, %1/m, %2.s\n+   movprfx\\t%0, %3\\;bfcvt\\t%0.h, %1/m, %2.s\"\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n+;; Predicated BFCVTNT.  This doesn't give a natural aarch64_pred_*/cond_*\n+;; pair because the even elements always have to be supplied for active\n+;; elements, even if the inactive elements don't matter.\n+;;\n+;; This instructions does not take MOVPRFX.\n+(define_insn \"@aarch64_sve_cvtnt<mode>\"\n+  [(set (match_operand:VNx8BF_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx8BF_ONLY\n+\t  [(match_operand:VNx4BI 2 \"register_operand\" \"Upl\")\n+\t   (const_int SVE_STRICT_GP)\n+\t   (match_operand:VNx8BF_ONLY 1 \"register_operand\" \"0\")\n+\t   (match_operand:VNx4SF 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_COND_FCVTNT))]\n+  \"TARGET_SVE_BF16\"\n+  \"bfcvtnt\\t%0.h, %2/m, %3.s\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP<-FP] Unpacks\n ;; -------------------------------------------------------------------------"}, {"sha": "f82e60e25c79bbe18a4257807f78368116ec6d68", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -1921,16 +1921,16 @@\n ;; elements, even if the inactive elements don't matter.\n ;;\n ;; These instructions do not take MOVPRFX.\n-(define_insn \"@aarch64_sve2_cvtnt<mode>\"\n-  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VNARROW>\n-\t  [(match_operand:<VPRED> 2 \"register_operand\" \"Upl\")\n+(define_insn \"@aarch64_sve_cvtnt<mode>\"\n+  [(set (match_operand:SVE_FULL_HSF 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HSF\n+\t  [(match_operand:<VWIDE_PRED> 2 \"register_operand\" \"Upl\")\n \t   (const_int SVE_STRICT_GP)\n-\t   (match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n-\t   (match_operand:SVE_FULL_SDF 3 \"register_operand\" \"w\")]\n+\t   (match_operand:SVE_FULL_HSF 1 \"register_operand\" \"0\")\n+\t   (match_operand:<VWIDE> 3 \"register_operand\" \"w\")]\n \t  UNSPEC_COND_FCVTNT))]\n   \"TARGET_SVE2\"\n-  \"fcvtnt\\t%0.<Ventype>, %2/m, %3.<Vetype>\"\n+  \"fcvtnt\\t%0.<Vetype>, %2/m, %3.<Vewtype>\"\n )\n \n ;; Predicated FCVTX (equivalent to what would be FCVTXNB, except that"}, {"sha": "8f08bad3562c4cbe8acdf5891e84f89d23ea6784", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -362,6 +362,7 @@ extern unsigned aarch64_architecture_version;\n /* BF16 instructions are enabled through +bf16.  */\n #define TARGET_BF16_FP (AARCH64_ISA_BF16)\n #define TARGET_BF16_SIMD (AARCH64_ISA_BF16 && TARGET_SIMD)\n+#define TARGET_SVE_BF16 (TARGET_SVE && AARCH64_ISA_BF16)\n \n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */"}, {"sha": "3e3fd9d0cd26185d92be264b27321b28f4c99e46", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -314,6 +314,7 @@\n ;; Iterators for single modes, for \"@\" patterns.\n (define_mode_iterator VNx16QI_ONLY [VNx16QI])\n (define_mode_iterator VNx8HI_ONLY [VNx8HI])\n+(define_mode_iterator VNx8BF_ONLY [VNx8BF])\n (define_mode_iterator VNx4SI_ONLY [VNx4SI])\n (define_mode_iterator VNx4SF_ONLY [VNx4SF])\n (define_mode_iterator VNx2DI_ONLY [VNx2DI])\n@@ -820,6 +821,9 @@\n     UNSPEC_USDOT\t; Used in aarch64-simd.md.\n     UNSPEC_SUDOT\t; Used in aarch64-simd.md.\n     UNSPEC_BFDOT\t; Used in aarch64-simd.md.\n+    UNSPEC_BFMLALB\t; Used in aarch64-sve.md.\n+    UNSPEC_BFMLALT\t; Used in aarch64-sve.md.\n+    UNSPEC_BFMMLA\t; Used in aarch64-sve.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -2235,6 +2239,15 @@\n \n (define_int_iterator SVE_FP_BINARY_INT [UNSPEC_FTSMUL UNSPEC_FTSSEL])\n \n+(define_int_iterator SVE_BFLOAT_TERNARY_LONG [UNSPEC_BFDOT\n+\t\t\t\t\t      UNSPEC_BFMLALB\n+\t\t\t\t\t      UNSPEC_BFMLALT\n+\t\t\t\t\t      UNSPEC_BFMMLA])\n+\n+(define_int_iterator SVE_BFLOAT_TERNARY_LONG_LANE [UNSPEC_BFDOT\n+\t\t\t\t\t\t   UNSPEC_BFMLALB\n+\t\t\t\t\t\t   UNSPEC_BFMLALT])\n+\n (define_int_iterator SVE_INT_REDUCTION [UNSPEC_ANDV\n \t\t\t\t\tUNSPEC_IORV\n \t\t\t\t\tUNSPEC_SMAXV\n@@ -3225,7 +3238,11 @@\n \t\t\t\t  (UNSPEC_SQDMULLBT \"sqdmlslbt\")\n \t\t\t\t  (UNSPEC_SQDMULLT \"sqdmlslt\")])\n \n-(define_int_attr sve_fp_op [(UNSPEC_FRECPE \"frecpe\")\n+(define_int_attr sve_fp_op [(UNSPEC_BFDOT \"bfdot\")\n+\t\t\t    (UNSPEC_BFMLALB \"bfmlalb\")\n+\t\t\t    (UNSPEC_BFMLALT \"bfmlalt\")\n+\t\t\t    (UNSPEC_BFMMLA \"bfmmla\")\n+\t\t\t    (UNSPEC_FRECPE \"frecpe\")\n \t\t\t    (UNSPEC_FRECPS \"frecps\")\n \t\t\t    (UNSPEC_RSQRTE \"frsqrte\")\n \t\t\t    (UNSPEC_RSQRTS \"frsqrts\")"}, {"sha": "b23973461d983170c28669030e9040a954420212", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -1,3 +1,24 @@\n+2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_aarch64_asm_bf16_ok):\n+\tNew proc.\n+\t* gcc.target/aarch64/sve/acle/asm/bfdot_f32.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/bfdot_lane_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/bfmlalb_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/bfmlalb_lane_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/bfmlalt_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/bfmlalt_lane_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/bfmmla_f32.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/cvt_bf16.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/asm/cvtnt_bf16.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_1.c: Likweise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lane_1.c:\n+\tLikweise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lanex2_1.c:\n+\tLikweise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c:\n+\tLikweise.\n+\n 2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.target/aarch64/sve/acle/general-c++/mangle_1.C: Test mangling"}, {"sha": "376622da0a4e00f28adea66c434fbacffdfbbecd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfdot_f32.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfdot_f32_tied1:\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_f32 (z0, z4, z5),\n+\t     z0 = svbfdot (z0, z4, z5))\n+\n+/*\n+** bfdot_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfdot\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfdot_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfdot_f32 (z4, z0, z1),\n+\t\t z0_res = svbfdot (z4, z0, z1))\n+\n+/*\n+** bfdot_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfdot\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfdot_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfdot_f32 (z4, z1, z0),\n+\t\t z0_res = svbfdot (z4, z1, z0))\n+\n+/*\n+** bfdot_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_f32 (z1, z4, z5),\n+\t     z0 = svbfdot (z1, z4, z5))\n+\n+/*\n+** bfdot_h7_f32_tied1:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tbfdot\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfdot_h7_f32_tied1, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfdot_n_f32 (z0, z4, d7),\n+\t      z0 = svbfdot (z0, z4, d7))\n+\n+/*\n+** bfdot_h7_f32_untied:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tmovprfx\tz0, z1\n+**\tbfdot\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfdot_h7_f32_untied, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfdot_n_f32 (z1, z4, d7),\n+\t      z0 = svbfdot (z1, z4, d7))"}, {"sha": "0f624fe9ff3792a8751849aa8e6a49e337c6be5a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfdot_lane_f32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfdot_lane_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfdot_lane_0_f32_tied1:\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_lane_0_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_lane_f32 (z0, z4, z5, 0),\n+\t     z0 = svbfdot_lane (z0, z4, z5, 0))\n+\n+/*\n+** bfdot_lane_0_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfdot\tz0\\.s, \\1\\.h, z1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfdot_lane_0_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfdot_lane_f32 (z4, z0, z1, 0),\n+\t\t z0_res = svbfdot_lane (z4, z0, z1, 0))\n+\n+/*\n+** bfdot_lane_0_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfdot\tz0\\.s, z1\\.h, \\1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfdot_lane_0_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfdot_lane_f32 (z4, z1, z0, 0),\n+\t\t z0_res = svbfdot_lane (z4, z1, z0, 0))\n+\n+/*\n+** bfdot_lane_0_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_lane_0_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_lane_f32 (z1, z4, z5, 0),\n+\t     z0 = svbfdot_lane (z1, z4, z5, 0))\n+\n+/*\n+** bfdot_lane_1_f32:\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_lane_1_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_lane_f32 (z0, z4, z5, 1),\n+\t     z0 = svbfdot_lane (z0, z4, z5, 1))\n+\n+/*\n+** bfdot_lane_3_f32:\n+**\tbfdot\tz0\\.s, z4\\.h, z5\\.h\\[3\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfdot_lane_3_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfdot_lane_f32 (z0, z4, z5, 3),\n+\t     z0 = svbfdot_lane (z0, z4, z5, 3))\n+\n+/*\n+** bfdot_lane_z8_f32:\n+**\tstr\td8, \\[sp, -16\\]!\n+**\tmov\t(z[0-7])\\.d, z8\\.d\n+**\tbfdot\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tldr\td8, \\[sp\\], 16\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfdot_lane_z8_f32, svfloat32_t, svbfloat16_t, z8,\n+\t\t    z0 = svbfdot_lane_f32 (z0, z1, z8, 1),\n+\t\t    z0 = svbfdot_lane (z0, z1, z8, 1))\n+\n+/*\n+** bfdot_lane_z16_f32:\n+**\tmov\t(z[0-7])\\.d, z16\\.d\n+**\tbfdot\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfdot_lane_z16_f32, svfloat32_t, svbfloat16_t, z16,\n+\t\t    z0 = svbfdot_lane_f32 (z0, z1, z16, 1),\n+\t\t    z0 = svbfdot_lane (z0, z1, z16, 1))"}, {"sha": "0f810116cc5ad4e516b6b28514865105124e1a52", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfmlalb_f32.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfmlalb_f32_tied1:\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_f32 (z0, z4, z5),\n+\t     z0 = svbfmlalb (z0, z4, z5))\n+\n+/*\n+** bfmlalb_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalb\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalb_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalb_f32 (z4, z0, z1),\n+\t\t z0_res = svbfmlalb (z4, z0, z1))\n+\n+/*\n+** bfmlalb_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalb\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalb_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalb_f32 (z4, z1, z0),\n+\t\t z0_res = svbfmlalb (z4, z1, z0))\n+\n+/*\n+** bfmlalb_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_f32 (z1, z4, z5),\n+\t     z0 = svbfmlalb (z1, z4, z5))\n+\n+/*\n+** bfmlalb_h7_f32_tied1:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tbfmlalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfmlalb_h7_f32_tied1, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfmlalb_n_f32 (z0, z4, d7),\n+\t      z0 = svbfmlalb (z0, z4, d7))\n+\n+/*\n+** bfmlalb_h7_f32_untied:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tmovprfx\tz0, z1\n+**\tbfmlalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfmlalb_h7_f32_untied, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfmlalb_n_f32 (z1, z4, d7),\n+\t      z0 = svbfmlalb (z1, z4, d7))"}, {"sha": "b0ec0881d65e62aa3a7022402c160c0ed34ef6fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfmlalb_lane_f32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalb_lane_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfmlalb_lane_0_f32_tied1:\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_lane_0_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_lane_f32 (z0, z4, z5, 0),\n+\t     z0 = svbfmlalb_lane (z0, z4, z5, 0))\n+\n+/*\n+** bfmlalb_lane_0_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalb\tz0\\.s, \\1\\.h, z1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalb_lane_0_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalb_lane_f32 (z4, z0, z1, 0),\n+\t\t z0_res = svbfmlalb_lane (z4, z0, z1, 0))\n+\n+/*\n+** bfmlalb_lane_0_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalb\tz0\\.s, z1\\.h, \\1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalb_lane_0_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalb_lane_f32 (z4, z1, z0, 0),\n+\t\t z0_res = svbfmlalb_lane (z4, z1, z0, 0))\n+\n+/*\n+** bfmlalb_lane_0_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_lane_0_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_lane_f32 (z1, z4, z5, 0),\n+\t     z0 = svbfmlalb_lane (z1, z4, z5, 0))\n+\n+/*\n+** bfmlalb_lane_1_f32:\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_lane_1_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_lane_f32 (z0, z4, z5, 1),\n+\t     z0 = svbfmlalb_lane (z0, z4, z5, 1))\n+\n+/*\n+** bfmlalb_lane_7_f32:\n+**\tbfmlalb\tz0\\.s, z4\\.h, z5\\.h\\[7\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalb_lane_7_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalb_lane_f32 (z0, z4, z5, 7),\n+\t     z0 = svbfmlalb_lane (z0, z4, z5, 7))\n+\n+/*\n+** bfmlalb_lane_z8_f32:\n+**\tstr\td8, \\[sp, -16\\]!\n+**\tmov\t(z[0-7])\\.d, z8\\.d\n+**\tbfmlalb\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tldr\td8, \\[sp\\], 16\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfmlalb_lane_z8_f32, svfloat32_t, svbfloat16_t, z8,\n+\t\t    z0 = svbfmlalb_lane_f32 (z0, z1, z8, 1),\n+\t\t    z0 = svbfmlalb_lane (z0, z1, z8, 1))\n+\n+/*\n+** bfmlalb_lane_z16_f32:\n+**\tmov\t(z[0-7])\\.d, z16\\.d\n+**\tbfmlalb\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfmlalb_lane_z16_f32, svfloat32_t, svbfloat16_t, z16,\n+\t\t    z0 = svbfmlalb_lane_f32 (z0, z1, z16, 1),\n+\t\t    z0 = svbfmlalb_lane (z0, z1, z16, 1))"}, {"sha": "2a583fa4a67e6113b478994d64c233e4603d0f93", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfmlalt_f32.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfmlalt_f32_tied1:\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_f32 (z0, z4, z5),\n+\t     z0 = svbfmlalt (z0, z4, z5))\n+\n+/*\n+** bfmlalt_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalt\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalt_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalt_f32 (z4, z0, z1),\n+\t\t z0_res = svbfmlalt (z4, z0, z1))\n+\n+/*\n+** bfmlalt_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalt\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalt_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalt_f32 (z4, z1, z0),\n+\t\t z0_res = svbfmlalt (z4, z1, z0))\n+\n+/*\n+** bfmlalt_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_f32 (z1, z4, z5),\n+\t     z0 = svbfmlalt (z1, z4, z5))\n+\n+/*\n+** bfmlalt_h7_f32_tied1:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tbfmlalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfmlalt_h7_f32_tied1, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfmlalt_n_f32 (z0, z4, d7),\n+\t      z0 = svbfmlalt (z0, z4, d7))\n+\n+/*\n+** bfmlalt_h7_f32_untied:\n+**\tmov\t(z[0-9]+\\.h), h7\n+**\tmovprfx\tz0, z1\n+**\tbfmlalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZD (bfmlalt_h7_f32_untied, svfloat32_t, svbfloat16_t, bfloat16_t,\n+\t      z0 = svbfmlalt_n_f32 (z1, z4, d7),\n+\t      z0 = svbfmlalt (z1, z4, d7))"}, {"sha": "3af3997e98efcd90e0e3123c9f0f6119deefe5b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfmlalt_lane_f32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmlalt_lane_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfmlalt_lane_0_f32_tied1:\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_lane_0_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_lane_f32 (z0, z4, z5, 0),\n+\t     z0 = svbfmlalt_lane (z0, z4, z5, 0))\n+\n+/*\n+** bfmlalt_lane_0_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalt\tz0\\.s, \\1\\.h, z1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalt_lane_0_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalt_lane_f32 (z4, z0, z1, 0),\n+\t\t z0_res = svbfmlalt_lane (z4, z0, z1, 0))\n+\n+/*\n+** bfmlalt_lane_0_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmlalt\tz0\\.s, z1\\.h, \\1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmlalt_lane_0_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmlalt_lane_f32 (z4, z1, z0, 0),\n+\t\t z0_res = svbfmlalt_lane (z4, z1, z0, 0))\n+\n+/*\n+** bfmlalt_lane_0_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_lane_0_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_lane_f32 (z1, z4, z5, 0),\n+\t     z0 = svbfmlalt_lane (z1, z4, z5, 0))\n+\n+/*\n+** bfmlalt_lane_1_f32:\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_lane_1_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_lane_f32 (z0, z4, z5, 1),\n+\t     z0 = svbfmlalt_lane (z0, z4, z5, 1))\n+\n+/*\n+** bfmlalt_lane_7_f32:\n+**\tbfmlalt\tz0\\.s, z4\\.h, z5\\.h\\[7\\]\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmlalt_lane_7_f32, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmlalt_lane_f32 (z0, z4, z5, 7),\n+\t     z0 = svbfmlalt_lane (z0, z4, z5, 7))\n+\n+/*\n+** bfmlalt_lane_z8_f32:\n+**\tstr\td8, \\[sp, -16\\]!\n+**\tmov\t(z[0-7])\\.d, z8\\.d\n+**\tbfmlalt\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tldr\td8, \\[sp\\], 16\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfmlalt_lane_z8_f32, svfloat32_t, svbfloat16_t, z8,\n+\t\t    z0 = svbfmlalt_lane_f32 (z0, z1, z8, 1),\n+\t\t    z0 = svbfmlalt_lane (z0, z1, z8, 1))\n+\n+/*\n+** bfmlalt_lane_z16_f32:\n+**\tmov\t(z[0-7])\\.d, z16\\.d\n+**\tbfmlalt\tz0\\.s, z1\\.h, \\1\\.h\\[1\\]\n+**\tret\n+*/\n+TEST_DUAL_LANE_REG (bfmlalt_lane_z16_f32, svfloat32_t, svbfloat16_t, z16,\n+\t\t    z0 = svbfmlalt_lane_f32 (z0, z1, z16, 1),\n+\t\t    z0 = svbfmlalt_lane (z0, z1, z16, 1))"}, {"sha": "b1d98fbf5365a64493607061e40c947d2e19bca2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bfmmla_f32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmmla_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmmla_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbfmmla_f32.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bfmmla_f32_tied1:\n+**\tbfmmla\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmmla_f32_tied1, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmmla_f32 (z0, z4, z5),\n+\t     z0 = svbfmmla (z0, z4, z5))\n+\n+/*\n+** bfmmla_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmmla\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmmla_f32_tied2, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmmla_f32 (z4, z0, z1),\n+\t\t z0_res = svbfmmla (z4, z0, z1))\n+\n+/*\n+** bfmmla_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfmmla\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (bfmmla_f32_tied3, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svbfmmla_f32 (z4, z1, z0),\n+\t\t z0_res = svbfmmla (z4, z1, z0))\n+\n+/*\n+** bfmmla_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfmmla\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (bfmmla_f32_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svbfmmla_f32 (z1, z4, z5),\n+\t     z0 = svbfmmla (z1, z4, z5))"}, {"sha": "52baa1f5881753ef797be2faf7ac71614edff1e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_bf16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_bf16.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** cvt_bf16_f32_m_tied1:\n+**\tbfcvt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvt_bf16_f32_m_tied1, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvt_bf16_f32_m (z0, p0, z4),\n+\t     z0 = svcvt_bf16_m (z0, p0, z4))\n+\n+/*\n+** cvt_bf16_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tbfcvt\tz0\\.h, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (cvt_bf16_f32_m_tied2, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvt_bf16_f32_m (z4, p0, z0),\n+\t\t z0_res = svcvt_bf16_m (z4, p0, z0))\n+\n+/*\n+** cvt_bf16_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tbfcvt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvt_bf16_f32_m_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvt_bf16_f32_m (z1, p0, z4),\n+\t     z0 = svcvt_bf16_m (z1, p0, z4))\n+\n+/*\n+** cvt_bf16_f32_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tbfcvt\tz0\\.h, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (cvt_bf16_f32_z_tied1, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvt_bf16_f32_z (p0, z0),\n+\t\t z0_res = svcvt_bf16_z (p0, z0))\n+\n+/*\n+** cvt_bf16_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z4\\.s\n+**\tbfcvt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvt_bf16_f32_z_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvt_bf16_f32_z (p0, z4),\n+\t     z0 = svcvt_bf16_z (p0, z4))\n+\n+/*\n+** cvt_bf16_f32_x_tied1:\n+**\tbfcvt\tz0\\.h, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (cvt_bf16_f32_x_tied1, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvt_bf16_f32_x (p0, z0),\n+\t\t z0_res = svcvt_bf16_x (p0, z0))\n+\n+/*\n+** cvt_bf16_f32_x_untied:\n+**\tbfcvt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvt_bf16_f32_x_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvt_bf16_f32_x (p0, z4),\n+\t     z0 = svcvt_bf16_x (p0, z4))\n+\n+/*\n+** ptrue_cvt_bf16_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (ptrue_cvt_bf16_f32_x_tied1, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvt_bf16_f32_x (svptrue_b32 (), z0),\n+\t\t z0_res = svcvt_bf16_x (svptrue_b32 (), z0))\n+\n+/*\n+** ptrue_cvt_bf16_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_DUAL_Z (ptrue_cvt_bf16_f32_x_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvt_bf16_f32_x (svptrue_b32 (), z4),\n+\t     z0 = svcvt_bf16_x (svptrue_b32 (), z4))"}, {"sha": "54614c95da86d4899aec1e5a3fc0e19cb80c649d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvtnt_bf16.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvtnt_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvtnt_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvtnt_bf16.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-additional-options \"-march=armv8.2-a+sve+bf16\" } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** cvtnt_bf16_f32_m_tied1:\n+**\tbfcvtnt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvtnt_bf16_f32_m_tied1, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_m (z0, p0, z4),\n+\t     z0 = svcvtnt_bf16_m (z0, p0, z4))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (cvtnt_bf16_f32_m_tied2, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvtnt_bf16_f32_m (z4, p0, z0),\n+\t\t z0_res = svcvtnt_bf16_m (z4, p0, z0))\n+\n+/*\n+** cvtnt_bf16_f32_m_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\tbfcvtnt\tz0\\.h, p0/m, z4\\.s\n+** |\n+**\tbfcvtnt\tz1\\.h, p0/m, z4\\.s\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (cvtnt_bf16_f32_m_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_m (z1, p0, z4),\n+\t     z0 = svcvtnt_bf16_m (z1, p0, z4))\n+\n+/*\n+** cvtnt_bf16_f32_x_tied1:\n+**\tbfcvtnt\tz0\\.h, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (cvtnt_bf16_f32_x_tied1, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_x (z0, p0, z4),\n+\t     z0 = svcvtnt_bf16_x (z0, p0, z4))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (cvtnt_bf16_f32_x_tied2, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvtnt_bf16_f32_x (z4, p0, z0),\n+\t\t z0_res = svcvtnt_bf16_x (z4, p0, z0))\n+\n+/*\n+** cvtnt_bf16_f32_x_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\tbfcvtnt\tz0\\.h, p0/m, z4\\.s\n+** |\n+**\tbfcvtnt\tz1\\.h, p0/m, z4\\.s\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (cvtnt_bf16_f32_x_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_x (z1, p0, z4),\n+\t     z0 = svcvtnt_bf16_x (z1, p0, z4))\n+\n+/*\n+** ptrue_cvtnt_bf16_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_DUAL_Z (ptrue_cvtnt_bf16_f32_x_tied1, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_x (z0, svptrue_b32 (), z4),\n+\t     z0 = svcvtnt_bf16_x (z0, svptrue_b32 (), z4))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (ptrue_cvtnt_bf16_f32_x_tied2, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svcvtnt_bf16_f32_x (z4, svptrue_b32 (), z0),\n+\t\t z0_res = svcvtnt_bf16_x (z4, svptrue_b32 (), z0))\n+\n+/*\n+** ptrue_cvtnt_bf16_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_DUAL_Z (ptrue_cvtnt_bf16_f32_x_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svcvtnt_bf16_f32_x (z1, svptrue_b32 (), z4),\n+\t     z0 = svcvtnt_bf16_x (z1, svptrue_b32 (), z4))"}, {"sha": "a9233324c56f3107f4c50d849e8726f570314428", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_1.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve+bf16\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svuint16_t u16, svint32_t s32,\n+    svbfloat16_t bf16, svfloat32_t f32, svfloat64_t f64, bfloat16_t bf)\n+{\n+  svbfmmla (f32, bf16); /* { dg-error {too few arguments to function 'svbfmmla'} } */\n+  svbfmmla (f32, bf16, bf16, 0); /* { dg-error {too many arguments to function 'svbfmmla'} } */\n+  svbfmmla (0, bf16, bf16); /* { dg-error {passing 'int' to argument 1 of 'svbfmmla', which expects an SVE vector type} } */\n+  svbfmmla (pg, bf16, bf16); /* { dg-error {'svbfmmla' has no form that takes 'svbool_t' arguments} } */\n+  svbfmmla (u8, bf16, bf16); /* { dg-error {'svbfmmla' has no form that takes 'svuint8_t' arguments} } */\n+  svbfmmla (u16, bf16, bf16); /* { dg-error {'svbfmmla' has no form that takes 'svuint16_t' arguments} } */\n+  svbfmmla (f64, bf16, bf16); /* { dg-error {'svbfmmla' has no form that takes 'svfloat64_t' arguments} } */\n+  svbfmmla (f32, bf16, bf16);\n+  svbfmmla (f32, 0, bf16); /* { dg-error {passing 'int' to argument 2 of 'svbfmmla', which expects 'svbfloat16_t'} } */\n+  svbfmmla (f32, f32, bf16); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svbfmmla', which expects 'svbfloat16_t'} } */\n+  svbfmmla (f32, bf16, 0); /* { dg-error {passing 'int' to argument 3 of 'svbfmmla', which expects 'svbfloat16_t'} } */\n+  svbfmmla (f32, bf16, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svbfmmla', which expects 'svbfloat16_t'} } */\n+  svbfmmla (f32, bf16, bf); /* { dg-error {passing 'bfloat16_t'[^\\n]* to argument 3 of 'svbfmmla', which expects 'svbfloat16_t'} } */\n+}"}, {"sha": "23f027f2d70023fee350f365b1d6a60603684ebb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lane_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lane_1.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve+bf16\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svuint16_t u16, svint32_t s32,\n+    svbfloat16_t bf16, svfloat32_t f32, svfloat64_t f64, int i)\n+{\n+  svbfmlalb_lane (f32, bf16, bf16); /* { dg-error {too few arguments to function 'svbfmlalb_lane'} } */\n+  svbfmlalb_lane (f32, bf16, bf16, 0, 0); /* { dg-error {too many arguments to function 'svbfmlalb_lane'} } */\n+  svbfmlalb_lane (0, bf16, bf16, 0); /* { dg-error {passing 'int' to argument 1 of 'svbfmlalb_lane', which expects an SVE vector type} } */\n+  svbfmlalb_lane (pg, bf16, bf16, 0); /* { dg-error {'svbfmlalb_lane' has no form that takes 'svbool_t' arguments} } */\n+  svbfmlalb_lane (u8, bf16, bf16, 0); /* { dg-error {'svbfmlalb_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svbfmlalb_lane (u16, bf16, bf16, 0); /* { dg-error {'svbfmlalb_lane' has no form that takes 'svuint16_t' arguments} } */\n+  svbfmlalb_lane (f64, bf16, bf16, 0); /* { dg-error {'svbfmlalb_lane' has no form that takes 'svfloat64_t' arguments} } */\n+  svbfmlalb_lane (f32, bf16, bf16, 0);\n+  svbfmlalb_lane (f32, 0, bf16, 0); /* { dg-error {passing 'int' to argument 2 of 'svbfmlalb_lane', which expects 'svbfloat16_t'} } */\n+  svbfmlalb_lane (f32, f32, bf16, 0); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svbfmlalb_lane', which expects 'svbfloat16_t'} } */\n+  svbfmlalb_lane (f32, bf16, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svbfmlalb_lane', which expects 'svbfloat16_t'} } */\n+  svbfmlalb_lane (f32, bf16, f32, 0); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svbfmlalb_lane', which expects 'svbfloat16_t'} } */\n+  svbfmlalb_lane (f32, bf16, bf16, s32); /* { dg-error {argument 4 of 'svbfmlalb_lane' must be an integer constant expression} } */\n+  svbfmlalb_lane (f32, bf16, bf16, i); /* { dg-error {argument 4 of 'svbfmlalb_lane' must be an integer constant expression} } */\n+\n+  svbfmlalb_lane (f32, bf16, bf16, 0);\n+  svbfmlalb_lane (f32, bf16, bf16, 7);\n+  svbfmlalb_lane (f32, bf16, bf16, 8); /* { dg-error {passing 8 to argument 4 of 'svbfmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+  svbfmlalb_lane (f32, bf16, bf16, -1); /* { dg-error {passing -1 to argument 4 of 'svbfmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+}"}, {"sha": "4755ca79ac22f42bab6e6d192486ad474337af96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_lanex2_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lanex2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lanex2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_lanex2_1.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve+bf16\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svuint16_t u16, svint32_t s32,\n+    svbfloat16_t bf16, svfloat32_t f32, svfloat64_t f64, int i)\n+{\n+  svbfdot_lane (f32, bf16, bf16); /* { dg-error {too few arguments to function 'svbfdot_lane'} } */\n+  svbfdot_lane (f32, bf16, bf16, 0, 0); /* { dg-error {too many arguments to function 'svbfdot_lane'} } */\n+  svbfdot_lane (0, bf16, bf16, 0); /* { dg-error {passing 'int' to argument 1 of 'svbfdot_lane', which expects an SVE vector type} } */\n+  svbfdot_lane (pg, bf16, bf16, 0); /* { dg-error {'svbfdot_lane' has no form that takes 'svbool_t' arguments} } */\n+  svbfdot_lane (u8, bf16, bf16, 0); /* { dg-error {'svbfdot_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svbfdot_lane (u16, bf16, bf16, 0); /* { dg-error {'svbfdot_lane' has no form that takes 'svuint16_t' arguments} } */\n+  svbfdot_lane (f64, bf16, bf16, 0); /* { dg-error {'svbfdot_lane' has no form that takes 'svfloat64_t' arguments} } */\n+  svbfdot_lane (f32, bf16, bf16, 0);\n+  svbfdot_lane (f32, 0, bf16, 0); /* { dg-error {passing 'int' to argument 2 of 'svbfdot_lane', which expects 'svbfloat16_t'} } */\n+  svbfdot_lane (f32, f32, bf16, 0); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svbfdot_lane', which expects 'svbfloat16_t'} } */\n+  svbfdot_lane (f32, bf16, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svbfdot_lane', which expects 'svbfloat16_t'} } */\n+  svbfdot_lane (f32, bf16, f32, 0); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svbfdot_lane', which expects 'svbfloat16_t'} } */\n+  svbfdot_lane (f32, bf16, bf16, s32); /* { dg-error {argument 4 of 'svbfdot_lane' must be an integer constant expression} } */\n+  svbfdot_lane (f32, bf16, bf16, i); /* { dg-error {argument 4 of 'svbfdot_lane' must be an integer constant expression} } */\n+\n+  svbfdot_lane (f32, bf16, bf16, 0);\n+  svbfdot_lane (f32, bf16, bf16, 3);\n+  svbfdot_lane (f32, bf16, bf16, 4); /* { dg-error {passing 4 to argument 4 of 'svbfdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svbfdot_lane (f32, bf16, bf16, -1); /* { dg-error {passing -1 to argument 4 of 'svbfdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+}"}, {"sha": "2d09a8eeb0603486080f2e7b47f05a95d14c2c23", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_bfloat16_opt_n_1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_bfloat16_opt_n_1.c?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve+bf16\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svuint16_t u16, svint32_t s32,\n+    svbfloat16_t bf16, svfloat32_t f32, svfloat64_t f64, bfloat16_t bf)\n+{\n+  svbfdot (f32, bf16); /* { dg-error {too few arguments to function 'svbfdot'} } */\n+  svbfdot (f32, bf16, bf16, 0); /* { dg-error {too many arguments to function 'svbfdot'} } */\n+  svbfdot (0, bf16, bf16); /* { dg-error {passing 'int' to argument 1 of 'svbfdot', which expects an SVE vector type} } */\n+  svbfdot (pg, bf16, bf16); /* { dg-error {'svbfdot' has no form that takes 'svbool_t' arguments} } */\n+  svbfdot (u8, bf16, bf16); /* { dg-error {'svbfdot' has no form that takes 'svuint8_t' arguments} } */\n+  svbfdot (u16, bf16, bf16); /* { dg-error {'svbfdot' has no form that takes 'svuint16_t' arguments} } */\n+  svbfdot (f64, bf16, bf16); /* { dg-error {'svbfdot' has no form that takes 'svfloat64_t' arguments} } */\n+  svbfdot (f32, bf16, bf16);\n+  svbfdot (f32, 0, bf16); /* { dg-error {passing 'int' to argument 2 of 'svbfdot', which expects 'svbfloat16_t'} } */\n+  svbfdot (f32, f32, bf16); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svbfdot', which expects 'svbfloat16_t'} } */\n+  svbfdot (f32, bf16, 0); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  svbfdot (f32, bf16, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svbfdot', which expects 'svbfloat16_t'} } */\n+  svbfdot (f32, bf16, bf);\n+}"}, {"sha": "5377d7b11cb8cbdb1f9e958ef315e564b9c3be9d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896dff99e18d67afdbe4d1effec20a3da474b22b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=896dff99e18d67afdbe4d1effec20a3da474b22b", "patch": "@@ -8996,7 +8996,7 @@ proc check_effective_target_aarch64_tiny { } {\n # various architecture extensions via the .arch_extension pseudo-op.\n \n foreach { aarch64_ext } { \"fp\" \"simd\" \"crypto\" \"crc\" \"lse\" \"dotprod\" \"sve\"\n-\t\t\t  \"i8mm\" \"f32mm\" \"f64mm\" } {\n+\t\t\t  \"i8mm\" \"f32mm\" \"f64mm\" \"bf16\" } {\n     eval [string map [list FUNC $aarch64_ext] {\n \tproc check_effective_target_aarch64_asm_FUNC_ok { } {\n \t  if { [istarget aarch64*-*-*] } {"}]}