{"sha": "d2b21f206228ea1829a06f19c23d60c159a8d612", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiMjFmMjA2MjI4ZWExODI5YTA2ZjE5YzIzZDYwYzE1OWE4ZDYxMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-05-11T15:11:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-11T15:11:11Z"}, "message": "alpha.c (alpha_emit_conditional_branch): Handle ORDERED and UNORDERED conditions.\n\n\t* config/alpha/alpha.c (alpha_emit_conditional_branch): Handle\n\tORDERED and UNORDERED conditions.\n\nFrom-SVN: r187411", "tree": {"sha": "617d103aab75266b8f82f81e5523aaa01ac692b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617d103aab75266b8f82f81e5523aaa01ac692b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b21f206228ea1829a06f19c23d60c159a8d612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b21f206228ea1829a06f19c23d60c159a8d612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b21f206228ea1829a06f19c23d60c159a8d612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b21f206228ea1829a06f19c23d60c159a8d612/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "835c9db01f44e7346c5764f3c7abc654e9faa2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835c9db01f44e7346c5764f3c7abc654e9faa2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835c9db01f44e7346c5764f3c7abc654e9faa2e7"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "6076af923a90dbfaf64f279867a465f13eec3db1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b21f206228ea1829a06f19c23d60c159a8d612/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b21f206228ea1829a06f19c23d60c159a8d612/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2b21f206228ea1829a06f19c23d60c159a8d612", "patch": "@@ -1,3 +1,8 @@\n+2012-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_conditional_branch): Handle\n+\tORDERED and UNORDERED conditions.\n+\n 2012-05-11  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (referenced_var_check_and_insert): Remove."}, {"sha": "225c9ab3c54203b4c93c0fcf6bf554219586290e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b21f206228ea1829a06f19c23d60c159a8d612/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b21f206228ea1829a06f19c23d60c159a8d612/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d2b21f206228ea1829a06f19c23d60c159a8d612", "patch": "@@ -2335,7 +2335,7 @@ alpha_emit_conditional_branch (rtx operands[], enum machine_mode cmp_mode)\n     {\n     case EQ:  case LE:  case LT:  case LEU:  case LTU:\n     case UNORDERED:\n-      /* We have these compares: */\n+      /* We have these compares.  */\n       cmp_code = code, branch_code = NE;\n       break;\n \n@@ -2572,13 +2572,15 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n       switch (code)\n \t{\n \tcase EQ: case LE: case LT: case LEU: case LTU:\n+\tcase UNORDERED:\n \t  /* We have these compares.  */\n \t  cmp_code = code, code = NE;\n \t  break;\n \n \tcase NE:\n-\t  /* This must be reversed.  */\n-\t  cmp_code = EQ, code = EQ;\n+\tcase ORDERED:\n+\t  /* These must be reversed.  */\n+\t  cmp_code = reverse_condition (code), code = EQ;\n \t  break;\n \n \tcase GE: case GT: case GEU: case GTU:\n@@ -2598,6 +2600,14 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n \t  gcc_unreachable ();\n \t}\n \n+      if (cmp_mode == DImode)\n+\t{\n+\t  if (!reg_or_0_operand (op0, DImode))\n+\t    op0 = force_reg (DImode, op0);\n+\t  if (!reg_or_8bit_operand (op1, DImode))\n+\t    op1 = force_reg (DImode, op1);\n+\t}\n+\n       tem = gen_reg_rtx (cmp_mode);\n       emit_insn (gen_rtx_SET (VOIDmode, tem,\n \t\t\t      gen_rtx_fmt_ee (cmp_code, cmp_mode,\n@@ -2609,6 +2619,14 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n       local_fast_math = 1;\n     }\n \n+  if (cmp_mode == DImode)\n+    {\n+      if (!reg_or_0_operand (op0, DImode))\n+\top0 = force_reg (DImode, op0);\n+      if (!reg_or_8bit_operand (op1, DImode))\n+\top1 = force_reg (DImode, op1);\n+    }\n+\n   /* We may be able to use a conditional move directly.\n      This avoids emitting spurious compares.  */\n   if (signed_comparison_operator (cmp, VOIDmode)\n@@ -2627,11 +2645,13 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n   switch (code)\n     {\n     case EQ:  case LE:  case LT:  case LEU:  case LTU:\n+    case UNORDERED:\n       /* We have these compares: */\n       break;\n \n     case NE:\n-      /* This must be reversed.  */\n+    case ORDERED:\n+      /* These must be reversed.  */\n       code = reverse_condition (code);\n       cmov_code = EQ;\n       break;"}]}