{"sha": "6cc3394507a2303a18891d34222c53f679256c37", "node_id": "C_kwDOANBUbNoAKDZjYzMzOTQ1MDdhMjMwM2ExODg5MWQzNDIyMmM1M2Y2NzkyNTZjMzc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-10-05T14:42:07Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-10-13T15:28:47Z"}, "message": "propagate partial equivs in the cache.\n\nAdjust on-entry cache propagation to look for and propagate both full\nand partial equivalences.\n\n\tgcc/\n\tPR tree-optimization/102540\n\tPR tree-optimization/102872\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache):\n\tHandle partial equivs.\n\t(ranger_cache::range_from_dom): Cleanup dump output.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr102540.c: New.\n\t* gcc.dg/pr102872.c: New.", "tree": {"sha": "a5156d31cf1535030a778754cf13acefd261996f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5156d31cf1535030a778754cf13acefd261996f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cc3394507a2303a18891d34222c53f679256c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc3394507a2303a18891d34222c53f679256c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc3394507a2303a18891d34222c53f679256c37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc3394507a2303a18891d34222c53f679256c37/comments", "author": null, "committer": null, "parents": [{"sha": "d75be7e4343f049176546aa9517d570e5eb67954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75be7e4343f049176546aa9517d570e5eb67954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75be7e4343f049176546aa9517d570e5eb67954"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "0b9aa3639c5d5ca0528fdf48f4465627bce80b3e", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=6cc3394507a2303a18891d34222c53f679256c37", "patch": "@@ -1189,8 +1189,9 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n {\n   edge_iterator ei;\n   edge e;\n-  Value_Range block_result (TREE_TYPE (name));\n-  Value_Range undefined (TREE_TYPE (name));\n+  tree type = TREE_TYPE (name);\n+  Value_Range block_result (type);\n+  Value_Range undefined (type);\n \n   // At this point we shouldn't be looking at the def, entry or exit block.\n   gcc_checking_assert (bb != def_bb && bb != ENTRY_BLOCK_PTR_FOR_FN (cfun) &&\n@@ -1221,10 +1222,16 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n       if (m_oracle)\n \t{\n \t  tree equiv_name;\n-\t  FOR_EACH_EQUIVALENCE (m_oracle, bb, name, equiv_name)\n+\t  relation_kind rel;\n+\t  int prec = TYPE_PRECISION (type);\n+\t  FOR_EACH_PARTIAL_AND_FULL_EQUIV (m_oracle, bb, name, equiv_name, rel)\n \t    {\n \t      basic_block equiv_bb = gimple_bb (SSA_NAME_DEF_STMT (equiv_name));\n \n+\t      // Ignore partial equivs that are smaller than this object.\n+\t      if (rel != VREL_EQ && prec > pe_to_bits (rel))\n+\t\tcontinue;\n+\n \t      // Check if the equiv has any ranges calculated.\n \t      if (!m_gori.has_edge_range_p (equiv_name))\n \t\tcontinue;\n@@ -1234,16 +1241,32 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \t\t  (equiv_bb && !dominated_by_p (CDI_DOMINATORS, bb, equiv_bb)))\n \t\tcontinue;\n \n+\t      if (DEBUG_RANGE_CACHE)\n+\t\t{\n+\t\t  if (rel == VREL_EQ)\n+\t\t    fprintf (dump_file, \"Checking Equivalence (\");\n+\t\t  else\n+\t\t    fprintf (dump_file, \"Checking Partial equiv (\");\n+\t\t  print_relation (dump_file, rel);\n+\t\t  fprintf (dump_file, \") \");\n+\t\t  print_generic_expr (dump_file, equiv_name, TDF_SLIM);\n+\t\t  fprintf (dump_file, \"\\n\");\n+\t\t}\n \t      Value_Range equiv_range (TREE_TYPE (equiv_name));\n \t      if (range_from_dom (equiv_range, equiv_name, bb, RFD_READ_ONLY))\n \t\t{\n+\t\t  if (rel != VREL_EQ)\n+\t\t    range_cast (equiv_range, type);\n \t\t  if (block_result.intersect (equiv_range))\n \t\t    {\n \t\t      if (DEBUG_RANGE_CACHE)\n \t\t\t{\n-\t\t\t  fprintf (dump_file, \"Equivalence update! :  \");\n+\t\t\t  if (rel == VREL_EQ)\n+\t\t\t    fprintf (dump_file, \"Equivalence update! :  \");\n+\t\t\t  else\n+\t\t\t    fprintf (dump_file, \"Partial equiv update! :  \");\n \t\t\t  print_generic_expr (dump_file, equiv_name, TDF_SLIM);\n-\t\t\t  fprintf (dump_file, \"had range  :  \");\n+\t\t\t  fprintf (dump_file, \" has range  :  \");\n \t\t\t  equiv_range.dump (dump_file);\n \t\t\t  fprintf (dump_file, \" refining range to :\");\n \t\t\t  block_result.dump (dump_file);\n@@ -1458,7 +1481,9 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n \n   if (DEBUG_RANGE_CACHE)\n     {\n-      fprintf (dump_file, \"CACHE: BB %d DOM query, found \", start_bb->index);\n+      fprintf (dump_file, \"CACHE: BB %d DOM query for \", start_bb->index);\n+      print_generic_expr (dump_file, name, TDF_SLIM);\n+      fprintf (dump_file, \", found \");\n       r.dump (dump_file);\n       if (bb)\n \tfprintf (dump_file, \" at BB%d\\n\", bb->index);"}, {"sha": "c12f8fcebfb2e813bc741e94793c6c868c643f95", "filename": "gcc/testsuite/gcc.dg/pr102540.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102540.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102540.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102540.c?ref=6cc3394507a2303a18891d34222c53f679256c37", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-evrp\" } */\n+\n+\n+void kill();\n+\n+static long a;\n+static unsigned b;\n+int test1 () {\n+    long c, e;\n+    c = b = a;\n+    e = c ? 2 / (c + 1) : 0;\n+    if (e && !b)\n+        kill ();\n+    a = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"kill\" \"evrp\" } }  */\n+"}, {"sha": "971bb03a5a7bc1572df0f39041144707ac743627", "filename": "gcc/testsuite/gcc.dg/pr102872.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102872.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc3394507a2303a18891d34222c53f679256c37/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102872.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102872.c?ref=6cc3394507a2303a18891d34222c53f679256c37", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void foo(void);\n+\n+static int a, b;\n+int main() {\n+  for (; a; ++a) {\n+    unsigned short d = a;\n+    if (!(b | d) && d)\n+      foo();\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"foo\" \"evrp\" } }  */\n+"}]}