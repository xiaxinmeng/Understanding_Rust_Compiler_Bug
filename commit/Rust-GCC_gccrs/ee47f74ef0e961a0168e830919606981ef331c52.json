{"sha": "ee47f74ef0e961a0168e830919606981ef331c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0N2Y3NGVmMGU5NjFhMDE2OGU4MzA5MTk2MDY5ODFlZjMzMWM1Mg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-06-17T15:36:02Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-06-17T15:36:02Z"}, "message": "tree.h (merge_dllimport_decl_attributes, [...]): Remove conditional exposure of prototypes.\n\n\n\n\t* tree.h (merge_dllimport_decl_attributes, handle_dll_attribute):\n\tRemove conditional exposure of prototypes.\n\t(ANON_AGGRNAME_FORMAT, ANON_AGGRNAME_P): Delete.\n\t* tree.c (anon_aggrname_format, anon_aggrname_p): New.  Replace macro\n\tdefinitions in tree.h with functions.\n\t* lto-streamer-out.c (DFS_write_tree_body, hash_tree): Use\n\tanon_aggrname_p.\n\t* tree-streamer-out.c (write_ts_decl_minimal_tree_pointers): Likewise.\n\n\t* cp/cp-lang.c (cxx_dwarf_name): Use anon_aggrname_p.\n\t* cp/cp-tree.h (TYPE_ANONYMOUS_P): Likewise.\n\t* cp/decl.c (grokdeclarator, xref_tag_1): Likewise.\n\t* cp/error.c (dump_aggr_type): likewise.\n\t* cp/pt.c (push_template_decl_real): Likewise.\n\t* cp/name-lookup.c (make_anon_name): Use anon_aggrname_format.\n\nFrom-SVN: r224564", "tree": {"sha": "573d8e14e3900a28a20976ad8875fbc8ae34ac5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/573d8e14e3900a28a20976ad8875fbc8ae34ac5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee47f74ef0e961a0168e830919606981ef331c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee47f74ef0e961a0168e830919606981ef331c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee47f74ef0e961a0168e830919606981ef331c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee47f74ef0e961a0168e830919606981ef331c52/comments", "author": null, "committer": null, "parents": [{"sha": "82ba6a8e7e8be8714e0976805cf1423b5c885504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ba6a8e7e8be8714e0976805cf1423b5c885504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ba6a8e7e8be8714e0976805cf1423b5c885504"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "155a985e7b0ea4a4be4b4683d3b5504f8360da53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -1,3 +1,14 @@\n+2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree.h (merge_dllimport_decl_attributes, handle_dll_attribute):\n+\tRemove conditional exposure of prototypes.\n+\t(ANON_AGGRNAME_FORMAT, ANON_AGGRNAME_P): Delete.\n+\t* tree.c (anon_aggrname_format, anon_aggrname_p): New.  Replace macro\n+\tdefinitions in tree.h with functions.\n+\t* lto-streamer-out.c (DFS_write_tree_body, hash_tree): Use\n+\tanon_aggrname_p.\n+\t* tree-streamer-out.c (write_ts_decl_minimal_tree_pointers): Likewise.\n+\n 2015-06-17  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (*cmp<mode>_internal1): Rename to..."}, {"sha": "98dab4a47b9333a1f05ce9d7a392f4c01519f300", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -1,3 +1,13 @@\n+2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* cp-lang.c (cxx_dwarf_name): Use anon_aggrname_p.\n+\t* cp-tree.h (TYPE_ANONYMOUS_P): Likewise.\n+\t* decl.c (grokdeclarator, xref_tag_1): Likewise.\n+\t* error.c (dump_aggr_type): likewise.\n+\t* pt.c (push_template_decl_real): Likewise.\n+\t* name-lookup.c (make_anon_name): Use anon_aggrname_format.\n+\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* call.c: Do not include input.h, line-map.h or is-a.h."}, {"sha": "0818be4bd4c920af07748894c006c1762ef0637f", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -119,7 +119,7 @@ cxx_dwarf_name (tree t, int verbosity)\n   gcc_assert (DECL_P (t));\n \n   if (DECL_NAME (t)\n-      && (ANON_AGGRNAME_P (DECL_NAME (t)) || LAMBDA_TYPE_P (t)))\n+      && (anon_aggrname_p (DECL_NAME (t)) || LAMBDA_TYPE_P (t)))\n     return NULL;\n   if (verbosity >= 2)\n     return decl_as_dwarf_string (t,"}, {"sha": "b53aa9028e23f9e107f2de86264b05bf566815ec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -1335,7 +1335,7 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Nonzero if NODE has no name for linkage purposes.  */\n #define TYPE_ANONYMOUS_P(NODE) \\\n-  (OVERLOAD_TYPE_P (NODE) && ANON_AGGRNAME_P (TYPE_LINKAGE_IDENTIFIER (NODE)))\n+  (OVERLOAD_TYPE_P (NODE) && anon_aggrname_p (TYPE_LINKAGE_IDENTIFIER (NODE)))\n \n /* The _DECL for this _TYPE.  */\n #define TYPE_MAIN_DECL(NODE) (TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))"}, {"sha": "c102a4ee7171a74f292ae84ba899ec331c660393", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -10389,7 +10389,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  /* Replace the anonymous name with the real name everywhere.  */\n \t  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n \t    {\n-\t      if (ANON_AGGRNAME_P (TYPE_IDENTIFIER (t)))\n+\t      if (anon_aggrname_p (TYPE_IDENTIFIER (t)))\n \t\t/* We do not rename the debug info representing the\n \t\t   anonymous tagged type because the standard says in\n \t\t   [dcl.typedef] that the naming applies only for\n@@ -12290,7 +12290,7 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \n   /* In case of anonymous name, xref_tag is only called to\n      make type node and push name.  Name lookup is not required.  */\n-  if (ANON_AGGRNAME_P (name))\n+  if (anon_aggrname_p (name))\n     t = NULL_TREE;\n   else\n     t = lookup_and_check_tag  (tag_code, name,"}, {"sha": "96fa94d50e0c3fe99719911a5ae9ec7a6f6f7aca", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -677,7 +677,7 @@ dump_aggr_type (cxx_pretty_printer *pp, tree t, int flags)\n       name = DECL_NAME (name);\n     }\n \n-  if (name == 0 || ANON_AGGRNAME_P (name))\n+  if (name == 0 || anon_aggrname_p (name))\n     {\n       if (flags & TFF_CLASS_KEY_OR_ENUM)\n \tpp_string (pp, M_(\"<anonymous>\"));"}, {"sha": "1d7afea2acaaad2fdd60fe9fa91edc8ca2eed304", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -2096,7 +2096,7 @@ make_anon_name (void)\n {\n   char buf[32];\n \n-  sprintf (buf, ANON_AGGRNAME_FORMAT, anon_cnt++);\n+  sprintf (buf, anon_aggrname_format (), anon_cnt++);\n   return get_identifier (buf);\n }\n "}, {"sha": "60b94981b0ad03e75e072f8803ad16066dcd1919", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -4794,7 +4794,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       if (DECL_CLASS_SCOPE_P (decl))\n \tmember_template_p = true;\n       if (TREE_CODE (decl) == TYPE_DECL\n-\t  && ANON_AGGRNAME_P (DECL_NAME (decl)))\n+\t  && anon_aggrname_p (DECL_NAME (decl)))\n \t{\n \t  error (\"template class without a name\");\n \t  return error_mark_node;"}, {"sha": "4671702d24941766827c32aa993268fecbcfc09c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -738,7 +738,7 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n       /* Drop names that were created for anonymous entities.  */\n       if (DECL_NAME (expr)\n \t  && TREE_CODE (DECL_NAME (expr)) == IDENTIFIER_NODE\n-\t  && ANON_AGGRNAME_P (DECL_NAME (expr)))\n+\t  && anon_aggrname_p (DECL_NAME (expr)))\n \t;\n       else\n \tDFS_follow_tree_edge (DECL_NAME (expr));\n@@ -1179,7 +1179,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       /* Drop names that were created for anonymous entities.  */\n       if (DECL_NAME (t)\n \t  && TREE_CODE (DECL_NAME (t)) == IDENTIFIER_NODE\n-\t  && ANON_AGGRNAME_P (DECL_NAME (t)))\n+\t  && anon_aggrname_p (DECL_NAME (t)))\n \t;\n       else\n \tvisit (DECL_NAME (t));"}, {"sha": "10cbd561987c8f70b0219e8d59b8694f4e02c024", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -601,7 +601,7 @@ write_ts_decl_minimal_tree_pointers (struct output_block *ob, tree expr,\n   /* Drop names that were created for anonymous entities.  */\n   if (DECL_NAME (expr)\n       && TREE_CODE (DECL_NAME (expr)) == IDENTIFIER_NODE\n-      && ANON_AGGRNAME_P (DECL_NAME (expr)))\n+      && anon_aggrname_p (DECL_NAME (expr)))\n     stream_write_tree (ob, NULL_TREE, ref_p);\n   else\n     stream_write_tree (ob, DECL_NAME (expr), ref_p);"}, {"sha": "419e2767d9be3a13205b2a740ce4b3824f17b0b0", "filename": "gcc/tree.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -9256,6 +9256,42 @@ clean_symbol_name (char *p)\n       *p = '_';\n }\n \n+/* For anonymous aggregate types, we need some sort of name to\n+   hold on to.  In practice, this should not appear, but it should\n+   not be harmful if it does.  */\n+bool \n+anon_aggrname_p(const_tree id_node)\n+{\n+#ifndef NO_DOT_IN_LABEL\n+ return (IDENTIFIER_POINTER (id_node)[0] == '.'\n+\t && IDENTIFIER_POINTER (id_node)[1] == '_');\n+#else /* NO_DOT_IN_LABEL */\n+#ifndef NO_DOLLAR_IN_LABEL\n+  return (IDENTIFIER_POINTER (id_node)[0] == '$' \\\n+\t  && IDENTIFIER_POINTER (id_node)[1] == '_');\n+#else /* NO_DOLLAR_IN_LABEL */\n+#define ANON_AGGRNAME_PREFIX \"__anon_\"\n+  return (!strncmp (IDENTIFIER_POINTER (id_node), ANON_AGGRNAME_PREFIX, \n+\t\t    sizeof (ANON_AGGRNAME_PREFIX) - 1));\n+#endif\t/* NO_DOLLAR_IN_LABEL */\n+#endif\t/* NO_DOT_IN_LABEL */\n+}\n+\n+/* Return a format for an anonymous aggregate name.  */\n+const char *\n+anon_aggrname_format()\n+{\n+#ifndef NO_DOT_IN_LABEL\n+ return \"._%d\";\n+#else /* NO_DOT_IN_LABEL */\n+#ifndef NO_DOLLAR_IN_LABEL\n+  return \"$_%d\";\n+#else /* NO_DOLLAR_IN_LABEL */\n+  return \"__anon_%d\";\n+#endif\t/* NO_DOLLAR_IN_LABEL */\n+#endif\t/* NO_DOT_IN_LABEL */\n+}\n+\n /* Generate a name for a special-purpose function.\n    The generated name may need to be unique across the whole link.\n    Changes to this function may also require corresponding changes to"}, {"sha": "dedcb370ea679a41eadcc6a108bafa75675ae444", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee47f74ef0e961a0168e830919606981ef331c52/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ee47f74ef0e961a0168e830919606981ef331c52", "patch": "@@ -3988,14 +3988,12 @@ extern tree remove_attribute (const char *, tree);\n \n extern tree merge_attributes (tree, tree);\n \n-#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n /* Given two Windows decl attributes lists, possibly including\n    dllimport, return a list of their union .  */\n extern tree merge_dllimport_decl_attributes (tree, tree);\n \n /* Handle a \"dllimport\" or \"dllexport\" attribute.  */\n extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);\n-#endif\n \n /* Returns true iff unqualified CAND and BASE are equivalent.  */\n \n@@ -4899,23 +4897,8 @@ target_opts_for_fn (const_tree fndecl)\n /* For anonymous aggregate types, we need some sort of name to\n    hold on to.  In practice, this should not appear, but it should\n    not be harmful if it does.  */\n-#ifndef NO_DOT_IN_LABEL\n-#define ANON_AGGRNAME_FORMAT \"._%d\"\n-#define ANON_AGGRNAME_P(ID_NODE) (IDENTIFIER_POINTER (ID_NODE)[0] == '.' \\\n-\t\t\t\t  && IDENTIFIER_POINTER (ID_NODE)[1] == '_')\n-#else /* NO_DOT_IN_LABEL */\n-#ifndef NO_DOLLAR_IN_LABEL\n-#define ANON_AGGRNAME_FORMAT \"$_%d\"\n-#define ANON_AGGRNAME_P(ID_NODE) (IDENTIFIER_POINTER (ID_NODE)[0] == '$' \\\n-\t\t\t\t  && IDENTIFIER_POINTER (ID_NODE)[1] == '_')\n-#else /* NO_DOLLAR_IN_LABEL */\n-#define ANON_AGGRNAME_PREFIX \"__anon_\"\n-#define ANON_AGGRNAME_P(ID_NODE) \\\n-  (!strncmp (IDENTIFIER_POINTER (ID_NODE), ANON_AGGRNAME_PREFIX, \\\n-\t     sizeof (ANON_AGGRNAME_PREFIX) - 1))\n-#define ANON_AGGRNAME_FORMAT \"__anon_%d\"\n-#endif\t/* NO_DOLLAR_IN_LABEL */\n-#endif\t/* NO_DOT_IN_LABEL */\n+extern const char *anon_aggrname_format();\n+extern bool anon_aggrname_p (const_tree);\n \n /* The tree and const_tree overload templates.   */\n namespace wi"}]}