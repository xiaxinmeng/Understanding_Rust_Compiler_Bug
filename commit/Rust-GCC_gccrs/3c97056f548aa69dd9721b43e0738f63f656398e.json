{"sha": "3c97056f548aa69dd9721b43e0738f63f656398e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5NzA1NmY1NDhhYTY5ZGQ5NzIxYjQzZTA3MzhmNjNmNjU2Mzk4ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-10-29T21:52:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-10-29T21:52:54Z"}, "message": "c_io_libio.cc (basic_file<char>::__basic_file): Don't pass a NULL _IO_wide_data to _IO_no_init when...\n\n\t* config/c_io_libio.cc (basic_file<char>::__basic_file):\n\tDon't pass a NULL _IO_wide_data to _IO_no_init when\n\t_GLIBCPP_USE_WCHAR_T is not defined.\n\t* config/c_io_libio.h (_IO_codecvt): Don't declare when\n\t_GLIBCPP_USE_WCHAR_T is not defined.\n\t* config/c_io_libio_codecvt.c: Don't compile it\n\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n\t* include/bits/codecvt.h (codecvt<_InternT, _ExternT, __enc_traits):\n\tDon't define this specialization when _GLIBCPP_USE_WCHAR_T\n\tis not defined.\n\t* include/bits/locale_facets.h (<bits/std_cwctype.h>): Don't\n\tinclude it when _GLIBCPP_USE_WCHAR_T is not defined.\n\t* src/codecvt.cc (__enc_traits::_S_max_size): Don't define\n\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n\t* src/localename.cc (locale::_Impl::_M_construct_collate):\n\tDon't call wide-character functions when _GLIBCPP_USE_WCHAR_T is\n\tnot defined.\n\t(locale::_Impl::_M_construct_ctype): Likewise.\n\t(locale::_Impl::_M_construct_monetary): Likewise.\n\t(locale::_Impl::_M_construct_numeric): Likewise.\n\t(locale::_Impl::_M_construct_time): Likewise.\n\t(locale::_Impl::_M_construct_messages): Likewise.\n\n\t* iofopen.c (_IO_new_fopen): Don't define `_IO_wide_data wd'\n\tif _GLIBCPP_USE_WCHAR_T is not defined.\n\t* iofwide.c: Don't define codecvt functions when\n\t_GLIBCPP_USE_WCHAR_T is not defined.\n\t(_IO_fwide): Don't try to put the stream in wide mode when\n\t_GLIBCPP_USE_WCHAR_T is not defined.\n\t* libio.h (_IO_wide_data): Define it as an incomplete struct\n\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n\t* wfiledoalloc.c: Don't define anything when\n\t_GLIBCPP_USE_WCHAR_T is not defined.\n\t* wfileops.c: Likewise.\n\t* wgenops.c: Likewise.\n\nFrom-SVN: r37131", "tree": {"sha": "b3dfb2ce5894e4bea6195cc2d125b15eda8bc7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3dfb2ce5894e4bea6195cc2d125b15eda8bc7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c97056f548aa69dd9721b43e0738f63f656398e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c97056f548aa69dd9721b43e0738f63f656398e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c97056f548aa69dd9721b43e0738f63f656398e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c97056f548aa69dd9721b43e0738f63f656398e/comments", "author": null, "committer": null, "parents": [{"sha": "f80c00cc55fcf0c5b51187a818575af01ab6b0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80c00cc55fcf0c5b51187a818575af01ab6b0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80c00cc55fcf0c5b51187a818575af01ab6b0c7"}], "stats": {"total": 109, "additions": 105, "deletions": 4}, "files": [{"sha": "6b4d2af8e24823a0029c980fa4f6f69baffc5060", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -1,6 +1,29 @@\n 2000-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* acinclue.m4 (GLIBCPP_ENABLE_ATOMICITY): Handle IRIX.\n+\t* config/c_io_libio.cc (basic_file<char>::__basic_file): \n+\tDon't pass a NULL _IO_wide_data to _IO_no_init when\n+\t_GLIBCPP_USE_WCHAR_T is not defined.\n+\t* config/c_io_libio.h (_IO_codecvt): Don't declare when \n+\t_GLIBCPP_USE_WCHAR_T is not defined.\n+\t* config/c_io_libio_codecvt.c: Don't compile it \n+\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n+\t* include/bits/codecvt.h (codecvt<_InternT, _ExternT, __enc_traits):\n+\tDon't define this specialization when _GLIBCPP_USE_WCHAR_T \n+\tis not defined.\n+\t* include/bits/locale_facets.h (<bits/std_cwctype.h>): Don't\n+\tinclude it when _GLIBCPP_USE_WCHAR_T is not defined. \n+\t* src/codecvt.cc (__enc_traits::_S_max_size): Don't define\n+\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n+\t* src/localename.cc (locale::_Impl::_M_construct_collate):\n+\tDon't call wide-character functions when _GLIBCPP_USE_WCHAR_T is \n+\tnot defined.\n+\t(locale::_Impl::_M_construct_ctype): Likewise.\n+\t(locale::_Impl::_M_construct_monetary): Likewise.\n+\t(locale::_Impl::_M_construct_numeric): Likewise.\n+\t(locale::_Impl::_M_construct_time): Likewise.\n+\t(locale::_Impl::_M_construct_messages): Likewise.\n+\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_ATOMICITY): Handle IRIX.\n \t* aclocal.m4: Regenerated.\n \t* configure: Likewise.\n \t* config/os/irix/bits/atomicity.h: New file."}, {"sha": "8c465ae8fc55746108dcbfc0fce00e4e52448674", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -204,7 +204,11 @@ namespace std {\n     _lock = __lock;\n #endif\n     // Don't set the orientation of the stream when initializing.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _IO_no_init(this, 0, 0, &_M_wfile, 0);\n+#else /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+    _IO_no_init(this, 0, 0, NULL, 0);\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n     _IO_JUMPS((_IO_FILE_plus *) this) = &_IO_file_jumps;\n     _IO_file_init((_IO_FILE_plus*)this);\n   }"}, {"sha": "c26b3c9fa560132b03a93b7e1ec50d2ab71e831d", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -62,7 +62,9 @@ namespace std {\n   typedef _IO_FILE \t__c_file_type;\n   typedef _IO_wide_data __c_wfile_type;\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n   extern \"C\" _IO_codecvt __c_libio_codecvt;\n+#endif /* defined (_GLIBCPP_USE_WCHAR_T) */\n \n // from ios_base.h\n   struct __ios_flags"}, {"sha": "38d8b55e0c2aed0fc534f1f6bd4a8528f554a1fa", "filename": "libstdc++-v3/config/c_io_libio_codecvt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -27,6 +27,7 @@\n \n #include <libio.h>\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n \n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result \n@@ -148,3 +149,5 @@ do_length(struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n static int\n do_max_length(struct _IO_codecvt *codecvt)\n { return 1; }\n+\n+#endif /* _GLIBCPP_USE_WCHAR_T */"}, {"sha": "738d5af36780ce7ec87549f470f202da28bfe22f", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -303,6 +303,7 @@ namespace std\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     locale::id codecvt<_InternT, _ExternT, _StateT>::id;\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n   // partial specialization\n   // This specialization takes advantage of iconv to provide code\n   // conversions between a large number of character encodings.\n@@ -567,6 +568,7 @@ namespace std\n     do_max_length() const throw()\n     { return 1; }\n #endif\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n \n   // codecvt<char, char, mbstate_t> required specialization\n   template<>"}, {"sha": "6525bda6dc8162d097a7c7113c5b4ec9ca4949de", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -39,7 +39,9 @@\n #include <bits/std_ctime.h>\t// For struct tm\n #include <typeinfo> \t\t// For bad_cast, which shouldn't be here.\n #include <bits/std_ios.h>\t// For ios_base\n+#ifdef _GLIBCPP_USE_WCHAR_T\n #include <bits/std_cwctype.h>\t// For wctype_t\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n \n namespace std\n {"}, {"sha": "dd21399d9519af216cc7bab3128745e25c172e8c", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -1,5 +1,18 @@\n 2000-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* iofopen.c (_IO_new_fopen): Don't define `_IO_wide_data wd'\n+\tif _GLIBCPP_USE_WCHAR_T is not defined.\n+\t* iofwide.c: Don't define codecvt functions when \n+\t_GLIBCPP_USE_WCHAR_T is not defined.\n+\t(_IO_fwide): Don't try to put the stream in wide mode when\n+\t_GLIBCPP_USE_WCHAR_T is not defined.\n+\t* libio.h (_IO_wide_data): Define it as an incomplete struct\n+\twhen _GLIBCPP_USE_WCHAR_T is not defined.\n+\t* wfiledoalloc.c: Don't define anything when \n+\t_GLIBCPP_USE_WCHAR_T is not defined.\n+\t* wfileops.c: Likewise.\n+\t* wgenops.c: Likewise.\n+\t\n \t* _G_config.h (_G_USING_THUNKS): Allow overrides from\n \tOS-configuration files.\n \t* libioP.h: Test _G_USING_THUNKS with #if, rather than #ifdef."}, {"sha": "2dcdee0235cbf51fcb1b237eea4288e5482dc748", "filename": "libstdc++-v3/libio/iofopen.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofopen.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -44,7 +44,9 @@ _IO_new_fopen (filename, mode)\n #ifdef _IO_MTSAFE_IO\n     _IO_lock_t lock;\n #endif\n+#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n     struct _IO_wide_data wd;\n+#endif /* !(defined _LIBC || defined _GLIBCPP_USE_WCHAR_T) */\n   } *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n \n   if (new_f == NULL)"}, {"sha": "76a20ce3fb43eecf4f5516129c77c1a62142756c", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -38,7 +38,7 @@\n # include <langinfo.h>\n #endif\n \n-\n+#ifdef _GLIBCPP_USE_WCHAR_T\n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result do_out (struct _IO_codecvt *codecvt,\n \t\t\t\t     __c_mbstate_t *statep,\n@@ -83,7 +83,7 @@ static struct __gconv_trans_data libio_translit =\n   .__trans_fct = __gconv_transliterate\n };\n #endif\n-\n+#endif /* defined(GLIBCPP_USE_WCHAR_T) */\n \n /* Return orientation of stream.  If mode is nonzero try to change\n    the orientation first.  */\n@@ -104,6 +104,7 @@ _IO_fwide (fp, mode)\n   /* Set the orientation appropriately.  */\n   if (mode > 0)\n     {\n+#ifdef _GLIBCPP_USE_WCHAR_T\n       struct _IO_codecvt *cc = fp->_codecvt;\n \n       fp->_wide_data->_IO_read_ptr = fp->_wide_data->_IO_read_end;\n@@ -174,6 +175,9 @@ _IO_fwide (fp, mode)\n \n       /* From now on use the wide character callback functions.  */\n       ((struct _IO_FILE_plus *) fp)->vtable = fp->_wide_data->_wide_vtable;\n+#else /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+      mode = fp->_mode;\n+#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n     }\n \n   /* Set the mode now.  */\n@@ -186,6 +190,7 @@ _IO_fwide (fp, mode)\n weak_alias (_IO_fwide, fwide)\n #endif\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n \n static enum __codecvt_result\n do_out (struct _IO_codecvt *codecvt, __c_mbstate_t *statep,\n@@ -467,3 +472,5 @@ do_max_length (struct _IO_codecvt *codecvt)\n   return MB_CUR_MAX;\n #endif\n }\n+\n+#endif /* defined(_GLIBCPP_USE_WCHAR_T) */"}, {"sha": "6e5a3837551978a8c3823d98437e995570f331c6", "filename": "libstdc++-v3/libio/libio.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Flibio.h?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -254,7 +254,13 @@ struct _IO_wide_data\n   struct _IO_jump_t *_wide_vtable;\n #endif\n };\n-#endif\n+#else /* !(defined _LIBC || defined _GLIBCPP_USE_WCHAR_T) */\n+/* Because _IO_no_init unconditionally takes a `_IO_wide_data*' as its\n+   last parameter we must still define this type.  We intentionally\n+   leave it incomplete to prevent any use of this type when we are not\n+   supporting wide characters.  */\n+struct _IO_wide_data;\n+#endif /* !(defined _LIBC || defined _GLIBCPP_USE_WCHAR_T) */\n \n struct _IO_FILE {\n   int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */"}, {"sha": "9c05162041485f93c3cfc6083adaf998f8c9d10a", "filename": "libstdc++-v3/libio/wfiledoalloc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwfiledoalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwfiledoalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwfiledoalloc.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -46,6 +46,7 @@\n # define _POSIX_SOURCE\n #endif\n #include \"libioP.h\"\n+#ifdef _GLIBCPP_USE_WCHAR_T\n #include <sys/types.h>\n #include <sys/stat.h>\n #ifdef __STDC__\n@@ -103,3 +104,5 @@ _IO_wfile_doallocate (fp)\n     fp->_flags |= _IO_LINE_BUF;\n   return 1;\n }\n+\n+#endif /* _GLIBCPP_USE_WCHAR_T */"}, {"sha": "1dd524a3ffb25d3c0aa438ed6b779743cbb17f2b", "filename": "libstdc++-v3/libio/wfileops.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwfileops.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -27,6 +27,7 @@\n \n #include <assert.h>\n #include <libioP.h>\n+#ifdef _GLIBCPP_USE_WCHAR_T\n #include <wchar.h>\n #ifdef HAVE_GCONV_H\n #  include <gconv.h>\n@@ -749,3 +750,5 @@ struct _IO_jump_t _IO_wfile_jumps =\n   JUMP_INIT(showmanyc, _IO_default_showmanyc),\n   JUMP_INIT(imbue, _IO_default_imbue)\n };\n+\n+#endif /* _GLIBCPP_USE_WCHAR_T */"}, {"sha": "748545242953f907276edd038c042ddffa4a8a94", "filename": "libstdc++-v3/libio/wgenops.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fwgenops.c?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -28,6 +28,7 @@\n /* Generic or default I/O operations. */\n \n #include \"libioP.h\"\n+#ifdef _GLIBCPP_USE_WCHAR_T\n #ifdef __STDC__\n #include <stdlib.h>\n #endif\n@@ -751,3 +752,5 @@ _IO_unsave_wmarkers (fp)\n   if (_IO_have_backup (fp))\n     _IO_free_wbackup_area (fp);\n }\n+\n+#endif /* _GLIBCPP_USE_WCHAR_T */"}, {"sha": "688381f07c63dd35b61c33fab29f5b4a50f75ca4", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -31,8 +31,10 @@\n \n namespace std {\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n   // Definitions for static const data members of __enc_traits.\n   const int __enc_traits::_S_max_size;\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n \n   // codecvt<char, char, mbstate_t> required specialization\n   locale::id codecvt<char, char, mbstate_t>::id;"}, {"sha": "ee422c779c89614ab34055f314e3840577b05155", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c97056f548aa69dd9721b43e0738f63f656398e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=3c97056f548aa69dd9721b43e0738f63f656398e", "patch": "@@ -223,58 +223,84 @@ namespace std {\n   locale::_Impl::_M_construct_collate(const char* __name)\n   {\n     _M_facet_init(new collate_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new collate_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n \n   void \n   locale::_Impl::_M_construct_ctype(const char* __name)\n   {\n     _M_facet_init(new ctype_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new ctype_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new codecvt_byname<char, char, mbstate_t>(__name));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new codecvt_byname<wchar_t, char, mbstate_t>(__name));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n     \n   void \n   locale::_Impl::_M_construct_monetary(const char* __name)\n   {\n     _M_facet_init(new moneypunct_byname<char, false>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new moneypunct_byname<wchar_t, false>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new moneypunct_byname<char, true >(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new moneypunct_byname<wchar_t, true >(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n \n     _M_replace_facet(locale::_S_classic, &money_get<char>::id);\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &money_get<wchar_t>::id);\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_replace_facet(locale::_S_classic, &money_put<char>::id);\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &money_put<wchar_t>::id);\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n     \n   void \n   locale::_Impl::_M_construct_numeric(const char* __name)\n   {\n     _M_facet_init(new numpunct_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new numpunct_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n \n     _M_replace_facet(locale::_S_classic, &num_get<char>::id);\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &num_get<wchar_t>::id);\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_replace_facet(locale::_S_classic, &num_put<char>::id);\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &num_put<wchar_t>::id);\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n     \n   void \n   locale::_Impl::_M_construct_time(const char* __name)\n   {\n     _M_facet_init(new time_get_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new time_get_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n     _M_facet_init(new time_put_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new time_put_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n     \n   void \n   locale::_Impl::_M_construct_messages(const char* __name)\n   {\n     _M_facet_init(new messages_byname<char>(__name, 0));\n+#ifdef _GLIBCPP_USE_WCHAR_T\n     _M_facet_init(new messages_byname<wchar_t>(__name, 0));\n+#endif /* _GLIBCPP_USE_WCHAR_T */\n   }\n }\n "}]}