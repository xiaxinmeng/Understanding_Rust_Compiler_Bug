{"sha": "5b688993056d4aefe23171f2a4760293999c8e42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2ODg5OTMwNTZkNGFlZmUyMzE3MWYyYTQ3NjAyOTM5OTljOGU0Mg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-12-08T09:23:51Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-12-08T09:23:51Z"}, "message": "[AArch64] Rework ARMv8.1 command line options.\n\n\t* config/aarch64/aarch64-options-extensions.def: Remove\n\tAARCH64_FL_RDMA from \"fp\" and \"simd\".  Remove \"pan\", \"lor\",\n\t\"rdma\".\n\t* config/aarch64/aarch64.h (AARCH64_FL_PAN): Remove.\n\t(AARCH64_FL_LOR): Remove.\n\t(AARCH64_FL_RDMA): Remove.\n\t(AARCH64_FL_V8_1): New.\n\t(AARCH64_FL_FOR_AARCH8_1): Replace AARCH64_FL_PAN, AARCH64_FL_LOR\n\tand AARCH64_FL_RDMA with AARCH64_FL_V8_1.\n\t(AARCH64_ISA_RDMA): Replace AARCH64_FL_RDMA with AARCH64_FL_V8_1.\n\t* doc/invoke.texi (AArch64 -march): Rewrite initial paragraph and\n\tsection on -march=native.  Group descriptions of permitted\n\tarchitecture names together.  Expand description of\n\t-march=armv8.1-a.\n\t(AArch64 -mtune): Slightly rework section on -march=native.\n\t(AArch64 -mcpu): Slightly rework section on -march=native.\n\t(AArch64 Feature Modifiers): Remove \"pan\", \"lor\" and \"rdma\".\n\tState that -march=armv8.1-a enables \"crc\" and \"lse\".\n\nFrom-SVN: r231400", "tree": {"sha": "11f4378e1000af17f3568432b05ef7ec47a20f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11f4378e1000af17f3568432b05ef7ec47a20f2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b688993056d4aefe23171f2a4760293999c8e42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b688993056d4aefe23171f2a4760293999c8e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b688993056d4aefe23171f2a4760293999c8e42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b688993056d4aefe23171f2a4760293999c8e42/comments", "author": null, "committer": null, "parents": [{"sha": "fb0e6f4f4e784513ef1a11c8930d6f76c97e4dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0e6f4f4e784513ef1a11c8930d6f76c97e4dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0e6f4f4e784513ef1a11c8930d6f76c97e4dc1"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "217c78f7045966790e231820fa449ec78050d12d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b688993056d4aefe23171f2a4760293999c8e42", "patch": "@@ -1,3 +1,24 @@\n+2015-12-08  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64-options-extensions.def: Remove\n+\tAARCH64_FL_RDMA from \"fp\" and \"simd\".  Remove \"pan\", \"lor\",\n+\t\"rdma\".\n+\t* config/aarch64/aarch64.h (AARCH64_FL_PAN): Remove.\n+\t(AARCH64_FL_LOR): Remove.\n+\t(AARCH64_FL_RDMA): Remove.\n+\t(AARCH64_FL_V8_1): New.\n+\t(AARCH64_FL_FOR_AARCH8_1): Replace AARCH64_FL_PAN, AARCH64_FL_LOR\n+\tand AARCH64_FL_RDMA with AARCH64_FL_V8_1.\n+\t(AARCH64_ISA_RDMA): Replace AARCH64_FL_RDMA with AARCH64_FL_V8_1.\n+\t* doc/invoke.texi (AArch64 -march): Rewrite initial paragraph and\n+\tsection on -march=native.  Group descriptions of permitted\n+\tarchitecture names together.  Expand description of\n+\t-march=armv8.1-a.\n+\t(AArch64 -mtune): Slightly rework section on -march=native.\n+\t(AArch64 -mcpu): Slightly rework section on -march=native.\n+\t(AArch64 Feature Modifiers): Remove \"pan\", \"lor\" and \"rdma\".\n+\tState that -march=armv8.1-a enables \"crc\" and \"lse\".\n+\n 2015-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/invoke.texi (SPARC options): Fix typo."}, {"sha": "4f1d53515a9a4ff8920fadb13164c85e39990db5", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=5b688993056d4aefe23171f2a4760293999c8e42", "patch": "@@ -34,11 +34,10 @@\n    should contain a whitespace-separated list of the strings in 'Features'\n    that are required.  Their order is not important.  */\n \n-AARCH64_OPT_EXTENSION(\"fp\",\tAARCH64_FL_FP,                          AARCH64_FL_FPSIMD | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, \"fp\")\n-AARCH64_OPT_EXTENSION(\"simd\",\tAARCH64_FL_FPSIMD,                      AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA,   \"asimd\")\n+AARCH64_OPT_EXTENSION (\"fp\", AARCH64_FL_FP,\n+\t\t       AARCH64_FL_FPSIMD | AARCH64_FL_CRYPTO, \"fp\")\n+AARCH64_OPT_EXTENSION (\"simd\", AARCH64_FL_FPSIMD,\n+\t\t       AARCH64_FL_SIMD | AARCH64_FL_CRYPTO, \"asimd\")\n AARCH64_OPT_EXTENSION(\"crypto\",\tAARCH64_FL_CRYPTO | AARCH64_FL_FPSIMD,  AARCH64_FL_CRYPTO,   \"aes pmull sha1 sha2\")\n AARCH64_OPT_EXTENSION(\"crc\",\tAARCH64_FL_CRC,                         AARCH64_FL_CRC,                        \"crc32\")\n AARCH64_OPT_EXTENSION(\"lse\",\tAARCH64_FL_LSE,                         AARCH64_FL_LSE,                        \"lse\")\n-AARCH64_OPT_EXTENSION(\"pan\",\tAARCH64_FL_PAN,\t\tAARCH64_FL_PAN,\t\t\"pan\")\n-AARCH64_OPT_EXTENSION(\"lor\",\tAARCH64_FL_LOR,\t\tAARCH64_FL_LOR,\t\t\"lor\")\n-AARCH64_OPT_EXTENSION(\"rdma\",\tAARCH64_FL_RDMA | AARCH64_FL_FPSIMD,\tAARCH64_FL_RDMA,\t\"rdma\")"}, {"sha": "06345f0215ea190b7b089264a0039a201437ecec", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=5b688993056d4aefe23171f2a4760293999c8e42", "patch": "@@ -134,9 +134,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_CRC        (1 << 3)\t/* Has CRC.  */\n /* ARMv8.1 architecture extensions.  */\n #define AARCH64_FL_LSE\t      (1 << 4)  /* Has Large System Extensions.  */\n-#define AARCH64_FL_PAN\t      (1 << 5)  /* Has Privileged Access Never.  */\n-#define AARCH64_FL_LOR\t      (1 << 6)  /* Has Limited Ordering regions.  */\n-#define AARCH64_FL_RDMA\t      (1 << 7)  /* Has ARMv8.1 Adv.SIMD.  */\n+#define AARCH64_FL_V8_1\t      (1 << 5)  /* Has ARMv8.1 extensions.  */\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -147,8 +145,7 @@ extern unsigned aarch64_architecture_version;\n /* Architecture flags that effect instruction selection.  */\n #define AARCH64_FL_FOR_ARCH8       (AARCH64_FL_FPSIMD)\n #define AARCH64_FL_FOR_ARCH8_1\t\t\t       \\\n-  (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_PAN \\\n-   | AARCH64_FL_LOR | AARCH64_FL_RDMA)\n+  (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_V8_1)\n \n /* Macros to test ISA flags.  */\n \n@@ -157,7 +154,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_FP             (aarch64_isa_flags & AARCH64_FL_FP)\n #define AARCH64_ISA_SIMD           (aarch64_isa_flags & AARCH64_FL_SIMD)\n #define AARCH64_ISA_LSE\t\t   (aarch64_isa_flags & AARCH64_FL_LSE)\n-#define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_RDMA)\n+#define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_V8_1)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)"}, {"sha": "5ab565c71f8ab5a58663f06ef519a2979d33bf88", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b688993056d4aefe23171f2a4760293999c8e42/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5b688993056d4aefe23171f2a4760293999c8e42", "patch": "@@ -12570,23 +12570,27 @@ Which in turn depends on the target processor.\n \n @item -march=@var{name}\n @opindex march\n-Specify the name of the target architecture, optionally suffixed by one or\n+Specify the name of the target architecture and, optionally, one or\n more feature modifiers.  This option has the form\n @option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}.\n \n-The permissible values for @var{arch} are @samp{armv8-a} or\n-@samp{armv8.1-a}.\n+The permissible values for @var{arch} are @samp{armv8-a},\n+@samp{armv8.1-a} or @var{native}.\n \n-For the permissible values for @var{feature}, see the sub-section on\n-@ref{aarch64-feature-modifiers,,@option{-march} and @option{-mcpu}\n+The value @samp{armv8.1-a} implies @samp{armv8-a} and enables compiler\n+support for the ARMv8.1 architecture extension.  In particular, it\n+enables the @samp{+crc} and @samp{+lse} features.\n+\n+The value @samp{native} is available on native AArch64 GNU/Linux and\n+causes the compiler to pick the architecture of the host system.  This\n+option has no effect if the compiler is unable to recognize the\n+architecture of the host system,\n+\n+The permissible values for @var{feature} are listed in the sub-section\n+on @ref{aarch64-feature-modifiers,,@option{-march} and @option{-mcpu}\n Feature Modifiers}.  Where conflicting feature modifiers are\n specified, the right-most feature is used.\n \n-Additionally on native AArch64 GNU/Linux systems the value\n-@samp{native} is available.  This option causes the compiler to pick the\n-architecture of the host system.  If the compiler is unable to recognize the\n-architecture of the host system this option has no effect.\n-\n GCC uses @var{name} to determine what kind of instructions it can emit\n when generating assembly code.  If @option{-march} is specified\n without either of @option{-mtune} or @option{-mcpu} also being\n@@ -12608,8 +12612,8 @@ option are: @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53}.\n Additionally on native AArch64 GNU/Linux systems the value\n @samp{native} is available.  This option causes the compiler to pick\n the architecture of and tune the performance of the code for the\n-processor of the host system.  If the compiler is unable to recognize\n-the processor of the host system this option has no effect.\n+processor of the host system.  This option has no effect if the\n+compiler is unable to recognize the architecture of the host system.\n \n Where none of @option{-mtune=}, @option{-mcpu=} or @option{-march=}\n are specified, the code is tuned to perform well across a range\n@@ -12631,9 +12635,9 @@ specified, the right-most feature is used.\n \n Additionally on native AArch64 GNU/Linux systems the value\n @samp{native} is available.  This option causes the compiler to tune\n-the performance of the code for the processor of the host system.  If\n-the compiler is unable to recognize the processor of the host system\n-this option has no effect.\n+the performance of the code for the processor of the host system.\n+This option has no effect if the compiler is unable to recognize the\n+architecture of the host system.\n \n GCC uses @var{name} to determine what kind of instructions it can emit when\n generating assembly code (as if by @option{-march}) and to determine\n@@ -12669,7 +12673,8 @@ the following and their inverses @option{no@var{feature}}:\n \n @table @samp\n @item crc\n-Enable CRC extension.\n+Enable CRC extension.  This is on by default for\n+@option{-march=armv8.1-a}.\n @item crypto\n Enable Crypto extension.  This also enables Advanced SIMD and floating-point\n instructions.\n@@ -12681,14 +12686,8 @@ Enable Advanced SIMD instructions.  This also enables floating-point\n instructions.  This is on by default for all possible values for options\n @option{-march} and @option{-mcpu}.\n @item lse\n-Enable Large System Extension instructions.\n-@item pan\n-Enable Privileged Access Never support.\n-@item lor\n-Enable Limited Ordering Regions support.\n-@item rdma\n-Enable ARMv8.1 Advanced SIMD instructions.  This implies Advanced SIMD\n-is enabled.\n+Enable Large System Extension instructions.  This is on by default for\n+@option{-march=armv8.1-a}.\n \n @end table\n "}]}