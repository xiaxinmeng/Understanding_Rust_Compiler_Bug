{"sha": "9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjZTNjMWNjNGY2YWUzNzg4NzBkM2M1ZGU0YTFlYjhjZGU2YzFjMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-01-31T09:18:33Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-01-31T09:18:33Z"}, "message": "re PR fortran/30520 (Conflics checking of VOLATILE attribute needs improvement)\n\nfortran/\n2007-01-31  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/30520\n       * interface.c (compare_actual_formal): Check conformance between\n         actual and VOLATILE dummy arguments.\n       * symbol.c (gfc_add_volatile): Allow setting of VOLATILE\n         multiple times in different scopes.\n       * decl.c (gfc_match_volatile): Search symbol in host association.\n\ntestsuite/\n2007-01-31  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/30520\n       * gfortran.dg/volatile8.f90: New argument conformance test.\n       * gfortran.dg/volatile9.f90: New scope test.\n\nFrom-SVN: r121379", "tree": {"sha": "213e22de3a6d7758919bee46442808bafbe58870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213e22de3a6d7758919bee46442808bafbe58870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9cde24cd15bdce1575b0d415d5cd1a78bcaf97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9cde24cd15bdce1575b0d415d5cd1a78bcaf97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9cde24cd15bdce1575b0d415d5cd1a78bcaf97b"}], "stats": {"total": 181, "additions": 176, "deletions": 5}, "files": [{"sha": "7d6680f7d1f335559fb402ee92935a8a03b0e999", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -1,3 +1,12 @@\n+2007-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30520\n+\t* interface.c (compare_actual_formal): Check conformance between\n+\t  actual and VOLATILE dummy arguments.\n+\t* symbol.c (gfc_add_volatile): Allow setting of VOLATILE\n+\t  multiple times in different scopes.\n+\t* decl.c (gfc_match_volatile): Search symbol in host association.\n+\n 2007-01-31  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* simplify.c, trans-array.c: Fix comment typos."}, {"sha": "b25bcc072737381ef2a214bfe950c3236884fa50", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -4221,7 +4221,9 @@ gfc_match_volatile (void)\n \n   for(;;)\n     {\n-      m = gfc_match_symbol (&sym, 0);\n+      /* VOLATILE is special because it can be added to host-associated \n+\t symbols locally.  */\n+      m = gfc_match_symbol (&sym, 1);\n       switch (m)\n \t{\n \tcase MATCH_YES:"}, {"sha": "9ce42cc3e2cf739ce5b30735e11dc9d2b3567db8", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -1417,6 +1417,54 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n+      /* C1232 (R1221) For an actual argument which is an array section or\n+\t an assumed-shape array, the dummy argument shall be an assumed-\n+\t shape array, if the dummy argument has the VOLATILE attribute.  */\n+\n+      if (f->sym->attr.volatile_\n+\t  && a->expr->symtree->n.sym->as\n+\t  && a->expr->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n+\t  && !(f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE))\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Assumed-shape actual argument at %L is \"\n+\t\t       \"incompatible with the non-assumed-shape \"\n+\t\t       \"dummy argument '%s' due to VOLATILE attribute\",\n+\t\t       &a->expr->where,f->sym->name);\n+\t  return 0;\n+\t}\n+\n+      if (f->sym->attr.volatile_\n+\t  && a->expr->ref && a->expr->ref->u.ar.type == AR_SECTION\n+\t  && !(f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE))\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Array-section actual argument at %L is \"\n+\t\t       \"incompatible with the non-assumed-shape \"\n+\t\t       \"dummy argument '%s' due to VOLATILE attribute\",\n+\t\t       &a->expr->where,f->sym->name);\n+\t  return 0;\n+\t}\n+\n+      /* C1233 (R1221) For an actual argument which is a pointer array, the\n+\t dummy argument shall be an assumed-shape or pointer array, if the\n+\t dummy argument has the VOLATILE attribute.  */\n+\n+      if (f->sym->attr.volatile_\n+\t  && a->expr->symtree->n.sym->attr.pointer\n+\t  && a->expr->symtree->n.sym->as\n+\t  && !(f->sym->as\n+\t       && (f->sym->as->type == AS_ASSUMED_SHAPE\n+\t\t   || f->sym->attr.pointer)))\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Pointer-array actual argument at %L requires \"\n+\t\t       \"an assumed-shape or pointer-array dummy \"\n+\t\t       \"argument '%s' due to VOLATILE attribute\",\n+\t\t       &a->expr->where,f->sym->name);\n+\t  return 0;\n+\t}\n+\n     match:\n       if (a == actual)\n \tna = i;"}, {"sha": "05c7eaef7ccd7c9070e14c82485e71d735223771", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -877,10 +877,14 @@ try\n gfc_add_volatile (symbol_attribute * attr, const char *name, locus * where)\n {\n \n-  if (check_used (attr, name, where))\n-    return FAILURE;\n-\n-  if (attr->volatile_)\n+  /* No check_used needed as 11.2.1 of the F2003 standard allows\n+     that the local identifier made accessible by a use statement can be\n+     given a VOLATILE attribute.  */\n+\n+  /* TODO: The following allows multiple VOLATILE statements for\n+     use-associated variables and it prevents setting VOLATILE for a host-\n+     associated variable which is already marked as VOLATILE in the host.  */\n+  if (attr->volatile_ && !attr->use_assoc)\n     {\n \tif (gfc_notify_std (GFC_STD_LEGACY, \n \t\t\t    \"Duplicate VOLATILE attribute specified at %L\","}, {"sha": "28e5e0d8c033f931d8b104638d4552ee3939a03c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -1,3 +1,9 @@\n+2007-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30520\n+\t* gfortran.dg/volatile8.f90: New argument conformance test.\n+\t* gfortran.dg/volatile9.f90: New scope test.\n+\n 2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/24745"}, {"sha": "b97b8519b23c8ee876632fbd5f48cc24d0419fc6", "filename": "gcc/testsuite/gfortran.dg/volatile8.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile8.f90?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -0,0 +1,58 @@\n+! Check for compatibily of actual arguments\n+! with dummy arguments marked as volatile\n+! \n+! Contributed by Steven Correll.\n+!\n+! PR fortran/30520\n+\n+! { dg-do compile }\n+\n+   subroutine s8()\n+    implicit none\n+    interface\n+      subroutine sub8(dummy8)\n+        integer, volatile, dimension(3) :: dummy8\n+      end subroutine sub8\n+      subroutine sub8a(dummy8a)\n+        integer, volatile, dimension(:) :: dummy8a\n+      end subroutine sub8a\n+    end interface\n+    integer, dimension(8) :: a\n+    call sub8 (a(1:5:2)) ! { dg-error \"Array-section actual argument\" }\n+    call sub8a(a(1:5:2))\n+  end subroutine s8 \n+\n+  subroutine s9(s9dummy)\n+    implicit none\n+    integer, dimension(:) :: s9dummy\n+    interface\n+      subroutine sub9(dummy9)\n+        integer, volatile, dimension(3) :: dummy9\n+      end subroutine sub9\n+      subroutine sub9a(dummy9a)\n+        integer, volatile, dimension(:) :: dummy9a\n+      end subroutine sub9a\n+    end interface\n+    integer, dimension(9) :: a\n+    call sub9 (s9dummy) ! { dg-error \"Assumed-shape actual argument\" }\n+    call sub9a(s9dummy)\n+  end subroutine s9 \n+\n+  subroutine s10()\n+    implicit none\n+    interface\n+      subroutine sub10(dummy10)\n+        integer, volatile, dimension(3) :: dummy10\n+      end subroutine sub10\n+      subroutine sub10a(dummy10a)\n+        integer, volatile, dimension(:) :: dummy10a\n+      end subroutine sub10a\n+      subroutine sub10b(dummy10b)\n+        integer, volatile, dimension(:), pointer :: dummy10b\n+      end subroutine sub10b\n+    end interface\n+    integer, dimension(:), pointer :: a\n+    call sub10 (a) ! { dg-error \"Pointer-array actual argument\" }\n+    call sub10a(a)\n+    call sub10b(a)\n+  end subroutine s10 "}, {"sha": "e7cba6b07240fe0489381f3e2b2a4e0b2a118349", "filename": "gcc/testsuite/gfortran.dg/volatile9.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile9.f90?ref=9bce3c1cc4f6ae378870d3c5de4a1eb8cde6c1c2", "patch": "@@ -0,0 +1,44 @@\n+! Check for valid VOLATILE uses\n+!\n+! Contributed by Steven Correll.\n+!\n+! PR fortran/30520\n+\n+! { dg-do compile }\n+ \n+  function f() result(fr)\n+    integer, volatile :: fr\n+    fr = 5\n+  end function f \n+\n+  module mod13\n+    implicit none\n+    integer :: v13\n+  end module mod13 \n+\n+  module mod13a\n+   use mod13\n+   implicit none\n+   volatile :: v13\n+   real :: v14\n+  contains\n+   subroutine s13()\n+     volatile :: v13\n+     volatile :: v14\n+   end subroutine s13 \n+  end module mod13a \n+\n+  module mod13b\n+   use mod13a\n+   implicit none\n+   volatile :: v13\n+  end module mod13b \n+\n+\n+  subroutine s14()\n+    use mod13a\n+    implicit none\n+    volatile :: v13\n+  end subroutine s14 \n+\n+! { dg-final { cleanup-modules \"mod13 mod13a mod13b\" } }"}]}