{"sha": "e9068967876383bf0d9280b4f455fd50e7faf152", "node_id": "C_kwDOANBUbNoAKGU5MDY4OTY3ODc2MzgzYmYwZDkyODBiNGY0NTVmZDUwZTdmYWYxNTI", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-07-02T00:03:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-21T15:24:56Z"}, "message": "[Ada] Enforce legality rule for Predicate_Failure aspect specifications\n\ngcc/ada/\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add a new nested\n\tfunction, Directly_Specified, and then use it in the\n\timplementation of the required check.", "tree": {"sha": "8fb655bd540d6d61f1c8d43da5ab80f821f9c75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb655bd540d6d61f1c8d43da5ab80f821f9c75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9068967876383bf0d9280b4f455fd50e7faf152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9068967876383bf0d9280b4f455fd50e7faf152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9068967876383bf0d9280b4f455fd50e7faf152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9068967876383bf0d9280b4f455fd50e7faf152/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3598c8db4045d17705f845561517f74bf877a2e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3598c8db4045d17705f845561517f74bf877a2e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3598c8db4045d17705f845561517f74bf877a2e4"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "e841dda5c78e1fdaeb3c331257060132a6c7afa3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9068967876383bf0d9280b4f455fd50e7faf152/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9068967876383bf0d9280b4f455fd50e7faf152/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e9068967876383bf0d9280b4f455fd50e7faf152", "patch": "@@ -1884,6 +1884,11 @@ package body Sem_Ch13 is\n             --  expression is allowed. Includes checking that the expression\n             --  does not raise Constraint_Error.\n \n+            function Directly_Specified\n+              (Id : Entity_Id; A : Aspect_Id) return Boolean;\n+            --  Returns True if the given aspect is directly (as opposed to\n+            --  via any form of inheritance) specified for the given entity.\n+\n             function Make_Aitem_Pragma\n               (Pragma_Argument_Associations : List_Id;\n                Pragma_Name                  : Name_Id) return Node_Id;\n@@ -2777,6 +2782,18 @@ package body Sem_Ch13 is\n                end if;\n             end Check_Expr_Is_OK_Static_Expression;\n \n+            ------------------------\n+            -- Directly_Specified --\n+            ------------------------\n+\n+            function Directly_Specified\n+              (Id : Entity_Id; A : Aspect_Id) return Boolean\n+            is\n+               Aspect_Spec : constant Node_Id := Find_Aspect (Id, A);\n+            begin\n+               return Present (Aspect_Spec) and then Entity (Aspect_Spec) = Id;\n+            end Directly_Specified;\n+\n             -----------------------\n             -- Make_Aitem_Pragma --\n             -----------------------\n@@ -3342,6 +3359,15 @@ package body Sem_Ch13 is\n                        (\"Predicate_Failure requires previous predicate\" &\n                         \" specification\", Aspect);\n                      goto Continue;\n+\n+                  elsif not (Directly_Specified (E, Aspect_Dynamic_Predicate)\n+                    or else Directly_Specified (E, Aspect_Static_Predicate)\n+                    or else Directly_Specified (E, Aspect_Predicate))\n+                  then\n+                     Error_Msg_N\n+                       (\"Predicate_Failure requires accompanying\" &\n+                        \" noninherited predicate specification\", Aspect);\n+                     goto Continue;\n                   end if;\n \n                   --  Construct the pragma"}]}