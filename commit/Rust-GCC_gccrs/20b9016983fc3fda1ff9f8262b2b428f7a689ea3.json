{"sha": "20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiOTAxNjk4M2ZjM2ZkYTFmZjlmODI2MmIyYjQyOGY3YTY4OWVhMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-25T06:14:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-25T06:14:48Z"}, "message": "exception.cc (struct cp_eh_info): Add handlers field.\n\n\t* exception.cc (struct cp_eh_info): Add handlers field.\n\t(__cp_push_exception): Initialize it.\n\t(__cp_pop_exception): Decrement it.  Don't pop unless it's 0.\n\t(__throw_bad_exception): Remove.\n\t* except.c (call_eh_info): Add handlers field.\n\t(get_eh_handlers): New fn.\n\t(push_eh_cleanup): Increment handlers.\n\nFixes P15031.C, rethrow[45].C\n\nFrom-SVN: r16694", "tree": {"sha": "188a0e6b28b848caa1011c2fa6c43434f59efa15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/188a0e6b28b848caa1011c2fa6c43434f59efa15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/comments", "author": null, "committer": null, "parents": [{"sha": "c77289885d7b658a980738069be7979c3429ef9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77289885d7b658a980738069be7979c3429ef9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77289885d7b658a980738069be7979c3429ef9b"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "ad1788b304e1c8000e7c246060e83621709523e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "patch": "@@ -1,3 +1,13 @@\n+Mon Nov 24 12:15:55 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* exception.cc (struct cp_eh_info): Add handlers field.\n+\t(__cp_push_exception): Initialize it.\n+\t(__cp_pop_exception): Decrement it.  Don't pop unless it's 0.\n+\t(__throw_bad_exception): Remove.\n+\t* except.c (call_eh_info): Add handlers field.\n+\t(get_eh_handlers): New fn.\n+\t(push_eh_cleanup): Increment handlers.\n+\n Fri Nov 21 12:22:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* except.c (expand_start_eh_spec): Use the try/catch code."}, {"sha": "ff7a45b94a36ea46960ca7fbedd9fbf9c2adfb5d", "filename": "gcc/cp/except.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "patch": "@@ -319,7 +319,7 @@ call_eh_info ()\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else\n     {\n-      tree t, fields[5];\n+      tree t, fields[6];\n \n       /* Declare cp_eh_info * __cp_exception_info (void),\n \t as defined in exception.cc. */\n@@ -342,9 +342,11 @@ call_eh_info ()\n \t\t\t\t\t boolean_type_node);\n       fields[4] = build_lang_field_decl (FIELD_DECL, get_identifier (\"next\"),\n \t\t\t\t\t build_pointer_type (t));\n+      fields[5] = build_lang_field_decl\n+\t(FIELD_DECL, get_identifier (\"handlers\"), long_integer_type_node);\n       /* N.B.: The fourth field LEN is expected to be\n \t the number of fields - 1, not the total number of fields.  */\n-      finish_builtin_type (t, \"cp_eh_info\", fields, 4, ptr_type_node);\n+      finish_builtin_type (t, \"cp_eh_info\", fields, 5, ptr_type_node);\n       t = build_pointer_type (t);\n \n       /* And now the function.  */\n@@ -417,6 +419,16 @@ get_eh_caught ()\n \t\t\t      NULL_TREE, 0);\n }\n \n+/* Returns a reference to whether or not the current exception\n+   has been caught.  */\n+\n+static tree\n+get_eh_handlers ()\n+{\n+  return build_component_ref (get_eh_info (), get_identifier (\"handlers\"),\n+\t\t\t      NULL_TREE, 0);\n+}\n+\n /* Build a type value for use at runtime for a type that is matched\n    against by the exception handling system.  */\n \n@@ -514,6 +526,9 @@ push_eh_cleanup ()\n   expand_decl_cleanup_no_eh (NULL_TREE, do_pop_exception (boolean_false_node));\n   resume_momentary (yes);\n \n+  expand_expr (build_unary_op (PREINCREMENT_EXPR, get_eh_handlers (), 1),\n+\t       const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n   /* We don't destroy the exception object on rethrow, so we can't use\n      the normal cleanup mechanism for it.  */\n   expand_eh_region_start ();"}, {"sha": "9c876700574390380296641c4644993fe0f26c46", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9016983fc3fda1ff9f8262b2b428f7a689ea3/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=20b9016983fc3fda1ff9f8262b2b428f7a689ea3", "patch": "@@ -75,7 +75,11 @@ unexpected ()\n }\n \n /* C++-specific state about the current exception.\n-   This must match init_exception_processing().  */\n+   This must match init_exception_processing().\n+\n+   Note that handlers and caught are not redundant; when rethrown, an\n+   exception can have multiple active handlers and still be considered\n+   uncaught.  */\n \n struct cp_eh_info\n {\n@@ -84,6 +88,7 @@ struct cp_eh_info\n   void (*cleanup)(void *, int);\n   bool caught;\n   cp_eh_info *next;\n+  long handlers;\n };\n \n /* Language-specific EH info pointer, defined in libgcc2.  */\n@@ -113,6 +118,7 @@ __cp_push_exception (void *value, void *type, void (*cleanup)(void *, int))\n   p->value = value;\n   p->type = type;\n   p->cleanup = cleanup;\n+  p->handlers = 0;\n   p->caught = false;\n   p->next = __eh_info;\n   __eh_info = p;\n@@ -128,7 +134,9 @@ __cp_pop_exception (cp_eh_info *p, bool handler)\n {\n   cp_eh_info **q = &__eh_info;\n \n-  if (handler && p == *q)\n+  --p->handlers;\n+\n+  if (p->handlers > 0 || (handler && p == *q))\n     return;\n \n   for (; *q; q = &((*q)->next))\n@@ -220,12 +228,6 @@ __throw_bad_typeid (void)\n   throw bad_typeid ();\n }\n \n-extern \"C\" void\n-__throw_bad_exception (void)\n-{\n-  throw bad_exception ();\n-}\n-\n /* Has the current exception been caught?  */\n \n bool"}]}