{"sha": "f076debaba31c16b9a2f06394a43e38025a3a390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3NmRlYmFiYTMxYzE2YjlhMmYwNjM5NGE0M2UzODAyNWEzYTM5MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-08T11:38:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-08T11:38:43Z"}, "message": "re PR tree-optimization/44831 (internal compiler error: verify_stmts failed when compiling wine)\n\n2010-07-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44831\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Properly build\n\ta MEM_REF preserving TBAA info of the original dereference.\n\tDereference the original pointer if the address is not\n\tinvariant.\n\t(propagate_with_phi): Fixup type checks wrt MEM_REFs.  Require\n\tat least one invariant address that we are going to dereference.\n\n\t* gcc.c-torture/compile/pr44831.c: New testcase.\n\t* gcc.dg/tree-ssa/pr21463.c: Adjust.\n\nFrom-SVN: r161950", "tree": {"sha": "222d856bd4e364f7cc1df6fadbcc8ad5bb0f1728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222d856bd4e364f7cc1df6fadbcc8ad5bb0f1728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f076debaba31c16b9a2f06394a43e38025a3a390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f076debaba31c16b9a2f06394a43e38025a3a390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f076debaba31c16b9a2f06394a43e38025a3a390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f076debaba31c16b9a2f06394a43e38025a3a390/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20ede5c64d71cb0fb25a445f93752c7e6e861dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ede5c64d71cb0fb25a445f93752c7e6e861dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ede5c64d71cb0fb25a445f93752c7e6e861dba"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "db4f910397b9996f36cc2404a1317ede79787c1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f076debaba31c16b9a2f06394a43e38025a3a390", "patch": "@@ -1,3 +1,13 @@\n+2010-07-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44831\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Properly build\n+\ta MEM_REF preserving TBAA info of the original dereference.\n+\tDereference the original pointer if the address is not\n+\tinvariant.\n+\t(propagate_with_phi): Fixup type checks wrt MEM_REFs.  Require\n+\tat least one invariant address that we are going to dereference.\n+\n 2010-07-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44861"}, {"sha": "eb8d5f1bc213dee7ad9011703dd910b17dc9c44d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f076debaba31c16b9a2f06394a43e38025a3a390", "patch": "@@ -1,3 +1,9 @@\n+2010-07-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44831\n+\t* gcc.c-torture/compile/pr44831.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr21463.c: Adjust.\n+\n 2010-07-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44861"}, {"sha": "5539583deb0c0429ee0d2162983a65e617917b4d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44831.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44831.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44831.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44831.c?ref=f076debaba31c16b9a2f06394a43e38025a3a390", "patch": "@@ -0,0 +1,15 @@\n+typedef unsigned char UCHAR, *PUCHAR;\n+typedef void *HANDLE;\n+typedef struct _NCB {\n+    UCHAR ncb_reserve[10];\n+} NCB, *PNCB;\n+struct NBCmdQueue {\n+    PNCB head;\n+};\n+PNCB *NBCmdQueueFindNBC(struct NBCmdQueue *queue, PNCB ncb)\n+{\n+  PNCB *ret = &queue->head;\n+  while (ret && *ret != ncb)\n+    ret = (PNCB *)((*ret)->ncb_reserve + sizeof(HANDLE));\n+}\n+"}, {"sha": "3f63cdd8e8c027120f229db8176234da40314a89", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21463.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21463.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21463.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21463.c?ref=f076debaba31c16b9a2f06394a43e38025a3a390", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiprop\" } */\n+/* { dg-options \"-O -fdump-tree-phiprop-details\" } */\n \n struct f\n {\n@@ -16,5 +16,5 @@ int g(int i, int c, struct f *ff, int g)\n   return *t;\n }\n \n-/* { dg-final { scan-tree-dump-not \"\\\\*t\" \"phiprop\" } } */\n+/* { dg-final { scan-tree-dump-times \"Inserting PHI for result of load\" 1 \"phiprop\" } } */\n /* { dg-final { cleanup-tree-dump \"phiprop\" } } */"}, {"sha": "84f22b956edb04baa13ebec25e4d63c378f11480", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076debaba31c16b9a2f06394a43e38025a3a390/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=f076debaba31c16b9a2f06394a43e38025a3a390", "patch": "@@ -187,10 +187,17 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t}\n       else\n \t{\n+\t  tree rhs = gimple_assign_rhs1 (use_stmt);\n \t  gcc_assert (TREE_CODE (old_arg) == ADDR_EXPR);\n-\t  old_arg = TREE_OPERAND (old_arg, 0);\n-\t  new_var = create_tmp_reg (TREE_TYPE (old_arg), NULL);\n-\t  tmp = gimple_build_assign (new_var, unshare_expr (old_arg));\n+\t  new_var = create_tmp_reg (TREE_TYPE (rhs), NULL);\n+\t  if (!is_gimple_min_invariant (old_arg))\n+\t    old_arg = PHI_ARG_DEF_FROM_EDGE (phi, e);\n+\t  else\n+\t    old_arg = unshare_expr (old_arg);\n+\t  tmp = gimple_build_assign (new_var,\n+\t\t\t\t     fold_build2 (MEM_REF, TREE_TYPE (rhs),\n+\t\t\t\t\t\t  old_arg,\n+\t\t\t\t\t\t  TREE_OPERAND (rhs, 1)));\n \t  gcc_assert (is_gimple_reg (new_var));\n \t  add_referenced_var (new_var);\n \t  new_var = make_ssa_name (new_var, tmp);\n@@ -246,6 +253,8 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n   use_operand_p arg_p, use;\n   ssa_op_iter i;\n   bool phi_inserted;\n+  tree type = NULL_TREE;\n+  bool one_invariant = false;\n \n   if (!POINTER_TYPE_P (TREE_TYPE (ptr))\n       || !is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n@@ -268,16 +277,29 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n \t    return false;\n \t  arg = gimple_assign_rhs1 (def_stmt);\n \t}\n-      if ((TREE_CODE (arg) != ADDR_EXPR\n-\t   /* Avoid to have to decay *&a to a[0] later.  */\n-\t   || !is_gimple_reg_type (TREE_TYPE (TREE_OPERAND (arg, 0))))\n+      if (TREE_CODE (arg) != ADDR_EXPR\n \t  && !(TREE_CODE (arg) == SSA_NAME\n \t       && SSA_NAME_VERSION (arg) < n\n \t       && phivn[SSA_NAME_VERSION (arg)].value != NULL_TREE\n+\t       && (!type\n+\t\t   || types_compatible_p\n+\t\t       (type, TREE_TYPE (phivn[SSA_NAME_VERSION (arg)].value)))\n \t       && phivn_valid_p (phivn, arg, bb)))\n \treturn false;\n+      if (!type\n+\t  && TREE_CODE (arg) == SSA_NAME)\n+\ttype = TREE_TYPE (phivn[SSA_NAME_VERSION (arg)].value);\n+      if (TREE_CODE (arg) == ADDR_EXPR\n+\t  && is_gimple_min_invariant (arg))\n+\tone_invariant = true;\n     }\n \n+  /* If we neither have an address of a decl nor can reuse a previously\n+     inserted load, do not hoist anything.  */\n+  if (!one_invariant\n+      && !type)\n+    return false;\n+\n   /* Find a dereferencing use.  First follow (single use) ssa\n      copy chains for ptr.  */\n   while (single_imm_use (ptr, &use, &use_stmt)\n@@ -298,8 +320,9 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n \t    && gimple_assign_rhs_code (use_stmt) == MEM_REF\n \t    && TREE_OPERAND (gimple_assign_rhs1 (use_stmt), 0) == ptr\n \t    && integer_zerop (TREE_OPERAND (gimple_assign_rhs1 (use_stmt), 1))\n-\t    && types_compatible_p (TREE_TYPE (gimple_assign_rhs1 (use_stmt)),\n-\t\t\t\t   TREE_TYPE (TREE_TYPE (ptr)))\n+\t    && (!type\n+\t\t|| types_compatible_p\n+\t\t     (TREE_TYPE (gimple_assign_lhs (use_stmt)), type))\n \t    /* We cannot replace a load that may throw or is volatile.  */\n \t    && !stmt_can_throw_internal (use_stmt)))\n \tcontinue;\n@@ -319,6 +342,7 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n       if (!phi_inserted)\n \t{\n \t  res = phiprop_insert_phi (bb, phi, use_stmt, phivn, n);\n+\t  type = TREE_TYPE (res);\n \n \t  /* Remember the value we created for *ptr.  */\n \t  phivn[SSA_NAME_VERSION (ptr)].value = res;"}]}