{"sha": "d8693c6fa425fecaf6570114f1cd69aaf3c08043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2OTNjNmZhNDI1ZmVjYWY2NTcwMTE0ZjFjZDY5YWFmM2MwODA0Mw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-08-21T23:05:12Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-08-21T23:05:12Z"}, "message": "cppfiles.c (stack_include_file): line-map.c now handles include depth.\n\n\t* cppfiles.c (stack_include_file): line-map.c now handles include\n\tdepth.\n\t(handle_missing_handler): Similarly.\n\t(_cpp_execute_include): Similarly.\n\t(_cpp_pop_file_buffer): Similarly.\n\t* cpphash.h (struct cpp_reader): Remove system_include_depth,\n\tbuffer_stack_depth and include_depth.\n\t* cpplib.c (do_include_common): line-map.c now handles include depth.\n\t(cpp_push_buffer): Similarly.\n\t(_cpp_pop_buffer): Similarly.\n\t* cppmacro.c (builtin_macro): Update.\n\t* line-map.c (init_line_maps): Set depth.\n\t(add_line_map): Increment \"used\" earlier.  Update and use the\n\tinclude depth.\n\t(trace_include): Use the include depth.\n\t* line-map.h (struct line_maps): New member depth.\n\nFrom-SVN: r45085", "tree": {"sha": "e9c81016bacfbc22e38372b7b5b54d1c58bf8dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9c81016bacfbc22e38372b7b5b54d1c58bf8dc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8693c6fa425fecaf6570114f1cd69aaf3c08043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8693c6fa425fecaf6570114f1cd69aaf3c08043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8693c6fa425fecaf6570114f1cd69aaf3c08043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8693c6fa425fecaf6570114f1cd69aaf3c08043/comments", "author": null, "committer": null, "parents": [{"sha": "5993019d2058a2d4ff24b5990ff6d4ac9c8a3311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5993019d2058a2d4ff24b5990ff6d4ac9c8a3311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5993019d2058a2d4ff24b5990ff6d4ac9c8a3311"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "11a33645eb7243383686088fba9f874e084281bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -1,3 +1,22 @@\n+2001-08-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppfiles.c (stack_include_file): line-map.c now handles include\n+\tdepth.\n+\t(handle_missing_handler): Similarly.\n+\t(_cpp_execute_include): Similarly.\n+\t(_cpp_pop_file_buffer): Similarly.\n+\t* cpphash.h (struct cpp_reader): Remove system_include_depth,\n+\tbuffer_stack_depth and include_depth.\n+\t* cpplib.c (do_include_common): line-map.c now handles include depth.\n+\t(cpp_push_buffer): Similarly.\n+\t(_cpp_pop_buffer): Similarly.\n+\t* cppmacro.c (builtin_macro): Update.\n+\t* line-map.c (init_line_maps): Set depth.\n+\t(add_line_map): Increment \"used\" earlier.  Update and use the\n+\tinclude depth.\n+\t(trace_include): Use the include depth.\n+\t* line-map.h (struct line_maps): New member depth.\n+\n 2001-08-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppfiles.c (stack_include_file): Don't handle -H here."}, {"sha": "c8b28f947442707e24c624d9814e91e1879e1c9a", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -324,7 +324,6 @@ stack_include_file (pfile, inc)\n   /* Initialise controlling macro state.  */\n   pfile->mi_valid = true;\n   pfile->mi_cmacro = 0;\n-  pfile->include_depth++;\n \n   /* Generate the call back.  */\n   filename = inc->name;\n@@ -614,9 +613,7 @@ handle_missing_header (pfile, fname, angle_brackets)\n      const char *fname;\n      int angle_brackets;\n {\n-  /* We will try making the RHS pfile->buffer->sysp after 3.0.  */\n-  int print_dep = CPP_PRINT_DEPS(pfile) > (angle_brackets\n-\t\t\t\t\t   || pfile->system_include_depth);\n+  int print_dep = CPP_PRINT_DEPS(pfile) > (angle_brackets || pfile->map->sysp);\n \n   if (CPP_OPTION (pfile, print_deps_missing_files) && print_dep)\n     {\n@@ -671,9 +668,6 @@ _cpp_execute_include (pfile, header, type)\n \t\t\t   header->type == CPP_HEADER_NAME);\n   else if (inc != NO_INCLUDE_PATH)\n     {\n-      if (header->type == CPP_HEADER_NAME)\n-\tpfile->system_include_depth++;\n-\n       stacked = stack_include_file (pfile, inc);\n \n       if (type == IT_IMPORT)\n@@ -734,11 +728,6 @@ _cpp_pop_file_buffer (pfile, buf)\n {\n   struct include_file *inc = buf->inc;\n \n-  if (pfile->system_include_depth)\n-    pfile->system_include_depth--;\n-  if (pfile->include_depth)\n-    pfile->include_depth--;\n-\n   /* Record the inclusion-preventing macro, which could be NULL\n      meaning no controlling macro.  */\n   if (pfile->mi_valid && inc->cmacro == NULL)"}, {"sha": "d9ebb983f094f7d4f37337d48f04cc9c43cfd20d", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -279,15 +279,6 @@ struct cpp_reader\n   unsigned char *macro_buffer;\n   unsigned int macro_buffer_len;\n \n-  /* Current depth in #include directives that use <...>.  */\n-  unsigned int system_include_depth;\n-\n-  /* Current depth of buffer stack.  */\n-  unsigned int buffer_stack_depth;\n-\n-  /* Current depth in #include directives.  */\n-  unsigned int include_depth;\n-\n   /* Tree of other included files.  See cppfiles.c.  */\n   struct splay_tree_s *all_include_files;\n "}, {"sha": "6b1c11185fc83eaf451ff4c9035e034fbce37220", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -614,7 +614,7 @@ do_include_common (pfile, type)\n   if (!parse_include (pfile, &header))\n     {\n       /* Prevent #include recursion.  */\n-      if (pfile->buffer_stack_depth >= CPP_STACK_MAX)\n+      if (pfile->line_maps.depth >= CPP_STACK_MAX)\n \tcpp_fatal (pfile, \"#include nested too deeply\");\n       else\n \t{\n@@ -1764,7 +1764,6 @@ cpp_push_buffer (pfile, buffer, len, type, return_at_eof)\n   new->pfile = pfile;\n   new->return_at_eof = return_at_eof;\n \n-  pfile->buffer_stack_depth++;\n   pfile->buffer = new;\n \n   return new;\n@@ -1788,7 +1787,6 @@ _cpp_pop_buffer (pfile)\n \n   /* Update the reader's buffer before _cpp_do_file_change.  */\n   pfile->buffer = buffer->prev;\n-  pfile->buffer_stack_depth--;\n \n   if (buffer->type == BUF_FILE)\n     {"}, {"sha": "1ee91b7b305c5aaf290617d33c92397c41cd5546", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -164,10 +164,10 @@ builtin_macro (pfile, token)\n       break;\n \t\n     case BT_INCLUDE_LEVEL:\n-      /* pfile->include_depth counts the primary source as level 1,\n-\t but historically __INCLUDE_DEPTH__ has called the primary\n-\t source level 0.  */\n-      make_number_token (pfile, token, pfile->include_depth - 1);\n+      /* The line map depth counts the primary source as level 1, but\n+\t historically __INCLUDE_DEPTH__ has called the primary source\n+\t level 0.  */\n+      make_number_token (pfile, token, pfile->line_maps.depth - 1);\n       break;\n \n     case BT_SPECLINE:"}, {"sha": "a0f3ee50bc0fb640e2e9264134d529fe8194a23f", "filename": "gcc/line-map.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -39,6 +39,7 @@ init_line_maps (set)\n   set->used = 0;\n   set->last_listed = -1;\n   set->trace_includes = false;\n+  set->depth = 0;\n }\n \n /* Free a line map set.  */\n@@ -90,11 +91,11 @@ add_line_map (set, reason, sysp, from_line, to_file, to_line)\n \txrealloc (set->maps, set->allocated * sizeof (struct line_map));\n     }\n \n-  map = &set->maps[set->used];\n+  map = &set->maps[set->used++];\n \n   /* If we don't keep our line maps consistent, we can easily\n      segfault.  Don't rely on the client to do it for us.  */\n-  if (set->used == 0)\n+  if (set->depth == 0)\n     reason = LC_ENTER;\n   else if (reason == LC_LEAVE)\n     {\n@@ -135,15 +136,19 @@ add_line_map (set, reason, sysp, from_line, to_file, to_line)\n   map->to_line = to_line;\n \n   if (reason == LC_ENTER)\n-    map->included_from = set->used - 1;\n+    {\n+      set->depth++;\n+      map->included_from = set->used - 2;\n+      if (set->trace_includes)\n+\ttrace_include (set, map);\n+    }\n   else if (reason == LC_RENAME)\n     map->included_from = map[-1].included_from;\n   else if (reason == LC_LEAVE)\n-    map->included_from = INCLUDED_FROM (set, map - 1)->included_from;\n-  set->used++;\n-\n-  if (reason == LC_ENTER && set->trace_includes)\n-    trace_include (set, map);\n+    {\n+      set->depth--;\n+      map->included_from = INCLUDED_FROM (set, map - 1)->included_from;\n+    }\n \n   return map;\n }\n@@ -222,9 +227,9 @@ trace_include (set, map)\n      const struct line_maps *set;\n      const struct line_map *map;\n {\n-  const struct line_map *m;\n+  unsigned int i = set->depth;\n \n-  for (m = map; !MAIN_FILE_P (m); m = INCLUDED_FROM (set, m))\n+  while (--i)\n     putc ('.', stderr);\n   fprintf (stderr, \" %s\\n\", map->to_file);\n }"}, {"sha": "835cb3177531f459d5a30026a49a32d72b026c53", "filename": "gcc/line-map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8693c6fa425fecaf6570114f1cd69aaf3c08043/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=d8693c6fa425fecaf6570114f1cd69aaf3c08043", "patch": "@@ -60,6 +60,9 @@ struct line_maps\n      has been listed yet.  */\n   int last_listed;\n \n+  /* Depth of the include stack, including the current file.  */\n+  unsigned int depth;\n+\n   /* If true, prints an include trace a la -H.  */\n   bool trace_includes;\n };"}]}