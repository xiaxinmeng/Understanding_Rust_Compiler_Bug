{"sha": "c5581d4842efff98060c6caf270c6f6c55e9888a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1ODFkNDg0MmVmZmY5ODA2MGM2Y2FmMjcwYzZmNmM1NWU5ODg4YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-19T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-19T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "39f6ba7ca49695b8ac68bc8ff22211e5079535d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f6ba7ca49695b8ac68bc8ff22211e5079535d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5581d4842efff98060c6caf270c6f6c55e9888a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5581d4842efff98060c6caf270c6f6c55e9888a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5581d4842efff98060c6caf270c6f6c55e9888a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5581d4842efff98060c6caf270c6f6c55e9888a/comments", "author": null, "committer": null, "parents": [{"sha": "cc9c94d43dcfa98436152af9c00f011e9dab25f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9c94d43dcfa98436152af9c00f011e9dab25f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9c94d43dcfa98436152af9c00f011e9dab25f6"}], "stats": {"total": 574, "additions": 573, "deletions": 1}, "files": [{"sha": "5a88b740ade2fae939e3412b9737a741c8a2c694", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,7 @@\n+2021-06-18  Antoni Boucher  <bouanto@zoho.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2021-06-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* MAINTAINERS (Various Maintainers): Add Andrew and myself"}, {"sha": "4597e5992ce1dd86cf55065466b35022cdc08a30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,95 @@\n+2021-06-18  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/h8300.c (h8300_select_cc_mode): Handle SYMBOL_REF.\n+\t* config/h8300/logical.md (<code><mode>3 logcial expander): Generate\n+\tmore efficient code when the source can be trivially simplified.\n+\n+2021-06-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_of_def):  Calculate\n+\ta range if global is not available.\n+\t(ranger_cache::entry_range): Fallback to range_of_def.\n+\t* gimple-range-cache.h (range_of_def): Adjust prototype.\n+\n+2021-06-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101014\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Remove poor\n+\tvalue list.\n+\t(ranger_cache::~ranger_cache): Ditto.\n+\t(ranger_cache::enable_new_values): Delete.\n+\t(ranger_cache::push_poor_value): Delete.\n+\t(ranger_cache::range_of_def): Remove poor value processing.\n+\t(ranger_cache::entry_range): Ditto.\n+\t(ranger_cache::fill_block_cache): Ditto.\n+\t* gimple-range-cache.h (class ranger_cache): Remove poor value members.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Remove call.\n+\t* gimple-range.h (class gimple_ranger): Adjust.\n+\n+2021-06-18  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/100856\n+\t* common/config/arm/arm-common.c (arm_canon_arch_option_1): New function\n+\tderived from arm_canon_arch.\n+\t(arm_canon_arch_option): Call it.\n+\t(arm_canon_arch_multilib_option): New function.\n+\t* config/arm/arm-cpus.in (IGNORE_FOR_MULTILIB): New fgroup.\n+\t* config/arm/arm.h (arm_canon_arch_multilib_option): New prototype.\n+\t(CANON_ARCH_MULTILIB_SPEC_FUNCTION): New macro.\n+\t(MULTILIB_ARCH_CANONICAL_SPECS): New macro.\n+\t(DRIVER_SELF_SPECS): Add MULTILIB_ARCH_CANONICAL_SPECS.\n+\t* config/arm/arm.opt (mlibarch): New option.\n+\t* config/arm/t-rmprofile (MULTILIB_MATCHES): For armv8*-m, replace use\n+\tof march on RHS with mlibarch.\n+\n+2021-06-18  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* config.in: Regenerate.\n+\t* config/gcn/gcn.c (print_operand_address): Fix for global_load assembler\n+\tfunctions.\n+\t* configure: Regenerate.\n+\t* configure.ac: Fix for global_load assembler functions.\n+\n+2021-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101112\n+\t* tree-vect-slp.c (vect_slp_linearize_chain): Fix condition\n+\tto lookup a pattern stmt def.\n+\n+2021-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101062\n+\t* stor-layout.c (finish_bitfield_layout): Don't add bitfield\n+\trepresentatives in QUAL_UNION_TYPE.\n+\n+2021-06-18  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable):\n+\tAdd counting of how many times it is done.\n+\t(factor_out_conditional_conversion): Likewise.\n+\t(match_simplify_replacement): Likewise.\n+\t(value_replacement): Likewise.\n+\t(spaceship_replacement): Likewise.\n+\t(cond_store_replacement): Likewise.\n+\t(cond_if_else_store_replacement_1): Likewise.\n+\t(hoist_adjacent_loads): Likewise.\n+\n+2021-06-18  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-cfg.c (verify_gimple_assign_unary): Reject point and offset\n+\ttypes on NEGATE_EXPR, ABS_EXPR, BIT_NOT_EXPR, PAREN_EXPR and CNONJ_EXPR.\n+\t(verify_gimple_assign_binary): Reject point and offset types on\n+\tMULT_EXPR, MULT_HIGHPART_EXPR, TRUNC_DIV_EXPR, CEIL_DIV_EXPR,\n+\tFLOOR_DIV_EXPR, ROUND_DIV_EXPR, TRUNC_MOD_EXPR, CEIL_MOD_EXPR,\n+\tFLOOR_MOD_EXPR, ROUND_MOD_EXPR, RDIV_EXPR, and EXACT_DIV_EXPR.\n+\n+2021-06-18  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_minmax): Add support for ISA\n+\t3.1 IEEE 128-bit floating point xsmaxcqp/xsmincqp instructions.\n+\t* config/rs6000/rs6000.md (s<minmax><mode>3, IEEE128 iterator):\n+\tNew insns.\n+\n 2021-06-17  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/genfusion.pl (gen_logical_addsubf): Add"}, {"sha": "a522144b0f9c23a501261f112b2aeb6f34b8b836", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1 +1 @@\n-20210618\n+20210619"}, {"sha": "baf0dbd0c8b6fbb834fc45284fd74293f54aa036", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,289 @@\n+2021-06-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Array): Add error checking for\n+\tfixed-lower-bound and constrained index ranges applied\n+\tinappropriately on subtypes of unconstrained and\n+\tfixed-lower-bound array types.\n+\t(Constrain_Index): Correct and refine comment related to\n+\tfixed-lower-bound index ranges.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb: Improve comments.\n+\t* snames.ads-tmpl (Convention_Id): Remove \"--  Plenty of space\n+\tfor expansion\", because that's irrelevant now that we are no\n+\tlonger laying out node fields by hand.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Same_Object): Handle character literals\n+\tjust like integer literals.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Same_Object): Explicitly test for node\n+\tkinds being the same; deal with renamings one-by-one; adjust\n+\tnumbers in references to the Ada RM.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sprint.adb (Write_Source_Line): Check for EOF in\n+\tLine_Terminator loop.  Note that when a source file is read in,\n+\tan EOF character is added to the end.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aux.adb (Package_Specification): Add assertions to confirm\n+\tthe kind of the of parameter and returned node.\n+\t* sem_ch12.adb (Remove_Parent): Reorder conditions; this change\n+\tappears to be semantically neutral, but is enough to avoid the\n+\tproblematic call to Package_Specification.\n+\t* sem_util.adb (Is_Incomplete_Or_Private_Type): Replace loop\n+\twith a call to Package_Specification.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): For Enum_Lit'Size, use\n+\tEnum_Type'Object_Size.\n+\n+2021-06-18  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* sigtramp-vxworks-target.inc (__aarch64__): Sync\n+\tREGNO_PC_OFFSET with the back-end DWARF_ALT_FRAME_RETURN_COLUMN.\n+\tIn CFI_COMMON_REGS, leave r18 alone, VxWorks private.\n+\n+2021-06-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.adb (Process_Spec_Postconditions): Add missing\n+\tsupport for aliased subprograms and handle wrappers of\n+\tclass-wide pre/post conditions.\n+\t(Process_Inherited_Preconditions): Add missing support for\n+\taliased subprograms and handle wrappers of class-wide pre/post\n+\tconditions.\n+\t* einfo.ads (Class_Wide_Clone): Fix typo.\n+\t(Is_Class_Wide_Clone): Removed since it is not referenced.\n+\t(Is_Wrapper): Documenting new flag.\n+\t(LSP_Subprogram): Documenting new attribute.\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Decorate\n+\twrapper as Is_Wrapper and adjust call to\n+\tOverride_Dispatching_Operation.\n+\t* freeze.adb (Build_Inherited_Condition_Pragmas): Fix typo in\n+\tdocumentation.\n+\t(Check_Inherited_Conditions): Handle LSP wrappers; ensure\n+\tcorrect decoration of LSP wrappers.\n+\t* gen_il-fields.ads (Is_Class_Wide_Clone): Removed.\n+\t(Is_Wrapper): Added.\n+\t(LSP_Subprogram): Added.\n+\t* gen_il-gen-gen_entities.adb (Is_Class_Wide_Clone): Removed.\n+\t(Is_Wrapper): Added.\n+\t(LSP_Subprogram): Added.\n+\t* gen_il-internals.adb (Image): Adding uppercase image of\n+\tLSP_Subprogram.\n+\t* sem_ch6.adb (New_Overloaded_Entity): Fix decoration of LSP\n+\twrappers.\n+\t* sem_disp.ads (Override_Dispatching_Operation): Remove\n+\tparameter Is_Wrapper; no longer needed.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Adjust assertion.\n+\t(Override_Dispatching_Operation): Remove parameter Is_Wrapper;\n+\tno longer needed.\n+\t* treepr.adb (Image): Adding uppercase image of LSP_Subprogram.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Quantified_Expression): Ensure the type\n+\tof the name of a \"for of\" loop is frozen.\n+\t* exp_disp.adb (Check_Premature_Freezing): Complete condition to\n+\ttake into account a private type completed by another private\n+\ttype now that the freezing rule are better implemented.\n+\t* freeze.adb (Freeze_Entity.Freeze_Profile): Do not perform an\n+\tearly freeze on types if not in the proper scope. Special case\n+\texpression functions that requires access to the dispatch table.\n+\t(Should_Freeze_Type): New.\n+\t* sem_ch13.adb (Resolve_Aspect_Expressions): Prevent assert\n+\tfailure in case of an invalid tree (previous errors detected).\n+\t* sem_res.adb (Resolve): Remove kludge related to entities\n+\tcausing incorrect premature freezing.\n+\t* sem_util.adb (Ensure_Minimum_Decoration): Add protection\n+\tagainst non base types.\n+\n+2021-06-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Index): Set the High_Bound of a\n+\tfixed-lower-bound subtype's range to T (the subtype of the FLB\n+\tindex being constrained) rather than Base_Type (T).\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* ada_get_targ.adb, aspects.ads, checks.adb, cstand.adb,\n+\teinfo.ads, exp_attr.adb, freeze.adb, get_targ.adb,\n+\tlibgnat/a-textio.ads, libgnat/g-memdum.ads,\n+\tlibgnat/s-scaval__128.adb, libgnat/s-scaval.adb, make.adb,\n+\tosint.ads, par-prag.adb, sem_ch13.adb, sem_prag.adb,\n+\tsem_prag.ads, set_targ.adb, set_targ.ads, snames.ads-tmpl,\n+\ttargparm.ads, types.ads: Remove AAMP-specific code.\n+\t* switch.ads: Minor reformatting.\n+\t* gen_il-fields.ads, gen_il-gen.adb,\n+\tgen_il-gen-gen_entities.adb, gen_il-types.ads, einfo-utils.adb,\n+\teinfo-utils.ads: Package Types now contains \"type Float_Rep_Kind\n+\tis (IEEE_Binary);\", which used to also have an enumeral AAMP.\n+\tGen_IL can't handle fields of this type, which would be zero\n+\tsized. Therefore, we move the Float_Rep field into Einfo.Utils\n+\tas a synthesized attribute. (We do not delete the field\n+\taltogether, in case we want new floating-point representations\n+\tin the future.)\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/implementation_defined_aspects.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst: Remove\n+\tAAMP-specific documentation.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2021-06-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Expand_Sliding_Conversion): Move test of\n+\tIs_Fixed_Lower_Bound_Subtype to an assertion. Exclude string\n+\tliterals from sliding expansion.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Cleanup conditions\n+\trelated to Ada_Version.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Address_Value): Simplify.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Check_Array_Or_Scalar_Type): Use Expr_Value\n+\tinstead of Intval, because the latter only exists in literals.\n+\tRemove Set_Etype on E1; setting the type is done elsewhere.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Examine types of\n+\tboth formal parameters; refactor a complex detection of\n+\tby-reference types.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatcmd.adb: Fix handling of check and test commands.\n+\n+2021-06-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add\n+\tdocumentation for the array fixed-lower-bound feature.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Document switch.\n+\t* exp_aggr.adb: If -gnatd_g was given, then do not bump the\n+\tlimit to 500_000.\n+\n+2021-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Has_Access_Values): Remove\n+\tInclude_Internal parameter that was added in previous change.\n+\t* sem_warn.adb (Warnings_Off_E1): Back out E_Out_Parameter ==>\n+\tFormal_Kind change made previously. Check Is_Private_Type to\n+\tavoid warnings on private types. Misc cleanup.\n+\t* sem_attr.adb (Attribute_Has_Access_Values): Remove\n+\tInclude_Internal parameter.\n+\n+2021-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove dead branch\n+\tfor overlapping actuals in prefix notation.\n+\n+2021-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): Do not\n+\tartificially record a possible modification for a constant.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Code cleanups.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb, exp_dist.adb, exp_unst.adb, sa_messages.ads,\n+\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_eval.adb,\n+\tsem_util.adb, sem_util.ads, sinfo.ads: Update comments.\n+\n+2021-06-18  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* back_end.adb (Scan_Back_End_Switches): Set Opt.JSON_Output to\n+\tTrue if -fdiagnostics-format=json option is found.\n+\t* back_end.ads (Scan_Compiler_Arguments): Mention\n+\tOpt.JSON_Output.\n+\t* errout.adb (Output_JSON_Message): New procedure.\n+\t(Output_Messages): If Opt.JSON_Output is True, print messages\n+\twith new Output_JSON_Message procedure.\n+\t* opt.ads: Declare JSON_Output variable.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tMention new -fdiagnostics-format option.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Null_Exclusions_Match): Relax null exclusion\n+\tmismatch check when Relaxed_RM_Semantics is set.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* fe.h, opt.adb, opt.ads, par-prag.adb, sem_prag.adb,\n+\tswitch-c.adb (Extensions_Allowed): Replace by a function.\n+\t(Ada_Version_Type): Add new value Ada_With_Extensions, to\n+\treplace setting of Extensions_Allowed.  Update setting of\n+\tExtensions_Allowed.\n+\n+2021-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindgen.adb (Gen_Output_File_Ada): Generate a new constant\n+\tGNAT_Version_Address.\n+\t* libgnat/g-comver.adb (GNAT_Version_Address): New;\n+\t(GNAT_Version): Use GNAT_Version_Address to disable LTO warning.\n+\n+2021-06-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads (Is_Ada_2022_Only): Adding documentation.\n+\t* gen_il-fields.ads (Is_Ada_2022_Only): New flag.\n+\t* gen_il-gen-gen_entities.adb (Is_Ada_2022_Only): New flag.\n+\t* itypes.adb (Create_Null_Excluding_Itype): Inherit\n+\tIs_Ada_2022_Only.\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Skip reporting error\n+\ton Ada 2022 only subprograms that require overriding if we are\n+\tnot in Ada 2022 mode.\n+\t(Derive_Subprogram): Inherit Is_Ada_2022_Only.\n+\t* sem_ch6.adb (Check_Overriding_Indicator): Inherit\n+\tIs_Ada_2022_Only.\n+\t(New_Overloaded_Entity): Inherit Is_Ada_2022_Only.\n+\t* sem_ch7.adb (Declare_Inherited_Private_Subprograms): Inherit\n+\tIs_Ada_2022_Only.\n+\t(Preserve_Full_Attributes): Inherit Is_Ada_2022_Only.\n+\t* sem_disp.adb (Find_Hidden_Overridden_Primitive): Inherit\n+\tIs_Ada_2022_Only.\n+\t(Override_Dispatching_Operation): Inherit Is_Ada_2022_Only.\n+\t* sem_prag.adb (Analyze_Pragma): Allow form with argument for\n+\tAda 2022.\n+\t* sem_type.adb: (Disambiguate): Deal with Is_Ada_2022_Only\n+\t* lib-xref.adb (Generate_Reference): Error on static and\n+\tdispatching calls to Ada 2022 subprograms that require\n+\toverriding if we are not in Ada 2022 mode; warn on other\n+\treferences to Ada 2022 entities when not in Ada 2022 mode.\n+\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): Inherit\n+\tAda_2020_Only.\n+\t* libgnat/a-cdlili.ads (Empty): Adding pragma Ada_2022.\n+\t* libgnat/a-cidlli.ads (Empty): Adding pragma Ada_2022.\n+\t* libgnat/a-ciorma.ads (Empty): Adding pragma Ada_2022.\n+\t* libgnat/a-cobove.ads (Empty): Adding pragma Ada_2022.\n+\t* libgnat/a-coorma.ads (Empty): Adding pragma Ada_2022.\n+\t(New_Vector): Adding pragma Ada_2022.\n+\t(Insert_Vector): Adding pragma Ada_2022.\n+\t(Prepend_Vector): Adding pragma Ada_2022.\n+\t(Append_Vector): Adding pragma Ada_2022.\n+\n 2021-06-17  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch3.adb (Check_Ops_From_Incomplete_Type): Protect against"}, {"sha": "84fa208f80add8db6cd38a144613ec272eccd222", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,38 @@\n+2021-06-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* store.cc (binding_cluster::get_any_binding): Make symbolic reads\n+\tfrom a cluster with concrete bindings return unknown.\n+\n+2021-06-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_int_cst): New.\n+\t(region_model_manager::maybe_undo_optimize_bit_field_compare): Use\n+\tit to simplify away a local tree.\n+\t* region-model.cc (region_model::on_setjmp): Likewise.\n+\t(region_model::on_longjmp): Likewise.\n+\t* region-model.h (region_model_manager::get_or_create_int_cst):\n+\tNew decl.\n+\t* store.cc (binding_cluster::zero_fill_region): Use it to simplify\n+\taway a local tree.\n+\n+2021-06-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (class custom_event): Make abstract to allow for\n+\tcustom vfuncs, splitting existing implementation into...\n+\t(class precanned_custom_event): New subclass.\n+\t(custom_event::get_desc): Move to...\n+\t(precanned_custom_event::get_desc): ...subclass.\n+\t* checker-path.h (class custom_event): Make abstract to allow for\n+\tcustom vfuncs, splitting existing implementation into...\n+\t(class precanned_custom_event): New subclass.\n+\t* diagnostic-manager.cc (diagnostic_manager::add_events_for_eedge):\n+\tUse precanned_custom_event.\n+\t* engine.cc\n+\t(stale_jmp_buf::maybe_add_custom_events_for_superedge): Likewise.\n+\t* sm-signal.cc (signal_delivery_edge_info_t::add_events_to_path):\n+\tLikewise.\n+\n 2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99212"}, {"sha": "e57f613a79faefc3b5bb92caa83c2810d91bb7af", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,10 @@\n+2021-06-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100283\n+\tPR fortran/101123\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Unconditionally\n+\tconvert result of min/max to result type.\n+\n 2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95501"}, {"sha": "c1a715f491a0bf117cdebd79278940cd9d38b3d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,35 @@\n+2021-06-18  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fusion-p10-2logical.c: Update pattern\n+\tmatch counts.\n+\t* gcc.target/powerpc/fusion-p10-addadd.c: Update pattern match\n+\tcounts.\n+\t* gcc.target/powerpc/fusion-p10-ldcmpi.c: Update pattern match\n+\tcounts.\n+\t* gcc.target/powerpc/fusion-p10-logadd.c: Update pattern match\n+\tcounts.\n+\n+2021-06-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100283\n+\tPR fortran/101123\n+\t* gfortran.dg/min0_max0_1.f90: New test.\n+\t* gfortran.dg/min0_max0_2.f90: New test.\n+\n+2021-06-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/symbolic-7.c: New test.\n+\n+2021-06-18  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/100856\n+\t* gcc.target/arm/acle/pr100856.c: New test.\n+\t* gcc.target/arm/multilib.exp: Add tests for cde options.\n+\n+2021-06-18  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-minmax-2.c: New test.\n+\n 2021-06-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/101106"}, {"sha": "f8d6fa74a3be3880f14f6c38f83e5163d9623657", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5581d4842efff98060c6caf270c6f6c55e9888a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5581d4842efff98060c6caf270c6f6c55e9888a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5581d4842efff98060c6caf270c6f6c55e9888a", "patch": "@@ -1,3 +1,119 @@\n+2021-06-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100387\n+\t* include/bits/ranges_algo.h (__minmax_fn::operator()): Rewrite\n+\tto limit comparison complexity to 3*N/2.\n+\t(__minmax_element_fn::operator()): Likewise.\n+\t(shift_right): Avoid premature std::move of __result.\n+\t* testsuite/25_algorithms/minmax/constrained.cc (test04, test05):\n+\tNew tests.\n+\t* testsuite/25_algorithms/minmax_element/constrained.cc (test02):\n+\tLikewise.\n+\n+2021-06-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/concepts (convertible_to): Just use declval as per\n+\tLWG 3557.\n+\n+2021-06-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95833\n+\t* include/std/numeric (reduce(Iter, Iter, T, BinaryOp)): Replace\n+\tincorrect static_assert with ones matching the 'Mandates'\n+\tconditions in the standard.\n+\t* testsuite/26_numerics/reduce/95833.cc: New test.\n+\n+2021-06-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/cons/char/1.cc: Use\n+\tdiagnostic pragma to suppress -Wstringop-overread error.\n+\n+2021-06-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__find_fn, find, __find_if_fn)\n+\t(find_if, __find_if_not_fn, find_if_not, _in_in_result)\n+\t(__mismatch_fn, mismatch, __search_fn, search): Move to ...\n+\t* include/bits/ranges_util.h: ... here.\n+\t* include/std/ranges (__detail::find, __detail::find_if)\n+\t(__detail::find_if_not, __detail::mismatch): Remove.\n+\t(filter_view): Use ranges::find_if instead.\n+\t(drop_while_view): Use ranges::find_if_not instead.\n+\t(split_view): Use ranges::find and ranges::mismatch instead.\n+\n+2021-06-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (weakly_incrementable): Remove\n+\tdefault_initializable requirement.\n+\t* include/bits/ranges_base.h (ranges::view): Likewise.\n+\t* include/bits/ranges_util.h (subrange): Constrain the default\n+\tctor.\n+\t* include/bits/stl_iterator.h (back_insert_iterator): Remove the\n+\tdefault ctor.\n+\t(front_insert_iterator): Likewise.\n+\t(insert_iterator): Likewise.  Remove NSDMIs.\n+\t(common_iterator): Constrain the default ctor.\n+\t(counted_iterator): Likewise.\n+\t* include/bits/stream_iterator.h (ostream_iterator): Remove the\n+\tdefault ctor.\n+\t* include/std/ranges (__detail::__box::operator=): Handle\n+\tself-assignment in the primary template.\n+\t(__detail::__box): In the partial specialization: adjust\n+\tconstraints as per P2325.  Add specialized operator= for the\n+\tcase when the wrapped type is not copyable.  Constrain the\n+\tdefault ctor.  Avoid list-initialization.\n+\t(single_view): Constraint the default ctor.\n+\t(iota_view): Relax semiregular constraint to copyable.\n+\tConstrain the default ctor.\n+\t(iota_view::_Iterator): Constraint the default ctor.\n+\t(basic_istream_view): Remove the default ctor.  Remove NSDMIs.\n+\tRemove redundant checks for empty _M_stream.\n+\t(basic_istream_view::_Iterator): Likewise.\n+\t(ref_view): Remove the default ctor.  Remove NSDMIs.\n+\t(ref_view::_Iterator): Constrain the default ctor.\n+\t(__detail::__non_propagating_cache::operator=): Define overload\n+\tfor assigning from a value of the underlying type.\n+\t(filter_view): Likewise.\n+\t(filter_view::_Iterator): Likewise.\n+\t(transform_view): Likewise.\n+\t(transform_view::_Iterator): Likewise.\n+\t(take_view): Likewise.\n+\t(take_view::_Iterator): Likewise.\n+\t(take_while_view): Likewise.\n+\t(take_while_view::_Iterator): Likewise.\n+\t(drop_while_view): Likewise.\n+\t(drop_while_view::_Iterator): Likewise.\n+\t(join_view): Likewise.\n+\t(split_view::_OuterIter::__current): Adjust after changing the\n+\ttype of _M_current.\n+\t(split_view::_M_current): Wrap it in a __non_propagating_cache.\n+\t(split_view::split_view): Constrain the default ctor.\n+\t(common_view): Constrain the default ctor.\n+\t(reverse_view): Likewise.\n+\t(elements_view): Likewise.\n+\t* include/std/span (enable_view<span<_ElementType, _Extent>>):\n+\tDefine this partial specialization to true unconditionally.\n+\t* include/std/version (__cpp_lib_ranges): Adjust value.\n+\t* testsuite/24_iterators/back_insert_iterator/constexpr.cc:\n+\tDon't attempt to default construct a back_insert_iterator.\n+\t* testsuite/24_iterators/front_insert_iterator/constexpr.cc:\n+\tDon't attempt to default construct a front_insert_iterator.\n+\t* testsuite/24_iterators/insert_iterator/constexpr.cc:\n+\tDon't attempt to default construct an insert_iterator.\n+\t* testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc:\n+\tRemove this test for default constructibility of ostream_iterator.\n+\t* testsuite/std/ranges/97600.cc: Don't attempt to default\n+\tconstruct a basic_istream_view.\n+\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc:\n+\tRename to ...\n+\t* testsuite/std/ranges/adaptors/detail/copyable_box.cc: ... this.\n+\t(test02): Adjust now that __box is copyable-box not\n+\tsemiregular-box.\n+\t(test03): New test.\n+\t* testsuite/std/ranges/p2325.cc: New test.\n+\t* testsuite/std/ranges/single_view.cc (test06): New test.\n+\t* testsuite/std/ranges/view.cc: Adjust now that view doesn't\n+\trequire default_initializable.\n+\n 2021-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91488"}]}