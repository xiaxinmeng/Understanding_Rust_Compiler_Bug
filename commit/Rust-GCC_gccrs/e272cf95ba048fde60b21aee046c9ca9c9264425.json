{"sha": "e272cf95ba048fde60b21aee046c9ca9c9264425", "node_id": "C_kwDOANBUbNoAKGUyNzJjZjk1YmEwNDhmZGU2MGIyMWFlZTA0NmM5Y2E5YzkyNjQ0MjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-28T13:18:28Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-28T13:18:28Z"}, "message": "c++: var tmpl w/ dependent constrained auto type [PR103341]\n\nWhen deducing the type of a variable template (or templated static data\nmember) with a constrained auto type, we might need its template\narguments for satisfaction since the constraint could depend on them.\n\n\tPR c++/103341\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (cp_finish_decl): Pass the template arguments of a\n\tvariable template specialization or a templated static data\n\tmember to do_auto_deduction when the auto is constrained.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-class4.C: New test.\n\t* g++.dg/cpp2a/concepts-var-templ2.C: New test.", "tree": {"sha": "c01aa3ddac711f93d53ca276143591cd6ec6d239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01aa3ddac711f93d53ca276143591cd6ec6d239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e272cf95ba048fde60b21aee046c9ca9c9264425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e272cf95ba048fde60b21aee046c9ca9c9264425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e272cf95ba048fde60b21aee046c9ca9c9264425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e272cf95ba048fde60b21aee046c9ca9c9264425/comments", "author": null, "committer": null, "parents": [{"sha": "9ec306582fd60e5b76f07eb81c9ed2415d9a3590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec306582fd60e5b76f07eb81c9ed2415d9a3590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec306582fd60e5b76f07eb81c9ed2415d9a3590"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "26ce9bfefec9da2ee802df27da60deab14fc6ccd", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=e272cf95ba048fde60b21aee046c9ca9c9264425", "patch": "@@ -7958,9 +7958,19 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       enum auto_deduction_context adc = adc_variable_type;\n       if (VAR_P (decl) && DECL_DECOMPOSITION_P (decl))\n \tadc = adc_decomp_type;\n+      tree outer_targs = NULL_TREE;\n+      if (PLACEHOLDER_TYPE_CONSTRAINTS_INFO (auto_node)\n+\t  && VAR_P (decl)\n+\t  && DECL_LANG_SPECIFIC (decl)\n+\t  && DECL_TEMPLATE_INFO (decl)\n+\t  && !DECL_FUNCTION_SCOPE_P (decl))\n+\t/* The outer template arguments might be needed for satisfaction.\n+\t   (For function scope variables, do_auto_deduction will obtain the\n+\t   outer template arguments from current_function_decl.)  */\n+\touter_targs = DECL_TI_ARGS (decl);\n       type = TREE_TYPE (decl) = do_auto_deduction (type, d_init, auto_node,\n \t\t\t\t\t\t   tf_warning_or_error, adc,\n-\t\t\t\t\t\t   NULL_TREE, flags);\n+\t\t\t\t\t\t   outer_targs, flags);\n       if (type == error_mark_node)\n \treturn;\n       if (TREE_CODE (type) == FUNCTION_TYPE)"}, {"sha": "90395f110256a180f55332d2b4b9b94f88912583", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class4.C?ref=e272cf95ba048fde60b21aee046c9ca9c9264425", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/103341\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept same_as = __is_same(T, U);\n+template<class T>\n+struct A {\n+  static inline same_as<T> auto value = 0; // { dg-error \"constraint\" }\n+};\n+\n+template struct A<int>; // { dg-bogus \"\" }\n+template struct A<bool>; // { dg-message \"required from here\" }"}, {"sha": "e1802aca75f2135cd18bf72f2bf8f0fbd1a5fb07", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-var-templ2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e272cf95ba048fde60b21aee046c9ca9c9264425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ2.C?ref=e272cf95ba048fde60b21aee046c9ca9c9264425", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/103341\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept same_as = __is_same(T, U);\n+template<class T> same_as<T> auto v1a = 1;\n+template<class T> same_as<T> auto v1b = T();\n+template<class T> same_as<T*> auto v2a = 1; // { dg-error \"constraints\" }\n+template<class T> same_as<T*> auto v2b = T(); // { dg-error \"constraints\" }\n+\n+template int v1a<int>;\n+template int v1b<int>;\n+template int v2a<int>; // { dg-message \"required from here\" }\n+template int v2b<int>; // { dg-message \"required from here\" }"}]}