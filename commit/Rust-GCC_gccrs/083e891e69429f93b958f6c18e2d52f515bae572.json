{"sha": "083e891e69429f93b958f6c18e2d52f515bae572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzZTg5MWU2OTQyOWY5M2I5NThmNmMxOGUyZDUyZjUxNWJhZTU3Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-09-24T17:23:56Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-09-24T17:23:56Z"}, "message": "re PR c/61405 (Not emitting \"enumeration value not handled in switch\" warning for bit-field enums)\n\n\tPR c/61405\n\tPR c/53874\ngcc/\n\t* asan.c (maybe_instrument_call): Add default case.\n\t* ipa-pure-const.c (special_builtin_state): Likewise.\n\t* predict.c (expr_expected_value_1): Likewise.\n\t* lto-streamer-out.c (write_symbol): Initialize variable.\ngcc/c-family/\n\t* c-common.h (struct c_common_resword): Don't define CPP_KEYWORD.\ngcc/c/\n\t* c-parser.c: Don't define CPP_KEYWORD.\n\t(c_parser_switch_statement): Pass original type to c_finish_case.\n\t* c-tree.h (c_finish_case): Update declaration.\n\t* c-typeck.c (c_finish_case): Add TYPE parameter.  Pass it\n\tconditionally to c_do_switch_warnings.\ngcc/cp/\n\t* semantics.c (finish_switch_cond): Call unlowered_expr_type.\n\t* tree.c (bot_manip): Add default case.\n\t* parser.c (cp_parser_primary_expression): Cast the controlling\n\texpression of a switch to an int.\n\t(cp_parser_unqualified_id): Likewise.\ngcc/testsuite/\n\t* c-c++-common/pr53874.c: New test.\n\t* c-c++-common/pr61405.c: New test.\nlibcpp/\n\t* include/cpplib.h (enum cpp_ttype): Define CPP_KEYWORD.\n\nFrom-SVN: r215559", "tree": {"sha": "5828257c837204733ae0f5091cb5468196499f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5828257c837204733ae0f5091cb5468196499f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083e891e69429f93b958f6c18e2d52f515bae572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083e891e69429f93b958f6c18e2d52f515bae572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083e891e69429f93b958f6c18e2d52f515bae572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083e891e69429f93b958f6c18e2d52f515bae572/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc9c1b91e6be77b710751e935d6c1e09d1f289a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9c1b91e6be77b710751e935d6c1e09d1f289a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9c1b91e6be77b710751e935d6c1e09d1f289a1"}], "stats": {"total": 153, "additions": 136, "deletions": 17}, "files": [{"sha": "30f713cd65d0784081a852bc351b661b3d6fd60e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,12 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* asan.c (maybe_instrument_call): Add default case.\n+\t* ipa-pure-const.c (special_builtin_state): Likewise.\n+\t* predict.c (expr_expected_value_1): Likewise.\n+\t* lto-streamer-out.c (write_symbol): Initialize variable.\n+\n 2014-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmuld_lane_f64): Use macro for getting"}, {"sha": "f520eab4c547d70d43b98ab8514e01e0b4dbee73", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -2027,6 +2027,8 @@ maybe_instrument_call (gimple_stmt_iterator *iter)\n \t    case BUILT_IN_TRAP:\n \t      /* Don't instrument these.  */\n \t      return false;\n+\t    default:\n+\t      break;\n \t    }\n \t}\n       tree decl = builtin_decl_implicit (BUILT_IN_ASAN_HANDLE_NO_RETURN);"}, {"sha": "2278e779441545d3205fc851b06104a9e24d726d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,9 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* c-common.h (struct c_common_resword): Don't define CPP_KEYWORD.\n+\n 2014-09-23  Andi Kleen  <ak@linux.intel.com>\n \n \t* c-common.c (handle_no_reorder_attribute): New function."}, {"sha": "5ec79a06e98edc7f306406094ba9e8da904363f4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -327,9 +327,6 @@ struct c_common_resword\n \n /* Extra cpp_ttype values for C++.  */\n \n-/* A token type for keywords, as opposed to ordinary identifiers.  */\n-#define CPP_KEYWORD ((enum cpp_ttype) (N_TTYPES + 1))\n-\n /* A token type for template-ids.  If a template-id is processed while\n    parsing tentatively, it is replaced with a CPP_TEMPLATE_ID token;\n    the value of the CPP_TEMPLATE_ID is whatever was returned by"}, {"sha": "67099c1081a79f83fff1507d0a021e4a143e726b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,13 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* c-parser.c: Don't define CPP_KEYWORD.\n+\t(c_parser_switch_statement): Pass original type to c_finish_case.\n+\t* c-tree.h (c_finish_case): Update declaration.\n+\t* c-typeck.c (c_finish_case): Add TYPE parameter.  Pass it\n+\tconditionally to c_do_switch_warnings.\n+\n 2014-09-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/62024"}, {"sha": "71f40b7deaf30be562272cccee2f59f9c0c2e2f5", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -126,11 +126,6 @@ c_parse_init (void)\n    C++).  It would then be possible to share more of the C and C++\n    lexer code, if desired.  */\n \n-/* The following local token type is used.  */\n-\n-/* A keyword.  */\n-#define CPP_KEYWORD ((enum cpp_ttype) (N_TTYPES + 1))\n-\n /* More information about the type of a CPP_NAME token.  */\n typedef enum c_id_kind {\n   /* An ordinary identifier.  */\n@@ -5232,7 +5227,7 @@ c_parser_switch_statement (c_parser *parser)\n   save_break = c_break_label;\n   c_break_label = NULL_TREE;\n   body = c_parser_c99_block_statement (parser);\n-  c_finish_case (body);\n+  c_finish_case (body, ce.original_type);\n   if (c_break_label)\n     {\n       location_t here = c_parser_peek_token (parser)->location;"}, {"sha": "fc145a856d288ba02146175614a027f6860db6b9", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -618,7 +618,7 @@ extern void process_init_element (location_t, struct c_expr, bool,\n extern tree build_compound_literal (location_t, tree, tree, bool);\n extern void check_compound_literal_type (location_t, struct c_type_name *);\n extern tree c_start_case (location_t, location_t, tree, bool);\n-extern void c_finish_case (tree);\n+extern void c_finish_case (tree, tree);\n extern tree build_asm_expr (location_t, tree, tree, tree, tree, tree, bool);\n extern tree build_asm_stmt (tree, tree);\n extern int c_types_compatible_p (tree, tree);"}, {"sha": "f69c28bee077d25f0fed038aa58db69e37394fd6", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -9486,10 +9486,11 @@ do_case (location_t loc, tree low_value, tree high_value)\n   return label;\n }\n \n-/* Finish the switch statement.  */\n+/* Finish the switch statement.  TYPE is the original type of the\n+   controlling expression of the switch, or NULL_TREE.  */\n \n void\n-c_finish_case (tree body)\n+c_finish_case (tree body, tree type)\n {\n   struct c_switch *cs = c_switch_stack;\n   location_t switch_location;\n@@ -9499,7 +9500,7 @@ c_finish_case (tree body)\n   /* Emit warnings as needed.  */\n   switch_location = EXPR_LOCATION (cs->switch_expr);\n   c_do_switch_warnings (cs->cases, switch_location,\n-\t\t\tTREE_TYPE (cs->switch_expr),\n+\t\t\ttype ? type : TREE_TYPE (cs->switch_expr),\n \t\t\tSWITCH_COND (cs->switch_expr));\n \n   /* Pop the stack.  */"}, {"sha": "194f0606ba60323501efff6a5fa1caf0ed9844e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,13 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* semantics.c (finish_switch_cond): Call unlowered_expr_type.\n+\t* tree.c (bot_manip): Add default case.\n+\t* parser.c (cp_parser_primary_expression): Cast the controlling\n+\texpression of a switch to an int.\n+\t(cp_parser_unqualified_id): Likewise.\n+\n 2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61857"}, {"sha": "45631455fa1a8738cd4bddf980c79860943de583", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -4176,7 +4176,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n-  switch (token->type)\n+  switch ((int) token->type)\n     {\n       /* literal:\n \t   integer-literal\n@@ -4862,7 +4862,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n \n-  switch (token->type)\n+  switch ((int) token->type)\n     {\n     case CPP_NAME:\n       {"}, {"sha": "2728f5887f119849b94d6fd66cedfc167453a75c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1127,7 +1127,8 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \t  error (\"switch quantity not an integer\");\n \t  cond = error_mark_node;\n \t}\n-      orig_type = TREE_TYPE (cond);\n+      /* We want unlowered type here to handle enum bit-fields.  */\n+      orig_type = unlowered_expr_type (cond);\n       if (cond != error_mark_node)\n \t{\n \t  /* Warn if the condition has boolean value.  */"}, {"sha": "a7bb38b97c1156dc7fefeda32c6596ec76c9a6ae", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -2345,6 +2345,8 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n \t  case BUILT_IN_FILE:\n \t  case BUILT_IN_LINE:\n \t    SET_EXPR_LOCATION (*tp, input_location);\n+\t  default:\n+\t    break;\n \t  }\n     }\n   return t;"}, {"sha": "b5ded3e73ed5e998a989e5a23b4b9d97291df823", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -451,6 +451,8 @@ special_builtin_state (enum pure_const_state_e *state, bool *looping,\n \t  *looping = true;\n \t  *state = IPA_CONST;\n \t  return true;\n+\tdefault:\n+\t  break;\n       }\n   return false;\n }"}, {"sha": "cff48eed6f697eb2fa7e101dd4a46901943b38e3", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -2422,7 +2422,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n {\n   const char *name;\n   enum gcc_plugin_symbol_kind kind;\n-  enum gcc_plugin_symbol_visibility visibility;\n+  enum gcc_plugin_symbol_visibility visibility = GCCPV_DEFAULT;\n   unsigned slot_num;\n   uint64_t size;\n   const char *comdat;"}, {"sha": "b5556db1839bf452a3bc179cf8266aedcb994c37", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1902,6 +1902,8 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t\tif (predictor)\n \t\t  *predictor = PRED_COMPARE_AND_SWAP;\n \t\treturn boolean_true_node;\n+\t      default:\n+\t\tbreak;\n \t    }\n \t}\n "}, {"sha": "2b4f867fe5db954cd2b69630ed222c1c28886187", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,10 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* c-c++-common/pr53874.c: New test.\n+\t* c-c++-common/pr61405.c: New test.\n+\n 2014-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/simd/vmul_lane_const_lane_1.c: New test."}, {"sha": "153f997c6e901e197f1e545c780bd5d7e46f60c8", "filename": "gcc/testsuite/c-c++-common/pr53874.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53874.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53874.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53874.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/53874 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch-enum\" } */\n+\n+enum E { A, B, C };\n+struct S { enum E e:2; };\n+typedef struct S TS;\n+\n+int\n+fn0 (struct S *s)\n+{\n+  switch (s->e) /* { dg-warning \"enumeration value .C. not handled in switch\" } */\n+    {\n+    case A:\n+      return 1;\n+    case B:\n+      return 2;\n+    default:\n+      return 0;\n+    }\n+}\n+\n+int\n+fn1 (TS *s)\n+{\n+  switch (s->e) /* { dg-warning \"enumeration value .C. not handled in switch\" } */\n+    {\n+    case A:\n+      return 1;\n+    case B:\n+      return 2;\n+    default:\n+      return 0;\n+    }\n+}"}, {"sha": "9c05a84764a6ef70a91da69a53621b6de527c5d6", "filename": "gcc/testsuite/c-c++-common/pr61405.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61405.c?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/61405 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum E { A, B, C };\n+struct S { enum E e:2; };\n+typedef struct S TS;\n+\n+int\n+fn0 (struct S *s)\n+{\n+  switch (s->e) /* { dg-warning \"enumeration value .C. not handled in switch\" } */\n+    {\n+    case A:\n+      return 1;\n+    case B:\n+      return 2;\n+    }\n+}\n+\n+int\n+fn1 (TS *s)\n+{\n+  switch (s->e) /* { dg-warning \"enumeration value .C. not handled in switch\" } */\n+    {\n+    case A:\n+      return 1;\n+    case B:\n+      return 2;\n+    }\n+}"}, {"sha": "463bb60e7614d57ef9c57bcde012e35422cd9862", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -1,3 +1,9 @@\n+2014-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61405\n+\tPR c/53874\n+\t* include/cpplib.h (enum cpp_ttype): Define CPP_KEYWORD.\n+\n 2014-09-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* charset.c (conversion): Rename to ..."}, {"sha": "06d18d49ca7e0afffcde39ee9775fb5ca4d76a6a", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e891e69429f93b958f6c18e2d52f515bae572/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e891e69429f93b958f6c18e2d52f515bae572/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=083e891e69429f93b958f6c18e2d52f515bae572", "patch": "@@ -153,6 +153,9 @@ enum cpp_ttype\n   TTYPE_TABLE\n   N_TTYPES,\n \n+  /* A token type for keywords, as opposed to ordinary identifiers.  */\n+  CPP_KEYWORD,\n+\n   /* Positions in the table.  */\n   CPP_LAST_EQ        = CPP_LSHIFT,\n   CPP_FIRST_DIGRAPH  = CPP_HASH,"}]}