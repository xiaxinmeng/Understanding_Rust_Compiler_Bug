{"sha": "a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1N2I1YzU5NDI3OWU3ZTNhNGE1MWJmNTc0OGRiZDA3ODVhM2ZiYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-03-17T17:29:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-03-17T17:29:11Z"}, "message": "* cp-tree.def, parser.c, pt.c: Fix comment typos.\n\nFrom-SVN: r123024", "tree": {"sha": "61fdb444939363737d122ef49f18d87d72a6804a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61fdb444939363737d122ef49f18d87d72a6804a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/comments", "author": null, "committer": null, "parents": [{"sha": "c492dc9a666e438ca8bbd2052482e8c30d8b5019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c492dc9a666e438ca8bbd2052482e8c30d8b5019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c492dc9a666e438ca8bbd2052482e8c30d8b5019"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b46530878d43ccbb8ab315243fb23e5230d53533", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "patch": "@@ -1,3 +1,7 @@\n+2007-03-17  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cp-tree.def, parser.c, pt.c: Fix comment typos.\n+\n 2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* cvt.c (cp_convert_and_check) : Define."}, {"sha": "a2a0c03b79a46936079599659c243e12064cafac", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "patch": "@@ -367,7 +367,7 @@ DEFTREECODE (STATIC_ASSERT, \"static_assert\", tcc_exceptional, 0)\n \n    Values is a (template) parameter pack. When tuple<int, float,\n    double> is instantiated, the Values parameter pack is instantiated\n-   with the argment pack <int, float, double>. ARGUMENT_PACK_ARGS will\n+   with the argument pack <int, float, double>. ARGUMENT_PACK_ARGS will\n    be a TREE_VEC containing int, float, and double.  */\n DEFTREECODE (TYPE_ARGUMENT_PACK, \"type_argument_pack\", tcc_type, 0)\n "}, {"sha": "2cf6f8a71d8388ef246f799fd7553bfe68ba3c9c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "patch": "@@ -4343,8 +4343,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t\t   allowed in standard C++.  */\n \t\tif (pedantic)\n \t\t  pedwarn (\"ISO C++ forbids compound-literals\");\n-\t\t/* For simplicitly, we disallow compound literals in\n-\t\t   constant-expressions for simpliicitly.  We could\n+\t\t/* For simplicity, we disallow compound literals in\n+\t\t   constant-expressions.  We could\n \t\t   allow compound literals of integer type, whose\n \t\t   initializer was a constant, in constant\n \t\t   expressions.  Permitting that usage, as a further"}, {"sha": "575057fd3ef57ced5bfdaba8266fbd4eeb470ec8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a757b5c594279e7e3a4a51bf5748dbd0785a3fbc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a757b5c594279e7e3a4a51bf5748dbd0785a3fbc", "patch": "@@ -7677,7 +7677,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n             /* If there is a local specialization that isn't a\n                parameter pack, it means that we're doing a \"simple\"\n                substitution from inside tsubst_pack_expansion. Just\n-               return the local specialiation (which will be a single\n+               return the local specialization (which will be a single\n                parm).  */\n             tree spec = NULL_TREE;\n             if (local_specializations)"}]}