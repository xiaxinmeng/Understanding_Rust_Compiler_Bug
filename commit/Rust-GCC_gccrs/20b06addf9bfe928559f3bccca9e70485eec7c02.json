{"sha": "20b06addf9bfe928559f3bccca9e70485eec7c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiMDZhZGRmOWJmZTkyODU1OWYzYmNjY2E5ZTcwNDg1ZWVjN2MwMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-15T18:31:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-15T18:31:40Z"}, "message": "N3778: Sized Deallocation\n\n\tN3778: Sized Deallocation\ngcc/c-family/\n\t* c.opt (-fsized-deallocation, -Wc++14-compat): New.\n\t(-Wsized-deallocation): New.\n\t* c-opts.c (c_common_post_options): -fsized-deallocation defaults\n\tto on in C++14 and up.\ngcc/cp/\n\t* call.c (non_placement_deallocation_fn_p): A global sized\n\toperator delete is not a usual deallocation function until C++14.\n\t(build_op_delete_call): Choose the global sized op delete if we\n\tknow the size.\n\t* cp-tree.h: Declare non_placement_deallocation_fn_p.\n\t(enum cp_tree_index): Remove CPTI_GLOBAL_DELETE_FNDECL.\n\t(global_delete_fndecl): Remove.\n\t* decl.c (cxx_init_decl_processing): Also declare sized op deletes.\n\t(grok_op_properties): Warn about sized dealloc without the flag.\n\t* init.c (build_builtin_delete_call): Remove.\n\t(build_vec_delete_1, build_delete): Don't call it.\n\t* decl2.c (maybe_warn_sized_delete): New.\n\t(cp_write_global_declarations): Call it.\nlibstdc++-v3/\n\t* libsupc++/del_ops.cc: New.\n\t* libsupc++/del_opvs.cc: New.\n\t* libsupc++/Makefile.am: Add them.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Export _ZdlPvm and _ZdaPvm.\n\nFrom-SVN: r218755", "tree": {"sha": "7d781cbe68124e8fc1d4fd6541d6318c1962a1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d781cbe68124e8fc1d4fd6541d6318c1962a1be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b06addf9bfe928559f3bccca9e70485eec7c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b06addf9bfe928559f3bccca9e70485eec7c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b06addf9bfe928559f3bccca9e70485eec7c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b06addf9bfe928559f3bccca9e70485eec7c02/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14fa3e7fdf48c8b9529573356964a7d0e1426863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fa3e7fdf48c8b9529573356964a7d0e1426863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fa3e7fdf48c8b9529573356964a7d0e1426863"}], "stats": {"total": 415, "additions": 372, "deletions": 43}, "files": [{"sha": "2d0c2fe58720bc690415d18d0d50ea234234d037", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -1,3 +1,10 @@\n+2014-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (-fsized-deallocation, -Wc++14-compat): New.\n+\t(-Wsized-deallocation): New.\n+\t* c-opts.c (c_common_post_options): -fsized-deallocation defaults\n+\tto on in C++14 and up.\n+\n 2014-12-11  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Enable C++14 __cpp_constexpr."}, {"sha": "dbb99125462712f9affebfca5cdf479ab1054d2a", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -889,6 +889,10 @@ c_common_post_options (const char **pfilename)\n   else if (warn_narrowing == -1)\n     warn_narrowing = 0;\n \n+  /* Global sized deallocation is new in C++14.  */\n+  if (flag_sized_deallocation == -1)\n+    flag_sized_deallocation = (cxx_dialect >= cxx14);\n+\n   if (flag_extern_tls_init)\n     {\n #if !defined (ASM_OUTPUT_DEF) || !SUPPORTS_WEAK"}, {"sha": "1676f65bcd2532cff0bc7ea068c4700c9c90cbd6", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -315,6 +315,10 @@ Wc++11-compat\n C++ ObjC++ Warning Alias(Wc++0x-compat)\n Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011\n \n+Wc++14-compat\n+C++ ObjC++ Var(warn_cxx14_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n+Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014\n+\n Wcast-qual\n C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n Warn about casts which discard qualifiers\n@@ -554,6 +558,10 @@ Wmissing-field-initializers\n C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)\n Warn about missing fields in struct initializers\n \n+Wsized-deallocation\n+C++ ObjC++ Var(warn_sized_deallocation) Warning EnabledBy(Wextra)\n+Warn about missing sized deallocation functions\n+\n Wsizeof-pointer-memaccess\n C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious length parameters to certain string functions if the argument uses sizeof\n@@ -1341,6 +1349,10 @@ fsigned-char\n C ObjC C++ ObjC++ LTO Var(flag_signed_char)\n Make \\\"char\\\" signed by default\n \n+fsized-deallocation\n+C++ ObjC++ Var(flag_sized_deallocation) Init(-1)\n+Enable C++14 sized deallocation support\n+\n fsquangle\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n "}, {"sha": "c14020dafd61d222f95f89c34988a200fd8c6077", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -1,3 +1,20 @@\n+2014-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\tN3778: Sized Deallocation\n+\t* call.c (non_placement_deallocation_fn_p): A global sized\n+\toperator delete is not a usual deallocation function until C++14.\n+\t(build_op_delete_call): Choose the global sized op delete if we\n+\tknow the size.\n+\t* cp-tree.h: Declare non_placement_deallocation_fn_p.\n+\t(enum cp_tree_index): Remove CPTI_GLOBAL_DELETE_FNDECL.\n+\t(global_delete_fndecl): Remove.\n+\t* decl.c (cxx_init_decl_processing): Also declare sized op deletes.\n+\t(grok_op_properties): Warn about sized dealloc without the flag.\n+\t* init.c (build_builtin_delete_call): Remove.\n+\t(build_vec_delete_1, build_delete): Don't call it.\n+\t* decl2.c (maybe_warn_sized_delete): New.\n+\t(cp_write_global_declarations): Call it.\n+\n 2014-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58882"}, {"sha": "86c78ab47f604053ad797ec7e09949ac7938c6db", "filename": "gcc/cp/call.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -5733,7 +5733,7 @@ build_new_op (location_t loc, enum tree_code code, int flags,\n /* Returns true iff T, an element of an OVERLOAD chain, is a usual\n    deallocation function (3.7.4.2 [basic.stc.dynamic.deallocation]).  */\n \n-static bool\n+bool\n non_placement_deallocation_fn_p (tree t)\n {\n   /* A template instance is never a usual deallocation function,\n@@ -5749,9 +5749,11 @@ non_placement_deallocation_fn_p (tree t)\n      function named operator delete with exactly two parameters, the second\n      of which has type std::size_t (18.2), then this function is a usual\n      deallocation function.  */\n+  bool global = DECL_NAMESPACE_SCOPE_P (t);\n   t = FUNCTION_ARG_CHAIN (t);\n   if (t == void_list_node\n       || (t && same_type_p (TREE_VALUE (t), size_type_node)\n+\t  && (!global || flag_sized_deallocation)\n \t  && TREE_CHAIN (t) == void_list_node))\n     return true;\n   return false;\n@@ -5883,9 +5885,39 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t       which has type std::size_t (18.2), then this function is a\n \t       usual deallocation function.\"\n \n-\t       So (void*) beats (void*, size_t).  */\n-\t    if (FUNCTION_ARG_CHAIN (fn) == void_list_node)\n-\t      break;\n+\t       So in a class (void*) beats (void*, size_t).  */\n+\t    if (DECL_CLASS_SCOPE_P (fn))\n+\t      {\n+\t\tif (FUNCTION_ARG_CHAIN (fn) == void_list_node)\n+\t\t  break;\n+\t      }\n+\t    /* At global scope (in C++14 and above) the rules are different:\n+\n+\t       If deallocation function lookup finds both a usual\n+\t       deallocation function with only a pointer parameter and a\n+\t       usual deallocation function with both a pointer parameter\n+\t       and a size parameter, the function to be called is selected\n+\t       as follows:\n+\n+\t       * If the type is complete and if, for the second alternative\n+\t       (delete array) only, the operand is a pointer to a class\n+\t       type with a non-trivial destructor or a (possibly\n+\t       multi-dimensional) array thereof, the function with two\n+\t       parameters is selected.\n+\n+\t       * Otherwise, it is unspecified which of the two deallocation\n+\t       functions is selected. */\n+\t    else\n+\t      {\n+\t\tbool want_size = COMPLETE_TYPE_P (type);\n+\t\tif (code == VEC_DELETE_EXPR\n+\t\t    && !TYPE_VEC_NEW_USES_COOKIE (type))\n+\t\t  /* We need a cookie to determine the array size.  */\n+\t\t  want_size = false;\n+\t\tbool have_size = (FUNCTION_ARG_CHAIN (fn) != void_list_node);\n+\t\tif (want_size == have_size)\n+\t\t  break;\n+\t      }\n \t  }\n       }\n "}, {"sha": "e0e7690b1889c99d1a46e73a734db9848b4d697e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -891,7 +891,6 @@ enum cp_tree_index\n     CPTI_CONST_TYPE_INFO_TYPE,\n     CPTI_TYPE_INFO_PTR_TYPE,\n     CPTI_ABORT_FNDECL,\n-    CPTI_GLOBAL_DELETE_FNDECL,\n     CPTI_AGGR_TAG,\n \n     CPTI_CTOR_IDENTIFIER,\n@@ -962,7 +961,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define const_type_info_type_node\tcp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]\n #define type_info_ptr_type\t\tcp_global_trees[CPTI_TYPE_INFO_PTR_TYPE]\n #define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n-#define global_delete_fndecl\t\tcp_global_trees[CPTI_GLOBAL_DELETE_FNDECL]\n #define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n #define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n #define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n@@ -5185,6 +5183,7 @@ extern tree build_new_op\t\t\t(location_t, enum tree_code,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_op_call\t\t\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern bool non_placement_deallocation_fn_p\t(tree);\n extern tree build_op_delete_call\t\t(enum tree_code, tree, tree,\n \t\t\t\t\t\t bool, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);"}, {"sha": "bbaf3d68d9e757db46d3a27d4e363711feaddc3b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -159,10 +159,6 @@ static void expand_static_init (tree, tree);\n \n \ttree abort_fndecl;\n \n-   The FUNCTION_DECL for the default `::operator delete'.\n-\n-\ttree global_delete_fndecl;\n-\n    Used by RTTI\n \ttree type_info_type_node, tinfo_decl_id, tinfo_decl_type;\n \ttree tinfo_var_id;  */\n@@ -3954,8 +3950,22 @@ cxx_init_decl_processing (void)\n     opnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n     DECL_IS_OPERATOR_NEW (opnew) = 1;\n-    global_delete_fndecl = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+    push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n     push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+    if (flag_sized_deallocation)\n+      {\n+\t/* Also push the sized deallocation variants:\n+\t     void operator delete(void*, std::size_t) throw();\n+\t     void operator delete[](void*, std::size_t) throw();  */\n+\ttree void_ftype_ptr_size\n+\t  = build_function_type_list (void_type_node, ptr_type_node,\n+\t\t\t\t      size_type_node, NULL_TREE);\n+\tdeltype = cp_build_type_attribute_variant (void_ftype_ptr_size,\n+\t\t\t\t\t\t   extvisattr);\n+\tdeltype = build_exception_variant (deltype, empty_except_spec);\n+\tpush_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+\tpush_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+      }\n \n     nullptr_type_node = make_node (NULLPTR_TYPE);\n     TYPE_SIZE (nullptr_type_node) = bitsize_int (GET_MODE_BITSIZE (ptr_mode));\n@@ -11745,6 +11755,16 @@ grok_op_properties (tree decl, bool complain)\n \t      error (\"%qD may not be declared as static\", decl);\n \t      return false;\n \t    }\n+\t  if (!flag_sized_deallocation && warn_cxx14_compat)\n+\t    {\n+\t      tree parm = FUNCTION_ARG_CHAIN (decl);\n+\t      if (parm && same_type_p (TREE_VALUE (parm), size_type_node)\n+\t\t  && TREE_CHAIN (parm) == void_list_node)\n+\t\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc__14_compat,\n+\t\t\t    \"%qD is a usual (non-placement) deallocation \"\n+\t\t\t    \"function in C++14 (or with -fsized-deallocation)\",\n+\t\t\t    decl);\n+\t    }\n \t}\n     }\n "}, {"sha": "07bdd92de93236ccbdea3fe862b20cab3b2ab3b0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -4308,6 +4308,47 @@ dump_tu (void)\n     }\n }\n \n+/* Check the deallocation functions for CODE to see if we want to warn that\n+   only one was defined.  */\n+\n+static void\n+maybe_warn_sized_delete (enum tree_code code)\n+{\n+  tree sized = NULL_TREE;\n+  tree unsized = NULL_TREE;\n+\n+  for (tree ovl = IDENTIFIER_GLOBAL_VALUE (ansi_opname (code));\n+       ovl; ovl = OVL_NEXT (ovl))\n+    {\n+      tree fn = OVL_CURRENT (ovl);\n+      /* We're only interested in usual deallocation functions.  */\n+      if (!non_placement_deallocation_fn_p (fn))\n+\tcontinue;\n+      if (FUNCTION_ARG_CHAIN (fn) == void_list_node)\n+\tunsized = fn;\n+      else\n+\tsized = fn;\n+    }\n+  if (DECL_INITIAL (unsized) && !DECL_INITIAL (sized))\n+    warning_at (DECL_SOURCE_LOCATION (unsized), OPT_Wsized_deallocation,\n+\t\t\"the program should also define %qD\", sized);\n+  else if (!DECL_INITIAL (unsized) && DECL_INITIAL (sized))\n+    warning_at (DECL_SOURCE_LOCATION (sized), OPT_Wsized_deallocation,\n+\t\t\"the program should also define %qD\", unsized);\n+}\n+\n+/* Check the global deallocation functions to see if we want to warn about\n+   defining unsized without sized (or vice versa).  */\n+\n+static void\n+maybe_warn_sized_delete ()\n+{\n+  if (!flag_sized_deallocation || !warn_sized_deallocation)\n+    return;\n+  maybe_warn_sized_delete (DELETE_EXPR);\n+  maybe_warn_sized_delete (VEC_DELETE_EXPR);\n+}\n+\n /* This routine is called at the end of compilation.\n    Its job is to create all the code needed to initialize and\n    destroy the global aggregates.  We do the destruction\n@@ -4638,6 +4679,8 @@ cp_write_global_declarations (void)\n   FOR_EACH_VEC_SAFE_ELT (no_linkage_decls, i, decl)\n     no_linkage_error (decl);\n \n+  maybe_warn_sized_delete ();\n+\n   /* Then, do the Objective-C stuff.  This is where all the\n      Objective-C module stuff gets generated (symtab,\n      class/protocol/selector lists etc).  This must be done after C++"}, {"sha": "8a7dca32b46daed3d6f41e3ae05c436d2c5ea788", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -39,7 +39,6 @@ static void construct_virtual_base (tree, tree);\n static void expand_aggr_init_1 (tree, tree, tree, tree, int, tsubst_flags_t);\n static void expand_default_init (tree, tree, tree, tree, int, tsubst_flags_t);\n static void perform_member_init (tree, tree);\n-static tree build_builtin_delete_call (tree);\n static int member_init_ok_or_else (tree, tree, tree);\n static void expand_virtual_init (tree, tree);\n static tree sort_mem_initializers (tree, tree);\n@@ -2094,15 +2093,6 @@ decl_constant_value (tree decl)\n }\n \f\n /* Common subroutines of build_new and build_vec_delete.  */\n-\n-/* Call the global __builtin_delete to delete ADDR.  */\n-\n-static tree\n-build_builtin_delete_call (tree addr)\n-{\n-  mark_used (global_delete_fndecl);\n-  return build_call_n (global_delete_fndecl, 1, addr);\n-}\n \f\n /* Build and return a NEW_EXPR.  If NELTS is non-NULL, TYPE[NELTS] is\n    the type of the object being allocated; otherwise, it's just TYPE.\n@@ -3211,7 +3201,9 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n                  \"class-specific operator delete [] will be called, \"\n                  \"even if they are declared when the class is defined\");\n        }\n-      return build_builtin_delete_call (base);\n+      /* This size won't actually be used.  */\n+      size_exp = size_one_node;\n+      goto no_destructor;\n     } \n \n   size_exp = size_in_bytes (type);\n@@ -3967,8 +3959,6 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \n   if (TYPE_PTR_P (otype))\n     {\n-      bool complete_p = true;\n-\n       addr = mark_rvalue_use (addr);\n \n       /* We don't want to warn about delete of void*, only other\n@@ -3993,7 +3983,6 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t\t  \"operator delete will be called, even if they are \"\n \t\t\t  \"declared when the class is defined\");\n \t\t}\n-\t      complete_p = false;\n \t    }\n \t  else if (auto_delete == sfk_deleting_destructor && warn_delnonvdtor\n \t           && MAYBE_CLASS_TYPE_P (type) && !CLASSTYPE_FINAL (type)\n@@ -4016,9 +4005,6 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t}\n \t    }\n \t}\n-      if (VOID_TYPE_P (type) || !complete_p || !MAYBE_CLASS_TYPE_P (type))\n-\t/* Call the builtin operator delete.  */\n-\treturn build_builtin_delete_call (addr);\n       if (TREE_SIDE_EFFECTS (addr))\n \taddr = save_expr (addr);\n \n@@ -4079,7 +4065,13 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t  addr = save_expr (addr);\n \t  head = get_target_expr (build_headof (addr));\n \t  /* Delete the object.  */\n-\t  do_delete = build_builtin_delete_call (head);\n+\t  do_delete = build_op_delete_call (DELETE_EXPR,\n+\t\t\t\t\t    head,\n+\t\t\t\t\t    cxx_sizeof_nowarn (type),\n+\t\t\t\t\t    /*global_p=*/true,\n+\t\t\t\t\t    /*placement=*/NULL_TREE,\n+\t\t\t\t\t    /*alloc_fn=*/NULL_TREE,\n+\t\t\t\t\t    complain);\n \t  /* Otherwise, treat this like a complete object destructor\n \t     call.  */\n \t  auto_delete = sfk_complete_destructor;"}, {"sha": "19422d78cd13b41bbdbe269130ec8e6e6477126f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -187,7 +187,8 @@ in the following sections.\n -fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names @gol\n -fno-optional-diags  -fpermissive @gol\n -fno-pretty-templates @gol\n--frepo  -fno-rtti  -fstats  -ftemplate-backtrace-limit=@var{n} @gol\n+-frepo  -fno-rtti -fsized-deallocation @gol\n+-fstats  -ftemplate-backtrace-limit=@var{n} @gol\n -ftemplate-depth=@var{n} @gol\n -fno-threadsafe-statics  -fuse-cxa-atexit @gol\n -fno-weak  -nostdinc++ @gol\n@@ -243,7 +244,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wbool-compare @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc90-c99-compat -Wc99-c11-compat @gol\n--Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n+-Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  @gol\n -Wno-deprecated -Wno-deprecated-declarations -Wno-designated-init @gol\n@@ -2304,6 +2305,19 @@ needed. The @samp{dynamic_cast} operator can still be used for casts that\n do not require run-time type information, i.e.@: casts to @code{void *} or to\n unambiguous base classes.\n \n+@item -fsized-deallocation\n+@opindex fsized-deallocation\n+Enable the built-in global declarations\n+@smallexample\n+void operator delete (void *, std::size_t) noexcept;\n+void operator delete[] (void *, std::size_t) noexcept;\n+@end smallexample\n+as introduced in C++14.  This is useful for user-defined replacement\n+deallocation functions that, for example, use the size of the object\n+to make deallocation faster.  Enabled by default under\n+@samp{-std=c++14} and above.  The flag @option{-Wsized-deallocation} will\n+warn about places that might want to add a definition.\n+\n @item -fstats\n @opindex fstats\n Emit statistics about front-end processing at the end of the compilation.\n@@ -3356,7 +3370,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n \n @gccoptlist{-Waddress   @gol\n -Warray-bounds @r{(only with} @option{-O2}@r{)}  @gol\n--Wc++11-compat  @gol\n+-Wc++11-compat  -Wc++14-compat@gol\n -Wchar-subscripts  @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n -Wimplicit-int @r{(C and Objective-C only)} @gol\n@@ -4608,6 +4622,10 @@ and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are keywords\n in ISO C++ 2011.  This warning turns on @option{-Wnarrowing} and is\n enabled by @option{-Wall}.\n \n+@item -Wc++14-compat @r{(C++ and Objective-C++ only)}\n+Warn about C++ constructs whose meaning differs between ISO C++ 2011\n+and ISO C++ 2014.  This warning is enabled by @option{-Wall}.\n+\n @item -Wcast-qual\n @opindex Wcast-qual\n @opindex Wno-cast-qual\n@@ -4767,6 +4785,22 @@ This includes conversions from real to integer, and from higher precision\n real to lower precision real values.  This option is also enabled by\n @option{-Wconversion}.\n \n+@item -Wsized-deallocation @r{(C++ and Objective-C++ only)}\n+@opindex Wsized-deallocation\n+@opindex -Wno-sized-deallocation\n+Warn about a definition of an unsized deallocation function\n+@smallexample\n+void operator delete (void *) noexcept;\n+void operator delete[] (void *) noexcept;\n+@end smallexample\n+without a definition of the corresponding sized deallocation function\n+@smallexample\n+void operator delete (void *, std::size_t) noexcept;\n+void operator delete[] (void *, std::size_t) noexcept;\n+@end smallexample\n+or vice versa.  Enabled by @option{-Wextra} along with\n+@option{-fsized-deallocation}.\n+\n @item -Wsizeof-pointer-memaccess\n @opindex Wsizeof-pointer-memaccess\n @opindex Wno-sizeof-pointer-memaccess"}, {"sha": "846fce6199030d3b16c10091c3392e59c11814a6", "filename": "gcc/testsuite/g++.dg/cpp1y/sized-dealloc1.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc1.C?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -0,0 +1,75 @@\n+// Test for C++14 sized deallocation.  The operators delete defined below\n+// should be called only in C++14 mode and above.\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+typedef __SIZE_TYPE__ size_t;\n+#include <new>\n+\n+bool called;\n+void operator delete[] (void *p, size_t s) throw()\n+{\n+  called = true;\n+  operator delete[] (p);\n+}\n+\n+void operator delete (void *p, size_t s) throw()\n+{\n+  called = true;\n+  operator delete (p);\n+}\n+\n+void operator delete[] (void *p, size_t s, const std::nothrow_t &) throw()\n+{\n+  called = true;\n+  operator delete[] (p);\n+}\n+\n+void operator delete (void *p, size_t s, const std::nothrow_t &) throw()\n+{\n+  called = true;\n+  operator delete (p);\n+}\n+\n+struct A { ~A(){} };\n+\n+struct B { };\n+\n+struct C;\n+\n+struct D { ~D(){}; D() { throw 1; } };\n+\n+int main()\n+{\n+  /* * If the type is complete and if, for the second alternative (delete\n+     array) only, the operand is a pointer to a class type with a\n+     non-trivial destructor or a (possibly multi-dimensional) array\n+     thereof, the function with two parameters is selected.\n+\n+     * Otherwise, it is unspecified which of the two deallocation functions\n+     is selected. */\n+  delete new int;\n+  if (called != (__cplusplus >= 201402L)) abort(); called = false;\n+\n+  delete new A;\n+  if (called != (__cplusplus >= 201402L)) abort(); called = false;\n+\n+  delete[] new A[2];\n+  if (called != (__cplusplus >= 201402L)) abort(); called = false;\n+\n+  delete new B;\n+  if (called != (__cplusplus >= 201402L)) abort(); called = false;\n+\n+  /* N3778 added the sized placement deallocation functions, but the core\n+     language rules don't provide any way they would be called.  */\n+  try { new (std::nothrow) D; } catch (int) {}\n+  if (called) abort();\n+\n+  try { new (std::nothrow) D[2]; } catch (int) {}\n+  if (called) abort();\n+\n+  /* Make sure we don't try to use the size of an array that doesn't have a\n+     cookie.  */\n+  delete[] new B[2];\n+  if (called) abort();\n+}"}, {"sha": "a3ab64c26ae8aebfb7e436e1375f311bf0e4880f", "filename": "gcc/testsuite/g++.dg/cpp1y/sized-dealloc2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -0,0 +1,5 @@\n+// Test that -Wc++14-compat warns about the change in meaning.\n+// { dg-options \"-Wall\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+void operator delete[] (void *p, size_t s) throw(); // { dg-warning \"usual\" \"\" { target { ! c++14 } } }"}, {"sha": "e5bfe7cdde92796b20d1e5c56f0246ba1a22b7af", "filename": "gcc/testsuite/g++.dg/cpp1y/sized-dealloc3.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc3.C?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -0,0 +1,3 @@\n+// { dg-options \"-Wsized-deallocation\" }\n+\n+void operator delete (void *p) throw() { __builtin_free(p); } // { dg-warning \"sized\" \"\" { target c++14 } }"}, {"sha": "9ec3995afde3b7e7103db3f84708591789c344e9", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61034.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -5,6 +5,8 @@\n \n inline void* operator new(__SIZE_TYPE__ n){ return __builtin_malloc(n); }\n inline void operator delete(void *p) { __builtin_free(p); }\n+// C++14 sized deallocation function\n+inline void operator delete(void *p, __SIZE_TYPE__) { __builtin_free(p); }\n struct O {\n     double num;\n     int count;"}, {"sha": "2f8c54b2603a9f9fdffe310c9b890ee0772a48c4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -1,3 +1,11 @@\n+2014-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/del_ops.cc: New.\n+\t* libsupc++/del_opvs.cc: New.\n+\t* libsupc++/Makefile.am: Add them.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Export _ZdlPvm and _ZdaPvm.\n+\n 2014-12-13  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/64239"}, {"sha": "9b516599563955e4ad030e8b32d4d2f455cb74c0", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -1733,6 +1733,11 @@ CXXABI_1.3.9 {\n     _ZTSP[no];\n     _ZTSPK[no];\n \n+    # operator delete(void*, std::size_t)\n+    _ZdlPvm;\n+    # operator delete[](void*, std::size_t)\n+    _ZdaPvm;\n+\n } CXXABI_1.3.8;\n \n # Symbols in the support library (libsupc++) supporting transactional memory."}, {"sha": "2e60f65249ee0fdd7cef093ad0f999f2417d56eb", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -55,8 +55,10 @@ sources = \\\n \tbad_typeid.cc \\\n \tclass_type_info.cc \\\n \tdel_op.cc \\\n+\tdel_ops.cc \\\n \tdel_opnt.cc \\\n \tdel_opv.cc \\\n+\tdel_opvs.cc \\\n \tdel_opvnt.cc \\\n \tdyncast.cc \\\n \teh_alloc.cc \\"}, {"sha": "1c7270a69d33dac28806a8b6afd9da6b11945479", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -93,17 +93,18 @@ LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libsupc___la_LIBADD =\n am__objects_1 = array_type_info.lo atexit_arm.lo atexit_thread.lo \\\n \tbad_alloc.lo bad_array_length.lo bad_array_new.lo bad_cast.lo \\\n-\tbad_typeid.lo class_type_info.lo del_op.lo del_opnt.lo \\\n-\tdel_opv.lo del_opvnt.lo dyncast.lo eh_alloc.lo eh_arm.lo \\\n-\teh_aux_runtime.lo eh_call.lo eh_catch.lo eh_exception.lo \\\n-\teh_globals.lo eh_personality.lo eh_ptr.lo eh_term_handler.lo \\\n-\teh_terminate.lo eh_tm.lo eh_throw.lo eh_type.lo \\\n-\teh_unex_handler.lo enum_type_info.lo function_type_info.lo \\\n-\tfundamental_type_info.lo guard.lo guard_error.lo hash_bytes.lo \\\n-\tnested_exception.lo new_handler.lo new_op.lo new_opnt.lo \\\n-\tnew_opv.lo new_opvnt.lo pbase_type_info.lo pmem_type_info.lo \\\n-\tpointer_type_info.lo pure.lo si_class_type_info.lo tinfo.lo \\\n-\ttinfo2.lo vec.lo vmi_class_type_info.lo vterminate.lo\n+\tbad_typeid.lo class_type_info.lo del_op.lo del_ops.lo \\\n+\tdel_opnt.lo del_opv.lo del_opvs.lo del_opvnt.lo dyncast.lo \\\n+\teh_alloc.lo eh_arm.lo eh_aux_runtime.lo eh_call.lo eh_catch.lo \\\n+\teh_exception.lo eh_globals.lo eh_personality.lo eh_ptr.lo \\\n+\teh_term_handler.lo eh_terminate.lo eh_tm.lo eh_throw.lo \\\n+\teh_type.lo eh_unex_handler.lo enum_type_info.lo \\\n+\tfunction_type_info.lo fundamental_type_info.lo guard.lo \\\n+\tguard_error.lo hash_bytes.lo nested_exception.lo \\\n+\tnew_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo \\\n+\tpbase_type_info.lo pmem_type_info.lo pointer_type_info.lo \\\n+\tpure.lo si_class_type_info.lo tinfo.lo tinfo2.lo vec.lo \\\n+\tvmi_class_type_info.lo vterminate.lo\n @GLIBCXX_HOSTED_TRUE@am__objects_2 = cp-demangle.lo\n @ENABLE_VTABLE_VERIFY_TRUE@am__objects_3 = vtv_stubs.lo\n am_libsupc___la_OBJECTS = $(am__objects_1) $(am__objects_2) \\\n@@ -381,8 +382,10 @@ sources = \\\n \tbad_typeid.cc \\\n \tclass_type_info.cc \\\n \tdel_op.cc \\\n+\tdel_ops.cc \\\n \tdel_opnt.cc \\\n \tdel_opv.cc \\\n+\tdel_opvs.cc \\\n \tdel_opvnt.cc \\\n \tdyncast.cc \\\n \teh_alloc.cc \\"}, {"sha": "d97815ee5bc887ed42e1825b42c402487d2b6eb1", "filename": "libstdc++-v3/libsupc++/del_ops.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -0,0 +1,33 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n+// Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/c++config.h>\n+#include \"new\"\n+\n+_GLIBCXX_WEAK_DEFINITION void\n+operator delete(void* ptr, std::size_t) _GLIBCXX_USE_NOEXCEPT\n+{\n+  ::operator delete (ptr);\n+}"}, {"sha": "11bae1e306d7fb9804a336f626c2531fbee50255", "filename": "libstdc++-v3/libsupc++/del_opvs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b06addf9bfe928559f3bccca9e70485eec7c02/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc?ref=20b06addf9bfe928559f3bccca9e70485eec7c02", "patch": "@@ -0,0 +1,33 @@\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n+\n+// Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/c++config.h>\n+#include \"new\"\n+\n+_GLIBCXX_WEAK_DEFINITION void\n+operator delete[] (void *ptr, std::size_t) _GLIBCXX_USE_NOEXCEPT\n+{\n+  ::operator delete[] (ptr);\n+}"}]}