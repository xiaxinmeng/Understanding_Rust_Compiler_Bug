{"sha": "b238b34ea47222ffca7addc5fe4e8c052ade88b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIzOGIzNGVhNDcyMjJmZmNhN2FkZGM1ZmU0ZThjMDUyYWRlODhiMw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-10-07T23:44:49Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-10-07T23:44:49Z"}, "message": "re PR tree-optimization/91532 ([SVE] Redundant predicated store in gcc.target/aarch64/fmla_2.c)\n\n2019-10-07  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91532\n\t* tree-if-conv.c: Include tree-ssa-dse.h.\n\t(ifcvt_local_dce): Change param from bb to loop,\n\tand call dse_classify_store.\n\t(tree_if_conversion): Pass loop instead of loop->header as arg\n\tto ifcvt_local_dce.\n\t* tree-ssa-dse.c: Include tree-ssa-dse.h.\n\t(delete_dead_or_redundant_assignment): Remove static qualifier from\n\tdeclaration, and add prototype in tree-ssa-dse.h.\n\t(dse_store_status): Move to tree-ssa-dse.h.\n\t(dse_classify_store): Remove static qualifier and add new tree param\n\tstop_at_vuse, and add prototype in tree-ssa-dse.h.\n\t* tree-ssa-dse.h: New header.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r276681", "tree": {"sha": "45203ecc92dbec87d0c66cc74bce887c2b158735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45203ecc92dbec87d0c66cc74bce887c2b158735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b238b34ea47222ffca7addc5fe4e8c052ade88b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b238b34ea47222ffca7addc5fe4e8c052ade88b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b238b34ea47222ffca7addc5fe4e8c052ade88b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b238b34ea47222ffca7addc5fe4e8c052ade88b3/comments", "author": null, "committer": null, "parents": [{"sha": "cac52161c501abb93ded17a8f41b4a6310dbdab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac52161c501abb93ded17a8f41b4a6310dbdab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac52161c501abb93ded17a8f41b4a6310dbdab0"}], "stats": {"total": 99, "additions": 85, "deletions": 14}, "files": [{"sha": "51edea9788cce40dfe2d41d9a54960061d788af5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b238b34ea47222ffca7addc5fe4e8c052ade88b3", "patch": "@@ -1,3 +1,20 @@\n+2019-10-07  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91532\n+\t* tree-if-conv.c: Include tree-ssa-dse.h.\n+\t(ifcvt_local_dce): Change param from bb to loop,\n+\tand call dse_classify_store.\n+\t(tree_if_conversion): Pass loop instead of loop->header as arg\n+\tto ifcvt_local_dce.\n+\t* tree-ssa-dse.c: Include tree-ssa-dse.h.\n+\t(delete_dead_or_redundant_assignment): Remove static qualifier from\n+\tdeclaration, and add prototype in tree-ssa-dse.h.\n+\t(dse_store_status): Move to tree-ssa-dse.h.\n+\t(dse_classify_store): Remove static qualifier and add new tree param\n+\tstop_at_vuse, and add prototype in tree-ssa-dse.h.\n+\t* tree-ssa-dse.h: New header.\n+\n 2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.c (machopic_output_indirection): Don't put"}, {"sha": "af49813b0d1fb275d56948ec5f3328a0910743e2", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=b238b34ea47222ffca7addc5fe4e8c052ade88b3", "patch": "@@ -120,6 +120,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const.h\"\n #include \"tree-ssa-sccvn.h\"\n #include \"tree-cfgcleanup.h\"\n+#include \"tree-ssa-dse.h\"\n \n /* Only handle PHIs with no more arguments unless we are asked to by\n    simd pragma.  */\n@@ -2873,7 +2874,7 @@ ifcvt_split_critical_edges (class loop *loop, bool aggressive_if_conv)\n    loop vectorization.  */\n \n static void\n-ifcvt_local_dce (basic_block bb)\n+ifcvt_local_dce (class loop *loop)\n {\n   gimple *stmt;\n   gimple *stmt1;\n@@ -2890,13 +2891,19 @@ ifcvt_local_dce (basic_block bb)\n     replace_uses_by (name_pair->first, name_pair->second);\n   redundant_ssa_names.release ();\n \n+  /* The loop has a single BB only.  */\n+  basic_block bb = loop->header;\n+  tree latch_vdef = NULL_TREE;\n+\n   worklist.create (64);\n   /* Consider all phi as live statements.  */\n   for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       phi = gsi_stmt (gsi);\n       gimple_set_plf (phi, GF_PLF_2, true);\n       worklist.safe_push (phi);\n+      if (virtual_operand_p (gimple_phi_result (phi)))\n+\tlatch_vdef = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (loop));\n     }\n   /* Consider load/store statements, CALL and COND as live.  */\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2960,6 +2967,19 @@ ifcvt_local_dce (basic_block bb)\n   while (!gsi_end_p (gsi))\n     {\n       stmt = gsi_stmt (gsi);\n+      if (gimple_store_p (stmt))\n+\t{\n+\t  tree lhs = gimple_get_lhs (stmt);\n+\t  ao_ref write;\n+\t  ao_ref_init (&write, lhs);\n+\n+          if (dse_classify_store (&write, stmt, false, NULL, NULL, latch_vdef)\n+              == DSE_STORE_DEAD)\n+            delete_dead_or_redundant_assignment (&gsi, \"dead\");\n+\t  gsi_next (&gsi);\n+\t  continue;\n+\t}\n+\n       if (gimple_plf (stmt, GF_PLF_2))\n \t{\n \t  gsi_next (&gsi);\n@@ -3070,7 +3090,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   todo |= do_rpo_vn (cfun, loop_preheader_edge (loop), exit_bbs);\n \n   /* Delete dead predicate computations.  */\n-  ifcvt_local_dce (loop->header);\n+  ifcvt_local_dce (loop);\n   BITMAP_FREE (exit_bbs);\n \n   todo |= TODO_cleanup_cfg;"}, {"sha": "d8f7089786a64718235043e30f33bcde43c9100c", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=b238b34ea47222ffca7addc5fe4e8c052ade88b3", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"alias.h\"\n #include \"tree-ssa-loop.h\"\n+#include \"tree-ssa-dse.h\"\n \n /* This file implements dead store elimination.\n \n@@ -76,21 +77,13 @@ along with GCC; see the file COPYING3.  If not see\n    fact, they are the same transformation applied to different views of\n    the CFG.  */\n \n-static void delete_dead_or_redundant_assignment (gimple_stmt_iterator *, const char *);\n+void delete_dead_or_redundant_assignment (gimple_stmt_iterator *, const char *);\n static void delete_dead_or_redundant_call (gimple_stmt_iterator *, const char *);\n \n /* Bitmap of blocks that have had EH statements cleaned.  We should\n    remove their dead edges eventually.  */\n static bitmap need_eh_cleanup;\n \n-/* Return value from dse_classify_store */\n-enum dse_store_status\n-{\n-  DSE_STORE_LIVE,\n-  DSE_STORE_MAYBE_PARTIAL_DEAD,\n-  DSE_STORE_DEAD\n-};\n-\n /* STMT is a statement that may write into memory.  Analyze it and\n    initialize WRITE to describe how STMT affects memory.\n \n@@ -662,10 +655,10 @@ dse_optimize_redundant_stores (gimple *stmt)\n    if only clobber statements influenced the classification result.\n    Returns the classification.  */\n \n-static dse_store_status\n+dse_store_status\n dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t    bool byte_tracking_enabled, sbitmap live_bytes,\n-\t\t    bool *by_clobber_p = NULL)\n+\t\t    bool *by_clobber_p, tree stop_at_vuse)\n {\n   gimple *temp;\n   int cnt = 0;\n@@ -701,6 +694,11 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t}\n       else\n \tdefvar = gimple_vdef (temp);\n+\n+      /* If we're instructed to stop walking at region boundary, do so.  */\n+      if (defvar == stop_at_vuse)\n+\treturn DSE_STORE_LIVE;\n+\n       auto_vec<gimple *, 10> defs;\n       gimple *phi_def = NULL;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, defvar)\n@@ -901,7 +899,7 @@ delete_dead_or_redundant_call (gimple_stmt_iterator *gsi, const char *type)\n \n /* Delete a dead store at GSI, which is a gimple assignment. */\n \n-static void\n+void\n delete_dead_or_redundant_assignment (gimple_stmt_iterator *gsi, const char *type)\n {\n   gimple *stmt = gsi_stmt (*gsi);"}, {"sha": "a5eccbd746dee93afc2eac6ee46a2d79cf2008e4", "filename": "gcc/tree-ssa-dse.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-ssa-dse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b238b34ea47222ffca7addc5fe4e8c052ade88b3/gcc%2Ftree-ssa-dse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.h?ref=b238b34ea47222ffca7addc5fe4e8c052ade88b3", "patch": "@@ -0,0 +1,36 @@\n+/* Support routines for dead store elimination. \n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_DSE_H\n+#define GCC_TREE_SSA_DSE_H\n+\n+/* Return value from dse_classify_store */\n+enum dse_store_status\n+{\n+  DSE_STORE_LIVE,\n+  DSE_STORE_MAYBE_PARTIAL_DEAD,\n+  DSE_STORE_DEAD\n+};\n+\n+dse_store_status dse_classify_store (ao_ref *, gimple *, bool, sbitmap,\n+\t\t\t\t     bool * = NULL, tree = NULL);\n+\n+void delete_dead_or_redundant_assignment (gimple_stmt_iterator *, const char *);\n+\n+#endif   /* GCC_TREE_SSA_DSE_H  */"}]}