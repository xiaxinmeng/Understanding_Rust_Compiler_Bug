{"sha": "25aea4e9685c28d426f4c381802223841fa21f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhZWE0ZTk2ODVjMjhkNDI2ZjRjMzgxODAyMjIzODQxZmEyMWYxMw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-02-03T19:55:00Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-02-03T19:55:00Z"}, "message": "re PR c++/47398 (tree check: accessed elt 10 of tree_vec with 9 elts in tsubst, at cp/pt.c:10500)\n\nFix PR c++/47398\n\ngcc/cp/\n\n\tPR c++/47398\n\t* tree.c (cp_tree_equal)<TEMPLATE_PARM_INDEX>: Take the number of\n\ttemplate parameters in account.\n\ngcc/testsuite/\n\n\tPR c++/47398\n\t* g++.dg/template/typedef37.C: New test.\n\t* g++.dg/template/param1.C: Adjust expected error message.\n\nFrom-SVN: r169807", "tree": {"sha": "8f6db14acbb7e0d99c9c54b93556ed9ed3b6ee44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6db14acbb7e0d99c9c54b93556ed9ed3b6ee44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25aea4e9685c28d426f4c381802223841fa21f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aea4e9685c28d426f4c381802223841fa21f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25aea4e9685c28d426f4c381802223841fa21f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aea4e9685c28d426f4c381802223841fa21f13/comments", "author": null, "committer": null, "parents": [{"sha": "7fece97913380e58d310e5dcda45aec909eed696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fece97913380e58d310e5dcda45aec909eed696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fece97913380e58d310e5dcda45aec909eed696"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "6dd6137ee5d1e73c7e567f02937e1cac55bdada7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25aea4e9685c28d426f4c381802223841fa21f13", "patch": "@@ -1,3 +1,9 @@\n+2011-02-03  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47398\n+\t* tree.c (cp_tree_equal)<TEMPLATE_PARM_INDEX>: Take the number of\n+\ttemplate parameters in account.\n+\n 2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/46890"}, {"sha": "d62d2427f1e49116d0c577f0ff08eb3b027b613a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=25aea4e9685c28d426f4c381802223841fa21f13", "patch": "@@ -2176,6 +2176,9 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t\tBASELINK_FUNCTIONS (t2)));\n \n     case TEMPLATE_PARM_INDEX:\n+      if (TEMPLATE_PARM_NUM_SIBLINGS (t1)\n+\t  != TEMPLATE_PARM_NUM_SIBLINGS (t2))\n+\treturn false;\n       return (TEMPLATE_PARM_IDX (t1) == TEMPLATE_PARM_IDX (t2)\n \t      && TEMPLATE_PARM_LEVEL (t1) == TEMPLATE_PARM_LEVEL (t2)\n \t      && (TEMPLATE_PARM_PARAMETER_PACK (t1)"}, {"sha": "d387efe79803beeb8453266694fa4be5ba07fb72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25aea4e9685c28d426f4c381802223841fa21f13", "patch": "@@ -1,3 +1,9 @@\n+2011-02-03  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47398\n+\t* g++.dg/template/typedef37.C: New test.\n+\t* g++.dg/template/param1.C: Adjust expected error message.\n+\n 2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/31490"}, {"sha": "a8c3791254fd1baa7199693c443f5b395676f211", "filename": "gcc/testsuite/g++.dg/template/param1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam1.C?ref=25aea4e9685c28d426f4c381802223841fa21f13", "patch": "@@ -2,11 +2,11 @@\n // Origin: Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n // { dg-do compile }\n \n-template<int> struct A\n+template<int> struct A // { dg-error \"declaration\" }\n {\n   A();\n };\n \n-template<int N, char> A<N>::A() {}  // { dg-error \"got 2|but 1 required\" }\n+template<int N, char> A<N>::A() {}  // { dg-error \"invalid use of incomplete type\" }\n \n A<0> a;"}, {"sha": "eefa38316ca60fb4323479946930ba52f7142ab7", "filename": "gcc/testsuite/g++.dg/template/typedef37.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aea4e9685c28d426f4c381802223841fa21f13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef37.C?ref=25aea4e9685c28d426f4c381802223841fa21f13", "patch": "@@ -0,0 +1,58 @@\n+// Origin: PR c++/47398\n+// { dg-do compile }\n+\n+template<int>\n+struct A\n+{\n+  typedef int INT;\n+};\n+\n+template<int I>\n+struct transform\n+{\n+  static int bar();\n+};\n+\n+template<class T, int a, class U, int b>\n+struct B\n+{\n+  typedef typename A<a>::INT TINT;\n+  void baz();\n+};\n+\n+template<class T, int a, class U>\n+struct B<T, a, U, 1>\n+{\n+  typedef typename A<a>::INT TINT;\n+  void foo();\n+};\n+\n+template<class T, int a, class U, int b>\n+void\n+B<T, a, U, b>::baz()\n+{\n+  int c = transform<sizeof(TINT)>::bar();//#0\n+}\n+\n+template<class T, int a, class U>\n+void\n+B<T, a, U, 1>::foo()\n+{\n+  int c = transform<sizeof(TINT)>::bar();//#1\n+}\n+\n+int\n+main()\n+{\n+  B<int, 2, char, 1> i;\n+  i.foo();\n+  // While instantiating\n+  //\n+  //   template<class T, int a, class U> void B<T, a, U, 1>::foo()\n+  //\n+  // lookup_template_class resolves transform<sizeof(TINT)> in #1 to\n+  // the wrong one; it picks up the one in #0 instead. This is because\n+  // to compare the two A<a> comp_template_args uses cp_tree_equal\n+  // that fails to consider the number of siblings of parm 'a'.\n+return 0;\n+}"}]}