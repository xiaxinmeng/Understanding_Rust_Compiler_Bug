{"sha": "dc9111cfce884749f12b88d43abb717e6d9d5f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5MTExY2ZjZTg4NDc0OWYxMmI4OGQ0M2FiYjcxN2U2ZDlkNWYyNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-10-26T10:47:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:47:56Z"}, "message": "freeze.adb (Check_Component_Storage_Order): Skip a record component if it has Complex_Representation.\n\n2015-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* freeze.adb (Check_Component_Storage_Order): Skip a record\n\tcomponent if it has Complex_Representation.\n\t(Freeze_Record_Type): If the type has Complex_Representation, skip the\n\tregular treatment of Scalar_Storage_Order attribute and instead issue\n\ta warning if it is present.\n\nFrom-SVN: r229325", "tree": {"sha": "3a8e4a73e537b8da7082b88dde9449f4e308edc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a8e4a73e537b8da7082b88dde9449f4e308edc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc9111cfce884749f12b88d43abb717e6d9d5f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9111cfce884749f12b88d43abb717e6d9d5f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9111cfce884749f12b88d43abb717e6d9d5f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9111cfce884749f12b88d43abb717e6d9d5f27/comments", "author": null, "committer": null, "parents": [{"sha": "930e85a354290c8c9f5ed5166aa53de4e3f005ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930e85a354290c8c9f5ed5166aa53de4e3f005ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930e85a354290c8c9f5ed5166aa53de4e3f005ef"}], "stats": {"total": 116, "additions": 71, "deletions": 45}, "files": [{"sha": "5dff6de4fca189f390914f8a90cd61352f707e10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9111cfce884749f12b88d43abb717e6d9d5f27/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9111cfce884749f12b88d43abb717e6d9d5f27/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dc9111cfce884749f12b88d43abb717e6d9d5f27", "patch": "@@ -1,3 +1,11 @@\n+2015-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Skip a record\n+\tcomponent if it has Complex_Representation.\n+\t(Freeze_Record_Type): If the type has Complex_Representation, skip the\n+\tregular treatment of Scalar_Storage_Order attribute and instead issue\n+\ta warning if it is present.\n+\n 2015-10-26  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch13.adb (Check_Iterator_Functions): For a Default_Iterator"}, {"sha": "f67bc3622655efb9b815100082e6980fcd06e20a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 63, "deletions": 45, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9111cfce884749f12b88d43abb717e6d9d5f27/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9111cfce884749f12b88d43abb717e6d9d5f27/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=dc9111cfce884749f12b88d43abb717e6d9d5f27", "patch": "@@ -1197,9 +1197,14 @@ package body Freeze is\n                      Attribute_Scalar_Storage_Order);\n       Comp_ADC_Present := Present (Comp_ADC);\n \n-      --  Case of record or array component: check storage order compatibility\n+      --  Case of record or array component: check storage order compatibility.\n+      --  But, if the record has Complex_Representation, then it is treated as\n+      --  a scalar in the back end so the storage order is irrelevant.\n \n-      if Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type) then\n+      if (Is_Record_Type (Comp_Type)\n+            and then not Has_Complex_Representation (Comp_Type))\n+        or else Is_Array_Type (Comp_Type)\n+      then\n          Comp_SSO_Differs :=\n            Reverse_Storage_Order (Encl_Type)\n              /=\n@@ -3940,61 +3945,74 @@ package body Freeze is\n             Next_Entity (Comp);\n          end loop;\n \n-         --  Deal with default setting of reverse storage order\n+         SSO_ADC :=\n+           Get_Attribute_Definition_Clause\n+             (Rec, Attribute_Scalar_Storage_Order);\n \n-         Set_SSO_From_Default (Rec);\n+         --  If the record type has Complex_Representation, then it is treated\n+         --  as a scalar in the back end so the storage order is irrelevant.\n \n-         --  Check consistent attribute setting on component types\n+         if Has_Complex_Representation (Rec) then\n+            if Present (SSO_ADC) then\n+               Error_Msg_N\n+                 (\"??storage order has no effect with Complex_Representation\",\n+                  SSO_ADC);\n+            end if;\n \n-         SSO_ADC := Get_Attribute_Definition_Clause\n-                      (Rec, Attribute_Scalar_Storage_Order);\n+         else\n+            --  Deal with default setting of reverse storage order\n \n-         declare\n-            Comp_ADC_Present : Boolean;\n-         begin\n-            Comp := First_Component (Rec);\n-            while Present (Comp) loop\n-               Check_Component_Storage_Order\n-                 (Encl_Type        => Rec,\n-                  Comp             => Comp,\n-                  ADC              => SSO_ADC,\n-                  Comp_ADC_Present => Comp_ADC_Present);\n-               SSO_ADC_Component := SSO_ADC_Component or Comp_ADC_Present;\n-               Next_Component (Comp);\n-            end loop;\n-         end;\n+            Set_SSO_From_Default (Rec);\n+\n+            --  Check consistent attribute setting on component types\n+\n+            declare\n+               Comp_ADC_Present : Boolean;\n+            begin\n+               Comp := First_Component (Rec);\n+               while Present (Comp) loop\n+                  Check_Component_Storage_Order\n+                    (Encl_Type        => Rec,\n+                     Comp             => Comp,\n+                     ADC              => SSO_ADC,\n+                     Comp_ADC_Present => Comp_ADC_Present);\n+                  SSO_ADC_Component := SSO_ADC_Component or Comp_ADC_Present;\n+                  Next_Component (Comp);\n+               end loop;\n+            end;\n \n-         --  Now deal with reverse storage order/bit order issues\n+            --  Now deal with reverse storage order/bit order issues\n \n-         if Present (SSO_ADC) then\n+            if Present (SSO_ADC) then\n \n-            --  Check compatibility of Scalar_Storage_Order with Bit_Order, if\n-            --  the former is specified.\n+               --  Check compatibility of Scalar_Storage_Order with Bit_Order,\n+               --  if the former is specified.\n \n-            if Reverse_Bit_Order (Rec) /= Reverse_Storage_Order (Rec) then\n+               if Reverse_Bit_Order (Rec) /= Reverse_Storage_Order (Rec) then\n \n-               --  Note: report error on Rec, not on SSO_ADC, as ADC may apply\n-               --  to some ancestor type.\n+                  --  Note: report error on Rec, not on SSO_ADC, as ADC may\n+                  --  apply to some ancestor type.\n \n-               Error_Msg_Sloc := Sloc (SSO_ADC);\n-               Error_Msg_N\n-                 (\"scalar storage order for& specified# inconsistent with \"\n-                  & \"bit order\", Rec);\n-            end if;\n+                  Error_Msg_Sloc := Sloc (SSO_ADC);\n+                  Error_Msg_N\n+                    (\"scalar storage order for& specified# inconsistent with \"\n+                     & \"bit order\", Rec);\n+               end if;\n \n-            --  Warn if there is an Scalar_Storage_Order attribute definition\n-            --  clause but no component clause, no component that itself has\n-            --  such an attribute definition, and no pragma Pack.\n+               --  Warn if there is a Scalar_Storage_Order attribute definition\n+               --  clause but no component clause, no component that itself has\n+               --  such an attribute definition, and no pragma Pack.\n \n-            if not (Placed_Component\n-                      or else\n-                    SSO_ADC_Component\n-                      or else\n-                    Is_Packed (Rec))\n-            then\n-               Error_Msg_N\n-                 (\"??scalar storage order specified but no component clause\",\n-                  SSO_ADC);\n+               if not (Placed_Component\n+                         or else\n+                       SSO_ADC_Component\n+                         or else\n+                       Is_Packed (Rec))\n+               then\n+                  Error_Msg_N\n+                    (\"??scalar storage order specified but no component \"\n+                     & \"clause\", SSO_ADC);\n+               end if;\n             end if;\n          end if;\n "}]}