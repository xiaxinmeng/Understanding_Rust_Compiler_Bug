{"sha": "f57ca1ea5f9ebcd518961e4251dd224524725f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3Y2ExZWE1ZjllYmNkNTE4OTYxZTQyNTFkZDIyNDUyNDcyNWYxMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-09-01T03:33:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-09-01T03:33:19Z"}, "message": "Implement late-specified return type using 'auto'.\n\n        * cp-tree.h (struct cp_declarator): Add late_return_type field to\n        function declarator.\n        * parser.c (cp_parser_late_return_type_opt): New fn.\n        (cp_parser_direct_declarator): Use it.\n        (make_call_declarator): Put it in the declarator.\n        * decl.c (grokdeclarator): Splice in late-specified return type.\n        * pt.c (splice_late_return_type): New fn.\n\nFrom-SVN: r139848", "tree": {"sha": "4df2798ed30c19a13c03271ee6b5b653821b5353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df2798ed30c19a13c03271ee6b5b653821b5353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f57ca1ea5f9ebcd518961e4251dd224524725f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57ca1ea5f9ebcd518961e4251dd224524725f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57ca1ea5f9ebcd518961e4251dd224524725f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57ca1ea5f9ebcd518961e4251dd224524725f11/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3699867372437d6fb23dc2d36fcbfcdc34d7bdc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3699867372437d6fb23dc2d36fcbfcdc34d7bdc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3699867372437d6fb23dc2d36fcbfcdc34d7bdc0"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "898beb0df80feec8956f7dc17df9bda33290a1fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -1,3 +1,14 @@\n+2008-08-31  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement late-specified return type using 'auto'.\n+\t* cp-tree.h (struct cp_declarator): Add late_return_type field to\n+\tfunction declarator.\n+\t* parser.c (cp_parser_late_return_type_opt): New fn.\n+\t(cp_parser_direct_declarator): Use it.\n+\t(make_call_declarator): Put it in the declarator.\n+\t* decl.c (grokdeclarator): Splice in late-specified return type.\n+\t* pt.c (splice_late_return_type): New fn.\n+\n 2008-08-29  Michael Meissner  <gnu@the-meissners.org>\n \n \t* decl.c (builtin_function_1): Take a bool argument to decide"}, {"sha": "a01d981f9f9a3780f565cdcd401fcbe8d1ae3a9d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -4108,6 +4108,8 @@ struct cp_declarator {\n       cp_cv_quals qualifiers;\n       /* The exception-specification for the function.  */\n       tree exception_specification;\n+      /* The late-specified return type, if any.  */\n+      tree late_return_type;\n     } function;\n     /* For arrays.  */\n     struct {\n@@ -4525,6 +4527,7 @@ extern tree check_explicit_specialization\t(tree, tree, int, int);\n extern tree make_auto\t\t\t\t(void);\n extern tree do_auto_deduction\t\t\t(tree, tree, tree);\n extern tree type_uses_auto\t\t\t(tree);\n+extern tree splice_late_return_type\t\t(tree, tree);\n extern bool is_auto\t\t\t\t(const_tree);\n extern tree process_template_parm\t\t(tree, tree, bool, bool);\n extern tree end_template_parm_list\t\t(tree);"}, {"sha": "0d735c4683ff466f919f5a721b379edca7e4c79f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -8220,6 +8220,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t    /* Pick up the exception specifications.  */\n \t    raises = declarator->u.function.exception_specification;\n \n+\t    /* Handle a late-specified return type.  */\n+\t    type = splice_late_return_type\n+\t      (type, declarator->u.function.late_return_type);\n+\t    if (type == error_mark_node)\n+\t      return error_mark_node;\n+\n \t    /* Say it's a definition only for the CALL_EXPR\n \t       closest to the identifier.  */\n \t    funcdecl_p = inner_declarator && inner_declarator->kind == cdk_id;"}, {"sha": "3d74d6c2d8c99e6bf27056b714387b6b985bd575", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -853,7 +853,7 @@ clear_decl_specs (cp_decl_specifier_seq *decl_specs)\n    VAR_DECLs or FUNCTION_DECLs) should do that directly.  */\n \n static cp_declarator *make_call_declarator\n-  (cp_declarator *, cp_parameter_declarator *, cp_cv_quals, tree);\n+  (cp_declarator *, cp_parameter_declarator *, cp_cv_quals, tree, tree);\n static cp_declarator *make_array_declarator\n   (cp_declarator *, tree);\n static cp_declarator *make_pointer_declarator\n@@ -1015,7 +1015,8 @@ cp_declarator *\n make_call_declarator (cp_declarator *target,\n \t\t      cp_parameter_declarator *parms,\n \t\t      cp_cv_quals cv_qualifiers,\n-\t\t      tree exception_specification)\n+\t\t      tree exception_specification,\n+\t\t      tree late_return_type)\n {\n   cp_declarator *declarator;\n \n@@ -1024,6 +1025,7 @@ make_call_declarator (cp_declarator *target,\n   declarator->u.function.parameters = parms;\n   declarator->u.function.qualifiers = cv_qualifiers;\n   declarator->u.function.exception_specification = exception_specification;\n+  declarator->u.function.late_return_type = late_return_type;\n   if (target)\n     {\n       declarator->parameter_pack_p = target->parameter_pack_p;\n@@ -1726,6 +1728,8 @@ static enum tree_code cp_parser_ptr_operator\n   (cp_parser *, tree *, cp_cv_quals *);\n static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n   (cp_parser *);\n+static tree cp_parser_late_return_type_opt\n+  (cp_parser *);\n static tree cp_parser_declarator_id\n   (cp_parser *, bool);\n static tree cp_parser_type_id\n@@ -13021,6 +13025,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t{\n \t\t  cp_cv_quals cv_quals;\n \t\t  tree exception_specification;\n+\t\t  tree late_return;\n \n \t\t  if (ctor_dtor_or_conv_p)\n \t\t    *ctor_dtor_or_conv_p = *ctor_dtor_or_conv_p < 0;\n@@ -13034,11 +13039,15 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  exception_specification\n \t\t    = cp_parser_exception_specification_opt (parser);\n \n+\t\t  late_return\n+\t\t    = cp_parser_late_return_type_opt (parser);\n+\n \t\t  /* Create the function-declarator.  */\n \t\t  declarator = make_call_declarator (declarator,\n \t\t\t\t\t\t     params,\n \t\t\t\t\t\t     cv_quals,\n-\t\t\t\t\t\t     exception_specification);\n+\t\t\t\t\t\t     exception_specification,\n+\t\t\t\t\t\t     late_return);\n \t\t  /* Any subsequent parameter lists are to do with\n \t\t     return type, so are not those of the declared\n \t\t     function.  */\n@@ -13516,6 +13525,30 @@ cp_parser_cv_qualifier_seq_opt (cp_parser* parser)\n   return cv_quals;\n }\n \n+/* Parse a late-specified return type, if any.  This is not a separate\n+   non-terminal, but part of a function declarator, which looks like\n+\n+   -> type-id\n+\n+   Returns the type indicated by the type-id.  */\n+\n+static tree\n+cp_parser_late_return_type_opt (cp_parser* parser)\n+{\n+  cp_token *token;\n+\n+  /* Peek at the next token.  */\n+  token = cp_lexer_peek_token (parser->lexer);\n+  /* A late-specified return type is indicated by an initial '->'. */\n+  if (token->type != CPP_DEREF)\n+    return NULL_TREE;\n+\n+  /* Consume the ->.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n+  return cp_parser_type_id (parser);\n+}\n+\n /* Parse a declarator-id.\n \n    declarator-id:"}, {"sha": "b05c7a00ec2f12eab639068e07d4cccd87adbbf9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -16769,6 +16769,23 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n   return tsubst (type, targs, tf_warning_or_error, NULL_TREE);\n }\n \n+/* Substitutes LATE_RETURN_TYPE for 'auto' in TYPE and returns the\n+   result.  */\n+\n+tree\n+splice_late_return_type (tree type, tree late_return_type)\n+{\n+  tree argvec;\n+\n+  if (late_return_type == NULL_TREE)\n+    return type;\n+  argvec = make_tree_vec (1);\n+  TREE_VEC_ELT (argvec, 0) = late_return_type;\n+  if (processing_template_decl)\n+    argvec = add_to_template_args (current_template_args (), argvec);\n+  return tsubst (type, argvec, tf_warning_or_error, NULL_TREE);\n+}\n+\n /* Returns true iff TYPE is a TEMPLATE_TYPE_PARM representing 'auto'.  */\n \n bool"}, {"sha": "ac209934869b06677f81a9fd93281803a82dc85f", "filename": "gcc/testsuite/g++.dg/cpp0x/auto6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57ca1ea5f9ebcd518961e4251dd224524725f11/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C?ref=f57ca1ea5f9ebcd518961e4251dd224524725f11", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+auto f() -> int\n+{\n+  return 0;\n+}\n+\n+template<class T, class U>\n+auto add(T t, U u) -> decltype (t+u); // { dg-bogus \"not declared\" \"\" { xfail *-*-* } }"}]}