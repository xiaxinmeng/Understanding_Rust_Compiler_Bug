{"sha": "02848684196a014f8a6cd3c55a32a91de989b0d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4NDg2ODQxOTZhMDE0ZjhhNmNkM2M1NWEzMmE5MWRlOTg5YjBkNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:32:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:32:23Z"}, "message": "einfo.ads: Minor fixes in comments.\n\n\n\n\t* einfo.ads: Minor fixes in comments.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb: disable clones in SPARK_Mode.\n\n2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.ads, contracts.adb: Minor reformatting.\n\nFrom-SVN: r247315", "tree": {"sha": "678bfa9b53ee6f1c5f222aedc54d34a392ca6c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678bfa9b53ee6f1c5f222aedc54d34a392ca6c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02848684196a014f8a6cd3c55a32a91de989b0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02848684196a014f8a6cd3c55a32a91de989b0d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02848684196a014f8a6cd3c55a32a91de989b0d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02848684196a014f8a6cd3c55a32a91de989b0d6/comments", "author": null, "committer": null, "parents": [{"sha": "62c7d441e5016a2392539b3ce059bbec01fbab3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c7d441e5016a2392539b3ce059bbec01fbab3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c7d441e5016a2392539b3ce059bbec01fbab3a"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "88ad07dfa92badfb6b4f7248d792ef345421946c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=02848684196a014f8a6cd3c55a32a91de989b0d6", "patch": "@@ -1,3 +1,15 @@\n+2017-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads: Minor fixes in comments.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb: disable clones in SPARK_Mode.\n+\n+2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.ads, contracts.adb: Minor reformatting.\n+\n 2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb, sem_util.ads (Build_Class_Wide_Clone_Body):"}, {"sha": "8a35b82f55e84c2211f2fbb2a7c563a059e83f2c", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=02848684196a014f8a6cd3c55a32a91de989b0d6", "patch": "@@ -390,9 +390,9 @@ package body Contracts is\n             begin\n                Analyze_Entry_Or_Subprogram_Contract (Subp_Id, Freeze_Id);\n \n-               --  If analysis of a classwide pre/postcondition indicates\n+               --  If analysis of a class-wide pre/postcondition indicates\n                --  that a class-wide clone is needed, analyze its declaration\n-               --  now.  Its body is created when the body of the original\n+               --  now. Its body is created when the body of the original\n                --  operation is analyzed (and rewritten).\n \n                if Is_Subprogram (Subp_Id)"}, {"sha": "61694bfec0851fd9ea29083b260779645ad9d716", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=02848684196a014f8a6cd3c55a32a91de989b0d6", "patch": "@@ -3703,7 +3703,7 @@ package Einfo is\n \n --    OK_To_Reorder_Components (Flag239) [base type only]\n --       Defined in record types. Set if the backend is permitted to reorder\n---       the components. If not set, the record must be layed out in the order\n+--       the components. If not set, the record must be laid out in the order\n --       in which the components are declared textually. Currently this flag\n --       can only be set by debug switches.\n \n@@ -3793,7 +3793,7 @@ package Einfo is\n --       non-contiguous enumeration index types). References the type used to\n --       represent the packed array, which is either a modular type for short\n --       static arrays or an array of System.Unsigned in the bit-packed case,\n---       or a regular array in the non-standard enumeration index case). Note\n+--       or a regular array in the non-standard enumeration index case. Note\n --       that in some situations (internal types and references to fields of\n --       variant records), it is not always possible to construct this type in\n --       advance of its use. If this field is empty, then the necessary type"}, {"sha": "702f4624c08966085ddeebf1d59560f16a3773e7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=02848684196a014f8a6cd3c55a32a91de989b0d6", "patch": "@@ -24016,6 +24016,7 @@ package body Sem_Prag is\n                elsif not Is_Abstract_Subprogram (Spec_Id)\n                  and then No (Class_Wide_Clone (Spec_Id))\n                  and then not Has_Controlling_Result (Spec_Id)\n+                 and then SPARK_Mode /= On\n                then\n                   Build_Class_Wide_Clone_Decl (Spec_Id);\n                end if;"}, {"sha": "b1dc68aae39490cf2d3b7d31af301b0fe631f7d5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02848684196a014f8a6cd3c55a32a91de989b0d6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=02848684196a014f8a6cd3c55a32a91de989b0d6", "patch": "@@ -209,10 +209,10 @@ package Sem_Util is\n    --  Determine whether a selected component has a type that depends on\n    --  discriminants, and build actual subtype for it if so.\n \n-   --  Handling of inherited primitives whose ancestor have class-wide\n-   --  pre/post conditions.\n+   --  Handling of inherited primitives whose ancestors have class-wide\n+   --  pre/postconditions.\n \n-   --  If a primitive operation of a parent type has a class-wide pre/post\n+   --  If a primitive operation of a parent type has a class-wide pre/post-\n    --  condition that includes calls to other primitives, and that operation\n    --  is inherited by a descendant type that also overrides some of these\n    --  other primitives, the condition that applies to the inherited\n@@ -227,7 +227,7 @@ package Sem_Util is\n    --  economically we create a subprogram body (a \"class-wide clone\") to\n    --  which no pre/postconditions apply, and we create bodies for the\n    --  original and the inherited operation that have their respective\n-   --  pre/post conditions and simply call the clone. The following operations\n+   --  pre/postconditions and simply call the clone. The following operations\n    --  take care of constructing declaration and body of the clone, and\n    --  building the calls to it within the appropriate wrappers.\n \n@@ -250,7 +250,7 @@ package Sem_Util is\n    --  clone includes the proper conversion in a call the parent operation.\n \n    procedure Build_Class_Wide_Clone_Decl (Spec_Id : Entity_Id);\n-   --  For a subprogram that has a clas-wide condition that contains calls\n+   --  For a subprogram that has a class-wide condition that contains calls\n    --  to other primitives, build an internal subprogram that is invoked\n    --  through a type-specific wrapper for all inherited subprograms that\n    --  may have a modified condition."}]}