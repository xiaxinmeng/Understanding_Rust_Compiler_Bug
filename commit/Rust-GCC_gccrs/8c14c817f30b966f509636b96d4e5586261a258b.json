{"sha": "8c14c817f30b966f509636b96d4e5586261a258b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxNGM4MTdmMzBiOTY2ZjUwOTYzNmI5NmQ0ZTU1ODYyNjFhMjU4Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-07T12:32:30Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-07T12:32:30Z"}, "message": "re PR tree-optimization/63595 (Segmentation faults inside kernel)\n\n\tPR ipa/63595\n\t* g++.dg/ipa/pr63595.C: New test.\n\n\t* cgraphunit.c (cgraph_node::expand_thunk): DECL_BY_REFERENCE\n\tis correctly handled for thunks created by IPA ICF.\n\nFrom-SVN: r217218", "tree": {"sha": "0b4d48f2d89c808ed0bbec9eb9bf0c8bf6983e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4d48f2d89c808ed0bbec9eb9bf0c8bf6983e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c14c817f30b966f509636b96d4e5586261a258b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c14c817f30b966f509636b96d4e5586261a258b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c14c817f30b966f509636b96d4e5586261a258b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c14c817f30b966f509636b96d4e5586261a258b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c00ba08c614069a590c673fe20afe9a5f1f55fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c00ba08c614069a590c673fe20afe9a5f1f55fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c00ba08c614069a590c673fe20afe9a5f1f55fe"}], "stats": {"total": 107, "additions": 105, "deletions": 2}, "files": [{"sha": "6fc91b5d66db3d37d701109ea048c2df9811d8cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c14c817f30b966f509636b96d4e5586261a258b", "patch": "@@ -1,3 +1,9 @@\n+2014-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/63595\n+\t* cgraphunit.c (cgraph_node::expand_thunk): DECL_BY_REFERENCE\n+\tis correctly handled for thunks created by IPA ICF.\n+\n 2014-11-07  Jiong Wang  <jiong.wang@arm.com>\n 2014-11-07  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "75d414024a74974697e78a3ebf50d9b0048703a7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8c14c817f30b966f509636b96d4e5586261a258b", "patch": "@@ -1555,7 +1555,15 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       if (!VOID_TYPE_P (restype))\n \t{\n \t  if (DECL_BY_REFERENCE (resdecl))\n-\t    restmp = gimple_fold_indirect_ref (resdecl);\n+\t    {\n+\t      restmp = gimple_fold_indirect_ref (resdecl);\n+\t      if (!restmp)\n+\t\trestmp = build2 (MEM_REF,\n+\t\t\t\t TREE_TYPE (TREE_TYPE (DECL_RESULT (alias))),\n+\t\t\t\t resdecl,\n+\t\t\t\t build_int_cst (TREE_TYPE\n+\t\t\t\t   (DECL_RESULT (alias)), 0));\n+\t    }\n \t  else if (!is_gimple_reg_type (restype))\n \t    {\n \t      restmp = resdecl;\n@@ -1651,7 +1659,11 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t    gimple_call_set_tail (call, true);\n \n \t  /* Build return value.  */\n-\t  ret = gimple_build_return (restmp);\n+\t  if (!DECL_BY_REFERENCE (resdecl))\n+\t    ret = gimple_build_return (restmp);\n+\t  else\n+\t    ret = gimple_build_return (resdecl);\n+\n \t  gsi_insert_after (&bsi, ret, GSI_NEW_STMT);\n \t}\n       else"}, {"sha": "8575ba3e18028fc871f472d4043db29186ff1e1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c14c817f30b966f509636b96d4e5586261a258b", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/63595\n+\t* g++.dg/ipa/pr63595.C: New test.\n+\n 2014-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63770"}, {"sha": "30e930345b5bcc30f2412490794ea85af86ff451", "filename": "gcc/testsuite/g++.dg/ipa/pr63595.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63595.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c14c817f30b966f509636b96d4e5586261a258b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63595.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63595.C?ref=8c14c817f30b966f509636b96d4e5586261a258b", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf-details\"  } */\n+\n+template <int dim> class B;\n+template <int, int dim> class TriaObjectAccessor;\n+template <int, typename Accessor> class A;\n+template <int dim> class TriaDimensionInfo {\n+public:\n+  typedef A<3, TriaObjectAccessor<2, 3> > raw_quad_iterator;\n+  typedef A<3, B<3> > raw_hex_iterator;\n+  typedef raw_hex_iterator raw_cell_iterator;\n+};\n+template <int dim> class Triangulation : public TriaDimensionInfo<1> {\n+  public:\n+  typedef typename TriaDimensionInfo<dim>::raw_quad_iterator raw_quad_iterator;\n+  TriaDimensionInfo::raw_cell_iterator end() const;\n+  raw_quad_iterator end_quad() const {\n+    return raw_quad_iterator(const_cast<Triangulation *>(this), 0, 0);\n+  }\n+};\n+template <int dim> class TriaAccessor {\n+public:\n+  typedef void AccessorData;\n+  TriaAccessor(const Triangulation<dim> * = 0);\n+  Triangulation<1> *tria;\n+\n+  int a, b, c;\n+};\n+template <int dim> class TriaObjectAccessor<2, dim> : public TriaAccessor<dim> {\n+public:\n+  typedef typename TriaAccessor<dim>::AccessorData AccessorData;\n+  TriaObjectAccessor(const Triangulation<dim> * = 0);\n+};\n+template <int dim> class TriaObjectAccessor<3, dim> : public TriaAccessor<dim> {\n+public:\n+  typedef typename TriaAccessor<dim>::AccessorData AccessorData;\n+  TriaObjectAccessor(const Triangulation<dim> * = 0);\n+};\n+template <int dim> class B : public TriaObjectAccessor<dim, dim> {\n+public:\n+  typedef typename TriaObjectAccessor<dim, dim>::AccessorData AccessorData;\n+  B(const Triangulation<dim> * = 0);\n+};\n+template <int dim, typename Accessor> class A {\n+public:\n+  A(const A &);\n+  A(const Triangulation<dim> *, int, int);\n+  Accessor accessor;\n+};\n+template class Triangulation<3>;\n+template <int dim, typename Accessor>\n+A<dim, Accessor>::A(const Triangulation<dim> *, int, int) {}\n+template <int dim>\n+TriaAccessor<dim>::TriaAccessor(const Triangulation<dim> *)\n+    : tria(), a(-1), b(-2), c(-3) {}\n+template <int dim>\n+TriaObjectAccessor<2, dim>::TriaObjectAccessor(const Triangulation<dim> *) {}\n+template <int dim>\n+TriaObjectAccessor<3, dim>::TriaObjectAccessor(const Triangulation<dim> *) {}\n+template <int dim> B<dim>::B(const Triangulation<dim> *) {}\n+template <>\n+TriaDimensionInfo<3>::raw_cell_iterator Triangulation<3>::end() const {\n+  return raw_hex_iterator(const_cast<Triangulation *>(this), 0, 0);\n+}\n+\n+#pragma GCC optimize (\"-O0\")\n+int main()\n+{\n+  Triangulation <3> t;\n+  Triangulation<3>::raw_quad_iterator i1 = t.end_quad();\n+  TriaDimensionInfo<3>::raw_cell_iterator i2 = t.end();\n+\n+  if(i2.accessor.c != -3)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}]}