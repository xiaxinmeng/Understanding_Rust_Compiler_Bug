{"sha": "1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "node_id": "C_kwDOANBUbNoAKDE1NjNkZTZmOWQzYTk2MDdhZTI4NzJiODdkOTcxOGFkZDNjZjZlNmE", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:49:36Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:27Z"}, "message": "arm: improve tests and fix vqnegq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vqnegq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s8.c: Likewise.", "tree": {"sha": "82eb04190a403abdbd1492ae0d1da83fc471d8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82eb04190a403abdbd1492ae0d1da83fc471d8f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a712e9c6620f8b7aede3eb1c2984fb91646201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a712e9c6620f8b7aede3eb1c2984fb91646201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a712e9c6620f8b7aede3eb1c2984fb91646201"}], "stats": {"total": 177, "additions": 159, "deletions": 18}, "files": [{"sha": "555ad1b66c84a143051a57bb9c5b23c8402f01bf", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -374,7 +374,7 @@\n \t VQNEGQ_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vqneg.s%#<V_sz_elem> %q0, %q1\"\n+  \"vqneg.s%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "f3799a35b120ca6115c30e769823c4244ef03012", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s16.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vqnegq_m_s16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqnegt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vqnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bbe64ff4d52d4ab7c50166ce87ec34eed21d3847", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s32.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vqnegq_m_s32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqnegt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vqnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "71fcdd7cba715abf8a9f510685bdbe04099df3e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_m_s8.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vqnegq_m_s8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqnegt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqnegt.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vqnegq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d5fb4a19854f50a5170c34b51d04c1f4d1734dd9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s16.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqneg.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a)\n {\n   return vqnegq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqneg.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a)\n {\n   return vqnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2c8e709f491b9054cb92ad27a18ff4d45dbdf00c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s32.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqneg.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a)\n {\n   return vqnegq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqneg.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a)\n {\n   return vqnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2f7f7619ef68bcbca16f6ffb11085ad1bf608ad9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqnegq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1563de6f9d3a9607ae2872b87d9718add3cf6e6a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqnegq_s8.c?ref=1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqneg.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a)\n {\n   return vqnegq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqneg.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a)\n {\n   return vqnegq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqneg.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}