{"sha": "a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhY2Y0NmQ0NDVmZmZjMGQ2OTFiZjFhY2I4MGQ5YTcwZGJkMDgyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-04-18T19:10:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-18T19:10:11Z"}, "message": "re PR c/6358 (GCC 3.1 ICE on statement expressions)\n\n\tPR c/6358\n\t* function.c (assign_parms): Assign hard current_function_return_rtx\n\tregister here...\n\t(expand_function_end): ...not here.\n\n\t* gcc.c-torture/compile/20020418-1.c: New test.\n\nFrom-SVN: r52485", "tree": {"sha": "96fdec6ac3f7a61a7e94dfb6e4e7c3793655a3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96fdec6ac3f7a61a7e94dfb6e4e7c3793655a3d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ecab453cb0b0815f165224ba74859ca3be28a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ecab453cb0b0815f165224ba74859ca3be28a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ecab453cb0b0815f165224ba74859ca3be28a46"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "2676cb0036bd0bcac7c638e36b8a798bdf8e4f6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "patch": "@@ -1,3 +1,10 @@\n+2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/6358\n+\t* function.c (assign_parms): Assign hard current_function_return_rtx\n+\tregister here...\n+\t(expand_function_end): ...not here.\n+\n 2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine."}, {"sha": "4562376ce4980589310a48ad4dddc296e217f064", "filename": "gcc/function.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "patch": "@@ -5145,6 +5145,35 @@ assign_parms (fndecl)\n   current_function_return_rtx\n     = (DECL_RTL_SET_P (DECL_RESULT (fndecl))\n        ? DECL_RTL (DECL_RESULT (fndecl)) : NULL_RTX);\n+\n+  /* If scalar return value was computed in a pseudo-reg, or was a named\n+     return value that got dumped to the stack, copy that to the hard\n+     return register.  */\n+  if (DECL_RTL_SET_P (DECL_RESULT (fndecl)))\n+    {\n+      tree decl_result = DECL_RESULT (fndecl);\n+      rtx decl_rtl = DECL_RTL (decl_result);\n+\n+      if (REG_P (decl_rtl)\n+\t  ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n+\t  : DECL_REGISTER (decl_result))\n+\t{\n+\t  rtx real_decl_rtl;\n+\n+#ifdef FUNCTION_OUTGOING_VALUE\n+\t  real_decl_rtl = FUNCTION_OUTGOING_VALUE (TREE_TYPE (decl_result),\n+\t\t\t\t\t\t   fndecl);\n+#else\n+\t  real_decl_rtl = FUNCTION_VALUE (TREE_TYPE (decl_result),\n+\t\t\t\t\t  fndecl);\n+#endif\n+\t  REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n+\t  /* The delay slot scheduler assumes that current_function_return_rtx\n+\t     holds the hard register containing the return value, not a\n+\t     temporary pseudo.  */\n+\t  current_function_return_rtx = real_decl_rtl;\n+\t}\n+    }\n }\n \f\n /* Indicate whether REGNO is an incoming argument to the current function\n@@ -6958,16 +6987,11 @@ expand_function_end (filename, line, end_bindings)\n \t  ? REGNO (decl_rtl) >= FIRST_PSEUDO_REGISTER\n \t  : DECL_REGISTER (decl_result))\n \t{\n-\t  rtx real_decl_rtl;\n+\t  rtx real_decl_rtl = current_function_return_rtx;\n \n-#ifdef FUNCTION_OUTGOING_VALUE\n-\t  real_decl_rtl = FUNCTION_OUTGOING_VALUE (TREE_TYPE (decl_result),\n-\t\t\t\t\t\t   current_function_decl);\n-#else\n-\t  real_decl_rtl = FUNCTION_VALUE (TREE_TYPE (decl_result),\n-\t\t\t\t\t  current_function_decl);\n-#endif\n-\t  REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n+\t  /* This should be set in assign_parms.  */\n+\t  if (! REG_FUNCTION_VALUE_P (real_decl_rtl))\n+\t    abort ();\n \n \t  /* If this is a BLKmode structure being returned in registers,\n \t     then use the mode computed in expand_return.  Note that if\n@@ -6995,11 +7019,6 @@ expand_function_end (filename, line, end_bindings)\n \t\t\t     int_size_in_bytes (TREE_TYPE (decl_result)));\n \t  else\n \t    emit_move_insn (real_decl_rtl, decl_rtl);\n-\n-\t  /* The delay slot scheduler assumes that current_function_return_rtx\n-\t     holds the hard register containing the return value, not a\n-\t     temporary pseudo.  */\n-\t  current_function_return_rtx = real_decl_rtl;\n \t}\n     }\n "}, {"sha": "9c6bd869be3b459e55377b379285a6a32ef9a042", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "patch": "@@ -1,3 +1,7 @@\n+2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020418-1.c: New test.\n+\n 2002-04-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/compile/20020415-1.c: New."}, {"sha": "df01e6847e3d608f00203f030cb625da2948429e", "filename": "gcc/testsuite/gcc.c-torture/compile/20020418-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020418-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3acf46d445fffc0d691bf1acb80d9a70dbd082c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020418-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020418-1.c?ref=a3acf46d445fffc0d691bf1acb80d9a70dbd082c", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/6358\n+   This testcase ICEd on IA-32 in foo, because current_function_return_rtx\n+   was assigned a hard register only after expand_null_return was called,\n+   thus return pseudo was clobbered twice and the hard register not at\n+   all.  */\n+\n+void baz (void);\n+                       \n+double foo (void)\n+{\n+  baz ();\n+  return;\n+}\n+\n+double bar (void)\n+{\n+  baz ();\n+}"}]}