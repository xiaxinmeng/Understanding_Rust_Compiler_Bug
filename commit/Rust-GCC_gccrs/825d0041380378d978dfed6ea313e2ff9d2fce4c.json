{"sha": "825d0041380378d978dfed6ea313e2ff9d2fce4c", "node_id": "C_kwDOANBUbNoAKDgyNWQwMDQxMzgwMzc4ZDk3OGRmZWQ2ZWEzMTNlMmZmOWQyZmNlNGM", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-09-28T07:30:14Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-10-21T02:38:19Z"}, "message": "Support Intel AVX-IFMA\n\ngcc/\n\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA_AVXIFMA_SET, OPTION_MASK_ISA2_AVXIFMA_UNSET,\n\tOPTION_MASK_ISA2_AVX2_UNSET): New macro.\n\t(ix86_handle_option): Handle -mavxifma.\n\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n\tFEATURE_AVXIFMA.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tavxifma.\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect avxifma.\n\t* config.gcc: Add avxifmaintrin.h\n\t* config/i386/avx512ifmavlintrin.h: (_mm_madd52lo_epu64): Change\n\tto macro.\n\t(_mm_madd52hi_epu64): Likewise.\n\t(_mm256_madd52lo_epu64): Likewise.\n\t(_mm256_madd52hi_epu64): Likewise.\n\t* config/i386/avxifmaintrin.h: New header.\n\t* config/i386/cpuid.h (bit_AVXIFMA): New.\n\t* config/i386/i386-builtin.def: Add new builtins, and correct\n\t  pattern names for AVX512IFMA.\n\t* config/i386/i386-builtins.cc (def_builtin): Handle AVX-IFMA\n\t  builtins like AVX-VNNI.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__AVXIFMA__.\n\t* config/i386/i386-expand.cc (ix86_check_builtin_isa_match):\n\t  Relax ISA masks for AVXIFMA.\n\t* config/i386/i386-isa.def: Add AVXIFMA.\n\t* config/i386/i386-options.cc (isa2_opts): Add -mavxifma.\n\t(ix86_valid_target_attribute_inner_p): Handle avxifma.\n\t* config/i386/i386.md (isa): Add attr avxifma and avxifmavl.\n\t* config/i386/i386.opt: Add option -mavxifma.\n\t* config/i386/immintrin.h: Inculde avxifmaintrin.h.\n\t* config/i386/sse.md (avx_vpmadd52<vpmadd52type>_<mode>):\n\tRemove.\n\t(vpamdd52<vpmadd52type><mode><sd_maskz_name>): Remove.\n\t(vpamdd52huq<mode>_maskz): Rename to ...\n\t(vpmadd52huq<mode>_maskz): ... this.\n\t(vpamdd52luq<mode>_maskz): Rename to ...\n\t(vpmadd52luq<mode>_maskz): ... this.\n\t(vpmadd52<vpmadd52type><mode>): New define_insn.\n\t(vpmadd52<vpmadd52type>v8di): Likewise.\n\t(vpmadd52<vpmadd52type><mode>_maskz_1): Likewise.\n\t(vpamdd52<vpmadd52type><mode>_mask): Rename to ...\n\t(vpmadd52<vpmadd52type><mode>_mask): ... this.\n\t* doc/invoke.texi: Document -mavxifma.\n\t* doc/extend.texi: Document avxifma.\n\t* doc/sourcebuild.texi: Document target avxifma.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/avx-check.h: Add avxifma check.\n\t* gcc.target/i386/avx512ifma-vpmaddhuq-1.c: Remane..\n\t* gcc.target/i386/avx512ifma-vpmaddhuq-1a.c: To this.\n\t* gcc.target/i386/avx512ifma-vpmaddluq-1.c: Ditto.\n\t* gcc.target/i386/avx512ifma-vpmaddluq-1a.c: Ditto.\n\t* gcc.target/i386/avx512ifma-vpmaddhuq-1b.c: New Test.\n\t* gcc.target/i386/avx512ifma-vpmaddluq-1b.c: Ditto.\n\t* gcc.target/i386/avx-ifma-1.c: Ditto.\n\t* gcc.target/i386/avx-ifma-2.c: Ditto.\n\t* gcc.target/i386/avx-ifma-3.c: Ditto.\n\t* gcc.target/i386/avx-ifma-4.c: Ditto.\n\t* gcc.target/i386/avx-ifma-5.c: Ditto.\n\t* gcc.target/i386/avx-ifma-6.c: Ditto.\n\t* gcc.target/i386/avx-ifma-vpmaddhuq-2.c: Ditto.\n\t* gcc.target/i386/avx-ifma-vpmaddluq-2.c: Ditto.\n\t* gcc.target/i386/sse-12.c: Add -mavxifma.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* lib/target-supports.exp\n\t(check_effective_target_avxifma): New.", "tree": {"sha": "722dabbb65a54d9642f43d4011d5ab27ca4294ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722dabbb65a54d9642f43d4011d5ab27ca4294ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825d0041380378d978dfed6ea313e2ff9d2fce4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825d0041380378d978dfed6ea313e2ff9d2fce4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825d0041380378d978dfed6ea313e2ff9d2fce4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825d0041380378d978dfed6ea313e2ff9d2fce4c/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a6ae56584f5e3caaac74e158b77bf1c4fdd774"}], "stats": {"total": 645, "additions": 563, "deletions": 82}, "files": [{"sha": "9bb21c6caccbf58e9bc1a4c8739380cf22db6dfa", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -793,6 +793,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t{\n \t  if (eax & bit_AVXVNNI)\n \t    set_feature (FEATURE_AVXVNNI);\n+\t  if (eax & bit_AVXIFMA)\n+\t    set_feature (FEATURE_AVXIFMA);\n \t}\n       if (avx512_usable)\n \t{"}, {"sha": "4de7906b2477806edda9926eaa8a35789a027951", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -76,6 +76,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512IFMA_SET \\\n   (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA2_AVXIFMA_SET OPTION_MASK_ISA2_AVXIFMA\n #define OPTION_MASK_ISA_AVX512VBMI_SET \\\n   (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512BW_SET)\n #define OPTION_MASK_ISA2_AVX5124FMAPS_SET OPTION_MASK_ISA2_AVX5124FMAPS\n@@ -212,7 +213,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX2_UNSET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX512F_UNSET)\n #define OPTION_MASK_ISA2_AVX2_UNSET \\\n-  (OPTION_MASK_ISA2_AVXVNNI_UNSET | OPTION_MASK_ISA2_AVX512F_UNSET)\n+  (OPTION_MASK_ISA2_AVXIFMA_UNSET | OPTION_MASK_ISA2_AVXVNNI_UNSET \\\n+   | OPTION_MASK_ISA2_AVX512F_UNSET)\n #define OPTION_MASK_ISA_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_AVX512CD_UNSET \\\n    | OPTION_MASK_ISA_AVX512PF_UNSET | OPTION_MASK_ISA_AVX512ER_UNSET \\\n@@ -230,6 +232,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VBMI_UNSET)\n #define OPTION_MASK_ISA_AVX512VL_UNSET OPTION_MASK_ISA_AVX512VL\n #define OPTION_MASK_ISA_AVX512IFMA_UNSET OPTION_MASK_ISA_AVX512IFMA\n+#define OPTION_MASK_ISA2_AVXIFMA_UNSET OPTION_MASK_ISA2_AVXIFMA\n #define OPTION_MASK_ISA_AVX512VBMI_UNSET OPTION_MASK_ISA_AVX512VBMI\n #define OPTION_MASK_ISA2_AVX5124FMAPS_UNSET OPTION_MASK_ISA2_AVX5124FMAPS\n #define OPTION_MASK_ISA2_AVX5124VNNIW_UNSET OPTION_MASK_ISA2_AVX5124VNNIW\n@@ -1124,6 +1127,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavxifma:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVXIFMA_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVXIFMA_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVXIFMA_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVXIFMA_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "968f9a56a6cd4586686517572ad928991896c8e2", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -240,6 +240,7 @@ enum processor_features\n   FEATURE_X86_64_V2,\n   FEATURE_X86_64_V3,\n   FEATURE_X86_64_V4,\n+  FEATURE_AVXIFMA,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "b05b4bb8f0d884ba5449e65eec9aeb034a76c56d", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -175,4 +175,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"x86-64-v2\", FEATURE_X86_64_V2, P_X86_64_V2, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"x86-64-v3\", FEATURE_X86_64_V3, P_X86_64_V3, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"x86-64-v4\", FEATURE_X86_64_V4, P_X86_64_V4, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"avxifma\", FEATURE_AVXIFMA, P_NONE, \"-mavxifma\")\n ISA_NAMES_TABLE_END"}, {"sha": "dab622892edbd2e9ea9e535663d0b3e9d2b24032", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -421,7 +421,8 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n-\t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\"\n+\t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n+\t\t       avxifmaintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "506dce8e4772ee8abfa2493023694f890dccd526", "filename": "gcc/config/i386/avx512ifmavlintrin.h", "status": "modified", "additions": 20, "deletions": 39, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512ifmavlintrin.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -34,45 +34,26 @@\n #define __DISABLE_AVX512IFMAVL__\n #endif /* __AVX512IFMAVL__ */\n \n-extern __inline __m128i\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_madd52lo_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n-{\n-  return (__m128i) __builtin_ia32_vpmadd52luq128_mask ((__v2di) __X,\n-\t\t\t\t\t\t       (__v2di) __Y,\n-\t\t\t\t\t\t       (__v2di) __Z,\n-\t\t\t\t\t\t       (__mmask8) -1);\n-}\n-\n-extern __inline __m128i\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_madd52hi_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n-{\n-  return (__m128i) __builtin_ia32_vpmadd52huq128_mask ((__v2di) __X,\n-\t\t\t\t\t\t       (__v2di) __Y,\n-\t\t\t\t\t\t       (__v2di) __Z,\n-\t\t\t\t\t\t       (__mmask8) -1);\n-}\n-\n-extern __inline __m256i\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_madd52lo_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n-{\n-  return (__m256i) __builtin_ia32_vpmadd52luq256_mask ((__v4di) __X,\n-\t\t\t\t\t\t       (__v4di) __Y,\n-\t\t\t\t\t\t       (__v4di) __Z,\n-\t\t\t\t\t\t       (__mmask8) -1);\n-}\n-\n-extern __inline __m256i\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_madd52hi_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n-{\n-  return (__m256i) __builtin_ia32_vpmadd52huq256_mask ((__v4di) __X,\n-\t\t\t\t\t\t       (__v4di) __Y,\n-\t\t\t\t\t\t       (__v4di) __Z,\n-\t\t\t\t\t\t       (__mmask8) -1);\n-}\n+#define _mm_madd52lo_epu64(A, B, C)\t\t\t  \\\n+  ((__m128i) __builtin_ia32_vpmadd52luq128 ((__v2di) (A), \\\n+\t\t\t\t\t    (__v2di) (B), \\\n+\t\t\t\t\t    (__v2di) (C)))\n+\n+#define _mm_madd52hi_epu64(A, B, C)\t\t\t  \\\n+  ((__m128i) __builtin_ia32_vpmadd52huq128 ((__v2di) (A), \\\n+\t\t\t\t\t    (__v2di) (B), \\\n+\t\t\t\t\t    (__v2di) (C)))\n+\n+#define _mm256_madd52lo_epu64(A, B, C)\t\t\t  \\\n+  ((__m256i) __builtin_ia32_vpmadd52luq256 ((__v4di) (A), \\\n+\t\t\t\t\t    (__v4di) (B), \\\n+\t\t\t\t\t    (__v4di) (C)))\n+\n+\n+#define _mm256_madd52hi_epu64(A, B, C)\t\t\t  \\\n+  ((__m256i) __builtin_ia32_vpmadd52huq256 ((__v4di) (A), \\\n+\t\t\t\t\t    (__v4di) (B), \\\n+\t\t\t\t\t    (__v4di) (C)))\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "3878d10f991d0f588a309e93492e80073fe33703", "filename": "gcc/config/i386/avxifmaintrin.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Favxifmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Favxifmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxifmaintrin.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,78 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avxifmaintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVXIFMAINTRIN_H_INCLUDED\n+#define _AVXIFMAINTRIN_H_INCLUDED\n+\n+#ifndef __AVXIFMA__\n+#pragma GCC push_options\n+#pragma GCC target(\"avxifma\")\n+#define __DISABLE_AVXIFMA__\n+#endif /* __AVXIFMA__ */\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_madd52lo_avx_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52luq128 ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y,\n+\t\t\t\t\t\t  (__v2di) __Z);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_madd52hi_avx_epu64 (__m128i __X, __m128i __Y, __m128i __Z)\n+{\n+  return (__m128i) __builtin_ia32_vpmadd52huq128 ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y,\n+\t\t\t\t\t\t  (__v2di) __Z);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_madd52lo_avx_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52luq256 ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y,\n+\t\t\t\t\t\t  (__v4di) __Z);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_madd52hi_avx_epu64 (__m256i __X, __m256i __Y, __m256i __Z)\n+{\n+  return (__m256i) __builtin_ia32_vpmadd52huq256 ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y,\n+\t\t\t\t\t\t  (__v4di) __Z);\n+}\n+\n+#ifdef __DISABLE_AVXIFMA__\n+#undef __DISABLE_AVXIFMA__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVXIFMA__ */\n+\n+#endif /* _AVXIFMAINTRIN_H_INCLUDED */"}, {"sha": "9885699efd5096e7f146ef0d024fe361112c17b7", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -28,6 +28,7 @@\n #define bit_AVXVNNI\t(1 << 4)\n #define bit_AVX512BF16\t(1 << 5)\n #define bit_HRESET\t(1 << 22)\n+#define bit_AVXIFMA\t(1 << 23)\n \n /* %ecx */\n #define bit_SSE3\t(1 << 0)"}, {"sha": "d22d79df0548deba8d6dc7b92b3ec4750b2e758f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -2486,18 +2486,22 @@ BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_ucmpv64qi3_mask, \"__builti\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_ucmpv32hi3_mask, \"__builtin_ia32_ucmpw512_mask\", IX86_BUILTIN_UCMPW512, UNKNOWN, (int) USI_FTYPE_V32HI_V32HI_INT_USI)\n \n /* AVX512IFMA */\n-BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpamdd52luqv8di_mask, \"__builtin_ia32_vpmadd52luq512_mask\", IX86_BUILTIN_VPMADD52LUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpamdd52luqv8di_maskz, \"__builtin_ia32_vpmadd52luq512_maskz\", IX86_BUILTIN_VPMADD52LUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpamdd52huqv8di_mask, \"__builtin_ia32_vpmadd52huq512_mask\", IX86_BUILTIN_VPMADD52HUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpamdd52huqv8di_maskz, \"__builtin_ia32_vpmadd52huq512_maskz\", IX86_BUILTIN_VPMADD52HUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52luqv4di_mask, \"__builtin_ia32_vpmadd52luq256_mask\", IX86_BUILTIN_VPMADD52LUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52luqv4di_maskz, \"__builtin_ia32_vpmadd52luq256_maskz\", IX86_BUILTIN_VPMADD52LUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52huqv4di_mask, \"__builtin_ia32_vpmadd52huq256_mask\", IX86_BUILTIN_VPMADD52HUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52huqv4di_maskz, \"__builtin_ia32_vpmadd52huq256_maskz\", IX86_BUILTIN_VPMADD52HUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52luqv2di_mask, \"__builtin_ia32_vpmadd52luq128_mask\", IX86_BUILTIN_VPMADD52LUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52luqv2di_maskz, \"__builtin_ia32_vpmadd52luq128_maskz\", IX86_BUILTIN_VPMADD52LUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52huqv2di_mask, \"__builtin_ia32_vpmadd52huq128_mask\", IX86_BUILTIN_VPMADD52HUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpamdd52huqv2di_maskz, \"__builtin_ia32_vpmadd52huq128_maskz\", IX86_BUILTIN_VPMADD52HUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpmadd52luqv8di_mask, \"__builtin_ia32_vpmadd52luq512_mask\", IX86_BUILTIN_VPMADD52LUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpmadd52luqv8di_maskz, \"__builtin_ia32_vpmadd52luq512_maskz\", IX86_BUILTIN_VPMADD52LUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpmadd52huqv8di_mask, \"__builtin_ia32_vpmadd52huq512_mask\", IX86_BUILTIN_VPMADD52HUQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA, 0, CODE_FOR_vpmadd52huqv8di_maskz, \"__builtin_ia32_vpmadd52huq512_maskz\", IX86_BUILTIN_VPMADD52HUQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52luqv4di_mask, \"__builtin_ia32_vpmadd52luq256_mask\", IX86_BUILTIN_VPMADD52LUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52luqv4di_maskz, \"__builtin_ia32_vpmadd52luq256_maskz\", IX86_BUILTIN_VPMADD52LUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52huqv4di_mask, \"__builtin_ia32_vpmadd52huq256_mask\", IX86_BUILTIN_VPMADD52HUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52huqv4di_maskz, \"__builtin_ia32_vpmadd52huq256_maskz\", IX86_BUILTIN_VPMADD52HUQ256_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52luqv2di_mask, \"__builtin_ia32_vpmadd52luq128_mask\", IX86_BUILTIN_VPMADD52LUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52luqv2di_maskz, \"__builtin_ia32_vpmadd52luq128_maskz\", IX86_BUILTIN_VPMADD52LUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52huqv2di_mask, \"__builtin_ia32_vpmadd52huq128_mask\", IX86_BUILTIN_VPMADD52HUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpmadd52huqv2di_maskz, \"__builtin_ia32_vpmadd52huq128_maskz\", IX86_BUILTIN_VPMADD52HUQ128_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXIFMA, CODE_FOR_vpmadd52luqv4di, \"__builtin_ia32_vpmadd52luq256\", IX86_BUINTIN_VPMADD52LUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXIFMA, CODE_FOR_vpmadd52huqv4di, \"__builtin_ia32_vpmadd52huq256\", IX86_BUINTIN_VPMADD52HUQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXIFMA, CODE_FOR_vpmadd52luqv2di, \"__builtin_ia32_vpmadd52luq128\", IX86_BUINTIN_VPMADD52LUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXIFMA, CODE_FOR_vpmadd52huqv2di, \"__builtin_ia32_vpmadd52huq128\", IX86_BUINTIN_VPMADD52HUQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n \n /* AVX512VBMI */\n BDESC (OPTION_MASK_ISA_AVX512VBMI, 0, CODE_FOR_vpmultishiftqbv64qi_mask, \"__builtin_ia32_vpmultishiftqb512_mask\", IX86_BUILTIN_VPMULTISHIFTQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_UDI)"}, {"sha": "9412cf1acc86f3edc162ed742b2cbd9c243b7398", "filename": "gcc/config/i386/i386-builtins.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -279,10 +279,12 @@ def_builtin (HOST_WIDE_INT mask, HOST_WIDE_INT mask2,\n       if (((mask2 == 0 || (mask2 & ix86_isa_flags2) != 0)\n \t   && (mask == 0 || (mask & ix86_isa_flags) != 0))\n \t  || ((mask & OPTION_MASK_ISA_MMX) != 0 && TARGET_MMX_WITH_SSE)\n-\t  /* \"Unified\" builtin used by either AVXVNNI intrinsics or AVX512VNNIVL\n-\t     non-mask intrinsics should be defined whenever avxvnni\n-\t     or avx512vnni && avx512vl exist.  */\n+\t  /* \"Unified\" builtin used by either AVXVNNI/AVXIFMA intrinsics\n+\t     or AVX512VNNIVL/AVX512IFMAVL non-mask intrinsics should be\n+\t     defined whenever avxvnni/avxifma or avx512vnni/avxifma &&\n+\t     avx512vl exist.  */\n \t  || (mask2 == OPTION_MASK_ISA2_AVXVNNI)\n+\t  || (mask2 == OPTION_MASK_ISA2_AVXIFMA)\n \t  || (lang_hooks.builtin_function\n \t      == lang_hooks.builtin_function_ext_scope))\n \t{"}, {"sha": "3494ec035d5991210c04ffe8e6fa670a270cad65", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -633,6 +633,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__WIDEKL__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVXVNNI)\n     def_or_undef (parse_in, \"__AVXVNNI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AVXIFMA)\n+    def_or_undef (parse_in, \"__AVXIFMA__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "0e8ba1445510124c2eb40b3536d3628b3eeceaa9", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -12367,6 +12367,8 @@ ix86_check_builtin_isa_match (unsigned int fcode,\n      OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4\n      (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL) or\n        OPTION_MASK_ISA2_AVXVNNI\n+     (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512IFMA) or\n+       OPTION_MASK_ISA2_AVXIFMA\n      where for each such pair it is sufficient if either of the ISAs is\n      enabled, plus if it is ored with other options also those others.\n      OPTION_MASK_ISA_MMX in bisa is satisfied also if TARGET_MMX_WITH_SSE.  */\n@@ -12396,6 +12398,17 @@ ix86_check_builtin_isa_match (unsigned int fcode,\n       isa2 |= OPTION_MASK_ISA2_AVXVNNI;\n     }\n \n+  if ((((bisa & (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL))\n+\t== (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL))\n+       || (bisa2 & OPTION_MASK_ISA2_AVXIFMA) != 0)\n+      && (((isa & (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL))\n+\t   == (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL))\n+\t  || (isa2 & OPTION_MASK_ISA2_AVXIFMA) != 0))\n+    {\n+      isa |= OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512VL;\n+      isa2 |= OPTION_MASK_ISA2_AVXIFMA;\n+    }\n+\n   if ((bisa & OPTION_MASK_ISA_MMX) && !TARGET_MMX && TARGET_MMX_WITH_SSE\n       /* __builtin_ia32_maskmovq requires MMX registers.  */\n       && fcode != IX86_BUILTIN_MASKMOVQ)"}, {"sha": "6e0254ce4183964dd5f64fe33a13cccc4c585593", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -109,3 +109,4 @@ DEF_PTA(KL)\n DEF_PTA(WIDEKL)\n DEF_PTA(AVXVNNI)\n DEF_PTA(AVX512FP16)\n+DEF_PTA(AVXIFMA)"}, {"sha": "5facb64c2a846d63333e4b64869a7840db82c7f3", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -226,7 +226,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mkl\",\t\tOPTION_MASK_ISA2_KL },\n   { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL },\n   { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI },\n-  { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 }\n+  { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 },\n+  { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1072,6 +1073,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"hreset\", OPT_mhreset),\n     IX86_ATTR_ISA (\"avxvnni\",   OPT_mavxvnni),\n     IX86_ATTR_ISA (\"avx512fp16\", OPT_mavx512fp16),\n+    IX86_ATTR_ISA (\"avxifma\", OPT_mavxifma),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "93538c5b3c6bdff16ffa8a296ce3c48fb7817f7b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -835,7 +835,8 @@\n \t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,fma_or_avx512vl,\n-\t\t    avx512vl,noavx512vl,avxvnni,avx512vnnivl,avx512fp16\"\n+\t\t    avx512vl,noavx512vl,avxvnni,avx512vnnivl,avx512fp16,avxifma,\n+\t\t    avx512ifmavl\"\n   (const_string \"base\"))\n \n ;; Define instruction set of MMX instructions\n@@ -891,6 +892,9 @@\n \t   (symbol_ref \"TARGET_AVX512VNNI && TARGET_AVX512VL\")\n \t (eq_attr \"isa\" \"avx512fp16\")\n \t   (symbol_ref \"TARGET_AVX512FP16\")\n+\t (eq_attr \"isa\" \"avxifma\") (symbol_ref \"TARGET_AVXIFMA\")\n+\t (eq_attr \"isa\" \"avx512ifmavl\")\n+\t   (symbol_ref \"TARGET_AVX512IFMA && TARGET_AVX512VL\")\n \n \t (eq_attr \"mmx_isa\" \"native\")\n \t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")"}, {"sha": "36e28b7063d6a8fd63ac925e3ff6171af2b4b4af", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1214,3 +1214,8 @@ Do not use GOT to access external symbols.\n -param=x86-stlf-window-ninsns=\n Target Joined UInteger Var(x86_stlf_window_ninsns) Init(64) Param\n Instructions number above which STFL stall penalty can be compensated.\n+\n+mavxifma\n+Target Mask(ISA2_AVXIFMA) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n+AVXIFMA built-in functions and code generation."}, {"sha": "e9d4e97524366aa627ffff35021d93c04bc5130e", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -44,6 +44,8 @@\n \n #include <avxvnniintrin.h>\n \n+#include <avxifmaintrin.h>\n+\n #include <avx2intrin.h>\n \n #include <avx512fintrin.h>"}, {"sha": "33f306a0c757a6fc5456b291b784d649108355c0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -27867,48 +27867,80 @@\n (define_int_attr vpmadd52type\n   [(UNSPEC_VPMADD52LUQ \"luq\") (UNSPEC_VPMADD52HUQ \"huq\")])\n \n-(define_expand \"vpamdd52huq<mode>_maskz\"\n+(define_expand \"vpmadd52huq<mode>_maskz\"\n   [(match_operand:VI8_AVX512VL 0 \"register_operand\")\n    (match_operand:VI8_AVX512VL 1 \"register_operand\")\n    (match_operand:VI8_AVX512VL 2 \"register_operand\")\n    (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512IFMA\"\n {\n-  emit_insn (gen_vpamdd52huq<mode>_maskz_1 (\n+  emit_insn (gen_vpmadd52huq<mode>_maskz_1 (\n     operands[0], operands[1], operands[2], operands[3],\n     CONST0_RTX (<MODE>mode), operands[4]));\n   DONE;\n })\n \n-(define_expand \"vpamdd52luq<mode>_maskz\"\n+(define_expand \"vpmadd52luq<mode>_maskz\"\n   [(match_operand:VI8_AVX512VL 0 \"register_operand\")\n    (match_operand:VI8_AVX512VL 1 \"register_operand\")\n    (match_operand:VI8_AVX512VL 2 \"register_operand\")\n    (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512IFMA\"\n {\n-  emit_insn (gen_vpamdd52luq<mode>_maskz_1 (\n+  emit_insn (gen_vpmadd52luq<mode>_maskz_1 (\n     operands[0], operands[1], operands[2], operands[3],\n     CONST0_RTX (<MODE>mode), operands[4]));\n   DONE;\n })\n \n-(define_insn \"vpamdd52<vpmadd52type><mode><sd_maskz_name>\"\n-  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI8_AVX512VL\n-\t  [(match_operand:VI8_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+(define_insn \"vpmadd52<vpmadd52type>v8di\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8DI\n+\t  [(match_operand:V8DI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V8DI 2 \"register_operand\" \"v\")\n+\t   (match_operand:V8DI 3 \"nonimmediate_operand\" \"vm\")]\n \t  VPMADD52))]\n   \"TARGET_AVX512IFMA\"\n-  \"vpmadd52<vpmadd52type>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\"\n+  \"vpmadd52<vpmadd52type>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"vpmadd52<vpmadd52type><mode>\"\n+  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VI8_AVX2\n+\t  [(match_operand:VI8_AVX2 1 \"register_operand\" \"0,0\")\n+\t   (match_operand:VI8_AVX2 2 \"register_operand\" \"x,v\")\n+\t   (match_operand:VI8_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n+\t  VPMADD52))]\n+  \"TARGET_AVXIFMA || (TARGET_AVX512IFMA && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vpmadd52<vpmadd52type>\\t{%3, %2, %0|%0, %2, %3}\n+  vpmadd52<vpmadd52type>\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"isa\" \"avxifma,avx512ifmavl\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"prefix\" \"vex,evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vpmadd52<vpmadd52type><mode>_maskz_1\"\n+  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI8_AVX512VL\n+\t  (unspec:VI8_AVX512VL\n+\t    [(match_operand:VI8_AVX512VL 1 \"register_operand\" \"0\")\n+\t     (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")\n+\t     (match_operand:VI8_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t    VPMADD52)\n+\t  (match_operand:VI8_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512IFMA\"\n+  \"vpmadd52<vpmadd52type>\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vpamdd52<vpmadd52type><mode>_mask\"\n+(define_insn \"vpmadd52<vpmadd52type><mode>_mask\"\n   [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI8_AVX512VL\n \t  (unspec:VI8_AVX512VL"}, {"sha": "f205542dae918f6a7d8a640a680ad66bab9af26c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -7060,6 +7060,11 @@ Enable/disable the generation of the WIDEKL instructions.\n @cindex @code{target(\"avxvnni\")} function attribute, x86\n Enable/disable the generation of the AVXVNNI instructions.\n \n+@item avxifma\n+@itemx no-avxifma\n+@cindex @code{target(\"avxifma\")} function attribute, x86\n+Enable/disable the generation of the AVXIFMA instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "a4850dd9123e783da23b65d8cb395d9c7e65e9d0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1436,7 +1436,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n--mavx512fp16 @gol\n+-mavx512fp16 -mavxifma @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -32904,6 +32904,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mwidekl\n @opindex mwidekl\n+@need 200\n+@itemx -mavxifma\n+@opindex mavxifma\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -32913,8 +32916,8 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n-UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16\n-or CLDEMOTE extended instruction sets. Each has a corresponding\n+UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n+AVXIFMA or CLDEMOTE extended instruction sets. Each has a corresponding\n @option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see"}, {"sha": "0173acf4a65d7ff54f677343b3831bd8b1f9714c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -2490,6 +2490,9 @@ Target supports the execution of @code{avx512f} instructions.\n @item avx512vp2intersect\n Target supports the execution of @code{avx512vp2intersect} instructions.\n \n+@item avxifma\n+Target supports the execution of @code{avxifma} instructions.\n+\n @item amx_tile\n Target supports the execution of @code{amx-tile} instructions.\n "}, {"sha": "5388606779b719d80d048ab4af4c1e0af01e4837", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "86cedd3d32fb55120caca7b635701de331203b55", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "24ee6ab4efde32f7d106426704cd07c0aae6cd5c", "filename": "gcc/testsuite/gcc.target/i386/avx-check.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -22,7 +22,11 @@ main ()\n \n   /* Run AVX test only if host has AVX support.  */\n   if (((ecx & (bit_AVX | bit_OSXSAVE)) == (bit_AVX | bit_OSXSAVE))\n-      && avx_os_support ())\n+      && avx_os_support ()\n+#ifdef AVXIFMA\n+      && __builtin_cpu_supports (\"avxifma\")\n+#endif\n+      )\n     {\n       do_test ();\n #ifdef DEBUG"}, {"sha": "a0cfc446e4d09580209b222c79cf32074c30be27", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-1.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxifma -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void extern\n+avxifma_test (void)\n+{\n+  x = _mm256_madd52hi_epu64 (x, y, z);\n+  x = _mm256_madd52lo_epu64 (x, y, z);\n+  x_ = _mm_madd52hi_epu64 (x_, y_, z_);\n+  x_ = _mm_madd52lo_epu64 (x_, y_, z_);\n+}"}, {"sha": "5f82ffec3e2fd6355f94147292d5841faa21ae2e", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-2.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+__attribute__((target(\"avxifma\")))\n+void  \n+avxifma_test (void)\n+{\n+  x = _mm256_madd52hi_epu64 (x, y, z);\n+  x = _mm256_madd52lo_epu64 (x, y, z);\n+  x_ = _mm_madd52hi_epu64 (x_, y_, z_);\n+  x_ = _mm_madd52lo_epu64 (x_, y_, z_);\n+}"}, {"sha": "536c1de96c5b1c81cc9e53ba51bea0f93d72229d", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-3.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+__attribute__ ((__gnu_inline__, __always_inline__, target(\"avxifma\")))\n+inline int\n+foo (void) /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((target(\"avx512ifma,avx512vl\")))\n+int\n+bar (void)\n+{\n+  return foo (); /* { dg-message \"called from here\" } */\n+}"}, {"sha": "62d264975106b15e43e33e18374a5763e82e6b49", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-4.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+__attribute__ ((__gnu_inline__, __always_inline__, target(\"avx512ifma,avx512vl\")))\n+inline int\n+foo (void) /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((target(\"avxifma\")))\n+int\n+bar (void)\n+{\n+  return foo (); /* { dg-message \"called from here\" } */\n+}"}, {"sha": "b6110e5f7f0d2be2bb4ce8c3a7a52648d24c52cf", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-5.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavxifma -mavx512ifma -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#include \"avx-ifma-1.c\""}, {"sha": "6388373123ca4665a581ac7412cb0ee225360e82", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-6.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxifma -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void extern\n+avxifma_test (void)\n+{\n+  x = _mm256_madd52hi_avx_epu64 (x, y, z);\n+  x = _mm256_madd52lo_avx_epu64 (x, y, z);\n+  x_ = _mm_madd52hi_avx_epu64 (x_, y_, z_);\n+  x_ = _mm_madd52lo_avx_epu64 (x_, y_, z_);\n+}"}, {"sha": "c9efee33091585908f563d0b708efe55388a396b", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-vpmaddhuq-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddhuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddhuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddhuq-2.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxifma\" } */\n+/* { dg-require-effective-target avxifma } */\n+#define AVXIFMA\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+void\n+CALC (long long *r, long long *s1, long long *s2, long long *s3, int size)\n+{\n+  int i;\n+  long long a,b;\n+\n+  for (i = 0; i < size; i++)\n+    {\n+      /* Simulate higher 52 bits out of 104 bit,\n+\t by shifting opernads with 0 in lower 26 bits.  */\n+      a = s2[i] >> 26;\n+      b = s3[i] >> 26;\n+      r[i] = a * b + s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  union256i_q src1_256, src2_256, dst_256;\n+  union128i_q src1_128, src2_128, dst_128;\n+  long long dst_ref_256[4], dst_ref_128[2];\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+  {\n+    src1_256.a[i] = 15 + 3467 * i;\n+    src2_256.a[i] = 9217 + i;\n+    src1_256.a[i] = src1_256.a[i] << 26;\n+    src2_256.a[i] = src2_256.a[i] << 26;\n+    src1_256.a[i] &= ((1LL << 52) - 1);\n+    src2_256.a[i] &= ((1LL << 52) - 1);\n+    dst_256.a[i] = -1;\n+  }\n+\n+ for (i = 0; i < 2; i++)\n+  {\n+    src1_128.a[i] = 16 + 3467 * i;\n+    src2_128.a[i] = 9127 + i;\n+    src1_128.a[i] = src1_128.a[i] << 26;\n+    src2_128.a[i] = src2_128.a[i] << 26;\n+    src1_128.a[i] &= ((1LL << 52) - 1);\n+    src2_128.a[i] &= ((1LL << 52) - 1);\n+    dst_128.a[i] = -1;\n+  }\n+\n+  CALC (dst_ref_256, dst_256.a, src1_256.a, src2_256.a, 4);\n+  dst_256.x = _mm256_madd52hi_avx_epu64 (dst_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_q (dst_256, dst_ref_256))\n+    abort ();\n+\n+  CALC (dst_ref_128, dst_128.a, src1_128.a, src2_128.a, 2);\n+  dst_128.x = _mm_madd52hi_avx_epu64 (dst_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_q (dst_128, dst_ref_128))\n+    abort ();\n+\n+}\n+"}, {"sha": "600978ea9ad51b58cbb5db7719ab4dda002b489d", "filename": "gcc/testsuite/gcc.target/i386/avx-ifma-vpmaddluq-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddluq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddluq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ifma-vpmaddluq-2.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxifma\" } */\n+/* { dg-require-effective-target avxifma } */\n+#define AVXIFMA\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+void\n+CALC (unsigned long long *r, unsigned long long *s1,\n+      unsigned long long *s2, unsigned long long *s3,\n+      int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    {\n+      r[i] = s2[i] * s3[i] + s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  union256i_q src1_256, src2_256, dst_256;\n+  union128i_q src1_128, src2_128, dst_128;\n+  unsigned long long dst_ref_256[4], dst_ref_128[2];\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+  {\n+    src1_256.a[i] = 3450 * i;\n+    src2_256.a[i] = 7863 * i;\n+    dst_256.a[i] = 117;\n+  }\n+\n+ for (i = 0; i < 2; i++)\n+  {\n+    src1_128.a[i] = 3540 * i;\n+    src2_128.a[i] = 7683 * i;\n+    dst_128.a[i] = 117;\n+  }\n+\n+  CALC (dst_ref_256, dst_256.a, src1_256.a, src2_256.a, 4);\n+  dst_256.x = _mm256_madd52lo_avx_epu64 (dst_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_q (dst_256, dst_ref_256))\n+    abort ();\n+\n+  CALC (dst_ref_128, dst_128.a, src1_128.a, src2_128.a, 2);\n+  dst_128.x = _mm_madd52lo_avx_epu64 (dst_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_q (dst_128, dst_ref_128))\n+    abort ();\n+\n+}\n+"}, {"sha": "78e2b86362aa16701dcaee610e249a60cd27b200", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddhuq-1a.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1a.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "previous_filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddhuq-1.c"}, {"sha": "67e94baa01b6d6e764e4a96ae0a4468a4f26789b", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddhuq-1b.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddhuq-1b.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512ifma -mavx512vl -mavxifma -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52huq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512ifma_test (void)\n+{\n+  _x3 = _mm_madd52hi_epu64 (_x3, _y3, _z3);\n+  _x3 = _mm_mask_madd52hi_epu64 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_madd52hi_epu64 (2, _x3, _y3, _z3);\n+  _x2 = _mm256_madd52hi_epu64 (_x2, _y2, _z2);\n+  _x2 = _mm256_mask_madd52hi_epu64 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_madd52hi_epu64 (3, _x2, _y2, _z2);\n+  _x1 = _mm512_madd52hi_epu64 (_x1, _y1, _z1);\n+  _x1 = _mm512_mask_madd52hi_epu64 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_madd52hi_epu64 (3, _x1, _y1, _z1);\n+}"}, {"sha": "1f7661356327dcae163c8db0e8f983c720b4670b", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddluq-1a.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1a.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "previous_filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddluq-1.c"}, {"sha": "4b8ea27f403bd3f722579c2b635287ee99876dd3", "filename": "gcc/testsuite/gcc.target/i386/avx512ifma-vpmaddluq-1b.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512ifma-vpmaddluq-1b.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512ifma -mavx512vl -mavxifma -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmadd52luq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512ifma_test (void)\n+{\n+  _x3 = _mm_madd52lo_epu64 (_x3, _y3, _z3);\n+  _x3 = _mm_mask_madd52lo_epu64 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_madd52lo_epu64 (2, _x3, _y3, _z3);\n+  _x2 = _mm256_madd52lo_epu64 (_x2, _y2, _z2);\n+  _x2 = _mm256_mask_madd52lo_epu64 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_madd52lo_epu64 (3, _x2, _y2, _z2);\n+  _x1 = _mm512_madd52lo_epu64 (_x1, _y1, _z1);\n+  _x1 = _mm512_mask_madd52lo_epu64 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_madd52lo_epu64 (3, _x1, _y1, _z1);\n+}"}, {"sha": "466555c0d064ca7cd0d8761d4c2ffed76ebffc7d", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -80,6 +80,7 @@ extern void test_keylocker (void)\t\t__attribute__((__target__(\"kl\")));\n extern void test_widekl (void)\t\t\t__attribute__((__target__(\"widekl\")));\n extern void test_avxvnni (void)\t\t\t__attribute__((__target__(\"avxvnni\")));\n extern void test_avx512fp16 (void)\t\t__attribute__((__target__(\"avx512fp16\")));\n+extern void test_avxifma (void)\t\t\t__attribute__((__target__(\"avxifma\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -161,6 +162,7 @@ extern void test_no_keylocker (void)\t\t__attribute__((__target__(\"no-kl\")));\n extern void test_no_widekl (void)\t\t__attribute__((__target__(\"no-widekl\")));\n extern void test_no_avxvnni (void)\t\t__attribute__((__target__(\"no-avxvnni\")));\n extern void test_no_avx512fp16 (void)\t\t__attribute__((__target__(\"no-avx512fp16\")));\n+extern void test_no_avxifma (void)\t\t__attribute__((__target__(\"no-avxifma\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "fde56261d8f4fb038f0f9199df69659920c08fe1", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "bb29555babe10ccf21c2abb939248a4afa3af24e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "f2701ddaaf97d7c0bff7f525a7fd398aff5b14fc", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "3d196975b1e0bc94158ba0270de4dc7c7e6e1c25", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "d3a233f90fcbaf9c1d5547961e63a9a18327a448", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -843,6 +843,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n \n #include <x86intrin.h>"}, {"sha": "220fbeedc1d0a8ab44bc3d32a67022a2feb57493", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d0041380378d978dfed6ea313e2ff9d2fce4c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=825d0041380378d978dfed6ea313e2ff9d2fce4c", "patch": "@@ -9522,6 +9522,18 @@ proc check_effective_target_avxvnni { } {\n     } \"-mavxvnni\" ]\n }\n \n+# Return 1 if avxifma instructions can be compiled.\n+proc check_effective_target_avxifma { } {\n+    return [check_no_compiler_messages avxifma object {\n+\ttypedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+\t__v4di\n+\t_mm256_maddlo_epu64  (__v4di __A, __v4di __B, __v4di __C)\n+        {\n+\t   return __builtin_ia32_vpmadd52luq256 (__A, __B, __C);\n+\t}\n+    } \"-O0 -mavxifma\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}