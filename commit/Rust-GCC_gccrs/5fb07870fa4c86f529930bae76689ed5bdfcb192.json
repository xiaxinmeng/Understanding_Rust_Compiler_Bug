{"sha": "5fb07870fa4c86f529930bae76689ed5bdfcb192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiMDc4NzBmYTRjODZmNTI5OTMwYmFlNzY2ODllZDViZGZjYjE5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T20:32:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T20:32:36Z"}, "message": "cgraph: Avoid creating multiple *.localalias aliases with the same name [PR93384]\n\nThe following testcase FAILs on powerpc64le-linux with assembler errors, as we\nemit a call to bar.localalias, then .set bar.localalias, bar twice and then\nanother call to bar.localalias.  The problem is that bar.localalias can be created\nat various stages and e.g. ipa-pure-const can slightly adjust the original decl,\nso that the existing bar.localalias isn't considered usable (different\nflags_from_decl_or_type).  In that case, we'd create another bar.localalias, which\nclashes with the existing name.\n\nFixed by retrying with another name if it is already present.  The various localalias\naliases shouldn't be that many, from different partitions they would be lto_priv\nsuffixed and in most cases they would already have the same type/flags/attributes.\n\n2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR lto/93384\n\t* symtab.c (symtab_node::noninterposable_alias): If localalias\n\talready exists, but is not usable, append numbers after it until\n\ta unique name is found.  Formatting fix.\n\n\t* gcc.dg/lto/pr93384_0.c: New test.\n\t* gcc.dg/lto/pr93384_1.c: New file.", "tree": {"sha": "83144eb52431ff0034942c9e7d869f5db3a5070d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83144eb52431ff0034942c9e7d869f5db3a5070d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fb07870fa4c86f529930bae76689ed5bdfcb192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb07870fa4c86f529930bae76689ed5bdfcb192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb07870fa4c86f529930bae76689ed5bdfcb192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb07870fa4c86f529930bae76689ed5bdfcb192/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b92750f83724177d2c6eae30c208e935a56a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b92750f83724177d2c6eae30c208e935a56a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b92750f83724177d2c6eae30c208e935a56a37"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "a45d0907e9d116b25970ab43be7932ea50deb28f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fb07870fa4c86f529930bae76689ed5bdfcb192", "patch": "@@ -1,5 +1,10 @@\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR lto/93384\n+\t* symtab.c (symtab_node::noninterposable_alias): If localalias\n+\talready exists, but is not usable, append numbers after it until\n+\ta unique name is found.  Formatting fix.\n+\n \tPR middle-end/93505\n \t* combine.c (simplify_comparison) <case ROTATE>: Punt on out of range\n \trotate counts."}, {"sha": "eae891ab211ed7ffa4b4e0f813a5d7d143661c67", "filename": "gcc/symtab.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=5fb07870fa4c86f529930bae76689ed5bdfcb192", "patch": "@@ -1864,7 +1864,7 @@ symtab_node::noninterposable_alias (void)\n   symtab_node *node = ultimate_alias_target ();\n   gcc_assert (!node->alias && !node->weakref);\n   node->call_for_symbol_and_aliases (symtab_node::noninterposable_alias,\n-\t\t\t\t   (void *)&new_node, true);\n+\t\t\t\t     (void *)&new_node, true);\n   if (new_node)\n     return new_node;\n \n@@ -1875,7 +1875,17 @@ symtab_node::noninterposable_alias (void)\n   /* Otherwise create a new one.  */\n   new_decl = copy_node (node->decl);\n   DECL_DLLIMPORT_P (new_decl) = 0;\n-  DECL_NAME (new_decl) = clone_function_name (node->decl, \"localalias\");\n+  tree name = clone_function_name (node->decl, \"localalias\");\n+  if (!flag_wpa)\n+    {\n+      unsigned long num = 0;\n+      /* In the rare case we already have a localalias, but the above\n+\t node->call_for_symbol_and_aliases call didn't find any suitable,\n+\t iterate until we find one not used yet.  */\n+      while (symtab_node::get_for_asmname (name))\n+\tname = clone_function_name (node->decl, \"localalias\", num++);\n+    }\n+  DECL_NAME (new_decl) = name;\n   if (TREE_CODE (new_decl) == FUNCTION_DECL)\n     DECL_STRUCT_FUNCTION (new_decl) = NULL;\n   DECL_INITIAL (new_decl) = NULL;"}, {"sha": "4503016a73e6555ed479e47b537ad5be9479aeab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fb07870fa4c86f529930bae76689ed5bdfcb192", "patch": "@@ -1,5 +1,9 @@\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR lto/93384\n+\t* gcc.dg/lto/pr93384_0.c: New test.\n+\t* gcc.dg/lto/pr93384_1.c: New file.\n+\n \tPR middle-end/93505\n \t* gcc.c-torture/compile/pr93505.c: New test.\n "}, {"sha": "fdcb9a23fc65ef0d1fdbeab86d4755a6d065f99e", "filename": "gcc/testsuite/gcc.dg/lto/pr93384_0.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_0.c?ref=5fb07870fa4c86f529930bae76689ed5bdfcb192", "patch": "@@ -0,0 +1,12 @@\n+/* PR lto/93384 */\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target shared } */\n+/* { dg-lto-options { { -O2 -flto -ffat-lto-objects -fpic -fno-semantic-interposition } } } */\n+/* { dg-extra-ld-options { -shared -flto-partition=none } } */\n+\n+void bar (void);\n+__attribute__((noipa)) void quux (int x) { if (x == 5) bar (); }\n+__attribute__((noipa, noreturn)) void foo (void) { while (1) ; }\n+__attribute__((noinline)) void bar (void) { asm (\"\"); quux (7); foo (); }\n+void baz (int x) { if (x) bar (); }"}, {"sha": "1b9d6af310ff47654407ebe44591827824881591", "filename": "gcc/testsuite/gcc.dg/lto/pr93384_1.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb07870fa4c86f529930bae76689ed5bdfcb192/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr93384_1.c?ref=5fb07870fa4c86f529930bae76689ed5bdfcb192", "patch": "@@ -0,0 +1,2 @@\n+extern void bar (void);\n+void qux (int x) { if (!x) bar (); }"}]}