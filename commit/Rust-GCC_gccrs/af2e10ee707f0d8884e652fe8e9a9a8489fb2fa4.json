{"sha": "af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYyZTEwZWU3MDdmMGQ4ODg0ZTY1MmZlOGU5YTlhODQ4OWZiMmZhNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-10-04T17:02:27Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-10-04T17:02:27Z"}, "message": "predicates.md (flash_operand): New predicate.\n\n\t* config/avr/predicates.md (flash_operand): New predicate.\n\t* config/avr/avr.md (reload_in<mode>): Use it in operand 1 instead\n\tof memory_operand.\n\nFrom-SVN: r192090", "tree": {"sha": "66b8df9d95f6ae92f2f3fe5e8afa6c2a48e7c26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b8df9d95f6ae92f2f3fe5e8afa6c2a48e7c26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/comments", "author": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7f5754860be307762eb44ad2a175d568646121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7f5754860be307762eb44ad2a175d568646121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7f5754860be307762eb44ad2a175d568646121"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "abdd91721316a929faa62b4e4dbc2bef45d2e141", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "patch": "@@ -1,3 +1,9 @@\n+2012-10-04  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/predicates.md (flash_operand): New predicate.\n+\t* config/avr/avr.md (reload_in<mode>): Use it in operand 1 instead\n+\tof memory_operand.\n+\n 2012-10-04  Tobias Burnus  <burnus@net-b.de>\n \n \t* gcc.c (record_temp_file, add_sysrooted_prefix, process_command,\n@@ -115,7 +121,7 @@\n \n 2012-10-03  Andrew W. Nosenko <andrew.w.nosenko@gmail.com>\n \n-\t*  config/i386/driver-i386.c (host_detect_local_cpu): Fix logic\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Fix logic\n \tin SSE and YMM state support check for -march=native.\n \n 2012-10-03  Nick Clifton  <nickc@redhat.com>\n@@ -199,7 +205,7 @@\n 2012-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/54741\n-\t*  config/i386/driver-i386.c (XCR_XFEATURE_ENABLED_MASK): New.\n+\t* config/i386/driver-i386.c (XCR_XFEATURE_ENABLED_MASK): New.\n \t(XSTATE_FP): Likewise.\n \t(XSTATE_SSE): Likewise.\n \t(XSTATE_YMM): Likewise."}, {"sha": "d3ffd1aba4112b94d5007962597c8bd199821c67", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "patch": "@@ -395,7 +395,7 @@\n ;; Secondary input reload from non-generic 16-bit address spaces\n (define_insn \"reload_in<mode>\"\n   [(set (match_operand:MOVMODE 0 \"register_operand\"   \"=r\")\n-        (match_operand:MOVMODE 1 \"memory_operand\"      \"m\"))\n+        (match_operand:MOVMODE 1 \"flash_operand\"       \"m\"))\n    (clobber (match_operand:QI 2 \"d_register_operand\"  \"=d\"))]\n   ;; Fixme: The insn condition must not test the address space.\n   ;;   Because the gen tools refuse to generate insns for address spaces"}, {"sha": "fc4ca03de6bc90f8b47630234f7433671f54b8ed", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=af2e10ee707f0d8884e652fe8e9a9a8489fb2fa4", "patch": "@@ -72,6 +72,13 @@\n        (not (match_test \"avr_load_libgcc_p (op)\"))\n        (not (match_test \"avr_mem_memx_p (op)\"))))\n \n+;; Return 1 if OP is a memory operand in one of the __flash* address spaces\n+(define_predicate \"flash_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"Pmode == mode\")\n+       (ior (match_test \"!MEM_P (op)\")\n+            (match_test \"avr_mem_flash_p (op)\"))))\n+\n ;; Return 1 if OP is the zero constant for MODE.\n (define_predicate \"const0_operand\"\n   (and (match_code \"const_int,const_fixed,const_double\")"}]}