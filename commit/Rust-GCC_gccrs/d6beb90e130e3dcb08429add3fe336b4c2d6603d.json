{"sha": "d6beb90e130e3dcb08429add3fe336b4c2d6603d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiZWI5MGUxMzBlM2RjYjA4NDI5YWRkM2ZlMzM2YjRjMmQ2NjAzZA==", "commit": {"author": {"name": "Xuepeng Guo", "email": "xuepeng.guo@intel.com", "date": "2008-08-28T19:36:58Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-28T19:36:58Z"}, "message": "vector-1b_main.c: New.\n\n2008-08-28  Xuepeng Guo  <xuepeng.guo@intel.com>\n\t    Joey Ye  <joey.ye@intel.com>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.dg/compat/vector-1b_main.c: New.\n\t* gcc.dg/compat/vector-1b_x.c: Likewise.\n\t* gcc.dg/compat/vector-1b_y.c: Likewise.\n\t* gcc.dg/compat/vector-2b_main.c: Likewise.\n\t* gcc.dg/compat/vector-2b_x.c: Likewise.\n\t* gcc.dg/compat/vector-2b_y.c: Likewise.\n\t* gcc.target/i386/aes-avx-check.h: Likewise.\n\t* gcc.target/i386/avx-1.c: Likewise.\n\t* gcc.target/i386/avx-2.c: Likewise.\n\t* gcc.target/i386/avx-3.c: Likewise.\n\t* gcc.target/i386/avx-check.h: Likewise.\n\t* gcc.target/i386/avx-set1-epi32-1.c: Likewise.\n\t* gcc.target/i386/avx-set1-pd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-set1-ps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v16hi-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v16hi-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v16hi-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v16hi-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v16hi-5.c: Likewise.\n\t* gcc.target/i386/avx-set-v32qi-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v32qi-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v32qi-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v32qi-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v32qi-5.c: Likewise.\n\t* gcc.target/i386/avx-set-v4df-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v4df-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v4df-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v4df-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v4df-5.c: Likewise.\n\t* gcc.target/i386/avx-set-v4di-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v4di-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v4di-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v4di-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v4di-5.c: Likewise.\n\t* gcc.target/i386/avx-set-v8sf-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v8sf-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v8sf-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v8sf-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v8sf-5.c: Likewise.\n\t* gcc.target/i386/avx-set-v8si-1.c: Likewise.\n\t* gcc.target/i386/avx-set-v8si-2.c: Likewise.\n\t* gcc.target/i386/avx-set-v8si-3.c: Likewise.\n\t* gcc.target/i386/avx-set-v8si-4.c: Likewise.\n\t* gcc.target/i386/avx-set-v8si-5.c: Likewise.\n\t* gcc.target/i386/avx-setzero-pd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-setzero-ps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-setzero-si256-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddps-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddss-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddsubpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddsubpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddsubps-1.c: Likewise.\n\t* gcc.target/i386/avx-vaddsubps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vaesdec-1.c: Likewise.\n\t* gcc.target/i386/avx-vaesdeclast-1.c: Likewise.\n\t* gcc.target/i386/avx-vaesenc-1.c: Likewise.\n\t* gcc.target/i386/avx-vaesenclast-1.c: Likewise.\n\t* gcc.target/i386/avx-vaesimc-1.c: Likewise.\n\t* gcc.target/i386/avx-vaeskeygenassist-1.c: Likewise.\n\t* gcc.target/i386/avx-vandnpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vandnpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vandnps-1.c: Likewise.\n\t* gcc.target/i386/avx-vandnps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vandpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vandpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vandps-1.c: Likewise.\n\t* gcc.target/i386/avx-vandps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vblendpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vblendpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vblendps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vblendvpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vblendvps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vbroadcastf128-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vbroadcastf128-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vbroadcastsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vbroadcastss-1.c: Likewise.\n\t* gcc.target/i386/avx-vbroadcastss-2.c: Likewise.\n\t* gcc.target/i386/avx-vcmppd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcmppd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcmpps-1.c: Likewise.\n\t* gcc.target/i386/avx-vcmpps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcmpsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcmpss-1.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-2.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-3.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-4.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-5.c: Likewise.\n\t* gcc.target/i386/avx-vcomisd-6.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-1.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-2.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-3.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-4.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-5.c: Likewise.\n\t* gcc.target/i386/avx-vcomiss-6.c: Likewise.\n\t* gcc.target/i386/avx-vcvtdq2pd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtdq2pd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtdq2ps-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtpd2dq-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtpd2dq-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtpd2ps-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtpd2ps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtps2dq-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtps2dq-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtps2pd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtps2pd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsd2si-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsd2si-2.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsd2ss-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsi2sd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsi2sd-2.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsi2ss-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtsi2ss-2.c: Likewise.\n\t* gcc.target/i386/avx-vcvtss2sd-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtss2si-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvtss2si-2.c: Likewise.\n\t* gcc.target/i386/avx-vcvttpd2dq-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttpd2dq-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttps2dq-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttps2dq-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttsd2si-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttsd2si-2.c: Likewise.\n\t* gcc.target/i386/avx-vcvttss2si-1.c: Likewise.\n\t* gcc.target/i386/avx-vcvttss2si-2.c: Likewise.\n\t* gcc.target/i386/avx-vdivpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vdivpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vdivps-1.c: Likewise.\n\t* gcc.target/i386/avx-vdivps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vdivsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vdivss-1.c: Likewise.\n\t* gcc.target/i386/avx-vdppd-1.c: Likewise.\n\t* gcc.target/i386/avx-vdppd-2.c: Likewise.\n\t* gcc.target/i386/avx-vdpps-1.c: Likewise.\n\t* gcc.target/i386/avx-vdpps-2.c: Likewise.\n\t* gcc.target/i386/avx-vextractf128-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vextractf128-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vextractps-1.c: Likewise.\n\t* gcc.target/i386/avx-vhaddpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vhaddpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vhaddps-1.c: Likewise.\n\t* gcc.target/i386/avx-vhaddps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vhsubpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vhsubpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vhsubps-1.c: Likewise.\n\t* gcc.target/i386/avx-vhsubps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vinsertf128-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vinsertf128-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vinsertf128-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vinsertps-1.c: Likewise.\n\t* gcc.target/i386/avx-vinsertps-2.c: Likewise.\n\t* gcc.target/i386/avx-vlddqu-1.c: Likewise.\n\t* gcc.target/i386/avx-vlddqu-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovpd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmaxpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaxpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaxps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaxps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaxsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaxss-1.c: Likewise.\n\t* gcc.target/i386/avx-vminpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vminpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vminps-1.c: Likewise.\n\t* gcc.target/i386/avx-vminps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vminsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vminss-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovapd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovapd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovapd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovapd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovaps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovaps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovaps-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovaps-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovddup-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovddup-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqa-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqa-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqa-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqa-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqu-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqu-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqu-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovdqu-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovhlps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovhpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovhpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovhps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovhps-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovlhps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovlpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovlpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovmskpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovmskpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovmskps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovmskps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovntdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovntdqa-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovntpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovntps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovq-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovq-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovq-3.c: Likewise.\n\t* gcc.target/i386/avx-vmovsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovsd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovshdup-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovshdup-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovsldup-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovsldup-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovss-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovss-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovss-3.c: Likewise.\n\t* gcc.target/i386/avx-vmovupd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovupd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovupd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovupd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovups-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovups-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmovups-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vmovups-2.c: Likewise.\n\t* gcc.target/i386/avx-vmpsadbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vmulss-1.c: Likewise.\n\t* gcc.target/i386/avx-vorpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vorpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vorps-1.c: Likewise.\n\t* gcc.target/i386/avx-vorps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vpabsb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpabsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpabsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpackssdw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpacksswb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpackusdw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpackuswb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddsb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddusb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddusw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpaddw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpalignr-1.c: Likewise.\n\t* gcc.target/i386/avx-vpand-1.c: Likewise.\n\t* gcc.target/i386/avx-vpandn-1.c: Likewise.\n\t* gcc.target/i386/avx-vpavgb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpavgw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpblendvb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpblendw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpeqb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpeqd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpeqq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpeqw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpestri-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpestri-2.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpestrm-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpestrm-2.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpgtb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpgtd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpgtq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpgtw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpistri-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpistri-2.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpistrm-1.c: Likewise.\n\t* gcc.target/i386/avx-vpcmpistrm-2.c: Likewise.\n\t* gcc.target/i386/avx-vperm2f128-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vperm2f128-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vperm2f128-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vpermil2pd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermil2pd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermil2ps-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermil2ps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermilpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermilpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermilpd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vpermilpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vpermilps-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermilps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vpermilps-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vpermilps-2.c: Likewise.\n\t* gcc.target/i386/avx-vpextrb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpextrd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpextrq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpextrw-1.c: Likewise.\n\t* gcc.target/i386/avx-vphaddd-1.c: Likewise.\n\t* gcc.target/i386/avx-vphaddsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vphaddw-1.c: Likewise.\n\t* gcc.target/i386/avx-vphminposuw-1.c: Likewise.\n\t* gcc.target/i386/avx-vphsubd-1.c: Likewise.\n\t* gcc.target/i386/avx-vphsubsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vphsubw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpinsrb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpinsrd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpinsrq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaddubsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxsb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxub-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxud-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmaxuw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminsb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminub-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminud-1.c: Likewise.\n\t* gcc.target/i386/avx-vpminuw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovmskb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxbd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxbq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxwd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovsxwq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxbd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxbq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxwd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmovzxwq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmuldq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmulhrsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmulhuw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmulhw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmulld-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmullw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpmuludq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpor-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsadbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpshufb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpshufd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpshufhw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpshuflw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsignb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsignd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsignw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpslld-1.c: Likewise.\n\t* gcc.target/i386/avx-vpslld-2.c: Likewise.\n\t* gcc.target/i386/avx-vpslldq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsllq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsllq-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsllw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsllw-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsrad-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsrad-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsraw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsraw-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsrld-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsrld-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsrldq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsrlq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsrlq-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsrlw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsrlw-2.c: Likewise.\n\t* gcc.target/i386/avx-vpsubb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsubd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsubq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsubsb-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsubsw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpsubw-1.c: Likewise.\n\t* gcc.target/i386/avx-vptest-1.c: Likewise.\n\t* gcc.target/i386/avx-vptest-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vptest-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vptest-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vptest-2.c: Likewise.\n\t* gcc.target/i386/avx-vptest-3.c: Likewise.\n\t* gcc.target/i386/avx-vpunpckhbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpckhdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpckhqdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpckhwd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpcklbw-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpckldq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpcklqdq-1.c: Likewise.\n\t* gcc.target/i386/avx-vpunpcklwd-1.c: Likewise.\n\t* gcc.target/i386/avx-vpxor-1.c: Likewise.\n\t* gcc.target/i386/avx-vrcpps-1.c: Likewise.\n\t* gcc.target/i386/avx-vrcpps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vroundpd-3.c: Likewise.\n\t* gcc.target/i386/avx-vroundps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vrsqrtps-1.c: Likewise.\n\t* gcc.target/i386/avx-vrsqrtps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vshufpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vshufpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vshufps-1.c: Likewise.\n\t* gcc.target/i386/avx-vshufps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vsqrtpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vsqrtpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vsqrtps-1.c: Likewise.\n\t* gcc.target/i386/avx-vsqrtps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubps-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubsd-1.c: Likewise.\n\t* gcc.target/i386/avx-vsubss-1.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vtestpd-3.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-1.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-256-2.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-256-3.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-2.c: Likewise.\n\t* gcc.target/i386/avx-vtestps-3.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-1.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-2.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-3.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-4.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-5.c: Likewise.\n\t* gcc.target/i386/avx-vucomisd-6.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-1.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-2.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-3.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-4.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-5.c: Likewise.\n\t* gcc.target/i386/avx-vucomiss-6.c: Likewise.\n\t* gcc.target/i386/avx-vunpckhpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpckhpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpckhps-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpckhps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpcklpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpcklpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpcklps-1.c: Likewise.\n\t* gcc.target/i386/avx-vunpcklps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vxorpd-1.c: Likewise.\n\t* gcc.target/i386/avx-vxorpd-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vxorps-1.c: Likewise.\n\t* gcc.target/i386/avx-vxorps-256-1.c: Likewise.\n\t* gcc.target/i386/avx-vzeroall-1.c: Likewise.\n\t* gcc.target/i386/avx-vzeroall-2.c: Likewise.\n\t* gcc.target/i386/avx-vzeroupper-1.c: Likewise.\n\t* gcc.target/i386/avx-vzeroupper-2.c: Likewise.\n\t* gcc.target/i386/m256-1.c: Likewise.\n\t* gcc.target/i386/m256-2.c: Likewise.\n\t* gcc.target/i386/m256-check.h: Likewise.\n\t* gcc.target/i386/sse2-addpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-addsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-andnpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-andpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-1.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-2.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-3.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-4.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-5.c: Likewise.\n\t* gcc.target/i386/sse2-comisd-6.c: Likewise.\n\t* gcc.target/i386/sse2-cvtdq2pd-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtdq2ps-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtpd2dq-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtpd2ps-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtps2dq-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtps2pd-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtsd2si-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtsd2si-2.c: Likewise.\n\t* gcc.target/i386/sse2-cvtsd2ss-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtsi2sd-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvtsi2sd-2.c: Likewise.\n\t* gcc.target/i386/sse2-cvtss2sd-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvttpd2dq-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvttps2dq-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvttsd2si-1.c: Likewise.\n\t* gcc.target/i386/sse2-cvttsd2si-2.c: Likewise.\n\t* gcc.target/i386/sse2-divpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-divsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-maxpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-maxsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-minpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-minsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movapd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movapd-2.c: Likewise.\n\t* gcc.target/i386/sse2-movd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movd-2.c: Likewise.\n\t* gcc.target/i386/sse2-movdqa-1.c: Likewise.\n\t* gcc.target/i386/sse2-movdqa-2.c: Likewise.\n\t* gcc.target/i386/sse2-movdqu-1.c: Likewise.\n\t* gcc.target/i386/sse2-movdqu-2.c: Likewise.\n\t* gcc.target/i386/sse2-movhpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movhpd-2.c: Likewise.\n\t* gcc.target/i386/sse2-movlpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movlpd-2.c: Likewise.\n\t* gcc.target/i386/sse2-movmskpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movntdq-1.c: Likewise.\n\t* gcc.target/i386/sse2-movntpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movq-1.c: Likewise.\n\t* gcc.target/i386/sse2-movq-2.c: Likewise.\n\t* gcc.target/i386/sse2-movq-3.c: Likewise.\n\t* gcc.target/i386/sse2-movsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movsd-2.c: Likewise.\n\t* gcc.target/i386/sse2-movupd-1.c: Likewise.\n\t* gcc.target/i386/sse2-movupd-2.c: Likewise.\n\t* gcc.target/i386/sse2-mulpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-mulsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-orpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-packssdw-1.c: Likewise.\n\t* gcc.target/i386/sse2-packsswb-1.c: Likewise.\n\t* gcc.target/i386/sse2-packuswb-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddb-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddd-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddq-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddsb-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddsw-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddusb-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddusw-1.c: Likewise.\n\t* gcc.target/i386/sse2-paddw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pand-1.c: Likewise.\n\t* gcc.target/i386/sse2-pandn-1.c: Likewise.\n\t* gcc.target/i386/sse2-pavgb-1.c: Likewise.\n\t* gcc.target/i386/sse2-pavgw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpeqb-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpeqd-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpeqw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpgtb-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpgtd-1.c: Likewise.\n\t* gcc.target/i386/sse2-pcmpgtw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmaddwd-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmaxsw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmaxub-1.c: Likewise.\n\t* gcc.target/i386/sse2-pminsw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pminub-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmovmskb-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmulhuw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmulhw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmullw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pmuludq-1.c: Likewise.\n\t* gcc.target/i386/sse2-por-1.c: Likewise.\n\t* gcc.target/i386/sse2-psadbw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pshufd-1.c: Likewise.\n\t* gcc.target/i386/sse2-pshufhw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pshuflw-1.c: Likewise.\n\t* gcc.target/i386/sse2-pslld-1.c: Likewise.\n\t* gcc.target/i386/sse2-pslld-2.c: Likewise.\n\t* gcc.target/i386/sse2-pslldq-1.c: Likewise.\n\t* gcc.target/i386/sse2-psllq-1.c: Likewise.\n\t* gcc.target/i386/sse2-psllq-2.c: Likewise.\n\t* gcc.target/i386/sse2-psllw-1.c: Likewise.\n\t* gcc.target/i386/sse2-psllw-2.c: Likewise.\n\t* gcc.target/i386/sse2-psrad-1.c: Likewise.\n\t* gcc.target/i386/sse2-psrad-2.c: Likewise.\n\t* gcc.target/i386/sse2-psraw-1.c: Likewise.\n\t* gcc.target/i386/sse2-psraw-2.c: Likewise.\n\t* gcc.target/i386/sse2-psrld-1.c: Likewise.\n\t* gcc.target/i386/sse2-psrld-2.c: Likewise.\n\t* gcc.target/i386/sse2-psrldq-1.c: Likewise.\n\t* gcc.target/i386/sse2-psrlq-1.c: Likewise.\n\t* gcc.target/i386/sse2-psrlq-2.c: Likewise.\n\t* gcc.target/i386/sse2-psrlw-1.c: Likewise.\n\t* gcc.target/i386/sse2-psrlw-2.c: Likewise.\n\t* gcc.target/i386/sse2-psubb-1.c: Likewise.\n\t* gcc.target/i386/sse2-psubd-1.c: Likewise.\n\t* gcc.target/i386/sse2-psubq-1.c: Likewise.\n\t* gcc.target/i386/sse2-psubsb-1.c: Likewise.\n\t* gcc.target/i386/sse2-psubsw-1.c: Likewise.\n\t* gcc.target/i386/sse2-psubw-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpckhbw-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpckhdq-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpckhqdq-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpckhwd-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpcklbw-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpckldq-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpcklqdq-1.c: Likewise.\n\t* gcc.target/i386/sse2-punpcklwd-1.c: Likewise.\n\t* gcc.target/i386/sse2-pxor-1.c: Likewise.\n\t* gcc.target/i386/sse2-shufpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-shufps-1.c: Likewise.\n\t* gcc.target/i386/sse2-sqrtpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-subpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-subsd-1.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-1.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-2.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-3.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-4.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-5.c: Likewise.\n\t* gcc.target/i386/sse2-ucomisd-6.c: Likewise.\n\t* gcc.target/i386/sse2-unpckhpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-unpcklpd-1.c: Likewise.\n\t* gcc.target/i386/sse2-xorpd-1.c: Likewise.\n\t* gcc.target/i386/sse-addps-1.c: Likewise.\n\t* gcc.target/i386/sse-addss-1.c: Likewise.\n\t* gcc.target/i386/sse-andnps-1.c: Likewise.\n\t* gcc.target/i386/sse-andps-1.c: Likewise.\n\t* gcc.target/i386/sse-comiss-1.c: Likewise.\n\t* gcc.target/i386/sse-comiss-2.c: Likewise.\n\t* gcc.target/i386/sse-comiss-3.c: Likewise.\n\t* gcc.target/i386/sse-comiss-4.c: Likewise.\n\t* gcc.target/i386/sse-comiss-5.c: Likewise.\n\t* gcc.target/i386/sse-comiss-6.c: Likewise.\n\t* gcc.target/i386/sse-cvtsi2ss-1.c: Likewise.\n\t* gcc.target/i386/sse-cvtsi2ss-2.c: Likewise.\n\t* gcc.target/i386/sse-cvtss2si-1.c: Likewise.\n\t* gcc.target/i386/sse-cvtss2si-2.c: Likewise.\n\t* gcc.target/i386/sse-cvttss2si-1.c: Likewise.\n\t* gcc.target/i386/sse-cvttss2si-2.c: Likewise.\n\t* gcc.target/i386/sse-divps-1.c: Likewise.\n\t* gcc.target/i386/sse-divss-1.c: Likewise.\n\t* gcc.target/i386/sse-maxps-1.c: Likewise.\n\t* gcc.target/i386/sse-maxss-1.c: Likewise.\n\t* gcc.target/i386/sse-minps-1.c: Likewise.\n\t* gcc.target/i386/sse-minss-1.c: Likewise.\n\t* gcc.target/i386/sse-movaps-1.c: Likewise.\n\t* gcc.target/i386/sse-movaps-2.c: Likewise.\n\t* gcc.target/i386/sse-movhlps-1.c: Likewise.\n\t* gcc.target/i386/sse-movhps-1.c: Likewise.\n\t* gcc.target/i386/sse-movhps-2.c: Likewise.\n\t* gcc.target/i386/sse-movlhps-1.c: Likewise.\n\t* gcc.target/i386/sse-movmskps-1.c: Likewise.\n\t* gcc.target/i386/sse-movntps-1.c: Likewise.\n\t* gcc.target/i386/sse-movss-1.c: Likewise.\n\t* gcc.target/i386/sse-movss-2.c: Likewise.\n\t* gcc.target/i386/sse-movss-3.c: Likewise.\n\t* gcc.target/i386/sse-movups-1.c: Likewise.\n\t* gcc.target/i386/sse-movups-2.c: Likewise.\n\t* gcc.target/i386/sse-mulps-1.c: Likewise.\n\t* gcc.target/i386/sse-mulss-1.c: Likewise.\n\t* gcc.target/i386/sse-orps-1.c: Likewise.\n\t* gcc.target/i386/sse-rcpps-1.c: Likewise.\n\t* gcc.target/i386/sse-rsqrtps-1.c: Likewise.\n\t* gcc.target/i386/sse-sqrtps-1.c: Likewise.\n\t* gcc.target/i386/sse-subps-1.c: Likewise.\n\t* gcc.target/i386/sse-subss-1.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-1.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-2.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-3.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-4.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-5.c: Likewise.\n\t* gcc.target/i386/sse-ucomiss-6.c: Likewise.\n\t* gcc.target/i386/sse-unpckhps-1.c: Likewise.\n\t* gcc.target/i386/sse-unpcklps-1.c: Likewise.\n\t* gcc.target/i386/sse-xorps-1.c: Likewise.\n\t* gcc.target/i386/vararg-10.c: Likewise.\n\t* gcc.target/i386/vararg-3.c: Likewise.\n\t* gcc.target/i386/vararg-4.c: Likewise.\n\t* gcc.target/i386/vararg-5.c: Likewise.\n\t* gcc.target/i386/vararg-6.c: Likewise.\n\t* gcc.target/i386/vararg-7.c: Likewise.\n\t* gcc.target/i386/vararg-8.c: Likewise.\n\t* gcc.target/i386/vararg-9.c: Likewise.\n\t* g++.dg/other/i386-5.C: Likewise.\n\t* g++.dg/other/i386-6.C: Likewise.\n\n\t* gcc.target/i386/aesdec.c (CHECK_H): New.\n\t(TEST): New.\n\tInclude CHECK_H instead of \"XXX-check.h\" and run TEST\n\tinstead of XXX_test.\n\t* gcc.target/i386/aesdeclast.c: Likewise.\n\t* gcc.target/i386/aesenc.c: Likewise.\n\t* gcc.target/i386/aesenclast.c: Likewise.\n\t* gcc.target/i386/aesimc.c: Likewise.\n\t* gcc.target/i386/aeskeygenassist.c: Likewise.\n\t* gcc.target/i386/sse3-addsubpd.c: Likewise.\n\t* gcc.target/i386/sse3-addsubps.c: Likewise.\n\t* gcc.target/i386/sse3-haddpd.c: Likewise.\n\t* gcc.target/i386/sse3-haddps.c: Likewise.\n\t* gcc.target/i386/sse3-hsubpd.c: Likewise.\n\t* gcc.target/i386/sse3-hsubps.c: Likewise.\n\t* gcc.target/i386/sse3-lddqu.c: Likewise.\n\t* gcc.target/i386/sse3-movddup.c: Likewise.\n\t* gcc.target/i386/sse3-movshdup.c: Likewise.\n\t* gcc.target/i386/sse3-movsldup.c: Likewise.\n\t* gcc.target/i386/sse4_1-blendpd.c: Likewise.\n\t* gcc.target/i386/sse4_1-blendps.c: Likewise.\n\t* gcc.target/i386/sse4_1-dppd-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-dppd-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-dpps-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-dpps-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-extractps.c: Likewise.\n\t* gcc.target/i386/sse4_1-insertps-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-insertps-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-movntdqa.c: Likewise.\n\t* gcc.target/i386/sse4_1-mpsadbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-packusdw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pblendvb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pblendw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pcmpeqq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrw.c: Likewise.\n\t* gcc.target/i386/sse4_1-phminposuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxsb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxsd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxud.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminsb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminsd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminud.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxdq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxwd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxwq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxdq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxwd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxwq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmuldq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmulld.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-3.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpestri-1.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpestri-2.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpestrm-1.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpestrm-2.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpgtq.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpistri-1.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpistri-2.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpistrm-1.c: Likewise.\n\t* gcc.target/i386/sse4_2-pcmpistrm-2.c: Likewise.\n\t* gcc.target/i386/ssse3-pabsb.c: Likewise.  Don't run MMX\n\ttests for AVX.\n\t* gcc.target/i386/ssse3-pabsd.c: Likewise.\n\t* gcc.target/i386/ssse3-pabsw.c: Likewise.\n\t* gcc.target/i386/ssse3-palignr.c: Likewise.\n\t* gcc.target/i386/ssse3-phaddd.c: Likewise.\n\t* gcc.target/i386/ssse3-phaddsw.c: Likewise.\n\t* gcc.target/i386/ssse3-phaddw.c: Likewise.\n\t* gcc.target/i386/ssse3-phsubd.c: Likewise.\n\t* gcc.target/i386/ssse3-phsubsw.c: Likewise.\n\t* gcc.target/i386/ssse3-phsubw.c: Likewise.\n\t* gcc.target/i386/ssse3-pmaddubsw.c: Likewise.\n\t* gcc.target/i386/ssse3-pmulhrsw.c: Likewise.\n\t* gcc.target/i386/ssse3-pshufb.c: Likewise.\n\t* gcc.target/i386/ssse3-psignb.c: Likewise.\n\t* gcc.target/i386/ssse3-psignd.c: Likewise.\n\t* gcc.target/i386/ssse3-psignw.c: Likewise.\n\n\t* gcc.target/i386/i386.exp (check_effective_target_vaes): New.\n\n\t* gcc.target/i386/m128-check.h: Include <xmmintrin.h>.  Include\n\t<emmintrin.h> for SSE2.\n\t(union128i_b): Defined only for SSE2.\n\t(union128i_w): Likewise.\n\t(union128i_d): Likewise.\n\t(union128i_q): Likewise.\n\t(union128d): Likewise.\n\t(check_union128i_b): Likewise.\n\t(check_union128i_w): Likewise.\n\t(check_union128i_d): Likewise.\n\t(check_union128i_q): Likewise.\n\t(check_union128d): Likewise.\n\t(union128i_ub): New.\n\t(union128i_uw): Likewise.\n\t(check_union128i_ub): Likewise.\n\t(check_union128i_uw): Likewise.\n\t(ESP_FLOAT): Likewise.\n\t(ESP_DOUBLE): Likewise.\n\t(CHECK_ARRAY): Likewise.\n\t(checkVd): Likewise.\n\t(checkVf): Likewise.\n\t(ieee754_float): Likewise.\n\t(ieee754_double): Likewise.\n\n\t* gcc.target/i386/sse-check.h: Include \"m128-check.h\".\n\n\t* gcc.target/x86_64/abi/abi-x86_64.exp: Replace asm-support.s\n\twith asm-support.S.\n\n\t* gcc.target/x86_64/abi/asm-support.s: Renamed to ...\n\t* gcc.target/x86_64/abi/asm-support.S: This.  Add\n\t\".sse_check none\" if __AVX__ is defined.\n\n\t* lib/target-supports.exp (check_effective_target_avx): New.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Joey Ye <joey.ye@intel.com>\n\nFrom-SVN: r139730", "tree": {"sha": "3aa203d422eeb82b09cfab440bef1fa1fb80d391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa203d422eeb82b09cfab440bef1fa1fb80d391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6beb90e130e3dcb08429add3fe336b4c2d6603d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6beb90e130e3dcb08429add3fe336b4c2d6603d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6beb90e130e3dcb08429add3fe336b4c2d6603d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6beb90e130e3dcb08429add3fe336b4c2d6603d/comments", "author": null, "committer": null, "parents": [{"sha": "1e053dfe577da6b8b252d33b0df8eee62a8ad1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e053dfe577da6b8b252d33b0df8eee62a8ad1e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e053dfe577da6b8b252d33b0df8eee62a8ad1e6"}], "stats": {"total": 18927, "additions": 18700, "deletions": 227}, "files": [{"sha": "f235712820865a4c9627d767bf07a3d289111e9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 796, "deletions": 0, "changes": 796, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -1,3 +1,799 @@\n+2008-08-28  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\t    Joey Ye  <joey.ye@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/compat/vector-1b_main.c: New.\n+\t* gcc.dg/compat/vector-1b_x.c: Likewise.\n+\t* gcc.dg/compat/vector-1b_y.c: Likewise.\n+\t* gcc.dg/compat/vector-2b_main.c: Likewise.\n+\t* gcc.dg/compat/vector-2b_x.c: Likewise.\n+\t* gcc.dg/compat/vector-2b_y.c: Likewise.\n+\t* gcc.target/i386/aes-avx-check.h: Likewise.\n+\t* gcc.target/i386/avx-1.c: Likewise.\n+\t* gcc.target/i386/avx-2.c: Likewise.\n+\t* gcc.target/i386/avx-3.c: Likewise.\n+\t* gcc.target/i386/avx-check.h: Likewise.\n+\t* gcc.target/i386/avx-set1-epi32-1.c: Likewise.\n+\t* gcc.target/i386/avx-set1-pd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-set1-ps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v16hi-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v16hi-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v16hi-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v16hi-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v16hi-5.c: Likewise.\n+\t* gcc.target/i386/avx-set-v32qi-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v32qi-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v32qi-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v32qi-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v32qi-5.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4df-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4df-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4df-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4df-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4df-5.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4di-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4di-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4di-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4di-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v4di-5.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8sf-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8sf-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8sf-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8sf-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8sf-5.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8si-1.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8si-2.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8si-3.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8si-4.c: Likewise.\n+\t* gcc.target/i386/avx-set-v8si-5.c: Likewise.\n+\t* gcc.target/i386/avx-setzero-pd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-setzero-ps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-setzero-si256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddsubpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddsubpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddsubps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaddsubps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaesdec-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaesdeclast-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaesenc-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaesenclast-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaesimc-1.c: Likewise.\n+\t* gcc.target/i386/avx-vaeskeygenassist-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandnpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandnpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandnps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandnps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vandps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vblendpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vblendpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vblendps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vblendvpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vblendvps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vbroadcastf128-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vbroadcastf128-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vbroadcastsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vbroadcastss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vbroadcastss-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcmppd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcmppd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcmpps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcmpps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcmpsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcmpss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-3.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-4.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-5.c: Likewise.\n+\t* gcc.target/i386/avx-vcomisd-6.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-3.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-4.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-5.c: Likewise.\n+\t* gcc.target/i386/avx-vcomiss-6.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtdq2pd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtdq2pd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtdq2ps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtpd2dq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtpd2dq-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtpd2ps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtpd2ps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtps2dq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtps2dq-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtps2pd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtps2pd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsd2si-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsd2si-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsd2ss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsi2sd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsi2sd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsi2ss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtsi2ss-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtss2sd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtss2si-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvtss2si-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttpd2dq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttpd2dq-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttps2dq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttps2dq-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttsd2si-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttsd2si-2.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttss2si-1.c: Likewise.\n+\t* gcc.target/i386/avx-vcvttss2si-2.c: Likewise.\n+\t* gcc.target/i386/avx-vdivpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdivpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdivps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdivps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdivsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdivss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdppd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdppd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vdpps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vdpps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vextractf128-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vextractf128-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vextractps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhaddpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhaddpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhaddps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhaddps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhsubpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhsubpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhsubps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vhsubps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vinsertf128-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vinsertf128-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vinsertf128-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vinsertps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vinsertps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vlddqu-1.c: Likewise.\n+\t* gcc.target/i386/avx-vlddqu-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovpd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaxss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vminss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovapd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovapd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovapd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovapd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovaps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovaps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovaps-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovaps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovddup-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovddup-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqa-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqa-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqa-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqa-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqu-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqu-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqu-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovdqu-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovhlps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovhpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovhpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovhps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovhps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovlhps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovlpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovlpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovmskpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovmskpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovmskps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovmskps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovntdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovntdqa-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovntpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovntps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovq-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovq-3.c: Likewise.\n+\t* gcc.target/i386/avx-vmovsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovsd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovshdup-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovshdup-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovsldup-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovsldup-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovss-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovss-3.c: Likewise.\n+\t* gcc.target/i386/avx-vmovupd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovupd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovupd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovupd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovups-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovups-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmovups-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmovups-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmpsadbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmulss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vorpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vorpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vorps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vorps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpabsb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpabsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpabsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpackssdw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpacksswb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpackusdw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpackuswb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddsb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddusb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddusw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpaddw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpalignr-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpand-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpandn-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpavgb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpavgw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpblendvb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpblendw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpeqb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpeqd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpeqq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpeqw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpestri-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpestri-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpestrm-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpestrm-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpgtb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpgtd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpgtq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpgtw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpistri-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpistri-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpistrm-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpcmpistrm-2.c: Likewise.\n+\t* gcc.target/i386/avx-vperm2f128-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vperm2f128-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vperm2f128-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vpermil2pd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermil2pd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermil2ps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermil2ps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilpd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilps-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpermilps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpextrb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpextrd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpextrq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpextrw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphaddd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphaddsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphaddw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphminposuw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphsubd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphsubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vphsubw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpinsrb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpinsrd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpinsrq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaddubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxsb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxub-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxud-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmaxuw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminsb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminub-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminud-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpminuw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovmskb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxbd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxbq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxwd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovsxwq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxbd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxbq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxwd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmovzxwq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmuldq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmulhrsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmulhuw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmulhw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmulld-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmullw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpmuludq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpor-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsadbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpshufb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpshufd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpshufhw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpshuflw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsignb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsignd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsignw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpslld-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpslld-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpslldq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsllq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsllq-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsllw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsllw-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrad-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrad-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsraw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsraw-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrld-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrld-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrldq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrlq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrlq-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrlw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsrlw-2.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubsb-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubsw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpsubw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-1.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-2.c: Likewise.\n+\t* gcc.target/i386/avx-vptest-3.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpckhbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpckhdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpckhqdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpckhwd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpcklbw-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpckldq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpcklqdq-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpunpcklwd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vpxor-1.c: Likewise.\n+\t* gcc.target/i386/avx-vrcpps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vrcpps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vroundpd-3.c: Likewise.\n+\t* gcc.target/i386/avx-vroundps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vrsqrtps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vrsqrtps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vshufpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vshufpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vshufps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vshufps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsqrtpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsqrtpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsqrtps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsqrtps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubsd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vsubss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vtestpd-3.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-256-2.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-256-3.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-2.c: Likewise.\n+\t* gcc.target/i386/avx-vtestps-3.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-3.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-4.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-5.c: Likewise.\n+\t* gcc.target/i386/avx-vucomisd-6.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-1.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-2.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-3.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-4.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-5.c: Likewise.\n+\t* gcc.target/i386/avx-vucomiss-6.c: Likewise.\n+\t* gcc.target/i386/avx-vunpckhpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpckhpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpckhps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpckhps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpcklpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpcklpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpcklps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vunpcklps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vxorpd-1.c: Likewise.\n+\t* gcc.target/i386/avx-vxorpd-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vxorps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vxorps-256-1.c: Likewise.\n+\t* gcc.target/i386/avx-vzeroall-1.c: Likewise.\n+\t* gcc.target/i386/avx-vzeroall-2.c: Likewise.\n+\t* gcc.target/i386/avx-vzeroupper-1.c: Likewise.\n+\t* gcc.target/i386/avx-vzeroupper-2.c: Likewise.\n+\t* gcc.target/i386/m256-1.c: Likewise.\n+\t* gcc.target/i386/m256-2.c: Likewise.\n+\t* gcc.target/i386/m256-check.h: Likewise.\n+\t* gcc.target/i386/sse2-addpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-addsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-andnpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-andpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-3.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-4.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-5.c: Likewise.\n+\t* gcc.target/i386/sse2-comisd-6.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtdq2pd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtdq2ps-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtpd2dq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtpd2ps-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtps2dq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtps2pd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtsd2si-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtsd2si-2.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtsd2ss-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtsi2sd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtsi2sd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-cvtss2sd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvttpd2dq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvttps2dq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvttsd2si-1.c: Likewise.\n+\t* gcc.target/i386/sse2-cvttsd2si-2.c: Likewise.\n+\t* gcc.target/i386/sse2-divpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-divsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-maxpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-maxsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-minpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-minsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movapd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movapd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movdqa-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movdqa-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movdqu-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movdqu-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movhpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movhpd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movlpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movlpd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movmskpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movntdq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movntpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movq-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movq-3.c: Likewise.\n+\t* gcc.target/i386/sse2-movsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movsd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-movupd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-movupd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-mulpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-mulsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-orpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-packssdw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-packsswb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-packuswb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddsb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddsw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddusb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddusw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-paddw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pand-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pandn-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pavgb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pavgw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpeqb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpeqd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpeqw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpgtb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpgtd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pcmpgtw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmaddwd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmaxsw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmaxub-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pminsw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pminub-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmovmskb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmulhuw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmulhw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmullw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pmuludq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-por-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psadbw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pshufd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pshufhw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pshuflw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pslld-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pslld-2.c: Likewise.\n+\t* gcc.target/i386/sse2-pslldq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psllq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psllq-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psllw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psllw-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psrad-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psrad-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psraw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psraw-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psrld-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psrld-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psrldq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psrlq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psrlq-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psrlw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psrlw-2.c: Likewise.\n+\t* gcc.target/i386/sse2-psubb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psubd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psubq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psubsb-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psubsw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-psubw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpckhbw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpckhdq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpckhqdq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpckhwd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpcklbw-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpckldq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpcklqdq-1.c: Likewise.\n+\t* gcc.target/i386/sse2-punpcklwd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-pxor-1.c: Likewise.\n+\t* gcc.target/i386/sse2-shufpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-shufps-1.c: Likewise.\n+\t* gcc.target/i386/sse2-sqrtpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-subpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-subsd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-2.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-3.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-4.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-5.c: Likewise.\n+\t* gcc.target/i386/sse2-ucomisd-6.c: Likewise.\n+\t* gcc.target/i386/sse2-unpckhpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-unpcklpd-1.c: Likewise.\n+\t* gcc.target/i386/sse2-xorpd-1.c: Likewise.\n+\t* gcc.target/i386/sse-addps-1.c: Likewise.\n+\t* gcc.target/i386/sse-addss-1.c: Likewise.\n+\t* gcc.target/i386/sse-andnps-1.c: Likewise.\n+\t* gcc.target/i386/sse-andps-1.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-1.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-2.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-3.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-4.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-5.c: Likewise.\n+\t* gcc.target/i386/sse-comiss-6.c: Likewise.\n+\t* gcc.target/i386/sse-cvtsi2ss-1.c: Likewise.\n+\t* gcc.target/i386/sse-cvtsi2ss-2.c: Likewise.\n+\t* gcc.target/i386/sse-cvtss2si-1.c: Likewise.\n+\t* gcc.target/i386/sse-cvtss2si-2.c: Likewise.\n+\t* gcc.target/i386/sse-cvttss2si-1.c: Likewise.\n+\t* gcc.target/i386/sse-cvttss2si-2.c: Likewise.\n+\t* gcc.target/i386/sse-divps-1.c: Likewise.\n+\t* gcc.target/i386/sse-divss-1.c: Likewise.\n+\t* gcc.target/i386/sse-maxps-1.c: Likewise.\n+\t* gcc.target/i386/sse-maxss-1.c: Likewise.\n+\t* gcc.target/i386/sse-minps-1.c: Likewise.\n+\t* gcc.target/i386/sse-minss-1.c: Likewise.\n+\t* gcc.target/i386/sse-movaps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movaps-2.c: Likewise.\n+\t* gcc.target/i386/sse-movhlps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movhps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movhps-2.c: Likewise.\n+\t* gcc.target/i386/sse-movlhps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movmskps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movntps-1.c: Likewise.\n+\t* gcc.target/i386/sse-movss-1.c: Likewise.\n+\t* gcc.target/i386/sse-movss-2.c: Likewise.\n+\t* gcc.target/i386/sse-movss-3.c: Likewise.\n+\t* gcc.target/i386/sse-movups-1.c: Likewise.\n+\t* gcc.target/i386/sse-movups-2.c: Likewise.\n+\t* gcc.target/i386/sse-mulps-1.c: Likewise.\n+\t* gcc.target/i386/sse-mulss-1.c: Likewise.\n+\t* gcc.target/i386/sse-orps-1.c: Likewise.\n+\t* gcc.target/i386/sse-rcpps-1.c: Likewise.\n+\t* gcc.target/i386/sse-rsqrtps-1.c: Likewise.\n+\t* gcc.target/i386/sse-sqrtps-1.c: Likewise.\n+\t* gcc.target/i386/sse-subps-1.c: Likewise.\n+\t* gcc.target/i386/sse-subss-1.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-1.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-2.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-3.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-4.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-5.c: Likewise.\n+\t* gcc.target/i386/sse-ucomiss-6.c: Likewise.\n+\t* gcc.target/i386/sse-unpckhps-1.c: Likewise.\n+\t* gcc.target/i386/sse-unpcklps-1.c: Likewise.\n+\t* gcc.target/i386/sse-xorps-1.c: Likewise.\n+\t* gcc.target/i386/vararg-10.c: Likewise.\n+\t* gcc.target/i386/vararg-3.c: Likewise.\n+\t* gcc.target/i386/vararg-4.c: Likewise.\n+\t* gcc.target/i386/vararg-5.c: Likewise.\n+\t* gcc.target/i386/vararg-6.c: Likewise.\n+\t* gcc.target/i386/vararg-7.c: Likewise.\n+\t* gcc.target/i386/vararg-8.c: Likewise.\n+\t* gcc.target/i386/vararg-9.c: Likewise.\n+\t* g++.dg/other/i386-5.C: Likewise.\n+\t* g++.dg/other/i386-6.C: Likewise.\n+\n+\t* gcc.target/i386/aesdec.c (CHECK_H): New.\n+\t(TEST): New.\n+\tInclude CHECK_H instead of \"XXX-check.h\" and run TEST\n+\tinstead of XXX_test.\n+\t* gcc.target/i386/aesdeclast.c: Likewise.\n+\t* gcc.target/i386/aesenc.c: Likewise.\n+\t* gcc.target/i386/aesenclast.c: Likewise.\n+\t* gcc.target/i386/aesimc.c: Likewise.\n+\t* gcc.target/i386/aeskeygenassist.c: Likewise.\n+\t* gcc.target/i386/sse3-addsubpd.c: Likewise.\n+\t* gcc.target/i386/sse3-addsubps.c: Likewise.\n+\t* gcc.target/i386/sse3-haddpd.c: Likewise.\n+\t* gcc.target/i386/sse3-haddps.c: Likewise.\n+\t* gcc.target/i386/sse3-hsubpd.c: Likewise.\n+\t* gcc.target/i386/sse3-hsubps.c: Likewise.\n+\t* gcc.target/i386/sse3-lddqu.c: Likewise.\n+\t* gcc.target/i386/sse3-movddup.c: Likewise.\n+\t* gcc.target/i386/sse3-movshdup.c: Likewise.\n+\t* gcc.target/i386/sse3-movsldup.c: Likewise.\n+\t* gcc.target/i386/sse4_1-blendpd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-blendps.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dppd-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dppd-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dpps-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dpps-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-extractps.c: Likewise.\n+\t* gcc.target/i386/sse4_1-insertps-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-insertps-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-movntdqa.c: Likewise.\n+\t* gcc.target/i386/sse4_1-mpsadbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-packusdw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pblendvb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pblendw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pcmpeqq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-phminposuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxsb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxsd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxud.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminsb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminsd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminud.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxdq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxwd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxwq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxdq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxwd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxwq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmuldq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmulld.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-3.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpestri-1.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpestri-2.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpestrm-1.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpestrm-2.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpgtq.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpistri-1.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpistri-2.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpistrm-1.c: Likewise.\n+\t* gcc.target/i386/sse4_2-pcmpistrm-2.c: Likewise.\n+\t* gcc.target/i386/ssse3-pabsb.c: Likewise.  Don't run MMX\n+\ttests for AVX.\n+\t* gcc.target/i386/ssse3-pabsd.c: Likewise.\n+\t* gcc.target/i386/ssse3-pabsw.c: Likewise.\n+\t* gcc.target/i386/ssse3-palignr.c: Likewise.\n+\t* gcc.target/i386/ssse3-phaddd.c: Likewise.\n+\t* gcc.target/i386/ssse3-phaddsw.c: Likewise.\n+\t* gcc.target/i386/ssse3-phaddw.c: Likewise.\n+\t* gcc.target/i386/ssse3-phsubd.c: Likewise.\n+\t* gcc.target/i386/ssse3-phsubsw.c: Likewise.\n+\t* gcc.target/i386/ssse3-phsubw.c: Likewise.\n+\t* gcc.target/i386/ssse3-pmaddubsw.c: Likewise.\n+\t* gcc.target/i386/ssse3-pmulhrsw.c: Likewise.\n+\t* gcc.target/i386/ssse3-pshufb.c: Likewise.\n+\t* gcc.target/i386/ssse3-psignb.c: Likewise.\n+\t* gcc.target/i386/ssse3-psignd.c: Likewise.\n+\t* gcc.target/i386/ssse3-psignw.c: Likewise.\n+\n+\t* gcc.target/i386/i386.exp (check_effective_target_vaes): New.\n+\n+\t* gcc.target/i386/m128-check.h: Include <xmmintrin.h>.  Include\n+\t<emmintrin.h> for SSE2.\n+\t(union128i_b): Defined only for SSE2.\n+\t(union128i_w): Likewise.\n+\t(union128i_d): Likewise.\n+\t(union128i_q): Likewise.\n+\t(union128d): Likewise.\n+\t(check_union128i_b): Likewise.\n+\t(check_union128i_w): Likewise.\n+\t(check_union128i_d): Likewise.\n+\t(check_union128i_q): Likewise.\n+\t(check_union128d): Likewise.\n+\t(union128i_ub): New.\n+\t(union128i_uw): Likewise.\n+\t(check_union128i_ub): Likewise.\n+\t(check_union128i_uw): Likewise.\n+\t(ESP_FLOAT): Likewise.\n+\t(ESP_DOUBLE): Likewise.\n+\t(CHECK_ARRAY): Likewise.\n+\t(checkVd): Likewise.\n+\t(checkVf): Likewise.\n+\t(ieee754_float): Likewise.\n+\t(ieee754_double): Likewise.\n+\n+\t* gcc.target/i386/sse-check.h: Include \"m128-check.h\".\n+\n+\t* gcc.target/x86_64/abi/abi-x86_64.exp: Replace asm-support.s\n+\twith asm-support.S.\n+\n+\t* gcc.target/x86_64/abi/asm-support.s: Renamed to ...\n+\t* gcc.target/x86_64/abi/asm-support.S: This.  Add\n+\t\".sse_check none\" if __AVX__ is defined.\n+\n+\t* lib/target-supports.exp (check_effective_target_avx): New.\n+\n 2008-08-28  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/30949"}, {"sha": "2556e7e021b788b08d678b4f684af5864440eb01", "filename": "gcc/testsuite/g++.dg/other/i386-5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-5.C?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* Test that {,x,e,p,t,s,w,g,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+   usable with -O -fkeep-inline-functions.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -maes -mpclmul -mavx -msse5\" } */\n+\n+#include <wmmintrin.h>\n+#include <bmmintrin.h>\n+#include <gmmintrin.h>\n+#include <mm3dnow.h>"}, {"sha": "905ac97b01172413ef73c2ec6e99f529560e830b", "filename": "gcc/testsuite/g++.dg/other/i386-6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-6.C?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,11 @@\n+/* Test that {,x,e,p,t,s,w,g,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+   usable with -O -pedantic-errors.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+\n+#include <wmmintrin.h>\n+#include <bmmintrin.h>\n+#include <gmmintrin.h>\n+#include <mm3dnow.h>\n+\n+int dummy;"}, {"sha": "fb5a5a93d792f9a1dd114e82aab67aa51f520933", "filename": "gcc/testsuite/gcc.dg/compat/vector-1b_main.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_main.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-skip-if \"test AVX vector\" { ! { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target avx } */\n+\n+/* Test compatibility of vector types: layout between separately-compiled\n+   modules, parameter passing, and function return.  This test uses\n+   vectors of integer values.  */\n+\n+#include \"cpuid.h\"\n+\n+extern void vector_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX vector test only if host has AVX support.  */\n+  if (ecx & bit_AVX)\n+    vector_1_x ();\n+\n+  exit (0);\n+}"}, {"sha": "fe2565cc65aa155e78467ff6adbac945bf5af998", "filename": "gcc/testsuite/gcc.dg/compat/vector-1b_x.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_x.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -mavx\" } */\n+\n+#include \"vector-1_x.c\""}, {"sha": "3212bf55d35a90e34796d44f5bbfd60a8533daa8", "filename": "gcc/testsuite/gcc.dg/compat/vector-1b_y.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-1b_y.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -mavx\" } */\n+\n+#include \"vector-1_y.c\""}, {"sha": "c5a9300c8ac502fc94635af53c24f5a73dfffb51", "filename": "gcc/testsuite/gcc.dg/compat/vector-2b_main.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_main.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-skip-if \"test AVX support\" { ! { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target avx } */\n+\n+/* Test compatibility of vector types: layout between separately-compiled\n+   modules, parameter passing, and function return.  This test uses\n+   vectors of floating points values.  */\n+\n+#include \"cpuid.h\"\n+\n+extern void vector_2_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX vector test only if host has AVX support.  */\n+  if (ecx & bit_AVX)\n+    vector_2_x ();\n+\n+  exit (0);\n+}"}, {"sha": "4dd343615e3d1a869eb3d1319258e8be088fbc5c", "filename": "gcc/testsuite/gcc.dg/compat/vector-2b_x.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_x.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -mavx\" } */\n+\n+#include \"vector-2_x.c\""}, {"sha": "2820e0badf4eeb31226ed383ec19bbef3546f9d4", "filename": "gcc/testsuite/gcc.dg/compat/vector-2b_y.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-2b_y.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-w -mno-mmx -mavx\" } */\n+\n+#include \"vector-2_y.c\""}, {"sha": "e73e36eab2574b9b91eaacdf6fc954e7fa7c127d", "filename": "gcc/testsuite/gcc.target/i386/aes-avx-check.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,31 @@\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+\n+static void aes_avx_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AES + AVX test only if host has AES + AVX support.  */\n+  if ((ecx & (bit_AVX | bit_AES)) == (bit_AVX | bit_AES))\n+    {\n+      aes_avx_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "affe3d19ccc95c551b6fe0ccd3e5bfbd3ddd6e7d", "filename": "gcc/testsuite/gcc.target/i386/aesdec.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -35,7 +43,7 @@ init_data (__m128i *s1, __m128i *s2, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "417264a134f75668c9185ef233ca18fa1e491ab4", "filename": "gcc/testsuite/gcc.target/i386/aesdeclast.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -37,7 +45,7 @@ init_data (__m128i *s1, __m128i *s2, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "d2a8b60318800e9b64dd89e887e1116f1c0d57e7", "filename": "gcc/testsuite/gcc.target/i386/aesenc.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -36,7 +44,7 @@ init_data (__m128i *s1, __m128i *s2, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "fd72597e9a4f8b7b9e7dde7f8ce54b67a7c41c4d", "filename": "gcc/testsuite/gcc.target/i386/aesenclast.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -36,7 +44,7 @@ init_data (__m128i *s1, __m128i *s2, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "676f919f597bff2f3ff8fe1d8ee34a138dd7131b", "filename": "gcc/testsuite/gcc.target/i386/aesimc.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -34,7 +42,7 @@ init_data (__m128i *s1, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "f033bd6a032f88e90f71b3e4781787350144cba8", "filename": "gcc/testsuite/gcc.target/i386/aeskeygenassist.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -2,11 +2,19 @@\n /* { dg-require-effective-target aes } */\n /* { dg-options \"-O2 -maes\" } */\n \n+#ifndef CHECK_H\n+#define CHECK_H \"aes-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST aes_test\n+#endif\n+\n+#include CHECK_H\n+\n #include <wmmintrin.h>\n #include <string.h>\n \n-#include \"aes-check.h\"\n-\n extern void abort (void);\n \n #define NUM 1024\n@@ -34,7 +42,7 @@ init_data (__m128i *s1, __m128i *d)\n }\n \n static void\n-aes_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "3cda080a3df95f33a4d64af1334a448fc23316f4", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+\n+#include <mm_malloc.h>\n+\n+/* Test that the intrinsics compile with optimization.  All of them are\n+   defined as inline functions in {,x,e,p,t,s,w,g,a,b}mmintrin.h and\n+   mm3dnow.h that reference the proper builtin functions.  Defining away\n+   \"extern\" and \"__inline\" results in all of them being compiled as proper\n+   functions.  */\n+\n+#define extern\n+#define __inline\n+\n+/* Following intrinsics require immediate arguments. */\n+\n+/* ammintrin.h */\n+#define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n+#define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n+\n+/* gmmintrin.h */\n+#define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n+#define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n+#define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n+#define __builtin_ia32_shufpd256(X, Y, M) __builtin_ia32_shufpd256(X, Y, 1)\n+#define __builtin_ia32_shufps256(X, Y, M) __builtin_ia32_shufps256(X, Y, 1)\n+#define __builtin_ia32_cmpsd(X, Y, O) __builtin_ia32_cmpsd(X, Y, 1)\n+#define __builtin_ia32_cmpss(X, Y, O) __builtin_ia32_cmpss(X, Y, 1)\n+#define __builtin_ia32_cmppd(X, Y, O) __builtin_ia32_cmppd(X, Y, 1)\n+#define __builtin_ia32_cmpps(X, Y, O) __builtin_ia32_cmpps(X, Y, 1)\n+#define __builtin_ia32_cmppd256(X, Y, O) __builtin_ia32_cmppd256(X, Y, 1)\n+#define __builtin_ia32_cmpps256(X, Y, O) __builtin_ia32_cmpps256(X, Y, 1)\n+#define __builtin_ia32_vextractf128_pd256(X, N) __builtin_ia32_vextractf128_pd256(X, 1)\n+#define __builtin_ia32_vextractf128_ps256(X, N) __builtin_ia32_vextractf128_ps256(X, 1)\n+#define __builtin_ia32_vextractf128_si256(X, N) __builtin_ia32_vextractf128_si256(X, 1)\n+#define __builtin_ia32_vpermilpd(X, N) __builtin_ia32_vpermilpd(X, 1)\n+#define __builtin_ia32_vpermilpd256(X, N) __builtin_ia32_vpermilpd256(X, 1)\n+#define __builtin_ia32_vpermilps(X, N) __builtin_ia32_vpermilps(X, 1)\n+#define __builtin_ia32_vpermilps256(X, N) __builtin_ia32_vpermilps256(X, 1)\n+#define __builtin_ia32_vpermil2pd(X, Y, C, I) __builtin_ia32_vpermil2pd(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2pd256(X, Y, C, I) __builtin_ia32_vpermil2pd256(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps(X, Y, C, I) __builtin_ia32_vpermil2ps(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps256(X, Y, C, I) __builtin_ia32_vpermil2ps256(X, Y, C, 1)\n+#define __builtin_ia32_vperm2f128_pd256(X, Y, C) __builtin_ia32_vperm2f128_pd256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_ps256(X, Y, C) __builtin_ia32_vperm2f128_ps256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_si256(X, Y, C) __builtin_ia32_vperm2f128_si256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_pd256(X, Y, C) __builtin_ia32_vinsertf128_pd256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_ps256(X, Y, C) __builtin_ia32_vinsertf128_ps256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n+#define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n+#define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+\n+/* wmmintrin.h */\n+#define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n+#define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n+\n+/* mmintrin-common.h */\n+#define __builtin_ia32_roundpd(V, M) __builtin_ia32_roundpd(V, 1)\n+#define __builtin_ia32_roundsd(D, V, M) __builtin_ia32_roundsd(D, V, 1)\n+#define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n+#define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n+\n+/* smmintrin.h */\n+#define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n+#define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n+#define __builtin_ia32_blendpd(X, Y, M) __builtin_ia32_blendpd(X, Y, 1)\n+#define __builtin_ia32_dpps(X, Y, M) __builtin_ia32_dpps(X, Y, 1)\n+#define __builtin_ia32_dppd(X, Y, M) __builtin_ia32_dppd(X, Y, 1)\n+#define __builtin_ia32_insertps128(D, S, N) __builtin_ia32_insertps128(D, S, 1)\n+#define __builtin_ia32_vec_ext_v4sf(X, N) __builtin_ia32_vec_ext_v4sf(X, 1)\n+#define __builtin_ia32_vec_set_v16qi(D, S, N) __builtin_ia32_vec_set_v16qi(D, S, 1)\n+#define __builtin_ia32_vec_set_v4si(D, S, N) __builtin_ia32_vec_set_v4si(D, S, 1)\n+#define __builtin_ia32_vec_set_v2di(D, S, N) __builtin_ia32_vec_set_v2di(D, S, 1)\n+#define __builtin_ia32_vec_ext_v16qi(X, N) __builtin_ia32_vec_ext_v16qi(X, 1)\n+#define __builtin_ia32_vec_ext_v4si(X, N) __builtin_ia32_vec_ext_v4si(X, 1)\n+#define __builtin_ia32_vec_ext_v2di(X, N) __builtin_ia32_vec_ext_v2di(X, 1)\n+#define __builtin_ia32_mpsadbw128(X, Y, M) __builtin_ia32_mpsadbw128(X, Y, 1)\n+#define __builtin_ia32_pcmpistrm128(X, Y, M) \\\n+  __builtin_ia32_pcmpistrm128(X, Y, 1)\n+#define __builtin_ia32_pcmpistri128(X, Y, M) \\\n+  __builtin_ia32_pcmpistri128(X, Y, 1)\n+#define __builtin_ia32_pcmpestrm128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestrm128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestri128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestri128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpistria128(X, Y, M) \\\n+  __builtin_ia32_pcmpistria128(X, Y, 1)\n+#define __builtin_ia32_pcmpistric128(X, Y, M) \\\n+  __builtin_ia32_pcmpistric128(X, Y, 1)\n+#define __builtin_ia32_pcmpistrio128(X, Y, M) \\\n+  __builtin_ia32_pcmpistrio128(X, Y, 1)\n+#define __builtin_ia32_pcmpistris128(X, Y, M) \\\n+  __builtin_ia32_pcmpistris128(X, Y, 1)\n+#define __builtin_ia32_pcmpistriz128(X, Y, M) \\\n+  __builtin_ia32_pcmpistriz128(X, Y, 1)\n+#define __builtin_ia32_pcmpestria128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestria128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestric128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestric128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestrio128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestrio128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestris128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestris128(X, LX, Y, LY, 1)\n+#define __builtin_ia32_pcmpestriz128(X, LX, Y, LY, M) \\\n+  __builtin_ia32_pcmpestriz128(X, LX, Y, LY, 1)\n+\n+/* tmmintrin.h */\n+#define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n+#define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n+\n+/* emmintrin.h */\n+#define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n+#define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n+#define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n+#define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n+#define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)\n+#define __builtin_ia32_vec_set_v8hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v8hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v8hi(A, N) __builtin_ia32_vec_ext_v8hi(A, 0)\n+#define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n+\n+/* xmmintrin.h */\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n+#define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v4hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n+#define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n+\n+/* bmmintrin.h */\n+#define __builtin_ia32_protbi(A, B) __builtin_ia32_protbi(A,1)\n+#define __builtin_ia32_protwi(A, B) __builtin_ia32_protwi(A,1)\n+#define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n+#define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n+\n+#include <wmmintrin.h>\n+#include <bmmintrin.h>\n+#include <gmmintrin.h>\n+#include <mm3dnow.h>"}, {"sha": "6699558d8f9b5a02970315ba3a33f37c380a095b", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,172 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n+\n+#include <mm_malloc.h>\n+\n+/* Test that the intrinsics compile without optimization.  All of them are\n+   defined as inline functions in {,x,e,p,t,s,w,g,a,b}mmintrin.h and\n+   mm3dnow.h that reference the proper builtin functions.  Defining away\n+   \"extern\" and \"__inline\" results in all of them being compiled as proper\n+   functions.  */\n+\n+#define extern\n+#define __inline\n+\n+#include <wmmintrin.h>\n+#include <bmmintrin.h>\n+#include <gmmintrin.h>\n+#include <mm3dnow.h>\n+\n+#define _CONCAT(x,y) x ## y\n+\n+#define test_1(func, type, op1_type, imm)\t\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n+  { return func (A, imm); }\n+\n+#define test_1x(func, type, op1_type, imm1, imm2)\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, int const I, int const L)\t\t\\\n+  { return func (A, imm1, imm2); }\n+\n+#define test_2(func, type, op1_type, op2_type, imm)\t\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B, int const I)\t\t\\\n+  { return func (A, B, imm); }\n+\n+#define test_2x(func, type, op1_type, op2_type, imm1, imm2)\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n+  { return func (A, B, imm1, imm2); }\n+\n+#define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, int const I)\t\t\\\n+  { return func (A, B, C, imm); }\n+\n+#define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, op4_type D, int const I)\t\t\\\n+  { return func (A, B, C, D, imm); }\n+\n+\n+/* Following intrinsics require immediate arguments.  They\n+   are defined as macros for non-optimized compilations. */\n+\n+/* ammintrin.h */\n+test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n+test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n+\n+/* gmmintrin.h */\n+test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_shuffle_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_shuffle_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm_cmp_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_cmp_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm256_cmp_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_cmp_ps, __m256, __m256, __m256, 1)\n+test_1 (_mm256_extractf128_pd, __m128d, __m256d, 1)\n+test_1 (_mm256_extractf128_ps, __m128, __m256, 1)\n+test_1 (_mm256_extractf128_si256, __m128i, __m256i, 1)\n+test_1 (_mm256_extract_epi8, int, __m256i, 20)\n+test_1 (_mm256_extract_epi16, int, __m256i, 13)\n+test_1 (_mm256_extract_epi32, int, __m256i, 6)\n+#ifdef __x86_64__\n+test_1 (_mm256_extract_epi64, long long, __m256i, 2)\n+#endif\n+test_1 (_mm_permute_pd, __m128d, __m128d, 1)\n+test_1 (_mm256_permute_pd, __m256d, __m256d, 1)\n+test_1 (_mm_permute_ps, __m128, __m128, 1)\n+test_1 (_mm256_permute_ps, __m256, __m256, 1)\n+test_3 (_mm_permute2_pd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm256_permute2_pd, __m256d, __m256d, __m256d, __m256d, 1)\n+test_3 (_mm_permute2_ps, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm256_permute2_ps, __m256, __m256, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_permute2f128_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_si256, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_insertf128_pd, __m256d, __m256d, __m128d, 1)\n+test_2 (_mm256_insertf128_ps, __m256, __m256, __m128, 1)\n+test_2 (_mm256_insertf128_si256, __m256i, __m256i, __m128i, 1)\n+test_2 (_mm256_insert_epi8, __m256i, __m256i, int, 30)\n+test_2 (_mm256_insert_epi16, __m256i, __m256i, int, 7)\n+test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n+#ifdef __x86_64__\n+test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n+#endif\n+test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n+test_1 (_mm256_round_ps, __m256, __m256, 1)\n+\n+/* wmmintrin.h */\n+test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n+test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n+\n+/* mmintrin-common.h */\n+test_1 (_mm_round_pd, __m128d, __m128d, 1)\n+test_1 (_mm_round_ps, __m128, __m128, 1)\n+test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n+\n+/* smmintrin.h */\n+test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_dp_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm_dp_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_insert_ps, __m128, __m128, __m128, 1)\n+test_1 (_mm_extract_ps, int, __m128, 1)\n+test_2 (_mm_insert_epi8, __m128i, __m128i, int, 1)\n+test_2 (_mm_insert_epi32, __m128i, __m128i, int, 1)\n+#ifdef __x86_64__\n+test_2 (_mm_insert_epi64, __m128i, __m128i, long long, 1)\n+#endif\n+test_1 (_mm_extract_epi8, int, __m128i, 1)\n+test_1 (_mm_extract_epi32, int, __m128i, 1)\n+#ifdef __x86_64__\n+test_1 (_mm_extract_epi64, long long, __m128i, 1)\n+#endif\n+test_2 (_mm_mpsadbw_epu8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrm, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistri, int, __m128i, __m128i, 1)\n+test_4 (_mm_cmpestrm, __m128i, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestri, int, __m128i, int, __m128i, int, 1)\n+test_2 (_mm_cmpistra, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrc, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistro, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrs, int, __m128i, __m128i, 1)\n+test_2 (_mm_cmpistrz, int, __m128i, __m128i, 1)\n+test_4 (_mm_cmpestra, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrc, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n+test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n+\n+/* tmmintrin.h */\n+test_2 (_mm_alignr_epi8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n+\n+/* emmintrin.h */\n+test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n+test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_extract_epi16, int, __m128i, 1)\n+test_2 (_mm_insert_epi16, __m128i, __m128i, int, 1)\n+test_1 (_mm_shufflehi_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_shufflelo_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_shuffle_epi32, __m128i, __m128i, 1)\n+\n+/* xmmintrin.h */\n+test_2 (_mm_shuffle_ps, __m128, __m128, __m128, 1)\n+test_1 (_mm_extract_pi16, int, __m64, 1)\n+test_1 (_m_pextrw, int, __m64, 1)\n+test_2 (_mm_insert_pi16, __m64, __m64, int, 1)\n+test_2 (_m_pinsrw, __m64, __m64, int, 1)\n+test_1 (_mm_shuffle_pi16, __m64, __m64, 1)\n+test_1 (_m_pshufw, __m64, __m64, 1)\n+test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n+\n+/* bmmintrin.h */\n+test_1 (_mm_roti_epi8, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi16, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi32, __m128i, __m128i, 1)\n+test_1 (_mm_roti_epi64, __m128i, __m128i, 1)"}, {"sha": "9e0b434aef5c710c699c46d738eba26023d81eb5", "filename": "gcc/testsuite/gcc.target/i386/avx-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -std=gnu99\" } */\n+\n+_Decimal128\n+foo128 (_Decimal128 z)\n+{\n+  return z + 1.0dl;\n+}"}, {"sha": "8db55a103573ae5b8e8ec41705cf864113d28ff7", "filename": "gcc/testsuite/gcc.target/i386/avx-check.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,29 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m256-check.h\"\n+\n+static void avx_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX test only if host has AVX support.  */\n+  if (ecx & bit_AVX)\n+    {\n+      avx_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "e8578489079240fd554b8b73be4a7ca7f5a72fcc", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v16hi-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (short *v)\n+{\n+  return _mm256_set_epi16 (v[15], v[14], v[13], v[12],\n+\t\t\t   v[11], v[10], v[9], v[8],\n+\t\t\t   v[7], v[6], v[5], v[4],\n+\t\t\t   v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  short v[16] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68\n+    };\n+  union256i_w u;\n+\n+  u.x = foo (v);\n+  if (check_union256i_w (u, v))\n+    abort ();\n+}"}, {"sha": "ac1fc458ba3a90886cda6d1d45e9526c0eda06c7", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v16hi-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (short x1, short x2, short x3, short x4,\n+     short x5, short x6, short x7, short x8,\n+     short x9, short x10, short x11, short x12,\n+     short x13, short x14, short x15, short x16)\n+{\n+  return _mm256_set_epi16 (x1, x2, x3, x4, x5, x6, x7, x8,\n+\t\t\t   x9, x10, x11, x12, x13, x14, x15, x16);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  short v[16] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68\n+    };\n+  union256i_w u;\n+\n+  u.x = foo (v[15], v[14], v[13], v[12],\n+\t     v[11], v[10], v[9], v[8],\n+\t     v[7], v[6], v[5], v[4],\n+\t     v[3], v[2], v[1], v[0]);\n+  if (check_union256i_w (u, v))\n+    abort ();\n+}"}, {"sha": "c215d56753a7a57aa228331ac5b7d97b9cf3f7ca", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v16hi-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (short x)\n+{\n+  return _mm256_set_epi16 (x, x, x, x, x, x, x, x,\n+\t\t\t   x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  short e = 345;\n+  short v[16];\n+  union256i_w u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256i_w (u, v))\n+    abort ();\n+}"}, {"sha": "a707fc8dced61956b8c4776b7fcde75d146f3973", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v16hi-4.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (short x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm256_set_epi16 (x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 14:\n+      return _mm256_set_epi16 (0, x, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 13:\n+      return _mm256_set_epi16 (0, 0, x, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 12:\n+      return _mm256_set_epi16 (0, 0, 0, x, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm256_set_epi16 (0, 0, 0, 0, x, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, x, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, x, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, x,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_epi16 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t       0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  short e = 0xbeef;\n+  short v[16];\n+  union256i_w u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_w (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "ad77eda29939160123592a610ae3351fece349a0", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v16hi-5.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v16hi-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (short x, int i)\n+{\n+  switch (i)\n+    {\n+    case 15:\n+      return _mm256_set_epi16 (x, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 14:\n+      return _mm256_set_epi16 (1, x, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 13:\n+      return _mm256_set_epi16 (1, 1, x, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 12:\n+      return _mm256_set_epi16 (1, 1, 1, x, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm256_set_epi16 (1, 1, 1, 1, x, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, x, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, x, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, x,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_epi16 (1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t       1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  short e = 0xbeef;\n+  short v[16];\n+  union256i_w u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_w (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "9d93815782b532ae533c4f02491c32e78c3e9fce", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v32qi-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (char *v)\n+{\n+  return _mm256_set_epi8 (v[31], v[30], v[29], v[28],\n+\t\t\t  v[27], v[26], v[25], v[24],\n+\t\t\t  v[23], v[22], v[21], v[20],\n+\t\t\t  v[19], v[18], v[17], v[16],\n+\t\t\t  v[15], v[14], v[13], v[12],\n+\t\t\t  v[11], v[10], v[9], v[8],\n+\t\t\t  v[7], v[6], v[5], v[4],\n+\t\t\t  v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  char v[32] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68,\n+      -13, 30, 78, 149, -70, -37, 98, 38,\n+      41, 73, 89, 14, 80, 117, 108, 8\n+    };\n+  union256i_b u;\n+\n+  u.x = foo (v);\n+  if (check_union256i_b (u, v))\n+    abort ();\n+}"}, {"sha": "508ed51a855eb0695aea35e0007503fbb6d6b94d", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v32qi-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (char x1, char x2, char x3, char x4,\n+     char x5, char x6, char x7, char x8,\n+     char x9, char x10, char x11, char x12,\n+     char x13, char x14, char x15, char x16,\n+     char x17, char x18, char x19, char x20,\n+     char x21, char x22, char x23, char x24,\n+     char x25, char x26, char x27, char x28,\n+     char x29, char x30, char x31, char x32)\n+{\n+  return _mm256_set_epi8 (x1, x2, x3, x4, x5, x6, x7, x8,\n+\t\t\t  x9, x10, x11, x12, x13, x14, x15, x16,\n+\t\t\t  x17, x18, x19, x20, x21, x22, x23, x24,\n+\t\t\t  x25, x26, x27, x28, x29, x30, x31, x32);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  char v[32] =\n+    { \n+      -3, 60, 48, 104, -90, 37, -48, 78,\n+      4, 33, 81, 4, -89, 17, 8, 68,\n+      -13, 30, 78, 149, -70, -37, 98, 38,\n+      41, 73, 89, 14, 80, 117, 108, 8\n+    };\n+  union256i_b u;\n+\n+  u.x = foo (v[31], v[30], v[29], v[28],\n+\t     v[27], v[26], v[25], v[24],\n+\t     v[23], v[22], v[21], v[20],\n+\t     v[19], v[18], v[17], v[16],\n+\t     v[15], v[14], v[13], v[12],\n+\t     v[11], v[10], v[9], v[8],\n+\t     v[7], v[6], v[5], v[4],\n+\t     v[3], v[2], v[1], v[0]);\n+  if (check_union256i_b (u, v))\n+    abort ();\n+}"}, {"sha": "da92c8e2cb6cd5f2725e4b99e75494339be023b8", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v32qi-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (char x)\n+{\n+  return _mm256_set_epi8 (x, x, x, x, x, x, x, x,\n+\t\t\t  x, x, x, x, x, x, x, x,\n+\t\t\t  x, x, x, x, x, x, x, x,\n+\t\t\t  x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  char e = -45;\n+  char v[32];\n+  union256i_b u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256i_b (u, v))\n+    abort ();\n+}"}, {"sha": "7220695ba064026f6b0e686f5619ee42986dad9c", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v32qi-4.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (char x, int i)\n+{\n+  switch (i)\n+    {\n+    case 31:\n+      return _mm256_set_epi8 (x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 30:\n+      return _mm256_set_epi8 (0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 29:\n+      return _mm256_set_epi8 (0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 28:\n+      return _mm256_set_epi8 (0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 27:\n+      return _mm256_set_epi8 (0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 26:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 25:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 24:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 23:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 22:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 21:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 20:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 19:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 18:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 17:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 16:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 15:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 14:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 13:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 12:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 11:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 10:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 9:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 8:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0);\n+    case 7:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  char e = 0xa1;\n+  char v[32];\n+  union256i_b u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_b (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "0fcadda91861f46e3dcefd61a814b24880797880", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v32qi-5.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v32qi-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (char x, int i)\n+{\n+  switch (i)\n+    {\n+    case 31:\n+      return _mm256_set_epi8 (x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 30:\n+      return _mm256_set_epi8 (1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 29:\n+      return _mm256_set_epi8 (1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 28:\n+      return _mm256_set_epi8 (1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 27:\n+      return _mm256_set_epi8 (1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 26:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 25:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 24:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 23:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 22:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 21:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 20:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 19:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 18:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 17:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 16:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 15:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 14:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 13:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 12:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 11:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 10:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 9:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 8:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1, 1);\n+    case 7:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_epi8 (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t\t      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  char e = 0xa1;\n+  char v[32];\n+  union256i_b u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_b (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "89e6ec2f38c1a12487cf722d85d9010b65357c43", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4df-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline))\n+foo (double *v)\n+{\n+  return _mm256_set_pd (v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  double v[4] = { -3, 2, 1, 9 };\n+  union256d u;\n+\n+  u.x = foo (v);\n+  if (check_union256d (u, v))\n+    abort ();\n+}"}, {"sha": "51df025edfcf3866ebcdc4ac419d1fde231a30bb", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4df-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline))\n+foo (double x1, double x2, double x3, double x4)\n+{\n+  return _mm256_set_pd (x1, x2, x3, x4);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  double v[4] = { -3, 2, 1, 9 };\n+  union256d u;\n+\n+  u.x = foo (v[3], v[2], v[1], v[0]);\n+  if (check_union256d (u, v))\n+    abort ();\n+}"}, {"sha": "01b2ff51d210227af8cc1e98affa7c872e8fb063", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4df-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline))\n+foo (double x)\n+{\n+  return _mm256_set_pd (x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  double e = 34.5;\n+  double v[4];\n+  union256d u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256d (u, v))\n+    abort ();\n+}"}, {"sha": "e2f6300a3ec729bd092190288d011544ec2ad51d", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4df-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline))\n+foo (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 3:\n+      return _mm256_set_pd (x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_pd (0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_pd (0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_pd (0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  double e = -3.234;\n+  double v[4];\n+  union256d u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256d (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "6f418a66873334a53ad5a0e8e15c1dc38cd1428f", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4df-5.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4df-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline))\n+foo (double x, int i)\n+{\n+  switch (i)\n+    {\n+    case 3:\n+      return _mm256_set_pd (x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_pd (1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_pd (1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_pd (1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  double e = -3.234;\n+  double v[4];\n+  union256d u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256d (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "84b6278a325240791af8ebbe18f95ca69bb98f83", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4di-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (long long *v)\n+{\n+  return _mm256_set_epi64x (v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  long long v[4]\n+    = { 0x12e9e94645ad8LL, 0x851c0b39446LL,\n+\t0x786784645245LL, 0x9487731234LL };\n+  union256i_q u;\n+\n+  u.x = foo (v);\n+  if (check_union256i_q (u, v))\n+    abort ();\n+}"}, {"sha": "f3dc138a8c26ccb73e2de77f8d49ae37850d0543", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4di-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (long long x1, long long x2, long long x3, long long x4)\n+{\n+  return _mm256_set_epi64x (x1, x2, x3, x4);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  long long v[4]\n+    = { 0x12e9e94645ad8LL, 0x851c0b39446LL,\n+\t0x786784645245LL, 0x9487731234LL };\n+  union256i_q u;\n+\n+  u.x = foo (v[3], v[2], v[1], v[0]);\n+  if (check_union256i_q (u, v))\n+    abort ();\n+}"}, {"sha": "95710d822402621a7977b12e04c450c7ed4c001a", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4di-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (long long x)\n+{\n+  return _mm256_set_epi64x (x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  long long e = 0xfed178ab134badf1LL;\n+  long long v[4];\n+  union256i_q u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256i_q (u, v))\n+    abort ();\n+}"}, {"sha": "83f8c15fa6b4fd0e255da1f4024a93bcf428add1", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4di-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 3:\n+      return _mm256_set_epi64x (x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_epi64x (0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_epi64x (0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_epi64x (0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  long long e = 0xabadbeef01234567LL;\n+  long long v[4];\n+  union256i_q u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_q (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "7bc260c7ba0adef77414eb14fb32855162de9f6e", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v4di-5.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v4di-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (long long x, int i)\n+{\n+  switch (i)\n+    {\n+    case 3:\n+      return _mm256_set_epi64x (x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_epi64x (1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_epi64x (1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_epi64x (1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  long long e = 0xabadbeef01234567LL;\n+  long long v[4];\n+  union256i_q u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_q (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "6f1ba71019c00042c7aad1f15b1a7e1bdd1b0666", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8sf-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256 \n+__attribute__((noinline))\n+foo (float *v)\n+{\n+  return _mm256_set_ps (v[7], v[6], v[5], v[4],\n+\t\t\tv[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  float v[8] = { -3, 2, 1, 9, 23, -173, -13, 69 };\n+  union256 u;\n+\n+  u.x = foo (v);\n+  if (check_union256 (u, v))\n+    abort ();\n+}"}, {"sha": "4d809d7ca3b098021cb7cbbb0b3c1026ffc393cc", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8sf-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+__m256\n+__attribute__((noinline))\n+foo (float x1, float x2, float x3, float x4,\n+     float x5, float x6, float x7, float x8)\n+{\n+  return _mm256_set_ps (x1, x2, x3, x4, x5, x6, x7, x8);\n+}\n+\n+void\n+avx_test (void)\n+{\n+  float v[8] = { -3, 2, 1, 9, 23, -173, -13, 69 };\n+  union256 u;\n+\n+  u.x = foo (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union256 (u, v))\n+    abort ();\n+}"}, {"sha": "96f5e3318ec50619e2e0ff5a606a403b6944a85b", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8sf-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256\n+__attribute__((noinline))\n+foo (float x)\n+{\n+  return _mm256_set_ps (x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  float e = 34.5;\n+  float v[8];\n+  union256 u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256 (u, v))\n+    abort ();\n+}"}, {"sha": "73be303698d2de9e19674c9cf73167933a54e215", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8sf-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256\n+__attribute__((noinline))\n+foo (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm256_set_ps (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm256_set_ps (0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm256_set_ps (0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm256_set_ps (0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm256_set_ps (0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_ps (0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_ps (0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_ps (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  float e = -3.234;\n+  float v[8];\n+  union256 u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256 (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "80dc156d5241f83cdaa08b9dc84a3fd935fc6fc1", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8sf-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8sf-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256\n+__attribute__((noinline))\n+foo (float x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm256_set_ps (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm256_set_ps (1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm256_set_ps (1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm256_set_ps (1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm256_set_ps (1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_ps (1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_ps (1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_ps (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  float e = -3.234;\n+  float v[8];\n+  union256 u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256 (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "7aa029ea5959eb84d17e7bdb953c50a5bce8b1f8", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8si-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (int *v)\n+{\n+  return _mm256_set_epi32 (v[7], v[6], v[5], v[4],\n+\t\t\t   v[3], v[2], v[1], v[0]);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  int v[8]\n+    = { 19832468, 6576856, 8723467, 234566,\n+\t786784, 645245, 948773, 1234 };\n+  union256i_d u;\n+\n+  u.x = foo (v);\n+  if (check_union256i_d (u, v))\n+    abort ();\n+}"}, {"sha": "e822c785b3cebbf6eff975be5e1de0c8b6e4a324", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8si-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+__m256i\n+__attribute__((noinline))\n+foo (int x1, int x2, int x3, int x4,\n+     int x5, int x6, int x7, int x8)\n+{\n+  return _mm256_set_epi32 (x1, x2, x3, x4, x5, x6, x7, x8);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  int v[8] = { -3, 2, 1, 9, 23, -173, -13, 69 };\n+  union256i_d u;\n+\n+  u.x = foo (v[7], v[6], v[5], v[4], v[3], v[2], v[1], v[0]);\n+\n+  if (check_union256i_d (u, v))\n+     abort ();\n+}"}, {"sha": "594436b3794f3dc280278471148f1f448c570db3", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8si-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (int x)\n+{\n+  return _mm256_set_epi32 (x, x, x, x, x, x, x, x);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  int e = 0xabadbeef;\n+  int v[8];\n+  union256i_d u;\n+  int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    v[i] = e;\n+  u.x = foo (e);\n+  if (check_union256i_d (u, v))\n+    abort ();\n+}"}, {"sha": "2cad6276958dfdbeb3c96cfa0280d7d324d7bb07", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8si-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm256_set_epi32 (x, 0, 0, 0, 0, 0, 0, 0);\n+    case 6:\n+      return _mm256_set_epi32 (0, x, 0, 0, 0, 0, 0, 0);\n+    case 5:\n+      return _mm256_set_epi32 (0, 0, x, 0, 0, 0, 0, 0);\n+    case 4:\n+      return _mm256_set_epi32 (0, 0, 0, x, 0, 0, 0, 0);\n+    case 3:\n+      return _mm256_set_epi32 (0, 0, 0, 0, x, 0, 0, 0);\n+    case 2:\n+      return _mm256_set_epi32 (0, 0, 0, 0, 0, x, 0, 0);\n+    case 1:\n+      return _mm256_set_epi32 (0, 0, 0, 0, 0, 0, x, 0);\n+    case 0:\n+      return _mm256_set_epi32 (0, 0, 0, 0, 0, 0, 0, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  int e = 0xabadbeef;\n+  int v[8];\n+  union256i_d u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 0;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_d (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "456e87772994334d9fb6c31bee5423289c878edc", "filename": "gcc/testsuite/gcc.target/i386/avx-set-v8si-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set-v8si-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__((noinline))\n+foo (int x, int i)\n+{\n+  switch (i)\n+    {\n+    case 7:\n+      return _mm256_set_epi32 (x, 1, 1, 1, 1, 1, 1, 1);\n+    case 6:\n+      return _mm256_set_epi32 (1, x, 1, 1, 1, 1, 1, 1);\n+    case 5:\n+      return _mm256_set_epi32 (1, 1, x, 1, 1, 1, 1, 1);\n+    case 4:\n+      return _mm256_set_epi32 (1, 1, 1, x, 1, 1, 1, 1);\n+    case 3:\n+      return _mm256_set_epi32 (1, 1, 1, 1, x, 1, 1, 1);\n+    case 2:\n+      return _mm256_set_epi32 (1, 1, 1, 1, 1, x, 1, 1);\n+    case 1:\n+      return _mm256_set_epi32 (1, 1, 1, 1, 1, 1, x, 1);\n+    case 0:\n+      return _mm256_set_epi32 (1, 1, 1, 1, 1, 1, 1, x);\n+    default:\n+      abort ();\n+    }\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  int e = 0xabadbeef;\n+  int v[8];\n+  union256i_d u;\n+  int i, j;\n+\n+  for (i = 0; i < ARRAY_SIZE (v); i++)\n+    {\n+      for (j = 0; j < ARRAY_SIZE (v); j++)\n+\tv[j] = 1;\n+      v[i] = e;\n+      u.x = foo (e, i);\n+      if (check_union256i_d (u, v))\n+\tabort ();\n+    }\n+}"}, {"sha": "2d774aef3033e68303134e1af333a350ea78d0f0", "filename": "gcc/testsuite/gcc.target/i386/avx-set1-epi32-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-epi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-epi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-epi32-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256i_d u;\n+  int e [8];\n+  int source[1] = {1234};\n+\n+  u.x = _mm256_set1_epi32 (source[0]);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = source[0];\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "21aea294079e75ab5afb92a74dfafe18f7fefc48", "filename": "gcc/testsuite/gcc.target/i386/avx-set1-pd-256-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-pd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-pd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-pd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u;\n+  double e [4];\n+  double source[1] = {26156.643};\n+\n+  u.x = _mm256_set1_pd (source[0]);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = source[0];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "c5f2d10236e6f42caa36a4e529c3aca09f29cf76", "filename": "gcc/testsuite/gcc.target/i386/avx-set1-ps-256-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-ps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-ps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-set1-ps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u;\n+  float e [8];\n+  float\t source[1] = {1234.234f};\n+\n+  u.x = _mm256_set1_ps (source[0]);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = source[0];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "43656cf810b5e613dbd578ba88b67d80bfa6fdb4", "filename": "gcc/testsuite/gcc.target/i386/avx-setzero-pd-256-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-pd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-pd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-pd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u;\n+  double e [4];\n+\n+  u.x = _mm256_setzero_pd ();\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = 0.0;\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "ffbf431fc3514f577654b83e319baec66dce530f", "filename": "gcc/testsuite/gcc.target/i386/avx-setzero-ps-256-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-ps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-ps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-ps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u;\n+  float e [8];\n+\n+  u.x = _mm256_setzero_ps ();\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = 0.0;\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "01eef2a4e30ee7ace20692a7a0188a518f59d912", "filename": "gcc/testsuite/gcc.target/i386/avx-setzero-si256-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-si256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-si256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-setzero-si256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256i_q u;\n+  long long e [4];\n+\n+  u.x = _mm256_setzero_si256 ();\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = 0;\n+\n+  if (check_union256i_q (u, e))\n+    abort ();\n+}"}, {"sha": "afed3d035cb8d5553afd220803027c76f925eda8", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-addpd-1.c\""}, {"sha": "2d039435454ae54297ccd74b1968c5cb4704961d", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddpd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_add_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "ba905097ff972094391e4cf94b65e23394b79107", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-addps-1.c\""}, {"sha": "363a4dedb546a66289abef46a0619f1c520ad557", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_add_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "5c562a01d66118affdfc6bcb51c477c0cf47c7cc", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-addsd-1.c\""}, {"sha": "093f61b63731600803ebb2d46054bc10f5a3201f", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-addss-1.c\""}, {"sha": "7c0fc2fdf16a201e3e72680491b5f013db337853", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddsubpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -mfpmath=sse\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-addsubpd.c\""}, {"sha": "7f431ec3655e11ad73fa1edeb730df4d86277bdc", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddsubpd-256-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_addsub_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    if (i % 2)\n+      e[i] = s1.a[i] + s2.a[i];\n+    else \n+      e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "1dbe3f3536117f1bc8795191ad6c89c4df80861f", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddsubps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -mfpmath=sse\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-addsubps.c\""}, {"sha": "e6977f9b9bcd42f40f1e35915f931748b0ab3fe1", "filename": "gcc/testsuite/gcc.target/i386/avx-vaddsubps-256-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaddsubps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_addsub_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    if (i % 2)\n+      e[i] = s1.a[i] + s2.a[i];\n+    else \n+      e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "c926dd197cb0e8db06c66d8b2b0d431e26a4f77d", "filename": "gcc/testsuite/gcc.target/i386/avx-vaesdec-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdec-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aesdec.c\""}, {"sha": "467462606258bdfd3c4fb8d8749d5792e81dd3c2", "filename": "gcc/testsuite/gcc.target/i386/avx-vaesdeclast-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdeclast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdeclast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesdeclast-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aesdeclast.c\""}, {"sha": "313f10105a38000a31f3bf38d658bf67c31550bb", "filename": "gcc/testsuite/gcc.target/i386/avx-vaesenc-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenc-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aesenc.c\""}, {"sha": "0df9130add8e693e08d8203e93b56c1137b9feb9", "filename": "gcc/testsuite/gcc.target/i386/avx-vaesenclast-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenclast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenclast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesenclast-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aesenclast.c\""}, {"sha": "29f910a47ad28bdf9705810827e421845738265a", "filename": "gcc/testsuite/gcc.target/i386/avx-vaesimc-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesimc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesimc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaesimc-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aesimc.c\""}, {"sha": "7c0d564a39736e1ce73c5fff844aca358c1f0aa5", "filename": "gcc/testsuite/gcc.target/i386/avx-vaeskeygenassist-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaeskeygenassist-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaeskeygenassist-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vaeskeygenassist-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vaes } */\n+/* { dg-options \"-O2 -maes -mavx\" } */\n+\n+#define CHECK_H \"aes-avx-check.h\"\n+#define TEST aes_avx_test\n+\n+#include \"aeskeygenassist.c\""}, {"sha": "c5f3c1d38feab29c509b5758ff2157156c99185d", "filename": "gcc/testsuite/gcc.target/i386/avx-vandnpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-andnpd-1.c\""}, {"sha": "27e4ccdd187d80bfca5250d987d0df51b89c5bd2", "filename": "gcc/testsuite/gcc.target/i386/avx-vandnpd-256-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  long long source1[4]={34545, 95567, 23443, 5675};\n+  long long source2[4]={674, 57897, 93459, 45624};\n+  long long d[4];\n+  long long e[4];\n+\n+  s1.x = _mm256_loadu_pd ((double *)source1);\n+  s2.x = _mm256_loadu_pd ((double *)source2);\n+  u.x = _mm256_andnot_pd (s1.x, s2.x);\n+\n+  _mm256_storeu_pd ((double *)d, u.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (~source1[i]) & source2[i];\n+\n+  if (checkVl (d, e, 4))\n+    abort ();\n+}"}, {"sha": "357db7e8d466d0a35f09bac16e6dc6ab333f092d", "filename": "gcc/testsuite/gcc.target/i386/avx-vandnps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-andnps-1.c\""}, {"sha": "7b5a3dbe860ce709ee9abc6de5accb29f830fc11", "filename": "gcc/testsuite/gcc.target/i386/avx-vandnps-256-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandnps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  int source1[8]={34545, 95567, 23443, 5675, 2323, 67, 2345, 45667};\n+  int source2[8]={674, 57897, 93459, 45624, 54674, 1237, 67436, 79608};\n+  int d[8];\n+  int e[8];\n+\n+  s1.x = _mm256_loadu_ps ((float *)source1);\n+  s2.x = _mm256_loadu_ps ((float *)source2);\n+  u.x = _mm256_andnot_ps (s1.x, s2.x);\n+\n+  _mm256_storeu_ps ((float *)d, u.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (~source1[i]) & source2[i];\n+\n+  if (checkVi (d, e, 8))\n+    abort ();\n+}"}, {"sha": "0a9532d5dbcd9480128d4717e9d55ba77855c0bd", "filename": "gcc/testsuite/gcc.target/i386/avx-vandpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-andpd-1.c\""}, {"sha": "b0675ec6586b8b515952b3f6f792e0e21f53b3aa", "filename": "gcc/testsuite/gcc.target/i386/avx-vandpd-256-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+\n+  union\n+  {\n+     double d[4];\n+     long long ll[4];\n+  }source1, source2, e;\n+\n+  s1.x = _mm256_set_pd (345.45, 95567, 2344.3, 567.5);\n+  s2.x = _mm256_set_pd (674, 57.897, 934.59, 4562.4);\n+\n+  _mm256_storeu_pd (source1.d, s1.x);\n+  _mm256_storeu_pd (source2.d, s2.x);\n+\n+  u.x = _mm256_and_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e.ll[i] = source1.ll[i] & source2.ll[i];\n+\n+  if (check_union256d (u, e.d))\n+    abort ();\n+}"}, {"sha": "54bba79ab0bfc71e101c9305f8e9758984156885", "filename": "gcc/testsuite/gcc.target/i386/avx-vandps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-andps-1.c\""}, {"sha": "4dc123bf371c977eb556dc068f2d4b7d700e1903", "filename": "gcc/testsuite/gcc.target/i386/avx-vandps-256-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vandps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  \n+  union\n+  {\n+    float f[8];\n+    int   i[8];\n+  }source1, source2, e;\n+\n+  s1.x = _mm256_set_ps (34545, 95567, 23443, 5675, 2323, 67, 2345, 45667);\n+  s2.x = _mm256_set_ps (674, 57897, 93459, 45624, 54674, 1237, 67436, 79608);\n+  \n+  _mm256_storeu_ps (source1.f, s1.x);\n+  _mm256_storeu_ps (source2.f, s2.x);\n+\n+  u.x = _mm256_and_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e.i[i] = source1.i[i] & source2.i[i];\n+\n+  if (check_union256 (u, e.f))\n+    abort ();\n+}"}, {"sha": "0a9031f4485f574d243a38266f7b716f687dcb04", "filename": "gcc/testsuite/gcc.target/i386/avx-vblendpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-blendpd.c\""}, {"sha": "39e7c1bd55335515e363c2a1a67ac4116c7e99d2", "filename": "gcc/testsuite/gcc.target/i386/avx-vblendpd-256-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 12\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (34545, 95567, 23443, 5675);\n+  s2.x = _mm256_set_pd (674, 57897, 93459, 45624);\n+  u.x = _mm256_blend_pd (s1.x, s2.x, MASK);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (MASK & (0x01 << i)) ? s2.a[i] : s1.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "9f5dde29fe45454b748e83485d8276aa2ed13d6b", "filename": "gcc/testsuite/gcc.target/i386/avx-vblendps-256-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 114\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (34545, 95567, 23443, 5675, 2323, 67, 2345, 45667);\n+  s2.x = _mm256_set_ps (674, 57897, 93459, 45624, 54674, 1237, 67436, 79608);\n+  u.x = _mm256_blend_ps (s1.x, s2.x, MASK);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (MASK & (0x01 << i)) ? s2.a[i] : s1.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "2f668c22e624461244742e99e08de5c3e8075cf7", "filename": "gcc/testsuite/gcc.target/i386/avx-vblendvpd-256-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 6\n+#endif\n+\n+#define mask_v(pos) (((MASK >> (pos)) & 1ULL) << 63)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, mask, s1, s2;\n+  long long m[4]={mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (34545, 95567, 23443, 5675);\n+  s2.x = _mm256_set_pd (674, 57897, 93459, 45624);\n+  mask.x = _mm256_set_pd (m[0], m[1], m[2], m[3]);\n+\n+  u.x = _mm256_blendv_pd (s1.x, s2.x, mask.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (m[i] & (1ULL << 63)) ? s2.a[i] : s1.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "0e48d690e85cd69d9369b41c3f5727f73750389f", "filename": "gcc/testsuite/gcc.target/i386/avx-vblendvps-256-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vblendvps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 214\n+#endif\n+\n+#define mask_v(pos) (((MASK >> (pos)) & 1U) << 31)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, mask, s1, s2;\n+  int m[8]={mask_v(0), mask_v(1), mask_v(2), mask_v(3), \n+            mask_v(4), mask_v(5), mask_v(6), mask_v(7)};\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (34545, 95567, 23443, 5675, 2323, 67, 2345, 45667);\n+  s2.x = _mm256_set_ps (674, 57897, 93459, 45624, 54674, 1237, 67436, 79608);\n+  mask.x = _mm256_loadu_ps ((float *)m);\n+\n+  u.x = _mm256_blendv_ps (s1.x, s2.x, mask.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (m[i] & (1ULL << 31)) ? s2.a[i] : s1.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "e0cddd1a94c3fd233efdf8215859e6543c21ca9b", "filename": "gcc/testsuite/gcc.target/i386/avx-vbroadcastf128-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u;\n+  union128 s;\n+  float e [8];\n+\n+  s.x = _mm_set_ps(24.43, 68.346, 43.35, 546.46);\n+  u.x = _mm256_broadcast_ps (&s.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i+4] = e[i] = s.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "eb4ec579b40a4807fcb1814f9da84a7351c9913e", "filename": "gcc/testsuite/gcc.target/i386/avx-vbroadcastf128-256-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastf128-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u;\n+  union128d s;\n+  double e [4];\n+\n+  s.x = _mm_set_pd(24.43, 68.346);\n+  u.x = _mm256_broadcast_pd (&s.x);\n+\n+  e[0] = e[2] = s.a[0];\n+  e[1] = e[3] = s.a[1];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "329405f31284bac34d8a993e4cc46776de55b576", "filename": "gcc/testsuite/gcc.target/i386/avx-vbroadcastsd-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  double s = 39678;\n+  union256d u;\n+  double e [4];\n+\n+  u.x = _mm256_broadcast_sd (&s);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s;\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "d6bf2ce61c6c3f24232964bd0b1fd138548db351", "filename": "gcc/testsuite/gcc.target/i386/avx-vbroadcastss-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  float s = 39678.3452;\n+  union256 u;\n+  float e [8];\n+\n+  u.x = _mm256_broadcast_ss (&s);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s;\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "56723cb282ec21c1429ef7825c4e1e4fd959c56f", "filename": "gcc/testsuite/gcc.target/i386/avx-vbroadcastss-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vbroadcastss-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  float s = 39678.3452;\n+  union128 u;\n+  float e [4];\n+\n+  u.x = _mm_broadcast_ss (&s);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s;\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "be69d47e82253719b94a498396d9d85290775c60", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmppd-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+double s1[2]={2134.3343,6678.346};\n+double s2[2]={41124.234,6678.346};\n+long long  e[2];\n+\n+union\n+{\n+  double d[2];\n+  long long ll[2];\n+}d;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVl(d.ll, e, 2)){\n+\tprintf(\"mm_cmp_pd(%s: 0x%x) FAILED\\n\", id, imm);\n+    }\n+}\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    for (i = 0; i < 2; i++) e[i] = rel ? -1 : 0;\t\\\n+    source1 = _mm_loadu_pd(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_pd(s2);\t\t\t\t\\\n+    dest = _mm_cmp_pd(source1, source2, imm);\t\t\\\n+    _mm_storeu_pd(d.d, dest);\t\t\t\\\n+    check(imm, \"\" #imm \"\");\n+\n+static void\n+avx_test ()\n+{\n+    __m128d source1, source2, dest;\n+    int i;\n+\n+    d.ll[0] = e[0] = 222;\n+    d.ll[1] = e[1] = -33;\n+    \n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1);\n+    \n+}"}, {"sha": "7000bb07feb53d5969ff4861d6b6159cbbb1761e", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmppd-256-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmppd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+double s1[4]={2134.3343,6678.346,453.345635,54646.464356};\n+double s2[4]={41124.234,6678.346,8653.65635,856.43576};\n+long long e[4];\n+\n+union\n+{\n+  double d[4];\n+  long long ll[4];\n+}d;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVl(d.ll, e, 4)){\n+\tprintf(\"mm256_cmp_pd(%s: 0x%x) FAILED\\n\", id, imm);\n+    }\n+}\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++) e[i] = rel ? -1 : 0;\t\\\n+    source1 = _mm256_loadu_pd(s1);\t\t\t\\\n+    source2 = _mm256_loadu_pd(s2);\t\t\t\\\n+    dest = _mm256_cmp_pd(source1, source2, imm);\t\\\n+    _mm256_storeu_pd(d.d, dest);\t\t\\\n+    check(imm, \"\" #imm \"\");\n+\n+static void\n+avx_test ()\n+{\n+    __m256d source1, source2, dest;\n+    int i;\n+    \n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1);\n+\n+}"}, {"sha": "753f2ce64d0b5e0b9f9d7e9b86481a90c7356dd2", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmpps-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+float s1[4]={2134.3343,6678.346,453.345635,54646.464356};\n+float s2[4]={41124.234,6678.346,8653.65635,856.43576};\n+int e[4];\n+\n+union\n+{\n+  float f[4];\n+  int   i[4];\n+}d;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVi(d.i, e, 4)){\n+\tprintf(\"mm_cmp_ps(0x%x, %s) FAILED\\n\", imm, id);\n+    }\n+}\n+\n+static void\n+avx_test ()\n+{\n+    __m128 source1, source2, dest;\n+    int i;\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++) e[i] = rel ? -1 : 0;\t\\\n+    source1 = _mm_loadu_ps(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_ps(s2);\t\t\t\t\\\n+    dest = _mm_cmp_ps(source1, source2, imm);\t\t\\\n+    _mm_storeu_ps(d.f, dest);\t\t\t\\\n+    check(imm, \"\" #imm \"\");\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1);\n+}"}, {"sha": "c1292a25555b731003e432dc0294e141454f2308", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmpps-256-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+float s1[8]={2134.3343,6678.346,453.345635,54646.464356,456,678567,123,2346};\n+float s2[8]={41124.234,6678.346,8653.65635,856.43576,7456,134,539,54674};\n+int e[8];\n+\n+union\n+{\n+  float f[8];\n+  int   i[8];\n+}d;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVi(d.i, e, 8)){\n+\tprintf(\"mm256_cmp_ps(0x%x, %s) FAILED\\n\", imm, id);\n+    }\n+}\n+\n+static void\n+avx_test ()\n+{\n+    __m256 source1, source2, dest;\n+    int i;\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++) e[i] = rel ? -1 : 0;\t\\\n+    source1 = _mm256_loadu_ps(s1);\t\t\t\\\n+    source2 = _mm256_loadu_ps(s2);\t\t\t\\\n+    dest = _mm256_cmp_ps(source1, source2, imm);\t\\\n+    _mm256_storeu_ps(d.f, dest);\t\t        \\\n+    check(imm, \"\" #imm \"\");\n+\n+    CMP(_CMP_EQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_US, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_US, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[i], s2[i]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_US, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_US, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[i], s2[i]) && s1[i] == s2[i]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[i], s2[i]) && s1[i] < s2[i]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[i], s2[i]) && s1[i] <= s2[i]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[i], s2[i]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[i], s2[i]) || s1[i] != s2[i]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[i], s2[i]) || s1[i] >= s2[i]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[i], s2[i]) || s1[i] > s2[i]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[i], s2[i]));\n+    CMP(_CMP_EQ_US, isunordered(s1[i], s2[i]) || s1[i] == s2[i]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[i], s2[i]) || s1[i] < s2[i]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[i], s2[i]) || s1[i] <= s2[i]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[i], s2[i]) && s1[i] != s2[i]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[i], s2[i]) && s1[i] >= s2[i]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[i], s2[i]) && s1[i] > s2[i]);\n+    CMP(_CMP_TRUE_US, 1);\n+}"}, {"sha": "97ca6e6c50f0b18cc7ebcd44877d9ca80b0555c8", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmpsd-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+double s1[] = {2134.3343, 6678.346};\n+double s2[] = {41124.234, 6678.346};\n+long long dd[] =  {1, 2}, d[2];\n+union{long long l[2]; double d[2];} e;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVl(d, e.l, 2)){\n+\tprintf(\"mm_cmp_sd(%s: 0x%x) FAILED\\n\", id, imm);\n+    }\n+}\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    e.l[0] = rel ? -1 : 0;\t                        \\\n+    dest = _mm_loadu_pd((double*)dd);\t      \t\t\\\n+    source1 = _mm_loadu_pd(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_pd(s2);\t\t\t\t\\\n+    dest = _mm_cmp_sd(source1, source2, imm);\t\t\\\n+    _mm_storeu_pd((double*) d, dest);\t\t\t\\\n+    check(imm, \"\" #imm \"\");\n+\n+static void\n+avx_test ()\n+{\n+    __m128d source1, source2, dest;\n+\n+    e.d[1] = s1[1];\n+    \n+    CMP(_CMP_EQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_US, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_US, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[0], s2[0]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_US, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_US, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[0], s2[0]));\n+    CMP(_CMP_EQ_US, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_US, 1);\n+}"}, {"sha": "627333a860c6baa272943c3e6a57512958e121e8", "filename": "gcc/testsuite/gcc.target/i386/avx-vcmpss-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcmpss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -std=c99\" } */\n+\n+#include \"avx-check.h\"\n+#include <math.h>\n+\n+float s1[]={2134.3343, 6678.346, 453.345635, 54646.464356};\n+float s2[]={41124.234, 6678.346, 8653.65635, 856.43576};\n+int dd[] = {1, 2, 3, 4};\n+float d[4];\n+union{int i[4]; float f[4];} e;\n+\n+void check(unsigned imm, char *id)\n+{\n+    if(checkVi((int*)d, e.i, 4)){\n+\tprintf(\"mm_cmp_ss(0x%x, %s) FAILED\\n\", imm, id);\n+    }\n+}\n+\n+static void\n+avx_test ()\n+{\n+    __m128 source1, source2, dest;\n+    int i;\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    e.i[0] = rel ? -1 : 0;\t                        \\\n+    dest = _mm_loadu_ps((float*)dd);\t\t\t\\\n+    source1 = _mm_loadu_ps(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_ps(s2);\t\t\t\t\\\n+    dest = _mm_cmp_ss(source1, source2, imm);\t\t\\\n+    _mm_storeu_ps(d, dest);\t\t\t        \\\n+    check(imm, \"\" #imm \"\");\n+\n+    for(i = 1; i < 4; i++) e.f[i] = s1[i];\n+    \n+    CMP(_CMP_EQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OS, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OS, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_Q, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_UQ, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_US, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_US, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_Q, !isunordered(s1[0], s2[0]));\n+\n+    CMP(_CMP_EQ_UQ, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_US, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_US, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+\n+    CMP(_CMP_FALSE_OQ, 0);\n+    CMP(_CMP_NEQ_OQ, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OS, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OS, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_UQ, 1);\n+\n+    CMP(_CMP_EQ_OS, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(_CMP_LT_OQ, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(_CMP_LE_OQ, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(_CMP_UNORD_S, isunordered(s1[0], s2[0]));\n+    CMP(_CMP_NEQ_US, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(_CMP_NLT_UQ, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(_CMP_NLE_UQ, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(_CMP_ORD_S, !isunordered(s1[0], s2[0]));\n+    CMP(_CMP_EQ_US, isunordered(s1[0], s2[0]) || s1[0] == s2[0]);\n+    CMP(_CMP_NGE_UQ, isunordered(s1[0], s2[0]) || s1[0] < s2[0]);\n+    CMP(_CMP_NGT_UQ, isunordered(s1[0], s2[0]) || s1[0] <= s2[0]);\n+    CMP(_CMP_FALSE_OS, 0);\n+    CMP(_CMP_NEQ_OS, !isunordered(s1[0], s2[0]) && s1[0] != s2[0]);\n+    CMP(_CMP_GE_OQ, !isunordered(s1[0], s2[0]) && s1[0] >= s2[0]);\n+    CMP(_CMP_GT_OQ, !isunordered(s1[0], s2[0]) && s1[0] > s2[0]);\n+    CMP(_CMP_TRUE_US, 1);\n+}"}, {"sha": "419249b46e45da8c0a5d69a469a6ed6c67dee2b8", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-1.c\""}, {"sha": "9f757ef04de7d301d700d61cab36125e68e5ca27", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-2.c\""}, {"sha": "3bb5453c26d4c40bddca1de971f373e014f8efcc", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-3.c\""}, {"sha": "f5c7a5d3b60eebfced8231fae588ac99e3d1b315", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-4.c\""}, {"sha": "314cb09ee53ad370760fc9a2535b054069132edc", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-5.c\""}, {"sha": "72f54138f754284df81361dd7338aaf27e45958a", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-6.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-6.c\""}, {"sha": "6b214fd1182d66ef1bbe99427272996b3b11d126", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-1.c\""}, {"sha": "f83b977a42063f7603499ddd3c127da7f7be334d", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-2.c\""}, {"sha": "a2db9e91ca1711937ef51ff1d78f72aa030e84d9", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-3.c\""}, {"sha": "530dfc0c5ba59f71e568c867b9651d39f76f3409", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-4.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-4.c\""}, {"sha": "b149736b3df2e50ea8c0b5a79775d732b232933b", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-5.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-5.c\""}, {"sha": "45e94daf365632f2395943f591ea3c5fd0e091d0", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-6.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-6.c\""}, {"sha": "5d08be9029d7bfa6cbe8ff152263f9f93d784242", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtdq2pd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtdq2pd-1.c\""}, {"sha": "4b39ffe9a2d6c6d4e45d06849042b0fd309d1cb2", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtdq2pd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2pd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union128i_d s1;\n+  union256d u;\n+  double e [4];\n+\n+  s1.x = _mm_set_epi32 (2134.3343,1234.635654,453.345635,54646.464356);\n+  u.x = _mm256_cvtepi32_pd (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (double)s1.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "1e2ad625446b1de622bb8a94319d633bfe967b57", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtdq2ps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtdq2ps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtdq2ps-1.c\""}, {"sha": "752497514f6920373ebe2b82d7ef43cb6ab81ae0", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtpd2dq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtpd2dq-1.c\""}, {"sha": "30e93af927aba10816f02955aabbdecbf5593438", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtpd2dq-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2dq-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d s1;\n+  union128i_d u;\n+  int e [4];\n+\n+  s1.x = _mm256_set_pd (2.78, 7777768.82, 23.67, 536.46);\n+  u.x = _mm256_cvtpd_epi32 (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (int)(s1.a[i] + 0.5);\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "5bc43d561c7b0b9683d6188d9a573666af5e3852", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtpd2ps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtpd2ps-1.c\""}, {"sha": "987f2b263f9c6d22aeb0900d46dbea53b505561b", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtpd2ps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtpd2ps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d s1;\n+  union128 u;\n+  float e [4];\n+\n+  s1.x = _mm256_set_pd (2.43, 68.46, 23.35, 536.46);\n+  u.x = _mm256_cvtpd_ps (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (float)s1.a[i];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "36d90a265a774f15c736f36eea3df8644ba97f50", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtps2dq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtps2dq-1.c\""}, {"sha": "47ec12b8d0fd580139f515c2d23cfe7f88c58f3a", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtps2dq-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2dq-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 s1;\n+  union256i_d u;\n+  int e [8];\n+\n+  s1.x = _mm256_set_ps (2.78, 77768.82, 23.67, 536.46, 4564.6575, 568.1263, 9889.2422, 7352.4563);\n+  u.x = _mm256_cvtps_epi32 (s1.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (int)(s1.a[i] + 0.5);\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "114a71976cf1fb8774e20a2916618863d5b5e445", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtps2pd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtps2pd-1.c\""}, {"sha": "9d48998a3fd54c5448806e4124e18b81617fed03", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtps2pd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtps2pd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union128 s1;\n+  union256d u;\n+  double e [4];\n+\n+  s1.x = _mm_set_ps (2.43, 68.46, 23.35, 536.46);\n+  u.x = _mm256_cvtps_pd (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (double)s1.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "53c61a2ea1bc1275f2dcecefa50f698c62319335", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsd2si-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtsd2si-1.c\""}, {"sha": "a5b04fa5eabe72ec5e208866e0d6a14473f1896e", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsd2si-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2si-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtsd2si-2.c\""}, {"sha": "c0e224d06fee7f31eb6da4d7993ee431b5ba6181", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsd2ss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsd2ss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtsd2ss-1.c\""}, {"sha": "35da346d6f222623d9f489f661e1b628c52f9451", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsi2sd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtsi2sd-1.c\""}, {"sha": "49096cfceb17634b4e33e148f0d0d9e07623510c", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsi2sd-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2sd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtsi2sd-2.c\""}, {"sha": "12ac36c72f4cb41a0ba2e70f3846ea94ddc70c6f", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsi2ss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvtsi2ss-1.c\""}, {"sha": "765c455f8721f1940e895550d592a38d7c4af8a0", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtsi2ss-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtsi2ss-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvtsi2ss-2.c\""}, {"sha": "0f6365c35efa99fcddaa5b5891babd5c3c8b20c4", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtss2sd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2sd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvtss2sd-1.c\""}, {"sha": "3a51ff168e8ff1d03023d67dfae37341d68aa9dd", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtss2si-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvtss2si-1.c\""}, {"sha": "5160b8de10c6ea87a999433d2a2ad2fc6ffebdaf", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvtss2si-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvtss2si-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvtss2si-2.c\""}, {"sha": "f27160a6b009e68ffa17873ae6ce903c9cdd236a", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttpd2dq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvttpd2dq-1.c\""}, {"sha": "16edf8ac7cfb6f7e70fd9115e1f1e935d376d354", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttpd2dq-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttpd2dq-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d s1;\n+  union128i_d u;\n+  int e [4];\n+\n+  s1.x = _mm256_set_pd (2.43, 68.78, 23.61, 536.46);\n+  u.x = _mm256_cvttpd_epi32 (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (int)s1.a[i];\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "f8ab025db1071a230fe7137641ac78c46f6d70fe", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttps2dq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvttps2dq-1.c\""}, {"sha": "0a580f015d2e06bb0c93e1e4271291c3dad7355a", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttps2dq-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttps2dq-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 s1;\n+  union256i_d u;\n+  int e [8];\n+\n+  s1.x = _mm256_set_ps (45.64, 4564.56, 2.3, 5.5, 57.57, 89.34, 54.12, 954.67);\n+  u.x = _mm256_cvttps_epi32 (s1.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = (int)s1.a[i];\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "b9963d4ab9df787804be3284217d9b2115818fd8", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttsd2si-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvttsd2si-1.c\""}, {"sha": "dcf487afb57219f5b4c598d4d3b8ce74963469b3", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttsd2si-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttsd2si-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-cvttsd2si-2.c\""}, {"sha": "94c94c1d62477b4f644fd54e3384a4d3d1cf1e51", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttss2si-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvttss2si-1.c\""}, {"sha": "14b072146c60bb4750933ae08408ca58ea6639ba", "filename": "gcc/testsuite/gcc.target/i386/avx-vcvttss2si-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcvttss2si-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-cvttss2si-2.c\""}, {"sha": "57ddfd1f7d4b9865ff9838e768c489afa619daad", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-divpd-1.c\""}, {"sha": "1840e3d560dade9023433a837446195cffd689f7", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivpd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_div_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] / s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "d4fcaebdfb580e9ad00235a6db36815e8f2792ca", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-divps-1.c\""}, {"sha": "3ff4c7ee2c259c06b13c804c0c55df0b9008b7e3", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e[8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_div_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] / s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "faca3ed1c24c603c30a862c7ea5339d0c99315d0", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-divsd-1.c\""}, {"sha": "f5740eba4244c20558d717432557aea93792b20b", "filename": "gcc/testsuite/gcc.target/i386/avx-vdivss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdivss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-divss-1.c\""}, {"sha": "7d04cc4bcc8f0373f007ba0c08d8bd83c48a034f", "filename": "gcc/testsuite/gcc.target/i386/avx-vdppd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-dppd-1.c\""}, {"sha": "6e30faf45f422fa266cbb937d70157be057891e9", "filename": "gcc/testsuite/gcc.target/i386/avx-vdppd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdppd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-dppd-2.c\""}, {"sha": "75ba0be5fcd860944375679b3c70a5edde08a0f6", "filename": "gcc/testsuite/gcc.target/i386/avx-vdpps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-dpps-1.c\""}, {"sha": "b54b90969da9637edf46f086e92711facd456e2a", "filename": "gcc/testsuite/gcc.target/i386/avx-vdpps-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vdpps-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-dpps-2.c\""}, {"sha": "4919d640f0fb85bd68afdb4617141b8390b9e183", "filename": "gcc/testsuite/gcc.target/i386/avx-vextractf128-256-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef OFFSET\n+#define OFFSET 1\n+#endif\n+\n+#if OFFSET < 0 || OFFSET > 1\n+#error OFFSET must be within [0..1]\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  union256d s1;\n+  union128d u;\n+  double e [2];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  u.x = _mm256_extractf128_pd (s1.x, OFFSET);\n+\n+  __builtin_memcpy (e, s1.a + OFFSET * 2, sizeof e);\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "db26e181c469988a2afaae34af6828ce02990197", "filename": "gcc/testsuite/gcc.target/i386/avx-vextractf128-256-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractf128-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef OFFSET\n+#define OFFSET 1\n+#endif\n+\n+#if OFFSET < 0 || OFFSET > 1\n+#error OFFSET must be within [0..1]\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  union256 s1;\n+  union128 u;\n+  float e [4];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  u.x = _mm256_extractf128_ps (s1.x, OFFSET);\n+\n+  __builtin_memcpy (e, s1.a + OFFSET * 4, sizeof e);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "4215c34dc660e3fec752c29a6f36e5bca2d73b73", "filename": "gcc/testsuite/gcc.target/i386/avx-vextractps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vextractps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-extractps.c\""}, {"sha": "7809c850c21533fe7f2aa05909b1133edd6709ac", "filename": "gcc/testsuite/gcc.target/i386/avx-vhaddpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-haddpd.c\""}, {"sha": "b9245a3682299b6dae7d077e03828d783c4b8575", "filename": "gcc/testsuite/gcc.target/i386/avx-vhaddpd-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_hadd_pd (s1.x, s2.x);\n+\n+  e[0] = s1.a[0] + s1.a[1];\n+  e[1] = s2.a[0] + s2.a[1];\n+  e[2] = s1.a[2] + s1.a[3];\n+  e[3] = s2.a[2] + s2.a[3];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "73dcfb6c4c81fc642cd1240d05ec7daf915c070e", "filename": "gcc/testsuite/gcc.target/i386/avx-vhaddps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-haddps.c\""}, {"sha": "fbc58238a3c80bc4543c847ff9b7cebc21ac3722", "filename": "gcc/testsuite/gcc.target/i386/avx-vhaddps-256-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhaddps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_hadd_ps (s1.x, s2.x);\n+\n+  e[0] = s1.a[0] + s1.a[1];\n+  e[1] = s1.a[2] + s1.a[3];\n+  e[2] = s2.a[0] + s2.a[1];\n+  e[3] = s2.a[2] + s2.a[3];\n+  e[4] = s1.a[4] + s1.a[5];\n+  e[5] = s1.a[6] + s1.a[7];\n+  e[6] = s2.a[4] + s2.a[5];\n+  e[7] = s2.a[6] + s2.a[7];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "68d14327ae621566f8df4006cd1175c1d09b579b", "filename": "gcc/testsuite/gcc.target/i386/avx-vhsubpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-hsubpd.c\""}, {"sha": "df710d7f0edc3a2721d49deffb27421801e3a48b", "filename": "gcc/testsuite/gcc.target/i386/avx-vhsubpd-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_hsub_pd (s1.x, s2.x);\n+\n+  e[0] = s1.a[0] - s1.a[1];\n+  e[1] = s2.a[0] - s2.a[1];\n+  e[2] = s1.a[2] - s1.a[3];\n+  e[3] = s2.a[2] - s2.a[3];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "2ddd2c0c8e0d3227fd29a8e640a72fbe4d1e170b", "filename": "gcc/testsuite/gcc.target/i386/avx-vhsubps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-hsubps.c\""}, {"sha": "aa601c8a7a8c53be6309cf9c92b81b6ed6ed4960", "filename": "gcc/testsuite/gcc.target/i386/avx-vhsubps-256-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vhsubps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_hsub_ps (s1.x, s2.x);\n+\n+  e[0] = s1.a[0] - s1.a[1];\n+  e[1] = s1.a[2] - s1.a[3];\n+  e[2] = s2.a[0] - s2.a[1];\n+  e[3] = s2.a[2] - s2.a[3];\n+  e[4] = s1.a[4] - s1.a[5];\n+  e[5] = s1.a[6] - s1.a[7];\n+  e[6] = s2.a[4] - s2.a[5];\n+  e[7] = s2.a[6] - s2.a[7];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "2390e5c7e96879167b47ce69f98f710226b7e168", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef OFFSET\n+#define OFFSET 1\n+#endif\n+\n+#if OFFSET < 0 || OFFSET > 1\n+#error OFFSET must be within [0..1]\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1;\n+  union128d s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm_set_pd (68543.731254, 3452.578238);\n+  u.x = _mm256_insertf128_pd (s1.x, s2.x, OFFSET);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i];\n+\n+  for (i=0; i < 2; i++)\n+    e[i + (OFFSET * 2)] = s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "ce0b23bbf4e54a47c6bb54be5a63ab3342555350", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef OFFSET\n+#define OFFSET 0\n+#endif\n+\n+#if OFFSET < 0 || OFFSET > 1\n+#error OFFSET must be within [0..1]\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1;\n+  union128 s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (39.467, 45.789, 78.342, 67.892, 76.678, 12.963, 29.746, 24.753);\n+  s2.x = _mm_set_ps (57.493, 38.395, 22.479, 31.614);\n+  u.x = _mm256_insertf128_ps (s1.x, s2.x, OFFSET);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i];\n+\n+  for (i=0; i < 4; i++)\n+    e[i + (OFFSET * 4)] = s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "89834d5540855f5b9a96d5f0078eeba380de1638", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef OFFSET\n+#define OFFSET 0\n+#endif\n+\n+#if OFFSET < 0 || OFFSET > 1\n+#error OFFSET must be within [0..1]\n+#endif\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256i_d u, s1;\n+  union128i_d s2;\n+  int e [8];\n+\n+  s1.x = _mm256_set_epi32 (39467, 45789, 78342, 67892, 76678, 12963, 29746, 24753);\n+  s2.x = _mm_set_epi32 (57493, 38395, 22479, 31614);\n+  u.x = _mm256_insertf128_si256 (s1.x, s2.x, OFFSET);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i];\n+\n+  for (i=0; i < 4; i++)\n+    e[i + (OFFSET * 4)] = s2.a[i];\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "ad1f33308f6cbe0ce0b91bd90c68bcba132a88ac", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-insertps-1.c\""}, {"sha": "7b93174aa7a088cd80ca76ab7cc01308d5575b1c", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertps-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-insertps-2.c\""}, {"sha": "7ecea79e8986b088a5f3882a801984eb343edaa4", "filename": "gcc/testsuite/gcc.target/i386/avx-vlddqu-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-lddqu.c\""}, {"sha": "82c0ed580024202d58ae5192460bcdd863fbbc28", "filename": "gcc/testsuite/gcc.target/i386/avx-vlddqu-256-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vlddqu-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int e[8]={ 23, 67, 53, 6, 4, 6, 85, 234};\n+  union256i_d u;\n+\n+  u.x = _mm256_lddqu_si256 ((__m256i *) e);\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "f29826bbbd4c7221b2b0bef7d499be33094ae7b9", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-256-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 7\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  long long m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  double s[4] = {1.1, 2.2, 3.3, 4.4};\n+  union256d u, mask;\n+  double e [4] = {0.0};\n+\n+  mask.x = _mm256_loadu_pd ((double*)m);\n+  u.x = _mm256_maskload_pd (s, mask.x);\n+\n+  for (i = 0 ; i < 4; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "1e574b6993bae15fd446de3413bc44531af9177c", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-256-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 6\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  long long m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  double s[4] = {1.1, 2.2, 3.3, 4.4};\n+  double e [4] = {0.0};\n+  double d [4] = {0.0};\n+  union256d src, mask;\n+  \n+  src.x = _mm256_loadu_pd (s);\n+  mask.x = _mm256_loadu_pd ((double*)m);\n+  _mm256_maskstore_pd (d, mask.x, src.x);\n+\n+  for (i = 0 ; i < 4; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (checkVd (d, e, 4))\n+    abort ();\n+}"}, {"sha": "9e6c7f91d914d90c86cee2abba484c6f1a5edf22", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-256-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 134\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3), mask_v(4), mask_v(5), mask_v(6), mask_v(7)};\n+  float s[8] = {1,2,3,4,5,6,7,8};\n+  union256 u, mask;\n+  float e [8] = {0.0};\n+\n+  mask.x = _mm256_loadu_ps ((float*)m);\n+  u.x = _mm256_maskload_ps (s, mask.x);\n+\n+  for (i = 0 ; i < 8; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "90d91a06a6d02834cb97aeb2d9c06b88fbc01960", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-256-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 214\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3), mask_v(4), mask_v(5), mask_v(6), mask_v(7)};\n+  float s[8] = {1,2,3,4,5,6,7,8};\n+  union256 src, mask;\n+  float e [8] = {0.0};\n+  float d [8] = {0.0};\n+\n+  src.x = _mm256_loadu_ps (s);\n+  mask.x = _mm256_loadu_ps ((float *)m);\n+  _mm256_maskstore_ps (d, mask.x, src.x);\n+\n+  for (i = 0 ; i < 8; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (checkVf (d, e, 8))\n+    abort ();\n+}"}, {"sha": "981e2a5b6e75970b75263fe68ef837afc9466381", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-maxpd-1.c\""}, {"sha": "7b9c91c03888996bb9c935ef5516619c7d3f1307", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxpd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_max_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] > s2.a[i] ? s1.a[i] : s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "e4c41450d91fcea893f5fe68f0a55275ddd1ae0c", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-maxps-1.c\""}, {"sha": "44bb7ed9c49a25130a8134046f08d6c2c59d477b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 24567.16, 3.15, 4567.14, 5.13, 65467.12, 788.11, 8.9);\n+  u.x = _mm256_max_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] > s2.a[i] ? s1.a[i] : s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "e24410cd145b4e9a67098709ddca2c3639e6d680", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-maxsd-1.c\""}, {"sha": "afe5d0adbda810f3376cccb73b9857ce9d6d0396", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaxss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaxss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-maxss-1.c\""}, {"sha": "a7eb64972973811b2a2e65b5d99a9cda8fb8d934", "filename": "gcc/testsuite/gcc.target/i386/avx-vminpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-minpd-1.c\""}, {"sha": "555e029bd487d2727592b111129675289232edbb", "filename": "gcc/testsuite/gcc.target/i386/avx-vminpd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_min_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] < s2.a[i] ? s1.a[i] : s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "dfb07ba2367b162b8644e5957fedc6d4b6faee18", "filename": "gcc/testsuite/gcc.target/i386/avx-vminps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-minps-1.c\""}, {"sha": "19ac83a723c3a7b01547468f5388598ac553a928", "filename": "gcc/testsuite/gcc.target/i386/avx-vminps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 24567.16, 3.15, 4567.14, 5.13, 65467.12, 788.11, 8.9);\n+  u.x = _mm256_min_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] < s2.a[i] ? s1.a[i] : s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "5aa1d9aa0a15c9bc6a62915da678d78a09ab663f", "filename": "gcc/testsuite/gcc.target/i386/avx-vminsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-minsd-1.c\""}, {"sha": "c2e6f2799f575fcfa3bffff8fb3c5593a574360c", "filename": "gcc/testsuite/gcc.target/i386/avx-vminss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vminss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-minss-1.c\""}, {"sha": "5d97a5d2f3fe5df4e767871c965515496c41603b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovapd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movapd-1.c\""}, {"sha": "9856d2907360806bfa61e7e8e11995b0b91677e4", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovapd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movapd-2.c\""}, {"sha": "d91212283071ef12695148c3214a01b095c159d8", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovapd-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline, unused))\n+test (double *e)\n+{\n+  return _mm256_load_pd (e);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u;\n+  double e [4] __attribute__ ((aligned (8)))  = {41124.234,2344.2354,8653.65635,856.43576};\n+\n+  u.x = test (e);\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "96a664ac11e5024b0d50e81a6642cfe3d82a8235", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovapd-256-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovapd-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+__attribute__((noinline, unused))\n+test (double *e, __m256d a)\n+{\n+  return _mm256_store_pd (e, a);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u;\n+  double e [4] __attribute__ ((aligned (8))) = {0.0};\n+\n+  u.x = _mm256_set_pd (39578.467285, 7856.342941, 85632.783567, 47563.234215);\n+\n+  test (e, u.x);\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "a10894c35d253e623e3fdcc9d9c54ade812ad1a2", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovaps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movaps-1.c\""}, {"sha": "ad0cf47c4b1423f0b3641e7b43a2f30f1af8e7d3", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovaps-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movaps-2.c\""}, {"sha": "74681c326c899f48eb81558e0e2ad31ca325d108", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovaps-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256\n+__attribute__((noinline, unused))\n+test (float *e)\n+{\n+  return _mm256_load_ps (e);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u;\n+  float e [8] __attribute__ ((aligned (32)))  = {24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4};\n+\n+  u.x = test (e);\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "dbd5227c0d7ca84c748988a5c6cb747eaf828649", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovaps-256-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovaps-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+__attribute__((noinline, unused))\n+test (float *e, __m256 a)\n+{\n+  return _mm256_store_ps (e, a);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u;\n+  float e [8] __attribute__ ((aligned (32))) = {0.0};\n+\n+  u.x = _mm256_set_ps (1.17, 24567.16, 3.15, 4567.14, 5.13, 65467.12, 788.11, 8.9);\n+\n+  test (e, u.x);\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "cdaec13cf1f579601eaa934e19ab16b667fdffc1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movd-1.c\""}, {"sha": "3c3732baf7d4cd1913812470668eb8c4edd3d892", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovd-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movd-2.c\""}, {"sha": "4db42e137def2a04701aa5b9b650cfd4fd3a7f9e", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovddup-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -mfpmath=sse\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-movddup.c\""}, {"sha": "a971dbf4f129b22d97b8a15925ff0d59b40b92b1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovddup-256-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovddup-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (39578.467285, 7856.342941, 85632.783567, 47563.234215);\n+  u.x = _mm256_movedup_pd (s1.x);\n+\n+  for (i = 0; i < 2; i++)\n+    e[2*i] = e[2*i+1] = s1.a[2*i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "b14aeaff951c7954144439d3db1ee10c0da48e13", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqa-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movdqa-1.c\""}, {"sha": "94a758d2e0334ce93ccf8e540e670c8f7a5078d1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqa-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movdqa-2.c\""}, {"sha": "abe62880e9410eb76baf42a8512a56564ebfaa2e", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqa-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256i\n+__attribute__ ((noinline, unused))\n+test (__m256i *p)\n+{\n+  return _mm256_load_si256 (p);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256i_d u;\n+  int e [8] __attribute__ ((aligned (32))) = {23, 67, 53, 6, 4, 6, 85, 234};\n+\n+  u.x = test ((__m256i *)e);\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "41f3ed0e61491122188a07da8574498c6ed0987a", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqa-256-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqa-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256i_d u;\n+  int e [8] __attribute__ ((aligned (32))) = {0};\n+\n+  u.x = _mm256_set_epi32(23, 67, 53, 6, 4, 6, 85, 234);\n+  _mm256_store_si256 ((__m256i *)e, u.x);\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "7785b40ab20aa6d9e761a721a2c04dcc8dc6906f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqu-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movdqu-1.c\""}, {"sha": "f0eead7003a28c0a988d4020472efb68bd091e01", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqu-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movdqu-2.c\""}, {"sha": "849df7bc3d531d6a6060b3a9ad413fcd49491f70", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqu-256-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256i_d u;\n+  int e [8] = {23, 67, 53, 6, 4, 6, 85, 234};\n+\n+  u.x = _mm256_loadu_si256 ((__m256i *) e); \n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "eb0af202c0062a20fbe181e98a55df0b8155f978", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovdqu-256-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovdqu-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  union256i_d u;\n+  int e [8] = {0};\n+\n+  u.x = _mm256_set_epi32(23, 67, 53, 6, 4, 6, 85, 234);\n+  _mm256_storeu_si256 ((__m256i *)e, u.x);\n+\n+  if (check_union256i_d (u, e))\n+    abort ();\n+}"}, {"sha": "25beca971b44c6b2f216c73796dd16b74a988ae0", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovhlps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhlps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhlps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhlps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movhlps-1.c\""}, {"sha": "246275cd2075f6f4a3fbaa77f1555322256b0a32", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovhpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movhpd-1.c\""}, {"sha": "1cfdf59c2698fea9099f2915283361e7e118589f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovhpd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhpd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movhpd-2.c\""}, {"sha": "8cf1eec8dc60bb2b802a92f5658b0c775ce904ee", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovhps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movhps-1.c\""}, {"sha": "c835f1512596fa75cba79b1573e25e67f835a29a", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovhps-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovhps-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movhps-2.c\""}, {"sha": "8f8234b31dcbd229f03822d0467090487169a117", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovlhps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlhps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlhps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlhps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movlhps-1.c\""}, {"sha": "64d90c6cb5cb3ede0dfcbe83eff9c210ab3212b5", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovlpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movlpd-1.c\""}, {"sha": "081956a9dd42e2f0d1d2963e9d1e7b338fe33da5", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovlpd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovlpd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movlpd-2.c\""}, {"sha": "07eb8518594e8a617ff2448b7a0dae57e0d89549", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovmskpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movmskpd-1.c\""}, {"sha": "71353c44d183fcc087b5335253e49c7d03a08565", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovmskpd-256-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int d;\n+  union256d s1;\n+  double source[4] = {-45, -3, -34.56, 35};\n+  int e = 0;\n+\n+  s1.x = _mm256_loadu_pd (source);\n+  d = _mm256_movemask_pd (s1.x);\n+  \n+  for (i = 0; i < 4; i++)\n+    if (source[i] < 0)\n+      e |= (1 << i);\n+\n+  if (checkVi (&d, &e, 1))\n+    abort ();  \n+}"}, {"sha": "df4d1e78d4d6936cc59ff1aafc41befc5472ade1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovmskps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movmskps-1.c\""}, {"sha": "4b81d04139d16845dc77ab7661a7d538ce61129e", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovmskps-256-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovmskps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int d;\n+  union256 s1;\n+  float source[8] = {-45, -3, -34.56, 35, 5.46,46, -464.3, 56};\n+  int e = 0;\n+\n+  s1.x = _mm256_loadu_ps (source);\n+  d = _mm256_movemask_ps (s1.x);\n+  \n+  for (i = 0; i < 8; i++)\n+    if (source[i] < 0)\n+      e |= (1 << i);\n+\n+  if (checkVi (&d, &e, 1))\n+    abort ();  \n+}"}, {"sha": "166d46f2030942c39fae526cc1c81df6a742b1ca", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovntdq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movntdq-1.c\""}, {"sha": "c884d1e5e11a5da8c14446235c961801ccb59f7c", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovntdqa-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdqa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdqa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntdqa-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-movntdqa.c\""}, {"sha": "d547a2a9eba19991f74d25a2edc43e0f6bc36a5b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovntpd-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movntpd-1.c\"\n+"}, {"sha": "b9732f26de309c36efd2cfd4287ef9207f890c18", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovntps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovntps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movntps-1.c\""}, {"sha": "44d2023082a0d17fd4e3dbdbe8d1cfec897b058f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movq-1.c\""}, {"sha": "cf0f4eb69470b2b5af8bd416fa0f9fc742baa35c", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovq-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movq-2.c\""}, {"sha": "26944d118606bce7889d26c509bd439ed9def93f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovq-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovq-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movq-3.c\""}, {"sha": "185784419f8ce694ee2d658d15f52a804ce03495", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movsd-1.c\""}, {"sha": "672b25bfd8df0c20b299d0a47749f3ca11e4c810", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovsd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movsd-2.c\""}, {"sha": "ee995e3a7444efc43ad861bce1e216f6a4965fb2", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovshdup-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -mfpmath=sse\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-movshdup.c\""}, {"sha": "a4b57a0c40dcf3782deb38f6feb369104e73a4a6", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovshdup-256-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovshdup-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1;\n+  float e[8];\n+\n+  s1.x = _mm256_set_ps (134.3, 1234.54, 45.335, 646.456, 43.54, 473.34, 78, 89.54);\n+  u.x = _mm256_movehdup_ps (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[2*i] = e[2*i+1] = s1.a[2*i+1];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "67ea717adcca823fa44ee462b8f891b3db1025cf", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovsldup-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx -mfpmath=sse\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse3-movsldup.c\""}, {"sha": "52127bec221c184b5411dccb97c4bd18b14158ca", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovsldup-256-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovsldup-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1;\n+  float e[8];\n+\n+  s1.x = _mm256_set_ps (134.3, 1234.54, 45.335, 646.456, 43.54, 473.34, 78, 89.54);\n+  u.x = _mm256_moveldup_ps (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[2*i] = e[2*i+1] = s1.a[2*i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "ff983e6b3f380c10d1db6fc6267fbe8205baebce", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movss-1.c\""}, {"sha": "e9a8bdc5969636b90dc48d5ad37b18e152ed801f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovss-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movss-2.c\""}, {"sha": "b73e2af067f9a7dec5f33a95009c4064773831d1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovss-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovss-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movss-3.c\""}, {"sha": "67f08744a38e47d340f8bea2558a0dde7a8adc81", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovupd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movupd-1.c\""}, {"sha": "cb6f27763a584a7624c08309a2e9714c8d886983", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovupd-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-movupd-2.c\""}, {"sha": "8683a78daa60c2b9b0706e4d8f56b794239b5b4e", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovupd-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256d\n+__attribute__((noinline, unused))\n+test (double *e)\n+{\n+  return _mm256_loadu_pd (e);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u;\n+  double e [4]  = {41124.234,2344.2354,8653.65635,856.43576};\n+\n+  u.x = test (e);\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "4cbd0e7e29ba8df911dd3a9454bd55238f3e5cd5", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovupd-256-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovupd-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+__attribute__((noinline, unused))\n+test (double *e, __m256d a)\n+{\n+  return _mm256_storeu_pd (e, a);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u;\n+  double e [4] = {0.0};\n+\n+  u.x = _mm256_set_pd (39578.467285, 7856.342941, 85632.783567, 47563.234215);\n+\n+  test (e, u.x);\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "5b9a98b056065cf3b937a5ad2a48311cc529f367", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovups-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movups-1.c\""}, {"sha": "e5668a29a7cfc1688090c2db7d1eddf28422292d", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovups-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-movups-2.c\""}, {"sha": "87d8409983a14e6efab7167c9d40dc3916910ae1", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovups-256-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static __m256\n+__attribute__((noinline, unused))\n+test (float *e)\n+{\n+  return _mm256_loadu_ps (e);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u;\n+  float e [8]  = {24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4};\n+\n+  u.x = test (e);\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "c1781979a05a3e32d42617703046021c29c0708f", "filename": "gcc/testsuite/gcc.target/i386/avx-vmovups-256-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmovups-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+static void\n+__attribute__((noinline, unused))\n+test (float *e, __m256 a)\n+{\n+  return _mm256_storeu_ps (e, a);\n+}\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u;\n+  float e [8]  = {0.0};\n+\n+  u.x = _mm256_set_ps (1.17, 24567.16, 3.15, 4567.14, 5.13, 65467.12, 788.11, 8.9);\n+\n+  test (e, u.x);\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "403423e66cafe3b4ea5e6766eda2f2c65528a4de", "filename": "gcc/testsuite/gcc.target/i386/avx-vmpsadbw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmpsadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmpsadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmpsadbw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-mpsadbw.c\""}, {"sha": "0fa0f1ad79806fb26a7bcec228db19fec0a2187b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-mulpd-1.c\""}, {"sha": "c6d9c477085525e58337561c2d811cd676a1ff0b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulpd-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);\n+  u.x = _mm256_mul_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] * s2.a[i];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "bb29e194589422984f9735038951ba6c153ad087", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-mulps-1.c\""}, {"sha": "518a9477d8cc95e1da0b0d1563071d16b9779ebe", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulps-256-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (24.43, 68.346, 43.35, 546.46, 46.79, 82.78, 82.7, 9.4);\n+  s2.x = _mm256_set_ps (1.17, 2.16, 3.15, 4.14, 5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm256_mul_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e[i] = s1.a[i] * s2.a[i];\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "16adcde809c43f6d70c9338bb851b886924f8dbd", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-mulsd-1.c\""}, {"sha": "9ff6e3d144c31e9ccc152341cf79b088d1016d08", "filename": "gcc/testsuite/gcc.target/i386/avx-vmulss-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmulss-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-mulss-1.c\""}, {"sha": "221849ff19e9c1a7b635e2e4a3d3396ec0848b29", "filename": "gcc/testsuite/gcc.target/i386/avx-vorpd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-orpd-1.c\""}, {"sha": "ca60e24fcf283c67dc0850f411bc295a837a21f2", "filename": "gcc/testsuite/gcc.target/i386/avx-vorpd-256-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  union256d u, s1, s2;\n+\n+  union\n+  {\n+    double d[4];\n+    long long ll[4];\n+  }source1, source2, e;\n+\n+  s1.x = _mm256_set_pd (34545, 95567, 23443, 5675);\n+  s2.x = _mm256_set_pd (674, 57897, 93459, 45624);\n+\n+  _mm256_storeu_pd (source1.d, s1.x);\n+  _mm256_storeu_pd (source2.d, s2.x);\n+\n+  u.x = _mm256_or_pd (s1.x, s2.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e.ll[i] = source1.ll[i] | source2.ll[i];\n+\n+  if (check_union256d (u, e.d))\n+    abort ();\n+}"}, {"sha": "fd501dd15da806721fc30f82f94a3a02153be8ee", "filename": "gcc/testsuite/gcc.target/i386/avx-vorps-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-orps-1.c\""}, {"sha": "ef1c51b1d1bfc6253ed81e84a6179f44e732fd4a", "filename": "gcc/testsuite/gcc.target/i386/avx-vorps-256-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vorps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+\n+  union256 u, s1, s2;\n+\n+  union\n+  {\n+    float f[8];\n+    int   i[8];\n+  }source1, source2, e;\n+\n+  s1.x = _mm256_set_ps (34545, 95567, 23443, 5675, 2323, 67, 2345, 45667);\n+  s2.x = _mm256_set_ps (674, 57897, 93459, 45624, 54674, 1237, 67436, 79608);\n+\n+  _mm256_storeu_ps (source1.f, s1.x);\n+  _mm256_storeu_ps (source2.f, s2.x);\n+\n+  u.x = _mm256_or_ps (s1.x, s2.x);\n+\n+  for (i = 0; i < 8; i++)\n+    e.i[i] = source1.i[i] | source2.i[i];\n+\n+  if (check_union256 (u, e.f))\n+    abort ();\n+}"}, {"sha": "80081ff1c28ca0a8729beead2d89c713f75a4410", "filename": "gcc/testsuite/gcc.target/i386/avx-vpabsb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"ssse3-pabsb.c\""}, {"sha": "3b165f1a61d1d5b752b41cc4a8e3a7e0ce959d42", "filename": "gcc/testsuite/gcc.target/i386/avx-vpabsd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"ssse3-pabsd.c\""}, {"sha": "b737068127e3c076a8b93a5f46346ca3eb26d8a3", "filename": "gcc/testsuite/gcc.target/i386/avx-vpabsw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpabsw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"ssse3-pabsw.c\""}, {"sha": "f302ce716a346784825bed4d773582221ad64613", "filename": "gcc/testsuite/gcc.target/i386/avx-vpackssdw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackssdw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-packssdw-1.c\""}, {"sha": "14fd680a57a109978199bbbeb0158bdd13cfb18a", "filename": "gcc/testsuite/gcc.target/i386/avx-vpacksswb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpacksswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpacksswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpacksswb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-packsswb-1.c\""}, {"sha": "81991d9518349f9800d6973f95576977b9c7308b", "filename": "gcc/testsuite/gcc.target/i386/avx-vpackusdw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackusdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackusdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackusdw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-packusdw.c\""}, {"sha": "d06f3c7791705a56a58a5930572794b76cbc74e7", "filename": "gcc/testsuite/gcc.target/i386/avx-vpackuswb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpackuswb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-packuswb-1.c\""}, {"sha": "fa06c1e30f5e0be71fb446a7980b34127482c406", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddb-1.c\""}, {"sha": "fc2ee29324874b538ae5fc884fca0bbe353f8c9f", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddd-1.c\""}, {"sha": "bb913be9deff37595f947e31a879677836aad47a", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddq-1.c\""}, {"sha": "56dc00b73f49a250282a85300d1fc3384d675971", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddsb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddsb-1.c\""}, {"sha": "c326420e669e6f6c01b8c846c918cb3e2ac20a5b", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddsw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddsw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddsw-1.c\""}, {"sha": "a83bf6b7ee197a355b98b554e908e1871854b230", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddusb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddusb-1.c\""}, {"sha": "8cbf06092c7dd8b194329c22459e3550e8fde211", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddusw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddusw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddusw-1.c\""}, {"sha": "caaa4666675b4ded58c06e7fc0f4a40d1d07154e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpaddw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpaddw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-paddw-1.c\""}, {"sha": "13c84c8f9f6bf9016df1f37dc8b19efd4aab9e62", "filename": "gcc/testsuite/gcc.target/i386/avx-vpalignr-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpalignr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpalignr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpalignr-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"ssse3-palignr.c\""}, {"sha": "22e05701c63a18a8c464a4c36de6fb9f551e69b3", "filename": "gcc/testsuite/gcc.target/i386/avx-vpand-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpand-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pand-1.c\""}, {"sha": "fbd7e25edfbbb455931007faa8073710b3422578", "filename": "gcc/testsuite/gcc.target/i386/avx-vpandn-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpandn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpandn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpandn-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pandn-1.c\""}, {"sha": "1474d2b1fdfa1ef78a5848d75a10eb5d5fc1368e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpavgb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pavgb-1.c\""}, {"sha": "1c7c3c89d1298278abc078f772282ab0da8333a3", "filename": "gcc/testsuite/gcc.target/i386/avx-vpavgw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpavgw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pavgw-1.c\""}, {"sha": "00179977648c6a3bbc29cdd4a03fa7635dc3769c", "filename": "gcc/testsuite/gcc.target/i386/avx-vpblendvb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendvb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendvb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendvb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-pblendvb.c\""}, {"sha": "241dbcc6a6d27e838c41f164b7060fc8da583d41", "filename": "gcc/testsuite/gcc.target/i386/avx-vpblendw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpblendw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-pblendw.c\""}, {"sha": "9cd2bbcc11912f529b394a6273c1e8a9307c826e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpeqb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpeqb-1.c\""}, {"sha": "b1d1dd2d666976bcade1c6f71c84a99df9426ff4", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpeqd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpeqd-1.c\""}, {"sha": "541b52c4bc9ee6f95edde5dbe9c924716f0c39a0", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpeqq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-pcmpeqq.c\""}, {"sha": "0e0397abd0644b2b7f2e866e3526b9e8da34e5d0", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpeqw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpeqw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpeqw-1.c\""}, {"sha": "806000f9f11be2c3e7261f17ae3adbdac4c4f481", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpestri-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpestri-1.c\""}, {"sha": "6d683ef89772b5b261285eac00eb150b9d94ac26", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpestri-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestri-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpestri-2.c\""}, {"sha": "95b2bdc0cbfe6d97c2b81c97ea6a5b23f0e7e3bc", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpestrm-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpestrm-1.c\""}, {"sha": "b2f6ad33ddb8afed3423338f5ec6e20873a1ef87", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpestrm-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpestrm-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpestrm-2.c\""}, {"sha": "ed9fd4d21f5458bb214583c19a8d5b044b9479cb", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpgtb-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtb-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpgtb-1.c\""}, {"sha": "344741eef6d57a6ae53713ed5106b23a50aefa1b", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpgtd-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpgtd-1.c\""}, {"sha": "1332215a9e70f4cd67e31f4e5d06d5a847a67b4b", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpgtq-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtq-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpgtq.c\""}, {"sha": "c4f2007e08da335935364195a1b199b6774c59d2", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpgtw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpgtw-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pcmpgtw-1.c\""}, {"sha": "4cb13535d80c90b60f928097958613d1dec5f4ea", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpistri-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpistri-1.c\""}, {"sha": "ec2af713d254668015319266e4537cd947da11e0", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpistri-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistri-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpistri-2.c\""}, {"sha": "7a6a4d4d1258df4f0d2ed5e0ad22e34a39e19854", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpistrm-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpistrm-1.c\""}, {"sha": "82857d813a5dc6048fc225bb9178e187e7ca6d62", "filename": "gcc/testsuite/gcc.target/i386/avx-vpcmpistrm-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpcmpistrm-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_2-pcmpistrm-2.c\""}, {"sha": "99abca189b17b86768a9381633809f4c0bb7dbf1", "filename": "gcc/testsuite/gcc.target/i386/avx-vperm2f128-256-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#define CONTROL 0xCC\n+\n+void static\n+avx_test (void)\n+{\n+  union256 u, s1, s2;\n+  float e [8];\n+\n+  s1.x = _mm256_set_ps (1, 2, 3, 4, 5, 6, 7, 8);\n+  s2.x = _mm256_set_ps (9, 10, 11, 12, 13, 14, 15, 16);\n+  u.x = _mm256_permute2f128_ps (s1.x, s2.x, CONTROL);\n+\n+  switch (CONTROL & 0x3)\n+    {\n+      case 0:\n+        __builtin_memcpy (e, s1.a, 16);\n+        break;\n+      case 1: \n+        __builtin_memcpy (e, s1.a+4, 16);\n+        break;\n+      case 2:\n+        __builtin_memcpy (e, s2.a, 16);\n+        break;\n+      case 3:\n+        __builtin_memcpy (e, s2.a+4, 16);\n+        break;\n+      default:\n+        abort ();\n+    }\n+\n+ switch ((CONTROL & 0xc)>>2)\n+    {\n+      case 0:\n+        __builtin_memcpy (e+4, s1.a, 16);\n+        break;\n+      case 1: \n+        __builtin_memcpy (e+4, s1.a+4, 16);\n+        break;\n+      case 2:\n+        __builtin_memcpy (e+4, s2.a, 16);\n+        break;\n+      case 3:\n+        __builtin_memcpy (e+4, s2.a+4, 16);\n+        break;\n+      default:\n+        abort ();\n+    }\n+\n+  if (CONTROL & (1<<3))\n+    __builtin_memset (e, 0, 16);\n+\n+  if (CONTROL & (1<<7))\n+    __builtin_memset (e+4, 0, 16);\n+\n+  if (check_union256 (u, e))\n+    abort ();\n+}"}, {"sha": "db9c65bce2caf74a562ecac42e44f422fab9c2ad", "filename": "gcc/testsuite/gcc.target/i386/avx-vperm2f128-256-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef IMM8\n+#  define IMM8 99\n+#endif\n+\n+\n+void static\n+avx_test ()\n+{\n+    union256d source1, source2, u;\n+    double  s1[4]={1, 2, 3, 4};\n+    double  s2[4]={5, 6, 7, 8};\n+    double   e[4];\n+\n+    source1.x = _mm256_loadu_pd(s1);\n+    source2.x = _mm256_loadu_pd(s2);\n+    u.x = _mm256_permute2f128_pd(source1.x, source2.x, IMM8);\n+\n+    if(IMM8 & 8) e[0] = e[1] = 0;\n+    else{\n+        e[0] = (IMM8 & 2 ? s2 : s1)[(IMM8 & 1) * 2];\n+        e[1] = (IMM8 & 2 ? s2 : s1)[(IMM8 & 1) * 2 + 1];\n+    }\n+    if(IMM8 & 128) e[3] = e[3] = 0;\n+    else{\n+        unsigned m = (IMM8 >> 4) & 3;\n+        e[2] = (m & 2 ? s2 : s1)[(m & 1) * 2];\n+        e[3] = (m & 2 ? s2 : s1)[(m & 1) * 2 + 1];\n+    }\n+  \n+   if (check_union256d (u, e))\n+     abort ();\n+}\n+"}, {"sha": "7b00c4b76330edc5c453e4619df5841700502383", "filename": "gcc/testsuite/gcc.target/i386/avx-vperm2f128-256-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vperm2f128-256-3.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef IMM8\n+#  define IMM8 100\n+#endif\n+\n+void static\n+avx_test ()\n+{\n+    union256i_q source1, source2, u;\n+    long long  s1[4]={1, 2, 3, 4};\n+    long long  s2[4]={5, 6, 7, 8};\n+    long long   e[4];\n+\n+    source1.x = _mm256_loadu_si256((__m256i*)s1);\n+    source2.x = _mm256_loadu_si256((__m256i*)s2);\n+    u.x = _mm256_permute2f128_si256(source1.x, source2.x, IMM8);\n+\n+    if(IMM8 & 8) e[0] = e[1] = 0;\n+    else{\n+        e[0] = (IMM8 & 2 ? s2 : s1)[(IMM8 & 1) * 2];\n+        e[1] = (IMM8 & 2 ? s2 : s1)[(IMM8 & 1) * 2 + 1];\n+    }\n+    if(IMM8 & 128) e[3] = e[3] = 0;\n+    else{\n+        unsigned m = (IMM8 >> 4) & 3;\n+        e[2] = (m & 2 ? s2 : s1)[(m & 1) * 2];\n+        e[3] = (m & 2 ? s2 : s1)[(m & 1) * 2 + 1];\n+    }\n+   \n+   if (check_union256i_q (u, e))\n+     abort ();\n+}"}, {"sha": "04086246b4f6e979afecca9d6f1e60fa35668f51", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermil2pd-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef ZERO_MATCH\n+#define ZERO_MATCH  2\n+#endif\n+\n+static double\n+select2dp(double *src1, double *src2, long long  sel)\n+{\n+    double tmp = 0.0;\n+\n+    if ((sel & 0x3) == 0) tmp = src1[0];\n+    if ((sel & 0x3) == 1) tmp = src1[1];\n+    if ((sel & 0x3) == 2) tmp = src2[0];\n+    if ((sel & 0x3) == 3) tmp = src2[1];\n+\n+    return tmp;\n+}\n+\n+static double\n+sel_and_condzerodp(double *src1, double *src2, long long  sel, int imm8)\n+{\n+    double tmp;\n+\n+    tmp = select2dp(src1, src2, sel & 0x3);\n+\n+    if (((imm8 & 0x3) == 2) && ((sel & 0x4) == 0x4)) tmp = 0;\n+    if (((imm8 & 0x3) == 3) && ((sel & 0x4) == 0x0)) tmp = 0;\n+\n+    return tmp;\n+}\n+\n+void static\n+avx_test ()\n+{\n+    union128d s1, s2, u;\n+    union128i_q s3;\n+    double e[2];\n+\n+    s1.x = _mm_set_pd (1, 2);\n+    s2.x = _mm_set_pd (3, 4);\n+    s3.x = _mm_set_epi64x (1, 2);\n+    u.x = _mm_permute2_pd(s1.x, s2.x, s3.x, ZERO_MATCH);\n+\n+    e[0] = sel_and_condzerodp (s1.a, s2.a, (s3.a[0] & 0xe)>>1, ZERO_MATCH);\n+    e[1] = sel_and_condzerodp (s1.a, s2.a, (s3.a[1] & 0xe)>>1, ZERO_MATCH);\n+\n+    if (check_union128d (u, e))\n+      abort ();\n+}\n+"}, {"sha": "d9a94ae6b9dab4fb5b04ccea27dd50b255f5b5c4", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermil2pd-256-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2pd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef ZERO_MATCH\n+#define ZERO_MATCH 1 \n+#endif\n+\n+static double\n+select2dp(double *src1, double *src2, long long  sel)\n+{\n+    double tmp = 3.414;\n+\n+    if ((sel & 0x3) == 0) tmp = src1[0];\n+    if ((sel & 0x3) == 1) tmp = src1[1];\n+    if ((sel & 0x3) == 2) tmp = src2[0];\n+    if ((sel & 0x3) == 3) tmp = src2[1];\n+\n+    return tmp;\n+}\n+\n+static double\n+sel_and_condzerodp(double *src1, double *src2, long long  sel, int imm8)\n+{\n+    double tmp;\n+\n+    tmp = select2dp(src1, src2, sel);\n+\n+    if (((imm8 & 0x3) == 2) && ((sel & 0x4) == 0x4)) tmp = 0;\n+    if (((imm8 & 0x3) == 3) && ((sel & 0x4) == 0x0)) tmp = 0;\n+\n+    return tmp;\n+}\n+\n+void static\n+avx_test ()\n+{\n+    union256d u, s1, s2;\n+    double   e[4] = {0.0};\n+    union256i_q s3;\n+\n+    s1.x = _mm256_set_pd (1, 2, 3, 4);\n+    s2.x = _mm256_set_pd (5, 6, 7, 8);\n+    s3.x = _mm256_set_epi64x (0, 1, 2, 3);\n+    u.x = _mm256_permute2_pd(s1.x, s2.x, s3.x, ZERO_MATCH);\n+   \n+    e[0] = sel_and_condzerodp (s1.a, s2.a, (s3.a[0] & 0xe)>>1, ZERO_MATCH);\n+    e[1] = sel_and_condzerodp (s1.a, s2.a, (s3.a[1] & 0xe)>>1, ZERO_MATCH);\n+    e[2] = sel_and_condzerodp (s1.a + 2, s2.a + 2, (s3.a[2] & 0xe)>>1, ZERO_MATCH);\n+    e[3] = sel_and_condzerodp (s1.a + 2, s2.a + 2, (s3.a[3] & 0xe)>>1, ZERO_MATCH);\n+         \n+    if (check_union256d (u, e))\n+      abort ();\n+}\n+"}, {"sha": "c04600e92fb1ad80928b628ce9873fdfc8c51093", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermil2ps-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef ZERO_MATCH\n+#define ZERO_MATCH  1\n+#endif\n+\n+static float\n+select2sp(float *src1, float *src2, int sel)\n+{\n+    float tmp;\n+\n+    if ((sel & 0x7) == 0) tmp = src1[0];\n+    if ((sel & 0x7) == 1) tmp = src1[1];\n+    if ((sel & 0x7) == 2) tmp = src1[2];\n+    if ((sel & 0x7) == 3) tmp = src1[3];\n+    if ((sel & 0x7) == 4) tmp = src2[0];\n+    if ((sel & 0x7) == 5) tmp = src2[1];\n+    if ((sel & 0x7) == 6) tmp = src2[2];\n+    if ((sel & 0x7) == 7) tmp = src2[3];\n+\n+    return tmp;\n+}\n+static float\n+sel_and_condzerosp(float *src1, float *src2, int sel, int imm8)\n+{\n+    float tmp;\n+\n+    tmp = select2sp(src1, src2, sel & 0x7);\n+\n+    if (((imm8 & 0x3) == 2) && ((sel & 0x8) == 0x8)) tmp = 0;\n+    if (((imm8 & 0x3) == 3) && ((sel & 0x8) == 0x0)) tmp = 0;\n+\n+    return tmp;\n+}\n+\n+void static\n+avx_test ()\n+{\n+    int i;\n+    union128  source1, source2, u;\n+    union128i_d source3;\n+    float s1[4] = {1, 2, 3, 4};\n+    float s2[4] = {5, 6, 7, 8};\n+    int   s3[4] = {0, 1, 0, 1};\n+    float e[4];\n+\n+    source1.x = _mm_loadu_ps(s1);\n+    source2.x = _mm_loadu_ps(s2);\n+    source3.x = _mm_loadu_si128((__m128i*) s3);\n+    u.x = _mm_permute2_ps(source1.x, source2.x, source3.x, ZERO_MATCH);\n+\n+    for (i = 0; i < 4; ++i) {\n+        e[i] = sel_and_condzerosp(&s1[i & 0x4], &s2[i & 0x4], s3[i] & 0xf, ZERO_MATCH & 0x3);\n+    }\n+\n+    if (check_union128 (u, e))\n+      abort ();\n+}"}, {"sha": "6ee5803867359ffc0207a158ef61496297b9864e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermil2ps-256-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermil2ps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef ZERO_MATCH\n+#define ZERO_MATCH  3\n+#endif\n+\n+static float\n+select2sp(float *src1, float *src2, int sel)\n+{\n+    float tmp;\n+\n+    if ((sel & 0x7) == 0) tmp = src1[0];\n+    if ((sel & 0x7) == 1) tmp = src1[1];\n+    if ((sel & 0x7) == 2) tmp = src1[2];\n+    if ((sel & 0x7) == 3) tmp = src1[3];\n+    if ((sel & 0x7) == 4) tmp = src2[0];\n+    if ((sel & 0x7) == 5) tmp = src2[1];\n+    if ((sel & 0x7) == 6) tmp = src2[2];\n+    if ((sel & 0x7) == 7) tmp = src2[3];\n+\n+    return tmp;\n+}\n+static float\n+sel_and_condzerosp(float *src1, float *src2, int sel, int imm8)\n+{\n+    float tmp;\n+\n+    tmp = select2sp(src1, src2, sel & 0x7);\n+\n+    if (((imm8 & 0x3) == 2) && ((sel & 0x8) == 0x8)) tmp = 0;\n+    if (((imm8 & 0x3) == 3) && ((sel & 0x8) == 0x0)) tmp = 0;\n+\n+    return tmp;\n+}\n+\n+void static\n+avx_test ()\n+{\n+    int i;\n+    union256  source1, source2, u;\n+    union256i_d source3;\n+    float s1[8]={1, 2, 3, 4, 5, 6, 7, 8};\n+    float s2[8]={9, 10, 11, 12, 13, 14, 15, 16};\n+    int   s3[8]={11, 2, 3, 15, 5, 12, 7, 8};\n+    float  e[8];\n+\n+    source1.x = _mm256_loadu_ps(s1);\n+    source2.x = _mm256_loadu_ps(s2);\n+    source3.x = _mm256_loadu_si256((__m256i*) s3);\n+    u.x = _mm256_permute2_ps(source1.x, source2.x, source3.x, ZERO_MATCH);\n+\n+    for (i = 0; i < 8; ++i) {\n+        e[i] = sel_and_condzerosp(&s1[i & 0x4], &s2[i & 0x4], s3[i] & 0xf, ZERO_MATCH & 0x3);\n+    }\n+   \n+   if (check_union256(u, e))\n+     abort ();\n+}"}, {"sha": "6379cdb4a12af1629890f76956830c2bc7892287", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilpd-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 1\n+#endif\n+\n+void static\n+avx_test ()\n+{\n+    union128d u, src;\n+    double s[2] = {9674.67456, 13543.9788};\n+    double e[2];\n+\n+    src.x=_mm_loadu_pd(s);\n+    u.x=_mm_permute_pd(src.x, CTRL);\n+\n+    e[0] = s[ (CTRL & 0x01)];\n+    e[1] = s[((CTRL & 0x02) >> 1)];\n+\n+    if (check_union128d (u, e))\n+      abort ();\n+}\n+"}, {"sha": "a6d7a0d675561afcf119bb27508e1e6f7d8b5024", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilpd-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 2\n+#endif\n+\n+#define mask_v(pos) (((CTRL & (1ULL << (pos))) >> (pos)) << 1)\n+\n+void static\n+avx_test ()\n+{\n+    union128d u, src;\n+    union128i_q ctl;\n+ \n+    double  s[2] = {9674.67456, 13543.9788};\n+    long long m[2] = {mask_v(0), mask_v(1)};\n+    double  e[2];\n+\n+    src.x = _mm_loadu_pd(s);\n+    ctl.x = _mm_loadu_si128((__m128i*) m);\n+    u.x = _mm_permutevar_pd(src.x, ctl.x);\n+\n+    e[0] = s[((m[0] & 0x02) >> 1)];\n+    e[1] = s[((m[1] & 0x02) >> 1)];\n+\n+    if (check_union128d (u, e))\n+      abort ();\n+}\n+"}, {"sha": "ca93474b5d2691bb760645fa050178e5f778a233", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilpd-256-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#define CONTROL 5\n+\n+void static\n+avx_test (void)\n+{\n+  union256d u, s1;\n+  double e [4];\n+\n+  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n+  u.x = _mm256_permute_pd (s1.x, CONTROL);\n+\n+  e[0] = (CONTROL&0x01) ? s1.a[1] : s1.a[0];\n+  e[1] = (CONTROL&0x02) ? s1.a[1] : s1.a[0];\n+  e[2] = (CONTROL&0x04) ? s1.a[3] : s1.a[2];\n+  e[3] = (CONTROL&0x08) ? s1.a[3] : s1.a[2];\n+\n+  if (check_union256d (u, e))\n+    abort ();\n+}"}, {"sha": "1cd5c3a62e2f4c1ec74903f7a5415d4ddffbe621", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilpd-256-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilpd-256-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 6\n+#endif\n+\n+#define mask_v(pos) (((CTRL & (1ULL << (pos))) >> (pos)) << 1)\n+\n+void static\n+avx_test ()\n+{\n+    union256d u, src; \n+    union256i_q ctl;\n+\n+    double  s[4] = {39578.467285, 7856.342941, 9674.67456, 13543.9788};\n+    long long m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+    double  e[4] = {0.0};\n+\n+    src.x = _mm256_loadu_pd(s);\n+    ctl.x  = _mm256_loadu_si256((__m256i*) m);\n+    u.x = _mm256_permutevar_pd(src.x, ctl.x);\n+\n+    e[0] = s[0 + ((m[0] & 0x02) >> 1)];\n+    e[1] = s[0 + ((m[1] & 0x02) >> 1)];\n+    e[2] = s[2 + ((m[2] & 0x02) >> 1)];\n+    e[3] = s[2 + ((m[3] & 0x02) >> 1)];\n+\n+    if (check_union256d (u, e))\n+      abort ();\n+}\n+\n+"}, {"sha": "146f555673d9b188c32aa976cdabf7e3a91e9fbe", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilps-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 11\n+#endif\n+\n+void static\n+avx_test ()\n+{\n+  union128 u, s;\n+  float e[4];\n+\n+  s.x = _mm_set_ps (1, 2, 3, 4);\n+  u.x = _mm_permute_ps(s.x, CTRL);\n+\n+  e[0] = s.a[ (CTRL & 0x03)];\n+  e[1] = s.a[((CTRL & 0x0c) >> 2)];\n+  e[2] = s.a[((CTRL & 0x30) >> 4)];\n+  e[3] = s.a[((CTRL & 0xc0) >> 6)];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "ca0fbae4afc892ea16b70ad390ab4739c9a98160", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilps-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-2.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 233\n+#endif\n+\n+#define mask_v(pos) ((CTRL & (0x3 << (pos))) >> (pos))\n+\n+void static\n+avx_test ()\n+{\n+    union128 u, s;\n+    union128i_q ctl;\n+    int m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+    float e[4];\n+\n+    s.x = _mm_set_ps (1, 2, 3, 4);\n+    ctl.x = _mm_loadu_si128((__m128i*) m);\n+    u.x = _mm_permutevar_ps(s.x, ctl.x);\n+\n+    e[0] = s.a[0 + (m[0] & 0x03)];\n+    e[1] = s.a[0 + (m[1] & 0x03)];\n+    e[2] = s.a[0 + (m[2] & 0x03)];\n+    e[3] = s.a[0 + (m[3] & 0x03)];\n+\n+    if (check_union128 (u, e))\n+      abort ();\n+}\n+"}, {"sha": "b9291498dc09eb7b9e9a0f193ba9aef38fbf173f", "filename": "gcc/testsuite/gcc.target/i386/avx-vpermilps-256-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6beb90e130e3dcb08429add3fe336b4c2d6603d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpermilps-256-1.c?ref=d6beb90e130e3dcb08429add3fe336b4c2d6603d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef CTRL\n+#define CTRL 129\n+#endif\n+\n+void static\n+avx_test ()\n+{\n+    union256 src, u;\n+    float e[8] = {0.0};\n+\n+    src.x = _mm256_set_ps (1, 2, 3, 4, 5, 6, 7, 8);\n+    u.x = _mm256_permute_ps(src.x, CTRL);\n+\n+    e[0] = src.a[0 +  (CTRL & 0x03)];\n+    e[1] = src.a[0 + ((CTRL & 0x0c) >> 2)];\n+    e[2] = src.a[0 + ((CTRL & 0x30) >> 4)];\n+    e[3] = src.a[0 + ((CTRL & 0xc0) >> 6)];\n+    e[4] = src.a[4 +  (CTRL & 0x03)];\n+    e[5] = src.a[4 + ((CTRL & 0x0c) >> 2)];\n+    e[6] = src.a[4 + ((CTRL & 0x30) >> 4)];\n+    e[7] = src.a[4 + ((CTRL & 0xc0) >> 6)];\n+\n+    if (check_union256 (u, e))\n+      abort ();\n+}"}]}