{"sha": "d47a01516c91f35d0f60d2e636d6e3724ee400b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3YTAxNTE2YzkxZjM1ZDBmNjBkMmU2MzZkNmUzNzI0ZWU0MDBiMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2008-12-02T14:30:55Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2008-12-02T14:30:55Z"}, "message": "re PR middle-end/37861 (Bogus array bounds warning)\n\n2008-12-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/37861\n        * tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Do not check\n        for INDIRECT_REFs.\n        (forward_propagate_addr_into_variable_array_index): Check that the\n        offset is not computed from a MULT_EXPR, use is_gimple_assign rather\n        than the gimple code directly.\n\nFrom-SVN: r142355", "tree": {"sha": "773f6a892e8147c25699be344fdb943a6a5c0ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773f6a892e8147c25699be344fdb943a6a5c0ae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d47a01516c91f35d0f60d2e636d6e3724ee400b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47a01516c91f35d0f60d2e636d6e3724ee400b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47a01516c91f35d0f60d2e636d6e3724ee400b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47a01516c91f35d0f60d2e636d6e3724ee400b3/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96e4a79fbd9ee3c390c77bc2bff69a783ee13ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4a79fbd9ee3c390c77bc2bff69a783ee13ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e4a79fbd9ee3c390c77bc2bff69a783ee13ff2"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "33b5cfdca38c22d16e84ac31dddac2be4d0280ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d47a01516c91f35d0f60d2e636d6e3724ee400b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d47a01516c91f35d0f60d2e636d6e3724ee400b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d47a01516c91f35d0f60d2e636d6e3724ee400b3", "patch": "@@ -1,3 +1,12 @@\n+2008-12-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/37861\n+        * tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Do not check\n+        for INDIRECT_REFs.\n+        (forward_propagate_addr_into_variable_array_index): Check that the\n+        offset is not computed from a MULT_EXPR, use is_gimple_assign rather\n+        than the gimple code directly.\n+        \n 2008-12-02  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/float_disf.c (__floatdisf): Prototype."}, {"sha": "bfd7146d4901dc18d53988dbd5283a5be19cb9e8", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d47a01516c91f35d0f60d2e636d6e3724ee400b3/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d47a01516c91f35d0f60d2e636d6e3724ee400b3/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=d47a01516c91f35d0f60d2e636d6e3724ee400b3", "patch": "@@ -613,19 +613,27 @@ forward_propagate_addr_into_variable_array_index (tree offset,\n   tree index;\n   gimple offset_def, use_stmt = gsi_stmt (*use_stmt_gsi);\n \n-  /* Try to find an expression for a proper index.  This is either\n-     a multiplication expression by the element size or just the\n-     ssa name we came along in case the element size is one.  */\n+  /* Get the offset's defining statement.  */\n+  offset_def = SSA_NAME_DEF_STMT (offset);\n+\n+  /* Try to find an expression for a proper index.  This is either a\n+     multiplication expression by the element size or just the ssa name we came\n+     along in case the element size is one. In that case, however, we do not\n+     allow multiplications because they can be computing index to a higher\n+     level dimension (PR 37861). */\n   if (integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)))))\n-    index = offset;\n-  else\n     {\n-      /* Get the offset's defining statement.  */\n-      offset_def = SSA_NAME_DEF_STMT (offset);\n+      if (is_gimple_assign (offset_def)\n+\t  && gimple_assign_rhs_code (offset_def) == MULT_EXPR)\n+\treturn false;\n \n+      index = offset;\n+    }\n+  else\n+    {\n       /* The statement which defines OFFSET before type conversion\n          must be a simple GIMPLE_ASSIGN.  */\n-      if (gimple_code (offset_def) != GIMPLE_ASSIGN)\n+      if (!is_gimple_assign (offset_def))\n \treturn false;\n \n       /* The RHS of the statement which defines OFFSET must be a\n@@ -805,9 +813,6 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n   array_ref = TREE_OPERAND (def_rhs, 0);\n   if (TREE_CODE (array_ref) != ARRAY_REF\n       || TREE_CODE (TREE_TYPE (TREE_OPERAND (array_ref, 0))) != ARRAY_TYPE\n-      /* Avoid accessing hidden multidimensional arrays in this way or VRP\n-\t might give out bogus warnings (see PR 37861) */\n-      || TREE_CODE (TREE_OPERAND (array_ref, 0)) == INDIRECT_REF\n       || !integer_zerop (TREE_OPERAND (array_ref, 1)))\n     return false;\n "}]}