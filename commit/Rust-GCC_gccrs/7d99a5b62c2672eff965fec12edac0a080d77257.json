{"sha": "7d99a5b62c2672eff965fec12edac0a080d77257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5OWE1YjYyYzI2NzJlZmY5NjVmZWMxMmVkYWMwYTA4MGQ3NzI1Nw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-09-06T09:58:14Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-09-06T09:58:14Z"}, "message": "[arm] Add missing predicated-short-it variants to cmp_and and cmp_ior patterns\n\nThe cmp_and and cmp_ior patterns were missing a couple of short-it\nvariants for thumb2, where the comparisons are all using registers\nsome of which were HI_REGS.\n\n\t* config/arm/arm.md (cmp_and): Add short-it variant for thumb2 with\n\thigh regs.\n\t(cmp_ior): Likewise.\n\nFrom-SVN: r275453", "tree": {"sha": "f20438f62012cc389166d367bb9da1a01f7394ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20438f62012cc389166d367bb9da1a01f7394ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d99a5b62c2672eff965fec12edac0a080d77257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d99a5b62c2672eff965fec12edac0a080d77257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d99a5b62c2672eff965fec12edac0a080d77257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d99a5b62c2672eff965fec12edac0a080d77257/comments", "author": null, "committer": null, "parents": [{"sha": "973159f219b154e79d10f95117932caf4b398819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973159f219b154e79d10f95117932caf4b398819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973159f219b154e79d10f95117932caf4b398819"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "65d9f43db7fe003f0eae401398b2a0b58e9f7fff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d99a5b62c2672eff965fec12edac0a080d77257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d99a5b62c2672eff965fec12edac0a080d77257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d99a5b62c2672eff965fec12edac0a080d77257", "patch": "@@ -1,3 +1,9 @@\n+2019-09-06  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (cmp_and): Add short-it variant for thumb2 with\n+\thigh regs.\n+\t(cmp_ior): Likewise.\n+\n 2019-09-06  Martin Liska  <mliska@suse.cz>\n \n \t* doc/match-and-simplify.texi: Separate tuples with ;."}, {"sha": "e23683114087f6cc9ee78376529da97cfe31d3a6", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d99a5b62c2672eff965fec12edac0a080d77257/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d99a5b62c2672eff965fec12edac0a080d77257/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7d99a5b62c2672eff965fec12edac0a080d77257", "patch": "@@ -9143,15 +9143,15 @@\n \t(compare\n \t (and:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 0 \"s_register_operand\" \n-\t        \"l,l,l,r,r,r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_add_operand\" \n-\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n+\t   [(match_operand:SI 0 \"s_register_operand\"\n+\t        \"l,l,l,r,r,r,r,r,r,r\")\n+\t    (match_operand:SI 1 \"arm_add_operand\"\n+\t        \"lPy,lPy,lPy,rI,L,r,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \n-\t        \"l,r,r,l,l,r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_add_operand\" \n-\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")]))\n+\t   [(match_operand:SI 2 \"s_register_operand\"\n+\t        \"l,r,r,l,l,r,r,r,r,r\")\n+\t    (match_operand:SI 3 \"arm_add_operand\"\n+\t        \"lPy,rI,L,lPy,lPy,r,rI,rI,L,L\")]))\n \t (const_int 0)))]\n   \"TARGET_32BIT\"\n   \"*\n@@ -9183,9 +9183,10 @@\n       \\\"it\\\\t%d5\\\",\n       \\\"it\\\\t%d4\\\"\n     };\n-    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n-                                   CMP_CMP, CMN_CMP, CMP_CMP,\n-                                   CMN_CMP, CMP_CMN, CMN_CMN};\n+    static const int cmp_idx[] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                  CMP_CMP, CMN_CMP, CMP_CMP,\n+                                  CMP_CMP, CMN_CMP, CMP_CMN,\n+\t\t\t\t  CMN_CMN};\n     int swap =\n       comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n \n@@ -9198,14 +9199,15 @@\n   }\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"no\")\n-   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n-   (set_attr \"enabled_for_short_it\" \"yes,no,no,no,no,no,no,no,no\")\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr \"enabled_for_short_it\" \"yes,no,no,no,no,yes,no,no,no,no\")\n    (set_attr_alternative \"length\"\n       [(const_int 6)\n        (const_int 8)\n        (const_int 8)\n        (const_int 8)\n        (const_int 8)\n+       (const_int 6)\n        (if_then_else (eq_attr \"is_thumb\" \"no\")\n            (const_int 8)\n            (const_int 10))\n@@ -9227,14 +9229,14 @@\n \t (ior:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n \t   [(match_operand:SI 0 \"s_register_operand\"\n-\t        \"l,l,l,r,r,r,r,r,r\")\n+\t        \"l,l,l,r,r,r,r,r,r,r\")\n \t    (match_operand:SI 1 \"arm_add_operand\"\n-\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n+\t        \"lPy,lPy,lPy,rI,L,r,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n \t   [(match_operand:SI 2 \"s_register_operand\"\n-\t        \"l,r,r,l,l,r,r,r,r\")\n+\t        \"l,r,r,l,l,r,r,r,r,r\")\n \t    (match_operand:SI 3 \"arm_add_operand\"\n-\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")]))\n+\t        \"lPy,rI,L,lPy,lPy,r,rI,rI,L,L\")]))\n \t (const_int 0)))]\n   \"TARGET_32BIT\"\n   \"*\n@@ -9266,9 +9268,10 @@\n       \\\"it\\\\t%D4\\\",\n       \\\"it\\\\t%D5\\\"\n     };\n-    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n-                                   CMP_CMP, CMN_CMP, CMP_CMP,\n-                                   CMN_CMP, CMP_CMN, CMN_CMN};\n+    static const int cmp_idx[] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                  CMP_CMP, CMN_CMP, CMP_CMP,\n+\t\t\t\t  CMP_CMP, CMN_CMP, CMP_CMN,\n+\t\t\t\t  CMN_CMN};\n     int swap =\n       comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n \n@@ -9281,14 +9284,15 @@\n   }\n   \"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n-   (set_attr \"enabled_for_short_it\" \"yes,no,no,no,no,no,no,no,no\")\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr \"enabled_for_short_it\" \"yes,no,no,no,no,yes,no,no,no,no\")\n    (set_attr_alternative \"length\"\n       [(const_int 6)\n        (const_int 8)\n        (const_int 8)\n        (const_int 8)\n        (const_int 8)\n+       (const_int 6)\n        (if_then_else (eq_attr \"is_thumb\" \"no\")\n            (const_int 8)\n            (const_int 10))"}]}