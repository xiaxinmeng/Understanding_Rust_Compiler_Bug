{"sha": "73c865fab7acc35517e28e09dc417db6a5697f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjODY1ZmFiN2FjYzM1NTE3ZTI4ZTA5ZGM0MTdkYjZhNTY5N2YxMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-09T12:04:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-09T12:04:17Z"}, "message": "re PR middle-end/42512 (integer wrong code bug with loop)\n\n2010-01-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42512\n\t* tree-scalar-evolution.c (interpret_loop_phi): Make sure\n\tthe evolution is compatible with the initial condition.\n\n\t* gcc.c-torture/execute/pr42512.c: New testcase.\n\nFrom-SVN: r155757", "tree": {"sha": "ee8a9e64e051a1d0c3d8486cfd0df2a03b079041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8a9e64e051a1d0c3d8486cfd0df2a03b079041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c865fab7acc35517e28e09dc417db6a5697f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c865fab7acc35517e28e09dc417db6a5697f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c865fab7acc35517e28e09dc417db6a5697f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c865fab7acc35517e28e09dc417db6a5697f12/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0462fd5e01941647bfb8b3706443fd9de8b585c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0462fd5e01941647bfb8b3706443fd9de8b585c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0462fd5e01941647bfb8b3706443fd9de8b585c2"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "99f59899bb6aea01bf6f487697c2409cbac4e512", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73c865fab7acc35517e28e09dc417db6a5697f12", "patch": "@@ -1,3 +1,9 @@\n+2010-01-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42512\n+\t* tree-scalar-evolution.c (interpret_loop_phi): Make sure\n+\tthe evolution is compatible with the initial condition.\n+\n 2010-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c (process_command): Update copyright notice dates."}, {"sha": "87d7a18c7e77dd2581e2b3d8add13eab7879682c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73c865fab7acc35517e28e09dc417db6a5697f12", "patch": "@@ -1,3 +1,8 @@\n+2010-01-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42512\n+\t* gcc.c-torture/execute/pr42512.c: New testcase.\n+\n 2010-01-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41298"}, {"sha": "f4e5cedbfc9b3f651f528d58ff2c2c90ad689a31", "filename": "gcc/testsuite/gcc.c-torture/execute/pr42512.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42512.c?ref=73c865fab7acc35517e28e09dc417db6a5697f12", "patch": "@@ -0,0 +1,13 @@\n+extern void abort (void);\n+\n+short g_3;\n+\n+int main (void)\n+{\n+    int l_2;\n+    for (l_2 = -1; l_2 != 0; l_2 = (unsigned char)(l_2 - 1))\n+      g_3 |= l_2;\n+    if (g_3 != -1)\n+      abort ();\n+    return 0;\n+}"}, {"sha": "3ebc54e8556b02a0487e00b8f3740fcb65a5f597", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c865fab7acc35517e28e09dc417db6a5697f12/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=73c865fab7acc35517e28e09dc417db6a5697f12", "patch": "@@ -1642,6 +1642,23 @@ interpret_loop_phi (struct loop *loop, gimple loop_phi_node)\n   init_cond = analyze_initial_condition (loop_phi_node);\n   res = analyze_evolution_in_loop (loop_phi_node, init_cond);\n \n+  /* Verify we maintained the correct initial condition throughout\n+     possible conversions in the SSA chain.  */\n+  if (res != chrec_dont_know)\n+    {\n+      tree new_init = res;\n+      if (CONVERT_EXPR_P (res)\n+\t  && TREE_CODE (TREE_OPERAND (res, 0)) == POLYNOMIAL_CHREC)\n+\tnew_init = fold_convert (TREE_TYPE (res),\n+\t\t\t\t CHREC_LEFT (TREE_OPERAND (res, 0)));\n+      else if (TREE_CODE (res) == POLYNOMIAL_CHREC)\n+\tnew_init = CHREC_LEFT (res);\n+      STRIP_USELESS_TYPE_CONVERSION (new_init);\n+      gcc_assert (TREE_CODE (new_init) != POLYNOMIAL_CHREC);\n+      if (!operand_equal_p (init_cond, new_init, 0))\n+\treturn chrec_dont_know;\n+    }\n+\n   return res;\n }\n "}]}