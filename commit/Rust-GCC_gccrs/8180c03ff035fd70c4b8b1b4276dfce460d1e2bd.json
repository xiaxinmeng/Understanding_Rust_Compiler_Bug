{"sha": "8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4MGMwM2ZmMDM1ZmQ3MGM0YjhiMWI0Mjc2ZGZjZTQ2MGQxZTJiZA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-31T10:01:34Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-31T10:01:34Z"}, "message": "[ARC] Add 'uncached' attribute.\n\nThe _Uncached type qualifier can be used to bypass the cache without\nresorting to declaring variables as volatile.\n\ngcc/\n2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (arc_is_uncached_mem_p): Function proto.\n\t* config/arc/arc.c (arc_handle_uncached_attribute): New function.\n\t(arc_attribute_table): Add 'uncached' attribute.\n\t(arc_print_operand): Print '.di' flag for uncached memory\n\taccesses.\n\t(arc_in_small_data_p): Do not consider for small data the uncached\n\ttypes.\n\t(arc_is_uncached_mem_p): New function.\n\t* config/arc/predicates.md (compact_store_memory_operand): Check\n\tfor uncached memory accesses.\n\t(nonvol_nonimm_operand): Likewise.\n\t* gcc/doc/extend.texi (ARC Type Attribute): New subsection.\n\ngcc/testsuite\n2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/uncached.c: New test.\n\nFrom-SVN: r257222", "tree": {"sha": "0b0908881e939c28f55e4d767bf88e4033f57b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0908881e939c28f55e4d767bf88e4033f57b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f857e1b0750d79172031951ed22e538df7299f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f857e1b0750d79172031951ed22e538df7299f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f857e1b0750d79172031951ed22e538df7299f8"}], "stats": {"total": 127, "additions": 121, "deletions": 6}, "files": [{"sha": "0b380db6b52b687c0da177600be20611af723ffc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -1,3 +1,18 @@\n+2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_is_uncached_mem_p): Function proto.\n+\t* config/arc/arc.c (arc_handle_uncached_attribute): New function.\n+\t(arc_attribute_table): Add 'uncached' attribute.\n+\t(arc_print_operand): Print '.di' flag for uncached memory\n+\taccesses.\n+\t(arc_in_small_data_p): Do not consider for small data the uncached\n+\ttypes.\n+\t(arc_is_uncached_mem_p): New function.\n+\t* config/arc/predicates.md (compact_store_memory_operand): Check\n+\tfor uncached memory accesses.\n+\t(nonvol_nonimm_operand): Likewise.\n+\t* gcc/doc/extend.texi (ARC Type Attribute): New subsection.\n+\n 2018-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/84100"}, {"sha": "b469cfc4c2c870a1939fc8acbd612618681aa626", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -47,6 +47,7 @@ extern void arc_expand_compare_and_swap (rtx *);\n extern bool compact_memory_operand_p (rtx, machine_mode, bool, bool);\n extern int arc_return_address_register (unsigned int);\n extern unsigned int arc_compute_function_type (struct function *);\n+extern bool arc_is_uncached_mem_p (rtx);\n #endif /* RTX_CODE */\n \n extern unsigned int arc_compute_frame_size (int);"}, {"sha": "624404cf35a58d455d885b47507c435eb2f8451c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -227,7 +227,7 @@ static tree arc_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_jli_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_secure_attribute (tree *, tree, tree, int, bool *);\n-\n+static tree arc_handle_uncached_attribute (tree *, tree, tree, int, bool *);\n \n /* Initialized arc_attribute_table to NULL since arc doesnot have any\n    machine specific supported attributes.  */\n@@ -253,13 +253,16 @@ const struct attribute_spec arc_attribute_table[] =\n     NULL },\n   /* Functions calls made using jli instruction.  The pointer in JLI\n      table is found latter.  */\n-  { \"jli_always\",    0, 0, false, true,  true,  NULL, NULL },\n+  { \"jli_always\",    0, 0, false, true,  true, false,  NULL, NULL },\n   /* Functions calls made using jli instruction.  The pointer in JLI\n      table is given as input parameter.  */\n-  { \"jli_fixed\",    1, 1, false, true,  true,  arc_handle_jli_attribute,\n+  { \"jli_fixed\",    1, 1, false, true,  true, false, arc_handle_jli_attribute,\n     NULL },\n   /* Call a function using secure-mode.  */\n-  { \"secure_call\",  1, 1, false, true, true, arc_handle_secure_attribute,\n+  { \"secure_call\",  1, 1, false, true, true, false, arc_handle_secure_attribute,\n+    NULL },\n+   /* Bypass caches using .di flag.  */\n+  { \"uncached\", 0, 0, false, true, false, false, arc_handle_uncached_attribute,\n     NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n@@ -4193,7 +4196,8 @@ arc_print_operand (FILE *file, rtx x, int code)\n \t refs are defined to use the cache bypass mechanism.  */\n       if (GET_CODE (x) == MEM)\n \t{\n-\t  if (MEM_VOLATILE_P (x) && !TARGET_VOLATILE_CACHE_SET )\n+\t  if ((MEM_VOLATILE_P (x) && !TARGET_VOLATILE_CACHE_SET)\n+\t      || arc_is_uncached_mem_p (x))\n \t    fputs (\".di\", file);\n \t}\n       else\n@@ -8102,6 +8106,7 @@ static bool\n arc_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n+  tree attr;\n \n   /* Only variables are going into small data area.  */\n   if (TREE_CODE (decl) != VAR_DECL)\n@@ -8125,6 +8130,11 @@ arc_in_small_data_p (const_tree decl)\n       && TREE_THIS_VOLATILE (decl))\n     return false;\n \n+  /* Likewise for uncached data.  */\n+  attr = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+  if (lookup_attribute (\"uncached\", attr))\n+    return false;\n+\n   if (DECL_SECTION_NAME (decl) != 0)\n     {\n       const char *name = DECL_SECTION_NAME (decl);\n@@ -11130,6 +11140,57 @@ arc_is_secure_call_p (rtx pat)\n   return false;\n }\n \n+/* Handle \"uncached\" qualifier.  */\n+\n+static tree\n+arc_handle_uncached_attribute (tree *node,\n+\t\t\t       tree name, tree args,\n+\t\t\t       int flags ATTRIBUTE_UNUSED,\n+\t\t\t       bool *no_add_attrs)\n+{\n+  if (DECL_P (*node) && TREE_CODE (*node) != TYPE_DECL)\n+    {\n+      error (\"%qE attribute only applies to types\",\n+\t     name);\n+      *no_add_attrs = true;\n+    }\n+  else if (args)\n+    {\n+      warning (OPT_Wattributes, \"argument of %qE attribute ignored\", name);\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Return TRUE if PAT is a memory addressing an uncached data.  */\n+\n+bool\n+arc_is_uncached_mem_p (rtx pat)\n+{\n+  tree attrs;\n+  tree ttype;\n+  struct mem_attrs *refattrs;\n+\n+  if (!MEM_P (pat))\n+    return false;\n+\n+  /* Get the memory attributes.  */\n+  refattrs = MEM_ATTRS (pat);\n+  if (!refattrs\n+      || !refattrs->expr)\n+    return false;\n+\n+  /* Get the type declaration.  */\n+  ttype = TREE_TYPE (refattrs->expr);\n+  if (!ttype)\n+    return false;\n+\n+  /* Get the type attributes.  */\n+  attrs = TYPE_ATTRIBUTES (ttype);\n+  if (lookup_attribute (\"uncached\", attrs))\n+    return true;\n+  return false;\n+}\n+\n /* Implement TARGET_USE_ANCHORS_FOR_SYMBOL_P.  We don't want to use\n    anchors for small data: the GP register acts as an anchor in that\n    case.  We also don't want to use them for PC-relative accesses,"}, {"sha": "38651f79bf43d29fd1eb4a5e02f57fa5127fd627", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -217,6 +217,10 @@\n   if (MEM_VOLATILE_P (op) && !TARGET_VOLATILE_CACHE_SET)\n      return 0;\n \n+  /* likewise for uncached types.  */\n+  if (arc_is_uncached_mem_p (op))\n+     return 0;\n+\n   size = GET_MODE_SIZE (mode);\n \n   /* dword operations really put out 2 instructions, so eliminate them.  */\n@@ -412,7 +416,8 @@\n ;; and only the standard movXX patterns are set up to handle them.\n (define_predicate \"nonvol_nonimm_operand\"\n   (and (match_code \"subreg, reg, mem\")\n-       (match_test \"(GET_CODE (op) != MEM || !MEM_VOLATILE_P (op)) && nonimmediate_operand (op, mode)\"))\n+       (match_test \"(GET_CODE (op) != MEM || !MEM_VOLATILE_P (op)) && nonimmediate_operand (op, mode)\")\n+       (match_test \"!arc_is_uncached_mem_p (op)\"))\n )\n \n ;; Return 1 if OP is a comparison operator valid for the mode of CC."}, {"sha": "8eef2a492b361a28c476287c69dc1e4f633f3d68", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -6817,6 +6817,7 @@ attributes.\n \n @menu\n * Common Type Attributes::\n+* ARC Type Attributes::\n * ARM Type Attributes::\n * MeP Type Attributes::\n * PowerPC Type Attributes::\n@@ -7250,6 +7251,16 @@ To specify multiple attributes, separate them by commas within the\n double parentheses: for example, @samp{__attribute__ ((aligned (16),\n packed))}.\n \n+@node ARC Type Attributes\n+@subsection ARC Type Attributes\n+\n+@cindex @code{uncached} type attribute, ARC\n+Declaring objects with @code{uncached} allows you to exclude\n+data-cache participation in load and store operations on those objects\n+without involving the additional semantic implications of\n+@code{volatile}.  The @code{.di} instruction suffix is used for all\n+loads and stores of data declared @code{uncached}.\n+\n @node ARM Type Attributes\n @subsection ARM Type Attributes\n "}, {"sha": "9056519e8ce008ea4208834c47b367f7beef8f5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -1,3 +1,7 @@\n+2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/uncached.c: New test.\n+\n 2018-01-31  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR lto/83954"}, {"sha": "367e8dc7ec5955cc40bc2ccf42a9076545524360", "filename": "gcc/testsuite/gcc.target/arc/uncached.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8180c03ff035fd70c4b8b1b4276dfce460d1e2bd/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Funcached.c?ref=8180c03ff035fd70c4b8b1b4276dfce460d1e2bd", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+/* Check 'uncached' type attribute.  */\n+\n+typedef volatile unsigned int RwReg  __attribute__ ((uncached));\n+\n+typedef struct {\n+  RwReg UART_THR;\n+  int SIDE_DISH;\n+} UART;\n+\n+void uart_putc(UART *port, char c)\n+{\n+    port->UART_THR = c;\n+    port->SIDE_DISH = c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st\\.di\" 1 } } */"}]}