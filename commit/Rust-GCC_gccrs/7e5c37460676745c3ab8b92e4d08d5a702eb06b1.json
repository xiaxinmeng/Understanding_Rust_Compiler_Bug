{"sha": "7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1YzM3NDYwNjc2NzQ1YzNhYjhiOTJlNGQwOGQ1YTcwMmViMDZiMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-08-06T10:23:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-08-06T10:23:38Z"}, "message": "S/390: Fix dwarf reg size table for -m31 -mzarch.\n\ngcc/ChangeLog:\n\t    * config/s390/s390.c (s390_dwarf_frame_reg_mode): Return Pmode for\n\t    all GPRs.\n\ngcc/testsuite/ChangeLog:\n\t    * gcc.target/s390/dwarfregtable-1.c: New test.\n\t    * gcc.target/s390/dwarfregtable-2.c: New test.\n\t    * gcc.target/s390/dwarfregtable-3.c: New test.\n\nFrom-SVN: r226673", "tree": {"sha": "76fdf257c9b26078be38123caa519b116b17fb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76fdf257c9b26078be38123caa519b116b17fb92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/comments", "author": null, "committer": null, "parents": [{"sha": "c914ac45c7670c710f3ec17dbd5341e55ae2380f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c914ac45c7670c710f3ec17dbd5341e55ae2380f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c914ac45c7670c710f3ec17dbd5341e55ae2380f"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "aab022cb72236be0be47541a883762c24d75636a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -1,3 +1,8 @@\n+2015-08-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_dwarf_frame_reg_mode): Return Pmode for\n+\tall GPRs.\n+\n 2015-08-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_tbegin): Expand either"}, {"sha": "5814694adbca2231850c150eaf6bc155e60426e4", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -6497,6 +6497,10 @@ s390_dwarf_frame_reg_mode (int regno)\n {\n   machine_mode save_mode = default_dwarf_frame_reg_mode (regno);\n \n+  /* Make sure not to return DImode for any GPR with -m31 -mzarch.  */\n+  if (GENERAL_REGNO_P (regno))\n+    save_mode = Pmode;\n+\n   /* The rightmost 64 bits of vector registers are call-clobbered.  */\n   if (GET_MODE_SIZE (save_mode) > 8)\n     save_mode = DImode;"}, {"sha": "74bbd272d7fa2a736d8457f9e2c1dbe814fd9221", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -1,3 +1,9 @@\n+2015-08-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/dwarfregtable-1.c: New test.\n+\t* gcc.target/s390/dwarfregtable-2.c: New test.\n+\t* gcc.target/s390/dwarfregtable-3.c: New test.\n+\n 2015-08-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/htm-builtins-z13-1.c: New test."}, {"sha": "b125498745155ab5c260ea1ef2e0a8c4f81ecd77", "filename": "gcc/testsuite/gcc.target/s390/dwarfregtable-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-1.c?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -0,0 +1,21 @@\n+/* Make sure the dwarf reg size table doesn't change for 31 bit.  */\n+\n+/* { dg-do compile { target { ! lp64 } } } */\n+/* { dg-options \"-mesa\" } */\n+\n+#define DWARF_FRAME_REGISTERS 34\n+\n+static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS + 1];\n+static unsigned char ref_reg_size_table[DWARF_FRAME_REGISTERS + 1] =\n+  { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n+    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 0 };\n+\n+int\n+main ()\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+  if (__builtin_memcmp (ref_reg_size_table,\n+\t\t\tdwarf_reg_size_table, DWARF_FRAME_REGISTERS + 1) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "bc5a9f8e6d849df3ee3dc391eb0e9570cf426713", "filename": "gcc/testsuite/gcc.target/s390/dwarfregtable-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-2.c?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -0,0 +1,21 @@\n+/* Make sure the dwarf reg size table doesn't change for 31 bit zarch.  */\n+\n+/* { dg-do compile { target { ! lp64 } } } */\n+/* { dg-options \"-mzarch\" } */\n+\n+#define DWARF_FRAME_REGISTERS 34\n+\n+static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS + 1];\n+static unsigned char ref_reg_size_table[DWARF_FRAME_REGISTERS + 1] =\n+  { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n+    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 0 };\n+\n+int\n+main ()\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+  if (__builtin_memcmp (ref_reg_size_table,\n+\t\t\tdwarf_reg_size_table, DWARF_FRAME_REGISTERS + 1) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "55711bf71e322b6a88512ce1c01bace3e26b8e50", "filename": "gcc/testsuite/gcc.target/s390/dwarfregtable-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c37460676745c3ab8b92e4d08d5a702eb06b1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fdwarfregtable-3.c?ref=7e5c37460676745c3ab8b92e4d08d5a702eb06b1", "patch": "@@ -0,0 +1,20 @@\n+/* Make sure the dwarf reg size table doesn't change for 64 bit.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+\n+#define DWARF_FRAME_REGISTERS 34\n+\n+static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS + 1];\n+static unsigned char ref_reg_size_table[DWARF_FRAME_REGISTERS + 1] =\n+  { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n+    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0 };\n+\n+int\n+main ()\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+  if (__builtin_memcmp (ref_reg_size_table,\n+\t\t\tdwarf_reg_size_table, DWARF_FRAME_REGISTERS + 1) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}