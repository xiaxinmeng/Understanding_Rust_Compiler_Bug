{"sha": "e435e72ad713cadd661072427588ec1c777c04e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzNWU3MmFkNzEzY2FkZDY2MTA3MjQyNzU4OGVjMWM3NzdjMDRlMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-03T18:36:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-03T23:40:00Z"}, "message": "compile, runtime: make selectnbrecv return two values\n\nThe only different between selectnbrecv and selectnbrecv2 is the later\nset the input pointer value by second return value from chanrecv.\n\nSo by making selectnbrecv return two values from chanrecv, we can get\nrid of selectnbrecv2, the compiler can now call only selectnbrecv and\ngenerate simpler code.\n\nThis is the gofrontend version of https://golang.org/cl/292890.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/339529", "tree": {"sha": "7b5fc4228c17022dccb00087e230a45aedcca017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b5fc4228c17022dccb00087e230a45aedcca017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e435e72ad713cadd661072427588ec1c777c04e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e435e72ad713cadd661072427588ec1c777c04e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e435e72ad713cadd661072427588ec1c777c04e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e435e72ad713cadd661072427588ec1c777c04e3/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd439a33e889a1a47b103951c53472fc8558eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbd439a33e889a1a47b103951c53472fc8558eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbd439a33e889a1a47b103951c53472fc8558eb"}], "stats": {"total": 100, "additions": 37, "deletions": 63}, "files": [{"sha": "5a097ffee851d50fde61c7fbfb276c6f01c5ffdf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e435e72ad713cadd661072427588ec1c777c04e3", "patch": "@@ -1,4 +1,4 @@\n-54361805bd611d896042b879ee7f6d2d4d088537\n+2031f0be9c0b5fda6421d290a0261eb6bd1c8205\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "87a27085d60b62552c246c3a2f34de8c4a24d71e", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=e435e72ad713cadd661072427588ec1c777c04e3", "patch": "@@ -204,12 +204,8 @@ DEF_GO_RUNTIME(SELECTNBSEND, \"runtime.selectnbsend\", P2(CHAN, POINTER), R1(BOOL)\n \n // Non-blocking receive a value from a channel, used for two-case select\n // statement with a default case.\n-DEF_GO_RUNTIME(SELECTNBRECV, \"runtime.selectnbrecv\", P2(POINTER, CHAN), R1(BOOL))\n-\n-// Non-blocking tuple receive from a channel, used for two-case select\n-// statement with a default case.\n-DEF_GO_RUNTIME(SELECTNBRECV2, \"runtime.selectnbrecv2\", P3(POINTER, POINTER, CHAN),\n-               R1(BOOL))\n+DEF_GO_RUNTIME(SELECTNBRECV, \"runtime.selectnbrecv\", P2(POINTER, CHAN),\n+\t       R2(BOOL, BOOL))\n \n // Block execution.  Used for zero-case select.\n DEF_GO_RUNTIME(BLOCK, \"runtime.block\", P0(), R0())"}, {"sha": "95fa3c48709e78733dcb8681b0f5f8a9a5c5e6ff", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435e72ad713cadd661072427588ec1c777c04e3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=e435e72ad713cadd661072427588ec1c777c04e3", "patch": "@@ -6051,7 +6051,7 @@ Select_statement::lower_two_case(Block* b)\n   Expression* chanref = Expression::make_temporary_reference(chantmp, loc);\n \n   Block* bchan;\n-  Expression* call;\n+  Expression* cond;\n   if (chancase.is_send())\n     {\n       // if selectnbsend(chan, &val) { body } else { default body }\n@@ -6065,7 +6065,7 @@ Select_statement::lower_two_case(Block* b)\n \n       Expression* ref = Expression::make_temporary_reference(ts, loc);\n       Expression* addr = Expression::make_unary(OPERATOR_AND, ref, loc);\n-      call = Runtime::make_call(Runtime::SELECTNBSEND, loc, 2, chanref, addr);\n+      cond = Runtime::make_call(Runtime::SELECTNBSEND, loc, 2, chanref, addr);\n       bchan = chancase.statements();\n     }\n   else\n@@ -6075,34 +6075,31 @@ Select_statement::lower_two_case(Block* b)\n \n       Expression* ref = Expression::make_temporary_reference(ts, loc);\n       Expression* addr = Expression::make_unary(OPERATOR_AND, ref, loc);\n-      Expression* okref = NULL;\n-      if (chancase.closed() == NULL && chancase.closedvar() == NULL)\n-        {\n-          // Simple receive.\n-          // if selectnbrecv(&lhs, chan) { body } else { default body }\n-          call = Runtime::make_call(Runtime::SELECTNBRECV, loc, 2, addr, chanref);\n-        }\n-      else\n-        {\n-          // Tuple receive.\n-          // if selectnbrecv2(&lhs, &ok, chan) { body } else { default body }\n-\n-          Type* booltype = Type::make_boolean_type();\n-          Temporary_statement* okts = Statement::make_temporary(booltype, NULL,\n-                                                                loc);\n-          b->add_statement(okts);\n-\n-          okref = Expression::make_temporary_reference(okts, loc);\n-          Expression* okaddr = Expression::make_unary(OPERATOR_AND, okref, loc);\n-          call = Runtime::make_call(Runtime::SELECTNBRECV2, loc, 3, addr, okaddr,\n-                                    chanref);\n-        }\n+\n+      // selected, ok = selectnbrecv(&lhs, chan)\n+      Call_expression* call = Runtime::make_call(Runtime::SELECTNBRECV, loc, 2,\n+\t\t\t\t\t\t addr, chanref);\n+\n+      Temporary_statement* selected_temp =\n+\tStatement::make_temporary(Type::make_boolean_type(),\n+\t\t\t\t  Expression::make_call_result(call, 0),\n+\t\t\t\t  loc);\n+      b->add_statement(selected_temp);\n+\n+      Temporary_statement* ok_temp =\n+\tStatement::make_temporary(Type::make_boolean_type(),\n+\t\t\t\t  Expression::make_call_result(call, 1),\n+\t\t\t\t  loc);\n+      b->add_statement(ok_temp);\n+\n+      cond = Expression::make_temporary_reference(selected_temp, loc);\n \n       Location cloc = chancase.location();\n       bchan = new Block(b, loc);\n       if (chancase.val() != NULL && !chancase.val()->is_sink_expression())\n         {\n-          Statement* as = Statement::make_assignment(chancase.val(), ref->copy(),\n+          Statement* as = Statement::make_assignment(chancase.val(),\n+\t\t\t\t\t\t     ref->copy(),\n                                                      cloc);\n           bchan->add_statement(as);\n         }\n@@ -6114,20 +6111,26 @@ Select_statement::lower_two_case(Block* b)\n \n       if (chancase.closed() != NULL && !chancase.closed()->is_sink_expression())\n         {\n+\t  Expression* okref = Expression::make_temporary_reference(ok_temp,\n+\t\t\t\t\t\t\t\t   cloc);\n           Statement* as = Statement::make_assignment(chancase.closed(),\n-                                                     okref->copy(), cloc);\n+                                                     okref, cloc);\n           bchan->add_statement(as);\n         }\n       else if (chancase.closedvar() != NULL)\n-        chancase.closedvar()->var_value()->set_init(okref->copy());\n+\t{\n+\t  Expression* okref = Expression::make_temporary_reference(ok_temp,\n+\t\t\t\t\t\t\t\t   cloc);\n+\t  chancase.closedvar()->var_value()->set_init(okref);\n+\t}\n \n       Statement* bs = Statement::make_block_statement(chancase.statements(),\n                                                       cloc);\n       bchan->add_statement(bs);\n     }\n \n   Statement* ifs =\n-    Statement::make_if_statement(call, bchan, defcase.statements(), loc);\n+    Statement::make_if_statement(cond, bchan, defcase.statements(), loc);\n   b->add_statement(ifs);\n \n   Statement* label ="}, {"sha": "e3d0ad5acbe7a0a4ea51959f2a7ce9fa667f9046", "filename": "libgo/go/runtime/chan.go", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435e72ad713cadd661072427588ec1c777c04e3/libgo%2Fgo%2Fruntime%2Fchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435e72ad713cadd661072427588ec1c777c04e3/libgo%2Fgo%2Fruntime%2Fchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fchan.go?ref=e435e72ad713cadd661072427588ec1c777c04e3", "patch": "@@ -33,7 +33,6 @@ import (\n //go:linkname closechan\n //go:linkname selectnbsend\n //go:linkname selectnbrecv\n-//go:linkname selectnbrecv2\n \n const (\n \tmaxAlign  = 8\n@@ -709,28 +708,6 @@ func selectnbsend(c *hchan, elem unsafe.Pointer) (selected bool) {\n \treturn chansend(c, elem, false, getcallerpc())\n }\n \n-// compiler implements\n-//\n-//\tselect {\n-//\tcase v = <-c:\n-//\t\t... foo\n-//\tdefault:\n-//\t\t... bar\n-//\t}\n-//\n-// as\n-//\n-//\tif selectnbrecv(&v, c) {\n-//\t\t... foo\n-//\t} else {\n-//\t\t... bar\n-//\t}\n-//\n-func selectnbrecv(elem unsafe.Pointer, c *hchan) (selected bool) {\n-\tselected, _ = chanrecv(c, elem, false)\n-\treturn\n-}\n-\n // compiler implements\n //\n //\tselect {\n@@ -742,16 +719,14 @@ func selectnbrecv(elem unsafe.Pointer, c *hchan) (selected bool) {\n //\n // as\n //\n-//\tif c != nil && selectnbrecv2(&v, &ok, c) {\n+//\tif selected, ok = selectnbrecv(&v, c); selected {\n //\t\t... foo\n //\t} else {\n //\t\t... bar\n //\t}\n //\n-func selectnbrecv2(elem unsafe.Pointer, received *bool, c *hchan) (selected bool) {\n-\t// TODO(khr): just return 2 values from this function, now that it is in Go.\n-\tselected, *received = chanrecv(c, elem, false)\n-\treturn\n+func selectnbrecv(elem unsafe.Pointer, c *hchan) (selected, received bool) {\n+\treturn chanrecv(c, elem, false)\n }\n \n //go:linkname reflect_chansend reflect.chansend"}]}