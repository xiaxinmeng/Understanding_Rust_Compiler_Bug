{"sha": "df8b0a111998b29f47616001251333ce36984353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4YjBhMTExOTk4YjI5ZjQ3NjE2MDAxMjUxMzMzY2UzNjk4NDM1Mw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-05-18T00:58:45Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-05-18T00:58:45Z"}, "message": "re PR tree-optimization/63586 (x+x+x+x -> 4*x in gimple)\n\ngcc/testsuite/ChangeLog:\n\n2016-05-17  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/63586\n\t* gcc.dg/tree-ssa/pr63586-2.c: New test.\n\t* gcc.dg/tree-ssa/pr63586.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-14.c: Adjust multiplication count.\n\ngcc/ChangeLog:\n\n2016-05-17  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/63586\n\t* tree-ssa-reassoc.c (transform_add_to_multiply): New.\n\t(reassociate_bb): Call transform_add_to_multiply.\n\nFrom-SVN: r236356", "tree": {"sha": "644d67cb34b48f629c66ca40fc809c762d0db77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644d67cb34b48f629c66ca40fc809c762d0db77b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8b0a111998b29f47616001251333ce36984353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8b0a111998b29f47616001251333ce36984353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8b0a111998b29f47616001251333ce36984353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8b0a111998b29f47616001251333ce36984353/comments", "author": null, "committer": null, "parents": [{"sha": "9b856a01882489b0a9b32700da4ca88d3fe3764f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b856a01882489b0a9b32700da4ca88d3fe3764f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b856a01882489b0a9b32700da4ca88d3fe3764f"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "2f294c89fdf60e5f698f887eb5266cfb543e298e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b0a111998b29f47616001251333ce36984353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b0a111998b29f47616001251333ce36984353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df8b0a111998b29f47616001251333ce36984353", "patch": "@@ -1,3 +1,9 @@\n+2016-05-17  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/63586\n+\t* tree-ssa-reassoc.c (transform_add_to_multiply): New.\n+\t(reassociate_bb): Call transform_add_to_multiply.\n+\n 2016-05-17  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* config/aarch64/aarch64.c (all_extensions): Removed unused static variable."}, {"sha": "87fd63a1d77a8f62e6221df723aa5b123331e3f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df8b0a111998b29f47616001251333ce36984353", "patch": "@@ -1,3 +1,10 @@\n+2016-05-17  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/63586\n+\t* gcc.dg/tree-ssa/pr63586-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr63586.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-14.c: Adjust multiplication count.\n+\n 2016-05-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.c-torture/execute/20030222-1.c: Skip on ptx."}, {"sha": "16ebc86133fac199d90a761679756219b7272b64", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-14.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-14.c?ref=df8b0a111998b29f47616001251333ce36984353", "patch": "@@ -19,6 +19,7 @@ unsigned int test2 (unsigned int x, unsigned int y, unsigned int z,\n   return tmp1 + tmp2 + tmp3;\n }\n \n-/* There should be one multiplication left in test1 and three in test2.  */\n+/* There should be two multiplication left in test1 (inculding one generated\n+   when converting addition to multiplication) and three in test2.  */\n \n-/* { dg-final { scan-tree-dump-times \"\\\\\\*\" 4 \"reassoc1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\*\" 5 \"reassoc1\" } } */"}, {"sha": "3b5f36bf1e45c5ef7c9a5f7205394a002a99a72c", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b0a111998b29f47616001251333ce36984353/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=df8b0a111998b29f47616001251333ce36984353", "patch": "@@ -1756,6 +1756,82 @@ eliminate_redundant_comparison (enum tree_code opcode,\n   return false;\n }\n \n+/* Transform repeated addition of same values into multiply with\n+   constant.  */\n+static bool\n+transform_add_to_multiply (gimple *stmt, vec<operand_entry *> *ops)\n+{\n+  operand_entry *oe;\n+  tree op = NULL_TREE;\n+  int j;\n+  int i, start = -1, end = 0, count = 0;\n+  vec<std::pair <int, int> > indxs = vNULL;\n+  bool changed = false;\n+\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE ((*ops)[0]->op))\n+      && !flag_unsafe_math_optimizations)\n+    return false;\n+\n+  /* Look for repeated operands.  */\n+  FOR_EACH_VEC_ELT (*ops, i, oe)\n+    {\n+      if (start == -1)\n+\t{\n+\t  count = 1;\n+\t  op = oe->op;\n+\t  start = i;\n+\t}\n+      else if (operand_equal_p (oe->op, op, 0))\n+\t{\n+\t  count++;\n+\t  end = i;\n+\t}\n+      else\n+\t{\n+\t  if (count > 1)\n+\t    indxs.safe_push (std::make_pair (start, end));\n+\t  count = 1;\n+\t  op = oe->op;\n+\t  start = i;\n+\t}\n+    }\n+\n+  if (count > 1)\n+    indxs.safe_push (std::make_pair (start, end));\n+\n+  for (j = indxs.length () - 1; j >= 0; --j)\n+    {\n+      /* Convert repeated operand addition to multiplication.  */\n+      start = indxs[j].first;\n+      end = indxs[j].second;\n+      op = (*ops)[start]->op;\n+      count = end - start + 1;\n+      for (i = end; i >= start; --i)\n+\tops->unordered_remove (i);\n+      tree tmp = make_ssa_name (TREE_TYPE (op));\n+      tree cst = build_int_cst (integer_type_node, count);\n+      gimple *def_stmt = SSA_NAME_DEF_STMT (op);\n+      gassign *mul_stmt\n+\t= gimple_build_assign (tmp, MULT_EXPR,\n+\t\t\t       op, fold_convert (TREE_TYPE (op), cst));\n+      if (gimple_code (def_stmt) == GIMPLE_NOP\n+\t  || gimple_bb (stmt) != gimple_bb (def_stmt))\n+\t{\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t  gimple_set_uid (mul_stmt, gimple_uid (stmt));\n+\t  gsi_insert_before (&gsi, mul_stmt, GSI_NEW_STMT);\n+\t}\n+      else\n+\tinsert_stmt_after (mul_stmt, def_stmt);\n+      gimple_set_visited (mul_stmt, true);\n+      add_to_ops_vec (ops, tmp);\n+      changed = true;\n+    }\n+\n+  return changed;\n+}\n+\n+\n /* Perform various identities and other optimizations on the list of\n    operand entries, stored in OPS.  The tree code for the binary\n    operation between all the operands is OPCODE.  */\n@@ -5110,6 +5186,10 @@ reassociate_bb (basic_block bb)\n \t\t  optimize_ops_list (rhs_code, &ops);\n \t\t}\n \n+\t      if (rhs_code == PLUS_EXPR\n+\t\t  && transform_add_to_multiply (stmt, &ops))\n+\t\tops.qsort (sort_by_operand_rank);\n+\n \t      if (rhs_code == BIT_IOR_EXPR || rhs_code == BIT_AND_EXPR)\n \t\t{\n \t\t  if (is_vector)"}]}