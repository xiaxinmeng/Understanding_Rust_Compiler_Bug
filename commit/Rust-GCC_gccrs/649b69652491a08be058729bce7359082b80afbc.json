{"sha": "649b69652491a08be058729bce7359082b80afbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5YjY5NjUyNDkxYTA4YmUwNTg3MjliY2U3MzU5MDgyYjgwYWZiYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-07T21:03:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-07T21:03:02Z"}, "message": "i386.md (*jcc_bt<mode>): Only split before reload.\n\n\t* config/i386/i386.md (*jcc_bt<mode>): Only split before reload.\n\tRemove operand constraints.  Change operand 2 predicate to\n\tnonmemory operand.  Limit const_int values to mode bitsize.  Only\n\tallow const_int values less than 32 when optimizing for size.\n\t(*jcc_bt<mode>_1, *jcc_bt<mode>_mask): Only split before reload.\n\tRemove operand constraints.\n\t(*bt<mode>): Use SImode for const_int values less than 32.\n\t(regmode): Remove mode attribute.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/bt-3.c: New test.\n\t* gcc.target/i386/bt-4.c: Ditto.\n\nFrom-SVN: r225527", "tree": {"sha": "fddcb7f4616ac8b0438b9aa911ce907992c8e873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fddcb7f4616ac8b0438b9aa911ce907992c8e873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649b69652491a08be058729bce7359082b80afbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649b69652491a08be058729bce7359082b80afbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649b69652491a08be058729bce7359082b80afbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649b69652491a08be058729bce7359082b80afbc/comments", "author": null, "committer": null, "parents": [{"sha": "2a7fb83f490c86f530efe5a83f720c95e03f883d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7fb83f490c86f530efe5a83f720c95e03f883d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7fb83f490c86f530efe5a83f720c95e03f883d"}], "stats": {"total": 279, "additions": 174, "deletions": 105}, "files": [{"sha": "d325d90adf485f36c7789e233e6bf198149771e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649b69652491a08be058729bce7359082b80afbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649b69652491a08be058729bce7359082b80afbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=649b69652491a08be058729bce7359082b80afbc", "patch": "@@ -1,3 +1,14 @@\n+2015-07-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*jcc_bt<mode>): Only split before reload.\n+\tRemove operand constraints.  Change operand 2 predicate to\n+\tnonmemory operand.  Limit const_int values to mode bitsize.  Only\n+\tallow const_int values less than 32 when optimizing for size.\n+\t(*jcc_bt<mode>_1, *jcc_bt<mode>_mask): Only split before reload.\n+\tRemove operand constraints.\n+\t(*bt<mode>): Use SImode for const_int values less than 32.\n+\t(regmode): Remove mode attribute.\n+\n 2015-07-07  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/moxie/moxie.h (GO_IF_LEGITIMATE_ADDRESS): Remove macros.\n@@ -10,8 +21,8 @@\n \tPR tree-optimization/66642\n \t* tree-parloops.c (transform_to_exit_first_loop_alt): Update function\n \theader comment.  Rename split_edge variable to edge_at_split.  Split\n-\texit edge to create new loop exit bb.  Insert loop exit phis in new loop\n-\texit bb.\n+\texit edge to create new loop exit bb.  Insert loop exit phis in new\n+\tloop exit bb.\n \n 2015-07-07  Tom de Vries  <tom@codesourcery.com>\n \n@@ -46,7 +57,8 @@\n \n 2015-07-07  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n-\t* function.c (free_after_compilation): Clear PROP_cfg in f->curr_properties.\n+\t* function.c (free_after_compilation): Clear PROP_cfg in\n+\tf->curr_properties.\n \n 2015-07-07  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "93c57723814c8a95c3b1050badb91a6b6b9feef1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 124, "deletions": 101, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649b69652491a08be058729bce7359082b80afbc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649b69652491a08be058729bce7359082b80afbc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=649b69652491a08be058729bce7359082b80afbc", "patch": "@@ -10765,8 +10765,6 @@\n   DONE;\n })\n \n-(define_mode_attr regmode [(SI \"k\") (DI \"q\")])\n-\n (define_insn \"*bt<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -10775,11 +10773,132 @@\n \t    (const_int 1)\n \t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n-  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"bt{<imodesuffix>}\\t{%<regmode>1, %0|%0, %<regmode>1}\"\n+  \"\"\n+{\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_SI:\n+      return \"bt{l}\\t{%1, %k0|%k0, %1}\";\n+\n+    case MODE_DI:\n+      return \"bt{q}\\t{%q1, %0|%0, %q1}\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set (attr \"mode\")\n+\t(if_then_else\n+\t  (and (match_test \"CONST_INT_P (operands[1])\")\n+\t       (match_test \"INTVAL (operands[1]) < 32\"))\n+\t  (const_string \"SI\")\n+\t  (const_string \"<MODE>\")))])\n+\n+(define_insn_and_split \"*jcc_bt<mode>\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand:SI 2 \"nonmemory_operand\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3))\n+\t\t      (pc)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && (CONST_INT_P (operands[2])\n+       ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\n+\t  && INTVAL (operands[2])\n+\t       >= (optimize_function_for_size_p (cfun) ? 0 : 32))\n+       : register_operand (operands[2], SImode))\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n+(define_insn_and_split \"*jcc_bt<mode>_1\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (zero_extend:SI\n+\t\t\t     (match_operand:QI 2 \"register_operand\")))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3))\n+\t\t      (pc)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n+;; Avoid useless masking of bit offset operand.\n+(define_insn_and_split \"*jcc_bt<mode>_mask\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (and:SI\n+\t\t\t     (match_operand:SI 2 \"register_operand\")\n+\t\t\t     (match_operand 3 \"const_int_operand\")))])\n+\t\t      (label_ref (match_operand 4))\n+\t\t      (pc)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))]\n+{\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n \f\n ;; Store-flag instructions.\n \n@@ -11036,102 +11155,6 @@\n     FAIL;\n })\n \n-(define_insn_and_split \"*jcc_bt<mode>\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:SWI48\n-\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t\t (const_int 0)])\n-\t\t      (label_ref (match_operand 3))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-{\n-  operands[0] = shallow_copy_rtx (operands[0]);\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n-(define_insn_and_split \"*jcc_bt<mode>_1\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:SWI48\n-\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (zero_extend:SI\n-\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n-\t\t\t (const_int 0)])\n-\t\t      (label_ref (match_operand 3))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-{\n-  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n-  operands[0] = shallow_copy_rtx (operands[0]);\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n-;; Avoid useless masking of bit offset operand.\n-(define_insn_and_split \"*jcc_bt<mode>_mask\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(zero_extract:SWI48\n-\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (and:SI\n-\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"const_int_operand\" \"n\")))])\n-\t\t      (label_ref (match_operand 4))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n-      == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SWI48\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 4))\n-\t\t      (pc)))]\n-{\n-  operands[0] = shallow_copy_rtx (operands[0]);\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n ;; Define combination compare-and-branch fp compare instructions to help\n ;; combine.\n "}, {"sha": "4c632d8bb0f89752f44ac0b424df95983b0d9ae4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=649b69652491a08be058729bce7359082b80afbc", "patch": "@@ -1,3 +1,8 @@\n+2015-07-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/bt-3.c: New test.\n+\t* gcc.target/i386/bt-4.c: Ditto.\n+\n 2015-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/other/dump-ada-spec-8.C: New test.\n@@ -252,7 +257,8 @@\n \n 2015-07-01  Jiong Wang  <jiong.wang@arm.com>\n \n-\t* lib/target-supports.exp (check_effective_target_aarch64_small_fpic):New function.\n+\t* lib/target-supports.exp (check_effective_target_aarch64_small_fpic):\n+\tNew function.\n \t* gcc.target/aarch64/pic-small.c: Restrict this test under\n \tcheck_effective_target_aarch64_small_fpic.\n "}, {"sha": "aa13c5de869b40a1ad0759eb9b8dc607eb2bffb4", "filename": "gcc/testsuite/gcc.target/i386/bt-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-3.c?ref=649b69652491a08be058729bce7359082b80afbc", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+extern void foo (void);\n+\n+int test (long long x)\n+{\n+  if (x & ( 0x01ULL << 60 ))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"btq\\[ \\t\\]\" } } */"}, {"sha": "7a5e873a9b5db609132acd034325b6c511ba11da", "filename": "gcc/testsuite/gcc.target/i386/bt-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649b69652491a08be058729bce7359082b80afbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-4.c?ref=649b69652491a08be058729bce7359082b80afbc", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mtune=core2\" } */\n+\n+extern void foo (void);\n+\n+int test (long x)\n+{\n+  if (x & ( 0x01UL << 10 ))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" } } */"}]}