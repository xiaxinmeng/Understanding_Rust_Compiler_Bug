{"sha": "636c5706960f2c76070bf35b624db6339aeae137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2YzU3MDY5NjBmMmM3NjA3MGJmMzViNjI0ZGI2MzM5YWVhZTEzNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-08-31T17:11:27Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-31T17:11:27Z"}, "message": "ByteArrayOutputStream.java: Re-merged with Classpath.\n\n\t* java/io/ByteArrayOutputStream.java: Re-merged with Classpath.\n\t* java/io/OptionalDataException.java: Merged with Classpath.\n\nFrom-SVN: r45327", "tree": {"sha": "3d47b530664d0102757638092146469f8696f962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d47b530664d0102757638092146469f8696f962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636c5706960f2c76070bf35b624db6339aeae137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636c5706960f2c76070bf35b624db6339aeae137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636c5706960f2c76070bf35b624db6339aeae137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636c5706960f2c76070bf35b624db6339aeae137/comments", "author": null, "committer": null, "parents": [{"sha": "73a697d96e7ad5c00227ffd7a17611721f457512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a697d96e7ad5c00227ffd7a17611721f457512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a697d96e7ad5c00227ffd7a17611721f457512"}], "stats": {"total": 136, "additions": 103, "deletions": 33}, "files": [{"sha": "cc8e96c4c32f9e9ddb9c15f4d41e60f649b6c67a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636c5706960f2c76070bf35b624db6339aeae137/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636c5706960f2c76070bf35b624db6339aeae137/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=636c5706960f2c76070bf35b624db6339aeae137", "patch": "@@ -1,3 +1,8 @@\n+2001-08-31  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/ByteArrayOutputStream.java: Re-merged with Classpath.\n+\t* java/io/OptionalDataException.java: Merged with Classpath.\n+\n 2001-08-31  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* exception.cc (PERSONALITY_FUNCTION): Simplify"}, {"sha": "b26b9e427cb53d83979f6d40c5d136a6388ece18", "filename": "libjava/java/io/ByteArrayOutputStream.java", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636c5706960f2c76070bf35b624db6339aeae137/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636c5706960f2c76070bf35b624db6339aeae137/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java?ref=636c5706960f2c76070bf35b624db6339aeae137", "patch": "@@ -1,12 +1,29 @@\n-// ByteArrayOutputStream.java - Write bytes to an array.\n+/* BufferedReader.java\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.io;\n "}, {"sha": "213880bbde55a6b132a6a478b79b71a7429bf1ce", "filename": "libjava/java/io/OptionalDataException.java", "status": "modified", "additions": 75, "deletions": 27, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636c5706960f2c76070bf35b624db6339aeae137/libjava%2Fjava%2Fio%2FOptionalDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636c5706960f2c76070bf35b624db6339aeae137/libjava%2Fjava%2Fio%2FOptionalDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOptionalDataException.java?ref=636c5706960f2c76070bf35b624db6339aeae137", "patch": "@@ -1,39 +1,87 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* OptionalDataException.java -- indicates unexpected data in serialised stream\n+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-package java.io;\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n \n /* Written using on-line Java Platform 1.2 API Specification.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception is thrown when unexpected data appears in the input\n+  * stream from which a serialized object is being read.  The field\n+  * <code>eof</code> will always be set to true (***Why even have it?***) and \n+  * the <code>count</code> field will contain the number of valid bytes\n+  * available to be read.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date February 7, 2000. \n+  */\n public class OptionalDataException extends ObjectStreamException\n {\n-  // FIXME: Need to set these fields per the doc in a constructor.\n-  public boolean eof;\n-  public int length;\n-\n-  // FIXME: This can probably go away once the right signatures of\n-  // these package private constructors is determined.\n-  private static final long serialVersionUID = -8011121865681257820L;\n-\n-  OptionalDataException()\n-  {\n-    super();\n-  }\n-\n-  OptionalDataException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+private static final long serialVersionUID = -8011121865681257820L;\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * Whether or not the end of the stream has been reached\n+  */\n+public boolean eof;\n+\n+/**\n+  * The number of valid bytes that can be read\n+  */\n+public int length;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new OptionalDataException with an eof parameter indicating\n+  * whether or not the end of stream is reached and the number of valid\n+  * bytes that may be read.\n+  *\n+  * @param eof 'true' if end of stream reached, 'false' otherwise\n+  * @param count The number of valid bytes to be read.\n+  */\n+OptionalDataException(boolean eof, int count)\n+{\n+  this.eof = eof;\n+  this.length = count;\n }\n+\n+} // class OptionalDataException\n+"}]}