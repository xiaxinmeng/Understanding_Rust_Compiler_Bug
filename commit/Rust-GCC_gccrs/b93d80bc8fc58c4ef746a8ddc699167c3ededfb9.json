{"sha": "b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzZDgwYmM4ZmM1OGM0ZWY3NDZhOGRkYzY5OTE2N2MzZWRlZGZiOQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-04-23T17:36:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:34Z"}, "message": "[Ada] Crash in tagged type constructor with task components\n\n2020-06-18  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (BIP_Suffix_Kind, Is_Build_In_Place_Entity): Move\n\tdeclarations...\n\t* exp_ch6.ads: Here.\n\t* exp_util.adb (Is_Secondary_Stack_BIP_Func_Call): Do not rely\n\ton the name of the scope to locate the extra formal BIPalloc\n\tsince they are copied when the pointer type associated with\n\tdispatching calls is built; rely on routines\n\tIs_Build_In_Place_Entity and BIP_Suffix_Kind.\n\t* exp_disp.adb (Expand_Dispatching_Call): Set the scope of the\n\tfirst extra formal of the internally built pointer type.\n\t* sem_ch3.adb (Derive_Subprogram): Do not inherit extra formals\n\tfrom a limited interface parent since limitedness is not\n\tinherited in such case (AI-419) and this affects the extra\n\tformals.\n\t* sprint.adb (Write_Itype): Output extra formals of subprogram\n\ttypes.", "tree": {"sha": "66006b73332d911197516ea412dab858565c9ec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66006b73332d911197516ea412dab858565c9ec4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4fd8ae2ce8ad7ccaf996d21ea7e82388bb0e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4fd8ae2ce8ad7ccaf996d21ea7e82388bb0e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4fd8ae2ce8ad7ccaf996d21ea7e82388bb0e23"}], "stats": {"total": 91, "additions": 66, "deletions": 25}, "files": [{"sha": "3562193afc73701d6bc57028b2db65bc63ade01e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -156,9 +156,6 @@ package body Exp_Ch6 is\n    --  level is known not to be statically deeper than the result type of the\n    --  function.\n \n-   function BIP_Suffix_Kind (E : Entity_Id) return BIP_Formal_Kind;\n-   --  Ada 2005 (AI-318-02): Returns the kind of the given extra formal.\n-\n    function Caller_Known_Size\n      (Func_Call   : Node_Id;\n       Result_Subt : Entity_Id) return Boolean;\n@@ -285,9 +282,6 @@ package body Exp_Ch6 is\n    --  Insert the Post_Call list previously produced by routine Expand_Actuals\n    --  or Expand_Call_Helper into the tree.\n \n-   function Is_Build_In_Place_Entity (E : Entity_Id) return Boolean;\n-   --  Ada 2005 (AI-318-02): Returns True if E is a BIP entity.\n-\n    procedure Replace_Renaming_Declaration_Id\n       (New_Decl  : Node_Id;\n        Orig_Decl : Node_Id);"}, {"sha": "69b19090102ba257703b9ce9394b2a145dfb177e", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -102,6 +102,9 @@ package Exp_Ch6 is\n    --  Ada 2005 (AI-318-02): Returns a string to be used as the suffix of names\n    --  for build-in-place formal parameters of the given kind.\n \n+   function BIP_Suffix_Kind (E : Entity_Id) return BIP_Formal_Kind;\n+   --  Ada 2005 (AI-318-02): Returns the kind of the given BIP extra formal.\n+\n    function Build_In_Place_Formal\n      (Func : Entity_Id;\n       Kind : BIP_Formal_Kind) return Entity_Id;\n@@ -117,6 +120,9 @@ package Exp_Ch6 is\n    --  The returned node is the root of the procedure body which will replace\n    --  the original function body, which is not needed for the C program.\n \n+   function Is_Build_In_Place_Entity (E : Entity_Id) return Boolean;\n+   --  Ada 2005 (AI-318-02): Returns True if E is a BIP entity.\n+\n    function Is_Build_In_Place_Result_Type (Typ : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-318-02): Returns True if functions returning the type use\n    --  build-in-place protocols. For inherently limited types, this must be"}, {"sha": "89f206ed09ff2653ad4611b21497fc3951dca15f", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -1081,6 +1081,7 @@ package body Exp_Disp is\n          then\n             Old_Formal := Extra_Formal (Last_Formal);\n             New_Formal := New_Copy (Old_Formal);\n+            Set_Scope (New_Formal, Subp_Typ);\n \n             Set_Extra_Formal (Last_Formal, New_Formal);\n             Set_Extra_Formals (Subp_Typ, New_Formal);"}, {"sha": "d93788b8e5ba884183293a5976ac3f84ca338ef7", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -8829,7 +8829,6 @@ package body Exp_Util is\n    --------------------------------------\n \n    function Is_Secondary_Stack_BIP_Func_Call (Expr : Node_Id) return Boolean is\n-      Alloc_Nam : Name_Id := No_Name;\n       Actual    : Node_Id;\n       Call      : Node_Id := Expr;\n       Formal    : Node_Id;\n@@ -8856,20 +8855,10 @@ package body Exp_Util is\n                Formal := Selector_Name (Param);\n                Actual := Explicit_Actual_Parameter (Param);\n \n-               --  Construct the name of formal BIPalloc. It is much easier to\n-               --  extract the name of the function using an arbitrary formal's\n-               --  scope rather than the Name field of Call.\n-\n-               if Alloc_Nam = No_Name and then Present (Entity (Formal)) then\n-                  Alloc_Nam :=\n-                    New_External_Name\n-                      (Chars (Scope (Entity (Formal))),\n-                       BIP_Formal_Suffix (BIP_Alloc_Form));\n-               end if;\n-\n                --  A match for BIPalloc => 2 has been found\n \n-               if Chars (Formal) = Alloc_Nam\n+               if Is_Build_In_Place_Entity (Formal)\n+                 and then BIP_Suffix_Kind (Formal) = BIP_Alloc_Form\n                  and then Nkind (Actual) = N_Integer_Literal\n                  and then Intval (Actual) = Uint_2\n                then"}, {"sha": "8bb62c7a60a00af4b682c989d66bacc04b6ecdcb", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -15539,6 +15539,15 @@ package body Sem_Ch3 is\n       while Present (Formal) loop\n          New_Formal := New_Copy (Formal);\n \n+         --  Extra formals are not inherited from a limited interface parent\n+         --  since limitedness is not inherited in such case (AI-419) and this\n+         --  affects the extra formals.\n+\n+         if Is_Limited_Interface (Parent_Type) then\n+            Set_Extra_Formal (New_Formal, Empty);\n+            Set_Extra_Accessibility (New_Formal, Empty);\n+         end if;\n+\n          --  Normally we do not go copying parents, but in the case of\n          --  formals, we need to link up to the declaration (which is the\n          --  parameter specification), and it is fine to link up to the\n@@ -15558,14 +15567,19 @@ package body Sem_Ch3 is\n       end loop;\n \n       --  Extra formals are shared between the parent subprogram and the\n-      --  derived subprogram (implicit in the above copy of formals), and\n-      --  hence we must inherit also the reference to the first extra formal.\n+      --  derived subprogram (implicit in the above copy of formals), unless\n+      --  the parent type is a limited interface type; hence we must inherit\n+      --  also the reference to the first extra formal. When the parent type is\n+      --  an interface the extra formals will be added when the subprogram is\n+      --  frozen (see Freeze.Freeze_Subprogram).\n \n-      Set_Extra_Formals (New_Subp, Extra_Formals (Parent_Subp));\n+      if not Is_Limited_Interface (Parent_Type) then\n+         Set_Extra_Formals (New_Subp, Extra_Formals (Parent_Subp));\n \n-      if Ekind (New_Subp) = E_Function then\n-         Set_Extra_Accessibility_Of_Result (New_Subp,\n-           Extra_Accessibility_Of_Result (Parent_Subp));\n+         if Ekind (New_Subp) = E_Function then\n+            Set_Extra_Accessibility_Of_Result (New_Subp,\n+              Extra_Accessibility_Of_Result (Parent_Subp));\n+         end if;\n       end if;\n \n       --  If this derivation corresponds to a tagged generic actual, then"}, {"sha": "7bfa5017019537599af6676485689b51966535e0", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d80bc8fc58c4ef746a8ddc699167c3ededfb9/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=b93d80bc8fc58c4ef746a8ddc699167c3ededfb9", "patch": "@@ -4489,6 +4489,43 @@ package body Sprint is\n                               Write_Str (\", \");\n                            end loop;\n \n+                           if Present (Extra_Formals (Typ)) then\n+                              Param := Extra_Formals (Typ);\n+\n+                              while Present (Param) loop\n+                                 Write_Str (\", \");\n+                                 Write_Id (Param);\n+                                 Write_Str (\" : \");\n+                                 Write_Id (Etype (Param));\n+\n+                                 Param := Extra_Formal (Param);\n+                              end loop;\n+                           end if;\n+\n+                           Write_Char (')');\n+                        end;\n+\n+                     elsif Present (Extra_Formals (Typ)) then\n+                        declare\n+                           Param : Entity_Id;\n+\n+                        begin\n+                           Write_Str (\" (\");\n+\n+                           Param := Extra_Formals (Typ);\n+\n+                           while Present (Param) loop\n+                              Write_Id (Param);\n+                              Write_Str (\" : \");\n+                              Write_Id (Etype (Param));\n+\n+                              if Present (Extra_Formal (Param)) then\n+                                 Write_Str (\", \");\n+                              end if;\n+\n+                              Param := Extra_Formal (Param);\n+                           end loop;\n+\n                            Write_Char (')');\n                         end;\n                      end if;"}]}