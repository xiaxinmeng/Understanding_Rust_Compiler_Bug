{"sha": "8d980e84240c82502661758fbecd5f456018ea89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5ODBlODQyNDBjODI1MDI2NjE3NThmYmVjZDVmNDU2MDE4ZWE4OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-12T19:06:32Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-12T19:08:46Z"}, "message": "i386: Fix vec_set<mode> expanders [PR101424]\n\nAVX does not support 32-byte integer compares, required by\nix86_expand_vector_set_var.  The following patch fixes vec_set<mode>\nexpanders by introducing new vec_setm_avx2_operand predicate for AVX\nvector modes.\n\ngcc/\n\n2021-07-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/101424\n\t* config/i386/predicates.md (vec_setm_sse41_operand):\n\tRename from vec_setm_operand.\n\t(vec_setm_avx2_operand): New predicate.\n\t* config/i386/sse.md (vec_set<V_128:mode>): Use V_128 mode iterator.\n\tUse vec_setm_sse41_operand as operand 2 predicate.\n\t(vec_set<V_256_512:mode): New expander.\n\t* config/i386/mmx.md (vec_setv2hi): Use vec_setm_sse41_operand\n\tas operand 2 predicate.\n\ngcc/testsuite/\n\n2021-07-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR target/101424\n\t* gcc.target/i386/pr101424.c: New test.", "tree": {"sha": "5b9f7a4b567265ca0f838fbb6eed2d3049e32706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b9f7a4b567265ca0f838fbb6eed2d3049e32706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d980e84240c82502661758fbecd5f456018ea89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d980e84240c82502661758fbecd5f456018ea89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d980e84240c82502661758fbecd5f456018ea89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d980e84240c82502661758fbecd5f456018ea89/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1539b797a06e03b08e1f1de28ad0d19a3956616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1539b797a06e03b08e1f1de28ad0d19a3956616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1539b797a06e03b08e1f1de28ad0d19a3956616"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "0984f7cc44dc6ebda007b8c80dea733d75f10f09", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=8d980e84240c82502661758fbecd5f456018ea89", "patch": "@@ -3604,7 +3604,7 @@\n (define_expand \"vec_setv2hi\"\n   [(match_operand:V2HI 0 \"register_operand\")\n    (match_operand:HI 1 \"register_operand\")\n-   (match_operand 2 \"vec_setm_operand\")]\n+   (match_operand 2 \"vec_setm_sse41_operand\")]\n   \"TARGET_SSE2\"\n {\n   if (CONST_INT_P (operands[2]))"}, {"sha": "6aa1ea326270a1e0a318627016e4bc67c626e688", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=8d980e84240c82502661758fbecd5f456018ea89", "patch": "@@ -1021,11 +1021,16 @@\n })\n \n ;; True for registers, or const_int_operand, used to vec_setm expander.\n-(define_predicate \"vec_setm_operand\"\n+(define_predicate \"vec_setm_sse41_operand\"\n   (ior (and (match_operand 0 \"register_operand\")\n \t    (match_test \"TARGET_SSE4_1\"))\n        (match_code \"const_int\")))\n \n+(define_predicate \"vec_setm_avx2_operand\"\n+  (ior (and (match_operand 0 \"register_operand\")\n+\t    (match_test \"TARGET_AVX2\"))\n+       (match_code \"const_int\")))\n+\n (define_predicate \"vec_setm_mmx_operand\"\n   (ior (and (match_operand 0 \"register_operand\")\n \t    (match_test \"TARGET_SSE4_1\")"}, {"sha": "ab29999023dc25609f71c5d1bcb893a19849a3cd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8d980e84240c82502661758fbecd5f456018ea89", "patch": "@@ -8486,9 +8486,9 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:V 0 \"register_operand\")\n+  [(match_operand:V_128 0 \"register_operand\")\n    (match_operand:<ssescalarmode> 1 \"register_operand\")\n-   (match_operand 2 \"vec_setm_operand\")]\n+   (match_operand 2 \"vec_setm_sse41_operand\")]\n   \"TARGET_SSE\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -8499,6 +8499,20 @@\n   DONE;\n })\n \n+(define_expand \"vec_set<mode>\"\n+  [(match_operand:V_256_512 0 \"register_operand\")\n+   (match_operand:<ssescalarmode> 1 \"register_operand\")\n+   (match_operand 2 \"vec_setm_avx2_operand\")]\n+  \"TARGET_AVX\"\n+{\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n+  DONE;\n+})\n+\n (define_insn_and_split \"*vec_extractv4sf_0\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=v,m,f,r\")\n \t(vec_select:SF"}, {"sha": "28bb7230e471dd59866dd91a717a415bd5f59ec3", "filename": "gcc/testsuite/gcc.target/i386/pr101424.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101424.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d980e84240c82502661758fbecd5f456018ea89/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101424.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101424.c?ref=8d980e84240c82502661758fbecd5f456018ea89", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/101424 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef int v4df __attribute__((vector_size(32)));\n+\n+int foo_v4df_b, foo_v4df_c;\n+\n+v4df\n+__attribute__foo_v4df ()\n+{\n+  v4df a;\n+  a[foo_v4df_c] = foo_v4df_b;\n+  return a;\n+}"}]}