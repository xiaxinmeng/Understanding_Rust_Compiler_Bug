{"sha": "0b82d59c030f40cc0d65beda7ead902cb4402bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4MmQ1OWMwMzBmNDBjYzBkNjViZWRhN2VhZDkwMmNiNDQwMmJiMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-29T16:33:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-29T16:33:47Z"}, "message": "c-semantics.c (genrtl_do_stmt_1): New function split out from...\n\n\n\t* c-semantics.c (genrtl_do_stmt_1): New function split out from...\n\t(gen_rtl_do_stmt): ... here.  Call genrtl_do_stmt_1.\n\t(expand_unreachable_stmt): Expand unreachable while statements\n\tusing genrtl_do_stmt_1.\n\n\t* gcc.dg/duff-4.c: New test case.\n\nFrom-SVN: r67224", "tree": {"sha": "314f9412171f5d0b15479435232d46e12b33f62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314f9412171f5d0b15479435232d46e12b33f62b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b82d59c030f40cc0d65beda7ead902cb4402bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b82d59c030f40cc0d65beda7ead902cb4402bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b82d59c030f40cc0d65beda7ead902cb4402bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b82d59c030f40cc0d65beda7ead902cb4402bb0/comments", "author": null, "committer": null, "parents": [{"sha": "86f6262d6107ad53fe70b80be0efb4d4e26d4df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f6262d6107ad53fe70b80be0efb4d4e26d4df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f6262d6107ad53fe70b80be0efb4d4e26d4df2"}], "stats": {"total": 105, "additions": 96, "deletions": 9}, "files": [{"sha": "780a9f78d4fe82339ab4c48bd56412412b85986f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b82d59c030f40cc0d65beda7ead902cb4402bb0", "patch": "@@ -1,3 +1,10 @@\n+2003-05-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-semantics.c (genrtl_do_stmt_1): New function split out from...\n+\t(gen_rtl_do_stmt): ... here.  Call genrtl_do_stmt_1.\n+\t(expand_unreachable_stmt): Expand unreachable while statements\n+\tusing genrtl_do_stmt_1.\n+\n 2003-05-29  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_output_load_label): Declare."}, {"sha": "374e9f13dec15f597277e2a023dd9db5c6151729", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=0b82d59c030f40cc0d65beda7ead902cb4402bb0", "patch": "@@ -56,6 +56,7 @@ static tree find_reachable_label_1\tPARAMS ((tree *, int *, void *));\n static tree find_reachable_label\tPARAMS ((tree));\n static bool expand_unreachable_if_stmt\tPARAMS ((tree));\n static tree expand_unreachable_stmt\tPARAMS ((tree, int));\n+static void genrtl_do_stmt_1\t\tPARAMS ((tree, tree));\n \n /* Create an empty statement tree rooted at T.  */\n \n@@ -463,14 +464,13 @@ genrtl_while_stmt (t)\n   expand_end_loop ();\n }\n \n-/* Generate the RTL for T, which is a DO_STMT.  */\n+/* Generate the RTL for a DO_STMT with condition COND and loop BODY\n+   body.  This is reused for expanding unreachable WHILE_STMTS.  */\n \n-void\n-genrtl_do_stmt (t)\n-     tree t;\n+static void\n+genrtl_do_stmt_1 (cond, body)\n+     tree cond, body;\n {\n-  tree cond = DO_COND (t);\n-\n   /* Recognize the common special-case of do { ... } while (0) and do\n      not emit the loop widgetry in this case.  In particular this\n      avoids cluttering the rtl with dummy loop notes, which can affect\n@@ -479,7 +479,7 @@ genrtl_do_stmt (t)\n   if (!cond || integer_zerop (cond))\n     {\n       expand_start_null_loop ();\n-      expand_stmt (DO_BODY (t));\n+      expand_stmt (body);\n       expand_end_null_loop ();\n     }\n   else if (integer_nonzerop (cond))\n@@ -488,7 +488,7 @@ genrtl_do_stmt (t)\n       emit_line_note (input_filename, input_line);\n       expand_start_loop (1);\n \n-      expand_stmt (DO_BODY (t));\n+      expand_stmt (body);\n \n       emit_line_note (input_filename, input_line);\n       expand_end_loop ();\n@@ -499,7 +499,7 @@ genrtl_do_stmt (t)\n       emit_line_note (input_filename, input_line);\n       expand_start_loop_continue_elsewhere (1);\n \n-      expand_stmt (DO_BODY (t));\n+      expand_stmt (body);\n \n       expand_loop_continue_here ();\n       cond = expand_cond (cond);\n@@ -509,6 +509,15 @@ genrtl_do_stmt (t)\n     }\n }\n \n+/* Generate the RTL for T, which is a DO_STMT.  */\n+\n+void\n+genrtl_do_stmt (t)\n+     tree t;\n+{\n+  genrtl_do_stmt_1 (DO_COND (t), DO_BODY (t));\n+}\n+\n /* Build the node for a return statement and return it.  */\n \n tree\n@@ -1059,6 +1068,13 @@ expand_unreachable_stmt (t, warn)\n \t    return TREE_CHAIN (t);\n \t  break;\n \n+\tcase WHILE_STMT:\n+\t  /* If the start of a while statement is unreachable, there is\n+\t     no need to rotate the loop, instead the WHILE_STMT can be\n+\t     expanded like a DO_STMT.  */\n+\t  genrtl_do_stmt_1 (WHILE_COND (t), WHILE_BODY (t));\n+\t  return TREE_CHAIN (t);\n+\n \tcase COMPOUND_STMT:\n \t  {\n \t    tree n;"}, {"sha": "e61b14860986694a31cb28c415f36990467840b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b82d59c030f40cc0d65beda7ead902cb4402bb0", "patch": "@@ -1,3 +1,7 @@\n+2003-05-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/duff-4.c: New test case.\n+\n 2003-05-27  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \tPR fortran/10843"}, {"sha": "7032285af5e61fb9d41a15364335b6311f7ea3a6", "filename": "gcc/testsuite/gcc.dg/duff-4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Ftestsuite%2Fgcc.dg%2Fduff-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b82d59c030f40cc0d65beda7ead902cb4402bb0/gcc%2Ftestsuite%2Fgcc.dg%2Fduff-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fduff-4.c?ref=0b82d59c030f40cc0d65beda7ead902cb4402bb0", "patch": "@@ -0,0 +1,60 @@\n+/* Duff's device is legal C; test to make sure the compiler\n+   doesn't complain about it.\n+\n+   Roger Sayle <roger@eyesopen.com>\n+   Derived from duff-2.c.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#if __INT_MAX__ >= 2147483647\n+/* At least 32-bit integers. */\n+typedef int type32;\n+#else\n+typedef long type32;\n+#endif\n+\n+type32\n+cksum (const unsigned char *src, unsigned long size)\n+{\n+  type32 ck = 0;\n+\n+  switch (size & 3)\n+    {\n+    do\n+      {\n+    case 0:\n+\tck ^= (type32)*src++ << 24;\n+\t--size;\n+    case 3:\n+\tck ^= (type32)*src++ << 16;\n+\t--size;\n+    case 2:\n+\tck ^= (type32)*src++ << 8;\n+\t--size;\n+    case 1:\n+\tck ^= (type32)*src++;\n+\t--size;\n+      }\n+    while (size > 0);\n+    }\n+\n+  return ck;\n+}\n+\n+const char testpat[] = \"The quick brown fox jumped over the lazy dog.\";\n+\n+int\n+main()\n+{\n+  type32 ck;\n+\n+  ck = cksum ((const unsigned char *) testpat, sizeof (testpat));\n+  if (ck != 925902908)\n+    abort ();\n+\n+  exit (0);\n+}"}]}