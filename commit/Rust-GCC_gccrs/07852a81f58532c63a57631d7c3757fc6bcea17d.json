{"sha": "07852a81f58532c63a57631d7c3757fc6bcea17d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4NTJhODFmNTg1MzJjNjNhNTc2MzFkN2MzNzU3ZmM2YmNlYTE3ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-29T07:25:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-29T08:15:57Z"}, "message": "tree-optimization/95393 - fold MIN/MAX_EXPR generated by phiopt\n\nThis makes sure to fold generated stmts so they do not survive\nuntil RTL expansion and cause awkward code generation.\n\n2020-05-29  Richard Biener <rguenther@suse.de>\n\n\tPR tree-optimization/95393\n\t* tree-ssa-phiopt.c (minmax_replacement): Use gimple_build\n\tto build the min/max expression so we simplify cases like\n\tMAX(0, s) immediately.\n\n\t* gcc.dg/tree-ssa/phi-opt-21.c: New testcase.\n\t* g++.dg/vect/slp-pr87105.cc: Adjust.", "tree": {"sha": "225cd9b44de4288c2213b9155b4a9770aef011fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225cd9b44de4288c2213b9155b4a9770aef011fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07852a81f58532c63a57631d7c3757fc6bcea17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07852a81f58532c63a57631d7c3757fc6bcea17d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07852a81f58532c63a57631d7c3757fc6bcea17d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07852a81f58532c63a57631d7c3757fc6bcea17d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6802b5ba8234427598abfd9f0163eb5e7c0d6aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6802b5ba8234427598abfd9f0163eb5e7c0d6aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6802b5ba8234427598abfd9f0163eb5e7c0d6aa8"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "d07b1cd46b7703e03f040a08f14d612e559a7569", "filename": "gcc/testsuite/g++.dg/vect/slp-pr87105.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc?ref=07852a81f58532c63a57631d7c3757fc6bcea17d", "patch": "@@ -102,4 +102,4 @@ void quadBoundingBoxA(const Point bez[3], Box& bBox) noexcept {\n // { dg-final { scan-tree-dump-times \"basic block part vectorized\" 1 \"slp2\" { xfail { { ! vect_element_align } && { ! vect_hw_misalign } } } } }\n // It's a bit awkward to detect that all stores were vectorized but the\n // following more or less does the trick\n-// { dg-final { scan-tree-dump \"vect_iftmp\\[^\\r\\m\\]* = MIN\" \"slp2\" { xfail { { ! vect_element_align } && { ! vect_hw_misalign } } } } }\n+// { dg-final { scan-tree-dump \"vect_\\[^\\r\\m\\]* = MIN\" \"slp2\" { xfail { { ! vect_element_align } && { ! vect_hw_misalign } } } } }"}, {"sha": "9f3d5695728bb3d981a1552f410e6c45dec3a83f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-21.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-21.c?ref=07852a81f58532c63a57631d7c3757fc6bcea17d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt4-details\" } */\n+\n+int f(unsigned s)\n+{\n+  int i;\n+  for (i = 0; i < s; ++i)\n+    ;\n+\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"converted to straightline code\" \"phiopt4\" } } */\n+/* Make sure we fold the detected MAX<s, 0>.  */\n+/* { dg-final { scan-tree-dump-not \"MAX\" \"phiopt4\" } } */"}, {"sha": "bb97dcf63b4db6ad7b405710c1d1f211db72aae5", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07852a81f58532c63a57631d7c3757fc6bcea17d/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=07852a81f58532c63a57631d7c3757fc6bcea17d", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"case-cfn-macros.h\"\n #include \"tree-eh.h\"\n+#include \"gimple-fold.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n@@ -1364,7 +1365,6 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n {\n   tree result, type, rhs;\n   gcond *cond;\n-  gassign *new_stmt;\n   edge true_edge, false_edge;\n   enum tree_code cmp, minmax, ass_code;\n   tree smaller, alt_smaller, larger, alt_larger, arg_true, arg_false;\n@@ -1688,19 +1688,20 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n       gsi_move_before (&gsi_from, &gsi);\n     }\n \n-  /* Create an SSA var to hold the min/max result.  If we're the only\n-     things setting the target PHI, then we  can clone the PHI\n-     variable.  Otherwise we must create a new one.  */\n-  result = PHI_RESULT (phi);\n-  if (EDGE_COUNT (gimple_bb (phi)->preds) == 2)\n-    result = duplicate_ssa_name (result, NULL);\n-  else\n-    result = make_ssa_name (TREE_TYPE (result));\n-\n   /* Emit the statement to compute min/max.  */\n-  new_stmt = gimple_build_assign (result, minmax, arg0, arg1);\n+  gimple_seq stmts = NULL;\n+  tree phi_result = PHI_RESULT (phi);\n+  result = gimple_build (&stmts, minmax, TREE_TYPE (phi_result), arg0, arg1);\n+  /* Duplicate range info if we're the only things setting the target PHI.  */\n+  if (!gimple_seq_empty_p (stmts)\n+      && EDGE_COUNT (gimple_bb (phi)->preds) == 2\n+      && !POINTER_TYPE_P (TREE_TYPE (phi_result))\n+      && SSA_NAME_RANGE_INFO (phi_result))\n+    duplicate_ssa_name_range_info (result, SSA_NAME_RANGE_TYPE (phi_result),\n+\t\t\t\t   SSA_NAME_RANGE_INFO (phi_result));\n+\n   gsi = gsi_last_bb (cond_bb);\n-  gsi_insert_before (&gsi, new_stmt, GSI_NEW_STMT);\n+  gsi_insert_seq_before (&gsi, stmts, GSI_NEW_STMT);\n \n   replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n "}]}