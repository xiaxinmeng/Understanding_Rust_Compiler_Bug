{"sha": "55c9695cbe91c406805ac0cd342949f32f13b779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjOTY5NWNiZTkxYzQwNjgwNWFjMGNkMzQyOTQ5ZjMyZjEzYjc3OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-27T11:55:38Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-27T13:04:24Z"}, "message": "Do not expand vector comparison with VEC_COND_EXPR.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/96128\n\t* tree-vect-generic.c (expand_vector_comparison): Do not expand\n\tvector comparison with VEC_COND_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/96128\n\t* gcc.target/s390/vector/pr96128.c: New test.", "tree": {"sha": "400c5b7ea838ff951c9bdb35a541456c4f2c0a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400c5b7ea838ff951c9bdb35a541456c4f2c0a82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55c9695cbe91c406805ac0cd342949f32f13b779", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl8e0NgACgkQTcGC3A+n\nN4UXVggAgSkvU1TbACEkcrV5G0E0jXWnYp/bySm19lWrpIatavmJukkrNOYSTr7f\nffegSbyJtL9+cB3wtGzehUPfOHU+CoPIvaqno0frdTuPPGYfIss7j2MLfz18FLOW\nTxiZEOPSPCKoV0yswU3fFJP7vQ5Mh/ldd7NRYosAAm9k6LjIBFK2gBzahkr8LDeP\nkcBFqB96JLh5cvnXcJmuOnFL+Uc2Oejsvrmzb8zKS1S+4MpPJrGSTQDVwO0hgKQR\nNdbvNfdNrPU0ZZmFiGKbAtuEr2QTdqTAGzVIbKZKubtQVguBjZzc87CdEHM30dNS\nsD1RjDWkiOOh/O0qbJL2du+O+mDRmw==\n=evY4\n-----END PGP SIGNATURE-----", "payload": "tree 400c5b7ea838ff951c9bdb35a541456c4f2c0a82\nparent c4c22e830251e1961c6ebec78d28d039eb2e6017\nauthor Martin Liska <mliska@suse.cz> 1595850938 +0200\ncommitter Martin Liska <mliska@suse.cz> 1595855064 +0200\n\nDo not expand vector comparison with VEC_COND_EXPR.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/96128\n\t* tree-vect-generic.c (expand_vector_comparison): Do not expand\n\tvector comparison with VEC_COND_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/96128\n\t* gcc.target/s390/vector/pr96128.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c9695cbe91c406805ac0cd342949f32f13b779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c9695cbe91c406805ac0cd342949f32f13b779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c9695cbe91c406805ac0cd342949f32f13b779/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c22e830251e1961c6ebec78d28d039eb2e6017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c22e830251e1961c6ebec78d28d039eb2e6017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c22e830251e1961c6ebec78d28d039eb2e6017"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "20abe5e515c264509c34474dd6c187c4ee9af5b6", "filename": "gcc/testsuite/gcc.target/s390/vector/pr96128.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c9695cbe91c406805ac0cd342949f32f13b779/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpr96128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c9695cbe91c406805ac0cd342949f32f13b779/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpr96128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpr96128.c?ref=55c9695cbe91c406805ac0cd342949f32f13b779", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/96128 */\n+/* { dg-options \"-march=z13\" } */\n+\n+#define B_TEST(TYPE) { TYPE v __attribute__((vector_size(16))); (void)((v < v) < v); }\n+#ifdef __cplusplus\n+#define T_TEST(TYPE) { TYPE s; TYPE v __attribute__((vector_size(16))); __typeof((v<v)[0]) iv __attribute__((vector_size(16))); (void)((iv ? s : s) < v); }\n+#else\n+#define T_TEST(TYPE)\n+#endif\n+#define T(TYPE) B_TEST(TYPE) T_TEST(TYPE)\n+#ifdef __SIZEOF_INT128__\n+#define SIZEOF_MAXINT __SIZEOF_INT128__\n+#else\n+#define SIZEOF_MAXINT __SIZEOF_LONG_LONG__\n+#endif\n+\n+void f ()\n+{\n+  T(short)\n+  T(int)\n+  T(long)\n+  T(long long)\n+\n+  T_TEST(float)\n+  T_TEST(double)\n+  /* Avoid trouble with non-power-of-two sizes.\n+     Also avoid trouble with long double larger than integral types.  */\n+#if !defined(__i386__) && !defined(__x86_64__) && !defined(__m68k__) \\\n+    && !defined(__ia64__) && !defined(__hppa__) \\\n+    && (__SIZEOF_LONG_DOUBLE__ & (__SIZEOF_LONG_DOUBLE__ - 1)) == 0 \\\n+    && __SIZEOF_LONG_DOUBLE__ <= 16 \\\n+    && __SIZEOF_LONG_DOUBLE__ <= SIZEOF_MAXINT\n+  T_TEST(long double)\n+#endif\n+}"}, {"sha": "fe6477c859259125b23b89f1ae3f783a88d3a848", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55c9695cbe91c406805ac0cd342949f32f13b779/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55c9695cbe91c406805ac0cd342949f32f13b779/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=55c9695cbe91c406805ac0cd342949f32f13b779", "patch": "@@ -419,8 +419,7 @@ expand_vector_comparison (gimple_stmt_iterator *gsi, tree type, tree op0,\n     return NULL_TREE;\n \n   tree t;\n-  if (!expand_vec_cmp_expr_p (TREE_TYPE (op0), type, code)\n-      && !expand_vec_cond_expr_p (type, TREE_TYPE (op0), code))\n+  if (!expand_vec_cmp_expr_p (TREE_TYPE (op0), type, code))\n     {\n       if (VECTOR_BOOLEAN_TYPE_P (type)\n \t  && SCALAR_INT_MODE_P (TYPE_MODE (type))"}]}