{"sha": "14db9ed505d9eb84695f900017a95bc3f6c27ffe", "node_id": "C_kwDOANBUbNoAKDE0ZGI5ZWQ1MDVkOWViODQ2OTVmOTAwMDE3YTk1YmMzZjZjMjdmZmU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-03T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-03T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "b06ca89f36e7a4be487b6dbf7f502ae4ca5ae84d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06ca89f36e7a4be487b6dbf7f502ae4ca5ae84d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14db9ed505d9eb84695f900017a95bc3f6c27ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14db9ed505d9eb84695f900017a95bc3f6c27ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14db9ed505d9eb84695f900017a95bc3f6c27ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14db9ed505d9eb84695f900017a95bc3f6c27ffe/comments", "author": null, "committer": null, "parents": [{"sha": "73bbfd5970ba3b7a5bcb3f7043d93fec89ccb991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bbfd5970ba3b7a5bcb3f7043d93fec89ccb991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bbfd5970ba3b7a5bcb3f7043d93fec89ccb991"}], "stats": {"total": 303, "additions": 302, "deletions": 1}, "files": [{"sha": "bc9bdff964cfbad1a1ed5b4b4b42da0003414079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,84 @@\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108883\n+\t* target.h (emit_support_tinfos_callback): New typedef.\n+\t* targhooks.h (default_emit_support_tinfos): Declare.\n+\t* targhooks.cc (default_emit_support_tinfos): New function.\n+\t* target.def (emit_support_tinfos): New target hook.\n+\t* doc/tm.texi.in (emit_support_tinfos): Document it.\n+\t* doc/tm.texi: Regenerated.\n+\t* config/i386/i386.cc (ix86_emit_support_tinfos): New function.\n+\t(TARGET_EMIT_SUPPORT_TINFOS): Redefine.\n+\n+2023-03-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* ira-costs.cc: Include print-rtl.h.\n+\t(record_reg_classes, scan_one_insn): Add code to print debug info.\n+\t(record_operand_costs): Find and use smaller cost for hard reg\n+\tmove.\n+\n+2023-03-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* builtins.cc (mathfn_built_in_explicit): New.\n+\t* config/gcn/gcn.cc: Include case-cfn-macros.h.\n+\t(mathfn_built_in_explicit): Add prototype.\n+\t(gcn_vectorize_builtin_vectorized_function): New.\n+\t(gcn_libc_has_function): New.\n+\t(TARGET_LIBC_HAS_FUNCTION): Define.\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Define.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108979\n+\t* tree-vect-stmts.cc (vectorizable_operation): Don't mask\n+\toperations on invariants.\n+\n+2023-03-02  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/predicates.md (vll_bias_operand): Add -1 bias.\n+\t* config/s390/s390.cc (s390_option_override_internal): Make\n+\tpartial vector usage the default from z13 on.\n+\t* config/s390/vector.md (len_load_v16qi): Add.\n+\t(len_store_v16qi): Add.\n+\n+2023-03-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* simplify-rtx.cc (simplify_context::simplify_subreg): Use byte instead\n+\tof constant 0 offset.\n+\n+2023-03-02  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* config/mips/mips.cc (mips_set_text_contents_type): Use HOST_WIDE_INT\n+\tinstead of long.\n+\t* config/mips/mips-protos.h (mips_set_text_contents_type): Likewise.\n+\n+2023-03-02  Junxian Zhu  <zhujunxian@oss.cipunited.com>\n+\n+\t* config.gcc: add -with-{no-}msa build option.\n+\t* config/mips/mips.h: Likewise.\n+\t* doc/install.texi: Likewise.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108603\n+\t* explow.cc (convert_memory_address_addr_space_1): Only wrap\n+\tthe result of a recursive call in a CONST if no instructions\n+\twere emitted.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108430\n+\t* tree-vect-stmts.cc (vectorizable_condition): Fix handling\n+\tof inverted condition.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108934\n+\t* fold-const.cc (native_interpret_expr) <case REAL_CST>: Before memcmp\n+\tcomparison copy the bytes from ptr to a temporary buffer and clearing\n+\tpadding bits in there.\n+\n 2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/108545"}, {"sha": "7956071adad71adbab8037022a08d4d24c8506fe", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1 +1 @@\n-20230302\n+20230303"}, {"sha": "dddee66c97a98775f167ce4124ae755e38a54838", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,13 @@\n+2023-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108968\n+\t* region-model.cc (region_model::get_rvalue_1): Handle VAR_DECLs\n+\twith a DECL_HARD_REGISTER by returning UNKNOWN.\n+\n+2023-03-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* kf.cc (register_known_functions): Add __errno function for newlib.\n+\n 2023-03-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107565"}, {"sha": "75d189baa73ec699deca1b0cb0965f1c652cb1b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,59 @@\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108883\n+\t* cp-tree.h (enum cp_tree_index): Remove CPTI_FALLBACK_DFLOAT*_TYPE\n+\tenumerators.\n+\t(fallback_dfloat32_type, fallback_dfloat64_type,\n+\tfallback_dfloat128_type): Remove.\n+\t* rtti.cc (emit_support_tinfo_1): If not emitted already, call\n+\temit_tinfo_decl and remove from unemitted_tinfo_decls right away.\n+\t(emit_support_tinfos): Move &dfloat*_type_node from fundamentals array\n+\tinto new fundamentals_with_fallback array.  Call emit_support_tinfo_1\n+\ton elements of that array too, with the difference that if\n+\tthe type is NULL, use a fallback REAL_TYPE for it temporarily.\n+\tDrop the !targetm.decimal_float_supported_p () handling.  Call\n+\ttargetm.emit_support_tinfos at the end.\n+\t* mangle.cc (write_builtin_type): Remove references to\n+\tfallback_dfloat*_type.  Handle bfloat16_type_node mangling.\n+\n+2023-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108243\n+\tPR c++/97553\n+\t* cp-gimplify.cc (cp_fully_fold): Add an internal overload that\n+\tadditionally takes and propagate an mce_value parameter, and\n+\tdefine the existing public overload in terms of it.\n+\t(cp_fully_fold_init): Pass mce_false to cp_fully_fold.\n+\n+2023-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108243\n+\t* constexpr.cc (maybe_constant_init_1): Override\n+\tmanifestly_const_eval to true if is_static.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/108716\n+\t* cp-gimplify.cc (cp_genericize_r) <case USING_STMT>: Set\n+\tDECL_SOURCE_LOCATION on IMPORTED_DECL to expression location\n+\tof USING_STMT or input_location.\n+\n+2023-03-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106259\n+\t* parser.cc (class_decl_loc_t::diag_mismatched_tags): If the first\n+\tlookup of SPEC didn't find anything, try to look for\n+\tmost_general_template.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105839\n+\t* parser.cc (cp_convert_omp_range_for): Allow in assert\n+\tdecomp_first_name without DECL_HAS_VALUE_EXPR_P if it has\n+\terror_mark_node type.\n+\t(cp_finish_omp_range_for): Don't set DECL_HAS_VALUE_EXPR_P back\n+\ton decls which have error_mark_node type.\n+\n 2023-03-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107574"}, {"sha": "93e94b2883bc8937b11af094ddd1e1c62ced124b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,138 @@\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/108991\n+\t* gcc.dg/memchr-3.c: Add missing comment argument to dg-warning\n+\tbefore target selector.\n+\n+2023-03-02  Guillaume Gomez  <guillaume1.gomez@gmail.com>\n+\n+\tPR jit/107999\n+\t* jit.dg/test-error-array-bounds.c: Update test.\n+\n+2023-03-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* gcc.target/avr/pr90706.c: New.\n+\n+2023-03-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* gcc.target/gcn/simd-math-1.c: New testcase.\n+\t* gcc.target/gcn/simd-math-2.c: New testcase.\n+\n+2023-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108243\n+\tPR c++/97553\n+\t* g++.dg/opt/is_constant_evaluated3.C: New test.\n+\n+2023-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108243\n+\t* g++.dg/cpp2a/is-constant-evaluated14.C: New test.\n+\n+2023-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108968\n+\t* gcc.dg/analyzer/uninit-pr108968-register.c: New test.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/108716\n+\t* g++.dg/debug/dwarf2/pr108716.C: New test.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108979\n+\t* gfortran.dg/vect/pr108979.f90: New test.\n+\n+2023-03-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106259\n+\t* g++.dg/warn/Wmismatched-tags-11.C: New test.\n+\n+2023-03-02  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp: Add partial subdirectory.\n+\t* gcc.target/s390/vector/vec-nopeel-2.c: Change test\n+\texpectation.\n+\t* lib/target-supports.exp: Add s390.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-1.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-2.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-3.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-7.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-1.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-2.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-3.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-7.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-1.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-2.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-3.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-7.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-1.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-2.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-3.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-7.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-1.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-2.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-3.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-7.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-run-1.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-run-2.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-run-3.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-run-7.h: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length-small.c: New test.\n+\t* gcc.target/s390/vector/partial/s390-vec-length.h: New test.\n+\n+2023-03-02  Jonathan Yong  <10walls@gmail.com>\n+\n+\tPR middle-end/97956\n+\t* gcc.dg/memchr-3.c (memchr): Account for LLP64 warnings.\n+\n+2023-03-02  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* gcc.dg/overflow-warn-9.c: Add LLP64 case.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108603\n+\t* gcc.target/aarch64/sve/pr108603.c: New test.\n+\n+2023-03-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108430\n+\t* gcc.target/aarch64/sve/pr108430.c: New test.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108934\n+\t* gcc.target/i386/auto-init-4.c: Revert PR105259 change.\n+\t* g++.target/i386/pr108934.C: New test.\n+\n+2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105839\n+\t* g++.dg/gomp/pr105839-1.C: New test.\n+\t* g++.dg/gomp/pr105839-2.C: New test.\n+\n+2023-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/108985\n+\t* gcc.dg/vect/pr108950.c: Require vect_simd_clones.\n+\n+2023-03-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* g++.dg/ext/attr-copy-2.C: Fix for default_packed targets.\n+\n+2023-03-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/attr-copy-6.c: Prefix asm-declared name with\n+\t__USER_LABEL_PREFIX__.\n+\n+2023-03-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* c-c++-common/auto-init-7.c, c-c++-common/auto-init-8.c: Also\n+\tmatch targets where sizeof (union U) == 5, like \"packed\" targets.\n+\n 2023-03-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107574"}, {"sha": "24308e99db270d9b13c3ce98207feb4831ca82bb", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,8 @@\n+2023-03-02  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* testsuite/libgomp.c/simd-math-1.c: New testcase.\n+\n 2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/108546"}, {"sha": "3003c7a84a7ad35a9e1a165b2cdffd161ad1b067", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14db9ed505d9eb84695f900017a95bc3f6c27ffe/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14db9ed505d9eb84695f900017a95bc3f6c27ffe/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=14db9ed505d9eb84695f900017a95bc3f6c27ffe", "patch": "@@ -1,3 +1,17 @@\n+2023-03-02  niXman  <i.nixman@autistici.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libquadmath/87204\n+\tPR libquadmath/94756\n+\t* printf/gmp-impl.h (mp_limb_t, mp_limb_signed_t, BITS_PER_MP_LIMB):\n+\tUse 64-bit limbs on LLP64 targets.\n+\t* strtod/strtod_l.c (round_and_return): Cherry-pick glibc\n+\t9310c284ae9 BZ #16151, 4406c41c1d6 BZ #16965 and fcd6b5ac36a\n+\tBZ #23279 fixes.\n+\t(____STRTOF_INTERNAL): Cherry-pick glibc b0debe14fcf BZ #23007,\n+\t5556d30caee BZ #18247, 09555b9721d and c6aac3bf366 BZ #26137 and\n+\td84f25c7d87 fixes.\n+\n 2023-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libquadmath.texi: Bump @copying's copyright year."}]}