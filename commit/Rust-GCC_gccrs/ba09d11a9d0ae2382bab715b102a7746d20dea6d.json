{"sha": "ba09d11a9d0ae2382bab715b102a7746d20dea6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwOWQxMWE5ZDBhZTIzODJiYWI3MTViMTAyYTc3NDZkMjBkZWE2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-03T08:55:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-03T08:55:19Z"}, "message": "c-family: Avoid ICE on va_arg [PR99324]\n\nbuild_va_arg calls the middle-end mark_addressable, which e.g. requires that\ncfun is non-NULL.  The following patch calls instead c_common_mark_addressable_vec\nwhich is the c-family variant similarly to the FE c_mark_addressable and\ncxx_mark_addressable, except that it doesn't error on addresses of register\nvariables.  As the taking of the address is artificial for the .VA_ARG\nifn and when that is lowered goes away, it is similar case to the vector\nsubscripting for which c_common_mark_addressable_vec has been added.\n\n2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/99324\n\t* c-common.c (build_va_arg): Call c_common_mark_addressable_vec\n\tinstead of mark_addressable.  Fix a comment typo -\n\tneutrallly -> neutrally.\n\n\t* gcc.c-torture/compile/pr99324.c: New test.", "tree": {"sha": "f44640d66c203477a0a7bf3fc80e292093920e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f44640d66c203477a0a7bf3fc80e292093920e72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba09d11a9d0ae2382bab715b102a7746d20dea6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba09d11a9d0ae2382bab715b102a7746d20dea6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba09d11a9d0ae2382bab715b102a7746d20dea6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba09d11a9d0ae2382bab715b102a7746d20dea6d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5040344b9ca609e19ee59ba56cd4af9697a1692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5040344b9ca609e19ee59ba56cd4af9697a1692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5040344b9ca609e19ee59ba56cd4af9697a1692"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "d227686a030f0194d4cca9474c8078ae74f93b31", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba09d11a9d0ae2382bab715b102a7746d20dea6d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba09d11a9d0ae2382bab715b102a7746d20dea6d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ba09d11a9d0ae2382bab715b102a7746d20dea6d", "patch": "@@ -4553,7 +4553,7 @@ build_va_arg (location_t loc, tree expr, tree type)\n       if (canon_va_type == NULL_TREE)\n \terror_at (loc, \"first argument to %<va_arg%> not of type %<va_list%>\");\n \n-      /* Let's handle things neutrallly, if expr:\n+      /* Let's handle things neutrally, if expr:\n \t - has undeclared type, or\n \t - is not an va_list type.  */\n       return build_va_arg_1 (loc, type, error_mark_node);\n@@ -4565,7 +4565,7 @@ build_va_arg (location_t loc, tree expr, tree type)\n \n       /* Take the address, to get '&ap'.  Note that &ap is not a va_list\n \t type.  */\n-      mark_addressable (expr);\n+      c_common_mark_addressable_vec (expr);\n       expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (expr)), expr);\n \n       return build_va_arg_1 (loc, type, expr);\n@@ -4627,7 +4627,7 @@ build_va_arg (location_t loc, tree expr, tree type)\n \n       /* Take the address, to get '&ap'.  Make sure it's a pointer to array\n \t elem type.  */\n-      mark_addressable (expr);\n+      c_common_mark_addressable_vec (expr);\n       expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (canon_va_type)),\n \t\t     expr);\n "}, {"sha": "7a41e5c64b1e12013a5732301ff41f46776e28fe", "filename": "gcc/testsuite/gcc.c-torture/compile/pr99324.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba09d11a9d0ae2382bab715b102a7746d20dea6d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99324.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba09d11a9d0ae2382bab715b102a7746d20dea6d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99324.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99324.c?ref=ba09d11a9d0ae2382bab715b102a7746d20dea6d", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/99324 */\n+\n+#include <stdarg.h>\n+\n+int\n+foo (int x, ...)\n+{\n+  va_list a;\n+  va_start (a, x);\n+  int b[6] = {};\n+  int bar (c)\n+    int c[1][va_arg (a, int)];\n+  {\n+    return sizeof c[0];\n+  }\n+  int r = bar (b);\n+  va_end (a);\n+  return r;\n+}"}]}