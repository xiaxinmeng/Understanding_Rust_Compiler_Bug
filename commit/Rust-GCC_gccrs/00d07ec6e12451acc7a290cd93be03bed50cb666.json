{"sha": "00d07ec6e12451acc7a290cd93be03bed50cb666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMDdlYzZlMTI0NTFhY2M3YTI5MGNkOTNiZTAzYmVkNTBjYjY2Ng==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-06-10T18:54:12Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-06-10T18:56:27Z"}, "message": "rs6000: Add new __builtin_vsx_build_pair and __builtin_mma_build_acc built-ins\n\nThe __builtin_vsx_assemble_pair and __builtin_mma_assemble_acc built-ins\ncurrently assign their first source operand to the first VSX register\nin a pair/quad, their second operand to the second register in a pair/quad, etc.\nThis is not endian friendly and forces the user to generate different calls\ndepending on endianness.  In agreement with the POWER LLVM team, we've\ndecided to lightly deprecate the assemble built-ins and replace them with\n\"build\" built-ins that automatically handle endianness so the same built-in\ncall and be used for both little-endian and big-endian compiles.  We are not\nremoving the assemble built-ins, since there is code in the wild that use\nthem, but we are removing their documentation to encourage the use of the\nnew \"build\" variants.\n\ngcc/\n\t* config/rs6000/rs6000-builtin.def (build_pair): New built-in.\n\t(build_acc): Likewise.\n\t* config/rs6000/rs6000-call.c (mma_expand_builtin): Swap assemble\n\tsource operands in little-endian mode.\n\t(rs6000_gimple_fold_mma_builtin): Handle VSX_BUILTIN_BUILD_PAIR.\n\t(mma_init_builtins): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Handle endianness\n\tordering for the MMA assemble and build source operands.\n\t* doc/extend.texi (__builtin_vsx_build_acc, __builtin_mma_build_pair):\n\tDocument.\n\t(__builtin_mma_assemble_acc, __builtin_mma_assemble_pair): Remove\n\tdocumentation.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-builtin-4.c (__builtin_vsx_build_pair): Add\n\ttests.  Update expected counts.\n\t* gcc.target/powerpc/mma-builtin-5.c (__builtin_mma_build_acc): Add\n\ttests.  Update expected counts.", "tree": {"sha": "4d020c7ec961def146915db2248863ab8d3801a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d020c7ec961def146915db2248863ab8d3801a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d07ec6e12451acc7a290cd93be03bed50cb666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d07ec6e12451acc7a290cd93be03bed50cb666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d07ec6e12451acc7a290cd93be03bed50cb666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d07ec6e12451acc7a290cd93be03bed50cb666/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "231e7c9d420b062c01ea3314ec83f96c3b088b7f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -3265,6 +3265,7 @@ BU_MMA_2 (DISASSEMBLE_ACC, \"disassemble_acc\",\tQUAD, mma_disassemble_acc)\n BU_MMA_V2 (DISASSEMBLE_PAIR, \"disassemble_pair\", PAIR, vsx_disassemble_pair)\n BU_COMPAT (VSX_BUILTIN_DISASSEMBLE_PAIR, \"mma_disassemble_pair\")\n \n+BU_MMA_V3 (BUILD_PAIR,\t    \"build_pair\",\tMISC, vsx_assemble_pair)\n BU_MMA_V3 (ASSEMBLE_PAIR,   \"assemble_pair\",\tMISC, vsx_assemble_pair)\n BU_COMPAT (VSX_BUILTIN_ASSEMBLE_PAIR, \"mma_assemble_pair\")\n BU_MMA_3 (XVBF16GER2,\t    \"xvbf16ger2\",\tMISC, mma_xvbf16ger2)\n@@ -3297,6 +3298,7 @@ BU_MMA_3 (XVI8GER4SPP,\t    \"xvi8ger4spp\",      QUAD, mma_xvi8ger4spp)\n BU_MMA_3 (XVI16GER2PP,\t    \"xvi16ger2pp\",      QUAD, mma_xvi16ger2pp)\n BU_MMA_3 (XVI16GER2SPP,\t    \"xvi16ger2spp\",     QUAD, mma_xvi16ger2spp)\n \n+BU_MMA_5 (BUILD_ACC,\t    \"build_acc\",\tMISC, mma_assemble_acc)\n BU_MMA_5 (ASSEMBLE_ACC,     \"assemble_acc\",\tMISC, mma_assemble_acc)\n BU_MMA_5 (PMXVF32GER,\t    \"pmxvf32ger\",       MISC, mma_pmxvf32ger)\n BU_MMA_5 (PMXVF64GER,\t    \"pmxvf64ger\",       PAIR, mma_pmxvf64ger)"}, {"sha": "0ac6b6ef1bcfcaa88d3df661c8f4468e8e048c98", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -10244,12 +10244,23 @@ mma_expand_builtin (tree exp, rtx target, bool *expandedp)\n       pat = GEN_FCN (icode) (op[0], op[1]);\n       break;\n     case 3:\n+      /* The ASSEMBLE builtin source operands are reversed in little-endian\n+\t mode, so reorder them.  */\n+      if (fcode == VSX_BUILTIN_ASSEMBLE_PAIR_INTERNAL && !WORDS_BIG_ENDIAN)\n+\tstd::swap (op[1], op[2]);\n       pat = GEN_FCN (icode) (op[0], op[1], op[2]);\n       break;\n     case 4:\n       pat = GEN_FCN (icode) (op[0], op[1], op[2], op[3]);\n       break;\n     case 5:\n+      /* The ASSEMBLE builtin source operands are reversed in little-endian\n+\t mode, so reorder them.  */\n+      if (fcode == MMA_BUILTIN_ASSEMBLE_ACC_INTERNAL && !WORDS_BIG_ENDIAN)\n+\t{\n+\t  std::swap (op[1], op[4]);\n+\t  std::swap (op[2], op[3]);\n+\t}\n       pat = GEN_FCN (icode) (op[0], op[1], op[2], op[3], op[4]);\n       break;\n     case 6:\n@@ -11961,7 +11972,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       gcc_unreachable ();\n     }\n \n-  if (fncode == VSX_BUILTIN_ASSEMBLE_PAIR)\n+  if (fncode == VSX_BUILTIN_BUILD_PAIR || fncode == VSX_BUILTIN_ASSEMBLE_PAIR)\n     lhs = make_ssa_name (vector_pair_type_node);\n   else\n     lhs = make_ssa_name (vector_quad_type_node);\n@@ -14293,8 +14304,10 @@ mma_init_builtins (void)\n \t      machine_mode mode = insn_data[icode].operand[j].mode;\n \t      if (gimple_func && mode == XOmode)\n \t\top[nopnds++] = build_pointer_type (vector_quad_type_node);\n-\t      else if (gimple_func && mode == OOmode\n-\t\t       && d->code == VSX_BUILTIN_ASSEMBLE_PAIR)\n+\t      else if (gimple_func\n+\t\t       && mode == OOmode\n+\t\t       && (d->code == VSX_BUILTIN_BUILD_PAIR\n+\t\t\t   || d->code == VSX_BUILTIN_ASSEMBLE_PAIR))\n \t\top[nopnds++] = build_pointer_type (vector_pair_type_node);\n \t      else\n \t\t/* MMA uses unsigned types.  */"}, {"sha": "38f928134f3fe428939e4626d07f5194c538337b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -16807,9 +16807,11 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t    gcc_assert (VSX_REGNO_P (REGNO (dst)));\n \n \t  reg_mode = GET_MODE (XVECEXP (src, 0, 0));\n-\t  for (int i = 0; i < XVECLEN (src, 0); i++)\n+\t  int nvecs = XVECLEN (src, 0);\n+\t  for (int i = 0; i < nvecs; i++)\n \t    {\n-\t      rtx dst_i = gen_rtx_REG (reg_mode, reg + i);\n+\t      int index = WORDS_BIG_ENDIAN ? i : nvecs - 1 - i;\n+\t      rtx dst_i = gen_rtx_REG (reg_mode, reg + index);\n \t      emit_insn (gen_rtx_SET (dst_i, XVECEXP (src, 0, i)));\n \t    }\n "}, {"sha": "408979b78af9ec3a3c7e925f9b7af83357593555", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -20723,10 +20723,10 @@ void __builtin_mma_xxmtacc (__vector_quad *);\n void __builtin_mma_xxmfacc (__vector_quad *);\n void __builtin_mma_xxsetaccz (__vector_quad *);\n \n-void __builtin_mma_assemble_acc (__vector_quad *, vec_t, vec_t, vec_t, vec_t);\n+void __builtin_mma_build_acc (__vector_quad *, vec_t, vec_t, vec_t, vec_t);\n void __builtin_mma_disassemble_acc (void *, __vector_quad *);\n \n-void __builtin_vsx_assemble_pair (__vector_pair *, vec_t, vec_t);\n+void __builtin_vsx_build_pair (__vector_pair *, vec_t, vec_t);\n void __builtin_vsx_disassemble_pair (void *, __vector_pair *);\n \n vec_t __builtin_vsx_xvcvspbf16 (vec_t);"}, {"sha": "a9fb0107d12de20d99be5086fcf84f42eaccc469", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-4.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -20,6 +20,14 @@ foo2 (__vector_pair *dst, vec_t *src)\n   *dst = pair;\n }\n \n+void\n+foo3 (__vector_pair *dst, vec_t *src)\n+{\n+  __vector_pair pair;\n+  __builtin_vsx_build_pair (&pair, src[4], src[0]);\n+  *dst = pair;\n+}\n+\n void\n bar (vec_t *dst, __vector_pair *src)\n {\n@@ -54,8 +62,12 @@ bar2 (vec_t *dst, __vector_pair *src)\n #  error \"__has_builtin (__builtin_mma_disassemble_pair) failed\"\n #endif\n \n-/* { dg-final { scan-assembler-times {\\mlxv\\M} 4 } } */\n+#if !__has_builtin (__builtin_vsx_build_pair)\n+#  error \"__has_builtin (__builtin_vsx_build_pair) failed\"\n+#endif\n+\n+/* { dg-final { scan-assembler-times {\\mlxv\\M} 6 } } */\n /* { dg-final { scan-assembler-times {\\mlxvp\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mstxv\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mstxvp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 3 } } */\n "}, {"sha": "00503b7343d290fa22a48065ee889cce151e8e30", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-5.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d07ec6e12451acc7a290cd93be03bed50cb666/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-5.c?ref=00d07ec6e12451acc7a290cd93be03bed50cb666", "patch": "@@ -12,6 +12,14 @@ foo (__vector_quad *dst, vec_t *src)\n   *dst = acc;\n }\n \n+void\n+foo2 (__vector_quad *dst, vec_t *src)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_build_acc (&acc, src[12], src[8], src[4], src[0]);\n+  *dst = acc;\n+}\n+\n void\n bar (vec_t *dst, __vector_quad *src)\n {\n@@ -23,9 +31,17 @@ bar (vec_t *dst, __vector_quad *src)\n   dst[12] = res[3];\n }\n \n-/* { dg-final { scan-assembler-times {\\mlxv\\M} 4 } } */\n+#if !__has_builtin (__builtin_mma_assemble_acc)\n+#  error \"__has_builtin (__builtin_mma_assemble_acc) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_mma_build_acc)\n+#  error \"__has_builtin (__builtin_mma_build_acc) failed\"\n+#endif\n+\n+/* { dg-final { scan-assembler-times {\\mlxv\\M} 8 } } */\n /* { dg-final { scan-assembler-times {\\mlxvp\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mstxv\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mstxvp\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmfacc\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmtacc\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmfacc\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmtacc\\M} 3 } } */"}]}