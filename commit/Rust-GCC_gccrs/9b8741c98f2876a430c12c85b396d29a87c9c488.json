{"sha": "9b8741c98f2876a430c12c85b396d29a87c9c488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4NzQxYzk4ZjI4NzZhNDMwYzEyYzg1YjM5NmQyOWE4N2M5YzQ4OA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-01-19T10:28:48Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-01-19T10:28:48Z"}, "message": "ipa-sra: Do not remove return values needed because of non-call EH\n\nIPA-SRA already contains a check to figure out that an otherwise dead\nparameter is actually required because of non-call exceptions, but it\nis not present at the equivalent spot where SRA figures out whether\nthe return statement is used for anything useful.  This patch adds\nthat condition there.\n\nUnfortunately, even though this patch should be good enough for any\nnormal (I'd even say reasonable) use of the compiler, it hints that\nwhen the user manually switches all sorts of DCE, IPA-SRA would\nprobably leave behind problematic statements manipulating what\noriginally were return values, just like it does for parameters (PR\n93385).  Fixing this properly might unfortunately be a separate issue\nfrom the mentioned bug because the LHS of a call is changed during\ncall redirection and the caller often is not a clone.  But I'll see\nwhat I can do.\n\nMeanwhile, the patch below has been bootstrapped and tested on x86_64.\n\ngcc/ChangeLog:\n\n2021-01-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/98690\n\t* ipa-sra.c (ssa_name_only_returned_p): New parameter fun.  Check\n\twhether non-call exceptions allow removal of a statement.\n\t(isra_analyze_call): Pass the appropriate function to\n\tssa_name_only_returned_p.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/98690\n\t* g++.dg/ipa/pr98690.C: New test.", "tree": {"sha": "cac01a751df51631480bf1ddeba8360e81f49661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cac01a751df51631480bf1ddeba8360e81f49661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8741c98f2876a430c12c85b396d29a87c9c488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8741c98f2876a430c12c85b396d29a87c9c488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8741c98f2876a430c12c85b396d29a87c9c488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8741c98f2876a430c12c85b396d29a87c9c488/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "1571921cb4840649f0e9b0e4024ee1c7b48d2fb6", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8741c98f2876a430c12c85b396d29a87c9c488/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8741c98f2876a430c12c85b396d29a87c9c488/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=9b8741c98f2876a430c12c85b396d29a87c9c488", "patch": "@@ -1952,13 +1952,13 @@ scan_function (cgraph_node *node, struct function *fun)\n     }\n }\n \n-/* Return true if SSA_NAME NAME is only used in return statements, or if\n-   results of any operations it is involved in are only used in return\n-   statements.  ANALYZED is a bitmap that tracks which SSA names we have\n-   already started investigating.  */\n+/* Return true if SSA_NAME NAME of function described by FUN is only used in\n+   return statements, or if results of any operations it is involved in are\n+   only used in return statements.  ANALYZED is a bitmap that tracks which SSA\n+   names we have already started investigating.  */\n \n static bool\n-ssa_name_only_returned_p (tree name, bitmap analyzed)\n+ssa_name_only_returned_p (function *fun, tree name, bitmap analyzed)\n {\n   bool res = true;\n   imm_use_iterator imm_iter;\n@@ -1978,8 +1978,9 @@ ssa_name_only_returned_p (tree name, bitmap analyzed)\n \t      break;\n \t    }\n \t}\n-      else if ((is_gimple_assign (stmt) && !gimple_has_volatile_ops (stmt))\n-\t       || gimple_code (stmt) == GIMPLE_PHI)\n+      else if (!stmt_unremovable_because_of_non_call_eh_p (fun, stmt)\n+\t       && ((is_gimple_assign (stmt) && !gimple_has_volatile_ops (stmt))\n+\t\t   || gimple_code (stmt) == GIMPLE_PHI))\n \t{\n \t  /* TODO: And perhaps for const function calls too?  */\n \t  tree lhs;\n@@ -1995,7 +1996,7 @@ ssa_name_only_returned_p (tree name, bitmap analyzed)\n \t    }\n \t  gcc_assert (!gimple_vdef (stmt));\n \t  if (bitmap_set_bit (analyzed, SSA_NAME_VERSION (lhs))\n-\t      && !ssa_name_only_returned_p (lhs, analyzed))\n+\t      && !ssa_name_only_returned_p (fun, lhs, analyzed))\n \t    {\n \t      res = false;\n \t      break;\n@@ -2049,7 +2050,8 @@ isra_analyze_call (cgraph_edge *cs)\n       if (TREE_CODE (lhs) == SSA_NAME)\n \t{\n \t  bitmap analyzed = BITMAP_ALLOC (NULL);\n-\t  if (ssa_name_only_returned_p (lhs, analyzed))\n+\t  if (ssa_name_only_returned_p (DECL_STRUCT_FUNCTION (cs->caller->decl),\n+\t\t\t\t\tlhs, analyzed))\n \t    csum->m_return_returned = true;\n \t  BITMAP_FREE (analyzed);\n \t}"}, {"sha": "004418e5b40c220c0925d97c5f3dff654954ab8e", "filename": "gcc/testsuite/g++.dg/ipa/pr98690.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8741c98f2876a430c12c85b396d29a87c9c488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98690.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8741c98f2876a430c12c85b396d29a87c9c488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98690.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98690.C?ref=9b8741c98f2876a430c12c85b396d29a87c9c488", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fnon-call-exceptions\" } */\n+\n+int g;\n+volatile int v;\n+\n+static int * __attribute__((noinline))\n+almost_useless_return (void)\n+{\n+  v = 1;\n+  return &g;\n+}\n+\n+static void __attribute__((noinline))\n+foo (void)\n+{\n+  int *p = almost_useless_return ();\n+  int i = *p;\n+  v = 2;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  foo ();\n+  return 0;\n+}"}]}