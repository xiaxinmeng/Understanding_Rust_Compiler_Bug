{"sha": "6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwYzdmYzYyMzY0NzBhNTMzNjc1Y2QzY2QxZWJiMWNjM2RkMTEyYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-14T19:48:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-15T15:56:44Z"}, "message": "libstdc++: Move atomic functions to libsupc++ [PR 96657]\n\nThe changes for PR libstdc++/64735 mean that libsupc++ function might\nnow depend on the __exchange_and_add and __atomic_add functions defined\nin config/cpu/*/atomicity.h which is not compiled into libsupc++. This\ncauses a link failure for some targets when trying to use libsupc++\nwithout the rest of libstdc++.\n\nThis patch simply moves the definitions of those functions into\nlibsupc++ so that they are available there.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96657\n\t* libsupc++/Makefile.am: Add atomicity.cc here.\n\t* src/c++98/Makefile.am: Remove it from here.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* testsuite/18_support/exception_ptr/96657.cc: New test.", "tree": {"sha": "9946f22c00ca3efa238fc6176913e15a9a4e9361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9946f22c00ca3efa238fc6176913e15a9a4e9361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d224603d38d3e88f2a3c215b65c12c5f0da1d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d224603d38d3e88f2a3c215b65c12c5f0da1d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d224603d38d3e88f2a3c215b65c12c5f0da1d8d"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "10ac4bb012431a772941741aacd494b7452ca1e1", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "patch": "@@ -48,6 +48,7 @@ sources = \\\n \tarray_type_info.cc \\\n \tatexit_arm.cc \\\n \tatexit_thread.cc \\\n+\tatomicity.cc \\\n \tbad_alloc.cc \\\n \tbad_array_length.cc \\\n \tbad_array_new.cc \\\n@@ -127,6 +128,9 @@ cp-demangle.lo: cp-demangle.c\n cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n+atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n+atomicity.cc: ${atomicity_file}\n+\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "5776a56282b12a979c7e702cc658934e795a981a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "patch": "@@ -153,13 +153,13 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(bitsdir)\" \\\n LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libsupc___la_LIBADD =\n am__objects_1 = array_type_info.lo atexit_arm.lo atexit_thread.lo \\\n-\tbad_alloc.lo bad_array_length.lo bad_array_new.lo bad_cast.lo \\\n-\tbad_typeid.lo class_type_info.lo del_op.lo del_ops.lo \\\n-\tdel_opnt.lo del_opv.lo del_opvs.lo del_opvnt.lo dyncast.lo \\\n-\teh_alloc.lo eh_arm.lo eh_aux_runtime.lo eh_call.lo eh_catch.lo \\\n-\teh_exception.lo eh_globals.lo eh_personality.lo eh_ptr.lo \\\n-\teh_term_handler.lo eh_terminate.lo eh_tm.lo eh_throw.lo \\\n-\teh_type.lo eh_unex_handler.lo enum_type_info.lo \\\n+\tatomicity.lo bad_alloc.lo bad_array_length.lo bad_array_new.lo \\\n+\tbad_cast.lo bad_typeid.lo class_type_info.lo del_op.lo \\\n+\tdel_ops.lo del_opnt.lo del_opv.lo del_opvs.lo del_opvnt.lo \\\n+\tdyncast.lo eh_alloc.lo eh_arm.lo eh_aux_runtime.lo eh_call.lo \\\n+\teh_catch.lo eh_exception.lo eh_globals.lo eh_personality.lo \\\n+\teh_ptr.lo eh_term_handler.lo eh_terminate.lo eh_tm.lo \\\n+\teh_throw.lo eh_type.lo eh_unex_handler.lo enum_type_info.lo \\\n \tfunction_type_info.lo fundamental_type_info.lo guard.lo \\\n \tguard_error.lo hash_bytes.lo nested_exception.lo \\\n \tnew_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo \\\n@@ -503,6 +503,7 @@ sources = \\\n \tarray_type_info.cc \\\n \tatexit_arm.cc \\\n \tatexit_thread.cc \\\n+\tatomicity.cc \\\n \tbad_alloc.cc \\\n \tbad_array_length.cc \\\n \tbad_array_new.cc \\\n@@ -569,6 +570,7 @@ sources = \\\n \n libsupc___la_SOURCES = $(sources) $(c_sources) $(vtv_sources)\n libsupc__convenience_la_SOURCES = $(sources) $(c_sources) $(vtv_sources)\n+atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -960,6 +962,8 @@ cp-demangle.lo: cp-demangle.c\n \t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+atomicity.cc: ${atomicity_file}\n+\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n install-stdHEADERS: $(std_HEADERS)\n \t@$(NORMAL_INSTALL)"}, {"sha": "0fa6ab95fb4765eb94564dd9ffd23aabf2987ce3", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "patch": "@@ -39,7 +39,6 @@ endif\n # particular host.\n host_sources = \\\n \t$(cow_string_host_sources) \\\n-\tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tmessages_members.cc \\\n@@ -65,10 +64,6 @@ numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n \n-atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n-atomicity.cc: ${atomicity_file}\n-\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n-\n if ENABLE_DUAL_ABI\n collate_members_cow.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) ./$@ || true"}, {"sha": "94c68487fde949007782ac0e54940823c2e55ace", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "patch": "@@ -127,9 +127,9 @@ libc__98convenience_la_LIBADD =\n @ENABLE_DUAL_ABI_TRUE@\tmessages_members_cow.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tmonetary_members_cow.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tnumeric_members_cow.lo\n-am__objects_3 = $(am__objects_2) atomicity.lo codecvt_members.lo \\\n-\tcollate_members.lo messages_members.lo monetary_members.lo \\\n-\tnumeric_members.lo time_members.lo\n+am__objects_3 = $(am__objects_2) codecvt_members.lo collate_members.lo \\\n+\tmessages_members.lo monetary_members.lo numeric_members.lo \\\n+\ttime_members.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = allocator-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.lo ext-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tmisc-inst.lo\n@@ -448,15 +448,13 @@ headers =\n # particular host.\n host_sources = \\\n \t$(cow_string_host_sources) \\\n-\tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tmessages_members.cc \\\n \tmonetary_members.cc \\\n \tnumeric_members.cc \\\n \ttime_members.cc\n \n-atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n \n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n@@ -847,8 +845,6 @@ numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n \n time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n-atomicity.cc: ${atomicity_file}\n-\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n @ENABLE_DUAL_ABI_TRUE@collate_members_cow.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n @ENABLE_DUAL_ABI_TRUE@\t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) ./$@ || true"}, {"sha": "61572668385e0b5c02ebb0d22aed26b687f50353", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/96657.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F96657.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F96657.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F96657.cc?ref=6c0c7fc6236470a533675cd3cd1ebb1cc3dd112c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-nodefaultlibs -lsupc++ -lgcc_s -lc\" { target sparc*-*-linux-gnu } }\n+// { dg-do link { target c++11 } }\n+\n+#include <exception>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/96657 undefined references in libsupc++\n+  std::make_exception_ptr(1);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}