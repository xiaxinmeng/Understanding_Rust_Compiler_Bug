{"sha": "6090f915917f433509168b20c2ea9c3b4096c024", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5MGY5MTU5MTdmNDMzNTA5MTY4YjIwYzJlYTljM2I0MDk2YzAyNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-03T19:38:25Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-03T19:38:25Z"}, "message": "re PR fortran/67679 (-Wunitialized reports on compiler-generated variables)\n\n2019-02-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/67679\n\t* trans-array.c (gfc_array_allocate):  For setting the bounds on\n\tthe new array, add a condition for a not previously allocated\n\tvariable.\n\n2019-02-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/67679\n\t* gfortran.dg/warn_undefined_1.f90: New test.\n\t* gfortran.dg/coarray_lock_7.f90: Fix patterns in test.\n\nFrom-SVN: r268502", "tree": {"sha": "89c1dec17264d9bf5c934d4d34872863924a24eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c1dec17264d9bf5c934d4d34872863924a24eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6090f915917f433509168b20c2ea9c3b4096c024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6090f915917f433509168b20c2ea9c3b4096c024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6090f915917f433509168b20c2ea9c3b4096c024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6090f915917f433509168b20c2ea9c3b4096c024/comments", "author": null, "committer": null, "parents": [{"sha": "d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31fd1e8ab24f5264894d4f887bcaacc5bc6ed40"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "2527950aacbde31aea94a03d9f9e685a8ec6353f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6090f915917f433509168b20c2ea9c3b4096c024/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6090f915917f433509168b20c2ea9c3b4096c024/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=6090f915917f433509168b20c2ea9c3b4096c024", "patch": "@@ -5736,6 +5736,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   tree var_overflow = NULL_TREE;\n   tree cond;\n   tree set_descriptor;\n+  tree not_prev_allocated = NULL_TREE;\n   tree element_size = NULL_TREE;\n   stmtblock_t set_descriptor_block;\n   stmtblock_t elseblock;\n@@ -5882,8 +5883,6 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \t}\n     }\n \n-  gfc_start_block (&elseblock);\n-\n   /* Allocate memory to store the data.  */\n   if (POINTER_TYPE_P (TREE_TYPE (se->expr)))\n     se->expr = build_fold_indirect_ref_loc (input_location, se->expr);\n@@ -5899,6 +5898,19 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n     pointer = gfc_conv_descriptor_data_get (se->expr);\n   STRIP_NOPS (pointer);\n \n+  if (allocatable)\n+    {\n+      not_prev_allocated = gfc_create_var (logical_type_node,\n+\t\t\t\t\t   \"not_prev_allocated\");\n+      tmp = fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t     logical_type_node, pointer,\n+\t\t\t     build_int_cst (TREE_TYPE (pointer), 0));\n+\n+      gfc_add_modify (&se->pre, not_prev_allocated, tmp);\n+    }\n+\n+  gfc_start_block (&elseblock);\n+\n   /* The allocatable variant takes the old pointer as first argument.  */\n   if (allocatable)\n     gfc_allocate_allocatable (&elseblock, pointer, size, token,\n@@ -5939,6 +5951,11 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n       cond = fold_build2_loc (input_location, EQ_EXPR,\n \t\t\t  logical_type_node, status,\n \t\t\t  build_int_cst (TREE_TYPE (status), 0));\n+\n+      if (not_prev_allocated != NULL_TREE)\n+\tcond = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n+\t\t\t\tlogical_type_node, cond, not_prev_allocated);\n+\n       gfc_add_expr_to_block (&se->pre,\n \t\t fold_build3_loc (input_location, COND_EXPR, void_type_node,\n \t\t\t\t  cond,"}, {"sha": "aedb22674137fadec36021d24c5c2d548999c090", "filename": "gcc/testsuite/gfortran.dg/coarray_lock_7.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6090f915917f433509168b20c2ea9c3b4096c024/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6090f915917f433509168b20c2ea9c3b4096c024/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90?ref=6090f915917f433509168b20c2ea9c3b4096c024", "patch": "@@ -35,8 +35,8 @@\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., 0, 0, 0B, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., 0, 0, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., .*\\\\(\\\\(3 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, 0B, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(caf_token.1, \\\\(3 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, 0B, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., .*\\\\(\\\\(2 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(caf_token.., \\\\(2 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., .*\\\\(\\\\(3 - parm....dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm....dim\\\\\\[0\\\\\\].ubound - parm....dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm....dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, 0B, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(caf_token.1, \\\\(3 - parm....dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm....dim\\\\\\[0\\\\\\].ubound - parm....dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm....dim\\\\\\[1\\\\\\].lbound\\\\), 0, 0B, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., .*\\\\(\\\\(2 - parm....dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm....dim\\\\\\[0\\\\\\].ubound - parm....dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm....dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(caf_token.., \\\\(2 - parm....dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm....dim\\\\\\[0\\\\\\].ubound - parm....dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm....dim\\\\\\[1\\\\\\].lbound\\\\), 0, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(three.token, 0, \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(5 - three.dim\\\\\\[0\\\\\\].lbound\\\\), &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);|_gfortran_caf_lock \\\\(three.token, 0, 5 - three.dim\\\\\\[0\\\\\\].lbound, &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(three.token, 0, \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(8 - three.dim\\\\\\[0\\\\\\].lbound\\\\), &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(three.token, 0, 8 - three.dim\\\\\\[0\\\\\\].lbound, &ii, 0B, 0\\\\);\" 1 \"original\" } }"}]}