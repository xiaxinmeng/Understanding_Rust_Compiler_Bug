{"sha": "45cfa18d29bc5a59845d7254eec5458c8272530f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjZmExOGQyOWJjNWE1OTg0NWQ3MjU0ZWVjNTQ1OGM4MjcyNTMwZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-03-09T16:56:25Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-03-09T16:56:25Z"}, "message": "linux64.h (OPTION_TARGET_CPU_DEFAULT): Do not redefine to be NULL if the current bit-size is different from the...\n\n2012-03-08  Michael Meissner  <meissner@the-meissners.org>\n\n\t* config/rs6000/linux64.h (OPTION_TARGET_CPU_DEFAULT): Do not\n\tredefine to be NULL if the current bit-size is different from the\n\tconfigured bit-size.\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If the\n\tcpu is defaulted, use PROCESSOR_DEFAULT and PROCESSOR_DEFAULT64 to\n\tset the default tuning.  Add asserts to make sure the cpu and tune\n\tindexes are defined.  Fix tests for cpu/tune index to use >= 0 to\n\ttest whether the index is set, instead of > 0.\n\t(rs6000_file_start): Do not reset the default cpu if the current\n\tbit-size is different from the configured bit-size.\n\nFrom-SVN: r185146", "tree": {"sha": "c6e446946ae4532ed5a4bf96a7cfd1dd1cd132cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e446946ae4532ed5a4bf96a7cfd1dd1cd132cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45cfa18d29bc5a59845d7254eec5458c8272530f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45cfa18d29bc5a59845d7254eec5458c8272530f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45cfa18d29bc5a59845d7254eec5458c8272530f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45cfa18d29bc5a59845d7254eec5458c8272530f/comments", "author": null, "committer": null, "parents": [{"sha": "d3a26d5d27e7104a62b1c2e0fd64f917b9328826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a26d5d27e7104a62b1c2e0fd64f917b9328826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a26d5d27e7104a62b1c2e0fd64f917b9328826"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "cc4df12000e870340bf020954f7d691f876b4784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45cfa18d29bc5a59845d7254eec5458c8272530f", "patch": "@@ -1,3 +1,17 @@\n+2012-03-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/linux64.h (OPTION_TARGET_CPU_DEFAULT): Do not\n+\tredefine to be NULL if the current bit-size is different from the\n+\tconfigured bit-size.\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If the\n+\tcpu is defaulted, use PROCESSOR_DEFAULT and PROCESSOR_DEFAULT64 to\n+\tset the default tuning.  Add asserts to make sure the cpu and tune\n+\tindexes are defined.  Fix tests for cpu/tune index to use >= 0 to\n+\ttest whether the index is set, instead of > 0.\n+\t(rs6000_file_start): Do not reset the default cpu if the current\n+\tbit-size is different from the configured bit-size.\n+\n 2012-03-09  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms-crtlmap.map: Add comments."}, {"sha": "7c516eb56a8fa54227c536305070025ad241afa7", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=45cfa18d29bc5a59845d7254eec5458c8272530f", "patch": "@@ -159,15 +159,6 @@ extern int dot_symbols;\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifdef\tRS6000_BI_ARCH\n-\n-#undef\tOPTION_TARGET_CPU_DEFAULT\n-#define\tOPTION_TARGET_CPU_DEFAULT \\\n-  (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n-   ? (char *) 0 : TARGET_CPU_DEFAULT)\n-\n-#endif\n-\n #undef\tASM_DEFAULT_SPEC\n #undef\tASM_SPEC\n #undef\tLINK_OS_LINUX_SPEC"}, {"sha": "bdd11cc01c62c9817bcb91acaf920336c8131d2b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45cfa18d29bc5a59845d7254eec5458c8272530f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=45cfa18d29bc5a59845d7254eec5458c8272530f", "patch": "@@ -2596,6 +2596,7 @@ static bool\n rs6000_option_override_internal (bool global_init_p)\n {\n   bool ret = true;\n+  bool have_cpu = false;\n   const char *default_cpu = OPTION_TARGET_CPU_DEFAULT;\n   int set_masks;\n   int cpu_index;\n@@ -2652,43 +2653,55 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Don't override by the processor default if given explicitly.  */\n   set_masks &= ~target_flags_explicit;\n \n-  /* Identify the processor type.  */\n-  if (!default_cpu)\n-    {\n-      if (TARGET_POWERPC64)\n-\tdefault_cpu = \"powerpc64\";\n-      else if (TARGET_POWERPC)\n-\tdefault_cpu = \"powerpc\";\n-    }\n-\n   /* Process the -mcpu=<xxx> and -mtune=<xxx> argument.  If the user changed\n      the cpu in a target attribute or pragma, but did not specify a tuning\n      option, use the cpu for the tuning option rather than the option specified\n      with -mtune on the command line.  */\n-  if (rs6000_cpu_index > 0)\n-    cpu_index = rs6000_cpu_index;\n-  else if (main_target_opt != NULL && main_target_opt->x_rs6000_cpu_index > 0)\n-    rs6000_cpu_index = cpu_index = main_target_opt->x_rs6000_cpu_index;\n+  if (rs6000_cpu_index >= 0)\n+    {\n+      cpu_index = rs6000_cpu_index;\n+      have_cpu = true;\n+    }\n+  else if (main_target_opt != NULL && main_target_opt->x_rs6000_cpu_index >= 0)\n+    {\n+      rs6000_cpu_index = cpu_index = main_target_opt->x_rs6000_cpu_index;\n+      have_cpu = true;\n+    }\n   else\n-    rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+    {\n+      if (!default_cpu)\n+\tdefault_cpu = (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\");\n+\n+      rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+    }\n+\n+  gcc_assert (cpu_index >= 0);\n \n-  if (rs6000_tune_index > 0)\n+  target_flags &= ~set_masks;\n+  target_flags |= (processor_target_table[cpu_index].target_enable\n+\t\t   & set_masks);\n+\n+  if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n-  else\n+  else if (have_cpu)\n     rs6000_tune_index = tune_index = cpu_index;\n-\n-  if (cpu_index >= 0)\n+  else\n     {\n-      target_flags &= ~set_masks;\n-      target_flags |= (processor_target_table[cpu_index].target_enable\n-\t\t       & set_masks);\n+      size_t i;\n+      enum processor_type tune_proc\n+\t= (TARGET_POWERPC64 ? PROCESSOR_DEFAULT64 : PROCESSOR_DEFAULT);\n+\n+      tune_index = -1;\n+      for (i = 0; i < ARRAY_SIZE (processor_target_table); i++)\n+\tif (processor_target_table[i].processor == tune_proc)\n+\t  {\n+\t    rs6000_tune_index = tune_index = i;\n+\t    break;\n+\t  }\n     }\n \n-  rs6000_cpu = ((tune_index >= 0)\n-\t\t? processor_target_table[tune_index].processor\n-\t\t: (TARGET_POWERPC64\n-\t\t   ? PROCESSOR_DEFAULT64\n-\t\t   : PROCESSOR_DEFAULT));\n+  gcc_assert (tune_index >= 0);\n+  rs6000_cpu = processor_target_table[tune_index].processor;\n \n   if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n       || rs6000_cpu == PROCESSOR_PPCE500MC || rs6000_cpu == PROCESSOR_PPCE500MC64)\n@@ -4023,11 +4036,6 @@ rs6000_file_start (void)\n \n   default_file_start ();\n \n-#ifdef TARGET_BI_ARCH\n-  if ((TARGET_DEFAULT ^ target_flags) & MASK_64BIT)\n-    rs6000_default_cpu = 0;\n-#endif\n-\n   if (flag_verbose_asm)\n     {\n       sprintf (buffer, \"\\n%s rs6000/powerpc options:\", ASM_COMMENT_START);"}]}