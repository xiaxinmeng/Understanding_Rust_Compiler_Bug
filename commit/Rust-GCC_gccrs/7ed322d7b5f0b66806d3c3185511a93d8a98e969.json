{"sha": "7ed322d7b5f0b66806d3c3185511a93d8a98e969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkMzIyZDdiNWYwYjY2ODA2ZDNjMzE4NTUxMWE5M2Q4YTk4ZTk2OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-09-30T19:46:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-09-30T19:46:06Z"}, "message": "re PR c/24010 (Duplicate C99 dot initializer warning missing)\n\n\tPR c/24010\n\t* c.opt (Woverride-init): New.\n\t* c-opts.c (c_common_post_options): Default warn_override_init to\n\textra_warnings.\n\t* c-typeck.c (add_pending_init, output_init_element): Warn for\n\toverriding initializers without side effects.\n\t* doc/invoke.texi (-Woverride-init): Document.\n\t(-Wextra): Update.\n\ntestsuite:\n\t* gcc.dg/Woverride-init-1.c, gcc.dg/Woverride-init-2.c,\n\tgcc.dg/Woverride-init-3.c: New tests.\n\nFrom-SVN: r117334", "tree": {"sha": "e7f9e9ef9055bb20c3907865efd402c942dc4871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f9e9ef9055bb20c3907865efd402c942dc4871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ed322d7b5f0b66806d3c3185511a93d8a98e969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed322d7b5f0b66806d3c3185511a93d8a98e969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed322d7b5f0b66806d3c3185511a93d8a98e969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed322d7b5f0b66806d3c3185511a93d8a98e969/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19add4f7e416da5706eb0e0a0cbbd980a74f4b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19add4f7e416da5706eb0e0a0cbbd980a74f4b86"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "e7fc16ffab969ee982fc0f7f70ac2ac24d7062f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -1,3 +1,14 @@\n+2006-09-30  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/24010\n+\t* c.opt (Woverride-init): New.\n+\t* c-opts.c (c_common_post_options): Default warn_override_init to\n+\textra_warnings.\n+\t* c-typeck.c (add_pending_init, output_init_element): Warn for\n+\toverriding initializers without side effects.\n+\t* doc/invoke.texi (-Woverride-init): Document.\n+\t(-Wextra): Update.\n+\n 2006-09-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR rtl-optimization/28096"}, {"sha": "b74ce773088767fbc16df37a8ffda3981bc96d87", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -1016,12 +1016,14 @@ c_common_post_options (const char **pfilename)\n   if (flag_objc_exceptions && !flag_objc_sjlj_exceptions)\n     flag_exceptions = 1;\n \n-  /* -Wextra implies -Wsign-compare and -Wmissing-field-initializers,\n-     but not if explicitly overridden.  */\n+  /* -Wextra implies -Wsign-compare, -Wmissing-field-initializers and\n+     -Woverride-init, but not if explicitly overridden.  */\n   if (warn_sign_compare == -1)\n     warn_sign_compare = extra_warnings;\n   if (warn_missing_field_initializers == -1)\n     warn_missing_field_initializers = extra_warnings;\n+  if (warn_override_init == -1)\n+    warn_override_init = extra_warnings;\n \n   /* -Wpointer_sign is disabled by default, but it is enabled if any\n      of -Wall or -pedantic are given.  */"}, {"sha": "89bfed1db64bf1ba0507e85321a206c80b4efc13", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -5737,6 +5737,8 @@ add_pending_init (tree purpose, tree value)\n \t    {\n \t      if (TREE_SIDE_EFFECTS (p->value))\n \t\twarning_init (\"initialized field with side-effects overwritten\");\n+\t      else if (warn_override_init)\n+\t\twarning_init (\"initialized field overwritten\");\n \t      p->value = value;\n \t      return;\n \t    }\n@@ -5758,6 +5760,8 @@ add_pending_init (tree purpose, tree value)\n \t    {\n \t      if (TREE_SIDE_EFFECTS (p->value))\n \t\twarning_init (\"initialized field with side-effects overwritten\");\n+\t      else if (warn_override_init)\n+\t\twarning_init (\"initialized field overwritten\");\n \t      p->value = value;\n \t      return;\n \t    }\n@@ -6230,6 +6234,8 @@ output_init_element (tree value, bool strict_string, tree type, tree field,\n       if (TREE_SIDE_EFFECTS (VEC_last (constructor_elt,\n \t\t\t\t       constructor_elements)->value))\n \twarning_init (\"initialized field with side-effects overwritten\");\n+      else if (warn_override_init)\n+\twarning_init (\"initialized field overwritten\");\n \n       /* We can have just one union field set.  */\n       constructor_elements = 0;"}, {"sha": "0aa0a3ad30c9df9a44b23d6d0da0a41fc24ae5c0", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -319,6 +319,10 @@ Woverloaded-virtual\n C++ ObjC++ Var(warn_overloaded_virtual)\n Warn about overloaded virtual function names\n \n+Woverride-init\n+C ObjC Var(warn_override_init) Init(-1)\n+Warn about overriding initializers without side effects\n+\n Wparentheses\n C ObjC C++ ObjC++ Var(warn_parentheses)\n Warn about possibly missing parentheses"}, {"sha": "6d7bc1e1eeca3bddd14f4d408a34118d1eef0cd2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -2875,6 +2875,12 @@ An aggregate has an initializer which does not initialize all members.\n This warning can be independently controlled by\n @option{-Wmissing-field-initializers}.\n \n+@item\n+An initialized field without side effects is overridden when using\n+designated initializers (@pxref{Designated Inits, , Designated\n+Initializers}).  This warning can be independently controlled by\n+@option{-Woverride-init}.\n+\n @item\n A function parameter is declared without a type specifier in K&R-style\n functions:\n@@ -3302,6 +3308,18 @@ attribute.\n @opindex Wno-overflow\n Do not warn about compile-time overflow in constant expressions.\n \n+@item -Woverride-init\n+@opindex Woverride-init\n+@opindex W\n+@opindex Wextra\n+Warn if an initialized field without side effects is overridden when\n+using designated initializers (@pxref{Designated Inits, , Designated\n+Initializers}).\n+\n+This warning is included in @option{-Wextra}.  To get other\n+@option{-Wextra} warnings without this one, use @samp{-Wextra\n+-Wno-override-init}.\n+\n @item -Wpacked\n @opindex Wpacked\n Warn if a structure is given the packed attribute, but the packed"}, {"sha": "51599a7c544c316e11fbb901f74a1c01d26bb756", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -1,3 +1,9 @@\n+2006-09-30  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/24010\n+\t* gcc.dg/Woverride-init-1.c, gcc.dg/Woverride-init-2.c,\n+\tgcc.dg/Woverride-init-3.c: New tests.\n+\n 2006-09-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/execute/20060930-1.c: New test."}, {"sha": "29eca3095cdc696ac107a204b97ec59402a685f5", "filename": "gcc/testsuite/gcc.dg/Woverride-init-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-1.c?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -0,0 +1,28 @@\n+/* Test for warnings for overriding designated initializers:\n+   -Woverride-init.  Bug 24010.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Woverride-init\" } */\n+\n+struct s { int a; int b; int c; };\n+union u { char a; long long b; };\n+\n+struct s s0 = {\n+  .a = 1,\n+  .b = 2,\n+  .a = 3, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  4, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  5\n+};\n+\n+union u u0 = {\n+  .a = 1,\n+  .b = 2, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  .a = 3 }; /* { dg-warning \"initialized field overwritten|near init\" } */\n+\n+int a[5] = {\n+  [0] = 1,\n+  [1] = 2,\n+  [0] = 3, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  [2] = 4\n+};"}, {"sha": "c5490b5ad3500cc5bccd2b27cb277edb2f70750e", "filename": "gcc/testsuite/gcc.dg/Woverride-init-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-2.c?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -0,0 +1,28 @@\n+/* Test for warnings for overriding designated initializers:\n+   -Wextra.  Bug 24010.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+struct s { int a; int b; int c; };\n+union u { char a; long long b; };\n+\n+struct s s0 = {\n+  .a = 1,\n+  .b = 2,\n+  .a = 3, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  4, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  5\n+};\n+\n+union u u0 = {\n+  .a = 1,\n+  .b = 2, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  .a = 3 }; /* { dg-warning \"initialized field overwritten|near init\" } */\n+\n+int a[5] = {\n+  [0] = 1,\n+  [1] = 2,\n+  [0] = 3, /* { dg-warning \"initialized field overwritten|near init\" } */\n+  [2] = 4\n+};"}, {"sha": "3fec7385d047a41d410a1fdcc8fce6c85d59179f", "filename": "gcc/testsuite/gcc.dg/Woverride-init-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed322d7b5f0b66806d3c3185511a93d8a98e969/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverride-init-3.c?ref=7ed322d7b5f0b66806d3c3185511a93d8a98e969", "patch": "@@ -0,0 +1,29 @@\n+/* Test for warnings for overriding designated initializers: not\n+   warned for with -Wextra -Wno-override-init.  Bug 24010.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra -Wno-override-init\" } */\n+\n+struct s { int a; int b; int c; };\n+union u { char a; long long b; };\n+\n+struct s s0 = {\n+  .a = 1,\n+  .b = 2,\n+  .a = 3,\n+  4,\n+  5\n+};\n+\n+union u u0 = {\n+  .a = 1,\n+  .b = 2,\n+  .a = 3\n+};\n+\n+int a[5] = {\n+  [0] = 1,\n+  [1] = 2,\n+  [0] = 3,\n+  [2] = 4\n+};"}]}