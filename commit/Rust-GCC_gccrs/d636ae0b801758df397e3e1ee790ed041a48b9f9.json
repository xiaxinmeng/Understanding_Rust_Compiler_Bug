{"sha": "d636ae0b801758df397e3e1ee790ed041a48b9f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNmFlMGI4MDE3NThkZjM5N2UzZTFlZTc5MGVkMDQxYTQ4YjlmOQ==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@aracnet.com", "date": "1998-09-02T23:43:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-02T23:43:53Z"}, "message": "{objc.exp,objc-torture.exp}: New files for objc testing harness.\n\n        * lib/{objc.exp,objc-torture.exp}: New files for objc testing harness.\n        * objc: ObjC testsuite.\n\nFrom-SVN: r22198", "tree": {"sha": "6cfdb9bd065eef7534da1b9908a26bfd59f8a188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfdb9bd065eef7534da1b9908a26bfd59f8a188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d636ae0b801758df397e3e1ee790ed041a48b9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636ae0b801758df397e3e1ee790ed041a48b9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d636ae0b801758df397e3e1ee790ed041a48b9f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636ae0b801758df397e3e1ee790ed041a48b9f9/comments", "author": null, "committer": null, "parents": [{"sha": "7b5070d680bfe6029b9d7f453c995106ef39676d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5070d680bfe6029b9d7f453c995106ef39676d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5070d680bfe6029b9d7f453c995106ef39676d"}], "stats": {"total": 1137, "additions": 1137, "deletions": 0}, "files": [{"sha": "d0ef53612f9881c542e6a321684347f826d3facf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -1,3 +1,8 @@\n+Thu Sep  3 00:40:32 1998  Ovidiu Predescu  <ovidiu@aracnet.com>\n+\n+\t* lib/{objc.exp,objc-torture.exp}: New files for objc testing harness.\n+\t* objc: ObjC testsuite.\n+\n Mon Aug 31 15:19:32 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* lib/c-torture.exp: Add support for"}, {"sha": "517d6ca5df455a86d899983c722f44b6628ba50c", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,316 @@\n+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-dejagnu.prep.ai.mit.edu\n+\n+# This file was written by Rob Savoye. (rob@cygnus.com)\n+\n+# The default option list can be overridden by\n+# TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n+\n+if ![info exists TORTURE_OPTIONS] {\n+    # FIXME: We should test -g at least once.\n+    set TORTURE_OPTIONS [list { -O }]\n+}\n+\n+\n+# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n+# one for testcases without loops.\n+\n+set torture_with_loops $TORTURE_OPTIONS\n+set torture_without_loops \"\"\n+foreach option $TORTURE_OPTIONS {\n+    if ![string match \"*loop*\" $option] {\n+\tlappend torture_without_loops $option\n+    }\n+}\n+\n+#\n+# objc-torture-compile -- runs the Tege C-torture test\n+#\n+# SRC is the full pathname of the testcase.\n+# OPTION is the specific compiler flag we're testing (eg: -O2).\n+#\n+proc objc-torture-compile { src option } {\n+    global output\n+    global srcdir tmpdir\n+    global host_triplet\n+\n+    set output \"$tmpdir/[file tail [file rootname $src]].o\"\n+\n+    regsub \"^$srcdir/?\" $src \"\" testcase\n+    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] {\n+\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n+    }\n+\n+    verbose \"Testing $testcase, $option\" 1\n+\n+    # Run the compiler and analyze the results.\n+    set options \"\"\n+    lappend options \"additional_flags=-w $option\"\n+\n+    set comp_output [objc_target_compile \"$src\" \"$output\" object $options];\n+    \n+    # Set a few common compiler messages.\n+    set fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n+ \n+    if [string match \"$fatal_signal 6\" $comp_output] then {\n+\tobjc_fail $testcase \"Got Signal 6, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    if [string match \"$fatal_signal 11\" $comp_output] then {\n+\tobjc_fail $testcase \"Got Signal 11, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    # We shouldn't get these because of -w, but just in case.\n+    if [string match \"*77*:*warning:*\" $comp_output] then {\n+\twarning \"$testcase: (with warnings) $option\"\n+\tsend_log \"$comp_output\\n\"\n+\tunresolved \"$testcase, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    set comp_output [prune_warnings $comp_output]\n+\n+    set unsupported_message [objc_check_unsupported_p $comp_output]\n+    if { $unsupported_message != \"\" } {\n+\tunsupported \"$testcase: $unsupported_message\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    # remove any leftover LF/CR to make sure any output is legit\n+    regsub -all -- \"\\[\\r\\n\\]*\" $comp_output \"\" comp_output\n+    # If any message remains, we fail.\n+    if ![string match \"\" $comp_output] then {\n+\tobjc_fail $testcase $option\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    objc_pass $testcase $option\n+    remote_file build delete $output\n+}\n+\n+#\n+# objc-torture-execute -- utility to compile and execute a testcase\n+#\n+# SRC is the full pathname of the testcase.\n+#\n+# If the testcase has an associated .cexp file, we source that to run the\n+# test instead.  We use .cexp instead of .exp so that the testcase is still\n+# controlled by the main .exp driver (this is useful when one wants to only\n+# run the compile.exp tests for example - one need only pass compile.exp to\n+# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+#\n+proc objc-torture-execute { src } {\n+    global tmpdir tool srcdir output \n+\n+    # Check for alternate driver.\n+    if [file exists [file rootname $src].cexp] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+\tset done_p 0\n+\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tif { $done_p } {\n+\t    return\n+\t}\n+    }\n+   \n+    # Look for a loop within the source code - if we don't find one,\n+    # don't pass -funroll[-all]-loops.\n+    global torture_with_loops torture_without_loops\n+    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+\tset option_list $torture_with_loops\n+    } else {\n+\tset option_list $torture_without_loops\n+    }\n+\n+    set executable $tmpdir/[file tail [file rootname $src].x]\n+\n+    regsub \"^$srcdir/?\" $src \"\" testcase\n+    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] {\n+\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n+    }\n+\n+    foreach option $option_list {\n+\t# torture_{compile,execute}_xfail are set by the .cexp script\n+\t# (if present)\n+\tif [info exists torture_compile_xfail] {\n+\t    setup_xfail $torture_compile_xfail\n+\t}\n+\tremote_file build delete $executable\n+\tverbose \"Testing $testcase, $option\" 1\n+\n+\tset options \"\"\n+\tlappend options \"additional_flags=-w $option\"\n+\tset comp_output [objc_target_compile \"$src\" \"$executable\" executable $options];\n+\n+\t# Set a few common compiler messages.\n+\tset fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n+\t\n+\tif [string match \"$fatal_signal 6\" $comp_output] then {\n+\t    objc_fail $testcase \"Got Signal 6, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\tif [string match \"$fatal_signal 11\" $comp_output] then {\n+\t    objc_fail $testcase \"Got Signal 11, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\t# We shouldn't get these because of -w, but just in case.\n+\tif [string match \"*77*:*warning:*\" $comp_output] then {\n+\t    warning \"$testcase: (with warnings) $option\"\n+\t    send_log \"$comp_output\\n\"\n+\t    unresolved \"$testcase, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\tset comp_output [prune_warnings $comp_output]\n+\t\n+\tset unsupported_message [objc_check_unsupported_p $comp_output]\n+\n+\tif { $unsupported_message != \"\" } {\n+\t    unsupported \"$testcase: $unsupported_message\"\n+\t    continue\n+\t} elseif ![file exists $executable] {\n+\t    if ![is3way] {\n+\t\tfail \"$testcase compilation, $option\"\n+\t\tuntested \"$testcase execution, $option\"\n+\t\tcontinue\n+\t    } else {\n+\t\t# FIXME: since we can't test for the existance of a remote\n+\t\t# file without short of doing an remote file list, we assume\n+\t\t# that since we got no output, it must have compiled.\n+\t\tpass \"$testcase compilation, $option\"\t\t\n+\t    }\n+\t} else {\n+\t    pass \"$testcase compilation, $option\"\n+\t}\n+\n+\t# See if this source file uses \"long long\" types, if it does, and\n+\t# no_long_long is set, skip execution of the test.\n+\tif [target_info exists no_long_long] then {\n+\t    if [expr [search_for $src \"integer\\*8\"]] then {\n+\t\tuntested \"$testcase execution, $option\"\n+\t\tcontinue\n+\t    }\n+\t}\n+\n+\tif [info exists torture_execute_xfail] {\n+\t    setup_xfail $torture_execute_xfail\n+\t}\n+\t\n+\tset result [objc_load \"$executable\" \"\" \"\"]\n+\tset status [lindex $result 0];\n+\tset output [lindex $result 1];\n+        if { $status == \"pass\" } {\n+\t    remote_file build delete $executable\n+        }\n+\t$status \"$testcase execution, $option\"\n+    }\n+}\n+\n+#\n+# search_for -- looks for a string match in a file\n+#\n+proc search_for { file pattern } {\n+    set fd [open $file r]\n+    while { [gets $fd cur_line]>=0 } {\n+\tset lower [string tolower $cur_line]\n+\tif [regexp \"$pattern\" $lower] then {\n+\t    close $fd\n+\t    return 1\n+\t}\n+    }\n+    close $fd\n+    return 0\n+}\n+\n+#\n+# objc-torture -- the objc-torture testcase source file processor\n+#\n+# This runs compilation only tests (no execute tests).\n+# SRC is the full pathname of the testcase, or just a file name in which case\n+# we prepend $srcdir/$subdir.\n+#\n+# If the testcase has an associated .cexp file, we source that to run the\n+# test instead.  We use .cexp instead of .exp so that the testcase is still\n+# controlled by the main .exp driver (this is useful when one wants to only\n+# run the compile.exp tests for example - one need only pass compile.exp to\n+# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+#\n+proc objc-torture { args } {\n+    global srcdir subdir\n+\n+    set src [lindex $args 0];\n+    if { [llength $args] > 1 } {\n+\tset options [lindex $args 1];\n+    } else {\n+\tset options \"\"\n+    }\n+\n+    # Prepend $srdir/$subdir if missing.\n+    if ![string match \"*/*\" $src] {\n+\tset src \"$srcdir/$subdir/$src\"\n+    }\n+\n+    # Check for alternate driver.\n+    if [file exists [file rootname $src].cexp] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+\tset done_p 0\n+\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tif { $done_p } {\n+\t    return\n+\t}\n+    }\n+   \n+    # Look for a loop within the source code - if we don't find one,\n+    # don't pass -funroll[-all]-loops.\n+    global torture_with_loops torture_without_loops\n+    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+\tset option_list $torture_with_loops\n+    } else {\n+\tset option_list $torture_without_loops\n+    }\n+\n+    # loop through all the options\n+    foreach option $option_list {\n+\t# torture_compile_xfail is set by the .cexp script (if present)\n+\tif [info exists torture_compile_xfail] {\n+\t    setup_xfail $torture_compile_xfail\n+\t}\n+\n+\tobjc-torture-compile $src \"$option $options\"\n+    }\n+}"}, {"sha": "c4f325f0d836762b71007d76e63ee2ae33755c57", "filename": "gcc/testsuite/lib/objc.exp", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,263 @@\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# This file was written by Rob Savoye (rob@cygnus.com)\n+# Currently maintained by Doug Evans (dje@cygnus.com)\n+\n+# This file is loaded by the tool init file (eg: unix.exp).  It provides\n+# default definitions for objc_start, etc. and other supporting cast members.\n+\n+# These globals are used by objc_start if no compiler arguments are provided.\n+# They are also used by the various testsuites to define the environment:\n+# where to find stdio.h, libc.a, etc.\n+\n+#\n+# OBJC_UNDER_TEST is the compiler under test.\n+#\n+\n+#\n+# default_objc_version -- extract and print the version number of the compiler\n+#\n+\n+proc default_objc_version { } {\n+    global OBJC_UNDER_TEST\n+\n+    objc_init;\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $OBJC_UNDER_TEST 0]\n+\n+    if ![is_remote host] {\n+\tset compiler_name [which $compiler];\n+    } else {\n+\tset compiler_name $compiler;\n+    }\n+\n+    # verify that the compiler exists\n+    if { $compiler_name != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0];\n+\tset output [lindex $tmp 1];\n+\tregexp \"version.*$\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    clone_output \"$compiler_name $version\\n\"\n+\t} else {\n+\t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+#\n+# Call objc_version. We do it this way so we can override it if needed.\n+#\n+proc objc_version { } {\n+    default_objc_version;\n+}\n+\n+#\n+# objc_init -- called at the start of each .exp script.\n+#\n+# There currently isn't much to do, but always using it allows us to\n+# make some enhancements without having to go back and rewrite the scripts.\n+#\n+\n+set objc_initialized 0\n+\n+proc objc_init { args } {\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global objc_initialized\n+    global OBJC_UNDER_TEST\n+    global TOOL_EXECUTABLE\n+\n+    if { $objc_initialized == 1 } { return; }\n+\n+    if ![info exists OBJC_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set OBJC_UNDER_TEST $TOOL_EXECUTABLE;\n+\t} else {\n+\t    set OBJC_UNDER_TEST [find_gcc]\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] then {\n+\tset tmpdir /tmp\n+    }\n+    if { [target_info needs_status_wrapper]!=\"\" && ![info exists gluefile] } {\n+\tset gluefile ${tmpdir}/testglue.o;\n+\tset result [build_wrapper $gluefile];\n+\tif { $result != \"\" } {\n+\t    set gluefile [lindex $result 0];\n+\t    set wrap_flags [lindex $result 1];\n+\t} else {\n+\t    unset gluefile\n+\t}\n+    }\n+}\n+\n+proc objc_target_compile { source dest type options } {\n+    global tmpdir;\n+    global gluefile wrap_flags;\n+    global OBJC_UNDER_TEST\n+    global TOOL_OPTIONS\n+\n+    lappend options \"libs=-lobjc\"\n+    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=$wrap_flags\"\n+    }\n+\n+    if [target_info exists objc,stack_size] {\n+\tlappend options \"additional_flags=-DSTACK_SIZE=[target_info objc,stack_size]\"\n+    }\n+    if [target_info exists objc,no_trampolines] {\n+\tlappend options \"additional_flags=-DNO_TRAMPOLINES\"\n+    }\n+    if [target_info exists objc,no_label_values] {\n+\tlappend options \"additional_flags=-DNO_LABEL_VALUES\"\n+    }\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend options \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+    if [target_info exists objc,no_varargs] {\n+\tlappend options \"additional_flags=-DNO_VARARGS\"\n+    }\n+    lappend options \"compiler=$OBJC_UNDER_TEST\"\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+#\n+# objc_pass -- utility to record a testcase passed\n+#\n+\n+proc objc_pass { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tpass \"$testcase\"\n+    } else {\n+\tpass \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# objc_fail -- utility to record a testcase failed\n+#\n+\n+proc objc_fail { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tfail \"$testcase\"\n+    } else {\n+\tfail \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# objc_finish -- called at the end of every .exp script that calls objc_init\n+#\n+# The purpose of this proc is to hide all quirks of the testing environment\n+# from the testsuites.  It also exists to undo anything that objc_init did\n+# (that needs undoing).\n+#\n+\n+proc objc_finish { } {\n+    # The testing harness apparently requires this.\n+    global errorInfo;\n+\n+    if [info exists errorInfo] then {\n+\tunset errorInfo\n+    }\n+\n+    # Might as well reset these (keeps our caller from wondering whether\n+    # s/he has to or not).\n+    global prms_id bug_id\n+    set prms_id 0\n+    set bug_id 0\n+}\n+\n+proc objc_exit { } {\n+    global gluefile;\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile;\n+\tunset gluefile;\n+    }\n+}\n+    \n+# If this is an older version of dejagnu (without runtest_file_p),\n+# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n+# This can be deleted after next dejagnu release.\n+\n+if { [info procs runtest_file_p] == \"\" } then {\n+    proc runtest_file_p { runtests testcase } {\n+\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n+\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n+\t\treturn 1\n+\t    } else {\n+\t\treturn 0\n+\t    }\n+\t}\n+\treturn 1\n+    }\n+}\n+\n+# Provide a definition of this if missing (delete after next dejagnu release).\n+\n+if { [info procs prune_warnings] == \"\" } then {\n+    proc prune_warnings { text } {\n+\treturn $text\n+    }\n+}\n+\n+# Utility used by mike-gcc.exp and c-torture.exp.\n+# Check the compiler(/assembler/linker) output for text indicating that\n+# the testcase should be marked as \"unsupported\".\n+#\n+# When dealing with a large number of tests, it's difficult to weed out the\n+# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n+# of memory).  There are various ways to deal with this.  Here's one.\n+# Fortunately, all of the cases where this is likely to happen will be using\n+# gld so we can tell what the error text will look like.\n+\n+proc ${tool}_check_unsupported_p { output } {\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n+\treturn \"memory full\"\n+    }\n+    return \"\"\n+}\n+\n+# Prune messages from objc that aren't useful.\n+\n+proc prune_objc_output { text } {\n+    #send_user \"Before:$text\\n\"\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n+\n+    # It would be nice to avoid passing anything to objc that would cause it to\n+    # issue these messages (since ignoring them seems like a hack on our part),\n+    # but that's too difficult in the general case.  For example, sometimes\n+    # you need to use -B to point objc at crt0.o, but there are some targets\n+    # that don't have crt0.o.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n+\n+    #send_user \"After:$text\\n\"\n+\n+    return $text\n+}\n+"}, {"sha": "9a533a39b52877701bb3278085d4be070ccf0d52", "filename": "gcc/testsuite/objc/execute/bf-1.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-1.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,24 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a;\n+  struct {\n+    int i:2;\n+    int j:3;\n+    int k:12;\n+  } flags;\n+  char c;\n+//  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "77076da51ed9a28f48c208a4f8622f1032fad87f", "filename": "gcc/testsuite/objc/execute/bf-10.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-10.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,22 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:6;\n+  char c;\n+  int k:12;\n+  char d;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "40d9b533a498a3d2c4c8fb80c7f0e6626798ed8a", "filename": "gcc/testsuite/objc/execute/bf-11.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-11.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,23 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:6;\n+  short s;\n+  int k:12;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "9e0a989ee75263df5d475c59ad817669c560c832", "filename": "gcc/testsuite/objc/execute/bf-12.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-12.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,23 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:6;\n+  int s;\n+  int k:12;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "f8349338b5385ad491f29aab5f0d15d338da7f5d", "filename": "gcc/testsuite/objc/execute/bf-13.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-13.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,25 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  struct {\n+    int i:2;\n+    int j:6;\n+    char s;\n+    int k:12;\n+  } flags;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "0ceedc08dd844f5ae61a847a041f40555303e95e", "filename": "gcc/testsuite/objc/execute/bf-14.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-14.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,25 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  struct {\n+    int i:2;\n+    int j:6;\n+    short s;\n+    int k:12;\n+  } flags;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "e6e7b30607d80d367ae94f4e112de04d1779bf7c", "filename": "gcc/testsuite/objc/execute/bf-15.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-15.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,25 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a;\n+  struct {\n+    int i:2;\n+    int j:6;\n+    int s;\n+    int k:12;\n+  } flags;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "fb8b0c38f516a9f3a0ae5484dec84d1279789470", "filename": "gcc/testsuite/objc/execute/bf-16.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-16.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,26 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+struct A {\n+  int i;\n+  float f;\n+  int a:3;\n+  int b:2;\n+};\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  int i;\n+  float f[3];\n+  struct A a, b;\n+  char c;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "4c3b854962c9b82189ab73403fdc665473bbbc82", "filename": "gcc/testsuite/objc/execute/bf-17.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-17.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,25 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+struct A {\n+  int i;\n+  float f;\n+  int a:3;\n+  int b:2;\n+};\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  int i;\n+  float f[3];\n+  struct A a;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "36a7ea6c61bcfeb5ededcaa03fcca9c5a9a4fe0b", "filename": "gcc/testsuite/objc/execute/bf-18.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-18.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,17 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  int i;\n+  char c[1];\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "21775e7c77e90d64404363caed88a1b94ec94172", "filename": "gcc/testsuite/objc/execute/bf-19.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-19.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,17 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  unsigned int i;\n+  MyObject *object;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "eac0931549bb4038af686f293de14bdf67d66a19", "filename": "gcc/testsuite/objc/execute/bf-2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-2.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,24 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  struct {\n+    int i:2;\n+    int j:3;\n+    int k:12;\n+  } flags;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "04cf0836faac975c6f3fd99a9d53e2eaa8f5bb11", "filename": "gcc/testsuite/objc/execute/bf-3.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-3.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,24 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a;\n+  struct {\n+    int i:2;\n+    int j:6;\n+    int k:12;\n+  } flags;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "ae8017c688e6398d3b77f0df998a9655d575f184", "filename": "gcc/testsuite/objc/execute/bf-4.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-4.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,24 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  struct {\n+    int i:2;\n+    int j:6;\n+    int k:12;\n+  } flags;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "e61d71f9ced743f11b3e8ef1d49f0c4d68f354f6", "filename": "gcc/testsuite/objc/execute/bf-5.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-5.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,22 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a;\n+  int i:2;\n+  int j:3;\n+  int k:12;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "38222d3f6762809f222647abf37e66a0e5a908da", "filename": "gcc/testsuite/objc/execute/bf-6.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-6.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,22 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:3;\n+  int k:12;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "80ee6cef7632f095c4f86dd343bb88f0b48f9a1b", "filename": "gcc/testsuite/objc/execute/bf-7.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-7.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,22 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a;\n+  int i:2;\n+  int j:6;\n+  int k:12;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "cc472f961309a54ca74ae8961dadeca3746a8fa5", "filename": "gcc/testsuite/objc/execute/bf-8.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-8.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,22 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:6;\n+  int k:12;\n+  char c;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "0f17727d6df888de7e41cd7f2305bc02b2837d06", "filename": "gcc/testsuite/objc/execute/bf-9.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-9.m?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,23 @@\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+  float f;\n+  char a[3];\n+  int i:2;\n+  int j:3;\n+  char c;\n+  int k:12;\n+  char d;\n+  void *pointer;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+#include \"bf-common.h\"\n+"}, {"sha": "123a45413d050df9dc055dee5b7ffc8e1e03376f", "filename": "gcc/testsuite/objc/execute/bf-common.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,76 @@\n+#include <objc/encoding.h>\n+\n+\n+void print_ivars (Class class)\n+{\n+  struct objc_ivar_list* ivars = class->ivars;\n+  int i;\n+\n+  for (i = 0; i < ivars->ivar_count; i++) {\n+    struct objc_ivar *ivar = &(ivars->ivar_list[i]);\n+    printf (\"ivar '%s', type '%s', offset %d\\n\",\n+\t    ivar->ivar_name, ivar->ivar_type, ivar->ivar_offset);\n+  }\n+}\n+\n+void compare_structures (Class class, const char* type)\n+{\n+  struct objc_struct_layout layout;\n+  struct objc_ivar_list* ivars = class->ivars;\n+  int i = 0;\n+  int position;\n+\n+  objc_layout_structure (type, &layout);\n+\n+  while (objc_layout_structure_next_member (&layout))\n+    {\n+      struct objc_ivar *ivar;\n+      const char *ivar_type;\n+\n+      if (i > ivars->ivar_count)\n+        {\n+          printf (\"too many ivars in type %s, layout = %s\\n\",\n+                  type, layout.type);\n+          exit (1);\n+        }\n+\n+      ivar = &(ivars->ivar_list[i]);\n+      objc_layout_structure_get_info (&layout, &position, NULL, &ivar_type);\n+      printf (\"real ivar '%s' offset %d\\n\",\n+              ivar->ivar_name, ivar->ivar_offset);\n+      printf (\"computed type '%s' offset %d\\n\", ivar_type, position);\n+      if (position != ivar->ivar_offset)\n+        {\n+          printf (\"offset %d and computed position %d don't match on ivar '%s'\"\n+                  \" (i = %d)\\n\",\n+                  ivar->ivar_offset, position, ivar->ivar_name, i);\n+          exit (1);\n+        }\n+      i++;\n+    }\n+  \n+  printf (\"%d ivars checked\\n\", i);\n+}\n+\n+int main ()\n+{\n+  struct class_vars\n+    {\n+      @defs (MyObject);\n+    };\n+  int size1, size2;\n+  Class class = [MyObject class];\n+\n+  printf (\"type = %s\\n\", @encode (struct class_vars));\n+  print_ivars (class);\n+\n+  compare_structures (class, @encode(struct class_vars));\n+  if ((size1 = objc_sizeof_type (@encode(struct class_vars)))\n+      != (size2 = sizeof (struct class_vars)))\n+    {\n+      printf (\"sizes don't match (computed %d, exact %d)\\n\", size1, size2);\n+      abort ();\n+    }\n+  \n+  exit (0);\n+}"}, {"sha": "0f598a3c5f49c6df1f2de8fa29252c87467e20dd", "filename": "gcc/testsuite/objc/execute/execute.exp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636ae0b801758df397e3e1ee790ed041a48b9f9/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp?ref=d636ae0b801758df397e3e1ee790ed041a48b9f9", "patch": "@@ -0,0 +1,42 @@\n+# Copyright (C) 1991, 1992, 1993, 1995, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-gcc@prep.ai.mit.edu\n+\n+# This file was written by Rob Savoye. (rob@cygnus.com)\n+# Modified by Ovidiu Predescu (ovidiu@aracnet.com)\n+\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# load support procs\n+load_lib objc-torture.exp\n+\n+#\n+# main test loop\n+#\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    objc-torture-execute $src\n+}"}]}