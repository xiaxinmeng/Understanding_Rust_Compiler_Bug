{"sha": "038677dd8300fffc2abe8a47fef5cc99d8e594bc", "node_id": "C_kwDOANBUbNoAKDAzODY3N2RkODMwMGZmZmMyYWJlOGE0N2ZlZjVjYzk5ZDhlNTk0YmM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-19T15:53:37Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-19T15:53:37Z"}, "message": "ast: lower: Split rust-lower-base in its own source file", "tree": {"sha": "df4e645fcc9d47e56135f99217c47c1a74556d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df4e645fcc9d47e56135f99217c47c1a74556d09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038677dd8300fffc2abe8a47fef5cc99d8e594bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038677dd8300fffc2abe8a47fef5cc99d8e594bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038677dd8300fffc2abe8a47fef5cc99d8e594bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038677dd8300fffc2abe8a47fef5cc99d8e594bc/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b14291b54fe72407b840631511d1c3bb07df22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b14291b54fe72407b840631511d1c3bb07df22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b14291b54fe72407b840631511d1c3bb07df22e"}], "stats": {"total": 1613, "additions": 1067, "deletions": 546}, "files": [{"sha": "a062694f70613e7b28e77e017c03bdc044c6a3f1", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=038677dd8300fffc2abe8a47fef5cc99d8e594bc", "patch": "@@ -83,6 +83,7 @@ GRS_OBJS = \\\n     rust/rust-attributes.o \\\n     rust/rust-abi.o \\\n     rust/rust-ast-lower.o \\\n+    rust/rust-ast-lower-base.o \\\n     rust/rust-ast-lower-pattern.o \\\n     rust/rust-ast-resolve.o \\\n     rust/rust-ast-resolve-pattern.o \\"}, {"sha": "fa7c700bda03bcd8e978048ecbc8da6a45032a2c", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "added", "additions": 889, "deletions": 0, "changes": 889, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=038677dd8300fffc2abe8a47fef5cc99d8e594bc", "patch": "@@ -0,0 +1,889 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-lower-base.h\"\n+#include \"rust-ast-lower-type.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+void\n+ASTLoweringBase::visit (AST::Token &tok)\n+{}\n+void\n+ASTLoweringBase::visit (AST::DelimTokenTree &delim_tok_tree)\n+{}\n+void\n+ASTLoweringBase::visit (AST::AttrInputMetaItemContainer &input)\n+{}\n+//  void ASTLoweringBase::visit(MetaItem& meta_item) {}\n+//  void vsit(Stmt& stmt) {}\n+//  void ASTLoweringBase::visit(Expr& expr) {}\n+void\n+ASTLoweringBase::visit (AST::IdentifierExpr &ident_expr)\n+{}\n+//  void ASTLoweringBase::visit(Pattern& pattern) {}\n+//  void ASTLoweringBase::visit(Type& type) {}\n+//  void ASTLoweringBase::visit(TypeParamBound& type_param_bound) {}\n+void\n+ASTLoweringBase::visit (AST::Lifetime &lifetime)\n+{}\n+//  void ASTLoweringBase::visit(GenericParam& generic_param) {}\n+void\n+ASTLoweringBase::visit (AST::LifetimeParam &lifetime_param)\n+{}\n+//  void ASTLoweringBase::visit(TraitItem& trait_item) {}\n+//  void ASTLoweringBase::visit(InherentImplItem& inherent_impl_item) {}\n+//  void ASTLoweringBase::visit(TraitImplItem& trait_impl_item) {}\n+\n+// rust-path.h\n+void\n+ASTLoweringBase::visit (AST::PathInExpression &path)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypePathSegment &segment)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypePathSegmentGeneric &segment)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypePathSegmentFunction &segment)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypePath &path)\n+{}\n+void\n+ASTLoweringBase::visit (AST::QualifiedPathInExpression &path)\n+{}\n+void\n+ASTLoweringBase::visit (AST::QualifiedPathInType &path)\n+{}\n+\n+// rust-expr.h\n+void\n+ASTLoweringBase::visit (AST::LiteralExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::AttrInputLiteral &attr_input)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaItemLitExpr &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaItemPathLit &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::BorrowExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::DereferenceExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ErrorPropagationExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::NegationExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ComparisonExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::LazyBooleanExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypeCastExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::AssignmentExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::CompoundAssignmentExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::GroupedExpr &expr)\n+{}\n+//  void ASTLoweringBase::visit(ArrayElems& elems) {}\n+void\n+ASTLoweringBase::visit (AST::ArrayElemsValues &elems)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ArrayElemsCopied &elems)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ArrayExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ArrayIndexExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleIndexExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructExprStruct &expr)\n+{}\n+//  void ASTLoweringBase::visit(StructExprField& field) {}\n+void\n+ASTLoweringBase::visit (AST::StructExprFieldIdentifier &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructExprFieldIdentifierValue &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructExprFieldIndexValue &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructExprStructFields &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructExprStructBase &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::CallExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MethodCallExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::FieldAccessExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ClosureExprInner &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::BlockExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ClosureExprInnerTyped &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ContinueExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::BreakExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeFromToExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeFromExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeToExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeFullExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeFromToInclExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangeToInclExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ReturnExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::UnsafeBlockExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::LoopExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::WhileLoopExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::WhileLetLoopExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ForLoopExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfExprConseqElse &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfExprConseqIf &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfExprConseqIfLet &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfLetExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfLetExprConseqElse &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfLetExprConseqIf &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IfLetExprConseqIfLet &expr)\n+{}\n+//  void ASTLoweringBase::visit(MatchCase& match_case) {}\n+// void ASTLoweringBase:: (AST::MatchCaseBlockExpr &match_case) {}\n+// void ASTLoweringBase:: (AST::MatchCaseExpr &match_case) {}\n+void\n+ASTLoweringBase::visit (AST::MatchExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::AwaitExpr &expr)\n+{}\n+void\n+ASTLoweringBase::visit (AST::AsyncBlockExpr &expr)\n+{}\n+\n+// rust-item.h\n+void\n+ASTLoweringBase::visit (AST::TypeParam &param)\n+{}\n+//  void ASTLoweringBase::visit(WhereClauseItem& item) {}\n+void\n+ASTLoweringBase::visit (AST::LifetimeWhereClauseItem &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypeBoundWhereClauseItem &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Method &method)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Module &module)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ExternCrate &crate)\n+{}\n+//  void ASTLoweringBase::visit(UseTree& use_tree) {}\n+void\n+ASTLoweringBase::visit (AST::UseTreeGlob &use_tree)\n+{}\n+void\n+ASTLoweringBase::visit (AST::UseTreeList &use_tree)\n+{}\n+void\n+ASTLoweringBase::visit (AST::UseTreeRebind &use_tree)\n+{}\n+void\n+ASTLoweringBase::visit (AST::UseDeclaration &use_decl)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Function &function)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TypeAlias &type_alias)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructStruct &struct_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleStruct &tuple_struct)\n+{}\n+void\n+ASTLoweringBase::visit (AST::EnumItem &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::EnumItemTuple &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::EnumItemStruct &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::EnumItemDiscriminant &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Enum &enum_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Union &union_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ConstantItem &const_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StaticItem &static_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitItemFunc &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitItemMethod &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitItemConst &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitItemType &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::Trait &trait)\n+{}\n+void\n+ASTLoweringBase::visit (AST::InherentImpl &impl)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitImpl &impl)\n+{}\n+//  void ASTLoweringBase::visit(ExternalItem& item) {}\n+void\n+ASTLoweringBase::visit (AST::ExternalStaticItem &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ExternalFunctionItem &item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ExternBlock &block)\n+{}\n+\n+// rust-macro.h\n+void\n+ASTLoweringBase::visit (AST::MacroMatchFragment &match)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MacroMatchRepetition &match)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MacroMatcher &matcher)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MacroRulesDefinition &rules_def)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MacroInvocation &macro_invoc)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaItemPath &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaItemSeq &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaWord &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaNameValueStr &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaListPaths &meta_item)\n+{}\n+void\n+ASTLoweringBase::visit (AST::MetaListNameValueStr &meta_item)\n+{}\n+\n+// rust-pattern.h\n+void\n+ASTLoweringBase::visit (AST::LiteralPattern &pattern)\n+{}\n+void\n+ASTLoweringBase::visit (AST::IdentifierPattern &pattern)\n+{}\n+void\n+ASTLoweringBase::visit (AST::WildcardPattern &pattern)\n+{}\n+//  void ASTLoweringBase::visit(RangePatternBound& bound) {}\n+void\n+ASTLoweringBase::visit (AST::RangePatternBoundLiteral &bound)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangePatternBoundPath &bound)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangePatternBoundQualPath &bound)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RangePattern &pattern)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ReferencePattern &pattern)\n+{}\n+//  void ASTLoweringBase::visit(StructPatternField& field) {}\n+void\n+ASTLoweringBase::visit (AST::StructPatternFieldTuplePat &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructPatternFieldIdentPat &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructPatternFieldIdent &field)\n+{}\n+void\n+ASTLoweringBase::visit (AST::StructPattern &pattern)\n+{}\n+//  void ASTLoweringBase::visit(TupleStructItems& tuple_items) {}\n+void\n+ASTLoweringBase::visit (AST::TupleStructItemsNoRange &tuple_items)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleStructItemsRange &tuple_items)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleStructPattern &pattern)\n+{}\n+//  void ASTLoweringBase::visit(TuplePatternItems& tuple_items) {}\n+void\n+ASTLoweringBase::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TuplePatternItemsRanged &tuple_items)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TuplePattern &pattern)\n+{}\n+void\n+ASTLoweringBase::visit (AST::GroupedPattern &pattern)\n+{}\n+void\n+ASTLoweringBase::visit (AST::SlicePattern &pattern)\n+{}\n+\n+// rust-stmt.h\n+void\n+ASTLoweringBase::visit (AST::EmptyStmt &stmt)\n+{}\n+void\n+ASTLoweringBase::visit (AST::LetStmt &stmt)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ExprStmtWithoutBlock &stmt)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ExprStmtWithBlock &stmt)\n+{}\n+\n+// rust-type.h\n+void\n+ASTLoweringBase::visit (AST::TraitBound &bound)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ImplTraitType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitObjectType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ParenthesisedType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ImplTraitTypeOneBound &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TraitObjectTypeOneBound &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::TupleType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::NeverType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::RawPointerType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ReferenceType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::ArrayType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::SliceType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::InferredType &type)\n+{}\n+void\n+ASTLoweringBase::visit (AST::BareFunctionType &type)\n+{}\n+\n+HIR::Lifetime\n+ASTLoweringBase::lower_lifetime (AST::Lifetime &lifetime)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  mappings->insert_node_to_hir (mapping.get_crate_num (), mapping.get_nodeid (),\n+\t\t\t\tmapping.get_hirid ());\n+\n+  return HIR::Lifetime (mapping, lifetime.get_lifetime_type (),\n+\t\t\tlifetime.get_lifetime_name (), lifetime.get_locus ());\n+}\n+\n+HIR::LoopLabel\n+ASTLoweringBase::lower_loop_label (AST::LoopLabel &loop_label)\n+{\n+  HIR::Lifetime life = lower_lifetime (loop_label.get_lifetime ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, loop_label.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  mappings->insert_node_to_hir (mapping.get_crate_num (), mapping.get_nodeid (),\n+\t\t\t\tmapping.get_hirid ());\n+\n+  return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n+}\n+\n+std::vector<std::unique_ptr<HIR::GenericParam> >\n+ASTLoweringBase::lower_generic_params (\n+  std::vector<std::unique_ptr<AST::GenericParam> > &params)\n+{\n+  std::vector<std::unique_ptr<HIR::GenericParam> > lowered;\n+  for (auto &ast_param : params)\n+    {\n+      auto hir_param = ASTLowerGenericParam::translate (ast_param.get ());\n+      lowered.push_back (std::unique_ptr<HIR::GenericParam> (hir_param));\n+    }\n+\n+  return lowered;\n+}\n+\n+HIR::PathExprSegment\n+ASTLoweringBase::lower_path_expr_seg (AST::PathExprSegment &s)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, s.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  return HIR::PathExprSegment (\n+    std::move (mapping),\n+    HIR::PathIdentSegment (s.get_ident_segment ().as_string ()), s.get_locus (),\n+    s.has_generic_args () ? lower_generic_args (s.get_generic_args ())\n+\t\t\t  : HIR::GenericArgs::create_empty ());\n+}\n+\n+HIR::GenericArgsBinding\n+ASTLoweringBase::lower_binding (AST::GenericArgsBinding &binding)\n+{\n+  HIR::Type *lowered_type\n+    = ASTLoweringType::translate (binding.get_type ().get ());\n+  return HIR::GenericArgsBinding (binding.get_identifier (),\n+\t\t\t\t  std::unique_ptr<HIR::Type> (lowered_type),\n+\t\t\t\t  binding.get_locus ());\n+}\n+\n+HIR::GenericArgs\n+ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n+{\n+  std::vector<HIR::GenericArgsBinding> binding_args;\n+  for (auto &binding : args.get_binding_args ())\n+    {\n+      HIR::GenericArgsBinding b = lower_binding (binding);\n+      binding_args.push_back (std::move (b));\n+    }\n+\n+  std::vector<HIR::Lifetime> lifetime_args;\n+  for (auto &lifetime : args.get_lifetime_args ())\n+    {\n+      HIR::Lifetime l = lower_lifetime (lifetime);\n+      lifetime_args.push_back (std::move (l));\n+    }\n+\n+  std::vector<std::unique_ptr<HIR::Type> > type_args;\n+  for (auto &type : args.get_type_args ())\n+    {\n+      HIR::Type *t = ASTLoweringType::translate (type.get ());\n+      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n+    }\n+\n+  return HIR::GenericArgs (std::move (lifetime_args), std::move (type_args),\n+\t\t\t   std::move (binding_args), args.get_locus ());\n+}\n+\n+HIR::SelfParam\n+ASTLoweringBase::lower_self (AST::SelfParam &self)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, self.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  if (self.has_type ())\n+    {\n+      HIR::Type *type = ASTLoweringType::translate (self.get_type ().get ());\n+      return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (type),\n+\t\t\t     self.get_is_mut (), self.get_locus ());\n+    }\n+  else if (!self.get_has_ref ())\n+    {\n+      return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (nullptr),\n+\t\t\t     self.get_is_mut (), self.get_locus ());\n+    }\n+\n+  AST::Lifetime l = self.get_lifetime ();\n+  return HIR::SelfParam (mapping, lower_lifetime (l), self.get_is_mut (),\n+\t\t\t self.get_locus ());\n+}\n+\n+void\n+ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n+{\n+  std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n+\n+  std::string segment_name = segment.get_ident_segment ().as_string ();\n+  bool has_separating_scope_resolution\n+    = segment.get_separating_scope_resolution ();\n+\n+  std::vector<HIR::Lifetime> lifetime_args;\n+  for (auto &lifetime : segment.get_generic_args ().get_lifetime_args ())\n+    {\n+      HIR::Lifetime l = lower_lifetime (lifetime);\n+      lifetime_args.push_back (std::move (l));\n+    }\n+\n+  std::vector<std::unique_ptr<HIR::Type> > type_args;\n+  for (auto &type : segment.get_generic_args ().get_type_args ())\n+    {\n+      HIR::Type *t = ASTLoweringType::translate (type.get ());\n+      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  auto hirid = mappings->get_next_hir_id (crate_num);\n+  Analysis::NodeMapping mapping (crate_num, segment.get_node_id (), hirid,\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated_segment = new HIR::TypePathSegmentGeneric (\n+    std::move (mapping), segment_name, has_separating_scope_resolution,\n+    std::move (lifetime_args), std::move (type_args), std::move (binding_args),\n+    segment.get_locus ());\n+}\n+\n+void\n+ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  auto hirid = mappings->get_next_hir_id (crate_num);\n+  Analysis::NodeMapping qual_mappings (\n+    crate_num, path.get_qualified_path_type ().get_node_id (), hirid,\n+    UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Type *qual_type = ASTLoweringType::translate (\n+    path.get_qualified_path_type ().get_type ().get ());\n+  HIR::TypePath *qual_trait = ASTLowerTypePath::translate (\n+    path.get_qualified_path_type ().get_as_type_path ());\n+\n+  HIR::QualifiedPathType qual_path_type (\n+    qual_mappings, std::unique_ptr<HIR::Type> (qual_type),\n+    std::unique_ptr<HIR::TypePath> (qual_trait),\n+    path.get_qualified_path_type ().get_locus ());\n+\n+  translated_segment = nullptr;\n+  path.get_associated_segment ()->accept_vis (*this);\n+  if (translated_segment == nullptr)\n+    {\n+      rust_fatal_error (path.get_associated_segment ()->get_locus (),\n+\t\t\t\"failed to translate AST TypePathSegment\");\n+      return;\n+    }\n+  std::unique_ptr<HIR::TypePathSegment> associated_segment (translated_segment);\n+\n+  std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n+  for (auto &seg : path.get_segments ())\n+    {\n+      translated_segment = nullptr;\n+      seg->accept_vis (*this);\n+      if (translated_segment == nullptr)\n+\t{\n+\t  rust_fatal_error (seg->get_locus (),\n+\t\t\t    \"failed to translte AST TypePathSegment\");\n+\t}\n+      translated_segments.push_back (\n+\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n+    }\n+\n+  Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::QualifiedPathInType (std::move (mapping),\n+\t\t\t\t\t     std::move (qual_path_type),\n+\t\t\t\t\t     std::move (associated_segment),\n+\t\t\t\t\t     std::move (translated_segments),\n+\t\t\t\t\t     path.get_locus ());\n+  mappings->insert_hir_type (crate_num, hirid, translated);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n+{\n+  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+  HIR::TypeParamBound *translated_bound\n+    = ASTLoweringTypeBounds::translate (&type.get_trait_bound ());\n+  bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (translated_bound));\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n+\t\t\t\t\t type.get_locus (), type.is_dyn ());\n+\n+  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     translated);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::TraitObjectType &type)\n+{\n+  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+\n+  for (auto &bound : type.get_type_param_bounds ())\n+    {\n+      HIR::TypeParamBound *translated_bound\n+\t= ASTLoweringTypeBounds::translate (bound.get ());\n+      bounds.push_back (\n+\tstd::unique_ptr<HIR::TypeParamBound> (translated_bound));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n+\t\t\t\t\t type.get_locus (), type.is_dyn ());\n+\n+  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     translated);\n+}\n+\n+HIR::Type *\n+ASTLoweringBase::lower_type_no_bounds (AST::TypeNoBounds *type)\n+{\n+  return ASTLoweringType::translate (type);\n+}\n+\n+HIR::TypeParamBound *\n+ASTLoweringBase::lower_bound (AST::TypeParamBound *bound)\n+{\n+  return ASTLoweringTypeBounds::translate (bound);\n+}\n+\n+/* Checks whether the name of a field already exists.  Returns true\n+   and produces an error if so.  */\n+bool\n+struct_field_name_exists (std::vector<HIR::StructField> &fields,\n+\t\t\t  HIR::StructField &new_field)\n+{\n+  for (auto &field : fields)\n+    {\n+      if (field.get_field_name ().compare (new_field.get_field_name ()) == 0)\n+\t{\n+\t  RichLocation r (new_field.get_locus ());\n+\t  r.add_range (field.get_locus ());\n+\t  rust_error_at (r, \"duplicate field name %qs\",\n+\t\t\t field.get_field_name ().c_str ());\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n+HIR::FunctionQualifiers\n+ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n+{\n+  Unsafety unsafety\n+    = qualifiers.is_unsafe () ? Unsafety::Unsafe : Unsafety::Normal;\n+  bool has_extern = qualifiers.is_extern ();\n+\n+  ABI abi = ABI::RUST;\n+  if (qualifiers.has_abi ())\n+    {\n+      const std::string &extern_abi = qualifiers.get_extern_abi ();\n+      abi = get_abi_from_string (extern_abi);\n+      if (has_extern && abi == ABI::UNKNOWN)\n+\trust_error_at (qualifiers.get_locus (), \"unknown ABI option\");\n+    }\n+\n+  return HIR::FunctionQualifiers (qualifiers.get_const_status (), unsafety,\n+\t\t\t\t  has_extern, abi);\n+}\n+\n+void\n+ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n+{\n+  for (const auto &attr : item.get_outer_attrs ())\n+    {\n+      const auto &str_path = attr.get_path ().as_string ();\n+      if (!is_known_attribute (str_path))\n+\t{\n+\t  rust_error_at (attr.get_locus (), \"unknown attribute\");\n+\t  continue;\n+\t}\n+\n+      bool is_lang_item = str_path.compare (\"lang\") == 0\n+\t\t\t  && attr.has_attr_input ()\n+\t\t\t  && attr.get_attr_input ().get_attr_input_type ()\n+\t\t\t       == AST::AttrInput::AttrInputType::LITERAL;\n+\n+      if (is_lang_item)\n+\thandle_lang_item_attribute (item, attr);\n+      else if (!attribute_handled_in_another_pass (str_path))\n+\t{\n+\t  rust_error_at (attr.get_locus (), \"unhandled attribute: [%s]\",\n+\t\t\t attr.get_path ().as_string ().c_str ());\n+\t}\n+    }\n+}\n+\n+void\n+ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n+\t\t\t\t\t     const AST::Attribute &attr)\n+{\n+  auto &literal = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n+  const auto &lang_item_type_str = literal.get_literal ().as_string ();\n+  auto lang_item_type = Analysis::RustLangItem::Parse (lang_item_type_str);\n+  if (lang_item_type == Analysis::RustLangItem::ItemType::UNKNOWN)\n+    {\n+      rust_error_at (attr.get_locus (), \"unknown lang item\");\n+      return;\n+    }\n+  mappings->insert_lang_item (lang_item_type,\n+\t\t\t      item.get_mappings ().get_defid ());\n+}\n+\n+bool\n+ASTLoweringBase::is_known_attribute (const std::string &attribute_path) const\n+{\n+  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n+  return !lookup.is_error ();\n+}\n+\n+bool\n+ASTLoweringBase::attribute_handled_in_another_pass (\n+  const std::string &attribute_path) const\n+{\n+  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n+  if (lookup.is_error ())\n+    return false;\n+\n+  if (lookup.handler == Analysis::CompilerPass::UNKNOWN)\n+    return false;\n+\n+  return lookup.handler != Analysis::CompilerPass::HIR_LOWERING;\n+}\n+\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "185f4672499940ab69ba8da5d7f01ab3e617a3a0", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 177, "deletions": 200, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=038677dd8300fffc2abe8a47fef5cc99d8e594bc", "patch": "@@ -40,194 +40,194 @@ class ASTLoweringBase : public AST::ASTVisitor\n   //  virtual void visit(AttrInput& attr_input);\n   //  virtual void visit(TokenTree& token_tree);\n   //  virtual void visit(MacroMatch& macro_match);\n-  virtual void visit (AST::Token &tok) {}\n-  virtual void visit (AST::DelimTokenTree &delim_tok_tree) {}\n-  virtual void visit (AST::AttrInputMetaItemContainer &input) {}\n-  //  virtual void visit(MetaItem& meta_item) {}\n-  //  void vsit(Stmt& stmt) {}\n-  //  virtual void visit(Expr& expr) {}\n-  virtual void visit (AST::IdentifierExpr &ident_expr) {}\n-  //  virtual void visit(Pattern& pattern) {}\n-  //  virtual void visit(Type& type) {}\n-  //  virtual void visit(TypeParamBound& type_param_bound) {}\n-  virtual void visit (AST::Lifetime &lifetime) {}\n-  //  virtual void visit(GenericParam& generic_param) {}\n-  virtual void visit (AST::LifetimeParam &lifetime_param) {}\n-  //  virtual void visit(TraitItem& trait_item) {}\n-  //  virtual void visit(InherentImplItem& inherent_impl_item) {}\n-  //  virtual void visit(TraitImplItem& trait_impl_item) {}\n+  virtual void visit (AST::Token &tok);\n+  virtual void visit (AST::DelimTokenTree &delim_tok_tree);\n+  virtual void visit (AST::AttrInputMetaItemContainer &input);\n+  //  virtual void visit(MetaItem& meta_item);\n+  //  void vsit(Stmt& stmt);\n+  //  virtual void visit(Expr& expr);\n+  virtual void visit (AST::IdentifierExpr &ident_expr);\n+  //  virtual void visit(Pattern& pattern);\n+  //  virtual void visit(Type& type);\n+  //  virtual void visit(TypeParamBound& type_param_bound);\n+  virtual void visit (AST::Lifetime &lifetime);\n+  //  virtual void visit(GenericParam& generic_param);\n+  virtual void visit (AST::LifetimeParam &lifetime_param);\n+  //  virtual void visit(TraitItem& trait_item);\n+  //  virtual void visit(InherentImplItem& inherent_impl_item);\n+  //  virtual void visit(TraitImplItem& trait_impl_item);\n \n   // rust-path.h\n-  virtual void visit (AST::PathInExpression &path) {}\n-  virtual void visit (AST::TypePathSegment &segment) {}\n-  virtual void visit (AST::TypePathSegmentGeneric &segment) {}\n-  virtual void visit (AST::TypePathSegmentFunction &segment) {}\n-  virtual void visit (AST::TypePath &path) {}\n-  virtual void visit (AST::QualifiedPathInExpression &path) {}\n-  virtual void visit (AST::QualifiedPathInType &path) {}\n+  virtual void visit (AST::PathInExpression &path);\n+  virtual void visit (AST::TypePathSegment &segment);\n+  virtual void visit (AST::TypePathSegmentGeneric &segment);\n+  virtual void visit (AST::TypePathSegmentFunction &segment);\n+  virtual void visit (AST::TypePath &path);\n+  virtual void visit (AST::QualifiedPathInExpression &path);\n+  virtual void visit (AST::QualifiedPathInType &path);\n \n   // rust-expr.h\n-  virtual void visit (AST::LiteralExpr &expr) {}\n-  virtual void visit (AST::AttrInputLiteral &attr_input) {}\n-  virtual void visit (AST::MetaItemLitExpr &meta_item) {}\n-  virtual void visit (AST::MetaItemPathLit &meta_item) {}\n-  virtual void visit (AST::BorrowExpr &expr) {}\n-  virtual void visit (AST::DereferenceExpr &expr) {}\n-  virtual void visit (AST::ErrorPropagationExpr &expr) {}\n-  virtual void visit (AST::NegationExpr &expr) {}\n-  virtual void visit (AST::ArithmeticOrLogicalExpr &expr) {}\n-  virtual void visit (AST::ComparisonExpr &expr) {}\n-  virtual void visit (AST::LazyBooleanExpr &expr) {}\n-  virtual void visit (AST::TypeCastExpr &expr) {}\n-  virtual void visit (AST::AssignmentExpr &expr) {}\n-  virtual void visit (AST::CompoundAssignmentExpr &expr) {}\n-  virtual void visit (AST::GroupedExpr &expr) {}\n-  //  virtual void visit(ArrayElems& elems) {}\n-  virtual void visit (AST::ArrayElemsValues &elems) {}\n-  virtual void visit (AST::ArrayElemsCopied &elems) {}\n-  virtual void visit (AST::ArrayExpr &expr) {}\n-  virtual void visit (AST::ArrayIndexExpr &expr) {}\n-  virtual void visit (AST::TupleExpr &expr) {}\n-  virtual void visit (AST::TupleIndexExpr &expr) {}\n-  virtual void visit (AST::StructExprStruct &expr) {}\n-  //  virtual void visit(StructExprField& field) {}\n-  virtual void visit (AST::StructExprFieldIdentifier &field) {}\n-  virtual void visit (AST::StructExprFieldIdentifierValue &field) {}\n-  virtual void visit (AST::StructExprFieldIndexValue &field) {}\n-  virtual void visit (AST::StructExprStructFields &expr) {}\n-  virtual void visit (AST::StructExprStructBase &expr) {}\n-  virtual void visit (AST::CallExpr &expr) {}\n-  virtual void visit (AST::MethodCallExpr &expr) {}\n-  virtual void visit (AST::FieldAccessExpr &expr) {}\n-  virtual void visit (AST::ClosureExprInner &expr) {}\n-  virtual void visit (AST::BlockExpr &expr) {}\n-  virtual void visit (AST::ClosureExprInnerTyped &expr) {}\n-  virtual void visit (AST::ContinueExpr &expr) {}\n-  virtual void visit (AST::BreakExpr &expr) {}\n-  virtual void visit (AST::RangeFromToExpr &expr) {}\n-  virtual void visit (AST::RangeFromExpr &expr) {}\n-  virtual void visit (AST::RangeToExpr &expr) {}\n-  virtual void visit (AST::RangeFullExpr &expr) {}\n-  virtual void visit (AST::RangeFromToInclExpr &expr) {}\n-  virtual void visit (AST::RangeToInclExpr &expr) {}\n-  virtual void visit (AST::ReturnExpr &expr) {}\n-  virtual void visit (AST::UnsafeBlockExpr &expr) {}\n-  virtual void visit (AST::LoopExpr &expr) {}\n-  virtual void visit (AST::WhileLoopExpr &expr) {}\n-  virtual void visit (AST::WhileLetLoopExpr &expr) {}\n-  virtual void visit (AST::ForLoopExpr &expr) {}\n-  virtual void visit (AST::IfExpr &expr) {}\n-  virtual void visit (AST::IfExprConseqElse &expr) {}\n-  virtual void visit (AST::IfExprConseqIf &expr) {}\n-  virtual void visit (AST::IfExprConseqIfLet &expr) {}\n-  virtual void visit (AST::IfLetExpr &expr) {}\n-  virtual void visit (AST::IfLetExprConseqElse &expr) {}\n-  virtual void visit (AST::IfLetExprConseqIf &expr) {}\n-  virtual void visit (AST::IfLetExprConseqIfLet &expr) {}\n-  //  virtual void visit(MatchCase& match_case) {}\n-  // virtual void visit (AST::MatchCaseBlockExpr &match_case) {}\n-  // virtual void visit (AST::MatchCaseExpr &match_case) {}\n-  virtual void visit (AST::MatchExpr &expr) {}\n-  virtual void visit (AST::AwaitExpr &expr) {}\n-  virtual void visit (AST::AsyncBlockExpr &expr) {}\n+  virtual void visit (AST::LiteralExpr &expr);\n+  virtual void visit (AST::AttrInputLiteral &attr_input);\n+  virtual void visit (AST::MetaItemLitExpr &meta_item);\n+  virtual void visit (AST::MetaItemPathLit &meta_item);\n+  virtual void visit (AST::BorrowExpr &expr);\n+  virtual void visit (AST::DereferenceExpr &expr);\n+  virtual void visit (AST::ErrorPropagationExpr &expr);\n+  virtual void visit (AST::NegationExpr &expr);\n+  virtual void visit (AST::ArithmeticOrLogicalExpr &expr);\n+  virtual void visit (AST::ComparisonExpr &expr);\n+  virtual void visit (AST::LazyBooleanExpr &expr);\n+  virtual void visit (AST::TypeCastExpr &expr);\n+  virtual void visit (AST::AssignmentExpr &expr);\n+  virtual void visit (AST::CompoundAssignmentExpr &expr);\n+  virtual void visit (AST::GroupedExpr &expr);\n+  //  virtual void visit(ArrayElems& elems);\n+  virtual void visit (AST::ArrayElemsValues &elems);\n+  virtual void visit (AST::ArrayElemsCopied &elems);\n+  virtual void visit (AST::ArrayExpr &expr);\n+  virtual void visit (AST::ArrayIndexExpr &expr);\n+  virtual void visit (AST::TupleExpr &expr);\n+  virtual void visit (AST::TupleIndexExpr &expr);\n+  virtual void visit (AST::StructExprStruct &expr);\n+  //  virtual void visit(StructExprField& field);\n+  virtual void visit (AST::StructExprFieldIdentifier &field);\n+  virtual void visit (AST::StructExprFieldIdentifierValue &field);\n+  virtual void visit (AST::StructExprFieldIndexValue &field);\n+  virtual void visit (AST::StructExprStructFields &expr);\n+  virtual void visit (AST::StructExprStructBase &expr);\n+  virtual void visit (AST::CallExpr &expr);\n+  virtual void visit (AST::MethodCallExpr &expr);\n+  virtual void visit (AST::FieldAccessExpr &expr);\n+  virtual void visit (AST::ClosureExprInner &expr);\n+  virtual void visit (AST::BlockExpr &expr);\n+  virtual void visit (AST::ClosureExprInnerTyped &expr);\n+  virtual void visit (AST::ContinueExpr &expr);\n+  virtual void visit (AST::BreakExpr &expr);\n+  virtual void visit (AST::RangeFromToExpr &expr);\n+  virtual void visit (AST::RangeFromExpr &expr);\n+  virtual void visit (AST::RangeToExpr &expr);\n+  virtual void visit (AST::RangeFullExpr &expr);\n+  virtual void visit (AST::RangeFromToInclExpr &expr);\n+  virtual void visit (AST::RangeToInclExpr &expr);\n+  virtual void visit (AST::ReturnExpr &expr);\n+  virtual void visit (AST::UnsafeBlockExpr &expr);\n+  virtual void visit (AST::LoopExpr &expr);\n+  virtual void visit (AST::WhileLoopExpr &expr);\n+  virtual void visit (AST::WhileLetLoopExpr &expr);\n+  virtual void visit (AST::ForLoopExpr &expr);\n+  virtual void visit (AST::IfExpr &expr);\n+  virtual void visit (AST::IfExprConseqElse &expr);\n+  virtual void visit (AST::IfExprConseqIf &expr);\n+  virtual void visit (AST::IfExprConseqIfLet &expr);\n+  virtual void visit (AST::IfLetExpr &expr);\n+  virtual void visit (AST::IfLetExprConseqElse &expr);\n+  virtual void visit (AST::IfLetExprConseqIf &expr);\n+  virtual void visit (AST::IfLetExprConseqIfLet &expr);\n+  //  virtual void visit(MatchCase& match_case);\n+  // virtual void visit (AST::MatchCaseBlockExpr &match_case);\n+  // virtual void visit (AST::MatchCaseExpr &match_case);\n+  virtual void visit (AST::MatchExpr &expr);\n+  virtual void visit (AST::AwaitExpr &expr);\n+  virtual void visit (AST::AsyncBlockExpr &expr);\n \n   // rust-item.h\n-  virtual void visit (AST::TypeParam &param) {}\n-  //  virtual void visit(WhereClauseItem& item) {}\n-  virtual void visit (AST::LifetimeWhereClauseItem &item) {}\n-  virtual void visit (AST::TypeBoundWhereClauseItem &item) {}\n-  virtual void visit (AST::Method &method) {}\n-  virtual void visit (AST::Module &module) {}\n-  virtual void visit (AST::ExternCrate &crate) {}\n-  //  virtual void visit(UseTree& use_tree) {}\n-  virtual void visit (AST::UseTreeGlob &use_tree) {}\n-  virtual void visit (AST::UseTreeList &use_tree) {}\n-  virtual void visit (AST::UseTreeRebind &use_tree) {}\n-  virtual void visit (AST::UseDeclaration &use_decl) {}\n-  virtual void visit (AST::Function &function) {}\n-  virtual void visit (AST::TypeAlias &type_alias) {}\n-  virtual void visit (AST::StructStruct &struct_item) {}\n-  virtual void visit (AST::TupleStruct &tuple_struct) {}\n-  virtual void visit (AST::EnumItem &item) {}\n-  virtual void visit (AST::EnumItemTuple &item) {}\n-  virtual void visit (AST::EnumItemStruct &item) {}\n-  virtual void visit (AST::EnumItemDiscriminant &item) {}\n-  virtual void visit (AST::Enum &enum_item) {}\n-  virtual void visit (AST::Union &union_item) {}\n-  virtual void visit (AST::ConstantItem &const_item) {}\n-  virtual void visit (AST::StaticItem &static_item) {}\n-  virtual void visit (AST::TraitItemFunc &item) {}\n-  virtual void visit (AST::TraitItemMethod &item) {}\n-  virtual void visit (AST::TraitItemConst &item) {}\n-  virtual void visit (AST::TraitItemType &item) {}\n-  virtual void visit (AST::Trait &trait) {}\n-  virtual void visit (AST::InherentImpl &impl) {}\n-  virtual void visit (AST::TraitImpl &impl) {}\n-  //  virtual void visit(ExternalItem& item) {}\n-  virtual void visit (AST::ExternalStaticItem &item) {}\n-  virtual void visit (AST::ExternalFunctionItem &item) {}\n-  virtual void visit (AST::ExternBlock &block) {}\n+  virtual void visit (AST::TypeParam &param);\n+  //  virtual void visit(WhereClauseItem& item);\n+  virtual void visit (AST::LifetimeWhereClauseItem &item);\n+  virtual void visit (AST::TypeBoundWhereClauseItem &item);\n+  virtual void visit (AST::Method &method);\n+  virtual void visit (AST::Module &module);\n+  virtual void visit (AST::ExternCrate &crate);\n+  //  virtual void visit(UseTree& use_tree);\n+  virtual void visit (AST::UseTreeGlob &use_tree);\n+  virtual void visit (AST::UseTreeList &use_tree);\n+  virtual void visit (AST::UseTreeRebind &use_tree);\n+  virtual void visit (AST::UseDeclaration &use_decl);\n+  virtual void visit (AST::Function &function);\n+  virtual void visit (AST::TypeAlias &type_alias);\n+  virtual void visit (AST::StructStruct &struct_item);\n+  virtual void visit (AST::TupleStruct &tuple_struct);\n+  virtual void visit (AST::EnumItem &item);\n+  virtual void visit (AST::EnumItemTuple &item);\n+  virtual void visit (AST::EnumItemStruct &item);\n+  virtual void visit (AST::EnumItemDiscriminant &item);\n+  virtual void visit (AST::Enum &enum_item);\n+  virtual void visit (AST::Union &union_item);\n+  virtual void visit (AST::ConstantItem &const_item);\n+  virtual void visit (AST::StaticItem &static_item);\n+  virtual void visit (AST::TraitItemFunc &item);\n+  virtual void visit (AST::TraitItemMethod &item);\n+  virtual void visit (AST::TraitItemConst &item);\n+  virtual void visit (AST::TraitItemType &item);\n+  virtual void visit (AST::Trait &trait);\n+  virtual void visit (AST::InherentImpl &impl);\n+  virtual void visit (AST::TraitImpl &impl);\n+  //  virtual void visit(ExternalItem& item);\n+  virtual void visit (AST::ExternalStaticItem &item);\n+  virtual void visit (AST::ExternalFunctionItem &item);\n+  virtual void visit (AST::ExternBlock &block);\n \n   // rust-macro.h\n-  virtual void visit (AST::MacroMatchFragment &match) {}\n-  virtual void visit (AST::MacroMatchRepetition &match) {}\n-  virtual void visit (AST::MacroMatcher &matcher) {}\n-  virtual void visit (AST::MacroRulesDefinition &rules_def) {}\n-  virtual void visit (AST::MacroInvocation &macro_invoc) {}\n-  virtual void visit (AST::MetaItemPath &meta_item) {}\n-  virtual void visit (AST::MetaItemSeq &meta_item) {}\n-  virtual void visit (AST::MetaWord &meta_item) {}\n-  virtual void visit (AST::MetaNameValueStr &meta_item) {}\n-  virtual void visit (AST::MetaListPaths &meta_item) {}\n-  virtual void visit (AST::MetaListNameValueStr &meta_item) {}\n+  virtual void visit (AST::MacroMatchFragment &match);\n+  virtual void visit (AST::MacroMatchRepetition &match);\n+  virtual void visit (AST::MacroMatcher &matcher);\n+  virtual void visit (AST::MacroRulesDefinition &rules_def);\n+  virtual void visit (AST::MacroInvocation &macro_invoc);\n+  virtual void visit (AST::MetaItemPath &meta_item);\n+  virtual void visit (AST::MetaItemSeq &meta_item);\n+  virtual void visit (AST::MetaWord &meta_item);\n+  virtual void visit (AST::MetaNameValueStr &meta_item);\n+  virtual void visit (AST::MetaListPaths &meta_item);\n+  virtual void visit (AST::MetaListNameValueStr &meta_item);\n \n   // rust-pattern.h\n-  virtual void visit (AST::LiteralPattern &pattern) {}\n-  virtual void visit (AST::IdentifierPattern &pattern) {}\n-  virtual void visit (AST::WildcardPattern &pattern) {}\n-  //  virtual void visit(RangePatternBound& bound) {}\n-  virtual void visit (AST::RangePatternBoundLiteral &bound) {}\n-  virtual void visit (AST::RangePatternBoundPath &bound) {}\n-  virtual void visit (AST::RangePatternBoundQualPath &bound) {}\n-  virtual void visit (AST::RangePattern &pattern) {}\n-  virtual void visit (AST::ReferencePattern &pattern) {}\n-  //  virtual void visit(StructPatternField& field) {}\n-  virtual void visit (AST::StructPatternFieldTuplePat &field) {}\n-  virtual void visit (AST::StructPatternFieldIdentPat &field) {}\n-  virtual void visit (AST::StructPatternFieldIdent &field) {}\n-  virtual void visit (AST::StructPattern &pattern) {}\n-  //  virtual void visit(TupleStructItems& tuple_items) {}\n-  virtual void visit (AST::TupleStructItemsNoRange &tuple_items) {}\n-  virtual void visit (AST::TupleStructItemsRange &tuple_items) {}\n-  virtual void visit (AST::TupleStructPattern &pattern) {}\n-  //  virtual void visit(TuplePatternItems& tuple_items) {}\n-  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items) {}\n-  virtual void visit (AST::TuplePatternItemsRanged &tuple_items) {}\n-  virtual void visit (AST::TuplePattern &pattern) {}\n-  virtual void visit (AST::GroupedPattern &pattern) {}\n-  virtual void visit (AST::SlicePattern &pattern) {}\n+  virtual void visit (AST::LiteralPattern &pattern);\n+  virtual void visit (AST::IdentifierPattern &pattern);\n+  virtual void visit (AST::WildcardPattern &pattern);\n+  //  virtual void visit(RangePatternBound& bound);\n+  virtual void visit (AST::RangePatternBoundLiteral &bound);\n+  virtual void visit (AST::RangePatternBoundPath &bound);\n+  virtual void visit (AST::RangePatternBoundQualPath &bound);\n+  virtual void visit (AST::RangePattern &pattern);\n+  virtual void visit (AST::ReferencePattern &pattern);\n+  //  virtual void visit(StructPatternField& field);\n+  virtual void visit (AST::StructPatternFieldTuplePat &field);\n+  virtual void visit (AST::StructPatternFieldIdentPat &field);\n+  virtual void visit (AST::StructPatternFieldIdent &field);\n+  virtual void visit (AST::StructPattern &pattern);\n+  //  virtual void visit(TupleStructItems& tuple_items);\n+  virtual void visit (AST::TupleStructItemsNoRange &tuple_items);\n+  virtual void visit (AST::TupleStructItemsRange &tuple_items);\n+  virtual void visit (AST::TupleStructPattern &pattern);\n+  //  virtual void visit(TuplePatternItems& tuple_items);\n+  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items);\n+  virtual void visit (AST::TuplePatternItemsRanged &tuple_items);\n+  virtual void visit (AST::TuplePattern &pattern);\n+  virtual void visit (AST::GroupedPattern &pattern);\n+  virtual void visit (AST::SlicePattern &pattern);\n \n   // rust-stmt.h\n-  virtual void visit (AST::EmptyStmt &stmt) {}\n-  virtual void visit (AST::LetStmt &stmt) {}\n-  virtual void visit (AST::ExprStmtWithoutBlock &stmt) {}\n-  virtual void visit (AST::ExprStmtWithBlock &stmt) {}\n+  virtual void visit (AST::EmptyStmt &stmt);\n+  virtual void visit (AST::LetStmt &stmt);\n+  virtual void visit (AST::ExprStmtWithoutBlock &stmt);\n+  virtual void visit (AST::ExprStmtWithBlock &stmt);\n \n   // rust-type.h\n-  virtual void visit (AST::TraitBound &bound) {}\n-  virtual void visit (AST::ImplTraitType &type) {}\n-  virtual void visit (AST::TraitObjectType &type) {}\n-  virtual void visit (AST::ParenthesisedType &type) {}\n-  virtual void visit (AST::ImplTraitTypeOneBound &type) {}\n-  virtual void visit (AST::TraitObjectTypeOneBound &type) {}\n-  virtual void visit (AST::TupleType &type) {}\n-  virtual void visit (AST::NeverType &type) {}\n-  virtual void visit (AST::RawPointerType &type) {}\n-  virtual void visit (AST::ReferenceType &type) {}\n-  virtual void visit (AST::ArrayType &type) {}\n-  virtual void visit (AST::SliceType &type) {}\n-  virtual void visit (AST::InferredType &type) {}\n-  virtual void visit (AST::BareFunctionType &type) {}\n+  virtual void visit (AST::TraitBound &bound);\n+  virtual void visit (AST::ImplTraitType &type);\n+  virtual void visit (AST::TraitObjectType &type);\n+  virtual void visit (AST::ParenthesisedType &type);\n+  virtual void visit (AST::ImplTraitTypeOneBound &type);\n+  virtual void visit (AST::TraitObjectTypeOneBound &type);\n+  virtual void visit (AST::TupleType &type);\n+  virtual void visit (AST::NeverType &type);\n+  virtual void visit (AST::RawPointerType &type);\n+  virtual void visit (AST::ReferenceType &type);\n+  virtual void visit (AST::ArrayType &type);\n+  virtual void visit (AST::SliceType &type);\n+  virtual void visit (AST::InferredType &type);\n+  virtual void visit (AST::BareFunctionType &type);\n \n protected:\n   ASTLoweringBase ()\n@@ -238,32 +238,9 @@ class ASTLoweringBase : public AST::ASTVisitor\n   Analysis::Mappings *mappings;\n   Analysis::BuiltinAttributeMappings *attr_mappings;\n \n-  HIR::Lifetime lower_lifetime (AST::Lifetime &lifetime)\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    mappings->insert_node_to_hir (mapping.get_crate_num (),\n-\t\t\t\t  mapping.get_nodeid (), mapping.get_hirid ());\n-\n-    return HIR::Lifetime (mapping, lifetime.get_lifetime_type (),\n-\t\t\t  lifetime.get_lifetime_name (), lifetime.get_locus ());\n-  }\n-\n-  HIR::LoopLabel lower_loop_label (AST::LoopLabel &loop_label)\n-  {\n-    HIR::Lifetime life = lower_lifetime (loop_label.get_lifetime ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, loop_label.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    mappings->insert_node_to_hir (mapping.get_crate_num (),\n-\t\t\t\t  mapping.get_nodeid (), mapping.get_hirid ());\n-\n-    return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n-  }\n+  HIR::Lifetime lower_lifetime (AST::Lifetime &lifetime);\n+\n+  HIR::LoopLabel lower_loop_label (AST::LoopLabel &loop_label);\n \n   std::vector<std::unique_ptr<HIR::GenericParam> > lower_generic_params (\n     std::vector<std::unique_ptr<AST::GenericParam> > &params);"}, {"sha": "8ef3a05f2d8e219168d0bb45ec84f80bd425db53", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 0, "deletions": 346, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038677dd8300fffc2abe8a47fef5cc99d8e594bc/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=038677dd8300fffc2abe8a47fef5cc99d8e594bc", "patch": "@@ -375,351 +375,5 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n \t\t\t\t\t\t   expr.get_locus (),\n \t\t\t\t\t\t   expr.get_outer_attrs ());\n }\n-\n-// rust-ast-lower-base.h\n-\n-std::vector<std::unique_ptr<HIR::GenericParam> >\n-ASTLoweringBase::lower_generic_params (\n-  std::vector<std::unique_ptr<AST::GenericParam> > &params)\n-{\n-  std::vector<std::unique_ptr<HIR::GenericParam> > lowered;\n-  for (auto &ast_param : params)\n-    {\n-      auto hir_param = ASTLowerGenericParam::translate (ast_param.get ());\n-      lowered.push_back (std::unique_ptr<HIR::GenericParam> (hir_param));\n-    }\n-\n-  return lowered;\n-}\n-\n-HIR::PathExprSegment\n-ASTLoweringBase::lower_path_expr_seg (AST::PathExprSegment &s)\n-{\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, s.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t UNKNOWN_LOCAL_DEFID);\n-\n-  return HIR::PathExprSegment (\n-    std::move (mapping),\n-    HIR::PathIdentSegment (s.get_ident_segment ().as_string ()), s.get_locus (),\n-    s.has_generic_args () ? lower_generic_args (s.get_generic_args ())\n-\t\t\t  : HIR::GenericArgs::create_empty ());\n-}\n-\n-HIR::GenericArgsBinding\n-ASTLoweringBase::lower_binding (AST::GenericArgsBinding &binding)\n-{\n-  HIR::Type *lowered_type\n-    = ASTLoweringType::translate (binding.get_type ().get ());\n-  return HIR::GenericArgsBinding (binding.get_identifier (),\n-\t\t\t\t  std::unique_ptr<HIR::Type> (lowered_type),\n-\t\t\t\t  binding.get_locus ());\n-}\n-\n-HIR::GenericArgs\n-ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n-{\n-  std::vector<HIR::GenericArgsBinding> binding_args;\n-  for (auto &binding : args.get_binding_args ())\n-    {\n-      HIR::GenericArgsBinding b = lower_binding (binding);\n-      binding_args.push_back (std::move (b));\n-    }\n-\n-  std::vector<HIR::Lifetime> lifetime_args;\n-  for (auto &lifetime : args.get_lifetime_args ())\n-    {\n-      HIR::Lifetime l = lower_lifetime (lifetime);\n-      lifetime_args.push_back (std::move (l));\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::Type> > type_args;\n-  for (auto &type : args.get_type_args ())\n-    {\n-      HIR::Type *t = ASTLoweringType::translate (type.get ());\n-      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n-    }\n-\n-  return HIR::GenericArgs (std::move (lifetime_args), std::move (type_args),\n-\t\t\t   std::move (binding_args), args.get_locus ());\n-}\n-\n-HIR::SelfParam\n-ASTLoweringBase::lower_self (AST::SelfParam &self)\n-{\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, self.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  if (self.has_type ())\n-    {\n-      HIR::Type *type = ASTLoweringType::translate (self.get_type ().get ());\n-      return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (type),\n-\t\t\t     self.get_is_mut (), self.get_locus ());\n-    }\n-  else if (!self.get_has_ref ())\n-    {\n-      return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (nullptr),\n-\t\t\t     self.get_is_mut (), self.get_locus ());\n-    }\n-\n-  AST::Lifetime l = self.get_lifetime ();\n-  return HIR::SelfParam (mapping, lower_lifetime (l), self.get_is_mut (),\n-\t\t\t self.get_locus ());\n-}\n-\n-void\n-ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n-{\n-  std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n-\n-  std::string segment_name = segment.get_ident_segment ().as_string ();\n-  bool has_separating_scope_resolution\n-    = segment.get_separating_scope_resolution ();\n-\n-  std::vector<HIR::Lifetime> lifetime_args;\n-  for (auto &lifetime : segment.get_generic_args ().get_lifetime_args ())\n-    {\n-      HIR::Lifetime l = lower_lifetime (lifetime);\n-      lifetime_args.push_back (std::move (l));\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::Type> > type_args;\n-  for (auto &type : segment.get_generic_args ().get_type_args ())\n-    {\n-      HIR::Type *t = ASTLoweringType::translate (type.get ());\n-      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  auto hirid = mappings->get_next_hir_id (crate_num);\n-  Analysis::NodeMapping mapping (crate_num, segment.get_node_id (), hirid,\n-\t\t\t\t UNKNOWN_LOCAL_DEFID);\n-\n-  translated_segment = new HIR::TypePathSegmentGeneric (\n-    std::move (mapping), segment_name, has_separating_scope_resolution,\n-    std::move (lifetime_args), std::move (type_args), std::move (binding_args),\n-    segment.get_locus ());\n-}\n-\n-void\n-ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n-{\n-  auto crate_num = mappings->get_current_crate ();\n-  auto hirid = mappings->get_next_hir_id (crate_num);\n-  Analysis::NodeMapping qual_mappings (\n-    crate_num, path.get_qualified_path_type ().get_node_id (), hirid,\n-    UNKNOWN_LOCAL_DEFID);\n-\n-  HIR::Type *qual_type = ASTLoweringType::translate (\n-    path.get_qualified_path_type ().get_type ().get ());\n-  HIR::TypePath *qual_trait = ASTLowerTypePath::translate (\n-    path.get_qualified_path_type ().get_as_type_path ());\n-\n-  HIR::QualifiedPathType qual_path_type (\n-    qual_mappings, std::unique_ptr<HIR::Type> (qual_type),\n-    std::unique_ptr<HIR::TypePath> (qual_trait),\n-    path.get_qualified_path_type ().get_locus ());\n-\n-  translated_segment = nullptr;\n-  path.get_associated_segment ()->accept_vis (*this);\n-  if (translated_segment == nullptr)\n-    {\n-      rust_fatal_error (path.get_associated_segment ()->get_locus (),\n-\t\t\t\"failed to translate AST TypePathSegment\");\n-      return;\n-    }\n-  std::unique_ptr<HIR::TypePathSegment> associated_segment (translated_segment);\n-\n-  std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n-  for (auto &seg : path.get_segments ())\n-    {\n-      translated_segment = nullptr;\n-      seg->accept_vis (*this);\n-      if (translated_segment == nullptr)\n-\t{\n-\t  rust_fatal_error (seg->get_locus (),\n-\t\t\t    \"failed to translte AST TypePathSegment\");\n-\t}\n-      translated_segments.push_back (\n-\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n-    }\n-\n-  Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::QualifiedPathInType (std::move (mapping),\n-\t\t\t\t\t     std::move (qual_path_type),\n-\t\t\t\t\t     std::move (associated_segment),\n-\t\t\t\t\t     std::move (translated_segments),\n-\t\t\t\t\t     path.get_locus ());\n-  mappings->insert_hir_type (crate_num, hirid, translated);\n-}\n-\n-void\n-ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n-{\n-  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n-  HIR::TypeParamBound *translated_bound\n-    = ASTLoweringTypeBounds::translate (&type.get_trait_bound ());\n-  bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (translated_bound));\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n-\t\t\t\t\t type.get_locus (), type.is_dyn ());\n-\n-  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-}\n-\n-void\n-ASTLoweringType::visit (AST::TraitObjectType &type)\n-{\n-  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n-\n-  for (auto &bound : type.get_type_param_bounds ())\n-    {\n-      HIR::TypeParamBound *translated_bound\n-\t= ASTLoweringTypeBounds::translate (bound.get ());\n-      bounds.push_back (\n-\tstd::unique_ptr<HIR::TypeParamBound> (translated_bound));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n-\t\t\t\t\t type.get_locus (), type.is_dyn ());\n-\n-  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-}\n-\n-// rust-ast-lower-base\n-\n-HIR::Type *\n-ASTLoweringBase::lower_type_no_bounds (AST::TypeNoBounds *type)\n-{\n-  return ASTLoweringType::translate (type);\n-}\n-\n-HIR::TypeParamBound *\n-ASTLoweringBase::lower_bound (AST::TypeParamBound *bound)\n-{\n-  return ASTLoweringTypeBounds::translate (bound);\n-}\n-\n-/* Checks whether the name of a field already exists.  Returns true\n-   and produces an error if so.  */\n-bool\n-struct_field_name_exists (std::vector<HIR::StructField> &fields,\n-\t\t\t  HIR::StructField &new_field)\n-{\n-  for (auto &field : fields)\n-    {\n-      if (field.get_field_name ().compare (new_field.get_field_name ()) == 0)\n-\t{\n-\t  RichLocation r (new_field.get_locus ());\n-\t  r.add_range (field.get_locus ());\n-\t  rust_error_at (r, \"duplicate field name %qs\",\n-\t\t\t field.get_field_name ().c_str ());\n-\t  return true;\n-\t}\n-    }\n-  return false;\n-}\n-\n-HIR::FunctionQualifiers\n-ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n-{\n-  Unsafety unsafety\n-    = qualifiers.is_unsafe () ? Unsafety::Unsafe : Unsafety::Normal;\n-  bool has_extern = qualifiers.is_extern ();\n-\n-  ABI abi = ABI::RUST;\n-  if (qualifiers.has_abi ())\n-    {\n-      const std::string &extern_abi = qualifiers.get_extern_abi ();\n-      abi = get_abi_from_string (extern_abi);\n-      if (has_extern && abi == ABI::UNKNOWN)\n-\trust_error_at (qualifiers.get_locus (), \"unknown ABI option\");\n-    }\n-\n-  return HIR::FunctionQualifiers (qualifiers.get_const_status (), unsafety,\n-\t\t\t\t  has_extern, abi);\n-}\n-\n-void\n-ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n-{\n-  for (const auto &attr : item.get_outer_attrs ())\n-    {\n-      const auto &str_path = attr.get_path ().as_string ();\n-      if (!is_known_attribute (str_path))\n-\t{\n-\t  rust_error_at (attr.get_locus (), \"unknown attribute\");\n-\t  continue;\n-\t}\n-\n-      bool is_lang_item = str_path.compare (\"lang\") == 0\n-\t\t\t  && attr.has_attr_input ()\n-\t\t\t  && attr.get_attr_input ().get_attr_input_type ()\n-\t\t\t       == AST::AttrInput::AttrInputType::LITERAL;\n-\n-      if (is_lang_item)\n-\thandle_lang_item_attribute (item, attr);\n-      else if (!attribute_handled_in_another_pass (str_path))\n-\t{\n-\t  rust_error_at (attr.get_locus (), \"unhandled attribute: [%s]\",\n-\t\t\t attr.get_path ().as_string ().c_str ());\n-\t}\n-    }\n-}\n-\n-void\n-ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n-\t\t\t\t\t     const AST::Attribute &attr)\n-{\n-  auto &literal = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n-  const auto &lang_item_type_str = literal.get_literal ().as_string ();\n-  auto lang_item_type = Analysis::RustLangItem::Parse (lang_item_type_str);\n-  if (lang_item_type == Analysis::RustLangItem::ItemType::UNKNOWN)\n-    {\n-      rust_error_at (attr.get_locus (), \"unknown lang item\");\n-      return;\n-    }\n-  mappings->insert_lang_item (lang_item_type,\n-\t\t\t      item.get_mappings ().get_defid ());\n-}\n-\n-bool\n-ASTLoweringBase::is_known_attribute (const std::string &attribute_path) const\n-{\n-  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n-  return !lookup.is_error ();\n-}\n-\n-bool\n-ASTLoweringBase::attribute_handled_in_another_pass (\n-  const std::string &attribute_path) const\n-{\n-  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n-  if (lookup.is_error ())\n-    return false;\n-\n-  if (lookup.handler == Analysis::CompilerPass::UNKNOWN)\n-    return false;\n-\n-  return lookup.handler != Analysis::CompilerPass::HIR_LOWERING;\n-}\n-\n } // namespace HIR\n } // namespace Rust"}]}