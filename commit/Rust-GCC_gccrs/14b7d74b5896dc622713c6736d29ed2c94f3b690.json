{"sha": "14b7d74b5896dc622713c6736d29ed2c94f3b690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiN2Q3NGI1ODk2ZGM2MjI3MTNjNjczNmQyOWVkMmM5NGYzYjY5MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:56:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:56:34Z"}, "message": "(Nkind_In): New functions.\n\nAdd support for new flags.\n\nFrom-SVN: r130887", "tree": {"sha": "7440b3446aa4cfc2ef04565da5f253a03cb6bd62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7440b3446aa4cfc2ef04565da5f253a03cb6bd62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b7d74b5896dc622713c6736d29ed2c94f3b690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b7d74b5896dc622713c6736d29ed2c94f3b690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b7d74b5896dc622713c6736d29ed2c94f3b690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b7d74b5896dc622713c6736d29ed2c94f3b690/comments", "author": null, "committer": null, "parents": [{"sha": "c5765b24ca716c6bf1493f6c1d8a3e02cb77df98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5765b24ca716c6bf1493f6c1d8a3e02cb77df98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5765b24ca716c6bf1493f6c1d8a3e02cb77df98"}], "stats": {"total": 196, "additions": 175, "deletions": 21}, "files": [{"sha": "b99d34939bc4baedfe38ef831d78b17a9e62a021", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 175, "deletions": 21, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b7d74b5896dc622713c6736d29ed2c94f3b690/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b7d74b5896dc622713c6736d29ed2c94f3b690/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=14b7d74b5896dc622713c6736d29ed2c94f3b690", "patch": "@@ -491,18 +491,6 @@ package Atree is\n    --  entity ID values of the two entities are interchanged. Neither of the\n    --  two entities may be list members.\n \n-   procedure Delete_Node (Node : Node_Id);\n-   --  The node, which must not be a list member, is deleted from the tree and\n-   --  its type is set to N_Unused_At_End. It is an error (not necessarily\n-   --  detected) to reference this node after it has been deleted. The\n-   --  implementation of the body of Atree is free to reuse the node to\n-   --  satisfy future node allocation requests, but is not required to do so.\n-\n-   procedure Delete_Tree (Node : Node_Id);\n-   --  The entire syntactic subtree referenced by Node (i.e. the given node\n-   --  and all its syntactic descendents) are deleted as described above for\n-   --  Delete_Node.\n-\n    function Extend_Node (Node : Node_Id) return Entity_Id;\n    --  This function returns a copy of its input node with an extension\n    --  added. The fields of the extension are set to Empty. Due to the way\n@@ -593,6 +581,68 @@ package Atree is\n    --  Tests given Id for inequality with the Empty node. This allows notations\n    --  like \"if Present (Statement)\" as opposed to \"if Statement /= Empty\".\n \n+   --  Node_Kind tests, like the functions in Sinfo, but the first argument is\n+   --  a Node_Id, and the tested field is Nkind (N).\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind;\n+      V4 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind;\n+      V4 : Node_Kind;\n+      V5 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind;\n+      V4 : Node_Kind;\n+      V5 : Node_Kind;\n+      V6 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind;\n+      V4 : Node_Kind;\n+      V5 : Node_Kind;\n+      V6 : Node_Kind;\n+      V7 : Node_Kind) return Boolean;\n+\n+   function Nkind_In\n+     (N  : Node_Id;\n+      V1 : Node_Kind;\n+      V2 : Node_Kind;\n+      V3 : Node_Kind;\n+      V4 : Node_Kind;\n+      V5 : Node_Kind;\n+      V6 : Node_Kind;\n+      V7 : Node_Kind;\n+      V8 : Node_Kind) return Boolean;\n+\n+   pragma Inline (Nkind_In);\n+   --  Inline all above functions\n+\n    -----------------------------\n    -- Entity Access Functions --\n    -----------------------------\n@@ -644,12 +694,15 @@ package Atree is\n    --  The following procedures apply only to Entity_Id values, i.e.\n    --  to extended nodes.\n \n+   procedure Basic_Set_Convention (E : Entity_Id; Val : Convention_Id);\n+   pragma Inline (Basic_Set_Convention);\n+   --  Clients should use Sem_Util.Set_Convention rather than calling this\n+   --  routine directly, as Set_Convention also deals with the special\n+   --  processing required for access types.\n+\n    procedure Set_Ekind (E : Entity_Id; Val : Entity_Kind);\n    pragma Inline (Set_Ekind);\n \n-   procedure Set_Convention (E : Entity_Id; Val : Convention_Id);\n-   pragma Inline (Set_Convention);\n-\n    ---------------------------\n    -- Tree Rewrite Routines --\n    ---------------------------\n@@ -759,11 +812,10 @@ package Atree is\n    -- Generic Field Access Routines --\n    -----------------------------------\n \n-   --  This subpackage provides the functions for accessing and procedures\n-   --  for setting fields that are normally referenced by their logical\n-   --  synonyms defined in packages Sinfo and Einfo. As previously\n-   --  described the implementations of these packages use the package\n-   --  Atree.Unchecked_Access.\n+   --  This subpackage provides the functions for accessing and procedures for\n+   --  setting fields that are normally referenced by their logical synonyms\n+   --  defined in packages Sinfo and Einfo. The implementations of these\n+   --  packages use the package Atree.Unchecked_Access.\n \n    package Unchecked_Access is\n \n@@ -1753,6 +1805,57 @@ package Atree is\n       function Flag230 (N : Node_Id) return Boolean;\n       pragma Inline (Flag230);\n \n+      function Flag231 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag231);\n+\n+      function Flag232 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag232);\n+\n+      function Flag233 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag233);\n+\n+      function Flag234 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag234);\n+\n+      function Flag235 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag235);\n+\n+      function Flag236 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag236);\n+\n+      function Flag237 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag237);\n+\n+      function Flag238 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag238);\n+\n+      function Flag239 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag239);\n+\n+      function Flag240 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag240);\n+\n+      function Flag241 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag241);\n+\n+      function Flag242 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag242);\n+\n+      function Flag243 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag243);\n+\n+      function Flag244 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag244);\n+\n+      function Flag245 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag245);\n+\n+      function Flag246 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag246);\n+\n+      function Flag247 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag247);\n+\n       --  Procedures to set value of indicated field\n \n       procedure Set_Nkind (N : Node_Id; Val : Node_Kind);\n@@ -2727,6 +2830,57 @@ package Atree is\n       procedure Set_Flag230 (N : Node_Id; Val : Boolean);\n       pragma Inline (Set_Flag230);\n \n+      procedure Set_Flag231 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag231);\n+\n+      procedure Set_Flag232 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag232);\n+\n+      procedure Set_Flag233 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag233);\n+\n+      procedure Set_Flag234 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag234);\n+\n+      procedure Set_Flag235 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag235);\n+\n+      procedure Set_Flag236 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag236);\n+\n+      procedure Set_Flag237 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag237);\n+\n+      procedure Set_Flag238 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag238);\n+\n+      procedure Set_Flag239 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag239);\n+\n+      procedure Set_Flag240 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag240);\n+\n+      procedure Set_Flag241 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag241);\n+\n+      procedure Set_Flag242 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag242);\n+\n+      procedure Set_Flag243 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag243);\n+\n+      procedure Set_Flag244 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag244);\n+\n+      procedure Set_Flag245 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag245);\n+\n+      procedure Set_Flag246 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag246);\n+\n+      procedure Set_Flag247 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag247);\n+\n       --  The following versions of Set_Noden also set the parent\n       --  pointer of the referenced node if it is non_Empty\n \n@@ -2943,7 +3097,7 @@ package Atree is\n \n             --    Field6-10      Holds Field24-Field28\n             --    Field11        Holds Flag184-Flag215\n-            --    Field12        Holds Flag216-Flag230\n+            --    Field12        Holds Flag216-Flag247\n \n          end case;\n       end record;"}]}