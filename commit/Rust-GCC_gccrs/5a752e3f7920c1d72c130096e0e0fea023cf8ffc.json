{"sha": "5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3NTJlM2Y3OTIwYzFkNzJjMTMwMDk2ZTBlMGZlYTAyM2NmOGZmYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-01-18T11:53:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-01-18T11:53:50Z"}, "message": "PR c++/83160] local ref to capture\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-01/msg01638.html\n\tPR c++/83160\n\t* cp-tree.h (mark_use): Declare.\n\t* expr.c (mark_use): Make extern.\n\t* call.c (direct_reference_binding): Set inner conv's\n\trvaluedness_matches_p, if it is an identity.\n\t(convert_like_real): Mark lvalue or rvalue use for identity as\n\trvaledness_matches_p demands.\n\n\tPR c++/83160\n\t* g++.dg/cpp0x/pr83160.C: New.\n\nFrom-SVN: r256842", "tree": {"sha": "3046a3abdcbe7ee5a733086c11fc73ee9929a57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3046a3abdcbe7ee5a733086c11fc73ee9929a57c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7467ab4232babb1ac9b906fe91abb9226464b884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7467ab4232babb1ac9b906fe91abb9226464b884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7467ab4232babb1ac9b906fe91abb9226464b884"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "0cacefa674d158b8933b6caa0686a2eedc10d509", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -1,3 +1,13 @@\n+2018-01-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/83160\n+\t* cp-tree.h (mark_use): Declare.\n+\t* expr.c (mark_use): Make extern.\n+\t* call.c (direct_reference_binding): Set inner conv's\n+\trvaluedness_matches_p, if it is an identity.\n+\t(convert_like_real): Mark lvalue or rvalue use for identity as\n+\trvaledness_matches_p demands.\n+\n 2018-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83824"}, {"sha": "e08622ce9c20f358961b1efce319dd54982cd9f7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -102,7 +102,8 @@ struct conversion {\n      being bound to an lvalue expression or an rvalue reference is\n      being bound to an rvalue expression.  If KIND is ck_rvalue,\n      true when we are treating an lvalue as an rvalue (12.8p33).  If\n-     KIND is ck_base, always false.  */\n+     KIND is ck_base, always false.  If ck_identity, we will be\n+     binding a reference directly.  */\n   BOOL_BITFIELD rvaluedness_matches_p: 1;\n   BOOL_BITFIELD check_narrowing: 1;\n   /* The type of the expression resulting from the conversion.  */\n@@ -1476,6 +1477,10 @@ direct_reference_binding (tree type, conversion *conv)\n \n   t = TREE_TYPE (type);\n \n+  if (conv->kind == ck_identity)\n+    /* Mark the identity conv as to not decay to rvalue.  */\n+    conv->rvaluedness_matches_p = true;\n+\n   /* [over.ics.rank]\n \n      When a parameter of reference type binds directly\n@@ -1501,6 +1506,7 @@ direct_reference_binding (tree type, conversion *conv)\n \t That way, convert_like knows not to generate a temporary.  */\n       conv->need_temporary_p = false;\n     }\n+\n   return build_conv (ck_ref_bind, type, conv);\n }\n \n@@ -6800,7 +6806,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  else\n \t    gcc_unreachable ();\n \t}\n-      expr = mark_rvalue_use (expr);\n+      expr = mark_use (expr, /*rvalue_p=*/!convs->rvaluedness_matches_p,\n+\t\t       /*read_p=*/true, UNKNOWN_LOCATION,\n+\t\t       /*reject_builtin=*/true);\n \n       if (type_unknown_p (expr))\n \texpr = instantiate_type (totype, expr, complain);"}, {"sha": "a8a5ab18342c43bd5ac94a274ef127657969a286", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -6328,6 +6328,9 @@ extern tree create_try_catch_expr               (tree, tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);\n+extern tree mark_use (tree expr, bool rvalue_p, bool read_p,\n+\t\t      location_t = UNKNOWN_LOCATION,\n+\t\t      bool reject_builtin = true);\n extern tree mark_rvalue_use\t\t\t(tree,\n                                                  location_t = UNKNOWN_LOCATION,\n                                                  bool reject_builtin = true);"}, {"sha": "2e67986897061d27bbd4b368af888025d76988d6", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -89,7 +89,7 @@ cplus_expand_constant (tree cst)\n /* We've seen an actual use of EXPR.  Possibly replace an outer variable\n    reference inside with its constant value or a lambda capture.  */\n \n-static tree\n+tree\n mark_use (tree expr, bool rvalue_p, bool read_p,\n \t  location_t loc /* = UNKNOWN_LOCATION */,\n \t  bool reject_builtin /* = true */)"}, {"sha": "df64bb05b76ea87c0f9a69f6d4806abc3b18f532", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -1,3 +1,8 @@\n+2018-01-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/83160\n+\t* g++.dg/cpp0x/pr83160.C: New.\n+\n 2018-01-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83887"}, {"sha": "b3b97c70c3d305129dd3d046b35d5d95b9541a2b", "filename": "gcc/testsuite/g++.dg/cpp0x/pr83160.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83160.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a752e3f7920c1d72c130096e0e0fea023cf8ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83160.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83160.C?ref=5a752e3f7920c1d72c130096e0e0fea023cf8ffc", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run { target c++11 } }\n+// PR c++/83160 failed to capture as lvalue\n+\n+int main ()\n+{\n+  const int a = 0;\n+\n+  if (![&a] (const int *p)\n+      {\n+\tconst int &b = a;\n+\t// We should bind to the outer a\n+\treturn &b == p;\n+      } (&a))\n+    return 1;\n+\n+  if (![&] (const int *p)\n+      {\n+\tconst int &b = a;\n+\t// We should bind to the outer a\n+\treturn &b == p;\n+      } (&a))\n+    return 2;\n+\n+  if ([=] (const int *p)\n+      {\n+\tconst int &b = a;\n+\t// We should bind to the captured instance\n+\treturn &b == p;\n+      }(&a))\n+    return 3;\n+\n+  return 0;\n+}"}]}