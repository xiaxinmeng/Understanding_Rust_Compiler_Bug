{"sha": "9147cc0be70d7bcee6ad47ed11834f71ff161e99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0N2NjMGJlNzBkN2JjZWU2YWQ0N2VkMTE4MzRmNzFmZjE2MWU5OQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2008-04-08T06:55:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:55:45Z"}, "message": "s-strxdr.adb, [...] (Block_IO_OK): New subprogram.\n\n2008-04-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* s-strxdr.adb, s-stratt.ads, s-stratt.adb (Block_IO_OK): New\n\tsubprogram.\n\tAdd new subtype S_WWC, unchecked conversion routines From_WWC and\n\tTo_WWC.\n\t(I_WWC, O_WWC): New routines for input and output of\n\tWide_Wide_Character.\n\nFrom-SVN: r134052", "tree": {"sha": "851050a48accd468d77483acd2c44acaa2876cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851050a48accd468d77483acd2c44acaa2876cca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9147cc0be70d7bcee6ad47ed11834f71ff161e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9147cc0be70d7bcee6ad47ed11834f71ff161e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9147cc0be70d7bcee6ad47ed11834f71ff161e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9147cc0be70d7bcee6ad47ed11834f71ff161e99/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f8b32d5413ad3e2b1a6f67f15a778c72d1c14f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8b32d5413ad3e2b1a6f67f15a778c72d1c14f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8b32d5413ad3e2b1a6f67f15a778c72d1c14f7"}], "stats": {"total": 176, "additions": 156, "deletions": 20}, "files": [{"sha": "757fad6e17368261206b5f5bd1546915aaa55592", "filename": "gcc/ada/s-stratt.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stratt.adb?ref=9147cc0be70d7bcee6ad47ed11834f71ff161e99", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,6 +74,7 @@ package body System.Stream_Attributes is\n    subtype S_SU  is SEA (1 .. (UST.Short_Unsigned'Size       + SU - 1) / SU);\n    subtype S_U   is SEA (1 .. (UST.Unsigned'Size             + SU - 1) / SU);\n    subtype S_WC  is SEA (1 .. (Wide_Character'Size           + SU - 1) / SU);\n+   subtype S_WWC is SEA (1 .. (Wide_Wide_Character'Size      + SU - 1) / SU);\n \n    --  Unchecked conversions from the elementary type to the stream type\n \n@@ -94,6 +95,7 @@ package body System.Stream_Attributes is\n    function From_SU  is new UC (UST.Short_Unsigned,       S_SU);\n    function From_U   is new UC (UST.Unsigned,             S_U);\n    function From_WC  is new UC (Wide_Character,           S_WC);\n+   function From_WWC is new UC (Wide_Wide_Character,      S_WWC);\n \n    --  Unchecked conversions from the stream type to elementary type\n \n@@ -114,6 +116,16 @@ package body System.Stream_Attributes is\n    function To_SU  is new UC (S_SU,  UST.Short_Unsigned);\n    function To_U   is new UC (S_U,   UST.Unsigned);\n    function To_WC  is new UC (S_WC,  Wide_Character);\n+   function To_WWC is new UC (S_WWC, Wide_Wide_Character);\n+\n+   -----------------\n+   -- Block_IO_OK --\n+   -----------------\n+\n+   function Block_IO_OK return Boolean is\n+   begin\n+      return True;\n+   end Block_IO_OK;\n \n    ----------\n    -- I_AD --\n@@ -461,6 +473,24 @@ package body System.Stream_Attributes is\n       end if;\n    end I_WC;\n \n+   -----------\n+   -- I_WWC --\n+   -----------\n+\n+   function I_WWC (Stream : not null access RST) return Wide_Wide_Character is\n+      T : S_WWC;\n+      L : SEO;\n+\n+   begin\n+      Ada.Streams.Read (Stream.all, T, L);\n+\n+      if L < T'Last then\n+         raise Err;\n+      else\n+         return To_WWC (T);\n+      end if;\n+   end I_WWC;\n+\n    ----------\n    -- W_AD --\n    ----------\n@@ -665,4 +695,16 @@ package body System.Stream_Attributes is\n       Ada.Streams.Write (Stream.all, T);\n    end W_WC;\n \n+   -----------\n+   -- W_WWC --\n+   -----------\n+\n+   procedure W_WWC\n+     (Stream : not null access RST; Item : Wide_Wide_Character)\n+   is\n+      T : constant S_WWC := From_WWC (Item);\n+   begin\n+      Ada.Streams.Write (Stream.all, T);\n+   end W_WWC;\n+\n end System.Stream_Attributes;"}, {"sha": "7cb837fc96dc9dcc78b3eb72766a0391a6bee7b9", "filename": "gcc/ada/s-stratt.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-stratt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-stratt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stratt.ads?ref=9147cc0be70d7bcee6ad47ed11834f71ff161e99", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -121,6 +121,7 @@ package System.Stream_Attributes is\n    function I_SU  (Stream : not null access RST) return UST.Short_Unsigned;\n    function I_U   (Stream : not null access RST) return UST.Unsigned;\n    function I_WC  (Stream : not null access RST) return Wide_Character;\n+   function I_WWC (Stream : not null access RST) return Wide_Wide_Character;\n \n    -----------------------\n    -- Output Procedures --\n@@ -154,6 +155,14 @@ package System.Stream_Attributes is\n                     Item   : UST.Short_Unsigned);\n    procedure W_U   (Stream : not null access RST; Item : UST.Unsigned);\n    procedure W_WC  (Stream : not null access RST; Item : Wide_Character);\n+   procedure W_WWC (Stream : not null access RST; Item : Wide_Wide_Character);\n+\n+   function Block_IO_OK return Boolean;\n+   --  Package System.Stream_Attributes has several bodies - the default one\n+   --  distributed with GNAT, s-strxdr.adb which is based on the XDR standard\n+   --  and s-stratt.adb for Garlic. All three bodies share the same spec. The\n+   --  role of this function is to determine whether the current version of\n+   --  System.Stream_Attributes is able to support block IO.\n \n private\n    pragma Inline (I_AD);\n@@ -175,6 +184,7 @@ private\n    pragma Inline (I_SU);\n    pragma Inline (I_U);\n    pragma Inline (I_WC);\n+   pragma Inline (I_WWC);\n \n    pragma Inline (W_AD);\n    pragma Inline (W_AS);\n@@ -195,5 +205,8 @@ private\n    pragma Inline (W_SU);\n    pragma Inline (W_U);\n    pragma Inline (W_WC);\n+   pragma Inline (W_WWC);\n+\n+   pragma Inline (Block_IO_OK);\n \n end System.Stream_Attributes;"}, {"sha": "ca37a7fd4e7fcb61c8f317960122e58875e765fe", "filename": "gcc/ada/s-strxdr.adb", "status": "modified", "additions": 99, "deletions": 18, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-strxdr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9147cc0be70d7bcee6ad47ed11834f71ff161e99/gcc%2Fada%2Fs-strxdr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strxdr.adb?ref=9147cc0be70d7bcee6ad47ed11834f71ff161e99", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1996-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1996-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GARLIC is free software;  you can redistribute it and/or modify it under --\n -- terms of the  GNU General Public License  as published by the Free Soft- --\n@@ -267,6 +267,12 @@ package body System.Stream_Attributes is\n    subtype XDR_S_WC is SEA (1 .. WC_L);\n    type XDR_WC is mod BB ** WC_L;\n \n+   --  Consider Wide_Wide_Character as an enumeration type\n+\n+   WWC_L : constant := 8;\n+   subtype XDR_S_WWC is SEA (1 .. WWC_L);\n+   type XDR_WWC is mod BB ** WWC_L;\n+\n    --  Optimization: if we already have the correct Bit_Order, then some\n    --  computations can be avoided since the source and the target will be\n    --  identical anyway. They will be replaced by direct unchecked\n@@ -275,6 +281,15 @@ package body System.Stream_Attributes is\n    Optimize_Integers : constant Boolean :=\n      Default_Bit_Order = High_Order_First;\n \n+   -----------------\n+   -- Block_IO_OK --\n+   -----------------\n+\n+   function Block_IO_OK return Boolean is\n+   begin\n+      return False;\n+   end Block_IO_OK;\n+\n    ----------\n    -- I_AD --\n    ----------\n@@ -303,6 +318,7 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       else\n          for N in S'Range loop\n             U := U * BB + XDR_TM (S (N));\n@@ -338,8 +354,8 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n-      else\n \n+      else\n          --  Use Ada requirements on Character representation clause\n \n          return Character'Val (S (1));\n@@ -694,10 +710,11 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       elsif Optimize_Integers then\n          return XDR_S_LLI_To_Long_Long_Integer (S);\n-      else\n \n+      else\n          --  Compute using machine unsigned for computing\n          --  rather than long_long_unsigned.\n \n@@ -737,10 +754,11 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       elsif Optimize_Integers then\n          return XDR_S_LLU_To_Long_Long_Unsigned (S);\n-      else\n \n+      else\n          --  Compute using machine unsigned\n          --  rather than long_long_unsigned.\n \n@@ -774,10 +792,11 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       elsif Optimize_Integers then\n          return Long_Unsigned (XDR_S_LU_To_Long_Long_Unsigned (S));\n-      else\n \n+      else\n          --  Compute using machine unsigned\n          --  rather than long_unsigned.\n \n@@ -924,8 +943,10 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       elsif Optimize_Integers then\n          return XDR_S_SSI_To_Short_Short_Integer (S);\n+\n       else\n          U := XDR_SSU (S (1));\n \n@@ -953,9 +974,9 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       else\n          U := XDR_SSU (S (1));\n-\n          return Short_Short_Unsigned (U);\n       end if;\n    end I_SSU;\n@@ -974,8 +995,10 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       elsif Optimize_Integers then\n          return XDR_S_SU_To_Short_Unsigned (S);\n+\n       else\n          for N in S'Range loop\n             U := U * BB + XDR_SU (S (N));\n@@ -1026,6 +1049,7 @@ package body System.Stream_Attributes is\n \n       if L /= S'Last then\n          raise Data_Error;\n+\n       else\n          for N in S'Range loop\n             U := U * BB + XDR_WC (S (N));\n@@ -1037,6 +1061,32 @@ package body System.Stream_Attributes is\n       end if;\n    end I_WC;\n \n+   -----------\n+   -- I_WWC --\n+   -----------\n+\n+   function I_WWC (Stream : not null access RST) return Wide_Wide_Character is\n+      S : XDR_S_WWC;\n+      L : SEO;\n+      U : XDR_WWC := 0;\n+\n+   begin\n+      Ada.Streams.Read (Stream.all, S, L);\n+\n+      if L /= S'Last then\n+         raise Data_Error;\n+\n+      else\n+         for N in S'Range loop\n+            U := U * BB + XDR_WWC (S (N));\n+         end loop;\n+\n+         --  Use Ada requirements on Wide_Wide_Character representation clause\n+\n+         return Wide_Wide_Character'Val (U);\n+      end if;\n+   end I_WWC;\n+\n    ----------\n    -- W_AD --\n    ----------\n@@ -1111,7 +1161,6 @@ package body System.Stream_Attributes is\n       pragma Assert (C_L = 1);\n \n    begin\n-\n       --  Use Ada requirements on Character representation clause\n \n       S (1) := SE (Character'Pos (Item));\n@@ -1212,8 +1261,8 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Integer_To_XDR_S_I (Item);\n-      else\n \n+      else\n          --  Test sign and apply two complement notation\n \n          if Item < 0 then\n@@ -1329,8 +1378,8 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Long_Long_Integer_To_XDR_S_LI (Long_Long_Integer (Item));\n-      else\n \n+      else\n          --  Test sign and apply two complement notation\n \n          if Item < 0 then\n@@ -1462,8 +1511,9 @@ package body System.Stream_Attributes is\n    -- W_LLI --\n    -----------\n \n-   procedure W_LLI (Stream : not null access RST;\n-                    Item   : Long_Long_Integer)\n+   procedure W_LLI\n+     (Stream : not null access RST;\n+      Item   : Long_Long_Integer)\n    is\n       S : XDR_S_LLI;\n       U : Unsigned;\n@@ -1472,8 +1522,8 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Long_Long_Integer_To_XDR_S_LLI (Item);\n-      else\n \n+      else\n          --  Test sign and apply two complement notation\n \n          if Item < 0 then\n@@ -1510,15 +1560,18 @@ package body System.Stream_Attributes is\n    -- W_LLU --\n    -----------\n \n-   procedure W_LLU (Stream : not null access RST;\n-                    Item   : Long_Long_Unsigned) is\n+   procedure W_LLU\n+     (Stream : not null access RST;\n+      Item   : Long_Long_Unsigned)\n+   is\n       S : XDR_S_LLU;\n       U : Unsigned;\n       X : Long_Long_Unsigned := Item;\n \n    begin\n       if Optimize_Integers then\n          S := Long_Long_Unsigned_To_XDR_S_LLU (Item);\n+\n       else\n          --  Compute using machine unsigned\n          --  rather than long_long_unsigned.\n@@ -1556,6 +1609,7 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Long_Long_Unsigned_To_XDR_S_LU (Long_Long_Unsigned (Item));\n+\n       else\n          --  Compute using machine unsigned\n          --  rather than long_unsigned.\n@@ -1673,8 +1727,8 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Short_Integer_To_XDR_S_SI (Item);\n-      else\n \n+      else\n          --  Test sign and apply two complement's notation\n \n          if Item < 0 then\n@@ -1710,8 +1764,8 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Short_Short_Integer_To_XDR_S_SSI (Item);\n-      else\n \n+      else\n          --  Test sign and apply two complement's notation\n \n          if Item < 0 then\n@@ -1739,7 +1793,6 @@ package body System.Stream_Attributes is\n \n    begin\n       S (1) := SE (U);\n-\n       Ada.Streams.Write (Stream.all, S);\n    end W_SSU;\n \n@@ -1754,6 +1807,7 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Short_Unsigned_To_XDR_S_SU (Item);\n+\n       else\n          for N in reverse S'Range loop\n             S (N) := SE (U mod BB);\n@@ -1779,6 +1833,7 @@ package body System.Stream_Attributes is\n    begin\n       if Optimize_Integers then\n          S := Unsigned_To_XDR_S_U (Item);\n+\n       else\n          for N in reverse S'Range loop\n             S (N) := SE (U mod BB);\n@@ -1802,7 +1857,6 @@ package body System.Stream_Attributes is\n       U : XDR_WC;\n \n    begin\n-\n       --  Use Ada requirements on Wide_Character representation clause\n \n       U := XDR_WC (Wide_Character'Pos (Item));\n@@ -1819,4 +1873,31 @@ package body System.Stream_Attributes is\n       end if;\n    end W_WC;\n \n+   -----------\n+   -- W_WWC --\n+   -----------\n+\n+   procedure W_WWC\n+     (Stream : not null access RST; Item : Wide_Wide_Character)\n+   is\n+      S : XDR_S_WWC;\n+      U : XDR_WWC;\n+\n+   begin\n+      --  Use Ada requirements on Wide_Wide_Character representation clause\n+\n+      U := XDR_WWC (Wide_Wide_Character'Pos (Item));\n+\n+      for N in reverse S'Range loop\n+         S (N) := SE (U mod BB);\n+         U := U / BB;\n+      end loop;\n+\n+      Ada.Streams.Write (Stream.all, S);\n+\n+      if U /= 0 then\n+         raise Data_Error;\n+      end if;\n+   end W_WWC;\n+\n end System.Stream_Attributes;"}]}