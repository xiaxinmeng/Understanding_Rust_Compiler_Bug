{"sha": "88778f157626f3421f776c44cb290667d9fd30f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3NzhmMTU3NjI2ZjM0MjFmNzc2YzQ0Y2IyOTA2NjdkOWZkMzBmNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "oleg.endo@t-online.de", "date": "2011-09-27T22:46:00Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-09-27T22:46:00Z"}, "message": "mfmovd.c: Extend list of supported targets.\n\n\t* gcc.target/sh/mfmovd.c: Extend list of supported targets.\n\t* gcc.target/sh/struct-arg-dw2.c: Fix typo.\n\t* gcc.target/sh/sh4a-sincos.c: Make test SH4A only.\n\t* gcc.target/sh/sh4a-sincosf.c: Ditto.\n\t* gcc.target/sh/sh4a-cos.c: Ditto.\n\t* gcc.target/sh/sh4a-cosf.c: Ditto.\n\t* gcc.target/sh/sh4a-sin.c: Ditto.\n\t* gcc.target/sh/sh4a-sinf.c: Ditto.\n\t* gcc.target/sh/sh4a-fsrra.c: Ditto.\n\t* gcc.target/sh/sh4a-memmovua.c: Ditto.\n\t* gcc.target/sh/sh4a-bitmovua.c: Ditto.\n\nFrom-SVN: r179295", "tree": {"sha": "8207300df5f89e18b60a9c2459c1dddbe1d5f635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8207300df5f89e18b60a9c2459c1dddbe1d5f635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88778f157626f3421f776c44cb290667d9fd30f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88778f157626f3421f776c44cb290667d9fd30f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88778f157626f3421f776c44cb290667d9fd30f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88778f157626f3421f776c44cb290667d9fd30f5/comments", "author": {"login": "olegendo", "id": 1380209, "node_id": "MDQ6VXNlcjEzODAyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1380209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegendo", "html_url": "https://github.com/olegendo", "followers_url": "https://api.github.com/users/olegendo/followers", "following_url": "https://api.github.com/users/olegendo/following{/other_user}", "gists_url": "https://api.github.com/users/olegendo/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegendo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegendo/subscriptions", "organizations_url": "https://api.github.com/users/olegendo/orgs", "repos_url": "https://api.github.com/users/olegendo/repos", "events_url": "https://api.github.com/users/olegendo/events{/privacy}", "received_events_url": "https://api.github.com/users/olegendo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2427db200d7e56fda1cf034ca0d1cb2999b5b970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2427db200d7e56fda1cf034ca0d1cb2999b5b970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2427db200d7e56fda1cf034ca0d1cb2999b5b970"}], "stats": {"total": 115, "additions": 54, "deletions": 61}, "files": [{"sha": "86d8fc273190c34e30349260fe0646f71e1ff295", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,3 +1,17 @@\n+2011-09-27  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\t* gcc.target/sh/mfmovd.c: Extend list of supported targets.\n+\t* gcc.target/sh/struct-arg-dw2.c: Fix typo.\n+\t* gcc.target/sh/sh4a-sincos.c: Make test SH4A only.\n+\t* gcc.target/sh/sh4a-sincosf.c: Ditto.\n+\t* gcc.target/sh/sh4a-cos.c: Ditto.\n+\t* gcc.target/sh/sh4a-cosf.c: Ditto.\n+\t* gcc.target/sh/sh4a-sin.c: Ditto.\n+\t* gcc.target/sh/sh4a-sinf.c: Ditto.\n+\t* gcc.target/sh/sh4a-fsrra.c: Ditto.\n+\t* gcc.target/sh/sh4a-memmovua.c: Ditto.\n+\t* gcc.target/sh/sh4a-bitmovua.c: Ditto.\n+\n 2011-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/31489"}, {"sha": "b5653c76489581f704391f76e80a4dc065c4b242", "filename": "gcc/testsuite/gcc.target/sh/mfmovd.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,7 +1,9 @@\n+/* Verify that we generate fmov.d instructions to move doubles when -mfmovd \n+   option is enabled.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-mfmovd\" } */\n-/* { dg-skip-if \"No double precision FPU support\" { \"sh*-*-*\" } \"-m2a-nofpu -m2a-single-only -m4-nofpu -m4-single-only -m4a-nofpu -m4a-single-only\" { \"\" } }  */\n-/* { dg-final { scan-assembler \"fmov.d\"} }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a\" \"-m2a-single\" \"-m4\" \"-m4-single\" \"-m4-100\" \"-m4-100-single\" \"-m4-200\" \"-m4-200-single\" \"-m4-300\" \"-m4-300-single\" \"-m4a\" \"-m4a-single\" } }  */\n+/* { dg-final { scan-assembler \"fmov.d\" } } */\n \n extern double g;\n "}, {"sha": "1c9ae6ee6bdfa2917245d225dfa376f88ae5cc1d", "filename": "gcc/testsuite/gcc.target/sh/sh4a-bitmovua.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,9 +1,9 @@\n-/* Verify that we generate movua to load unaligned 32-bit values.  */\n+/* Verify that we generate movua to load unaligned 32-bit values on SH4A.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O\" } */\n-/* { dg-final { scan-assembler-times \"\\tmovua\\\\.l\\t\" 6 } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" \"-m4a-nofpu\" } }  */\n+/* { dg-final { scan-assembler-times \"movua.l\" 6 } } */\n \n-#ifdef __SH4A__\n /* Aligned.  */\n struct s0 { long long d : 32; } x0;\n long long f0() {\n@@ -63,11 +63,5 @@ struct u4 { long long c : 32; unsigned long long d : 32; } y4;\n unsigned long long g4() {\n   return y4.d;\n }\n-#else\n-asm (\"movua.l\\t\");\n-asm (\"movua.l\\t\");\n-asm (\"movua.l\\t\");\n-asm (\"movua.l\\t\");\n-asm (\"movua.l\\t\");\n-asm (\"movua.l\\t\");\n-#endif\n+\n+"}, {"sha": "c2e421c6a055fcd68c06b8bada41d9a3a7d8ceec", "filename": "gcc/testsuite/gcc.target/sh/sh4a-cos.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,13 +1,11 @@\n /* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode.  */\n+   (fsca) in fast math mode on SH4A with FPU.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler \"\\tfsca\\t\" } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler \"fsca\" } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n double test(double f) { return cos(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "68bb20f2c336359cdce5d6928e5cd17e8e066a14", "filename": "gcc/testsuite/gcc.target/sh/sh4a-cosf.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,13 +1,11 @@\n /* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode.  */\n+   (fsca) in fast math mode on SH4A with FPU.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler \"\\tfsca\\t\" } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler \"fsca\" } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n float test(float f) { return cosf(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "4ce2e28e22fbebeccb3b54a096ce8955e082061e", "filename": "gcc/testsuite/gcc.target/sh/sh4a-fsrra.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,13 +1,11 @@\n /* Verify that we generate single-precision square root reciprocal\n-   approximate (fsrra) in fast math mode.  */\n+   approximate (fsrra) in fast math mode on SH4A with FPU.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler \"\\tfsrra\\t\" } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler \"fsrra\" } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n float test(float f) { return 1 / sqrtf(f); }\n-#else\n-asm (\"fsrra\\t\");\n-#endif\n+"}, {"sha": "7e817c4c12295102b5b94dfecaeecf62111fc63d", "filename": "gcc/testsuite/gcc.target/sh/sh4a-memmovua.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,17 +1,14 @@\n /* Verify that we generate movua to copy unaligned memory regions to\n-   32-bit-aligned addresses.  */\n+   32-bit-aligned addresses on SH4A.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O\" } */\n-/* { dg-final { scan-assembler-times \"\\tmovua\\\\.l\\t\" 2 } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" \"-m4a-nofpu\" } }  */\n+/* { dg-final { scan-assembler-times \"movua.l\" 2 } } */\n \n-#ifdef __SH4A__\n #include <string.h>\n \n struct s { int i; char a[10], b[10]; } x;\n int f() {\n   memcpy(x.a, x.b, 10);\n }\n-#else\n-asm (\"movua.l\\t+\");\n-asm (\"movua.l\\t+\");\n-#endif\n+"}, {"sha": "cd8f0783d7bfcabbe1ecd234bbe667ef584bf060", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sin.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,13 +1,11 @@\n /* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode.  */\n+   (fsca) in fast math mode on SH4A with FPU.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler \"\\tfsca\\t\" } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler \"fsca\" } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n double test(double f) { return sin(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "423dda1433b9c875c1a38fa257cc85c3e94174f1", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sincos.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -3,12 +3,10 @@\n    sine and cosine.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tfsca\\t\" 1 } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler-times \"fsca\" 1 } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n double test(double f) { return sin(f) + cos(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "0ca33e30a0fdf1e1e28fafa115d77cbd43bc8af0", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sincosf.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -3,12 +3,10 @@\n    sine and cosine.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tfsca\\t\" 1 } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler-times \"fsca\" 1 } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n float test(float f) { return sinf(f) + cosf(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "4d9abea045b3e1bc79c14799836ce1b0ded5eaa1", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sinf.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,13 +1,11 @@\n /* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode.  */\n+   (fsca) in fast math mode on SH4A with FPU.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-final { scan-assembler \"\\tfsca\\t\" } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n+/* { dg-final { scan-assembler \"fsca\" } } */\n \n-#if defined __SH4A__ && ! defined __SH4_NOFPU__\n #include <math.h>\n \n float test(float f) { return sinf(f); }\n-#else\n-asm (\"fsca\\t\");\n-#endif\n+"}, {"sha": "81f80df1e68124878a7d961e8d560ca6d5ad153c", "filename": "gcc/testsuite/gcc.target/sh/struct-arg-dw2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88778f157626f3421f776c44cb290667d9fd30f5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c?ref=88778f157626f3421f776c44cb290667d9fd30f5", "patch": "@@ -1,4 +1,4 @@\n-/* Verify that we don't generate fame related insn against stack adjustment\n+/* Verify that we don't generate frame related insn against stack adjustment\n    for the object sent partially in registers. */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-g\" } */"}]}