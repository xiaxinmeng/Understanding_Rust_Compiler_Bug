{"sha": "89843f5dfbb0b867f42c7743a8691ebe5bb35682", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4NDNmNWRmYmIwYjg2N2Y0MmM3NzQzYTg2OTFlYmU1YmIzNTY4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-03T08:29:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-03T08:29:03Z"}, "message": "re PR target/47564 (internal compiler error in memory_address_addr_space, at explow.c:504)\n\n\tPR target/47564\n\t* toplev.c (target_reinit): Save and restore *crtl and regno_reg_rtx\n\taround backend_init_target and lang_dependent_init_target calls.\n\t* cgraphunit.c (cgraph_debug_gimple_stmt): New function.\n\t(verify_cgraph_node): Don't call set_cfun here.  Use\n\tcgraph_debug_gimple_stmt instead of debug_gimple_stmt.\n\tSet error_found for incorrectly represented calls to thunks.\n\n\t* gcc.target/i386/pr47564.c: New test.\n\nFrom-SVN: r169784", "tree": {"sha": "4ee13b18ac1af831b910bd634daf1a77e1ed061b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee13b18ac1af831b910bd634daf1a77e1ed061b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89843f5dfbb0b867f42c7743a8691ebe5bb35682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89843f5dfbb0b867f42c7743a8691ebe5bb35682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89843f5dfbb0b867f42c7743a8691ebe5bb35682", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89843f5dfbb0b867f42c7743a8691ebe5bb35682/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "996c0cb05f747d94ff4d6e9329e702414f46f700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996c0cb05f747d94ff4d6e9329e702414f46f700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996c0cb05f747d94ff4d6e9329e702414f46f700"}], "stats": {"total": 112, "additions": 99, "deletions": 13}, "files": [{"sha": "bf62fcadc06697d70529f014a54f3aac46c518c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89843f5dfbb0b867f42c7743a8691ebe5bb35682", "patch": "@@ -1,3 +1,13 @@\n+2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/47564\n+\t* toplev.c (target_reinit): Save and restore *crtl and regno_reg_rtx\n+\taround backend_init_target and lang_dependent_init_target calls.\n+\t* cgraphunit.c (cgraph_debug_gimple_stmt): New function.\n+\t(verify_cgraph_node): Don't call set_cfun here.  Use\n+\tcgraph_debug_gimple_stmt instead of debug_gimple_stmt.\n+\tSet error_found for incorrectly represented calls to thunks.\n+\n 2011-02-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/43092"}, {"sha": "f6fe2724b0b7dc4f19108f28d9f245835db47ee7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=89843f5dfbb0b867f42c7743a8691ebe5bb35682", "patch": "@@ -440,13 +440,22 @@ verify_edge_count_and_frequency (struct cgraph_edge *e)\n   return error_found;\n }\n \n+/* Switch to THIS_CFUN if needed and print STMT to stderr.  */\n+static void\n+cgraph_debug_gimple_stmt (struct function *this_cfun, gimple stmt)\n+{\n+  /* debug_gimple_stmt needs correct cfun */\n+  if (cfun != this_cfun)\n+    set_cfun (this_cfun);\n+  debug_gimple_stmt (stmt);\n+}\n+\n /* Verify cgraph nodes of given cgraph node.  */\n DEBUG_FUNCTION void\n verify_cgraph_node (struct cgraph_node *node)\n {\n   struct cgraph_edge *e;\n   struct function *this_cfun = DECL_STRUCT_FUNCTION (node->decl);\n-  struct function *saved_cfun = cfun;\n   basic_block this_block;\n   gimple_stmt_iterator gsi;\n   bool error_found = false;\n@@ -455,8 +464,6 @@ verify_cgraph_node (struct cgraph_node *node)\n     return;\n \n   timevar_push (TV_CGRAPH_VERIFY);\n-  /* debug_generic_stmt needs correct cfun */\n-  set_cfun (this_cfun);\n   for (e = node->callees; e; e = e->next_callee)\n     if (e->aux)\n       {\n@@ -499,7 +506,7 @@ verify_cgraph_node (struct cgraph_node *node)\n \t  error (\"An indirect edge from %s is not marked as indirect or has \"\n \t\t \"associated indirect_info, the corresponding statement is: \",\n \t\t identifier_to_locale (cgraph_node_name (e->caller)));\n-\t  debug_gimple_stmt (e->call_stmt);\n+\t  cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n \t  error_found = true;\n \t}\n     }\n@@ -642,7 +649,7 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\tif (e->aux)\n \t\t\t  {\n \t\t\t    error (\"shared call_stmt:\");\n-\t\t\t    debug_gimple_stmt (stmt);\n+\t\t\t    cgraph_debug_gimple_stmt (this_cfun, stmt);\n \t\t\t    error_found = true;\n \t\t\t  }\n \t\t\tif (!e->indirect_unknown_callee)\n@@ -676,7 +683,8 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\t      {\n \t\t\t\terror (\"a call to thunk improperly represented \"\n \t\t\t\t       \"in the call graph:\");\n-\t\t\t\tdebug_gimple_stmt (stmt);\n+\t\t\t\tcgraph_debug_gimple_stmt (this_cfun, stmt);\n+\t\t\t\terror_found = true;\n \t\t\t      }\n \t\t\t  }\n \t\t\telse if (decl)\n@@ -685,14 +693,14 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\t\t   \"corresponding to a call_stmt with \"\n \t\t\t\t   \"a known declaration:\");\n \t\t\t    error_found = true;\n-\t\t\t    debug_gimple_stmt (e->call_stmt);\n+\t\t\t    cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n \t\t\t  }\n \t\t\te->aux = (void *)1;\n \t\t      }\n \t\t    else if (decl)\n \t\t      {\n \t\t\terror (\"missing callgraph edge for call stmt:\");\n-\t\t\tdebug_gimple_stmt (stmt);\n+\t\t\tcgraph_debug_gimple_stmt (this_cfun, stmt);\n \t\t\terror_found = true;\n \t\t      }\n \t\t  }\n@@ -710,7 +718,7 @@ verify_cgraph_node (struct cgraph_node *node)\n \t      error (\"edge %s->%s has no corresponding call_stmt\",\n \t\t     identifier_to_locale (cgraph_node_name (e->caller)),\n \t\t     identifier_to_locale (cgraph_node_name (e->callee)));\n-\t      debug_gimple_stmt (e->call_stmt);\n+\t      cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n \t      error_found = true;\n \t    }\n \t  e->aux = 0;\n@@ -721,7 +729,7 @@ verify_cgraph_node (struct cgraph_node *node)\n \t    {\n \t      error (\"an indirect edge from %s has no corresponding call_stmt\",\n \t\t     identifier_to_locale (cgraph_node_name (e->caller)));\n-\t      debug_gimple_stmt (e->call_stmt);\n+\t      cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n \t      error_found = true;\n \t    }\n \t  e->aux = 0;\n@@ -732,7 +740,6 @@ verify_cgraph_node (struct cgraph_node *node)\n       dump_cgraph_node (stderr, node);\n       internal_error (\"verify_cgraph_node failed\");\n     }\n-  set_cfun (saved_cfun);\n   timevar_pop (TV_CGRAPH_VERIFY);\n }\n "}, {"sha": "001d60425bb697c5bbc4f20d8fbbfaea90d0c330", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89843f5dfbb0b867f42c7743a8691ebe5bb35682", "patch": "@@ -1,3 +1,8 @@\n+2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/47564\n+\t* gcc.target/i386/pr47564.c: New test.\n+\n 2011-02-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/45122"}, {"sha": "5d3f25d1089f6917eb3a6129ff6833623a0e2b4a", "filename": "gcc/testsuite/gcc.target/i386/pr47564.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47564.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47564.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47564.c?ref=89843f5dfbb0b867f42c7743a8691ebe5bb35682", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/47564 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+static inline unsigned long long\n+foo (const unsigned char *p)\n+{\n+  return 1;\n+}\n+\n+__attribute__ ((__target__ (\"sse4\"))) void\n+bar (unsigned long long *x, const void *b, long long m)\n+{\n+  const unsigned char *p = (const unsigned char *) b;\n+  const unsigned char *e = p + m;\n+  unsigned int l = *x;\n+  unsigned long long n = l;\n+\n+  if ((e - p) >= 8192)\n+    {\n+      while ((e - p) >= 128)\n+\t{\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t  n = __builtin_ia32_crc32di (n, foo (p));\n+\t}\n+    }\n+\n+  while ((e - p) >= 16)\n+    {\n+      n = __builtin_ia32_crc32di (n, foo (p));\n+      n = __builtin_ia32_crc32di (n, foo (p));\n+    }\n+  l = n;\n+  *x = l;\n+}"}, {"sha": "64af11200e9f2ac0fa7cb2ae03b78229714e3831", "filename": "gcc/toplev.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89843f5dfbb0b867f42c7743a8691ebe5bb35682/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=89843f5dfbb0b867f42c7743a8691ebe5bb35682", "patch": "@@ -1,7 +1,7 @@\n /* Top level of GCC compilers (cc1, cc1plus, etc.)\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1780,11 +1780,33 @@ lang_dependent_init (const char *name)\n void\n target_reinit (void)\n {\n+  struct rtl_data saved_x_rtl;\n+  rtx *saved_regno_reg_rtx;\n+\n+  /* Save *crtl and regno_reg_rtx around the reinitialization\n+     to allow target_reinit being called even after prepare_function_start.  */\n+  saved_regno_reg_rtx = regno_reg_rtx;\n+  if (saved_regno_reg_rtx)\n+    {  \n+      saved_x_rtl = *crtl;\n+      memset (crtl, '\\0', sizeof (*crtl));\n+      regno_reg_rtx = NULL;\n+    }\n+\n   /* Reinitialize RTL backend.  */\n   backend_init_target ();\n \n   /* Reinitialize lang-dependent parts.  */\n   lang_dependent_init_target ();\n+\n+  /* And restore it at the end, as free_after_compilation from\n+     expand_dummy_function_end clears it.  */\n+  if (saved_regno_reg_rtx)\n+    {\n+      *crtl = saved_x_rtl;\n+      regno_reg_rtx = saved_regno_reg_rtx;\n+      saved_regno_reg_rtx = NULL;\n+    }\n }\n \n void"}]}