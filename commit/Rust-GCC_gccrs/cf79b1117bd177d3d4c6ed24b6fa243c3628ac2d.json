{"sha": "cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "node_id": "C_kwDOANBUbNoAKGNmNzliMTExN2JkMTc3ZDNkNGM2ZWQyNGI2ZmEyNDNjMzYyOGFjMmQ", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-14T04:32:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-14T22:11:17Z"}, "message": "syscall: gofmt\n\nAdd blank lines after //sys comments where needed, and then run gofmt\non the syscall package with the new formatter.\n\nThis is the libgo version of CL 407136.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/412074", "tree": {"sha": "b471331b7fd035d6adddf9cc8b1fb8bf738e9fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b471331b7fd035d6adddf9cc8b1fb8bf738e9fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6abe341558abec40c9c44d76e7fb4fb3978e894b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe341558abec40c9c44d76e7fb4fb3978e894b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abe341558abec40c9c44d76e7fb4fb3978e894b"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "aeada9f8d0c136943896a3b5bb4604d22c1485d8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -1,4 +1,4 @@\n-0058658a9efb6e5c5faa6f0f65949beea5ddbc98\n+bbb3a4347714faee620dc205674510a0f20b81ae\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1667cbc02f49e0e11cf1508d55f05f87aeaa4b24", "filename": "libgo/go/syscall/dir_plan9.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fdir_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fdir_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fdir_plan9.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -184,6 +184,7 @@ func gbit8(b []byte) (uint8, []byte) {\n }\n \n // gbit16 reads a 16-bit number in little-endian order from b and returns it with the remaining slice of b.\n+//\n //go:nosplit\n func gbit16(b []byte) (uint16, []byte) {\n \treturn uint16(b[0]) | uint16(b[1])<<8, b[2:]"}, {"sha": "59f7a82c6d73e4b3c11033bb75a2669ce0e25b92", "filename": "libgo/go/syscall/errstr.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Ferrstr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Ferrstr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrstr.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,8 +4,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !hurd\n-// +build !linux\n+//go:build !hurd && !linux\n+// +build !hurd,!linux\n \n package syscall\n "}, {"sha": "03a327dbc909a6bc0c26156db3d3f676c0c46a80", "filename": "libgo/go/syscall/errstr_glibc.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -7,6 +7,7 @@\n // We use this rather than errstr.go because on GNU/Linux sterror_r\n // returns a pointer to the error message, and may not use buf at all.\n \n+//go:build hurd || linux\n // +build hurd linux\n \n package syscall"}, {"sha": "e631593cbd95ec4f6c01a4b7ac84574f73cca337", "filename": "libgo/go/syscall/exec_bsd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -49,6 +49,7 @@ func runtime_AfterForkInChild()\n // For the same reason compiler does not race instrument it.\n // The calls to RawSyscall are okay because they are assembly\n // functions that do not grow the stack.\n+//\n //go:norace\n func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {\n \t// Declare all variables at top in case any"}, {"sha": "8e8ecb7e98910f7cf44fd01c73a88bfaf036cd0a", "filename": "libgo/go/syscall/exec_freebsd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_freebsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_freebsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_freebsd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -57,6 +57,7 @@ func runtime_AfterForkInChild()\n // For the same reason compiler does not race instrument it.\n // The calls to RawSyscall are okay because they are assembly\n // functions that do not grow the stack.\n+//\n //go:norace\n func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {\n \t// Declare all variables at top in case any"}, {"sha": "a62b3e920e6985c0023126a43f7713444c049c3f", "filename": "libgo/go/syscall/exec_hurd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_hurd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -49,6 +49,7 @@ func runtime_AfterForkInChild()\n // For the same reason compiler does not race instrument it.\n // The calls to RawSyscall are okay because they are assembly\n // functions that do not grow the stack.\n+//\n //go:norace\n func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {\n \t// Declare all variables at top in case any"}, {"sha": "77846af89e4634a750bd969fd964bf3bc7303f31", "filename": "libgo/go/syscall/exec_linux.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_linux.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -80,6 +80,7 @@ func runtime_AfterFork()\n func runtime_AfterForkInChild()\n \n // Implemented in clone_linux.c\n+//\n //go:noescape\n func rawClone(flags _C_ulong, child_stack *byte, ptid *Pid_t, ctid *Pid_t, regs unsafe.Pointer) _C_long\n \n@@ -92,6 +93,7 @@ func rawClone(flags _C_ulong, child_stack *byte, ptid *Pid_t, ctid *Pid_t, regs\n // For the same reason compiler does not race instrument it.\n // The calls to RawSyscall are okay because they are assembly\n // functions that do not grow the stack.\n+//\n //go:norace\n func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {\n \t// Set up and fork. This returns immediately in the parent or"}, {"sha": "ce28010a50669bfe947538521ab29ebcc7ef4bf4", "filename": "libgo/go/syscall/exec_stubs.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build rtems\n // +build rtems\n \n // Stubs for fork, exec and wait."}, {"sha": "bb5db6ce525793addf0b6c319110f4fbd2a596f7", "filename": "libgo/go/syscall/libcall_aix.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build aix\n // +build aix\n \n package syscall\n@@ -95,6 +96,7 @@ func PtraceDetach(pid int) (err error) { return ptrace64(_PT_DETACH, int64(pid),\n \n //sys\treboot(how int) (err error)\n //__linux_reboot(how _C_int) _C_int\n+\n func Reboot(how int) (err error) {\n \treturn reboot(how)\n }"}, {"sha": "5bd8e618dc2c6d3747bbaba63c6d0df6d0015bbd", "filename": "libgo/go/syscall/libcall_bsd.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build darwin || dragonfly || freebsd || netbsd || openbsd\n // +build darwin dragonfly freebsd netbsd openbsd\n \n // BSD library calls.\n@@ -53,6 +54,7 @@ func Accept4(fd, flags int) (nfd int, sa Sockaddr, err error) {\n \n //sysnb\tpipe2(p *[2]_C_int, flags int) (err error)\n //pipe2(p *[2]_C_int, flags _C_int) _C_int\n+\n func Pipe2(p []int, flags int) (err error) {\n \tif len(p) != 2 {\n \t\treturn EINVAL"}, {"sha": "4271f228c422b9a3c62f75b99beac55126449394", "filename": "libgo/go/syscall/libcall_bsd_largefile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_largefile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build (solaris && 386) || (solaris && sparc)\n // +build solaris,386 solaris,sparc\n \n package syscall"}, {"sha": "4f8656303c31b342c4af4558b4a5a78c64b8adb4", "filename": "libgo/go/syscall/libcall_bsd_regfile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_regfile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build darwin || dragonfly || freebsd || openbsd || (solaris && amd64) || (solaris && sparc64)\n // +build darwin dragonfly freebsd openbsd solaris,amd64 solaris,sparc64\n \n package syscall"}, {"sha": "8d4363998add8459cd8a903ffadc5eeb6bd7663c", "filename": "libgo/go/syscall/libcall_bsd_sendfile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_sendfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_sendfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_bsd_sendfile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build darwin || dragonfly || freebsd || openbsd || solaris\n // +build darwin dragonfly freebsd openbsd solaris\n \n // BSD sendfile support."}, {"sha": "5c1ec483c759f742dbd400dd396e1be09206ced8", "filename": "libgo/go/syscall/libcall_glibc.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -20,6 +20,7 @@ import (\n \n //sys\tfutimesat(dirfd int, path *byte, times *[2]Timeval) (err error)\n //futimesat(dirfd _C_int, path *byte, times *[2]Timeval) _C_int\n+\n func Futimesat(dirfd int, path string, tv []Timeval) (err error) {\n \tif len(tv) != 2 {\n \t\treturn EINVAL\n@@ -100,6 +101,7 @@ func ReadDirent(fd int, buf []byte) (n int, err error) {\n \n //sysnb\tpipe2(p *[2]_C_int, flags int) (err error)\n //pipe2(p *[2]_C_int, flags _C_int) _C_int\n+\n func Pipe2(p []int, flags int) (err error) {\n \tif len(p) != 2 {\n \t\treturn EINVAL\n@@ -113,6 +115,7 @@ func Pipe2(p []int, flags int) (err error) {\n \n //sys\tsendfile(outfd int, infd int, offset *Offset_t, count int) (written int, err error)\n //sendfile64(outfd _C_int, infd _C_int, offset *Offset_t, count Size_t) Ssize_t\n+\n func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {\n \tif race.Enabled {\n \t\trace.ReleaseMerge(unsafe.Pointer(&ioSync))"}, {"sha": "a29ddf57a682b3b7fc13157dcdedb7748b1a6512", "filename": "libgo/go/syscall/libcall_irix.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build irix\n // +build irix\n \n package syscall"}, {"sha": "7bec2fbaeb50339009d6f2734b461d9ea343a6af", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -146,6 +146,7 @@ func PtraceDetach(pid int) (err error) { return ptrace(PTRACE_DETACH, pid, 0, 0)\n \n //sys\treboot(magic1 uint, magic2 uint, cmd int, arg string) (err error)\n //reboot(magic1 _C_uint, magic2 _C_uint, cmd _C_int, arg *byte) _C_int\n+\n func Reboot(cmd int) (err error) {\n \treturn reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, \"\")\n }\n@@ -211,6 +212,7 @@ func Gettid() (tid int) {\n \n //sys\tsplice(rfd int, roff *_loff_t, wfd int, woff *_loff_t, len int, flags int) (n int64, err error)\n //splice(rfd _C_int, roff *_loff_t, wfd _C_int, woff *_loff_t, len Size_t, flags _C_uint) Ssize_t\n+\n func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {\n \tvar lroff _loff_t\n \tvar plroff *_loff_t"}, {"sha": "b5c2f58624bf4d214727598f984f105e76357f7f", "filename": "libgo/go/syscall/libcall_linux_utimesnano.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -13,6 +13,7 @@ import \"unsafe\"\n \n //sys\tutimensat(dirfd int, path string, times *[2]Timespec, flags int) (err error)\n //utimensat(dirfd _C_int, path *byte, times *[2]Timespec, flags _C_int) _C_int\n+\n func UtimesNano(path string, ts []Timespec) (err error) {\n \tif len(ts) != 2 {\n \t\treturn EINVAL"}, {"sha": "f8175e1b0de1af9b1857e50d52b2220d90f728ef", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -19,6 +19,7 @@ import \"unsafe\"\n \n //sysnb\tpipe(p *[2]_C_int) (err error)\n //pipe(p *[2]_C_int) _C_int\n+\n func Pipe(p []int) (err error) {\n \tif len(p) != 2 {\n \t\treturn EINVAL\n@@ -32,6 +33,7 @@ func Pipe(p []int) (err error) {\n \n //sys\tutimes(path string, times *[2]Timeval) (err error)\n //utimes(path *byte, times *[2]Timeval) _C_int\n+\n func Utimes(path string, tv []Timeval) (err error) {\n \tif len(tv) != 2 {\n \t\treturn EINVAL\n@@ -240,6 +242,7 @@ func FDZero(set *FdSet) {\n \n //sysnb\tgettimeofday(tv *Timeval, tz *byte) (err error)\n //gettimeofday(tv *Timeval, tz *byte) _C_int\n+\n func Gettimeofday(tv *Timeval) (err error) {\n \treturn gettimeofday(tv, nil)\n }"}, {"sha": "f90055bb29a0c969fe9c80809d49f5dc925dd790", "filename": "libgo/go/syscall/libcall_posix_largefile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_largefile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build aix || hurd || linux || (solaris && 386) || (solaris && sparc)\n // +build aix hurd linux solaris,386 solaris,sparc\n \n // POSIX library calls on systems which use the largefile interface."}, {"sha": "9c38f78f2f7c3ad5d46409f1074bd6d286511490", "filename": "libgo/go/syscall/libcall_posix_nonhurd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_nonhurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_nonhurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_nonhurd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !hurd\n // +build !hurd\n \n package syscall"}, {"sha": "f999bd773e2539f24000c0f39b1c128974c0fe43", "filename": "libgo/go/syscall/libcall_posix_regfile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_regfile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !aix && !hurd && !linux && (!solaris || !386) && (!solaris || !sparc)\n // +build !aix\n // +build !hurd\n // +build !linux"}, {"sha": "374ad93575496b2a59c582855656bfc1c4ba9bf3", "filename": "libgo/go/syscall/libcall_posix_utimesnano.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_utimesnano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_posix_utimesnano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix_utimesnano.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build aix || darwin || dragonfly || freebsd || hurd || openbsd || netbsd || solaris\n // +build aix darwin dragonfly freebsd hurd openbsd netbsd solaris\n \n // General POSIX version of UtimesNano."}, {"sha": "1b1af088355f40381c768f3d5387fd3a7ecc26a8", "filename": "libgo/go/syscall/libcall_solaris_largefile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_largefile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build (solaris && 386) || (solaris && sparc)\n // +build solaris,386 solaris,sparc\n \n package syscall"}, {"sha": "1ad7c7e8a0df99b431a823c88a0ce1cfe95b4411", "filename": "libgo/go/syscall/libcall_solaris_regfile.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_regfile.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build (solaris && amd64) || (solaris && sparc64)\n // +build solaris,amd64 solaris,sparc64\n \n package syscall"}, {"sha": "133849f853466ee763506078a5a13c3c03ebd307", "filename": "libgo/go/syscall/libcall_uname.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_uname.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_uname.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_uname.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n \n // Build on all systems other than solaris/386.\n // 32-bit Solaris 2/x86 needs _nuname, handled in libcall_solaris_386.go.\n+//go:build !386 || !solaris\n // +build !386 !solaris\n \n package syscall"}, {"sha": "0fa6c5d73e72644e65be7ff4111e55ca2b58f74f", "filename": "libgo/go/syscall/libcall_wait4.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_wait4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Flibcall_wait4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_wait4.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !aix\n // +build !aix\n \n // For systems with the wait4 library call."}, {"sha": "1300ccd5b09ee9a777f8fbdbade1cb6c05c8901f", "filename": "libgo/go/syscall/sleep_rtems.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsleep_rtems.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsleep_rtems.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsleep_rtems.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build rtems\n // +build rtems\n \n package syscall"}, {"sha": "dd5d6775a2962915a2e6a5ad5d54020bc8316ac6", "filename": "libgo/go/syscall/sleep_select.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsleep_select.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsleep_select.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsleep_select.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !rtems\n // +build !rtems\n \n package syscall"}, {"sha": "4dd203defe7b7b0ebc37493d4331affb46d01aa3", "filename": "libgo/go/syscall/socket_bsd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build darwin || dragonfly || freebsd || openbsd || netbsd\n // +build darwin dragonfly freebsd openbsd netbsd\n \n package syscall"}, {"sha": "1005c762b8b38ca0da14e2a08fc41ae07bca56eb", "filename": "libgo/go/syscall/socket_hurd.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_hurd.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -6,6 +6,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build hurd\n // +build hurd\n \n package syscall"}, {"sha": "ec6616163c5191cd0aae070c2af5279b65beb377", "filename": "libgo/go/syscall/socket_irix.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build irix\n // +build irix\n \n package syscall"}, {"sha": "6fc75cbed408ed35a0ee735a8f34cc8b4cee2e9c", "filename": "libgo/go/syscall/socket_linux_ppc64x_type.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_linux_ppc64x_type.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_linux_ppc64x_type.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_linux_ppc64x_type.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build (linux && ppc64) || (linux && ppc64le)\n // +build linux,ppc64 linux,ppc64le\n \n package syscall"}, {"sha": "af1e21831360b773e7711f2de10e67646b24a2c1", "filename": "libgo/go/syscall/socket_linux_type.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_linux_type.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_linux_type.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_linux_type.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,9 +4,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build linux\n-// +build !ppc64\n-// +build !ppc64le\n+//go:build linux && !ppc64 && !ppc64le\n+// +build linux,!ppc64,!ppc64le\n \n package syscall\n "}, {"sha": "27be890f4f1f58766fd3f7cf511a226e08522ccf", "filename": "libgo/go/syscall/socket_posix.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -4,6 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !solaris\n // +build !solaris\n \n package syscall"}, {"sha": "fe8088b950fffbb8fd636c6ce23772636aa6e31b", "filename": "libgo/go/syscall/socket_xnet.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -5,6 +5,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build solaris\n // +build solaris\n \n package syscall"}, {"sha": "d84480d2e4e09e0711ee0e3e7f74df9310b9a715", "filename": "libgo/go/syscall/syscall.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -23,7 +23,6 @@\n // That is also where updates required by new systems or versions\n // should be applied. See https://golang.org/s/go1.4-syscall for more\n // information.\n-//\n package syscall\n \n import \"unsafe\""}, {"sha": "68fe49521a5e8348bd5d24d3a0748b5c3dd1e948", "filename": "libgo/go/syscall/syscall_errno.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_errno.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_errno.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_errno.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -9,6 +9,7 @@ import \"internal/oserror\"\n // An Errno is an unsigned number describing an error condition.\n // It implements the error interface. The zero Errno is by convention\n // a non-error, so code to convert from Errno to error should use:\n+//\n //\terr = nil\n //\tif errno != 0 {\n //\t\terr = errno"}, {"sha": "a906fa5a42e961cd61e6a90db230063d54a0d3cf", "filename": "libgo/go/syscall/syscall_funcs.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build darwin || dragonfly || freebsd || hurd || linux || netbsd || openbsd || solaris\n // +build darwin dragonfly freebsd hurd linux netbsd openbsd solaris\n \n package syscall"}, {"sha": "11f12bd9ae3c6d305bfb5f2ed3509a7eb0ffa22a", "filename": "libgo/go/syscall/syscall_funcs_stubs.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build aix || rtems\n // +build aix rtems\n \n // These are stubs."}, {"sha": "b524bdfc56979ada582243336c9f1e1be0b3434b", "filename": "libgo/go/syscall/syscall_glibc.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_glibc.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build hurd || linux\n // +build hurd linux\n \n package syscall"}, {"sha": "c9c65229804c5df0c8501fbb4381d67dd5116c95", "filename": "libgo/go/syscall/syscall_js.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_js.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_js.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_js.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -41,6 +41,7 @@ const PathMax = 256\n // An Errno is an unsigned number describing an error condition.\n // It implements the error interface. The zero Errno is by convention\n // a non-error, so code to convert from Errno to error should use:\n+//\n //\terr = nil\n //\tif errno != 0 {\n //\t\terr = errno"}, {"sha": "bdf6135e09623fcaa642244084299c4d424d4ede", "filename": "libgo/go/syscall/syscall_linux.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d/libgo%2Fgo%2Fsyscall%2Fsyscall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_linux.go?ref=cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "patch": "@@ -19,13 +19,15 @@ package syscall\n // AllThreadsSyscall is unaware of any threads that are launched\n // explicitly by cgo linked code, so the function always returns\n // ENOTSUP in binaries that use cgo.\n+//\n //go:uintptrescapes\n func AllThreadsSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \treturn minus1, minus1, ENOTSUP\n }\n \n // AllThreadsSyscall6 is like AllThreadsSyscall, but extended to six\n // arguments.\n+//\n //go:uintptrescapes\n func AllThreadsSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n \treturn minus1, minus1, ENOTSUP"}]}