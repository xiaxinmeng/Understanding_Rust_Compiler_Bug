{"sha": "e59a1e40f318e53c11a069140e4380ca05dd75cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5YTFlNDBmMzE4ZTUzYzExYTA2OTE0MGU0MzgwY2EwNWRkNzVjZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-03-09T18:47:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-03-09T18:47:54Z"}, "message": "win32.cc (_Jv_platform_nanotime): New function.\n\n\t* win32.cc (_Jv_platform_nanotime): New function.\n\t* include/win32.h (_Jv_platform_nanotime): Declare.\n\t* posix.cc (_Jv_platform_nanotime): New function.\n\t* include/posix.h (_Jv_platform_nanotime): Declare.\n\t* java/lang/natSystem.cc (nanoTime): New method.\n\t* java/lang/System.java (nanoTime): Declare.\n\t* include/config.h.in, configure: Rebuilt.\n\t* configure.ac: Check for clock_gettime.\n\nFrom-SVN: r111869", "tree": {"sha": "744b26f2524a58c1a0d12f1c85353fc349623374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/744b26f2524a58c1a0d12f1c85353fc349623374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e59a1e40f318e53c11a069140e4380ca05dd75cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59a1e40f318e53c11a069140e4380ca05dd75cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59a1e40f318e53c11a069140e4380ca05dd75cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59a1e40f318e53c11a069140e4380ca05dd75cd/comments", "author": null, "committer": null, "parents": [{"sha": "cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf"}], "stats": {"total": 173, "additions": 167, "deletions": 6}, "files": [{"sha": "64df6b69ba7c32fc12428d798d88051a731d54f2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,3 +1,14 @@\n+2006-03-09  Tom Tromey  <tromey@redhat.com>\n+\n+\t* win32.cc (_Jv_platform_nanotime): New function.\n+\t* include/win32.h (_Jv_platform_nanotime): Declare.\n+\t* posix.cc (_Jv_platform_nanotime): New function.\n+\t* include/posix.h (_Jv_platform_nanotime): Declare.\n+\t* java/lang/natSystem.cc (nanoTime): New method.\n+\t* java/lang/System.java (nanoTime): Declare.\n+\t* include/config.h.in, configure: Rebuilt.\n+\t* configure.ac: Check for clock_gettime.\n+\n 2006-03-08  David Daney  <ddaney@avtrex.com>\n \n \t* configure.ac (LD): Add AC_CHECK_TOOL for ld."}, {"sha": "40f77af9a01a0ab52f968e3a2840ca7b5a7248ad", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -469,7 +469,10 @@ JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@\n JAVA_HOME_SET_TRUE = @JAVA_HOME_SET_TRUE@\n JC1GCSPEC = @JC1GCSPEC@\n+LD = @LD@\n LDFLAGS = @LDFLAGS@\n+LD_FINISH_STATIC_SPEC = @LD_FINISH_STATIC_SPEC@\n+LD_START_STATIC_SPEC = @LD_START_STATIC_SPEC@\n LIBART_CFLAGS = @LIBART_CFLAGS@\n LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n@@ -562,6 +565,7 @@ ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_GCJ = @ac_ct_GCJ@\n+ac_ct_LD = @ac_ct_LD@\n ac_ct_RANLIB = @ac_ct_RANLIB@\n ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@"}, {"sha": "91e7318868d31a289e2c5421e79d7ba003e168d7", "filename": "libjava/configure", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -12377,6 +12377,90 @@ fi\n fi\n done\n \n+\n+      echo \"$as_me:$LINENO: checking for clock_gettime in -lrt\" >&5\n+echo $ECHO_N \"checking for clock_gettime in -lrt... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_rt_clock_gettime+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lrt  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char clock_gettime ();\n+int\n+main ()\n+{\n+clock_gettime ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_rt_clock_gettime=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_rt_clock_gettime=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_rt_clock_gettime\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_rt_clock_gettime\" >&6\n+if test $ac_cv_lib_rt_clock_gettime = yes; then\n+\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_CLOCK_GETTIME 1\n+_ACEOF\n+\n+\t case \"$THREADSPEC\" in\n+\t   *-lrt*) ;;\n+\t   *) THREADSPEC=\"$THREADSPEC -lrt\" ;;\n+\t esac\n+fi\n+\n+\n       LIBS=\"$save_LIBS\"\n \n       # We can save a little space at runtime if the mutex has m_count"}, {"sha": "5816efec28df0b81588993ee5e99f8e4dd250768", "filename": "libjava/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1016,6 +1016,14 @@ else\n \t    AC_DEFINE(HAVE_SCHED_YIELD)\n \t    THREADLIBS=\"$THREADLIBS -lposix4\"\n \t    THREADSPEC=\"$THREADSPEC -lposix4\"])])])\n+\n+      AC_CHECK_LIB(rt, clock_gettime, [\n+         AC_DEFINE(HAVE_CLOCK_GETTIME, 1, [Define if you have clock_gettime()])\n+\t case \"$THREADSPEC\" in\n+\t   *-lrt*) ;;\n+\t   *) THREADSPEC=\"$THREADSPEC -lrt\" ;;\n+\t esac])\n+\n       LIBS=\"$save_LIBS\"\n \n       # We can save a little space at runtime if the mutex has m_count"}, {"sha": "9f4998cec6e598fbbe3bed73c8d333b8336c7978", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -142,7 +142,10 @@ JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@\n JAVA_HOME_SET_TRUE = @JAVA_HOME_SET_TRUE@\n JC1GCSPEC = @JC1GCSPEC@\n+LD = @LD@\n LDFLAGS = @LDFLAGS@\n+LD_FINISH_STATIC_SPEC = @LD_FINISH_STATIC_SPEC@\n+LD_START_STATIC_SPEC = @LD_START_STATIC_SPEC@\n LIBART_CFLAGS = @LIBART_CFLAGS@\n LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n@@ -235,6 +238,7 @@ ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_GCJ = @ac_ct_GCJ@\n+ac_ct_LD = @ac_ct_LD@\n ac_ct_RANLIB = @ac_ct_RANLIB@\n ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@"}, {"sha": "f5bea2fa682170f9e2a265c6d309bf57e9fd2fc9", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -141,7 +141,10 @@ JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@\n JAVA_HOME_SET_TRUE = @JAVA_HOME_SET_TRUE@\n JC1GCSPEC = @JC1GCSPEC@\n+LD = @LD@\n LDFLAGS = @LDFLAGS@\n+LD_FINISH_STATIC_SPEC = @LD_FINISH_STATIC_SPEC@\n+LD_START_STATIC_SPEC = @LD_START_STATIC_SPEC@\n LIBART_CFLAGS = @LIBART_CFLAGS@\n LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n@@ -234,6 +237,7 @@ ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_GCJ = @ac_ct_GCJ@\n+ac_ct_LD = @ac_ct_LD@\n ac_ct_RANLIB = @ac_ct_RANLIB@\n ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@"}, {"sha": "891a713e2140341fa2730bec6ccfe2ce5ef1740c", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -61,6 +61,9 @@\n /* Define to 1 if you have the `chmod' function. */\n #undef HAVE_CHMOD\n \n+/* Define if you have clock_gettime() */\n+#undef HAVE_CLOCK_GETTIME\n+\n /* Define to 1 if you have the <dirent.h> header file. */\n #undef HAVE_DIRENT_H\n "}, {"sha": "4ceb0081a184f5193840de3f3a0de712615f39b2", "filename": "libjava/include/posix.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,6 +1,6 @@\n // posix.h -- Helper functions for POSIX-flavored OSs.\n \n-/* Copyright (C) 2000, 2002, 2003  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2003, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -79,6 +79,7 @@ details.  */\n \n extern int _Jv_select (int n, fd_set *, fd_set *, fd_set *, struct timeval *);\n extern jlong _Jv_platform_gettimeofday ();\n+extern jlong _Jv_platform_nanotime ();\n extern void _Jv_platform_initialize (void);\n extern void _Jv_platform_initProperties (java::util::Properties*);\n "}, {"sha": "3e2beabe5d350403f5de508fb165326e783db661", "filename": "libjava/include/win32.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,6 +1,6 @@\n // win32.h -- Helper functions for Microsoft-flavored OSs.\n \n-/* Copyright (C) 2002, 2003  Free Software Foundation\n+/* Copyright (C) 2002, 2003, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -154,6 +154,7 @@ _Jv_ThrowSocketException ();\n extern void _Jv_platform_initialize (void);\n extern void _Jv_platform_initProperties (java::util::Properties*);\n extern jlong _Jv_platform_gettimeofday ();\n+extern jlong _Jv_platform_nanotime ();\n extern int _Jv_pipe (int filedes[2]);\n \n extern void"}, {"sha": "8ba0e8960cbc4862ac4ce6623c1eef66150fc4b9", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,5 +1,5 @@\n /* System.java -- useful methods to interface with the system\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -207,6 +207,15 @@ public static SecurityManager getSecurityManager()\n    */\n   public static native long currentTimeMillis();\n \n+  /**\n+   * Get the current time, measured in nanoseconds.  The result is as\n+   * precise as possible, and is measured against a fixed epoch.\n+   * However, unlike currentTimeMillis(), the epoch chosen is\n+   * arbitrary and may vary by platform, etc.\n+   * @since 1.5\n+   */\n+  public static native long nanoTime();\n+\n   /**\n    * Copy one array onto another from <code>src[srcStart]</code> ...\n    * <code>src[srcStart+len-1]</code> to <code>dest[destStart]</code> ..."}, {"sha": "42a13258daff639e51ec4537dd6c34e6befd0901", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,6 +1,6 @@\n // natSystem.cc - Native code implementing System class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2006 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -124,6 +124,12 @@ java::lang::System::currentTimeMillis (void)\n   return _Jv_platform_gettimeofday ();\n }\n \n+jlong\n+java::lang::System::nanoTime ()\n+{\n+  return _Jv_platform_nanotime ();\n+}\n+\n jint\n java::lang::System::identityHashCode (jobject obj)\n {"}, {"sha": "15fc9c5c3f85fdc58c4c0a5797ac8d5a6532d2f2", "filename": "libjava/posix.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,6 +1,6 @@\n // posix.cc -- Helper functions for POSIX-flavored OSs.\n \n-/* Copyright (C) 2000, 2001, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2001, 2002, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -66,6 +66,22 @@ _Jv_platform_gettimeofday ()\n #endif\n }\n \n+jlong\n+_Jv_platform_nanotime ()\n+{\n+#ifdef HAVE_CLOCK_GETTIME\n+  struct timespec now;\n+  if (clock_gettime (CLOCK_REALTIME, &now) == 0)\n+    {\n+      jlong result = (jlong) now.tv_sec;\n+      result = result * 1000 * 1000 + now.tv_nsec;\n+      return result;\n+    }\n+  // clock_gettime failed, but we can fall through.\n+#endif // HAVE_CLOCK_GETTIME\n+  return _Jv_platform_gettimeofday () * 1000LL;\n+}\n+\n // Platform-specific VM initialization.\n void\n _Jv_platform_initialize (void)"}, {"sha": "4922a3355567c5af021c012dbb49b413a6425dce", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -130,7 +130,10 @@ JAVA_HOME = @JAVA_HOME@\n JAVA_HOME_SET_FALSE = @JAVA_HOME_SET_FALSE@\n JAVA_HOME_SET_TRUE = @JAVA_HOME_SET_TRUE@\n JC1GCSPEC = @JC1GCSPEC@\n+LD = @LD@\n LDFLAGS = @LDFLAGS@\n+LD_FINISH_STATIC_SPEC = @LD_FINISH_STATIC_SPEC@\n+LD_START_STATIC_SPEC = @LD_START_STATIC_SPEC@\n LIBART_CFLAGS = @LIBART_CFLAGS@\n LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n@@ -223,6 +226,7 @@ ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_GCJ = @ac_ct_GCJ@\n+ac_ct_LD = @ac_ct_LD@\n ac_ct_RANLIB = @ac_ct_RANLIB@\n ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@"}, {"sha": "a0ae0f0f9cb52c1c7097f5d863fe26c5e36a22ac", "filename": "libjava/win32.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59a1e40f318e53c11a069140e4380ca05dd75cd/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=e59a1e40f318e53c11a069140e4380ca05dd75cd", "patch": "@@ -1,6 +1,6 @@\n // win32.cc - Helper functions for Microsoft-flavored OSs.\n \n-/* Copyright (C) 2002, 2003  Free Software Foundation\n+/* Copyright (C) 2002, 2003, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -279,6 +279,12 @@ _Jv_platform_gettimeofday ()\n   return t.time * 1000LL + t.millitm;\n }\n \n+jlong\n+_Jv_platform_nanotime ()\n+{\n+  return _Jv_platform_gettimeofday () * 1000LL;\n+}\n+\n // The following definitions \"fake out\" mingw to think that -mthreads\n // was enabled and that mingwthr.dll was linked. GCJ-compiled\n // applications don't need this helper library because we can safely"}]}