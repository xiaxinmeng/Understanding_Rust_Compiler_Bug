{"sha": "97268c374a348a60c53366a4bee67626c840e4a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcyNjhjMzc0YTM0OGE2MGM1MzM2NmE0YmVlNjc2MjZjODQwZTRhMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T16:49:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-04T16:49:52Z"}, "message": "c++: Simplify process_template_parm\n\nProcess_template_parm ends up walking the parameter list twice.\nThere's not need to do this.  Just rember the final node and modify\nits CHAIN directly.  Also comment on why end_template_parm_list does a\npop and a push, rather than modifying the header in place.\n\n\tpt.c (process_template_parm): Don't walk the template list twice,\n\tremember the final node instead.\n\t(end_template_parm_list): Refactor.  Comment on why we do a pop\n\tand a push.", "tree": {"sha": "a3c16ad18bf78578e36e74665e41ed27c298483f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3c16ad18bf78578e36e74665e41ed27c298483f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97268c374a348a60c53366a4bee67626c840e4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97268c374a348a60c53366a4bee67626c840e4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97268c374a348a60c53366a4bee67626c840e4a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97268c374a348a60c53366a4bee67626c840e4a1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1621d18f5517977c161f0fb29c54b4ef7d8245c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1621d18f5517977c161f0fb29c54b4ef7d8245c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1621d18f5517977c161f0fb29c54b4ef7d8245c"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "334899d49fb0ea2593d65b06fa6d71bd9c290402", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97268c374a348a60c53366a4bee67626c840e4a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97268c374a348a60c53366a4bee67626c840e4a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=97268c374a348a60c53366a4bee67626c840e4a1", "patch": "@@ -1,5 +1,10 @@\n 2020-05-04  Nathan Sidwell  <nathan@acm.org>\n \n+\tpt.c (process_template_parm): Don't walk the template list twice,\n+\tremember the final node instead.\n+\t(end_template_parm_list): Refactor.  Comment on why we do a pop\n+\tand a push.\n+\n \tPR c++/94827 -- don't save parms in nested requirement\n \t* constraint.cc (tsubst_nested_requirement): TYPE directly holds\n \tnotmalized requirement."}, {"sha": "61cb75bf801e07875e28fe0ebc5140353a15deed", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97268c374a348a60c53366a4bee67626c840e4a1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97268c374a348a60c53366a4bee67626c840e4a1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=97268c374a348a60c53366a4bee67626c840e4a1", "patch": "@@ -4496,29 +4496,27 @@ tree\n process_template_parm (tree list, location_t parm_loc, tree parm,\n \t\t       bool is_non_type, bool is_parameter_pack)\n {\n-  tree decl = 0;\n-  int idx = 0;\n-\n   gcc_assert (TREE_CODE (parm) == TREE_LIST);\n-  tree defval = TREE_PURPOSE (parm);\n-  tree constr = TREE_TYPE (parm);\n+  tree prev = NULL_TREE;\n+  int idx = 0;\n \n   if (list)\n     {\n-      tree p = tree_last (list);\n+      prev = tree_last (list);\n \n-      if (p && TREE_VALUE (p) != error_mark_node)\n-        {\n-          p = TREE_VALUE (p);\n-          if (TREE_CODE (p) == TYPE_DECL || TREE_CODE (p) == TEMPLATE_DECL)\n-            idx = TEMPLATE_TYPE_IDX (TREE_TYPE (p));\n-          else\n-            idx = TEMPLATE_PARM_IDX (DECL_INITIAL (p));\n-        }\n+      tree p = TREE_VALUE (prev);\n+      if (TREE_CODE (p) == TYPE_DECL || TREE_CODE (p) == TEMPLATE_DECL)\n+\tidx = TEMPLATE_TYPE_IDX (TREE_TYPE (p));\n+      else if (TREE_CODE (p) == PARM_DECL)\n+\tidx = TEMPLATE_PARM_IDX (DECL_INITIAL (p));\n \n       ++idx;\n     }\n \n+  tree decl = NULL_TREE;\n+  tree defval = TREE_PURPOSE (parm);\n+  tree constr = TREE_TYPE (parm);\n+\n   if (is_non_type)\n     {\n       parm = TREE_VALUE (parm);\n@@ -4616,7 +4614,12 @@ process_template_parm (tree list, location_t parm_loc, tree parm,\n   parm = build_tree_list (defval, parm);\n   TEMPLATE_PARM_CONSTRAINTS (parm) = reqs;\n \n-  return chainon (list, parm);\n+  if (prev)\n+    TREE_CHAIN (prev) = parm;\n+  else\n+    list = parm;\n+\n+  return list;\n }\n \n /* The end of a template parameter list has been reached.  Process the\n@@ -4627,22 +4630,24 @@ process_template_parm (tree list, location_t parm_loc, tree parm,\n tree\n end_template_parm_list (tree parms)\n {\n-  int nparms;\n-  tree parm, next;\n   tree saved_parmlist = make_tree_vec (list_length (parms));\n \n-  /* Pop the dummy parameter level and add the real one.  */\n+  /* Pop the dummy parameter level and add the real one.  We do not\n+     morph the dummy parameter in place, as it might have been\n+     captured by a (nested) template-template-parm.  */\n   current_template_parms = TREE_CHAIN (current_template_parms);\n \n   current_template_parms\n     = tree_cons (size_int (processing_template_decl),\n \t\t saved_parmlist, current_template_parms);\n \n-  for (parm = parms, nparms = 0; parm; parm = next, nparms++)\n+  for (unsigned ix = 0; parms; ix++)\n     {\n-      next = TREE_CHAIN (parm);\n-      TREE_VEC_ELT (saved_parmlist, nparms) = parm;\n+      tree parm = parms;\n+      parms = TREE_CHAIN (parms);\n       TREE_CHAIN (parm) = NULL_TREE;\n+\n+      TREE_VEC_ELT (saved_parmlist, ix) = parm;\n     }\n \n   --processing_template_parmlist;"}]}