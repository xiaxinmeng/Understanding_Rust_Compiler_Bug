{"sha": "9e148ceb90467f15aedd11194a071489810e9c0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxNDhjZWI5MDQ2N2YxNWFlZGQxMTE5NGEwNzE0ODk4MTBlOWMwZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-04-24T03:09:29Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-04-24T03:09:29Z"}, "message": "Use push_operand to check for changes to the stack pointer\n\nFrom-SVN: r13975", "tree": {"sha": "e1a6406128b0a09ca4a34d5333fbb96c0ecaa1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a6406128b0a09ca4a34d5333fbb96c0ecaa1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e148ceb90467f15aedd11194a071489810e9c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e148ceb90467f15aedd11194a071489810e9c0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e148ceb90467f15aedd11194a071489810e9c0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e148ceb90467f15aedd11194a071489810e9c0f/comments", "author": null, "committer": null, "parents": [{"sha": "173cd503de58534f6192be7efb0a43ba1450a0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173cd503de58534f6192be7efb0a43ba1450a0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173cd503de58534f6192be7efb0a43ba1450a0f1"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "2054edf28578c374d09d888498deb231fb748171", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e148ceb90467f15aedd11194a071489810e9c0f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e148ceb90467f15aedd11194a071489810e9c0f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9e148ceb90467f15aedd11194a071489810e9c0f", "patch": "@@ -7600,7 +7600,7 @@ reload_cse_invalidate_regno (regno, mode, clobber)\n       for (x = reg_values[i]; x; x = XEXP (x, 1))\n \t{\n \t  if (XEXP (x, 0) != 0\n-\t      && refers_to_regno_p (regno, endregno, XEXP (x, 0), NULL_RTX))\n+\t      && refers_to_regno_p (regno, endregno, XEXP (x, 0), NULL_PTR))\n \t    {\n \t      /* If this is the only entry on the list, clear\n                  reg_values[i].  Otherwise, just clear this entry on\n@@ -8186,7 +8186,7 @@ reload_cse_record_set (set, body)\n      rtx set;\n      rtx body;\n {\n-  rtx dest, src;\n+  rtx dest, src, x;\n   int dreg, sreg;\n   enum machine_mode dest_mode;\n \n@@ -8196,6 +8196,23 @@ reload_cse_record_set (set, body)\n   sreg = true_regnum (src);\n   dest_mode = GET_MODE (dest);\n \n+  /* Some machines don't define AUTO_INC_DEC, but they still use push\n+     instructions.  We need to catch that case here in order to\n+     invalidate the stack pointer correctly.  Note that invalidating\n+     the stack pointer is different from invalidating DEST.  */\n+  x = dest;\n+  while (GET_CODE (x) == SUBREG\n+\t || GET_CODE (x) == ZERO_EXTRACT\n+\t || GET_CODE (x) == SIGN_EXTRACT\n+\t || GET_CODE (x) == STRICT_LOW_PART)\n+    x = XEXP (x, 0);\n+  if (push_operand (x, GET_MODE (x)))\n+    {\n+      reload_cse_invalidate_rtx (stack_pointer_rtx, NULL_RTX);\n+      reload_cse_invalidate_rtx (dest, NULL_RTX);\n+      return;\n+    }\n+\n   /* We can only handle an assignment to a register, or a store of a\n      register to a memory location.  For other cases, we just clobber\n      the destination.  We also have to just clobber if there are side"}]}