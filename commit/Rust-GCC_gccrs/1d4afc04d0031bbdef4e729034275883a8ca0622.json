{"sha": "1d4afc04d0031bbdef4e729034275883a8ca0622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0YWZjMDRkMDAzMWJiZGVmNGU3MjkwMzQyNzU4ODNhOGNhMDYyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-02T13:44:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-02T13:44:41Z"}, "message": "re PR c/59218 (atomic transactions: accesses to volatiles not disallowed in transaction_safe code)\n\n\tPR c/59218\n\n\t* trans-mem.c (volatile_lvalue_p): Rename from volatile_var_p.\n\t(diagnose_tm_1_op): Also diagnose volatile accesses in\n\ttransaction_safe function.\n\nFrom-SVN: r228392", "tree": {"sha": "b5daceaf605c188f868a257193358864e67d69f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5daceaf605c188f868a257193358864e67d69f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4afc04d0031bbdef4e729034275883a8ca0622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4afc04d0031bbdef4e729034275883a8ca0622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4afc04d0031bbdef4e729034275883a8ca0622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4afc04d0031bbdef4e729034275883a8ca0622/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f62fa6d6945b3f11739f5fe1a3571f2021fa3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f62fa6d6945b3f11739f5fe1a3571f2021fa3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f62fa6d6945b3f11739f5fe1a3571f2021fa3a0"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "d251f1d7958fe33a014cc21e9e29c6b6af74b0b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d4afc04d0031bbdef4e729034275883a8ca0622", "patch": "@@ -1,3 +1,10 @@\n+2015-10-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c/59218\n+\t* trans-mem.c (volatile_lvalue_p): Rename from volatile_var_p.\n+\t(diagnose_tm_1_op): Also diagnose volatile accesses in\n+\ttransaction_safe function.\n+\n 2015-10-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* system.h (malloc.h): Don't include obsolete header."}, {"sha": "eb3799dd97232f75bb6d50166f4f0c2b29ba3e1d", "filename": "gcc/testsuite/c-c++-common/tm/volatile-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c?ref=1d4afc04d0031bbdef4e729034275883a8ca0622", "patch": "@@ -0,0 +1,10 @@\n+// Transaction-unsafe testcase from TM TS.\n+// { dg-options -fgnu-tm }\n+\n+volatile int * p = 0;\n+__attribute ((transaction_safe))\n+int f() {\n+  int x = 0;\t     // ok: not volatile\n+  p = &x;\t     // ok: the pointer is not volatile\n+  int i = *p;\t     // { dg-error \"volatile\" \"read through volatile glvalue\" }\n+}"}, {"sha": "563474eaf686ec8b2b187dfd49d5aecfda9f1400", "filename": "gcc/testsuite/gcc.dg/tm/pr46654.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr46654.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr46654.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr46654.c?ref=1d4afc04d0031bbdef4e729034275883a8ca0622", "patch": "@@ -7,7 +7,7 @@ int y;\n void foo(volatile int x)\n {\n   __transaction_atomic {\n-    x = 5; /* { dg-error \"invalid volatile use of 'x' inside transaction\" } */\n+    x = 5; /* { dg-error \"invalid use of volatile lvalue inside transaction\" } */\n     x += y;\n     y++;\n   }\n@@ -20,7 +20,7 @@ volatile int i = 0;\n void george()\n {\n   __transaction_atomic {\n-   if (i == 2) /* { dg-error \"invalid volatile use of 'i' inside transaction\" } */\n+   if (i == 2) /* { dg-error \"invalid use of volatile lvalue inside transaction\" } */\n      i = 1;\n   }\n }"}, {"sha": "488c20e4c648d84961617ddd2eadb4a3af4839d2", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4afc04d0031bbdef4e729034275883a8ca0622/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=1d4afc04d0031bbdef4e729034275883a8ca0622", "patch": "@@ -594,32 +594,36 @@ struct diagnose_tm\n   gimple *stmt;\n };\n \n-/* Return true if T is a volatile variable of some kind.  */\n+/* Return true if T is a volatile lvalue of some kind.  */\n \n static bool\n-volatile_var_p (tree t)\n+volatile_lvalue_p (tree t)\n {\n-  return (SSA_VAR_P (t)\n+  return ((SSA_VAR_P (t) || REFERENCE_CLASS_P (t))\n \t  && TREE_THIS_VOLATILE (TREE_TYPE (t)));\n }\n \n /* Tree callback function for diagnose_tm pass.  */\n \n static tree\n-diagnose_tm_1_op (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t  void *data)\n+diagnose_tm_1_op (tree *tp, int *walk_subtrees, void *data)\n {\n   struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n   struct diagnose_tm *d = (struct diagnose_tm *) wi->info;\n \n-  if (volatile_var_p (*tp)\n-      && d->block_flags & DIAG_TM_SAFE\n-      && !d->saw_volatile)\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = false;\n+  else if (volatile_lvalue_p (*tp)\n+\t   && !d->saw_volatile)\n     {\n       d->saw_volatile = 1;\n-      error_at (gimple_location (d->stmt),\n-\t\t\"invalid volatile use of %qD inside transaction\",\n-\t\t*tp);\n+      if (d->block_flags & DIAG_TM_SAFE)\n+\terror_at (gimple_location (d->stmt),\n+\t\t  \"invalid use of volatile lvalue inside transaction\");\n+      else if (d->func_flags & DIAG_TM_SAFE)\n+\terror_at (gimple_location (d->stmt),\n+\t\t  \"invalid use of volatile lvalue inside %<transaction_safe%>\"\n+\t\t  \"function\");\n     }\n \n   return NULL_TREE;\n@@ -4298,15 +4302,15 @@ ipa_tm_scan_irr_block (basic_block bb)\n \t    {\n \t      tree lhs = gimple_assign_lhs (stmt);\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n-\t      if (volatile_var_p (lhs) || volatile_var_p (rhs))\n+\t      if (volatile_lvalue_p (lhs) || volatile_lvalue_p (rhs))\n \t\treturn true;\n \t    }\n \t  break;\n \n \tcase GIMPLE_CALL:\n \t  {\n \t    tree lhs = gimple_call_lhs (stmt);\n-\t    if (lhs && volatile_var_p (lhs))\n+\t    if (lhs && volatile_lvalue_p (lhs))\n \t      return true;\n \n \t    if (is_tm_pure_call (stmt))"}]}