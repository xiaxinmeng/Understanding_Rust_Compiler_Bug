{"sha": "519196a27cf534e94f158733b25a4f9d10737031", "node_id": "C_kwDOANBUbNoAKDUxOTE5NmEyN2NmNTM0ZTk0ZjE1ODczM2IyNWE0ZjlkMTA3MzcwMzE", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2022-09-21T09:06:19Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2022-09-21T09:15:21Z"}, "message": "Fortran: handle RADIX kind in IEEE_SET_ROUNDING_MODE\n\nMake sure that calling IEEE_SET_ROUNDING_MODE with RADIX=10 does not\naffect the binary rounding mode.\n\n2022-09-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\nlibgfortran/\n\n\t* ieee/ieee_arithmetic.F90 (IEEE_SET_ROUNDING_MODE): Handle\n\tRADIX argument better.\n\ngcc/testsuite/\n\n\t* gfortran.dg/ieee/rounding_3.f90: New test.", "tree": {"sha": "5975060cec8fbe5e33d55feeb6d0f24175d480da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5975060cec8fbe5e33d55feeb6d0f24175d480da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519196a27cf534e94f158733b25a4f9d10737031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519196a27cf534e94f158733b25a4f9d10737031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519196a27cf534e94f158733b25a4f9d10737031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519196a27cf534e94f158733b25a4f9d10737031/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9e5f4db2debf1429feab7f785962ccef6e0dbd"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "ff4e834a0429e19e1fc78b57b05b6ab359911af8", "filename": "gcc/testsuite/gfortran.dg/ieee/rounding_3.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519196a27cf534e94f158733b25a4f9d10737031/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519196a27cf534e94f158733b25a4f9d10737031/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Frounding_3.f90?ref=519196a27cf534e94f158733b25a4f9d10737031", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+\n+  ! Test IEEE_GET_ROUNDING_MODE and IEEE_SET_ROUNDING_MODE\n+  ! with a RADIX argument\n+  use, intrinsic :: ieee_arithmetic\n+  implicit none\n+\n+  real :: sx1\n+  type(ieee_round_type) :: r\n+\n+  if (ieee_support_rounding(ieee_up, sx1) .and. &\n+      ieee_support_rounding(ieee_down, sx1)) then\n+\n+    call ieee_set_rounding_mode(ieee_up)\n+    call ieee_get_rounding_mode(r)\n+    if (r /= ieee_up) stop 1\n+\n+    call ieee_set_rounding_mode(ieee_down, radix=2)\n+    call ieee_get_rounding_mode(r, radix=2)\n+    if (r /= ieee_down) stop 2\n+\n+    call ieee_set_rounding_mode(ieee_up, radix=10)\n+    call ieee_get_rounding_mode(r, radix=2)\n+    if (r /= ieee_down) stop 3\n+  end if\n+\n+end"}, {"sha": "4c8e3bb5e64e4b74f0db8fb2b08c5448e243fc8e", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519196a27cf534e94f158733b25a4f9d10737031/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519196a27cf534e94f158733b25a4f9d10737031/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=519196a27cf534e94f158733b25a4f9d10737031", "patch": "@@ -816,7 +816,7 @@ module IEEE_ARITHMETIC\n                      IEEE_SUPPORT_ROUNDING_NOARG\n   end interface\n   public :: IEEE_SUPPORT_ROUNDING\n-  \n+\n   ! Interface to the FPU-specific function\n   interface\n     pure integer function support_rounding_helper(flag) &\n@@ -839,7 +839,7 @@ pure integer function support_rounding_helper(flag) &\n                      IEEE_SUPPORT_UNDERFLOW_CONTROL_NOARG\n   end interface\n   public :: IEEE_SUPPORT_UNDERFLOW_CONTROL\n-  \n+\n   ! Interface to the FPU-specific function\n   interface\n     pure integer function support_underflow_control_helper(kind) &\n@@ -1074,7 +1074,13 @@ subroutine helper(val) &\n         integer, value :: val\n       end subroutine\n     end interface\n-    \n+\n+    ! We do not support RADIX = 10, and such calls should not\n+    ! modify the binary rounding mode.\n+    if (present(RADIX)) then\n+      if (RADIX == 10) return\n+    end if\n+\n     call helper(ROUND_VALUE%hidden)\n   end subroutine\n "}]}