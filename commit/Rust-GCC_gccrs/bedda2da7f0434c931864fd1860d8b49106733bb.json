{"sha": "bedda2da7f0434c931864fd1860d8b49106733bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkZGEyZGE3ZjA0MzRjOTMxODY0ZmQxODYwZDhiNDkxMDY3MzNiYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-06T00:51:25Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-06T00:51:25Z"}, "message": "final.c (final): Use xcalloc to allocate line_note_exists.\n\n\t* final.c (final): Use xcalloc to allocate line_note_exists.\n\t* function.c (free_after_compilation): Free the temp_slots.\n\t(assign_stack_temp_for_type): Use xmalloc to allocate temp_slots.\n\t(combine_temp_slot): Free temp_slots when they get combined.\n\t(purge_addressof): Fix typo in comment.\n\t* stmt.c (mark_goto_fixup): Mark the fixup itself.\n\t(expand_fixup): Allocate the fixup with ggc_alloc_obj.\n\n\t* ggc.h: Include varray.h.\n\t(ggc_pending_trees): Declare.\n\t(ggc_mark_tree_children): Remove declaration.\n\t(ggc_mark_tree): Just push unmarked trees on ggc_pending_trees.\n\t* ggc-common.c (ggc_pending_trees): New variable.\n\t(ggc_mark_roots): Call ggc_mark_trees.\n\t(ggc_mark_tree_children): Rename to ggc_mark_trees.  Process all\n\tthe ggc_pending_trees.\n\t* Makefile.in (GGC_H): New variable.  Use it throughout in place\n\tof ggc.h.\n\n\t* Makefile.in (GGC_H): New variable.  Use it throughout in place\n\tof ggc.h.\n\n\t* call.c: Don't include obstack.h.  Include ggc.h.\n\t(obstack_chunk_alloc): Don't define.\n\t(obstack_chunk_free): Likewise.\n\t(add_candidate): Allocate the z_candidate with ggc_alloc_obj.\n\t* decl.c (push_switch): Use xmalloc to allocate the cp_switch.\n\t(pop_switch): Free it.\n\n\t* decl2.c (grokclassfn): Set TREE_READONLY for PARM_DECLs.\n\n\t* dump.c (dequeue_and_dump): Don't try to print the bit_position\n\tif we don't have a DECL_FIELD_OFFSET.\n\n\t* Makefile.in (GGC_H): Add varray.h.\n\nFrom-SVN: r32956", "tree": {"sha": "e86a0b0c8611c92ba993e13102ca5e6b62015c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86a0b0c8611c92ba993e13102ca5e6b62015c94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedda2da7f0434c931864fd1860d8b49106733bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedda2da7f0434c931864fd1860d8b49106733bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedda2da7f0434c931864fd1860d8b49106733bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedda2da7f0434c931864fd1860d8b49106733bb/comments", "author": null, "committer": null, "parents": [{"sha": "e0fc4118fea69036438dc790c529a68e183f24fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fc4118fea69036438dc790c529a68e183f24fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fc4118fea69036438dc790c529a68e183f24fe"}], "stats": {"total": 504, "additions": 292, "deletions": 212}, "files": [{"sha": "8e2f503537050b5acd32ddac4602de7a97646bab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1,3 +1,24 @@\n+2000-04-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* final.c (final): Use xcalloc to allocate line_note_exists.\n+\t* function.c (free_after_compilation): Free the temp_slots.\n+\t(assign_stack_temp_for_type): Use xmalloc to allocate temp_slots.\n+\t(combine_temp_slot): Free temp_slots when they get combined.\n+\t(purge_addressof): Fix typo in comment.\n+\t* stmt.c (mark_goto_fixup): Mark the fixup itself.\n+\t(expand_fixup): Allocate the fixup with ggc_alloc_obj.\n+\n+\t* ggc.h: Include varray.h.\n+\t(ggc_pending_trees): Declare.\n+\t(ggc_mark_tree_children): Remove declaration.\n+\t(ggc_mark_tree): Just push unmarked trees on ggc_pending_trees.\n+\t* ggc-common.c (ggc_pending_trees): New variable.\n+\t(ggc_mark_roots): Call ggc_mark_trees.\n+\t(ggc_mark_tree_children): Rename to ggc_mark_trees.  Process all\n+\tthe ggc_pending_trees.\n+\t* Makefile.in (GGC_H): New variable.  Use it throughout in place\n+\tof ggc.h.\n+\t\n Thu Apr  6 00:30:50 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (FUNCTION_ARG_PARTIAL_NREGS): Accomodate an unsigned"}, {"sha": "7bf0ba194c761bfa487f8ec58d1f3647ce9a8727", "filename": "gcc/Makefile.in", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -762,6 +762,7 @@ REGS_H = regs.h varray.h $(MACHMODE_H)\n INTEGRATE_H = integrate.h varray.h\n LOOP_H = loop.h varray.h basic-block.h\n GCC_H = gcc.h version.h\n+GGC_H = ggc.h varray.h\n #\f\n # Language makefile fragments.\n \n@@ -1338,7 +1339,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \n # C language specific files.\n \n-c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h ggc.h \\\n+c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h $(GGC_H) \\\n     $(srcdir)/c-parse.h c-tree.h c-common.h input.h flags.h system.h toplev.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n $(srcdir)/c-parse.h: $(srcdir)/c-parse.c\n@@ -1358,20 +1359,20 @@ $(srcdir)/c-gperf.h: c-parse.gperf\n \texit 1 )\n \t $(SHELL) $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n \n-c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h ggc.h \\\n+c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h $(GGC_H) \\\n     c-lex.h flags.h function.h output.h toplev.h defaults.h\n c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h \\\n     flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h\n-c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h ggc.h \\\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-common.h $(GGC_H) \\\n     c-lex.h toplev.h output.h function.h\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n     c-common.h $(srcdir)/c-parse.h $(srcdir)/c-gperf.h c-pragma.h input.h \\\n-    intl.h flags.h toplev.h output.h mbchar.h ggc.h\n+    intl.h flags.h toplev.h output.h mbchar.h $(GGC_H)\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h \\\n     c-common.h flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h\n c-pragma.o: c-pragma.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) function.h \\\n-    defaults.h c-pragma.h toplev.h ggc.h\n+    defaults.h c-pragma.h toplev.h $(GGC_H)\n c-iterate.o: c-iterate.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-tree.h \\\n     c-common.h flags.h toplev.h $(EXPR_H)\n mbchar.o: mbchar.c $(CONFIG_H) system.h mbchar.h\n@@ -1423,7 +1424,7 @@ s-under: $(GCC_PASSES)\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n-\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) ggc.h \\\n+\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H)\n \n # Language-independent files.\n@@ -1464,17 +1465,17 @@ dumpvers: dumpvers.c\n version.o: version.c version.h\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(RTL_H) $(TREE_H) \\\n-\tflags.h ggc.h varray.h hash.h\n+\tflags.h $(GGC_H) varray.h hash.h\n \n ggc-simple.o: ggc-simple.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h \\\n-\tggc.h varray.h\n+\t$(GGC_H) varray.h\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h \\\n-\tggc.h varray.h\n+\t$(GGC_H) varray.h\n \n-ggc-none.o: ggc-none.c $(CONFIG_H) $(RTL_H) ggc.h\n+ggc-none.o: ggc-none.c $(CONFIG_H) $(RTL_H) $(GGC_H)\n \n-ggc-callbacks.o: ggc-callbacks.c $(CONFIG_H) $(RTL_H) $(TREE_H) ggc.h\n+ggc-callbacks.o: ggc-callbacks.c $(CONFIG_H) $(RTL_H) $(TREE_H) $(GGC_H)\n \n obstack.o: $(srcdir)/../libiberty/obstack.c $(CONFIG_H)\n \trm -f obstack.c\n@@ -1489,12 +1490,12 @@ prefix.o: prefix.c $(CONFIG_H) system.h Makefile prefix.h\n convert.o: convert.c $(CONFIG_H) system.h $(TREE_H) flags.h convert.h toplev.h\n \n tree.o : tree.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h toplev.h \\\n-   ggc.h $(HASHTAB_H)\n-print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H) ggc.h\n+   $(GGC_H) $(HASHTAB_H)\n+print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) system.h $(TREE_H) flags.h \\\n-   function.h $(EXPR_H) $(RTL_H) toplev.h ggc.h\n+   function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H)\n fold-const.o : fold-const.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h \\\n-   $(RTL_H) ggc.h\n+   $(RTL_H) $(GGC_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) tm_p.h flags.h \\\n    input.h insn-attr.h insn-codes.h insn-config.h toplev.h intl.h \n toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n@@ -1506,28 +1507,28 @@ toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n \n-rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h ggc.h toplev.h\n+rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h $(GGC_H) toplev.h\n \n print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H) $(BASIC_BLOCK_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n errors.o : errors.c $(CONFIG_H) system.h errors.h\n \n varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n    function.h defaults.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n-   xcoffout.h output.h c-pragma.h toplev.h dbxout.h sdbout.h ggc.h\n+   xcoffout.h output.h c-pragma.h toplev.h dbxout.h sdbout.h $(GGC_H)\n function.o : function.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h insn-flags.h insn-codes.h $(EXPR_H) $(REGS_H) hard-reg-set.h \\\n-   insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h ggc.h\n+   insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h $(GGC_H)\n stmt.o : stmt.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-config.h insn-codes.h hard-reg-set.h $(EXPR_H) except.h \\\n-   $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h ggc.h\n+   $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H)\n except.o : except.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h insn-flags.h $(EXPR_H) $(REGS_H) hard-reg-set.h \\\n-   insn-config.h $(RECOG_H) output.h except.h toplev.h intl.h ggc.h\n+   insn-config.h $(RECOG_H) output.h except.h toplev.h intl.h $(GGC_H)\n expr.o : expr.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h \\\n    $(REGS_H) insn-flags.h insn-codes.h $(EXPR_H) insn-config.h $(RECOG_H) \\\n    output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h \\\n-   ggc.h intl.h\n+   $(GGC_H) intl.h\n builtins.o : builtins.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-flags.h insn-codes.h $(EXPR_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n@@ -1541,7 +1542,7 @@ explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-codes.h toplev.h function.h\n optabs.o : optabs.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h $(EXPR_H) $(RECOG_H) reload.h \\\n-   toplev.h ggc.h real.h\n+   toplev.h $(GGC_H) real.h\n dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h $(REGS_H) \\\n    insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h dbxout.h \\\n    toplev.h\n@@ -1554,11 +1555,11 @@ dwarfout.o : dwarfout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf.h \\\n dwarf2out.o : dwarf2out.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf2.h \\\n    flags.h insn-config.h reload.h output.h defaults.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) toplev.h dwarf2out.h varray.h \\\n-   ggc.h except.h\n+   $(GGC_H) except.h\n xcoffout.o : xcoffout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) xcoffout.h \\\n-   flags.h toplev.h output.h dbxout.h ggc.h\n+   flags.h toplev.h output.h dbxout.h $(GGC_H)\n emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n-   function.h $(REGS_H) insn-config.h $(RECOG_H) real.h ggc.h \\\n+   function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h \\\n    $(HASHTAB_H)\n real.o : real.c $(CONFIG_H) system.h $(TREE_H) toplev.h\n@@ -1571,9 +1572,9 @@ jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h $(REGS_H) \\\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n-   output.h function.h cselib.h ggc.h $(srcdir)/../include/obstack.h\n+   output.h function.h cselib.h $(GGC_H) $(srcdir)/../include/obstack.h\n cse.o : cse.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h flags.h \\\n-   real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h output.h function.h ggc.h\n+   real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h output.h function.h $(GGC_H)\n gcse.o : gcse.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h \\\n    flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) \\\n    function.h output.h toplev.h\n@@ -1588,7 +1589,7 @@ ssa.o : ssa.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) $(BASIC_BLOCK_H) \\\n    output.h insn-config.h\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\\n    gcov-io.h $(TREE_H) output.h $(REGS_H) toplev.h function.h insn-config.h \\\n-   ggc.h\n+   $(GGC_H)\n loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h $(LOOP_H) insn-config.h \\\n    insn-flags.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h \\\n    $(BASIC_BLOCK_H) function.h toplev.h varray.h except.h cselib.h\n@@ -1603,7 +1604,7 @@ combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h function.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h\n regclass.o : regclass.c $(CONFIG_H) system.h $(RTL_H) hard-reg-set.h flags.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h real.h \\\n-   toplev.h function.h output.h ggc.h\n+   toplev.h function.h output.h $(GGC_H)\n local-alloc.o : local-alloc.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h function.h insn-attr.h toplev.h\n@@ -1625,7 +1626,7 @@ reorg.o : reorg.c $(CONFIG_H) system.h $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h insn-attr.h insn-flags.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h\n alias.o : alias.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h \\\n-   $(REGS_H) toplev.h output.h $(EXPR_H) insn-flags.h ggc.h function.h \\\n+   $(REGS_H) toplev.h output.h $(EXPR_H) insn-flags.h $(GGC_H) function.h \\\n    cselib.h $(TREE_H)\n regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h reload.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n@@ -1648,7 +1649,7 @@ dyn-string.o: dyn-string.c dyn-string.h $(CONFIG_H) system.h\n predict.o: predict.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) insn-flags.h function.h except.h $(EXPR_H)\n-lists.o: lists.c $(CONFIG_H) system.h toplev.h $(RTL_H) ggc.h\n+lists.o: lists.c $(CONFIG_H) system.h toplev.h $(RTL_H) $(GGC_H)\n bb-reorder.o : bb-reorder.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) insn-flags.h function.h except.h $(EXPR_H)\n@@ -1657,7 +1658,7 @@ regrename.o : regrename.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h \\\n    $(RECOG_H) function.h resource.h\n \n-$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) ggc.h \\\n+$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n    insn-flags.h output.h insn-attr.h insn-codes.h system.h toplev.h function.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)\n@@ -1797,7 +1798,7 @@ s-attrtab : $(md_file) genattrtab $(srcdir)/move-if-change\n \t$(SHELL) $(srcdir)/move-if-change tmp-attrtab.c insn-attrtab.c\n \ttouch s-attrtab\n \n-insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) ggc.h $(REGS_H) real.h \\\n+insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) $(GGC_H) $(REGS_H) real.h \\\n     conditions.h hard-reg-set.h insn-config.h insn-flags.h insn-attr.h \\\n     output.h $(RECOG_H) function.h insn-codes.h system.h toplev.h flags.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c\n@@ -1808,7 +1809,7 @@ s-output : $(md_file) genoutput $(srcdir)/move-if-change\n \t$(SHELL) $(srcdir)/move-if-change tmp-output.c insn-output.c\n \ttouch s-output\n \n-genrtl.o : genrtl.c $(CONFIG_H) $(RTL_H) system.h ggc.h\n+genrtl.o : genrtl.c $(CONFIG_H) $(RTL_H) system.h $(GGC_H)\n genrtl.c genrtl.h : s-genrtl\n \t@true\t# force gnu make to recheck modification times.\n \n@@ -1902,7 +1903,7 @@ genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEP\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) system.h errors.h ggc.h\n+genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) system.h errors.h $(GGC_H)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c\n \n genoutput : genoutput.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n@@ -1924,7 +1925,7 @@ gengenrtl.o : gengenrtl.c $(RTL_BASE_H) system.h real.h\n # and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict\n # with the rules for rtl.o, alloca.o, etc.\n $(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(CONFIG_H) system.h $(RTL_H) \\\n-  bitmap.h ggc.h toplev.h\n+  bitmap.h $(GGC_H) toplev.h\n \trm -f $(HOST_PREFIX)rtl.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c"}, {"sha": "96c0900a5b2f51ec50214e3048965e9c32d383ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1,3 +1,20 @@\n+2000-04-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (GGC_H): New variable.  Use it throughout in place\n+\tof ggc.h.\n+\t\n+\t* call.c: Don't include obstack.h.  Include ggc.h.\n+\t(obstack_chunk_alloc): Don't define.\n+\t(obstack_chunk_free): Likewise.\n+\t(add_candidate): Allocate the z_candidate with ggc_alloc_obj.\n+\t* decl.c (push_switch): Use xmalloc to allocate the cp_switch.\n+\t(pop_switch): Free it.\n+\n+\t* decl2.c (grokclassfn): Set TREE_READONLY for PARM_DECLs.\n+\n+\t* dump.c (dequeue_and_dump): Don't try to print the bit_position\n+\tif we don't have a DECL_FIELD_OFFSET.\n+\n Wed Apr  5 15:12:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* optimize.c (calls_setjmp_r): Use setjmp_call_p instead of"}, {"sha": "647c1fa06ed20cb0a51207e1b571992e4808ed58", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -209,10 +209,11 @@ CXX_TREE_H = $(TREE_H) cp-tree.h $(srcdir)/../c-common.h cp-tree.def \\\n PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n EXPR_H = $(srcdir)/../expr.h ../insn-codes.h\n+GGC_H = $(srcdir)/../ggc.h $(srcdir)/../varray.h\n \n parse.o : $(PARSE_C) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(srcdir)/../except.h $(srcdir)/../output.h $(srcdir)/../system.h \\\n-\t$(srcdir)/../toplev.h $(srcdir)/../ggc.h\n+\t$(srcdir)/../toplev.h $(GGC_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n@@ -251,37 +252,37 @@ spew.o : spew.c $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \\\n lex.o : lex.c $(CXX_TREE_H) \\\n   $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h \\\n   $(srcdir)/../c-pragma.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../output.h $(srcdir)/../mbchar.h $(srcdir)/../ggc.h \\\n+  $(srcdir)/../output.h $(srcdir)/../mbchar.h $(GGC_H) \\\n   $(srcdir)/../input.h\n decl.o : decl.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h  \\\n   $(srcdir)/../except.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../hash.h $(srcdir)/../ggc.h $(RTL_H)\n+  $(srcdir)/../hash.h $(GGC_H) $(RTL_H)\n decl2.o : decl2.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(EXPR_H) $(srcdir)/../output.h $(srcdir)/../except.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../dwarf2out.h $(srcdir)/../dwarfout.h \\\n-  $(srcdir)/../ggc.h $(RTL_H)\n+  $(GGC_H) $(RTL_H)\n typeck2.o : typeck2.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../output.h\n typeck.o : typeck.c $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(EXPR_H) $(srcdir)/../toplev.h \n class.o : class.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../toplev.h $(RTL_H)\n call.o : call.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  $(srcdir)/../toplev.h $(RTL_H) $(EXPR_H)\n+  $(srcdir)/../toplev.h $(RTL_H) $(EXPR_H) $(GGC_H)\n friend.o : friend.c $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(srcdir)/../toplev.h\n init.o : init.c $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n-  $(EXPR_H) $(srcdir)/../toplev.h $(srcdir)/../ggc.h \\\n+  $(EXPR_H) $(srcdir)/../toplev.h $(GGC_H) \\\n   $(srcdir)/../except.h\n method.o : method.c $(CXX_TREE_H) \\\n-  $(srcdir)/../toplev.h $(srcdir)/../ggc.h $(RTL_H)\n+  $(srcdir)/../toplev.h $(GGC_H) $(RTL_H)\n cvt.o : cvt.c $(CXX_TREE_H) decl.h \\\n   $(srcdir)/../flags.h $(srcdir)/../toplev.h $(srcdir)/../convert.h\n search.o : search.c $(CXX_TREE_H) $(srcdir)/../stack.h \\\n   $(srcdir)/../flags.h $(srcdir)/../toplev.h $(RTL_H)\n tree.o : tree.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  $(srcdir)/../toplev.h $(srcdir)/../ggc.h $(RTL_H) \\\n+  $(srcdir)/../toplev.h $(GGC_H) $(RTL_H) \\\n   ../insn-config.h $(srcdir)/../integrate.h\n ptree.o : ptree.c $(CXX_TREE_H) $(srcdir)/../system.h\n rtti.o : rtti.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n@@ -293,17 +294,17 @@ expr.o : expr.c $(CXX_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n xref.o : xref.c $(CXX_TREE_H) $(srcdir)/../input.h \\\n   $(srcdir)/../toplev.h\n pt.o : pt.c $(CXX_TREE_H) decl.h $(PARSE_H) lex.h \\\n-  $(srcdir)/../toplev.h $(srcdir)/../ggc.h $(RTL_H) \\\n+  $(srcdir)/../toplev.h $(GGC_H) $(RTL_H) \\\n   $(srcdir)/../except.h\n error.o : error.c $(CXX_TREE_H) \\\n   $(srcdir)/../toplev.h\n errfn.o : errfn.c $(CXX_TREE_H) \\\n   $(srcdir)/../toplev.h\n repo.o : repo.c $(CXX_TREE_H) \\\n-  $(srcdir)/../toplev.h $(srcdir)/../ggc.h\n+  $(srcdir)/../toplev.h $(GGC_H)\n semantics.o: semantics.c $(CXX_TREE_H) lex.h \\\n   $(srcdir)/../except.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../flags.h $(srcdir)/../ggc.h \\\n+  $(srcdir)/../flags.h $(GGC_H) \\\n   $(srcdir)/../output.h $(RTL_H) \n dump.o: dump.c $(CXX_TREE_H)\n optimize.o: optimize.c $(CXX_TREE_H) \\"}, {"sha": "ef559185adb1670e2be87a1f7202f26421f58fe2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -34,10 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"defaults.h\"\n #include \"expr.h\"\n-\n-#include \"obstack.h\"\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n+#include \"ggc.h\"\n \n extern int inhibit_warnings;\n \n@@ -1232,18 +1229,12 @@ add_candidate (candidates, fn, convs, viable)\n      tree fn, convs;\n      int viable;\n {\n-  /* FIXME: This is a memory leak.  Presumably, we should use\n-     ggc_alloc instead.  */\n   struct z_candidate *cand\n-    = (struct z_candidate *) expralloc (sizeof (struct z_candidate));\n+    = (struct z_candidate *) ggc_alloc_obj (sizeof (struct z_candidate), 1);\n \n   cand->fn = fn;\n   cand->convs = convs;\n-  cand->second_conv = NULL_TREE;\n   cand->viable = viable;\n-  cand->basetype_path = NULL_TREE;\n-  cand->template = NULL_TREE;\n-  cand->warnings = NULL_TREE;\n   cand->next = candidates;\n \n   return cand;"}, {"sha": "0611ee74a0c49414b02dcf49820d5f1340721066", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -4938,7 +4938,7 @@ void\n push_switch ()\n {\n   struct cp_switch *p\n-    = (struct cp_switch *) oballoc (sizeof (struct cp_switch));\n+    = (struct cp_switch *) xmalloc (sizeof (struct cp_switch));\n   p->level = current_binding_level;\n   p->next = switch_stack;\n   switch_stack = p;\n@@ -4947,7 +4947,11 @@ push_switch ()\n void\n pop_switch ()\n {\n+  struct cp_switch *cs;\n+  \n+  cs = switch_stack;\n   switch_stack = switch_stack->next;\n+  free (cs);\n }\n \n /* Note that we've seen a definition of a case label, and complain if this"}, {"sha": "f6d5b78740025dc1b305cc7aa908c19dde9311b8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1009,9 +1009,16 @@ grokclassfn (ctype, function, flags, quals)\n       /* Right now we just make this a pointer.  But later\n \t we may wish to make it special.  */\n       tree type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (function)));\n+      tree qual_type;\n+      tree parm;\n+\n+      /* The `this' parameter is implicitly `const'; it cannot be\n+\t assigned to.  */\n+      this_quals |= TYPE_QUAL_CONST;\n+      qual_type = cp_build_qualified_type (type, this_quals);\n+      parm = build_decl (PARM_DECL, this_identifier, qual_type);\n+      c_apply_type_quals_to_decl (this_quals, parm);\n \n-      tree parm = build_decl (PARM_DECL, this_identifier,\n-                         cp_build_qualified_type (type, this_quals | TYPE_QUAL_CONST));\n       /* Mark the artificial `this' parameter as \"artificial\".  */\n       SET_DECL_ARTIFICIAL (parm);\n       DECL_ARG_TYPE (parm) = type;"}, {"sha": "7f81094d4b0378433b9c4a7082cc845edfe4775b", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -550,7 +550,8 @@ dequeue_and_dump (di)\n \t{\n \t  if (DECL_C_BIT_FIELD (t))\n \t    dump_string (di, \"bitfield\");\n-\t  dump_child (\"bpos\", bit_position (t));\n+\t  if (DECL_FIELD_OFFSET (t))\n+\t    dump_child (\"bpos\", bit_position (t));\n \t}\n       break;\n "}, {"sha": "84eb54aad647a7dc77d512b8d2b60e573a9bd7c0", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1,3 +1,7 @@\n+Wed Apr  5 17:46:39 2000  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (GGC_H): Add varray.h.\n+\n 2000-04-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* lang-specs.h: Pass -fno-show-column to the preprocessor."}, {"sha": "1f93e551c2197076e7dd76af50fcb96277d038b0", "filename": "gcc/f/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ff%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ff%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMakefile.in?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1,5 +1,5 @@\n # Makefile for GNU F77 compiler.\n-#   Copyright (C) 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+#   Copyright (C) 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n \n #This file is part of GNU Fortran.\n \n@@ -225,7 +225,7 @@ ASSERT_H = $(srcdir)/assert.j $(srcdir)/../assert.h\n CONFIG_H = $(srcdir)/config.j ../config.h\n CONVERT_H = $(srcdir)/convert.j $(srcdir)/../convert.h\n FLAGS_H = $(srcdir)/flags.j $(srcdir)/../flags.h\n-GGC_H = $(srcdir)/ggc.j $(srcdir)/../ggc.h\n+GGC_H = $(srcdir)/ggc.j $(srcdir)/../ggc.h $(srcdir)/../varray.h\n GLIMITS_H = $(srcdir)/glimits.j $(srcdir)/../glimits.h\n HCONFIG_H = $(srcdir)/hconfig.j ../hconfig.h\n INPUT_H = $(srcdir)/input.j $(srcdir)/../input.h"}, {"sha": "ade9da9296437664b2d9a6b3e2f845ee686a8bcc", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -1974,8 +1974,7 @@ final (first, file, optimize, prescan)\n \t  max_line = NOTE_LINE_NUMBER (insn);\n     }\n \n-  line_note_exists = (char *) oballoc (max_line + 1);\n-  bzero (line_note_exists, max_line + 1);\n+  line_note_exists = (char *) xcalloc (max_line + 1, sizeof (char));\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n@@ -2020,6 +2019,8 @@ final (first, file, optimize, prescan)\n     add_bb (file);\n \n   free_insn_eh_region ();\n+  free (line_note_exists);\n+  line_note_exists = NULL;\n }\n \f\n const char *"}, {"sha": "b17f360cd7746704b51e36c4e64b9d5be5d62c53", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -445,6 +445,9 @@ void\n free_after_compilation (f)\n      struct function *f;\n {\n+  struct temp_slot *ts;\n+  struct temp_slot *next;\n+\n   free_eh_status (f);\n   free_expr_status (f);\n   free_emit_status (f);\n@@ -456,6 +459,13 @@ free_after_compilation (f)\n   if (f->x_parm_reg_stack_loc)\n     free (f->x_parm_reg_stack_loc);\n \n+  for (ts = f->x_temp_slots; ts; ts = next)\n+    {\n+      next = ts->next;\n+      free (ts);\n+    }\n+  f->x_temp_slots = NULL;\n+\n   f->arg_offset_rtx = NULL;\n   f->return_rtx = NULL;\n   f->internal_arg_pointer = NULL;\n@@ -476,7 +486,6 @@ free_after_compilation (f)\n   f->x_parm_birth_insn = NULL;\n   f->x_last_parm_insn = NULL;\n   f->x_parm_reg_stack_loc = NULL;\n-  f->x_temp_slots = NULL;\n   f->fixup_var_refs_queue = NULL;\n   f->original_arg_vector = NULL;\n   f->original_decl_initial = NULL;\n@@ -714,7 +723,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \n \t  if (best_p->size - rounded_size >= alignment)\n \t    {\n-\t      p = (struct temp_slot *) oballoc (sizeof (struct temp_slot));\n+\t      p = (struct temp_slot *) xmalloc (sizeof (struct temp_slot));\n \t      p->in_use = p->addr_taken = 0;\n \t      p->size = best_p->size - rounded_size;\n \t      p->base_offset = best_p->base_offset + rounded_size;\n@@ -744,7 +753,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n     {\n       HOST_WIDE_INT frame_offset_old = frame_offset;\n \n-      p = (struct temp_slot *) oballoc (sizeof (struct temp_slot));\n+      p = (struct temp_slot *) xmalloc (sizeof (struct temp_slot));\n \n       /* We are passing an explicit alignment request to assign_stack_local.\n \t One side effect of that is assign_stack_local will not round SIZE\n@@ -935,7 +944,10 @@ combine_temp_slots ()\n \t      }\n \t    /* Either delete Q or advance past it.  */\n \t    if (delete_q)\n-\t      prev_q->next = q->next;\n+\t      {\n+\t\tprev_q->next = q->next;\n+\t\tfree (q);\n+\t      }\n \t    else\n \t      prev_q = q;\n \t  }\n@@ -3274,7 +3286,7 @@ purge_addressof (insns)\n   /* When we actually purge ADDRESSOFs, we turn REGs into MEMs.  That\n      requires a fixup pass over the instruction stream to correct\n      INSNs that depended on the REG being a REG, and not a MEM.  But,\n-     these fixup passes are slow.  Furthermore, more MEMs are not\n+     these fixup passes are slow.  Furthermore, most MEMs are not\n      mentioned in very many instructions.  So, we speed up the process\n      by pre-calculating which REGs occur in which INSNs; that allows\n      us to perform the fixup passes much more quickly.  */"}, {"sha": "88488fec445d57dba9cffb477966ea426ab6b173", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 150, "deletions": 133, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -33,12 +33,16 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Statistics about the allocation.  */\n static ggc_statistics *ggc_stats;\n \n+/* Trees that have been marked, but whose children still need marking.  */\n+varray_type ggc_pending_trees;\n+\n static void ggc_mark_rtx_ptr PARAMS ((void *));\n static void ggc_mark_tree_ptr PARAMS ((void *));\n static void ggc_mark_rtx_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_hash_table_ptr PARAMS ((void *));\n static void ggc_mark_string_ptr PARAMS ((void *));\n+static void ggc_mark_trees PARAMS ((void));\n static boolean ggc_mark_tree_hash_table_entry PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t       hash_table_key));\n \n@@ -174,6 +178,8 @@ ggc_mark_roots ()\n {\n   struct ggc_root* x;\n   \n+  VARRAY_TREE_INIT (ggc_pending_trees, 4096, \"ggc_pending_trees\");\n+\n   for (x = roots; x != NULL; x = x->next)\n     {\n       char *elt = x->base;\n@@ -184,6 +190,10 @@ ggc_mark_roots ()\n       for (i = 0; i < n; ++i, elt += s)\n \t(*cb)(elt);\n     }\n+\n+  /* Mark all the queued up trees, and their children.  */\n+  ggc_mark_trees ();\n+  VARRAY_FREE (ggc_pending_trees);\n }\n \n /* R had not been previously marked, but has now been marked via\n@@ -297,148 +307,155 @@ ggc_mark_rtvec_children (v)\n     ggc_mark_rtx (RTVEC_ELT (v, i));\n }\n \n-/* T had not been previously marked, but has now been marked via\n-   ggc_set_mark.  Now recurse and process the children.  */\n+/* Recursively set marks on all of the children of the\n+   GCC_PENDING_TREES.  */\n \n-void\n-ggc_mark_tree_children (t)\n-     tree t;\n+static void\n+ggc_mark_trees ()\n {\n-  enum tree_code code = TREE_CODE (t);\n-\n-  /* Collect statistics, if appropriate.  */\n-  if (ggc_stats)\n+  while (ggc_pending_trees->elements_used)\n     {\n-      ++ggc_stats->num_trees[(int) code];\n-      ggc_stats->size_trees[(int) code] += ggc_get_size (t);\n-    }\n+      tree t;\n+      enum tree_code code;\n \n-  /* Bits from common.  */\n-  ggc_mark_tree (TREE_TYPE (t));\n-  ggc_mark_tree (TREE_CHAIN (t));\n+      t = VARRAY_TOP_TREE (ggc_pending_trees);\n+      VARRAY_POP (ggc_pending_trees);\n+      code = TREE_CODE (t);\n \n-  /* Some nodes require special handling.  */\n-  switch (code)\n-    {\n-    case TREE_LIST:\n-      ggc_mark_tree (TREE_PURPOSE (t));\n-      ggc_mark_tree (TREE_VALUE (t));\n-      return;\n+      /* Collect statistics, if appropriate.  */\n+      if (ggc_stats)\n+\t{\n+\t  ++ggc_stats->num_trees[(int) code];\n+\t  ggc_stats->size_trees[(int) code] += ggc_get_size (t);\n+\t}\n \n-    case TREE_VEC:\n-      {\n-\tint i = TREE_VEC_LENGTH (t);\n-\twhile (--i >= 0)\n-\t  ggc_mark_tree (TREE_VEC_ELT (t, i));\n-\treturn;\n-      }\n+      /* Bits from common.  */\n+      ggc_mark_tree (TREE_TYPE (t));\n+      ggc_mark_tree (TREE_CHAIN (t));\n \n-    case SAVE_EXPR:\n-      ggc_mark_tree (TREE_OPERAND (t, 0));\n-      ggc_mark_tree (SAVE_EXPR_CONTEXT (t));\n-      ggc_mark_rtx (SAVE_EXPR_RTL (t));\n-      return;\n-\n-    case RTL_EXPR:\n-      ggc_mark_rtx (RTL_EXPR_SEQUENCE (t));\n-      ggc_mark_rtx (RTL_EXPR_RTL (t));\n-      return;\n-\n-    case CALL_EXPR:\n-      ggc_mark_tree (TREE_OPERAND (t, 0));\n-      ggc_mark_tree (TREE_OPERAND (t, 1));\n-      ggc_mark_rtx (CALL_EXPR_RTL (t));\n-      return;\n-\n-    case COMPLEX_CST:\n-      ggc_mark_tree (TREE_REALPART (t));\n-      ggc_mark_tree (TREE_IMAGPART (t));\n-      break;\n-\n-    case STRING_CST:\n-      ggc_mark_string (TREE_STRING_POINTER (t));\n-      break;\n-\n-    case PARM_DECL:\n-      ggc_mark_rtx (DECL_INCOMING_RTL (t));\n-      break;\n-\n-    case FIELD_DECL:\n-      ggc_mark_tree (DECL_FIELD_BIT_OFFSET (t));\n-      break;\n-\n-    case IDENTIFIER_NODE:\n-      ggc_mark_string (IDENTIFIER_POINTER (t));\n-      lang_mark_tree (t);\n-      return;\n-\n-    default:\n-      break;\n-    }\n+      /* Some nodes require special handling.  */\n+      switch (code)\n+\t{\n+\tcase TREE_LIST:\n+\t  ggc_mark_tree (TREE_PURPOSE (t));\n+\t  ggc_mark_tree (TREE_VALUE (t));\n+\t  continue;\n+\n+\tcase TREE_VEC:\n+\t  {\n+\t    int i = TREE_VEC_LENGTH (t);\n+\t    while (--i >= 0)\n+\t      ggc_mark_tree (TREE_VEC_ELT (t, i));\n+\t    continue;\n+\t  }\n+\n+\tcase SAVE_EXPR:\n+\t  ggc_mark_tree (TREE_OPERAND (t, 0));\n+\t  ggc_mark_tree (SAVE_EXPR_CONTEXT (t));\n+\t  ggc_mark_rtx (SAVE_EXPR_RTL (t));\n+\t  continue;\n+\n+\tcase RTL_EXPR:\n+\t  ggc_mark_rtx (RTL_EXPR_SEQUENCE (t));\n+\t  ggc_mark_rtx (RTL_EXPR_RTL (t));\n+\t  continue;\n+\n+\tcase CALL_EXPR:\n+\t  ggc_mark_tree (TREE_OPERAND (t, 0));\n+\t  ggc_mark_tree (TREE_OPERAND (t, 1));\n+\t  ggc_mark_rtx (CALL_EXPR_RTL (t));\n+\t  continue;\n+\n+\tcase COMPLEX_CST:\n+\t  ggc_mark_tree (TREE_REALPART (t));\n+\t  ggc_mark_tree (TREE_IMAGPART (t));\n+\t  break;\n+\n+\tcase STRING_CST:\n+\t  ggc_mark_string (TREE_STRING_POINTER (t));\n+\t  break;\n+\n+\tcase PARM_DECL:\n+\t  ggc_mark_rtx (DECL_INCOMING_RTL (t));\n+\t  break;\n+\n+\tcase FIELD_DECL:\n+\t  ggc_mark_tree (DECL_FIELD_BIT_OFFSET (t));\n+\t  break;\n+\n+\tcase IDENTIFIER_NODE:\n+\t  ggc_mark_string (IDENTIFIER_POINTER (t));\n+\t  lang_mark_tree (t);\n+\t  continue;\n+\n+\tdefault:\n+\t  break;\n+\t}\n   \n-  /* But in general we can handle them by class.  */\n-  switch (TREE_CODE_CLASS (code))\n-    {\n-    case 'd': /* A decl node.  */\n-      ggc_mark_string (DECL_SOURCE_FILE (t));\n-      ggc_mark_tree (DECL_SIZE (t));\n-      ggc_mark_tree (DECL_SIZE_UNIT (t));\n-      ggc_mark_tree (DECL_NAME (t));\n-      ggc_mark_tree (DECL_CONTEXT (t));\n-      ggc_mark_tree (DECL_ARGUMENTS (t));\n-      ggc_mark_tree (DECL_RESULT_FLD (t));\n-      ggc_mark_tree (DECL_INITIAL (t));\n-      ggc_mark_tree (DECL_ABSTRACT_ORIGIN (t));\n-      ggc_mark_tree (DECL_ASSEMBLER_NAME (t));\n-      ggc_mark_tree (DECL_SECTION_NAME (t));\n-      ggc_mark_tree (DECL_MACHINE_ATTRIBUTES (t));\n-      ggc_mark_rtx (DECL_RTL (t));\n-      ggc_mark_rtx (DECL_LIVE_RANGE_RTL (t));\n-      ggc_mark_tree (DECL_VINDEX (t));\n-      lang_mark_tree (t);\n-      break;\n-\n-    case 't': /* A type node.  */\n-      ggc_mark_tree (TYPE_SIZE (t));\n-      ggc_mark_tree (TYPE_SIZE_UNIT (t));\n-      ggc_mark_tree (TYPE_ATTRIBUTES (t));\n-      ggc_mark_tree (TYPE_VALUES (t));\n-      ggc_mark_tree (TYPE_POINTER_TO (t));\n-      ggc_mark_tree (TYPE_REFERENCE_TO (t));\n-      ggc_mark_tree (TYPE_NAME (t));\n-      ggc_mark_tree (TYPE_MIN_VALUE (t));\n-      ggc_mark_tree (TYPE_MAX_VALUE (t));\n-      ggc_mark_tree (TYPE_NEXT_VARIANT (t));\n-      ggc_mark_tree (TYPE_MAIN_VARIANT (t));\n-      ggc_mark_tree (TYPE_BINFO (t));\n-      ggc_mark_tree (TYPE_NONCOPIED_PARTS (t));\n-      ggc_mark_tree (TYPE_CONTEXT (t));\n-      lang_mark_tree (t);\n-      break;\n-\n-    case 'b': /* A lexical block.  */\n-      ggc_mark_tree (BLOCK_VARS (t));\n-      ggc_mark_tree (BLOCK_SUBBLOCKS (t));\n-      ggc_mark_tree (BLOCK_SUPERCONTEXT (t));\n-      ggc_mark_tree (BLOCK_ABSTRACT_ORIGIN (t));\n-      break;\n-\n-    case 'c': /* A constant.  */\n-      ggc_mark_rtx (TREE_CST_RTL (t));\n-      break;\n-\n-    case 'r': case '<': case '1':\n-    case '2': case 'e': case 's': /* Expressions.  */\n-      {\n-\tint i = tree_code_length[TREE_CODE (t)];\n-\twhile (--i >= 0)\n-\t  ggc_mark_tree (TREE_OPERAND (t, i));\n-\tbreak;\n-      }\n+      /* But in general we can handle them by class.  */\n+      switch (TREE_CODE_CLASS (code))\n+\t{\n+\tcase 'd': /* A decl node.  */\n+\t  ggc_mark_string (DECL_SOURCE_FILE (t));\n+\t  ggc_mark_tree (DECL_SIZE (t));\n+\t  ggc_mark_tree (DECL_SIZE_UNIT (t));\n+\t  ggc_mark_tree (DECL_NAME (t));\n+\t  ggc_mark_tree (DECL_CONTEXT (t));\n+\t  ggc_mark_tree (DECL_ARGUMENTS (t));\n+\t  ggc_mark_tree (DECL_RESULT_FLD (t));\n+\t  ggc_mark_tree (DECL_INITIAL (t));\n+\t  ggc_mark_tree (DECL_ABSTRACT_ORIGIN (t));\n+\t  ggc_mark_tree (DECL_ASSEMBLER_NAME (t));\n+\t  ggc_mark_tree (DECL_SECTION_NAME (t));\n+\t  ggc_mark_tree (DECL_MACHINE_ATTRIBUTES (t));\n+\t  ggc_mark_rtx (DECL_RTL (t));\n+\t  ggc_mark_rtx (DECL_LIVE_RANGE_RTL (t));\n+\t  ggc_mark_tree (DECL_VINDEX (t));\n+\t  lang_mark_tree (t);\n+\t  break;\n+\n+\tcase 't': /* A type node.  */\n+\t  ggc_mark_tree (TYPE_SIZE (t));\n+\t  ggc_mark_tree (TYPE_SIZE_UNIT (t));\n+\t  ggc_mark_tree (TYPE_ATTRIBUTES (t));\n+\t  ggc_mark_tree (TYPE_VALUES (t));\n+\t  ggc_mark_tree (TYPE_POINTER_TO (t));\n+\t  ggc_mark_tree (TYPE_REFERENCE_TO (t));\n+\t  ggc_mark_tree (TYPE_NAME (t));\n+\t  ggc_mark_tree (TYPE_MIN_VALUE (t));\n+\t  ggc_mark_tree (TYPE_MAX_VALUE (t));\n+\t  ggc_mark_tree (TYPE_NEXT_VARIANT (t));\n+\t  ggc_mark_tree (TYPE_MAIN_VARIANT (t));\n+\t  ggc_mark_tree (TYPE_BINFO (t));\n+\t  ggc_mark_tree (TYPE_NONCOPIED_PARTS (t));\n+\t  ggc_mark_tree (TYPE_CONTEXT (t));\n+\t  lang_mark_tree (t);\n+\t  break;\n+\n+\tcase 'b': /* A lexical block.  */\n+\t  ggc_mark_tree (BLOCK_VARS (t));\n+\t  ggc_mark_tree (BLOCK_SUBBLOCKS (t));\n+\t  ggc_mark_tree (BLOCK_SUPERCONTEXT (t));\n+\t  ggc_mark_tree (BLOCK_ABSTRACT_ORIGIN (t));\n+\t  break;\n+\n+\tcase 'c': /* A constant.  */\n+\t  ggc_mark_rtx (TREE_CST_RTL (t));\n+\t  break;\n \n-    case 'x':\n-      lang_mark_tree (t);\n-      break;\n+\tcase 'r': case '<': case '1':\n+\tcase '2': case 'e': case 's': /* Expressions.  */\n+\t  {\n+\t    int i = tree_code_length[TREE_CODE (t)];\n+\t    while (--i >= 0)\n+\t      ggc_mark_tree (TREE_OPERAND (t, i));\n+\t    break;\n+\t  }\n+\n+\tcase 'x':\n+\t  lang_mark_tree (t);\n+\t  break;\n+\t}\n     }\n }\n "}, {"sha": "a79ffd5986ef35dcbc92db5ae3a5076a0fcdee7b", "filename": "gcc/ggc.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -19,6 +19,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n #include \"gansidecl.h\"\n+#include \"varray.h\"\n \n /* Symbols are marked with `ggc' for `gcc gc' so as not to interfere with\n    an external gc library that might be linked in.  */\n@@ -40,11 +41,13 @@ struct rtvec_def;\n struct stmt_status;\n union  tree_node;\n struct varasm_status;\n-struct varray_head_tag;\n \n /* Constants for general use.  */\n extern char *empty_string;\n \n+/* Trees that have been marked, but whose children still need marking.  */\n+extern varray_type ggc_pending_trees;\n+\n /* Manipulate global roots that are needed between calls to gc.  */\n void ggc_add_root PARAMS ((void *base, int nelt, int size, void (*)(void *)));\n void ggc_add_rtx_root PARAMS ((struct rtx_def **, int nelt));\n@@ -64,7 +67,6 @@ extern void ggc_mark_roots PARAMS ((void));\n \n extern void ggc_mark_rtx_children PARAMS ((struct rtx_def *));\n extern void ggc_mark_rtvec_children PARAMS ((struct rtvec_def *));\n-extern void ggc_mark_tree_children PARAMS ((union tree_node *));\n \n /* If EXPR is not NULL and previously unmarked, mark it and evaluate\n    to true.  Otherwise evaluate to false.  */\n@@ -78,11 +80,11 @@ extern void ggc_mark_tree_children PARAMS ((union tree_node *));\n       ggc_mark_rtx_children (r__);              \\\n   } while (0)\n \n-#define ggc_mark_tree(EXPR)                     \\\n-  do {                                          \\\n-    tree t__ = (EXPR);                          \\\n-    if (ggc_test_and_set_mark (t__))            \\\n-      ggc_mark_tree_children (t__);             \\\n+#define ggc_mark_tree(EXPR)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    tree t__ = (EXPR);\t\t\t\t\t\\\n+    if (ggc_test_and_set_mark (t__))\t\t\t\\\n+      VARRAY_PUSH_TREE (ggc_pending_trees, t__);\t\\\n   } while (0)\n \n #define ggc_mark_rtvec(EXPR)                    \\"}, {"sha": "8516e368964b0db73a77200de1a73b46bec10e4e", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedda2da7f0434c931864fd1860d8b49106733bb/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=bedda2da7f0434c931864fd1860d8b49106733bb", "patch": "@@ -539,6 +539,7 @@ mark_goto_fixup (g)\n {\n   while (g)\n     {\n+      ggc_mark (g);\n       ggc_mark_rtx (g->before_jump);\n       ggc_mark_tree (g->target);\n       ggc_mark_tree (g->context);\n@@ -1002,7 +1003,7 @@ expand_fixup (tree_label, rtl_label, last_insn)\n     {\n       /* Ok, a fixup is needed.  Add a fixup to the list of such.  */\n       struct goto_fixup *fixup\n-\t= (struct goto_fixup *) oballoc (sizeof (struct goto_fixup));\n+\t= (struct goto_fixup *) ggc_alloc_obj (sizeof (struct goto_fixup), 0);\n       /* In case an old stack level is restored, make sure that comes\n \t after any pending stack adjust.  */\n       /* ?? If the fixup isn't to come at the present position,"}]}