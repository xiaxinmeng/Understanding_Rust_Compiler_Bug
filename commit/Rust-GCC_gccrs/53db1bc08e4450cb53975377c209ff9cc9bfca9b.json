{"sha": "53db1bc08e4450cb53975377c209ff9cc9bfca9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkYjFiYzA4ZTQ0NTBjYjUzOTc1Mzc3YzIwOWZmOWNjOWJmY2E5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-07-13T23:10:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-13T23:10:12Z"}, "message": "call.c (can_convert): Allow user-defined conversions.\n\n\t* call.c (can_convert): Allow user-defined conversions.\n\t(can_convert_standard): New.\n\t* cp-tree.h: Declare it.\n\t* cvt.c (convert_to_reference): Use it.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t* search.c (check_final_overrider): Likewise.\n\tDon't worry about user-defined conversions.\n\nFrom-SVN: r200937", "tree": {"sha": "e820a3247e286fe0510394ffbfa1ccf945fe62f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e820a3247e286fe0510394ffbfa1ccf945fe62f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53db1bc08e4450cb53975377c209ff9cc9bfca9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53db1bc08e4450cb53975377c209ff9cc9bfca9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53db1bc08e4450cb53975377c209ff9cc9bfca9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53db1bc08e4450cb53975377c209ff9cc9bfca9b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e43257e81709a7c2f3d6f08623c1e6331b71a92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43257e81709a7c2f3d6f08623c1e6331b71a92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43257e81709a7c2f3d6f08623c1e6331b71a92a"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "3b59f2146a6c2b94bd4adbef30dab6084d688b5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -1,3 +1,13 @@\n+2013-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (can_convert): Allow user-defined conversions.\n+\t(can_convert_standard): New.\n+\t* cp-tree.h: Declare it.\n+\t* cvt.c (convert_to_reference): Use it.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t* search.c (check_final_overrider): Likewise.\n+\tDon't worry about user-defined conversions.\n+\n 2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57869"}, {"sha": "02daf82a2b520a53030f67757688c0cc2b9f84b0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -8813,6 +8813,20 @@ tourney (struct z_candidate *candidates, tsubst_flags_t complain)\n \n bool\n can_convert (tree to, tree from, tsubst_flags_t complain)\n+{\n+  tree arg = NULL_TREE;\n+  /* implicit_conversion only considers user-defined conversions\n+     if it has an expression for the call argument list.  */\n+  if (CLASS_TYPE_P (from) || CLASS_TYPE_P (to))\n+    arg = build1 (CAST_EXPR, from, NULL_TREE);\n+  return can_convert_arg (to, from, arg, LOOKUP_IMPLICIT, complain);\n+}\n+\n+/* Returns nonzero if things of type FROM can be converted to TO with a\n+   standard conversion.  */\n+\n+bool\n+can_convert_standard (tree to, tree from, tsubst_flags_t complain)\n {\n   return can_convert_arg (to, from, NULL_TREE, LOOKUP_IMPLICIT, complain);\n }"}, {"sha": "a837d2275a34c258db965ca029c9c38a0e238716", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -5007,6 +5007,7 @@ extern tree build_op_delete_call\t\t(enum tree_code, tree, tree,\n \t\t\t\t\t\t bool, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool can_convert\t\t\t\t(tree, tree, tsubst_flags_t);\n+extern bool can_convert_standard\t\t(tree, tree, tsubst_flags_t);\n extern bool can_convert_arg\t\t\t(tree, tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool can_convert_arg_bad\t\t\t(tree, tree, tree, int,"}, {"sha": "532e8fd9d6bd9468b495dcd70be8d8d39d928c4b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -428,7 +428,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n \n   intype = TYPE_MAIN_VARIANT (intype);\n \n-  can_convert_intype_to_type = can_convert (type, intype, complain);\n+  can_convert_intype_to_type = can_convert_standard (type, intype, complain);\n \n   if (!can_convert_intype_to_type\n       && (convtype & CONV_IMPLICIT) && MAYBE_CLASS_TYPE_P (intype)\n@@ -449,7 +449,8 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n \t}\n     }\n \n-  if (((convtype & CONV_STATIC) && can_convert (intype, type, complain))\n+  if (((convtype & CONV_STATIC)\n+       && can_convert_standard (intype, type, complain))\n       || ((convtype & CONV_IMPLICIT) && can_convert_intype_to_type))\n     {\n       {"}, {"sha": "de054ac14b824ce45e9bfd8f6f7f227b83f9b630", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -5854,7 +5854,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t \"because it is of type %qT\", expr, type,\n \t\t TREE_TYPE (expr));\n \t  /* If we are just one standard conversion off, explain.  */\n-\t  if (can_convert (type, TREE_TYPE (expr), complain))\n+\t  if (can_convert_standard (type, TREE_TYPE (expr), complain))\n \t    inform (input_location,\n \t\t    \"standard conversions are not allowed in this context\");\n \t  return NULL_TREE;"}, {"sha": "166ac116fd345260a05485cb58134bd1bf56b496", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53db1bc08e4450cb53975377c209ff9cc9bfca9b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=53db1bc08e4450cb53975377c209ff9cc9bfca9b", "patch": "@@ -1889,22 +1889,16 @@ check_final_overrider (tree overrider, tree basefn)\n \t\tfail = 1;\n \t    }\n \t}\n-      else if (!pedantic\n-\t       && can_convert (TREE_TYPE (base_type), TREE_TYPE (over_type),\n-\t\t\t       tf_warning_or_error))\n+      else if (can_convert_standard (TREE_TYPE (base_type),\n+\t\t\t\t     TREE_TYPE (over_type),\n+\t\t\t\t     tf_warning_or_error))\n \t/* GNU extension, allow trivial pointer conversions such as\n \t   converting to void *, or qualification conversion.  */\n \t{\n-\t  /* can_convert will permit user defined conversion from a\n-\t     (reference to) class type. We must reject them.  */\n-\t  if (CLASS_TYPE_P (non_reference (over_return)))\n-\t    fail = 2;\n-\t  else\n-\t    {\n-\t      warning (0, \"deprecated covariant return type for %q+#D\",\n-\t\t\t     overrider);\n-\t      warning (0, \"  overriding %q+#D\", basefn);\n-\t    }\n+\t  if (pedwarn (DECL_SOURCE_LOCATION (overrider), 0,\n+\t\t       \"invalid covariant return type for %q#D\", overrider))\n+\t    inform (DECL_SOURCE_LOCATION (basefn),\n+\t\t    \"  overriding %q+#D\", basefn);\n \t}\n       else\n \tfail = 2;"}]}