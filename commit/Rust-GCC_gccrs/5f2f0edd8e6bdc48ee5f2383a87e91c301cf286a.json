{"sha": "5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZjBlZGQ4ZTZiZGM0OGVlNWYyMzgzYTg3ZTkxYzMwMWNmMjg2YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2006-01-23T15:15:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-23T15:15:42Z"}, "message": "r110126@banpei: zack | 2006-01-22 14:47:42 -0800\n\n r110126@banpei:  zack | 2006-01-22 14:47:42 -0800\n \t* genautomata.c (process_state_longest_path, max_dfa_issue_rate)\n \t(output_dfa_max_issue_rate, locked_states_num): Delete.\n \t(struct automaton): Add locked_states field.\n \t(output_dead_lock_vect): Save number of locked states in\n \tautomaton->locked_states.  If it is zero, don't print anything.\n \t(output_max_insn_queue_index_def): Define max_insn_queue_index const.\n \t(output_internal_dead_lock_func): Only test the dead_lock_vect\n \tfor automata that have locked states.\n \t(output_statistics): Always print the number of locked states for\n \teach automaton.  Calculate total number of locked states here.\n \t(write_automata): Don't call output_dfa_max_issue_rate.\n \t* genattrtab.c: Define length_unit_log as a const variable.\n \t* genattr.c: Don't emit MAX_DFA_ISSUE_RATE.  Declare\n \tmax_insn_queue_index const.\n \t* final.c (length_unit_log): Declare const.\n \t* doc/tm.texi: Remove all references to MAX_DFA_ISSUE_RATE.\n\nFrom-SVN: r110122", "tree": {"sha": "3a326a29186290c79c728ba36294ed50b2517f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a326a29186290c79c728ba36294ed50b2517f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fb49ce77b288e65cb4f0cd417c521cc89ec3f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb49ce77b288e65cb4f0cd417c521cc89ec3f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb49ce77b288e65cb4f0cd417c521cc89ec3f42"}], "stats": {"total": 150, "additions": 53, "deletions": 97}, "files": [{"sha": "1de67c4c01757175b93d8cbbc467ac08edf8de75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -1,3 +1,22 @@\n+2006-01-22  Zack Weinberg  <zackw@panix.com>\n+\n+\t* genautomata.c (process_state_longest_path, max_dfa_issue_rate)\n+\t(output_dfa_max_issue_rate, locked_states_num): Delete.\n+\t(struct automaton): Add locked_states field.\n+\t(output_dead_lock_vect): Save number of locked states in\n+\tautomaton->locked_states.  If it is zero, don't print anything.\n+\t(output_max_insn_queue_index_def): Define max_insn_queue_index const.\n+\t(output_internal_dead_lock_func): Only test the dead_lock_vect\n+\tfor automata that have locked states.\n+\t(output_statistics): Always print the number of locked states for\n+\teach automaton.  Calculate total number of locked states here.\n+\t(write_automata): Don't call output_dfa_max_issue_rate.\n+\t* genattrtab.c: Define length_unit_log as a const variable.\n+\t* genattr.c: Don't emit MAX_DFA_ISSUE_RATE.  Declare\n+\tmax_insn_queue_index const.\n+\t* final.c (length_unit_log): Declare const.\n+\t* doc/tm.texi: Remove all references to MAX_DFA_ISSUE_RATE.\n+\n 2006-01-22  Zack Weinberg  <zackw@panix.com>\n \n \t* genautomata.c:  Include vec.h, not varray.h."}, {"sha": "7bd8522077c8e05509873d37b3056a02329c0aa9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -5695,9 +5695,6 @@ hooks @samp{TARGET_SCHED_REORDER} and @samp{TARGET_SCHED_REORDER2}).\n This value must be constant over the entire compilation.  If you need\n it to vary depending on what the instructions are, you must use\n @samp{TARGET_SCHED_VARIABLE_ISSUE}.\n-\n-You could define this hook to return the value of the macro\n-@code{MAX_DFA_ISSUE_RATE}.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_SCHED_VARIABLE_ISSUE (FILE *@var{file}, int @var{verbose}, rtx @var{insn}, int @var{more})\n@@ -5907,17 +5904,6 @@ closer to one another---i.e., closer than the dependence distance;  however,\n not in cases of \"costly dependences\", which this hooks allows to define.\n @end deftypefn\n \n-Macros in the following table are generated by the program\n-@file{genattr} and can be useful for writing the hooks.\n-\n-@defmac MAX_DFA_ISSUE_RATE\n-The macro definition is generated in the automaton based pipeline\n-description interface.  Its value is calculated from the automaton\n-based pipeline description and is equal to maximal number of all insns\n-described in constructions @samp{define_insn_reservation} which can be\n-issued on the same processor cycle.\n-@end defmac\n-\n @node Sections\n @section Dividing the Output into Sections (Texts, Data, @dots{})\n @c the above section title is WAY too long.  maybe cut the part between"}, {"sha": "82fa431fd8c19de128f28c1be7b49f5da9262b43", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -138,7 +138,7 @@ static const char *last_filename;\n /* Whether to force emission of a line note before the next insn.  */\n static bool force_source_line = false;\n   \n-extern int length_unit_log; /* This is defined in insn-attrtab.c.  */\n+extern const int length_unit_log; /* This is defined in insn-attrtab.c.  */\n \n /* Nonzero while outputting an `asm' with operands.\n    This means that inconsistencies are the user's fault, so don't die."}, {"sha": "03a00c5a54c48deb2b97147f3100dc8e6dd4d560", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -174,13 +174,6 @@ main (int argc, char **argv)\n       printf (\"#define CPU_UNITS_QUERY 0\\n\");\n       printf (\"#endif\\n\\n\");\n       /* Interface itself: */\n-      printf (\"extern int max_dfa_issue_rate;\\n\\n\");\n-      printf (\"/* The following macro value is calculated from the\\n\");\n-      printf (\"   automaton based pipeline description and is equal to\\n\");\n-      printf (\"   maximal number of all insns described in constructions\\n\");\n-      printf (\"   `define_insn_reservation' which can be issued on the\\n\");\n-      printf (\"   same processor cycle. */\\n\");\n-      printf (\"#define MAX_DFA_ISSUE_RATE max_dfa_issue_rate\\n\\n\");\n       printf (\"/* Insn latency time defined in define_insn_reservation. */\\n\");\n       printf (\"extern int insn_default_latency (rtx);\\n\\n\");\n       printf (\"/* Return nonzero if there is a bypass for given insn\\n\");\n@@ -198,7 +191,7 @@ main (int argc, char **argv)\n       printf (\"#endif\\n\\n\");\n       printf (\"/* Maximal possible number of insns waiting results being\\n\");\n       printf (\"   produced by insns whose execution is not finished. */\\n\");\n-      printf (\"extern int max_insn_queue_index;\\n\\n\");\n+      printf (\"extern const int max_insn_queue_index;\\n\\n\");\n       printf (\"/* Pointer to data describing current state of DFA.  */\\n\");\n       printf (\"typedef void *state_t;\\n\\n\");\n       printf (\"/* Size of the data in bytes.  */\\n\");"}, {"sha": "287c69b46313e5fa3220efc7c555c84be3c40d9d", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -1690,7 +1690,7 @@ write_length_unit_log (void)\n       for (length_unit_log = 0; length_or & 1; length_or >>= 1)\n \tlength_unit_log++;\n     }\n-  printf (\"int length_unit_log = %u;\\n\", length_unit_log);\n+  printf (\"const int length_unit_log = %u;\\n\", length_unit_log);\n }\n \n /* Take a COND expression and see if any of the conditions in it can be"}, {"sha": "38a1718cf5df46c2e8d7a623710e9bac2facd3b8", "filename": "gcc/genautomata.c", "status": "modified", "additions": 31, "deletions": 73, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=5f2f0edd8e6bdc48ee5f2383a87e91c301cf286a", "patch": "@@ -414,8 +414,6 @@ static void finish_regexp_representation     (void);\n \n static void output_range_type            (FILE *, long int, long int);\n static int longest_path_length           (state_t);\n-static void process_state_longest_path_length (state_t);\n-static void output_dfa_max_issue_rate    (void);\n static void output_chip_member_name      (FILE *, automaton_t);\n static void output_temp_chip_member_name (FILE *, automaton_t);\n static void output_translate_vect_name   (FILE *, automaton_t);\n@@ -1155,6 +1153,8 @@ struct automaton\n      8) elements in one vector element.  So the compression factor can\n      be 1 (no compression), 2, 4, 8.  */\n   int min_issue_delay_table_compression_factor;\n+  /* Total number of locked states in this automaton.  */\n+  int locked_states;\n };\n \n /* The following is the element of the list of automata.  */\n@@ -7015,47 +7015,6 @@ longest_path_length (state_t state)\n   return result;\n }\n \n-/* The following variable value is value of the corresponding global\n-   variable in the automaton based pipeline interface.  */\n-\n-static int max_dfa_issue_rate;\n-\n-/* The following function processes the longest path length staring\n-   from STATE to find MAX_DFA_ISSUE_RATE.  */\n-\n-static void\n-process_state_longest_path_length (state_t state)\n-{\n-  int value;\n-\n-  value = longest_path_length (state);\n-  if (value > max_dfa_issue_rate)\n-    max_dfa_issue_rate = value;\n-}\n-\n-/* The following macro value is name of the corresponding global\n-   variable in the automaton based pipeline interface.  */\n-\n-#define MAX_DFA_ISSUE_RATE_VAR_NAME \"max_dfa_issue_rate\"\n-\n-/* The following function calculates value of the corresponding\n-   global variable and outputs its declaration.  */\n-\n-static void\n-output_dfa_max_issue_rate (void)\n-{\n-  automaton_t automaton;\n-\n-  gcc_assert (UNDEFINED_LONGEST_PATH_LENGTH != ON_THE_PATH && ON_THE_PATH < 0);\n-  max_dfa_issue_rate = 0;\n-  for (automaton = description->first_automaton;\n-       automaton != NULL;\n-       automaton = automaton->next_automaton)\n-    pass_states (automaton, process_state_longest_path_length);\n-  fprintf (output_file, \"\\nint %s = %d;\\n\",\n-\t   MAX_DFA_ISSUE_RATE_VAR_NAME, max_dfa_issue_rate);\n-}\n-\n /* The function outputs all initialization values of VECT.  */\n static void\n output_vect (vla_hwint_t vect)\n@@ -7977,12 +7936,6 @@ output_min_issue_delay_table (automaton_t automaton)\n   VEC_free (vect_el_t,heap, compressed_min_issue_delay_vect);\n }\n \n-#ifndef NDEBUG\n-/* Number of states which contains transition only by advancing cpu\n-   cycle.  */\n-static int locked_states_num;\n-#endif\n-\n /* Form and output vector representing the locked states of\n    AUTOMATON.  */\n static void\n@@ -7995,6 +7948,7 @@ output_dead_lock_vect (automaton_t automaton)\n   /* Create vect of pointers to states ordered by num of\n      transitions from the state (state with the maximum num is the\n      first).  */\n+  automaton->locked_states = 0;\n   output_states_vect = 0;\n   pass_states (automaton, add_states_vect_el);\n \n@@ -8005,16 +7959,19 @@ output_dead_lock_vect (automaton_t automaton)\n       state_t s = VEC_index (state_t, output_states_vect, i);\n       arc = first_out_arc (s);\n       gcc_assert (arc);\n-      VEC_replace (vect_el_t, dead_lock_vect, s->order_state_num,\n-\t\t   (next_out_arc (arc) == NULL\n-\t\t    && (arc->insn->insn_reserv_decl\n-\t\t\t== DECL_INSN_RESERV (advance_cycle_insn_decl))\n-\t\t    ? 1 : 0));\n-#ifndef NDEBUG\n-      if (VEC_index (vect_el_t,dead_lock_vect, s->order_state_num))\n-        locked_states_num++;\n-#endif\n+      if (next_out_arc (arc) == NULL\n+\t  && (arc->insn->insn_reserv_decl\n+\t      == DECL_INSN_RESERV (advance_cycle_insn_decl)))\n+\t{\n+\t  VEC_replace (vect_el_t, dead_lock_vect, s->order_state_num, 1);\n+\t  automaton->locked_states++;\n+\t}\n+      else\n+\tVEC_replace (vect_el_t, dead_lock_vect, s->order_state_num, 0);\n     }\n+  if (automaton->locked_states == 0)\n+    return;\n+\n   fprintf (output_file, \"/* Vector for locked state flags.  */\\n\");\n   fprintf (output_file, \"static const \");\n   output_range_type (output_file, 0, 1);\n@@ -8085,9 +8042,6 @@ output_tables (void)\n {\n   automaton_t automaton;\n \n-#ifndef NDEBUG\n-  locked_states_num = 0;\n-#endif\n   initiate_min_issue_delay_pass_states ();\n   for (automaton = description->first_automaton;\n        automaton != NULL;\n@@ -8139,10 +8093,10 @@ output_max_insn_queue_index_def (void)\n   for (i = 0; (1 << i) <= max; i++)\n     ;\n   gcc_assert (i >= 0);\n-  fprintf (output_file, \"\\nint max_insn_queue_index = %d;\\n\\n\", (1 << i) - 1);\n+  fprintf (output_file, \"\\nconst int max_insn_queue_index = %d;\\n\\n\",\n+\t   (1 << i) - 1);\n }\n \n-\n /* The function outputs switch cases for insn reservations using\n    function *output_automata_list_code.  */\n static void\n@@ -8575,19 +8529,20 @@ output_internal_dead_lock_func (void)\n {\n   automaton_t automaton;\n \n-  fprintf (output_file, \"static int\\n%s (struct %s *%s)\\n\",\n+  fprintf (output_file, \"static int\\n%s (struct %s *ARG_UNUSED (%s))\\n\",\n \t   INTERNAL_DEAD_LOCK_FUNC_NAME, CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n\");\n   for (automaton = description->first_automaton;\n        automaton != NULL;\n        automaton = automaton->next_automaton)\n-    {\n-      fprintf (output_file, \"  if (\");\n-      output_dead_lock_vect_name (output_file, automaton);\n-      fprintf (output_file, \" [%s->\", CHIP_PARAMETER_NAME);\n-      output_chip_member_name (output_file, automaton);\n-      fprintf (output_file, \"])\\n    return 1/* TRUE */;\\n\");\n-    }\n+    if (automaton->locked_states)\n+      {\n+\tfprintf (output_file, \"  if (\");\n+\toutput_dead_lock_vect_name (output_file, automaton);\n+\tfprintf (output_file, \" [%s->\", CHIP_PARAMETER_NAME);\n+\toutput_chip_member_name (output_file, automaton);\n+\tfprintf (output_file, \"])\\n    return 1/* TRUE */;\\n\");\n+      }\n   fprintf (output_file, \"  return 0/* FALSE */;\\n}\\n\\n\");\n }\n \n@@ -9314,6 +9269,7 @@ output_statistics (FILE *f)\n   int state_alts_comb_vect_els = 0;\n   int state_alts_full_vect_els = 0;\n   int min_issue_delay_vect_els = 0;\n+  int locked_states = 0;\n #endif\n \n   for (automaton = description->first_automaton;\n@@ -9336,6 +9292,7 @@ output_statistics (FILE *f)\n \t}\n       fprintf (f, \"    %5d all insns      %5d insn equivalence classes\\n\",\n \t       description->insns_num, automaton->insn_equiv_classes_num);\n+      fprintf (f, \"    %d locked states\\n\", automaton->locked_states);\n #ifndef NDEBUG\n       fprintf\n \t(f, \"%5ld transition comb vector els, %5ld trans table els: %s\\n\",\n@@ -9363,6 +9320,8 @@ output_statistics (FILE *f)\n         += VEC_length (vect_el_t, automaton->state_alts_table->full_vect);\n       min_issue_delay_vect_els\n \t+= states_num * automaton->insn_equiv_classes_num;\n+      locked_states\n+\t+= automaton->locked_states;\n #endif\n     }\n #ifndef NDEBUG\n@@ -9376,7 +9335,7 @@ output_statistics (FILE *f)\n     (f, \"%5d all state alts comb vector els, %5d all state alts table els\\n\",\n      state_alts_comb_vect_els, state_alts_full_vect_els);\n   fprintf (f, \"%5d all min delay table els\\n\", min_issue_delay_vect_els);\n-  fprintf (f, \"%5d locked states num\\n\", locked_states_num);\n+  fprintf (f, \"%5d all locked states\\n\", locked_states);\n #endif\n }\n \n@@ -9865,7 +9824,6 @@ write_automata (void)\n   output_time = create_ticker ();\n   if (progress_flag)\n     fprintf (stderr, \"Forming and outputting automata tables...\");\n-  output_dfa_max_issue_rate ();\n   output_tables ();\n   if (progress_flag)\n     {"}]}