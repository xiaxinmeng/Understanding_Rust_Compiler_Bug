{"sha": "da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1YzBmNmVmNTBmMGExYTUxMTE5MWM5ZTIwNTJiZDYzYWVlMTJjNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-10-02T18:44:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-10-02T18:44:50Z"}, "message": "time_members_gnu.h: Remove.\n\n\n2001-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/time_members_gnu.h: Remove.\n\t* config/locale/time_members_generic.h: Remove.\n\t* config/locale/time_members_gnu.cc (__timepunct::_M_put_helper): Add.\n\t* config/locale/time_members_generic.cc: Same.\n\t* include/bits/locale_facets.h: Add data members.\n\t(__timepunct::_M_put_helper): Change signature.\n\t(__timepunct::_M_date_formats): Same.\n\t(__timepunct::_M_time_formats): Same.\n\t(__timepunct::_M_ampm): Add.\n\t(__timepunct::_M_date_time_formats): Add.\n\t(time_get::_M_extract_via_format): Add.\n\t(time_get::_M_extract_time): Change to...\n\t(time_get::_M_extract_num): ... this, modify signature.\n\t* include/bits/locale_facets.tcc (time_get::do_get_year): Fix.\n\t(time_get::do_get_time): Fix.\n\t(time_get::do_get_date): Fix.\n\n\t* acinclude.m4: Remove CTIME_H.\n\t* aclocal.m4: Regenerate.\n\t* include/Makefile.am: Same.\n\t* include/Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\n\t* testsuite/22_locale/time_get_members_char.cc: Fix.\n\t* testsuite/22_locale/time_get_members_wchar_t.cc: Add.\n\t* testsuite/22_locale/time_put_members_wchar_t.cc: Add.\n\nFrom-SVN: r45966", "tree": {"sha": "25ea33498c6963bfed74e7c354dd1d81f141af42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ea33498c6963bfed74e7c354dd1d81f141af42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/comments", "author": null, "committer": null, "parents": [{"sha": "8a2b8c5abe32267c86c34cb8eccb779448e8f04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2b8c5abe32267c86c34cb8eccb779448e8f04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2b8c5abe32267c86c34cb8eccb779448e8f04f"}], "stats": {"total": 3397, "additions": 2298, "deletions": 1099}, "files": [{"sha": "65ec49e084fc038c87795970e89a9f583c194c1c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -1,3 +1,32 @@\n+2001-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/time_members_gnu.h: Remove.\n+\t* config/locale/time_members_generic.h: Remove.\t\n+\t* config/locale/time_members_gnu.cc (__timepunct::_M_put_helper): Add.\n+\t* config/locale/time_members_generic.cc: Same.\n+\t* include/bits/locale_facets.h: Add data members.\n+\t(__timepunct::_M_put_helper): Change signature.\n+\t(__timepunct::_M_date_formats): Same.\n+\t(__timepunct::_M_time_formats): Same.\t\n+\t(__timepunct::_M_ampm): Add.\n+\t(__timepunct::_M_date_time_formats): Add.\n+\t(time_get::_M_extract_via_format): Add.\n+\t(time_get::_M_extract_time): Change to...\n+\t(time_get::_M_extract_num): ... this, modify signature.\n+\t* include/bits/locale_facets.tcc (time_get::do_get_year): Fix.\n+\t(time_get::do_get_time): Fix.\n+\t(time_get::do_get_date): Fix.\t\n+\t\n+\t* acinclude.m4: Remove CTIME_H.\n+\t* aclocal.m4: Regenerate.\n+\t* include/Makefile.am: Same.\n+\t* include/Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+\t* testsuite/22_locale/time_get_members_char.cc: Fix.\n+\t* testsuite/22_locale/time_get_members_wchar_t.cc: Add.\n+\t* testsuite/22_locale/time_put_members_wchar_t.cc: Add.\t\n+\t\n 2001-10-01  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cpu/cris/bits/atomicity.h: Correct file header."}, {"sha": "34bae7d9c7ee9c42cbc7647beeda90584d82b21c", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "803af900c344b96f246c90321b47c1f12e823765", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -1063,7 +1063,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n-      CTIME_H=config/locale/time_members_generic.h\n       CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     xgnu)\n@@ -1093,7 +1092,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n       CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n-      CTIME_H=config/locale/time_members_gnu.h\n       CTIME_CC=config/locale/time_members_gnu.cc\n       ;;\n     xieee_1003.1)\n@@ -1110,7 +1108,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n-      CTIME_H=config/locale/time_members_generic.h\n       CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     *)\n@@ -1128,7 +1125,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n-  AC_SUBST(CTIME_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)"}, {"sha": "fb07a03b34271b671bc46db7f8e18fd31f7e1441", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -1075,7 +1075,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_generic.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n-      CTIME_H=config/locale/time_members_generic.h\n       CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     xgnu)\n@@ -1105,7 +1104,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_gnu.cc\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n       CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n-      CTIME_H=config/locale/time_members_gnu.h\n       CTIME_CC=config/locale/time_members_gnu.cc\n       ;;\n     xieee_1003.1)\n@@ -1122,7 +1120,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/messages_members_ieee_1003.1-200x.cc\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n-      CTIME_H=config/locale/time_members_generic.h\n       CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     *)\n@@ -1140,7 +1137,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n-  AC_SUBST(CTIME_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n   AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)"}, {"sha": "16788d40f3da83622d9f6dd40dd3a3449f7b4b3d", "filename": "libstdc++-v3/config/locale/time_members_generic.cc", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -38,6 +38,16 @@\n \n namespace std\n {\n+  template<>\n+    void\n+    __timepunct<char>::\n+    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n+\t\t  const tm* __tm) const\n+    {\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      strftime(__s, __maxlen, __format, __tm);\n+    }\n+\n   template<> \n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale)\n@@ -47,8 +57,11 @@ namespace std\n       _M_date_era_format = \"%m/%d/%Y\";\n       _M_time_format = \"%H:%M:%S\";\n       _M_time_era_format = \"%H:%M:%S\";\n+      _M_date_time_format = \"\";\n+      _M_date_time_era_format = \"\";\n       _M_am = \"AM\";\n       _M_pm = \"PM\";\n+      _M_am_pm_format = \"\";\n \t  \n       // Day names, starting with \"C\"'s Sunday.\n       _M_day1 = \"Sunday\";\n@@ -98,9 +111,76 @@ namespace std\n     }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    void\n+    __timepunct<wchar_t>::\n+    _M_put_helper(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+\t\t  const tm* __tm) const\n+    {\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      wcsftime(__s, __maxlen, __format, __tm);\n+    }\n+\n   template<> \n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale)\n-    { }\n+    {\n+      // \"C\" locale\n+      _M_date_format = L\"%m/%d/%y\";\n+      _M_date_era_format = L\"%m/%d/%y\";\n+      _M_time_format = L\"%H:%M:%S\";\n+      _M_time_era_format = L\"%H:%M:%S\";\n+      _M_date_time_format = L\"\";\n+      _M_date_time_era_format = L\"\";\n+      _M_am = L\"AM\";\n+      _M_pm = L\"PM\";\n+      _M_am_pm_format = L\"\";\n+\n+      // Day names, starting with \"C\"'s Sunday.\n+      _M_day1 = L\"Sunday\";\n+      _M_day2 = L\"Monday\";\n+      _M_day3 = L\"Tuesday\";\n+      _M_day4 = L\"Wednesday\";\n+      _M_day5 = L\"Thursday\";\n+      _M_day6 = L\"Friday\";\n+      _M_day7 = L\"Saturday\";\n+\n+      // Abbreviated day names, starting with \"C\"'s Sun.\n+      _M_day_a1 = L\"Sun\";\n+      _M_day_a2 = L\"Mon\";\n+      _M_day_a3 = L\"Tue\";\n+      _M_day_a4 = L\"Wed\";\n+      _M_day_a5 = L\"Thu\";\n+      _M_day_a6 = L\"Fri\";\n+      _M_day_a7 = L\"Sat\";\n+\n+      // Month names, starting with \"C\"'s January.\n+      _M_month01 = L\"January\";\n+      _M_month02 = L\"February\";\n+      _M_month03 = L\"March\";\n+      _M_month04 = L\"April\";\n+      _M_month05 = L\"May\";\n+      _M_month06 = L\"June\";\n+      _M_month07 = L\"July\";\n+      _M_month08 = L\"August\";\n+      _M_month09 = L\"September\";\n+      _M_month10 = L\"October\";\n+      _M_month11 = L\"November\";\n+      _M_month12 = L\"December\";\n+\n+      // Abbreviated month names, starting with \"C\"'s Jan.\n+      _M_month_a01 = L\"Jan\";\n+      _M_month_a02 = L\"Feb\";\n+      _M_month_a03 = L\"Mar\";\n+      _M_month_a04 = L\"Apr\";\n+      _M_month_a05 = L\"May\";\n+      _M_month_a06 = L\"Jun\";\n+      _M_month_a07 = L\"July\";\n+      _M_month_a08 = L\"Aug\";\n+      _M_month_a09 = L\"Sep\";\n+      _M_month_a10 = L\"Oct\";\n+      _M_month_a11 = L\"Nov\";\n+      _M_month_a12 = L\"Dec\";\n+    }\n #endif\n }"}, {"sha": "88b8208feab90d6543525f13f63087a3ec2cf038", "filename": "libstdc++-v3/config/locale/time_members_generic.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2b8c5abe32267c86c34cb8eccb779448e8f04f/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2b8c5abe32267c86c34cb8eccb779448e8f04f/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h?ref=8a2b8c5abe32267c86c34cb8eccb779448e8f04f", "patch": "@@ -1,54 +0,0 @@\n-// std::time_get, std::time_put implementation, generic version -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 22.2.5.1.2 - time_get virtual functions\n-// ISO C++ 14882: 22.2.5.3.2 - time_put virtual functions\n-//\n-\n-// Written by Benjamin Kosnik <bkoz@redhat.com>\n-\n-  template<typename _CharT>\n-    void\n-    __timepunct<_CharT>::\n-    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n-\t\t  const tm* __tm) const\n-    {\n-      setlocale(LC_ALL, _M_name_timepunct);\n-      strftime(__s, __maxlen, __format, __tm); \n-    }\n-\n-  template<typename _CharT>\n-    void\n-    __timepunct<_CharT>::\n-    _M_get_helper(const char*, const char*, tm*) const\n-    {\n-      setlocale(LC_ALL, _M_name_timepunct);\n-      // strptime(__s, __format, __tm);\n-    }"}, {"sha": "74d89992095dd65be85eefea149c9dd00e384363", "filename": "libstdc++-v3/config/locale/time_members_gnu.cc", "status": "modified", "additions": 156, "deletions": 4, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -38,20 +38,41 @@\n \n namespace std\n {\n+  template<>\n+    void\n+    __timepunct<char>::\n+    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n+\t\t  const tm* __tm) const\n+    {\n+#if 0\n+      // Requires glibc 2.3\n+      if (_M_c_locale_timepunct)\n+\t__strftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n+      else\n+\tstrftime(__s, __maxlen, __format, __tm);\n+#else\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      strftime(__s, __maxlen, __format, __tm);\n+#endif\n+    }\n+\n   template<> \n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_date_format = \"%m/%d/%Y\";\n-\t  _M_date_era_format = \"%m/%d/%Y\";\n+\t  _M_date_format = \"%m/%d/%y\";\n+\t  _M_date_era_format = \"%m/%d/%y\";\n \t  _M_time_format = \"%H:%M:%S\";\n \t  _M_time_era_format = \"%H:%M:%S\";\n+\t  _M_date_time_format = \"\";\n+\t  _M_date_time_era_format = \"\";\n \t  _M_am = \"AM\";\n \t  _M_pm = \"PM\";\n-\t  \n+\t  _M_am_pm_format = \"\";\n+\n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_day1 = \"Sunday\";\n \t  _M_day2 = \"Monday\";\n@@ -106,8 +127,11 @@ namespace std\n \t  _M_date_era_format = __nl_langinfo_l(ERA_D_FMT, __cloc);\n \t  _M_time_format = __nl_langinfo_l(T_FMT, __cloc);\n \t  _M_time_era_format = __nl_langinfo_l(ERA_T_FMT, __cloc);\n+\t  _M_date_time_format = __nl_langinfo_l(D_T_FMT, __cloc);\n+\t  _M_date_time_era_format = __nl_langinfo_l(ERA_D_T_FMT, __cloc);\n \t  _M_am = __nl_langinfo_l(AM_STR, __cloc);\n \t  _M_pm = __nl_langinfo_l(PM_STR, __cloc);\n+\t  _M_am_pm_format = __nl_langinfo_l(T_FMT_AMPM, __cloc);\n \n \t  // Day names, starting with \"C\"'s Sunday.\n \t  _M_day1 = __nl_langinfo_l(DAY_1, __cloc);\n@@ -158,19 +182,147 @@ namespace std\n     }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    void\n+    __timepunct<wchar_t>::\n+    _M_put_helper(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+\t\t  const tm* __tm) const\n+    {\n+#if 0\n+      // Requires glibc 2.3\n+      if (_M_c_locale_timepunct)\n+\t__wcsftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n+      else\n+\twcsftime(__s, __maxlen, __format, __tm);\n+#else\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      wcsftime(__s, __maxlen, __format, __tm);\n+#endif\n+    }\n+\n   template<> \n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n+\t  _M_date_format = L\"%m/%d/%y\";\n+\t  _M_date_era_format = L\"%m/%d/%y\";\n+\t  _M_time_format = L\"%H:%M:%S\";\n+\t  _M_time_era_format = L\"%H:%M:%S\";\n+\t  _M_date_time_format = L\"\";\n+\t  _M_date_time_era_format = L\"\";\n+\t  _M_am = L\"AM\";\n+\t  _M_pm = L\"PM\";\n+\t  _M_am_pm_format = L\"\";\n+\n+\t  // Day names, starting with \"C\"'s Sunday.\n+\t  _M_day1 = L\"Sunday\";\n+\t  _M_day2 = L\"Monday\";\n+\t  _M_day3 = L\"Tuesday\";\n+\t  _M_day4 = L\"Wednesday\";\n+\t  _M_day5 = L\"Thursday\";\n+\t  _M_day6 = L\"Friday\";\n+\t  _M_day7 = L\"Saturday\";\n+\n+\t  // Abbreviated day names, starting with \"C\"'s Sun.\n+\t  _M_day_a1 = L\"Sun\";\n+\t  _M_day_a2 = L\"Mon\";\n+\t  _M_day_a3 = L\"Tue\";\n+\t  _M_day_a4 = L\"Wed\";\n+\t  _M_day_a5 = L\"Thu\";\n+\t  _M_day_a6 = L\"Fri\";\n+\t  _M_day_a7 = L\"Sat\";\n+\n+\t  // Month names, starting with \"C\"'s January.\n+\t  _M_month01 = L\"January\";\n+\t  _M_month02 = L\"February\";\n+\t  _M_month03 = L\"March\";\n+\t  _M_month04 = L\"April\";\n+\t  _M_month05 = L\"May\";\n+\t  _M_month06 = L\"June\";\n+\t  _M_month07 = L\"July\";\n+\t  _M_month08 = L\"August\";\n+\t  _M_month09 = L\"September\";\n+\t  _M_month10 = L\"October\";\n+\t  _M_month11 = L\"November\";\n+\t  _M_month12 = L\"December\";\n+\n+\t  // Abbreviated month names, starting with \"C\"'s Jan.\n+\t  _M_month_a01 = L\"Jan\";\n+\t  _M_month_a02 = L\"Feb\";\n+\t  _M_month_a03 = L\"Mar\";\n+\t  _M_month_a04 = L\"Apr\";\n+\t  _M_month_a05 = L\"May\";\n+\t  _M_month_a06 = L\"Jun\";\n+\t  _M_month_a07 = L\"July\";\n+\t  _M_month_a08 = L\"Aug\";\n+\t  _M_month_a09 = L\"Sep\";\n+\t  _M_month_a10 = L\"Oct\";\n+\t  _M_month_a11 = L\"Nov\";\n+\t  _M_month_a12 = L\"Dec\";\n \t}\n       else\n \t{\n \t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\n+\t  _M_date_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_FMT, __cloc));\n+\t  _M_date_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_FMT, __cloc));\n+\t  _M_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT, __cloc));\n+\t  _M_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_T_FMT, __cloc));\n+\t  _M_date_time_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WD_T_FMT, __cloc));\n+\t  _M_date_time_era_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WERA_D_T_FMT, __cloc));\n+\t  _M_am = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WAM_STR, __cloc));\n+\t  _M_pm = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WPM_STR, __cloc));\n+\t  _M_am_pm_format = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WT_FMT_AMPM, __cloc));\n+\n+\t  // Day names, starting with \"C\"'s Sunday.\n+\t  _M_day1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_1, __cloc));\n+\t  _M_day2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_2, __cloc));\n+\t  _M_day3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_3, __cloc));\n+\t  _M_day4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_4, __cloc));\n+\t  _M_day5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_5, __cloc));\n+\t  _M_day6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_6, __cloc));\n+\t  _M_day7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WDAY_7, __cloc));\n+\n+\t  // Abbreviated day names, starting with \"C\"'s Sun.\n+\t  _M_day_a1 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_1, __cloc));\n+\t  _M_day_a2 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_2, __cloc));\n+\t  _M_day_a3 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_3, __cloc));\n+\t  _M_day_a4 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_4, __cloc));\n+\t  _M_day_a5 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_5, __cloc));\n+\t  _M_day_a6 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_6, __cloc));\n+\t  _M_day_a7 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABDAY_7, __cloc));\n+\n+\t  // Month names, starting with \"C\"'s January.\n+\t  _M_month01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_1, __cloc));\n+\t  _M_month02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_2, __cloc));\n+\t  _M_month03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_3, __cloc));\n+\t  _M_month04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_4, __cloc));\n+\t  _M_month05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_5, __cloc));\n+\t  _M_month06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_6, __cloc));\n+\t  _M_month07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_7, __cloc));\n+\t  _M_month08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_8, __cloc));\n+\t  _M_month09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_9, __cloc));\n+\t  _M_month10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_10, __cloc));\n+\t  _M_month11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_11, __cloc));\n+\t  _M_month12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WMON_12, __cloc));\n+\n+\t  // Abbreviated month names, starting with \"C\"'s Jan.\n+\t  _M_month_a01 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_1, __cloc));\n+\t  _M_month_a02 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_2, __cloc));\n+\t  _M_month_a03 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_3, __cloc));\n+\t  _M_month_a04 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_4, __cloc));\n+\t  _M_month_a05 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_5, __cloc));\n+\t  _M_month_a06 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_6, __cloc));\n+\t  _M_month_a07 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_7, __cloc));\n+\t  _M_month_a08 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_8, __cloc));\n+\t  _M_month_a09 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_9, __cloc));\n+\t  _M_month_a10 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_10, __cloc));\n+\t  _M_month_a11 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_11, __cloc));\n+\t  _M_month_a12 = reinterpret_cast<wchar_t*>(__nl_langinfo_l(_NL_WABMON_12, __cloc));\n \t}\n     }\n #endif\n }\n-"}, {"sha": "16c9ff39d183b945e9c09eb9dac8b33fff1fcfd0", "filename": "libstdc++-v3/config/locale/time_members_gnu.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2b8c5abe32267c86c34cb8eccb779448e8f04f/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2b8c5abe32267c86c34cb8eccb779448e8f04f/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h?ref=8a2b8c5abe32267c86c34cb8eccb779448e8f04f", "patch": "@@ -1,70 +0,0 @@\n-// std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 22.2.5.1.2 - time_get virtual functions\n-// ISO C++ 14882: 22.2.5.3.2 - time_put virtual functions\n-//\n-\n-// Written by Benjamin Kosnik <bkoz@redhat.com>\n-\n-  template<typename _CharT>\n-    void\n-    __timepunct<_CharT>::\n-    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n-\t\t  const tm* __tm) const\n-    {\n-#if 0\n-      // Requires glibc 2.3\n-      if (_M_c_locale_timepunct)\n-\t__strftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n-      else\n-\tstrftime(__s, __maxlen, __format, __tm);\n-#else\n-      setlocale(LC_ALL, _M_name_timepunct);\n-      strftime(__s, __maxlen, __format, __tm);\n-#endif\n-    }\n-\n-  template<typename _CharT>\n-    void\n-    __timepunct<_CharT>::\n-    _M_get_helper(const char* __s, const char* __format, tm* __tm) const\n-    {\n-#if 0\n-      // Requires glibc 2.3\n-      if (_M_c_locale_timepunct)\n-\t__strptime_l(__s, _M_c_locale_timepunct, __format, __tm);\n-      else\n-\tstrptime(__s, __format, __tm);\n-#else\n-      setlocale(LC_ALL, _M_name_timepunct);\n-      strptime(__s, __format, __tm);\n-#endif\n-    }"}, {"sha": "fcbd6f21c75468a04fb5cf65816b78e358e0aebf", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 834, "deletions": 839, "changes": 1673, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4"}, {"sha": "da0bad83d7cab1680ab0b41b571635d27f694c38", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -335,7 +335,6 @@ stamp-target: ${target_headers} ${target_builddir}\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n \t  echo `date` > stamp-target; \\\n \tfi"}, {"sha": "a7cca4cd96624e6819735f02e607a41944565a9f", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@\n@@ -577,7 +576,6 @@ stamp-target: ${target_headers} ${target_builddir}\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n \t  echo `date` > stamp-target; \\\n \tfi"}, {"sha": "11bf14b1f24492153dbf2c73a19f71bd237a5cf4", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -1078,9 +1078,12 @@ namespace std\n       const _CharT* \t\t\t_M_date_era_format;\n       const _CharT* \t\t\t_M_time_format;\n       const _CharT* \t\t\t_M_time_era_format;\n+      const _CharT*\t\t\t_M_date_time_format;\n+      const _CharT*\t\t\t_M_date_time_era_format;\n       const _CharT* \t\t\t_M_am;\n       const _CharT* \t\t\t_M_pm;\n-    \n+      const _CharT*\t\t\t_M_am_pm_format;\n+\n       // Day names, starting with \"C\"'s Sunday.\n       const _CharT*  \t\t\t_M_day1;\n       const _CharT*  \t\t\t_M_day2;\n@@ -1139,20 +1142,39 @@ namespace std\n       { _M_initialize_timepunct(__cloc); }\n \n       void\n-      _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n+      _M_put_helper(_CharT* __s, size_t __maxlen, const _CharT* __format, \n \t\t    const tm* __tm) const;\n \n-      // Not used, at the moment. Likely to be strptime-ish.\n       void\n-      _M_get_helper(const char* __s, const char* __format, tm* __tm) const;\n+      _M_date_formats(const _CharT** __date) const\n+      {\n+\t// Always have default first.\n+\t__date[0] = _M_date_format;\n+\t__date[1] = _M_date_era_format;\t\n+      }\n \n-      const _CharT*\n-      _M_date_formats() const\n-      { return _M_date_format; }\n+      void\n+      _M_time_formats(const _CharT** __time) const\n+      {\n+\t// Always have default first.\n+\t__time[0] = _M_time_format;\n+\t__time[1] = _M_time_era_format;\t\n+      }\n \n-      const _CharT*\n-      _M_time_formats() const\n-      { return _M_time_format; }\n+      void\n+      _M_ampm(const _CharT** __ampm) const\n+      { \n+\t__ampm[0] = _M_am;\n+\t__ampm[1] = _M_pm;\n+      }      \n+\n+      void\n+      _M_date_time_formats(const _CharT** __dt) const\n+      {\n+\t// Always have default first.\n+\t__dt[0] = _M_date_time_format;\n+\t__dt[1] = _M_date_time_era_format;\t\n+      }\n \n       void\n       _M_days(const _CharT** __days) const\n@@ -1176,7 +1198,7 @@ namespace std\n \t__days[4] = _M_day_a5;\n \t__days[5] = _M_day_a6;\n \t__days[6] = _M_day_a7;\n-     }\n+      }\n \n       void\n       _M_months(const _CharT** __months) const\n@@ -1242,6 +1264,13 @@ namespace std\n     __timepunct<_CharT>::_M_initialize_timepunct(__c_locale)\n     { }\n \n+  // NB: Cannot be made generic.\n+  template<typename _CharT>\n+    void\n+    __timepunct<_CharT>::_M_put_helper(_CharT*, size_t, const _CharT*, \n+\t\t\t\t       const tm*) const\n+    { }\n+\n   template<> \n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);\n@@ -1327,21 +1356,25 @@ namespace std\n       do_get_year(iter_type __beg, iter_type __end, ios_base& __io,\n \t\t  ios_base::iostate& __err, tm* __tm) const;\n \n-      // Extract time component in the form of\n-      // [digitdigit][separator], with a maximum of two digits per\n-      // separator. Used by do_get_time.\n+      // Extract numeric component of length __len.\n       void\n-      _M_extract_time(iter_type& __beg, iter_type& __end, int& __member,\n-\t\t      int __min, int __max, const char_type __sep, \n-\t\t      bool __extract, const ctype<_CharT>& __ctype, \n-\t\t      ios_base::iostate& __err) const;\n+      _M_extract_num(iter_type& __beg, iter_type& __end, int& __member,\n+\t\t     int __min, int __max, size_t __len,\n+\t\t     const ctype<_CharT>& __ctype, \n+\t\t     ios_base::iostate& __err) const;\n       \n       // Extract day or month name, or any unique array of string\n       // literals in a const _CharT* array.\n       void\n       _M_extract_name(iter_type& __beg, iter_type& __end, int& __member,\n \t\t      const _CharT** __names, size_t __indexlen, \n \t\t      ios_base::iostate& __err) const;\n+\n+      // Extract on a component-by-component basis, via __format argument.\n+      void\n+      _M_extract_via_format(iter_type& __beg, iter_type& __end, ios_base& __io,\n+\t\t\t    ios_base::iostate& __err, tm* __tm, \n+\t\t\t    const _CharT* __format) const;\n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -1418,9 +1451,6 @@ namespace std\n       ~time_put_byname() { }\n     };\n \n-  // Include host and configuration specific messages virtual functions.\n-  #include <bits/time_members.h>\n-\n \n   struct money_base\n   {"}, {"sha": "c4d972c6aeb266b21944c38bdfa57073e188b711", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 243, "deletions": 92, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -1328,45 +1328,232 @@ namespace std\n   template<typename _CharT, typename _InIter>\n     void\n     time_get<_CharT, _InIter>::\n-    _M_extract_time(iter_type& __beg, iter_type& __end, int& __member,\n-\t\t    int __min, int __max, const char_type __sep, \n-\t\t    bool __extract, const ctype<_CharT>& __ctype, \n-\t\t    ios_base::iostate& __err) const\n-    {\n-      if (__err == ios_base::goodbit)\n+    _M_extract_via_format(iter_type& __beg, iter_type& __end, ios_base& __io,\n+\t\t\t  ios_base::iostate& __err, tm* __tm, \n+\t\t\t  const _CharT* __format) const\n+    {  \n+      locale __loc = __io.getloc();\n+      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n+      size_t __len = char_traits<_CharT>::length(__format);\n+\n+      for (size_t __i = 0; __beg != __end && __i < __len && !__err; ++__i)\n \t{\n-\t  size_t __i = 0;\n-\t  string __digits;\n-\t  bool __testvalid = true;\n-\t  const ctype_base::mask __digit = ctype_base::digit;\n-\t  char_type __c = *__beg;\n-\t  for (;__beg != __end && __ctype.is(__digit, __c) && __i < 2; ++__i)\n-\t    {\n-\t      __digits += __ctype.narrow(__c, 0);\n-\t      __c = *(++__beg);\n-\t    }\n-\t  if (__i == 2)\n+\t  char __c = __format[__i];\n+\t  if (__c == '%')\n \t    {\n-\t      int __value = atoi(__digits.c_str());\n-\t      if (__min <= __value && __value <= __max)\n-\t\t__member = __value;\n+\t      // Verify valid formatting code, attempt to extract.\n+\t      __c = __format[++__i];\n+\t      char __mod = 0;\n+\t      int __mem = 0; \n+\t      if (__c == 'E' || __c == 'O')\n+\t\t{\n+\t\t  __mod = __c;\n+\t\t  __c = __format[++__i];\n+\t\t}\n+\t      switch (__c)\n+\t\t{\n+\t\t  const char* __cs;\n+\t\t  _CharT __wcs[10];\n+\t\tcase 'a':\n+\t\t  // Abbreviated weekday name [tm_wday]\n+\t\t  const char_type*  __days1[7];\n+\t\t  __tp._M_days_abbreviated(__days1);\n+\t\t  _M_extract_name(__beg, __end, __tm->tm_wday, __days1, 7, \n+\t\t\t\t  __err);\n+\t\t  break;\n+\t\tcase 'A':\n+\t\t  // Weekday name [tm_wday].\n+\t\t  const char_type*  __days2[7];\n+\t\t  __tp._M_days(__days2);\n+\t\t  _M_extract_name(__beg, __end, __tm->tm_wday, __days2, 7, \n+\t\t\t\t  __err);\n+\t\t  break;\n+\t\tcase 'h':\n+\t\tcase 'b':\n+\t\t  // Abbreviated month name [tm_mon]\n+\t\t  const char_type*  __months1[12];\n+\t\t  __tp._M_months_abbreviated(__months1);\n+\t\t  _M_extract_name(__beg, __end, __tm->tm_mon, __months1, 12, \n+\t\t\t\t  __err);\n+\t\t  break;\n+\t\tcase 'B':\n+\t\t  // Month name [tm_mon].\n+\t\t  const char_type*  __months2[12];\n+\t\t  __tp._M_months(__months2);\n+\t\t  _M_extract_name(__beg, __end, __tm->tm_mon, __months2, 12, \n+\t\t\t\t  __err);\n+\t\t  break;\n+\t\tcase 'c':\n+\t\t  // Default time and date representation.\n+\t\t  const char_type*  __dt[2];\n+\t\t  __tp._M_date_time_formats(__dt);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__dt[0]);\n+\t\t  break;\n+\t\tcase 'd':\n+\t\t  // Day [01, 31]. [tm_mday]\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_mday, 1, 31, 2, \n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 'D':\n+\t\t  // Equivalent to %m/%d/%y.[tm_mon, tm_mday, tm_year]\n+\t\t  __cs = \"%m/%d/%y\";\n+\t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__wcs);\n+\t\t  break;\n+\t\tcase 'H':\n+\t\t  // Hour [00, 23]. [tm_hour]\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_hour, 0, 23, 2,\n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 'I':\n+\t\t  // Hour [01, 12]. [tm_hour]\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2,\n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 'm':\n+\t\t  // Month [01, 12]. [tm_mon]\n+\t\t  _M_extract_num(__beg, __end, __mem, 1, 12, 2,\n+\t\t\t\t __ctype, __err);\n+\t\t  if (!__err)\n+\t\t    __tm->tm_mon = __mem - 1;\n+\t\t  break;\n+\t\tcase 'M':\n+\t\t  // Minute [00, 59]. [tm_min]\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_min, 0, 59, 2,\n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 'n':\n+\t\t  if (__ctype.narrow(*__beg, 0) == '\\n')\n+\t\t    ++__beg;\n+\t\t  else\n+\t\t    __err |= ios_base::failbit;\n+\t\t  break;\n+\t\tcase 'R':\n+\t\t  // Equivalent to (%H:%M).\n+\t\t  __cs = \"%H:%M\";\n+\t\t  __ctype.widen(__cs, __cs + 6, __wcs);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__wcs);\n+\t\t  break;\n+\t\tcase 'S':\n+\t\t  // Seconds.\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_sec, 0, 59, 2,\n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 't':\n+\t\t  if (__ctype.narrow(*__beg, 0) == '\\t')\n+\t\t    ++__beg;\n+\t\t  else\n+\t\t__err |= ios_base::failbit;\n+\t\t  break;\n+\t\tcase 'T':\n+\t\t  // Equivalent to (%H:%M:%S).\n+\t\t  __cs = \"%H:%M:%S\";\n+\t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__wcs);\n+\t\t  break;\n+\t\tcase 'x':\n+\t\t  // Locale's date.\n+\t\t  const char_type*  __dates[2];\n+\t\t  __tp._M_date_formats(__dates);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__dates[0]);\n+\t\t  break;\n+\t\tcase 'X':\n+\t\t  // Locale's time.\n+\t\t  const char_type*  __times[2];\n+\t\t  __tp._M_time_formats(__times);\n+\t\t  _M_extract_via_format(__beg, __end, __io, __err, __tm, \n+\t\t\t\t\t__times[0]);\n+\t\t  break;\n+\t\tcase 'y':\n+\t\t  // Two digit year. [tm_year]\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_year, 0, 99, 2, \n+\t\t\t\t __ctype, __err);\n+\t\t  break;\n+\t\tcase 'Y':\n+\t\t  // Year [1900). [tm_year]\n+\t\t  _M_extract_num(__beg, __end, __mem, 0, \n+\t\t\t\t numeric_limits<int>::max(), 4, \n+\t\t\t\t __ctype, __err);\n+\t\t  if (!__err)\n+\t\t    __tm->tm_year = __mem - 1900;\n+\t\t  break;\n+\t\tcase 'Z':\n+\t\t  // Timezone info.\n+\t\t  if (__ctype.is(ctype_base::upper, *__beg))\n+\t\t    {\n+\t\t      int __tmp;\n+\t\t      _M_extract_name(__beg, __end, __tmp, \n+\t\t\t\t      __timepunct<_CharT>::_S_timezones, \n+\t\t\t\t      14, __err);\n+\t\t      \n+\t\t      // GMT requires special effort.\n+\t\t      char_type __c = *__beg;\n+\t\t      if (!__err && __tmp == 0 \n+\t\t\t  && (__c == __ctype.widen('-') \n+\t\t\t      || __c == __ctype.widen('+')))\n+\t\t\t{\n+\t\t\t  _M_extract_num(__beg, __end, __tmp, 0, 23, 2,\n+\t\t\t\t\t  __ctype, __err);\n+\t\t\t  _M_extract_num(__beg, __end, __tmp, 0, 59, 2,\n+\t\t\t\t\t  __ctype, __err);\n+\t\t\t}\t    \n+\t\t\t  }\n+\t\t      else\n+\t\t\t__err |= ios_base::failbit;\n+\t\t      break;\n+\t\t    default:\n+\t\t      // Not recognized.\n+\t\t      __err |= ios_base::failbit;\n+\t\t    }\n+\t\t}\n \t      else\n-\t\t__testvalid = false;\n-\t    }\n+\t\t{\n+\t\t  // Verify format and input match, extract and discard.\n+\t\t  if (__c == __ctype.narrow(*__beg, 0))\n+\t\t    ++__beg;\n+\t\t  else\n+\t\t    __err |= ios_base::failbit;\n+\t\t}\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _InIter>\n+    void\n+    time_get<_CharT, _InIter>::\n+    _M_extract_num(iter_type& __beg, iter_type& __end, int& __member,\n+\t\t   int __min, int __max, size_t __len, \n+\t\t   const ctype<_CharT>& __ctype, \n+\t\t   ios_base::iostate& __err) const\n+    {\n+      size_t __i = 0;\n+      string __digits;\n+      bool __testvalid = true;\n+      char_type __c = *__beg;\n+      while (__beg != __end && __i < __len \n+\t     && __ctype.is(ctype_base::digit, __c)) \n+\t{\n+\t  __digits += __ctype.narrow(__c, 0);\n+\t  __c = *(++__beg);\n+\t  ++__i;\n+\t}\n+      if (__i == __len)\n+\t{\n+\t  int __value = atoi(__digits.c_str());\n+\t  if (__min <= __value && __value <= __max)\n+\t    __member = __value;\n \t  else\n \t    __testvalid = false;\n-\t  \n-\t  // Extract and discard separator.\n-\t  if (__extract && __testvalid)\n-\t    {\n-\t      if (__c == __sep)\n-\t\t++__beg;\n-\t      else\n-\t\t__testvalid = false;\n-\t    }\n-\t  if (!__testvalid)\n-\t    __err |= ios_base::failbit;\n- \t}\n+\t}\n+      else\n+\t__testvalid = false;\n+      if (!__testvalid)\n+\t__err |= ios_base::failbit;\n     }\n \n   // Assumptions:\n@@ -1439,51 +1626,12 @@ namespace std\n     do_get_time(iter_type __beg, iter_type __end, ios_base& __io,\n \t\tios_base::iostate& __err, tm* __tm) const\n     {\n+      _CharT __wcs[3];\n+      const char* __cs = \"%X\";\n       locale __loc = __io.getloc();\n-      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n-\n-      const char_type __sep = __ctype.widen(':');\n-      _M_extract_time(__beg, __end, __tm->tm_hour, 0, 23, __sep, true, \n-\t\t      __ctype, __err);\n-      _M_extract_time(__beg, __end, __tm->tm_min, 0, 59, __sep, true, \n-\t\t      __ctype, __err);\n-      _M_extract_time(__beg, __end, __tm->tm_sec, 0, 59, __sep, false, \n-\t\t      __ctype, __err);\n-\n-      // NB: Assume Ante- and Post-meridiem affixes not part of\n-      // default time format.\n-\n-      // NB: Some locales have a timezone component as part of the\n-      // default time formatting. In these cases, attempt to extract\n-      // timezone parts.\n-      const __string_type  __format = __tp._M_time_formats();\n-      if (__format.find(__ctype.widen('Z')) != __string_type::npos)\n-\t{\n-\t  // Some valid timezone abbreviations are:\n-\t  // HST, AKST, PST, MST, CST, EST, AST, NST, CET, IST, EET, CST, JST\n-\t  // GMT, GMT[+-][hh:mm]\n-\t  if (__ctype.is(ctype_base::space, *__beg))\n-\t    ++__beg;\n-\t    \n-\t  if (__ctype.is(ctype_base::upper, *__beg))\n-\t    {\n-\t      int __tmp;\n-\t      _M_extract_name(__beg, __end, __tmp, \n-\t\t\t      __timepunct<_CharT>::_S_timezones, 14, __err);\n-\n-\t      char_type __c = *__beg;\n-\t      if (!__err && __tmp == 0\n-\t\t  &&(__c == __ctype.widen('-') || __c == __ctype.widen('-')))\n-\t\t{\n-\t\t  // GMT requires special effort.\n-\t\t  _M_extract_time(__beg, __end, __tmp, 0, 23, __sep, true, \n-\t\t\t\t  __ctype, __err);\n-\t\t  _M_extract_time(__beg, __end, __tmp, 0, 59, __sep, false, \n-\t\t\t\t  __ctype, __err);\n-\t\t}\t    \n-\t    }\n-\t}\n+      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      __ctype.widen(__cs, __cs + 3, __wcs);\n+      _M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;\n@@ -1493,12 +1641,14 @@ namespace std\n     _InIter\n     time_get<_CharT, _InIter>::\n     do_get_date(iter_type __beg, iter_type __end, ios_base& __io,\n-\t\tios_base::iostate& __err, tm* /*__tm*/) const\n+\t\tios_base::iostate& __err, tm* __tm) const\n     {\n+      _CharT __wcs[3];\n+      const char* __cs = \"%x\";\n       locale __loc = __io.getloc();\n-      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n-\n+      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      __ctype.widen(__cs, __cs + 3, __wcs);\n+      _M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;\n@@ -1663,39 +1813,40 @@ namespace std\n     do_put(iter_type __s, ios_base& __io, char_type, const tm* __tm, \n \t   char __format, char __mod) const\n     { \n+      locale __loc = __io.getloc();\n+      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n+\n       // NB: This size is arbitrary. Should this be a data member,\n       // initialized at construction?\n       const size_t __maxlen = 64;\n-      char* __res = static_cast<char*>(__builtin_alloca(__maxlen));\n+      char_type* __res = static_cast<char_type*>(__builtin_alloca(__maxlen));\n \n       // NB: In IEE 1003.1-200x, and perhaps other locale models, it\n       // is possible that the format character will be longer than one\n       // character. Possibilities include 'E' or 'O' followed by a\n       // format charcter: if __mod is not the default argument, assume\n       // it's a valid modifier.\n-      char __fmt[4];\n-      __fmt[0] = '%'; \n+      char_type __fmt[4];\n+      __fmt[0] = __ctype.widen('%'); \n       if (!__mod)\n \t{\n \t  __fmt[1] = __format;\n-\t  __fmt[2] = '\\0';\n+\t  __fmt[2] = char_type();\n \t}\n       else\n \t{\n \t  __fmt[1] = __mod;\n \t  __fmt[2] = __format;\n-\t  __fmt[3] = '\\0';\n+\t  __fmt[3] = char_type();\n \t}\n \n-      locale __loc = __io.getloc();\n-      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       __tp._M_put_helper(__res, __maxlen, __fmt, __tm);\n \n       // Write resulting, fully-formatted string to output iterator.\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n-      size_t __len = strlen(__res);\n+      size_t __len = char_traits<char_type>::length(__res);\n       for (size_t __i = 0; __i < __len; ++__i)\n-\t__s = __ctype.widen(__res[__i]);\n+\t__s = __res[__i];\n       return __s;\n     }\n "}, {"sha": "f01d61060203ad29310609bc09fc8f4867b9b4c8", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "337c0d316ed82c928d6520d4f3357ebbfee45a10", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "b9c55cc78d39eadc21df25186823f918442b3928", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@"}, {"sha": "5f01f39f28e2656b3bbcd35b2b850c9c5bdd985a", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "89342c392d6c1d907fb7269ddaa6781e516f761e", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -77,7 +77,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@"}, {"sha": "b477ba223174ccaa844891dc5ac60888998369b6", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -481,11 +481,116 @@ void test04()\n   VERIFY( errorstate == ios_base::eofbit );\n }\n \n+void test05()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"04/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_date(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == time_bday.tm_year );\n+  VERIFY( time01.tm_mon == time_bday.tm_mon );\n+  VERIFY( time01.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"04/04/71 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_date(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_year == time_bday.tm_year );\n+  VERIFY( time02.tm_mon == time_bday.tm_mon );\n+  VERIFY( time02.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it02 == ' ');\n+\n+  iss.str(\"04/04d/71 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  time03.tm_year = 3;\n+  errorstate = good;\n+  tim_get.get_date(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_year == 3 );\n+  VERIFY( time03.tm_mon == time_bday.tm_mon );\n+  VERIFY( time03.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it03 == 'd');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(\"04.04.1971\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_date(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_mon == time_bday.tm_mon );\n+  VERIFY( time10.tm_mday == time_bday.tm_mday );\n+  VERIFY( time10.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(\"Sunday, April 04, 1971\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_date(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_mon == time_bday.tm_mon );\n+  VERIFY( time20.tm_mday == time_bday.tm_mday );\n+  VERIFY( time20.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n   return 0;\n }"}, {"sha": "dfddc0325c5602c3cdf3b91103cd5a8c4b6b50cc", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "added", "additions": 599, "deletions": 0, "changes": 599, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -0,0 +1,599 @@\n+// 2001-10-02 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+void test01()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const wstring empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // 1\n+  // dateorder date_order() const\n+  iss.imbue(loc_c);\n+  dateorder do1 = tim_get.date_order();\n+  //  VERIFY( do1 == time_base::mdy );\n+  VERIFY( do1 == time_base::no_order );\n+\n+  // 2\n+  // iter_type \n+  // get_time(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(L\"12:00:00\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_time(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( time01.tm_min == time_bday.tm_min );\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"12:00:00 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_time(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( time01.tm_min == time_bday.tm_min );\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == good );\n+\n+  iss.str(L\"12:61:00 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_time(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(L\"12:a:00 \");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = good;\n+  tim_get.get_time(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( *is_it04 == 'a');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(L\"12:00:00\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_time(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_sec == time_bday.tm_sec );\n+  VERIFY( time10.tm_min == time_bday.tm_min );\n+  VERIFY( time10.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(L\"12:00:00 PST\"); \n+  // Hong Kong in California! Well, they have Paris in Vegas... this\n+  // is all a little disney-esque anyway. Besides, you can get decent\n+  // Dim Sum in San Francisco.\n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_time(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time10.tm_sec == time_bday.tm_sec );\n+  VERIFY( time10.tm_min == time_bday.tm_min );\n+  VERIFY( time10.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const wstring empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // iter_type \n+  // get_weekday(iter_type, iter_type, ios_base&, \n+  //             ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(L\"Sunday\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"Sun\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"Sun \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == ' ');\n+\n+  iss.str(L\"San\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  time04.tm_wday = 4;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_wday == 4 );\n+  VERIFY( *is_it04 == 'n');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(L\"Tuesday \");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_wday == 2 );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it05 == ' ');\n+\n+  iss.str(L\"Tuesducky \"); // Kind of like Fryday, without the swirls.\n+  iterator_type is_it06(iss);\n+  tm time06;\n+  time06.tm_wday = 4;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it06, end, iss, errorstate, &time06);\n+  VERIFY( time06.tm_wday == 4 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it05 == 'u');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(L\"Sonntag\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(L\"Sunday\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const wstring empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // iter_type \n+  // get_monthname(iter_type, iter_type, ios_base&, \n+  //               ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(L\"April\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"Apr\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"Apr \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == ' ');\n+\n+  iss.str(L\"Aar\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  time04.tm_mon = 5;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_mon == 5 );\n+  VERIFY( *is_it04 == 'a');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(L\"December \");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_mon == 11 );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it05 == ' ');\n+\n+  iss.str(L\"Decelember \"); \n+  iterator_type is_it06(iss);\n+  tm time06;\n+  time06.tm_mon = 4;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it06, end, iss, errorstate, &time06);\n+  VERIFY( time06.tm_mon == 4 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it05 == 'l');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(L\"April\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(L\"April\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test04()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const wstring empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // iter_type \n+  // get_year(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(L\"1971\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_year(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"1971 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_year(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it02 == ' ');\n+\n+  iss.str(L\"197d1 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  time03.tm_year = 3;\n+  errorstate = good;\n+  tim_get.get_year(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_year == 3 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it03 == 'd');\n+\n+  iss.str(L\"71d71\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = good;\n+  tim_get.get_year(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == 'd');\n+\n+  iss.str(L\"71\");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_year(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test05()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const wstring empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // iter_type \n+  // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(L\"04/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_date(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == time_bday.tm_year );\n+  VERIFY( time01.tm_mon == time_bday.tm_mon );\n+  VERIFY( time01.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"04/04/71 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_date(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_year == time_bday.tm_year );\n+  VERIFY( time02.tm_mon == time_bday.tm_mon );\n+  VERIFY( time02.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it02 == ' ');\n+\n+  iss.str(L\"04/04d/71 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  time03.tm_year = 3;\n+  errorstate = good;\n+  tim_get.get_date(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_year == 3 );\n+  VERIFY( time03.tm_mon == time_bday.tm_mon );\n+  VERIFY( time03.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it03 == 'd');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(L\"04.04.1971\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_date(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_mon == time_bday.tm_mon );\n+  VERIFY( time10.tm_mday == time_bday.tm_mday );\n+  VERIFY( time10.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(L\"Sunday, April 04, 1971\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_date(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_mon == time_bday.tm_mon );\n+  VERIFY( time20.tm_mday == time_bday.tm_mday );\n+  VERIFY( time20.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+#endif\n+\n+int main()\n+{\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+#endif\n+  return 0;\n+}"}, {"sha": "cde8bd4baa3f2a9d3ed81039c6bcb966b3054492", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_wchar_t.cc", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -0,0 +1,200 @@\n+// 2001-10-02 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.3.1 time_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+void test01()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+  typedef char_traits<wchar_t> traits;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  // create an ostream-derived object, cache the time_put facet\n+  const wstring empty;\n+  wostringstream oss;\n+  const time_put<wchar_t>& tim_put = use_facet<time_put<wchar_t> >(oss.getloc()); \n+\n+  // create \"C\" time objects\n+  tm time1 = { 0, 0, 12, 4, 3, 71 };\n+  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+    \t\t       L\"%w %W %x %X %y %Y %Z %%\";\n+  const wchar_t* date = L\"%A, the second of %B\";\n+  const wchar_t* date_ex = L\"%Ex\";\n+\n+  // 1\n+  // iter_type \n+  // put(iter_type s, ios_base& str, char_type fill, const tm* t,\n+  //\t char format, char modifier = 0) const;\n+  oss.str(empty);\n+  oss.imbue(loc_c);\n+  iterator_type os_it01 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n+  wstring result1 = oss.str();\n+  VERIFY( result1 == L\"Sun\" );\n+\n+  oss.str(empty);\n+  iterator_type os_it21 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  wstring result21 = oss.str(); // \"04/04/71\"\n+  oss.str(empty);\n+  iterator_type os_it22 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  wstring result22 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it31 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  wstring result31 = oss.str(); // \"04/04/71\"\n+  oss.str(empty);\n+  iterator_type os_it32 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  wstring result32 = oss.str(); // \"12:00:00\"\n+\n+  oss.str(empty);\n+  oss.imbue(loc_de);\n+  iterator_type os_it02 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n+  wstring result2 = oss.str();\n+  VERIFY( result2 == L\"Son\" );\n+\n+  oss.str(empty); // \"%d.%m.%Y\"\n+  iterator_type os_it23 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  wstring result23 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty); // \"%T\"\n+  iterator_type os_it24 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  wstring result24 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it33 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  wstring result33 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty);\n+  iterator_type os_it34 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  wstring result34 = oss.str(); // \"12:00:00\"\n+\n+  oss.str(empty);\n+  oss.imbue(loc_hk);\n+  iterator_type os_it03 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n+  wstring result3 = oss.str();\n+  VERIFY( result3 == L\"Sun\" );\n+\n+  oss.str(empty); // \"%A, %B %d, %Y\"\n+  iterator_type os_it25 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  wstring result25 = oss.str(); // \"Sunday, April 04, 1971\"\n+  oss.str(empty); // \"%I:%M:%S %Z\"\n+  iterator_type os_it26 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  wstring result26 = oss.str(); // \"12:00:00 PST\"\n+  oss.str(empty);\n+  iterator_type os_it35 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  wstring result35 = oss.str(); // \"Sunday, April 04, 1971\"\n+  oss.str(empty);\n+  iterator_type os_it36 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  wstring result36 = oss.str(); // \"12:00:00 PST\"\n+\n+  oss.str(empty);\n+  oss.imbue(loc_fr);\n+  iterator_type os_it04 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n+  wstring result4 = oss.str();\n+  VERIFY( result4 == L\"dim\" );\n+\n+  oss.str(empty); // \"%d.%m.%Y\"\n+  iterator_type os_it27 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  wstring result27 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty); // \"%T\"\n+  iterator_type os_it28 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  wstring result28 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it37 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  wstring result37 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty);\n+  iterator_type os_it38 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  wstring result38 = oss.str(); // \"12:00:00\"\n+\n+  // 2\n+  oss.str(empty);\n+  oss.imbue(loc_c);\n+  iterator_type os_it05 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date, date + traits::length(date));\n+  wstring result5 = oss.str();\n+  VERIFY( result5 == L\"Sunday, the second of April\");\n+  iterator_type os_it06 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date_ex, date_ex + traits::length(date));\n+  wstring result6 = oss.str();\n+  VERIFY( result6 != result5 );\n+\n+  oss.str(empty);\n+  oss.imbue(loc_de);\n+  iterator_type os_it07 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date, date + traits::length(date));\n+  wstring result7 = oss.str();\n+  VERIFY( result7 == L\"Sonntag, the second of April\");\n+  iterator_type os_it08 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date_ex, date_ex + traits::length(date));\n+  wstring result8 = oss.str();\n+  VERIFY( result8 != result7 );\n+\n+  oss.str(empty);\n+  oss.imbue(loc_hk);\n+  iterator_type os_it09 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date, date + traits::length(date));\n+  wstring result9 = oss.str();\n+  VERIFY( result9 == L\"Sunday, the second of April\");\n+  iterator_type os_it10 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date_ex, date_ex + traits::length(date));\n+  wstring result10 = oss.str();\n+  VERIFY( result10 != result9 );\n+\n+  oss.str(empty);\n+  oss.imbue(loc_fr);\n+  iterator_type os_it11 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date, date + traits::length(date));\n+  wstring result11 = oss.str();\n+  VERIFY( result11 == L\"dimanche, the second of avril\");\n+  iterator_type os_it12 = tim_put.put(oss.rdbuf(), oss, '*', &time1, \n+\t\t\t\t      date_ex, date_ex + traits::length(date));\n+  wstring result12 = oss.str();\n+  VERIFY( result12 != result11 );\n+}\n+#endif\n+\n+int main()\n+{\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  test01();\n+#endif\n+  return 0;\n+}"}, {"sha": "b09f33d25392e9a98e23c15f688890acb0c38d74", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "patch": "@@ -78,7 +78,6 @@ CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n-CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}]}