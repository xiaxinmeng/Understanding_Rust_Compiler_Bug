{"sha": "acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmYzFhYzE2OWIzMjk1NDNkZDZkMWRlOWNjZjBmMWRhM2MyYTJhZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-03-11T15:27:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-03-11T15:27:24Z"}, "message": "[AArch64] PR target/70002: Make aarch64_set_current_function play nice with pragma resetting\n\n\tPR target/70002\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_save_restore_target_globals): New prototype.\n\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse):\n\tCall the above when popping pragma.\n\t* config/aarch64/aarch64.c (aarch64_save_restore_target_globals):\n\tNew function.\n\t(aarch64_set_current_function): Rewrite using the above.\n\n\tPR target/70002\n\tPR target/69245\n\t* gcc.target/aarch64/pr69245_2.c: New test.\n\nFrom-SVN: r234141", "tree": {"sha": "355eb89d0b763eda4169d93361d3c9320699c13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/355eb89d0b763eda4169d93361d3c9320699c13b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1e2bb2d01d325df6540acaf0eb78d6d2c4faa49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e2bb2d01d325df6540acaf0eb78d6d2c4faa49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e2bb2d01d325df6540acaf0eb78d6d2c4faa49"}], "stats": {"total": 120, "additions": 72, "deletions": 48}, "files": [{"sha": "c69c7533b3e5ca0717d113ee11065bdaa073eb1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -1,3 +1,14 @@\n+2016-03-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/70002\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_save_restore_target_globals): New prototype.\n+\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse):\n+\tCall the above when popping pragma.\n+\t* config/aarch64/aarch64.c (aarch64_save_restore_target_globals):\n+\tNew function.\n+\t(aarch64_set_current_function): Rewrite using the above.\n+\n 2016-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/70177"}, {"sha": "e64dc7676ccae10e87ade3946904408fe425730d", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -178,6 +178,11 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n \n   cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n \n+  /* If we're popping or reseting make sure to update the globals so that\n+     the optab availability predicates get recomputed.  */\n+  if (pop_target)\n+    aarch64_save_restore_target_globals (pop_target);\n+\n   /* Initialize SIMD builtins if we haven't already.\n      Set current_target_pragma to NULL for the duration so that\n      the builtin initialization code doesn't try to tag the functions"}, {"sha": "dced2098918425b5f42104f07d76603fb65ef332", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -360,6 +360,7 @@ void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n+void aarch64_save_restore_target_globals (tree);\n void aarch64_emit_approx_rsqrt (rtx, rtx);\n \n /* Initialize builtins for SIMD intrinsics.  */"}, {"sha": "cf1239dd69d47927fb9f9ed30293124eb04f599e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -8577,6 +8577,21 @@ aarch64_reset_previous_fndecl (void)\n   aarch64_previous_fndecl = NULL;\n }\n \n+/* Restore or save the TREE_TARGET_GLOBALS from or to NEW_TREE.\n+   Used by aarch64_set_current_function and aarch64_pragma_target_parse to\n+   make sure optab availability predicates are recomputed when necessary.  */\n+\n+void\n+aarch64_save_restore_target_globals (tree new_tree)\n+{\n+  if (TREE_TARGET_GLOBALS (new_tree))\n+    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+  else if (new_tree == target_option_default_node)\n+    restore_target_globals (&default_target_globals);\n+  else\n+    TREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n+}\n+\n /* Implement TARGET_SET_CURRENT_FUNCTION.  Unpack the codegen decisions\n    like tuning and ISA features from the DECL_FUNCTION_SPECIFIC_TARGET\n    of the function, if such exists.  This function may be called multiple\n@@ -8586,63 +8601,32 @@ aarch64_reset_previous_fndecl (void)\n static void\n aarch64_set_current_function (tree fndecl)\n {\n+  if (!fndecl || fndecl == aarch64_previous_fndecl)\n+    return;\n+\n   tree old_tree = (aarch64_previous_fndecl\n \t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (aarch64_previous_fndecl)\n \t\t   : NULL_TREE);\n \n-  tree new_tree = (fndecl\n-\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (fndecl)\n-\t\t   : NULL_TREE);\n-\n+  tree new_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n \n-  if (fndecl && fndecl != aarch64_previous_fndecl)\n-    {\n-      aarch64_previous_fndecl = fndecl;\n-      if (old_tree == new_tree)\n-\t;\n+  /* If current function has no attributes but the previous one did,\n+     use the default node.  */\n+  if (!new_tree && old_tree)\n+    new_tree = target_option_default_node;\n \n-      else if (new_tree)\n-\t{\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n+  /* If nothing to do, return.  #pragma GCC reset or #pragma GCC pop to\n+     the default have been handled by aarch64_save_restore_target_globals from\n+     aarch64_pragma_target_parse.  */\n+  if (old_tree == new_tree)\n+    return;\n \n-      else if (old_tree && old_tree != target_option_default_node)\n-\t{\n-\t  new_tree = target_option_current_node;\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else if (new_tree == target_option_default_node)\n-\t    restore_target_globals (&default_target_globals);\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n-    }\n+  aarch64_previous_fndecl = fndecl;\n \n-  if (!fndecl)\n-    return;\n+  /* First set the target options.  */\n+  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n \n-  /* If we turned on SIMD make sure that any vector parameters are re-laid out\n-     so that they use proper vector modes.  */\n-  if (TARGET_SIMD)\n-    {\n-      tree parms = DECL_ARGUMENTS (fndecl);\n-      for (; parms && parms != void_list_node; parms = TREE_CHAIN (parms))\n-\t{\n-\t  if (TREE_CODE (parms) == PARM_DECL\n-\t      && VECTOR_TYPE_P (TREE_TYPE (parms))\n-\t      && DECL_MODE (parms) != TYPE_MODE (TREE_TYPE (parms)))\n-\t    relayout_decl (parms);\n-\t}\n-    }\n+  aarch64_save_restore_target_globals (new_tree);\n }\n \n /* Enum describing the various ways we can handle attributes."}, {"sha": "92e3a1e48606630f859c980a99ba1d93c3ac907e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -1,3 +1,9 @@\n+2016-03-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/70002\n+\tPR target/69245\n+\t* gcc.target/aarch64/pr69245_2.c: New test.\n+\n 2016-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/70177"}, {"sha": "6743f5d0ccca5ee6716504749255b0fdbe633a8f", "filename": "gcc/testsuite/gcc.target/aarch64/pr69245_2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr69245_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr69245_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr69245_2.c?ref=acfc1ac169b329543dd6d1de9ccf0f1da3c2a2ae", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8-a+fp\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target \"arch=armv8-a+nofp\"\n+static void\n+fn1 ()\n+{\n+}\n+#pragma GCC pop_options\n+float\n+fn2 (float a)\n+{\n+  return a + 2.0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__addsf3\" } } */"}]}