{"sha": "af4acefcd7e0187bdf4471b9bbb731b2757c0698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0YWNlZmNkN2UwMTg3YmRmNDQ3MWI5YmJiNzMxYjI3NTdjMDY5OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-07T21:40:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-07T21:40:10Z"}, "message": "re PR go/56173 (Several libgo tests FAIL on Solaris/SPARC)\n\n\tPR go/56173\ncrypto/md5: fix for big-endian processors\n\nFrom-SVN: r195867", "tree": {"sha": "7191a7b9e309d011a21d1585a551658470376170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7191a7b9e309d011a21d1585a551658470376170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af4acefcd7e0187bdf4471b9bbb731b2757c0698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4acefcd7e0187bdf4471b9bbb731b2757c0698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4acefcd7e0187bdf4471b9bbb731b2757c0698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4acefcd7e0187bdf4471b9bbb731b2757c0698/comments", "author": null, "committer": null, "parents": [{"sha": "f11c7048b94d6d0c1a37f1e765fc17a69734daec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c7048b94d6d0c1a37f1e765fc17a69734daec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c7048b94d6d0c1a37f1e765fc17a69734daec"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "0ca42177403c30565caab6b9ed900faacf3bc29b", "filename": "libgo/go/crypto/md5/md5block.go", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af4acefcd7e0187bdf4471b9bbb731b2757c0698/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af4acefcd7e0187bdf4471b9bbb731b2757c0698/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block.go?ref=af4acefcd7e0187bdf4471b9bbb731b2757c0698", "patch": "@@ -5,6 +5,16 @@ import (\n \t\"unsafe\"\n )\n \n+const x86 = runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\"\n+\n+var littleEndian bool\n+\n+func init() {\n+\tx := uint32(0x04030201)\n+\ty := [4]byte{0x1, 0x2, 0x3, 0x4}\n+\tlittleEndian = *(*[4]byte)(unsafe.Pointer(&x)) == y\n+}\n+\n func block(dig *digest, p []byte) {\n \ta := dig.s[0]\n \tb := dig.s[1]\n@@ -16,13 +26,13 @@ func block(dig *digest, p []byte) {\n \t\taa, bb, cc, dd := a, b, c, d\n \n \t\t// This is a constant condition - it is not evaluated on each iteration.\n-\t\tif runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"386\" {\n+\t\tif x86 {\n \t\t\t// MD5 was designed so that x86 processors can just iterate\n \t\t\t// over the block data directly as uint32s, and we generate\n \t\t\t// less code and run 1.3x faster if we take advantage of that.\n \t\t\t// My apologies.\n \t\t\tX = (*[16]uint32)(unsafe.Pointer(&p[0]))\n-\t\t} else if uintptr(unsafe.Pointer(&p[0]))&(unsafe.Alignof(uint32(0))-1) == 0 {\n+\t\t} else if littleEndian && uintptr(unsafe.Pointer(&p[0]))&(unsafe.Alignof(uint32(0))-1) == 0 {\n \t\t\tX = (*[16]uint32)(unsafe.Pointer(&p[0]))\n \t\t} else {\n \t\t\tX = &xbuf"}]}