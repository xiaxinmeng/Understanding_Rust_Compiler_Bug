{"sha": "4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkZGM0MmI2M2QxMDY0ZGZiMGZkNGM0ODIwNjE2ZjY3MmUwY2NmYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-19T17:48:25Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-19T17:48:25Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\n\tPR target/54089\n\t* config/sh/predicates.md (arith_reg_or_t_reg_operand): New predicate.\n\t* config/sh/sh.md (*rotcr): Use arith_reg_or_t_reg_operand predicate.\n\tHandle the case where one of the operands is T_REG.\n\tAdd new pattern to handle MSB extraction.\n\n\tPR target/54089\n\t* gcc.target/sh/pr54089-1.c (test_11, test_12, test_13, test_14): New\n\tfunctions.\n\nFrom-SVN: r191490", "tree": {"sha": "5ed220b6357cc817fb1a12638afc59a543be4f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ed220b6357cc817fb1a12638afc59a543be4f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/comments", "author": null, "committer": null, "parents": [{"sha": "8b75f5506f72b100a6ac1eff4f0fc1acfdf8566c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b75f5506f72b100a6ac1eff4f0fc1acfdf8566c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b75f5506f72b100a6ac1eff4f0fc1acfdf8566c"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "acdf3d61c579e0e58551ca2f41dc0d495f14e915", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "patch": "@@ -1,3 +1,11 @@\n+2012-09-19  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/predicates.md (arith_reg_or_t_reg_operand): New predicate.\n+\t* config/sh/sh.md (*rotcr): Use arith_reg_or_t_reg_operand predicate.\n+\tHandle the case where one of the operands is T_REG.\n+\tAdd new pattern to handle MSB extraction.\n+\n 2012-09-19  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "27e42f159bc169584200bf1d565f27266b5f710c", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "patch": "@@ -1028,3 +1028,8 @@\n \treturn 0;\n     }\n })\n+\n+;; Returns true of OP is arith_reg_operand or t_reg_operand.\n+(define_predicate \"arith_reg_or_t_reg_operand\"\n+  (ior (match_operand 0 \"arith_reg_operand\")\n+       (match_operand 0 \"t_reg_operand\")))"}, {"sha": "27c5633dd9dad601057dad05d6ff02f15966935d", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "patch": "@@ -3940,7 +3940,7 @@ label:\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n \t(ior:SI (lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\")\n \t\t\t     (match_operand:SI 2 \"const_int_operand\"))\n-\t\t(ashift:SI (match_operand:SI 3 \"t_reg_operand\")\n+\t\t(ashift:SI (match_operand:SI 3 \"arith_reg_or_t_reg_operand\")\n \t\t\t   (const_int 31))))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n@@ -3992,6 +3992,17 @@ label:\n \temit_insn (gen_cmpgtsi_t (tmp_t_reg, const0_rtx));\n     }\n \n+  /* For the rotcr insn to work, operands[3] must be in T_REG.\n+     If it is not we can get it there by shifting it right one bit.\n+     In this case T_REG is not an input for this insn, thus we don't have to\n+     pay attention as of where to insert the shlr insn.  */\n+  if (! t_reg_operand (operands[3], SImode))\n+    {\n+      /* We don't care about the shifted result here, only the T_REG.  */\n+      emit_insn (gen_shlr (gen_reg_rtx (SImode), operands[3]));\n+      operands[3] = get_t_reg_rtx ();\n+    }\n+\n   emit_insn (gen_rotcr (operands[0], operands[1], operands[3]));\n   DONE;\n })\n@@ -4011,6 +4022,24 @@ label:\n \t      (set (reg:SI T_REG)\n \t\t   (and:SI (match_dup 0) (const_int 1)))])])\n \n+(define_insn_and_split \"*rotcr\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(ior:SI (and:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t\t(const_int -2147483648)) ;; 0xffffffff80000000\n+\t\t(lshiftrt:SI (match_operand:SI 2 \"arith_reg_operand\")\n+\t\t\t     (const_int 1))))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(const_int 0)]\n+{\n+  rtx tmp = gen_reg_rtx (SImode);\n+  emit_insn (gen_shll (tmp, operands[1]));\n+  emit_insn (gen_rotcr (operands[0], operands[2], get_t_reg_rtx ()));\n+  DONE;\n+})\n+\n ;; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n ;; SImode shift left\n "}, {"sha": "411796655a95b5774f2bf940504a72ea9ba5fe9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "patch": "@@ -1,3 +1,9 @@\n+2012-09-19  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* gcc.target/sh/pr54089-1.c (test_11, test_12, test_13, test_14): New\n+\tfunctions.\n+\n 2012-09-19  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "77924554f38e0c60b1a716f8444add09e791a541", "filename": "gcc/testsuite/gcc.target/sh/pr54089-1.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eddc42b63d1064dfb0fd4c4820616f672e0ccfa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-1.c?ref=4eddc42b63d1064dfb0fd4c4820616f672e0ccfa", "patch": "@@ -2,7 +2,8 @@\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n-/* { dg-final { scan-assembler-times \"rotcr\" 11 } } */\n+/* { dg-final { scan-assembler-times \"rotcr\" 15 } } */\n+/* { dg-final { scan-assembler-times \"shll\\t\" 1 } } */\n \n typedef char bool;\n \n@@ -81,3 +82,30 @@ test_10 (int a, int b)\n   bool r = a == b;\n   return r << 31;\n }\n+\n+unsigned int\n+test_11 (unsigned int a, int b)\n+{\n+  /* 1x shlr, 1x rotcr  */\n+  return (a >> 1) | (b << 31);\n+}\n+\n+unsigned int\n+test_12 (unsigned int a, int b)\n+{\n+  return (a >> 2) | (b << 31);\n+}\n+\n+unsigned int\n+test_13 (unsigned int a, int b)\n+{\n+  return (a >> 3) | (b << 31);\n+}\n+\n+unsigned int\n+test_14 (unsigned int a, int b)\n+{\n+  /* 1x shll, 1x rotcr  */\n+  bool r = b < 0;\n+  return ((a >> 1) | (r << 31));\n+}"}]}