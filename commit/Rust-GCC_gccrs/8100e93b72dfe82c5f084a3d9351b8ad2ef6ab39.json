{"sha": "8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwMGU5M2I3MmRmZTgyYzVmMDg0YTNkOTM1MWI4YWQyZWY2YWIzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-12T10:10:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-12T10:10:44Z"}, "message": "Remove option_default_params and option_validate_param hooks.\n\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* common/common-target.def: Remove option_validate_param and\n\toption_default_params.\n\t* common/common-targhooks.c (default_option_validate_param):\n\tRemove.\n\t* common/common-targhooks.h (default_option_validate_param):\n\tRemove.\n\t* common/config/aarch64/aarch64-common.c (TARGET_OPTION_DEFAULT_PARAMS):\n\tRemove usage of this.\n\t(TARGET_OPTION_VALIDATE_PARAM): Likewise.\n\t(aarch64_option_validate_param): Likewise.\n\t(aarch64_option_default_params): Likewise\n\t* common/config/bpf/bpf-common.c (bpf_option_default_params): Likewise.\n\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n\t* common/config/ia64/ia64-common.c (ia64_option_default_params): Likewise.\n\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_option_default_params): Likewise.\n\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n\t* common/config/rs6000/rs6000-common.c (rs6000_option_default_params): Likewise.\n\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n\t* common/config/sh/sh-common.c (sh_option_default_params): Likewise.\n\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Validate\n\tguard_size here.\n\t* doc/tm.texi: Remove option_default_params and option_validate_param.\n\t* doc/tm.texi.in: Likewise.\n\nFrom-SVN: r278090", "tree": {"sha": "bc959de4a1ee60b1c2eca1cfdb4b32aa739b7cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc959de4a1ee60b1c2eca1cfdb4b32aa739b7cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75d6623156d3e69aa1ecc1d91c6a2c6879a97e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d6623156d3e69aa1ecc1d91c6a2c6879a97e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d6623156d3e69aa1ecc1d91c6a2c6879a97e74"}], "stats": {"total": 199, "additions": 50, "deletions": 149}, "files": [{"sha": "0c9da29b756cb1f0b389e82db6aa34e61236a93d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -1,3 +1,31 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/common-target.def: Remove option_validate_param and\n+\toption_default_params.\n+\t* common/common-targhooks.c (default_option_validate_param):\n+\tRemove.\n+\t* common/common-targhooks.h (default_option_validate_param):\n+\tRemove.\n+\t* common/config/aarch64/aarch64-common.c (TARGET_OPTION_DEFAULT_PARAMS):\n+\tRemove usage of this.\n+\t(TARGET_OPTION_VALIDATE_PARAM): Likewise.\n+\t(aarch64_option_validate_param): Likewise.\n+\t(aarch64_option_default_params): Likewise\n+\t* common/config/bpf/bpf-common.c (bpf_option_default_params): Likewise.\n+\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n+\t* common/config/ia64/ia64-common.c (ia64_option_default_params): Likewise.\n+\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n+\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_option_default_params): Likewise.\n+\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n+\t* common/config/rs6000/rs6000-common.c (rs6000_option_default_params): Likewise.\n+\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n+\t* common/config/sh/sh-common.c (sh_option_default_params): Likewise.\n+\t(TARGET_OPTION_DEFAULT_PARAMS): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Validate\n+\tguard_size here.\n+\t* doc/tm.texi: Remove option_default_params and option_validate_param.\n+\t* doc/tm.texi.in: Likewise.\n+\n 2019-11-12  Martin Liska  <mliska@suse.cz>\n \n \t* common/common-target.def:"}, {"sha": "de5e1c2265eeb15acf93e3d61352493b74e844d1", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -49,18 +49,6 @@ DEFHOOKPOD\n  \"\",\n  const struct default_options *, empty_optimization_table)\n \n-DEFHOOK\n-(option_default_params,\n-\"Set target-dependent default values for @option{--param} settings.\",\n- void, (void),\n- hook_void_void)\n-\n-DEFHOOK\n-(option_validate_param,\n-\"Validate target-dependent value for @option{--param} settings.\",\n- bool, (int, int),\n- default_option_validate_param)\n-\n /* The initial value of target_flags.  */\n DEFHOOKPOD\n (default_target_flags,"}, {"sha": "41626bad5d8621dbd57b1b352f73bf936ca721bf", "filename": "gcc/common/common-targhooks.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-targhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-targhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -86,15 +86,6 @@ default_get_valid_option_values (int, const char *)\n   return vec<const char *> ();\n }\n \n-/* Default version of TARGET_OPTION_VALIDATE_PARAM.  */\n-\n-bool\n-default_option_validate_param (const int value ATTRIBUTE_UNUSED,\n-\t\t\t       const int param ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n const struct default_options empty_optimization_table[] =\n   {\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "af0bffe0e8c909964b3d4416e772e85b10bd9ed8", "filename": "gcc/common/common-targhooks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-targhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fcommon-targhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.h?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -30,8 +30,6 @@ extern bool default_target_handle_option (struct gcc_options *,\n \t\t\t\t\t  location_t);\n extern vec<const char *> default_get_valid_option_values (int, const char *);\n \n-extern bool default_option_validate_param (const int, const int);\n-\n extern const struct default_options empty_optimization_table[];\n \n #endif"}, {"sha": "7e966f8fe5dae55b96076b8b64740484957f0baa", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -41,10 +41,6 @@\n \n #undef\tTARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE aarch_option_optimization_table\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS aarch64_option_default_params\n-#undef TARGET_OPTION_VALIDATE_PARAM\n-#define TARGET_OPTION_VALIDATE_PARAM aarch64_option_validate_param\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT aarch64_option_init_struct\n \n@@ -63,49 +59,12 @@ static const struct default_options aarch_option_optimization_table[] =\n     { OPT_LEVELS_ALL, OPT_fasynchronous_unwind_tables, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_funwind_tables, NULL, 1},\n #endif\n+    { OPT_LEVELS_ALL, OPT__param_stack_clash_protection_guard_size_, NULL,\n+      DEFAULT_STK_CLASH_GUARD_SIZE == 0 ? 16 : DEFAULT_STK_CLASH_GUARD_SIZE },\n+\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n-/* Implement target validation TARGET_OPTION_DEFAULT_PARAM.  */\n-\n-static bool\n-aarch64_option_validate_param (const int value, const int param)\n-{\n-  /* Check that both parameters are the same.  */\n-  if (param == param_stack_clash_protection_guard_size)\n-    {\n-      if (value != 12 && value != 16)\n-\t{\n-\t  error (\"only values 12 (4 KB) and 16 (64 KB) are supported for guard \"\n-\t\t \"size.  Given value %d (%llu KB) is out of range\",\n-\t\t value, (1ULL << value) / 1024ULL);\n-\t  return false;\n-\t}\n-    }\n-\n-  return true;\n-}\n-\n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-aarch64_option_default_params (void)\n-{\n-  /* We assume the guard page is 64k.  */\n-  int index = (int) param_stack_clash_protection_guard_size;\n-  param_stack_clash_protection_guard_size\n-    = (DEFAULT_STK_CLASH_GUARD_SIZE == 0 ? 16 : DEFAULT_STK_CLASH_GUARD_SIZE);\n-\n-  int guard_size = param_stack_clash_protection_guard_size;\n-\n-  /* Set the interval parameter to be the same as the guard size.  This way the\n-     mid-end code does the right thing for us.  */\n-  param_stack_clash_protection_probe_interval = guard_size;\n-\n-  /* Validate the options.  */\n-  aarch64_option_validate_param (guard_size, index);\n-}\n-\n /* Implement TARGET_HANDLE_OPTION.\n    This function handles the target specific options for CPU/target selection.\n "}, {"sha": "bd73933bf8660ef392bea8b18b5ea91976bedc91", "filename": "gcc/common/config/bpf/bpf-common.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -39,17 +39,4 @@ static const struct default_options bpf_option_optimization_table[] =\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE bpf_option_optimization_table\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-bpf_option_default_params (void)\n-{\n-  /* XXX large-stack-frame = 512 bytes */\n-  /* XXX max-unrolled-insns */\n-  /* XXX max-unroll-times */\n-}\n-\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS bpf_option_default_params\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "899cbb92db6bc33b56952be031060dd014cab1b5", "filename": "gcc/common/config/ia64/ia64-common.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -35,6 +35,14 @@ static const struct default_options ia64_option_optimization_table[] =\n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n     SUBTARGET_OPTIMIZATION_OPTIONS,\n #endif\n+\n+    /* Let the scheduler form additional regions.  */\n+    { OPT_LEVELS_ALL, OPT__param_max_sched_extend_regions_iters_, NULL, 2 },\n+      /* Set the default values for cache-related parameters.  */\n+    { OPT_LEVELS_ALL, OPT__param_simultaneous_prefetches_, NULL, 6 },\n+    { OPT_LEVELS_ALL, OPT__param_l1_cache_line_size_ , NULL, 32},\n+    { OPT_LEVELS_ALL, OPT__param_sched_mem_true_dep_cost_, NULL, 4 },\n+\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n@@ -81,25 +89,8 @@ ia64_except_unwind_info (struct gcc_options *opts)\n   return UI_TARGET;\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-ia64_option_default_params (void)\n-{\n-  /* Let the scheduler form additional regions.  */\n-  param_max_sched_extend_regions_iters = 2;\n-\n-  /* Set the default values for cache-related parameters.  */\n-  param_simultaneous_prefetches = 6;\n-  param_l1_cache_line_size = 32;\n-\n-  param_sched_mem_true_dep_cost = 4;\n-}\n-\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE ia64_option_optimization_table\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  ia64_except_unwind_info"}, {"sha": "2ec5d9a0d88a9146ae166e98ffa628e358507078", "filename": "gcc/common/config/powerpcspe/powerpcspe-common.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -32,6 +32,8 @@ static const struct default_options rs6000_option_optimization_table[] =\n   {\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n+    /* Double growth factor to counter reduced min jump length.  */\n+    { OPT_LEVELS_ALL, OPT__param_max_grow_copy_bb_insns_, NULL, 16 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n@@ -50,15 +52,6 @@ rs6000_option_init_struct (struct gcc_options *opts)\n     opts->x_flag_section_anchors = 1;\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-rs6000_option_default_params (void)\n-{\n-  /* Double growth factor to counter reduced min jump length.  */\n-  param_max_grow_copy_bb_insns = 16;\n-}\n-\n /* If not otherwise specified by a target, make 'long double' equivalent to\n    'double'.  */\n \n@@ -319,9 +312,6 @@ rs6000_supports_split_stack (bool report,\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n \n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n-\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n "}, {"sha": "eb0328dee63ff16e562f4c3656c0872b9820230f", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -42,6 +42,9 @@ static const struct default_options rs6000_option_optimization_table[] =\n        turn them off.  */\n     { OPT_LEVELS_ALL, OPT_fweb, NULL, 0 },\n     { OPT_LEVELS_ALL, OPT_frename_registers, NULL, 0 },\n+\n+    /* Double growth factor to counter reduced min jump length.  */\n+    { OPT_LEVELS_ALL, OPT__param_max_grow_copy_bb_insns_, NULL, 16 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n@@ -69,15 +72,6 @@ rs6000_option_init_struct (struct gcc_options *opts)\n #endif\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-rs6000_option_default_params (void)\n-{\n-  /* Double growth factor to counter reduced min jump length.  */\n-  param_max_grow_copy_bb_insns = 16;\n-}\n-\n /* If not otherwise specified by a target, make 'long double' equivalent to\n    'double'.  */\n \n@@ -271,9 +265,6 @@ rs6000_supports_split_stack (bool report,\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n \n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n-\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n "}, {"sha": "f195753c70bba380e7eb08c2a2fa687c680cfe83", "filename": "gcc/common/config/sh/sh-common.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -31,6 +31,7 @@ static const struct default_options sh_option_optimization_table[] =\n   {\n     { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n     { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n+    { OPT_LEVELS_ALL, OPT__param_simultaneous_prefetches_, NULL, 2 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n@@ -144,17 +145,8 @@ sh_handle_option (struct gcc_options *opts,\n     }\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-static void\n-sh_option_default_params (void)\n-{\n-  param_simultaneous_prefetches = 2;\n-}\n-\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE sh_option_optimization_table\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n #undef TARGET_HANDLE_OPTION"}, {"sha": "d2a3c7ef90a97bd099f592e147830ceca0b9e3d9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -13340,16 +13340,14 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t       param_sched_pressure_algorithm,\n \t\t       SCHED_PRESSURE_MODEL);\n \n-  /* If the user hasn't changed it via configure then set the default to 64 KB\n-     for the backend.  */\n-  SET_OPTION_IF_UNSET (opts, &global_options_set,\n-\t\t       param_stack_clash_protection_guard_size,\n-\t\t       (DEFAULT_STK_CLASH_GUARD_SIZE == 0\n-\t\t\t? 16 : DEFAULT_STK_CLASH_GUARD_SIZE));\n-\n   /* Validate the guard size.  */\n   int guard_size = param_stack_clash_protection_guard_size;\n \n+  if (guard_size != 12 && guard_size != 16)\n+    error (\"only values 12 (4 KB) and 16 (64 KB) are supported for guard \"\n+\t   \"size.  Given value %d (%llu KB) is out of range\",\n+\t   guard_size, (1ULL << guard_size) / 1024ULL);\n+\n   /* Enforce that interval is the same size as size so the mid-end does the\n      right thing.  */\n   SET_OPTION_IF_UNSET (opts, &global_options_set,"}, {"sha": "11c236e1c653f9bd6a23c4293c2863a8c58927c2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -758,14 +758,6 @@ options are changed via @code{#pragma GCC optimize} or by using the\n Set target-dependent initial values of fields in @var{opts}.\n @end deftypefn\n \n-@deftypefn {Common Target Hook} void TARGET_OPTION_DEFAULT_PARAMS (void)\n-Set target-dependent default values for @option{--param} settings.\n-@end deftypefn\n-\n-@deftypefn {Common Target Hook} bool TARGET_OPTION_VALIDATE_PARAM (int, @var{int})\n-Validate target-dependent value for @option{--param} settings.\n-@end deftypefn\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}, {"sha": "b8c41b5a7aa636787d4d2c88e1ea6201bc979004", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "patch": "@@ -736,10 +736,6 @@ options are changed via @code{#pragma GCC optimize} or by using the\n \n @hook TARGET_OPTION_INIT_STRUCT\n \n-@hook TARGET_OPTION_DEFAULT_PARAMS\n-\n-@hook TARGET_OPTION_VALIDATE_PARAM\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}]}