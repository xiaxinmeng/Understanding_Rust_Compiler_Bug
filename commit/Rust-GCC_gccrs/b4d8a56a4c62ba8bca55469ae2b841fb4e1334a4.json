{"sha": "b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "node_id": "C_kwDOANBUbNoAKGI0ZDhhNTZhNGM2MmJhOGJjYTU1NDY5YWUyYjg0MWZiNGUxMzM0YTQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T13:41:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T15:57:25Z"}, "message": "Disable decimal floating point in frange.\n\nAs Jakub mentioned in the PR, because many numbers have multiple\npossible representations, we can't reliably return true for singleton_p.\nFor that matter, we may not be capable of modeling them just yet.\nDisabling them until someone with DFP knowledge can opine or extend\nfrange.\n\n\tPR middle-end/106831\n\ngcc/ChangeLog:\n\n\t* value-range.h (frange::supports_p): Disable decimal floats.\n\t* range-op-float.cc (frange_drop_inf): Remove DECIMAL_FLOAT_MODE_P\n\tcheck.\n\t(frange_drop_ninf): Same.", "tree": {"sha": "22733b97adc15a7a01817f4d5dfe987c6dd6ed45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22733b97adc15a7a01817f4d5dfe987c6dd6ed45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0db24386107ffa237a2af0d1fdef9030460157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0db24386107ffa237a2af0d1fdef9030460157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0db24386107ffa237a2af0d1fdef9030460157"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "050f07a9867063818b17db4fc1c05f38e7bd133d", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "patch": "@@ -204,11 +204,6 @@ frelop_early_resolve (irange &r, tree type,\n static inline void\n frange_drop_inf (frange &r, tree type)\n {\n-  // FIXME: build_real() bails on decimal float modes when called with\n-  // a max representable endpoint.\n-  if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type)))\n-    return;\n-\n   REAL_VALUE_TYPE max;\n   real_max_representable (&max, type);\n   frange tmp (type, r.lower_bound (), max);\n@@ -221,11 +216,6 @@ frange_drop_inf (frange &r, tree type)\n static inline void\n frange_drop_ninf (frange &r, tree type)\n {\n-  // FIXME: build_real() bails on decimal float modes when called with\n-  // a max representable endpoint.\n-  if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type)))\n-    return;\n-\n   REAL_VALUE_TYPE min;\n   real_min_representable (&min, type);\n   frange tmp (type, min, r.upper_bound ());"}, {"sha": "645dc76c33a833aae7c667c9702e03054bce6e20", "filename": "gcc/value-range.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=b4d8a56a4c62ba8bca55469ae2b841fb4e1334a4", "patch": "@@ -338,7 +338,10 @@ class frange : public vrange\n \t  value_range_kind = VR_RANGE);\n   static bool supports_p (const_tree type)\n   {\n-    return SCALAR_FLOAT_TYPE_P (type);\n+    // ?? Decimal floats can have multiple representations for the\n+    // same number.  Supporting them may be as simple as just\n+    // disabling them in singleton_p.  No clue.\n+    return SCALAR_FLOAT_TYPE_P (type) && !DECIMAL_FLOAT_TYPE_P (type);\n   }\n   virtual tree type () const override;\n   virtual void set (tree, tree, value_range_kind = VR_RANGE) override;"}]}