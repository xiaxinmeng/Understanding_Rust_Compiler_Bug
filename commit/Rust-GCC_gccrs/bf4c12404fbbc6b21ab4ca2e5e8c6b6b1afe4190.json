{"sha": "bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0YzEyNDA0ZmJiYzZiMjFhYjRjYTJlNWU4YzZiNmIxYWZlNDE5MA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-02-25T19:25:03Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:56Z"}, "message": "AVX512FP16: Add vrcpph/vrcpsh/vscalefph/vscalefsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: (_mm512_rcp_ph):\n\tNew intrinsic.\n\t(_mm512_mask_rcp_ph): Likewise.\n\t(_mm512_maskz_rcp_ph): Likewise.\n\t(_mm_rcp_sh): Likewise.\n\t(_mm_mask_rcp_sh): Likewise.\n\t(_mm_maskz_rcp_sh): Likewise.\n\t(_mm512_scalef_ph): Likewise.\n\t(_mm512_mask_scalef_ph): Likewise.\n\t(_mm512_maskz_scalef_ph): Likewise.\n\t(_mm512_scalef_round_ph): Likewise.\n\t(_mm512_mask_scalef_round_ph): Likewise.\n\t(_mm512_maskz_scalef_round_ph): Likewise.\n\t(_mm_scalef_sh): Likewise.\n\t(_mm_mask_scalef_sh): Likewise.\n\t(_mm_maskz_scalef_sh): Likewise.\n\t(_mm_scalef_round_sh): Likewise.\n\t(_mm_mask_scalef_round_sh): Likewise.\n\t(_mm_maskz_scalef_round_sh): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_rcp_ph):\n\tNew intrinsic.\n\t(_mm256_rcp_ph): Likewise.\n\t(_mm_mask_rcp_ph): Likewise.\n\t(_mm256_mask_rcp_ph): Likewise.\n\t(_mm_maskz_rcp_ph): Likewise.\n\t(_mm256_maskz_rcp_ph): Likewise.\n\t(_mm_scalef_ph): Likewise.\n\t(_mm256_scalef_ph): Likewise.\n\t(_mm_mask_scalef_ph): Likewise.\n\t(_mm256_mask_scalef_ph): Likewise.\n\t(_mm_maskz_scalef_ph): Likewise.\n\t(_mm256_maskz_scalef_ph): Likewise.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/sse.md (VFH_AVX512VL): New.\n\t(avx512fp16_rcp<mode>2<mask_name>): Ditto.\n\t(avx512fp16_vmrcpv8hf2<mask_scalar_name>): Ditto.\n\t(avx512f_vmscalef<mode><mask_scalar_name><round_scalar_name>):\n\tAdjust to support HF vector modes.\n\t(<avx512>_scalef<mode><mask_name><round_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "ac1cb98a79e0dac6eae2569d2820b29f195fab32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac1cb98a79e0dac6eae2569d2820b29f195fab32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63657291c309c89e6278256b4f7c38c4ea8f7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63657291c309c89e6278256b4f7c38c4ea8f7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63657291c309c89e6278256b4f7c38c4ea8f7b1"}], "stats": {"total": 364, "additions": 355, "deletions": 9}, "files": [{"sha": "9a52d2ac36ef01edddff96defb855afd4b942504", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -1428,6 +1428,201 @@ _mm_maskz_sqrt_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vrcpph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rcp_ph (__m512h __A)\n+{\n+  return __builtin_ia32_vrcpph_v32hf_mask (__A, _mm512_setzero_ph (),\n+\t\t\t\t\t   (__mmask32) -1);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rcp_ph (__m512h __A, __mmask32 __B, __m512h __C)\n+{\n+  return __builtin_ia32_vrcpph_v32hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rcp_ph (__mmask32 __A, __m512h __B)\n+{\n+  return __builtin_ia32_vrcpph_v32hf_mask (__B, _mm512_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+/* Intrinsics vrcpsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vrcpsh_v8hf_mask (__B, __A, _mm_setzero_ph (),\n+\t\t\t\t\t  (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp_sh (__m128h __A, __mmask32 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vrcpsh_v8hf_mask (__D, __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp_sh (__mmask32 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vrcpsh_v8hf_mask (__C, __B, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+/* Intrinsics vscalefph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_scalef_ph (__m512h __A, __m512h __B)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    (__mmask32) -1,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_scalef_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_scalef_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    __A,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_scalef_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_scalef_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t     __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t    __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_scalef_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t      const int __D)\n+{\n+  return __builtin_ia32_vscalefph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t\t    __A, __D);\n+}\n+\n+#else\n+#define _mm512_scalef_round_ph(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vscalefph_v32hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_scalef_round_ph(A, B, C, D, E)\t\t\t\\\n+  (__builtin_ia32_vscalefph_v32hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_scalef_round_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vscalefph_v32hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t      _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t      (A), (D)))\n+\n+#endif  /* __OPTIMIZE__ */\n+\n+/* Intrinsics vscalefsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_scalef_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_scalef_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   __A,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_scalef_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t  __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__C, __D, __A, __B,\n+\t\t\t\t\t\t   __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_scalef_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vscalefsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   __A, __D);\n+}\n+\n+#else\n+#define _mm_scalef_round_sh(A, B, C)\t\t\t\t\t  \\\n+  (__builtin_ia32_vscalefsh_v8hf_mask_round ((A), (B),\t\t\t  \\\n+\t\t\t\t\t     _mm_setzero_ph (),\t\t  \\\n+\t\t\t\t\t     (__mmask8)-1, (C)))\n+\n+#define _mm_mask_scalef_round_sh(A, B, C, D, E)\t\t\t\t  \\\n+  (__builtin_ia32_vscalefsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_scalef_round_sh(A, B, C, D)\t\t\t\t  \\\n+  (__builtin_ia32_vscalefsh_v8hf_mask_round ((B), (C), _mm_setzero_ph (), \\\n+\t\t\t\t\t     (A), (D)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "ebda59b9f9aface552a77a155e7f2761c8be2232", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -451,6 +451,103 @@ _mm256_maskz_rsqrt_ph (__mmask16 __A, __m256h __B)\n \t\t\t\t\t     __A);\n }\n \n+/* Intrinsics vrcpph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp_ph (__m128h __A)\n+{\n+  return __builtin_ia32_vrcpph_v8hf_mask (__A, _mm_setzero_ph (),\n+\t\t\t\t\t  (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_rcp_ph (__m256h __A)\n+{\n+  return __builtin_ia32_vrcpph_v16hf_mask (__A, _mm256_setzero_ph (),\n+\t\t\t\t\t   (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp_ph (__m128h __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vrcpph_v8hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_rcp_ph (__m256h __A, __mmask16 __B, __m256h __C)\n+{\n+  return __builtin_ia32_vrcpph_v16hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp_ph (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vrcpph_v8hf_mask (__B, _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_rcp_ph (__mmask16 __A, __m256h __B)\n+{\n+  return __builtin_ia32_vrcpph_v16hf_mask (__B, _mm256_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+/* Intrinsics vscalefph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_ph (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vscalefph_v8hf_mask (__A, __B,\n+\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_scalef_ph (__m256h __A, __m256h __B)\n+{\n+  return __builtin_ia32_vscalefph_v16hf_mask (__A, __B,\n+\t\t\t\t\t      _mm256_setzero_ph (),\n+\t\t\t\t\t      (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_scalef_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vscalefph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_scalef_ph (__m256h __A, __mmask16 __B, __m256h __C,\n+\t\t       __m256h __D)\n+{\n+  return __builtin_ia32_vscalefph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_scalef_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vscalefph_v8hf_mask (__B, __C,\n+\t\t\t\t\t     _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_scalef_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vscalefph_v16hf_mask (__B, __C,\n+\t\t\t\t\t      _mm256_setzero_ph (),\n+\t\t\t\t\t      __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "e509c4922bf5501c294043f37632df2c66e142a2", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -2808,6 +2808,12 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rsqrtv16hf2_mask, \"__builtin_ia32_vrsqrtph_v16hf_mask\", IX86_BUILTIN_VRSQRTPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_UHI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rsqrtv32hf2_mask, \"__builtin_ia32_vrsqrtph_v32hf_mask\", IX86_BUILTIN_VRSQRTPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmrsqrtv8hf2_mask, \"__builtin_ia32_vrsqrtsh_v8hf_mask\", IX86_BUILTIN_VRSQRTSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rcpv8hf2_mask, \"__builtin_ia32_vrcpph_v8hf_mask\", IX86_BUILTIN_VRCPPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rcpv16hf2_mask, \"__builtin_ia32_vrcpph_v16hf_mask\", IX86_BUILTIN_VRCPPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rcpv32hf2_mask, \"__builtin_ia32_vrcpph_v32hf_mask\", IX86_BUILTIN_VRCPPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmrcpv8hf2_mask, \"__builtin_ia32_vrcpsh_v8hf_mask\", IX86_BUILTIN_VRCPSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_scalefv8hf_mask, \"__builtin_ia32_vscalefph_v8hf_mask\", IX86_BUILTIN_VSCALEFPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_scalefv16hf_mask, \"__builtin_ia32_vscalefph_v16hf_mask\", IX86_BUILTIN_VSCALEFPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3025,6 +3031,8 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_cmpv32hf3_mask_round, \"\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmcmpv8hf3_mask_round, \"__builtin_ia32_vcmpsh_v8hf_mask_round\", IX86_BUILTIN_VCMPSH_V8HF_MASK_ROUND, UNKNOWN, (int) UQI_FTYPE_V8HF_V8HF_INT_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_sqrtv32hf2_mask_round, \"__builtin_ia32_vsqrtph_v32hf_mask_round\", IX86_BUILTIN_VSQRTPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsqrtv8hf2_mask_round, \"__builtin_ia32_vsqrtsh_v8hf_mask_round\", IX86_BUILTIN_VSQRTSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_scalefv32hf_mask_round, \"__builtin_ia32_vscalefph_v32hf_mask_round\", IX86_BUILTIN_VSCALEFPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmscalefv8hf_mask_round, \"__builtin_ia32_vscalefsh_v8hf_mask_round\", IX86_BUILTIN_VSCALEFSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "8cf34d74143a87afcec7af3cd027506ec220df1f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -396,6 +396,13 @@\n (define_mode_iterator VF1_AVX512ER_128_256\n   [(V16SF \"TARGET_AVX512ER\") (V8SF \"TARGET_AVX\") V4SF])\n \n+(define_mode_iterator VFH_AVX512VL\n+  [(V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VF2_AVX512VL\n   [V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n \n@@ -2341,6 +2348,30 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"avx512fp16_rcp<mode>2<mask_name>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_RCP))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrcpph\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512fp16_vmrcpv8hf2<mask_scalar_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (unspec:V8HF [(match_operand:V8HF 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t       UNSPEC_RCP)\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrcpsh\\t{%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %w1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"<mask_codefor>rcp14<mode><mask_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL\n@@ -10281,11 +10312,11 @@\n })\n \n (define_insn \"avx512f_vmscalef<mode><mask_scalar_name><round_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_scalar_nimm_predicate>\" \"<round_scalar_constraint>\")]\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (unspec:VFH_128\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_scalar_nimm_predicate>\" \"<round_scalar_constraint>\")]\n \t    UNSPEC_SCALEF)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -10295,10 +10326,10 @@\n    (set_attr \"mode\"  \"<ssescalarmode>\")])\n \n (define_insn \"<avx512>_scalef<mode><mask_name><round_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_AVX512VL\n-\t  [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VFH_AVX512VL\n+\t  [(match_operand:VFH_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VFH_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n \t  UNSPEC_SCALEF))]\n   \"TARGET_AVX512F\"\n   \"vscalef<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\""}, {"sha": "17c396567f2bef53e89606a04905460ef5c40277", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -703,6 +703,8 @@\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n+#define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "c1d95fc2eadc8ddc700fa502399c42371c6381ec", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -720,6 +720,8 @@\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n+#define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "5b6d0b082d172864c68b7ff79c2a9c11fbce2d7b", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -687,6 +687,8 @@ test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_scalef_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_scalef_round_sh, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -705,6 +707,8 @@ test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_maskz_scalef_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_scalef_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -720,6 +724,8 @@ test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_scalef_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "b2de5679bb6773f6bf0b9a370d4c45799279b64a", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -792,6 +792,7 @@ test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_scalef_round_ph, __m512h, __m512h, __m512h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -810,6 +811,7 @@ test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_maskz_scalef_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -825,6 +827,7 @@ test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "5948622cc4f673cdc4fd54c9ca4d9094e18953a9", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "patch": "@@ -721,6 +721,8 @@\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n #define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n+#define __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vscalefsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}]}