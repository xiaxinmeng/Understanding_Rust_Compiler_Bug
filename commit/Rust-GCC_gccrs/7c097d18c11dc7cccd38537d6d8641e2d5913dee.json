{"sha": "7c097d18c11dc7cccd38537d6d8641e2d5913dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MwOTdkMThjMTFkYzdjY2NkMzg1MzdkNmQ4NjQxZTJkNTkxM2RlZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-10T11:03:33Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-10T11:07:54Z"}, "message": "Adjust variable names and comments in value-query.*\n\nNow that range_of_expr can take arbitrary tree expressions, not just\nSSA names or constants, the method names and comments are slightly out\nof date.  This patch adjusts them to reflect reality.\n\ngcc/ChangeLog:\n\n\t* value-query.cc (value_query::value_on_edge): Rename name to\n\texpr.\n\t(range_query::range_on_edge): Same.\n\t(range_query::value_of_expr): Same.\n\t(range_query::value_on_edge): Same.\n\t* value-query.h (class value_query): Same.\n\t(class range_query): Same.", "tree": {"sha": "5fdf6cddd9158e60234961995794bf6942c084e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fdf6cddd9158e60234961995794bf6942c084e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c097d18c11dc7cccd38537d6d8641e2d5913dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c097d18c11dc7cccd38537d6d8641e2d5913dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c097d18c11dc7cccd38537d6d8641e2d5913dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c097d18c11dc7cccd38537d6d8641e2d5913dee/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c4dabb71476ddea8d409fd41f1e97d62d0b5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c4dabb71476ddea8d409fd41f1e97d62d0b5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c4dabb71476ddea8d409fd41f1e97d62d0b5f4"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "9047e271b5b2000d4db338d5d047af99d90da0ef", "filename": "gcc/value-query.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c097d18c11dc7cccd38537d6d8641e2d5913dee/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c097d18c11dc7cccd38537d6d8641e2d5913dee/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=7c097d18c11dc7cccd38537d6d8641e2d5913dee", "patch": "@@ -36,9 +36,9 @@ along with GCC; see the file COPYING3.  If not see\n // value_query default methods.\n \n tree\n-value_query::value_on_edge (edge, tree name)\n+value_query::value_on_edge (edge, tree expr)\n {\n-  return value_of_expr (name);\n+  return value_of_expr (expr);\n }\n \n tree\n@@ -57,9 +57,9 @@ value_query::value_of_stmt (gimple *stmt, tree name)\n // range_query default methods.\n \n bool\n-range_query::range_on_edge (irange &r, edge, tree name)\n+range_query::range_on_edge (irange &r, edge, tree expr)\n {\n-  return range_of_expr (r, name);\n+  return range_of_expr (r, expr);\n }\n \n bool\n@@ -76,40 +76,40 @@ range_query::range_of_stmt (irange &r, gimple *stmt, tree name)\n }\n \n tree\n-range_query::value_of_expr (tree name, gimple *stmt)\n+range_query::value_of_expr (tree expr, gimple *stmt)\n {\n   tree t;\n   int_range_max r;\n \n-  if (!irange::supports_type_p (TREE_TYPE (name)))\n+  if (!irange::supports_type_p (TREE_TYPE (expr)))\n     return NULL_TREE;\n \n-  if (range_of_expr (r, name, stmt))\n+  if (range_of_expr (r, expr, stmt))\n     {\n       // A constant used in an unreachable block oftens returns as UNDEFINED.\n       // If the result is undefined, check the global value for a constant.\n       if (r.undefined_p ())\n-\trange_of_expr (r, name);\n+\trange_of_expr (r, expr);\n       if (r.singleton_p (&t))\n \treturn t;\n     }\n   return NULL_TREE;\n }\n \n tree\n-range_query::value_on_edge (edge e, tree name)\n+range_query::value_on_edge (edge e, tree expr)\n {\n   tree t;\n   int_range_max r;\n \n-  if (!irange::supports_type_p (TREE_TYPE (name)))\n+  if (!irange::supports_type_p (TREE_TYPE (expr)))\n     return NULL_TREE;\n-  if (range_on_edge (r, e, name))\n+  if (range_on_edge (r, e, expr))\n     {\n       // A constant used in an unreachable block oftens returns as UNDEFINED.\n       // If the result is undefined, check the global value for a constant.\n       if (r.undefined_p ())\n-\trange_of_expr (r, name);\n+\trange_of_expr (r, expr);\n       if (r.singleton_p (&t))\n \treturn t;\n     }"}, {"sha": "54af031ea424121731e45ba74322e7eee0807094", "filename": "gcc/value-query.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c097d18c11dc7cccd38537d6d8641e2d5913dee/gcc%2Fvalue-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c097d18c11dc7cccd38537d6d8641e2d5913dee/gcc%2Fvalue-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.h?ref=7c097d18c11dc7cccd38537d6d8641e2d5913dee", "patch": "@@ -39,12 +39,12 @@ class value_query\n {\n public:\n   value_query () { }\n-  // Return the singleton expression for NAME at a gimple statement,\n+  // Return the singleton expression for EXPR at a gimple statement,\n   // or NULL if none found.\n-  virtual tree value_of_expr (tree name, gimple * = NULL) = 0;\n-  // Return the singleton expression for NAME at an edge, or NULL if\n+  virtual tree value_of_expr (tree expr, gimple * = NULL) = 0;\n+  // Return the singleton expression for EXPR at an edge, or NULL if\n   // none found.\n-  virtual tree value_on_edge (edge, tree name);\n+  virtual tree value_on_edge (edge, tree expr);\n   // Return the singleton expression for the LHS of a gimple\n   // statement, assuming an (optional) initial value of NAME.  Returns\n   // NULL if none found.\n@@ -77,18 +77,18 @@ class range_query : public value_query\n   range_query ();\n   virtual ~range_query ();\n \n-  virtual tree value_of_expr (tree name, gimple * = NULL) OVERRIDE;\n-  virtual tree value_on_edge (edge, tree name) OVERRIDE;\n+  virtual tree value_of_expr (tree expr, gimple * = NULL) OVERRIDE;\n+  virtual tree value_on_edge (edge, tree expr) OVERRIDE;\n   virtual tree value_of_stmt (gimple *, tree name = NULL) OVERRIDE;\n \n   // These are the range equivalents of the value_* methods.  Instead\n   // of returning a singleton, they calculate a range and return it in\n   // R.  TRUE is returned on success or FALSE if no range was found.\n   //\n   // Note that range_of_expr must always return TRUE unless ranges are\n-  // unsupported for NAME's type (supports_type_p is false).\n-  virtual bool range_of_expr (irange &r, tree name, gimple * = NULL) = 0;\n-  virtual bool range_on_edge (irange &r, edge, tree name);\n+  // unsupported for EXPR's type (supports_type_p is false).\n+  virtual bool range_of_expr (irange &r, tree expr, gimple * = NULL) = 0;\n+  virtual bool range_on_edge (irange &r, edge, tree expr);\n   virtual bool range_of_stmt (irange &r, gimple *, tree name = NULL);\n \n   // DEPRECATED: This method is used from vr-values.  The plan is to"}]}