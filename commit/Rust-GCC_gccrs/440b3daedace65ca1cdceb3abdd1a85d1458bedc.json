{"sha": "440b3daedace65ca1cdceb3abdd1a85d1458bedc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwYjNkYWVkYWNlNjVjYTFjZGNlYjNhYmRkMWE4NWQxNDU4YmVkYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-01-19T10:38:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-01-19T10:38:52Z"}, "message": "rtl.h (rtx_def): Update documentation.\n\n\t* rtl.h (rtx_def): Update documentation.\n\t(MEM_IN_STRUCT_P): Likewise.\n\t(MEM_SCALAR_P): New macro.\n\t(MEM_COPY_ATTRIBUTES): Likewise.\n\t(MEM_SET_IN_STRUCT_P): Likewise.\n\t* rtl.texi (MEM_SCALAR_P): Document.\n\t* alias.c (canon_rtx): Use MEM_COPY_ATTRIBUTES.\n\t(fixed_scalar_and_varying_struct_p): New function.  Use\n\tMEM_SCALAR_P rather than !MEM_IN_STRUCT_P.\n\t(aliases_everything_p): Likewise.\n\t(true_dependence): Use them.\n\t(write_dependence_p): New function, containing code common to\n\tanti_dependence and output_dependence.\n\t(anti_dependence): Use it.\n\t(output_dependence): Likewise.\n\t* calls.c (save_fixed_argument_area): Don't clear\n\tMEM_IN_STRUCT_P.\n\t(expand_call): Use MEM_SET_IN_STRUCT_P.\n\t(emit_library_call): Don't clear MEM_IN_STRUCT_P.\n\t(emit_library_call_value): Likewise.\n\t(store_one_arg): Use MEM_SET_IN_STRUCT_P.\n\t* combine.c (simplify_rtx): Use MEM_COPY_ATTRIBUTES.\n\t(make_extraction): Likewise.\n\t(simplify_shift_const): Likewise.\n\t(gen_lowpart_for_combine): Likewise.\n\t* cse.c (gen_lowpart_if_possible): Use MEM_COPY_ATTRIBUTES.\n\t* emit-rtl.c (operand_subword): Likewise.\n\t(change_address): Likewise.\n\t* explow.c (stabilize): Use MEM_COPY_ATTRIBUTES.\n\t* expr.c (protect_from_queue): Use MEM_COPY_ATTRIBUTES.\n\t(emit_group_store): Use MEM_SET_IN_STRUCT_P.\n\t(copy_blkmode_from_reg): Likewise.\n\t(store_field): Likewise.\n\t(expand_expr): Remove bogus guesswork setting MEM_IN_STRUCT_P\n\theuristically.  Use MEM_SET_IN_STRUCT_P.\n\t(get_memory_rtx): Likewise.\n\t* final.c (alter_subreg): Use MEM_COPY_ATTRIBUTES.\n\t* function.c (assign_stack_temp): Clear MEM_SCALAR_P and\n\tMEM_ALIAS_SET on newly returned MEMs.\n\t(assign_temp): Use MEM_SET_IN_STRUCT_P.\n\t(put_reg_into_stack): Likewise.\n\t(fixup_var_refs1): Use MEM_COPY_ATTRIBUTES.\n\t(gen_mem_addressof): Use MEM_SET_IN_STRUCT_P.\n\t(assign_parms): Likewise.\n\t(expand_function): Likewise.\n\t* integrate.c (expand_inline_function): Likewise.\n\t(copy_rtx_and_substitute): Use MEM_COPY_ATTRIBUTES.\n\t* loop.c (note_addr_stored): Remove check on MEM_IN_STRUCT_P.\n\t* optabs.c (gen_move_insn): Use MEM_COPY_ATTRIBUTES.\n\t* print-rtl.c (print_rtx): Print /f for frame_related.\n\t* recog.c (validate_replace_rtx_1): Use MEM_COPY_ATTRIBUTES.\n\t* reload1.c (reload): Copy MEM_SCALAR_P as well.\n\t* stmt.c (expand_decl): Use MEM_SET_IN_STRUCT_P.\n\t(expand_anon_union_decl): Use MEM_COPY_ATTRIBUTES.\n\t* varasm.c (make_decl_rtl): Use MEM_SET_IN_STRUCT_P.\n\t(output_constant_def): Likewise.\n\t* a29k.c (a29k_set_memflags_1): Take scalar_p.\n\tSet MEM_SCALAR_P.\n\t(a29k_set_memflags): Use it.\n\t* alpha.c (get_aligned_mem): Use MEM_COPY_ATTRIBUTES.\n\t* c4x.c (c4x_scan_for_ld): Likewise.\n\t* h8300.c (fix_bit_operand): Likewise.\n\t* m88k.c (legitimize_address): Likewise.\n\t(block_move_loop): Likewise.\n\t(block_move_no_loop): Likewise.\n\t(block_move_sequence): Likewise.\n\t(m88k_builtin_saveregs): Use MEM_SET_IN_STRUCT_P.\n\t* mips/abi64.h (SETUP_INCOMING_VARARGS): Likewise.\n\t* rs6000.c (expand_block_move_insn): Use MEM_COPY_ATTRIBUTES.\n\t* sh.c (sh_builtin_saveregs): Use MEM_SET_IN_STRUCT_P.\n\t* arm.h (arm_gen_load_multiple): Take scalar_p.\n\t(arm_store_load_multiple): Likewise.\n\t* arm.c (arm_gen_load_multiple): Likewise.\n\t(arm_gen_store_multiple): Likewise.\n\t(arm_gen_movstrqi): Treat MEM_SCALAR_P like MEM_IN_STRUCT_P.\n\nFrom-SVN: r24760", "tree": {"sha": "874a74b86103a97f76c5623271d36b2d321ca681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/874a74b86103a97f76c5623271d36b2d321ca681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/440b3daedace65ca1cdceb3abdd1a85d1458bedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440b3daedace65ca1cdceb3abdd1a85d1458bedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440b3daedace65ca1cdceb3abdd1a85d1458bedc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440b3daedace65ca1cdceb3abdd1a85d1458bedc/comments", "author": null, "committer": null, "parents": [{"sha": "c6df88cbec5637cfc297cea1b6c90fa638949cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6df88cbec5637cfc297cea1b6c90fa638949cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6df88cbec5637cfc297cea1b6c90fa638949cdc"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "df9bc729fdcccf7a574d3d7ad8aac6baf133e0c4", "filename": "gcc/integrate.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440b3daedace65ca1cdceb3abdd1a85d1458bedc/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440b3daedace65ca1cdceb3abdd1a85d1458bedc/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=440b3daedace65ca1cdceb3abdd1a85d1458bedc", "patch": "@@ -1472,7 +1472,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \t  rtx stack_slot\n \t    = assign_stack_temp (TYPE_MODE (TREE_TYPE (arg)),\n \t\t\t\t int_size_in_bytes (TREE_TYPE (arg)), 1);\n-\t  MEM_IN_STRUCT_P (stack_slot) = AGGREGATE_TYPE_P (TREE_TYPE (arg));\n+\t  MEM_SET_IN_STRUCT_P (stack_slot,\n+\t\t\t       AGGREGATE_TYPE_P (TREE_TYPE (arg)));\n \n \t  store_expr (arg, stack_slot, 0);\n \n@@ -2173,7 +2174,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n       target = gen_rtx_MEM (TYPE_MODE (type),\n \t\t\t    memory_address (TYPE_MODE (type),\n \t\t\t\t\t    structure_value_addr));\n-      MEM_IN_STRUCT_P (target) = 1;\n+      MEM_SET_IN_STRUCT_P (target, 1);\n     }\n \n   /* Make sure we free the things we explicitly allocated with xmalloc.  */\n@@ -2719,8 +2720,7 @@ copy_rtx_and_substitute (orig, map)\n       copy = rtx_alloc (MEM);\n       PUT_MODE (copy, mode);\n       XEXP (copy, 0) = copy_rtx_and_substitute (XEXP (orig, 0), map);\n-      MEM_IN_STRUCT_P (copy) = MEM_IN_STRUCT_P (orig);\n-      MEM_VOLATILE_P (copy) = MEM_VOLATILE_P (orig);\n+      MEM_COPY_ATTRIBUTES (copy, orig);\n       MEM_ALIAS_SET (copy) = MEM_ALIAS_SET (orig);\n \n       /* If doing function inlining, this MEM might not be const in the"}]}