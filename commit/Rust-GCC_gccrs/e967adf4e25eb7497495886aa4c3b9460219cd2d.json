{"sha": "e967adf4e25eb7497495886aa4c3b9460219cd2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2N2FkZjRlMjVlYjc0OTc0OTU4ODZhYTRjM2I5NDYwMjE5Y2QyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-22T20:03:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-22T20:03:33Z"}, "message": "re PR other/32998 (-frecord-gcc-switches issues)\n\n\tPR other/32998\n\t* common.opt (grecord-gcc-switches, gno-record-gcc-switches): New\n\toptions.\n\t* dwarf2out.c: Include opts.h.\n\t(dchar_p): New typedef.  Define heap VEC for it.\n\t(producer_string): New variable.\n\t(gen_producer_string): New function.\n\t(gen_compile_unit_die): Use it.\n\t(dwarf2out_finish): Fix up comp_unit_die () DW_AT_producer\n\tif needed.\n\t* Makefile.in (dwarf2out.o): Depend on $(OPTS_H).\n\t* doc/invoke.texi: Document -grecord-gcc-switches and\n\t-gno-record-gcc-switches, add a -grecord-gcc-switches reference\n\tto -frecord-gcc-switches description.\n\nFrom-SVN: r176652", "tree": {"sha": "08079f870498946fd1f1f35392bfcb011099e337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08079f870498946fd1f1f35392bfcb011099e337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e967adf4e25eb7497495886aa4c3b9460219cd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e967adf4e25eb7497495886aa4c3b9460219cd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e967adf4e25eb7497495886aa4c3b9460219cd2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e967adf4e25eb7497495886aa4c3b9460219cd2d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a636414b2c73cb405796d4faf35640897258413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a636414b2c73cb405796d4faf35640897258413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a636414b2c73cb405796d4faf35640897258413"}], "stats": {"total": 187, "additions": 169, "deletions": 18}, "files": [{"sha": "7fd289f84a4fe2868886d1000fde46466d0ae9d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e967adf4e25eb7497495886aa4c3b9460219cd2d", "patch": "@@ -1,3 +1,20 @@\n+2011-07-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/32998\n+\t* common.opt (grecord-gcc-switches, gno-record-gcc-switches): New\n+\toptions.\n+\t* dwarf2out.c: Include opts.h.\n+\t(dchar_p): New typedef.  Define heap VEC for it.\n+\t(producer_string): New variable.\n+\t(gen_producer_string): New function.\n+\t(gen_compile_unit_die): Use it.\n+\t(dwarf2out_finish): Fix up comp_unit_die () DW_AT_producer\n+\tif needed.\n+\t* Makefile.in (dwarf2out.o): Depend on $(OPTS_H).\n+\t* doc/invoke.texi: Document -grecord-gcc-switches and\n+\t-gno-record-gcc-switches, add a -grecord-gcc-switches reference\n+\tto -frecord-gcc-switches description.\n+\n 2011-07-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/30112"}, {"sha": "83cfb8ceb416197cb952d957e70414170b74732e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e967adf4e25eb7497495886aa4c3b9460219cd2d", "patch": "@@ -2954,7 +2954,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(EXCEPT_H) dwarf2asm.h $(TM_P_H) langhooks.h $(HASHTAB_H) \\\n    gt-dwarf2out.h $(TARGET_H) $(CGRAPH_H) $(MD5_H) $(INPUT_H) $(FUNCTION_H) \\\n    $(GIMPLE_H) $(TREE_PASS_H) $(TREE_FLOW_H) $(CFGLAYOUT_H) \\\n-   tree-pretty-print.h $(COMMON_TARGET_H)\n+   tree-pretty-print.h $(COMMON_TARGET_H) $(OPTS_H)\n dwarf2cfi.o : dwarf2cfi.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    version.h $(RTL_H) $(FUNCTION_H) $(DWARF2_H) dwarf2asm.h dwarf2out.h \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) $(TREE_PASS_H)"}, {"sha": "63331d30ecc4ac313dca575c7407ec3844c27fe9", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e967adf4e25eb7497495886aa4c3b9460219cd2d", "patch": "@@ -2184,6 +2184,14 @@ ggdb\n Common JoinedOrMissing\n Generate debug information in default extended format\n \n+gno-record-gcc-switches\n+Common RejectNegative Var(dwarf_record_gcc_switches,0) Init(0)\n+Don't record gcc command line switches in DWARF DW_AT_producer.\n+\n+grecord-gcc-switches\n+Common RejectNegative Var(dwarf_record_gcc_switches,1)\n+Record gcc command line switches in DWARF DW_AT_producer.\n+\n gstabs\n Common JoinedOrMissing Negative(gstabs+)\n Generate debug information in STABS format"}, {"sha": "e56eeaa732b1bcdfd34d03bdc850b4c548bd2d34", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e967adf4e25eb7497495886aa4c3b9460219cd2d", "patch": "@@ -11,7 +11,7 @@\n \n @c man begin COPYRIGHT\n Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -328,7 +328,8 @@ Objective-C and Objective-C++ Dialects}.\n -fstack-usage  -ftest-coverage  -ftime-report -fvar-tracking @gol\n -fvar-tracking-assignments  -fvar-tracking-assignments-toggle @gol\n -g  -g@var{level}  -gtoggle  -gcoff  -gdwarf-@var{version} @gol\n--ggdb  -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf @gol\n+-ggdb  -grecord-gcc-switches  -gno-record-gcc-switches @gol\n+-gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf @gol\n -gvms  -gxcoff  -gxcoff+ @gol\n -fno-merge-debug-strings -fno-dwarf2-cfi-asm @gol\n -fdebug-prefix-map=@var{old}=@var{new} @gol\n@@ -4687,6 +4688,20 @@ use, some non-conflicting DWARF 3 extensions in the unwind tables.\n Version 4 may require GDB 7.0 and @option{-fvar-tracking-assignments}\n for maximum benefit.\n \n+@item -grecord-gcc-switches\n+@opindex grecord-gcc-switches\n+This switch causes the command line options, that were used to invoke the\n+compiler and may affect code generation, to be appended to the\n+DW_AT_producer attribute in DWARF debugging information.  The options\n+are concatenated with spaces separating them from each other and from\n+the compiler version.  See also @option{-frecord-gcc-switches} for another\n+way of storing compiler options into the object file.\n+\n+@item -gno-record-gcc-switches\n+@opindex gno-record-gcc-switches\n+Disallow appending command line options to the DW_AT_producer attribute\n+in DWARF debugging information.  This is the default.\n+\n @item -gstrict-dwarf\n @opindex gstrict-dwarf\n Disallow using extensions of later DWARF standard version than selected\n@@ -18029,6 +18044,8 @@ usually takes the form of a section containing ASCII text.  This\n switch is related to the @option{-fverbose-asm} switch, but that\n switch only records information in the assembler output file as\n comments, so it never reaches the object file.\n+See also @option{-grecord-gcc-switches} for another\n+way of storing compiler options into the object file.\n \n @item -fpic\n @opindex fpic"}, {"sha": "41e8040b0ef5146195f87cab165664cd9f610122", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 124, "deletions": 15, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967adf4e25eb7497495886aa4c3b9460219cd2d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e967adf4e25eb7497495886aa4c3b9460219cd2d", "patch": "@@ -94,6 +94,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tree-flow.h\"\n #include \"cfglayout.h\"\n+#include \"opts.h\"\n \n static void dwarf2out_source_line (unsigned int, const char *, int, bool);\n static rtx last_var_location_insn;\n@@ -18108,13 +18109,123 @@ gen_ptr_to_mbr_type_die (tree type, dw_die_ref context_die)\n   add_type_attribute (ptr_die, TREE_TYPE (type), 0, 0, context_die);\n }\n \n+typedef const char *dchar_p; /* For DEF_VEC_P.  */\n+DEF_VEC_P(dchar_p);\n+DEF_VEC_ALLOC_P(dchar_p,heap);\n+\n+static char *producer_string;\n+\n+/* Return a heap allocated producer string including command line options\n+   if -grecord-gcc-switches.  */\n+\n+static char *\n+gen_producer_string (void)\n+{\n+  size_t j;\n+  VEC(dchar_p, heap) *switches = NULL;\n+  const char *language_string = lang_hooks.name;\n+  char *producer, *tail;\n+  const char *p;\n+  size_t len = dwarf_record_gcc_switches ? 0 : 3;\n+  size_t plen = strlen (language_string) + 1 + strlen (version_string);\n+\n+  for (j = 1; dwarf_record_gcc_switches && j < save_decoded_options_count; j++)\n+    switch (save_decoded_options[j].opt_index)\n+      {\n+      case OPT_o:\n+      case OPT_d:\n+      case OPT_dumpbase:\n+      case OPT_dumpdir:\n+      case OPT_auxbase:\n+      case OPT_auxbase_strip:\n+      case OPT_quiet:\n+      case OPT_version:\n+      case OPT_v:\n+      case OPT_w:\n+      case OPT_L:\n+      case OPT_D:\n+      case OPT_I:\n+      case OPT_U:\n+      case OPT_SPECIAL_unknown:\n+      case OPT_SPECIAL_ignore:\n+      case OPT_SPECIAL_program_name:\n+      case OPT_SPECIAL_input_file:\n+      case OPT_grecord_gcc_switches:\n+      case OPT_gno_record_gcc_switches:\n+      case OPT__output_pch_:\n+      case OPT_fdiagnostics_show_location_:\n+      case OPT_fdiagnostics_show_option:\n+      case OPT____:\n+      case OPT__sysroot_:\n+      case OPT_nostdinc:\n+      case OPT_nostdinc__:\n+\t/* Ignore these.  */\n+\tcontinue;\n+      default:\n+        gcc_checking_assert (save_decoded_options[j].canonical_option[0][0]\n+\t\t\t     == '-');\n+        switch (save_decoded_options[j].canonical_option[0][1])\n+\t  {\n+\t  case 'M':\n+\t  case 'i':\n+\t  case 'W':\n+\t    continue;\n+\t  case 'f':\n+\t    if (strncmp (save_decoded_options[j].canonical_option[0] + 2,\n+\t\t\t \"dump\", 4) == 0)\n+\t      continue;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+\tVEC_safe_push (dchar_p, heap, switches,\n+\t\t       save_decoded_options[j].orig_option_with_args_text);\n+\tlen += strlen (save_decoded_options[j].orig_option_with_args_text) + 1;\n+\tbreak;\n+      }\n+\n+  producer = XNEWVEC (char, plen + 1 + len + 1);\n+  tail = producer;\n+  sprintf (tail, \"%s %s\", language_string, version_string);\n+  tail += plen;\n+\n+  if (!dwarf_record_gcc_switches)\n+    {\n+#ifdef MIPS_DEBUGGING_INFO\n+      /* The MIPS/SGI compilers place the 'cc' command line options in the\n+\t producer string.  The SGI debugger looks for -g, -g1, -g2, or -g3;\n+\t if they do not appear in the producer string, the debugger reaches\n+\t the conclusion that the object file is stripped and has no debugging\n+\t information.  To get the MIPS/SGI debugger to believe that there is\n+\t debugging information in the object file, we add a -g to the producer\n+\t string.  */\n+      if (debug_info_level > DINFO_LEVEL_TERSE)\n+\t{\n+\t  memcpy (tail, \" -g\", 3);\n+\t  tail += 3;\n+\t}\n+#endif\n+    }\n+\n+  FOR_EACH_VEC_ELT (dchar_p, switches, j, p)\n+    {\n+      len = strlen (p);\n+      *tail = ' ';\n+      memcpy (tail + 1, p, len);\n+      tail += len + 1;\n+    }\n+\n+  *tail = '\\0';\n+  VEC_free (dchar_p, heap, switches);\n+  return producer;\n+}\n+\n /* Generate the DIE for the compilation unit.  */\n \n static dw_die_ref\n gen_compile_unit_die (const char *filename)\n {\n   dw_die_ref die;\n-  char producer[250];\n   const char *language_string = lang_hooks.name;\n   int language;\n \n@@ -18128,20 +18239,9 @@ gen_compile_unit_die (const char *filename)\n \tadd_comp_dir_attribute (die);\n     }\n \n-  sprintf (producer, \"%s %s\", language_string, version_string);\n-\n-#ifdef MIPS_DEBUGGING_INFO\n-  /* The MIPS/SGI compilers place the 'cc' command line options in the producer\n-     string.  The SGI debugger looks for -g, -g1, -g2, or -g3; if they do\n-     not appear in the producer string, the debugger reaches the conclusion\n-     that the object file is stripped and has no debugging information.\n-     To get the MIPS/SGI debugger to believe that there is debugging\n-     information in the object file, we add a -g to the producer string.  */\n-  if (debug_info_level > DINFO_LEVEL_TERSE)\n-    strcat (producer, \" -g\");\n-#endif\n-\n-  add_AT_string (die, DW_AT_producer, producer);\n+  if (producer_string == NULL)\n+    producer_string = gen_producer_string ();\n+  add_AT_string (die, DW_AT_producer, producer_string);\n \n   /* If our producer is LTO try to figure out a common language to use\n      from the global list of translation units.  */\n@@ -21774,6 +21874,15 @@ dwarf2out_finish (const char *filename)\n   htab_t comdat_type_table;\n   unsigned int i;\n \n+  /* PCH might result in DW_AT_producer string being restored from the\n+     header compilation, fix it up if needed.  */\n+  dw_attr_ref producer = get_AT (comp_unit_die (), DW_AT_producer);\n+  if (strcmp (AT_string (producer), producer_string) != 0)\n+    {\n+      struct indirect_string_node *node = find_AT_string (producer_string);\n+      producer->dw_attr_val.v.val_str = node;\n+    }\n+\n   gen_scheduled_generic_parms_dies ();\n   gen_remaining_tmpl_value_param_die_attribute ();\n "}]}