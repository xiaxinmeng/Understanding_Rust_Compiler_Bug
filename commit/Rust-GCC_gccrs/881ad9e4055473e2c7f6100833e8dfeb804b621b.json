{"sha": "881ad9e4055473e2c7f6100833e8dfeb804b621b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxYWQ5ZTQwNTU0NzNlMmM3ZjYxMDA4MzNlOGRmZWI4MDRiNjIxYg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-02-29T19:14:20Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-02-29T19:14:20Z"}, "message": "natPosixProcess.cc (startProcess): Implement standard streams using FileChannelImpl, not FileDescriptor.\n\n\n\t* java/lang/natPosixProcess.cc (startProcess):  Implement standard\n\tstreams using FileChannelImpl, not FileDescriptor.\n\t* java/lang/natWin32Process.cc (startProcess):  Likewise.\n\nFrom-SVN: r78664", "tree": {"sha": "a23a9ed058e8310fc0daddc0f10c9b2ecbcbdac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a23a9ed058e8310fc0daddc0f10c9b2ecbcbdac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881ad9e4055473e2c7f6100833e8dfeb804b621b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881ad9e4055473e2c7f6100833e8dfeb804b621b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881ad9e4055473e2c7f6100833e8dfeb804b621b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881ad9e4055473e2c7f6100833e8dfeb804b621b/comments", "author": null, "committer": null, "parents": [{"sha": "3ae1e52c9197131a764d47f4b09fc44a91db3558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae1e52c9197131a764d47f4b09fc44a91db3558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae1e52c9197131a764d47f4b09fc44a91db3558"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "644c0a1ac46ac9ce253a321e030625d81bfa6c00", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881ad9e4055473e2c7f6100833e8dfeb804b621b/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881ad9e4055473e2c7f6100833e8dfeb804b621b/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=881ad9e4055473e2c7f6100833e8dfeb804b621b", "patch": "@@ -32,11 +32,14 @@ details.  */\n #include <java/lang/Thread.h>\n #include <java/io/File.h>\n #include <java/io/FileDescriptor.h>\n+#include <gnu/java/nio/channels/FileChannelImpl.h>\n #include <java/io/FileInputStream.h>\n #include <java/io/FileOutputStream.h>\n #include <java/io/IOException.h>\n #include <java/lang/OutOfMemoryError.h>\n \n+using gnu::java::nio::channels::FileChannelImpl;\n+\n extern char **environ;\n \n void\n@@ -187,9 +190,9 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n       // We create the streams before forking.  Otherwise if we had an\n       // error while creating the streams we would have run the child\n       // with no way to communicate with it.\n-      errorStream = new FileInputStream (new FileDescriptor (errp[0]));\n-      inputStream = new FileInputStream (new FileDescriptor (inp[0]));\n-      outputStream = new FileOutputStream (new FileDescriptor (outp[1]));\n+      errorStream = new FileInputStream (new FileChannelImpl(errp[0], FileChannelImpl::READ));\n+      inputStream = new FileInputStream (new FileChannelImpl(inp[0], FileChannelImpl::READ));\n+      outputStream = new FileOutputStream (new FileChannelImpl(outp[0], FileChannelImpl::WRITE));\n \n       // We don't use vfork() because that would cause the local\n       // environment to be set by the child."}, {"sha": "3c1a4f02c8bbdec03bff02caa85d51083410e372", "filename": "libjava/java/lang/natWin32Process.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881ad9e4055473e2c7f6100833e8dfeb804b621b/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881ad9e4055473e2c7f6100833e8dfeb804b621b/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatWin32Process.cc?ref=881ad9e4055473e2c7f6100833e8dfeb804b621b", "patch": "@@ -25,6 +25,9 @@ details.  */\n #include <java/io/FileOutputStream.h>\n #include <java/io/IOException.h>\n #include <java/lang/OutOfMemoryError.h>\n+#include <gnu/java/nio/channels/FileChannelImpl.h>\n+\n+using gnu::java::nio::channels::FileChannelImpl;\n \n void\n java::lang::ConcreteProcess::cleanup (void)\n@@ -282,12 +285,15 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n       ChildProcessPipe aChildStdOut(ChildProcessPipe::OUTPUT);\n       ChildProcessPipe aChildStdErr(ChildProcessPipe::OUTPUT);\n \n-      outputStream = new FileOutputStream (new FileDescriptor (\n-                           (jint) aChildStdIn.getParentHandle ()));\n-      inputStream = new FileInputStream (new FileDescriptor (\n-                           (jint) aChildStdOut.getParentHandle ()));\n-      errorStream = new FileInputStream (new FileDescriptor (\n-                           (jint) aChildStdErr.getParentHandle ()));\n+      outputStream = new FileOutputStream (new FileChannelImpl (\n+                           (jint) aChildStdIn.getParentHandle (),\n+\t\t\t   FileChannelImpl::WRITE));\n+      inputStream = new FileInputStream (new FileChannelImpl (\n+                           (jint) aChildStdOut.getParentHandle (),\n+\t\t\t   FileChannelImpl::READ));\n+      errorStream = new FileInputStream (new FileChannelImpl (\n+                           (jint) aChildStdErr.getParentHandle (),\n+\t\t\t   FileChannelImpl::READ));\n \n       // Now create the child process.\n       PROCESS_INFORMATION pi;"}]}