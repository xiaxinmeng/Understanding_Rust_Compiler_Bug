{"sha": "d1fcc2bdef93fa453b326749888275c80e39cefc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmY2MyYmRlZjkzZmE0NTNiMzI2NzQ5ODg4Mjc1YzgwZTM5Y2VmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-06-07T21:34:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-06-07T21:34:27Z"}, "message": "predict.c (predict_iv_comparison): Mention that heuristics is broken.\n\n\n\t* predict.c (predict_iv_comparison): Mention that heuristics is broken.\n\t(return_prediction): PRED_CONST_RETURN predict return as not taken.\n\t* predict.def (PRED_CONTINUE): Change hitrate 50->67\n\t(PRED_LOOP_BRANCH): Document predictor as broken.\n\t(PRED_LOOP_EXIT): Change hitrate 91->92.\n\t(PRED_LOOP_EXTRA_EXIT): Change hitrate 91->83.\n\t(PRED_POINTER, PRED_TREE_POINTER): Change hitrate 85->70.\n\t(PRED_OPCODE_POSITIVE): Change hitrate 79->64.\n\t(PRED_OPCODE_NONEQUAL): Change hitrate 91->66.\n\t(PRED_TREE_OPCODE_POSITIVE): Change hitrate 73->64\n\t(PRED_TREE_OPCODE_NONEQUAL): Chnage hitrate 72->66\n\t(PRED_CALL): Chane hitrate 71->67.\n\t(PRED_TREE_EARLY_RETURN): Document issues, change hitrate 61->54.\n\t(PRED_GOTO): Document as unused right now.\n\t(PRED_CONST_RETURN): Change hitrate 67->69\n\t(PRED_NEGATIVE_RETURN): Change hitrate 96->98\n\t(PRED_NULL_RETURN): Change hitrate 91->90.\n\t(PRED_LOOP_IV_COMPARE_GUESS): Change hitrate to 98.\n\t(PRED_FORTRAN_FAIL_ALLOC): Change hitrate to 62; document issues.\n\t(PRED_FORTRAN_SIZE_ZERO): Change hitrate to 99.\n\t* gcc.dg/ipa/inlinehint-4.c: Disable partial inlining.\n\t* gcc.dg/predict-1.c: Update template for new predictor hitrates.\n\t* gcc.dg/predict-3.c: Update template.\n\t* gcc.dg/predict-5.c: Update template.\n\t* gcc.dg/predict-6.c: Update template.\n\t* gcc.dg/predict-9.c: Update template.\n\t* gcc.dg/predict-9.c: Update template.\n\t* gcc.dg/tree-ssa/attr-hotcold-2.c: Update template.\n\nFrom-SVN: r237185", "tree": {"sha": "a4741a4afa5e4271b8f222101f278886481db7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4741a4afa5e4271b8f222101f278886481db7fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1fcc2bdef93fa453b326749888275c80e39cefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fcc2bdef93fa453b326749888275c80e39cefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fcc2bdef93fa453b326749888275c80e39cefc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fcc2bdef93fa453b326749888275c80e39cefc/comments", "author": null, "committer": null, "parents": [{"sha": "373c00952c0a3cb0224f2259487f6481c3c946e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c00952c0a3cb0224f2259487f6481c3c946e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373c00952c0a3cb0224f2259487f6481c3c946e9"}], "stats": {"total": 120, "additions": 85, "deletions": 35}, "files": [{"sha": "ac812db67eec2b68e7dc4b0e4dafd5e54ac49ef2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -1,3 +1,26 @@\n+2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (predict_iv_comparison): Mention that heuristics is broken.\n+\t(return_prediction): PRED_CONST_RETURN predict return as not taken.\n+\t* predict.def (PRED_CONTINUE): Change hitrate 50->67\n+\t(PRED_LOOP_BRANCH): Document predictor as broken.\n+\t(PRED_LOOP_EXIT): Change hitrate 91->92.\n+\t(PRED_LOOP_EXTRA_EXIT): Change hitrate 91->83.\n+\t(PRED_POINTER, PRED_TREE_POINTER): Change hitrate 85->70.\n+\t(PRED_OPCODE_POSITIVE): Change hitrate 79->64.\n+\t(PRED_OPCODE_NONEQUAL): Change hitrate 91->66.\n+\t(PRED_TREE_OPCODE_POSITIVE): Change hitrate 73->64\n+\t(PRED_TREE_OPCODE_NONEQUAL): Chnage hitrate 72->66\n+\t(PRED_CALL): Chane hitrate 71->67.\n+\t(PRED_TREE_EARLY_RETURN): Document issues, change hitrate 61->54.\n+\t(PRED_GOTO): Document as unused right now.\n+\t(PRED_CONST_RETURN): Change hitrate 67->69\n+\t(PRED_NEGATIVE_RETURN): Change hitrate 96->98\n+\t(PRED_NULL_RETURN): Change hitrate 91->90.\n+\t(PRED_LOOP_IV_COMPARE_GUESS): Change hitrate to 98.\n+\t(PRED_FORTRAN_FAIL_ALLOC): Change hitrate to 62; document issues.\n+\t(PRED_FORTRAN_SIZE_ZERO): Change hitrate to 99.\n+\n 2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.h: Add __builtin_vec_mul."}, {"sha": "6f81b537989b8e98819b5bdc6fc671681786165e", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -1357,6 +1357,7 @@ predict_iv_comparison (struct loop *loop, basic_block bb,\n \t  probability = tem.to_uhwi ();\n \t}\n \n+      /* FIXME: The branch prediction seems broken. It has only 20% hitrate.  */\n       if (!overall_overflow)\n         predict_edge (then_edge, PRED_LOOP_IV_COMPARE, probability);\n \n@@ -2159,7 +2160,7 @@ return_prediction (tree val, enum prediction *prediction)\n       if (TREE_CONSTANT (val)\n \t  && (!integer_zerop (val) && !integer_onep (val)))\n \t{\n-\t  *prediction = TAKEN;\n+\t  *prediction = NOT_TAKEN;\n \t  return PRED_CONST_RETURN;\n \t}\n     }"}, {"sha": "e1c5faee258e7a11abaa69a56b556b474b998fe7", "filename": "gcc/predict.def", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -78,7 +78,7 @@ DEF_PREDICTOR (PRED_LOOP_ITERATIONS_MAX, \"guessed loop iterations\",\n \t       PROB_ALWAYS, PRED_FLAG_FIRST_MATCH)\n \n /* Branch containing goto is probably not taken.  */\n-DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (50), 0)\n+DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (67), 0)\n \n /* Branch to basic block containing call marked by noreturn attribute.  */\n DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", PROB_VERY_LIKELY,\n@@ -88,53 +88,66 @@ DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", PROB_VERY_LIKELY,\n DEF_PREDICTOR (PRED_COLD_FUNCTION, \"cold function call\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Loopback edge is taken.  */\n+/* Loopback edge is taken.\n+   FIXME: This is currently disabled because loop_optimizer_init force\n+   loops to have simple latches.  */\n DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (86),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Edge causing loop to terminate is probably not taken.  */\n-DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (91),\n+DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (92),\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Edge causing loop to terminate by computing value used by later conditional.\n-   */\n-DEF_PREDICTOR (PRED_LOOP_EXTRA_EXIT, \"extra loop exit\", HITRATE (91),\n+/* Edge causing loop to terminate by computing value used by later\n+   conditional.  */\n+DEF_PREDICTOR (PRED_LOOP_EXTRA_EXIT, \"extra loop exit\", HITRATE (83),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Pointers are usually not NULL.  */\n-DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (85), 0)\n-DEF_PREDICTOR (PRED_TREE_POINTER, \"pointer (on trees)\", HITRATE (85), 0)\n+DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (70), 0)\n+DEF_PREDICTOR (PRED_TREE_POINTER, \"pointer (on trees)\", HITRATE (70), 0)\n \n /* NE is probable, EQ not etc...  */\n-DEF_PREDICTOR (PRED_OPCODE_POSITIVE, \"opcode values positive\", HITRATE (79), 0)\n-DEF_PREDICTOR (PRED_OPCODE_NONEQUAL, \"opcode values nonequal\", HITRATE (71), 0)\n+DEF_PREDICTOR (PRED_OPCODE_POSITIVE, \"opcode values positive\", HITRATE (64), 0)\n+DEF_PREDICTOR (PRED_OPCODE_NONEQUAL, \"opcode values nonequal\", HITRATE (66), 0)\n DEF_PREDICTOR (PRED_FPOPCODE, \"fp_opcode\", HITRATE (90), 0)\n-DEF_PREDICTOR (PRED_TREE_OPCODE_POSITIVE, \"opcode values positive (on trees)\", HITRATE (73), 0)\n-DEF_PREDICTOR (PRED_TREE_OPCODE_NONEQUAL, \"opcode values nonequal (on trees)\", HITRATE (72), 0)\n+DEF_PREDICTOR (PRED_TREE_OPCODE_POSITIVE, \"opcode values positive (on trees)\", HITRATE (64), 0)\n+DEF_PREDICTOR (PRED_TREE_OPCODE_NONEQUAL, \"opcode values nonequal (on trees)\", HITRATE (66), 0)\n DEF_PREDICTOR (PRED_TREE_FPOPCODE, \"fp_opcode (on trees)\", HITRATE (90), 0)\n \n /* Branch guarding call is probably taken.  */\n-DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (71), 0)\n-\n-/* Branch causing function to terminate is probably not taken.  */\n-DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (61), 0)\n-\n-/* Branch containing goto is probably not taken.  */\n+DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (67), 0)\n+\n+/* Branch causing function to terminate is probably not taken. \n+   FIXME: early return currently predicts code:\n+   int foo (int a)\n+   {\n+      if (a)\n+\tbar();\n+      else\n+\tbar2();\n+   }\n+   even though there is no return statement involved.  We probably want to track\n+   this from FE or retire the predictor.  */\n+DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (54), 0)\n+\n+/* Branch containing goto is probably not taken.\n+   FIXME: Currently not used.  */\n DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (70), 0)\n \n /* Branch ending with return constant is probably not taken.  */\n-DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (67), 0)\n+DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (69), 0)\n \n /* Branch ending with return negative constant is probably not taken.  */\n-DEF_PREDICTOR (PRED_NEGATIVE_RETURN, \"negative return\", HITRATE (96), 0)\n+DEF_PREDICTOR (PRED_NEGATIVE_RETURN, \"negative return\", HITRATE (98), 0)\n \n /* Branch ending with return; is probably not taken */\n-DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (90), 0)\n+DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (91), 0)\n \n /* Branches to compare induction variable to a loop bound is\n    extremely likely.  */\n DEF_PREDICTOR (PRED_LOOP_IV_COMPARE_GUESS, \"guess loop iv compare\",\n-\t       PROB_VERY_LIKELY, 0)\n+\t       HITRATE (98), 0)\n \n /* Use number of loop iterations determined by # of iterations analysis\n    to set probability of branches that compares IV to loop bound variable.  */\n@@ -159,8 +172,9 @@ DEF_PREDICTOR (PRED_FORTRAN_OVERFLOW, \"overflow\", PROB_ALWAYS,\n    of memory or when trying to allocate an already allocated allocated or\n    deallocating an already deallocated allocatable.  This predictor only\n    occurs when the user explicitly asked for a return status.  By default,\n-   the code aborts, which is handled via PRED_NORETURN.  */\n-DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"fail alloc\", PROB_VERY_LIKELY, 0)\n+   the code aborts, which is handled via PRED_NORETURN.\n+   FIXME: the hitrate really ought to be close to 100%.  */\n+DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"fail alloc\", HITRATE (62), 0)\n \n /* Branch leading to an I/O failure status are unlikely.  This predictor is\n    used for I/O failures such as for invalid unit numbers.  This predictor\n@@ -173,7 +187,7 @@ DEF_PREDICTOR (PRED_FORTRAN_FAIL_IO, \"fail IO\", HITRATE (85), 0)\n DEF_PREDICTOR (PRED_FORTRAN_WARN_ONCE, \"warn once\", HITRATE (75), 0)\n \n /* Branch belonging to a zero-sized array.  */\n-DEF_PREDICTOR (PRED_FORTRAN_SIZE_ZERO, \"zero-sized array\", HITRATE(70), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_SIZE_ZERO, \"zero-sized array\", HITRATE(99), 0)\n \n /* Branch belonging to an invalid bound index, in a context where it is\n    standard conform and well defined but rather pointless and, hence, rather"}, {"sha": "406cc039bf146e3bb003dd931140a22c1cd89502", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -1,3 +1,13 @@\n+2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/inlinehint-4.c: Disable partial inlining.\n+\t* gcc.dg/predict-1.c: Update template for new predictor hitrates.\n+\t* gcc.dg/predict-3.c: Update template.\n+\t* gcc.dg/predict-5.c: Update template.\n+\t* gcc.dg/predict-6.c: Update template.\n+\t* gcc.dg/predict-9.c: Update template.\n+\t* gcc.dg/tree-ssa/attr-hotcold-2.c: Update template.\n+\n 2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-mul.c: New test."}, {"sha": "441a0c708551e17a406edf6de0d63ac5c27fef7b", "filename": "gcc/testsuite/gcc.dg/ipa/inlinehint-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O3 -fdump-ipa-inline-details -fno-early-inlining --param large-unit-insns=1\"  } */\n+/* { dg-options \"-O3 -fdump-ipa-inline-details -fno-early-inlining --param large-unit-insns=1 -fno-partial-inlining\"  } */\n /* { dg-add-options bind_pic_locally } */\n int *hashval;\n int *hash;"}, {"sha": "94f6b0190a13447a3dbdd45d8e378b1241bf2414", "filename": "gcc/testsuite/gcc.dg/predict-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -23,4 +23,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 0.0%\" 5 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 2.0%\" 5 \"profile_estimate\"} } */"}, {"sha": "08db59a559f842ef742cbc02dd1cf3e1502f7c06", "filename": "gcc/testsuite/gcc.dg/predict-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -25,4 +25,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 100.0%\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 98.0%\" 3 \"profile_estimate\"} } */"}, {"sha": "32178a8ea5fd7fbce125113253a1e8c68c263d64", "filename": "gcc/testsuite/gcc.dg/predict-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -21,4 +21,4 @@ void foo (int base, int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 100.0%\" 4 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 98.0%\" 4 \"profile_estimate\"} } */"}, {"sha": "16ad16fdb25e3b4ba2b44f2c30b5f0884da19c35", "filename": "gcc/testsuite/gcc.dg/predict-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -21,4 +21,4 @@ void foo (int base, int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 0.0%\" 4 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 2.0%\" 4 \"profile_estimate\"} } */"}, {"sha": "a613961091d2e82d4831e7788f90aa24cd484558", "filename": "gcc/testsuite/gcc.dg/predict-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -20,4 +20,4 @@ void foo (int base)\n }\n \n /* { dg-final { scan-tree-dump-times \"first match heuristics: 2.0%\" 3 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"first match heuristics: 4.5%\" 1 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"first match heuristics: 4.0%\" 1 \"profile_estimate\"} } */"}, {"sha": "6623d9ee61eea8d9ee2071c35ce3bf8d6a21a5c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/attr-hotcold-2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fcc2bdef93fa453b326749888275c80e39cefc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c?ref=d1fcc2bdef93fa453b326749888275c80e39cefc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-ipa-profile_estimate-blocks-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate-blocks-details\" } */\n \n void g(void);\n void h(void);\n@@ -18,10 +18,12 @@ void f(int x, int y)\n   return;\n }\n \n-/* { dg-final { scan-ipa-dump-times \"block 4, loop depth 0, count 0, freq 1\\[^0-9\\]\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times 1 \"hot label heuristics\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times 1 \"cold label heuristics\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times \"block 4, loop depth 0, count 0, freq \\[1-4\\]\\[^0-9\\]\" 1 \"profile_estimate\" } } */\n \n /* Note: we're attempting to match some number > 6000, i.e. > 60%.\n    The exact number ought to be tweekable without having to juggle\n    the testcase around too much.  */\n-/* { dg-final { scan-ipa-dump-times \"block 5, loop depth 0, count 0, freq \\[6-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\]\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times \"block 5, loop depth 0, count 0, freq \\[6-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\]\" 1 \"profile_estimate\" } } */\n "}]}