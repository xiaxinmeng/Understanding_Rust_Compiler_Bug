{"sha": "a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjNGRmZTJiMzYzMzFhYmFmZjQ0OWY1YWIzZTMyOThhMDM0NmI1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-05-03T19:03:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-05-03T19:03:06Z"}, "message": "* config/rs6000/rs6000.c: Remove conflict markers.\n\nFrom-SVN: r99174", "tree": {"sha": "4711911e7c7264b51f83dfe4c2fb2198245bb698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4711911e7c7264b51f83dfe4c2fb2198245bb698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f/comments", "author": null, "committer": null, "parents": [{"sha": "f384d65856a244b10696cc7b422a60156717cc9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f384d65856a244b10696cc7b422a60156717cc9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f384d65856a244b10696cc7b422a60156717cc9a"}], "stats": {"total": 89, "additions": 4, "deletions": 85}, "files": [{"sha": "c5d2304709eefac40d71e24f772e79b1a1db7dfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "patch": "@@ -1,3 +1,7 @@\n+2005-05-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rs6000/rs6000.c: Remove conflict markers.\n+\n 2005-05-03  James E Wilson  <wilson@specifixinc.com>\n \n \t* dwarf2out.c (lookup_filename): Call maybe_emit_file."}, {"sha": "acf6357272d2b341c14efe9ae41d39bb1c994383", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c4dfe2b36331abaff449f5ab3e3298a0346b5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a5c4dfe2b36331abaff449f5ab3e3298a0346b5f", "patch": "@@ -1832,13 +1832,9 @@ num_insns_constant_wide (HOST_WIDE_INT value)\n int\n num_insns_constant (rtx op, enum machine_mode mode)\n {\n-<<<<<<< rs6000.c\n-  switch (GET_CODE (op))\n-=======\n   HOST_WIDE_INT low, high;\n   \n   switch (GET_CODE (op))\n->>>>>>> 1.815\n     {\n     case CONST_INT:\n #if HOST_BITS_PER_WIDE_INT == 64\n@@ -1860,54 +1856,6 @@ num_insns_constant (rtx op, enum machine_mode mode)\n \t    return num_insns_constant_wide ((HOST_WIDE_INT) l);\n \t  }\n \n-<<<<<<< rs6000.c\n-\t{\n-\t  HOST_WIDE_INT low;\n-\t  HOST_WIDE_INT high;\n-\t  long l[2];\n-\t  REAL_VALUE_TYPE rv;\n-\t  int endian = (WORDS_BIG_ENDIAN == 0);\n-\t  \n-\t  if (mode == VOIDmode || mode == DImode)\n-\t    {\n-\t      high = CONST_DOUBLE_HIGH (op);\n-\t      low  = CONST_DOUBLE_LOW (op);\n-\t    }\n-\t  else\n-\t    {\n-\t      REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n-\t      REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n-\t      high = l[endian];\n-\t      low  = l[1 - endian];\n-\t    }\n-\n-\t  if (TARGET_32BIT)\n-\t    return (num_insns_constant_wide (low)\n-\t\t    + num_insns_constant_wide (high));\n-\t  \n-\t  else\n-\t    {\n-\t      if (high == 0 && low >= 0)\n-\t\treturn num_insns_constant_wide (low);\n-\t      \n-\t      else if (high == -1 && low < 0)\n-\t\treturn num_insns_constant_wide (low);\n-\t      \n-\t      else if (mask64_operand (op, mode))\n-\t\treturn 2;\n-\t      \n-\t      else if (low == 0)\n-\t\treturn num_insns_constant_wide (high) + 1;\n-\t      \n-\t      else\n-\t\treturn (num_insns_constant_wide (high)\n-\t\t\t+ num_insns_constant_wide (low) + 1);\n-\t    }\n-\t}\n-\t\n-    default:\n-      gcc_unreachable ();\n-=======\n \tif (mode == VOIDmode || mode == DImode)\n \t  {\n \t    high = CONST_DOUBLE_HIGH (op);\n@@ -1946,7 +1894,6 @@ num_insns_constant (rtx op, enum machine_mode mode)\n \t\n     default:\n       gcc_unreachable ();\n->>>>>>> 1.815\n     }\n }\n \n@@ -3328,16 +3275,10 @@ rs6000_emit_set_const (rtx dest, enum machine_mode mode,\n \t\t\t      gen_rtx_IOR (SImode, result,\n \t\t\t\t\t   GEN_INT (INTVAL (source) & 0xffff))));\n       result = dest;\n-<<<<<<< rs6000.c\n-\n-    case DImode:\n-      switch (GET_CODE (source))\n-=======\n       break;\n \n     case DImode:\n       switch (GET_CODE (source))\n->>>>>>> 1.815\n \t{\n \tcase CONST_INT:\n \t  c0 = INTVAL (source);\n@@ -7292,24 +7233,13 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return rs6000_expand_binop_builtin (d->icode, arglist, target);\n \n-<<<<<<< rs6000.c\n-  /* Handle simple ternary operations.  */\n-  d = (struct builtin_description *) bdesc_3arg;\n-  for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n-    if (d->code == fcode)\n-      return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n-  \n-  gcc_unreachable ();\n-  return NULL_RTX;\n-=======\n   /* Handle simple ternary operations.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n     if (d->code == fcode)\n       return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n   \n   gcc_unreachable ();\n->>>>>>> 1.815\n }\n \n static tree\n@@ -16952,20 +16882,6 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n \t  && XEXP (XEXP (orig, 0), 0) == pic_offset_table_rtx)\n \treturn orig;\n \n-<<<<<<< rs6000.c\n-      gcc_assert (GET_CODE (XEXP (orig, 0)) == PLUS);\n-      \n-      /* Use a different reg for the intermediate value, as\n-\t it will be marked UNCHANGING.  */\n-      rtx reg_temp = no_new_pseudos ? reg : gen_reg_rtx (Pmode);\n-      \n-      base = rs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 0),\n-\t\t\t\t\t\t     Pmode, reg_temp);\n-      offset =\n-\trs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 1),\n-\t\t\t\t\t\tPmode, reg);\n-      \n-=======\n       gcc_assert (GET_CODE (XEXP (orig, 0)) == PLUS);\n       \n       /* Use a different reg for the intermediate value, as\n@@ -16977,7 +16893,6 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n \trs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 1),\n \t\t\t\t\t\tPmode, reg);\n       \n->>>>>>> 1.815\n       if (GET_CODE (offset) == CONST_INT)\n \t{\n \t  if (SMALL_INT (offset))"}]}