{"sha": "741826eff5855366c65d49123b899ea40fc0c443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxODI2ZWZmNTg1NTM2NmM2NWQ0OTEyM2I4OTllYTQwZmMwYzQ0Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-13T09:10:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:04Z"}, "message": "[Ada] Adjust documentation of 'Bit and 'Descriptor_Size attributes\n\n2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_attributes.rst (Bit): Sharpen\n\tthe comparison with System.Storage_Unit.\n\t(Descriptor_Size): Clear confusion about alignment and padding.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "f5540a6179e08cdf3f363c3081d9f2118b1c9632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5540a6179e08cdf3f363c3081d9f2118b1c9632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741826eff5855366c65d49123b899ea40fc0c443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741826eff5855366c65d49123b899ea40fc0c443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741826eff5855366c65d49123b899ea40fc0c443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741826eff5855366c65d49123b899ea40fc0c443/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d27ec3f60a3ac5eab05765cbbf45083e4e3dabc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27ec3f60a3ac5eab05765cbbf45083e4e3dabc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27ec3f60a3ac5eab05765cbbf45083e4e3dabc6"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "cfde81e0fbdd71314e144034dd455408ac0118bd", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741826eff5855366c65d49123b899ea40fc0c443/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741826eff5855366c65d49123b899ea40fc0c443/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=741826eff5855366c65d49123b899ea40fc0c443", "patch": "@@ -93,8 +93,8 @@ Attribute Bit\n ``obj'Bit``, where ``obj`` is any object, yields the bit\n offset within the storage unit (byte) that contains the first bit of\n storage allocated for the object.  The value of this attribute is of the\n-type *universal_integer*, and is always a non-negative number not\n-exceeding the value of ``System.Storage_Unit``.\n+type *universal_integer* and is always a nonnegative number smaller\n+than ``System.Storage_Unit``.\n \n For an object that is a variable or a constant allocated in a register,\n the value is zero.  (The use of this attribute does not force the\n@@ -241,14 +241,16 @@ the first element of the array.\n \n .. code-block:: ada\n \n-  type Unconstr_Array is array (Positive range <>) of Boolean;\n+  type Unconstr_Array is array (Short_Short_Integer range <>) of Positive;\n   Put_Line (\"Descriptor size = \" & Unconstr_Array'Descriptor_Size'Img);\n \n \n-The attribute takes into account any additional padding due to type alignment.\n-In the example above, the descriptor contains two values of type\n-``Positive`` representing the low and high bound.  Since ``Positive`` has\n-a size of 31 bits and an alignment of 4, the descriptor size is ``2 * Positive'Size + 2`` or 64 bits.\n+The attribute takes into account any padding due to the alignment of the\n+component type. In the example above, the descriptor contains two values\n+of type ``Short_Short_Integer`` representing the low and high bound. But,\n+since ``Positive`` has an alignment of 4, the size of the descriptor is\n+``2 * Short_Short_Integer'Size`` rounded up to the next multiple of 32,\n+which yields a size of 32 bits, i.e. including 16 bits of padding.\n \n Attribute Elaborated\n ===================="}, {"sha": "8dfbed6362e4796b7ed288704eef0b80f8b739e1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741826eff5855366c65d49123b899ea40fc0c443/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741826eff5855366c65d49123b899ea40fc0c443/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=741826eff5855366c65d49123b899ea40fc0c443", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , May 13, 2020\n+GNAT Reference Manual , May 14, 2020\n \n AdaCore\n \n@@ -10167,8 +10167,8 @@ supported by the target for the given type.\n @code{obj'Bit}, where @code{obj} is any object, yields the bit\n offset within the storage unit (byte) that contains the first bit of\n storage allocated for the object.  The value of this attribute is of the\n-type @emph{universal_integer}, and is always a non-negative number not\n-exceeding the value of @code{System.Storage_Unit}.\n+type @emph{universal_integer} and is always a nonnegative number smaller\n+than @code{System.Storage_Unit}.\n \n For an object that is a variable or a constant allocated in a register,\n the value is zero.  (The use of this attribute does not force the\n@@ -10337,14 +10337,16 @@ array descriptor contains bounds information and is located immediately before\n the first element of the array.\n \n @example\n-type Unconstr_Array is array (Positive range <>) of Boolean;\n+type Unconstr_Array is array (Short_Short_Integer range <>) of Positive;\n Put_Line (\"Descriptor size = \" & Unconstr_Array'Descriptor_Size'Img);\n @end example\n \n-The attribute takes into account any additional padding due to type alignment.\n-In the example above, the descriptor contains two values of type\n-@code{Positive} representing the low and high bound.  Since @code{Positive} has\n-a size of 31 bits and an alignment of 4, the descriptor size is @code{2 * Positive'Size + 2} or 64 bits.\n+The attribute takes into account any padding due to the alignment of the\n+component type. In the example above, the descriptor contains two values\n+of type @code{Short_Short_Integer} representing the low and high bound. But,\n+since @code{Positive} has an alignment of 4, the size of the descriptor is\n+@code{2 * Short_Short_Integer'Size} rounded up to the next multiple of 32,\n+which yields a size of 32 bits, i.e. including 16 bits of padding.\n \n @node Attribute Elaborated,Attribute Elab_Body,Attribute Descriptor_Size,Implementation Defined Attributes\n @anchor{gnat_rm/implementation_defined_attributes attribute-elaborated}@anchor{174}"}]}