{"sha": "1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5MzY5YzVkY2YzMDFlMDkwZDNhODNlMmMyMTBjZDZiOTZhYzA4Yw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:35:49Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:35:49Z"}, "message": "PR middle-end/93829 - bogus -Wstringop-overflow on memcpy of a struct with a pointer member from another with a long string\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/93829\n\t* gcc.dg/Wstringop-overflow-32.c: New test.\n\ngcc/ChangeLog:\n\n\tPR middle-end/93829\n\t* tree-ssa-strlen.c (count_nonzero_bytes): Set the size to that\n\t  of a pointer in the outermost ADDR_EXPRs.", "tree": {"sha": "ffd4b9cd733424caaa4326de5dd1279eba7ca163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd4b9cd733424caaa4326de5dd1279eba7ca163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750d061df091da1eec2ee85e506d5291f7217ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750d061df091da1eec2ee85e506d5291f7217ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750d061df091da1eec2ee85e506d5291f7217ec9"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "f186408e1045e2a69381ffe7822ae08394261db1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "patch": "@@ -1,3 +1,9 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93829\n+\t* tree-ssa-strlen.c (count_nonzero_bytes): Set the size to that\n+\t  of a pointer in the outermost ADDR_EXPRs.\n+\n 2020-02-28  Jeff Law  <law@redhat.com>\n \n \t* config/v850/v850.h (STATIC_CHAIN_REGNUM): Change to r19."}, {"sha": "7e73cc6e34bda37dd9e8a8b8b8fbd5cd3b7ce22f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "patch": "@@ -1,3 +1,8 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93829\n+\t* gcc.dg/Wstringop-overflow-32.c: New test.\n+\n 2020-03-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR testsuite/91797"}, {"sha": "e5939567a4ded4b0b3e63273247a346b9335b006", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-32.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-32.c?ref=1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "patch": "@@ -0,0 +1,51 @@\n+/* PR middle-end/93829 - bogus -Wstringop-overflow on memcpy of a struct\n+   with a pointer member from another with a long string\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern void* memcpy (void*, const void*, __SIZE_TYPE__);\n+\n+#define S40 \"0123456789012345678901234567890123456789\"\n+\n+const char s40[] = S40;\n+\n+struct S\n+{\n+  const void *p, *q, *r;\n+} s, sa[2];\n+\n+\n+void test_lit_decl (void)\n+{\n+  struct S t = { 0, S40, 0 };\n+\n+  memcpy (&s, &t, sizeof t);    // { dg-bogus \"-Wstringop-overflow\" }\n+}\n+\n+void test_str_decl (void)\n+{\n+  struct S t = { 0, s40, 0 };\n+\n+  memcpy (&s, &t, sizeof t);    // { dg-bogus \"-Wstringop-overflow\" }\n+}\n+\n+\n+void test_lit_ssa (int i)\n+{\n+  if (i < 1)\n+    i = 1;\n+  struct S *p = &sa[i];\n+  struct S t = { 0, S40, 0 };\n+\n+  memcpy (p, &t, sizeof t);    // { dg-bogus \"-Wstringop-overflow\" }\n+}\n+\n+void test_str_ssa (int i)\n+{\n+  if (i < 1)\n+    i = 1;\n+  struct S *p = &sa[i];\n+  struct S t = { 0, s40, 0 };\n+\n+  memcpy (p, &t, sizeof t);    // { dg-bogus \"-Wstringop-overflow\" }\n+}"}, {"sha": "b76b54efbd8f84a70ed8c875f02d9bd3e5f7c959", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "patch": "@@ -4587,12 +4587,15 @@ int ssa_name_limit_t::next_ssa_name (tree ssa_name)\n \n /* Determines the minimum and maximum number of leading non-zero bytes\n    in the representation of EXP and set LENRANGE[0] and LENRANGE[1]\n-   to each.  Sets LENRANGE[2] to the total number of bytes in\n-   the representation.  Sets *NULTREM if the representation contains\n-   a zero byte, and sets *ALLNUL if all the bytes are zero.\n+   to each.\n+   Sets LENRANGE[2] to the total size of the access (which may be less\n+   than LENRANGE[1] when what's being referenced by EXP is a pointer\n+   rather than an array).\n+   Sets *NULTERM if the representation contains a zero byte, and sets\n+   *ALLNUL if all the bytes are zero.\n    OFFSET and NBYTES are the offset into the representation and\n-   the size of the access to it determined from a MEM_REF or zero\n-   for other expressions.\n+   the size of the access to it determined from an ADDR_EXPR (i.e.,\n+   a pointer) or MEM_REF or zero for other expressions.\n    Uses RVALS to determine range information.\n    Avoids recursing deeper than the limits in SNLIM allow.\n    Returns true on success and false otherwise.  */\n@@ -4692,7 +4695,13 @@ count_nonzero_bytes (tree exp, unsigned HOST_WIDE_INT offset,\n     }\n \n   if (TREE_CODE (exp) == ADDR_EXPR)\n-    exp = TREE_OPERAND (exp, 0);\n+    {\n+      /* If the size of the access hasn't been determined yet it's that\n+\t of a pointer.  */\n+      if (!nbytes)\n+\tnbytes = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (exp)));\n+      exp = TREE_OPERAND (exp, 0);\n+    }\n \n   if (TREE_CODE (exp) == SSA_NAME)\n     {\n@@ -4788,9 +4797,10 @@ count_nonzero_bytes (tree exp, unsigned HOST_WIDE_INT offset,\n \treturn false;\n \n       if (!nbytes)\n-\t/* If NBYTES hasn't been determined earlier from MEM_REF,\n-\t   set it here.  It includes all internal nuls, including\n-\t   the terminating one if the string has one.  */\n+\t/* If NBYTES hasn't been determined earlier, either from ADDR_EXPR\n+\t   (i.e., it's the size of a pointer), or from MEM_REF (as the size\n+\t   of the access), set it here to the size of the string, including\n+\t   all internal and trailing nuls if the string has any.  */\n \tnbytes = nchars - offset;\n \n       prep = TREE_STRING_POINTER (exp) + offset;"}]}