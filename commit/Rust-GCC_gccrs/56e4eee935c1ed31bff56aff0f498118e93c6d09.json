{"sha": "56e4eee935c1ed31bff56aff0f498118e93c6d09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlNGVlZTkzNWMxZWQzMWJmZjU2YWZmMGY0OTgxMThlOTNjNmQwOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-17T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-17T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "0d2cc4a923bf7117326c37496c2650c08c43175d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d2cc4a923bf7117326c37496c2650c08c43175d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56e4eee935c1ed31bff56aff0f498118e93c6d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e4eee935c1ed31bff56aff0f498118e93c6d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e4eee935c1ed31bff56aff0f498118e93c6d09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e4eee935c1ed31bff56aff0f498118e93c6d09/comments", "author": null, "committer": null, "parents": [{"sha": "4e4d0f703df019994378f04b1e88f6f4f7854ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4d0f703df019994378f04b1e88f6f4f7854ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4d0f703df019994378f04b1e88f6f4f7854ca8"}], "stats": {"total": 631, "additions": 630, "deletions": 1}, "files": [{"sha": "d1ce634eb2bf6b5d502efd0d4bc16fce669df487", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,124 @@\n+2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* vr-values.c (dump_all_value_ranges): Only dump names which are\n+\tstill active.\n+\n+2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (pointer_plus_operator::wi_fold): Make pointer_plus\n+\t[0, 0] + const return a [const, const] range.\n+\n+2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (hybrid_folder::value_on_edge): Call\n+\tevrp_folder::value_of_expr directly.\n+\t(hybrid_folder::value_of_stmt): Ditto.\n+\n+2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97462\n+\t* range-op.cc (operator_lshift::op1_range): Don't trap on negative\n+\tshifts.\n+\n+2020-10-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VX_CRTBEGIN_SPEC): Likewise.\n+\n+2020-10-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks/_vxworks-versions.h: Only include\n+\tversion.h if _WRS_VXWORKS_MAJOR is not defined.\n+\tProvide a default _WRS_VXWORKS_MINOR (0).\n+\n+2020-10-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/97327\n+\t* config/arm/arm.c (fp_bitlist): Add isa_bit_mve_float to FP bits array.\n+\n+2020-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): For BB\n+\tvectorization swap operands only if it helps, demote mismatches to\n+\texternal.\n+\n+2020-10-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/97291\n+\t* config/arm/arm-builtins.c (arm_strsbwbs_qualifiers): Modify array.\n+\t(arm_strsbwbu_qualifiers): Likewise.\n+\t(arm_strsbwbs_p_qualifiers): Likewise.\n+\t(arm_strsbwbu_p_qualifiers): Likewise.\n+\t* config/arm/arm_mve.h (__arm_vstrdq_scatter_base_wb_s64): Modify\n+\tfunction definition.\n+\t(__arm_vstrdq_scatter_base_wb_u64): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_p_s64): Likewise.\n+\t(__arm_vstrdq_scatter_base_wb_p_u64): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_u32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_u32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_f32): Likewise.\n+\t(__arm_vstrwq_scatter_base_wb_p_f32): Likewise.\n+\t* config/arm/arm_mve_builtins.def (vstrwq_scatter_base_wb_add_u): Remove\n+\texpansion for the builtin.\n+\t(vstrwq_scatter_base_wb_add_s): Likewise.\n+\t(vstrwq_scatter_base_wb_add_f): Likewise.\n+\t(vstrdq_scatter_base_wb_add_u): Likewise.\n+\t(vstrdq_scatter_base_wb_add_s): Likewise.\n+\t(vstrwq_scatter_base_wb_p_add_u): Likewise.\n+\t(vstrwq_scatter_base_wb_p_add_s): Likewise.\n+\t(vstrwq_scatter_base_wb_p_add_f): Likewise.\n+\t(vstrdq_scatter_base_wb_p_add_u): Likewise.\n+\t(vstrdq_scatter_base_wb_p_add_s): Likewise.\n+\t* config/arm/mve.md (mve_vstrwq_scatter_base_wb_<supf>v4si): Remove\n+\texpand.\n+\t(mve_vstrwq_scatter_base_wb_add_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_<supf>v4si_insn): Rename pattern to ...\n+\t(mve_vstrwq_scatter_base_wb_<supf>v4si): This.\n+\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): Remove expand.\n+\t(mve_vstrwq_scatter_base_wb_p_add_<supf>v4si): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn): Rename pattern to ...\n+\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): This.\n+\t(mve_vstrwq_scatter_base_wb_fv4sf): Remove expand.\n+\t(mve_vstrwq_scatter_base_wb_add_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_fv4sf_insn): Rename pattern to ...\n+\t(mve_vstrwq_scatter_base_wb_fv4sf): This.\n+\t(mve_vstrwq_scatter_base_wb_p_fv4sf): Remove expand.\n+\t(mve_vstrwq_scatter_base_wb_p_add_fv4sf): Likewise.\n+\t(mve_vstrwq_scatter_base_wb_p_fv4sf_insn): Rename pattern to ...\n+\t(mve_vstrwq_scatter_base_wb_p_fv4sf): This.\n+\t(mve_vstrdq_scatter_base_wb_<supf>v2di): Remove expand.\n+\t(mve_vstrdq_scatter_base_wb_add_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_<supf>v2di_insn): Rename pattern to ...\n+\t(mve_vstrdq_scatter_base_wb_<supf>v2di): This.\n+\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): Remove expand.\n+\t(mve_vstrdq_scatter_base_wb_p_add_<supf>v2di): Likewise.\n+\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn): Rename pattern to ...\n+\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): This.\n+\n+2020-10-16  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/multilib-generator (IMPLIED_EXT): New.\n+\t(arch_canonicalize): Update comment and handle implied extensions.\n+\n+2020-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): First analyze\n+\tall operands and fill in the def_stmts and ops entries.\n+\t(vect_def_types_match): New helper.\n+\n+2020-10-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/97404\n+\t* ipa-prop.c (struct ipa_vr_ggc_hash_traits):\n+\tCompare types of VRP as we can merge ranges of different types.\n+\n+2020-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97428\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Split store\n+\tgroups also for loop vectorization.\n+\n 2020-10-15  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/97436"}, {"sha": "b5f8af25539b9388790cf01381031d1e7f380ece", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1 +1 @@\n-20201016\n+20201017"}, {"sha": "0691baa6cf42d617ab0571ea23a1d8248ca3242b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,384 @@\n+2020-10-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb, exp_aggr.adb, exp_attr.adb, exp_ch6.adb,\n+\tfreeze.adb, sem_aggr.adb, sem_attr.adb, sem_ch13.adb,\n+\tsem_ch13.ads, sem_ch6.adb, sem_eval.adb, sem_util.adb: Fix style\n+\tand typos.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_cat.adb (Is_Primary): Handle N_Range properly.\n+\n+2020-10-16  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* elists.ads (New_Elmt_List): New functions.\n+\t* elists.adb (New_Elmt_List): New functions.\n+\t* exp_prag.adb: Add dependency on Elists.\n+\t(Expand_Pragma_CUDA_Execute): New function.\n+\t(Expand_N_Pragma): Add call to Expand_Pragma_CUDA_Execute.\n+\t* rtsfind.ads: Add CUDA.Internal, CUDA.Runtime, System.C\n+\tpackages and RE_Push_Call_Configuration,\n+\tRE_Pop_Call_Configuration, RE_Launch_Kernel, RO_IC_Unsigned,\n+\tRO_IC_Unsigned_Long_Long entities.\n+\t* rtsfind.adb: Extend Interfaces_Descendant to include\n+\tInterfaces_C.\n+\n+2020-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch4.adb (P_Name): Allow Tok_Left_Bracket in two places to\n+\tcall P_Qualified_Expression. We don't need to modify other\n+\tplaces that call P_Qualified_Expression, because a\n+\tqualified_expression is a name in Ada 2012 and higher, so P_Name\n+\tis the right place.  The parser already parses aggregates with\n+\tbrackets; we just need to allow that in qualified expressions.\n+\n+2020-10-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Child_Unit): When the child unit\n+\tis a renaming of a generic child unit then traverse the scope\n+\tcontaining the renaming declaration to locate the instance of\n+\tits parent.  Otherwise the parent is not installed and the\n+\tfrontend cannot process the instantiation.\n+\n+2020-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-numeri.ads: Remove the greek letter.\n+\n+2020-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Refine previous patch\n+\tto use root type (and not base type) on enumeration types.\n+\n+2020-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Use the base type\n+\tinstead of the root type when type of object is private. Remove\n+\tAda_2020 guard, because it has been checked during prior\n+\tanalysis. Use Underlying_Type in all cases, as it is a no-op on\n+\ttypes that are not private.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.ads, snames.ads-tmpl: Add support for\n+\tExclusive_Functions aspect.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Ditto.\n+\t* exp_ch9.adb (Build_Protected_Subprogram_Body): Take aspect\n+\tExclusive_Functions into account.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: Update dependencies on system.ads,\n+\tadd gnatbind switch -t to avoid timestamp inconsistencies during\n+\tbuild.\n+\t* libgnat/system.ads: Move...\n+\t* gcc-interface/system.ads: ... here.\n+\n+2020-10-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): Retrieve\n+\tdiscriminant constraints from the two types via new function\n+\tOriginal_Discriminant_Constraint rather than\n+\tDiscriminant_Constraint.\n+\t(Original_Discriminant_Constraint): New function to locate the\n+\tnearest explicit discriminant constraint associated with a type\n+\tthat may possibly have inherited a constraint from an ancestor\n+\ttype.\n+\n+2020-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove obsolete\n+\tcomment and code.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\tPR ada/95953\n+\t* libgnat/a-suenco.adb (Convert): Fix handling of third UTF-8\n+\tbyte.\n+\n+2020-10-16  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb (Is_Related_To_Func_Return): Cope with the case\n+\twhere the FE introduces a type conversion.\n+\n+2020-10-16  Chris Martin  <cmartin@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Access_Variable): New function.\n+\t(Is_Synchronized_Object): Call new function when determining if\n+\ta constant can be regarded as synchronized.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tCall Set_BIP_Initialization_Call systematically.\n+\t* exp_ch7.adb (Process_Transient_In_Scope): Take\n+\tBIP_Initialization_Call into account to decide where to insert\n+\tthe Hook.\n+\n+2020-10-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_View_Conversion): Detect qualified types.\n+\t* sem_util.ads (Is_Actual_In_Out_Parameter): Fix style in\n+\tcomment.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* scil_ll.adb, sem_scil.adb: Update assertions.\n+\n+2020-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Min_Max): Handle the case where attribute\n+\tname (qualified by required type) appears as the reducer of a\n+\t'Reduce attribute reference.\n+\t(Resolve_Attribute) <Reduce>: Handle properly the presence of a\n+\tprocedure or an attribute reference Min/Max as a reducer.\n+\t* exp_attr.adb (Expand_Attribute_Reference) <Reduce>: New\n+\tsubprogram Build_Stat, to construct the combining statement\n+\twhich appears in the generated loop for Reduce, and which is\n+\teither a function call when the reducer is a function or an\n+\tattribute, or a procedure call when reducer is an appropriate\n+\tprocedure.  BuilD_Stat is used both when the prefix of 'Reduce\n+\tis a value sequence and when it is an object\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Allocate result of string\n+\tconcatenation on secondary stack when relevant.\n+\n+2020-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Declare_Expression): Retrieve the created\n+\tblock entity that is the scope of the local declarations, from\n+\teither a local object declaration or an object renaming\n+\tdeclaration. The block entity does not have an explicit\n+\tdeclaration, but appears as the scope of all locally declared\n+\tobjects.\n+\n+2020-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/system-aix.ads: Likewise.\n+\t* libgnat/system-darwin-arm.ads: Likewise.\n+\t* libgnat/system-darwin-ppc.ads: Likewise.\n+\t* libgnat/system-darwin-x86.ads: Likewise.\n+\t* libgnat/system-djgpp.ads: Likewise.\n+\t* libgnat/system-dragonfly-x86_64.ads: Likewise.\n+\t* libgnat/system-freebsd.ads: Likewise.\n+\t* libgnat/system-hpux-ia64.ads: Likewise.\n+\t* libgnat/system-hpux.ads: Likewise.\n+\t* libgnat/system-linux-alpha.ads: Likewise.\n+\t* libgnat/system-linux-arm.ads: Likewise.\n+\t* libgnat/system-linux-hppa.ads: Likewise.\n+\t* libgnat/system-linux-ia64.ads: Likewise.\n+\t* libgnat/system-linux-m68k.ads: Likewise.\n+\t* libgnat/system-linux-mips.ads: Likewise.\n+\t* libgnat/system-linux-ppc.ads: Likewise.\n+\t* libgnat/system-linux-riscv.ads: Likewise.\n+\t* libgnat/system-linux-s390.ads: Likewise.\n+\t* libgnat/system-linux-sh4.ads: Likewise.\n+\t* libgnat/system-linux-sparc.ads: Likewise.\n+\t* libgnat/system-linux-x86.ads: Likewise.\n+\t* libgnat/system-lynxos178-ppc.ads: Likewise.\n+\t* libgnat/system-lynxos178-x86.ads: Likewise.\n+\t* libgnat/system-mingw.ads: Likewise.\n+\t* libgnat/system-qnx-aarch64.ads: Likewise.\n+\t* libgnat/system-rtems.ads: Likewise.\n+\t* libgnat/system-solaris-sparc.ads: Likewise.\n+\t* libgnat/system-solaris-x86.ads: Likewise.\n+\t* libgnat/system-vxworks-arm-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-arm-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-arm.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-vthread.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-ravenscar.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-vthread.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-vthread.ads: Likewise.\n+\t* libgnat/system-vxworks-x86.ads: Likewise.\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-aarch64.ads: Likewise.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-arm.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc64-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Likewise.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl, gnat1drv.adb, expander.adb\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst, exp_ch5.ads,\n+\texp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_util.adb,\n+\texp_util.ads, libgnarl/s-osinte__aix.adb,\n+\tlibgnarl/s-osinte__android.adb, libgnarl/s-osinte__darwin.adb,\n+\tlibgnarl/s-osinte__gnu.adb, libgnarl/s-osinte__hpux-dce.adb,\n+\tlibgnarl/s-osinte__lynxos178.adb, libgnarl/s-osinte__posix.adb,\n+\tlibgnarl/s-osinte__qnx.adb, libgnarl/s-osinte__rtems.adb,\n+\tlibgnarl/s-osinte__solaris.adb, libgnarl/s-osinte__vxworks.adb,\n+\tlibgnarl/s-osinte__x32.adb, libgnarl/s-solita.adb,\n+\tlibgnarl/s-taasde.adb, libgnarl/s-taprob.adb,\n+\tlibgnarl/s-taprop__dummy.adb, libgnarl/s-taprop__hpux-dce.adb,\n+\tlibgnarl/s-taprop__linux.adb, libgnarl/s-taprop__mingw.adb,\n+\tlibgnarl/s-taprop__posix.adb, libgnarl/s-taprop__qnx.adb,\n+\tlibgnarl/s-taprop__solaris.adb, libgnarl/s-taprop__vxworks.adb,\n+\tlibgnarl/s-tarest.adb, libgnarl/s-tasini.adb,\n+\tlibgnarl/s-taskin.adb, libgnarl/s-taspri__dummy.ads,\n+\tlibgnarl/s-taspri__hpux-dce.ads, libgnarl/s-taspri__lynxos.ads,\n+\tlibgnarl/s-taspri__mingw.ads,\n+\tlibgnarl/s-taspri__posix-noaltstack.ads,\n+\tlibgnarl/s-taspri__posix.ads, libgnarl/s-taspri__solaris.ads,\n+\tlibgnarl/s-taspri__vxworks.ads, libgnarl/s-tassta.adb,\n+\tlibgnarl/s-tasuti.adb, libgnarl/s-tposen.adb,\n+\tlibgnat/a-except.adb, libgnat/a-except.ads,\n+\tlibgnat/s-dwalin.adb, libgnat/s-dwalin.ads,\n+\tlibgnat/s-mastop.ads, libgnat/s-soflin.adb,\n+\tlibgnat/s-stalib.adb, libgnat/s-stalib.ads,\n+\tlibgnat/s-stchop.adb, libgnat/s-stchop.ads,\n+\tlibgnat/s-stchop__limit.ads, libgnat/s-traceb.ads,\n+\tlibgnat/s-traent.adb, libgnat/s-traent.ads,\n+\tlibgnat/s-trasym.adb, libgnat/s-trasym.ads,\n+\tlibgnat/s-trasym__dwarf.adb, opt.adb, opt.ads, par-prag.adb,\n+\tsem_prag.adb, snames.ads-tmpl, switch-c.adb, targparm.adb,\n+\ttargparm.ads, usage.adb: Remove support for -gnatP and pragma\n+\tPolling.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* libgnat/a-excpol.adb, libgnat/a-excpol__abort.adb: Removed.\n+\n+2020-10-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Create itype with unique\n+\tname.\n+\n+2020-10-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Limit scope of a\n+\tlocal object by hiding it from local subprograms; simplify\n+\tnested if-then-if-then condition for an Ada 83 restriction.\n+\t(Array_Type_Declaration): Confirm with assertion when the else\n+\tbranch is executed.\n+\t(Find_Type_Of_Object): Simplify membership test with a subtype\n+\trange.\n+\n+2020-10-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_In_Decl_Part): Update check to\n+\treject volatile object for reading.\n+\t* sem_res.adb (Resolve_Actuals, Resolve_Entity_Name): Update\n+\tcheck to reject volatile object for reading.\n+\t* sem_util.adb, sem_util.ads\n+\t(Check_Nonvolatile_Function_Profile,\n+\tHas_Effectively_Volatile_Profile): Detect use of volatile object\n+\tfor reading.\n+\t(Has_Enabled_Property): Accept constants as well.\n+\t(Is_Effectively_Volatile_For_Reading): New function based on\n+\texisting Is_Effectively_Volatile.\n+\t(Is_Effectively_Volatile_Object_For_Reading): Adapted from the\n+\texisting Is_Effectively_Volatile_Object, using a shared\n+\timplementation in Is_Effectively_Volatile_Object_Shared.\n+\n+2020-10-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch7.adb (Check_Unnesting_In_Decls_Or_Stmts): In the case\n+\tof an if-statement, call Unnest_If_Statement to determine\n+\twhether there are nested subprograms in any of the statement\n+\tlists of the \"if\" parts that require a wrapping procedure to\n+\thandle possible up-level refeferences.\n+\t(Unnest_Block): Call Check_Unnesting_In_Handlers to do unnesting\n+\tof subprograms in exception handlers of the block statement.\n+\t(Unnest_If_Statement): New procedure to traverse the parts of an\n+\tif-statement and create wrapper procedures as needed to\n+\tencapsulate nested subprograms that may make up-level\n+\treferences.\n+\t(Check_Stmts_For_Subp_Unnesting): New support procedure in\n+\tUnnest_If_Statement to traverse a statement list looking for\n+\ttop-level subprogram bodies that require wrapping inside a\n+\tprocedure (via Unnest_Statement_List) as well as possibly having\n+\tother statements (block, loop, if) that may themselves require\n+\tan unnesting transformation (via\n+\tCheck_Unnesting_In_Decls_Or_Stmts).\n+\t(Unnest_Statement_List): New support procedure to traverse the\n+\tstatements of a statement list that contains subprogram bodies\n+\tat the top level and replace the statement list with a wrapper\n+\tprocedure body encapsulating the statements and a call to the\n+\tprocedure.\n+\n+2020-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Check_OK_Stream_Convert_Function): Check for\n+\tabstract subprograms.\n+\n+2020-10-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst\n+\t(No_Local_Timing_Events): Package Timing_Events is a child of\n+\tAda.Real_Time, not of Ada.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst: Document the\n+\tnew Max_Integer_Size attribute.\n+\t* gnat_rm.texi: Regenerate.\n+\t* exp_attr.adb (Get_Integer_Type): Call Small_Integer_Type_For.\n+\t(Expand_N_Attribute_Reference) <Attribute_Pred>: Replace selection\n+\tcode with call to Integer_Type_For.\n+\t<Attribute_Succ>: Likewise.\n+\t<Attribute_Val>: Likewise.\n+\t<Attribute_Valid>: Likewise.\n+\t<Attribute_Max_Integer_Size>: Raise Program_Error.\n+\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Replace selection\n+\tcode with call to Integer_Type_For.\n+\t(Simple_Init_Initialize_Scalars_Type): Use Long_Long_Unsigned and\n+\tSystem_Max_Integer_Size to size the largest integer type.\n+\t* exp_pakd.adb (Compute_Linear_Subscript): Minor tweak.\n+\t(Create_Packed_Array_Impl_Type): Use Small_Integer_Type_For.\n+\t* exp_util.ads (Integer_Type_For): New function.\n+\t(Small_Integer_Type_For): Likewise.\n+\t* exp_util.adb (Adjust_Condition): Use Integer_Type_For.\n+\t(Component_May_Be_Bit_Aligned): Use System_Max_Integer_Size.\n+\t(Integer_Type_For): New function.\n+\t(Small_Integer_Type_For): Likewise.\n+\t(Matching_Standard_Type): Use Small_Integer_Type_For.\n+\t(Needs_Constant_Address): Replace 64 with System_Max_Integer_Size.\n+\t* freeze.adb (Set_Small_Size): Likewise.\n+\t(Size_Known): Likewise.\n+\t(Check_Suspicious_Modulus): Likewise.\n+\t(Check_Large_Modular_Array): Likewise.\n+\t(Freeze_Entity): Likewise.\n+\t* layout.adb (Layout_Type): Likewise.\n+\t* sem_aggr.adb: Add with and use clauses for Ttypes.\n+\t(Resolve_Aggregate): Replace 64 with System_Max_Integer_Size.\n+\t* sem_attr.ads (Attribute_Impl_Def): Add Attribute_Max_Integer_Size.\n+\t* sem_attr.adb (Analyze_Attribute) <Attribute_Max_Integer_Size>: New\n+\t(Eval_Attribute): Likewise.\n+\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Change max\n+\tscalar size to System_Max_Integer_Size.\n+\t(Check_Array_Type): Replace 64 with System_Max_Integer_Size and\n+\tremove superfluous test.\n+\t(OK_Component): Likewise.\n+\t* sem_ch5.adb: Add with and use clauses for Ttypes.\n+\t(Analyze_Assignment): Replace 64 with System_Max_Integer_Size.\n+\t* snames.ads-tmpl (Name_Max_Integer_Size): New attribute name.\n+\t(Attribute_Id): Add Attribute_Max_Integer_Size.\n+\t* ttypes.ads (System_Max_Integer_Size): New constant.\n+\n 2020-10-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch10.adb (Install_With_Clause): Fix implementation of Ada"}, {"sha": "985f616966eeda76d0dd31f3a05160881fce9991", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,15 @@\n+2020-10-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97460\n+\t* pt.c (push_template_decl): Check DECL_LANG_SPECIFIC in friend\n+\tcase.\n+\n+2020-10-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/96258\n+\t* parser.c (cp_parser_declaration): Make token2 point to EOF if\n+\ttoken1 was EOF.\n+\n 2020-10-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/95844"}, {"sha": "c8274bc017b25f6508366cc97b42adb8a86b5ccb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,13 @@\n+2020-10-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95979\n+\t* expr.c (gfc_check_init_expr): Fix check of return code from\n+\tgfc_intrinsic_func_interface.\n+\t* intrinsic.c (gfc_intrinsic_func_interface): Add further attempt\n+\tof simplification of elemental intrinsics with array arguments.\n+\t* iresolve.c (gfc_resolve_index_func): Keep optional KIND argument\n+\tfor simplification of elemental use of INDEX.\n+\n 2020-10-15  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* trans-decl.c (gfc_build_builtin_function_decls): Fix the coarray fndecls."}, {"sha": "f65b68f9f64d84599ca20f6dc30f6c307cf62025", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,71 @@\n+2020-10-17  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/pr96139-a.c: Remove -m32.\n+\t* gcc.target/powerpc/pr96139-b.c: Remove -m64.\n+\n+2020-10-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95979\n+\t* gfortran.dg/index_4.f90: New test.\n+\n+2020-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97462\n+\t* gcc.dg/pr97462.c: New file.\n+\n+2020-10-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97460\n+\t* g++.dg/template/pr97460.C: New.\n+\n+2020-10-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/96258\n+\t* g++.dg/parse/pr96258.C: New.\n+\n+2020-10-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/97327\n+\t* gcc.target/arm/mve/intrinsics/pr97327.c: New test.\n+\n+2020-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-53.c: New testcase.\n+\n+2020-10-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/97291\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c: Modify.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c:\n+\tLikewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c: Likewise.\n+\n+2020-10-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR testsuite/97426\n+\t* gcc.dg/tree-ssa/modref-4.c: Fix return test.\n+\n+2020-10-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/97404\n+\t* gcc.c-torture/execute/pr97404.c: New test.\n+\n+2020-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97428\n+\t* gcc.dg/vect/vect-complex-5.c: Expect to SLP.\n+\t* gcc.dg/vect/pr97428.c: Likewise.\n+\n 2020-10-15  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/builtins-1-p9-runnable.c: Adjust for big endian."}, {"sha": "d8cd4325905d68ab966d8d7f356905ba0e974323", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,36 @@\n+2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/gthr-vxworks.h: Condition the ___GTHREADS_CXX0X\n+\tsection on VxWorks >= 6.\n+\t* config/gthr-vxworks-thread.c: Condition the entire\n+\timplementation on __GTHREAD_CXX0X.\n+\n+2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/gthr-vxworks.h: Condition the __GTHREAD_HAS_COND\n+\tsection on VxWorks >= 6.\n+\t* config/gthr-vxworks-cond.c: Condition the entire\n+\timplementation on __GTHREAD_HAS_COND.\n+\n+2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/gthr-vxworks.c: #include <taskLib.h>.\n+\n+2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/gthr-vxworks.h: Rewrite remaining occurrence\n+\tof _VXW_PRE_69 as _VXWORKS_PRE(6,9).\n+\n+2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\t     Olivier Hainque   <hainque@adacore.com>\n+\n+\t* config/gthr-vxworks-tls.c (VX_ENTER_TLS_DTOR): Nil\n+\texcept on VxWorks 6.\n+\n+2020-10-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxcrtstuff: Remove the -kernel/-rtp specialization.\n+\n 2020-10-14  Alexandre Oliva  <oliva@adacore.com>\n \n \t* config/gthr-vxworks-thread.c: Include stdlib.h."}, {"sha": "b5347a5d32c4d7d34a2fdd9aaaf9884630645cf4", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e4eee935c1ed31bff56aff0f498118e93c6d09/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e4eee935c1ed31bff56aff0f498118e93c6d09/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=56e4eee935c1ed31bff56aff0f498118e93c6d09", "patch": "@@ -1,3 +1,7 @@\n+2020-10-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update revision.\n+\n 2020-09-21  Ian Lance Taylor  <iant@golang.org>\n \n \t* libbacktrace/backtrace-rename.h (backtrace_uncompress_lzma):"}]}