{"sha": "cb524f440b7039272af71fe9ed3aebbbdfc6fbc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1MjRmNDQwYjcwMzkyNzJhZjcxZmU5ZWQzYWViYmJkZmM2ZmJjNQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-07T20:30:22Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-07T20:30:22Z"}, "message": "(reg 112:SI recognizers): Remove.\n\n(main move:SI recognizer): Add alternative for greg -> reg 112.\n(floatsisf2 patterns): Put output template here, don't\ncall output_floatsiXf2.\n(floatsidf2 patterns): Likewise.\n(floatunssidf2, floatunssisf2): New patterns.\n(floatdisf2, floatdidf2): New patterns.\n(fix_truncsfdi2, fix_truncdfdi2): New patterns.\n(rotrsi3, rotlsi3): New patterns.\n(shd optimizers): 2 new patterns.\n(ashlsi3, ashrsi3, lshrsi3): Rewrite not to mention SAR.\n(zvdep32, vextrs32): New named recognizers.\n\nFrom-SVN: r3142", "tree": {"sha": "cec586f41bac2c2a4bb4ed51b0e2b9ca181e73c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec586f41bac2c2a4bb4ed51b0e2b9ca181e73c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5/comments", "author": null, "committer": null, "parents": [{"sha": "9e859f7e007dc30e6aa2ccd3fd595fae6ae4a3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e859f7e007dc30e6aa2ccd3fd595fae6ae4a3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e859f7e007dc30e6aa2ccd3fd595fae6ae4a3a2"}], "stats": {"total": 235, "additions": 133, "deletions": 102}, "files": [{"sha": "82b95d385d249344280302f26a4a10110e882007", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 133, "deletions": 102, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb524f440b7039272af71fe9ed3aebbbdfc6fbc5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=cb524f440b7039272af71fe9ed3aebbbdfc6fbc5", "patch": "@@ -758,22 +758,6 @@\n   DONE;\n }\")\n \n-;; Moves to and from the shift register.\n-\n-(define_insn \"\"\n-  [(set (reg:SI 112)\n-\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mtsar %0\"\n-  [(set_attr \"type\" \"move\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(reg:SI 112))]\n-  \"\"\n-  \"mfctl 11,%0\"\n-  [(set_attr \"type\" \"move\")])\n-\n ;;; Experimental\n \n (define_insn \"cmov\"\n@@ -843,19 +827,20 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"=r,r,Q,!*r,!fx,!fx\")\n-\t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,!fxy,!*r,!fx\"))]\n+\t\t\t  \"=r,r,Q,*q,!*r,!fx,!fx\")\n+\t(match_operand:SI 1 \"move_operand\" \"rM,Q,rM,rM,!fxy,!*r,!fx\"))]\n   \"register_operand (operands[0], SImode)\n    || reg_or_0_operand (operands[1], SImode)\"\n   \"@\n    copy %r1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n+   mtsar %r1\n    fstws %1,-16(30)\\;ldw -16(30),%0\n    stw %1,-16(30)\\;fldws -16(30),%0\n    fcpy,sgl %1,%0\"\n-  [(set_attr \"type\" \"move,load,store,load,fpload,fpalu\")\n-   (set_attr \"length\" \"1,1,1,2,2,1\")])\n+  [(set_attr \"type\" \"move,load,store,move,load,fpload,fpalu\")\n+   (set_attr \"length\" \"1,1,1,1,2,2,1\")])\n \n ;; For pic\n (define_insn \"\"\n@@ -1403,7 +1388,6 @@\n    stw%M0 %r1,%0\"\n   [(set_attr \"type\" \"fpalu,move,load,fpload,fpload,load,fpstore,store\")\n    (set_attr \"length\" \"1,1,2,2,1,1,1,1\")])\n-\n \f\n ;;- zero extension instructions\n \n@@ -1559,7 +1543,7 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"\"\n-  \"* return output_floatsisf2 (operands);\"\n+  \"fldws %1,%0\\;fcnvxf,sgl,sgl %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"2\")])\n \n@@ -1569,7 +1553,7 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"fx\")))]\n   \"\"\n-  \"* return output_floatsisf2 (operands);\"\n+  \"fcnvxf,sgl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"1\")])\n \n@@ -1582,7 +1566,7 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"\"\n-  \"* return output_floatsidf2 (operands);\"\n+  \"fldws %1,%0\\;fcnvxf,sgl,dbl %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"2\")])\n \n@@ -1592,7 +1576,43 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"fx\")))]\n   \"\"\n-  \"* return output_floatsidf2 (operands);\"\n+  \"fcnvxf,sgl,dbl %1,%0\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_expand \"floatunssisf2\"\n+  [(set (subreg:SI (match_dup 2) 1)\n+\t(match_operand:SI 1 \"register_operand\" \"\"))\n+   (set (subreg:SI (match_dup 2) 0)\n+\t(const_int 0))\n+   (set (match_operand:SF 0 \"general_operand\" \"\")\n+\t(float:SF (match_dup 2)))]\n+  \"\"\n+  \"operands[2] = gen_reg_rtx (DImode);\")\n+\n+(define_expand \"floatunssidf2\"\n+  [(set (subreg:SI (match_dup 2) 1)\n+\t(match_operand:SI 1 \"register_operand\" \"\"))\n+   (set (subreg:SI (match_dup 2) 0)\n+\t(const_int 0))\n+   (set (match_operand:DF 0 \"general_operand\" \"\")\n+\t(float:DF (match_dup 2)))]\n+  \"\"\n+  \"operands[2] = gen_reg_rtx (DImode);\")\n+\n+(define_insn \"floatdisf2\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n+\t(float:SF (match_operand:DI 1 \"register_operand\" \"fx\")))]\n+  \"\"\n+  \"fcnvxf,dbl,sgl %1,%0\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"floatdidf2\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n+\t(float:DF (match_operand:DI 1 \"register_operand\" \"fx\")))]\n+  \"\"\n+  \"fcnvxf,dbl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"1\")])\n \n@@ -1621,6 +1641,21 @@\n   [(set_attr \"type\" \"fpalu,fpalu\")\n    (set_attr \"length\" \"3,1\")])\n \n+(define_insn \"fix_truncsfdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=fx\")\n+\t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"fx\"))))]\n+  \"\"\n+  \"fcnvfxt,sgl,dbl %1,%0\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"fix_truncdfdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=fx\")\n+\t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"fx\"))))]\n+  \"\"\n+  \"fcnvfxt,dbl,dbl %1,%0\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"1\")])\n \f\n ;;- arithmetic instructions\n \n@@ -2190,16 +2225,6 @@\n   \"\"\n   \"sh3add %2,%1,%0\")\n \n-(define_insn \"sar_sub\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (gtu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 1 \"int11_operand\" \"I\"))\n-\t\t      (const_int 0)\n-\t\t      (minus:SI (match_dup 1) (match_dup 2))))]\n-  \"\"\n-  \"subi,>>= %1,%2,%0\\;copy 0,%0\"\n-  [(set_attr \"length\" \"2\" )])\n-\n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n@@ -2210,17 +2235,10 @@\n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      emit_insn (gen_sar_sub (temp,\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t      operands[2]));\n-      emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 112), temp));\n-      emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t  operands[0],\n-\t\t\t  gen_rtx (ASHIFT, SImode,\n-\t\t\t\t   operands[1],\n-\t\t\t\t   gen_rtx (MINUS, SImode,\n-\t\t\t\t\t    gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t\t\t    gen_rtx (REG, SImode, 112)))));\n+      emit_insn (gen_subsi3 (temp,\n+\t\t\t     gen_rtx (CONST_INT, VOIDmode, 31),\n+\t\t\t     operands[2]));\n+      emit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n       DONE;\n     }\n }\")\n@@ -2243,11 +2261,11 @@\n   return \\\"\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"zvdep32\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n        (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (minus:SI (const_int 31)\n-\t\t\t    (reg:SI 112))))]\n+\t\t\t    (match_operand:SI 2 \"register_operand\" \"q\"))))]\n  \"\"\n  \"zvdep %1,32,%0\")\n \n@@ -2261,17 +2279,10 @@\n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      emit_insn (gen_sar_sub (temp,\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t      operands[2]));\n-      emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 112), temp));\n-      emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t  operands[0],\n-\t\t\t  gen_rtx (ASHIFTRT, SImode,\n-\t\t\t\t   operands[1],\n-\t\t\t\t   gen_rtx (MINUS, SImode,\n-\t\t\t\t\t    gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t\t\t    gen_rtx (REG, SImode, 112)))));\n+      emit_insn (gen_subsi3 (temp,\n+\t\t\t     gen_rtx (CONST_INT, VOIDmode, 31),\n+\t\t\t     operands[2]));\n+      emit_insn (gen_vextrs32 (operands[0], operands[1], temp));\n       DONE;\n     }\n }\")\n@@ -2294,64 +2305,84 @@\n   return \\\"\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"vextrs32\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t    (minus:SI (const_int 31)\n-\t\t\t      (reg:SI 112))))]\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"q\"))))]\n  \"\"\n  \"vextrs %1,32,%0\")\n \n-(define_expand \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"arith32_operand\" \"\")))]\n+(define_insn \"lshrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"arith32_operand\" \"qn\")))]\n   \"\"\n-  \"\n+  \"*\n {\n-  if (GET_CODE (operands[2]) != CONST_INT)\n+  if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      rtx temp = gen_reg_rtx (SImode);\n-      emit_insn (gen_sar_sub (temp,\n-\t\t\t      gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t      operands[2]));\n-      emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 112), temp));\n-      emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t  operands[0],\n-\t\t\t  gen_rtx (LSHIFTRT, SImode,\n-\t\t\t\t   operands[1],\n-\t\t\t\t   gen_rtx (MINUS, SImode,\n-\t\t\t\t\t    gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t\t\t    gen_rtx (REG, SImode, 112)))));\n-      DONE;\n+      operands[3] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t     32 - (INTVAL (operands[2]) & 31));\n+      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t     31 - (INTVAL (operands[2]) & 31));\n+      return \\\"extru %1,%2,%3,%0\\\";\n     }\n+  else\n+    return \\\"vshd 0,%1,%0\\\";\n }\")\n \n-(define_insn \"\"\n- [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-       (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n- \"\"\n- \"*\n+(define_insn \"rotrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"arith32_operand\" \"qn\")))]\n+  \"\"\n+  \"*\n {\n-  rtx xoperands[4];\n-  xoperands[0] = operands[0];\n-  xoperands[1] = operands[1];\n-  xoperands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  31 - (INTVAL (operands[2]) & 31));\n-  xoperands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  32 - (INTVAL (operands[2]) & 31));\n-  output_asm_insn (\\\"extru %1,%2,%3,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\")\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    return \\\"shd %1,%1,%2,%0\\\";\n+  else\n+    return \\\"vshd %1,%1,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"rotlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"*\n+{\n+  operands[2] = gen_rtx (CONST_INT, VOIDmode, (32 - INTVAL (operands[2])) & 31);\n+  return \\\"shd %1,%1,%2,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n \n (define_insn \"\"\n- [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-       (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (minus:SI (const_int 31)\n-\t\t\t      (reg:SI 112))))]\n- \"\"\n- \"vextru %1,32,%0\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 5 \"plus_xor_ior_operator\"\n+\t  [(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t   (lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n\"))]))]\n+  \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n+  \"shd %1,%2,%4,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 5 \"plus_xor_ior_operator\"\n+\t  [(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n\"))\n+\t   (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:SI 3 \"const_int_operand\" \"n\"))]))]\n+  \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n+  \"shd %1,%2,%4,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n \f\n ;; Unconditional and other jump instructions.\n "}]}