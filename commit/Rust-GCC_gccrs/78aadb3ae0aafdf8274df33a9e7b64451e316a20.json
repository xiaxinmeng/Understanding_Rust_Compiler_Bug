{"sha": "78aadb3ae0aafdf8274df33a9e7b64451e316a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhYWRiM2FlMGFhZmRmODI3NGRmMzNhOWU3YjY0NDUxZTMxNmEyMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:43:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:43:46Z"}, "message": "(ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE): Use REAL_VALUE... macros.\n\n(PRINT_OPERAND): Likewise.\n(ASM_OUTPUT_LONG_DOUBLE): New definition.\n\nFrom-SVN: r3979", "tree": {"sha": "174ce138a8fc590633a5ec90f8b181e503f555f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/174ce138a8fc590633a5ec90f8b181e503f555f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78aadb3ae0aafdf8274df33a9e7b64451e316a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78aadb3ae0aafdf8274df33a9e7b64451e316a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78aadb3ae0aafdf8274df33a9e7b64451e316a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78aadb3ae0aafdf8274df33a9e7b64451e316a20/comments", "author": null, "committer": null, "parents": [{"sha": "6e30512182106b8c088f7a7d579574b1d169d11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e30512182106b8c088f7a7d579574b1d169d11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e30512182106b8c088f7a7d579574b1d169d11d"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "bfdcdb1bcf4a1401e3b4d4d8a0cdac838f96276d", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78aadb3ae0aafdf8274df33a9e7b64451e316a20/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78aadb3ae0aafdf8274df33a9e7b64451e316a20/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=78aadb3ae0aafdf8274df33a9e7b64451e316a20", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1990 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1993 Free Software Foundation, Inc.\n \n    Written by Robert Andersson, International Systems, Oslo, Norway.\n    Send bug reports, questions and improvements to ra@intsys.no.\n@@ -344,16 +344,23 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { union { double d; long l[2]; } tem;\t\t\\\n-     tem.d = (VALUE);\t\t\t\t\t\\\n-     fprintf(FILE, \"\\tlong 0x%x,0x%x\\n\", tem.l[0], tem.l[1]); \\\n+do { long l[2];\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n+     fprintf (FILE, \"\\tlong 0x%x,0x%x\\n\", l[0], l[1]); \\\n+   } while (0)\n+\n+#undef ASM_OUTPUT_LONG_DOUBLE\n+#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n+do { long l[3];\t\t\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n+     fprintf (FILE, \"\\tlong 0x%x,0x%x,0x%x\\n\", l[0], l[1], l[2]);\t\\\n    } while (0)\n \n #undef ASM_OUTPUT_FLOAT\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-do { union { float f; long l;} tem;\t\t\t\\\n-     tem.f = (VALUE);\t\t\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x\\n\", tem.l);\t\\\n+do { long l;\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n+     fprintf ((FILE), \"\\tlong 0x%x\\n\", l);\t\\\n    } while (0)\n \n /* This is how to output an assembler line defining an `int' constant.  */\n@@ -411,18 +418,26 @@ do { union { float f; long l;} tem;\t\t\t\\\n   else if (CODE == '+') fprintf (FILE, \"(%%sp)+\");\t\t\t\\\n   else if (CODE == '@') fprintf (FILE, \"(%%sp)\");\t\t\t\\\n   else if (CODE == '!') fprintf (FILE, \"%%fpcr\");\t\t\t\\\n+  else if (CODE == '$') { if (TARGET_68040_ONLY) fprintf (FILE, \"s\"); }\t\\\n+  else if (CODE == '&') { if (TARGET_68040_ONLY) fprintf (FILE, \"d\"); }\t\\\n   else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n     fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      union { float f; int i; } u1;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      u1.f = u.d;\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"&0x%x\", u1.i); }\t\t\t\t        \\\n+    { REAL_VALUE_TYPE r; long l;\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n+      fprintf (FILE, \"&0x%x\", l); }\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n-      fprintf (FILE, \"&0x%x%08x\", CONST_DOUBLE_LOW (X), CONST_DOUBLE_HIGH (X));\\\n+    { REAL_VALUE_TYPE r; int i[2];\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      REAL_VALUE_TO_TARGET_DOUBLE (r, i);\t\t\t\t\\\n+      fprintf (FILE, \"&0x%x%08x\", i[0], i[1]); }\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n+    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      ASM_OUTPUT_LONG_DOUBLE_OPERAND (FILE, r); }\t\t\t\\\n   else { putc ('&', FILE); output_addr_const (FILE, X); }}\n \n /* Note that this contains a kludge that knows that the only reason"}]}