{"sha": "413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzZDNhYTg5ZGNjMGQ2MDg5ZmQxMDE4NTg0MmQ0YjcyYjNjMjFlNg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2009-04-17T21:28:01Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-04-17T21:28:01Z"}, "message": "tree-pretty-print.c (dump_generic_node): Add break after TREE_BINFO handler.\n\n\n\t* tree-pretty-print.c (dump_generic_node): Add break\n\tafter TREE_BINFO handler.\n\tHandle COMPLEX_TYPE, REAL_TYPE and FIXED_POINT_TYPE\n\tHandle NULL TREE_TYPEs.\n\tHandle METHOD_TYPE and FUNCTION_TYPE together.\n\tCall print_struct_decl when printing structures and\n\tTDF_SLIM is not given.\n\t(print_struct_decl): Fix logic for detecting recursion.\n\nFrom-SVN: r146293", "tree": {"sha": "15d7cd2785a35ae3fa7e9ddb0823dfc38dd0fd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d7cd2785a35ae3fa7e9ddb0823dfc38dd0fd40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413d3aa89dcc0d6089fd10185842d4b72b3c21e6/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a691e986280aa2d53b49f95b71170ff28a76703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a691e986280aa2d53b49f95b71170ff28a76703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a691e986280aa2d53b49f95b71170ff28a76703"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "919002b70aec516e0851f521a9103b33ed1aba7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413d3aa89dcc0d6089fd10185842d4b72b3c21e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413d3aa89dcc0d6089fd10185842d4b72b3c21e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "patch": "@@ -1,3 +1,14 @@\n+2009-04-17  Diego Novillo  <dnovillo@google.com>\n+\n+\t* tree-pretty-print.c (dump_generic_node): Add break\n+\tafter TREE_BINFO handler.\n+\tHandle COMPLEX_TYPE, REAL_TYPE and FIXED_POINT_TYPE\n+\tHandle NULL TREE_TYPEs.\n+\tHandle METHOD_TYPE and FUNCTION_TYPE together.\n+\tCall print_struct_decl when printing structures and\n+\tTDF_SLIM is not given.\n+\t(print_struct_decl): Fix logic for detecting recursion.\n+\n 2009-04-17  Rafael Avila de Espindola  <espindola@google.com>\n \n \tPR 31567"}, {"sha": "c8cbe1d4351debbbc119ccd47d7efec9e8e66417", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413d3aa89dcc0d6089fd10185842d4b72b3c21e6/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413d3aa89dcc0d6089fd10185842d4b72b3c21e6/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=413d3aa89dcc0d6089fd10185842d4b72b3c21e6", "patch": "@@ -488,6 +488,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n     case TREE_BINFO:\n       dump_generic_node (buffer, BINFO_TYPE (node), spc, flags, false);\n+      break;\n \n     case TREE_VEC:\n       {\n@@ -551,8 +552,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    else if (TREE_CODE (node) == VECTOR_TYPE)\n \t      {\n \t\tpp_string (buffer, \"vector \");\n-\t\tdump_generic_node (buffer, TREE_TYPE (node), \n-\t\t\t\t   spc, flags, false);\n+\t\tdump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n \t      }\n \t    else if (TREE_CODE (node) == INTEGER_TYPE)\n \t      {\n@@ -562,6 +562,24 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n \t\tpp_string (buffer, \">\");\n \t      }\n+\t    else if (TREE_CODE (node) == COMPLEX_TYPE)\n+\t      {\n+\t\tpp_string (buffer, \"__complex__ \");\n+\t\tdump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n+\t      }\n+\t    else if (TREE_CODE (node) == REAL_TYPE)\n+\t      {\n+\t\tpp_string (buffer, \"<float:\");\n+\t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n+\t\tpp_string (buffer, \">\");\n+\t      }\n+\t    else if (TREE_CODE (node) == FIXED_POINT_TYPE)\n+\t      {\n+\t\tpp_string (buffer, \"<fixed-point-\");\n+\t\tpp_string (buffer, TYPE_SATURATING (node) ? \"sat:\" : \"nonsat:\");\n+\t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n+\t\tpp_string (buffer, \">\");\n+\t      }\n \t    else\n               pp_string (buffer, \"<unnamed type>\");\n \t  }\n@@ -572,7 +590,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case REFERENCE_TYPE:\n       str = (TREE_CODE (node) == POINTER_TYPE ? \"*\" : \"&\");\n \n-      if (TREE_CODE (TREE_TYPE (node)) == FUNCTION_TYPE)\n+      if (TREE_TYPE (node) == NULL)\n+        {\n+\t  pp_string (buffer, str);\n+          pp_string (buffer, \"<null type>\");\n+        }\n+      else if (TREE_CODE (TREE_TYPE (node)) == FUNCTION_TYPE)\n         {\n \t  tree fnode = TREE_TYPE (node);\n \n@@ -612,11 +635,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       NIY;\n       break;\n \n-    case METHOD_TYPE:\n-      dump_decl_name (buffer, TYPE_NAME (TYPE_METHOD_BASETYPE (node)), flags);\n-      pp_string (buffer, \"::\");\n-      break;\n-\n     case TARGET_MEM_REF:\n       {\n \tconst char *sep = \"\";\n@@ -710,7 +728,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n         if (TYPE_NAME (node))\n \t  dump_generic_node (buffer, TYPE_NAME (node), spc, flags, false);\n-        else\n+\telse if (!(flags & TDF_SLIM))\n+\t  /* FIXME: If we eliminate the 'else' above and attempt\n+\t     to show the fields for named types, we may get stuck\n+\t     following a cycle of pointers to structs.  The alleged\n+\t     self-reference check in print_struct_decl will not detect\n+\t     cycles involving more than one pointer or struct type.  */\n \t  print_struct_decl (buffer, node, spc, flags);\n         break;\n       }\n@@ -836,6 +859,23 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      dump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n+      pp_space (buffer);\n+      if (TREE_CODE (node) == METHOD_TYPE)\n+\t{\n+\t  if (TYPE_METHOD_BASETYPE (node))\n+\t    dump_decl_name (buffer, TYPE_NAME (TYPE_METHOD_BASETYPE (node)),\n+\t\t\t    flags);\n+\t  else\n+\t    pp_string (buffer, \"<null method basetype>\");\n+\t  pp_string (buffer, \"::\");\n+\t}\n+      if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n+\tdump_decl_name (buffer, TYPE_NAME (node), flags);\n+      else\n+\tpp_printf (buffer, \"<T%x>\", TYPE_UID (node));\n+      dump_function_declaration (buffer, node, spc, flags);\n       break;\n \n     case FUNCTION_DECL:\n@@ -2206,8 +2246,8 @@ print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n \t   Maybe this could be solved by looking at the scope in which the\n \t   structure was declared.  */\n \tif (TREE_TYPE (tmp) != node\n-\t    || (TREE_CODE (TREE_TYPE (tmp)) == POINTER_TYPE\n-\t\t&& TREE_TYPE (TREE_TYPE (tmp)) != node))\n+\t    && (TREE_CODE (TREE_TYPE (tmp)) != POINTER_TYPE\n+\t\t|| TREE_TYPE (TREE_TYPE (tmp)) != node))\n \t  {\n \t    print_declaration (buffer, tmp, spc+2, flags);\n \t    pp_newline (buffer);"}]}