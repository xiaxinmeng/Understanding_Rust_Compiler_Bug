{"sha": "f4cdfd4856f6e90376dbe277912cefda51922488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjZGZkNDg1NmY2ZTkwMzc2ZGJlMjc3OTEyY2VmZGE1MTkyMjQ4OA==", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-08-03T17:28:53Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-09-07T20:48:58Z"}, "message": "bpf testsuite: Add BPF CO-RE tests\n\nThis commit adds several tests for the new BPF CO-RE functionality to\nthe BPF target testsuite.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/bpf/core-attr-1.c: New test.\n\t* gcc.target/bpf/core-attr-2.c: Likewise.\n\t* gcc.target/bpf/core-attr-3.c: Likewise.\n\t* gcc.target/bpf/core-attr-4.c: Likewise\n\t* gcc.target/bpf/core-builtin-1.c: Likewise\n\t* gcc.target/bpf/core-builtin-2.c: Likewise.\n\t* gcc.target/bpf/core-builtin-3.c: Likewise.\n\t* gcc.target/bpf/core-section-1.c: Likewise.", "tree": {"sha": "3f19056aac3e5d68cf537885b423a0a06e0567e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f19056aac3e5d68cf537885b423a0a06e0567e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4cdfd4856f6e90376dbe277912cefda51922488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4cdfd4856f6e90376dbe277912cefda51922488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4cdfd4856f6e90376dbe277912cefda51922488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4cdfd4856f6e90376dbe277912cefda51922488/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bdabb37549f12ce727800a1c8aa182c0b1dd42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bdabb37549f12ce727800a1c8aa182c0b1dd42a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bdabb37549f12ce727800a1c8aa182c0b1dd42a"}], "stats": {"total": 274, "additions": 274, "deletions": 0}, "files": [{"sha": "1af9dc5ea6de990b1232f815a7ce85fde2fee03d", "filename": "gcc/testsuite/gcc.target/bpf/core-attr-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-1.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,23 @@\n+/* Basic test for struct __attribute__((preserve_access_index))\n+   for BPF CO-RE support.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct S {\n+  int a;\n+  int b;\n+  int c;\n+} __attribute__((preserve_access_index));\n+\n+void\n+func (struct S * s)\n+{\n+  /* 0:2 */\n+  int *x = &(s->c);\n+\n+  *x = 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 1 } } */"}, {"sha": "25c819a0082984942763a698cd0d7b830adec13d", "filename": "gcc/testsuite/gcc.target/bpf/core-attr-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-2.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,21 @@\n+/* Basic test for union __attribute__((preserve_access_index))\n+   for BPF CO-RE support.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+union U {\n+  int a;\n+  char c;\n+} __attribute__((preserve_access_index));\n+\n+void\n+func (union U *u)\n+{\n+  /* 0:1 */\n+  char *c = &(u->c);\n+  *c = 'c';\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 1 } } */"}, {"sha": "b46549f788c798bd6448def21e2498f02f34bcb9", "filename": "gcc/testsuite/gcc.target/bpf/core-attr-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-3.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,41 @@\n+/* Test for __attribute__((preserve_access_index)) for BPF CO-RE support\n+   for nested structure.\n+\n+   Note that even though struct O lacks the attribute, when accessed as a\n+   member of another attributed type, CO-RE relocations should still be\n+   generated.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct O {\n+  int e;\n+  int f;\n+};\n+\n+struct S {\n+  int a;\n+  struct {\n+    int b;\n+    int c;\n+  } inner;\n+  struct O other;\n+} __attribute__((preserve_access_index));\n+\n+void\n+func (struct S *foo)\n+{\n+  /* 0:1:1 */\n+  int *x = &(foo->inner.c);\n+\n+  /* 0:2:0 */\n+  int *y = &(foo->other.e);\n+\n+  *x = 4;\n+  *y = 5;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:1:1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:0.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 2 } } */"}, {"sha": "9c0f966b556472c17945cd6927f0d48098e18b80", "filename": "gcc/testsuite/gcc.target/bpf/core-attr-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-attr-4.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,35 @@\n+/* Test for BPF CO-RE __attribute__((preserve_access_index)) with accesses on\n+   LHS and both LHS and RHS of assignment.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct T {\n+  int a;\n+  int b;\n+  struct U {\n+    int c;\n+    struct V {\n+      int d;\n+      int e[4];\n+      int f;\n+    } v;\n+  } u;\n+} __attribute__((preserve_access_index));\n+\n+\n+void\n+func (struct T *t)\n+{\n+  /* 0:2:1:1:3 */\n+  t->u.v.e[3] = 0xa1;\n+\n+  /* 0:2:0, 0:0, 0:1 */\n+  t->u.c = t->a + t->b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:1:1:3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:0.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:0.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 4 } } */"}, {"sha": "e994dc6add480a4e971ebd016c32118bfbeef3a3", "filename": "gcc/testsuite/gcc.target/bpf/core-builtin-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-1.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct S {\n+  int a;\n+  int b;\n+  char c;\n+};\n+\n+union U {\n+  unsigned int u;\n+  int i;\n+  unsigned char uc[4];\n+  signed char ic[4];\n+};\n+\n+struct S my_s;\n+union U my_u;\n+\n+unsigned long ula[8];\n+\n+#define _(x) (__builtin_preserve_access_index (x))\n+\n+void\n+func (void)\n+{\n+  /* 1 */\n+  int b = _(my_s.b);\n+\n+  /* 2 */\n+  char c = _(my_s.c);\n+\n+  /* 2:3 */\n+  unsigned char uc = _(my_u.uc[3]);\n+\n+  /* 6 */\n+  unsigned long ul = _(ula[6]);\n+}\n+\n+char\n+s_ptr (struct S *ps)\n+{\n+  /* 0:2 */\n+  char x = _(ps->c);\n+  return x;\n+}\n+\n+unsigned char\n+u_ptr (union U *pu)\n+{\n+  /* 0:2:3 */\n+  unsigned char x = _(pu->uc[3]);\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"2:3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"6.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 6 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x6c\\[\\t \\]+\\[^\\n\\]*core_relo_len\" 1 } } */"}, {"sha": "c9ec8994ae3bfa6906799b187b6a93a09ef4ecce", "filename": "gcc/testsuite/gcc.target/bpf/core-builtin-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-2.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct S {\n+  int a;\n+  union {\n+    int _unused;\n+    int b;\n+    char c;\n+  } u[4];\n+};\n+\n+struct S foo;\n+\n+#define _(x) (__builtin_preserve_access_index (x))\n+\n+void func (void)\n+{\n+  char *x = __builtin_preserve_access_index (&foo.u[3].c);\n+\n+  *x = 's';\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x4000002\\[\\t \\]+\\[^\\n\\]*btt_info\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"1:3:2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 1 } } */"}, {"sha": "190ec2657d3c962fc223cc521a2b516ffa1daf7b", "filename": "gcc/testsuite/gcc.target/bpf/core-builtin-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-builtin-3.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -dA -gbtf -mco-re\" } */\n+\n+struct T {\n+  int a;\n+  int b;\n+  struct U {\n+    int c;\n+    struct V {\n+      int d;\n+      int e[4];\n+      int f;\n+    } v;\n+  } u;\n+};\n+\n+void func (struct T * foo)\n+{\n+  /* Access string: \"0:2:1:1:3\" */\n+  int *x = __builtin_preserve_access_index (&(foo->u.v.e[3]));\n+\n+  *x = 17;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:1:1:3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 1 } } */"}, {"sha": "031acd5292ed2b9c595b9f4c39c3646d9fc115a6", "filename": "gcc/testsuite/gcc.target/bpf/core-section-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-section-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4cdfd4856f6e90376dbe277912cefda51922488/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-section-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-section-1.c?ref=f4cdfd4856f6e90376dbe277912cefda51922488", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA -mco-re\" } */\n+\n+struct T {\n+  int a;\n+  int b;\n+  struct U {\n+    int c;\n+    struct V {\n+      int d;\n+      int e[4];\n+      int f;\n+    } v;\n+  } u;\n+};\n+\n+__attribute__((section(\"foo_sec\"), used))\n+int foo_func (struct T *t)\n+{\n+  t->u.c = 5;\n+  return __builtin_preserve_access_index (t->u.v.e[3]);\n+}\n+\n+__attribute__((section(\"bar_sec\"), used))\n+int bar_func (struct T *t)\n+{\n+  int *x = __builtin_preserve_access_index (&(t->u.v.f));\n+  int old = *x;\n+  *x = 4;\n+  return old;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:1:1:3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:1:2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"foo_sec.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"bar_sec.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bpfcr_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \"btfext_secinfo_rec_size\" 2 } } */"}]}