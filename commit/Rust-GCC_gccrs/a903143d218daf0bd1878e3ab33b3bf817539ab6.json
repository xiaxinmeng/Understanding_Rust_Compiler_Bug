{"sha": "a903143d218daf0bd1878e3ab33b3bf817539ab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwMzE0M2QyMThkYWYwYmQxODc4ZTNhYjMzYjNiZjgxNzUzOWFiNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-06T13:05:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-06T13:05:28Z"}, "message": "stdio-opt-1.c: Add more checks.\n\n\t* testsuite/gcc.c-torture/execute/stdio-opt-1.c: Add more checks.\n\t* testsuite/gcc.c-torture/execute/stdio-opt-2.c: New test.\n\nFrom-SVN: r38065", "tree": {"sha": "8042072ed7df0e3d67c2fd02e7f41f0e79f2dc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8042072ed7df0e3d67c2fd02e7f41f0e79f2dc7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a903143d218daf0bd1878e3ab33b3bf817539ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a903143d218daf0bd1878e3ab33b3bf817539ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a903143d218daf0bd1878e3ab33b3bf817539ab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a903143d218daf0bd1878e3ab33b3bf817539ab6/comments", "author": null, "committer": null, "parents": [{"sha": "5fbf4574d48153ef2fa44bd6722091f1be54a4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbf4574d48153ef2fa44bd6722091f1be54a4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbf4574d48153ef2fa44bd6722091f1be54a4db"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "d3ca7efe2af320e5f6952857d5b3c9cdd098aa74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a903143d218daf0bd1878e3ab33b3bf817539ab6", "patch": "@@ -1,3 +1,8 @@\n+2000-12-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* testsuite/gcc.c-torture/execute/stdio-opt-1.c: Add more checks.\n+\t* testsuite/gcc.c-torture/execute/stdio-opt-2.c: New test.\n+\n 2000-12-05  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* gcc.c-torture/execute/20001203-2.c: New testcase.\n@@ -33,7 +38,7 @@\n         * gcc.dg/cpp/assert_trad1.c, assert_trad2.c, assert_trad3.c:\n         New tests.\n \n-2000-12-03  Kaveh R. Ghazi  <ghazi@teal.rutgers.edu>\n+2000-12-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/string-opt-11.c: Add more strspn checks.\n \t* gcc.c-torture/execute/string-opt-12.c: Add more strcspn checks."}, {"sha": "620078648a494680ce2814b5fe5edd20c60a485d", "filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-1.c", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-1.c?ref=a903143d218daf0bd1878e3ab33b3bf817539ab6", "patch": "@@ -1,28 +1,57 @@\n /* Copyright (C) 2000  Free Software Foundation.\n \n-   When eliminating NOP calls to builtin fputs, ensure that we still\n-   evaluate the stream argument in case it has side effects.\n+   Ensure all expected transformations of builtin fputs occur and that\n+   we honor side effects in the stream argument.\n+\n    Written by Kaveh R. Ghazi, 10/30/2000.  */\n \n #include <stdio.h>\n+extern void abort(void);\n+/* Declare this without args because that's what gcc does internally.\n+   We want to make sure it works without a helpful prototype from us.\n+   If stdio.h provides one, that is okay.  */\n+extern int fputs();\n \n int main()\n {\n-  FILE *s_array[3] = {stdout, NULL, stdout}, **s_ptr = s_array;\n+  FILE *s_array[] = {stdout, NULL}, **s_ptr = s_array;\n+  const char *const s1 = \"hello world\";\n+  \n+  fputs (\"\", *s_ptr);\n+  fputs (\"\\n\", *s_ptr);\n+  fputs (\"bye\", *s_ptr);\n+  fputs (s1, *s_ptr);\n+  fputs (s1+5, *s_ptr);\n+  fputs (s1+10, *s_ptr);\n+  fputs (s1+11, *s_ptr);\n   \n-  /* Increment the stream pointer once.  */\n+  /* Check side-effects when transforming fputs -> NOP.  */\n   fputs (\"\", *s_ptr++);\n+  if (s_ptr != s_array+1 || *s_ptr != 0)\n+    abort();\n \n-  /* Increment the stream pointer a second time.  */\n-  s_ptr++;\n+  /* Check side-effects when transforming fputs -> fputc.  */\n+  s_ptr = s_array;\n+  fputs (\"\\n\", *s_ptr++);\n+  if (s_ptr != s_array+1 || *s_ptr != 0)\n+    abort();\n \n-  /* If we failed to increment the stream pointer twice, then the\n-     stream passed in here will be NULL and we should crash.  */\n-  fputs (\"hello world\\n\", *s_ptr);\n-  \n-  /* Just in case, If *s_ptr is NULL abort anyway.  */\n-  if (*s_ptr == 0)\n+  /* Check side-effects when transforming fputs -> fwrite.  */\n+  s_ptr = s_array;\n+  fputs (\"hello\\n\", *s_ptr++);\n+  if (s_ptr != s_array+1 || *s_ptr != 0)\n     abort();\n \n   return 0;\n }\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static int\n+fputs(const char *string, FILE *stream)\n+{\n+  abort();\n+}\n+#endif"}, {"sha": "b7bfd33b05dbb7a7b6c3cd02e702186fff6eab7c", "filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a903143d218daf0bd1878e3ab33b3bf817539ab6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-2.c?ref=a903143d218daf0bd1878e3ab33b3bf817539ab6", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin printf occur and\n+   that we honor side effects in the arguments.\n+\n+   Written by Kaveh R. Ghazi, 12/4/2000.  */\n+\n+extern int printf (const char *, ...);\n+extern void abort(void);\n+\n+int main()\n+{\n+  const char *const s1 = \"hello world\";\n+  const char *const s2[] = { s1, 0 }, *const*s3;\n+  \n+  printf (\"%s\\n\", \"hello\");\n+  printf (\"%s\\n\", *s2);\n+  s3 = s2;\n+  printf (\"%s\\n\", *s3++);\n+  if (s3 != s2+1 || *s3 != 0)\n+    abort();\n+  \n+  printf (\"%c\", '\\n');\n+  printf (\"%c\", **s2);\n+  s3 = s2;\n+  printf (\"%c\", **s3++);\n+  if (s3 != s2+1 || *s3 != 0)\n+    abort();\n+  \n+  printf (\"\\n\");\n+  printf (\"hello world\\n\");\n+  \n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static int\n+printf (const char *string, ...)\n+{\n+  abort();\n+}\n+#endif"}]}