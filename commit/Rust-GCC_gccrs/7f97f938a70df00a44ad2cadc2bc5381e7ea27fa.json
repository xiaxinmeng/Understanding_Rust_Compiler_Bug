{"sha": "7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5N2Y5MzhhNzBkZjAwYTQ0YWQyY2FkYzJiYzUzODFlN2VhMjdmYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-28T09:52:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-28T09:52:06Z"}, "message": "re PR target/32661 (__builtin_ia32_vec_ext suboptimal for pointer/ref args)\n\n\tPR target/32661\n\t* simplify-rtx.c (simplify_binary_operation_1) [VEC_SELECT]:\n\tSimplify nested VEC_SELECT (with optional VEC_CONCAT operator as\n\toperand) when top VEC_SELECT extracts scalar element.\n\t* config/i386/sse.md (*vec_extract_v4si_mem): New.\n\t(*vec_extract_v4sf_mem): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/32661\n\t* gcc.target/i386/pr32661.c: New test.\n\nFrom-SVN: r127857", "tree": {"sha": "9fabd68cfa56fff4c597b8d11980be9b00eeff43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fabd68cfa56fff4c597b8d11980be9b00eeff43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/comments", "author": null, "committer": null, "parents": [{"sha": "0b738568dad569012c12839d57721939ac8ef3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b738568dad569012c12839d57721939ac8ef3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b738568dad569012c12839d57721939ac8ef3f5"}], "stats": {"total": 158, "additions": 156, "deletions": 2}, "files": [{"sha": "3d9cdbb78cad3d6b11ee926f08a9f75045e77efa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "patch": "@@ -1,3 +1,12 @@\n+2007-08-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32661\n+\t* simplify-rtx.c (simplify_binary_operation_1) [VEC_SELECT]:\n+\tSimplify nested VEC_SELECT (with optional VEC_CONCAT operator as\n+\toperand) when top VEC_SELECT extracts scalar element.\n+\t* config/i386/sse.md (*vec_extract_v4si_mem): New pattern.\n+\t(*vec_extract_v4sf_mem): Ditto.\n+\n 2007-08-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/32370\n@@ -604,8 +613,8 @@\n \n 2007-08-23  Brian Sidebotham  <brian.sidebotham@gmail.com>\n \n-\t* configure.ac (leb128): Modify sed statement to work with any binutils\n-\tversion string.\n+\t* configure.ac (leb128): Modify sed statement to work with any\n+\tbinutils version string.\n \t* configure: Regenerate\n \n 2007-08-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>"}, {"sha": "6779e9a805a3980eebd977fae092079d14625222", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "patch": "@@ -1542,6 +1542,22 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn_and_split \"*vec_extract_v4sf_mem\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x*rf\")\n+       (vec_select:SF\n+\t (match_operand:V4SF 1 \"memory_operand\" \"o\")\n+\t (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n\")])))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  int i = INTVAL (operands[2]);\n+\n+  emit_move_insn (operands[0], adjust_address (operands[1], SFmode, i*4));\n+  DONE;\n+})\n+\n (define_expand \"vec_extractv4sf\"\n   [(match_operand:SF 0 \"register_operand\" \"\")\n    (match_operand:V4SF 1 \"register_operand\" \"\")\n@@ -4634,6 +4650,22 @@\n   operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\n })\n \n+(define_insn_and_split \"*vec_ext_v4si_mem\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(vec_select:SI\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"o\")\n+\t  (parallel [(match_operand 2 \"const_0_to_3_operand\" \"\")])))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  int i = INTVAL (operands[2]);\n+\n+  emit_move_insn (operands[0], adjust_address (operands[1], SImode, i*4));\n+  DONE;\n+})\n+\n (define_expand \"sse_storeq\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(vec_select:DI"}, {"sha": "3271a86485172a66b18845c616f5351f389fd1b4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "patch": "@@ -2659,6 +2659,85 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  if (GET_CODE (trueop0) == CONST_VECTOR)\n \t    return CONST_VECTOR_ELT (trueop0, INTVAL (XVECEXP\n \t\t\t\t\t\t      (trueop1, 0, 0)));\n+\n+\t  /* Extract a scalar element from a nested VEC_SELECT expression\n+\t     (with optional nested VEC_CONCAT expression).  Some targets\n+\t     (i386) extract scalar element from a vector using chain of\n+\t     nested VEC_SELECT expressions.  When input operand is a memory\n+\t     operand, this operation can be simplified to a simple scalar\n+\t     load from an offseted memory address.  */\n+\t  if (GET_CODE (trueop0) == VEC_SELECT)\n+\t    {\n+\t      rtx op0 = XEXP (trueop0, 0);\n+\t      rtx op1 = XEXP (trueop0, 1);\n+\n+\t      enum machine_mode opmode = GET_MODE (op0);\n+\t      int elt_size = GET_MODE_SIZE (GET_MODE_INNER (opmode));\n+\t      int n_elts = GET_MODE_SIZE (opmode) / elt_size;\n+\n+\t      int i = INTVAL (XVECEXP (trueop1, 0, 0));\n+\t      int elem;\n+\n+\t      rtvec vec;\n+\t      rtx tmp_op, tmp;\n+\n+\t      gcc_assert (GET_CODE (op1) == PARALLEL);\n+\t      gcc_assert (i < n_elts);\n+\n+\t      /* Select element, pointed by nested selector.  */\n+\t      elem = INTVAL (CONST_VECTOR_ELT (op1, i));\n+\n+\t      /* Handle the case when nested VEC_SELECT wraps VEC_CONCAT.  */\n+\t      if (GET_CODE (op0) == VEC_CONCAT)\n+\t\t{\n+\t\t  rtx op00 = XEXP (op0, 0);\n+\t\t  rtx op01 = XEXP (op0, 1);\n+\n+\t\t  enum machine_mode mode00, mode01;\n+\t\t  int n_elts00, n_elts01;\n+\n+\t\t  mode00 = GET_MODE (op00);\n+\t\t  mode01 = GET_MODE (op01);\n+\n+\t\t  /* Find out number of elements of each operand.  */\n+\t\t  if (VECTOR_MODE_P (mode00))\n+\t\t    {\n+\t\t      elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode00));\n+\t\t      n_elts00 = GET_MODE_SIZE (mode00) / elt_size;\n+\t\t    }\n+\t\t  else\n+\t\t    n_elts00 = 1;\n+\n+\t\t  if (VECTOR_MODE_P (mode01))\n+\t\t    {\n+\t\t      elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode01));\n+\t\t      n_elts01 = GET_MODE_SIZE (mode01) / elt_size;\n+\t\t    }\n+\t\t  else\n+\t\t    n_elts01 = 1;\n+\n+\t\t  gcc_assert (n_elts == n_elts00 + n_elts01);\n+\n+\t\t  /* Select correct operand of VEC_CONCAT\n+\t\t     and adjust selector. */\n+\t\t  if (elem < n_elts01)\n+\t\t    tmp_op = op00;\n+\t\t  else\n+\t\t    {\n+\t\t      tmp_op = op01;\n+\t\t      elem -= n_elts00;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\ttmp_op = op0;\n+\n+\t      vec = rtvec_alloc (1);\n+\t      RTVEC_ELT (vec, 0) = GEN_INT (elem);\n+\n+\t      tmp = gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t    tmp_op, gen_rtx_PARALLEL (VOIDmode, vec));\n+\t      return tmp;\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "f3a78804c85ddad6b53f766bc00ea24ed2fccb67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "patch": "@@ -1,3 +1,8 @@\n+2007-08-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32661\n+\t* gcc.target/i386/pr32661.c: New test.\n+\n 2007-08-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/32370"}, {"sha": "247ae1319237ae28166ce2eadb65518aac4d16e7", "filename": "gcc/testsuite/gcc.target/i386/pr32661.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32661.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32661.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32661.c?ref=7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+int fooSI_1(__v4si *val)\n+{\n+  return __builtin_ia32_vec_ext_v4si(*val, 1);\n+}\n+/* { dg-final { scan-assembler-not \"pshufd\" } } */\n+\n+int fooSI_2(__v4si *val)\n+{\n+  return __builtin_ia32_vec_ext_v4si(*val, 2);\n+}\n+/* { dg-final { scan-assembler-not \"punpckhdq\" } } */\n+\n+float fooSF_2(__v4sf *val)\n+{\n+  return __builtin_ia32_vec_ext_v4sf(*val, 2);\n+}\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+\n+float fooSF_3(__v4sf *val)\n+{\n+  return __builtin_ia32_vec_ext_v4sf(*val, 3);\n+}\n+/* { dg-final { scan-assembler-not \"shufps\" } } */"}]}