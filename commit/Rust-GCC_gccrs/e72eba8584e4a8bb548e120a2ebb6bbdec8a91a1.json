{"sha": "e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyZWJhODU4NGU0YThiYjU0OGUxMjBhMmViYjZiYmRlYzhhOTFhMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-09-13T19:33:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-09-13T19:33:52Z"}, "message": "Disable double precision vectorizer for Atom.\n\ngcc/\n\n2010-09-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386-protos.h (ix86_units_per_simd_word): New.\n\n\t* config/i386/i386.c (initial_ix86_tune_features): Add\n\tX86_TUNE_VECTORIZE_DOUBLE.\n\t(ix86_units_per_simd_word): New.\n\n\t* config/i386/i386.h (ix86_tune_indices): Add\n\tX86_TUNE_VECTORIZE_DOUBLE.\n\t(TARGET_VECTORIZE_DOUBLE): New.\n\t(UNITS_PER_SIMD_WORD): Defined with ix86_units_per_simd_word.\n\ngcc/testsuite/\n\n2010-09-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/fma4-256-vector.c: Add -mtune=generic.\n\t* gcc.target/i386/fma4-vector.c: Likewise.\n\t* gcc.target/i386/vectorize2.c: Likewise.\n\t* gcc.target/i386/vectorize4.c: Likewise.\n\t* gcc.target/i386/vectorize5.c: Likewise.\n\t* gcc.target/i386/vectorize6.c: Likewise.\n\t* gcc.target/i386/vectorize8.c: Likewise.\n\n\t* gcc.target/i386/vect-double-1.c: New.\n\t* gcc.target/i386/vect-double-1a.c: Likewise.\n\t* gcc.target/i386/vect-double-2.c: Likewise.\n\t* gcc.target/i386/vect-double-2a.c: Likewise.\n\n\t* lib/target-supports.exp (check_effective_target_vect_double):\n\tSet et_vect_double_saved to 0 when tuning for Atom.\n\nFrom-SVN: r164255", "tree": {"sha": "ba0a67ac262f8b5f817fd2865c8238c87fb58b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0a67ac262f8b5f817fd2865c8238c87fb58b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14694348f12df7fbfa71463bd46bbf387b40aebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14694348f12df7fbfa71463bd46bbf387b40aebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14694348f12df7fbfa71463bd46bbf387b40aebc"}], "stats": {"total": 184, "additions": 166, "deletions": 18}, "files": [{"sha": "6bd3b743ae338584f21ab573f437619c3b37f91d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,3 +1,16 @@\n+2010-09-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386-protos.h (ix86_units_per_simd_word): New.\n+\n+\t* config/i386/i386.c (initial_ix86_tune_features): Add\n+\tX86_TUNE_VECTORIZE_DOUBLE.\n+\t(ix86_units_per_simd_word): New.\n+\n+\t* config/i386/i386.h (ix86_tune_indices): Add\n+\tX86_TUNE_VECTORIZE_DOUBLE.\n+\t(TARGET_VECTORIZE_DOUBLE): New.\n+\t(UNITS_PER_SIMD_WORD): Defined with ix86_units_per_simd_word.\n+\n 2010-09-13  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* tree-ssa-ter.c (temp_expr_table_d): Add call_cnt field."}, {"sha": "c4c61f700e7a2e4680fa51afca319494856aba8b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -50,6 +50,7 @@ extern bool x86_extended_QIreg_mentioned_p (rtx);\n extern bool x86_extended_reg_mentioned_p (rtx);\n extern bool x86_maybe_negate_const_int (rtx *, enum machine_mode);\n extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);\n+extern unsigned int ix86_units_per_simd_word (enum machine_mode);\n \n extern int avx_vpermilp_parallel (rtx par, enum machine_mode mode);\n extern int avx_vperm2f128_parallel (rtx par, enum machine_mode mode);"}, {"sha": "a1bc2055af19a761fcc801deb286b4c22f8b6cb1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1627,6 +1627,10 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n      will impact LEA instruction selection. */\n   m_ATOM,\n+\n+  /* X86_TUNE_VECTORIZE_DOUBLE: Enable double precision vector\n+     instructions.  */\n+  ~m_ATOM,\n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -32334,6 +32338,28 @@ has_dispatch (rtx insn, int action)\n   return false;\n }\n \n+/* ??? No autovectorization into MMX or 3DNOW until we can reliably\n+   place emms and femms instructions.  */\n+\n+unsigned int\n+ix86_units_per_simd_word (enum machine_mode mode)\n+{\n+  /* Disable double precision vectorizer if needed.  */\n+  if (mode == DFmode && !TARGET_VECTORIZE_DOUBLE)\n+    return UNITS_PER_WORD;\n+\n+#if 0\n+  /*  FIXME: AVX has 32byte floating point vector operations and 16byte\n+      integer vector operations.  But vectorizer doesn't support\n+      different sizes for integer and floating point vectors.  We limit\n+      vector size to 16byte.  */\n+  if (TARGET_AVX)\n+    return (mode == DFmode || mode == SFmode) ? 32 : 16;\n+  else\n+#endif\n+    return TARGET_SSE ? 16 : UNITS_PER_WORD;\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY ix86_return_in_memory"}, {"sha": "6fc2249946c11a9d9ce36fce3bd33e57fc532b41", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -312,6 +312,7 @@ enum ix86_tune_indices {\n   X86_TUNE_USE_VECTOR_CONVERTS,\n   X86_TUNE_FUSE_CMP_AND_BRANCH,\n   X86_TUNE_OPT_AGU,\n+  X86_TUNE_VECTORIZE_DOUBLE,\n \n   X86_TUNE_LAST\n };\n@@ -404,6 +405,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_FUSE_CMP_AND_BRANCH \\\n \tix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH]\n #define TARGET_OPT_AGU ix86_tune_features[X86_TUNE_OPT_AGU]\n+#define TARGET_VECTORIZE_DOUBLE \\\n+\tix86_tune_features[X86_TUNE_VECTORIZE_DOUBLE]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {\n@@ -1030,15 +1033,7 @@ enum target_cpu_default\n    || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n    || (MODE) == V4HImode || (MODE) == V8QImode)\n \n-/* ??? No autovectorization into MMX or 3DNOW until we can reliably\n-   place emms and femms instructions.\n-   FIXME: AVX has 32byte floating point vector operations and 16byte\n-   integer vector operations.  But vectorizer doesn't support\n-   different sizes for integer and floating point vectors.  We limit\n-   vector size to 16byte.  */\n-#define UNITS_PER_SIMD_WORD(MODE)\t\t\t\t\t\\\n-  (TARGET_AVX ? (((MODE) == DFmode || (MODE) == SFmode) ? 16 : 16)\t\\\n-   \t      : (TARGET_SSE ? 16 : UNITS_PER_WORD))\n+#define UNITS_PER_SIMD_WORD(MODE) ix86_units_per_simd_word (MODE)\n \n #define VALID_DFP_MODE_P(MODE) \\\n   ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)"}, {"sha": "6fe4aca41bb4065fb4aa08942097b72e2b2e9d7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,3 +1,21 @@\n+2010-09-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/fma4-256-vector.c: Add -mtune=generic.\n+\t* gcc.target/i386/fma4-vector.c: Likewise.\n+\t* gcc.target/i386/vectorize2.c: Likewise.\n+\t* gcc.target/i386/vectorize4.c: Likewise.\n+\t* gcc.target/i386/vectorize5.c: Likewise.\n+\t* gcc.target/i386/vectorize6.c: Likewise.\n+\t* gcc.target/i386/vectorize8.c: Likewise.\n+\n+\t* gcc.target/i386/vect-double-1.c: New.\n+\t* gcc.target/i386/vect-double-1a.c: Likewise.\n+\t* gcc.target/i386/vect-double-2.c: Likewise.\n+\t* gcc.target/i386/vect-double-2a.c: Likewise.\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_double):\n+\tSet et_vect_double_saved to 0 when tuning for Atom.\n+\n 2010-09-13  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/torture/pr23821.c: Drop static keyword."}, {"sha": "1bd2ce4ddf20b7e4e19b62e7f4917a36621d3548", "filename": "gcc/testsuite/gcc.target/i386/fma4-256-vector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-vector.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -mfma4 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -mfma4 -ftree-vectorize -mtune=generic\" } */\n \n extern void exit (int);\n "}, {"sha": "da12780d777901bc512ed79261a3fc5264805bb9", "filename": "gcc/testsuite/gcc.target/i386/fma4-vector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-vector.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -mfma4 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -mfma4 -ftree-vectorize -mtune=generic\" } */\n \n extern void exit (int);\n "}, {"sha": "87e5fe94b250b4d29b7419ea6a7d548f35b9f50d", "filename": "gcc/testsuite/gcc.target/i386/vect-double-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -march=core2 -fdump-tree-vect-stats\" } */\n+\n+extern void abort (void);\n+\n+#ifndef STATIC\n+#define STATIC\n+#endif\n+\n+#define N 16\n+ \n+double cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+double ca[N];\n+\n+STATIC void\n+__attribute__ ((noinline))\n+sse2_test (void)\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+        abort ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a62c9390368aeaec3fdb9057071e4d7a5b57dd5c", "filename": "gcc/testsuite/gcc.target/i386/vect-double-1a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1a.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -msse2 -mtune=core2\" } */\n+\n+#define STATIC static\n+\n+#include \"vect-double-1.c\"\n+#include \"sse2-check.h\""}, {"sha": "a76dcb46c9ab172d38dfbfb61d5d8ca0501decad", "filename": "gcc/testsuite/gcc.target/i386/vect-double-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -msse2 -mtune=atom -fdump-tree-vect-stats\" } */\n+\n+extern void abort (void);\n+\n+#ifndef STATIC\n+#define STATIC\n+#endif\n+\n+#define N 16\n+ \n+double cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+double ca[N];\n+\n+STATIC void\n+__attribute__ ((noinline))\n+sse2_test (void)\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+        abort ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vectorized 1 loops\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "94f8062754d2d13fb1cab44d0b4cc6e4b07c92c9", "filename": "gcc/testsuite/gcc.target/i386/vect-double-2a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2a.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -msse2 -mtune=atom\" } */\n+\n+#define STATIC static\n+\n+#include \"vect-double-2.c\"\n+#include \"sse2-check.h\""}, {"sha": "427e2d401c05e4cb290a805754f1cca199791359", "filename": "gcc/testsuite/gcc.target/i386/vectorize2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize2.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 -mfpmath=sse\" } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 -mfpmath=sse -mtune=generic\" } */\n \n double a[256];\n int b[256];"}, {"sha": "557d0a26ef1ead781fd05b4cfb7d58bc1b667120", "filename": "gcc/testsuite/gcc.target/i386/vectorize4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize4.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 --param ggc-min-expand=0 --param ggc-min-heapsize=0\" } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2 -mtune=generic --param ggc-min-expand=0 --param ggc-min-heapsize=0\" } */\n /* This test, tests two thing, we vectorize square root and also we don't crash due to a GC issue.  */\n \n "}, {"sha": "04f044f621dadbbb6937596529abc2bc127f8613", "filename": "gcc/testsuite/gcc.target/i386/vectorize5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -ftree-vectorize -mveclibabi=acml -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -mveclibabi=acml -ffast-math -mtune=generic\" } */\n \n double x[256];\n "}, {"sha": "d299a1551bf9801045eac32148bf12dd41514715", "filename": "gcc/testsuite/gcc.target/i386/vectorize6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize6.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2 -ftree-vectorize -mveclibabi=svml -ffast-math\" } */\n+/* { dg-options \"-O2 -msse2 -ftree-vectorize -mveclibabi=svml -ffast-math -mtune=generic\" } */\n \n double x[256];\n "}, {"sha": "a194bb088f1506e8a6fbfc762aef788a2076382f", "filename": "gcc/testsuite/gcc.target/i386/vectorize8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize8.c?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2 -mtune=generic\" } */\n \n unsigned int a[256];\n double b[256];"}, {"sha": "de9f21e32e5a22557601729aafd4892d39903e2f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e72eba8584e4a8bb548e120a2ebb6bbdec8a91a1", "patch": "@@ -2309,8 +2309,17 @@ proc check_effective_target_vect_double { } {\n     } else {\n \tset et_vect_double_saved 0\n \tif { [istarget i?86-*-*]\n-\t      || [istarget x86_64-*-*] \n-\t      || [istarget spu-*-*] } {\n+\t      || [istarget x86_64-*-*] } {\n+\t   if { [check_no_compiler_messages vect_double assembly {\n+\t\t #ifdef __tune_atom__\n+\t\t # error No double vectorizer support.\n+\t\t #endif\n+\t\t}] } {\n+\t\tset et_vect_double_saved 1\n+\t    } else {\n+\t\tset et_vect_double_saved 0\n+\t    }\n+\t} elseif { [istarget spu-*-*] } {\n \t   set et_vect_double_saved 1\n \t}\n     }"}]}