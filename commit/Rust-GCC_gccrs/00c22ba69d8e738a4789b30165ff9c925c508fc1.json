{"sha": "00c22ba69d8e738a4789b30165ff9c925c508fc1", "node_id": "C_kwDOANBUbNoAKDAwYzIyYmE2OWQ4ZTczOGE0Nzg5YjMwMTY1ZmY5YzkyNWM1MDhmYzE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:52Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:52Z"}, "message": "aarch64: Add \"V\" to aarch64-arches.def names\n\nThis patch completes the renaming of architecture-level related\nthings by adding \"V\" to the name of the architecture in\naarch64-arches.def.  Since the \"V\" is predictable, we can easily\ndrop it when we don't need it (as when matching /proc/cpuinfo).\n\nHaving a valid C identifier is necessary for later patches.\n\ngcc/\n\t* config/aarch64/aarch64-arches.def: Add a leading \"V\" to the\n\tARCH_IDENT fields.\n\t* config/aarch64/aarch64-cores.def: Update accordingly.\n\t* common/config/aarch64/aarch64-common.cc (all_cores): Likewise.\n\t* config/aarch64/aarch64.cc (all_cores): Likewise.\n\t* config/aarch64/driver-aarch64.cc (aarch64_arches): Skip the\n\tleading \"V\".", "tree": {"sha": "7d152c147725d50566b7cc89141a0672002afd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d152c147725d50566b7cc89141a0672002afd42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00c22ba69d8e738a4789b30165ff9c925c508fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c22ba69d8e738a4789b30165ff9c925c508fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c22ba69d8e738a4789b30165ff9c925c508fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c22ba69d8e738a4789b30165ff9c925c508fc1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f833d1900176509e16b6f5563cfe58508fef5d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f833d1900176509e16b6f5563cfe58508fef5d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f833d1900176509e16b6f5563cfe58508fef5d2"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "063f84b3c223c4b9eec0dcc612c8e976c5307b23", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=00c22ba69d8e738a4789b30165ff9c925c508fc1", "patch": "@@ -177,7 +177,7 @@ static const struct processor_name_to_arch all_cores[] =\n #define AARCH64_CORE(NAME, X, IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   {NAME, AARCH64_ARCH_##ARCH_IDENT, FLAGS},\n #include \"config/aarch64/aarch64-cores.def\"\n-  {\"generic\", AARCH64_ARCH_8A, AARCH64_FL_FOR_V8A},\n+  {\"generic\", AARCH64_ARCH_V8A, AARCH64_FL_FOR_V8A},\n   {\"\", aarch64_no_arch, 0}\n };\n "}, {"sha": "e422028224b1fc57e9cd589b85503810e999c63e", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=00c22ba69d8e738a4789b30165ff9c925c508fc1", "patch": "@@ -30,19 +30,19 @@\n    Due to the assumptions about the positions of these fields in config.gcc,\n    the NAME should be kept as the first argument and FLAGS as the last.  */\n \n-AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8A,\t8,  AARCH64_FL_FOR_V8A)\n-AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8_1A,\t8,  AARCH64_FL_FOR_V8_1A)\n-AARCH64_ARCH(\"armv8.2-a\",     generic,\t     8_2A,\t8,  AARCH64_FL_FOR_V8_2A)\n-AARCH64_ARCH(\"armv8.3-a\",     generic,\t     8_3A,\t8,  AARCH64_FL_FOR_V8_3A)\n-AARCH64_ARCH(\"armv8.4-a\",     generic,\t     8_4A,\t8,  AARCH64_FL_FOR_V8_4A)\n-AARCH64_ARCH(\"armv8.5-a\",     generic,\t     8_5A,\t8,  AARCH64_FL_FOR_V8_5A)\n-AARCH64_ARCH(\"armv8.6-a\",     generic,\t     8_6A,\t8,  AARCH64_FL_FOR_V8_6A)\n-AARCH64_ARCH(\"armv8.7-a\",     generic,       8_7A,      8,  AARCH64_FL_FOR_V8_7A)\n-AARCH64_ARCH(\"armv8.8-a\",     generic,       8_8A,      8,  AARCH64_FL_FOR_V8_8A)\n-AARCH64_ARCH(\"armv8-r\",       generic,\t     8R  ,\t8,  AARCH64_FL_FOR_V8R)\n-AARCH64_ARCH(\"armv9-a\",       generic,\t     9A  ,\t9,  AARCH64_FL_FOR_V9A)\n-AARCH64_ARCH(\"armv9.1-a\",     generic,       9_1A,      9,  AARCH64_FL_FOR_V9_1A)\n-AARCH64_ARCH(\"armv9.2-a\",     generic,       9_2A,      9,  AARCH64_FL_FOR_V9_2A)\n-AARCH64_ARCH(\"armv9.3-a\",     generic,       9_3A,      9,  AARCH64_FL_FOR_V9_3A)\n+AARCH64_ARCH(\"armv8-a\",\t      generic,\t     V8A,\t8,  AARCH64_FL_FOR_V8A)\n+AARCH64_ARCH(\"armv8.1-a\",     generic,\t     V8_1A,\t8,  AARCH64_FL_FOR_V8_1A)\n+AARCH64_ARCH(\"armv8.2-a\",     generic,\t     V8_2A,\t8,  AARCH64_FL_FOR_V8_2A)\n+AARCH64_ARCH(\"armv8.3-a\",     generic,\t     V8_3A,\t8,  AARCH64_FL_FOR_V8_3A)\n+AARCH64_ARCH(\"armv8.4-a\",     generic,\t     V8_4A,\t8,  AARCH64_FL_FOR_V8_4A)\n+AARCH64_ARCH(\"armv8.5-a\",     generic,\t     V8_5A,\t8,  AARCH64_FL_FOR_V8_5A)\n+AARCH64_ARCH(\"armv8.6-a\",     generic,\t     V8_6A,\t8,  AARCH64_FL_FOR_V8_6A)\n+AARCH64_ARCH(\"armv8.7-a\",     generic,       V8_7A,     8,  AARCH64_FL_FOR_V8_7A)\n+AARCH64_ARCH(\"armv8.8-a\",     generic,       V8_8A,     8,  AARCH64_FL_FOR_V8_8A)\n+AARCH64_ARCH(\"armv8-r\",       generic,\t     V8R  ,\t8,  AARCH64_FL_FOR_V8R)\n+AARCH64_ARCH(\"armv9-a\",       generic,\t     V9A  ,\t9,  AARCH64_FL_FOR_V9A)\n+AARCH64_ARCH(\"armv9.1-a\",     generic,       V9_1A,     9,  AARCH64_FL_FOR_V9_1A)\n+AARCH64_ARCH(\"armv9.2-a\",     generic,       V9_2A,     9,  AARCH64_FL_FOR_V9_2A)\n+AARCH64_ARCH(\"armv9.3-a\",     generic,       V9_3A,     9,  AARCH64_FL_FOR_V9_3A)\n \n #undef AARCH64_ARCH"}, {"sha": "f4c2f4ea4af71616baeb49eb40d35f8459bf24ec", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=00c22ba69d8e738a4789b30165ff9c925c508fc1", "patch": "@@ -46,132 +46,132 @@\n /* ARMv8-A Architecture Processors.  */\n \n /* ARM ('A') cores. */\n-AARCH64_CORE(\"cortex-a34\",  cortexa34, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa35, 0x41, 0xd02, -1)\n-AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa35, 0x41, 0xd04, -1)\n-AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa53, 0x41, 0xd03, -1)\n-AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa57, 0x41, 0xd07, -1)\n-AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa72, 0x41, 0xd08, -1)\n-AARCH64_CORE(\"cortex-a73\",  cortexa73, cortexa57, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, 0xd09, -1)\n+AARCH64_CORE(\"cortex-a34\",  cortexa34, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa35, 0x41, 0xd02, -1)\n+AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa35, 0x41, 0xd04, -1)\n+AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa53, 0x41, 0xd03, -1)\n+AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa57, 0x41, 0xd07, -1)\n+AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa72, 0x41, 0xd08, -1)\n+AARCH64_CORE(\"cortex-a73\",  cortexa73, cortexa57, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, 0xd09, -1)\n \n /* Cavium ('C') cores. */\n-AARCH64_CORE(\"thunderx\",      thunderx,      thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a0, -1)\n+AARCH64_CORE(\"thunderx\",      thunderx,      thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a0, -1)\n /* Do not swap around \"thunderxt88p1\" and \"thunderxt88\",\n    this order is required to handle variant correctly. */\n-AARCH64_CORE(\"thunderxt88p1\", thunderxt88p1, thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO,\tthunderxt88,  0x43, 0x0a1, 0)\n-AARCH64_CORE(\"thunderxt88\",   thunderxt88,   thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderxt88,  0x43, 0x0a1, -1)\n+AARCH64_CORE(\"thunderxt88p1\", thunderxt88p1, thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO,\tthunderxt88,  0x43, 0x0a1, 0)\n+AARCH64_CORE(\"thunderxt88\",   thunderxt88,   thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderxt88,  0x43, 0x0a1, -1)\n \n /* OcteonTX is the official name for T81/T83. */\n-AARCH64_CORE(\"octeontx\",      octeontx,      thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a0, -1)\n-AARCH64_CORE(\"octeontx81\",    octeontxt81,   thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a2, -1)\n-AARCH64_CORE(\"octeontx83\",    octeontxt83,   thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a3, -1)\n+AARCH64_CORE(\"octeontx\",      octeontx,      thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a0, -1)\n+AARCH64_CORE(\"octeontx81\",    octeontxt81,   thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a2, -1)\n+AARCH64_CORE(\"octeontx83\",    octeontxt83,   thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a3, -1)\n \n-AARCH64_CORE(\"thunderxt81\",   thunderxt81,   thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a2, -1)\n-AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a3, -1)\n+AARCH64_CORE(\"thunderxt81\",   thunderxt81,   thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a2, -1)\n+AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a3, -1)\n \n /* Ampere Computing ('\\xC0') cores. */\n-AARCH64_CORE(\"ampere1\", ampere1, cortexa57, 8_6A, AARCH64_FL_FOR_V8_6A, ampere1, 0xC0, 0xac3, -1)\n+AARCH64_CORE(\"ampere1\", ampere1, cortexa57, V8_6A, AARCH64_FL_FOR_V8_6A, ampere1, 0xC0, 0xac3, -1)\n /* Do not swap around \"emag\" and \"xgene1\",\n    this order is required to handle variant correctly. */\n-AARCH64_CORE(\"emag\",        emag,      xgene1,    8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, emag, 0x50, 0x000, 3)\n+AARCH64_CORE(\"emag\",        emag,      xgene1,    V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, emag, 0x50, 0x000, 3)\n \n /* APM ('P') cores. */\n-AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_V8A, xgene1, 0x50, 0x000, -1)\n+AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    V8A,  AARCH64_FL_FOR_V8A, xgene1, 0x50, 0x000, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"falkor\",      falkor,    falkor,    8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n-AARCH64_CORE(\"qdf24xx\",     qdf24xx,   falkor,    8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n+AARCH64_CORE(\"falkor\",      falkor,    falkor,    V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n+AARCH64_CORE(\"qdf24xx\",     qdf24xx,   falkor,    V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n \n /* Samsung ('S') cores. */\n-AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  0x53, 0x001, -1)\n+AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  0x53, 0x001, -1)\n \n /* HXT ('h') cores. */\n-AARCH64_CORE(\"phecda\",      phecda,    falkor,    8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x68, 0x000, -1)\n+AARCH64_CORE(\"phecda\",      phecda,    falkor,    V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x68, 0x000, -1)\n \n /* ARMv8.1-A Architecture Processors.  */\n \n /* Broadcom ('B') cores. */\n-AARCH64_CORE(\"thunderx2t99p1\",  thunderx2t99p1, thunderx2t99, 8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x42, 0x516, -1)\n-AARCH64_CORE(\"vulcan\",  vulcan, thunderx2t99, 8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x42, 0x516, -1)\n+AARCH64_CORE(\"thunderx2t99p1\",  thunderx2t99p1, thunderx2t99, V8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x42, 0x516, -1)\n+AARCH64_CORE(\"vulcan\",  vulcan, thunderx2t99, V8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x42, 0x516, -1)\n \n /* Cavium ('C') cores. */\n-AARCH64_CORE(\"thunderx2t99\",  thunderx2t99,  thunderx2t99, 8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x43, 0x0af, -1)\n+AARCH64_CORE(\"thunderx2t99\",  thunderx2t99,  thunderx2t99, V8_1A,  AARCH64_FL_FOR_V8_1A | AARCH64_FL_CRYPTO, thunderx2t99, 0x43, 0x0af, -1)\n \n /* ARMv8.2-A Architecture Processors.  */\n \n /* ARM ('A') cores. */\n-AARCH64_CORE(\"cortex-a55\",  cortexa55, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa53, 0x41, 0xd05, -1)\n-AARCH64_CORE(\"cortex-a75\",  cortexa75, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa73, 0x41, 0xd0a, -1)\n-AARCH64_CORE(\"cortex-a76\",  cortexa76, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, neoversen1, 0x41, 0xd0b, -1)\n-AARCH64_CORE(\"cortex-a76ae\",  cortexa76ae, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, neoversen1, 0x41, 0xd0e, -1)\n-AARCH64_CORE(\"cortex-a77\",  cortexa77, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, neoversen1, 0x41, 0xd0d, -1)\n-AARCH64_CORE(\"cortex-a78\",  cortexa78, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd41, -1)\n-AARCH64_CORE(\"cortex-a78ae\",  cortexa78ae, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd42, -1)\n-AARCH64_CORE(\"cortex-a78c\",  cortexa78c, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE | AARCH64_FL_FLAGM | AARCH64_FL_PAUTH, neoversen1, 0x41, 0xd4b, -1)\n-AARCH64_CORE(\"cortex-a65\",  cortexa65, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd06, -1)\n-AARCH64_CORE(\"cortex-a65ae\",  cortexa65ae, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd43, -1)\n-AARCH64_CORE(\"cortex-x1\",  cortexx1, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd44, -1)\n-AARCH64_CORE(\"ares\",  ares, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n-AARCH64_CORE(\"neoverse-n1\",  neoversen1, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n-AARCH64_CORE(\"neoverse-e1\",  neoversee1, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd4a, -1)\n+AARCH64_CORE(\"cortex-a55\",  cortexa55, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa53, 0x41, 0xd05, -1)\n+AARCH64_CORE(\"cortex-a75\",  cortexa75, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa73, 0x41, 0xd0a, -1)\n+AARCH64_CORE(\"cortex-a76\",  cortexa76, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, neoversen1, 0x41, 0xd0b, -1)\n+AARCH64_CORE(\"cortex-a76ae\",  cortexa76ae, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, neoversen1, 0x41, 0xd0e, -1)\n+AARCH64_CORE(\"cortex-a77\",  cortexa77, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, neoversen1, 0x41, 0xd0d, -1)\n+AARCH64_CORE(\"cortex-a78\",  cortexa78, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd41, -1)\n+AARCH64_CORE(\"cortex-a78ae\",  cortexa78ae, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd42, -1)\n+AARCH64_CORE(\"cortex-a78c\",  cortexa78c, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE | AARCH64_FL_FLAGM | AARCH64_FL_PAUTH, neoversen1, 0x41, 0xd4b, -1)\n+AARCH64_CORE(\"cortex-a65\",  cortexa65, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd06, -1)\n+AARCH64_CORE(\"cortex-a65ae\",  cortexa65ae, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd43, -1)\n+AARCH64_CORE(\"cortex-x1\",  cortexx1, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd44, -1)\n+AARCH64_CORE(\"ares\",  ares, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n+AARCH64_CORE(\"neoverse-n1\",  neoversen1, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_PROFILE, neoversen1, 0x41, 0xd0c, -1)\n+AARCH64_CORE(\"neoverse-e1\",  neoversee1, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa73, 0x41, 0xd4a, -1)\n \n /* Cavium ('C') cores. */\n-AARCH64_CORE(\"octeontx2\",      octeontx2,      cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b0, -1)\n-AARCH64_CORE(\"octeontx2t98\",   octeontx2t98,   cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b1, -1)\n-AARCH64_CORE(\"octeontx2t96\",   octeontx2t96,   cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b2, -1)\n+AARCH64_CORE(\"octeontx2\",      octeontx2,      cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b0, -1)\n+AARCH64_CORE(\"octeontx2t98\",   octeontx2t98,   cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b1, -1)\n+AARCH64_CORE(\"octeontx2t96\",   octeontx2t96,   cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b2, -1)\n /* Note OcteonTX2 T93 is an alias to OcteonTX2 T96. */\n-AARCH64_CORE(\"octeontx2t93\",   octeontx2t93,   cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b2, -1)\n-AARCH64_CORE(\"octeontx2f95\",   octeontx2f95,   cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b3, -1)\n-AARCH64_CORE(\"octeontx2f95n\",  octeontx2f95n,  cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b4, -1)\n-AARCH64_CORE(\"octeontx2f95mm\", octeontx2f95mm, cortexa57, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b5, -1)\n+AARCH64_CORE(\"octeontx2t93\",   octeontx2t93,   cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b2, -1)\n+AARCH64_CORE(\"octeontx2f95\",   octeontx2f95,   cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b3, -1)\n+AARCH64_CORE(\"octeontx2f95n\",  octeontx2f95n,  cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b4, -1)\n+AARCH64_CORE(\"octeontx2f95mm\", octeontx2f95mm, cortexa57, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b5, -1)\n \n /* Fujitsu ('F') cores. */\n-AARCH64_CORE(\"a64fx\", a64fx, a64fx, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_SVE, a64fx, 0x46, 0x001, -1)\n+AARCH64_CORE(\"a64fx\", a64fx, a64fx, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_SVE, a64fx, 0x46, 0x001, -1)\n \n /* HiSilicon ('H') cores. */\n-AARCH64_CORE(\"tsv110\",  tsv110, tsv110, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n+AARCH64_CORE(\"tsv110\",  tsv110, tsv110, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n \n /* ARMv8.3-A Architecture Processors.  */\n \n /* Marvell cores (TX3). */\n-AARCH64_CORE(\"thunderx3t110\",  thunderx3t110,  thunderx3t110, 8_3A,  AARCH64_FL_FOR_V8_3A | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC | AARCH64_FL_SM4 | AARCH64_FL_SHA3 | AARCH64_FL_F16FML | AARCH64_FL_RCPC8_4, thunderx3t110, 0x43, 0x0b8, 0x0a)\n+AARCH64_CORE(\"thunderx3t110\",  thunderx3t110,  thunderx3t110, V8_3A,  AARCH64_FL_FOR_V8_3A | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC | AARCH64_FL_SM4 | AARCH64_FL_SHA3 | AARCH64_FL_F16FML | AARCH64_FL_RCPC8_4, thunderx3t110, 0x43, 0x0b8, 0x0a)\n \n /* ARMv8.4-A Architecture Processors.  */\n \n /* Arm ('A') cores.  */\n-AARCH64_CORE(\"zeus\", zeus, cortexa57, 8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoversev1, 0x41, 0xd40, -1)\n-AARCH64_CORE(\"neoverse-v1\", neoversev1, cortexa57, 8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoversev1, 0x41, 0xd40, -1)\n-AARCH64_CORE(\"neoverse-512tvb\", neoverse512tvb, cortexa57, 8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoverse512tvb, INVALID_IMP, INVALID_CORE, -1)\n+AARCH64_CORE(\"zeus\", zeus, cortexa57, V8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoversev1, 0x41, 0xd40, -1)\n+AARCH64_CORE(\"neoverse-v1\", neoversev1, cortexa57, V8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoversev1, 0x41, 0xd40, -1)\n+AARCH64_CORE(\"neoverse-512tvb\", neoverse512tvb, cortexa57, V8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_SVE | AARCH64_FL_RCPC | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_F16 | AARCH64_FL_PROFILE | AARCH64_FL_SSBS | AARCH64_FL_RNG, neoverse512tvb, INVALID_IMP, INVALID_CORE, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"saphira\",     saphira,    saphira,    8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC, saphira,   0x51, 0xC01, -1)\n+AARCH64_CORE(\"saphira\",     saphira,    saphira,    V8_4A,  AARCH64_FL_FOR_V8_4A | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC, saphira,   0x51, 0xC01, -1)\n \n /* ARMv8-A big.LITTLE implementations.  */\n \n-AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa57, 0x41, AARCH64_BIG_LITTLE (0xd07, 0xd03), -1)\n-AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa72, 0x41, AARCH64_BIG_LITTLE (0xd08, 0xd03), -1)\n-AARCH64_CORE(\"cortex-a73.cortex-a35\",  cortexa73cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd04), -1)\n-AARCH64_CORE(\"cortex-a73.cortex-a53\",  cortexa73cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd03), -1)\n+AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa57, 0x41, AARCH64_BIG_LITTLE (0xd07, 0xd03), -1)\n+AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa72, 0x41, AARCH64_BIG_LITTLE (0xd08, 0xd03), -1)\n+AARCH64_CORE(\"cortex-a73.cortex-a35\",  cortexa73cortexa35, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd04), -1)\n+AARCH64_CORE(\"cortex-a73.cortex-a53\",  cortexa73cortexa53, cortexa53, V8A,  AARCH64_FL_FOR_V8A | AARCH64_FL_CRC, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd09, 0xd03), -1)\n \n /* ARM DynamIQ big.LITTLE configurations.  */\n \n-AARCH64_CORE(\"cortex-a75.cortex-a55\",  cortexa75cortexa55, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd0a, 0xd05), -1)\n-AARCH64_CORE(\"cortex-a76.cortex-a55\",  cortexa76cortexa55, cortexa53, 8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, neoversen1, 0x41, AARCH64_BIG_LITTLE (0xd0b, 0xd05), -1)\n+AARCH64_CORE(\"cortex-a75.cortex-a55\",  cortexa75cortexa55, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, cortexa73, 0x41, AARCH64_BIG_LITTLE (0xd0a, 0xd05), -1)\n+AARCH64_CORE(\"cortex-a76.cortex-a55\",  cortexa76cortexa55, cortexa53, V8_2A,  AARCH64_FL_FOR_V8_2A | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD, neoversen1, 0x41, AARCH64_BIG_LITTLE (0xd0b, 0xd05), -1)\n \n /* Armv8-R Architecture Processors.  */\n-AARCH64_CORE(\"cortex-r82\", cortexr82, cortexa53, 8R, AARCH64_FL_FOR_V8R, cortexa53, 0x41, 0xd15, -1)\n+AARCH64_CORE(\"cortex-r82\", cortexr82, cortexa53, V8R, AARCH64_FL_FOR_V8R, cortexa53, 0x41, 0xd15, -1)\n \n /* Armv9.0-A Architecture Processors.  */\n \n /* Arm ('A') cores. */\n-AARCH64_CORE(\"cortex-a510\",  cortexa510, cortexa55, 9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, cortexa53, 0x41, 0xd46, -1)\n+AARCH64_CORE(\"cortex-a510\",  cortexa510, cortexa55, V9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, cortexa53, 0x41, 0xd46, -1)\n \n-AARCH64_CORE(\"cortex-a710\",  cortexa710, cortexa57, 9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, neoversen2, 0x41, 0xd47, -1)\n+AARCH64_CORE(\"cortex-a710\",  cortexa710, cortexa57, V9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, neoversen2, 0x41, 0xd47, -1)\n \n-AARCH64_CORE(\"cortex-x2\",  cortexx2, cortexa57, 9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, neoversen2, 0x41, 0xd48, -1)\n+AARCH64_CORE(\"cortex-x2\",  cortexx2, cortexa57, V9A,  AARCH64_FL_FOR_V9A | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_MEMTAG | AARCH64_FL_I8MM | AARCH64_FL_BF16, neoversen2, 0x41, 0xd48, -1)\n \n-AARCH64_CORE(\"neoverse-n2\", neoversen2, cortexa57, 9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversen2, 0x41, 0xd49, -1)\n+AARCH64_CORE(\"neoverse-n2\", neoversen2, cortexa57, V9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversen2, 0x41, 0xd49, -1)\n \n-AARCH64_CORE(\"demeter\", demeter, cortexa57, 9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n-AARCH64_CORE(\"neoverse-v2\", neoversev2, cortexa57, 9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n+AARCH64_CORE(\"demeter\", demeter, cortexa57, V9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n+AARCH64_CORE(\"neoverse-v2\", neoversev2, cortexa57, V9A, AARCH64_FL_FOR_V9A | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n \n #undef AARCH64_CORE"}, {"sha": "cacee72d2bb51708a239c45be030fcea5db2eb52", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=00c22ba69d8e738a4789b30165ff9c925c508fc1", "patch": "@@ -2694,7 +2694,7 @@ static const struct processor all_cores[] =\n   {NAME, IDENT, SCHED, AARCH64_ARCH_##ARCH,\t\t\t\t\\\n   FLAGS, &COSTS##_tunings},\n #include \"aarch64-cores.def\"\n-  {\"generic\", generic, cortexa53, AARCH64_ARCH_8A,\n+  {\"generic\", generic, cortexa53, AARCH64_ARCH_V8A,\n     AARCH64_FL_FOR_V8A, &generic_tunings},\n   {NULL, aarch64_none, aarch64_none, aarch64_no_arch, 0, NULL}\n };"}, {"sha": "a9fa80fe815bad699c7cee36f11a6a5785bc1450", "filename": "gcc/config/aarch64/driver-aarch64.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c22ba69d8e738a4789b30165ff9c925c508fc1/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc?ref=00c22ba69d8e738a4789b30165ff9c925c508fc1", "patch": "@@ -78,8 +78,9 @@ struct aarch64_arch_driver_info\n   const uint64_t flags;\n };\n \n+/* Skip the leading \"V\" in the architecture name.  */\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n-  { #ARCH_IDENT, NAME, FLAGS },\n+  { #ARCH_IDENT + 1, NAME, FLAGS },\n \n static struct aarch64_arch_driver_info aarch64_arches[] =\n {"}]}