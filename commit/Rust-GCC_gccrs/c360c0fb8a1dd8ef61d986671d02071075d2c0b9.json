{"sha": "c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2MGMwZmI4YTFkZDhlZjYxZDk4NjY3MWQwMjA3MTA3NWQyYzBiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-29T21:03:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-29T21:03:09Z"}, "message": "re PR tree-optimization/51247 (ICE in set_value_range, at tree-vrp.c:417)\n\n\tPR tree-optimization/51247\n\t* tree-vrp.c (extract_range_from_assert): For signed 1-bit precision\n\ttypes instead of adding 1 subtract -1 and instead of subtracting 1\n\tadd -1 to avoid overflows.\n\n\t* gcc.c-torture/compile/pr51247.c: New test.\n\nFrom-SVN: r181818", "tree": {"sha": "5587e1b6f3b377f5fb72c7b42e04089e716e597a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5587e1b6f3b377f5fb72c7b42e04089e716e597a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "781c528f2efe11dd9235d9ff71092fde9ad19c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781c528f2efe11dd9235d9ff71092fde9ad19c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781c528f2efe11dd9235d9ff71092fde9ad19c14"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "3a802781fbc59d555978eb2dcbce052b04e5beab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "patch": "@@ -1,3 +1,10 @@\n+2011-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51247\n+\t* tree-vrp.c (extract_range_from_assert): For signed 1-bit precision\n+\ttypes instead of adding 1 subtract -1 and instead of subtracting 1\n+\tadd -1 to avoid overflows.\n+\n 2011-11-29  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR target/50123"}, {"sha": "3d695a220310557fb638813de7daf3ef38070635", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "patch": "@@ -1,3 +1,8 @@\n+2011-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51247\n+\t* gcc.c-torture/compile/pr51247.c: New test.\n+\n 2011-11-29  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR target/50123"}, {"sha": "16aa7f04b1aff1159105b9407d364bd6a89bc7d8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr51247.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51247.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51247.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51247.c?ref=c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/51247 */\n+\n+struct S { int s : 1; };\n+int a;\n+\n+void\n+foo (int x, int y)\n+{\n+  struct S s;\n+  s.s = !!y;\n+  while (1)\n+    {\n+      unsigned l = 94967295;\n+      a = x || (s.s &= l);\n+    }\n+}"}, {"sha": "5cbc25fcb1e035e748f4acc2daa2639048e12e51", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360c0fb8a1dd8ef61d986671d02071075d2c0b9/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c360c0fb8a1dd8ef61d986671d02071075d2c0b9", "patch": "@@ -1693,8 +1693,13 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t  /* For LT_EXPR, we create the range [MIN, MAX - 1].  */\n \t  if (cond_code == LT_EXPR)\n \t    {\n-\t      tree one = build_int_cst (TREE_TYPE (max), 1);\n-\t      max = fold_build2 (MINUS_EXPR, TREE_TYPE (max), max, one);\n+\t      if (TYPE_PRECISION (TREE_TYPE (max)) == 1\n+\t\t  && !TYPE_UNSIGNED (TREE_TYPE (max)))\n+\t\tmax = fold_build2 (PLUS_EXPR, TREE_TYPE (max), max,\n+\t\t\t\t   build_int_cst (TREE_TYPE (max), -1));\n+\t      else\n+\t\tmax = fold_build2 (MINUS_EXPR, TREE_TYPE (max), max,\n+\t\t\t\t   build_int_cst (TREE_TYPE (max), 1));\n \t      if (EXPR_P (max))\n \t\tTREE_NO_WARNING (max) = 1;\n \t    }\n@@ -1728,8 +1733,13 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t  /* For GT_EXPR, we create the range [MIN + 1, MAX].  */\n \t  if (cond_code == GT_EXPR)\n \t    {\n-\t      tree one = build_int_cst (TREE_TYPE (min), 1);\n-\t      min = fold_build2 (PLUS_EXPR, TREE_TYPE (min), min, one);\n+\t      if (TYPE_PRECISION (TREE_TYPE (min)) == 1\n+\t\t  && !TYPE_UNSIGNED (TREE_TYPE (min)))\n+\t\tmin = fold_build2 (MINUS_EXPR, TREE_TYPE (min), min,\n+\t\t\t\t   build_int_cst (TREE_TYPE (min), -1));\n+\t      else\n+\t\tmin = fold_build2 (PLUS_EXPR, TREE_TYPE (min), min,\n+\t\t\t\t   build_int_cst (TREE_TYPE (min), 1));\n \t      if (EXPR_P (min))\n \t\tTREE_NO_WARNING (min) = 1;\n \t    }\n@@ -1915,9 +1925,19 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t\t  min = positive_overflow_infinity (TREE_TYPE (var_vr->min));\n \t\t}\n \t      else if (!POINTER_TYPE_P (TREE_TYPE (var_vr->min)))\n-\t\tmin = fold_build2 (PLUS_EXPR, TREE_TYPE (var_vr->min),\n-\t\t\t\t   anti_max,\n-\t\t\t\t   build_int_cst (TREE_TYPE (var_vr->min), 1));\n+\t\t{\n+\t\t  if (TYPE_PRECISION (TREE_TYPE (var_vr->min)) == 1\n+\t\t      && !TYPE_UNSIGNED (TREE_TYPE (var_vr->min)))\n+\t\t    min = fold_build2 (MINUS_EXPR, TREE_TYPE (var_vr->min),\n+\t\t\t\t       anti_max,\n+\t\t\t\t       build_int_cst (TREE_TYPE (var_vr->min),\n+\t\t\t\t\t\t      -1));\n+\t\t  else\n+\t\t    min = fold_build2 (PLUS_EXPR, TREE_TYPE (var_vr->min),\n+\t\t\t\t       anti_max,\n+\t\t\t\t       build_int_cst (TREE_TYPE (var_vr->min),\n+\t\t\t\t\t\t      1));\n+\t\t}\n \t      else\n \t\tmin = fold_build_pointer_plus_hwi (anti_max, 1);\n \t      max = real_max;\n@@ -1942,9 +1962,19 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t\t  max = negative_overflow_infinity (TREE_TYPE (var_vr->min));\n \t\t}\n \t      else if (!POINTER_TYPE_P (TREE_TYPE (var_vr->min)))\n-\t\tmax = fold_build2 (MINUS_EXPR, TREE_TYPE (var_vr->min),\n-\t\t\t\t   anti_min,\n-\t\t\t\t   build_int_cst (TREE_TYPE (var_vr->min), 1));\n+\t\t{\n+\t\t  if (TYPE_PRECISION (TREE_TYPE (var_vr->min)) == 1\n+\t\t      && !TYPE_UNSIGNED (TREE_TYPE (var_vr->min)))\n+\t\t    max = fold_build2 (PLUS_EXPR, TREE_TYPE (var_vr->min),\n+\t\t\t\t       anti_min,\n+\t\t\t\t       build_int_cst (TREE_TYPE (var_vr->min),\n+\t\t\t\t\t\t      -1));\n+\t\t  else\n+\t\t    max = fold_build2 (MINUS_EXPR, TREE_TYPE (var_vr->min),\n+\t\t\t\t       anti_min,\n+\t\t\t\t       build_int_cst (TREE_TYPE (var_vr->min),\n+\t\t\t\t\t\t      1));\n+\t\t}\n \t      else\n \t\tmax = fold_build_pointer_plus_hwi (anti_min, -1);\n \t      min = real_min;"}]}