{"sha": "f89e844f9c589d1717248597641d25d81a4acb41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5ZTg0NGY5YzU4OWQxNzE3MjQ4NTk3NjQxZDI1ZDgxYTRhY2I0MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-17T16:03:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-27T16:27:49Z"}, "message": "analyzer: fix pattern-test-2.c (PR 93291)\n\nAmongst the inputs to the analyzer state machines that can lead to state\ntransitions are conditions on CFG edges, such as a test for a pointer\nbeing non-NULL.\n\nThese conditionals can be non-trivial to determine in the face of\noptimization.  For example, at -O2:\n\n  if (p == NULL || q == NULL)\n\nis optimized on some targets (e.g. x86_64) to a bitwise-or:\n\n  _1 = p_5(D) == 0B;\n  _2 = q_6(D) == 0B;\n  _3 = _1 | _2;\n  if (_3 != 0)\n    goto <bb 4>; [51.12%]\n  else\n    goto <bb 3>; [48.88%]\n\nbut on other targets (e.g. powerpc64le) as control flow:\n\n  if (p_2(D) == 0B)\n    goto <bb 5>; [18.09%]\n  else\n    goto <bb 3>; [81.91%]\n\n  <bb 3> [local count: 879501929]:\n  if (q_3(D) == 0B)\n    goto <bb 5>; [30.95%]\n  else\n    goto <bb 4>; [69.05%]\n\nregion_model::add_any_constraints_from_ssa_def_stmt attempts to walk\nSSA def chains to reconstruct the conditions that hold, so that\ne.g. in the above case of bitwise-or, the state machine for\n\"p\" can transition to the \"known-null\" state along the edge leading\nto bb 3.\n\nIn gcc.dg/analyzer/pattern-test-2.c I attempted to write test coverage\nfor this, but the test fails on those targets for which the || is\nexpressed via control flow.\n\nThis patch rewrites the test to make explicit use of bitwise-or, and\nadds coverage for bitwise-and for good measure.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93291\n\t* gcc.dg/analyzer/pattern-test-2.c: Remove include of stdlib.h.\n\t(test_2): Rewrite to explicitly perform a bitwise-or of two\n\tboolean conditions.\n\t(test_3): New function, to test bitwise-and.", "tree": {"sha": "90026e1007d6bf739de0e7949c3704225ca50a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90026e1007d6bf739de0e7949c3704225ca50a38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f89e844f9c589d1717248597641d25d81a4acb41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89e844f9c589d1717248597641d25d81a4acb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89e844f9c589d1717248597641d25d81a4acb41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89e844f9c589d1717248597641d25d81a4acb41/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a044dfb0934c3caea0886dbb497181e3aca660df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a044dfb0934c3caea0886dbb497181e3aca660df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a044dfb0934c3caea0886dbb497181e3aca660df"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "56acbd926adf026023c461a726bfb3c93ed4ce63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89e844f9c589d1717248597641d25d81a4acb41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89e844f9c589d1717248597641d25d81a4acb41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f89e844f9c589d1717248597641d25d81a4acb41", "patch": "@@ -1,3 +1,11 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93291\n+\t* gcc.dg/analyzer/pattern-test-2.c: Remove include of stdlib.h.\n+\t(test_2): Rewrite to explicitly perform a bitwise-or of two\n+\tboolean conditions.\n+\t(test_3): New function, to test bitwise-and.\n+\n 2020-01-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR testsuite/71727"}, {"sha": "f5424f526f74caf6bc4902e29eebea54519ef9c7", "filename": "gcc/testsuite/gcc.dg/analyzer/pattern-test-2.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89e844f9c589d1717248597641d25d81a4acb41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89e844f9c589d1717248597641d25d81a4acb41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpattern-test-2.c?ref=f89e844f9c589d1717248597641d25d81a4acb41", "patch": "@@ -1,8 +1,6 @@\n /* { dg-additional-options \"-fanalyzer-checker=pattern-test -O2\" } */\n // TODO: run this at every optimization level\n \n-#include <stdlib.h>\n-\n extern void foo(void *);\n extern void bar(void *);\n \n@@ -18,12 +16,38 @@ void test1(void *ptr)\n \n void test_2 (void *p, void *q)\n {\n-  if (p == NULL || q == NULL) /* { dg-line cond_2 }  */\n+  _Bool tmp1 = p == 0;\n+  _Bool tmp2 = q == 0;\n+  _Bool tmp = tmp1 | tmp2;\n+\n+  /* Verify that we can detect the implied conditions on p and q here.  */\n+  if (tmp) /* { dg-line cond_2 }  */\n     return;\n   foo(p);\n \n+  /* { dg-warning \"pattern match on 'tmp1 == 0'\" \"tmp1 == 0\" { target *-*-* } cond_2 } */\n+  /* { dg-warning \"pattern match on 'tmp2 == 0'\" \"tmp2 == 0\" { target *-*-* } cond_2 } */\n   /* { dg-warning \"pattern match on '<unknown> == 0'\" \"<unknown> == 0\" { target *-*-* } cond_2 } */\n   /* { dg-warning \"pattern match on '<unknown> != 0'\" \"<unknown> != 0\" { target *-*-* } cond_2 } */\n   /* { dg-warning \"pattern match on 'p != 0'\" \"p != 0\" { target *-*-* } cond_2 } */\n   /* { dg-warning \"pattern match on 'q != 0'\" \"q != 0\" { target *-*-* } cond_2 } */\n }\n+\n+void test_3 (void *p, void *q)\n+{\n+  _Bool tmp1 = p == 0;\n+  _Bool tmp2 = q == 0;\n+  _Bool tmp = tmp1 & tmp2;\n+\n+  /* Verify that we can detect the implied conditions on p and q here.  */\n+  if (tmp) /* { dg-line cond_3 }  */\n+    return;\n+  foo(p);\n+\n+  /* { dg-warning \"pattern match on 'tmp1 != 0'\" \"tmp1 != 0\" { target *-*-* } cond_3 } */\n+  /* { dg-warning \"pattern match on 'tmp2 != 0'\" \"tmp2 != 0\" { target *-*-* } cond_3 } */\n+  /* { dg-warning \"pattern match on '<unknown> == 0'\" \"<unknown> == 0\" { target *-*-* } cond_3 } */\n+  /* { dg-warning \"pattern match on '<unknown> != 0'\" \"<unknown> != 0\" { target *-*-* } cond_3 } */\n+  /* { dg-warning \"pattern match on 'p == 0'\" \"p == 0\" { target *-*-* } cond_3 } */\n+  /* { dg-warning \"pattern match on 'q == 0'\" \"q == 0\" { target *-*-* } cond_3 } */\n+}"}]}