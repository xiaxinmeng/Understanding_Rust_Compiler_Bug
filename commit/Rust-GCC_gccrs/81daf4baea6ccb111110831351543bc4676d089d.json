{"sha": "81daf4baea6ccb111110831351543bc4676d089d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkYWY0YmFlYTZjY2IxMTExMTA4MzEzNTE1NDNiYzQ2NzZkMDg5ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-13T12:14:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-13T12:14:51Z"}, "message": "[multiple changes]\n\n2005-11-13  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* include/tr1/boost_shared_ptr.h (get_deleter):\n\tDeclare before shared_ptr.\n\t(shared_ptr<>): Declare get_deleter as friend.\n\t(shared_ptr<>:_M_get_deleter): Private.\n\n2005-11-13  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR libstdc++/24818\n        * include/tr1/ref_wrap_iterate.h\n        (reference_wrapper::operator()()): Don't dereferene the result of\n        get() before calling it; it's already a reference.\n        * testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n        Test nullary calls to reference_wrappers.\n\nFrom-SVN: r106863", "tree": {"sha": "3bfd8ab9475234b605e3709c5b1d1161b1c0dac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfd8ab9475234b605e3709c5b1d1161b1c0dac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81daf4baea6ccb111110831351543bc4676d089d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81daf4baea6ccb111110831351543bc4676d089d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81daf4baea6ccb111110831351543bc4676d089d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81daf4baea6ccb111110831351543bc4676d089d/comments", "author": null, "committer": null, "parents": [{"sha": "3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3270a66b5550ae9c5b9a6b6b46eb7973dac015d7"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "cb19019152115f9d2884058e848c20677a4a5386", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81daf4baea6ccb111110831351543bc4676d089d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81daf4baea6ccb111110831351543bc4676d089d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=81daf4baea6ccb111110831351543bc4676d089d", "patch": "@@ -421,6 +421,9 @@ shared_count::shared_count(const weak_count& __r)\n \n \n // fwd decls\n+template<typename _Tp>\n+  class shared_ptr;\n+\n template<typename _Tp>\n   class weak_ptr;\n \n@@ -466,14 +469,18 @@ inline void\n __enable_shared_from_this(const shared_count&, ...)\n { }\n \n+\n+// get_deleter must be declared before friend declaration by shared_ptr.\n+template<typename _Del, typename _Tp>\n+  _Del* get_deleter(const shared_ptr<_Tp>&);\n+\n /**\n  *  @class shared_ptr <tr1/memory>\n  *\n  *  A smart pointer with reference-counted copy semantics.\n  *  The object pointed to is deleted when the last shared_ptr pointing to it\n  *  is destroyed or reset.\n  */\n-\n template<typename _Tp>\n   class shared_ptr\n   {\n@@ -672,11 +679,11 @@ template<typename _Tp>\n       _M_refcount.swap(__other._M_refcount);\n     }\n \n+  private:\n     void*\n     _M_get_deleter(const std::type_info& __ti) const\n     { return _M_refcount.get_deleter(__ti); }\n \n-  private:\n     template<typename _Tp1>\n       bool\n       _M_less(const shared_ptr<_Tp1>& __rhs) const\n@@ -685,6 +692,9 @@ template<typename _Tp>\n     template<typename _Tp1> friend class shared_ptr;\n     template<typename _Tp1> friend class weak_ptr;\n \n+    template<typename _Del, typename _Tp1>\n+      friend _Del* get_deleter(const shared_ptr<_Tp1>&);\n+\n     // friends injected into enclosing namespace and found by ADL:\n     template<typename _Tp1>\n       friend inline bool"}]}