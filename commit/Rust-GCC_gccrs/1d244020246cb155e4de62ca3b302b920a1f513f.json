{"sha": "1d244020246cb155e4de62ca3b302b920a1f513f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQyNDQwMjAyNDZjYjE1NWU0ZGU2MmNhM2IzMDJiOTIwYTFmNTEzZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-23T11:37:04Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-23T11:37:04Z"}, "message": "Fold sign of LSHIFT_EXPR to eliminate no-op conversions.\n\nThis short patch teaches fold that it is \"safe\" to change the sign\nof a left shift, to reduce the number of type conversions in gimple.\nAs an example:\n\nunsigned int foo(unsigned int i) {\n  return (int)i << 8;\n}\n\nis currently optimized to:\n\nunsigned int foo (unsigned int i)\n{\n  int i.0_1;\n  int _2;\n  unsigned int _4;\n\n  <bb 2> [local count: 1073741824]:\n  i.0_1 = (int) i_3(D);\n  _2 = i.0_1 << 8;\n  _4 = (unsigned int) _2;\n  return _4;\n}\n\nwith this patch, this now becomes:\n\nunsigned int foo (unsigned int i)\n{\n  unsigned int _2;\n\n  <bb 2> [local count: 1073741824]:\n  _2 = i_1(D) << 8;\n  return _2;\n}\n\nwhich generates exactly the same assembly language.  Aside from the\nreduced memory usage, the real benefit is that no-op conversions tend\nto interfere with many folding optimizations.  For example,\n\nunsigned int bar(unsigned char i) {\n    return (i ^ (i<<16)) | (i<<8);\n}\n\ncurrently gets (tangled in conversions and) optimized to:\n\nunsigned int bar (unsigned char i)\n{\n  unsigned int _1;\n  unsigned int _2;\n  int _3;\n  int _4;\n  unsigned int _6;\n  unsigned int _8;\n\n  <bb 2> [local count: 1073741824]:\n  _1 = (unsigned int) i_5(D);\n  _2 = _1 * 65537;\n  _3 = (int) i_5(D);\n  _4 = _3 << 8;\n  _8 = (unsigned int) _4;\n  _6 = _2 | _8;\n  return _6;\n}\n\nbut with this patch, bar now optimizes down to:\n\nunsigned int bar(unsigned char i)\n{\n  unsigned int _1;\n  unsigned int _4;\n\n  <bb 2> [local count: 1073741824]:\n  _1 = (unsigned int) i_3(D);\n  _4 = _1 * 65793;\n  return _4;\n\n}\n\n2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* match.pd (shift transformations): Change the sign of an\n\tLSHIFT_EXPR if it reduces the number of explicit conversions.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-convlshift-1.c: New test case.\n\t* gcc.dg/fold-convlshift-2.c: New test case.", "tree": {"sha": "f0f5c470146c9205c4cfd7809ccd86099e848f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f5c470146c9205c4cfd7809ccd86099e848f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d244020246cb155e4de62ca3b302b920a1f513f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d244020246cb155e4de62ca3b302b920a1f513f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d244020246cb155e4de62ca3b302b920a1f513f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d244020246cb155e4de62ca3b302b920a1f513f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b320edc0c29c838b0090c3c9be14187d132f73f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b320edc0c29c838b0090c3c9be14187d132f73f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b320edc0c29c838b0090c3c9be14187d132f73f2"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "978a1b0172edccbe4b211f8a0c3e96c8dc12260f", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1d244020246cb155e4de62ca3b302b920a1f513f", "patch": "@@ -3385,6 +3385,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (integer_zerop (@2) || integer_all_onesp (@2))\n      (cmp @0 @2)))))\n \n+/* Both signed and unsigned lshift produce the same result, so use\n+   the form that minimizes the number of conversions.  */\n+(simplify\n+ (convert (lshift:s@0 (convert:s@1 @2) INTEGER_CST@3))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+      && TYPE_PRECISION (TREE_TYPE (@2)) <= TYPE_PRECISION (type))\n+  (lshift (convert @2) @3)))\n+\n /* Simplifications of conversions.  */\n \n /* Basic strip-useless-type-conversions / strip_nops.  */"}, {"sha": "b6f57f81e72b6f15beb128c89ec57f32864c03cc", "filename": "gcc/testsuite/gcc.dg/fold-convlshift-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-1.c?ref=1d244020246cb155e4de62ca3b302b920a1f513f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int foo(unsigned int i)\n+{\n+  int t1 = i;\n+  int t2 = t1 << 8;\n+  return t2;\n+}\n+\n+int bar(int i)\n+{\n+  unsigned int t1 = i;\n+  unsigned int t2 = t1 << 8;\n+  return t2;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\(int\\\\)\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\(unsigned int\\\\)\" \"optimized\" } } */\n+"}, {"sha": "f21358c458430e0c6ea5122db13f75ac227590a7", "filename": "gcc/testsuite/gcc.dg/fold-convlshift-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d244020246cb155e4de62ca3b302b920a1f513f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convlshift-2.c?ref=1d244020246cb155e4de62ca3b302b920a1f513f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int foo(unsigned char c)\n+{\n+  int t1 = c;\n+  int t2 = t1 << 8;\n+  return t2;\n+}\n+\n+int bar(unsigned char c)\n+{\n+  unsigned int t1 = c;\n+  unsigned int t2 = t1 << 8;\n+  return t2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(int\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 1 \"optimized\" } } */\n+"}]}