{"sha": "b1d246853d409848c890a85bc0f45bbc75c9899d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkMjQ2ODUzZDQwOTg0OGM4OTBhODViYzBmNDViYmM3NWM5ODk5ZA==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-02-07T03:56:40Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-02-07T03:56:40Z"}, "message": "gc.h: (GC_CreateThread) This function is now exposed on all Win32 platforms.\n\n2002-02-06  Adam Megacz <adam@xwt.org>\n\n        * boehm-gc/include/gc.h: (GC_CreateThread) This function is\n        now exposed on all Win32 platforms.\n        * boehm-gc/win32_threads.c: (GC_CreateThread) This now\n        compiles on Win32; it invokes CreateThread() if GC is built\n        as a DLL; otherwise it registers the thread.\n        * boehm-gc/misc.c (GC_init): Initialize GC_allocate_ml in case\n        libgcjgc was not built as a DLL.\n\nFrom-SVN: r49563", "tree": {"sha": "6c3ed013c8e8ef078276d9712ba1ca29f2699f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c3ed013c8e8ef078276d9712ba1ca29f2699f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d246853d409848c890a85bc0f45bbc75c9899d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d246853d409848c890a85bc0f45bbc75c9899d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d246853d409848c890a85bc0f45bbc75c9899d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d246853d409848c890a85bc0f45bbc75c9899d/comments", "author": null, "committer": null, "parents": [{"sha": "b5ee195f1e3f11a5979841bedbf932926ffe5322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ee195f1e3f11a5979841bedbf932926ffe5322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ee195f1e3f11a5979841bedbf932926ffe5322"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "e167429a413506db68f5430ef20a521ede11d038", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=b1d246853d409848c890a85bc0f45bbc75c9899d", "patch": "@@ -1,3 +1,13 @@\n+2002-02-06  Adam Megacz <adam@xwt.org>\n+\n+        * boehm-gc/include/gc.h: (GC_CreateThread) This function is\n+        now exposed on all Win32 platforms.\n+        * boehm-gc/win32_threads.c: (GC_CreateThread) This now\n+        compiles on Win32; it invokes CreateThread() if GC is built\n+        as a DLL; otherwise it registers the thread.\n+        * boehm-gc/misc.c (GC_init): Initialize GC_allocate_ml in case\n+        libgcjgc was not built as a DLL.\n+\n 2002-02-01  Adam Megacz <adam@xwt.org>\n \n \t* boehm-gc on win32 now automatically detects if it is being built"}, {"sha": "9e5447b045838bb6fc04ff3a4ae5c3d339b71735", "filename": "boehm-gc/include/gc.h", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Finclude%2Fgc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Finclude%2Fgc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc.h?ref=b1d246853d409848c890a85bc0f45bbc75c9899d", "patch": "@@ -849,9 +849,19 @@ extern void GC_thr_init();\t/* Needed for Solaris/X86\t*/\n \n #endif /* THREADS && !SRC_M3 */\n \n-#if defined(GC_WIN32_THREADS) && defined(_WIN32_WCE)\n+#if defined(GC_WIN32_THREADS)\n # include <windows.h>\n \n+  /*\n+   * All threads must be created using GC_CreateThread, so that they will be\n+   * recorded in the thread table.\n+   */\n+  HANDLE WINAPI GC_CreateThread(\n+      LPSECURITY_ATTRIBUTES lpThreadAttributes,\n+      DWORD dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress,\n+      LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId );\n+\n+# if defined(_WIN32_WCE)\n   /*\n    * win32_threads.c implements the real WinMain, which will start a new thread\n    * to call GC_WinMain after initializing the garbage collector.\n@@ -862,21 +872,13 @@ extern void GC_thr_init();\t/* Needed for Solaris/X86\t*/\n       LPWSTR lpCmdLine,\n       int nCmdShow );\n \n-  /*\n-   * All threads must be created using GC_CreateThread, so that they will be\n-   * recorded in the thread table.\n-   */\n-  HANDLE WINAPI GC_CreateThread(\n-      LPSECURITY_ATTRIBUTES lpThreadAttributes, \n-      DWORD dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, \n-      LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId );\n-\n-# ifndef GC_BUILD\n-#   define WinMain GC_WinMain\n-#   define CreateThread GC_CreateThread\n-# endif\n+#  ifndef GC_BUILD\n+#    define WinMain GC_WinMain\n+#    define CreateThread GC_CreateThread\n+#  endif\n+# endif /* defined(_WIN32_WCE) */\n \n-#endif\n+#endif /* defined(GC_WIN32_THREADS) */\n \n /*\n  * If you are planning on putting"}, {"sha": "06d7085d06eff37536bf431371714021425fc986", "filename": "boehm-gc/misc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmisc.c?ref=b1d246853d409848c890a85bc0f45bbc75c9899d", "patch": "@@ -436,6 +436,11 @@ void GC_init()\n     DCL_LOCK_STATE;\n     \n     DISABLE_SIGNALS();\n+\n+#ifdef MSWIN32\n+    if (!GC_is_initialized) InitializeCriticalSection(&GC_allocate_ml);\n+#endif /* MSWIN32 */\n+\n     LOCK();\n     GC_init_inner();\n     UNLOCK();"}, {"sha": "33facbbaa10f0fc29f0635d29d683a188811b249", "filename": "boehm-gc/win32_threads.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Fwin32_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d246853d409848c890a85bc0f45bbc75c9899d/boehm-gc%2Fwin32_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fwin32_threads.c?ref=b1d246853d409848c890a85bc0f45bbc75c9899d", "patch": "@@ -331,8 +331,18 @@ void GC_get_next_stack(char *start, char **lo, char **hi)\n     if (*lo < start) *lo = start;\n }\n \n+#if !defined(MSWINCE) && !(defined(__MINGW32__) && !defined(_DLL))\n \n-# ifdef MSWINCE\n+HANDLE WINAPI GC_CreateThread(\n+    LPSECURITY_ATTRIBUTES lpThreadAttributes, \n+    DWORD dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, \n+    LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId )\n+{\n+    return CreateThread(lpThreadAttributes, dwStackSize, lpStartAddress,\n+                        lpParameter, dwCreationFlags, lpThreadId);\n+}\n+\n+#else /* !defined(MSWINCE) && !(defined(__MINGW32__) && !defined(_DLL)) \n \n typedef struct {\n     HANDLE child_ready_h, parent_ready_h;\n@@ -450,6 +460,9 @@ static DWORD WINAPI thread_start(LPVOID arg)\n \n     return ret;\n }\n+#endif /* !defined(MSWINCE) && !(defined(__MINGW32__) && !defined(_DLL)) \n+\n+#ifdef MSWINCE\n \n typedef struct {\n     HINSTANCE hInstance;"}]}