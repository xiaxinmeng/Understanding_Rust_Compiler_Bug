{"sha": "459d84e9b6e925922246b6aff76a5202b1d4d4ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5ZDg0ZTliNmU5MjU5MjIyNDZiNmFmZjc2YTUyMDJiMWQ0ZDRiYQ==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-04-30T14:52:40Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-05-20T19:39:33Z"}, "message": "opts: change write_symbols to support bitmasks\n\nTo support multiple debug formats, we need to move away from explicit\nenumeration of each individual combination of debug formats.\n\ngcc/c-family/ChangeLog:\n\n\t* c-opts.c (c_common_post_options): Adjust access to debug_type_names.\n\t* c-pch.c (struct c_pch_validity): Use type uint32_t.\n\t(pch_init): Renamed member.\n\t(c_common_valid_pch): Adjust access to debug_type_names.\n\ngcc/ChangeLog:\n\n\t* common.opt: Change type to support bitmasks.\n\t* flag-types.h (enum debug_info_type): Rename enumerator constants.\n\t(NO_DEBUG): New bitmask.\n\t(DBX_DEBUG): Likewise.\n\t(DWARF2_DEBUG): Likewise.\n\t(XCOFF_DEBUG): Likewise.\n\t(VMS_DEBUG): Likewise.\n\t(VMS_AND_DWARF2_DEBUG): Likewise.\n\t* flags.h (debug_set_to_format): New function declaration.\n\t(debug_set_count): Likewise.\n\t(debug_set_names): Likewise.\n\t* opts.c (debug_type_masks): Array of bitmasks for debug formats.\n\t(debug_set_to_format): New function definition.\n\t(debug_set_count): Likewise.\n\t(debug_set_names): Likewise.\n\t(set_debug_level): Update access to debug_type_names.\n\t* toplev.c: Likewise.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (synth_module_prologue): Use uint32_t instead of enum\n\tdebug_info_type.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pch/valid-1.c: Adjust diagnostic message in testcase.\n\t* lib/dg-pch.exp: Adjust diagnostic message.", "tree": {"sha": "14bbc582c3a077083184c01d5cf49700df9e6111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bbc582c3a077083184c01d5cf49700df9e6111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/459d84e9b6e925922246b6aff76a5202b1d4d4ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d84e9b6e925922246b6aff76a5202b1d4d4ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459d84e9b6e925922246b6aff76a5202b1d4d4ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d84e9b6e925922246b6aff76a5202b1d4d4ba/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9480491a6447576e8e695b8ea3c4989cf72c9670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9480491a6447576e8e695b8ea3c4989cf72c9670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9480491a6447576e8e695b8ea3c4989cf72c9670"}], "stats": {"total": 193, "additions": 157, "deletions": 36}, "files": [{"sha": "60b5802722ced2f11f3016050f53102eae7dad22", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -1112,9 +1112,10 @@ c_common_post_options (const char **pfilename)\n \t  /* Only -g0 and -gdwarf* are supported with PCH, for other\n \t     debug formats we warn here and refuse to load any PCH files.  */\n \t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n-\t    warning (OPT_Wdeprecated,\n-\t\t     \"the %qs debug format cannot be used with \"\n-\t\t     \"pre-compiled headers\", debug_type_names[write_symbols]);\n+\t      warning (OPT_Wdeprecated,\n+\t\t       \"the %qs debug info cannot be used with \"\n+\t\t       \"pre-compiled headers\",\n+\t\t       debug_set_names (write_symbols & ~DWARF2_DEBUG));\n \t}\n       else if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n \tc_common_no_more_pch ();"}, {"sha": "8f0f76024a23599f05700e935b84632e59dfdb60", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -52,7 +52,7 @@ enum {\n \n struct c_pch_validity\n {\n-  unsigned char debug_info_type;\n+  uint32_t pch_write_symbols;\n   signed char match[MATCH_SIZE];\n   void (*pch_init) (void);\n   size_t target_data_length;\n@@ -108,7 +108,7 @@ pch_init (void)\n   pch_outfile = f;\n \n   memset (&v, '\\0', sizeof (v));\n-  v.debug_info_type = write_symbols;\n+  v.pch_write_symbols = write_symbols;\n   {\n     size_t i;\n     for (i = 0; i < MATCH_SIZE; i++)\n@@ -252,13 +252,13 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   /* The allowable debug info combinations are that either the PCH file\n      was built with the same as is being used now, or the PCH file was\n      built for some kind of debug info but now none is in use.  */\n-  if (v.debug_info_type != write_symbols\n+  if (v.pch_write_symbols != write_symbols\n       && write_symbols != NO_DEBUG)\n     {\n       cpp_warning (pfile, CPP_W_INVALID_PCH,\n-\t\t   \"%s: created with -g%s, but used with -g%s\", name,\n-\t\t   debug_type_names[v.debug_info_type],\n-\t\t   debug_type_names[write_symbols]);\n+\t\t   \"%s: created with '%s' debug info, but used with '%s'\", name,\n+\t\t   debug_set_names (v.pch_write_symbols),\n+\t\t   debug_set_names (write_symbols));\n       return 2;\n     }\n "}, {"sha": "ffb968d90f8910928a7ea5b3c14921d42e4c5513", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -109,7 +109,7 @@ bool exit_after_options\n ; flag-types.h for the definitions of the different possible types of\n ; debugging information.\n Variable\n-enum debug_info_type write_symbols = NO_DEBUG\n+uint32_t write_symbols = NO_DEBUG\n \n ; Level of debugging information we are producing.  See flag-types.h\n ; for the definitions of the different possible levels."}, {"sha": "d60bb307c52de7123b4f6c48a3aa77b1ad0900ad", "filename": "gcc/flag-types.h", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -24,15 +24,30 @@ along with GCC; see the file COPYING3.  If not see\n \n enum debug_info_type\n {\n-  NO_DEBUG,\t    /* Write no debug info.  */\n-  DBX_DEBUG,\t    /* Write BSD .stabs for DBX (using dbxout.c).  */\n-  DWARF2_DEBUG,\t    /* Write Dwarf v2 debug info (using dwarf2out.c).  */\n-  XCOFF_DEBUG,\t    /* Write IBM/Xcoff debug info (using dbxout.c).  */\n-  VMS_DEBUG,        /* Write VMS debug info (using vmsdbgout.c).  */\n-  VMS_AND_DWARF2_DEBUG /* Write VMS debug info (using vmsdbgout.c).\n-                          and DWARF v2 debug info (using dwarf2out.c).  */\n+  DINFO_TYPE_NONE = 0,\t\t  /* No debug info.  */\n+  DINFO_TYPE_DBX = 1,\t\t  /* BSD .stabs for DBX.  */\n+  DINFO_TYPE_DWARF2 = 2,\t  /* Dwarf v2 debug info.  */\n+  DINFO_TYPE_XCOFF = 3,\t\t  /* IBM/Xcoff debug info.  */\n+  DINFO_TYPE_VMS = 4,\t\t  /* VMS debug info.  */\n+  DINFO_TYPE_MAX = DINFO_TYPE_VMS /* Marker only.  */\n };\n \n+#define NO_DEBUG      (0U)\n+/* Write DBX debug info (using dbxout.c).  */\n+#define DBX_DEBUG     (1U << DINFO_TYPE_DBX)\n+/* Write DWARF2 debug info (using dwarf2out.c).  */\n+#define DWARF2_DEBUG  (1U << DINFO_TYPE_DWARF2)\n+/* Write IBM/XCOFF debug info (using dbxout.c).  */\n+#define XCOFF_DEBUG   (1U << DINFO_TYPE_XCOFF)\n+/* Write VMS debug info (using vmsdbgout.c).  */\n+#define VMS_DEBUG     (1U << DINFO_TYPE_VMS)\n+/* Note: Adding new definitions to handle -combination- of debug formats,\n+   like VMS_AND_DWARF2_DEBUG is not recommended.  This definition remains\n+   here for historical reasons.  */\n+/* Write VMS debug info (using vmsdbgout.c) and DWARF v2 debug info (using\n+   dwarf2out.c).  */\n+#define VMS_AND_DWARF2_DEBUG  ((VMS_DEBUG | DWARF2_DEBUG))\n+\n enum debug_info_levels\n {\n   DINFO_LEVEL_NONE,\t/* Write no debugging info.  */"}, {"sha": "34154931cac3665f2df0e9c6c00f654ac6398ca1", "filename": "gcc/flags.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -22,9 +22,24 @@ along with GCC; see the file COPYING3.  If not see\n \n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n \n-/* Names of debug_info_type, for error messages.  */\n+/* Names of fundamental debug info formats indexed by enum\n+   debug_info_type.  */\n+\n extern const char *const debug_type_names[];\n \n+/* Get enum debug_info_type of the specified debug format, for error messages.\n+   Can be used only for individual debug format types.  */\n+\n+extern enum debug_info_type debug_set_to_format (uint32_t debug_info_set);\n+\n+/* Get the number of debug formats enabled for output.  */\n+\n+unsigned int debug_set_count (uint32_t w_symbols);\n+\n+/* Get the names of the debug formats enabled for output.  */\n+\n+const char * debug_set_names (uint32_t w_symbols);\n+\n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);\n "}, {"sha": "8d106a4de26ef42f2586427ea272601278c45d5b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -3078,7 +3078,7 @@ static void\n synth_module_prologue (void)\n {\n   tree type;\n-  enum debug_info_type save_write_symbols = write_symbols;\n+  uint32_t save_write_symbols = write_symbols;\n   const struct gcc_debug_hooks *const save_hooks = debug_hooks;\n \n   /* Suppress outputting debug symbols, because"}, {"sha": "16042413af7539199274ba3161ddb75a99cd888c", "filename": "gcc/opts.c", "status": "modified", "additions": 98, "deletions": 11, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -37,12 +37,95 @@ along with GCC; see the file COPYING3.  If not see\n \n static void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \n-/* Indexed by enum debug_info_type.  */\n+/* Names of fundamental debug info formats indexed by enum\n+   debug_info_type.  */\n+\n const char *const debug_type_names[] =\n {\n   \"none\", \"stabs\", \"dwarf-2\", \"xcoff\", \"vms\"\n };\n \n+/* Bitmasks of fundamental debug info formats indexed by enum\n+   debug_info_type.  */\n+\n+static uint32_t debug_type_masks[] =\n+{\n+  NO_DEBUG, DBX_DEBUG, DWARF2_DEBUG, XCOFF_DEBUG, VMS_DEBUG\n+};\n+\n+/* Names of the set of debug formats requested by user.  Updated and accessed\n+   via debug_set_names.  */\n+\n+static char df_set_names[sizeof \"none stabs dwarf-2 xcoff vms\"];\n+\n+/* Get enum debug_info_type of the specified debug format, for error messages.\n+   Can be used only for individual debug format types.  */\n+\n+enum debug_info_type\n+debug_set_to_format (uint32_t debug_info_set)\n+{\n+  int idx = 0;\n+  enum debug_info_type dinfo_type = DINFO_TYPE_NONE;\n+  /* Find first set bit.  */\n+  if (debug_info_set)\n+    idx = exact_log2 (debug_info_set & - debug_info_set);\n+  /* Check that only one bit is set, if at all.  This function is meant to be\n+     used only for vanilla debug_info_set bitmask values, i.e. for individual\n+     debug format types upto DINFO_TYPE_MAX.  */\n+  gcc_assert ((debug_info_set & (debug_info_set - 1)) == 0);\n+  dinfo_type = (enum debug_info_type)idx;\n+  gcc_assert (dinfo_type <= DINFO_TYPE_MAX);\n+  return dinfo_type;\n+}\n+\n+/* Get the number of debug formats enabled for output.  */\n+\n+unsigned int\n+debug_set_count (uint32_t w_symbols)\n+{\n+  unsigned int count = 0;\n+  while (w_symbols)\n+    {\n+      ++ count;\n+      w_symbols &= ~ (w_symbols & - w_symbols);\n+    }\n+  return count;\n+}\n+\n+/* Get the names of the debug formats enabled for output.  */\n+\n+const char *\n+debug_set_names (uint32_t w_symbols)\n+{\n+  uint32_t df_mask = 0;\n+  /* Reset the string to be returned.  */\n+  memset (df_set_names, 0, sizeof (df_set_names));\n+  /* Get the popcount.  */\n+  int num_set_df = debug_set_count (w_symbols);\n+  /* Iterate over the debug formats.  Add name string for those enabled.  */\n+  for (int i = DINFO_TYPE_NONE; i <= DINFO_TYPE_MAX; i++)\n+    {\n+      df_mask = debug_type_masks[i];\n+      if (w_symbols & df_mask)\n+\t{\n+\t  strcat (df_set_names, debug_type_names[i]);\n+\t  num_set_df--;\n+\t  if (num_set_df)\n+\t    strcat (df_set_names, \" \");\n+\t  else\n+\t    break;\n+\t}\n+      else if (!w_symbols)\n+\t{\n+\t  /* No debug formats enabled.  */\n+\t  gcc_assert (i == DINFO_TYPE_NONE);\n+\t  strcat (df_set_names, debug_type_names[i]);\n+\t  break;\n+\t}\n+    }\n+  return df_set_names;\n+}\n+\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n \n@@ -190,7 +273,7 @@ static const char use_diagnosed_msg[] = N_(\"Uses of this option are diagnosed.\")\n \n typedef char *char_p; /* For DEF_VEC_P.  */\n \n-static void set_debug_level (enum debug_info_type type, int extended,\n+static void set_debug_level (uint32_t dinfo, int extended,\n \t\t\t     const char *arg, struct gcc_options *opts,\n \t\t\t     struct gcc_options *opts_set,\n \t\t\t     location_t loc);\n@@ -3027,17 +3110,17 @@ fast_math_flags_struct_set_p (struct cl_optimization *opt)\n }\n \n /* Handle a debug output -g switch for options OPTS\n-   (OPTS_SET->x_write_symbols storing whether a debug type was passed\n+   (OPTS_SET->x_write_symbols storing whether a debug format was passed\n    explicitly), location LOC.  EXTENDED is true or false to support\n    extended output (2 is special and means \"-ggdb\" was given).  */\n static void\n-set_debug_level (enum debug_info_type type, int extended, const char *arg,\n+set_debug_level (uint32_t dinfo, int extended, const char *arg,\n \t\t struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t location_t loc)\n {\n   opts->x_use_gnu_debug_info_extensions = extended;\n \n-  if (type == NO_DEBUG)\n+  if (dinfo == NO_DEBUG)\n     {\n       if (opts->x_write_symbols == NO_DEBUG)\n \t{\n@@ -3058,14 +3141,18 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg,\n     }\n   else\n     {\n-      /* Does it conflict with an already selected type?  */\n+      /* Does it conflict with an already selected debug format?  */\n       if (opts_set->x_write_symbols != NO_DEBUG\n \t  && opts->x_write_symbols != NO_DEBUG\n-\t  && type != opts->x_write_symbols)\n-\terror_at (loc, \"debug format %qs conflicts with prior selection\",\n-\t\t  debug_type_names[type]);\n-      opts->x_write_symbols = type;\n-      opts_set->x_write_symbols = type;\n+\t  && dinfo != opts->x_write_symbols)\n+\t{\n+\t  gcc_assert (debug_set_count (dinfo) <= 1);\n+\t  error_at (loc, \"debug format %qs conflicts with prior selection\",\n+\t\t    debug_type_names[debug_set_to_format (dinfo)]);\n+\t}\n+\n+      opts->x_write_symbols = dinfo;\n+      opts_set->x_write_symbols = dinfo;\n     }\n \n   /* A debug flag without a level defaults to level 2."}, {"sha": "6e9abdaef3ac7614627d741be12eeff0d4cba09f", "filename": "gcc/testsuite/gcc.dg/pch/valid-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -1,7 +1,7 @@\n /* { dg-require-effective-target pch_supported_debug } */\n /* { dg-options \"-I. -Winvalid-pch -g\" } */\n \n-#include \"valid-1.h\"/* { dg-warning \"created with -gnone, but used with -g\" } */\n+#include \"valid-1.h\"/* { dg-warning \"created with .none. debug info, but used with\" } */\n /* { dg-error \"No such file\" \"no such file\" { target *-*-* } 0 } */\n /* { dg-error \"they were invalid\" \"invalid files\" { target *-*-* } 0 } */\n /* { dg-message \"terminated\" \"\" { target *-*-* } 0 } */"}, {"sha": "bb0ce46614c7eff7a4f6e4679330b03feb53967b", "filename": "gcc/testsuite/lib/dg-pch.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -28,7 +28,7 @@ proc pch-init { args } {\n \n     set result [check_compile pchtest object \"int i;\" \"-g -x c-header\"]\n     set pch_unsupported_debug \\\n-\t[regexp \"debug format cannot be used with pre-compiled headers\" \\\n+\t[regexp \"debug info cannot be used with pre-compiled headers\" \\\n \t\t[lindex $result 0]]\n     remote_file build delete [lindex $result 1]\n \n@@ -38,7 +38,7 @@ proc pch-init { args } {\n \n \tset result [check_compile pchtest object \"int i;\" \"-x c-header\"]\n \tset pch_unsupported \\\n-\t    [regexp \"debug format cannot be used with pre-compiled headers\" \\\n+\t    [regexp \"debug info cannot be used with pre-compiled headers\" \\\n \t\t [lindex $result 0]]\n \tremote_file build delete [lindex $result 1]\n     }"}, {"sha": "1016fb9ee63a25c6e201e09cf5d70605162a1ef7", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d84e9b6e925922246b6aff76a5202b1d4d4ba/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=459d84e9b6e925922246b6aff76a5202b1d4d4ba", "patch": "@@ -1461,9 +1461,12 @@ process_options (void)\n     debug_hooks = &dwarf2_lineno_debug_hooks;\n #endif\n   else\n-    error_at (UNKNOWN_LOCATION,\n-\t      \"target system does not support the %qs debug format\",\n-\t      debug_type_names[write_symbols]);\n+    {\n+      gcc_assert (debug_set_count (write_symbols) <= 1);\n+      error_at (UNKNOWN_LOCATION,\n+\t\t\"target system does not support the %qs debug format\",\n+\t\tdebug_type_names[debug_set_to_format (write_symbols)]);\n+    }\n \n   /* We know which debug output will be used so we can set flag_var_tracking\n      and flag_var_tracking_uninit if the user has not specified them.  */"}]}