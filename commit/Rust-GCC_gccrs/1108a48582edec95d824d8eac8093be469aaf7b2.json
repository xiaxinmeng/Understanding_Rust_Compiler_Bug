{"sha": "1108a48582edec95d824d8eac8093be469aaf7b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwOGE0ODU4MmVkZWM5NWQ4MjRkOGVhYzgwOTNiZTQ2OWFhZjdiMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-08-01T15:01:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-08-01T15:01:03Z"}, "message": "PR c++/72766 - ICE with VLA\n\n\t* constexpr.c (cxx_eval_pointer_plus_expression): Check constancy\n\tof nelts.\n\t* cp-gimplify.c (cp_fully_fold): Only maybe_constant_value in\n\tC++11 and up.\n\nFrom-SVN: r238957", "tree": {"sha": "10049b6204e11dba9e275b41e80f6900bdb77bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10049b6204e11dba9e275b41e80f6900bdb77bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1108a48582edec95d824d8eac8093be469aaf7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1108a48582edec95d824d8eac8093be469aaf7b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1108a48582edec95d824d8eac8093be469aaf7b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1108a48582edec95d824d8eac8093be469aaf7b2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37bce35a7e01dd844ccc810c58bf89ef7474c895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bce35a7e01dd844ccc810c58bf89ef7474c895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bce35a7e01dd844ccc810c58bf89ef7474c895"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "d792baf24755b1f20b895e8da2d46c04220ab667", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1108a48582edec95d824d8eac8093be469aaf7b2", "patch": "@@ -1,3 +1,11 @@\n+2016-08-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/72766\n+\t* constexpr.c (cxx_eval_pointer_plus_expression): Check constancy\n+\tof nelts.\n+\t* cp-gimplify.c (cp_fully_fold): Only maybe_constant_value in\n+\tC++11 and up.\n+\n 2016-07-30 Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/60760"}, {"sha": "edade4894014405120d29e030a5846006ba490a1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1108a48582edec95d824d8eac8093be469aaf7b2", "patch": "@@ -3581,6 +3581,10 @@ cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n       tree type = TREE_TYPE (op00);\n       t = fold_convert_loc (loc, ssizetype, TREE_OPERAND (op00, 1));\n       tree nelts = array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n+      nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n+\t\t\t\t\t    overflow_p);\n+      if (*non_constant_p)\n+\treturn NULL_TREE;\n       /* Don't fold an out-of-bound access.  */\n       if (!tree_int_cst_le (t, nelts))\n \treturn NULL_TREE;"}, {"sha": "e28c9dfc799545767078407f793d2467f6c113af", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1108a48582edec95d824d8eac8093be469aaf7b2", "patch": "@@ -1967,7 +1967,8 @@ cp_fully_fold (tree x)\n     return x;\n   /* FIXME cp_fold ought to be a superset of maybe_constant_value so we don't\n      have to call both.  */\n-  x = maybe_constant_value (x);\n+  if (cxx_dialect >= cxx11)\n+    x = maybe_constant_value (x);\n   return cp_fold (x);\n }\n "}, {"sha": "c3e6ea1cababdc278d8992a7215a4776b833a1cd", "filename": "gcc/testsuite/g++.dg/ext/vla16.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1108a48582edec95d824d8eac8093be469aaf7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C?ref=1108a48582edec95d824d8eac8093be469aaf7b2", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/72766\n+// { dg-options \"-Wno-vla\" }\n+\n+long fn1() {\n+  const int a = fn1();\n+  int b[a];\n+  int c = *(&b[0] + sizeof(0));\n+}"}]}