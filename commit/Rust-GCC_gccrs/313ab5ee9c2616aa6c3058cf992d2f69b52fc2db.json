{"sha": "313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzYWI1ZWU5YzI2MTZhYTZjMzA1OGNmOTkyZDJmNjliNTJmYzJkYg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-06-08T14:01:40Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-06-08T14:01:40Z"}, "message": "expr.c (build_field_ref): Pass NULL_TREE as SPECIAL arg to get_symbol_table_index().\n\n2006-06-08  Andrew Haley  <aph@redhat.com>\n\n        * expr.c (build_field_ref): Pass NULL_TREE as SPECIAL arg to\n        get_symbol_table_index().\n        (maybe_rewrite_invocation): Set SPECIAL if we need to access a\n        private method.\n        (build_known_method_ref): New arg: special.  Pass it to\n        get_symbol_table_index.\n        (get_symbol_table_index): Put SPECIAL in the TREE_PURPOSE field of\n        the method list.\n        (build_invokevirtual): New arg: special.  Pass it to\n        get_symbol_table_index.\n        (expand_invoke): New variable: special.\n        Pass it to maybe_rewrite_invocation().\n        Pass it to build_known_method_ref().\n        * class.c (build_symbol_entry): Add new arg: special.  Use it to\n        build the symbol table conbstructor.\n        (emit_symbol_table): Extract SPECIAL from the method list and pass\n        it to build_symbol_entry().\n        * parse.y (patch_invoke): Call maybe_rewrite_invocation() and set\n        special accordingly.\n\nFrom-SVN: r114487", "tree": {"sha": "06de34fc6cdfcf4bb3efea134a03b6b617bab797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06de34fc6cdfcf4bb3efea134a03b6b617bab797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "297750da0393e5542752140f9ad5abb924f6305e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297750da0393e5542752140f9ad5abb924f6305e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297750da0393e5542752140f9ad5abb924f6305e"}], "stats": {"total": 104, "additions": 76, "deletions": 28}, "files": [{"sha": "ae0e407fb36542dc8f1dbf86c84149f045c5486c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "patch": "@@ -1,3 +1,25 @@\n+2006-06-08  Andrew Haley  <aph@redhat.com>\n+\n+\t* expr.c (build_field_ref): Pass NULL_TREE as SPECIAL arg to\n+\tget_symbol_table_index().\n+\t(maybe_rewrite_invocation): Set SPECIAL if we need to access a\n+\tprivate method.\n+\t(build_known_method_ref): New arg: special.  Pass it to\n+\tget_symbol_table_index.\n+\t(get_symbol_table_index): Put SPECIAL in the TREE_PURPOSE field of\n+\tthe method list.\n+\t(build_invokevirtual): New arg: special.  Pass it to\n+\tget_symbol_table_index.\n+\t(expand_invoke): New variable: special.\n+\tPass it to maybe_rewrite_invocation().\n+\tPass it to build_known_method_ref().\n+\t* class.c (build_symbol_entry): Add new arg: special.  Use it to\n+\tbuild the symbol table conbstructor.\n+\t(emit_symbol_table): Extract SPECIAL from the method list and pass\n+\tit to build_symbol_entry().\n+\t* parse.y (patch_invoke): Call maybe_rewrite_invocation() and set\n+\tspecial accordingly.\n+\n 2006-06-06  David Daney  <ddaney@avtrex.com>\n \n \t* gcj.texi (libgcj Runtime Properties): Document"}, {"sha": "44f435c134f2ea792b2ee482545b7c5d4881d3c6", "filename": "gcc/java/class.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "patch": "@@ -62,7 +62,7 @@ static int supers_all_compiled (tree type);\n static tree maybe_layout_super_class (tree, tree);\n static void add_miranda_methods (tree, tree);\n static int assume_compiled (const char *);\n-static tree build_symbol_entry (tree);\n+static tree build_symbol_entry (tree, tree);\n static tree emit_assertion_table (tree);\n static void register_class (void);\n \n@@ -2651,7 +2651,7 @@ emit_register_classes (tree *list_p)\n /* Make a symbol_type (_Jv_MethodSymbol) node for DECL. */\n \n static tree\n-build_symbol_entry (tree decl)\n+build_symbol_entry (tree decl, tree special)\n {\n   tree clname, name, signature, sym;\n   clname = build_utf8_ref (DECL_NAME (TYPE_NAME (DECL_CONTEXT (decl))));\n@@ -2667,6 +2667,12 @@ build_symbol_entry (tree decl)\n   signature = build_utf8_ref (unmangle_classname \n \t\t\t      (IDENTIFIER_POINTER (signature),\n \t\t\t       IDENTIFIER_LENGTH (signature)));\n+  /* SPECIAL is either NULL_TREE or integer_one_node.  We emit\n+     signature addr+1 if SPECIAL, and this indicates to the runtime\n+     system that this is a \"special\" symbol, i.e. one that should\n+     bypass access controls.  */\n+  if (special != NULL_TREE)\n+    signature = build2 (PLUS_EXPR, TREE_TYPE (signature), signature, special);\n       \n   START_RECORD_CONSTRUCTOR (sym, symbol_type);\n   PUSH_FIELD_VALUE (sym, \"clname\", clname);\n@@ -2701,8 +2707,9 @@ emit_symbol_table (tree name, tree the_table, tree decl_list,\n   list = NULL_TREE;  \n   while (method_list != NULL_TREE)\n     {\n+      tree special = TREE_PURPOSE (method_list);\n       method = TREE_VALUE (method_list);\n-      list = tree_cons (NULL_TREE, build_symbol_entry (method), list);\n+      list = tree_cons (NULL_TREE, build_symbol_entry (method, special), list);\n       method_list = TREE_CHAIN (method_list);\n       index++;\n     }"}, {"sha": "cb3d506bad335459fe898d3faea12e7b6ab848a8", "filename": "gcc/java/expr.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "patch": "@@ -1711,7 +1711,8 @@ build_field_ref (tree self_value, tree self_class, tree name)\n \t{\n \t  tree otable_index\n \t    = build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t     (field_decl, &TYPE_OTABLE_METHODS (output_class)));\n+\t\t\t     (field_decl, NULL_TREE, \n+\t\t\t      &TYPE_OTABLE_METHODS (output_class)));\n \t  tree field_offset\n \t    = build4 (ARRAY_REF, integer_type_node,\n \t\t      TYPE_OTABLE_DECL (output_class), otable_index,\n@@ -2060,14 +2061,17 @@ static rewrite_rule rules[] =\n    {NULL, NULL, NULL, NULL, 0, NULL}};\n \n /* Scan the rules list for replacements for *METHOD_P and replace the\n-   args accordingly.  */\n+   args accordingly.  If the rewrite results in an access to a private\n+   method, update SPECIAL.*/\n \n void\n maybe_rewrite_invocation (tree *method_p, tree *arg_list_p, \n-\t\t\t  tree *method_signature_p)\n+\t\t\t  tree *method_signature_p, tree *special)\n {\n   tree context = DECL_NAME (TYPE_NAME (DECL_CONTEXT (*method_p)));\n   rewrite_rule *p;\n+  *special = NULL_TREE;\n+\n   for (p = rules; p->classname; p++)\n     {\n       if (get_identifier (p->classname) == context)\n@@ -2091,6 +2095,7 @@ maybe_rewrite_invocation (tree *method_p, tree *arg_list_p,\n \t      gcc_assert (*method_p);\n \t      *arg_list_p = p->rewrite_arglist (*arg_list_p);\n \t      *method_signature_p = get_identifier (p->new_signature);\n+\t      *special = integer_one_node;\n \n \t      break;\n \t    }\n@@ -2103,7 +2108,7 @@ maybe_rewrite_invocation (tree *method_p, tree *arg_list_p,\n tree\n build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n \t\t\ttree self_type, tree method_signature ATTRIBUTE_UNUSED,\n-\t\t\ttree arg_list ATTRIBUTE_UNUSED)\n+\t\t\ttree arg_list ATTRIBUTE_UNUSED, tree special)\n {\n   tree func;\n   if (is_compiled_class (self_type))\n@@ -2121,8 +2126,10 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n       else\n \t{\n \t  tree table_index\n-\t    = build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t     (method, &TYPE_ATABLE_METHODS (output_class)));\n+\t    = build_int_cst (NULL_TREE, \n+\t\t\t     (get_symbol_table_index \n+\t\t\t      (method, special,\n+\t\t\t       &TYPE_ATABLE_METHODS (output_class))));\n \t  func \n \t    = build4 (ARRAY_REF,  \n \t\t      TREE_TYPE (TREE_TYPE (TYPE_ATABLE_DECL (output_class))),\n@@ -2207,14 +2214,14 @@ invoke_build_dtable (int is_invoke_interface, tree arg_list)\n    reused.  */\n \n int\n-get_symbol_table_index (tree t, tree *symbol_table)\n+get_symbol_table_index (tree t, tree special, tree *symbol_table)\n {\n   int i = 1;\n   tree method_list;\n \n   if (*symbol_table == NULL_TREE)\n     {\n-      *symbol_table = build_tree_list (t, t);\n+      *symbol_table = build_tree_list (special, t);\n       return 1;\n     }\n   \n@@ -2223,7 +2230,8 @@ get_symbol_table_index (tree t, tree *symbol_table)\n   while (1)\n     {\n       tree value = TREE_VALUE (method_list);\n-      if (value == t)\n+      tree purpose = TREE_PURPOSE (method_list);\n+      if (value == t && purpose == special)\n \treturn i;\n       i++;\n       if (TREE_CHAIN (method_list) == NULL_TREE)\n@@ -2232,12 +2240,12 @@ get_symbol_table_index (tree t, tree *symbol_table)\n         method_list = TREE_CHAIN (method_list);\n     }\n \n-  TREE_CHAIN (method_list) = build_tree_list (t, t);\n+  TREE_CHAIN (method_list) = build_tree_list (special, t);\n   return i;\n }\n \n tree \n-build_invokevirtual (tree dtable, tree method)\n+build_invokevirtual (tree dtable, tree method, tree special)\n {\n   tree func;\n   tree nativecode_ptr_ptr_type_node\n@@ -2251,7 +2259,8 @@ build_invokevirtual (tree dtable, tree method)\n \n       otable_index \n \t= build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t (method, &TYPE_OTABLE_METHODS (output_class)));\n+\t\t\t (method, special,\n+\t\t\t  &TYPE_OTABLE_METHODS (output_class)));\n       method_index = build4 (ARRAY_REF, integer_type_node, \n \t\t\t     TYPE_OTABLE_DECL (output_class), \n \t\t\t     otable_index, NULL_TREE, NULL_TREE);\n@@ -2307,7 +2316,7 @@ build_invokeinterface (tree dtable, tree method)\n     {\n       int itable_index \n \t= 2 * (get_symbol_table_index \n-\t       (method, &TYPE_ITABLE_METHODS (output_class)));\n+\t       (method, NULL_TREE, &TYPE_ITABLE_METHODS (output_class)));\n       interface \n \t= build4 (ARRAY_REF, \n \t\t TREE_TYPE (TREE_TYPE (TYPE_ITABLE_DECL (output_class))),\n@@ -2360,6 +2369,8 @@ expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n   tree call, func, method, arg_list, method_type;\n   tree check = NULL_TREE;\n \n+  tree special = NULL_TREE;\n+\n   if (! CLASS_LOADED_P (self_type))\n     {\n       load_class (self_type, 1);\n@@ -2474,12 +2485,13 @@ expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n   arg_list = pop_arguments (TYPE_ARG_TYPES (method_type));\n   flush_quick_stack ();\n \n-  maybe_rewrite_invocation (&method, &arg_list, &method_signature);\n+  maybe_rewrite_invocation (&method, &arg_list, &method_signature,\n+\t\t\t    &special);\n \n   func = NULL_TREE;\n   if (opcode == OPCODE_invokestatic)\n     func = build_known_method_ref (method, method_type, self_type,\n-\t\t\t\t   method_signature, arg_list);\n+\t\t\t\t   method_signature, arg_list, special);\n   else if (opcode == OPCODE_invokespecial\n \t   || (opcode == OPCODE_invokevirtual\n \t       && (METHOD_PRIVATE (method)\n@@ -2499,14 +2511,14 @@ expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n       TREE_VALUE (arg_list) = save_arg;\n       check = java_check_reference (save_arg, ! DECL_INIT_P (method));\n       func = build_known_method_ref (method, method_type, self_type,\n-\t\t\t\t     method_signature, arg_list);\n+\t\t\t\t     method_signature, arg_list, special);\n     }\n   else\n     {\n       tree dtable = invoke_build_dtable (opcode == OPCODE_invokeinterface, \n \t\t\t\t\t arg_list);\n       if (opcode == OPCODE_invokevirtual)\n-\tfunc = build_invokevirtual (dtable, method);\n+\tfunc = build_invokevirtual (dtable, method, special);\n       else\n \tfunc = build_invokeinterface (dtable, method);\n     }"}, {"sha": "7f483d4d7e6887f18984d57318dfdc9e84c3e3d4", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "patch": "@@ -1241,11 +1241,11 @@ extern tree check_for_builtin (tree, tree);\n extern void initialize_builtins (void);\n \n extern tree lookup_name (tree);\n-extern void maybe_rewrite_invocation (tree *, tree *, tree *);\n-extern tree build_known_method_ref (tree, tree, tree, tree, tree);\n+extern void maybe_rewrite_invocation (tree *, tree *, tree *, tree *);\n+extern tree build_known_method_ref (tree, tree, tree, tree, tree, tree);\n extern tree build_class_init (tree, tree);\n extern int attach_init_test_initialization_flags (void **, void *);\n-extern tree build_invokevirtual (tree, tree);\n+extern tree build_invokevirtual (tree, tree, tree);\n extern tree build_invokeinterface (tree, tree);\n extern tree build_jni_stub (tree);\n extern tree invoke_build_dtable (int, tree);\n@@ -1393,7 +1393,7 @@ extern void register_exception_range(struct eh_range *, int, int);\n extern void finish_method (tree);\n extern void java_expand_body (tree);\n \n-extern int get_symbol_table_index (tree, tree *);\n+extern int get_symbol_table_index (tree, tree, tree *);\n \n extern tree make_catch_class_record (tree, tree);\n extern tree emit_catch_table (tree);"}, {"sha": "c93a93f94b0dbb1ee291347b3f20d531300f4ee1", "filename": "gcc/java/parse.y", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313ab5ee9c2616aa6c3058cf992d2f69b52fc2db/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=313ab5ee9c2616aa6c3058cf992d2f69b52fc2db", "patch": "@@ -11043,8 +11043,14 @@ patch_invoke (tree patch, tree method, tree args)\n       switch (invocation_mode (method, CALL_USING_SUPER (patch)))\n \t{\n \tcase INVOKE_VIRTUAL:\n-\t  dtable = invoke_build_dtable (0, args);\n-\t  func = build_invokevirtual (dtable, method);\n+\t  {\n+\t    tree signature = build_java_signature (TREE_TYPE (method));\n+\t    tree special;\n+\t    maybe_rewrite_invocation (&method, &args, &signature, &special);\n+\n+\t    dtable = invoke_build_dtable (0, args);\n+\t    func = build_invokevirtual (dtable, method, special);\n+\t  }\n \t  break;\n \n \tcase INVOKE_NONVIRTUAL:\n@@ -11066,10 +11072,11 @@ patch_invoke (tree patch, tree method, tree args)\n \tcase INVOKE_STATIC:\n \t  {\n \t    tree signature = build_java_signature (TREE_TYPE (method));\n-\t    maybe_rewrite_invocation (&method, &args, &signature);\n+\t    tree special;\n+\t    maybe_rewrite_invocation (&method, &args, &signature, &special);\n \t    func = build_known_method_ref (method, TREE_TYPE (method),\n \t\t\t\t\t   DECL_CONTEXT (method),\n-\t\t\t\t\t   signature, args);\n+\t\t\t\t\t   signature, args, special);\n \t  }\n \t  break;\n "}]}