{"sha": "4f074454bb3b48ca84cac7d467858d54496e1a93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwNzQ0NTRiYjNiNDhjYTg0Y2FjN2Q0Njc4NThkNTQ0OTZlMWE5Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-31T11:55:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-31T11:55:27Z"}, "message": "Define CAN_DEBUG_WITHOUT_FP; delete OPTIMIZATION_OPTIONS.\n\nFrom-SVN: r6348", "tree": {"sha": "26fdeec363667afd7fe1c8dfca60d9d636dade46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26fdeec363667afd7fe1c8dfca60d9d636dade46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f074454bb3b48ca84cac7d467858d54496e1a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f074454bb3b48ca84cac7d467858d54496e1a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f074454bb3b48ca84cac7d467858d54496e1a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f074454bb3b48ca84cac7d467858d54496e1a93/comments", "author": null, "committer": null, "parents": [{"sha": "b0f43a24b7806ab03e470fcd852e2a116c741e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f43a24b7806ab03e470fcd852e2a116c741e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f43a24b7806ab03e470fcd852e2a116c741e81"}], "stats": {"total": 129, "additions": 16, "deletions": 113}, "files": [{"sha": "cc32cc9788d391ee3a0d24a91d5b735ad7068b5f", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -107,17 +107,8 @@ extern int target_flags;\n \n #define TARGET_DEFAULT 3\n \n-/* Define this to change the optimizations performed by default.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n-{\t\t\t\t\t\\\n-  if ((LEVEL) > 0)\t\t\t\\\n-    {\t\t\t\t\t\\\n-      flag_force_addr = 1;\t\t\\\n-      flag_force_mem = 1;\t\t\\\n-      flag_omit_frame_pointer = 1;\t\\\n-    }\t\t\t\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n "}, {"sha": "dafb4a8c0c5ade893db81477d403345929b4c8ce", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -107,17 +107,8 @@ extern int target_flags;\n     for (i = 32; i < 64; i++)\t\t\\\n       fixed_regs[i] = call_used_regs[i] = 1;\n \n-/* Define this to change the optimizations performed by default.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n-{\t\t\t\t\t\\\n-  if ((LEVEL) > 0)\t\t\t\\\n-    {\t\t\t\t\t\\\n-      flag_force_addr = 1;\t\t\\\n-      flag_force_mem = 1;\t\t\\\n-      flag_omit_frame_pointer = 1;\t\\\n-    }\t\t\t\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n "}, {"sha": "ddb6ed517c48cc7053f131b7bae2d7e6ea14a211", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -52,17 +52,8 @@ extern int target_flags;\n #define TARGET_DEFAULT TARGET_C300\n #endif\n \n-/* Omit frame pointer at -O2.  Inline functions at -O3.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\t\\\n-{\t\t\t\t\t\t\\\n-  if ((LEVEL) >= 2)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      flag_omit_frame_pointer = 1;\t\t\\\n-    }\t\t\t\t\t\t\\\n-  if ((LEVEL) >= 3)\t\t\t\t\\\n-    flag_inline_functions = 1;\t\t\t\\\n-}\n+/* Show that we can debug generated code without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Target machine storage layout */\n "}, {"sha": "961a6de2435c04d60cf316f149dbe066df6fc7b1", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -157,39 +157,8 @@ extern char * reg_names[];\n #define MONITOR_GCC 0\n #endif\n \f\n-/*** Controlling the Compilation Driver, `gcc' ***/\n-\n-/* Some machines may desire to change what optimizations are performed for\n-   various optimization levels.   This macro, if defined, is executed once\n-   just after the optimization level is determined and before the remainder\n-   of the command options have been parsed.  Values set in this macro are\n-   used as the default values for the other command line options.\n-\n-   LEVEL is the optimization level specified; 2 if -O2 is specified,\n-   1 if -O is specified, and 0 if neither is specified.  */\n-\n-/* This macro used to store 0 in flag_signed_bitfields.\n-   Not only is that misuse of this macro; the whole idea is wrong.\n-\n-   The GNU C dialect makes bitfields signed by default,\n-   regardless of machine type.  Making any machine inconsistent in this\n-   regard is bad for portability.\n-\n-   I chose to make bitfields signed by default because this is consistent\n-   with the way ordinary variables are handled: `int' equals `signed int'.\n-   If there is a good reason to prefer making bitfields unsigned by default,\n-   it cannot have anything to do with the choice of machine.\n-   If the reason is good enough, we should change the convention for all machines.\n-\n-   -- rms, 20 July 1991.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    if (LEVEL)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\\\n-\tflag_omit_frame_pointer = 1;\t\t\t\\\n-      }\t\t\t\t\t\t\t\\\n-  } while (0)\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \n /* If -m88100 is in effect, add -D__m88100__; similarly for -m88110.\n    Here, the CPU_DEFAULT is assumed to be -m88100.  */"}, {"sha": "f8c6556fc26f540b33ad5ecf7bc709d7f78d925d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -161,13 +161,8 @@ extern int target_flags;\n     warning (\"-fpic and -fPIC are not supported on the PA.\");\t\\\n }\n \n-/* Omit frame pointer at high optimization levels.  */\n-\n-#define OPTIMIZATION_OPTIONS(OPTIMIZE) \\\n-{  \t\t\t\t\t\t\t\t\\\n-  if (OPTIMIZE >= 2) \t\t\t\t\t\t\\\n-    flag_omit_frame_pointer = 1;\t\t\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \n /* Names to predefine in the preprocessor for this target machine.  */\n "}, {"sha": "721058a3202e9eddcef3d4baa9892d8d2e8a1c2e", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -69,20 +69,6 @@ extern int target_flags;\n     { \"\", TARGET_DEFAULT}}\n \n #define TARGET_DEFAULT 3\n-\n-/* Define this to change the optimizations performed by default.\n-\n-   This used to depend on the value of write_symbols,\n-   but that is contrary to the general plan for GCC options.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n-{\t\t\t\t\t\\\n-  if ((LEVEL) > 0)\t\t\t\\\n-    {\t\t\t\t\t\\\n-      flag_force_addr = 1;\t\t\\\n-      flag_force_mem = 1;\t\t\\\n-    }\t\t\t\t\t\\\n-}\n \f\n /* target machine storage layout */\n "}, {"sha": "9ada748b0392c10a9c3786fe001e562712502618", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -190,14 +190,8 @@ extern char *rs6000_cpu_string;\n \n #define OVERRIDE_OPTIONS rs6000_override_options ()\n \n-#define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n-{\t\t\t\t\t\\\n-  if ((LEVEL) > 0)\t\t\t\\\n-    {\t\t\t\t\t\\\n-      flag_force_mem = 1;\t\t\\\n-      flag_omit_frame_pointer = 1;\t\\\n-    }\t\t\t\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n "}, {"sha": "d59e8ec46ce18063e126e307fe3ada36ec69902f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -34,15 +34,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define CPP_PREDEFINES \"-D__sh__ -Acpu(sh) -Amachine(sh)\"\n \n-\n-/* Omitting the frame pointer is a very good idea on the SH */\n-\n-#define OPTIMIZATION_OPTIONS(OPTIMIZE)  \\\n-{\t\t\t\t\t\\\n-  if (OPTIMIZE)\t\t\t\t\\\n-    flag_omit_frame_pointer = 1;\t\\\n-   if (OPTIMIZE==0)OPTIMIZE=1;\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \f\n /* Run-time compilation parameters selecting different hardware subsets. */\n "}, {"sha": "41dcdfddb2a3f49cf88bc9eafe59cb4f5324df8f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f074454bb3b48ca84cac7d467858d54496e1a93/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=4f074454bb3b48ca84cac7d467858d54496e1a93", "patch": "@@ -49,15 +49,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n \n-/* Omit frame pointer at high optimization levels.  */\n-  \n-#define OPTIMIZATION_OPTIONS(OPTIMIZE) \\\n-{  \t\t\t\t\t\t\t\t\\\n-  if (OPTIMIZE >= 2) \t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      flag_omit_frame_pointer = 1;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n \n /* To make profiling work with -f{pic,PIC}, we need to emit the profiling\n    code into the rtl.  Also, if we are profiling, we cannot eliminate"}]}