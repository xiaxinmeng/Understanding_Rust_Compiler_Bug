{"sha": "cdfb2db0130565d8037bc1372a258d57325d5c2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmYjJkYjAxMzA1NjVkODAzN2JjMTM3MmEyNThkNTczMjVkNWMyYg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-29T07:16:03Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-29T07:16:03Z"}, "message": "AVX-512. 89/n. Improve mask move insn generation.\n\ngcc/\n\t* config/i386/i386.md\n\t(movhi_internal): Always detect maskmov.\n\t(movqi_internal): Fix target check.\ngcc/testsuite/\n\t* gcc.target/i386/avx512dq-kmovb-1.c: New.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216820", "tree": {"sha": "d992c6c4ad7add50d8d709cc50ac4fd71c613c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d992c6c4ad7add50d8d709cc50ac4fd71c613c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdfb2db0130565d8037bc1372a258d57325d5c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfb2db0130565d8037bc1372a258d57325d5c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfb2db0130565d8037bc1372a258d57325d5c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfb2db0130565d8037bc1372a258d57325d5c2b/comments", "author": null, "committer": null, "parents": [{"sha": "eee5d6f5271132ac65553c0accae401f17f91182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee5d6f5271132ac65553c0accae401f17f91182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee5d6f5271132ac65553c0accae401f17f91182"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "514cdd549900df7f52393565dedd2668513805bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdfb2db0130565d8037bc1372a258d57325d5c2b", "patch": "@@ -1,3 +1,16 @@\n+2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.md\n+\t(movhi_internal): Always detect maskmov.\n+\t(movqi_internal): Fix target check.\n+\n 2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "23ef131981e07a78b4f5f8c19e0aa46d260d3a71", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cdfb2db0130565d8037bc1372a258d57325d5c2b", "patch": "@@ -2396,7 +2396,9 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n+     (cond [(eq_attr \"alternative\" \"4,5,6\")\n+\t      (const_string \"mskmov\")\n+\t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"0\")\n \t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n@@ -2405,8 +2407,6 @@\n \t    (and (eq_attr \"alternative\" \"1,2\")\n \t\t (match_operand:HI 1 \"aligned_operand\"))\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"4,5,6\")\n-\t      (const_string \"mskmov\")\n \t    (and (match_test \"TARGET_MOVX\")\n \t\t (eq_attr \"alternative\" \"0,2\"))\n \t      (const_string \"imovx\")\n@@ -2442,9 +2442,9 @@\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\"\n-\t\t\t\"=q,q ,q ,r,r ,?r,m ,k,k,r\")\n+\t\t\t\"=q,q ,q ,r,r ,?r,m ,k,k,r ,m,k\")\n \t(match_operand:QI 1 \"general_operand\"\n-\t\t\t\"q ,qn,qm,q,rn,qm,qn,r ,k,k\"))]\n+\t\t\t\"q ,qn,qm,q,rn,qm,qn,r ,k,k,k,m\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2456,12 +2456,16 @@\n     case TYPE_MSKMOV:\n       switch (which_alternative)\n         {\n-\tcase 7: return TARGET_AVX512BW ? \"kmovb\\t{%k1, %0|%0, %k1}\"\n+\tcase 7: return TARGET_AVX512DQ ? \"kmovb\\t{%k1, %0|%0, %k1}\"\n \t\t\t\t       : \"kmovw\\t{%k1, %0|%0, %k1}\";\n-\tcase 8: return TARGET_AVX512BW ? \"kmovb\\t{%1, %0|%0, %1}\"\n+\tcase 8: return TARGET_AVX512DQ ? \"kmovb\\t{%1, %0|%0, %1}\"\n \t\t\t\t       : \"kmovw\\t{%1, %0|%0, %1}\";\n-\tcase 9: return TARGET_AVX512BW ? \"kmovb\\t{%1, %k0|%k0, %1}\"\n+\tcase 9: return TARGET_AVX512DQ ? \"kmovb\\t{%1, %k0|%k0, %1}\"\n \t\t\t\t       : \"kmovw\\t{%1, %k0|%k0, %1}\";\n+\tcase 10:\n+\tcase 11:\n+\t  gcc_assert (TARGET_AVX512DQ);\n+\t  return \"kmovb\\t{%1, %0|%0, %1}\";\n \tdefault: gcc_unreachable ();\n \t}\n \n@@ -2472,8 +2476,13 @@\n         return \"mov{b}\\t{%1, %0|%0, %1}\";\n     }\n }\n-  [(set (attr \"type\")\n-     (cond [(and (eq_attr \"alternative\" \"5\")\n+  [(set_attr \"isa\" \"*,*,*,*,*,*,*,*,*,*,avx512dq,avx512dq\")\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"3,5\")\n+\t      (const_string \"imovx\")\n+\t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n+\t      (const_string \"mskmov\")\n+\t    (and (eq_attr \"alternative\" \"5\")\n \t\t (not (match_operand:QI 1 \"aligned_operand\")))\n \t      (const_string \"imovx\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n@@ -2482,10 +2491,6 @@\n \t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n \t\t      (not (match_test \"TARGET_QIMODE_MATH\"))))\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"3,5\")\n-\t      (const_string \"imovx\")\n-\t    (eq_attr \"alternative\" \"7,8,9\")\n-\t      (const_string \"mskmov\")\n \t    (and (match_test \"TARGET_MOVX\")\n \t\t (eq_attr \"alternative\" \"2\"))\n \t      (const_string \"imovx\")"}, {"sha": "e8ec94a97d7b0a9b992f08ed10963477de1e204d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdfb2db0130565d8037bc1372a258d57325d5c2b", "patch": "@@ -7,6 +7,17 @@\n \t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n+\t* gcc.target/i386/avx512dq-kmovb-1.c: New.\n+\n+2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n \t* gcc.target/i386/avx512bw-vpcmpequb-1.c: New.\n \t* gcc.target/i386/avx512bw-vpcmpequb-2.c: Ditto.\n \t* gcc.target/i386/avx512bw-vpcmpequw-1.c: Ditto."}, {"sha": "c886b5f08ecdf6d18015ea58db05b05cfb555ef6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb2db0130565d8037bc1372a258d57325d5c2b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-1.c?ref=cdfb2db0130565d8037bc1372a258d57325d5c2b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler \"kmovb\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_mask_add_pd (x, m, x, x);\n+}"}]}