{"sha": "2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "node_id": "C_kwDOANBUbNoAKDJiNDhlNjI4YjBmMmY3YzI1MGMzMTU3NzY5ZTY0MWUyYzlhOWNhNmI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:16:58Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:24Z"}, "message": "RISC-V: Add vsoxei C API intrinsic testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vsoxei16_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei16_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei16_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei16_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei16_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei16_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei32_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei64_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsoxei8_v_m-3.c: New test.", "tree": {"sha": "b050130613caaa685da69a403e3b698b9b0da2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b050130613caaa685da69a403e3b698b9b0da2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2309e667fc53e4803d3907f245c2de246d56d9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2309e667fc53e4803d3907f245c2de246d56d9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2309e667fc53e4803d3907f245c2de246d56d9e0"}], "stats": {"total": 7488, "additions": 7488, "deletions": 0}, "files": [{"sha": "3ae8e0934e085957c529b53b8e1b0b7eb4514fb6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v-1.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "4d900e211cb13246fc862d83262c46bf0fd406e9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v-2.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "409a5dfe2f8f1e45d540790f152b89fd956f5cce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v-3.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "ad67492b5e987cb1a3a0708604023f232f6cc7a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v_m-1.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8585c4dcda8a4c8ddbbb9795fffd534b0a46edd8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v_m-2.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c032df5633a82987bd934c6a8276f9348c8a0245", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei16_v_m-3.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei16_v_m-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei16_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "87b11ce54c0423f14cf8aece8f8387256d003be3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v-1.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "c9c25a0c933e022203a4fd12f557ad310faed2e3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v-2.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "574b76c1fc67f65a5f34cfe2df3bb382ca0d94a7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v-3.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "16b05164fcc51063f3879958930abbb31aa0687f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v_m-1.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "45b4af4368b204337cff319c2d06cd4a45f8fba1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v_m-2.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4194dc6394ca5681ff609ae957721052a9af1fc4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei32_v_m-3.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei32_v_m-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei32_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7bc1e3809b0f4316ab00b8085f75daed85663948", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "cdc586faa6824453d20e0ea8be98bfb12666904c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "3af5f9f26e90496d0a2c3300cdb30a6a35cb29f1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "366032bfbbb5d60b3805a4e5460999ca39c3f69c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v_m-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ba50f88280f5c35e6762f086456921fc64a5e121", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v_m-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "d0783234767e164b4485c7e4aae6d3a755123a4e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei64_v_m-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei64_v_m-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei64_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0adff2678d6da4e1ab0e0b10a0ba9047055d6f45", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v-1.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "60624aed5826623c748af0f566214d336b1fd53a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v-2.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "8f21adcc7f4073f02fdad8e8e86bad20752f7306", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v-3.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "3a8fdfeb9f7656a345992a18aa94e46198df16e8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v_m-1.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-1.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "412152c26ce68a235f955ff3ce0bdba1d7f8eebd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v_m-2.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-2.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c4ff5d2eda9bc07d3f731ece9fe32af32c2cda05", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsoxei8_v_m-3.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsoxei8_v_m-3.c?ref=2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsoxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i8m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u8m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsoxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsoxei8_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsoxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}