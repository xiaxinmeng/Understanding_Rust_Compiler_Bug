{"sha": "72ac1c070c335b404c28d57518ff8c26c78be022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhYzFjMDcwYzMzNWI0MDRjMjhkNTc1MThmZjhjMjZjNzhiZTAyMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-10-21T10:32:02Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-10-21T10:32:02Z"}, "message": "re PR fortran/54465 (Implement -Wextra for Fortran)\n\n2012-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/54465\n\t* lang.opt (Wextra):  Add.\n\t* invoke.texi:  Document that -Wc-binding-type, -Wconversion\n\tand -Wline-truncation are implied by -Wall.  Document that\n\t-Wcompare-reals is implied by -Wextra.  Document -Wextra.\n\t* options.c (set_Wextra):  New function.\n\t(gfc_handle_option):  Handle -Wextra.\n\n2012-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/54465\n\t* gfortran.dg/wextra_1.f:  New test.\n\nFrom-SVN: r192649", "tree": {"sha": "e45831dd86e24d69631bde816807ddf8d60030cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e45831dd86e24d69631bde816807ddf8d60030cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72ac1c070c335b404c28d57518ff8c26c78be022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ac1c070c335b404c28d57518ff8c26c78be022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ac1c070c335b404c28d57518ff8c26c78be022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ac1c070c335b404c28d57518ff8c26c78be022/comments", "author": null, "committer": null, "parents": [{"sha": "699ae4b58550cf88c77e4654567328d3ab9d2234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699ae4b58550cf88c77e4654567328d3ab9d2234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699ae4b58550cf88c77e4654567328d3ab9d2234"}], "stats": {"total": 91, "additions": 75, "deletions": 16}, "files": [{"sha": "2ba0506944406169289b715debf5b2a360dbdb49", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -1,3 +1,13 @@\n+2012-10-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54465\n+\t* lang.opt (Wextra):  Add.\n+\t* invoke.texi:  Document that -Wc-binding-type, -Wconversion\n+\tand -Wline-truncation are implied by -Wall.  Document that\n+\t-Wcompare-reals is implied by -Wextra.  Document -Wextra.\n+\t* options.c (set_Wextra):  New function.\n+\t(gfc_handle_option):  Handle -Wextra.\n+\n 2012-10-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54224"}, {"sha": "d7c32195161ec7ff8c1ea0be3f5c8dba314664ed", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -727,7 +727,7 @@ warnings.\n Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing}, @option{-Wampersand},\n-@option{-Wconversion}, @option{-Wsurprising},\n+@option{-Wconversion}, @option{-Wsurprising}, @option{-Wc-binding-type},\n @option{-Wintrinsics-std}, @option{-Wno-tabs}, @option{-Wintrinsic-shadow},\n @option{-Wline-truncation}, @option{-Wtarget-lifetime},\n @option{-Wreal-q-constant} and @option{-Wunused}.\n@@ -778,7 +778,8 @@ avoid such temporaries.\n Warn if the a variable might not be C interoperable.  In particular, warn if \n the variable has been declared using an intrinsic type with default kind\n instead of using a kind parameter defined for C interoperability in the\n-intrinsic @code{ISO_C_Binding} module.\n+intrinsic @code{ISO_C_Binding} module.  This option is implied by\n+@option{-Wall}.\n \n @item -Wcharacter-truncation\n @opindex @code{Wcharacter-truncation}\n@@ -788,7 +789,8 @@ Warn when a character assignment will truncate the assigned string.\n @item -Wline-truncation\n @opindex @code{Wline-truncation}\n @cindex warnings, line truncation\n-Warn when a source code line will be truncated.\n+Warn when a source code line will be truncated.  This option is\n+implied by @option{-Wall}.\n \n @item -Wconversion\n @opindex @code{Wconversion}\n@@ -803,6 +805,14 @@ the expression after conversion. Implied by @option{-Wall}.\n @cindex conversion\n Warn about implicit conversions between different types and kinds.\n \n+@item -Wextra\n+@opindex @code{Wextra}\n+@cindex extra warnings\n+@cindex warnings, extra\n+Enables some warning options for usages of language features which\n+may be problematic. This currently includes @option{-Wcompare-reals}\n+and @option{-Wunused-parameter}.\n+\n @item -Wimplicit-interface\n @opindex @code{Wimplicit-interface}\n @cindex warnings, implicit interface\n@@ -884,7 +894,7 @@ encountered, which yield an UNDERFLOW during compilation.\n Warn if a user-defined procedure or module procedure has the same name as an\n intrinsic; in this case, an explicit interface or @code{EXTERNAL} or\n @code{INTRINSIC} declaration might be needed to get calls later resolved to\n-the desired intrinsic/procedure.\n+the desired intrinsic/procedure.  This option is implied by @option{-Wall}.\n \n @item -Wunused-dummy-argument\n @opindex @code{Wunused-dummy-argument}\n@@ -939,6 +949,7 @@ allocatable variable; this includes scalars and derived types.\n @item -Wcompare-reals\n @opindex @code{Wcompare-reals}\n Warn when comparing real or complex types for equality or inequality.\n+This option is implied by @option{-Wextra}.\n \n @item -Wtarget-lifetime\n @opindex @code{Wtargt-lifetime}"}, {"sha": "15351876c19530461a76c037c8a8e274e8fa564c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -230,6 +230,10 @@ Wconversion-extra\n Fortran Warning\n Warn about most implicit conversions\n \n+Wextra\n+Fortran Warning\n+Print extra (possibly unwanted) warnings\n+\n Wfunction-elimination\n Fortran Warning\n Warn about function call elimination"}, {"sha": "08c551451e98a350f40b985dd027d228f8aba582", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -483,6 +483,13 @@ set_Wall (int setting)\n   warn_maybe_uninitialized = setting;\n }\n \n+/* Set the options for -Wextra.  */\n+\n+static void\n+set_Wextra (int setting)\n+{\n+  gfc_option.warn_compare_reals = setting;\n+}\n \n static void\n gfc_handle_module_path_options (const char *arg)\n@@ -653,6 +660,15 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_conversion_extra = value;\n       break;\n \n+    case OPT_Wextra:\n+      handle_generated_option (&global_options, &global_options_set,\n+\t\t\t       OPT_Wunused_parameter, NULL, value,\n+\t\t\t       gfc_option_lang_mask (), kind, loc,\n+\t\t\t       handlers, global_dc);\n+      set_Wextra (value);\n+\n+      break;\n+\n     case OPT_Wfunction_elimination:\n       gfc_option.warn_function_elimination = value;\n       break;"}, {"sha": "7c2d47250d4d6eaa2beb91b84417e14e020757c8", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -814,26 +814,23 @@ gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree token,\n }\n \n \n-/* Free a given variable, if it's not NULL.  */\n+/* Free a given variable.  If it is NULL, free takes care of this\n+   automatically.  */\n tree\n gfc_call_free (tree var)\n {\n   stmtblock_t block;\n-  tree tmp, cond, call;\n+  tree call;\n \n   if (TREE_TYPE (var) != TREE_TYPE (pvoid_type_node))\n     var = fold_convert (pvoid_type_node, var);\n \n   gfc_start_block (&block);\n   var = gfc_evaluate_now (var, &block);\n-  cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node, var,\n-\t\t\t  build_int_cst (pvoid_type_node, 0));\n   call = build_call_expr_loc (input_location,\n \t\t\t      builtin_decl_explicit (BUILT_IN_FREE),\n \t\t\t      1, var);\n-  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond, call,\n-\t\t\t build_empty_stmt (input_location));\n-  gfc_add_expr_to_block (&block, tmp);\n+  gfc_add_expr_to_block (&block, call);\n \n   return gfc_finish_block (&block);\n }\n@@ -861,11 +858,10 @@ gfc_call_free (tree var)\n \t}\n     }\n \n-   In this front-end version, status doesn't have to be GFC_INTEGER_4.\n-   Moreover, if CAN_FAIL is true, then we will not emit a runtime error,\n-   even when no status variable is passed to us (this is used for\n-   unconditional deallocation generated by the front-end at end of\n-   each procedure).\n+   In this front-end version, status doesn't have to be GFC_INTEGER_4.  If\n+   CAN_FAIL is true, no status variable is passed and we are not dealing with\n+   a coarray, we will simply call free().  This is used for unconditional\n+   deallocation generated by the front-end at end of each procedure.\n    \n    If a runtime-message is possible, `expr' must point to the original\n    expression being deallocated for its locus and variable name.\n@@ -890,6 +886,14 @@ gfc_deallocate_with_status (tree pointer, tree status, tree errmsg,\n       STRIP_NOPS (pointer);\n     }\n \n+  else if (can_fail && status == NULL_TREE)\n+    {\n+      tmp = build_call_expr_loc (input_location,\n+\t\t\t\t builtin_decl_explicit (BUILT_IN_FREE), 1,\n+\t\t\t\t fold_convert (pvoid_type_node, pointer));\n+      return tmp;\n+    }\n+\n   cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node, pointer,\n \t\t\t  build_int_cst (TREE_TYPE (pointer), 0));\n "}, {"sha": "7999b9770601dcaae12bcca91ac08980344ddb05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -1,3 +1,8 @@\n+2012-10-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54465\n+\t* gfortran.dg/wextra_1.f:  New test.\n+\n 2012-10-20  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-prof/unroll-1.c: New testcase."}, {"sha": "94c8eddec097efeb15d05455093bab9d4bcc036e", "filename": "gcc/testsuite/gfortran.dg/wextra_1.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ftestsuite%2Fgfortran.dg%2Fwextra_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac1c070c335b404c28d57518ff8c26c78be022/gcc%2Ftestsuite%2Fgfortran.dg%2Fwextra_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwextra_1.f?ref=72ac1c070c335b404c28d57518ff8c26c78be022", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-Wextra\" }\n+      program main\n+      integer, parameter :: x=3 ! { dg-warning \"Unused parameter\" }\n+      real :: a\n+      read (*,*) a\n+      if (a .eq. 3.14) a=2.     ! { dg-warning \"Equality comparison\" }\n+      print *,a\n+      end"}]}