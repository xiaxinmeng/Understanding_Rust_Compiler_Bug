{"sha": "317639a81c1c666ab67014d458da7cb57a554a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3NjM5YTgxYzFjNjY2YWI2NzAxNGQ0NThkYTdjYjU3YTU1NGE5Mg==", "commit": {"author": {"name": "Branko Cibej", "email": "branko.cibej@hermes.si", "date": "2000-09-25T22:54:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-25T22:54:04Z"}, "message": "flags.h: Declare warning flag warn_system_headers.\n\n\n2000-09-25  Branko Cibej  <branko.cibej@hermes.si>\n\n        * flags.h:  Declare warning flag warn_system_headers.\n        * toplev.c:  Define it.\n        (W_options): Add option -Wsystem-headers.\n        * diagnostic.c (count_error): Test warn_system_headers.\n        * invoke.texi:  Add description for -Wsystem-headers.\n\t* cpplib.h (cpp_options): New member warn_system_headers.\n\t* cpphash.h (CPP_PEDANTIC, CPP_WTRADITIONAL): Don't test\n\tCPP_IN_SYSTEM_HEADER.\n\t* cpplib.c (do_import, do_pragma_once): Likewise.\n\t* cpperror.c (_cpp_begin_message): Test warn_system_headers\n\tand CPP_IN_SYSTEM_HEADER.\n\t* cppinit.c (handle_option): Recognize -Wsystem_headers.\n\t(print_help): Describe -Wsystem_headers.\n\t* cpplex.c (lex_line): Reorganize condition so that warnings\n\tabout C++ comments in system headers can be enabled. Remove\n\tlabel do_line_comment.\n\nFrom-SVN: r36636", "tree": {"sha": "7fc11a6b7a593988efb1e370c5443cd4e490aeb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc11a6b7a593988efb1e370c5443cd4e490aeb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317639a81c1c666ab67014d458da7cb57a554a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317639a81c1c666ab67014d458da7cb57a554a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317639a81c1c666ab67014d458da7cb57a554a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317639a81c1c666ab67014d458da7cb57a554a92/comments", "author": null, "committer": null, "parents": [{"sha": "1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6d33efb4d9725b537e72c7b18efeeb638c55bc"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "d2a5f1ed1b11a2726154b197cf7e11cf860d7164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -1,3 +1,22 @@\n+2000-09-25  Branko Cibej  <branko.cibej@hermes.si>\n+\n+        * flags.h:  Declare warning flag warn_system_headers.\n+        * toplev.c:  Define it.\n+        (W_options): Add option -Wsystem-headers.\n+        * diagnostic.c (count_error): Test warn_system_headers.\n+        * invoke.texi:  Add description for -Wsystem-headers.\n+\t* cpplib.h (cpp_options): New member warn_system_headers.\n+\t* cpphash.h (CPP_PEDANTIC, CPP_WTRADITIONAL): Don't test\n+\tCPP_IN_SYSTEM_HEADER.\n+\t* cpplib.c (do_import, do_pragma_once): Likewise.\n+\t* cpperror.c (_cpp_begin_message): Test warn_system_headers\n+\tand CPP_IN_SYSTEM_HEADER.\n+\t* cppinit.c (handle_option): Recognize -Wsystem_headers.\n+\t(print_help): Describe -Wsystem_headers.\n+\t* cpplex.c (lex_line): Reorganize condition so that warnings\n+\tabout C++ comments in system headers can be enabled. Remove\n+\tlabel do_line_comment.\n+\n Mon 25-Sep-2000 23:38:27 BST  Neil Booth  <neilb@earthling.net>\n \n \t* cpplex.c (save_comment): Only store the initial '/'"}, {"sha": "0d6dbfb1a9017569e89d7f70a1f32c6ad21bcb5f", "filename": "gcc/cpperror.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -122,7 +122,9 @@ _cpp_begin_message (pfile, code, file, line, col)\n     case WARNING:\n       if (! CPP_OPTION (pfile, warnings_are_errors))\n \t{\n-\t  if (CPP_OPTION (pfile, inhibit_warnings))\n+          if (CPP_OPTION (pfile, inhibit_warnings)\n+\t      || (CPP_IN_SYSTEM_HEADER (pfile)\n+\t\t  && ! CPP_OPTION (pfile, warn_system_headers)))\n \t    return 0;\n \t  is_warning = 1;\n \t}\n@@ -138,7 +140,9 @@ _cpp_begin_message (pfile, code, file, line, col)\n     case PEDWARN:\n       if (! CPP_OPTION (pfile, pedantic_errors))\n \t{\n-\t  if (CPP_OPTION (pfile, inhibit_warnings))\n+          if (CPP_OPTION (pfile, inhibit_warnings)\n+\t      || (CPP_IN_SYSTEM_HEADER (pfile)\n+\t\t  && ! CPP_OPTION (pfile, warn_system_headers)))\n \t    return 0;\n \t  is_warning = 1;\n \t}"}, {"sha": "8787a6ce406c395b7f8965ec9301de907d5cbb47", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -189,9 +189,9 @@ extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n   (CPP_BUFFER (PFILE) && CPP_BUFFER (PFILE)->inc \\\n    && CPP_BUFFER (PFILE)->inc->sysp)\n #define CPP_PEDANTIC(PF) \\\n-  (CPP_OPTION (PF, pedantic) && !CPP_IN_SYSTEM_HEADER (PF))\n+  CPP_OPTION (PF, pedantic)\n #define CPP_WTRADITIONAL(PF) \\\n-  (CPP_OPTION (PF, warn_traditional) && !CPP_IN_SYSTEM_HEADER (PF))\n+  CPP_OPTION (PF, warn_traditional)\n \n /* Hash step.  The hash calculation is duplicated in cpp_lookup and\n    parse_name.  */"}, {"sha": "d8ec597e4614e8b8a0fca7ebfbde4925e669f93a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -1623,6 +1623,8 @@ cpp_handle_option (pfile, argc, argv)\n \t    CPP_OPTION (pfile, warn_paste) = 1;\n \t  else if (!strcmp (argv[i], \"-Werror\"))\n \t    CPP_OPTION (pfile, warnings_are_errors) = 1;\n+\t  else if (!strcmp (argv[i], \"-Wsystem-headers\"))\n+\t    CPP_OPTION (pfile, warn_system_headers) = 1;\n \t  else if (!strcmp (argv[i], \"-Wno-traditional\"))\n \t    CPP_OPTION (pfile, warn_traditional) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n@@ -1639,6 +1641,8 @@ cpp_handle_option (pfile, argc, argv)\n \t    CPP_OPTION (pfile, warn_paste) = 0;\n \t  else if (!strcmp (argv[i], \"-Wno-error\"))\n \t    CPP_OPTION (pfile, warnings_are_errors) = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-system-headers\"))\n+\t    CPP_OPTION (pfile, warn_system_headers) = 0;\n \t  break;\n  \t}\n     }\n@@ -1735,36 +1739,38 @@ Switches:\\n\\\n   -Wno-import               Do not warn about the use of #import\\n\\\n   -Werror                   Treat all warnings as errors\\n\\\n   -Wno-error                Do not treat warnings as errors\\n\\\n+  -Wsystem-headers          Do not suppress warnings from system headers\\n\\\n+  -Wno-system-headers       Suppress warnings from system headers\\n\\\n   -Wall                     Enable all preprocessor warnings\\n\\\n-  -M                        Generate make dependencies\\n\\\n-  -MM                       As -M, but ignore system header files\\n\\\n \"), stdout);\n   fputs (_(\"\\\n+  -M                        Generate make dependencies\\n\\\n+  -MM                       As -M, but ignore system header files\\n\\\n   -MD                       As -M, but put output in a .d file\\n\\\n   -MMD                      As -MD, but ignore system header files\\n\\\n   -MG                       Treat missing header file as generated files\\n\\\n   -g3                       Include #define and #undef directives in the output\\n\\\n-  -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n-  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n \"), stdout);\n   fputs (_(\"\\\n+  -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n+  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n   -A<question> (<answer>)   Assert the <answer> to <question>\\n\\\n   -A-<question> (<answer>)  Disable the <answer> to <question>\\n\\\n   -U<macro>                 Undefine <macro> \\n\\\n   -v                        Display the version number\\n\\\n-  -H                        Print the name of header files as they are used\\n\\\n-  -C                        Do not discard comments\\n\\\n \"), stdout);\n   fputs (_(\"\\\n+  -H                        Print the name of header files as they are used\\n\\\n+  -C                        Do not discard comments\\n\\\n   -dM                       Display a list of macro definitions active at end\\n\\\n   -dD                       Preserve macro definitions in output\\n\\\n   -dN                       As -dD except that only the names are preserved\\n\\\n   -dI                       Include #include directives in the output\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -ftabstop=<number>        Distance between tab stops for column reporting\\n\\\n   -P                        Do not generate #line directives\\n\\\n   -$                        Do not allow '$' in identifiers\\n\\\n-\"), stdout);\n-  fputs (_(\"\\\n   -remap                    Remap file names when including files.\\n\\\n   --version                 Display version information\\n\\\n   -h or --help              Display this information\\n\\"}, {"sha": "47dcdbc3a84f0bcb51969394405065a654fa9374", "filename": "gcc/cpplex.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -1209,10 +1209,24 @@ lex_token (pfile, result)\n \t     irrespective of conformance mode, because lots of\n \t     broken systems do that and trying to clean it up in\n \t     fixincludes is a nightmare.  */\n-\t  if (!CPP_IN_SYSTEM_HEADER (pfile)\n-\t      && CPP_OPTION (pfile, c89) && CPP_PEDANTIC (pfile)\n-\t      && !buffer->warned_cplusplus_comments)\n+\t  if (CPP_OPTION (pfile, cplusplus_comments)\n+\t      || CPP_IN_SYSTEM_HEADER (pfile))\n \t    {\n+\t      if (CPP_OPTION (pfile, c89) && CPP_PEDANTIC (pfile)\n+\t\t  && ! buffer->warned_cplusplus_comments)\n+\t\t{\n+\t\t  cpp_pedwarn (pfile,\n+\t\t       \"C++ style comments are not allowed in ISO C89\");\n+\t\t  cpp_pedwarn (pfile,\n+\t\t       \"(this will be reported only once per input file)\");\n+\t\t  buffer->warned_cplusplus_comments = 1;\n+\t\t}\n+\t      comment_start = buffer->cur;\n+\n+\t      /* Skip_line_comment updates buffer->read_ahead.  */\n+\t      if (skip_line_comment (pfile))\n+\t\tcpp_warning_with_line (pfile, result->line, result->col,\n+\t\t\t\t       \"multi-line comment\");\n \t      cpp_pedwarn (pfile,\n \t\t\t   \"C++ style comments are not allowed in ISO C89\");\n \t      cpp_pedwarn (pfile,"}, {"sha": "0616e8a7d1d73c877d9d9f89a4b6ab4a48b71997", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -383,8 +383,7 @@ do_import (pfile)\n   const U_CHAR *str;\n   int ab;\n \n-  if (CPP_OPTION (pfile, warn_import)\n-      && !CPP_IN_SYSTEM_HEADER (pfile) && !pfile->import_warning)\n+  if (!pfile->import_warning && CPP_OPTION (pfile, warn_import))\n     {\n       pfile->import_warning = 1;\n       cpp_warning (pfile,\n@@ -801,9 +800,8 @@ do_pragma_once (pfile)\n \n   /* Allow #pragma once in system headers, since that's not the user's\n      fault.  */\n-  if (!CPP_IN_SYSTEM_HEADER (pfile))\n-    cpp_warning (pfile, \"#pragma once is obsolete\");\n-      \n+  cpp_warning (pfile, \"#pragma once is obsolete\");\n+ \n   if (CPP_PREV_BUFFER (ip) == NULL)\n     cpp_warning (pfile, \"#pragma once outside include file\");\n   else"}, {"sha": "9b127136929f069fe0fbedce94fef22be95ea358", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -359,6 +359,9 @@ struct cpp_options\n   /* Nonzero means don't print warning messages.  */\n   unsigned char inhibit_warnings;\n \n+  /* Nonzero means don't suppress warnings from system headers.  */\n+  unsigned char warn_system_headers;\n+\n   /* Nonzero means don't print error messages.  Has no option to\n      select it, but can be set by a user of cpplib (e.g. fix-header).  */\n   unsigned char inhibit_errors;"}, {"sha": "687375f517c41ee80ac76889bf9aaa30ca3f7412", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -1051,7 +1051,9 @@ int\n count_error (warningp)\n      int warningp;\n {\n-  if (warningp && inhibit_warnings)\n+  if (warningp\n+      && (inhibit_warnings\n+          || (in_system_header && !warn_system_headers)))\n     return 0;\n \n   if (warningp && !warnings_are_errors)"}, {"sha": "0a29c4b126d4eeeb6e5362e386d7aaa29680c967", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -79,6 +79,10 @@ extern int mem_report;\n \n extern int inhibit_warnings;\n \n+/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n+\n+extern int warn_system_headers;\n+\n /* Do print extra warnings (such as for uninitialized variables).  -W.  */\n \n extern int extra_warnings;"}, {"sha": "ccf2024fe7dbe4ef8de6a58a75a2d57edd01c10e", "filename": "gcc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -139,7 +139,7 @@ in the following sections.\n -Wmain  -Wmissing-declarations  -Wmissing-noreturn\n -Wmultichar  -Wno-import  -Wpacked  -Wpadded\n -Wparentheses -Wpointer-arith  -Wredundant-decls\n--Wreturn-type -Wshadow  -Wsign-compare -Wswitch\n+-Wreturn-type -Wshadow  -Wsign-compare -Wswitch -Wsystem-headers\n -Wtrigraphs -Wundef  -Wuninitialized  -Wunknown-pragmas -Wunreachable-code \n -Wunused -Wunused-function -Wunused-label -Wunused-parameter\n -Wunused-variable -Wunused-value -Wwrite-strings\n@@ -1705,6 +1705,18 @@ All of the above @samp{-W} options combined.  This enables all the\n warnings about constructions that some users consider questionable, and\n that are easy to avoid (or modify to prevent the warning), even in\n conjunction with macros.\n+\n+@item -Wsystem-headers\n+@cindex warnings from system headers\n+@cindex system headers, warnings from\n+Print warning messages for constructs found in system header files.\n+Warnings from system headers are normally suppressed, on the assumption\n+that they usually do not indicate real problems and would only make the\n+compiler output harder to read.  Using this command line option tells\n+GCC to emit warnings from system headers as if they occurred in user\n+code.  However, note that using @samp{-Wall} in conjunction with this\n+option will @emph{not} warn about unknown pragmas in system\n+headers---for that, @samp{-Wunknown-pragmas} must also be used.\n @end table\n \n The following @samp{-W@dots{}} options are not implied by @samp{-Wall}."}, {"sha": "90a1fecba97796e800d0503cb6f056fd1fc9a99c", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -426,7 +426,7 @@ extern PTR realloc PARAMS ((PTR, size_t));\n \n /* If the system doesn't provide strsignal, we get it defined in\n    libiberty but no declaration is supplied. */\n-#if defined (HAVE_DECL_STRSIGNAL) && !HAVE_DECL_STRSIGNAL\n+#ifndef HAVE_STRSIGNAL\n # ifndef strsignal\n extern const char *strsignal PARAMS ((int));\n # endif"}, {"sha": "6897d5fa2cf71059bdde92cfbdd9486fb9810efd", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317639a81c1c666ab67014d458da7cb57a554a92/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=317639a81c1c666ab67014d458da7cb57a554a92", "patch": "@@ -1307,6 +1307,10 @@ target_options [] = TARGET_OPTIONS;\n \n int inhibit_warnings = 0;\n \n+/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n+\n+int warn_system_headers = 0;\n+\n /* Print various extra warnings.  -W.  */\n \n int extra_warnings = 0;\n@@ -1410,6 +1414,7 @@ lang_independent_options W_options[] =\n   {\"unused-parameter\", &warn_unused_parameter, 1, \"Warn when a function parameter is unused\" },\n   {\"unused-variable\", &warn_unused_variable, 1, \"Warn when a variable is unused\" },\n   {\"unused-value\", &warn_unused_value, 1, \"Warn when an expression value is unused\" },\n+  {\"system-headers\", &warn_system_headers, 1, \"Do not suppress warnings from system headers\"},\n   {\"error\", &warnings_are_errors, 1, \"\"},\n   {\"shadow\", &warn_shadow, 1, \"Warn when one local variable shadows another\" },\n   {\"switch\", &warn_switch, 1,"}]}