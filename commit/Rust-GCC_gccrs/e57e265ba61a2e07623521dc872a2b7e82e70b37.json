{"sha": "e57e265ba61a2e07623521dc872a2b7e82e70b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3ZTI2NWJhNjFhMmUwNzYyMzUyMWRjODcyYTJiN2U4MmU3MGIzNw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-02-03T11:22:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-03T11:22:41Z"}, "message": "re PR c/11658 (Wrong error message)\n\n2004-02-03  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c/11658\n\tPR c/13994\n\t* Makefile.in (c-parse.o, c-convert.o, c-typeck.o): Depend\n\ton langhooks.h.\n\t* objc/Make-lang.in (objc-parse.o): Depend on langhooks.h.\n\t* c-parse.in, c-convert.c, c-typeck.c, objc/objc-act.c:\n\tInclude langhooks.h.  Replace c_common_truthvalue_conversion\n\twith the truthvalue_conversion language hook throughout.\n\t(expr_no_commas): Call default_conversion before save_expr\n\tfor the first term of the production 'x ? : y'.\n\t* c-common.c (c_common_truthvalue_conversion): Remove\n\tobsolete block.  Invoke recursively the hook instead\n\tof this function.\n\t* c-convert.c (convert): handle ERROR_MARK_NODE.\n\t* c-typeck.c (build_binary_op): handle ERROR_MARK_NODE\n\treturned by the truthvalue_conversion language hook.\n\t* c-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Use\n\tc_objc_common_truthvalue_conversion.\n\t* c-objc-common.c (c_objc_common_truthvalue_conversion):\n\tNew function.\n\t* c-tree.h (c_objc_common_truthvalue_conversion): Declare it.\n\t* objc/objc-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Use\n\tc_objc_common_truthvalue_conversion.\n\nFrom-SVN: r77168", "tree": {"sha": "38cfca602874b8689177b11b1cd223ef979c0667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38cfca602874b8689177b11b1cd223ef979c0667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57e265ba61a2e07623521dc872a2b7e82e70b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57e265ba61a2e07623521dc872a2b7e82e70b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57e265ba61a2e07623521dc872a2b7e82e70b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57e265ba61a2e07623521dc872a2b7e82e70b37/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0251aa4518e9c18d00509b52149754e23396777b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251aa4518e9c18d00509b52149754e23396777b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0251aa4518e9c18d00509b52149754e23396777b"}], "stats": {"total": 163, "additions": 104, "deletions": 59}, "files": [{"sha": "d79909bca0debc526505f89c78b2ac0c60eb1d5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -1,3 +1,29 @@\n+2004-02-03  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c/11658\n+\tPR c/13994\n+\t* Makefile.in (c-parse.o, c-convert.o, c-typeck.o): Depend\n+\ton langhooks.h.\n+\t* objc/Make-lang.in (objc-parse.o): Depend on langhooks.h.\n+\t* c-parse.in, c-convert.c, c-typeck.c, objc/objc-act.c:\n+\tInclude langhooks.h.  Replace c_common_truthvalue_conversion\n+\twith the truthvalue_conversion language hook throughout.\n+\t(expr_no_commas): Call default_conversion before save_expr\n+\tfor the first term of the production 'x ? : y'.\n+\t* c-common.c (c_common_truthvalue_conversion): Remove\n+\tobsolete block.  Invoke recursively the hook instead\n+\tof this function.\n+\t* c-convert.c (convert): handle ERROR_MARK_NODE.\n+\t* c-typeck.c (build_binary_op): handle ERROR_MARK_NODE\n+\treturned by the truthvalue_conversion language hook.\n+\t* c-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Use\n+\tc_objc_common_truthvalue_conversion.\n+\t* c-objc-common.c (c_objc_common_truthvalue_conversion):\n+\tNew function.\n+\t* c-tree.h (c_objc_common_truthvalue_conversion): Declare it.\n+\t* objc/objc-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Use\n+\tc_objc_common_truthvalue_conversion.\n+\n 2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/c4x/c4x.h (FUNCTION_VALUE): Use gen_rtx_REG instead"}, {"sha": "043b8d4a2202f2e7a787a04820360a6c94238c7f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -1272,7 +1272,7 @@ c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) flags.h $(DIAGNOSTIC_H) $(TM_P_H)\n c-parse.o : c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) intl.h $(C_TREE_H) input.h flags.h toplev.h output.h $(CPPLIB_H) \\\n-    varray.h gt-c-parse.h\n+    varray.h gt-c-parse.h langhooks.h\n \n srcextra: c-parse.y c-parse.c gengtype-lex.c gengtype-yacc.c gengtype-yacc.h\n \t-cp -p $^ $(srcdir)\n@@ -1295,7 +1295,8 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     opts.h c-pragma.h gt-c-decl.h cgraph.h $(HASHTAB_H) libfuncs.h except.h \\\n     $(LANGHOOKS_DEF_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-    $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n+    $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H) \\\n+    langhooks.h\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(C_PRETTY_PRINT_H) $(DIAGNOSTIC_H) \\\n     $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-c.h\n@@ -1345,7 +1346,7 @@ c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(OBSTACK_H) $(C_COMMON_H) flags.h toplev.h output.h c-pragma.h intl.h \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h varray.h $(RTL_H) \\\n-\t$(TARGET_H) $(C_TREE_H)\n+\t$(TARGET_H) $(C_TREE_H) langhooks.h\n c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) real.h\n "}, {"sha": "b628ac49e5bed455716088d2b34a8c55b7bffcac", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -2614,28 +2614,6 @@ c_common_truthvalue_conversion (tree expr)\n   if (TREE_CODE (expr) == FUNCTION_DECL)\n     expr = build_unary_op (ADDR_EXPR, expr, 0);\n \n-#if 0 /* This appears to be wrong for C++.  */\n-  /* These really should return error_mark_node after 2.4 is stable.\n-     But not all callers handle ERROR_MARK properly.  */\n-  switch (TREE_CODE (TREE_TYPE (expr)))\n-    {\n-    case RECORD_TYPE:\n-      error (\"struct type value used where scalar is required\");\n-      return truthvalue_false_node;\n-\n-    case UNION_TYPE:\n-      error (\"union type value used where scalar is required\");\n-      return truthvalue_false_node;\n-\n-    case ARRAY_TYPE:\n-      error (\"array type value used where scalar is required\");\n-      return truthvalue_false_node;\n-\n-    default:\n-      break;\n-    }\n-#endif /* 0 */\n-\n   switch (TREE_CODE (expr))\n     {\n     case EQ_EXPR:\n@@ -2686,31 +2664,31 @@ c_common_truthvalue_conversion (tree expr)\n     case COMPLEX_EXPR:\n       return build_binary_op ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n \t\t\t       ? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n-\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\t(*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 0)),\n+\t\t(*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 1)),\n \t\t\t      0);\n \n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n-      return c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n+      return (*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 0));\n \n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n       /* These don't change whether an object is zero or nonzero, but\n \t we can't ignore them if their second arg has side-effects.  */\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1)))\n \treturn build (COMPOUND_EXPR, truthvalue_type_node, TREE_OPERAND (expr, 1),\n-\t\t      c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n+\t\t      (*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 0)));\n       else\n-\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn (*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       return fold (build (COND_EXPR, truthvalue_type_node, TREE_OPERAND (expr, 0),\n-\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+\t\t(*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 1)),\n+\t\t(*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 2))));\n \n     case CONVERT_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n@@ -2723,7 +2701,7 @@ c_common_truthvalue_conversion (tree expr)\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n \t  >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n-\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn (*lang_hooks.truthvalue_conversion) (TREE_OPERAND (expr, 0));\n       break;\n \n     case MINUS_EXPR:\n@@ -2772,8 +2750,8 @@ c_common_truthvalue_conversion (tree expr)\n       return (build_binary_op\n \t      ((TREE_SIDE_EFFECTS (expr)\n \t\t? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\tc_common_truthvalue_conversion (build_unary_op (REALPART_EXPR, t, 0)),\n-\tc_common_truthvalue_conversion (build_unary_op (IMAGPART_EXPR, t, 0)),\n+\t(*lang_hooks.truthvalue_conversion) (build_unary_op (REALPART_EXPR, t, 0)),\n+\t(*lang_hooks.truthvalue_conversion) (build_unary_op (IMAGPART_EXPR, t, 0)),\n \t       0));\n     }\n "}, {"sha": "57fc967d2ed5b5708e8f7f07a701d70e64258d6b", "filename": "gcc/c-convert.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"convert.h\"\n #include \"c-common.h\"\n+#include \"langhooks.h\"\n #include \"toplev.h\"\n \n /* Change of width--truncation and extension of integers or reals--\n@@ -94,7 +95,10 @@ convert (tree type, tree expr)\n     return fold (convert_to_integer (type, e));\n   if (code == BOOLEAN_TYPE)\n     {\n-      tree t = c_common_truthvalue_conversion (expr);\n+      tree t = (*lang_hooks.truthvalue_conversion) (expr);\n+      if (TREE_CODE (t) == ERROR_MARK)\n+\treturn t;\n+\n       /* If it returns a NOP_EXPR, we must fold it here to avoid\n \t infinite recursion between fold () and convert ().  */\n       if (TREE_CODE (t) == NOP_EXPR)"}, {"sha": "927f5abb210ccc2a3eaa51f80e6edfb4d6bf8316", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -66,7 +66,7 @@ enum c_language_kind c_language = clk_c;\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n-#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_objc_common_truthvalue_conversion\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL c_finish_incomplete_decl\n #undef LANG_HOOKS_UNSAFE_FOR_REEVAL"}, {"sha": "73a3241a413e0d606555cdf3bb125fa682b53f3a", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -332,3 +332,32 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n   pp_string (pp, n);\n   return true;\n }\n+\n+tree\n+c_objc_common_truthvalue_conversion (tree expr)\n+{\n+ retry:\n+  switch (TREE_CODE (TREE_TYPE (expr)))\n+    {\n+    case ARRAY_TYPE:\n+      expr = default_conversion (expr);\n+      if (TREE_CODE (TREE_TYPE (expr)) != ARRAY_TYPE)\n+\tgoto retry;\n+\n+      error (\"used array that cannot be converted to pointer where scalar is required\");\n+      return error_mark_node;\n+\n+    case RECORD_TYPE:\n+      error (\"used struct type value where scalar is required\");\n+      return error_mark_node;\n+\n+    case UNION_TYPE:\n+      error (\"used union type value where scalar is required\");\n+      return error_mark_node;\n+    default:\n+      break;\n+    }\n+\n+  return c_common_truthvalue_conversion (expr);\n+}\n+"}, {"sha": "23e2898aed1612188c56124672bbc2e502b3a836", "filename": "gcc/c-parse.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"langhooks.h\"\n #include \"input.h\"\n #include \"cpplib.h\"\n #include \"intl.h\"\n@@ -579,21 +580,21 @@ expr_no_commas:\n \t| expr_no_commas '^' expr_no_commas\n \t\t{ $$ = parser_build_binary_op ($2, $1, $3); }\n \t| expr_no_commas ANDAND\n-\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_false_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_false_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ANDIF_EXPR, $1, $4); }\n \t| expr_no_commas OROR\n-\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ORIF_EXPR, $1, $4); }\n \t| expr_no_commas '?'\n-\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_false_node; }\n           expr ':'\n@@ -606,9 +607,8 @@ expr_no_commas:\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ISO C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n-\t\t  $<ttype>2 = save_expr ($1);\n-\t\t  $1 = c_common_truthvalue_conversion\n-\t\t    (default_conversion ($<ttype>2));\n+\t\t  $<ttype>2 = save_expr (default_conversion ($1));\n+\t\t  $1 = (*lang_hooks.truthvalue_conversion) ($<ttype>2);\n \t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  ':' expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n@@ -2192,7 +2192,7 @@ if_prefix:\n           IF\n                 { $<ttype>$ = c_begin_if_stmt (); }\n             '(' expr ')'\n-\t\t{ c_expand_start_cond (c_common_truthvalue_conversion ($4),\n+\t\t{ c_expand_start_cond ((*lang_hooks.truthvalue_conversion) ($4),\n \t\t\t\t       compstmt_count,$<ttype>2);\n \t\t  $<itype>$ = stmt_count;\n \t\t  if_stmt_locus = $<location>-1; }\n@@ -2301,16 +2301,16 @@ select_or_iter_stmt:\n \t\t  $<ttype>$ = c_begin_while_stmt (); }\n \t  '(' expr ')'\n                 { c_in_iteration_stmt++;\n-\t\t  $4 = c_common_truthvalue_conversion ($4);\n+\t\t  $4 = (*lang_hooks.truthvalue_conversion) ($4);\n \t\t  c_finish_while_stmt_cond\n-\t\t    (c_common_truthvalue_conversion ($4), $<ttype>2);\n+\t\t    ((*lang_hooks.truthvalue_conversion) ($4), $<ttype>2);\n \t\t  $<ttype>$ = add_stmt ($<ttype>2); }\n \t  c99_block_lineno_labeled_stmt\n                 { c_in_iteration_stmt--;\n \t\t  RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start\n \t  '(' expr ')' ';'\n-                { DO_COND ($1) = c_common_truthvalue_conversion ($3); }\n+                { DO_COND ($1) = (*lang_hooks.truthvalue_conversion) ($3); }\n \t| do_stmt_start error\n \t\t{ }\n \t| FOR\n@@ -2323,7 +2323,7 @@ select_or_iter_stmt:\n \t  xexpr ';'\n                 { if ($6)\n \t\t    FOR_COND ($<ttype>2)\n-\t\t      = c_common_truthvalue_conversion ($6); }\n+\t\t      = (*lang_hooks.truthvalue_conversion) ($6); }\n \t  xexpr ')'\n                 { c_in_iteration_stmt++;\n \t\t  FOR_EXPR ($<ttype>2) = $9; }"}, {"sha": "e9bc5c6863ce43f63654d19f109954b23c9f9433", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -237,6 +237,7 @@ extern void merge_translation_unit_decls (void);\n extern int c_disregard_inline_limits (tree);\n extern int c_cannot_inline_tree_fn (tree *);\n extern bool c_objc_common_init (void);\n+extern tree c_objc_common_truthvalue_conversion (tree expr);\n extern int c_missing_noreturn_ok_p (tree);\n extern void c_objc_common_finish_file (void);\n extern int defer_fn (tree);"}, {"sha": "d61e89e6455849a91980fc58886d7674cfbe0d68", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"langhooks.h\"\n #include \"c-tree.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n@@ -2259,7 +2260,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t  error (\"wrong type argument to unary exclamation mark\");\n \t  return error_mark_node;\n \t}\n-      arg = c_common_truthvalue_conversion (arg);\n+      arg = (*lang_hooks.truthvalue_conversion) (arg);\n       return invert_truthvalue (arg);\n \n     case NOP_EXPR:\n@@ -2632,7 +2633,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n   tree result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n \n-  ifexp = c_common_truthvalue_conversion (default_conversion (ifexp));\n+  ifexp = (*lang_hooks.truthvalue_conversion) (default_conversion (ifexp));\n \n   /* Promote both alternatives.  */\n \n@@ -6539,8 +6540,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t     but that does not mean the operands should be\n \t     converted to ints!  */\n \t  result_type = integer_type_node;\n-\t  op0 = c_common_truthvalue_conversion (op0);\n-\t  op1 = c_common_truthvalue_conversion (op1);\n+\t  op0 = (*lang_hooks.truthvalue_conversion) (op0);\n+\t  op1 = (*lang_hooks.truthvalue_conversion) (op1);\n \t  converted = 1;\n \t}\n       break;\n@@ -6778,6 +6779,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       break;\n     }\n \n+  if (code0 == ERROR_MARK || code1 == ERROR_MARK)\n+    return error_mark_node;\n+\n   if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE || code0 == COMPLEX_TYPE\n        || code0 == VECTOR_TYPE)\n       &&"}, {"sha": "1b0665c97f88d521d354ff968cc68ea0c471e746", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -64,7 +64,8 @@ objc/objc-lang.o : objc/objc-lang.c \\\n \n objc/objc-parse.o : objc/objc-parse.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h\n+   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h \\\n+   langhooks.h\n \n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\"}, {"sha": "c29c4fa6aeaf4f651091c74eb75e94425d3de089", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"c-common.h\"\n #include \"flags.h\"\n+#include \"langhooks.h\"\n #include \"objc-act.h\"\n #include \"input.h\"\n #include \"except.h\"\n@@ -2850,7 +2851,7 @@ objc_build_try_enter_fragment (void)\n   cond = build_unary_op (TRUTH_NOT_EXPR,\n \t\t\t build_function_call (objc_setjmp_decl, func_params),\n \t\t\t 0);\n-  c_expand_start_cond (c_common_truthvalue_conversion (cond),\n+  c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (cond),\n \t\t       0, if_stmt);\n   objc_enter_block ();\n }\n@@ -2978,7 +2979,7 @@ objc_build_try_epilogue (int also_catch_prologue)\n       val_stack_push (&catch_count_stack, 1);\n       if_stmt = c_begin_if_stmt ();\n       if_nesting_count++;\n-      c_expand_start_cond (c_common_truthvalue_conversion (boolean_false_node),\n+      c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (boolean_false_node),\n \t\t\t   0, if_stmt);\n       objc_enter_block ();\n \n@@ -3068,7 +3069,7 @@ objc_build_catch_stmt (tree catch_expr)\n       cond = build_function_call (objc_exception_match_decl, func_params);\n     }\n \n-  c_expand_start_cond (c_common_truthvalue_conversion (cond),\n+  c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (cond),\n \t\t       0, if_stmt);\n   objc_enter_block ();\n   objc_declare_variable (RID_REGISTER, var_name,\n@@ -3138,7 +3139,7 @@ objc_build_finally_prologue (void)\n   tree if_stmt = c_begin_if_stmt ();\n   if_nesting_count++;\n \n-  c_expand_start_cond (c_common_truthvalue_conversion\n+  c_expand_start_cond ((*lang_hooks.truthvalue_conversion)\n \t\t       (build_unary_op\n \t\t        (TRUTH_NOT_EXPR,\n \t\t\t TREE_VALUE (objc_rethrow_exception), 0)),\n@@ -3166,7 +3167,7 @@ objc_build_finally_epilogue (void)\n   if_nesting_count++;\n \n   c_expand_start_cond\n-    (c_common_truthvalue_conversion (TREE_VALUE (objc_rethrow_exception)),\n+    ((*lang_hooks.truthvalue_conversion) (TREE_VALUE (objc_rethrow_exception)),\n      0, if_stmt);\n   objc_enter_block ();\n   objc_build_throw_stmt (TREE_VALUE (objc_rethrow_exception));"}, {"sha": "72c772c40b49df7afa74a35975fe69ce4d1d7945", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57e265ba61a2e07623521dc872a2b7e82e70b37/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=e57e265ba61a2e07623521dc872a2b7e82e70b37", "patch": "@@ -60,7 +60,7 @@ enum c_language_kind c_language = clk_objc;\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n-#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_objc_common_truthvalue_conversion\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL c_finish_incomplete_decl\n #undef LANG_HOOKS_UNSAFE_FOR_REEVAL"}]}