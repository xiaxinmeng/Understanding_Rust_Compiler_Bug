{"sha": "8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjMmRkYWYwNTBjMWJmOGRhMDQ2MmFlNTUwMTU2MDg5YmJlNGQ1Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-04-09T12:56:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T12:56:35Z"}, "message": "2009-04-09  Robert Dewar  <dewar@adacore.com>\n\n        * checks.adb:\n        (Insert_Valid_Check): Avoid unnecessary generation of junk declaration\n        when no invalid values exist, Avoid duplicate read of atomic variable.\n\n        * cstand.adb (Build_Signed_Integer_Type): Set Is_Known_Valid\n        (Standard_Unsigned): Set Is_Known_Valid\n\n        * sem_ch3.adb (Analyze_Subtype_Declaration): Copy Is_Known_Valid on\n\tsubtype declaration if no constraint.\n        (Set_Modular_Size): Set Is_Known_Valid if appropriate\n        (Build_Derived_Numeric_Type): Copy Is_Known_Valid if no constraint\n\nFrom-SVN: r145836", "tree": {"sha": "c9396acfdb481bb1f0b392c30aabf121b6eb489f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9396acfdb481bb1f0b392c30aabf121b6eb489f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/comments", "author": null, "committer": null, "parents": [{"sha": "47cb314ac35eaf6c6ede550fbc5361e9fc7b15a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cb314ac35eaf6c6ede550fbc5361e9fc7b15a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cb314ac35eaf6c6ede550fbc5361e9fc7b15a7"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "45462db72b551faee34c6f3fab62c75a7aa8e6da", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "patch": "@@ -5125,10 +5125,12 @@ package body Checks is\n       Exp : Node_Id;\n \n    begin\n-      --  Do not insert if checks off, or if not checking validity\n+      --  Do not insert if checks off, or if not checking validity or\n+      --  if expression is known to be valid\n \n       if not Validity_Checks_On\n         or else Range_Or_Validity_Checks_Suppressed (Expr)\n+        or else Expr_Known_Valid (Expr)\n       then\n          return;\n       end if;\n@@ -5152,6 +5154,14 @@ package body Checks is\n       begin\n          Set_Do_Range_Check (Exp, False);\n \n+         --  Force evaluation to avoid multiple reads for atomic/volatile\n+\n+         if Is_Entity_Name (Exp)\n+           and then Is_Volatile (Entity (Exp))\n+         then\n+            Force_Evaluation (Exp, Name_Req => True);\n+         end if;\n+\n          --  Insert the validity check. Note that we do this with validity\n          --  checks turned off, to avoid recursion, we do not want validity\n          --  checks on the validity checking code itself!"}, {"sha": "d6f0ff09cea101e518f48d9394e032ec74500863", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "patch": "@@ -933,17 +933,17 @@ package body CStand is\n       Set_Ekind (Standard_Debug_Renaming_Type, E_Signed_Integer_Subtype);\n       Set_Scope (Standard_Debug_Renaming_Type, Standard_Standard);\n       Set_Etype (Standard_Debug_Renaming_Type, Base_Type (Standard_Integer));\n-      Init_Esize         (Standard_Debug_Renaming_Type, 0);\n-      Init_RM_Size       (Standard_Debug_Renaming_Type, 0);\n+      Init_Esize          (Standard_Debug_Renaming_Type, 0);\n+      Init_RM_Size        (Standard_Debug_Renaming_Type, 0);\n       Set_Size_Known_At_Compile_Time (Standard_Debug_Renaming_Type);\n-      Set_Integer_Bounds (Standard_Debug_Renaming_Type,\n-        Typ => Base_Type (Standard_Debug_Renaming_Type),\n+      Set_Integer_Bounds  (Standard_Debug_Renaming_Type,\n+        Typ => Base_Type  (Standard_Debug_Renaming_Type),\n         Lb  => Uint_1,\n         Hb  => Uint_0);\n-      Set_Is_Constrained (Standard_Debug_Renaming_Type);\n+      Set_Is_Constrained  (Standard_Debug_Renaming_Type);\n       Set_Has_Size_Clause (Standard_Debug_Renaming_Type);\n \n-      Make_Name      (Standard_Debug_Renaming_Type, \"_renaming_type\");\n+      Make_Name           (Standard_Debug_Renaming_Type, \"_renaming_type\");\n \n       --  Note on type names. The type names for the following special types\n       --  are constructed so that they will look reasonable should they ever\n@@ -1144,6 +1144,7 @@ package body CStand is\n       Set_Is_Unsigned_Type  (Standard_Unsigned);\n       Set_Size_Known_At_Compile_Time\n                             (Standard_Unsigned);\n+      Set_Is_Known_Valid    (Standard_Unsigned, True);\n \n       R_Node := New_Node (N_Range, Stloc);\n       Set_Low_Bound  (R_Node, Make_Integer (Uint_0));\n@@ -1311,7 +1312,6 @@ package body CStand is\n       begin\n          Comp      := First_Entity (Standard_Exception_Type);\n          Comp_List := New_List;\n-\n          while Present (Comp) loop\n             Append (\n               Make_Component_Declaration (Stloc,\n@@ -1487,7 +1487,6 @@ package body CStand is\n \n    function Identifier_For (S : Standard_Entity_Type) return Node_Id is\n       Ident_Node : Node_Id;\n-\n    begin\n       Ident_Node := New_Node (N_Identifier, Stloc);\n       Set_Chars (Ident_Node, Chars (Standard_Entity (S)));"}, {"sha": "12abf172ef266e29ef414cb8751b6018e021f7fc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc2ddaf050c1bf8da0462ae550156089bbe4d5b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8dc2ddaf050c1bf8da0462ae550156089bbe4d5b", "patch": "@@ -603,7 +603,7 @@ package body Sem_Ch3 is\n    --  given kind of type (index constraint to an array type, for example).\n \n    procedure Modular_Type_Declaration (T : Entity_Id; Def : Node_Id);\n-   --  Create new modular type. Verify that modulus is in  bounds and is\n+   --  Create new modular type. Verify that modulus is in bounds and is\n    --  a power of two (implementation restriction).\n \n    procedure New_Concatenation_Op (Typ : Entity_Id);\n@@ -3382,6 +3382,7 @@ package body Sem_Ch3 is\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Machine_Radix_10     (Id, Machine_Radix_10   (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n \n             when Enumeration_Kind =>\n@@ -3390,6 +3391,7 @@ package body Sem_Ch3 is\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Character_Type    (Id, Is_Character_Type  (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n \n             when Ordinary_Fixed_Point_Kind =>\n@@ -3398,6 +3400,7 @@ package body Sem_Ch3 is\n                Set_Small_Value          (Id, Small_Value        (T));\n                Set_Delta_Value          (Id, Delta_Value        (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n \n             when Float_Kind =>\n@@ -3410,12 +3413,14 @@ package body Sem_Ch3 is\n                Set_Ekind                (Id, E_Signed_Integer_Subtype);\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n \n             when Modular_Integer_Kind =>\n                Set_Ekind                (Id, E_Modular_Integer_Subtype);\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n \n             when Class_Wide_Kind =>\n@@ -5205,6 +5210,7 @@ package body Sem_Ch3 is\n       Set_Size_Info      (Implicit_Base,                 Parent_Base);\n       Set_First_Rep_Item (Implicit_Base, First_Rep_Item (Parent_Base));\n       Set_Parent         (Implicit_Base, Parent (Derived_Type));\n+      Set_Is_Known_Valid (Implicit_Base, Is_Known_Valid (Parent_Base));\n \n       --  Set RM Size for discrete type or decimal fixed-point type\n       --  Ordinary fixed-point is excluded, why???\n@@ -5258,6 +5264,8 @@ package body Sem_Ch3 is\n          if Has_Infinities (Parent_Type) then\n             Set_Includes_Infinities (Scalar_Range (Derived_Type));\n          end if;\n+\n+         Set_Is_Known_Valid (Derived_Type, Is_Known_Valid (Parent_Type));\n       end if;\n \n       Set_Is_Descendent_Of_Address (Derived_Type,\n@@ -5273,6 +5281,9 @@ package body Sem_Ch3 is\n          Set_Non_Binary_Modulus\n            (Implicit_Base, Non_Binary_Modulus (Parent_Base));\n \n+         Set_Is_Known_Valid\n+           (Implicit_Base, Is_Known_Valid (Parent_Base));\n+\n       elsif Is_Floating_Point_Type (Parent_Type) then\n \n          --  Digits of base type is always copied from the digits value of\n@@ -14881,6 +14892,12 @@ package body Sem_Ch3 is\n          else\n             Init_Esize (T, System_Max_Binary_Modulus_Power);\n          end if;\n+\n+         if not Non_Binary_Modulus (T)\n+           and then Esize (T) = RM_Size (T)\n+         then\n+            Set_Is_Known_Valid (T);\n+         end if;\n       end Set_Modular_Size;\n \n    --  Start of processing for Modular_Type_Declaration"}]}