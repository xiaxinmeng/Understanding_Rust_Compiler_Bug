{"sha": "662d9425456810ee33c4f69746a9d826fe6695ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyZDk0MjU0NTY4MTBlZTMzYzRmNjk3NDZhOWQ4MjZmZTY2OTVhZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-19T03:42:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-19T03:42:53Z"}, "message": "README: Add notes.\n\n\n2001-05-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/README: Add notes.\n\n\t* src/Makefile.am (libstdc++.INC): Remove.\n\t* src/Makefile.in: Regenerate.\n\n\tPhil Edwards <pedwards@disaster.jaj.com>\n\t* mkcheck.in: Add missing '#'.\n\nFrom-SVN: r42298", "tree": {"sha": "04f62f9ec554124b8ae09abd72e7d134161f0350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04f62f9ec554124b8ae09abd72e7d134161f0350"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/662d9425456810ee33c4f69746a9d826fe6695ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662d9425456810ee33c4f69746a9d826fe6695ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662d9425456810ee33c4f69746a9d826fe6695ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662d9425456810ee33c4f69746a9d826fe6695ad/comments", "author": null, "committer": null, "parents": [{"sha": "f99df08ea8c1ccfefb9398bce8eda149abbaa374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99df08ea8c1ccfefb9398bce8eda149abbaa374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99df08ea8c1ccfefb9398bce8eda149abbaa374"}], "stats": {"total": 136, "additions": 88, "deletions": 48}, "files": [{"sha": "9873beb069bc6f58dbd71969ba30684aea5bf744", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=662d9425456810ee33c4f69746a9d826fe6695ad", "patch": "@@ -1,3 +1,13 @@\n+2001-05-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/README: Add notes.\n+\n+\t* src/Makefile.am (libstdc++.INC): Remove.\n+\t* src/Makefile.in: Regenerate.\n+\n+\tPhil Edwards <pedwards@disaster.jaj.com>\n+\t* mkcheck.in: Add missing '#'.\n+\n 2001-05-18  Angela Marie Thomas <angela@cygnus.com>\n \n         * testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Set flags"}, {"sha": "4212f1e38175eff7d34e08835ccc8cdf276e13d8", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=662d9425456810ee33c4f69746a9d826fe6695ad", "patch": "@@ -1,5 +1,4 @@\n-!/usr/bin/env bash\n-\n+#!/usr/bin/env bash\n \n # Script to do automated testing and data collection for various test\n # files, so that we don't have to do this by hand on every test file."}, {"sha": "8152d71c43f11e39de2537b668b19b9feb38f37b", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=662d9425456810ee33c4f69746a9d826fe6695ad", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.83 2001/04/11 18:52:31 bkoz Exp $\n+## $Id: Makefile.am,v 1.84 2001/04/18 01:06:04 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -282,20 +282,6 @@ myinstallheaders:\n \tfi;\n \n \n-# Alexandre put this in here for some libtool-related reason.\n-all: libstdc++.INC\n-libstdc++.INC: Makefile\n-\t$(MAKE) \\\n-\ttop_builddir=`CDPATH=:. && cd $(top_builddir) && pwd` \\\n-\ttop_srcdir=`CDPATH=:. && cd $(top_srcdir) && pwd` \\\n-\ttmp-$@\n-\t-rm -f $@\n-\tmv tmp-$@ $@\n-\n-tmp-libstdc++.INC: Makefile\n-\techo $(INCLUDES) > $@\n-\n-\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after"}, {"sha": "972d80948356ec733729a9ad24f13c6fbb1f45d3", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=662d9425456810ee33c4f69746a9d826fe6695ad", "patch": "@@ -547,19 +547,6 @@ myinstallheaders:\n \tdone; \\\n \tfi;\n \n-# Alexandre put this in here for some libtool-related reason.\n-all: libstdc++.INC\n-libstdc++.INC: Makefile\n-\t$(MAKE) \\\n-\ttop_builddir=`CDPATH=:. && cd $(top_builddir) && pwd` \\\n-\ttop_srcdir=`CDPATH=:. && cd $(top_srcdir) && pwd` \\\n-\ttmp-$@\n-\t-rm -f $@\n-\tmv tmp-$@ $@\n-\n-tmp-libstdc++.INC: Makefile\n-\techo $(INCLUDES) > $@\n-\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "a52cb312a611943468205d1df69cd0a40837f5c0", "filename": "libstdc++-v3/testsuite/README", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662d9425456810ee33c4f69746a9d826fe6695ad/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=662d9425456810ee33c4f69746a9d826fe6695ad", "patch": "@@ -1,6 +1,11 @@\n-  We're in the process of converting the existing testsuite machinery to \n+We're in the process of converting the existing testsuite machinery to\n use the new style DejaGnu framework.  Eventually, we'll abandon\n-../mkcheck.in in favor of this new testsuite framework. \n+../mkcheck.in in favor of this new testsuite framework.\n+\n+\n+// 1: How to write a testcase\n+As per the dejagnu instructions, always return 0 from main to indicate\n+success.\n \n Basically, a testcase contains dg-keywords (see dg.exp) indicating\n what to do and what kinds of behaviour are to be expected.  New\n@@ -74,23 +79,56 @@ effort.\n # At least one target must be specified, use *-*-* for \"all targets\".\n # At present it is not possible to specify both `xfail' and `target'.\n # \"native\" may be used in place of \"*-*-*\".\n-#\n-# Example:\n-#\n-#       [ ... some complicated code ... ]\n-#\treturn a; /* { dg-build \"fatal\" \"ran out of spill regs\" { xfail i386-*-* } } */\n-#\n-# In this example, the compiler use to crash on the \"return a;\" for some\n-# target and that it still does crash on i386-*-*.  Admittedly, this is a\n-# contrived example.\n-#\n-# ??? It might be possible to add additional optional arguments by having\n-# something like: { dg-error \".*syntax.*\" \"syntax error\" { { foo 1 } ... } }\n \n+Example 1: Testing compilation only\n+(to just have a testcase do compile testing, without linking and executing)\n+// { dg-do compile }\n+\n+Example 2: Testing for expected warings on line 36\n+// { dg-warning \"string literals\" \"\" { xfail *-*-* } 36\n+\n+Example 3: Testing for compilation errors on line 41\n+// { dg-do compile }\n+// { dg-error \"no match for\" \"\" { xfail *-*-* } 41 }\n+\n+More examples can be found in the libstdc++-v3/testsuite/*/*.cc files.\n+\n+\n+// 2: Test harness notes, invocation, and debugging.\n+Configuring the dejagnu harness to work with libstdc++-v3 in a cross\n+compilation environment has been maddening. However, it does work now,\n+and on a variety of platforms. Including solaris, linux, and cygwin.\n+\n+To debug the test harness during runs, try invoking with\n \n-The V3 testing framework supports additional keywords for the purpose\n-of easing the job of writing testcases.  All V3-keywords are of the\n-form @xxx@.  Currently supported keywords include:\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n+or\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n+\n+There are two ways to run on a simulator: set up DEJAGNU to point to a\n+specially crafted site.exp, or pass down --target_board flags.\n+\n+Example flags to pass down for various embedded builds are as follows:\n+\n+--target=powerpc-eabism (libgloss/sim)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n+\n+--target=calmrisc32 (libgloss/sid)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n+\n+--target=xscale-elf (newlib/sim)\n+make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n+\n+\n+// 3: Future plans, to be done\n+Shared runs need to be implemented, for targets that support shared libraries.\n+\n+Diffing of expected output to standard streams needs to be finished off.\n+\n+The V3 testing framework supports, or will eventually support,\n+additional keywords for the purpose of easing the job of writing\n+testcases.  All V3-keywords are of the form @xxx@.  Currently plans\n+for supported keywords include:\n \n   @require@ <files>\n       The existence of <files> is essential for the test to complete\n@@ -108,4 +146,24 @@ form @xxx@.  Currently supported keywords include:\n       same length.  The test fails if diff returns non-zero a pair of\n       files.\n \n--- Gaby\n+Current testing problems with cygwin-hosted tools:\n+\n+There are two known problems which I have not addressed.  The first is\n+that when testing cygwin hosted tools from the unix build dir, it does\n+the wrong thing building the wrapper program (testglue.c) because host\n+and target are the same in site.exp (host and target are the same from\n+the perspective of the target libraries)\n+\n+Problem number two is a little more annoying.  In order for me to make\n+v3 testing work on Windows, I had to tell dejagnu to copy over the\n+debug_assert.h file to the remote host and then set the includes to\n+-I./.  This is how all the other tests like this are done so I didn't\n+think much of it.  However, this had some unfortunate results due to\n+gcc having a testcase called \"limits\" and C++ having an include file\n+called \"limits\".  The gcc \"limits\" binary was in the temporary dir\n+when the v3 tests were being built.  As a result, the gcc \"limits\"\n+binary was being #included rather than the intended one.  The only way\n+to fix this is to go through the testsuites and make sure binaries are\n+deleted on the remote host when testing is done with them.  That is a\n+lot more work than I want to do so I worked around it by cleaning out\n+D:\\kermit on compsognathus and rerunning tests."}]}