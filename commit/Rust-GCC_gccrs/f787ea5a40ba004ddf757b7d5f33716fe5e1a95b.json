{"sha": "f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4N2VhNWE0MGJhMDA0ZGRmNzU3YjdkNWYzMzcxNmZlNWUxYTk1Yg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-03-04T15:45:30Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-03-04T15:45:30Z"}, "message": "In gcc/testsuite/: 2011-03-04 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2011-03-04  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/gnu-api-2-property.m: Added tests for property_getName()\n        and property_getAttributes() if __OBJC2__.\n        * obj-c++.dg/gnu-api-2-property.mm: Likewise.\n        * objc.dg/property/property-encoding-1.m: New.\n        * obj-c++.dg/property/property-encoding-1.mm: New.\n\nFrom-SVN: r170678", "tree": {"sha": "d228fafe8770052531669a915b7a45284ffac36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d228fafe8770052531669a915b7a45284ffac36f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad00b8db9ae8be85946993a52b14a16e85754aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad00b8db9ae8be85946993a52b14a16e85754aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad00b8db9ae8be85946993a52b14a16e85754aac"}], "stats": {"total": 492, "additions": 460, "deletions": 32}, "files": [{"sha": "9e88c468a82beeabf85edd6f80292020ab9e4cc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "patch": "@@ -1,3 +1,11 @@\n+2011-03-04  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-property.m: Added tests for property_getName()\n+\tand property_getAttributes() if __OBJC2__.\n+\t* obj-c++.dg/gnu-api-2-property.mm: Likewise.\n+\t* objc.dg/property/property-encoding-1.m: New.\n+\t* obj-c++.dg/property/property-encoding-1.mm: New.\n+\n 2011-03-04  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/pseudodtor6.C: New."}, {"sha": "953e9bb156bcb2b55a3e08ffbc06d3a6e4eec962", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-property.mm", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-property.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-property.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-property.mm?ref=f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "patch": "@@ -25,41 +25,52 @@ @implementation MyRootClass\n + initialize { return self; }\n @end\n \n-@protocol MyProtocol\n-- (id) variable;\n-@end\n-\n-@protocol MySecondProtocol\n-- (id) setVariable: (id)value;\n-@end\n-\n-@interface MySubClass : MyRootClass <MyProtocol>\n-{ id variable_ivar; }\n-- (void) setVariable: (id)value;\n-- (id) variable;\n+@interface MySubClass : MyRootClass\n+{\n+  id propertyA;\n+  id propertyB;\n+}\n+@property (assign, getter=getP, setter=setP:) id propertyA;\n+@property (assign, nonatomic) id propertyB;\n @end\n \n @implementation MySubClass\n-- (void) setVariable: (id)value { variable_ivar = value; }\n-- (id) variable { return variable_ivar; }\n+@synthesize propertyA;\n+@synthesize propertyB;\n @end\n \n \n int main ()\n {\n   /* Functions are tested in alphabetical order.  */\n \n-  /* TODO: Test new ABI (when available).  */\n   std::cout << \"Testing property_getAttributes () ...\\n\";\n   {\n     /* The Apple/NeXT runtime seems to crash on the following.  */\n #ifdef __GNU_LIBOBJC__\n     if (property_getAttributes (NULL) != NULL)\n       abort ();\n #endif\n+\n+    /* The GNU runtime doesn't support looking up properties at\n+       runtime yet.  */\n+#ifdef __OBJC2__\n+    {\n+      objc_property_t property;\n+      \n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyA\");\n+      if (std::strcmp (property_getAttributes (property),\n+\t\t  \"T@,GgetP,SsetP:,VpropertyA\") != 0)\n+\tabort ();\n+\n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyB\");\n+      if (std::strcmp (property_getAttributes (property),\n+\t\t  \"T@,N,VpropertyB\") != 0)\n+\tabort ();\n+    }\n+#endif    \n   }\n \n-  /* TODO: Test new ABI (when available).  */\n   std::cout << \"Testing property_getName () ...\\n\";\n   {\n     /* The Apple/NeXT runtime seems to crash on the following.  */\n@@ -68,6 +79,22 @@ int main ()\n     if (property_getName (NULL) != NULL)\n       abort ();\n #endif\n+\n+    /* The GNU runtime doesn't support looking up properties at\n+       runtime yet.  */\n+#ifdef __OBJC2__\n+    {\n+      objc_property_t property;\n+      \n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyA\");\n+      if (std::strcmp (property_getName (property), \"propertyA\") != 0)\n+\tabort ();\n+\n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyB\");\n+      if (std::strcmp (property_getName (property), \"propertyB\") != 0)\n+\tabort ();\n+    }\n+#endif\n   }\n \n   return (0);"}, {"sha": "03f273c13b66fed2ce7cbbde6498577018d0a296", "filename": "gcc/testsuite/obj-c++.dg/property/property-encoding-1.mm", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-encoding-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-encoding-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-encoding-1.mm?ref=f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "patch": "@@ -0,0 +1,183 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, March 2011.  */\n+/* Test encoding properties.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"No API#2 pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#include <objc/runtime.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n++ initialize;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n++ initialize { return self; }\n+@end\n+\n+@interface MySubClass : MyRootClass\n+{\n+  char char_property;\n+  short short_property;\n+  int int_property;\n+  long long_property;\n+  float float_property;\n+  double double_property;\n+  int *int_pointer_property;\n+\n+  id propertyA;\n+  id propertyB;\n+  id propertyC;\n+  id propertyD;\n+  int propertyE;\n+  id propertyF;\n+\n+  id other_variable;\n+}\n+@property char char_property;\n+@property short short_property;\n+@property int int_property;\n+@property long long_property;\n+@property float float_property;\n+@property double double_property;\n+@property int *int_pointer_property;\n+\n+@property (assign, getter=getP, setter=setP:) id propertyA;\n+@property (assign) id propertyB;\n+@property (copy) id propertyC;\n+@property (retain) id propertyD;\n+@property (nonatomic) int propertyE;\n+@property (nonatomic, readonly, copy) id propertyF;\n+\n+@property (assign) id propertyG;\n+@property (assign, readonly, getter=X) id propertyH;\n+@end\n+\n+@implementation MySubClass\n+@synthesize char_property;\n+@synthesize short_property;\n+@synthesize int_property;\n+@synthesize long_property;\n+@synthesize float_property;\n+@synthesize double_property;\n+@synthesize int_pointer_property;\n+\n+@synthesize propertyA;\n+@synthesize propertyB;\n+@synthesize propertyC;\n+@synthesize propertyD;\n+@synthesize propertyE;\n+@synthesize propertyF;\n+\n+@synthesize propertyG = other_variable;\n+@dynamic propertyH;\n+@end\n+\n+#ifdef __OBJC2__\n+void error (objc_property_t p)\n+{\n+  printf (\"Error - property_getAttributes (\\\"%s\\\") returns \\\"%s\\\"\\n\",\n+\t  property_getName (p),\n+\t  property_getAttributes (p));\n+  abort ();\n+}\n+\n+/* Concatenate 3 strings and return the result.  */\n+char *concat (char *a, char *b, char *c)\n+{\n+  /* We happily leak memory here.  This is a test.  */\n+  char *x = malloc (sizeof (char) * 128);\n+  snprintf (x, 128, \"%s%s%s\", a, b, c);\n+  return x;\n+}\n+\n+#endif\n+\n+int main(int argc, char **args)\n+{\n+#ifdef __OBJC2__\n+  Class c = objc_getClass (\"MySubClass\");\n+  objc_property_t p;\n+  const char *expected_result;\n+\n+  p = class_getProperty (c, \"char_property\");\n+  /* Usually we expect \"Tc,Vchar_property\", but if a char is of\n+     different size, it may be encoded differently than \"c\".  */\n+  if (strcmp (concat (\"T\", @encode (char), \",Vchar_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"short_property\");\n+  if (strcmp (concat (\"T\", @encode (short), \",Vshort_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"int_property\");\n+  if (strcmp (concat (\"T\", @encode (int), \",Vint_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"long_property\");\n+  if (strcmp (concat (\"T\", @encode (long), \",Vlong_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"float_property\");\n+  if (strcmp (concat (\"T\", @encode (float), \",Vfloat_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"double_property\");\n+  if (strcmp (concat (\"T\", @encode (double), \",Vdouble_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"int_pointer_property\");\n+  if (strcmp (concat (\"T\", @encode (int *), \",Vint_pointer_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  /* Objects are always encoded as '@' hence the string does not\n+     depend on the architecture.  */\n+  p = class_getProperty (c, \"propertyA\");\n+  if (strcmp (\"T@,GgetP,SsetP:,VpropertyA\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyB\");\n+  if (strcmp (\"T@,VpropertyB\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyC\");\n+  if (strcmp (\"T@,C,VpropertyC\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyD\");\n+  if (strcmp (\"T@,&,VpropertyD\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyE\");\n+  if (strcmp (concat (\"T\", @encode (int), \",N,VpropertyE\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyF\");\n+  if (strcmp (\"T@,R,C,N,VpropertyF\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyG\");\n+  if (strcmp (\"T@,Vother_variable\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyH\");\n+  if (strcmp (\"T@,R,D,GX\", property_getAttributes (p)) != 0)\n+    error (p);\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "12c0d8b98e333659eb3113c2a70b76e4af529b01", "filename": "gcc/testsuite/objc.dg/gnu-api-2-property.m", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-property.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-property.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-property.m?ref=f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "patch": "@@ -25,48 +25,75 @@ @implementation MyRootClass\n + initialize { return self; }\n @end\n \n-@protocol MyProtocol\n-- (id) variable;\n-@end\n-\n-@protocol MySecondProtocol\n-- (id) setVariable: (id)value;\n-@end\n-\n-@interface MySubClass : MyRootClass <MyProtocol>\n-{ id variable_ivar; }\n-- (void) setVariable: (id)value;\n-- (id) variable;\n+@interface MySubClass : MyRootClass\n+{\n+  id propertyA;\n+  id propertyB;\n+}\n+@property (assign, getter=getP, setter=setP:) id propertyA;\n+@property (assign, nonatomic) id propertyB;\n @end\n \n @implementation MySubClass\n-- (void) setVariable: (id)value { variable_ivar = value; }\n-- (id) variable { return variable_ivar; }\n+@synthesize propertyA;\n+@synthesize propertyB;\n @end\n \n \n int main(int argc, void **args)\n {\n   /* Functions are tested in alphabetical order.  */\n \n-  /* TODO: Test new ABI (when available).  */\n   printf (\"Testing property_getAttributes () ...\\n\");\n   {\n     /* The Apple/NeXT runtime seems to crash on the following.  */\n #ifdef __GNU_LIBOBJC__\n     if (property_getAttributes (NULL) != NULL)\n       abort ();\n #endif\n+\n+    /* The GNU runtime doesn't support looking up properties at\n+       runtime yet.  */\n+#ifdef __OBJC2__\n+    {\n+      objc_property_t property;\n+      \n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyA\");\n+      if (strcmp (property_getAttributes (property),\n+\t\t  \"T@,GgetP,SsetP:,VpropertyA\") != 0)\n+\tabort ();\n+\n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyB\");\n+      if (strcmp (property_getAttributes (property),\n+\t\t  \"T@,N,VpropertyB\") != 0)\n+\tabort ();\n+    }\n+#endif    \n   }\n \n-  /* TODO: Test new ABI (when available).  */\n   printf (\"Testing property_getName () ...\\n\");\n   {\n     /* The Apple/NeXT runtime seems to crash on the following.  */\n #ifdef __GNU_LIBOBJC__\n     if (property_getName (NULL) != NULL)\n       abort ();\n #endif\n+\n+    /* The GNU runtime doesn't support looking up properties at\n+       runtime yet.  */\n+#ifdef __OBJC2__\n+    {\n+      objc_property_t property;\n+      \n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyA\");\n+      if (strcmp (property_getName (property), \"propertyA\") != 0)\n+\tabort ();\n+\n+      property = class_getProperty (objc_getClass (\"MySubClass\"), \"propertyB\");\n+      if (strcmp (property_getName (property), \"propertyB\") != 0)\n+\tabort ();\n+    }\n+#endif\n   }\n \n   return 0;"}, {"sha": "64b35e7690e7506673f41de7e8e2d8a11fdcc9c5", "filename": "gcc/testsuite/objc.dg/property/property-encoding-1.m", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-encoding-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f787ea5a40ba004ddf757b7d5f33716fe5e1a95b/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-encoding-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-encoding-1.m?ref=f787ea5a40ba004ddf757b7d5f33716fe5e1a95b", "patch": "@@ -0,0 +1,183 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, March 2011.  */\n+/* Test encoding properties.  */\n+/* { dg-do run } */\n+/* { dg-skip-if \"No API#2 pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#include <objc/runtime.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n++ initialize;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n++ initialize { return self; }\n+@end\n+\n+@interface MySubClass : MyRootClass\n+{\n+  char char_property;\n+  short short_property;\n+  int int_property;\n+  long long_property;\n+  float float_property;\n+  double double_property;\n+  int *int_pointer_property;\n+\n+  id propertyA;\n+  id propertyB;\n+  id propertyC;\n+  id propertyD;\n+  int propertyE;\n+  id propertyF;\n+\n+  id other_variable;\n+}\n+@property char char_property;\n+@property short short_property;\n+@property int int_property;\n+@property long long_property;\n+@property float float_property;\n+@property double double_property;\n+@property int *int_pointer_property;\n+\n+@property (assign, getter=getP, setter=setP:) id propertyA;\n+@property (assign) id propertyB;\n+@property (copy) id propertyC;\n+@property (retain) id propertyD;\n+@property (nonatomic) int propertyE;\n+@property (nonatomic, readonly, copy) id propertyF;\n+\n+@property (assign) id propertyG;\n+@property (assign, readonly, getter=X) id propertyH;\n+@end\n+\n+@implementation MySubClass\n+@synthesize char_property;\n+@synthesize short_property;\n+@synthesize int_property;\n+@synthesize long_property;\n+@synthesize float_property;\n+@synthesize double_property;\n+@synthesize int_pointer_property;\n+\n+@synthesize propertyA;\n+@synthesize propertyB;\n+@synthesize propertyC;\n+@synthesize propertyD;\n+@synthesize propertyE;\n+@synthesize propertyF;\n+\n+@synthesize propertyG = other_variable;\n+@dynamic propertyH;\n+@end\n+\n+#ifdef __OBJC2__\n+void error (objc_property_t p)\n+{\n+  printf (\"Error - property_getAttributes (\\\"%s\\\") returns \\\"%s\\\"\\n\",\n+\t  property_getName (p),\n+\t  property_getAttributes (p));\n+  abort ();\n+}\n+\n+/* Concatenate 3 strings and return the result.  */\n+char *concat (char *a, char *b, char *c)\n+{\n+  /* We happily leak memory here.  This is a test.  */\n+  char *x = malloc (sizeof (char) * 128);\n+  snprintf (x, 128, \"%s%s%s\", a, b, c);\n+  return x;\n+}\n+\n+#endif\n+\n+int main(int argc, void **args)\n+{\n+#ifdef __OBJC2__\n+  Class c = objc_getClass (\"MySubClass\");\n+  objc_property_t p;\n+  const char *expected_result;\n+\n+  p = class_getProperty (c, \"char_property\");\n+  /* Usually we expect \"Tc,Vchar_property\", but if a char is of\n+     different size, it may be encoded differently than \"c\".  */\n+  if (strcmp (concat (\"T\", @encode (char), \",Vchar_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"short_property\");\n+  if (strcmp (concat (\"T\", @encode (short), \",Vshort_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"int_property\");\n+  if (strcmp (concat (\"T\", @encode (int), \",Vint_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"long_property\");\n+  if (strcmp (concat (\"T\", @encode (long), \",Vlong_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"float_property\");\n+  if (strcmp (concat (\"T\", @encode (float), \",Vfloat_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"double_property\");\n+  if (strcmp (concat (\"T\", @encode (double), \",Vdouble_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"int_pointer_property\");\n+  if (strcmp (concat (\"T\", @encode (int *), \",Vint_pointer_property\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  /* Objects are always encoded as '@' hence the string does not\n+     depend on the architecture.  */\n+  p = class_getProperty (c, \"propertyA\");\n+  if (strcmp (\"T@,GgetP,SsetP:,VpropertyA\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyB\");\n+  if (strcmp (\"T@,VpropertyB\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyC\");\n+  if (strcmp (\"T@,C,VpropertyC\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyD\");\n+  if (strcmp (\"T@,&,VpropertyD\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyE\");\n+  if (strcmp (concat (\"T\", @encode (int), \",N,VpropertyE\"),\n+\t      property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyF\");\n+  if (strcmp (\"T@,R,C,N,VpropertyF\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyG\");\n+  if (strcmp (\"T@,Vother_variable\", property_getAttributes (p)) != 0)\n+    error (p);\n+\n+  p = class_getProperty (c, \"propertyH\");\n+  if (strcmp (\"T@,R,D,GX\", property_getAttributes (p)) != 0)\n+    error (p);\n+#endif\n+\n+  return 0;\n+}"}]}