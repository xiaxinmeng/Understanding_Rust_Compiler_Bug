{"sha": "e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyMTAxZmYwYWRhNTk4ZWMzNzc3ZGZlY2M1NmVlM2I4NGZkZmEzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-11-12T09:05:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-11-12T09:05:29Z"}, "message": "rtl.h (rtx_function, [...]): Delete.\n\ngcc/\n\t* rtl.h (rtx_function, for_each_rtx, for_each_rtx_in_insn): Delete.\n\t* rtlanal.c (non_rtx_starting_operands, for_each_rtx_1, for_each_rtx):\n\t(for_each_rtx_in_insn): Delete.\n\t(init_rtlanal): Remove initialization of non_rtx_starting_operands.\n\t* df-core.c: Remove reference to for_each_rtx in comment.\n\nFrom-SVN: r217407", "tree": {"sha": "d18714a2611c86230e08bcb51878ff13292e00cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18714a2611c86230e08bcb51878ff13292e00cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02c0ac4584fdd3cb7cce69148cd06a4374ae9e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c0ac4584fdd3cb7cce69148cd06a4374ae9e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02c0ac4584fdd3cb7cce69148cd06a4374ae9e65"}], "stats": {"total": 155, "additions": 10, "deletions": 145}, "files": [{"sha": "fc8510dc972adc4f4541744f42ef06b21519dbb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "patch": "@@ -1,3 +1,11 @@\n+2014-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (rtx_function, for_each_rtx, for_each_rtx_in_insn): Delete.\n+\t* rtlanal.c (non_rtx_starting_operands, for_each_rtx_1, for_each_rtx):\n+\t(for_each_rtx_in_insn): Delete.\n+\t(init_rtlanal): Remove initialization of non_rtx_starting_operands.\n+\t* df-core.c: Remove reference to for_each_rtx in comment.\n+\n 2014-11-12  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* Makefile.in (TEXI_GCC_FILES): Remove arm-acle-intrinsics.texi,"}, {"sha": "8e7a92fbcb46adf4575cb0b7a320b7feef9b449e", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "patch": "@@ -181,7 +181,7 @@ There are four ways of doing the incremental scanning:\n    next call to df_analyze or df_process_deferred_rescans.\n \n    This mode is also used by a few passes that still rely on note_uses,\n-   note_stores and for_each_rtx instead of using the DF data.  This\n+   note_stores and rtx iterators instead of using the DF data.  This\n    can be said to fall under case 1c.\n \n    To enable this mode, call df_set_flags (DF_DEFER_INSN_RESCAN)."}, {"sha": "3bfb6bf1c5f8ea45c61bd638c44f5d68308dfe0f", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "patch": "@@ -2885,10 +2885,6 @@ extern bool tablejump_p (const rtx_insn *, rtx *, rtx_jump_table_data **);\n extern int computed_jump_p (const_rtx);\n extern bool tls_referenced_p (const_rtx);\n \n-typedef int (*rtx_function) (rtx *, void *);\n-extern int for_each_rtx (rtx *, rtx_function, void *);\n-extern int for_each_rtx_in_insn (rtx_insn **, rtx_function, void *);\n-\n /* Callback for for_each_inc_dec, to process the autoinc operation OP\n    within MEM that sets DEST to SRC + SRCOFF, or SRC if SRCOFF is\n    NULL.  The callback is passed the same opaque ARG passed to"}, {"sha": "49c2d4ee9cdd9f2733623e4d62dd1833411d08cf", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 140, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02101ff0ada598ec3777dfecc56ee3b84fdfa31/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e02101ff0ada598ec3777dfecc56ee3b84fdfa31", "patch": "@@ -65,10 +65,6 @@ static unsigned int cached_num_sign_bit_copies (const_rtx, machine_mode, const_r\n static unsigned int num_sign_bit_copies1 (const_rtx, machine_mode, const_rtx,\n                                           machine_mode, unsigned int);\n \n-/* Offset of the first 'e', 'E' or 'V' operand for each rtx code, or\n-   -1 if a code has no such operand.  */\n-static int non_rtx_starting_operands[NUM_RTX_CODE];\n-\n rtx_subrtx_bound_info rtx_all_subrtx_bounds[NUM_RTX_CODE];\n rtx_subrtx_bound_info rtx_nonconst_subrtx_bounds[NUM_RTX_CODE];\n \n@@ -3020,137 +3016,6 @@ computed_jump_p (const_rtx insn)\n   return 0;\n }\n \n-/* Optimized loop of for_each_rtx, trying to avoid useless recursive\n-   calls.  Processes the subexpressions of EXP and passes them to F.  */\n-static int\n-for_each_rtx_1 (rtx exp, int n, rtx_function f, void *data)\n-{\n-  int result, i, j;\n-  const char *format = GET_RTX_FORMAT (GET_CODE (exp));\n-  rtx *x;\n-\n-  for (; format[n] != '\\0'; n++)\n-    {\n-      switch (format[n])\n-\t{\n-\tcase 'e':\n-\t  /* Call F on X.  */\n-\t  x = &XEXP (exp, n);\n-\t  result = (*f) (x, data);\n-\t  if (result == -1)\n-\t    /* Do not traverse sub-expressions.  */\n-\t    continue;\n-\t  else if (result != 0)\n-\t    /* Stop the traversal.  */\n-\t    return result;\n-\n-\t  if (*x == NULL_RTX)\n-\t    /* There are no sub-expressions.  */\n-\t    continue;\n-\n-\t  i = non_rtx_starting_operands[GET_CODE (*x)];\n-\t  if (i >= 0)\n-\t    {\n-\t      result = for_each_rtx_1 (*x, i, f, data);\n-\t      if (result != 0)\n-\t\treturn result;\n-\t    }\n-\t  break;\n-\n-\tcase 'V':\n-\tcase 'E':\n-\t  if (XVEC (exp, n) == 0)\n-\t    continue;\n-\t  for (j = 0; j < XVECLEN (exp, n); ++j)\n-\t    {\n-\t      /* Call F on X.  */\n-\t      x = &XVECEXP (exp, n, j);\n-\t      result = (*f) (x, data);\n-\t      if (result == -1)\n-\t\t/* Do not traverse sub-expressions.  */\n-\t\tcontinue;\n-\t      else if (result != 0)\n-\t\t/* Stop the traversal.  */\n-\t\treturn result;\n-\n-\t      if (*x == NULL_RTX)\n-\t\t/* There are no sub-expressions.  */\n-\t\tcontinue;\n-\n-\t      i = non_rtx_starting_operands[GET_CODE (*x)];\n-\t      if (i >= 0)\n-\t\t{\n-\t\t  result = for_each_rtx_1 (*x, i, f, data);\n-\t\t  if (result != 0)\n-\t\t    return result;\n-\t        }\n-\t    }\n-\t  break;\n-\n-\tdefault:\n-\t  /* Nothing to do.  */\n-\t  break;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n-/* Traverse X via depth-first search, calling F for each\n-   sub-expression (including X itself).  F is also passed the DATA.\n-   If F returns -1, do not traverse sub-expressions, but continue\n-   traversing the rest of the tree.  If F ever returns any other\n-   nonzero value, stop the traversal, and return the value returned\n-   by F.  Otherwise, return 0.  This function does not traverse inside\n-   tree structure that contains RTX_EXPRs, or into sub-expressions\n-   whose format code is `0' since it is not known whether or not those\n-   codes are actually RTL.\n-\n-   This routine is very general, and could (should?) be used to\n-   implement many of the other routines in this file.  */\n-\n-int\n-for_each_rtx (rtx *x, rtx_function f, void *data)\n-{\n-  int result;\n-  int i;\n-\n-  /* Call F on X.  */\n-  result = (*f) (x, data);\n-  if (result == -1)\n-    /* Do not traverse sub-expressions.  */\n-    return 0;\n-  else if (result != 0)\n-    /* Stop the traversal.  */\n-    return result;\n-\n-  if (*x == NULL_RTX)\n-    /* There are no sub-expressions.  */\n-    return 0;\n-\n-  i = non_rtx_starting_operands[GET_CODE (*x)];\n-  if (i < 0)\n-    return 0;\n-\n-  return for_each_rtx_1 (*x, i, f, data);\n-}\n-\n-/* Like \"for_each_rtx\", but for calling on an rtx_insn **.  */\n-\n-int\n-for_each_rtx_in_insn (rtx_insn **insn, rtx_function f, void *data)\n-{\n-  rtx insn_as_rtx = *insn;\n-  int result;\n-\n-  result = for_each_rtx (&insn_as_rtx, f, data);\n-\n-  if (insn_as_rtx != *insn)\n-    *insn = safe_as_a <rtx_insn *> (insn_as_rtx);\n-\n-  return result;\n-}\n-\n \f\n \n /* MEM has a PRE/POST-INC/DEC/MODIFY address X.  Extract the operands of\n@@ -5496,17 +5361,13 @@ setup_reg_subrtx_bounds (unsigned int code)\n   return true;\n }\n \n-/* Initialize non_rtx_starting_operands, which is used to speed up\n-   for_each_rtx, and rtx_all_subrtx_bounds.  */\n+/* Initialize rtx_all_subrtx_bounds.  */\n void\n init_rtlanal (void)\n {\n   int i;\n   for (i = 0; i < NUM_RTX_CODE; i++)\n     {\n-      const char *format = GET_RTX_FORMAT (i);\n-      const char *first = strpbrk (format, \"eEV\");\n-      non_rtx_starting_operands[i] = first ? first - format : -1;\n       if (!setup_reg_subrtx_bounds (i))\n \trtx_all_subrtx_bounds[i].count = UCHAR_MAX;\n       if (GET_RTX_CLASS (i) != RTX_CONST_OBJ)"}]}