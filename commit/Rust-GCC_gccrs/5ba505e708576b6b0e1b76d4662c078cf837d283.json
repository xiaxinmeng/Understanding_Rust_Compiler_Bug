{"sha": "5ba505e708576b6b0e1b76d4662c078cf837d283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhNTA1ZTcwODU3NmI2YjBlMWI3NmQ0NjYyYzA3OGNmODM3ZDI4Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-12-05T22:51:11Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-12-05T22:51:11Z"}, "message": "invoke.texi: Document -fsanitize=signed-integer-overflow.\n\n2013-12-05  Marek Polacek  <polacek@redhat.com>\n\n\t* doc/invoke.texi: Document -fsanitize=signed-integer-overflow.\n\nFrom-SVN: r205721", "tree": {"sha": "0f28564a53d543397db6dad918d704d72fcc8fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f28564a53d543397db6dad918d704d72fcc8fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba505e708576b6b0e1b76d4662c078cf837d283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba505e708576b6b0e1b76d4662c078cf837d283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba505e708576b6b0e1b76d4662c078cf837d283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba505e708576b6b0e1b76d4662c078cf837d283/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cc2edcde433b1edff1699b372d5e70cc0690c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc2edcde433b1edff1699b372d5e70cc0690c88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc2edcde433b1edff1699b372d5e70cc0690c88"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "6f8c8f2b01efad4eb173189ce2f344cc362a57ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba505e708576b6b0e1b76d4662c078cf837d283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba505e708576b6b0e1b76d4662c078cf837d283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ba505e708576b6b0e1b76d4662c078cf837d283", "patch": "@@ -1,3 +1,7 @@\n+2013-12-05  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Document -fsanitize=signed-integer-overflow.\n+\n 2013-12-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.gcc: Support --with-cpu=ia."}, {"sha": "cfb9b38ed40bfb474eb77604e9e5f8614f3529ae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba505e708576b6b0e1b76d4662c078cf837d283/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba505e708576b6b0e1b76d4662c078cf837d283/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5ba505e708576b6b0e1b76d4662c078cf837d283", "patch": "@@ -5363,6 +5363,19 @@ built with this option turned on will issue an error message\n when the end of a non-void function is reached without actually\n returning a value.  This option works in C++ only.\n \n+@item -fsanitize=signed-integer-overflow\n+@opindex fsanitize=signed-integer-overflow\n+\n+This option enables signed integer overflow checking.  We check that\n+the result of @code{+}, @code{*}, and both unary and binary @code{-}\n+does not overflow in the signed arithmetics.  Note, integer promotion\n+rules must be taken into account.  That is, the following is not an\n+overflow:\n+@smallexample\n+signed char a = SCHAR_MAX;\n+a++;\n+@end smallexample\n+\n @end table\n \n While @option{-ftrapv} causes traps for signed overflows to be emitted,"}]}