{"sha": "813415650235b8ca42fe1afb3fcb0430e8628d30", "node_id": "C_kwDOANBUbNoAKDgxMzQxNTY1MDIzNWI4Y2E0MmZlMWFmYjNmY2IwNDMwZTg2MjhkMzA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-10T14:06:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-14T12:34:21Z"}, "message": "libstdc++: Fix std::to_chars for IEEE128 long double\n\nThe preprocessor check for _GLIBCXX_USE_FLOAT128 is the wrong condition,\nbecause when the compiler is built with --with-long-double-format=ieee\nconfigure determines that __float128 is the same as long double, and so\nshould not be used. But we do want the std::to_chars overloads for\n__float128 in that case, because the floating_to_chars.cc file is built\nwith -mabi=ibmlongdouble and so the __float128 overloads are actually\nthe 'long double' ones for -mabi=ieeelongdouble code.\n\nThis fixes missing definitions of the __float128 overloads of\nstd::to_chars for --with-long-double-format=ieee builds. Without this,\nthere are symbols present in the --with-long-double-abi=ibm build which\nare missing from the --with-long-double-abi=ieee build.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_to_chars.cc (FLOAT128_TO_CHARS): Depend on\n\tLONG_DOUBLE_ALT128_COMPAT instead of USE_FLOAT128.", "tree": {"sha": "3bb3be50de2ac68600f46007390232618c0cbb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb3be50de2ac68600f46007390232618c0cbb67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/813415650235b8ca42fe1afb3fcb0430e8628d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813415650235b8ca42fe1afb3fcb0430e8628d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813415650235b8ca42fe1afb3fcb0430e8628d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813415650235b8ca42fe1afb3fcb0430e8628d30/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f320197c8b495324dc6997a99d53e7f45ecf5840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f320197c8b495324dc6997a99d53e7f45ecf5840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f320197c8b495324dc6997a99d53e7f45ecf5840"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "5825e661bf42a96d9322343a2179ad72f81dd862", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813415650235b8ca42fe1afb3fcb0430e8628d30/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813415650235b8ca42fe1afb3fcb0430e8628d30/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=813415650235b8ca42fe1afb3fcb0430e8628d30", "patch": "@@ -76,16 +76,12 @@ extern \"C\" int __sprintfieee128(char*, const char*, ...);\n # define LONG_DOUBLE_KIND LDK_UNSUPPORTED\n #endif\n \n-#if defined _GLIBCXX_USE_FLOAT128 && __FLT128_MANT_DIG__ == 113\n+// For now we only support __float128 when it's the powerpc64 __ieee128 type.\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __FLT128_MANT_DIG__ == 113\n // Define overloads of std::to_chars for __float128.\n # define FLOAT128_TO_CHARS 1\n #endif\n \n-// For now we only support __float128 when it's the powerpc64 __ieee128 type.\n-#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n-# undef FLOAT128_TO_CHARS\n-#endif\n-\n #ifdef FLOAT128_TO_CHARS\n using F128_type = __float128;\n #else"}]}