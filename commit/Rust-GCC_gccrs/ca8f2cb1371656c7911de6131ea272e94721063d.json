{"sha": "ca8f2cb1371656c7911de6131ea272e94721063d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4ZjJjYjEzNzE2NTZjNzkxMWRlNjEzMWVhMjcyZTk0NzIxMDYzZA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-28T15:15:26Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-28T15:15:26Z"}, "message": "Implement std::string_view and P0254r2,\n\n\tIntegrating std::string_view and std::string.\n\t* include/Makefile.am: Add string_view and string_view.tcc\n\tto the exported headers.\n\t* include/Makefile.in: Likewise.\n\t* include/bits/basic_string.h: Include <string_view> in C++17 mode.\n\t(__sv_type): New.\n\t(basic_string(__sv_type, const _Alloc&)): Likewise.\n\t(operator=(__sv_type)): Likewise.\n\t(operator __sv_type()): Likewise.\n\t(operator+=(__sv_type)): Likewise.\n\t(append(__sv_type __sv)): Likewise.\n\t(append(__sv_type, size_type, size_type)): Likewise.\n\t(assign(__sv_type)): Likewise.\n\t(assign(__sv_type, size_type, size_type)): Likewise.\n\t(insert(size_type, __sv_type)): Likewise.\n\t(insert(size_type, __sv_type, size_type, size_type)): Likewise.\n\t(replace(size_type, size_type, __sv_type)): Likewise.\n\t(replace(size_type, size_type, __sv_type, size_type, size_type)):\n\tLikewise.\n\t(replace(const_iterator, const_iterator, __sv_type)): Likewise.\n\t(find(__sv_type, size_type)): Likewise.\n\t(rfind(__sv_type, size_type)): Likewise.\n\t(find_first_of(__sv_type, size_type)): Likewise.\n\t(find_last_of(__sv_type, size_type)): Likewise.\n\t(find_first_not_of(__sv_type, size_type)): Likewise.\n\t(find_last_not_of(__sv_type, size_type)): Likewise.\n\t(compare(__sv_type)): Likewise.\n\t(compare(size_type, size_type, __sv_type)): Likewise.\n\t(compare(size_type, size_type, __sv_type, size_type, size_type)):\n\tLikewise.\n\t* include/bits/string_view.tcc: New.\n\t* include/std/string_view: Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/7.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/7.cc: Likewise.\n\t* testsuite/21_strings/basic_string/modifiers/append/char/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/assign/char/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/insert/char/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/find/char/5.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operators/char/5.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operators/wchar_t/5.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/capacity/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/char/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/empty.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/front_back.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/empty.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_back.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/include.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/inserters/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/inserters/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/inserters/char/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/inserters/pod/10081-out.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/char/13650.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/13650.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/copy/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/copy/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/data/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/data/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/char/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/char/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/char/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/string_conversion/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/substr/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/substr/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operators/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/operators/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/range_access/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char16_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char32_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/typedefs.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/types/1.cc: Likewise.\n\nFrom-SVN: r238823", "tree": {"sha": "f14b086558dff5bf4964880f66d0b1f7d272d7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14b086558dff5bf4964880f66d0b1f7d272d7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca8f2cb1371656c7911de6131ea272e94721063d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8f2cb1371656c7911de6131ea272e94721063d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8f2cb1371656c7911de6131ea272e94721063d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8f2cb1371656c7911de6131ea272e94721063d/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23404c90f9353b89ac9eb0871b20cbb11562942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23404c90f9353b89ac9eb0871b20cbb11562942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23404c90f9353b89ac9eb0871b20cbb11562942"}], "stats": {"total": 6458, "additions": 6458, "deletions": 0}, "files": [{"sha": "15ae18f55d3b83929f48d55c78f62fd1f11f21c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -1,3 +1,181 @@\n+2016-07-28  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement std::string_view and P0254r2,\n+\tIntegrating std::string_view and std::string.\n+\t* include/Makefile.am: Add string_view and string_view.tcc\n+\tto the exported headers.\n+\t* include/Makefile.in: Likewise.\n+\t* include/bits/basic_string.h: Include <string_view> in C++17 mode.\n+\t(__sv_type): New.\n+\t(basic_string(__sv_type, const _Alloc&)): Likewise.\n+\t(operator=(__sv_type)): Likewise.\n+\t(operator __sv_type()): Likewise.\n+\t(operator+=(__sv_type)): Likewise.\n+\t(append(__sv_type __sv)): Likewise.\n+\t(append(__sv_type, size_type, size_type)): Likewise.\n+\t(assign(__sv_type)): Likewise.\n+\t(assign(__sv_type, size_type, size_type)): Likewise.\n+\t(insert(size_type, __sv_type)): Likewise.\n+\t(insert(size_type, __sv_type, size_type, size_type)): Likewise.\n+\t(replace(size_type, size_type, __sv_type)): Likewise.\n+\t(replace(size_type, size_type, __sv_type, size_type, size_type)):\n+\tLikewise.\n+\t(replace(const_iterator, const_iterator, __sv_type)): Likewise.\n+\t(find(__sv_type, size_type)): Likewise.\n+\t(rfind(__sv_type, size_type)): Likewise.\n+\t(find_first_of(__sv_type, size_type)): Likewise.\n+\t(find_last_of(__sv_type, size_type)): Likewise.\n+\t(find_first_not_of(__sv_type, size_type)): Likewise.\n+\t(find_last_not_of(__sv_type, size_type)): Likewise.\n+\t(compare(__sv_type)): Likewise.\n+\t(compare(size_type, size_type, __sv_type)): Likewise.\n+\t(compare(size_type, size_type, __sv_type, size_type, size_type)):\n+\tLikewise.\n+\t* include/bits/string_view.tcc: New.\n+\t* include/std/string_view: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/char/7.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/7.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/modifiers/append/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/5.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operators/char/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operators/wchar_t/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/capacity/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/empty.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_back.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/empty.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_back.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/include.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/pod/10081-out.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/13650.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/13650.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/data/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/data/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/string_conversion/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operators/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/operators/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char16_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char32_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/typedefs.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/types/1.cc: Likewise.\n+\n 2016-07-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/forward/1_neg.cc: Move dg-error to right line."}, {"sha": "e2c4f63d623a322770159f2c3ecaa76e493a5908", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -67,6 +67,7 @@ std_headers = \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/string_view \\\n \t${std_srcdir}/system_error \\\n \t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n@@ -183,6 +184,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/string_view.tcc \\\n \t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/unordered_map.h \\"}, {"sha": "882ff14557dafc81c12a8f0652c40127132f2f7d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -357,6 +357,7 @@ std_headers = \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/string_view \\\n \t${std_srcdir}/system_error \\\n \t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n@@ -473,6 +474,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/string_view.tcc \\\n \t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/unordered_map.h \\"}, {"sha": "49290adf55b6be7d32df68d5b3fc1672e81d6168", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -44,6 +44,11 @@\n #include <initializer_list>\n #endif\n \n+#if __cplusplus > 201402L\n+# include <string_view>\n+#endif\n+\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -103,6 +108,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       typedef const_iterator __const_iterator;\n #endif\n \n+#if __cplusplus > 201402L\n+      // A helper type for avoiding boiler-plate.\n+      typedef basic_string_view<_CharT, _Traits> __sv_type;\n+#endif\n+\n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : allocator_type // TODO check __is_final\n       {\n@@ -559,6 +569,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t: _M_dataplus(_M_local_data(), __a)\n \t{ _M_construct(__beg, __end); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Construct string from a string_view.\n+       *  @param  __sv  Source string view.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+      explicit basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n+\t: basic_string(__sv.data(), __sv.size(), __a) {}\n+#endif // C++17\n+\n       /**\n        *  @brief  Destroy the string instance.\n        */\n@@ -684,6 +704,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Set value to string constructed from a string_view.\n+       *  @param  __sv  A string_view.\n+       */\n+      basic_string& operator=(__sv_type __sv)\n+      {\treturn this->assign(__sv); }\n+\n+      /**\n+       *  @brief  Convert to a string_view.\n+       *  @return A string_view.\n+       */\n+      operator __sv_type() const noexcept\n+      {\treturn __sv_type(data(), size()); }\n+#endif // C++17\n+\n       // Iterators:\n       /**\n        *  Returns a read/write iterator that points to the first character in\n@@ -1067,6 +1103,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->append(__l.begin(), __l.size()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Append a string_view.\n+       *  @param __sv  The string_view to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(__sv_type __sv)\n+      {\treturn this->append(__sv); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Append a string to this string.\n        *  @param __str  The string to append.\n@@ -1164,6 +1211,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n         append(_InputIterator __first, _InputIterator __last)\n         { return this->replace(end(), end(), __first, __last); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Append a string_view.\n+       *  @param __sv  The string_view to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string& append(__sv_type __sv)\n+      { return this->append(__sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Append a range of characters from a string_view.\n+       *  @param __sv  The string_view to be appended from.\n+       *  @param __pos The position in the string_view to append from.\n+       *  @param __n   The number of characters to append from the string_view.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string& append(__sv_type __sv,\n+\t\t\t   size_type __pos, size_type __n = npos)\n+      {\n+\treturn _M_append(__sv.data()\n+\t\t\t + __sv._M_check(__pos, \"basic_string::append\"),\n+\t\t\t __sv._M_limit(__pos, __n));\n+      }\n+#endif // C++17\n+\n       /**\n        *  @brief  Append a single character.\n        *  @param __c  Character to append.\n@@ -1304,6 +1376,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->assign(__l.begin(), __l.size()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Set value from a string_view.\n+       *  @param __sv  The source string_view.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string& assign(__sv_type __sv)\n+      {\treturn this->assign(__sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Set value from a range of characters in a string_view.\n+       *  @param __sv  The source string_view.\n+       *  @param __pos  The position in the string_view to assign from.\n+       *  @param __n  The number of characters to assign.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      assign(__sv_type __sv,\n+\t     size_type __pos, size_type __n = npos)\n+      {\n+\treturn _M_replace(size_type(0), this->size(), __sv.data()\n+\t\t\t  + __sv._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t  __sv._M_limit(__pos, __n));\n+      }\n+#endif // C++17\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Insert multiple characters.\n@@ -1534,6 +1632,35 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn iterator(_M_data() + __pos);\n       }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Insert a string_view.\n+       *  @param __pos  Iterator referencing position in string to insert at.\n+       *  @param __sv   The string_view to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string& insert(size_type __pos,\n+\t\t\t   __sv_type __sv)\n+      {\treturn this->insert(__pos, __sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Insert a string_view.\n+       *  @param __pos  Iterator referencing position in string to insert at.\n+       *  @param __sv   The string_view to insert from.\n+       *  @param __pos  Iterator referencing position in string_view to insert\n+       *  from.\n+       *  @param __n    The number of characters to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string& insert(size_type __pos1, __sv_type __sv,\n+\t\t\t   size_type __pos2, size_type __n = npos)\n+      {\n+\treturn this->replace(__pos1, size_type(0), __sv.data()\n+\t\t\t     + __sv._M_check(__pos2, \"basic_string::insert\"),\n+\t\t\t     __sv._M_limit(__pos2, __n));\n+      }\n+#endif // C++17\n+\n       /**\n        *  @brief  Remove characters.\n        *  @param __pos  Index of first character to remove (default 0).\n@@ -1923,6 +2050,50 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }\n #endif // C++11\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __pos  The position to replace at.\n+       *  @param __n    The number of characters to replace.\n+       *  @param __sv  The string_view to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string& replace(size_type __pos, size_type __n,\n+\t\t\t    __sv_type __sv)\n+      {\treturn this->replace(__pos, __n, __sv.data(), __sv.size()); }\n+\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __pos1  The position to replace at.\n+       *  @param __n1    The number of characters to replace.\n+       *  @param __sv    The string_view to insert from.\n+       *  @param __pos2  The position in the string_view to insert from.\n+       *  @param __n2    The number of characters to insert.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string& replace(size_type __pos1, size_type __n1,\n+\t\t\t    __sv_type __sv,\n+\t\t\t    size_type __pos2, size_type __n2 = npos)\n+      {\n+\treturn this->replace(__pos1, __n1, __sv.data()\n+\t\t\t     + __sv._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t     __sv._M_limit(__pos2, __n2));\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with string_view.\n+       *  @param __i1    An iterator referencing the start position\n+          to replace at.\n+       *  @param __i2    An iterator referencing the end position\n+          for the replace.\n+       *  @param __sv    The string_view to insert from.\n+       *  @return  Reference to this string.\n+      */\n+      basic_string& replace(const_iterator __i1, const_iterator __i2,\n+\t\t\t    __sv_type __sv)\n+      {\treturn this->replace(__i1 - begin(), __i2 - __i1, __sv); }\n+#endif // C++17\n+\n     private:\n       template<class _Integer>\n \tbasic_string&\n@@ -2032,6 +2203,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a string_view.\n+       *  @param __sv  The string_view to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+      */\n+      size_type\n+      find(__sv_type __sv,\n+\t    size_type __pos = 0) const noexcept\n+      {\treturn this->find(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find position of a C string.\n        *  @param __s  C string to locate.\n@@ -2077,6 +2261,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a string_view.\n+       *  @param __sv   The string_view to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of start of last occurrence.\n+      */\n+      size_type\n+      rfind (__sv_type __sv,\n+\t     size_type __pos = npos) const noexcept\n+      {\treturn this->rfind(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a C substring.\n        *  @param __s  C string to locate.\n@@ -2138,6 +2335,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a character of a string_view.\n+       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+      */\n+      size_type\n+      find_first_of(__sv_type __sv, size_type __pos = 0) const noexcept\n+      {\treturn this->find_first_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find position of a character of C substring.\n        *  @param __s  String containing characters to locate.\n@@ -2202,6 +2411,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a character of string.\n+       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+      */\n+      size_type\n+      find_last_of(__sv_type __sv, size_type __pos = npos) const noexcept\n+      {\treturn this->find_last_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a character of C substring.\n        *  @param __s  C string containing characters to locate.\n@@ -2265,6 +2486,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find position of a character not in a string_view.\n+       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       */\n+      size_type\n+      find_first_not_of(__sv_type __sv, size_type __pos = 0) const noexcept\n+      {\treturn this->find_first_not_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find position of a character not in C substring.\n        *  @param __s  C string containing characters to avoid.\n@@ -2328,6 +2561,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Find last position of a character not in a string_view.\n+       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       */\n+      size_type\n+      find_last_not_of(__sv_type __sv, size_type __pos = npos) const noexcept\n+      {\treturn this->find_last_not_of(__sv.data(), __pos, __sv.size()); }\n+#endif // C++17\n+\n       /**\n        *  @brief  Find last position of a character not in C substring.\n        *  @param __s  C string containing characters to avoid.\n@@ -2419,6 +2664,57 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn __r;\n       }\n \n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __sv  A string_view to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      int\n+      compare(__sv_type __sv) const\n+      {\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = __sv.size();\n+\tconst size_type __len = std::min(__size, __osize);\n+\n+\tint __r = traits_type::compare(_M_data(), __sv.data(), __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__size, __osize);\n+\treturn __r;\n+      }\n+\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __pos  A position in the string to start comparing from.\n+       *  @param __n  The number of characters to compare.\n+       *  @param __sv   A string_view to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      int\n+      compare(size_type __pos, size_type __n,\n+\t      __sv_type __sv) const\n+      {\n+\treturn __sv_type(*this).substr(__pos, __n).compare(__sv);\n+      }\n+\n+      /**\n+       *  @brief  Compare to a string_view.\n+       *  @param __pos1  A position in the string to start comparing from.\n+       *  @param __n1  The number of characters to compare.\n+       *  @param __sv   A string_view to compare against.\n+       *  @param __pos2  A position in the string_view to start comparing from.\n+       *  @param __n2  The number of characters to compare.\n+       *  @return  Integer < 0, 0, or > 0.\n+       */\n+      int compare(size_type __pos1, size_type __n1,\n+\t\t  __sv_type __sv,\n+\t\t  size_type __pos2, size_type __n2 = npos) const\n+      {\n+\treturn __sv_type(*this)\n+\t  .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));\n+      }\n+#endif // C++17\n+\n       /**\n        *  @brief  Compare substring to a string.\n        *  @param __pos  Index of first character of substring."}, {"sha": "7de5519b0f5682bc4d46fba4faeb1354af201ab8", "filename": "libstdc++-v3/include/bits/string_view.tcc", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,227 @@\n+// Components for manipulating non-owning sequences of characters -*- C++ -*-\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/string_view.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{string_view}\n+ */\n+\n+//\n+// N3762 basic_string_view library\n+//\n+\n+#ifndef _GLIBCXX_STRING_VIEW_TCC\n+#define _GLIBCXX_STRING_VIEW_TCC 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201402L\n+# include <bits/c++17_warning.h>\n+#else\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+\n+      if (__n == 0)\n+\treturn __pos <= this->_M_len ? __pos : npos;\n+\n+      if (__n <= this->_M_len)\n+\t{\n+\t  for (; __pos <= this->_M_len - __n; ++__pos)\n+\t    if (traits_type::eq(this->_M_str[__pos], __str[0])\n+\t\t&& traits_type::compare(this->_M_str + __pos + 1,\n+\t\t\t\t\t__str + 1, __n - 1) == 0)\n+\t      return __pos;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __ret = npos;\n+      if (__pos < this->_M_len)\n+\t{\n+\t  const size_type __n = this->_M_len - __pos;\n+\t  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);\n+\t  if (__p)\n+\t    __ret = __p - this->_M_str;\n+\t}\n+      return __ret;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+\n+      if (__n <= this->_M_len)\n+\t{\n+\t  __pos = std::min(size_type(this->_M_len - __n), __pos);\n+\t  do\n+\t    {\n+\t      if (traits_type::compare(this->_M_str + __pos, __str, __n) == 0)\n+\t\treturn __pos;\n+\t    }\n+\t  while (__pos-- > 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    rfind(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __size = this->_M_len;\n+      if (__size > 0)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  for (++__size; __size-- > 0; )\n+\t    if (traits_type::eq(this->_M_str[__size], __c))\n+\t      return __size;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      for (; __n && __pos < this->_M_len; ++__pos)\n+\t{\n+\t  const _CharT* __p = traits_type::find(__str, __n,\n+\t\t\t\t\t\tthis->_M_str[__pos]);\n+\t  if (__p)\n+\t    return __pos;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      size_type __size = this->size();\n+      if (__size && __n)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (traits_type::find(__str, __n, this->_M_str[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size-- != 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      for (; __pos < this->_M_len; ++__pos)\n+\tif (!traits_type::find(__str, __n, this->_M_str[__pos]))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_not_of(_CharT __c, size_type __pos) const noexcept\n+    {\n+      for (; __pos < this->_M_len; ++__pos)\n+\tif (!traits_type::eq(this->_M_str[__pos], __c))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      size_type __size = this->_M_len;\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::find(__str, __n, this->_M_str[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_not_of(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __size = this->_M_len;\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::eq(this->_M_str[__size], __c))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // __cplusplus <= 201402L\n+\n+#endif // _GLIBCXX_STRING_VIEW_TCC"}, {"sha": "d78ed0284dd7e96cf5fdc4c7522f3d6243cc8591", "filename": "libstdc++-v3/include/std/string_view", "status": "added", "additions": 652, "deletions": 0, "changes": 652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,652 @@\n+// Components for manipulating non-owning sequences of characters -*- C++ -*-\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file string_view\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+//\n+// N3762 basic_string_view library\n+//\n+\n+#ifndef _GLIBCXX_STRING_VIEW\n+#define _GLIBCXX_STRING_VIEW 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201402L\n+# include <bits/c++17_warning.h>\n+#else\n+\n+#include <limits>\n+#include <iosfwd>\n+#include <bits/char_traits.h>\n+#include <bits/functional_hash.h>\n+#include <bits/range_access.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   *  @class basic_string_view <string_view>\n+   *  @brief  A non-owning reference to a string.\n+   *\n+   *  @ingroup strings\n+   *  @ingroup sequences\n+   *\n+   *  @tparam _CharT  Type of character\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n+   *  A basic_string_view looks like this:\n+   *\n+   *  @code\n+   *    _CharT*    _M_str\n+   *    size_t     _M_len\n+   *  @endcode\n+   */\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT>>\n+    class basic_string_view\n+    {\n+    public:\n+\n+      // types\n+      using traits_type = _Traits;\n+      using value_type = _CharT;\n+      using pointer = const _CharT*;\n+      using const_pointer = const _CharT*;\n+      using reference = const _CharT&;\n+      using const_reference = const _CharT&;\n+      using const_iterator = const _CharT*;\n+      using iterator = const_iterator;\n+      using const_reverse_iterator = std::reverse_iterator<const_iterator>;\n+      using reverse_iterator = const_reverse_iterator;\n+      using size_type = size_t;\n+      using difference_type = ptrdiff_t;\n+      static constexpr size_type npos = size_type(-1);\n+\n+      // [string.view.cons], construct/copy\n+\n+      constexpr\n+      basic_string_view() noexcept\n+      : _M_len{0}, _M_str{nullptr}\n+      { }\n+\n+      constexpr basic_string_view(const basic_string_view&) noexcept = default;\n+\n+      constexpr basic_string_view(const _CharT* __str)\n+      : _M_len{__str == nullptr ? 0 : traits_type::length(__str)},\n+\t_M_str{__str}\n+      { }\n+\n+      constexpr basic_string_view(const _CharT* __str, size_type __len)\n+      : _M_len{__len},\n+        _M_str{__str}\n+      { }\n+\n+      basic_string_view&\n+      operator=(const basic_string_view&) noexcept = default;\n+\n+      // [string.view.iterators], iterators\n+\n+      constexpr const_iterator\n+      begin() const noexcept\n+      { return this->_M_str; }\n+\n+      constexpr const_iterator\n+      end() const noexcept\n+      { return this->_M_str + this->_M_len; }\n+\n+      constexpr const_iterator\n+      cbegin() const noexcept\n+      { return this->_M_str; }\n+\n+      constexpr const_iterator\n+      cend() const noexcept\n+      { return this->_M_str + this->_M_len; }\n+\n+      const_reverse_iterator\n+      rbegin() const noexcept\n+      { return const_reverse_iterator(this->end()); }\n+\n+      const_reverse_iterator\n+      rend() const noexcept\n+      { return const_reverse_iterator(this->begin()); }\n+\n+      const_reverse_iterator\n+      crbegin() const noexcept\n+      { return const_reverse_iterator(this->end()); }\n+\n+      const_reverse_iterator\n+      crend() const noexcept\n+      { return const_reverse_iterator(this->begin()); }\n+\n+      // [string.view.capacity], capacity\n+\n+      constexpr size_type\n+      size() const noexcept\n+      { return this->_M_len; }\n+\n+      constexpr size_type\n+      length() const noexcept\n+      { return _M_len; }\n+\n+      constexpr size_type\n+      max_size() const noexcept\n+      {\n+\treturn (npos - sizeof(size_type) - sizeof(void*))\n+\t\t/ sizeof(value_type) / 4;\n+      }\n+\n+      constexpr bool\n+      empty() const noexcept\n+      { return this->_M_len == 0; }\n+\n+      // [string.view.access], element access\n+\n+      constexpr const _CharT&\n+      operator[](size_type __pos) const noexcept\n+      {\n+\t// TODO: Assert to restore in a way compatible with the constexpr.\n+\t// __glibcxx_assert(__pos < this->_M_len);\n+\treturn *(this->_M_str + __pos);\n+      }\n+\n+      constexpr const _CharT&\n+      at(size_type __pos) const\n+      {\n+\treturn __pos < this->_M_len\n+\t     ? *(this->_M_str + __pos)\n+\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n+\t\t\t\t\t     \"(which is %zu) >= this->size() \"\n+\t\t\t\t\t     \"(which is %zu)\"),\n+\t\t\t\t\t __pos, this->size()),\n+\t\t*this->_M_str);\n+      }\n+\n+      constexpr const _CharT&\n+      front() const\n+      {\n+\t// TODO: Assert to restore in a way compatible with the constexpr.\n+\t// __glibcxx_assert(this->_M_len > 0);\n+\treturn *this->_M_str;\n+      }\n+\n+      constexpr const _CharT&\n+      back() const\n+      {\n+\t// TODO: Assert to restore in a way compatible with the constexpr.\n+\t// __glibcxx_assert(this->_M_len > 0);\n+\treturn *(this->_M_str + this->_M_len - 1);\n+      }\n+\n+      constexpr const _CharT*\n+      data() const noexcept\n+      { return this->_M_str; }\n+\n+      // [string.view.modifiers], modifiers:\n+\n+      void\n+      remove_prefix(size_type __n)\n+      {\n+\t__glibcxx_assert(this->_M_len >= __n);\n+\tthis->_M_str += __n;\n+\tthis->_M_len -= __n;\n+      }\n+\n+      void\n+      remove_suffix(size_type __n)\n+      { this->_M_len -= __n; }\n+\n+      void\n+      swap(basic_string_view& __sv) noexcept\n+      {\n+\tstd::swap(this->_M_len, __sv._M_len);\n+\tstd::swap(this->_M_str, __sv._M_str);\n+      }\n+\n+\n+      // [string.view.ops], string operations:\n+\n+      size_type\n+      copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string_len(__str, __n);\n+\tif (__pos > this->_M_len)\n+\t  __throw_out_of_range_fmt(__N(\"basic_string_view::copy: __pos \"\n+\t\t\t\t       \"(which is %zu) > this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __pos, this->size());\n+\tsize_type __rlen{std::min(__n, size_type{this->_M_len  - __pos})};\n+\tfor (auto __begin = this->_M_str + __pos,\n+\t     __end = __begin + __rlen; __begin != __end;)\n+\t  *__str++ = *__begin++;\n+\treturn __rlen;\n+      }\n+\n+\n+      // [string.view.ops], string operations:\n+\n+      constexpr basic_string_view\n+      substr(size_type __pos, size_type __n=npos) const\n+      {\n+\treturn __pos <= this->_M_len\n+\t     ? basic_string_view{this->_M_str + __pos,\n+\t\t\t\tstd::min(__n, size_type{this->_M_len  - __pos})}\n+\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::substr: __pos \"\n+\t\t\t\t\t     \"(which is %zu) > this->size() \"\n+\t\t\t\t\t     \"(which is %zu)\"),\n+\t\t\t\t     __pos, this->size()), basic_string_view{});\n+      }\n+\n+      int\n+      compare(basic_string_view __str) const noexcept\n+      {\n+\tint __ret = traits_type::compare(this->_M_str, __str._M_str,\n+\t\t\t\t\t std::min(this->_M_len, __str._M_len));\n+\tif (__ret == 0)\n+\t  __ret = _S_compare(this->_M_len, __str._M_len);\n+\treturn __ret;\n+      }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1, basic_string_view __str) const\n+      { return this->substr(__pos1, __n1).compare(__str); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1,\n+\t      basic_string_view __str, size_type __pos2, size_type __n2) const\n+      { return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); }\n+\n+      int\n+      compare(const _CharT* __str) const noexcept\n+      { return this->compare(basic_string_view{__str}); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1, const _CharT* __str) const\n+      { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1,\n+\t      const _CharT* __str, size_type __n2) const\n+      {\n+\treturn this->substr(__pos1, __n1)\n+\t\t   .compare(basic_string_view(__str, __n2));\n+      }\n+\n+      size_type\n+      find(basic_string_view __str, size_type __pos = 0) const noexcept\n+      { return this->find(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find(_CharT __c, size_type __pos=0) const noexcept;\n+\n+      size_type\n+      find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n+\n+      size_type\n+      find(const _CharT* __str, size_type __pos=0) const noexcept\n+      { return this->find(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      rfind(basic_string_view __str, size_type __pos = npos) const noexcept\n+      { return this->rfind(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      rfind(_CharT __c, size_type __pos = npos) const noexcept;\n+\n+      size_type\n+      rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n+\n+      size_type\n+      rfind(const _CharT* __str, size_type __pos = npos) const noexcept\n+      { return this->rfind(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept\n+      { return this->find_first_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_first_of(_CharT __c, size_type __pos = 0) const noexcept\n+      { return this->find(__c, __pos); }\n+\n+      size_type\n+      find_first_of(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept\n+      { return this->find_first_of(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_last_of(basic_string_view __str,\n+\t\t   size_type __pos = npos) const noexcept\n+      { return this->find_last_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_last_of(_CharT __c, size_type __pos=npos) const noexcept\n+      { return this->rfind(__c, __pos); }\n+\n+      size_type\n+      find_last_of(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\n+      { return this->find_last_of(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_first_not_of(basic_string_view __str,\n+\t\t\tsize_type __pos = 0) const noexcept\n+      { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;\n+\n+      size_type\n+      find_first_not_of(const _CharT* __str,\n+\t\t\tsize_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\n+      {\n+\treturn this->find_first_not_of(__str, __pos,\n+\t\t\t\t       traits_type::length(__str));\n+      }\n+\n+      size_type\n+      find_last_not_of(basic_string_view __str,\n+\t\t       size_type __pos = npos) const noexcept\n+      { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;\n+\n+      size_type\n+      find_last_not_of(const _CharT* __str,\n+\t\t       size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_last_not_of(const _CharT* __str,\n+\t\t       size_type __pos = npos) const noexcept\n+      {\n+\treturn this->find_last_not_of(__str, __pos,\n+\t\t\t\t      traits_type::length(__str));\n+      }\n+\n+      size_type\n+      _M_check(size_type __pos, const char* __s) const\n+      {\n+\tif (__pos > this->size())\n+\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n+\t\t\t\t       \"this->size() (which is %zu)\"),\n+\t\t\t\t   __s, __pos, this->size());\n+\treturn __pos;\n+      }\n+\n+      // NB: _M_limit doesn't check for a bad __pos value.\n+      size_type\n+      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n+      {\n+\tconst bool __testoff =  __off < this->size() - __pos;\n+\treturn __testoff ? __off : this->size() - __pos;\n+      }\n+      \n+    private:\n+\n+      static constexpr const int\n+      _S_compare(size_type __n1, size_type __n2) noexcept\n+      {\n+\treturn difference_type{__n1 - __n2} > std::numeric_limits<int>::max()\n+\t     ? std::numeric_limits<int>::max()\n+\t     : difference_type{__n1 - __n2} < std::numeric_limits<int>::min()\n+\t     ? std::numeric_limits<int>::min()\n+\t     : static_cast<int>(difference_type{__n1 - __n2});\n+      }\n+\n+      size_t\t    _M_len;\n+      const _CharT* _M_str;\n+    };\n+\n+\n+  // [string.view.comparison], non-member basic_string_view comparison function\n+ _GLIBCXX_END_NAMESPACE_VERSION\n+  namespace __detail\n+  {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+    //  Identity transform to make ADL work with just one argument.\n+    //  See n3766.html.\n+    template<typename _Tp = void>\n+      struct __identity\n+      { typedef _Tp type; };\n+\n+    template<>\n+      struct __identity<void>;\n+\n+    template<typename _Tp>\n+      using __idt = typename __identity<_Tp>::type;\n+ _GLIBCXX_END_NAMESPACE_VERSION\n+  }\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator==(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator==(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator!=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator!=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator< (basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator< (basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator> (basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator> (basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator<=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator<=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator>=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator>=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline bool\n+    operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  // [string.view.io], Inserters and extractors\n+  template<typename _CharT, typename _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t       basic_string_view<_CharT,_Traits> __str)\n+    { return __ostream_insert(__os, __str.data(), __str.size()); }\n+\n+\n+  // basic_string_view typedef names\n+\n+  using string_view = basic_string_view<char>;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using wstring_view = basic_string_view<wchar_t>;\n+#endif\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  using u16string_view = basic_string_view<char16_t>;\n+  using u32string_view = basic_string_view<char32_t>;\n+#endif\n+\n+  // [string.view.hash], hash support:\n+\n+  template<typename _Tp>\n+    struct hash;\n+\n+  template<>\n+    struct hash<string_view>\n+    : public __hash_base<size_t, string_view>\n+    {\n+      size_t\n+      operator()(const string_view& __str) const noexcept\n+      { return std::_Hash_impl::hash(__str.data(), __str.length()); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<string_view>> : std::false_type\n+    { };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct hash<wstring_view>\n+    : public __hash_base<size_t, wstring>\n+    {\n+      size_t\n+      operator()(const wstring_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(wchar_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<wstring_view>> : std::false_type\n+    { };\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  template<>\n+    struct hash<u16string_view>\n+    : public __hash_base<size_t, u16string_view>\n+    {\n+      size_t\n+      operator()(const u16string_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char16_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<u16string_view>> : std::false_type\n+    { };\n+\n+  template<>\n+    struct hash<u32string_view>\n+    : public __hash_base<size_t, u32string_view>\n+    {\n+      size_t\n+      operator()(const u32string_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char32_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<u32string_view>> : std::false_type\n+    { };\n+#endif\n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#include <bits/string_view.tcc>\n+\n+#endif // __cplusplus <= 201402L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_STRING_VIEW"}, {"sha": "181ef7e2446eebc676f70e19d9f5021b88b684ae", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/7.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F7.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.cons]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string_view s(\"foo\");\n+  std::string s2(s);\n+  \n+  VERIFY(s==s2);\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "f037e538221682cc6d426efdbaa7eae7724f5eae", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/7.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F7.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.cons]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring_view s(L\"foo\");\n+  std::wstring s2(s);\n+  \n+  VERIFY(s==s2);\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "2a94452a10aa0df6efdd6278ea6d5a0bf55980fe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/append/char/4.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"foo\");\n+  std::string str2;\n+  str2 += str1;\n+  VERIFY (str2 == str1);\n+  std::string str3;\n+  str3.append(str1);\n+  VERIFY (str3 == str1);\n+  std::string str4;\n+  str4.append(str1, 1, 2);\n+  VERIFY (str4 == \"oo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "5512f060383bdfa2f0f2a9449b3f44dd2700588e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fwchar_t%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"foo\");\n+  std::wstring str2;\n+  str2 += str1;\n+  VERIFY (str2 == str1);\n+  std::wstring str3;\n+  str3.append(str1);\n+  VERIFY (str3 == str1);\n+  std::wstring str4;\n+  str4.append(str1, 1, 2);\n+  VERIFY (str4 == L\"oo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "b8955b5cbf3235853d39545c077a3a40be46bb8e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/char/4.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"foo\");\n+  std::string str2;\n+  str2.assign(str1);\n+  VERIFY (str2 == str1);\n+  std::string str4;\n+  str4.assign(str1, 1, 2);\n+  VERIFY (str4 == \"oo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "bde158fb97d3a3c36703a259185be998dd97f937", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"foo\");\n+  std::wstring str2;\n+  str2.assign(str1);\n+  VERIFY (str2 == str1);\n+  std::wstring str4;\n+  str4.assign(str1, 1, 2);\n+  VERIFY (str4 == L\"oo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "71e5165e666676dd8b67737c727be218836a2340", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"foo\");\n+  std::string str2;\n+  str2.insert(0, str1);\n+  VERIFY (str2 == str1);\n+  str2.insert(3, str1);\n+  VERIFY (str2 == \"foofoo\");\n+  std::string str4{str1};\n+  str4.insert(3, str1, 1, 2);\n+  VERIFY (str4 == \"foooo\");\n+  str4.insert(5, str1, 1, 2);\n+  VERIFY (str4 == \"foooooo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "6cddcbe9372d0b654bbfe8ae3c2afeec2b64c2e5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"foo\");\n+  std::wstring str2;\n+  str2.insert(0, str1);\n+  VERIFY (str2 == str1);\n+  str2.insert(3, str1);\n+  VERIFY (str2 == L\"foofoo\");\n+  std::wstring str4{str1};\n+  str4.insert(3, str1, 1, 2);\n+  VERIFY (str4 == L\"foooo\");\n+  str4.insert(5, str1, 1, 2);\n+  VERIFY (str4 == L\"foooooo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "004b2358b3c00153fa243bbe360c3d809a19803a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/replace/char/7.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fchar%2F7.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"foo\");\n+  std::string str2(\"bar\");\n+  str2.replace(0, 3, str1);\n+  VERIFY (str2 == str1);\n+  str2 = \"foobar\";\n+  str2.replace(3, 3, str1);\n+  VERIFY (str2 == \"foofoo\");\n+  str2 = \"foobar\";\n+  str2.replace(3, 3, str1, 0, 3);\n+  VERIFY (str2 == \"foofoo\");\n+  str2 = \"foobar\";\n+  str2.replace(3, 1024, str1, 0, 3);\n+  VERIFY (str2 == \"foofoo\");\n+  str2 = \"foobar\";\n+  str2.replace(3, 3, str1, 0, 1024);\n+  VERIFY (str2 == \"foofoo\");\n+  str2 = \"foobar\";\n+  str2.replace(str2.begin()+3, str2.begin()+6, str1);\n+  VERIFY (str2 == \"foofoo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "88d2666da00fb9f51c20bef8b25e9475c1b58263", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Freplace%2Fwchar_t%2F7.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.modifiers]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"foo\");\n+  std::wstring str2(L\"bar\");\n+  str2.replace(0, 3, str1);\n+  VERIFY (str2 == str1);\n+  str2 = L\"foobar\";\n+  str2.replace(3, 3, str1);\n+  VERIFY (str2 == L\"foofoo\");\n+  str2 = L\"foobar\";\n+  str2.replace(3, 3, str1, 0, 3);\n+  VERIFY (str2 == L\"foofoo\");\n+  str2 = L\"foobar\";\n+  str2.replace(3, 1024, str1, 0, 3);\n+  VERIFY (str2 == L\"foofoo\");\n+  str2 = L\"foobar\";\n+  str2.replace(3, 3, str1, 0, 1024);\n+  VERIFY (str2 == L\"foofoo\");\n+  str2 = L\"foobar\";\n+  str2.replace(str2.begin()+3, str2.begin()+6, str1);\n+  VERIFY (str2 == L\"foofoo\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "65474d0e50e8441ca14946c21728fb4dddfc5b4e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string::compare]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"foobar\");\n+  std::string str2(\"foobar\");\n+\n+  auto x = str2.compare(str1);\n+  VERIFY (x == 0);\n+\n+  str1 = \"bar\";\n+  x = str2.compare(str1);\n+  VERIFY (x > 0);\n+\n+  str1 = \"foobar\";\n+  str2 = \"bar\";\n+  x = str2.compare(str1);\n+  VERIFY (x < 0);\n+  x = str2.compare(0, 3, str1, 3, 3);\n+  VERIFY (x == 0);\n+\n+  str1 = \"bar\";\n+  str2 = \"foobar\";\n+  x = str2.compare(3, 3, str1);\n+  VERIFY (x == 0);\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "f7a976070bfb3d5029a16e15ee92972717900fbd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string::compare]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"foobar\");\n+  std::wstring str2(L\"foobar\");\n+\n+  auto x = str2.compare(str1);\n+  VERIFY (x == 0);\n+\n+  str1 = L\"bar\";\n+  x = str2.compare(str1);\n+  VERIFY (x > 0);\n+\n+  str1 = L\"foobar\";\n+  str2 = L\"bar\";\n+  x = str2.compare(str1);\n+  VERIFY (x < 0);\n+  x = str2.compare(0, 3, str1, 3, 3);\n+  VERIFY (x == 0);\n+\n+  str1 = L\"bar\";\n+  str2 = L\"foobar\";\n+  x = str2.compare(3, 3, str1);\n+  VERIFY (x == 0);\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "930c61a9b5f0012390eaff5f5decde830ad292d9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/char/5.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fchar%2F5.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string::find]\n+// [string::rfind]\n+// [string::find.first.of]\n+// [string::find.last.of]\n+// [string::find.first.not.of]\n+// [string::find.last.not.of]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string_view str1(\"bar\");\n+  std::string str2(\"foobar\");\n+\n+  auto x = str2.find(str1);\n+  VERIFY (x == 3);\n+\n+  x = str2.find(str1, 1);\n+  VERIFY (x == 3);\n+\n+  str2 = \"barbar\";\n+  x = str2.rfind(str1);\n+  VERIFY (x == 3);\n+\n+  x = str2.rfind(str1, 0);\n+  VERIFY (x == 0);\n+\n+  x = str2.rfind(str1, 3);\n+  VERIFY (x == 3);\n+\n+  str2 = \"foobarxyz\";\n+  str1 = \"zyx\";\n+  x = str2.find_first_of(str1);\n+  VERIFY (x == 6);\n+\n+  str2 = \"foobarxyzfooxyz\";\n+  x = str2.find_first_of(str1);\n+  VERIFY (x == 6);\n+  x = str2.find_first_of(str1, 9);\n+  VERIFY (x == 12);\n+  x = str2.find_last_of(str1);\n+  VERIFY (x == 14);\n+  x = str2.find_last_of(str1, 10);\n+  VERIFY (x == 8);\n+\n+  str2 = \"abcabcabcxxx\";\n+  str1 = \"cba\";\n+  x = str2.find_first_not_of(str1);\n+  VERIFY (x == 9);\n+\n+  str2 = \"abcabcabcxxxabcabcxxx\";\n+  x = str2.find_first_not_of(str1, 12);\n+  VERIFY (x == 18);\n+\n+  str1 = \"x\";\n+  x = str2.find_last_not_of(str1);\n+  VERIFY (x == 17);\n+  x = str2.find_last_not_of(str1, 11);\n+  VERIFY (x == 8);\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "701cc4cca1bca94db3aee351e0ebbee0d4b7d357", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Ffind%2Fwchar_t%2F5.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,88 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string::find]\n+// [string::rfind]\n+// [string::find.first.of]\n+// [string::find.last.of]\n+// [string::find.first.not.of]\n+// [string::find.last.not.of]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring_view str1(L\"bar\");\n+  std::wstring str2(L\"foobar\");\n+\n+  auto x = str2.find(str1);\n+  VERIFY (x == 3);\n+\n+  x = str2.find(str1, 1);\n+  VERIFY (x == 3);\n+\n+  str2 = L\"barbar\";\n+  x = str2.rfind(str1);\n+  VERIFY (x == 3);\n+\n+  x = str2.rfind(str1, 0);\n+  VERIFY (x == 0);\n+\n+  x = str2.rfind(str1, 3);\n+  VERIFY (x == 3);\n+\n+  str2 = L\"foobarxyz\";\n+  str1 = L\"zyx\";\n+  x = str2.find_first_of(str1);\n+  VERIFY (x == 6);\n+\n+  str2 = L\"foobarxyzfooxyz\";\n+  x = str2.find_first_of(str1);\n+  VERIFY (x == 6);\n+  x = str2.find_first_of(str1, 9);\n+  VERIFY (x == 12);\n+  x = str2.find_last_of(str1);\n+  VERIFY (x == 14);\n+  x = str2.find_last_of(str1, 10);\n+  VERIFY (x == 8);\n+\n+  str2 = L\"abcabcabcxxx\";\n+  str1 = L\"cba\";\n+  x = str2.find_first_not_of(str1);\n+  VERIFY (x == 9);\n+\n+  str2 = L\"abcabcabcxxxabcabcxxx\";\n+  x = str2.find_first_not_of(str1, 12);\n+  VERIFY (x == 18);\n+\n+  str1 = L\"x\";\n+  x = str2.find_last_not_of(str1);\n+  VERIFY (x == 17);\n+  x = str2.find_last_not_of(str1, 11);\n+  VERIFY (x == 8);\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "33520ba85a7b38aa706683e9ea250227e622e4e0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/5.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F5.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.accessors]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string_view str1(\"foo\");;\n+  std::string str2;\n+  \n+  str2 = str1;\n+  VERIFY( str1 == str2 );\n+  return 0;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "235025306ca7825793be2a657850fc5ee65e2a13", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/5.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F5.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [string.accessors]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring_view str1(L\"foo\");;\n+  std::wstring str2;\n+  \n+  str2 = str1;\n+  VERIFY( str1 == str2 );\n+  return 0;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "74baee3e1f1e52b7a5ae0f63d360cec914a2a5b3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/capacity/1.cc", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,164 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view size, length\n+\n+#include <string_view>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct A { };\n+\n+template<typename T>\n+  bool\n+  operator==(const A<T>&, const A<T>&) { return true; }\n+\n+template<typename T>\n+  bool\n+  operator<(const A<T>&, const A<T>&) { return true; }\n+\n+struct B { };\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<A<B> >\n+    {\n+      typedef A<B> \t\tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type&)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type&) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::basic_string_view<A<B>> str02;\n+  typedef std::basic_string_view< A<B> >::size_type size_type_o;\n+  size_type_o sz03;\n+  size_type_o sz04;\n+\n+  // non-POD types: size, length, max_size, empty()\n+  bool b01 = str02.empty();  \n+  VERIFY( b01 == true );\n+  sz03 = str02.size();\n+  sz04 = str02.length();\n+  VERIFY( sz03 == sz04 );\n+  str02.data();\n+  sz03 = str02.size();\n+  sz04 = str02.length();\n+  VERIFY( sz03 == sz04 );\n+\n+  sz03 = str02.max_size();  \n+  VERIFY( sz03 >= sz04 );\n+\n+  sz03 = str02.size();\n+  str02 = {};\n+  b01 = str02.empty(); \n+  VERIFY( b01 == true );\n+  sz04 = str02.size();  \n+  VERIFY( sz03 >= sz04 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "0534bfb4c88fb10ea3ed6ef1b0fbfa7e1f81d35b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <string_view>\n+#include <string>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  typedef std::string_view::size_type csize_type;\n+\n+  // basic_string_view()\n+  const std::string_view str00{};\n+  VERIFY( str00.length() == 0 );\n+  VERIFY( str00.data() == nullptr );\n+\n+  // basic_string_view(const char*)\n+  const char str_lit01[] = \"rodeo beach, marin\";\n+  const std::string_view str01{str_lit01};\n+  VERIFY( str01.length() == 18 );\n+  VERIFY( str01.data() == str_lit01 );\n+  const std::string_view str02{\"baker beach, san francisco\"};\n+  VERIFY( str02.length() == 26 );\n+\n+  // basic_string_view(const string_view&)\n+  std::string_view str04{str01};\n+  VERIFY( str04.length() == str01.length() );\n+  VERIFY( str04.data() == str01.data() );\n+\n+  // basic_string_view(const char* s)\n+  csize_type len_lit01 = strlen(str_lit01);\n+  std::string_view str05{str_lit01, len_lit01};\n+  VERIFY( str05.length() == len_lit01 );\n+  VERIFY( str05.data() == str_lit01 );\n+\n+  // basic_string_view(basic_string& s)\n+  std::string istr07(10, 'z');\n+  std::string_view str07{istr07};\n+  VERIFY( str07.length() == 10 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "331dd4266257a72e804628e16691bfa234bc2a3a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <new>\n+#include <string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+  const char* with_nulls = \"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string_view handles data with NUL\n+  // bytes.  Obviously basic_string_view(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::string_view s1(with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::string_view s2(s1);\n+  VERIFY( s2.size() == 28 );\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "604adedd817a968040db55d75b83ace2f40b05a8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <string_view>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test05()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  char const * s = 0;\n+  std::string_view zero_length_built_with_NULL(s, 0);\n+}\n+\n+int\n+main()\n+{ \n+  test05();\n+\n+  return 0;\n+}"}, {"sha": "ba8bb9037ef5966686664834bc6b630f2f8c008a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <string_view>\n+#include <string>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  typedef std::wstring_view::size_type csize_type;\n+\n+  // basic_string_view()\n+  const std::wstring_view str00{};\n+  VERIFY( str00.length() == 0 );\n+  VERIFY( str00.data() == nullptr );\n+\n+  // basic_string_view(const char*)\n+  const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n+  const std::wstring_view str01{str_lit01};\n+  VERIFY( str01.length() == 18 );\n+  VERIFY( str01.data() == str_lit01 );\n+  const std::wstring_view str02{L\"baker beach, san francisco\"};\n+  VERIFY( str02.length() == 26 );\n+\n+  // basic_string_view(const string_view&)\n+  std::wstring_view str04{str01};\n+  VERIFY( str04.length() == str01.length() );\n+  VERIFY( str04.data() == str01.data() );\n+\n+  // basic_string_view(const char* s)\n+  csize_type len_lit01 = wcslen(str_lit01);\n+  std::wstring_view str05{str_lit01, len_lit01};\n+  VERIFY( str05.length() == len_lit01 );\n+  VERIFY( str05.data() == str_lit01 );\n+\n+  // basic_string_view(basic_string& s)\n+  std::wstring istr07(10, L'z');\n+  std::wstring_view str07{istr07};\n+  VERIFY( str07.length() == 10 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "7dbc60c66c20f57d139b98b36be4348ebb838016", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+  const wchar_t* with_nulls = L\"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string_view handles data with NUL\n+  // bytes.  Obviously basic_string_view(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::wstring_view s1 (with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::wstring_view s2 (s1);\n+  VERIFY( s2.size() == 28 );\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "4fed4e222d8332ac8011d3320dc45bcf1bf92b91", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/3.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test05()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  wchar_t const * s = 0;\n+  std::wstring_view zero_length_built_with_NULL(s, 0);\n+}\n+\n+int\n+main()\n+{ \n+  test05();\n+\n+  return 0;\n+}"}, {"sha": "1638b0e1104c33ddfd1805899173507e530c70df", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string element access\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  typedef std::string_view::const_reference cref;\n+  typedef std::string_view::reference ref;\n+  csize_type csz01, csz02;\n+\n+  const std::string_view str01(\"tamarindo, costa rica\");\n+  std::string_view str02(\"41st street beach, capitola, california\");\n+  std::string_view str03;\n+\n+  // const_reference operator[] (size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref1 = str01[csz01 - 1];\n+  VERIFY( cref1 == 'a' );\n+  // Undefined behavior at size().\n+  //cref cref2 = str01[csz01];\n+  //VERIFY( cref2 == char() );\n+\n+  // const_reference at(size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref3 = str01.at(csz01 - 1);\n+  VERIFY( cref3 == 'a' );\n+  try\n+  {\n+    str01.at(csz01);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch (std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "e2a1e69f3dc18edd01f0fec34c5c11c1226c9cef", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/2.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++17 -O0\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+int\n+main()\n+{\n+  typedef std::string_view string_view_type;\n+  string_view_type s;\n+  s[0]; // abort\n+}"}, {"sha": "c0f820617d99c76652688cfb8a816cecf47e1263", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/empty.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fempty.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 3 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  {\n+    std::string_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  {\n+    const std::string_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  return 0;\n+}"}, {"sha": "308d1e07f7b98955587f834cb3f5d571bdeef0f8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/front_back.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string_view str(\"ramifications\");\n+  const std::string_view cstr(\"melodien\");\n+\n+  VERIFY( str.front() == 'r' );\n+  VERIFY( str.back() == 's' );\n+  VERIFY( cstr.front() == 'm' );\n+  VERIFY( cstr.back() == 'n' );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "7e035fe39cf587fccdb874630419403a1da44bc4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,75 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view element access\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  typedef std::wstring_view::const_reference cref;\n+  typedef std::wstring_view::reference ref;\n+  csize_type csz01, csz02;\n+\n+  const std::wstring_view str01(L\"tamarindo, costa rica\");\n+  std::wstring_view str02(L\"41st street beach, capitola, california\");\n+  std::wstring_view str03;\n+\n+  // const_reference operator[] (size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref1 = str01[csz01 - 1];\n+  VERIFY( cref1 == L'a' );\n+  // Undefined behavior at size().\n+  //cref cref2 = str01[csz01];\n+  //VERIFY( cref2 == wchar_t() );\n+\n+  // const_reference at(size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref3 = str01.at(csz01 - 1);\n+  VERIFY( cref3 == L'a' );\n+  try\n+  {\n+    str01.at(csz01);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch (std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "0c4aab774688fde6b328aed9f9e5a755859babd8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++17 -O0\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+// libstdc++/21674\n+// NB: Should work without any inlining or optimizations (ie. -O0).\n+int\n+main()\n+{\n+  typedef std::wstring_view string_view_type;\n+  string_view_type s;\n+  s[0]; // abort\n+}"}, {"sha": "c8896e1b27f813b5fa57050f69083db3d8563c66", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/empty.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fempty.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test [[gnu::unused]] = true;\n+  \n+  {\n+    std::wstring_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  {\n+    const std::wstring_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  return 0;\n+}"}, {"sha": "b334061942486f6992d41d91b955183c43ec6ae6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/front_back.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_back.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::wstring_view str(L\"ramifications\");\n+  const std::wstring_view cstr(L\"melodien\");\n+\n+  VERIFY( str.front() == L'r' );\n+  VERIFY( str.back() == L's' );\n+  VERIFY( cstr.front() == L'm' );\n+  VERIFY( cstr.back() == L'n' );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "10594ed5bbde767270d8942ab0b0dd2b91b7010e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/include.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finclude.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finclude.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finclude.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,25 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This issue affected only debug-mode.\n+\n+// { dg-options \"-std=gnu++17 -fno-rtti\" }\n+// { dg-do compile }\n+\n+#include <string_view>"}, {"sha": "7cef69487be7913a13e4b6369e50144daeac9649", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/char/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  typedef std::string_view::const_reference cref;\n+  typedef std::string_view::reference ref;\n+\n+  const std::string_view str01(\"sailing grand traverse bay\\n\"\n+\t       \"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");\n+    \n+  // ostream& operator<<(ostream&, const basic_string_view&)\n+  std::ostringstream ostrs01;\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n+  std::string_view hello_world;\n+  std::cout << hello_world;\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "441a40398c3919e0b0b6f323906ff4699d6d2bd4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/char/2.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,93 @@\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-require-fileio \"\" }\n+\n+#include <string_view>\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large string_views\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void\n+test05(std::size_t size)\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char filename[] = \"inserters_extractors-2.txt\";\n+  const char fillc = 'f';\n+  std::ofstream ofs(filename);\n+  std::string str(size, fillc);\n+  std::string_view strv{str};\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::ifstream ifs(filename);\n+  std::size_t count = 0;\n+  char c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+}\n+\n+int\n+main()\n+{\n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+\n+  return 0;\n+}"}, {"sha": "9a8e814bbcc8673d7170ad26d2000cc76a6c1cea", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/char/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fchar%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <string_view>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2830\n+void\n+test09()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string_view foo{\"peace\\0\\0\\0& love\"};\n+\n+  std::ostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+\n+  std::ostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int\n+main()\n+{ \n+  test09();\n+\n+  return 0;\n+}"}, {"sha": "27a52f90c80d47aa3d2aaf46b5d0ffb63797762a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/pod/10081-out.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fpod%2F10081-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fpod%2F10081-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fpod%2F10081-out.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// class basic_istream::sentry\n+\n+#include <string_view>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <typeinfo>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  using __gnu_test::pod_ushort;\n+  typedef basic_string_view<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_ostream<pod_ushort> \tostream_type;\n+\n+  bool test [[gnu::unused]] = true;\n+\n+  string_type str;\n+  stringbuf_type strbuf01;\n+  ostream_type stream(&strbuf01);\n+\n+  try\n+    {\n+      stream << str;\n+    }\n+  catch (std::bad_cast& obj)\n+    {\n+      // Ok, throws bad_cast because locale has no ctype facet.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n+  stream.imbue(loc);\n+  try\n+    {\n+      stream << str;\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "37af0bc105477b0532db26a2a96426843c59429e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/wchar_t/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  typedef std::wstring_view::const_reference cref;\n+  typedef std::wstring_view::reference ref;\n+\n+  const std::wstring_view str01(L\"sailing grand traverse bay\\n\"\n+\t       L\"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");\n+  const std::wstring_view str02(L\"sailing\");\n+  const std::wstring_view str03(L\"grand\");\n+  const std::wstring_view str04(L\"traverse\");\n+  const std::wstring_view str05;\n+  std::wstring_view str10;\n+\n+  // ostream& operator<<(ostream&, const basic_string_view&)\n+  std::wostringstream ostrs01;\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n+  std::wstring_view hello_world;\n+  std::wcout << hello_world;\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "86fe7278547aa975ebdf0bf781a9ea77bada7e13", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/wchar_t/2.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <string_view>\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large string_views\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void\n+test05(std::size_t size)\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char filename[] = \"inserters_extractors-2.txt\";\n+  const wchar_t fillc = L'f';\n+  std::wofstream ofs(filename);\n+  std::wstring str(size, fillc);\n+  std::wstring_view strv(str);\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::wifstream ifs(filename);\n+  std::size_t count = 0;\n+  wchar_t c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+}\n+\n+int\n+main()\n+{\n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+\n+  return 0;\n+}"}, {"sha": "e3af23cf287aac5a9703c3d72a206089ecac60bf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/inserters/wchar_t/3.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Finserters%2Fwchar_t%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <string_view>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void\n+test09()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::wstring_view foo{L\"peace\\0\\0\\0& love\"};\n+  \n+  std::wostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+  \n+  std::wostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int\n+main()\n+{ \n+  test09();\n+\n+  return 0;\n+}"}, {"sha": "5f2bd755af999fe34aebd49b42750e0b7fc0cc63", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_prefix/char/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::string_view;\n+\n+  string_view str0{\"olympus mons\"};\n+  string_view::pointer p = str0.data();\n+  str0.remove_prefix(4);\n+  VERIFY( str0.data() == p + 4);\n+  VERIFY( str0.length() == 8 );\n+  VERIFY( str0 == string_view{\"pus mons\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "2f7169431c641a30a8b0f96adf613672b3a78a51", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_prefix/wchar_t/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::wstring_view;\n+\n+  wstring_view str0{L\"olympus mons\"};\n+  wstring_view::pointer p = str0.data();\n+  str0.remove_prefix(4);\n+  VERIFY( str0.data() == p + 4);\n+  VERIFY( str0.length() == 8 );\n+  VERIFY( str0 == wstring_view{L\"pus mons\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "a6eb5c52a5d2da8ea3ec387265be5363b7561ae1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_suffix/char/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::string_view;\n+\n+  string_view str0{\"olympus mons\"};\n+  string_view::pointer p = str0.data();\n+  str0.remove_suffix(2);\n+  VERIFY( str0.data() == p);\n+  VERIFY( str0.length() == 10 );\n+  VERIFY( str0 == string_view{\"olympus mo\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "3162e2bbc06b280c7ffd25cbfa02a81ee2dc4494", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_suffix/wchar_t/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::wstring_view;\n+\n+  wstring_view str0{L\"olympus mons\"};\n+  wstring_view::pointer p = str0.data();\n+  str0.remove_suffix(2);\n+  VERIFY( str0.data() == p);\n+  VERIFY( str0.length() == 10 );\n+  VERIFY( str0 == wstring_view{L\"olympus mo\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "77188b3eba16705ef1612bc2faa2e660eb3307d9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/char/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,134 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare\n+// int compare(const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str,\n+//             size_type pos2, size_type n2) const;\n+// int compare(const charT* s) const;\n+// int compare(size_type pos1, size_type n1,\n+//             const charT* s, size_type n2 = npos) const;\n+\n+// NB compare should be thought of as a lexographical compare, ie how\n+// things would be sorted in a dictionary.\n+\n+#include <string_view>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+enum want_value {lt=0, z=1, gt=2};\n+\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n+  bool test [[gnu::unused]] = true;\n+  bool pass = false;\n+\n+  switch (expected) {\n+  case lt:\n+    if (result < 0)\n+      pass = true;\n+    break;\n+  case z:\n+    if (!result)\n+      pass = true;\n+    break;\n+  case gt:\n+    if (result > 0)\n+      pass = true;\n+    break;\n+  default:\n+    pass = false; //should not get here\n+  }\n+  VERIFY(pass);\n+  return 0;\n+}\n+ \n+\n+int \n+test01()\n+{\n+  using std::string_view;\n+\n+  string_view \tstr_0(\"costa rica\");\n+  string_view \tstr_1(\"costa marbella\");\n+  string_view \tstr_2;\n+\n+  //sanity check\n+  test_value(strcmp(\"costa marbella\", \"costa rica\"), lt); \n+  test_value(strcmp(\"costa rica\", \"costa rica\"), z);\n+  test_value(strcmp(str_1.data(), str_0.data()), lt);\n+  test_value(strcmp(str_0.data(), str_1.data()), gt);\n+  test_value(strncmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(strncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(memcmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(memcmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(memcmp(\"costa marbella\", \"costa rica\", 14), lt);\n+\n+  // int compare(const basic_string_view& str) const;\n+  test_value(str_0.compare(str_1), gt); //because r>m\n+  test_value(str_1.compare(str_0), lt); //because m<r\n+  str_2 = str_0;\n+  test_value(str_2.compare(str_0), z);\n+  str_2 = \"cost\";\n+  test_value(str_2.compare(str_0), lt);\n+  str_2 = \"costa ricans\";\n+  test_value(str_2.compare(str_0), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+  test_value(str_1.compare(0, 6, str_0), lt);\n+  str_2 = \"cost\";\n+  test_value(str_1.compare(0, 4, str_2), z);\n+  test_value(str_1.compare(0, 5, str_2), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str, \n+  //\t\t size_type pos2, size_type n2) const;\t\n+  test_value(str_1.compare(0, 6, str_0, 0, 6), z);\n+  test_value(str_1.compare(0, 7, str_0, 0, 7), lt);\n+  test_value(str_0.compare(0, 7, str_1, 0, 7), gt);\n+\n+  // int compare(const charT* s) const;\n+  test_value(str_0.compare(\"costa marbella\"), gt);\n+  test_value(str_1.compare(\"costa rica\"), lt);\n+  str_2 = str_0;\n+  test_value(str_2.compare(\"costa rica\"), z);\n+  test_value(str_2.compare(\"cost\"), gt);\t\t\t\n+  test_value(str_2.compare(\"costa ricans\"), lt);\t   \n+\n+  // int compare(size_type pos, size_type n1, const charT* str,\n+  //             size_type n2 = npos) const;\n+  test_value(str_1.compare(0, 6, \"costa rica\", 0, 6), z); \n+  test_value(str_1.compare(0, 7, \"costa rica\", 0, 7), lt); \n+  test_value(str_0.compare(0, 7, \"costa marbella\", 0, 7), gt); \n+\n+  return 0;\n+}\n+\n+\n+int \n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "9e22a46b00b104e4d0225c93e2f37ad26ce732b3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/char/13650.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F13650.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare [lib.string_view::compare]\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::string_view;\n+\n+  const char lit_01[]{ 'w', 'e', '\\0', 'r', 'd' };\n+  const char lit_02[]{ 'w', 'e', 'i', '\\0', 'd' };\n+\n+  const char lit_ref_a[]{ 'w', 'e', '\\0', 'q', 'd' };\n+  const string_view str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const char lit_ref_b[]{ 'w', 'e', 'i' };\n+  const string_view str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "8bf70ec79d737d7995c27e67492a106ba8016c48", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/wchar_t/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,134 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare\n+// int compare(const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str,\n+//             size_type pos2, size_type n2) const;\n+// int compare(const charT* s) const;\n+// int compare(size_type pos1, size_type n1,\n+//             const charT* s, size_type n2 = npos) const;\n+\n+// NB compare should be thought of as a lexographical compare, ie how\n+// things would be sorted in a dictionary.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+enum want_value {lt=0, z=1, gt=2};\n+\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n+  bool test [[gnu::unused]] = true;\n+  bool pass = false;\n+\n+  switch (expected) {\n+  case lt:\n+    if (result < 0)\n+      pass = true;\n+    break;\n+  case z:\n+    if (!result)\n+      pass = true;\n+    break;\n+  case gt:\n+    if (result > 0)\n+      pass = true;\n+    break;\n+  default:\n+    pass = false; //should not get here\n+  }\n+\n+  VERIFY(pass);\n+  return 0;\n+}\n+ \n+\n+int \n+test01()\n+{\n+  using std::wstring_view;\n+\n+  wstring_view \tstr_0(L\"costa rica\");\n+  wstring_view \tstr_1(L\"costa marbella\");\n+  wstring_view \tstr_2;\n+\n+  //sanity check\n+  test_value(wcscmp(L\"costa marbella\", L\"costa rica\"), lt); \n+  test_value(wcscmp(L\"costa rica\", L\"costa rica\"), z);\n+  test_value(wcscmp(str_1.data(), str_0.data()), lt);\n+  test_value(wcscmp(str_0.data(), str_1.data()), gt);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(L\"costa marbella\", L\"costa rica\", 14), lt);\n+\n+  // int compare(const basic_string_view& str) const;\n+  test_value(str_0.compare(str_1), gt); //because r>m\n+  test_value(str_1.compare(str_0), lt); //because m<r\n+  str_2 = str_0;\n+  test_value(str_2.compare(str_0), z);\n+  str_2 = L\"cost\";\n+  test_value(str_2.compare(str_0), lt);\n+  str_2 = L\"costa ricans\";\n+  test_value(str_2.compare(str_0), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+  test_value(str_1.compare(0, 6, str_0), lt);\n+  str_2 = L\"cost\";\n+  test_value(str_1.compare(0, 4, str_2), z);\n+  test_value(str_1.compare(0, 5, str_2), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str, \n+  //\t\t size_type pos2, size_type n2) const;\t\n+  test_value(str_1.compare(0, 6, str_0, 0, 6), z);\n+  test_value(str_1.compare(0, 7, str_0, 0, 7), lt);\n+  test_value(str_0.compare(0, 7, str_1, 0, 7), gt);\n+\n+  // int compare(const charT* s) const;\n+  test_value(str_0.compare(L\"costa marbella\"), gt);\n+  test_value(str_1.compare(L\"costa rica\"), lt);\n+  str_2 = str_0;\n+  test_value(str_2.compare(L\"costa rica\"), z);\n+  test_value(str_2.compare(L\"cost\"), gt);\t\t\t\n+  test_value(str_2.compare(L\"costa ricans\"), lt);\t   \n+\n+  // int compare(size_type pos, size_type n1, const charT* str,\n+  //             size_type n2 = npos) const;\n+  test_value(str_1.compare(0, 6, L\"costa rica\", 0, 6), z); \n+  test_value(str_1.compare(0, 7, L\"costa rica\", 0, 7), lt); \n+  test_value(str_0.compare(0, 7, L\"costa marbella\", 0, 7), gt); \n+\n+  return 0;\n+}\n+\n+\n+int \n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "fc3c197ca8b8a43c979d3502ca6f4508268a5326", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/wchar_t/13650.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare [lib.string_view::compare]\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using std::wstring_view;\n+\n+  const wchar_t lit_01[] = { L'w', L'e', L'\\0', L'r', L'd' };\n+  const wchar_t lit_02[] = { L'w', L'e', L'i', L'\\0', L'd' };\n+\n+  const wchar_t lit_ref_a[] = { L'w', L'e', L'\\0', L'q', L'd' };\n+  const wstring_view str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const wchar_t lit_ref_b[] = { L'w', L'e', L'i' };\n+  const wstring_view str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "a583e13a2b1ca64c240665caddfddb70c10c05c3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/copy/char/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::copy\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+\n+  const char str_lit01[] = \"123456789A\";\n+  const std::string_view str01(str_lit01);\n+  char buffer[4] = { 0 };\n+\n+  csize_type len = str01.copy(buffer, sizeof(buffer), 8);\n+  VERIFY( 2 == len );\n+  VERIFY( '9' == buffer[0] );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "94fa0d430835809676d2f95f6a8d226c46922e89", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/copy/wchar_t/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::copy\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  csize_type csz01;\n+\n+  const wchar_t str_lit01[] = L\"123456789A\";\n+  const std::wstring_view str01(str_lit01);\n+  wchar_t buffer[4] = { 0 };\n+\n+  csize_type len = str01.copy(buffer, sizeof(buffer), 8);\n+  VERIFY( 2 == len );\n+  VERIFY( L'9' == buffer[0] );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "63eba230ffa482c369f6344d75503fb7b251623c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/data/char/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view operations\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string_view empty;\n+\n+  VERIFY( empty.size() == 0 );\n+  const std::string_view::value_type* p = empty.data();\n+  VERIFY( p == nullptr );\n+\n+  return 0;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "86da7df69b03a19c0dc7b05a0961ad13fd4d67da", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/data/wchar_t/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view operations\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::wstring_view empty;\n+\n+  VERIFY( empty.size() == 0 );\n+  const std::wstring_view::value_type* p = empty.data();\n+  VERIFY( p == nullptr );\n+\n+  return 0;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "835c78b3897d6fa6203684a18f09e04451deeeab", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  typedef std::string_view::const_reference cref;\n+  typedef std::string_view::reference ref;\n+  csize_type npos = std::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::string_view str01(\"mavericks, santa cruz\");\n+  std::string_view str02(str_lit01);\n+  std::string_view str03(\"s, s\");\n+  std::string_view str04;\n+\n+  // size_type find(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str01, 4);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str02, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 12);\n+  VERIFY( csz01 == npos );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.find(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.find(str04, str01.size());\n+  VERIFY( csz01 == str01.size() ); \n+  csz01 = str01.find(str04, str01.size()+1);\n+  VERIFY( csz01 == npos ); \n+  \n+  // size_type find(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find(char c, size_type pos = 0) const;\n+  csz01 = str01.find('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.find('/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4417bfe7a3d3ea3d836228dec1ede595d6e03bd3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/char/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_of\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  csize_type npos = std::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::string_view str01(\"mavericks, santa cruz\");\n+  std::string_view str02(str_lit01);\n+  std::string_view str03(\"s, s\");\n+  std::string_view str04;\n+\n+  // size_type find_first_of(const string_view&, size_type pos = 0) const;\n+  std::string_view str05(\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "4861065042c4d206b8189b8b00075d6d0f7f8b67", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/char/3.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_not_of\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  csize_type npos = std::string_view::npos;\n+  csize_type csz01;\n+\n+  const std::string_view str01(\"Bob Rock, per me\");\n+  const char str_lit01[] = \"Bob Rock\";\n+  std::string_view str02(\"ovvero Trivi\");\n+  std::string_view str03(str_lit01);\n+  std::string_view str04;\n+\n+  // size_type find_first_not_of(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str01);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str02, 10);\n+  VERIFY( csz01 == 10 );\n+  csz01 = str01.find_first_not_of(str02, 12);\n+  VERIFY( csz01 == 14 );\n+  csz01 = str01.find_first_not_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str03, 15);\n+  VERIFY( csz01 == 15 );\n+  csz01 = str01.find_first_not_of(str03, 16);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str04, 12);\n+  VERIFY( csz01 == 12 );\n+  csz01 = str03.find_first_not_of(str01, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str04.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 8);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str_lit01, 10, 0);\n+  VERIFY( csz01 == 10 );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str_lit01);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str02.find_first_not_of(str_lit01, 2);\n+  VERIFY( csz01 == 2 );\n+\n+  // size_type find_first_not_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of('B');\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_not_of('o', 1);\n+  VERIFY( csz01 == 2 );\n+  csz01 = str02.find_first_not_of('z');\n+  VERIFY( csz01 == 0 );\n+  csz01 = str04.find_first_not_of('S');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "6d491224808607e0ad4cf65be4965b2ded859403", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/char/4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/31401\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  csize_type npos = std::string_view::npos;\n+\n+  std::string_view use = \"anu\";\n+  csize_type pos1 = use.find(\"a\", npos);\n+\n+  VERIFY( pos1 == npos );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "fb147a0a83838d45f96e34cf7e79958f543c384c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/wchar_t/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  typedef std::wstring_view::const_reference cref;\n+  typedef std::wstring_view::reference ref;\n+  csize_type npos = std::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::wstring_view str02(str_lit01);\n+  std::wstring_view str03(L\"s, s\");\n+  std::wstring_view str04;\n+\n+  // size_type find(const wstring_view&, size_type pos = 0) const;\n+  csz01 = str01.find(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str01, 4);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str02, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 12);\n+  VERIFY( csz01 == npos );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.find(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.find(str04, str01.size());\n+  VERIFY( csz01 == str01.size() ); \n+  csz01 = str01.find(str04, str01.size()+1);\n+  VERIFY( csz01 == npos ); \n+  \n+  // size_type find(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.find(L'/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "0373a9c429e9b4740012c1ee4fa94a212df55c02", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/wchar_t/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_of\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  csize_type npos = std::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::wstring_view str02(str_lit01);\n+  std::wstring_view str03(L\"s, s\");\n+  std::wstring_view str04;\n+\n+  // size_type find_first_of(const wstring_view&, size_type pos = 0) const;\n+  std::wstring_view str05(L\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "82357b807d1f28625d1e4e784cd0039afb5cdfa3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/wchar_t/3.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_not_of\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  csize_type npos = std::wstring_view::npos;\n+  csize_type csz01;\n+\n+  const std::wstring_view str01(L\"Bob Rock, per me\");\n+  const wchar_t str_lit01[] = L\"Bob Rock\";\n+  std::wstring_view str02(L\"ovvero Trivi\");\n+  std::wstring_view str03(str_lit01);\n+  std::wstring_view str04;\n+\n+  // size_type find_first_not_of(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str01);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str02, 10);\n+  VERIFY( csz01 == 10 );\n+  csz01 = str01.find_first_not_of(str02, 12);\n+  VERIFY( csz01 == 14 );\n+  csz01 = str01.find_first_not_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str03, 15);\n+  VERIFY( csz01 == 15 );\n+  csz01 = str01.find_first_not_of(str03, 16);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str04, 12);\n+  VERIFY( csz01 == 12 );\n+  csz01 = str03.find_first_not_of(str01, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str04.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 8);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str_lit01, 10, 0);\n+  VERIFY( csz01 == 10 );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str_lit01);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str02.find_first_not_of(str_lit01, 2);\n+  VERIFY( csz01 == 2 );\n+\n+  // size_type find_first_not_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(L'B');\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_not_of(L'o', 1);\n+  VERIFY( csz01 == 2 );\n+  csz01 = str02.find_first_not_of(L'z');\n+  VERIFY( csz01 == 0 );\n+  csz01 = str04.find_first_not_of(L'S');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "95671de5292c62a7b3eb62d7277d7956059195ef", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/wchar_t/4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/31401\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  csize_type npos = std::wstring_view::npos;\n+\n+  std::wstring_view use = L\"anu\";\n+  csize_type pos1 = use.find(L\"a\", npos);\n+\n+  VERIFY( pos1 == npos );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "1f886e721389b18b211248075e15e57e3584a875", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view rfind\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  typedef std::string_view::const_reference cref;\n+  typedef std::string_view::reference ref;\n+  csize_type npos = std::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::string_view str01(\"mavericks, santa cruz\");\n+  std::string_view str02(str_lit01);\n+  std::string_view str03(\"s, s\");\n+  std::string_view str04;\n+\n+  // size_type rfind(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str01, 4);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02,3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str03);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.rfind(str03, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.rfind(str03, 12);\n+  VERIFY( csz01 == 8 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.rfind(str04, str01.size());\n+  VERIFY( csz01 == str01.size() );\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  VERIFY( csz01 == str01.size() );\n+\n+  // size_type rfind(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type rfind(const char* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3);\n+  VERIFY( csz01 == 0 );\n+\n+  // size_type rfind(char c, size_type pos = 0) const;\n+  csz01 = str01.rfind('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.rfind('/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "031a01b83f0cdcd8959475a36d723e2653a1a83c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/char/2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+// { dg-options \"-std=gnu++17\" }\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_of\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string_view z(\"ab\");\n+  std::string_view::size_type pos;\n+  pos = z.find_last_of(\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"XYZ\");\n+  VERIFY( pos == std::string_view::npos );\n+  pos = z.find_last_of('a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of('b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of('X');\n+  VERIFY( pos == std::string_view::npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "ecd34001d802b5d46d33ecbe0fff8d575d88f567", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/char/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_not_of\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  std::string_view::size_type pos;\n+  csize_type npos = std::string_view::npos;\n+\n+  std::string_view x;\n+  pos = x.find_last_not_of('X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::string_view y(\"a\");\n+  pos = y.find_last_not_of('X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of('a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::string_view z(\"ab\");\n+  pos = z.find_last_not_of('X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of('b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xa\");\n+  VERIFY( pos == 1 );\n+\n+  return test;\n+}\n+int\n+main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "ee28bdc841713a91389195a2567955f2c0130d02", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view rfind\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  typedef std::wstring_view::const_reference cref;\n+  typedef std::wstring_view::reference ref;\n+  csize_type npos = std::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::wstring_view str02(str_lit01);\n+  std::wstring_view str03(L\"s, s\");\n+  std::wstring_view str04;\n+\n+  // size_type rfind(const wstring_view&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str01, 4);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02,3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str03);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.rfind(str03, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.rfind(str03, 12);\n+  VERIFY( csz01 == 8 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.rfind(str04, str01.size());\n+  VERIFY( csz01 == str01.size() );\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  VERIFY( csz01 == str01.size() );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3);\n+  VERIFY( csz01 == 0 );\n+\n+  // size_type rfind(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.rfind(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.rfind(L'/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4f173ff12ae99d164e7a0998aa1a75df79160177", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_of\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::wstring_view::size_type pos;\n+  std::wstring_view z(L\"ab\");\n+  pos = z.find_last_of(L\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"XYZ\");\n+  VERIFY( pos == std::wstring_view::npos );\n+  pos = z.find_last_of(L'a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L'b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L'X');\n+  VERIFY( pos == std::wstring_view::npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "0b9ea548429306e9004f3f0c1dd978c21edfee95", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_not_of\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  std::wstring_view::size_type pos;\n+  csize_type npos = std::wstring_view::npos;\n+\n+  std::wstring_view x;\n+  pos = x.find_last_not_of(L'X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring_view y(L\"a\");\n+  pos = y.find_last_not_of(L'X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L'a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring_view z(L\"ab\");\n+  pos = z.find_last_not_of(L'X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L'b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xa\");\n+  VERIFY( pos == 1 );\n+\n+  return test;\n+}\n+int\n+main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "617877f46db2f8707c0b1c53272c3823ebc2911b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/string_conversion/1.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstring_conversion%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstring_conversion%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstring_conversion%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::to_string\n+\n+#include <string_view>\n+#include <string>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char str_lit[] = \"123456789A\";\n+  const std::string_view sv(str_lit);\n+  char buffer[4] = { 0 };\n+\n+  std::string s1{sv};\n+  VERIFY( s1 == str_lit );\n+  using test_alloc = __gnu_test::tracker_allocator<char>;\n+  std::basic_string<char, std::char_traits<char>, test_alloc>\n+    s2{sv, test_alloc{}};\n+  static_assert( std::is_same<decltype(s2)::allocator_type, test_alloc>::value,\n+                 \"to_string() uses custom allocator\" );\n+  VERIFY( std::equal(s1.begin(), s1.end(), s2.begin(), s2.end()) );\n+  auto s3 = static_cast<std::string>(sv);\n+  VERIFY( s3 == s1 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "08832cd9cb5b52f3f0ef2698ad3fc309d12b3afe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/substr/char/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,83 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::substr\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::string_view::size_type csize_type;\n+  typedef std::string_view::const_reference cref;\n+  typedef std::string_view::reference ref;\n+  csize_type csz01;\n+\n+  const char str_lit01[] = \"rockaway, pacifica\";\n+  const std::string_view str01(str_lit01);\n+  std::string_view str02;\n+\n+  // basic_string_view<charT, _Traits, _Alloc>\n+  //  substr(size_type pos = 0, size_type n = npos) const;\n+  csz01 = str01.size();\n+  str02 = str01.substr(0, 1);\n+  VERIFY( str02 == \"r\" );\n+  str02 = str01.substr(10);\n+  VERIFY( str02 == \"pacifica\" );\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01 + 1);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01);\n+    VERIFY( str02.size() == 0 );\n+    VERIFY( str02.begin() == str01.end() );\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "d8e6cb03a5bf7f2a5175a5d5dbb911bd4e77ca12", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/substr/wchar_t/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,83 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::substr\n+\n+#include <string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::wstring_view::size_type csize_type;\n+  typedef std::wstring_view::const_reference cref;\n+  typedef std::wstring_view::reference ref;\n+  csize_type csz01;\n+\n+  const wchar_t str_lit01[] = L\"rockaway, pacifica\";\n+  const std::wstring_view str01(str_lit01);\n+  std::wstring_view str02;\n+\n+  // basic_string_view<charT, _Traits, _Alloc>\n+  //  substr(size_type pos = 0, size_type n = npos) const;\n+  csz01 = str01.size();\n+  str02 = str01.substr(0, 1);\n+  VERIFY( str02 == L\"r\" );\n+  str02 = str01.substr(10);\n+  VERIFY( str02 == L\"pacifica\" );\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01 + 1);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01);\n+    VERIFY( str02.size() == 0 );\n+    VERIFY( str02.begin() == str01.end() );\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "04c02e9dfbe28ec0da15fb2aef79008e64163a26", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operators/char/2.cc", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fchar%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,246 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string non-member functions\n+\n+// operator==\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+*/\n+\n+// operator!=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs, \n+                  const charT* rhs);\n+*/\n+\n+// operator<\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs, \n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator<=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string_view \tstr_0(\"costa rica\");\n+  std::string_view \tstr_1(\"costa marbella\");\n+  std::string_view \tstr_2(\"cost\");\n+  std::string_view\tstr_3(\"costa ricans\");\n+  std::string_view        str_4;\n+  \n+  str_4 = str_0;\n+  //comparisons between string objects\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n+   \n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n+\n+  //comparisons between string object and string literal\n+  VERIFY( !(str_0 == \"costa marbella\") );\n+  VERIFY( !(str_0 == \"cost\") );\n+  VERIFY( !(str_0 == \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" == str_0) );\n+  VERIFY( !(\"cost\" == str_0) );\n+  VERIFY( !(\"costa ricans\" == str_0) );\n+  VERIFY( \"costa rica\" == str_0 );\n+  VERIFY( str_0 == \"costa rica\" );\n+\n+  VERIFY( str_0 != \"costa marbella\" );\n+  VERIFY( str_0 != \"cost\" );\n+  VERIFY( str_0 != \"costa ricans\" );\n+  VERIFY( \"costa marbella\" != str_0 );\n+  VERIFY( \"cost\" != str_0 );\n+  VERIFY( \"costa ricans\" != str_0 );\n+  VERIFY( !(\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != \"costa rica\") );\n+\n+  VERIFY( str_0 > \"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > \"cost\" );\n+  VERIFY( !(str_0 > \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" > str_0) );\n+  VERIFY( \"costa ricans\" > str_0 );\n+  VERIFY( !(\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > \"costa rica\") );\n+\n+  VERIFY( !(str_0 < \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < \"cost\") );\n+  VERIFY( str_0 < \"costa ricans\" );\n+  VERIFY( \"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( \"cost\" < str_0 );\n+  VERIFY( !(\"costa ricans\" < str_0) );\n+  VERIFY( !(\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < \"costa rica\") );\n+\n+  VERIFY( str_0 >= \"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= \"cost\" );\n+  VERIFY( !(str_0 >= \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" >= str_0) );\n+  VERIFY( \"costa ricans\" >= str_0 );\n+  VERIFY( \"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= \"costa rica\" );\n+\n+  VERIFY( !(str_0 <= \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= \"cost\") );\n+  VERIFY( str_0 <= \"costa ricans\" );\n+  VERIFY( \"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( \"cost\" <= str_0 );\n+  VERIFY( !(\"costa ricans\" <= str_0) );\n+  VERIFY( \"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= \"costa rica\" );\n+\n+  return 0;\n+}\n+\n+int\n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "5e9f7e4cb7635c1dc9a7f6968a3eb90ff775eb0b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operators/wchar_t/2.cc", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperators%2Fwchar_t%2F2.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,246 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view non-member functions\n+\n+// operator==\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+*/\n+\n+// operator!=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string_view<charT,traits,Allocator>& lhs, \n+                  const charT* rhs);\n+*/\n+\n+// operator<\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs, \n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator<=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::wstring_view \tstr_0(L\"costa rica\");\n+  std::wstring_view \tstr_1(L\"costa marbella\");\n+  std::wstring_view \tstr_2(L\"cost\");\n+  std::wstring_view\tstr_3(L\"costa ricans\");\n+  std::wstring_view  str_4;\n+  \n+  str_4 = str_0;\n+  //comparisons between string_view objects\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n+   \n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n+\n+  //comparisons between string_view object and string_view literal\n+  VERIFY( !(str_0 == L\"costa marbella\") );\n+  VERIFY( !(str_0 == L\"cost\") );\n+  VERIFY( !(str_0 == L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" == str_0) );\n+  VERIFY( !(L\"cost\" == str_0) );\n+  VERIFY( !(L\"costa ricans\" == str_0) );\n+  VERIFY( L\"costa rica\" == str_0 );\n+  VERIFY( str_0 == L\"costa rica\" );\n+\n+  VERIFY( str_0 != L\"costa marbella\" );\n+  VERIFY( str_0 != L\"cost\" );\n+  VERIFY( str_0 != L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" != str_0 );\n+  VERIFY( L\"cost\" != str_0 );\n+  VERIFY( L\"costa ricans\" != str_0 );\n+  VERIFY( !(L\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != L\"costa rica\") );\n+\n+  VERIFY( str_0 > L\"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > L\"cost\" );\n+  VERIFY( !(str_0 > L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" > str_0) );\n+  VERIFY( L\"costa ricans\" > str_0 );\n+  VERIFY( !(L\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > L\"costa rica\") );\n+\n+  VERIFY( !(str_0 < L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < L\"cost\") );\n+  VERIFY( str_0 < L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" < str_0 );\n+  VERIFY( !(L\"costa ricans\" < str_0) );\n+  VERIFY( !(L\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < L\"costa rica\") );\n+\n+  VERIFY( str_0 >= L\"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= L\"cost\" );\n+  VERIFY( !(str_0 >= L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" >= str_0) );\n+  VERIFY( L\"costa ricans\" >= str_0 );\n+  VERIFY( L\"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= L\"costa rica\" );\n+\n+  VERIFY( !(str_0 <= L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= L\"cost\") );\n+  VERIFY( str_0 <= L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" <= str_0 );\n+  VERIFY( !(L\"costa ricans\" <= str_0) );\n+  VERIFY( L\"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= L\"costa rica\" );\n+\n+  return 0;\n+}\n+\n+int\n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "8640aa3921a8285786a33a993f0eded2eb5b8c57", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/range_access/char/1.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 24.6.5, range access [iterator.range]\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+  std::string_view s(\"Hello, World!\");\n+  std::begin(s);\n+  std::end(s);\n+}"}, {"sha": "cd3ddfd063e3d351818a54f7823fdd37d0db2010", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frange_access%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 24.6.5, range access [iterator.range]\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring_view ws(L\"Hello, World!\");\n+  std::begin(ws);\n+  std::end(ws);\n+#endif\n+}"}, {"sha": "297e64049b6c3045220819cf535cf8dee4842159", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of basic_string\n+\n+#include <string_view>\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+\n+template class std::basic_string_view<int, std::char_traits<int>>;"}, {"sha": "759cf08d781c89c250ac3a924ddb888cc90bddd5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template class std::basic_string_view<char>;"}, {"sha": "11217073df62e7d6d396263aa3b571210acfeac9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char16_t/1.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template class std::basic_string_view<char16_t>;"}, {"sha": "a9a0947b8566d4b516592f7700d36cb274700764", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char32_t/1.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template class std::basic_string_view<char32_t>;"}, {"sha": "0a5aab37cae73379da5cc65d4666808ee3f3e484", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/wchar_t/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template class std::basic_string_view<wchar_t>;"}, {"sha": "4e172a7d68579bcb602f903eda174ddd1e667c58", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/typedefs.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,47 @@\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_containers.h>\n+\n+namespace __gnu_test\n+{\n+  template<typename _Tp1, typename _Tp2>\n+    struct traits<std::basic_string_view<_Tp1, _Tp2>> : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+    };\n+}\n+\n+#include <testsuite_containers.h>\n+\n+// Check container for required typedefs.\n+\n+__gnu_test::basic_types<std::string_view> t1b;\n+__gnu_test::reversible_types<std::string_view> t1r;\n+typedef typename std::string_view::traits_type traits_type1;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+__gnu_test::basic_types<std::wstring_view> t2b;\n+__gnu_test::reversible_types<std::wstring_view> t2r;\n+typedef typename std::wstring_view::traits_type traits_type2;\n+#endif"}, {"sha": "e5d5919e283ec3969a415c507456136903b8d7d0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template<typename C, typename T>\n+  using check1_t = std::basic_string_view<C, T>;\n+\n+using check2_t = std::string_view;\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+using check3_t = std::u16string_view;\n+using check4_t = std::u32string_view;\n+#endif\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+using check5_t = std::wstring_view;\n+#endif\n+"}, {"sha": "f20995159cb5c49c2d8d1ca50a51033236999db1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/types/1.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8f2cb1371656c7911de6131ea272e94721063d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypes%2F1.cc?ref=ca8f2cb1371656c7911de6131ea272e94721063d", "patch": "@@ -0,0 +1,43 @@\n+//\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <string_view>\n+\n+struct T\n+{\n+  typedef std::string_view String_view;\n+  typedef String_view::iterator iterator;\n+  typedef String_view::const_iterator const_iterator;\n+\n+  char t(iterator f)             { return *f; }\n+  char t(const_iterator f) const { return *f; }\n+};\n+\n+void\n+f()\n+{\n+  std::string_view s;\n+  T t;\n+  T::const_iterator i = s.begin();\n+  \n+  t.t(i);\n+}"}]}