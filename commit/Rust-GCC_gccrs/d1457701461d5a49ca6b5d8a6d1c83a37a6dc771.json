{"sha": "d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0NTc3MDE0NjFkNWE0OWNhNmI1ZDhhNmQxYzgzYTM3YTZkYzc3MQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-01-15T20:26:19Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-01-15T20:26:19Z"}, "message": "re PR rtl-optimization/64110 (ICE: Max. number of generated reload insns per insn is achieved (90))\n\n2015-01-15  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64110\n\t* stmt.c (parse_output_constraint): Process '^' and '$'.\n\t(parse_input_constraint): Ditto.\n\t* lra-constraints.c (process_alt_operands): Process the new\n\tconstraints.\n\t* ira-costs.c (record_reg_classes): Process the new constraint\n\t'^'.\n\t* genoutput.c (indep_constraints): Add '^' and '$'.\n\t* config/i386/sse.md (*vec_dup<mode>): Use '$' instead of '!'.\n\t* doc/md.texi: Add description of the new constraints.\n\n2015-01-15  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64110\n\t* gcc.target/i386/pr64110.c: Add scan-assembler.\n\nFrom-SVN: r219683", "tree": {"sha": "8ad53dce7dd0dcd0dfba90387bdd8075e7e631b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad53dce7dd0dcd0dfba90387bdd8075e7e631b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41dbbb3789850dfea98dd8984f69806284f87b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dbbb3789850dfea98dd8984f69806284f87b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dbbb3789850dfea98dd8984f69806284f87b6e"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "dace3d91fbf41a190b14203a66d2fb715ceb9ef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -1,3 +1,16 @@\n+2015-01-15  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64110\n+\t* stmt.c (parse_output_constraint): Process '^' and '$'.\n+\t(parse_input_constraint): Ditto.\n+\t* lra-constraints.c (process_alt_operands): Process the new\n+\tconstraints.\n+\t* ira-costs.c (record_reg_classes): Process the new constraint\n+\t'^'.\n+\t* genoutput.c (indep_constraints): Add '^' and '$'.\n+\t* config/i386/sse.md (*vec_dup<mode>): Use '$' instead of '!'.\n+\t* doc/md.texi: Add description of the new constraints.\n+\n 2015-01-15  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "41de832ebba86e9297e3f7e48af99824b4c775ce", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -16713,7 +16713,7 @@\n (define_insn \"*vec_dup<mode>\"\n   [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,x\")\n \t(vec_duplicate:AVX2_VEC_DUP_MODE\n-\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,x,!r\")))]\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,x,$r\")))]\n   \"TARGET_AVX2\"\n   \"@\n    v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}"}, {"sha": "7bc78422d5bfc9d07560c21e7e67eda0bb52c042", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -1507,6 +1507,18 @@ in it.\n Disparage severely the alternative that the @samp{!} appears in.\n This alternative can still be used if it fits without reloading,\n but if reloading is needed, some other alternative will be used.\n+\n+@cindex @samp{^} in constraint\n+@cindex caret\n+@item ^\n+This constraint is analogous to @samp{?} but it disparages slightly\n+the alternative only if the operand with the @samp{?} needs a reload.\n+\n+@cindex @samp{$} in constraint\n+@cindex dollar sign\n+@item $\n+This constraint is analogous to @samp{!} but it disparages severely\n+the alternative only if the operand with the @samp{$} needs a reload.\n @end table\n \n @ifset INTERNALS"}, {"sha": "2144b8e038102381b40c14806779b9c229103b57", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -209,7 +209,7 @@ struct constraint_data\n \n /* All machine-independent constraint characters (except digits) that\n    are handled outside the define*_constraint mechanism.  */\n-static const char indep_constraints[] = \",=+%*?!#&g\";\n+static const char indep_constraints[] = \",=+%*?!^$#&g\";\n \n static struct constraint_data *\n constraints_by_letter_table[1 << CHAR_BIT];"}, {"sha": "c19f2586affb562101b41b0c9a0cf5fd4681c647", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -778,6 +778,10 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t  c = *++p;\n \t\t  break;\n \n+\t\tcase '^':\n+\t\t  alt_cost += 2;\n+\t\t  break;\n+\n \t\tcase '?':\n \t\t  alt_cost += 2;\n \t\t  break;"}, {"sha": "f102fe5010fab474d2a7736e721d9f4802ee003a", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -1657,6 +1657,7 @@ process_alt_operands (int only_alternative)\n      then REJECT is ignored, but otherwise it gets this much counted\n      against it in addition to the reloading needed.  */\n   int reject;\n+  int op_reject;\n   /* The number of elements in the following array.  */\n   int early_clobbered_regs_num;\n   /* Numbers of operands which are early clobber registers.  */\n@@ -1806,6 +1807,7 @@ process_alt_operands (int only_alternative)\n \t     track.  */\n \t  lra_assert (*p != 0 && *p != ',');\n \n+\t  op_reject = 0;\n \t  /* Scan this alternative's specs for this operand; set WIN\n \t     if the operand fits any letter in this alternative.\n \t     Otherwise, clear BADOP if this operand could fit some\n@@ -1828,6 +1830,13 @@ process_alt_operands (int only_alternative)\n \t\t  early_clobber_p = true;\n \t\t  break;\n \n+\t\tcase '$':\n+\t\t  op_reject += LRA_MAX_REJECT;\n+\t\t  break;\n+\t\tcase '^':\n+\t\t  op_reject += LRA_LOSER_COST_FACTOR;\n+\t\t  break;\n+\n \t\tcase '#':\n \t\t  /* Ignore rest of this alternative.  */\n \t\t  c = '\\0';\n@@ -2114,6 +2123,7 @@ process_alt_operands (int only_alternative)\n \t      int const_to_mem = 0;\n \t      bool no_regs_p;\n \n+\t      reject += op_reject;\n \t      /* Never do output reload of stack pointer.  It makes\n \t\t impossible to do elimination when SP is changed in\n \t\t RTL.  */"}, {"sha": "b85e3e605dd00025ad49a2a614df7d51f2686c00", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -307,6 +307,7 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n \tbreak;\n \n       case '?':  case '!':  case '*':  case '&':  case '#':\n+      case '$':  case '^':\n       case 'E':  case 'F':  case 'G':  case 'H':\n       case 's':  case 'i':  case 'n':\n       case 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n@@ -397,6 +398,7 @@ parse_input_constraint (const char **constraint_p, int input_num,\n \n       case '<':  case '>':\n       case '?':  case '!':  case '*':  case '#':\n+      case '$':  case '^':\n       case 'E':  case 'F':  case 'G':  case 'H':\n       case 's':  case 'i':  case 'n':\n       case 'I':  case 'J':  case 'K':  case 'L':  case 'M':"}, {"sha": "b59a8f49d1eae07199708812f036ad27d759e7b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -1,3 +1,8 @@\n+2015-01-15  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64110\n+\t* gcc.target/i386/pr64110.c: Add scan-assembler.\n+\n 2015-01-15  Thomas Schwinge  <thomas@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "99e391916cb7a94e7dd40207f35f29f62acc412c", "filename": "gcc/testsuite/gcc.target/i386/pr64110.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1457701461d5a49ca6b5d8a6d1c83a37a6dc771/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64110.c?ref=d1457701461d5a49ca6b5d8a6d1c83a37a6dc771", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -march=core-avx2\" } */\n+/* { dg-final { scan-assembler \"vmovd\\[\\\\t \\]\" } } */\n \n int foo (void);\n int a;"}]}