{"sha": "9410d9b20aae8c15ac96d85bc3b8873fedde527a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxMGQ5YjIwYWFlOGMxNWFjOTZkODViYzNiODg3M2ZlZGRlNTI3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-16T16:10:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-16T16:10:58Z"}, "message": "omp-low.c (expand_omp_target): Use auto_vec<tree, 11> instead of vec<tree> * with vec_alloc and release for args.\n\n\t* omp-low.c (expand_omp_target): Use auto_vec<tree, 11>\n\tinstead of vec<tree> * with vec_alloc and release for args.\n\tAdjust all users.\n\nFrom-SVN: r221460", "tree": {"sha": "6b5e27512ed122b2dd112152868eaeaf688ccd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b5e27512ed122b2dd112152868eaeaf688ccd42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9410d9b20aae8c15ac96d85bc3b8873fedde527a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9410d9b20aae8c15ac96d85bc3b8873fedde527a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9410d9b20aae8c15ac96d85bc3b8873fedde527a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9410d9b20aae8c15ac96d85bc3b8873fedde527a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3713412b8a5e374dcb3230828f38339b78846236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3713412b8a5e374dcb3230828f38339b78846236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3713412b8a5e374dcb3230828f38339b78846236"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "528e8974727094862677ed3f74f7a88f5f746082", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9410d9b20aae8c15ac96d85bc3b8873fedde527a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9410d9b20aae8c15ac96d85bc3b8873fedde527a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9410d9b20aae8c15ac96d85bc3b8873fedde527a", "patch": "@@ -1,5 +1,9 @@\n 2015-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* omp-low.c (expand_omp_target): Use auto_vec<tree, 11>\n+\tinstead of vec<tree> * with vec_alloc and release for args.\n+\tAdjust all users.\n+\n \tPR middle-end/65431\n \t* omp-low.c (delete_omp_context): Only splay_tree_delete\n \treduction_map in GIMPLE_OMP_TARGET is_gimple_omp_offloaded"}, {"sha": "48d73cbc02110b015203f4bde3c625197107e2bb", "filename": "gcc/omp-low.c", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9410d9b20aae8c15ac96d85bc3b8873fedde527a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9410d9b20aae8c15ac96d85bc3b8873fedde527a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=9410d9b20aae8c15ac96d85bc3b8873fedde527a", "patch": "@@ -9105,22 +9105,19 @@ expand_omp_target (struct omp_region *region)\n     }\n \n   gimple g;\n-  vec<tree> *args;\n   /* The maximum number used by any start_ix, without varargs.  */\n-  unsigned int argcnt = 11;\n-\n-  vec_alloc (args, argcnt);\n-  args->quick_push (device);\n+  auto_vec<tree, 11> args;\n+  args.quick_push (device);\n   if (offloaded)\n-    args->quick_push (build_fold_addr_expr (child_fn));\n+    args.quick_push (build_fold_addr_expr (child_fn));\n   switch (start_ix)\n     {\n     case BUILT_IN_GOMP_TARGET:\n     case BUILT_IN_GOMP_TARGET_DATA:\n     case BUILT_IN_GOMP_TARGET_UPDATE:\n       /* This const void * is part of the current ABI, but we're not actually\n \t using it.  */\n-      args->quick_push (build_zero_cst (ptr_type_node));\n+      args.quick_push (build_zero_cst (ptr_type_node));\n       break;\n     case BUILT_IN_GOACC_DATA_START:\n     case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n@@ -9130,10 +9127,10 @@ expand_omp_target (struct omp_region *region)\n     default:\n       gcc_unreachable ();\n     }\n-  args->quick_push (t1);\n-  args->quick_push (t2);\n-  args->quick_push (t3);\n-  args->quick_push (t4);\n+  args.quick_push (t1);\n+  args.quick_push (t2);\n+  args.quick_push (t3);\n+  args.quick_push (t4);\n   switch (start_ix)\n     {\n     case BUILT_IN_GOACC_DATA_START:\n@@ -9166,9 +9163,9 @@ expand_omp_target (struct omp_region *region)\n \t  t_vector_length = fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t\t      integer_type_node,\n \t\t\t\t\t      OMP_CLAUSE_VECTOR_LENGTH_EXPR (c));\n-\targs->quick_push (t_num_gangs);\n-\targs->quick_push (t_num_workers);\n-\targs->quick_push (t_vector_length);\n+\targs.quick_push (t_num_gangs);\n+\targs.quick_push (t_num_workers);\n+\targs.quick_push (t_vector_length);\n       }\n       /* FALLTHRU */\n     case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n@@ -9190,13 +9187,13 @@ expand_omp_target (struct omp_region *region)\n \t\t\t\t      integer_type_node,\n \t\t\t\t      OMP_CLAUSE_ASYNC_EXPR (c));\n \n-\targs->quick_push (t_async);\n+\targs.quick_push (t_async);\n \t/* Save the index, and... */\n-\tt_wait_idx = args->length ();\n+\tt_wait_idx = args.length ();\n \t/* ... push a default value.  */\n-\targs->quick_push (fold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t\t\t    integer_type_node,\n-\t\t\t\t\t    integer_zero_node));\n+\targs.quick_push (fold_convert_loc (gimple_location (entry_stmt),\n+\t\t\t\t\t   integer_type_node,\n+\t\t\t\t\t   integer_zero_node));\n \tc = find_omp_clause (clauses, OMP_CLAUSE_WAIT);\n \tif (c)\n \t  {\n@@ -9206,28 +9203,27 @@ expand_omp_target (struct omp_region *region)\n \t      {\n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_WAIT)\n \t\t  {\n-\t\t    args->safe_push (fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t\t       integer_type_node,\n-\t\t\t\t\t\t       OMP_CLAUSE_WAIT_EXPR (c)));\n+\t\t    args.safe_push (fold_convert_loc (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t\t      OMP_CLAUSE_WAIT_EXPR (c)));\n \t\t    n++;\n \t\t  }\n \t      }\n \n \t    /* Now that we know the number, replace the default value.  */\n-\t    args->ordered_remove (t_wait_idx);\n-\t    args->quick_insert (t_wait_idx,\n-\t\t\t\tfold_convert_loc (gimple_location (entry_stmt),\n-\t\t\t\t\t\t  integer_type_node,\n-\t\t\t\t\t\t  build_int_cst (integer_type_node, n)));\n+\t    args.ordered_remove (t_wait_idx);\n+\t    args.quick_insert (t_wait_idx,\n+\t\t\t       fold_convert_loc (gimple_location (entry_stmt),\n+\t\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t\t build_int_cst (integer_type_node, n)));\n \t  }\n       }\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  g = gimple_build_call_vec (builtin_decl_explicit (start_ix), *args);\n-  args->release ();\n+  g = gimple_build_call_vec (builtin_decl_explicit (start_ix), args);\n   gimple_set_location (g, gimple_location (entry_stmt));\n   gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n   if (!offloaded)"}]}