{"sha": "ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwMDA2ZWJkYjcxZGU5OWUxNWFlZjlmZDJhMmQ3YzE4MzBjNjAxMQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-03-19T19:59:38Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-03-19T19:59:38Z"}, "message": "re PR rtl-optimization/63491 (Ice in LRA with simple vector test case on power)\n\n2015-03-19  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/63491\n\t* lra-constraints.c (check_and_process_move): Use src instead of\n\tsreg.  Remove some dead code.\n\n2015-03-19  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/63491\n\t* gcc.target/powerpc/pr63491.c: New.\n\nFrom-SVN: r221522", "tree": {"sha": "26ebdc19432cdb1ca1ddd759688d8287518ca414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ebdc19432cdb1ca1ddd759688d8287518ca414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cb73573606d5b0881b0af778a81b5b9c1569f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb73573606d5b0881b0af778a81b5b9c1569f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb73573606d5b0881b0af778a81b5b9c1569f36"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "57d731a556a717192bac22672ed2f0d3b91ee4f4", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "patch": "@@ -1074,10 +1074,9 @@ static bool\n check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n {\n   int sregno, dregno;\n-  rtx dest, src, dreg, sreg, old_sreg, new_reg, scratch_reg;\n+  rtx dest, src, dreg, sreg, new_reg, scratch_reg;\n   rtx_insn *before;\n   enum reg_class dclass, sclass, secondary_class;\n-  machine_mode sreg_mode;\n   secondary_reload_info sri;\n \n   lra_assert (curr_insn_set != NULL_RTX);\n@@ -1101,8 +1100,6 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n        were a right class for the pseudo, secondary_... hooks usually\n        are not define for ALL_REGS.  */\n     return false;\n-  sreg_mode = GET_MODE (sreg);\n-  old_sreg = sreg;\n   if (REG_P (sreg))\n     sclass = get_reg_class (REGNO (sreg));\n   if (sclass == ALL_REGS)\n@@ -1161,9 +1158,9 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n       sri.icode = CODE_FOR_nothing;\n       sri.extra_cost = 0;\n       secondary_class\n-\t= (enum reg_class) targetm.secondary_reload (true, sreg,\n+\t= (enum reg_class) targetm.secondary_reload (true, src,\n \t\t\t\t\t\t     (reg_class_t) dclass,\n-\t\t\t\t\t\t     sreg_mode, &sri);\n+\t\t\t\t\t\t     GET_MODE (src), &sri);\n       /* Check the target hook consistency.  */\n       lra_assert\n \t((secondary_class == NO_REGS && sri.icode == CODE_FOR_nothing)\n@@ -1179,14 +1176,12 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n   *change_p = true;\n   new_reg = NULL_RTX;\n   if (secondary_class != NO_REGS)\n-    new_reg = lra_create_new_reg_with_unique_value (sreg_mode, NULL_RTX,\n+    new_reg = lra_create_new_reg_with_unique_value (GET_MODE (src), NULL_RTX,\n \t\t\t\t\t\t    secondary_class,\n \t\t\t\t\t\t    \"secondary\");\n   start_sequence ();\n-  if (old_sreg != sreg)\n-    sreg = copy_rtx (sreg);\n   if (sri.icode == CODE_FOR_nothing)\n-    lra_emit_move (new_reg, sreg);\n+    lra_emit_move (new_reg, src);\n   else\n     {\n       enum reg_class scratch_class;\n@@ -1197,18 +1192,13 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n \t\t     (insn_data[sri.icode].operand[2].mode, NULL_RTX,\n \t\t      scratch_class, \"scratch\"));\n       emit_insn (GEN_FCN (sri.icode) (new_reg != NULL_RTX ? new_reg : dest,\n-\t\t\t\t      sreg, scratch_reg));\n+\t\t\t\t      src, scratch_reg));\n     }\n   before = get_insns ();\n   end_sequence ();\n   lra_process_new_insns (curr_insn, before, NULL, \"Inserting the move\");\n   if (new_reg != NULL_RTX)\n-    {\n-      if (GET_CODE (src) == SUBREG)\n-\tSUBREG_REG (src) = new_reg;\n-      else\n-\tSET_SRC (curr_insn_set) = new_reg;\n-    }\n+    SET_SRC (curr_insn_set) = new_reg;\n   else\n     {\n       if (lra_dump_file != NULL)"}, {"sha": "10b6563f3db4413a863caf92b3e4e81b50d33e07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "patch": "@@ -1,3 +1,8 @@\n+2015-03-19  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/63491\n+\t* gcc.target/powerpc/pr63491.c: New.\n+\n 2015-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/ipa/pr65465.C: New test."}, {"sha": "765bdda4189b5f09c72a520a1c2f8168d75a6f98", "filename": "gcc/testsuite/gcc.target/powerpc/pr63491.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr63491.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0006ebdb71de99e15aef9fd2a2d7c1830c6011/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr63491.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr63491.c?ref=ef0006ebdb71de99e15aef9fd2a2d7c1830c6011", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-options \"-O1 -m64 -mcpu=power8 -mlra\" } */\n+\n+typedef __int128_t __attribute__((__vector_size__(16))) vector_128_t;\n+typedef unsigned long long scalar_64_t;\n+\n+vector_128_t\n+foo (void)\n+{\n+  union {\n+    scalar_64_t i64[2];\n+    vector_128_t v128;\n+  } u;\n+  u.i64[0] = 1;\n+  u.i64[1] = 2;\n+  return u.v128;\n+}"}]}