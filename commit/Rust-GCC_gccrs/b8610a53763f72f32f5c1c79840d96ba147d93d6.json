{"sha": "b8610a53763f72f32f5c1c79840d96ba147d93d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg2MTBhNTM3NjNmNzJmMzJmNWMxYzc5ODQwZDk2YmExNDdkOTNkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-18T12:09:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-18T12:09:43Z"}, "message": "re PR rtl-optimization/17107 (Opportunity to improve code generated for complex logical expression)\n\n\tPR target/17107\n\t* fold-const.c (RANGE_TEST_NON_SHORT_CIRCUIT): Rename to ...\n\t(LOGICAL_OP_NON_SHORT_CIRCUIT): ... here.\n\t(fold_range_test): Adjust.\n\t(fold_truthop): Use it.\n\t* config/rs6000/rs6000.h (RANGE_TEST_NON_SHORT_CIRCUIT): Rename to ...\n\t(LOGICAL_OP_NON_SHORT_CIRCUIT): ... here.\n\nFrom-SVN: r90857", "tree": {"sha": "54f09d5690e3341c8eee2198c97fb7486b990db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f09d5690e3341c8eee2198c97fb7486b990db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8610a53763f72f32f5c1c79840d96ba147d93d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8610a53763f72f32f5c1c79840d96ba147d93d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8610a53763f72f32f5c1c79840d96ba147d93d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8610a53763f72f32f5c1c79840d96ba147d93d6/comments", "author": null, "committer": null, "parents": [{"sha": "14492f0b1e71aeb385d252cb202ea39dee37b3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14492f0b1e71aeb385d252cb202ea39dee37b3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14492f0b1e71aeb385d252cb202ea39dee37b3c0"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "4766d4ac507aa37302f958948d5792c32bc846f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8610a53763f72f32f5c1c79840d96ba147d93d6", "patch": "@@ -1,3 +1,13 @@\n+2004-11-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR target/17107\n+\t* fold-const.c (RANGE_TEST_NON_SHORT_CIRCUIT): Rename to ...\n+\t(LOGICAL_OP_NON_SHORT_CIRCUIT): ... here.\n+\t(fold_range_test): Adjust.\n+\t(fold_truthop): Use it.\n+\t* config/rs6000/rs6000.h (RANGE_TEST_NON_SHORT_CIRCUIT): Rename to ...\n+\t(LOGICAL_OP_NON_SHORT_CIRCUIT): ... here.\n+\n 2004-11-18  Uros Bizjak  <uros@kss-loka.si>\n \n         * configure/i386/i386.md (*fix_trunch_1): Add \"&& 1\" to"}, {"sha": "912f40eee909b2ccfa84d00bc19f94749d6c1593", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b8610a53763f72f32f5c1c79840d96ba147d93d6", "patch": "@@ -1096,9 +1096,9 @@ extern const char *rs6000_warn_altivec_long_switch;\n #define BRANCH_COST 3\n \n /* Override BRANCH_COST heuristic which empirically produces worse\n-   performance for fold_range_test().  */\n+   performance for removing short circuiting from the logical ops.  */\n \n-#define RANGE_TEST_NON_SHORT_CIRCUIT 0\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT 0\n \n /* A fixed register used at prologue and epilogue generation to fix\n    addressing modes.  The SPE needs heavy addressing fixes at the last"}, {"sha": "0c1a3d587c577396628d0acc3b6df2b4374e60fd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8610a53763f72f32f5c1c79840d96ba147d93d6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b8610a53763f72f32f5c1c79840d96ba147d93d6", "patch": "@@ -4392,8 +4392,8 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \n \n \f\n-#ifndef RANGE_TEST_NON_SHORT_CIRCUIT\n-#define RANGE_TEST_NON_SHORT_CIRCUIT (BRANCH_COST >= 2)\n+#ifndef LOGICAL_OP_NON_SHORT_CIRCUIT\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT (BRANCH_COST >= 2)\n #endif\n \n /* EXP is some logical combination of boolean tests.  See if we can\n@@ -4431,7 +4431,7 @@ fold_range_test (tree exp)\n   /* On machines where the branch cost is expensive, if this is a\n      short-circuited branch and the underlying object on both sides\n      is the same, make a non-short-circuit operation.  */\n-  else if (RANGE_TEST_NON_SHORT_CIRCUIT\n+  else if (LOGICAL_OP_NON_SHORT_CIRCUIT\n \t   && lhs != 0 && rhs != 0\n \t   && (TREE_CODE (exp) == TRUTH_ANDIF_EXPR\n \t       || TREE_CODE (exp) == TRUTH_ORIF_EXPR)\n@@ -4653,7 +4653,8 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n \t\t\t       ll_arg, rl_arg),\n \t\t       fold_convert (TREE_TYPE (ll_arg), integer_zero_node));\n \n-      return build2 (code, truth_type, lhs, rhs);\n+      if (LOGICAL_OP_NON_SHORT_CIRCUIT)\n+\treturn build2 (code, truth_type, lhs, rhs);\n     }\n \n   /* See if the comparisons can be merged.  Then get all the parameters for"}]}