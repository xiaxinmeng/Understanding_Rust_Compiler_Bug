{"sha": "392750c53e09334eb509aae4db52a4db18c413be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyNzUwYzUzZTA5MzM0ZWI1MDlhYWU0ZGI1MmE0ZGIxOGM0MTNiZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-09-13T07:36:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-09-13T07:36:50Z"}, "message": "re PR tree-optimization/87287 (Move signed (x % pow2) == 0 optimization to gimple)\n\n\tPR tree-optimization/87287\n\t* fold-const.c (fold_binary_loc) <case EQ_EXPR>: Move signed modulo\n\tX % C == 0 to X % (unsigned) C == 0 optimization to ...\n\t* match.pd (X % C == 0): ... here.  New optimization.\n\n\t* gcc.dg/tree-ssa/pr87287.c: New test.\n\nFrom-SVN: r264260", "tree": {"sha": "238326fc1d7c8ee912fbf715e291e60aa255bf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238326fc1d7c8ee912fbf715e291e60aa255bf65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392750c53e09334eb509aae4db52a4db18c413be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392750c53e09334eb509aae4db52a4db18c413be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392750c53e09334eb509aae4db52a4db18c413be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392750c53e09334eb509aae4db52a4db18c413be/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a90f559d727a993b5a3c5c9c5d5cd5520a7503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a90f559d727a993b5a3c5c9c5d5cd5520a7503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a90f559d727a993b5a3c5c9c5d5cd5520a7503a"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "7ce34fafa6f06d72dea9762c7b8ec9e8a2db0641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392750c53e09334eb509aae4db52a4db18c413be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392750c53e09334eb509aae4db52a4db18c413be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=392750c53e09334eb509aae4db52a4db18c413be", "patch": "@@ -1,3 +1,10 @@\n+2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/87287\n+\t* fold-const.c (fold_binary_loc) <case EQ_EXPR>: Move signed modulo\n+\tX % C == 0 to X % (unsigned) C == 0 optimization to ...\n+\t* match.pd (X % C == 0): ... here.  New optimization.\n+\n 2018-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/82853"}, {"sha": "71c18eb1e8226da428015d6318dc1586344cae6e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=392750c53e09334eb509aae4db52a4db18c413be", "patch": "@@ -10661,28 +10661,6 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t    }\n \t}\n \n-      /* If this is an NE or EQ comparison of zero against the result of a\n-\t signed MOD operation whose second operand is a power of 2, make\n-\t the MOD operation unsigned since it is simpler and equivalent.  */\n-      if (integer_zerop (arg1)\n-\t  && !TYPE_UNSIGNED (TREE_TYPE (arg0))\n-\t  && (TREE_CODE (arg0) == TRUNC_MOD_EXPR\n-\t      || TREE_CODE (arg0) == CEIL_MOD_EXPR\n-\t      || TREE_CODE (arg0) == FLOOR_MOD_EXPR\n-\t      || TREE_CODE (arg0) == ROUND_MOD_EXPR)\n-\t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n-\t{\n-\t  tree newtype = unsigned_type_for (TREE_TYPE (arg0));\n-\t  tree newmod = fold_build2_loc (loc, TREE_CODE (arg0), newtype,\n-\t\t\t\t     fold_convert_loc (loc, newtype,\n-\t\t\t\t\t\t       TREE_OPERAND (arg0, 0)),\n-\t\t\t\t     fold_convert_loc (loc, newtype,\n-\t\t\t\t\t\t       TREE_OPERAND (arg0, 1)));\n-\n-\t  return fold_build2_loc (loc, code, type, newmod,\n-\t\t\t      fold_convert_loc (loc, newtype, arg1));\n-\t}\n-\n       /* Fold ((X >> C1) & C2) == 0 and ((X >> C1) & C2) != 0 where\n \t C1 is a valid shift constant, and C2 is a power of two, i.e.\n \t a single bit.  */"}, {"sha": "6d54dcb6f69d22aea8ba5135a9df24e9074c890b", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=392750c53e09334eb509aae4db52a4db18c413be", "patch": "@@ -470,7 +470,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TYPE_OVERFLOW_UNDEFINED (type)\n        && wi::multiple_of_p (wi::to_wide (@1), wi::to_wide (@2),\n \t\t\t     TYPE_SIGN (type)))\n-   { build_zero_cst (type); })))\n+   { build_zero_cst (type); }))\n+ /* For (X % C) == 0, if X is signed and C is power of 2, use unsigned\n+    modulo and comparison, since it is simpler and equivalent.  */\n+ (for cmp (eq ne)\n+  (simplify\n+   (cmp (mod @0 integer_pow2p@2) integer_zerop@1)\n+   (if (!TYPE_UNSIGNED (TREE_TYPE (@0)))\n+    (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n+     (cmp (mod (convert:utype @0) (convert:utype @2)) (convert:utype @1)))))))\n \n /* X % -C is the same as X % C.  */\n (simplify"}, {"sha": "2102f5a20d34ae577ee6988281f3d366bd5796ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=392750c53e09334eb509aae4db52a4db18c413be", "patch": "@@ -1,3 +1,8 @@\n+2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/87287\n+\t* gcc.dg/tree-ssa/pr87287.c: New test.\n+\n 2018-09-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/85110"}, {"sha": "cba4f43ded9aed94db9abd2aea60aeb7a7d9c03b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr87287.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr87287.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392750c53e09334eb509aae4db52a4db18c413be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr87287.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr87287.c?ref=392750c53e09334eb509aae4db52a4db18c413be", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/87287 */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+/* { dg-final { scan-tree-dump-not \" % 16\" \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-times \" & 15\" 4 \"cddce1\" } } */\n+\n+void f0 (void);\n+\n+int\n+f1 (int x)\n+{\n+  return x % 16 == 0;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  int y = x % 16;\n+  return y != 0;\n+}\n+\n+void\n+f3 (int x)\n+{\n+  if (x % 16 != 0)\n+    f0 ();\n+}\n+\n+void\n+f4 (int x)\n+{\n+  int y = x % 16;\n+  if (y == 0)\n+    f0 ();\n+}"}]}