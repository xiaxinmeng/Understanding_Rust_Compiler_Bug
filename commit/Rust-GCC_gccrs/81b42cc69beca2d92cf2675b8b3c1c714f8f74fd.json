{"sha": "81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiNDJjYzY5YmVjYTJkOTJjZjI2NzViOGIzYzFjNzE0ZjhmNzRmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-17T06:53:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-17T06:53:00Z"}, "message": "langhooks.h (struct lang_hooks_for_decls): Remove function_decl_explicit_p...\n\n\t* langhooks.h (struct lang_hooks_for_decls): Remove\n\tfunction_decl_explicit_p, function_decl_deleted_p and\n\tfunction_decl_defaulted hooks.  Add decl_dwarf_attribute hook.\n\t* langhooks-def.h (lhd_decl_dwarf_attribute): Declare.\n\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n\tLANG_HOOKS_FUNCTION_DECL_DELETED_P,\n\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED): Remove.\n\t(LANG_HOOKS_DECL_DWARF_ATTRIBUTE): Define.\n\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n\tLANG_HOOKS_FUNCTION_DECL_DELETED_P and\n\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED.  Add\n\tLANG_HOOKS_DECL_DWARF_ATTRIBUTE.\n\t* langhooks.c (lhd_decl_dwarf_attribute): New function.\n\t* dwarf2out.c (gen_subprogram_die): Use\n\tlang_hooks.decls.decl_dwarf_attribute instead of\n\tlang_hooks.decls.function_decl_*.\ncp/\n\t* cp-objcp-common.h (cp_function_decl_explicit_p,\n\tcp_function_decl_deleted_p, cp_function_decl_defaulted): Remove.\n\t(cp_decl_dwarf_attribute): Declare.\n\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n\tLANG_HOOKS_FUNCTION_DECL_DELETED_P,\n\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED): Remove.\n\t(LANG_HOOKS_DECL_DWARF_ATTRIBUTE): Redefine.\n\t* cp-objcp-common.c (cp_function_decl_explicit_p,\n\tcp_function_decl_deleted_p, cp_function_decl_defaulted): Remove.\n\t(cp_decl_dwarf_attribute): New function.\n\nFrom-SVN: r241227", "tree": {"sha": "811f8875b4efdbf7940bca258ddcf5f69be38c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811f8875b4efdbf7940bca258ddcf5f69be38c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d66648f6c1ba3f353dadd26a0caf3d5ceebb51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d66648f6c1ba3f353dadd26a0caf3d5ceebb51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d66648f6c1ba3f353dadd26a0caf3d5ceebb51c"}], "stats": {"total": 204, "additions": 110, "deletions": 94}, "files": [{"sha": "efc94a4d1f24c4d8d638a1e234b9bae29a2aa8a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -1,3 +1,22 @@\n+2016-10-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* langhooks.h (struct lang_hooks_for_decls): Remove\n+\tfunction_decl_explicit_p, function_decl_deleted_p and\n+\tfunction_decl_defaulted hooks.  Add decl_dwarf_attribute hook.\n+\t* langhooks-def.h (lhd_decl_dwarf_attribute): Declare.\n+\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n+\tLANG_HOOKS_FUNCTION_DECL_DELETED_P,\n+\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED): Remove.\n+\t(LANG_HOOKS_DECL_DWARF_ATTRIBUTE): Define.\n+\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n+\tLANG_HOOKS_FUNCTION_DECL_DELETED_P and\n+\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED.  Add\n+\tLANG_HOOKS_DECL_DWARF_ATTRIBUTE.\n+\t* langhooks.c (lhd_decl_dwarf_attribute): New function.\n+\t* dwarf2out.c (gen_subprogram_die): Use\n+\tlang_hooks.decls.decl_dwarf_attribute instead of\n+\tlang_hooks.decls.function_decl_*.\n+\n 2016-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/37139"}, {"sha": "d2e6fa818ce6d20367b5f1e5dcc3b99563f4d983", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -1,3 +1,16 @@\n+2016-10-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-objcp-common.h (cp_function_decl_explicit_p,\n+\tcp_function_decl_deleted_p, cp_function_decl_defaulted): Remove.\n+\t(cp_decl_dwarf_attribute): Declare.\n+\t(LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P,\n+\tLANG_HOOKS_FUNCTION_DECL_DELETED_P,\n+\tLANG_HOOKS_FUNCTION_DECL_DEFAULTED): Remove.\n+\t(LANG_HOOKS_DECL_DWARF_ATTRIBUTE): Redefine.\n+\t* cp-objcp-common.c (cp_function_decl_explicit_p,\n+\tcp_function_decl_deleted_p, cp_function_decl_defaulted): Remove.\n+\t(cp_decl_dwarf_attribute): New function.\n+\n 2016-10-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/77945"}, {"sha": "abcc1ca3d5dca396a793b873336d8ad2618dea85", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n #include \"cp-objcp-common.h\"\n+#include \"dwarf2.h\"\n \n /* Special routine to get the alias set for C++.  */\n \n@@ -130,45 +131,48 @@ cxx_types_compatible_p (tree x, tree y)\n   return same_type_ignoring_top_level_qualifiers_p (x, y);\n }\n \n-/* Return true if DECL is explicit member function.  */\n-\n-bool\n-cp_function_decl_explicit_p (const_tree decl)\n+/* Return -1 if dwarf ATTR shouldn't be added for DECL, or the attribute\n+   value otherwise.  */\n+int\n+cp_decl_dwarf_attribute (const_tree decl, int attr)\n {\n-  return (decl\n-\t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n-\t  && DECL_NONCONVERTING_P (decl));\n-}\n+  if (decl == NULL_TREE)\n+    return -1;\n \n-/* Return true if DECL is deleted special member function.  */\n+  switch (attr)\n+    {\n+    case DW_AT_explicit:\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n+\t  && DECL_NONCONVERTING_P (decl))\n+\treturn 1;\n+      break;\n \n-bool\n-cp_function_decl_deleted_p (const_tree decl)\n-{\n-  return (decl\n+    case DW_AT_deleted:\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n \t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n-\t  && DECL_DELETED_FN (decl));\n-}\n+\t  && DECL_DELETED_FN (decl))\n+\treturn 1;\n+      break;\n \n-/* Returns 0 if DECL is NOT a C++11 defaulted special member function,\n-   1 if it is explicitly defaulted within the class body, or 2 if it\n-   is explicitly defaulted outside the class body.  */\n+    case DW_AT_defaulted:\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n+\t  && DECL_DEFAULTED_FN (decl))\n+\t{\n+\t  if (DECL_DEFAULTED_IN_CLASS_P (decl))\n+\t    return DW_DEFAULTED_in_class;\n \n-int\n-cp_function_decl_defaulted (const_tree decl)\n-{\n-  if (decl\n-      && DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n-      && DECL_DEFAULTED_FN (decl))\n-    {\n-      if (DECL_DEFAULTED_IN_CLASS_P (decl))\n-\treturn 1;\n+\t  if (DECL_DEFAULTED_OUTSIDE_CLASS_P (decl))\n+\t    return DW_DEFAULTED_out_of_class;\n+\t}\n+      break;\n \n-      if (DECL_DEFAULTED_OUTSIDE_CLASS_P (decl))\n-\treturn 2;\n+    default:\n+      break;\n     }\n \n-  return 0;\n+  return -1;\n }\n \n /* Stubs to keep c-opts.c happy.  */"}, {"sha": "9dd847e4220ff40835f19310913585dc2a7623b4", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -26,9 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n \t\t\t\t\t tree, bool);\n \n-extern bool cp_function_decl_explicit_p (const_tree decl);\n-extern bool cp_function_decl_deleted_p (const_tree decl);\n-extern int cp_function_decl_defaulted (const_tree decl);\n+extern int cp_decl_dwarf_attribute (const_tree, int);\n extern void cp_common_init_ts (void);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n@@ -131,12 +129,8 @@ extern void cp_common_init_ts (void);\n #define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n #undef LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n-#undef LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P\n-#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P cp_function_decl_explicit_p\n-#undef LANG_HOOKS_FUNCTION_DECL_DELETED_P\n-#define LANG_HOOKS_FUNCTION_DECL_DELETED_P cp_function_decl_deleted_p\n-#undef LANG_HOOKS_FUNCTION_DECL_DEFAULTED\n-#define LANG_HOOKS_FUNCTION_DECL_DEFAULTED cp_function_decl_defaulted\n+#undef LANG_HOOKS_DECL_DWARF_ATTRIBUTE\n+#define LANG_HOOKS_DECL_DWARF_ATTRIBUTE cp_decl_dwarf_attribute\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR"}, {"sha": "ae4cad1d1632dd2c35ae05d21c567e094a67a70f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -20625,20 +20625,19 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  /* When we process the method declaration, we haven't seen\n \t     the out-of-class defaulted definition yet, so we have to\n \t     recheck now.  */\n-\t  int defaulted = lang_hooks.decls.function_decl_defaulted (decl);\n-\t  if (defaulted && (dwarf_version >= 5 || ! dwarf_strict)\n+\t  if ((dwarf_version >= 5 || ! dwarf_strict)\n \t      && !get_AT (subr_die, DW_AT_defaulted))\n-\t    switch (defaulted)\n-\t      {\n-\t      case 2:\n-\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n-\t\t\t\t DW_DEFAULTED_out_of_class);\n-\t\tbreak;\n-\n-\t      case 1: /* This must have been handled before.  */\n-\t      default:\n-\t\tgcc_unreachable ();\n-\t      }\n+\t    {\n+\t      int defaulted\n+\t\t= lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\t\t DW_AT_defaulted);\n+\t      if (defaulted != -1)\n+\t\t{\n+\t\t  /* Other values must have been handled before.  */\n+\t\t  gcc_assert (defaulted == DW_DEFAULTED_out_of_class);\n+\t\t  add_AT_unsigned (subr_die, DW_AT_defaulted, defaulted);\n+\t\t}\n+\t    }\n \t}\n     }\n   /* Create a fresh DIE for anything else.  */\n@@ -20681,40 +20680,28 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n \t  /* If this is an explicit function declaration then generate\n \t     a DW_AT_explicit attribute.  */\n-\t  if (lang_hooks.decls.function_decl_explicit_p (decl)\n-\t      && (dwarf_version >= 3 || !dwarf_strict))\n+\t  if ((dwarf_version >= 3 || !dwarf_strict)\n+\t      && lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\t\tDW_AT_explicit) == 1)\n \t    add_AT_flag (subr_die, DW_AT_explicit, 1);\n \n \t  /* If this is a C++11 deleted special function member then generate\n \t     a DW_AT_deleted attribute.  */\n-\t  if (lang_hooks.decls.function_decl_deleted_p (decl)\n-\t      && (dwarf_version >= 5 || ! dwarf_strict))\n+\t  if ((dwarf_version >= 5 || !dwarf_strict)\n+\t      && lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\t\tDW_AT_deleted) == 1)\n \t    add_AT_flag (subr_die, DW_AT_deleted, 1);\n \n \t  /* If this is a C++11 defaulted special function member then\n \t     generate a DW_AT_GNU_defaulted attribute.  */\n-\t  int defaulted = lang_hooks.decls.function_decl_defaulted (decl);\n-\t  if (defaulted && (dwarf_version >= 5 || ! dwarf_strict))\n-\t    switch (defaulted)\n-\t      {\n-\t      case 1:\n-\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n-\t\t\t\t DW_DEFAULTED_in_class);\n-\t\tbreak;\n-\n-\t\t/* It is likely that this will never hit, since we\n-\t\t   don't have the out-of-class definition yet when we\n-\t\t   process the class definition and the method\n-\t\t   declaration.  We recheck elsewhere, but leave it\n-\t\t   here just in case.  */\n-\t      case 2:\n-\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted,\n-\t\t\t\t DW_DEFAULTED_out_of_class);\n-\t\tbreak;\n-\n-\t      default:\n-\t\tgcc_unreachable ();\n-\t      }\n+\t  if (dwarf_version >= 5 || !dwarf_strict)\n+\t    {\n+\t      int defaulted\n+\t\t= lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\t\t DW_AT_defaulted);\n+\t      if (defaulted != -1)\n+\t\tadd_AT_unsigned (subr_die, DW_AT_defaulted, defaulted);\n+\t    }\n \t}\n     }\n   /* Tag abstract instances with DW_AT_inline.  */"}, {"sha": "e49382bfb56b705c198fafba3e634c98f2be2d06", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -83,6 +83,7 @@ extern bool lhd_omp_mappable_type (tree);\n \n extern const char *lhd_get_substring_location (const substring_loc &,\n \t\t\t\t\t       location_t *out_loc);\n+extern int lhd_decl_dwarf_attribute (const_tree, int);\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n@@ -214,9 +215,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n-#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P hook_bool_const_tree_false\n-#define LANG_HOOKS_FUNCTION_DECL_DELETED_P hook_bool_const_tree_false\n-#define LANG_HOOKS_FUNCTION_DECL_DEFAULTED hook_int_const_tree_0\n+#define LANG_HOOKS_DECL_DWARF_ATTRIBUTE lhd_decl_dwarf_attribute\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_POST_COMPILATION_PARSING_CLEANUPS NULL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n@@ -237,9 +236,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n-  LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P, \\\n-  LANG_HOOKS_FUNCTION_DECL_DELETED_P, \\\n-  LANG_HOOKS_FUNCTION_DECL_DEFAULTED, \\\n+  LANG_HOOKS_DECL_DWARF_ATTRIBUTE, \\\n   LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P, \\\n   LANG_HOOKS_FUNCTION_PARM_EXPANDED_FROM_PACK_P, \\\n   LANG_HOOKS_GET_GENERIC_FUNCTION_DECL, \\"}, {"sha": "370990ef43b712136bc960a07ed6aed5421c0bd3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -693,6 +693,15 @@ lhd_get_substring_location (const substring_loc &, location_t *)\n   return \"unimplemented\";\n }\n \n+/* Default implementation of LANG_HOOKS_DECL_DWARF_ATTRIBUTE.  Don't add\n+   any attributes.  */\n+\n+int\n+lhd_decl_dwarf_attribute (const_tree, int)\n+{\n+  return -1;\n+}\n+\n /* Returns true if the current lang_hooks represents the GNU C frontend.  */\n \n bool"}, {"sha": "8116b170f7b116b625e905ce4a217ec6affbb2dd", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b42cc69beca2d92cf2675b8b3c1c714f8f74fd/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=81b42cc69beca2d92cf2675b8b3c1c714f8f74fd", "patch": "@@ -182,16 +182,9 @@ struct lang_hooks_for_decls\n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) (void);\n \n-  /* Returns true if DECL is explicit member function.  */\n-  bool (*function_decl_explicit_p) (const_tree);\n-\n-  /* Returns true if DECL is C++11 deleted special member function.  */\n-  bool (*function_decl_deleted_p) (const_tree);\n-\n-  /* Returns 0 if DECL is NOT a C++11 defaulted special member\n-     function, 1 if it is explicitly defaulted within the class body,\n-     or 2 if it is explicitly defaulted outside the class body.  */\n-  int (*function_decl_defaulted) (const_tree);\n+  /* Returns -1 if dwarf ATTR shouldn't be added for DECL, or the attribute\n+     value otherwise.  */\n+  int (*decl_dwarf_attribute) (const_tree, int);\n \n   /* Returns True if the parameter is a generic parameter decl\n      of a generic type, e.g a template template parameter for the C++ FE.  */"}]}