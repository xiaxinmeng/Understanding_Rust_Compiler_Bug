{"sha": "39ac09770991ae0a9052fd0865159b0b17d22a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhYzA5NzcwOTkxYWUwYTkwNTJmZDA4NjUxNTliMGIxN2QyMmEzZA==", "commit": {"author": {"name": "Josh Conner", "email": "jconner@apple.com", "date": "2006-09-01T16:56:45Z"}, "committer": {"name": "Josh Conner", "email": "jconner@gcc.gnu.org", "date": "2006-09-01T16:56:45Z"}, "message": "re PR middle-end/25505 (gcc uses way too much stack space for this code)\n\n2006-09-01  Josh Conner  <jconner@apple.com>\n\n\tPR c++/25505\n\tgcc.dg/nrv3.c: New test.\n\tgcc.dg/nrv4.c: New test.\n\tgcc.dg/nrv5.c: New test.\n\nFrom-SVN: r116634", "tree": {"sha": "f3f5fd6c8e340bea117f39288fa238a3d4bc8c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3f5fd6c8e340bea117f39288fa238a3d4bc8c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ac09770991ae0a9052fd0865159b0b17d22a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ac09770991ae0a9052fd0865159b0b17d22a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ac09770991ae0a9052fd0865159b0b17d22a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ac09770991ae0a9052fd0865159b0b17d22a3d/comments", "author": null, "committer": null, "parents": [{"sha": "f0ce78583abfc8db21dfa0c577c606c565ef0708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ce78583abfc8db21dfa0c577c606c565ef0708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ce78583abfc8db21dfa0c577c606c565ef0708"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "df6e40fda2db4fde8f2dad0c9700cca1d62e2a9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39ac09770991ae0a9052fd0865159b0b17d22a3d", "patch": "@@ -1,3 +1,10 @@\n+2006-09-01  Josh Conner  <jconner@apple.com>\n+\n+\tPR c++/25505\n+\tgcc.dg/nrv3.c: New test.\n+\tgcc.dg/nrv4.c: New test.\n+\tgcc.dg/nrv5.c: New test.\n+\n 2006-09-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/23287"}, {"sha": "2b0147d11c47eaa04b4251f6934bbb111f9a6b05", "filename": "gcc/testsuite/gcc.dg/nrv3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv3.c?ref=39ac09770991ae0a9052fd0865159b0b17d22a3d", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that gimple-level NRV is occurring when values other than the\n+   return slot are call-clobbered.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef struct { int x; void *y; } S;\n+typedef struct { int a; S b; } T;\n+S nrv_candidate (void);\n+void use_result (S, int);\n+int *ptr;\n+void foo (void)\n+{\n+  S result;\n+  T result_arr[10][5];\n+\n+  int i;\n+\n+  ptr = &i;\n+\n+  /* i is call-clobbered for these calls, but result and result_arr\n+     aren't.  */\n+  result = nrv_candidate ();\n+  result_arr[3][4].b = nrv_candidate ();\n+\n+  use_result (result, i);\n+  use_result (result_arr[3][4].b, i);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return slot optimization\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "0560d5d287129b02641c94ce37b2469a64cfc6ca", "filename": "gcc/testsuite/gcc.dg/nrv4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv4.c?ref=39ac09770991ae0a9052fd0865159b0b17d22a3d", "patch": "@@ -0,0 +1,33 @@\n+/* Verify that NRV optimizations are prohibited when the LHS is an\n+   indirect reference to something that may be call-clobbered. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef struct { int x; void *y; } S;\n+S nrv_candidate (void);\n+void use_result (S);\n+void make_escape (S *);\n+S global_S;\n+void foo (void)\n+{\n+  S *result;\n+  S local_S;\n+\n+  /* We can't perform return slot optimization because global_S is\n+     global and may be clobbered by nrv_candidate.  */\n+  result = &global_S;\n+  *result = nrv_candidate ();\n+  use_result (*result);\n+\n+  /* We can't perform return slot optimization because local_S is\n+     call_clobbered (its address escapes prior to invoking\n+     nrv_candidate).  */\n+  make_escape (&local_S);\n+  result = &local_S;\n+  *result = nrv_candidate ();\n+  use_result (*result);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return slot optimization\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "ecca562775dd48f0d014731123826a3ddbcaabed", "filename": "gcc/testsuite/gcc.dg/nrv5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ac09770991ae0a9052fd0865159b0b17d22a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnrv5.c?ref=39ac09770991ae0a9052fd0865159b0b17d22a3d", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that NRV optimizations are prohibited when the LHS is\n+   something that may be call-clobbered. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef struct { int x; void *y; } S;\n+typedef struct { int a; S b; } T;\n+S nrv_candidate (void);\n+void use_result (S);\n+void make_escape (S *);\n+void foo (void)\n+{\n+  S result;\n+  T result_arr[10][5];\n+\n+  make_escape (&result);\n+  make_escape (&(result_arr[3][4].b));\n+\n+  /* Neither call should be allowed to use NRV optimization.  */\n+  result = nrv_candidate ();\n+  result_arr[3][4].b = nrv_candidate ();\n+\n+  use_result (result);\n+  use_result (result_arr[3][4].b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return slot optimization\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}