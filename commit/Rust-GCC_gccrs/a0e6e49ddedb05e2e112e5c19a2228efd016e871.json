{"sha": "a0e6e49ddedb05e2e112e5c19a2228efd016e871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNmU0OWRkZWRiMDVlMmUxMTJlNWMxOWEyMjI4ZWZkMDE2ZTg3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-09T07:47:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-09T08:40:44Z"}, "message": "random memory leak fixes\n\nThis fixes leaks discovered checking whether I introduced new ones\nwith the last vectorizer changes.\n\n2020-10-09  Richard Biener  <rguenther@suse.de>\n\n\t* cgraphunit.c (expand_all_functions): Free tp_first_run_order.\n\t* ipa-modref.c (pass_ipa_modref::execute): Free order.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations): Free\n\tloop body.\n\t* tree-vect-data-refs.c (vect_find_stmt_data_reference): Free\n\tdata references upon failure.\n\t* tree-vect-loop.c (update_epilogue_loop_vinfo): Free BBs\n\tarray of the original loop.\n\t* tree-vect-slp.c (vect_slp_bbs): Use an auto_vec for\n\tdataref_groups to release its memory.", "tree": {"sha": "433873f0738d7aea6c32fbb8b1847b35c4afdd98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433873f0738d7aea6c32fbb8b1847b35c4afdd98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e6e49ddedb05e2e112e5c19a2228efd016e871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6e49ddedb05e2e112e5c19a2228efd016e871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e6e49ddedb05e2e112e5c19a2228efd016e871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6e49ddedb05e2e112e5c19a2228efd016e871/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781634daea8cb788efb33994f4a19df76598542e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781634daea8cb788efb33994f4a19df76598542e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781634daea8cb788efb33994f4a19df76598542e"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "19ae8763373a21ec2eebe133826fcc11d61c3fb5", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -2494,6 +2494,7 @@ expand_all_functions (void)\n   delete ipa_saved_clone_sources;\n   ipa_saved_clone_sources = NULL;\n   free (order);\n+  free (tp_first_run_order);\n }\n \n /* This is used to sort the node types by the cgraph order number.  */"}, {"sha": "c22c0d233f75043326b9842997213ed6951b0458", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -1748,6 +1748,7 @@ pass_ipa_modref::execute (function *)\n     }\n   ((modref_summaries *)summaries)->ipa = false;\n   ipa_free_postorder_info ();\n+  free (order);\n   return 0;\n }\n "}, {"sha": "697d30fb989e20b83e6e8ee817abfe6f08524e04", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -4305,6 +4305,7 @@ estimate_numbers_of_iterations (class loop *loop)\n \n   if (flag_aggressive_loop_optimizations)\n     infer_loop_bounds_from_undefined (loop, body);\n+  free (body);\n \n   discover_iteration_bound_by_body_walk (loop);\n "}, {"sha": "676182c0888a2a41667359ffe233d7c7e1e8d368", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -4045,29 +4045,42 @@ vect_find_stmt_data_reference (loop_p loop, gimple *stmt,\n     return opt_result::success ();\n \n   if (refs.length () > 1)\n-    return opt_result::failure_at (stmt,\n-\t\t\t\t   \"not vectorized:\"\n-\t\t\t\t   \" more than one data ref in stmt: %G\", stmt);\n+    {\n+      while (!refs.is_empty ())\n+\tfree_data_ref (refs.pop ());\n+      return opt_result::failure_at (stmt,\n+\t\t\t\t     \"not vectorized: more than one \"\n+\t\t\t\t     \"data ref in stmt: %G\", stmt);\n+    }\n \n+  data_reference_p dr = refs.pop ();\n   if (gcall *call = dyn_cast <gcall *> (stmt))\n     if (!gimple_call_internal_p (call)\n \t|| (gimple_call_internal_fn (call) != IFN_MASK_LOAD\n \t    && gimple_call_internal_fn (call) != IFN_MASK_STORE))\n-      return opt_result::failure_at (stmt,\n-\t\t\t\t     \"not vectorized: dr in a call %G\", stmt);\n+      {\n+\tfree_data_ref (dr);\n+\treturn opt_result::failure_at (stmt,\n+\t\t\t\t       \"not vectorized: dr in a call %G\", stmt);\n+      }\n \n-  data_reference_p dr = refs.pop ();\n   if (TREE_CODE (DR_REF (dr)) == COMPONENT_REF\n       && DECL_BIT_FIELD (TREE_OPERAND (DR_REF (dr), 1)))\n-    return opt_result::failure_at (stmt,\n-\t\t\t\t   \"not vectorized:\"\n-\t\t\t\t   \" statement is bitfield access %G\", stmt);\n+    {\n+      free_data_ref (dr);\n+      return opt_result::failure_at (stmt,\n+\t\t\t\t     \"not vectorized:\"\n+\t\t\t\t     \" statement is bitfield access %G\", stmt);\n+    }\n \n   if (DR_BASE_ADDRESS (dr)\n       && TREE_CODE (DR_BASE_ADDRESS (dr)) == INTEGER_CST)\n-    return opt_result::failure_at (stmt,\n-\t\t\t\t   \"not vectorized:\"\n-\t\t\t\t   \" base addr of dr is a constant\\n\");\n+    {\n+      free_data_ref (dr);\n+      return opt_result::failure_at (stmt,\n+\t\t\t\t     \"not vectorized:\"\n+\t\t\t\t     \" base addr of dr is a constant\\n\");\n+    }\n \n   /* Check whether this may be a SIMD lane access and adjust the\n      DR to make it easier for us to handle it.  */"}, {"sha": "0a315e222260980a95450c70b29eac28b3a7bd53", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -8817,6 +8817,7 @@ update_epilogue_loop_vinfo (class loop *epilogue, tree advance)\n   basic_block *epilogue_bbs = get_loop_body (epilogue);\n   unsigned i;\n \n+  free (LOOP_VINFO_BBS (epilogue_vinfo));\n   LOOP_VINFO_BBS (epilogue_vinfo) = epilogue_bbs;\n \n   /* Advance data_reference's with the number of iterations of the previous"}, {"sha": "77ea4d0eb5163085d27cf5e556b36465ce49336b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e6e49ddedb05e2e112e5c19a2228efd016e871/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a0e6e49ddedb05e2e112e5c19a2228efd016e871", "patch": "@@ -3783,7 +3783,7 @@ static bool\n vect_slp_bbs (vec<basic_block> bbs)\n {\n   vec<data_reference_p> datarefs = vNULL;\n-  vec<int> dataref_groups = vNULL;\n+  auto_vec<int> dataref_groups;\n   int insns = 0;\n   int current_group = 0;\n "}]}