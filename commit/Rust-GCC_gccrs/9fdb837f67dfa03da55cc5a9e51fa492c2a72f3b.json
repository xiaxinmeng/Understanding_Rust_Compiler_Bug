{"sha": "9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkYjgzN2Y2N2RmYTAzZGE1NWNjNWE5ZTUxZmE0OTJjMmE3MmYzYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-18T10:32:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-18T10:32:15Z"}, "message": "i386.md (*sibcall_memory): Rename from *sibcall_intern.\n\n\t* config/i386/i386.md (*sibcall_memory): Rename from *sibcall_intern.\n\tDo not use unspec as call operand.  Use memory_operand instead of\n\tmemory_nox32_operand and add \"m\" operand constraint.  Disable\n\tpattern for TARGET_X32.\n\t(*sibcall_pop_memory): Ditto.\n\t(*sibcall_value_memory): Ditto.\n\t(*sibcall_value_pop_memory): Ditto.\n\t(sibcall peepholes): Merge SImode and DImode patterns using\n\tW mode iterator.  Use memory_operand instead of memory_nox32_operand.\n\tDisable pattern for TARGET_X32.  Check if eliminated register is\n\treally dead after call insn.  Generate call RTX without unspec operand.\n\t(sibcall_value peepholes): Ditto.\n\t(sibcall_pop peepholes): Fix call insn RTXes.  Use memory_operand\n\tinstead of memory_nox32_operand.  Check if eliminated register is\n\treally dead after call insn. Generate call RTX without unspec operand.\n\t(sibcall_value_pop peepholes): Ditto.\n\t* config/i386/predicates.md (memory_nox32_operand): Remove predicate.\n\nFrom-SVN: r211776", "tree": {"sha": "d2ccb9751e94b96b8af9fea477e32fe4278c1d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ccb9751e94b96b8af9fea477e32fe4278c1d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/comments", "author": null, "committer": null, "parents": [{"sha": "35d147ef16192080c370e3c3ea6f1c8e4238da0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d147ef16192080c370e3c3ea6f1c8e4238da0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d147ef16192080c370e3c3ea6f1c8e4238da0d"}], "stats": {"total": 266, "additions": 127, "deletions": 139}, "files": [{"sha": "2089dec9e2f71f57dddeb0d6153574742aa547f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "patch": "@@ -1,3 +1,23 @@\n+2014-06-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*sibcall_memory): Rename from *sibcall_intern.\n+\tDo not use unspec as call operand.  Use memory_operand instead of\n+\tmemory_nox32_operand and add \"m\" operand constraint.  Disable\n+\tpattern for TARGET_X32.\n+\t(*sibcall_pop_memory): Ditto.\n+\t(*sibcall_value_memory): Ditto.\n+\t(*sibcall_value_pop_memory): Ditto.\n+\t(sibcall peepholes): Merge SImode and DImode patterns using\n+\tW mode iterator.  Use memory_operand instead of memory_nox32_operand.\n+\tDisable pattern for TARGET_X32.  Check if eliminated register is\n+\treally dead after call insn.  Generate call RTX without unspec operand.\n+\t(sibcall_value peepholes): Ditto.\n+\t(sibcall_pop peepholes): Fix call insn RTXes.  Use memory_operand\n+\tinstead of memory_nox32_operand.  Check if eliminated register is\n+\treally dead after call insn. Generate call RTX without unspec operand.\n+\t(sibcall_value_pop peepholes): Ditto.\n+\t* config/i386/predicates.md (memory_nox32_operand): Remove predicate.\n+\n 2014-06-18  Terry Guo  <terry.guo@arm.com>\n \n \tPR target/61544\n@@ -41,9 +61,8 @@\n \n 2014-06-18  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* gimplify.c (omp_notice_variable): If n is non-NULL\n-\tand no flags change in ORT_TARGET region, don't jump to\n-\tdo_outer.\n+\t* gimplify.c (omp_notice_variable): If n is non-NULL and no flags\n+\tchanged in ORT_TARGET region, don't jump to do_outer.\n \t(struct gimplify_adjust_omp_clauses_data): New type.\n \t(gimplify_adjust_omp_clauses_1): Adjust for data being\n \ta struct gimplify_adjust_omp_clauses_data pointer instead\n@@ -62,13 +81,11 @@\n \t* omp-low.c (scan_sharing_clauses): Call scan_omp_op on\n \tnon-DECL_P OMP_CLAUSE_DECL if ctx->outer.\n \t(scan_omp_parallel, lower_omp_for): When adding\n-\t_LOOPTEMP_ clause var, add it to outer ctx's decl_map\n-\tas identity.\n+\t_LOOPTEMP_ clause var, add it to outer ctx's decl_map as identity.\n \t* tree-core.h (OMP_CLAUSE_MAP_TO_PSET): New map kind.\n \t* tree-nested.c (convert_nonlocal_omp_clauses,\n \tconvert_local_omp_clauses): Handle various OpenMP 4.0 clauses.\n-\t* tree-pretty-print.c (dump_omp_clause): Handle\n-\tOMP_CLAUSE_MAP_TO_PSET.\n+\t* tree-pretty-print.c (dump_omp_clause): Handle OMP_CLAUSE_MAP_TO_PSET.\n \n 2014-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -187,7 +204,8 @@\n \t* ipa-visiblity.c (cgraph_externally_visible_p): Cleanup.\n \t(update_visibility_by_resolution_info): Consider UNDEF; fix checking;\n \treset sections of symbols dragged out of the comdats.\n-\t(function_and_variable_visibility): Reset sections of localized symbols.\n+\t(function_and_variable_visibility): Reset sections of\n+\tlocalized symbols.\n \n 2014-06-16  Richard Biener  <rguenther@suse.de>\n \n@@ -599,8 +617,8 @@\n \t* tree.h (decl_section_name, set_decl_section_name): Update prototypes.\n \t* sdbout.c (sdbout_one_type): Update.\n \t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Update.\n-\t* varasm.c (IN_NAMED_SECTION, get_named_section, resolve_unique_section,\n-\thot_function_section, get_named_text_section,\n+\t* varasm.c (IN_NAMED_SECTION, get_named_section,\n+\tresolve_unique_section, hot_function_section, get_named_text_section,\n \tUSE_SELECT_SECTION_FOR_FUNCTIONS, default_function_rodata_section,\n \tmake_decl_rtl, default_unique_section): Update.\n \t* config/c6x/c6x.c (c6x_in_small_data_p): Update.\n@@ -1064,8 +1082,7 @@\n 2014-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR lto/61334\n-\t* configure.ac: Use gcc_AC_CHECK_DECLS to check for strnlen\n-\tprototype.\n+\t* configure.ac: Use gcc_AC_CHECK_DECLS to check for strnlen prototype.\n \t* config.in: Regenerate.\n \t* configure: Likewise.\n "}, {"sha": "7cb896423fc5542a7380e460b36be5535ab7b43f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 95, "deletions": 118, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "patch": "@@ -11354,52 +11354,37 @@\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*sibcall_intern\"\n-  [(call (unspec [(mem:QI (match_operand:W 0 \"memory_nox32_operand\"))]\n-\t   UNSPEC_PEEPSIB)\n-\t (match_operand 1))]\n-  \"\"\n+(define_insn \"*sibcall_memory\"\n+  [(call (mem:QI (match_operand:W 0 \"memory_operand\" \"m\"))\n+\t (match_operand 1))\n+   (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n+  \"!TARGET_X32\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n (define_peephole2\n-  [(set (match_operand:DI 0 \"register_operand\")\n-        (match_operand:DI 1 \"memory_nox32_operand\"))\n-   (call (mem:QI (match_dup 0))\n-         (match_operand 3))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n-  [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-         (match_dup 3))])\n-\n-(define_peephole2\n-  [(set (match_operand:DI 0 \"register_operand\")\n-        (match_operand:DI 1 \"memory_nox32_operand\"))\n-   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (call (mem:QI (match_dup 0))\n-         (match_operand 3))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-         (match_dup 3))])\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+  [(set (match_operand:W 0 \"register_operand\")\n+\t(match_operand:W 1 \"memory_operand\"))\n    (call (mem:QI (match_dup 0))\n-         (match_operand 3))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n-  [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-         (match_dup 3))])\n+\t (match_operand 3))]\n+  \"!TARGET_X32 && SIBLING_CALL_P (peep2_next_insn (1))\n+   && peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel [(call (mem:QI (match_dup 1))\n+\t\t    (match_dup 3))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+  [(set (match_operand:W 0 \"register_operand\")\n+\t(match_operand:W 1 \"memory_operand\"))\n    (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (call (mem:QI (match_dup 0))\n-         (match_operand 3))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+\t (match_operand 3))]\n+  \"!TARGET_X32 && SIBLING_CALL_P (peep2_next_insn (2))\n+   && peep2_reg_dead_p (3, operands[0])\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB) (match_dup 3))])\n+   (parallel [(call (mem:QI (match_dup 1))\n+\t\t    (match_dup 3))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_expand \"call_pop\"\n   [(parallel [(call (match_operand:QI 0)\n@@ -11434,42 +11419,52 @@\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*sibcall_pop_intern\"\n-  [(call (unspec [(mem:QI (match_operand:SI 0 \"memory_nox32_operand\"))]\n-           UNSPEC_PEEPSIB)\n+(define_insn \"*sibcall_pop_memory\"\n+  [(call (mem:QI (match_operand:SI 0 \"memory_operand\" \"m\"))\n \t (match_operand 1))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))\n+   (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n   \"!TARGET_64BIT\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+\t(match_operand:SI 1 \"memory_operand\"))\n    (parallel [(call (mem:QI (match_dup 0))\n \t\t    (match_operand 3))\n \t      (set (reg:SI SP_REG)\n-\t\t   (match_operand 4))])]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n-  [(parallel [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\")))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\n+   && peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel [(call (mem:QI (match_dup 1))\n \t\t    (match_dup 3))\n-\t      (set (reg:SI SP_REG) (match_dup 4))])])\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_dup 4)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+\t(match_operand:SI 1 \"memory_operand\"))\n    (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (parallel [(call (mem:QI (match_dup 0))\n \t\t    (match_operand 3))\n \t      (set (reg:SI SP_REG)\n-\t\t   (match_operand 4))])]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\")))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\n+   && peep2_reg_dead_p (3, operands[0])\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (parallel [(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n+   (parallel [(call (mem:QI (match_dup 1))\n \t\t    (match_dup 3))\n-\t      (set (reg:SI SP_REG) (match_dup 4))])])\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_dup 4)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n ;; Call subroutine, returning value in operand 0\n \n@@ -11513,62 +11508,42 @@\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n-(define_insn \"*sibcall_value_intern\"\n+(define_insn \"*sibcall_value_memory\"\n   [(set (match_operand 0)\n-    (call (unspec [(mem:QI (match_operand:W 1 \"memory_nox32_operand\"))]\n-\t    UNSPEC_PEEPSIB)\n-          (match_operand 2)))]\n-  \"\"\n+ \t(call (mem:QI (match_operand:W 1 \"memory_operand\" \"m\"))\n+\t      (match_operand 2)))\n+   (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n+  \"!TARGET_X32\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n (define_peephole2\n-  [(set (match_operand:DI 0 \"register_operand\")\n-        (match_operand:DI 1 \"memory_nox32_operand\"))\n+  [(set (match_operand:W 0 \"register_operand\")\n+\t(match_operand:W 1 \"memory_operand\"))\n    (set (match_operand 2)\n    (call (mem:QI (match_dup 0))\n \t\t (match_operand 3)))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n-  [(set (match_dup 2)\n-   (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t (match_dup 3)))])\n-\n-(define_peephole2\n-  [(set (match_operand:DI 0 \"register_operand\")\n-        (match_operand:DI 1 \"memory_nox32_operand\"))\n-   (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (set (match_operand 2)\n-\t(call (mem:QI (match_dup 0))\n-\t      (match_operand 3)))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (set (match_dup 2)\n-\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t      (match_dup 3)))])\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n-   (set (match_operand 2)\n-\t(call (mem:QI (match_dup 0))\n-\t      (match_operand 3)))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n-  [(set (match_dup 2)\n-\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t      (match_dup 3)))])\n+  \"!TARGET_X32 && SIBLING_CALL_P (peep2_next_insn (1))\n+   && peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (call (mem:QI (match_dup 1))\n+\t\t\t (match_dup 3)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+  [(set (match_operand:W 0 \"register_operand\")\n+\t(match_operand:W 1 \"memory_operand\"))\n    (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (set (match_operand 2)\n \t(call (mem:QI (match_dup 0))\n \t      (match_operand 3)))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\"\n+  \"!TARGET_X32 && SIBLING_CALL_P (peep2_next_insn (2))\n+   && peep2_reg_dead_p (3, operands[0])\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n-   (set (match_dup 2)\n-\t(call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t      (match_dup 3)))])\n+   (parallel [(set (match_dup 2)\n+\t\t   (call (mem:QI (match_dup 1))\n+\t\t\t (match_dup 3)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_insn \"*call_value_rex64_ms_sysv\"\n   [(match_parallel 3 \"call_rex64_ms_sysv_operation\"\n@@ -11616,55 +11591,57 @@\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n-(define_insn \"*sibcall_value_pop_intern\"\n+(define_insn \"*sibcall_value_pop_memory\"\n   [(set (match_operand 0)\n-        (call (unspec [(mem:QI (match_operand:SI 1 \"memory_nox32_operand\"))]\n-\t       UNSPEC_PEEPSIB)\n-\t  (match_operand 2)))\n+ \t(call (mem:QI (match_operand:SI 1 \"memory_operand\" \"m\"))\n+\t      (match_operand 2)))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))\n+   (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n   \"!TARGET_64BIT\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+\t(match_operand:SI 1 \"memory_operand\"))\n    (parallel [(set (match_operand 2)\n-\t      (call (mem:QI (match_dup 0))\n-\t\t    (match_operand 3)))\n-\t    (set (reg:SI SP_REG)\n-\t\t(plus:SI (reg:SI SP_REG)\n-\t\t\t  (match_operand:SI 4 \"immediate_operand\")))]\n-   )]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+\t\t   (call (mem:QI (match_dup 0))\n+\t\t\t (match_operand 3)))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\")))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\n+   && peep2_reg_dead_p (2, operands[0])\"\n   [(parallel [(set (match_dup 2)\n-\t      (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t\t    (match_dup 3)))\n+\t\t   (call (mem:QI (match_dup 1))\n+\t\t\t (match_dup 3)))\n \t      (set (reg:SI SP_REG)\n \t\t   (plus:SI (reg:SI SP_REG)\n-\t\t\t    (match_dup 4)))])])\n+\t\t\t    (match_dup 4)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"memory_nox32_operand\"))\n+\t(match_operand:SI 1 \"memory_operand\"))\n    (unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (parallel [(set (match_operand 2)\n-\t      (call (mem:QI (match_dup 0))\n-\t\t    (match_operand 3)))\n-\t    (set (reg:SI SP_REG)\n-\t\t(plus:SI (reg:SI SP_REG)\n-\t\t\t  (match_operand:SI 4 \"immediate_operand\")))]\n-   )]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\"\n+\t\t   (call (mem:QI (match_dup 0))\n+\t\t\t (match_operand 3)))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\")))])]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\n+   && peep2_reg_dead_p (3, operands[0])\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (parallel [(set (match_dup 2)\n-\t      (call (unspec [(mem:QI (match_dup 1))] UNSPEC_PEEPSIB)\n-\t\t    (match_dup 3)))\n+\t\t   (call (mem:QI (match_dup 1))\n+\t\t\t (match_dup 3)))\n \t      (set (reg:SI SP_REG)\n \t\t   (plus:SI (reg:SI SP_REG)\n-\t\t\t    (match_dup 4)))])])\n+\t\t\t    (match_dup 4)))\n+\t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n ;; Call subroutine returning any type.\n "}, {"sha": "62970bea8c44a89f7bd1e4841c2013c68b5cac2f", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=9fdb837f67dfa03da55cc5a9e51fa492c2a72f3b", "patch": "@@ -71,11 +71,10 @@\n   return ANY_QI_REG_P (op);\n })\n \n+;; Return true if OP is a memory operands that can be used in sibcalls.\n (define_predicate \"sibcall_memory_operand\"\n-  (match_operand 0 \"memory_operand\")\n-{\n-  return CONSTANT_P (XEXP (op, 0));\n-})\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"CONSTANT_P (XEXP (op, 0))\")))\n \n ;; Match an SI or HImode register for a zero_extract.\n (define_special_predicate \"ext_register_operand\"\n@@ -587,11 +586,6 @@\n   (ior (match_operand 0 \"register_no_elim_operand\")\n        (match_operand 0 \"immediate_operand\")))\n \n-;; Test for a valid memory operand.\n-(define_predicate \"memory_nox32_operand\"\n-  (and (not (match_test \"TARGET_X32\"))\n-       (match_operand 0 \"memory_operand\")))\n-\n ;; Test for a valid operand for indirect branch.\n (define_predicate \"indirect_branch_operand\"\n   (ior (match_operand 0 \"register_operand\")"}]}