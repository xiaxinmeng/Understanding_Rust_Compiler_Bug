{"sha": "83c25f27c442ce567829491fc1b4703f51b9bea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjMjVmMjdjNDQyY2U1Njc4Mjk0OTFmYzFiNDcwM2Y1MWI5YmVhNg==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-06-29T09:52:42Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-07-01T03:30:02Z"}, "message": "RISC-V: Preserve arch version info during normalizing arch string\n\n- Arch version should preserved if user explicitly specified the version.\n  e.g.\n    After normalize, -march=rv32if3d should be -march=rv32i_f3p0d\n    instead of-march=rv32ifd.\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.c (riscv_subset_t): New field\n\tadded.\n\t(riscv_subset_list::parsing_subset_version): Add parameter for\n\tindicate explicitly version, and handle explicitly version.\n\t(riscv_subset_list::handle_implied_ext): Ditto.\n\t(riscv_subset_list::add): Ditto.\n\t(riscv_subset_t::riscv_subset_t): Init new field.\n\t(riscv_subset_list::to_string): Always output version info if version\n\texplicitly specified.\n\t(riscv_subset_list::parsing_subset_version): Handle explicitly\n\tarch version.\n\t(riscv_subset_list::parse_std_ext): Ditto.\n\t(riscv_subset_list::parse_multiletter_ext): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/attribute-13.c: New.", "tree": {"sha": "7ace8528c181b393ffb4e9d8650af938e25bb804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ace8528c181b393ffb4e9d8650af938e25bb804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83c25f27c442ce567829491fc1b4703f51b9bea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c25f27c442ce567829491fc1b4703f51b9bea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c25f27c442ce567829491fc1b4703f51b9bea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c25f27c442ce567829491fc1b4703f51b9bea6/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cc9b454d7ce04b8209cd22d661da7f9327ae80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cc9b454d7ce04b8209cd22d661da7f9327ae80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2cc9b454d7ce04b8209cd22d661da7f9327ae80"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "82c5154b61183499afc43535845ef0d9a8efb71f", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c25f27c442ce567829491fc1b4703f51b9bea6/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c25f27c442ce567829491fc1b4703f51b9bea6/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=83c25f27c442ce567829491fc1b4703f51b9bea6", "patch": "@@ -42,6 +42,8 @@ struct riscv_subset_t\n   int major_version;\n   int minor_version;\n   struct riscv_subset_t *next;\n+\n+  bool explicit_version_p;\n };\n \n /* Type for implied ISA info.  */\n@@ -80,19 +82,19 @@ class riscv_subset_list\n   riscv_subset_list (const char *, location_t);\n \n   const char *parsing_subset_version (const char *, unsigned *, unsigned *,\n-\t\t\t\t      unsigned, unsigned, bool);\n+\t\t\t\t      unsigned, unsigned, bool, bool *);\n \n   const char *parse_std_ext (const char *);\n \n   const char *parse_multiletter_ext (const char *, const char *,\n \t\t\t\t     const char *);\n \n-  void handle_implied_ext (const char *, int, int);\n+  void handle_implied_ext (const char *, int, int, bool);\n \n public:\n   ~riscv_subset_list ();\n \n-  void add (const char *, int, int);\n+  void add (const char *, int, int, bool);\n \n   riscv_subset_t *lookup (const char *,\n \t\t\t  int major_version = RISCV_DONT_CARE_VERSION,\n@@ -111,7 +113,8 @@ static const char *riscv_supported_std_ext (void);\n static riscv_subset_list *current_subset_list = NULL;\n \n riscv_subset_t::riscv_subset_t ()\n-  : name (), major_version (0), minor_version (0), next (NULL)\n+  : name (), major_version (0), minor_version (0), next (NULL),\n+    explicit_version_p (false)\n {\n }\n \n@@ -138,7 +141,7 @@ riscv_subset_list::~riscv_subset_list ()\n \n void\n riscv_subset_list::add (const char *subset, int major_version,\n-\t\t\tint minor_version)\n+\t\t\tint minor_version, bool explicit_version_p)\n {\n   riscv_subset_t *s = new riscv_subset_t ();\n \n@@ -148,6 +151,7 @@ riscv_subset_list::add (const char *subset, int major_version,\n   s->name = subset;\n   s->major_version = major_version;\n   s->minor_version = minor_version;\n+  s->explicit_version_p = explicit_version_p;\n   s->next = NULL;\n \n   if (m_tail != NULL)\n@@ -173,13 +177,15 @@ riscv_subset_list::to_string (bool version_p) const\n       /* For !version_p, we only separate extension with underline for\n \t multi-letter extension.  */\n       if (!first &&\n-\t  (version_p || subset->name.length() > 1))\n+\t  (version_p\n+\t   || subset->explicit_version_p\n+\t   || subset->name.length() > 1))\n \toss << '_';\n       first = false;\n \n       oss << subset->name;\n \n-      if (version_p)\n+      if (version_p || subset->explicit_version_p)\n \toss  << subset->major_version\n \t     << 'p'\n \t     << subset->minor_version;\n@@ -240,21 +246,24 @@ riscv_supported_std_ext (void)\n      `major_version` using default_major_version.\n      `default_major_version`: Default major version.\n      `default_minor_version`: Default minor version.\n-     `std_ext_p`: True if parsing std extension.  */\n+     `std_ext_p`: True if parsing std extension.\n+     `explicit_version_p`: True if this subset is not using default version.  */\n \n const char *\n riscv_subset_list::parsing_subset_version (const char *p,\n \t\t\t\t\t   unsigned *major_version,\n \t\t\t\t\t   unsigned *minor_version,\n \t\t\t\t\t   unsigned default_major_version,\n \t\t\t\t\t   unsigned default_minor_version,\n-\t\t\t\t\t   bool std_ext_p)\n+\t\t\t\t\t   bool std_ext_p,\n+\t\t\t\t\t   bool *explicit_version_p)\n {\n   bool major_p = true;\n   unsigned version = 0;\n   unsigned major = 0;\n   unsigned minor = 0;\n   char np;\n+  *explicit_version_p = false;\n \n   for (; *p; ++p)\n     {\n@@ -269,6 +278,7 @@ riscv_subset_list::parsing_subset_version (const char *p,\n \t\t{\n \t\t  *major_version = version;\n \t\t  *minor_version = 0;\n+\t\t  *explicit_version_p = true;\n \t\t  return p;\n \t\t}\n \t      else\n@@ -302,6 +312,7 @@ riscv_subset_list::parsing_subset_version (const char *p,\n     }\n   else\n     {\n+      *explicit_version_p = true;\n       *major_version = major;\n       *minor_version = minor;\n     }\n@@ -325,6 +336,7 @@ riscv_subset_list::parse_std_ext (const char *p)\n   unsigned major_version = 0;\n   unsigned minor_version = 0;\n   char std_ext = '\\0';\n+  bool explicit_version_p = false;\n \n   /* First letter must start with i, e or g.  */\n   switch (*p)\n@@ -334,18 +346,20 @@ riscv_subset_list::parse_std_ext (const char *p)\n       p = parsing_subset_version (p, &major_version, &minor_version,\n \t\t\t\t  /* default_major_version= */ 2,\n \t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true);\n-      add (\"i\", major_version, minor_version);\n+\t\t\t\t  /* std_ext_p= */ true,\n+\t\t\t\t  &explicit_version_p);\n+      add (\"i\", major_version, minor_version, explicit_version_p);\n       break;\n \n     case 'e':\n       p++;\n       p = parsing_subset_version (p, &major_version, &minor_version,\n \t\t\t\t  /* default_major_version= */ 1,\n \t\t\t\t  /* default_minor_version= */ 9,\n-\t\t\t\t  /* std_ext_p= */ true);\n+\t\t\t\t  /* std_ext_p= */ true,\n+\t\t\t\t  &explicit_version_p);\n \n-      add (\"e\", major_version, minor_version);\n+      add (\"e\", major_version, minor_version, explicit_version_p);\n \n       if (m_xlen > 32)\n \t{\n@@ -360,13 +374,14 @@ riscv_subset_list::parse_std_ext (const char *p)\n       p = parsing_subset_version (p, &major_version, &minor_version,\n \t\t\t\t  /* default_major_version= */ 2,\n \t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true);\n-      add (\"i\", major_version, minor_version);\n+\t\t\t\t  /* std_ext_p= */ true,\n+\t\t\t\t  &explicit_version_p);\n+      add (\"i\", major_version, minor_version, explicit_version_p);\n \n       for (; *std_exts != 'q'; std_exts++)\n \t{\n \t  const char subset[] = {*std_exts, '\\0'};\n-\t  add (subset, major_version, minor_version);\n+\t  add (subset, major_version, minor_version, explicit_version_p);\n \t}\n       break;\n \n@@ -413,24 +428,28 @@ riscv_subset_list::parse_std_ext (const char *p)\n       p = parsing_subset_version (p, &major_version, &minor_version,\n \t\t\t\t  /* default_major_version= */ 2,\n \t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ true);\n+\t\t\t\t  /* std_ext_p= */ true,\n+\t\t\t\t  &explicit_version_p);\n \n       subset[0] = std_ext;\n \n-      handle_implied_ext (subset, major_version, minor_version);\n+      handle_implied_ext (subset, major_version,\n+\t\t\t  minor_version, explicit_version_p);\n \n-      add (subset, major_version, minor_version);\n+      add (subset, major_version, minor_version, explicit_version_p);\n     }\n   return p;\n }\n \n \n /* Check any implied extensions for EXT with version\n-   MAJOR_VERSION.MINOR_VERSION.  */\n+   MAJOR_VERSION.MINOR_VERSION, EXPLICIT_VERSION_P indicate the version is\n+   explicitly given by user or not.  */\n void\n riscv_subset_list::handle_implied_ext (const char *ext,\n \t\t\t\t       int major_version,\n-\t\t\t\t       int minor_version)\n+\t\t\t\t       int minor_version,\n+\t\t\t\t       bool explicit_version_p)\n {\n   riscv_implied_info_t *implied_info;\n   for (implied_info = &riscv_implied_info[0];\n@@ -445,7 +464,8 @@ riscv_subset_list::handle_implied_ext (const char *ext,\n \tcontinue;\n \n       /* TODO: Implied extension might use different version.  */\n-      add (implied_info->implied_ext, major_version, minor_version);\n+      add (implied_info->implied_ext, major_version, minor_version,\n+\t   explicit_version_p);\n     }\n }\n \n@@ -482,6 +502,7 @@ riscv_subset_list::parse_multiletter_ext (const char *p,\n       char *subset = xstrdup (p);\n       char *q = subset;\n       const char *end_of_version;\n+      bool explicit_version_p = false;\n \n       while (*++q != '\\0' && *q != '_' && !ISDIGIT (*q))\n \t;\n@@ -490,11 +511,12 @@ riscv_subset_list::parse_multiletter_ext (const char *p,\n \t= parsing_subset_version (q, &major_version, &minor_version,\n \t\t\t\t  /* default_major_version= */ 2,\n \t\t\t\t  /* default_minor_version= */ 0,\n-\t\t\t\t  /* std_ext_p= */ FALSE);\n+\t\t\t\t  /* std_ext_p= */ FALSE,\n+\t\t\t\t  &explicit_version_p);\n \n       *q = '\\0';\n \n-      add (subset, major_version, minor_version);\n+      add (subset, major_version, minor_version, explicit_version_p);\n       free (subset);\n       p += end_of_version - subset;\n "}, {"sha": "1e8600132935d57df6718e23ecddcc01df416577", "filename": "gcc/testsuite/gcc.target/riscv/attribute-13.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c25f27c442ce567829491fc1b4703f51b9bea6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c25f27c442ce567829491fc1b4703f51b9bea6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fattribute-13.c?ref=83c25f27c442ce567829491fc1b4703f51b9bea6", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mriscv-attribute -march=rv32if3d -mabi=ilp32\" } */\n+int foo()\n+{\n+}\n+/* { dg-final { scan-assembler \".attribute arch, \\\"rv32i2p0_f3p0_d2p0\\\"\" } } */"}]}