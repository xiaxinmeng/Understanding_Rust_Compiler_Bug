{"sha": "eb2c6124c46d0b3d58630c80af007ed092adc1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyYzYxMjRjNDZkMGIzZDU4NjMwYzgwYWYwMDdlZDA5MmFkYzFlYQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T12:16:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T13:19:36Z"}, "message": "Improve error messages of unexpected arguments\n\nWhen we get GenericBindings such as ::<A=...> this is not allowed\nint this context. We can also improve the unexpected number of argument\nerrors to print the number of expected vs received arguments.", "tree": {"sha": "2abecea3993a36362857f6e450a4781232a5dfca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abecea3993a36362857f6e450a4781232a5dfca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2c6124c46d0b3d58630c80af007ed092adc1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c6124c46d0b3d58630c80af007ed092adc1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2c6124c46d0b3d58630c80af007ed092adc1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c6124c46d0b3d58630c80af007ed092adc1ea/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f189f5bbab73b5d04faee4f4d2198f023c9e1522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f189f5bbab73b5d04faee4f4d2198f023c9e1522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f189f5bbab73b5d04faee4f4d2198f023c9e1522"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "c8f5f19862b6ea817f556e88fcbc2d8bcae792bd", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=eb2c6124c46d0b3d58630c80af007ed092adc1ea", "patch": "@@ -211,16 +211,32 @@ SubstitutionParamMapping::override_context ()\n SubstitutionArgumentMappings\n SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n {\n-  if (args.get_type_args ().size () != substitutions.size ())\n+  if (args.get_binding_args ().size () > 0)\n     {\n       rust_error_at (args.get_locus (),\n-\t\t     \"Invalid number of generic arguments to generic type\");\n+\t\t     \"associated type bindings are not allowed here\");\n       return SubstitutionArgumentMappings::error ();\n     }\n \n-  std::vector<SubstitutionArg> mappings;\n+  if (args.get_type_args ().size () > substitutions.size ())\n+    {\n+      rust_error_at (\n+\targs.get_locus (),\n+\t\"generic item takes at most %lu type arguments but %lu were supplied\",\n+\tsubstitutions.size (), args.get_type_args ().size ());\n+      return SubstitutionArgumentMappings::error ();\n+    }\n \n-  // FIXME does not support binding yet\n+  if (args.get_type_args ().size () < substitutions.size ())\n+    {\n+      rust_error_at (\n+\targs.get_locus (),\n+\t\"generic item takes at least %lu type arguments but %lu were supplied\",\n+\tsubstitutions.size (), args.get_type_args ().size ());\n+      return SubstitutionArgumentMappings::error ();\n+    }\n+\n+  std::vector<SubstitutionArg> mappings;\n   for (auto &arg : args.get_type_args ())\n     {\n       BaseType *resolved = Resolver::TypeCheckType::Resolve (arg.get ());"}, {"sha": "4b1f704aecf9fdf9a1366dbc7aaebc791c2d0146", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs?ref=eb2c6124c46d0b3d58630c80af007ed092adc1ea", "patch": "@@ -2,5 +2,5 @@ struct Foo<A>(A);\n \n fn main() {\n     let a: Foo = Foo::<i32>(123);\n-    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "dc70f767223c1b2b8c30616195eef34ebaca9ddd", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs?ref=eb2c6124c46d0b3d58630c80af007ed092adc1ea", "patch": "@@ -1,7 +1,7 @@\n struct Foo<A>(A);\n \n impl Foo {\n-    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n     fn test() -> i32 {\n         123\n     }"}, {"sha": "a831836614f6ae65d1416f4819f14da632648a05", "filename": "gcc/testsuite/rust.test/xfail_compile/generics4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c6124c46d0b3d58630c80af007ed092adc1ea/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs?ref=eb2c6124c46d0b3d58630c80af007ed092adc1ea", "patch": "@@ -3,7 +3,7 @@ struct GenericStruct<T>(T, usize);\n \n fn main() {\n     let a2;\n-    a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"Invalid number of generic arguments to generic type\" }\n+    a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n \n     let b2: i32 = a2.0;\n     let c2: usize = a2.1;"}]}