{"sha": "1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "node_id": "C_kwDOANBUbNoAKDFhMGJjZTk4ZGNmODRkZDBhN2IzYWM2N2I1MWFjNjg3NThjYzdhZDA", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-18T11:22:11Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-18T11:23:45Z"}, "message": "middle-end: Fix FMA detection when inspecting gimple which have no LHS.\n\nconvert_mult_to_fma assumes that all gimple_assigns have a LHS set.  This\nassumption is however not true when an IFN is kept around just for the\nside-effects.  In those situations you have just the IFN and lhs will be null.\n\nSince there's no LHS, there also can't be any ADD and such it can't be an FMA\nso it's correct to just return early if no LHS.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103253\n\t* tree-ssa-math-opts.c (convert_mult_to_fma): Check for LHS.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103253\n\t* gcc.dg/vect/pr103253.c: New test.", "tree": {"sha": "7e5a8527c48a7d92533f5485b0b852bb35592e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e5a8527c48a7d92533f5485b0b852bb35592e27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb7c51024ccad9df293e6caf134d78b3d00cf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7c51024ccad9df293e6caf134d78b3d00cf89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb7c51024ccad9df293e6caf134d78b3d00cf89"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "abe3f09f3818d79a53f2aa962c6b6c06855d618e", "filename": "gcc/testsuite/gcc.dg/vect/pr103253.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103253.c?ref=1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fopenmp } */\n+/* { dg-additional-options \"-O2 -fexceptions -fopenmp -fno-delete-dead-exceptions -fno-trapping-math\" } */\n+\n+double\n+do_work (double do_work_pri)\n+{\n+  int i;\n+\n+#pragma omp simd\n+  for (i = 0; i < 17; ++i)\n+    do_work_pri = (!i ? 0.5 : i) * 2.0;\n+\n+  return do_work_pri;\n+}\n+"}, {"sha": "cc8496c3c325f3cc303a90b9b9cac383e5a7942d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0", "patch": "@@ -3224,6 +3224,10 @@ convert_mult_to_fma (gimple *mul_stmt, tree op1, tree op2,\n \t\t     fma_deferring_state *state, tree mul_cond = NULL_TREE)\n {\n   tree mul_result = gimple_get_lhs (mul_stmt);\n+  /* If there isn't a LHS then this can't be an FMA.  There can be no LHS\n+     if the statement was left just for the side-effects.  */\n+  if (!mul_result)\n+    return false;\n   tree type = TREE_TYPE (mul_result);\n   gimple *use_stmt, *neguse_stmt;\n   use_operand_p use_p;"}]}