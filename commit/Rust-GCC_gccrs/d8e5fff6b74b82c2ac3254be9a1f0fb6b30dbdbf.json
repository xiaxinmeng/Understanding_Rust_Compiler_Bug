{"sha": "d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "node_id": "C_kwDOANBUbNoAKGQ4ZTVmZmY2Yjc0YjgyYzJhYzMyNTRiZTlhMWYwZmI2YjMwZGJkYmY", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-03-10T21:16:00Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-03-10T21:16:49Z"}, "message": "[PR103074] LRA: Check new conflicts when splitting hard reg live range.\n\nSplitting hard register live range can create (artificial)\nconflict of the hard register with another pseudo because of simplified\nconflict calculation in LRA.  We should check such conflict on the next\nassignment sub-pass and spill and reassign the pseudo if necessary.\nThe patch implements this.\n\ngcc/ChangeLog:\n\n\tPR target/103074\n\t* lra-constraints.cc (split_reg): Set up\n\tcheck_and_force_assignment_correctness_p when splitting hard\n\tregister live range.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103074\n\t* gcc.target/i386/pr103074.c: New.", "tree": {"sha": "bc4d5745070d5f87cdc29d2a664d6613caf204e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4d5745070d5f87cdc29d2a664d6613caf204e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5417a0ba7e26bec2abf05cad6c6ef840a9be41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5417a0ba7e26bec2abf05cad6c6ef840a9be41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5417a0ba7e26bec2abf05cad6c6ef840a9be41c"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "d92ab76908c8e07219ae9efd55eafbe76430e3f7", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "patch": "@@ -5994,12 +5994,17 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n \t\t\t before_p ? NULL : save,\n \t\t\t call_save_p\n \t\t\t ?  \"Add save<-reg\" : \"Add split<-reg\");\n-  if (nregs > 1)\n+  if (nregs > 1 || original_regno < FIRST_PSEUDO_REGISTER)\n     /* If we are trying to split multi-register.  We should check\n        conflicts on the next assignment sub-pass.  IRA can allocate on\n        sub-register levels, LRA do this on pseudos level right now and\n        this discrepancy may create allocation conflicts after\n-       splitting.  */\n+       splitting.\n+\n+       If we are trying to split hard register we should also check conflicts\n+       as such splitting can create artificial conflict of the hard register\n+       with another pseudo because of simplified conflict calculation in\n+       LRA.  */\n     check_and_force_assignment_correctness_p = true;\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file,"}, {"sha": "276ad82a1de1e840711d5062bc6192f77a71aa60", "filename": "gcc/testsuite/gcc.target/i386/pr103074.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103074.c?ref=d8e5fff6b74b82c2ac3254be9a1f0fb6b30dbdbf", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=bonnell -Os -fPIC -fschedule-insns -w\" } */\n+\n+void\n+serialize_collection (char *ptr, int a, int need_owner)\n+{\n+  if (need_owner)\n+    __builtin_sprintf(ptr, \"%d:%d\", 0, a);\n+  else\n+    {\n+      static char buff[32];\n+\n+      __builtin_sprintf(buff, \"%d:%d\", a >> 32, a);\n+      __builtin_sprintf(ptr, \"%d:%d:\\\"%s\\\"\", 0, 0, buff);\n+    }\n+}"}]}