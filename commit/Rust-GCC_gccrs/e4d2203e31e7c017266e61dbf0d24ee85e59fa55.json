{"sha": "e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkMjIwM2UzMWU3YzAxNzI2NmU2MWRiZjBkMjRlZTg1ZTU5ZmE1NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-09T01:39:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2020-01-09T01:39:45Z"}, "message": "vec.h: add auto_delete_vec\n\nThis patch adds a class auto_delete_vec<T>, a subclass of auto_vec <T *>\nthat deletes all of its elements on destruction; it's used in many\nplaces in the analyzer patch kit.\n\nThis is a crude way for a vec to \"own\" the objects it points to\nand clean up automatically (essentially a workaround for not being able\nto use unique_ptr, due to C++98).\n\ngcc/ChangeLog:\n\t* vec.c (class selftest::count_dtor): New class.\n\t(selftest::test_auto_delete_vec): New test.\n\t(selftest::vec_c_tests): Call it.\n\t* vec.h (class auto_delete_vec): New class template.\n\t(auto_delete_vec<T>::~auto_delete_vec): New dtor.\n\nFrom-SVN: r280027", "tree": {"sha": "280fe13e89a65db7d5867eceacee2ae31f26afda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280fe13e89a65db7d5867eceacee2ae31f26afda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3de347f3296995eb2a648d6303ab66bf689e104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3de347f3296995eb2a648d6303ab66bf689e104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3de347f3296995eb2a648d6303ab66bf689e104"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "dae2741ef20092be1698f4eb306c099417cfadd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "patch": "@@ -1,3 +1,11 @@\n+2020-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* vec.c (class selftest::count_dtor): New class.\n+\t(selftest::test_auto_delete_vec): New test.\n+\t(selftest::vec_c_tests): Call it.\n+\t* vec.h (class auto_delete_vec): New class template.\n+\t(auto_delete_vec<T>::~auto_delete_vec): New dtor.\n+\n 2020-01-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sbitmap.h (auto_sbitmap): Add operator const_sbitmap."}, {"sha": "1c4b958871b474da0a98b8695d9fb3f134fa2426", "filename": "gcc/vec.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "patch": "@@ -516,6 +516,32 @@ test_reverse ()\n   }\n }\n \n+/* A test class that increments a counter every time its dtor is called.  */\n+\n+class count_dtor\n+{\n+ public:\n+  count_dtor (int *counter) : m_counter (counter) {}\n+  ~count_dtor () { (*m_counter)++; }\n+\n+ private:\n+  int *m_counter;\n+};\n+\n+/* Verify that auto_delete_vec deletes the elements within it.  */\n+\n+static void\n+test_auto_delete_vec ()\n+{\n+  int dtor_count = 0;\n+  {\n+    auto_delete_vec <count_dtor> v;\n+    v.safe_push (new count_dtor (&dtor_count));\n+    v.safe_push (new count_dtor (&dtor_count));\n+  }\n+  ASSERT_EQ (dtor_count, 2);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -533,6 +559,7 @@ vec_c_tests ()\n   test_block_remove ();\n   test_qsort ();\n   test_reverse ();\n+  test_auto_delete_vec ();\n }\n \n } // namespace selftest"}, {"sha": "bd7c7351dcd98c0809956de5511a52d318f74723", "filename": "gcc/vec.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d2203e31e7c017266e61dbf0d24ee85e59fa55/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=e4d2203e31e7c017266e61dbf0d24ee85e59fa55", "patch": "@@ -1547,6 +1547,31 @@ class auto_string_vec : public auto_vec <char *>\n   ~auto_string_vec ();\n };\n \n+/* A subclass of auto_vec <T *> that deletes all of its elements on\n+   destruction.\n+\n+   This is a crude way for a vec to \"own\" the objects it points to\n+   and clean up automatically.\n+\n+   For example, no attempt is made to delete elements when an item\n+   within the vec is overwritten.\n+\n+   We can't rely on gnu::unique_ptr within a container,\n+   since we can't rely on move semantics in C++98.  */\n+\n+template <typename T>\n+class auto_delete_vec : public auto_vec <T *>\n+{\n+ public:\n+  auto_delete_vec () {}\n+  auto_delete_vec (size_t s) : auto_vec <T *> (s) {}\n+\n+  ~auto_delete_vec ();\n+\n+private:\n+  DISABLE_COPY_AND_ASSIGN(auto_delete_vec<T>);\n+};\n+\n /* Conditionally allocate heap memory for VEC and its internal vector.  */\n \n template<typename T>\n@@ -1651,6 +1676,19 @@ auto_string_vec::~auto_string_vec ()\n     free (str);\n }\n \n+/* auto_delete_vec's dtor, deleting all contained items, automatically\n+   chaining up to ~auto_vec <T*>, which frees the internal buffer.  */\n+\n+template <typename T>\n+inline\n+auto_delete_vec<T>::~auto_delete_vec ()\n+{\n+  int i;\n+  T *item;\n+  FOR_EACH_VEC_ELT (*this, i, item)\n+    delete item;\n+}\n+\n \n /* Return a copy of this vector.  */\n "}]}