{"sha": "cb13c28858b9c5c243241121206578b5f9f2827c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxM2MyODg1OGI5YzVjMjQzMjQxMTIxMjA2NTc4YjVmOWYyODI3Yw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-06T22:28:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-06T22:28:31Z"}, "message": "re PR fortran/31201 (Too large unit number generates wrong code)\n\n2007-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/31201\n\t* runtime/error.c (runtime_error_at): New function.\n\t(generate_error): Export this function.\n\t* gfortran.map: Add _gfortran_generate_error and\n\t_gfortran_runtime_error_at.\n\t* libgfortran.h: Add comment to reference error codes in front end.\n\t(library_start): Locate prototype with library_end macro and add\n\ta new comment.  Add prototype for runtime_error_at. Export prototype for\n\tgenerate_error.\n\t* io/lock.c (library_start): Fix check for error condition.\n\t* io/transfer.c (data_transfer_init): Add library check.\n\nFrom-SVN: r124479", "tree": {"sha": "da33f84dfec782004c14205e386d8a57f79aecc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da33f84dfec782004c14205e386d8a57f79aecc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb13c28858b9c5c243241121206578b5f9f2827c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb13c28858b9c5c243241121206578b5f9f2827c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb13c28858b9c5c243241121206578b5f9f2827c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb13c28858b9c5c243241121206578b5f9f2827c/comments", "author": null, "committer": null, "parents": [{"sha": "982533a5b24488660e53ae55cfb4e036d84d31d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982533a5b24488660e53ae55cfb4e036d84d31d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982533a5b24488660e53ae55cfb4e036d84d31d8"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "24cf9297d8a1b8c8ba58d6724e93859de5821da6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -1,3 +1,17 @@\n+2007-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/31201\n+\t* runtime/error.c (runtime_error_at): New function.\n+\t(generate_error): Export this function.\n+\t* gfortran.map: Add _gfortran_generate_error and\n+\t_gfortran_runtime_error_at.\n+\t* libgfortran.h: Add comment to reference error codes in front end.\n+\t(library_start): Locate prototype with library_end macro and add\n+\ta new comment.  Add prototype for runtime_error_at. Export prototype for\n+\tgenerate_error.\n+\t* io/lock.c (library_start): Fix check for error condition.\n+\t* io/transfer.c (data_transfer_init): Add library check.\n+\n 2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/22359"}, {"sha": "c1ca7255bb1239b72b8c3b2d983a16dc50fa8dcb", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -138,6 +138,7 @@ GFORTRAN_1.0 {\n     _gfortran_ftell_i2_sub;\n     _gfortran_ftell_i4_sub;\n     _gfortran_ftell_i8_sub;\n+    _gfortran_generate_error;\n     _gfortran_gerror;\n     _gfortran_getarg_i4;\n     _gfortran_getarg_i8;\n@@ -582,6 +583,7 @@ GFORTRAN_1.0 {\n     _gfortran_rrspacing_r4;\n     _gfortran_rrspacing_r8;\n     _gfortran_runtime_error;\n+    _gfortran_runtime_error_at;\n     _gfortran_secnds;\n     _gfortran_second;\n     _gfortran_second_sub;"}, {"sha": "39bb67090d83ec61a22ec1ca97d5dd56a399ccda", "filename": "libgfortran/io/lock.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fio%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fio%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flock.c?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -38,8 +38,8 @@ Boston, MA 02110-1301, USA.  */\n void\n library_start (st_parameter_common *cmp)\n {\n-  if ((cmp->flags & IOPARM_HAS_IOSTAT) != 0)\n-    *cmp->iostat = ERROR_OK;\n+  if ((cmp->flags & IOPARM_LIBRETURN_ERROR) != 0)\n+    return;\n \n   cmp->flags &= ~IOPARM_LIBRETURN_MASK;\n }"}, {"sha": "9735aae7cce519e4457d66ce0df6709d2db47276", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -1708,6 +1708,9 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   dtp->u.p.ionml = ionml;\n   dtp->u.p.mode = read_flag ? READING : WRITING;\n \n+  if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n+    return;\n+\n   if ((cf & IOPARM_DT_HAS_SIZE) != 0)\n     dtp->u.p.size_used = 0;  /* Initialize the count.  */\n "}, {"sha": "bfbfbef634d836c0bee455f2345d6e0ac5778935", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -401,7 +401,9 @@ typedef struct\n }\n st_option;\n \n-/* Runtime errors.  The EOR and EOF errors are required to be negative.  */\n+/* Runtime errors.  The EOR and EOF errors are required to be negative.\n+   These codes must be kept sychronized with their equivalents in\n+   gcc/fortran/gfortran.h .  */\n \n typedef enum\n {\n@@ -534,17 +536,19 @@ st_parameter_common;\n #define IOPARM_OPEN_HAS_PAD             (1 << 16)\n #define IOPARM_OPEN_HAS_CONVERT         (1 << 17)\n \n-\n-/* main.c */\n-\n-extern void stupid_function_name_for_static_linking (void);\n-internal_proto(stupid_function_name_for_static_linking);\n+/* library start function and end macro.  These can be expanded if needed\n+   in the future.  cmp is st_parameter_common *cmp  */\n \n extern void library_start (st_parameter_common *);\n internal_proto(library_start);\n \n #define library_end()\n \n+/* main.c */\n+\n+extern void stupid_function_name_for_static_linking (void);\n+internal_proto(stupid_function_name_for_static_linking);\n+\n extern void set_args (int, char **);\n export_proto(set_args);\n \n@@ -587,6 +591,10 @@ internal_proto(show_locus);\n extern void runtime_error (const char *) __attribute__ ((noreturn));\n iexport_proto(runtime_error);\n \n+extern void runtime_error_at (const char *, const char *)\n+__attribute__ ((noreturn));\n+iexport_proto(runtime_error_at);\n+\n extern void internal_error (st_parameter_common *, const char *)\n   __attribute__ ((noreturn));\n internal_proto(internal_error);\n@@ -602,7 +610,7 @@ extern const char *translate_error (int);\n internal_proto(translate_error);\n \n extern void generate_error (st_parameter_common *, int, const char *);\n-internal_proto(generate_error);\n+iexport_proto(generate_error);\n \n extern try notify_std (st_parameter_common *, int, const char *);\n internal_proto(notify_std);"}, {"sha": "2bcc293091a5b2ddb7838674c0cfe1c186645ccc", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb13c28858b9c5c243241121206578b5f9f2827c/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=cb13c28858b9c5c243241121206578b5f9f2827c", "patch": "@@ -299,6 +299,19 @@ runtime_error (const char *message)\n }\n iexport(runtime_error);\n \n+/* void runtime_error_at()-- These are errors associated with a\n+ * run time error generated by the front end compiler.  */\n+\n+void\n+runtime_error_at (const char *where, const char *message)\n+{\n+  recursion_check ();\n+  st_printf (\"%s\\n\", where);\n+  st_printf (\"Fortran runtime error: %s\\n\", message);\n+  sys_exit (2);\n+}\n+iexport(runtime_error_at);\n+\n \n /* void internal_error()-- These are this-can't-happen errors\n  * that indicate something deeply wrong. */\n@@ -475,7 +488,7 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n   st_printf (\"Fortran runtime error: %s\\n\", message);\n   sys_exit (2);\n }\n-\n+iexport(generate_error);\n \n /* Whether, for a feature included in a given standard set (GFC_STD_*),\n    we should issue an error or a warning, or be quiet.  */"}]}