{"sha": "22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkZTRjM2RmY2MwZDY0NDNhMTMxZjNjMTNlMjQyNThlYWIzN2RkNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-10-12T16:43:56Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-10-12T16:43:56Z"}, "message": "arm.c (arm_print_operand): Use output_operand_lossage where possible rather than aborting.\n\n* arm.c (arm_print_operand): Use output_operand_lossage where possible\nrather than aborting.\n\nFrom-SVN: r88940", "tree": {"sha": "a987b5490749625a45148d30eb4ffb2abca8eb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a987b5490749625a45148d30eb4ffb2abca8eb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22de4c3dfcc0d6443a131f3c13e24258eab37dd5/comments", "author": null, "committer": null, "parents": [{"sha": "5b94d9dd86ad94777503632b0732345836af0104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b94d9dd86ad94777503632b0732345836af0104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b94d9dd86ad94777503632b0732345836af0104"}], "stats": {"total": 100, "additions": 83, "deletions": 17}, "files": [{"sha": "d91d2606467b3212bc2e9550c6078960c1d7077a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22de4c3dfcc0d6443a131f3c13e24258eab37dd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22de4c3dfcc0d6443a131f3c13e24258eab37dd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "patch": "@@ -1,3 +1,8 @@\n+2004-10-12  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_print_operand): Use output_operand_lossage where possible\n+\trather than aborting.\n+\n 2004-10-12  Paul Brook  <paul@coudesourcery.com>\n \n \t* config.gcc: Add armv6{k,z,zk}"}, {"sha": "3fe1d28fed9e75409698041a7e5d1db2a4b5dbbf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22de4c3dfcc0d6443a131f3c13e24258eab37dd5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22de4c3dfcc0d6443a131f3c13e24258eab37dd5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=22de4c3dfcc0d6443a131f3c13e24258eab37dd5", "patch": "@@ -10287,8 +10287,17 @@ arm_print_operand (FILE *stream, rtx x, int code)\n     case '?':\n       if (arm_ccfsm_state == 3 || arm_ccfsm_state == 4)\n \t{\n-\t  if (TARGET_THUMB || current_insn_predicate != NULL)\n-\t    abort ();\n+\t  if (TARGET_THUMB)\n+\t    {\n+\t      output_operand_lossage (\"predicated Thumb instruction\");\n+\t      break;\n+\t    }\n+\t  if (current_insn_predicate != NULL)\n+\t    {\n+\t      output_operand_lossage\n+\t\t(\"predicated instruction in conditional sequence\");\n+\t      break;\n+\t    }\n \n \t  fputs (arm_condition_codes[arm_current_cc], stream);\n \t}\n@@ -10297,7 +10306,10 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t  enum arm_cond_code code;\n \n \t  if (TARGET_THUMB)\n-\t    abort ();\n+\t    {\n+\t      output_operand_lossage (\"predicated Thumb instruction\");\n+\t      break;\n+\t    }\n \n \t  code = get_arm_condition_code (current_insn_predicate);\n \t  fputs (arm_condition_codes[code], stream);\n@@ -10389,20 +10401,32 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t of the memory location is actually held in one of the registers\n \t being overwritten by the load.  */\n     case 'Q':\n-      if (REGNO (x) > LAST_ARM_REGNUM)\n-\tabort ();\n+      if (GET_CODE (x) != REG || REGNO (x) > LAST_ARM_REGNUM)\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       asm_fprintf (stream, \"%r\", REGNO (x) + (WORDS_BIG_ENDIAN ? 1 : 0));\n       return;\n \n     case 'R':\n-      if (REGNO (x) > LAST_ARM_REGNUM)\n-\tabort ();\n+      if (GET_CODE (x) != REG || REGNO (x) > LAST_ARM_REGNUM)\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       asm_fprintf (stream, \"%r\", REGNO (x) + (WORDS_BIG_ENDIAN ? 0 : 1));\n       return;\n \n     case 'H':\n-      if (REGNO (x) > LAST_ARM_REGNUM)\n-\tabort ();\n+      if (GET_CODE (x) != REG || REGNO (x) > LAST_ARM_REGNUM)\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       asm_fprintf (stream, \"%r\", REGNO (x) + 1);\n       return;\n \n@@ -10423,6 +10447,12 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       if (x == const_true_rtx)\n \treturn;\n \n+      if (!COMPARISON_P (x))\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       fputs (arm_condition_codes[get_arm_condition_code (x)],\n \t     stream);\n       return;\n@@ -10431,7 +10461,15 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       /* CONST_TRUE_RTX means not always -- i.e. never.  We shouldn't ever\n \t want to do that.  */\n       if (x == const_true_rtx)\n-\tabort ();\n+\t{\n+\t  output_operand_lossage (\"instruction never exectued\");\n+\t  return;\n+\t}\n+      if (!COMPARISON_P (x))\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n \n       fputs (arm_condition_codes[ARM_INVERSE_CONDITION_CODE\n \t\t\t\t (get_arm_condition_code (x))],\n@@ -10463,7 +10501,10 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \tint mode = GET_MODE (x);\n \n \tif (GET_CODE (x) != REG || REGNO_REG_CLASS (REGNO (x)) != CIRRUS_REGS)\n-\t  abort ();\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+\t  }\n \n \tfprintf (stream, \"mv%s%s\",\n \t\t mode == DFmode ? \"d\"\n@@ -10479,7 +10520,11 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t  || REGNO (x) < FIRST_IWMMXT_GR_REGNUM\n \t  || REGNO (x) > LAST_IWMMXT_GR_REGNUM)\n \t/* Bad value for wCG register number.  */\n-\tabort ();\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       else\n \tfprintf (stream, \"%d\", REGNO (x) - FIRST_IWMMXT_GR_REGNUM);\n       return;\n@@ -10490,7 +10535,11 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t  || INTVAL (x) < 0\n \t  || INTVAL (x) >= 16)\n \t/* Bad value for wC register number.  */\n-\tabort ();\n+\t{\n+\t  output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t  return;\n+\t}\n+\n       else\n \t{\n \t  static const char * wc_reg_names [16] =\n@@ -10512,23 +10561,35 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \tint num;\n \n \tif (mode != DImode && mode != DFmode)\n-\t  abort ();\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+\t  }\n \n \tif (GET_CODE (x) != REG\n \t    || !IS_VFP_REGNUM (REGNO (x)))\n-\t  abort ();\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+\t  }\n \n \tnum = REGNO(x) - FIRST_VFP_REGNUM;\n \tif (num & 1)\n-\t  abort ();\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+\t  }\n \n \tfprintf (stream, \"d%d\", num >> 1);\n       }\n       return;\n \n     default:\n       if (x == 0)\n-\tabort ();\n+\t{\n+\t  output_operand_lossage (\"missing operand\");\n+\t  return;\n+\t}\n \n       if (GET_CODE (x) == REG)\n \tasm_fprintf (stream, \"%r\", REGNO (x));"}]}