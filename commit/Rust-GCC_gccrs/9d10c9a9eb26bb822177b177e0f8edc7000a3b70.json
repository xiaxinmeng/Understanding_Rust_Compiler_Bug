{"sha": "9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQxMGM5YTllYjI2YmI4MjIxNzdiMTc3ZTBmOGVkYzcwMDBhM2I3MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-06T23:12:30Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-06T23:12:30Z"}, "message": "Makefile.in (c-ppoutput.o): Update.\n\n\t* Makefile.in (c-ppoutput.o): Update.\n\t* c-common.h (init_pp_output): New.\n\t(preprocess_file): Update.\n\t* c-lex.c (init_c_lex): Move mbchar initialization to cpplib.\n\tRegister builtins.\n\t* c-opts.c (c_common_init): Call init_pp_output if preprocessing.\n\tMake call to cpp_read_main_file common to whether preprocessing\n\tor not.  Don't register builtins.\n\t* c-ppoutput.c: Include c-pragma.h.\n\t(setup_callbacks): Rename init_pp_output.\n\t(preprocess_file): No longer setup callbacks or call\n\tcpp_read_main_file.\n\t* cpphash.h (_cpp_init_mbchar): New.\n\t* cppinit.c (init_library): Call _cpp_init_mbchar.\n\t* cpplex.c (_cpp_init_mbchar): New.\n\nFrom-SVN: r63913", "tree": {"sha": "67d3347376b5ce3e8f6b568c099d8391313de175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67d3347376b5ce3e8f6b568c099d8391313de175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1867128b29a772691b9d5909558cf8f478cb531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1867128b29a772691b9d5909558cf8f478cb531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1867128b29a772691b9d5909558cf8f478cb531"}], "stats": {"total": 156, "additions": 90, "deletions": 66}, "files": [{"sha": "33e127d1fd060f075d43b0490ab4a24086ea7fe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -1,3 +1,21 @@\n+2003-03-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in (c-ppoutput.o): Update.\n+\t* c-common.h (init_pp_output): New.\n+\t(preprocess_file): Update.\n+\t* c-lex.c (init_c_lex): Move mbchar initialization to cpplib.\n+\tRegister builtins.\n+\t* c-opts.c (c_common_init): Call init_pp_output if preprocessing.\n+\tMake call to cpp_read_main_file common to whether preprocessing\n+\tor not.  Don't register builtins.\n+\t* c-ppoutput.c: Include c-pragma.h.\n+\t(setup_callbacks): Rename init_pp_output.\n+\t(preprocess_file): No longer setup callbacks or call\n+\tcpp_read_main_file.\n+\t* cpphash.h (_cpp_init_mbchar): New.\n+\t* cppinit.c (init_library): Call _cpp_init_mbchar.\n+\t* cpplex.c (_cpp_init_mbchar): New.\n+\n 2003-03-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* emit-rtl.c (gen_lowpart): When requesting the low-part of a"}, {"sha": "86d4b65c8f81e32bb5370e5d0cc9be25d445bd3a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -1236,7 +1236,7 @@ c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-    c-common.h $(TREE_H) $(CPPLIB_H) cpphash.h $(TM_P_H)\n+    c-common.h $(TREE_H) $(CPPLIB_H) cpphash.h $(TM_P_H) c-pragma.h\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(RTL_H) insn-config.h integrate.h $(EXPR_H) $(C_TREE_H) \\\n     flags.h toplev.h tree-inline.h diagnostic.h integrate.h $(VARRAY_H) \\"}, {"sha": "5214ef765a8cf492fd7507c565e35e7f354701a2", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -1292,8 +1292,9 @@ extern void c_common_read_pch\t\t\tPARAMS ((cpp_reader *pfile,\n \t\t\t\t\t\t\t int fd,\n \t\t\t\t\t\t\t const char *orig));\n extern void c_common_write_pch\t\t\tPARAMS ((void));\n-extern void preprocess_file\t\t\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t\t const char *,\n-\t\t\t\t\t\t\t FILE *));\n+\n+/* In c-ppoutput.c  */\n+extern void init_pp_output\t\t\tPARAMS ((FILE *));\n+extern void preprocess_file\t\t\tPARAMS ((cpp_reader *));\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "9e97ad76b61675517fc4892139dbd829f392fe6a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -111,14 +111,9 @@ init_c_lex ()\n       toplevel->time = body_time;\n     }\n   \n-#ifdef MULTIBYTE_CHARS\n-  /* Change to the native locale for multibyte conversions.  */\n-  setlocale (LC_CTYPE, \"\");\n-  GET_ENVIRONMENT (literal_codeset, \"LANG\");\n-#endif\n-\n   cb = cpp_get_callbacks (parse_in);\n \n+  cb->register_builtins = cb_register_builtins;\n   cb->line_change = cb_line_change;\n   cb->ident = cb_ident;\n   cb->file_change = cb_file_change;"}, {"sha": "ebf22d7d972e4cfe0f9c3c31f1da85fb248e982c", "filename": "gcc/c-opts.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -1512,10 +1512,6 @@ c_common_init (filename)\n   cpp_opts->wchar_precision = TYPE_PRECISION (wchar_type_node);\n   cpp_opts->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n \n-  /* Register preprocessor built-ins before calls to\n-     cpp_main_file.  */\n-  cpp_get_callbacks (parse_in)->register_builtins = cb_register_builtins;\n-\n   if (flag_preprocess_only)\n     {\n       /* Open the output now.  We must do so even if flag_no_output is\n@@ -1527,23 +1523,31 @@ c_common_init (filename)\n \tout_stream = fopen (out_fname, \"w\");\n \n       if (out_stream == NULL)\n-\tfatal_io_error (\"opening output file %s\", out_fname);\n-      else\n-\t/* Preprocess the input file to out_stream.  */\n-\tpreprocess_file (parse_in, in_fname, out_stream);\n+\t{\n+\t  fatal_io_error (\"opening output file %s\", out_fname);\n+\t  return NULL;\n+\t}\n \n-      /* Exit quickly in toplev.c.  */\n-      return NULL;\n+      init_pp_output (out_stream);\n     }\n+  else\n+    {\n+      init_c_lex ();\n \n-  init_c_lex ();\n-\n-  /* Start it at 0.  */\n-  lineno = 0;\n+      /* Yuk.  WTF is this?  I do know ObjC relies on it somewhere.  */\n+      lineno = 0;\n+    }\n \n   /* NOTE: we use in_fname here, not the one supplied.  */\n   filename = cpp_read_main_file (parse_in, in_fname, ident_hash);\n \n+  if (flag_preprocess_only)\n+    {\n+      if (filename)\n+\tpreprocess_file (parse_in);\n+      return NULL;\n+    }\n+\n   /* Has to wait until now so that cpplib has its hash table.  */\n   init_pragma ();\n "}, {"sha": "14ae31bb0b6a0f14731500b2e85f4639af2a1b11", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -24,7 +24,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"tree.h\"\n-#include \"c-common.h\"\n+#include \"c-common.h\"\t\t/* For flags.  */\n+#include \"c-pragma.h\"\t\t/* For parse_in.  */\n \n /* Encapsulates state used to convert a stream of tokens into a text\n    file.  */\n@@ -38,8 +39,6 @@ static struct\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n } print;\n \n-static void setup_callbacks PARAMS ((cpp_reader *));\n-\n /* General output routines.  */\n static void scan_translation_unit PARAMS ((cpp_reader *));\n static void scan_translation_unit_trad PARAMS ((cpp_reader *));\n@@ -64,64 +63,49 @@ static void cb_def_pragma PARAMS ((cpp_reader *, unsigned int));\n \n /* Preprocess and output.  */\n void\n-preprocess_file (pfile, in_fname, out_stream)\n+preprocess_file (pfile)\n      cpp_reader *pfile;\n-     const char *in_fname;\n-     FILE *out_stream;\n {\n-  /* Initialize the print structure.  Setting print.line to -1 here is\n-     a trick to guarantee that the first token of the file will cause\n-     a linemarker to be output by maybe_print_line.  */\n-  print.line = (unsigned int) -1;\n-  print.printed = 0;\n-  print.prev = 0;\n-  print.map = 0;\n-  print.outf = out_stream;\n+  cpp_finish_options (pfile);\n \n-  setup_callbacks (pfile);\n-\n-  if (cpp_read_main_file (pfile, in_fname, NULL))\n+  /* A successful cpp_read_main_file guarantees that we can call\n+     cpp_scan_nooutput or cpp_get_token next.  */\n+  if (flag_no_output)\n     {\n-      cpp_finish_options (pfile);\n-\n-      /* A successful cpp_read_main_file guarantees that we can call\n-\t cpp_scan_nooutput or cpp_get_token next.  */\n-      if (flag_no_output)\n-\t{\n-\t  /* Scan -included buffers, then the main file.  */\n-\t  while (pfile->buffer->prev)\n-\t    cpp_scan_nooutput (pfile);\n-\t  cpp_scan_nooutput (pfile);\n-\t}\n-      else if (cpp_get_options (pfile)->traditional)\n-\tscan_translation_unit_trad (pfile);\n-      else\n-\tscan_translation_unit (pfile);\n-\n-      /* -dM command line option.  Should this be elsewhere?  */\n-      if (flag_dump_macros == 'M')\n-\tcpp_forall_identifiers (pfile, dump_macro, NULL);\n+      /* Scan -included buffers, then the main file.  */\n+      while (pfile->buffer->prev)\n+\tcpp_scan_nooutput (pfile);\n+      cpp_scan_nooutput (pfile);\n     }\n+  else if (cpp_get_options (pfile)->traditional)\n+    scan_translation_unit_trad (pfile);\n+  else\n+    scan_translation_unit (pfile);\n+\n+  /* -dM command line option.  Should this be elsewhere?  */\n+  if (flag_dump_macros == 'M')\n+    cpp_forall_identifiers (pfile, dump_macro, NULL);\n \n   /* Flush any pending output.  */\n   if (print.printed)\n     putc ('\\n', print.outf);\n }\n \n /* Set up the callbacks as appropriate.  */\n-static void\n-setup_callbacks (pfile)\n-     cpp_reader *pfile;\n+void\n+init_pp_output (out_stream)\n+     FILE *out_stream;\n {\n-  cpp_options *options = &pfile->opts;\n-  cpp_callbacks *cb = cpp_get_callbacks (pfile);\n+  cpp_callbacks *cb = cpp_get_callbacks (parse_in);\n+\n+  cb->register_builtins = cb_register_builtins;\n \n   if (!flag_no_output)\n     {\n       cb->line_change = cb_line_change;\n       /* Don't emit #pragma or #ident directives if we are processing\n \t assembly language; the assembler may choke on them.  */\n-      if (options->lang != CLK_ASM)\n+      if (cpp_get_options (parse_in)->lang != CLK_ASM)\n \t{\n \t  cb->ident      = cb_ident;\n \t  cb->def_pragma = cb_def_pragma;\n@@ -138,6 +122,15 @@ setup_callbacks (pfile)\n       cb->define = cb_define;\n       cb->undef  = cb_undef;\n     }\n+\n+  /* Initialize the print structure.  Setting print.line to -1 here is\n+     a trick to guarantee that the first token of the file will cause\n+     a linemarker to be output by maybe_print_line.  */\n+  print.line = (unsigned int) -1;\n+  print.printed = 0;\n+  print.prev = 0;\n+  print.map = 0;\n+  print.outf = out_stream;\n }\n \n /* Writes out the preprocessed file, handling spacing and paste"}, {"sha": "6fc6369f793c5af7ba5524caea3ddc06d774d2cc", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -517,6 +517,7 @@ extern cpp_token *_cpp_lex_direct\tPARAMS ((cpp_reader *));\n extern int _cpp_equiv_tokens\t\tPARAMS ((const cpp_token *,\n \t\t\t\t\t\t const cpp_token *));\n extern void _cpp_init_tokenrun\t\tPARAMS ((tokenrun *, unsigned int));\n+extern void _cpp_init_mbchar\t\tPARAMS ((void));\n \n /* In cppinit.c.  */\n extern void _cpp_maybe_push_include_file PARAMS ((cpp_reader *));"}, {"sha": "76b99b0079d90605231a4354dded9582b53a040d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -191,6 +191,8 @@ init_library ()\n \t we were compiled with a compiler that supports C99 designated\n \t initializers.  */\n       init_trigraph_map ();\n+\n+      _cpp_init_mbchar ();\n     }\n }\n "}, {"sha": "7a8af905a4ce4c35ca5a957bfb510a68e8232f77", "filename": "gcc/cpplex.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d10c9a9eb26bb822177b177e0f8edc7000a3b70/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=9d10c9a9eb26bb822177b177e0f8edc7000a3b70", "patch": "@@ -89,6 +89,16 @@ static tokenrun *next_tokenrun PARAMS ((tokenrun *));\n static unsigned int hex_digit_value PARAMS ((unsigned int));\n static _cpp_buff *new_buff PARAMS ((size_t));\n \n+/* Change to the native locale for multibyte conversions.  */\n+void\n+_cpp_init_mbchar ()\n+{\n+#ifdef MULTIBYTE_CHARS\n+  setlocale (LC_CTYPE, \"\");\n+  GET_ENVIRONMENT (literal_codeset, \"LANG\");\n+#endif\n+}\n+\n /* Utility routine:\n \n    Compares, the token TOKEN to the NUL-terminated string STRING."}]}