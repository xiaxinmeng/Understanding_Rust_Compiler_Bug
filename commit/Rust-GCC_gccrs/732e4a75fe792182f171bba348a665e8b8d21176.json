{"sha": "732e4a75fe792182f171bba348a665e8b8d21176", "node_id": "C_kwDOANBUbNoAKDczMmU0YTc1ZmU3OTIxODJmMTcxYmJhMzQ4YTY2NWU4YjhkMjExNzY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-16T23:15:20Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-16T23:15:20Z"}, "message": "PR target/94680: Clear upper bits of V2DF using movq (like V2DI).\n\nThis simple i386 patch unblocks a more significant change.  The testcase\ngcc.target/i386/sse2-pr94680.c isn't quite testing what's intended, and\nalas the fix for PR target/94680 doesn't (yet) handle V2DF mode.\n\nFor the first test from sse2-pr94680.c, below\n\nv2df foo_v2df (v2df x) {\n  return __builtin_shuffle (x, (v2df) { 0, 0 }, (v2di) { 0, 2 });\n}\n\nGCC on x86_64-pc-linux-gnu with -O2 currently generates:\n\n        movhpd  .LC0(%rip), %xmm0\n        ret\n.LC0:\n        .long   0\n        .long   0\n\nwhich passes the test as it contains a mov insn and no xor.\nAlas reading a zero from the constant pool isn't quite the\ndesired implementation.  With this patch we now generate:\n\n        movq    %xmm0, %xmm0\n        ret\n\nThe same code as we generate for V2DI, and add a stricter\ntest case.  This implementation generalizes the sse2_movq128\nto V2DI and V2DF modes using a VI8F_128 mode iterator and\nrenames it *sse2_movq128_<mode>.  A new define_expand is\nintroduced for sse2_movq128 so that the exisiting builtin\ninterface (CODE_FOR_sse2_movq128) remains the same.\n\n2022-03-16  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/94680\n\t* config/i386/sse.md (sse2_movq128): New define_expand to\n\tpreserve previous named instruction.\n\t(*sse2_movq128_<mode>): Renamed from sse2_movq128, and\n\tgeneralized to VI8F_128 (both V2DI and V2DF).\n\ngcc/testsuite/ChangeLog\n\tPR target/94680\n\t* gcc.target/i386/sse2-pr94680-2.c: New stricter V2DF test case.", "tree": {"sha": "ce7846c4ab67015e05b2df0b0261d47291d9582f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7846c4ab67015e05b2df0b0261d47291d9582f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/732e4a75fe792182f171bba348a665e8b8d21176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732e4a75fe792182f171bba348a665e8b8d21176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732e4a75fe792182f171bba348a665e8b8d21176", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732e4a75fe792182f171bba348a665e8b8d21176/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f26b26721d5f8a6ac874fc23e18e1b03d207990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26b26721d5f8a6ac874fc23e18e1b03d207990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f26b26721d5f8a6ac874fc23e18e1b03d207990"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "4c9c069ed4c59556e261665d73527345204ad384", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732e4a75fe792182f171bba348a665e8b8d21176/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732e4a75fe792182f171bba348a665e8b8d21176/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=732e4a75fe792182f171bba348a665e8b8d21176", "patch": "@@ -1586,13 +1586,22 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"sse2_movq128\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+(define_expand \"sse2_movq128\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n \t(vec_concat:V2DI\n \t  (vec_select:DI\n-\t    (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V2DI 1 \"nonimmediate_operand\")\n \t    (parallel [(const_int 0)]))\n \t  (const_int 0)))]\n+  \"TARGET_SSE2\")\n+\n+(define_insn \"*sse2_movq128_<mode>\"\n+  [(set (match_operand:VI8F_128 0 \"register_operand\" \"=v\")\n+\t(vec_concat:VI8F_128\n+\t  (vec_select:<ssescalarmode>\n+\t    (match_operand:VI8F_128 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))\n+\t  (match_operand:<ssescalarmode> 2 \ufffd\"const0_operand\" \"C\")))]\n   \"TARGET_SSE2\"\n   \"%vmovq\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")"}, {"sha": "abd260abc07ee4e78d8d8ebe70d4e22ad9ddf193", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr94680-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732e4a75fe792182f171bba348a665e8b8d21176/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732e4a75fe792182f171bba348a665e8b8d21176/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680-2.c?ref=732e4a75fe792182f171bba348a665e8b8d21176", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+\n+v2df foo_v2df (v2df x)\n+{\n+  return __builtin_shuffle (x, (v2df) { 0, 0 }, (v2di) { 0, 2 });\n+}\n+\n+/* { dg-final { scan-assembler \"movq\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */\n+"}]}