{"sha": "e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjYmMwOTYwZWRlYzNkMmNlMWVkZjAwYjZjNTM2YTZmMmZhY2EzMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-29T13:04:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-29T13:04:18Z"}, "message": "re PR fortran/67170 (PRE can't hoist out a readonly argument)\n\n2015-09-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67170\n\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust\n\tthe translate function pointer parameter to get the\n\tbool whether to disambiguate only by reference.\n\t(walk_non_aliased_vuses): Likewise.\n\t* tree-ssa-alias.c (maybe_skip_until): Adjust.\n\t(get_continuation_for_phi_1): Likewise.\n\t(get_continuation_for_phi): Likewise.\n\t(walk_non_aliased_vuses): Likewise.\n\t* tree-ssa-sccvn.c (const_parms): New bitmap.\n\t(vn_reference_lookup_3): Adjust for interface change.\n\tDisambiguate parameters pointing to readonly memory.\n\t(free_scc_vn): Free const_parms.\n\t(run_scc_vn): Initialize const_parms from a fn spec attribute.\n\n\t* gfortran.dg/pr67170.f90: New testcase.\n\nFrom-SVN: r228244", "tree": {"sha": "5013d6531f4e348668278ebcc16763017f224884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5013d6531f4e348668278ebcc16763017f224884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7"}], "stats": {"total": 137, "additions": 119, "deletions": 18}, "files": [{"sha": "03f566c2cd96a0fda4f620dc8578dd844f20b8f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -1,3 +1,20 @@\n+2015-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67170\n+\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust\n+\tthe translate function pointer parameter to get the\n+\tbool whether to disambiguate only by reference.\n+\t(walk_non_aliased_vuses): Likewise.\n+\t* tree-ssa-alias.c (maybe_skip_until): Adjust.\n+\t(get_continuation_for_phi_1): Likewise.\n+\t(get_continuation_for_phi): Likewise.\n+\t(walk_non_aliased_vuses): Likewise.\n+\t* tree-ssa-sccvn.c (const_parms): New bitmap.\n+\t(vn_reference_lookup_3): Adjust for interface change.\n+\tDisambiguate parameters pointing to readonly memory.\n+\t(free_scc_vn): Free const_parms.\n+\t(run_scc_vn): Initialize const_parms from a fn spec attribute.\n+\n 2015-09-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67741"}, {"sha": "335e00b3eab6c06cbc0b9f589b94bf4f2c8a027e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -1,3 +1,8 @@\n+2015-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67170\n+\t* gfortran.dg/pr67170.f90: New testcase.\n+\n 2015-09-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67741"}, {"sha": "80236470f423639d4da32b34a7c16f576734283a", "filename": "gcc/testsuite/gfortran.dg/pr67170.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67170.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67170.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67170.f90?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-fre1\" }\n+\n+module test_module\n+  integer, parameter :: r=10\n+   integer :: data(r, r), block(r, r, r)\n+  contains\n+recursive subroutine foo(arg) \n+integer, intent(in) :: arg\n+integer :: loop, x(r), y(r)\n+\n+   where(data(arg, :) /= 0)\n+      x = data(arg, :)\n+       y = l\n+   elsewhere\n+      x = 1\n+      y = r\n+   end where\n+\n+do loop = x(1), y(1)\n+   if(block(arg, 1, loop) <= 0) cycle\n+   block(arg, 1:4, loop) =  block(arg, 1:4, i1) + 1\n+   call foo(arg + 2)     \n+   block(arg, 1:4, loop) = block(arg, 1:4, i1) + 10\n+end do\n+end subroutine foo\n+\n+end module test_module\n+end program\n+\n+! { dg-final { scan-tree-dump-times \"= \\\\*arg_\\[0-9\\]+\\\\(D\\\\);\" 1 \"fre1\" } }"}, {"sha": "3b8d5946d0e0a55beab5e45341e474b759e019eb", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -2442,7 +2442,7 @@ static bool\n maybe_skip_until (gimple *phi, tree target, ao_ref *ref,\n \t\t  tree vuse, unsigned int *cnt, bitmap *visited,\n \t\t  bool abort_on_visited,\n-\t\t  void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t  void *(*translate)(ao_ref *, tree, void *, bool *),\n \t\t  void *data)\n {\n   basic_block bb = gimple_bb (phi);\n@@ -2477,8 +2477,9 @@ maybe_skip_until (gimple *phi, tree target, ao_ref *ref,\n \t  ++*cnt;\n \t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \t    {\n+\t      bool disambiguate_only = true;\n \t      if (translate\n-\t\t  && (*translate) (ref, vuse, data, true) == NULL)\n+\t\t  && (*translate) (ref, vuse, data, &disambiguate_only) == NULL)\n \t\t;\n \t      else\n \t\treturn false;\n@@ -2505,7 +2506,7 @@ static tree\n get_continuation_for_phi_1 (gimple *phi, tree arg0, tree arg1,\n \t\t\t    ao_ref *ref, unsigned int *cnt,\n \t\t\t    bitmap *visited, bool abort_on_visited,\n-\t\t\t    void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\t    void *(*translate)(ao_ref *, tree, void *, bool *),\n \t\t\t    void *data)\n {\n   gimple *def0 = SSA_NAME_DEF_STMT (arg0);\n@@ -2547,13 +2548,14 @@ get_continuation_for_phi_1 (gimple *phi, tree arg0, tree arg1,\n   else if ((common_vuse = gimple_vuse (def0))\n \t   && common_vuse == gimple_vuse (def1))\n     {\n+      bool disambiguate_only = true;\n       *cnt += 2;\n       if ((!stmt_may_clobber_ref_p_1 (def0, ref)\n \t   || (translate\n-\t       && (*translate) (ref, arg0, data, true) == NULL))\n+\t       && (*translate) (ref, arg0, data, &disambiguate_only) == NULL))\n \t  && (!stmt_may_clobber_ref_p_1 (def1, ref)\n \t      || (translate\n-\t\t  && (*translate) (ref, arg1, data, true) == NULL)))\n+\t\t  && (*translate) (ref, arg1, data, &disambiguate_only) == NULL)))\n \treturn common_vuse;\n     }\n \n@@ -2571,7 +2573,7 @@ tree\n get_continuation_for_phi (gimple *phi, ao_ref *ref,\n \t\t\t  unsigned int *cnt, bitmap *visited,\n \t\t\t  bool abort_on_visited,\n-\t\t\t  void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\t  void *(*translate)(ao_ref *, tree, void *, bool *),\n \t\t\t  void *data)\n {\n   unsigned nargs = gimple_phi_num_args (phi);\n@@ -2648,7 +2650,7 @@ get_continuation_for_phi (gimple *phi, ao_ref *ref,\n void *\n walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \t\t\tvoid *(*walker)(ao_ref *, tree, unsigned int, void *),\n-\t\t\tvoid *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\tvoid *(*translate)(ao_ref *, tree, void *, bool *),\n \t\t\ttree (*valueize)(tree),\n \t\t\tvoid *data)\n {\n@@ -2690,7 +2692,8 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \t    {\n \t      if (!translate)\n \t\tbreak;\n-\t      res = (*translate) (ref, vuse, data, false);\n+\t      bool disambiguate_only = false;\n+\t      res = (*translate) (ref, vuse, data, &disambiguate_only);\n \t      /* Failed lookup and translation.  */\n \t      if (res == (void *)-1)\n \t\t{\n@@ -2701,7 +2704,7 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \t      else if (res != NULL)\n \t\tbreak;\n \t      /* Translation succeeded, continue walking.  */\n-\t      translated = true;\n+\t      translated = translated || !disambiguate_only;\n \t    }\n \t  vuse = gimple_vuse (def_stmt);\n \t}"}, {"sha": "f328e244c42bf3031a55e8abcf903df7e1ee5252", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -118,12 +118,12 @@ extern bool stmt_kills_ref_p (gimple *, tree);\n extern bool stmt_kills_ref_p (gimple *, ao_ref *);\n extern tree get_continuation_for_phi (gimple *, ao_ref *,\n \t\t\t\t      unsigned int *, bitmap *, bool,\n-\t\t\t\t      void *(*)(ao_ref *, tree, void *, bool),\n+\t\t\t\t      void *(*)(ao_ref *, tree, void *, bool *),\n \t\t\t\t      void *);\n extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *(*)(ao_ref *, tree,\n \t\t\t\t\t       unsigned int, void *),\n-\t\t\t\t     void *(*)(ao_ref *, tree, void *, bool),\n+\t\t\t\t     void *(*)(ao_ref *, tree, void *, bool *),\n \t\t\t\t     tree (*)(tree),\n \t\t\t\t     void *);\n extern unsigned int walk_aliased_vdefs (ao_ref *, tree,"}, {"sha": "5b06d29f62205bf3e0c568169a1ec913d60b6ca7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbc0960edec3d2ce1edf00b6c536a6f2faca33/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e7cbc0960edec3d2ce1edf00b6c536a6f2faca33", "patch": "@@ -120,6 +120,7 @@ along with GCC; see the file COPYING3.  If not see\n static tree *last_vuse_ptr;\n static vn_lookup_kind vn_walk_kind;\n static vn_lookup_kind default_vn_walk_kind;\n+bitmap const_parms;\n \n /* vn_nary_op hashtable helpers.  */\n \n@@ -1656,21 +1657,35 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n /* Callback for walk_non_aliased_vuses.  Tries to perform a lookup\n    from the statement defining VUSE and if not successful tries to\n    translate *REFP and VR_ through an aggregate copy at the definition\n-   of VUSE.  */\n+   of VUSE.  If *DISAMBIGUATE_ONLY is true then do not perform translation\n+   of *REF and *VR.  If only disambiguation was performed then\n+   *DISAMBIGUATE_ONLY is set to true.  */\n \n static void *\n vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n-\t\t       bool disambiguate_only)\n+\t\t       bool *disambiguate_only)\n {\n   vn_reference_t vr = (vn_reference_t)vr_;\n   gimple *def_stmt = SSA_NAME_DEF_STMT (vuse);\n-  tree base;\n+  tree base = ao_ref_base (ref);\n   HOST_WIDE_INT offset, maxsize;\n   static vec<vn_reference_op_s>\n     lhs_ops = vNULL;\n   ao_ref lhs_ref;\n   bool lhs_ref_ok = false;\n \n+  /* If the reference is based on a parameter that was determined as\n+     pointing to readonly memory it doesn't change.  */\n+  if (TREE_CODE (base) == MEM_REF\n+      && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n+      && SSA_NAME_IS_DEFAULT_DEF (TREE_OPERAND (base, 0))\n+      && bitmap_bit_p (const_parms,\n+\t\t       SSA_NAME_VERSION (TREE_OPERAND (base, 0))))\n+    {\n+      *disambiguate_only = true;\n+      return NULL;\n+    }\n+\n   /* First try to disambiguate after value-replacing in the definitions LHS.  */\n   if (is_gimple_assign (def_stmt))\n     {\n@@ -1687,7 +1702,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t\t\t\t\t\t      TREE_TYPE (lhs), lhs_ops);\n \t  if (lhs_ref_ok\n \t      && !refs_may_alias_p_1 (ref, &lhs_ref, true))\n-\t    return NULL;\n+\t    {\n+\t      *disambiguate_only = true;\n+\t      return NULL;\n+\t    }\n \t}\n       else\n \t{\n@@ -1723,14 +1741,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t  for (unsigned i = 0; i < gimple_call_num_args (def_stmt); ++i)\n \t    gimple_call_set_arg (def_stmt, i, oldargs[i]);\n \t  if (!res)\n-\t    return NULL;\n+\t    {\n+\t      *disambiguate_only = true;\n+\t      return NULL;\n+\t    }\n \t}\n     }\n \n-  if (disambiguate_only)\n+  if (*disambiguate_only)\n     return (void *)-1;\n \n-  base = ao_ref_base (ref);\n   offset = ref->offset;\n   maxsize = ref->max_size;\n \n@@ -4342,6 +4362,8 @@ free_scc_vn (void)\n   XDELETE (valid_info);\n   free_vn_table (optimistic_info);\n   XDELETE (optimistic_info);\n+\n+  BITMAP_FREE (const_parms);\n }\n \n /* Set *ID according to RESULT.  */\n@@ -4677,6 +4699,29 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n \n   init_scc_vn ();\n \n+  /* Collect pointers we know point to readonly memory.  */\n+  const_parms = BITMAP_ALLOC (NULL);\n+  tree fnspec = lookup_attribute (\"fn spec\",\n+\t\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (cfun->decl)));\n+  if (fnspec)\n+    {\n+      fnspec = TREE_VALUE (TREE_VALUE (fnspec));\n+      i = 1;\n+      for (tree arg = DECL_ARGUMENTS (cfun->decl);\n+\t   arg; arg = DECL_CHAIN (arg), ++i)\n+\t{\n+\t  if (i >= (unsigned) TREE_STRING_LENGTH (fnspec))\n+\t    break;\n+\t  if (TREE_STRING_POINTER (fnspec)[i]  == 'R'\n+\t      || TREE_STRING_POINTER (fnspec)[i] == 'r')\n+\t    {\n+\t      tree name = ssa_default_def (cfun, arg);\n+\t      if (name)\n+\t\tbitmap_set_bit (const_parms, SSA_NAME_VERSION (name));\n+\t    }\n+\t}\n+    }\n+\n   /* Mark all edges as possibly executable.  */\n   FOR_ALL_BB_FN (bb, cfun)\n     {"}]}