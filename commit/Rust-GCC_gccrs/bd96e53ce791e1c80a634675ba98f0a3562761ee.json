{"sha": "bd96e53ce791e1c80a634675ba98f0a3562761ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NmU1M2NlNzkxZTFjODBhNjM0Njc1YmE5OGYwYTM1NjI3NjFlZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:04:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:04:31Z"}, "message": "config/bfin: Use rtx_insn\n\ngcc/\n\t* config/bfin/bfin-protos.h (asm_conditional_branch): Strengthen\n\tparam 1 from rtx to rtx_insn *.\n\t* config/bfin/bfin.c (expand_prologue_reg_save): Likewise for\n\tthe various locals named \"insn\".\n\t(expand_epilogue_reg_restore): Likewise.\n\t(frame_related_constant_load): Likewise.\n\t(add_to_reg): Likewise.\n\t(emit_link_insn): Likewise.\n\t(do_link): Likewise.\n\t(expand_interrupt_handler_prologue): Likewise.\n\t(branch_dest): Likewise for param \"branch\".\n\t(asm_conditional_branch): Likewise for param \"insn\".\n\t(gen_one_bundle): Likewise for elements of param \"slot\" and local\n\t\"t\".\n\t(bfin_gen_bundles): Likewise for locals \"insn\", \"next\" and\n\telements of local \"slot\".\n\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n\t\"queue\", \"next_queue\", \"prev\".\n\t(workaround_rts_anomaly): Likewise for locals \"insn\", \"first_insn\".\n\t(add_sched_insns_for_speculation): Likewise for local \"insn\".\n\nFrom-SVN: r214439", "tree": {"sha": "dddd05c1e03caee829070230ac903a6e086a7568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dddd05c1e03caee829070230ac903a6e086a7568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd96e53ce791e1c80a634675ba98f0a3562761ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd96e53ce791e1c80a634675ba98f0a3562761ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd96e53ce791e1c80a634675ba98f0a3562761ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd96e53ce791e1c80a634675ba98f0a3562761ee/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98024b4e443c398b12321059039b888be9cb6ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98024b4e443c398b12321059039b888be9cb6ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98024b4e443c398b12321059039b888be9cb6ef9"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "122a9c5de7fc17683c38e52cc7605bf9adf122ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd96e53ce791e1c80a634675ba98f0a3562761ee", "patch": "@@ -1,3 +1,26 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/bfin/bfin-protos.h (asm_conditional_branch): Strengthen\n+\tparam 1 from rtx to rtx_insn *.\n+\t* config/bfin/bfin.c (expand_prologue_reg_save): Likewise for\n+\tthe various locals named \"insn\".\n+\t(expand_epilogue_reg_restore): Likewise.\n+\t(frame_related_constant_load): Likewise.\n+\t(add_to_reg): Likewise.\n+\t(emit_link_insn): Likewise.\n+\t(do_link): Likewise.\n+\t(expand_interrupt_handler_prologue): Likewise.\n+\t(branch_dest): Likewise for param \"branch\".\n+\t(asm_conditional_branch): Likewise for param \"insn\".\n+\t(gen_one_bundle): Likewise for elements of param \"slot\" and local\n+\t\"t\".\n+\t(bfin_gen_bundles): Likewise for locals \"insn\", \"next\" and\n+\telements of local \"slot\".\n+\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n+\t\"queue\", \"next_queue\", \"prev\".\n+\t(workaround_rts_anomaly): Likewise for locals \"insn\", \"first_insn\".\n+\t(add_sched_insns_for_speculation): Likewise for local \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/avr/avr-protos.h (output_movqi): Strengthen first param"}, {"sha": "f230a3aec2c94ec0a7b0d84ab5051b57ffc691a0", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=bd96e53ce791e1c80a634675ba98f0a3562761ee", "patch": "@@ -97,7 +97,7 @@ extern void print_address_operand (FILE *, rtx);\n extern void split_di (rtx [], int, rtx [], rtx []);\n extern int split_load_immediate (rtx []);\n extern void emit_pic_move (rtx *, enum machine_mode);\n-extern void asm_conditional_branch (rtx, rtx *, int, int);\n+extern void asm_conditional_branch (rtx_insn *, rtx *, int, int);\n extern rtx bfin_gen_compare (rtx, enum machine_mode);\n \n extern unsigned bfin_local_alignment (tree, unsigned);"}, {"sha": "c9f9af6d4cd27d74a6278494ed3b484a527e4898", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd96e53ce791e1c80a634675ba98f0a3562761ee/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=bd96e53ce791e1c80a634675ba98f0a3562761ee", "patch": "@@ -346,7 +346,7 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n \n   if (saveall || is_inthandler)\n     {\n-      rtx insn = emit_move_insn (predec, gen_rtx_REG (SImode, REG_ASTAT));\n+      rtx_insn *insn = emit_move_insn (predec, gen_rtx_REG (SImode, REG_ASTAT));\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n       for (dregno = REG_LT0; dregno <= REG_LB1; dregno++)\n@@ -363,7 +363,7 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n \n   if (total_consec != 0)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       rtx val = GEN_INT (-total_consec * 4);\n       rtx pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (total_consec + 2));\n \n@@ -405,7 +405,8 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n     {\n       if (must_save_p (is_inthandler, dregno))\n \t{\n-\t  rtx insn = emit_move_insn (predec, gen_rtx_REG (word_mode, dregno));\n+\t  rtx_insn *insn =\n+\t    emit_move_insn (predec, gen_rtx_REG (word_mode, dregno));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  ndregs--;\n \t}\n@@ -414,7 +415,8 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n     {\n       if (must_save_p (is_inthandler, pregno))\n \t{\n-\t  rtx insn = emit_move_insn (predec, gen_rtx_REG (word_mode, pregno));\n+\t  rtx_insn *insn =\n+\t    emit_move_insn (predec, gen_rtx_REG (word_mode, pregno));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  npregs--;\n \t}\n@@ -425,7 +427,7 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n \t    && (df_regs_ever_live_p (i)\n \t\t|| (!leaf_function_p () && call_used_regs[i]))))\n       {\n-\trtx insn;\n+\trtx_insn *insn;\n \tif (i == REG_A0 || i == REG_A1)\n \t  insn = emit_move_insn (gen_rtx_MEM (PDImode, predec1),\n \t\t\t\t gen_rtx_REG (PDImode, i));\n@@ -452,7 +454,7 @@ expand_epilogue_reg_restore (rtx spreg, bool saveall, bool is_inthandler)\n   int npregs_consec = saveall ? 6 : n_pregs_to_save (is_inthandler, true);\n   int total_consec = ndregs_consec + npregs_consec;\n   int i, regno;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* A slightly crude technique to stop flow from trying to delete \"dead\"\n      insns.  */\n@@ -706,7 +708,7 @@ bfin_initial_elimination_offset (int from, int to)\n static void\n frame_related_constant_load (rtx reg, HOST_WIDE_INT constant, bool related)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx cst = GEN_INT (constant);\n \n   if (constant >= -32768 && constant < 65536)\n@@ -743,7 +745,7 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame, int epilogue_p)\n     {\n       rtx tmpreg;\n       rtx tmpreg2;\n-      rtx insn;\n+      rtx_insn *insn;\n \n       tmpreg2 = NULL_RTX;\n \n@@ -792,7 +794,7 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame, int epilogue_p)\n     do\n       {\n \tint size = value;\n-\trtx insn;\n+\trtx_insn *insn;\n \n \tif (size > 60)\n \t  size = 60;\n@@ -817,7 +819,7 @@ static void\n emit_link_insn (rtx spreg, HOST_WIDE_INT frame_size)\n {\n   HOST_WIDE_INT link_size = frame_size;\n-  rtx insn;\n+  rtx_insn *insn;\n   int i;\n \n   if (link_size > 262140)\n@@ -884,15 +886,15 @@ do_link (rtx spreg, HOST_WIDE_INT frame_size, bool all)\n \t  rtx pat = gen_movsi (gen_rtx_MEM (Pmode,\n \t\t\t\t\t    gen_rtx_PRE_DEC (Pmode, spreg)),\n \t\t\t       bfin_rets_rtx);\n-\t  rtx insn = emit_insn (pat);\n+\t  rtx_insn *insn = emit_insn (pat);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n       if (must_save_fp_p ())\n \t{\n \t  rtx pat = gen_movsi (gen_rtx_MEM (Pmode,\n \t\t\t\t\t    gen_rtx_PRE_DEC (Pmode, spreg)),\n \t\t\t       gen_rtx_REG (Pmode, REG_FP));\n-\t  rtx insn = emit_insn (pat);\n+\t  rtx_insn *insn = emit_insn (pat);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n       add_to_reg (spreg, -frame_size, 1, 0);\n@@ -940,7 +942,7 @@ expand_interrupt_handler_prologue (rtx spreg, e_funkind fkind, bool all)\n   HOST_WIDE_INT frame_size = get_frame_size ();\n   rtx predec1 = gen_rtx_PRE_DEC (SImode, spreg);\n   rtx predec = gen_rtx_MEM (SImode, predec1);\n-  rtx insn;\n+  rtx_insn *insn;\n   tree attrs = TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl));\n   tree kspisusp = lookup_attribute (\"kspisusp\", attrs);\n \n@@ -2416,7 +2418,7 @@ bfin_option_override (void)\n    we still prefer to use shorter sequences.  */\n \n static int\n-branch_dest (rtx branch)\n+branch_dest (rtx_insn *branch)\n {\n   rtx dest;\n   int dest_uid;\n@@ -2470,7 +2472,7 @@ static const char *ccbranch_templates[][3] = {\n    anyway.  */\n \n void\n-asm_conditional_branch (rtx insn, rtx *operands, int n_nops, int predict_taken)\n+asm_conditional_branch (rtx_insn *insn, rtx *operands, int n_nops, int predict_taken)\n {\n   int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n   /* Note : offset for instructions like if cc jmp; jump.[sl] offset\n@@ -3895,7 +3897,7 @@ bfin_reorg_loops (void)\n /* Possibly generate a SEQUENCE out of three insns found in SLOT.\n    Returns true if we modified the insn chain, false otherwise.  */\n static bool\n-gen_one_bundle (rtx slot[3])\n+gen_one_bundle (rtx_insn *slot[3])\n {\n   gcc_assert (slot[1] != NULL_RTX);\n \n@@ -3917,7 +3919,7 @@ gen_one_bundle (rtx slot[3])\n     }\n   if (slot[2])\n     {\n-      rtx t = NEXT_INSN (slot[1]);\n+      rtx_insn *t = NEXT_INSN (slot[1]);\n       while (t != slot[2])\n \t{\n \t  if (! NOTE_P (t) || NOTE_KIND (t) != NOTE_INSN_DELETED)\n@@ -3963,11 +3965,11 @@ bfin_gen_bundles (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn, next;\n-      rtx slot[3];\n+      rtx_insn *insn, *next;\n+      rtx_insn *slot[3];\n       int n_filled = 0;\n \n-      slot[0] = slot[1] = slot[2] = NULL_RTX;\n+      slot[0] = slot[1] = slot[2] = NULL;\n       for (insn = BB_HEAD (bb);; insn = next)\n \t{\n \t  int at_end;\n@@ -4023,7 +4025,7 @@ bfin_gen_bundles (void)\n \t\t    }\n \t\t}\n \t      n_filled = 0;\n-\t      slot[0] = slot[1] = slot[2] = NULL_RTX;\n+\t      slot[0] = slot[1] = slot[2] = NULL;\n \t    }\n \t  if (delete_this != NULL_RTX)\n \t    delete_insn (delete_this);\n@@ -4042,8 +4044,8 @@ reorder_var_tracking_notes (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn, next;\n-      rtx queue = NULL_RTX;\n+      rtx_insn *insn, *next;\n+      rtx_insn *queue = NULL;\n       bool in_bundle = false;\n \n       for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = next)\n@@ -4057,7 +4059,7 @@ reorder_var_tracking_notes (void)\n \t\t{\n \t\t  while (queue)\n \t\t    {\n-\t\t      rtx next_queue = PREV_INSN (queue);\n+\t\t      rtx_insn *next_queue = PREV_INSN (queue);\n \t\t      SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n \t\t      SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n \t\t      SET_NEXT_INSN (insn) = queue;\n@@ -4073,7 +4075,7 @@ reorder_var_tracking_notes (void)\n \t    {\n \t      if (in_bundle)\n \t\t{\n-\t\t  rtx prev = PREV_INSN (insn);\n+\t\t  rtx_insn *prev = PREV_INSN (insn);\n \t\t  SET_PREV_INSN (next) = prev;\n \t\t  SET_NEXT_INSN (prev) = next;\n \n@@ -4091,7 +4093,7 @@ reorder_var_tracking_notes (void)\n static void\n workaround_rts_anomaly (void)\n {\n-  rtx insn, first_insn = NULL_RTX;\n+  rtx_insn *insn, *first_insn = NULL;\n   int cycles = 4;\n \n   if (! ENABLE_WA_RETS)\n@@ -4526,7 +4528,7 @@ workaround_speculation (void)\n static void\n add_sched_insns_for_speculation (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (! ENABLE_WA_SPECULATIVE_LOADS && ! ENABLE_WA_SPECULATIVE_SYNCS\n       && ! ENABLE_WA_INDIRECT_CALLS)"}]}