{"sha": "e94e92dcda29872523cc74a03ee64cfb3dbea21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0ZTkyZGNkYTI5ODcyNTIzY2M3NGEwM2VlNjRjZmIzZGJlYTIxYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-09-04T08:07:37Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-09-04T08:07:37Z"}, "message": "Use argparse.ArgumentParser for mklog.\n\n2019-09-04  Martin Liska  <mliska@suse.cz>\n\n\t* mklog: Use argparse instead of getopt.\n\nFrom-SVN: r275367", "tree": {"sha": "5bd41c9ac59c8524607dce14b1fd0d24b973a8d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd41c9ac59c8524607dce14b1fd0d24b973a8d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94e92dcda29872523cc74a03ee64cfb3dbea21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94e92dcda29872523cc74a03ee64cfb3dbea21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94e92dcda29872523cc74a03ee64cfb3dbea21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94e92dcda29872523cc74a03ee64cfb3dbea21b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc91c65378cd0e6c07dde9ca119ec0cc7304b039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc91c65378cd0e6c07dde9ca119ec0cc7304b039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc91c65378cd0e6c07dde9ca119ec0cc7304b039"}], "stats": {"total": 77, "additions": 29, "deletions": 48}, "files": [{"sha": "a51f7ca01f0bab79ded8a5f288b548571c2dc06e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e92dcda29872523cc74a03ee64cfb3dbea21b/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e92dcda29872523cc74a03ee64cfb3dbea21b/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e94e92dcda29872523cc74a03ee64cfb3dbea21b", "patch": "@@ -1,3 +1,7 @@\n+2019-09-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog: Use argparse instead of getopt.\n+\n 2019-09-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* compare-all-tests (all_targets): Remove references to spu."}, {"sha": "e7a513fad5c0a779a1e4f00044a2f34db41e6f0b", "filename": "contrib/mklog", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e92dcda29872523cc74a03ee64cfb3dbea21b/contrib%2Fmklog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e92dcda29872523cc74a03ee64cfb3dbea21b/contrib%2Fmklog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog?ref=e94e92dcda29872523cc74a03ee64cfb3dbea21b", "patch": "@@ -28,11 +28,11 @@\n #\n # Author: Yury Gribov <tetra2005@gmail.com>\n \n+import argparse\n import sys\n import re\n import os.path\n import os\n-import getopt\n import tempfile\n import time\n import shutil\n@@ -66,21 +66,6 @@ class RegexCache(object):\n \n cache = RegexCache()\n \n-def print_help_and_exit():\n-    print(\"\"\"\\\n-Usage: %s [-i | --inline] [PATCH]\n-Generate ChangeLog template for PATCH.\n-PATCH must be generated using diff(1)'s -up or -cp options\n-(or their equivalent in Subversion/git).\n-\n-When PATCH is - or missing, read standard input.\n-\n-When -i is used, prepends ChangeLog to PATCH.\n-If PATCH is not stdin, modifies PATCH in-place, otherwise writes\n-to stdout.\n-\"\"\" % me)\n-    sys.exit(1)\n-\n def run(cmd, die_on_error):\n   \"\"\"Simple wrapper for Popen.\"\"\"\n   proc = Popen(cmd.split(' '), stderr = PIPE, stdout = PIPE)\n@@ -356,38 +341,30 @@ def parse_patch(contents):\n def main():\n   name, email = read_user_info()\n \n-  try:\n-    opts, args = getopt.getopt(sys.argv[1:], 'hiv', ['help', 'verbose', 'inline'])\n-  except getopt.GetoptError as err:\n-    error(str(err))\n-\n-  inline = False\n-  verbose = 0\n-\n-  for o, a in opts:\n-    if o in ('-h', '--help'):\n-      print_help_and_exit()\n-    elif o in ('-i', '--inline'):\n-      inline = True\n-    elif o in ('-v', '--verbose'):\n-      verbose += 1\n-    else:\n-      assert False, \"unhandled option\"\n-\n-  if len(args) == 0:\n-    args = ['-']\n+  help_message =  \"\"\"\\\n+Generate ChangeLog template for PATCH.\n+PATCH must be generated using diff(1)'s -up or -cp options\n+(or their equivalent in Subversion/git).\n+\"\"\"\n \n-  if len(args) == 1 and args[0] == '-':\n-    input = sys.stdin\n-  elif len(args) == 1:\n-    input = open(args[0])\n-  else:\n-    error(\"too many arguments; for more details run with -h\")\n+  inline_message = \"\"\"\\\n+Prepends ChangeLog to PATCH.\n+If PATCH is not stdin, modifies PATCH in-place,\n+otherwise writes to stdout.'\n+\"\"\"\n \n+  parser = argparse.ArgumentParser(description = help_message)\n+  parser.add_argument('-v', '--verbose', action = 'store_true', help = 'Verbose messages')\n+  parser.add_argument('-i', '--inline', action = 'store_true', help = inline_message)\n+  parser.add_argument('input', nargs = '?', help = 'Patch file (or missing, read standard input)')\n+  args = parser.parse_args()\n+  if args.input == '-':\n+      args.input = None\n+  input = open(args.input) if args.input else sys.stdin\n   contents = input.read()\n   diffs = parse_patch(contents)\n \n-  if verbose:\n+  if args.verbose:\n     print(\"Parse results:\")\n     for d in diffs:\n       d.dump()\n@@ -431,15 +408,15 @@ def main():\n \n     logs[log_name] += change_msg if change_msg else \":\\n\"\n \n-  if inline and args[0] != '-':\n+  if args.inline and args.input:\n     # Get a temp filename, rather than an open filehandle, because we use\n     # the open to truncate.\n     fd, tmp = tempfile.mkstemp(\"tmp.XXXXXXXX\")\n     os.close(fd)\n \n     # Copy permissions to temp file\n     # (old Pythons do not support shutil.copymode)\n-    shutil.copymode(args[0], tmp)\n+    shutil.copymode(args.input, tmp)\n \n     # Open the temp file, clearing contents.\n     out = open(tmp, 'w')\n@@ -457,14 +434,14 @@ def main():\n \n %s\\n\"\"\" % (log_name, date, name, email, msg))\n \n-  if inline:\n+  if args.inline:\n     # Append patch body\n     out.write(contents)\n \n-    if args[0] != '-':\n+    if args.input:\n       # Write new contents atomically\n       out.close()\n-      shutil.move(tmp, args[0])\n+      shutil.move(tmp, args.input)\n \n if __name__ == '__main__':\n     main()"}]}