{"sha": "4e1914625dec4aa09a5671c6294e877dbf4518f5", "node_id": "C_kwDOANBUbNoAKDRlMTkxNDYyNWRlYzRhYTA5YTU2NzFjNjI5NGU4NzdkYmY0NTE4ZjU", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-07-15T08:47:36Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-08-09T12:06:11Z"}, "message": "amdgcn: Vector procedure call ABI\n\nAdjust the (unofficial) procedure calling ABI such that vector arguments are\npassed in vector registers, not on the stack.  Scalar arguments continue to\nbe passed in scalar registers, making a total of 12 argument registers.\n\nThe return value is also moved to a vector register (even for scalars; it\nwould be possible to retain the scalar location, using untyped_call, but\nthere's no obvious advantage in doing so).\n\nAfter this change the ABI is as follows:\n\ns0-s13  : Reserved for kernel launch parameters.\ns14-s15 : Frame pointer.\ns16-s17 : Stack pointer.\ns18-s19 : Link register.\ns20-s21 : Exec Save.\ns22-s23 : CC Save.\ns24-s25 : Scalar arguments.          NO LONGER RETURN VALUE.\ns26-s29 : Additional scalar arguments (makes 6 total).\ns30-s31 : Static Chain.\nv0      : Prologue/epilogue scratch.\nv1      : Constant 0, 1, 2, 3, 4, ... 63.\nv2-v7   : Prologue/epilogue scratch.\nv8-v9   : Return value & vector arguments.              NEW.\nv10-v13 : Additional vector arguments (makes 6 total).  NEW.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.cc (gcn_function_value): Allow vector return values.\n\t(num_arg_regs): Allow vector arguments.\n\t(gcn_function_arg): Likewise.\n\t(gcn_function_arg_advance): Likewise.\n\t(gcn_arg_partial_bytes): Likewise.\n\t(gcn_return_in_memory): Likewise.\n\t(gcn_expand_epilogue): Get return value from v8.\n\t* config/gcn/gcn.h (RETURN_VALUE_REG): Set to v8.\n\t(FIRST_PARM_REG): USE FIRST_SGPR_REG for clarity.\n\t(FIRST_VPARM_REG): New.\n\t(FUNCTION_ARG_REGNO_P): Allow vector parameters.\n\t(struct gcn_args): Add vnum field.\n\t(LIBCALL_VALUE): All vector return values.\n\t* config/gcn/gcn.md (gcn_call_value): Add vector constraints.\n\t(gcn_call_value_indirect): Likewise.", "tree": {"sha": "6dfe9e0822d10c9c38e88805725841dc67fc06f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dfe9e0822d10c9c38e88805725841dc67fc06f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1914625dec4aa09a5671c6294e877dbf4518f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1914625dec4aa09a5671c6294e877dbf4518f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1914625dec4aa09a5671c6294e877dbf4518f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1914625dec4aa09a5671c6294e877dbf4518f5/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa08cd48490183382371bff4fd53573b5adabe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa08cd48490183382371bff4fd53573b5adabe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa08cd48490183382371bff4fd53573b5adabe8"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "96295e23aad3fdf3facd2c896c7958ee776a3dda", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=4e1914625dec4aa09a5671c6294e877dbf4518f5", "patch": "@@ -2284,7 +2284,7 @@ gcn_function_value (const_tree valtype, const_tree, bool)\n       && GET_MODE_SIZE (mode) < 4)\n     mode = SImode;\n \n-  return gen_rtx_REG (mode, SGPR_REGNO (RETURN_VALUE_REG));\n+  return gen_rtx_REG (mode, RETURN_VALUE_REG);\n }\n \n /* Implement TARGET_FUNCTION_VALUE_REGNO_P.\n@@ -2308,7 +2308,9 @@ num_arg_regs (const function_arg_info &arg)\n     return 0;\n \n   int size = arg.promoted_size_in_bytes ();\n-  return (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  int regsize = UNITS_PER_WORD * (VECTOR_MODE_P (arg.mode)\n+\t\t\t\t  ? GET_MODE_NUNITS (arg.mode) : 1);\n+  return (size + regsize - 1) / regsize;\n }\n \n /* Implement TARGET_STRICT_ARGUMENT_NAMING.\n@@ -2358,16 +2360,16 @@ gcn_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n       if (targetm.calls.must_pass_in_stack (arg))\n \treturn 0;\n \n-      /* Vector parameters are not supported yet.  */\n-      if (VECTOR_MODE_P (arg.mode))\n-\treturn 0;\n-\n-      int reg_num = FIRST_PARM_REG + cum->num;\n+      int first_reg = (VECTOR_MODE_P (arg.mode)\n+\t\t       ? FIRST_VPARM_REG : FIRST_PARM_REG);\n+      int cum_num = (VECTOR_MODE_P (arg.mode)\n+\t\t     ? cum->vnum : cum->num);\n+      int reg_num = first_reg + cum_num;\n       int num_regs = num_arg_regs (arg);\n       if (num_regs > 0)\n \twhile (reg_num % num_regs != 0)\n \t  reg_num++;\n-      if (reg_num + num_regs <= FIRST_PARM_REG + NUM_PARM_REGS)\n+      if (reg_num + num_regs <= first_reg + NUM_PARM_REGS)\n \treturn gen_rtx_REG (arg.mode, reg_num);\n     }\n   else\n@@ -2419,11 +2421,15 @@ gcn_function_arg_advance (cumulative_args_t cum_v,\n       if (!arg.named)\n \treturn;\n \n+      int first_reg = (VECTOR_MODE_P (arg.mode)\n+\t\t       ? FIRST_VPARM_REG : FIRST_PARM_REG);\n+      int *cum_num = (VECTOR_MODE_P (arg.mode)\n+\t\t      ? &cum->vnum : &cum->num);\n       int num_regs = num_arg_regs (arg);\n       if (num_regs > 0)\n-\twhile ((FIRST_PARM_REG + cum->num) % num_regs != 0)\n-\t  cum->num++;\n-      cum->num += num_regs;\n+\twhile ((first_reg + *cum_num) % num_regs != 0)\n+\t  (*cum_num)++;\n+      *cum_num += num_regs;\n     }\n   else\n     {\n@@ -2454,14 +2460,18 @@ gcn_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n   if (targetm.calls.must_pass_in_stack (arg))\n     return 0;\n \n-  if (cum->num >= NUM_PARM_REGS)\n+  int cum_num = (VECTOR_MODE_P (arg.mode) ? cum->vnum : cum->num);\n+  int regsize = UNITS_PER_WORD * (VECTOR_MODE_P (arg.mode)\n+\t\t\t\t  ? GET_MODE_NUNITS (arg.mode) : 1);\n+\n+  if (cum_num >= NUM_PARM_REGS)\n     return 0;\n \n   /* If the argument fits entirely in registers, return 0.  */\n-  if (cum->num + num_arg_regs (arg) <= NUM_PARM_REGS)\n+  if (cum_num + num_arg_regs (arg) <= NUM_PARM_REGS)\n     return 0;\n \n-  return (NUM_PARM_REGS - cum->num) * UNITS_PER_WORD;\n+  return (NUM_PARM_REGS - cum_num) * regsize;\n }\n \n /* A normal function which takes a pointer argument (to a scalar) may be\n@@ -2549,14 +2559,11 @@ gcn_return_in_memory (const_tree type, const_tree ARG_UNUSED (fntype))\n   if (AGGREGATE_TYPE_P (type))\n     return true;\n \n-  /* Vector return values are not supported yet.  */\n-  if (VECTOR_TYPE_P (type))\n-    return true;\n-\n   if (mode == BLKmode)\n     return true;\n \n-  if (size > 2 * UNITS_PER_WORD)\n+  if ((!VECTOR_TYPE_P (type) && size > 2 * UNITS_PER_WORD)\n+      || size > 2 * UNITS_PER_WORD * 64)\n     return true;\n \n   return false;\n@@ -3199,9 +3206,10 @@ gcn_expand_epilogue (void)\n       emit_move_insn (kernarg_reg, retptr_mem);\n \n       rtx retval_mem = gen_rtx_MEM (SImode, kernarg_reg);\n+      rtx scalar_retval = gen_rtx_REG (SImode, FIRST_PARM_REG);\n       set_mem_addr_space (retval_mem, ADDR_SPACE_SCALAR_FLAT);\n-      emit_move_insn (retval_mem,\n-\t\t      gen_rtx_REG (SImode, SGPR_REGNO (RETURN_VALUE_REG)));\n+      emit_move_insn (scalar_retval, gen_rtx_REG (SImode, RETURN_VALUE_REG));\n+      emit_move_insn (retval_mem, scalar_retval);\n     }\n \n   emit_jump_insn (gen_gcn_return ());"}, {"sha": "318256c4a7a6d599b1e536fad3e6a61f8624a69f", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=4e1914625dec4aa09a5671c6294e877dbf4518f5", "patch": "@@ -138,15 +138,16 @@\n #define LINK_REGNUM\t\t  18\n #define EXEC_SAVE_REG\t\t  20\n #define CC_SAVE_REG\t\t  22\n-#define RETURN_VALUE_REG\t  24\t/* Must be divisible by 4.  */\n+#define RETURN_VALUE_REG\t  168\t/* Must be divisible by 4.  */\n #define STATIC_CHAIN_REGNUM\t  30\n #define WORK_ITEM_ID_Z_REG\t  162\n #define SOFT_ARG_REG\t\t  416\n #define FRAME_POINTER_REGNUM\t  418\n #define DWARF_LINK_REGISTER\t  420\n #define FIRST_PSEUDO_REGISTER\t  421\n \n-#define FIRST_PARM_REG 24\n+#define FIRST_PARM_REG (FIRST_SGPR_REG + 24)\n+#define FIRST_VPARM_REG (FIRST_VGPR_REG + 8)\n #define NUM_PARM_REGS  6\n \n /* There is no arg pointer.  Just choose random fixed register that does\n@@ -164,7 +165,8 @@\n #define CC_REG_P(X)\t\t(REG_P (X) && CC_REGNO_P (REGNO (X)))\n #define CC_REGNO_P(X)\t\t((X) == SCC_REG || (X) == VCC_REG)\n #define FUNCTION_ARG_REGNO_P(N) \\\n-  ((N) >= FIRST_PARM_REG && (N) < (FIRST_PARM_REG + NUM_PARM_REGS))\n+  (((N) >= FIRST_PARM_REG && (N) < (FIRST_PARM_REG + NUM_PARM_REGS)) \\\n+   || ((N) >= FIRST_VPARM_REG && (N) < (FIRST_VPARM_REG + NUM_PARM_REGS)))\n \n \f\n #define FIXED_REGISTERS {\t\t\t    \\\n@@ -550,6 +552,7 @@ typedef struct gcn_args\n   tree fntype;\n   struct gcn_kernel_args args;\n   int num;\n+  int vnum;\n   int offset;\n   int alignment;\n } CUMULATIVE_ARGS;\n@@ -653,7 +656,7 @@ enum gcn_builtin_codes\n     }\n \n /* This needs to match gcn_function_value.  */\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, SGPR_REGNO (RETURN_VALUE_REG))\n+#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, RETURN_VALUE_REG)\n \n /* The s_ff0 and s_flbit instructions return -1 if no input bits are set.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = -1, 2)"}, {"sha": "7805e86790131f2e5d0448b78c09abcc4512d8bc", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1914625dec4aa09a5671c6294e877dbf4518f5/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=4e1914625dec4aa09a5671c6294e877dbf4518f5", "patch": "@@ -908,11 +908,11 @@\n   {})\n \n (define_insn \"gcn_call_value\"\n-  [(set (match_operand 0 \"register_operand\" \"=Sg,Sg\")\n-\t(call (mem (match_operand 1 \"immediate_operand\" \"Y,B\"))\n+  [(set (match_operand 0 \"register_operand\"\t\t\"=Sgv,Sgv\")\n+\t(call (mem (match_operand 1 \"immediate_operand\" \"   Y,  B\"))\n \t      (match_operand 2 \"const_int_operand\")))\n    (clobber (reg:DI LR_REGNUM))\n-   (clobber (match_scratch:DI 3 \"=&Sg,X\"))]\n+   (clobber (match_scratch:DI 3\t\t\t\t\"=&Sg,  X\"))]\n   \"\"\n   \"@\n   s_getpc_b64\\t%3\\;s_add_u32\\t%L3, %L3, %1@rel32@lo+4\\;s_addc_u32\\t%H3, %H3, %1@rel32@hi+4\\;s_swappc_b64\\ts[18:19], %3\n@@ -921,11 +921,11 @@\n    (set_attr \"length\" \"24\")])\n \n (define_insn \"gcn_call_value_indirect\"\n-  [(set (match_operand 0 \"register_operand\" \"=Sg\")\n-\t(call (mem (match_operand:DI 1 \"register_operand\" \"Sg\"))\n+  [(set (match_operand 0 \"register_operand\"\t\t  \"=Sgv\")\n+\t(call (mem (match_operand:DI 1 \"register_operand\" \"  Sg\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:DI LR_REGNUM))\n-   (clobber (match_scratch:DI 3 \"=X\"))]\n+   (clobber (match_scratch:DI 3\t\t\t\t  \"=  X\"))]\n   \"\"\n   \"s_swappc_b64\\ts[18:19], %1\"\n   [(set_attr \"type\" \"sop1\")"}]}