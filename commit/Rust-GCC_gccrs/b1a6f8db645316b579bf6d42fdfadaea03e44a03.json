{"sha": "b1a6f8db645316b579bf6d42fdfadaea03e44a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhNmY4ZGI2NDUzMTZiNTc5YmY2ZDQyZmRmYWRhZWEwM2U0NGEwMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-15T12:43:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-15T12:43:35Z"}, "message": "re PR rtl-optimization/9258 (ICE in compensate_edge, at reg-stack.c:2589)\n\n\tPR f/9258\n\t* global.c (struct allocno): Add no_stack_reg.\n\t(global_conflicts): Set no_stack_reg.\n\t(find_reg): Use it.\n\n\t* convert.c (convert_to_real): Fold - and abs only when profitable.\n\t* fold-const.c (fold): Fold truncates in - and abs.\n\n\t* gcc.c-torture/compile/20030115-1.c: New test.\n\n\t* gcc.dg/i386-fpcvt-1.c: New test.\n\t* gcc.dg/i386-fpcvt-2.c: New test.\n\nFrom-SVN: r61329", "tree": {"sha": "6deb389e7c733b4c85650e832ec219085b0ff935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6deb389e7c733b4c85650e832ec219085b0ff935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a6f8db645316b579bf6d42fdfadaea03e44a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a6f8db645316b579bf6d42fdfadaea03e44a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a6f8db645316b579bf6d42fdfadaea03e44a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a6f8db645316b579bf6d42fdfadaea03e44a03/comments", "author": null, "committer": null, "parents": [{"sha": "d18c7e595f818f688d073496d64fae9c00b594d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18c7e595f818f688d073496d64fae9c00b594d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18c7e595f818f688d073496d64fae9c00b594d6"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "87254806923aca9d05247c31ffb59abcc491315d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -1,3 +1,13 @@\n+Wed Jan 15 12:23:21 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR f/9258\n+\t* global.c (struct allocno): Add no_stack_reg. \n+\t(global_conflicts): Set no_stack_reg.\n+\t(find_reg): Use it.\n+\n+\t* convert.c (convert_to_real): Fold - and abs only when profitable.\n+\t* fold-const.c (fold): Fold truncates in - and abs.\n+\n 2003-01-15  Josef Zlomek  <zlomekj@suse.cz>\n \n \tSegher Boessenkool  <segher@koffie.nl>"}, {"sha": "009675ff19f7dfede19f298eaa26b1b75b4bccee", "filename": "gcc/convert.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -229,9 +229,11 @@ convert_to_real (type, expr)\n \t/* convert (float)-x into -(float)x.  This is always safe.  */\n \tcase ABS_EXPR:\n \tcase NEGATE_EXPR:\n-\t  return build1 (TREE_CODE (expr), type,\n-\t\t\t fold (convert_to_real (type,\n-\t\t\t\t\t\tTREE_OPERAND (expr, 0))));\n+\t  if (TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (expr)))\n+\t    return build1 (TREE_CODE (expr), type,\n+\t\t\t   fold (convert_to_real (type,\n+\t\t\t\t\t\t  TREE_OPERAND (expr, 0))));\n+\t  break;\n \t/* convert (outertype)((innertype0)a+(innertype1)b)\n \t   into ((newtype)a+(newtype)b) where newtype\n \t   is the widest mode from all of these.  */"}, {"sha": "3ab360b0dd3a2850aedfdc59d0ef7c51eb2c4783", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -5035,6 +5035,15 @@ fold (expr)\n \t}\n       else if (TREE_CODE (arg0) == NEGATE_EXPR)\n \treturn TREE_OPERAND (arg0, 0);\n+      /* Convert -((double)float) into (double)(-float).  */\n+      else if (TREE_CODE (arg0) == NOP_EXPR\n+\t       && TREE_CODE (type) == REAL_TYPE)\n+\t{\n+\t  tree targ0 = strip_float_extensions (arg0);\n+\t  if (targ0 != arg0)\n+\t    return convert (type, build1 (NEGATE_EXPR, TREE_TYPE (targ0), targ0));\n+\t\t\t   \n+\t}\n \n       /* Convert - (a - b) to (b - a) for non-floating-point.  */\n       else if (TREE_CODE (arg0) == MINUS_EXPR\n@@ -5083,6 +5092,15 @@ fold (expr)\n \t}\n       else if (TREE_CODE (arg0) == ABS_EXPR || TREE_CODE (arg0) == NEGATE_EXPR)\n \treturn build1 (ABS_EXPR, type, TREE_OPERAND (arg0, 0));\n+      /* Convert fabs((double)float) into (double)fabsf(float).  */\n+      else if (TREE_CODE (arg0) == NOP_EXPR\n+\t       && TREE_CODE (type) == REAL_TYPE)\n+\t{\n+\t  tree targ0 = strip_float_extensions (arg0);\n+\t  if (targ0 != arg0)\n+\t    return convert (type, build1 (ABS_EXPR, TREE_TYPE (targ0), targ0));\n+\t\t\t   \n+\t}\n       else\n \t{\n \t  /* fabs(sqrt(x)) = sqrt(x) and fabs(exp(x)) = exp(x).  */"}, {"sha": "4fadc144462ff29214f8f3418bc699d6e5cc3cf0", "filename": "gcc/global.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -132,6 +132,11 @@ struct allocno\n   /* Set of hard registers that some later allocno has a preference for.  */\n \n   HARD_REG_SET regs_someone_prefers;\n+\n+#ifdef STACK_REGS\n+  /* Set to true if allocno can't be allocated in the stack register.  */\n+  bool no_stack_reg;\n+#endif\n };\n \n static struct allocno *allocno;\n@@ -708,8 +713,14 @@ global_conflicts ()\n \t    if (e->flags & EDGE_ABNORMAL)\n \t      break;\n \t  if (e != NULL)\n-\t    for (ax = FIRST_STACK_REG; ax <= LAST_STACK_REG; ax++)\n-\t      record_one_conflict (ax);\n+\t    {\n+\t      EXECUTE_IF_SET_IN_ALLOCNO_SET (allocnos_live, ax,\n+\t\t{\n+\t\t  allocno[ax].no_stack_reg = 1;\n+\t\t});\n+\t      for (ax = FIRST_STACK_REG; ax <= LAST_STACK_REG; ax++)\n+\t\trecord_one_conflict (ax);\n+\t    }\n \t}\n #endif\n       }\n@@ -1205,6 +1216,10 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n \t      && ! invalid_mode_change_p (regno, REGNO_REG_CLASS (regno),\n \t\t\t\t\t  mode)\n+#endif\n+#ifdef STACK_REGS\n+\t     && (!allocno[num].no_stack_reg\n+\t\t || regno < FIRST_STACK_REG || regno > LAST_STACK_REG)\n #endif\n \t      )\n \t    {"}, {"sha": "0133eb2006c6579904bb2838c0cf236164e85100", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -1,3 +1,10 @@\n+Wed Jan 15 12:20:52 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/20030115-1.c: New test.\n+\n+\t* gcc.dg/i386-fpcvt-1.c: New test.\n+\t* gcc.dg/i386-fpcvt-2.c: New test.\n+\n 2003-01-14  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \tFurther conform g++'s __vmi_class_type_info to the C++ ABI"}, {"sha": "ec6f79c718ea9f1ebc218a2315625320d858450e", "filename": "gcc/testsuite/g77.f-torture/compile/20030115-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20030115-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20030115-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20030115-1.c?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -0,0 +1,14 @@\n+      SUBROUTINE FOO (B)\n+\n+   10 CALL BAR(A)\n+      ASSIGN 20 TO M\n+      IF(100.LT.A) GOTO 10\n+      GOTO 40\n+C\n+   20 IF(B.LT.ABS(A)) GOTO 10\n+      ASSIGN 30 TO M\n+      GOTO 40\n+C\n+   30 ASSIGN 10 TO M\n+   40 GOTO M,(10,20,30)\n+      END"}, {"sha": "9a7733363bab2e65ad132cc32dded7f5ac8e99b8", "filename": "gcc/testsuite/gcc.dg/i386-fpcvt-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a6f8db645316b579bf6d42fdfadaea03e44a03/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fpcvt-3.c?ref=b1a6f8db645316b579bf6d42fdfadaea03e44a03", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2 -march=athlon\" } */\n+/* { dg-final { scan-assembler-not \"cvtss2sd\" } } */\n+float a,b;\n+main()\n+{\n+\ta=fabs(b)+1.0;\n+}"}]}