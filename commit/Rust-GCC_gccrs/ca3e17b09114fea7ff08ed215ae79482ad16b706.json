{"sha": "ca3e17b09114fea7ff08ed215ae79482ad16b706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzZTE3YjA5MTE0ZmVhN2ZmMDhlZDIxNWFlNzk0ODJhZDE2YjcwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:01:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:01:09Z"}, "message": "[multiple changes]\n\n2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Create packed array only when expander is\n\tactive.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Depends_In_Decl_Part): Install the formals only\n\twhen the context warrants it.\n\t(Analyze_Global_In_Decl_List): Install the formals only when\n\tthe context warrants it.\n\t(Requires_Profile_Installation): New routine.\n\n2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Simple_Return_Statement): When the return\n\ttype is a discriminated private type that does not require use\n\tof the secondary stack, a constrained subtype of the underlying\n\ttype is created to convey the proper object size to the backend.\n\tIf the return type is originally a private type, the return\n\texpression is wrapped in an unchecked_conversion. If the return\n\texpression is used subsequently in a call to the postcondition\n\tfunction, this conversion must be undone to prevent a spurious\n\terror on the analysis of that call.\n\nFrom-SVN: r198222", "tree": {"sha": "781b21d6e1e2aa0ae4b87e428407ea11858bafeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781b21d6e1e2aa0ae4b87e428407ea11858bafeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3e17b09114fea7ff08ed215ae79482ad16b706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e17b09114fea7ff08ed215ae79482ad16b706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3e17b09114fea7ff08ed215ae79482ad16b706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e17b09114fea7ff08ed215ae79482ad16b706/comments", "author": null, "committer": null, "parents": [{"sha": "19e34aa27ad18b85b2a27fbc926be73dfbb92968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e34aa27ad18b85b2a27fbc926be73dfbb92968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e34aa27ad18b85b2a27fbc926be73dfbb92968"}], "stats": {"total": 107, "additions": 93, "deletions": 14}, "files": [{"sha": "44f42f35823ef2f91989172961427f8b3f5d93bd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca3e17b09114fea7ff08ed215ae79482ad16b706", "patch": "@@ -1,3 +1,28 @@\n+2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Create packed array only when expander is\n+\tactive.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part): Install the formals only\n+\twhen the context warrants it.\n+\t(Analyze_Global_In_Decl_List): Install the formals only when\n+\tthe context warrants it.\n+\t(Requires_Profile_Installation): New routine.\n+\n+2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Simple_Return_Statement): When the return\n+\ttype is a discriminated private type that does not require use\n+\tof the secondary stack, a constrained subtype of the underlying\n+\ttype is created to convey the proper object size to the backend.\n+\tIf the return type is originally a private type, the return\n+\texpression is wrapped in an unchecked_conversion. If the return\n+\texpression is used subsequently in a call to the postcondition\n+\tfunction, this conversion must be undone to prevent a spurious\n+\terror on the analysis of that call.\n+\n 2013-04-23  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/55445"}, {"sha": "dc43046ac03b8daba3deccebfc9acf992c11d44f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ca3e17b09114fea7ff08ed215ae79482ad16b706", "patch": "@@ -7902,10 +7902,23 @@ package body Exp_Ch6 is\n \n          else\n             declare\n-               ExpR : constant Node_Id   := Relocate_Node (Exp);\n+               ExpR : Node_Id            := Relocate_Node (Exp);\n                Tnn  : constant Entity_Id := Make_Temporary (Loc, 'T', ExpR);\n \n             begin\n+               --  In the case of discriminated objects, we have created a\n+               --  constrained subtype above, and used the underlying type.\n+               --  This transformation is post-analysis and harmless, except\n+               --  that now the call to the post-condition will be analyzed and\n+               --  type kinds have to match.\n+\n+               if Nkind (ExpR) = N_Unchecked_Type_Conversion\n+                 and then\n+                   Is_Private_Type (R_Type) /= Is_Private_Type (Etype (ExpR))\n+               then\n+                  ExpR := Expression (ExpR);\n+               end if;\n+\n                --  For a complex expression of an elementary type, capture\n                --  value in the temporary and use it as the reference.\n "}, {"sha": "079c0ecac97de2d71fcfa0715347b72f566c85f1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ca3e17b09114fea7ff08ed215ae79482ad16b706", "patch": "@@ -11532,7 +11532,10 @@ package body Sem_Ch3 is\n          --  itself will not be frozen, and the packed array type for it must\n          --  be constructed explicitly.\n \n-         if Is_Packed (Compon_Type) and then Is_Frozen (Current_Scope) then\n+         if Expander_Active\n+           and then Is_Packed (Compon_Type)\n+           and then Is_Frozen (Current_Scope)\n+         then\n             Create_Packed_Array_Type (Array_Comp);\n          end if;\n "}, {"sha": "59d0858af89880207365aab592aa1f0358cbbd1e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e17b09114fea7ff08ed215ae79482ad16b706/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ca3e17b09114fea7ff08ed215ae79482ad16b706", "patch": "@@ -213,6 +213,11 @@ package body Sem_Prag is\n    --  pragma in the source program, a breakpoint on rv catches this place in\n    --  the source, allowing convenient stepping to the point of interest.\n \n+   function Requires_Profile_Installation (Subp : Node_Id) return Boolean;\n+   --  Subsidiary routine to the analysis of pragma Depends and pragma Global.\n+   --  Determine whether the profile of subprogram Subp must be installed into\n+   --  visibility to access its formals.\n+\n    procedure Set_Unit_Name (N : Node_Id; With_Item : Node_Id);\n    --  Place semantic information on the argument of an Elaborate/Elaborate_All\n    --  pragma. Entity name for unit and its parents is taken from item in\n@@ -1352,7 +1357,7 @@ package body Sem_Prag is\n          --  to subprogram declarations. Skip the installation for subprogram\n          --  bodies because the formals are already visible.\n \n-         if Nkind (Subp_Decl) = N_Subprogram_Declaration then\n+         if Requires_Profile_Installation (Subp_Decl) then\n             Push_Scope (Subp_Id);\n             Install_Formals (Subp_Id);\n          end if;\n@@ -1383,7 +1388,7 @@ package body Sem_Prag is\n             Next (Clause);\n          end loop;\n \n-         if Nkind (Subp_Decl) = N_Subprogram_Declaration then\n+         if Requires_Profile_Installation (Subp_Decl) then\n             End_Scope;\n          end if;\n \n@@ -1702,20 +1707,21 @@ package body Sem_Prag is\n       --  of these may be malformed in which case the analysis emits error\n       --  messages.\n \n-      elsif Nkind (Subp_Decl) = N_Subprogram_Body then\n-         Analyze_Global_List (List);\n-\n-      --  Ensure that the formal parameters are visible when processing an\n-      --  item. This falls out of the general rule of aspects pertaining to\n-      --  subprogram declarations.\n-\n       else\n-         Push_Scope (Subp_Id);\n-         Install_Formals (Subp_Id);\n+         --  Ensure that the formal parameters are visible when processing an\n+         --  item. This falls out of the general rule of aspects pertaining to\n+         --  subprogram declarations.\n+\n+         if Requires_Profile_Installation (Subp_Decl) then\n+            Push_Scope (Subp_Id);\n+            Install_Formals (Subp_Id);\n+         end if;\n \n          Analyze_Global_List (List);\n \n-         End_Scope;\n+         if Requires_Profile_Installation (Subp_Decl) then\n+            End_Scope;\n+         end if;\n       end if;\n    end Analyze_Global_In_Decl_Part;\n \n@@ -18828,6 +18834,38 @@ package body Sem_Prag is\n       null;\n    end rv;\n \n+   -----------------------------------\n+   -- Requires_Profile_Installation --\n+   -----------------------------------\n+\n+   function Requires_Profile_Installation (Subp : Node_Id) return Boolean is\n+   begin\n+      --  When aspects Depends and Global are associated with a subprogram\n+      --  declaration, their corresponding pragmas are analyzed at the end of\n+      --  the declarative part. This is done out of context, therefore the\n+      --  formals must be installed in visibility.\n+\n+      if Nkind (Subp) = N_Subprogram_Declaration then\n+         return True;\n+\n+      --  When aspects Depends and Global are associated with a subprogram body\n+      --  which is also a compilation unit, their corresponding pragmas appear\n+      --  in the Pragmas_After list. The Pragmas_After collection is analyzed\n+      --  out of context and the formals must be installed in visibility.\n+\n+      elsif Nkind (Subp) = N_Subprogram_Body\n+        and then Nkind (Parent (Subp)) = N_Compilation_Unit\n+      then\n+         return True;\n+\n+      --  In all other cases the two corresponding pragmas are analyzed in\n+      --  context and the formals are already visibile.\n+\n+      else\n+         return False;\n+      end if;\n+   end Requires_Profile_Installation;\n+\n    --------------------------------\n    -- Set_Encoded_Interface_Name --\n    --------------------------------"}]}