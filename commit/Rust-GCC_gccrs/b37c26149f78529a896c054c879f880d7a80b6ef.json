{"sha": "b37c26149f78529a896c054c879f880d7a80b6ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3YzI2MTQ5Zjc4NTI5YTg5NmMwNTRjODc5Zjg4MGQ3YTgwYjZlZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-03T22:23:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-03T22:23:45Z"}, "message": "recog.c (store_data_bypass_p, [...]): New.\n\n        * recog.c (store_data_bypass_p, if_test_bypass_p): New.\n        * recog.h: Declare them.\n\n        * config/sparc/sparc.c (ultrasparc_store_bypass_p): Remove.\n        * config/sparc/sparc.md: Use store_data_bypass_p instead.\n        * config/sparc/sparc-protos.h: Update.\n\nFrom-SVN: r53132", "tree": {"sha": "d1fdd6bef838c8c122f4053f8e82a4d4807f3802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1fdd6bef838c8c122f4053f8e82a4d4807f3802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37c26149f78529a896c054c879f880d7a80b6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c26149f78529a896c054c879f880d7a80b6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37c26149f78529a896c054c879f880d7a80b6ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c26149f78529a896c054c879f880d7a80b6ef/comments", "author": null, "committer": null, "parents": [{"sha": "e1c1132e0b08e1eccc4b361ae9725e5e12a1a2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c1132e0b08e1eccc4b361ae9725e5e12a1a2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c1132e0b08e1eccc4b361ae9725e5e12a1a2c9"}], "stats": {"total": 144, "additions": 71, "deletions": 73}, "files": [{"sha": "ea1687fba81f2d469a4e5faf1eadad0d6f358afd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -1,3 +1,12 @@\n+2002-05-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* recog.c (store_data_bypass_p, if_test_bypass_p): New.\n+\t* recog.h: Declare them.\n+\n+\t* config/sparc/sparc.c (ultrasparc_store_bypass_p): Remove.\n+\t* config/sparc/sparc.md: Use store_data_bypass_p instead.\n+\t* config/sparc/sparc-protos.h: Update.\n+\t\n 2002-05-03  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/sparc/netbsd-elf.c (CPP_SUBTARGET_SPEC64): Remove"}, {"sha": "fd372ded33cae4440b6068b7fee64d4987631bf6", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -120,8 +120,6 @@ extern char *sparc_v8plus_shift PARAMS ((rtx *, rtx, const char *));\n    32 bits of REG are 0 before INSN.  */   \n extern int sparc_check_64 PARAMS ((rtx, rtx));\n extern rtx gen_df_reg PARAMS ((rtx, int));\n-/* Used for DFA scheduling when cpu is ultrasparc.  */\n-extern int ultrasparc_store_bypass_p PARAMS ((rtx, rtx));\n extern int sparc_extra_constraint_check PARAMS ((rtx, int, int));\n #endif /* RTX_CODE */\n "}, {"sha": "3a5053defb113bebdbc6818638c579c35f2bd8a4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -7701,75 +7701,6 @@ sparc_cycle_display (clock, last)\n     return last;\n }\n \n-/* Make sure that the dependency between OUT_INSN and\n-   IN_INSN (a store) is on the store data not the address\n-   operand(s) of the store.  */\n-\n-int\n-ultrasparc_store_bypass_p (out_insn, in_insn)\n-     rtx out_insn, in_insn;\n-{\n-  rtx out_pat, in_pat;\n-  unsigned int regno;\n-\n-  if (recog_memoized (in_insn) < 0)\n-    return 0;\n-\n-  if (get_attr_type (in_insn) != TYPE_STORE\n-      && get_attr_type (in_insn) != TYPE_FPSTORE)\n-    abort ();\n-\n-  out_pat = PATTERN (out_insn);\n-  in_pat = PATTERN (in_insn);\n-\n-  if ((GET_CODE (out_pat) != SET\n-       && GET_CODE (out_pat) != PARALLEL)\n-      || GET_CODE (in_pat) != SET)\n-    abort ();\n-\n-  if (GET_CODE (SET_SRC (in_pat)) == REG)\n-    {\n-      regno = REGNO (SET_SRC (in_pat));\n-    }\n-  else if (GET_CODE (SET_SRC (in_pat)) == SUBREG)\n-    {\n-      regno = REGNO (SUBREG_REG (SET_SRC (in_pat)));\n-    }\n-  else\n-    return 0;\n-\n-  if (GET_CODE (out_pat) == PARALLEL)\n-    {\n-      int i;\n-\n-      for (i = 0; i < XVECLEN (out_pat, 0); i++)\n-\t{\n-\t  rtx exp = XVECEXP (out_pat, 0, i);\n-\n-\t  if (GET_CODE (exp) != SET)\n-\t    return 0;\n-\n-\t  if (GET_CODE (SET_DEST (exp)) == REG\n-\t      && regno == REGNO (SET_DEST (exp)))\n-\t    return 1;\n-\n-\t  if (GET_CODE (SET_DEST (exp)) == SUBREG\n-\t      && regno == REGNO (SUBREG_REG (SET_DEST (exp))))\n-\t    return 1;\n-\t}\n-    }\n-  else if (GET_CODE (SET_DEST (out_pat)) == REG)\n-    {\n-      return regno == REGNO (SET_DEST (out_pat));\n-    }\n-  else if (GET_CODE (SET_DEST (out_pat)) == SUBREG)\n-    {\n-      return regno == REGNO (SUBREG_REG (SET_DEST (out_pat)));\n-    }\n-\n-  return 0;\n-}\n-\n static int\n sparc_issue_rate ()\n {"}, {"sha": "a5b90fece71fafce43b7b477717380080478bf0d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -624,7 +624,7 @@\n ;; We need a special guard function because this bypass does\n ;; not apply to the address inputs of the store.\n (define_bypass 0 \"us1_simple_ieuN,us1_simple_ieu1,us1_simple_ieu0,us1_faddsub_single,us1_faddsub_double,us1_fmov_single,us1_fmov_double,us1_fcmov_single,us1_fcmov_double,us1_fmult_single,us1_fmult_double\" \"us1_store\"\n-   \"ultrasparc_store_bypass_p\")\n+   \"store_data_bypass_p\")\n \n ;; An integer branch may execute in the same cycle as the compare\n ;; creating the condition codes.\n@@ -758,7 +758,7 @@\n ;; We need a special guard function because this bypass does\n ;; not apply to the address inputs of the store.\n (define_bypass 0 \"us3_integer,us3_faddsub,us3_fmov,us3_fcmov,us3_fmult\" \"us3_store\"\n-   \"ultrasparc_store_bypass_p\")\n+   \"store_data_bypass_p\")\n \n ;; An integer branch may execute in the same cycle as the compare\n ;; creating the condition codes."}, {"sha": "2b85d4b0a25dddcbab5e36ce069294efbe151b75", "filename": "gcc/recog.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -3275,3 +3275,60 @@ peephole2_optimize (dump_file)\n #endif\n }\n #endif /* HAVE_peephole2 */\n+\n+/* Common predicates for use with define_bypass.  */\n+\n+/* True if the dependency between OUT_INSN and IN_INSN is on the store\n+   data not the address operand(s) of the store.  Both OUT_INSN and IN_INSN\n+   must be single_set.  */\n+\n+int\n+store_data_bypass_p (out_insn, in_insn)\n+     rtx out_insn, in_insn;\n+{\n+  rtx out_set, in_set;\n+\n+  out_set = single_set (out_insn);\n+  if (! out_set)\n+    abort ();\n+\n+  in_set = single_set (in_insn);\n+  if (! in_set)\n+    abort ();\n+\n+  if (GET_CODE (SET_DEST (in_set)) != MEM)\n+    return false;\n+\n+  if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_set)))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* True if the dependency between OUT_INSN and IN_INSN is in the \n+   IF_THEN_ELSE condition, and not the THEN or ELSE branch.\n+   Both OUT_INSN and IN_INSN must be single_set.  */\n+\n+int\n+if_test_bypass_p (out_insn, in_insn)\n+     rtx out_insn, in_insn;\n+{\n+  rtx out_set, in_set;\n+\n+  out_set = single_set (out_insn);\n+  if (! out_set)\n+    abort ();\n+\n+  in_set = single_set (in_insn);\n+  if (! in_set)\n+    abort ();\n+\n+  if (GET_CODE (SET_SRC (in_set)) != IF_THEN_ELSE)\n+    return false;\n+\n+  if (reg_mentioned_p (SET_DEST (out_set), XEXP (in_set, 1))\n+      || reg_mentioned_p (SET_DEST (out_set), XEXP (in_set, 2)))\n+    return false;\n+\n+  return true;\n+}"}, {"sha": "4d474405cd4f24693d1c07bb3548a9c74c7c0ea8", "filename": "gcc/recog.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c26149f78529a896c054c879f880d7a80b6ef/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=b37c26149f78529a896c054c879f880d7a80b6ef", "patch": "@@ -137,6 +137,9 @@ extern rtx peep2_find_free_register\tPARAMS ((int, int, const char *,\n extern void peephole2_optimize\t\tPARAMS ((FILE *));\n extern rtx peephole2_insns\t\tPARAMS ((rtx, rtx, int *));\n \n+extern int store_data_bypass_p\t\tPARAMS ((rtx, rtx));\n+extern int if_test_bypass_p\t\tPARAMS ((rtx, rtx));\n+\n /* Nonzero means volatile operands are recognized.  */\n extern int volatile_ok;\n "}]}