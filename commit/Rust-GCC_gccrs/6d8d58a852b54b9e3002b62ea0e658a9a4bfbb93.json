{"sha": "6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4ZDU4YTg1MmI1NGI5ZTMwMDJiNjJlYTBlNjU4YTlhNGJmYmI5Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-04T13:21:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-04T13:21:39Z"}, "message": "tree-ssa-sccvn.c (vn_reference_lookup_3): Properly guard empty CTOR and memset partial-def registering.\n\n2019-12-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Properly guard\n\tempty CTOR and memset partial-def registering.  Take advantage\n\tof fancy offset analysis in memset handling.\n\nFrom-SVN: r278965", "tree": {"sha": "2ddae30a5f098ba49c5d93059bf2fd4c632c45da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ddae30a5f098ba49c5d93059bf2fd4c632c45da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b86aaf45c00ec038a0da003f41d5334a00e603c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b86aaf45c00ec038a0da003f41d5334a00e603c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b86aaf45c00ec038a0da003f41d5334a00e603c"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "29359ee3f5b02a2ef864204aef3db1b927b66878", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "patch": "@@ -1,3 +1,9 @@\n+2019-12-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Properly guard\n+\tempty CTOR and memset partial-def registering.  Take advantage\n+\tof fancy offset analysis in memset handling.\n+\n 2019-12-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* fold-const.c (native_encode_vector_part): Handle"}, {"sha": "4c70e2ac05d522ba6777892964801adc7008aeae", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6d8d58a852b54b9e3002b62ea0e658a9a4bfbb93", "patch": "@@ -2441,6 +2441,12 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \treturn (void *)-1;\n       tree len = gimple_call_arg (def_stmt, 2);\n       HOST_WIDE_INT leni, offset2i, offseti;\n+      /* Sometimes the above trickery is smarter than alias analysis.  Take\n+         advantage of that.  */\n+      if (!ranges_maybe_overlap_p (offset, maxsize, offset2,\n+\t\t\t\t   (wi::to_poly_offset (len)\n+\t\t\t\t    << LOG2_BITS_PER_UNIT)))\n+\treturn NULL;\n       if (data->partial_defs.is_empty ()\n \t  && known_subrange_p (offset, maxsize, offset2,\n \t\t\t       wi::to_poly_offset (len) << LOG2_BITS_PER_UNIT))\n@@ -2478,7 +2484,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t       && tree_to_poly_int64 (len).is_constant (&leni)\n \t       && offset.is_constant (&offseti)\n \t       && offset2.is_constant (&offset2i)\n-\t       && maxsize.is_constant (&maxsizei))\n+\t       && maxsize.is_constant (&maxsizei)\n+\t       && ranges_known_overlap_p (offseti, maxsizei, offset2i, leni))\n \t{\n \t  pd_data pd;\n \t  pd.rhs = build_constructor (NULL_TREE, NULL);\n@@ -2534,7 +2541,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t   && offset2.is_constant (&offset2i)\n \t\t   && offset2i % BITS_PER_UNIT == 0\n \t\t   && size2.is_constant (&size2i)\n-\t\t   && size2i % BITS_PER_UNIT == 0)\n+\t\t   && size2i % BITS_PER_UNIT == 0\n+\t\t   && ranges_known_overlap_p (offseti, maxsizei,\n+\t\t\t\t\t      offset2i, size2i))\n \t    {\n \t      /* Let clobbers be consumed by the partial-def tracker\n \t         which can choose to ignore them if they are shadowed"}]}