{"sha": "b53513884626d162d4fad4bf144207f5fb762910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzNTEzODg0NjI2ZDE2MmQ0ZmFkNGJmMTQ0MjA3ZjVmYjc2MjkxMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-10T18:18:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-10T18:18:00Z"}, "message": "Manually CSE sreal frequency calculations\n\n\t* ipa-inline.c (compute_uninlined_call_time,\n\tcompute_inlined_call_time): Take edge frequency as\n\tparameter rather than computing it by itself.\n\t(big_speedup_p, edge_badness): Manually CSE sreal\n\tfrequency calculations.\n\nFrom-SVN: r278023", "tree": {"sha": "cbb95e26905cc90fe9711958d98bed60abd7b1d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbb95e26905cc90fe9711958d98bed60abd7b1d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53513884626d162d4fad4bf144207f5fb762910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53513884626d162d4fad4bf144207f5fb762910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53513884626d162d4fad4bf144207f5fb762910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53513884626d162d4fad4bf144207f5fb762910/comments", "author": null, "committer": null, "parents": [{"sha": "65eaab18b100ab83f1a05501e10b21875c72c299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65eaab18b100ab83f1a05501e10b21875c72c299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65eaab18b100ab83f1a05501e10b21875c72c299"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "02b24d3b4b19d95052e41bc3f631f7cbd0b6cfe7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53513884626d162d4fad4bf144207f5fb762910/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53513884626d162d4fad4bf144207f5fb762910/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b53513884626d162d4fad4bf144207f5fb762910", "patch": "@@ -1,3 +1,11 @@\n+2019-11-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline.c (compute_uninlined_call_time,\n+\tcompute_inlined_call_time): Take edge frequency as\n+\tparameter rather than computing it by itself.\n+\t(big_speedup_p, edge_badness): Manually CSE sreal\n+\tfrequency calculations.\n+\n 2019-11-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.c (profile_count::to_sreal_scale): Short circuit"}, {"sha": "53252e18cf007c6374f25361fa5c77eb9e61b6df", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53513884626d162d4fad4bf144207f5fb762910/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53513884626d162d4fad4bf144207f5fb762910/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=b53513884626d162d4fad4bf144207f5fb762910", "patch": "@@ -735,13 +735,13 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \n inline sreal\n compute_uninlined_call_time (struct cgraph_edge *edge,\n-\t\t\t     sreal uninlined_call_time)\n+\t\t\t     sreal uninlined_call_time,\n+\t\t\t     sreal freq)\n {\n   cgraph_node *caller = (edge->caller->inlined_to\n \t\t\t ? edge->caller->inlined_to\n \t\t\t : edge->caller);\n \n-  sreal freq = edge->sreal_frequency ();\n   if (freq > 0)\n     uninlined_call_time *= freq;\n   else\n@@ -756,14 +756,14 @@ compute_uninlined_call_time (struct cgraph_edge *edge,\n \n inline sreal\n compute_inlined_call_time (struct cgraph_edge *edge,\n-\t\t\t   sreal time)\n+\t\t\t   sreal time,\n+\t\t\t   sreal freq)\n {\n   cgraph_node *caller = (edge->caller->inlined_to\n \t\t\t ? edge->caller->inlined_to\n \t\t\t : edge->caller);\n   sreal caller_time = ipa_fn_summaries->get (caller)->time;\n \n-  sreal freq = edge->sreal_frequency ();\n   if (freq > 0)\n     time *= freq;\n   else\n@@ -787,8 +787,9 @@ big_speedup_p (struct cgraph_edge *e)\n {\n   sreal unspec_time;\n   sreal spec_time = estimate_edge_time (e, &unspec_time);\n-  sreal time = compute_uninlined_call_time (e, unspec_time);\n-  sreal inlined_time = compute_inlined_call_time (e, spec_time);\n+  sreal freq = e->sreal_frequency ();\n+  sreal time = compute_uninlined_call_time (e, unspec_time, freq);\n+  sreal inlined_time = compute_inlined_call_time (e, spec_time, freq);\n   cgraph_node *caller = (e->caller->inlined_to\n \t\t\t ? e->caller->inlined_to\n \t\t\t : e->caller);\n@@ -1164,9 +1165,10 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n     {\n       sreal numerator, denominator;\n       int overall_growth;\n-      sreal inlined_time = compute_inlined_call_time (edge, edge_time);\n+      sreal freq = edge->sreal_frequency ();\n+      sreal inlined_time = compute_inlined_call_time (edge, edge_time, freq);\n \n-      numerator = (compute_uninlined_call_time (edge, unspec_edge_time)\n+      numerator = (compute_uninlined_call_time (edge, unspec_edge_time, freq)\n \t\t   - inlined_time);\n       if (numerator <= 0)\n \tnumerator = ((sreal) 1 >> 8);\n@@ -1198,14 +1200,14 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t  && callee_info->single_caller\n \t  && !edge->caller->inlined_to\n \t  /* ... and edges executed only conditionally ... */\n-\t  && edge->sreal_frequency () < 1\n+\t  && freq < 1\n \t  /* ... consider case where callee is not inline but caller is ... */\n \t  && ((!DECL_DECLARED_INLINE_P (edge->callee->decl)\n \t       && DECL_DECLARED_INLINE_P (caller->decl))\n \t      /* ... or when early optimizers decided to split and edge\n \t\t frequency still indicates splitting is a win ... */\n \t      || (callee->split_part && !caller->split_part\n-\t\t  && edge->sreal_frequency () * 100\n+\t\t  && freq * 100\n \t\t     < PARAM_VALUE\n \t\t\t  (PARAM_PARTIAL_INLINING_ENTRY_PROBABILITY)\n \t\t  /* ... and do not overwrite user specified hints.   */\n@@ -1256,11 +1258,11 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t\t   \" overall growth %i (current) %i (original)\"\n \t\t   \" %i (compensated)\\n\",\n \t\t   badness.to_double (),\n-\t\t   edge->sreal_frequency ().to_double (),\n+\t\t   freq.to_double (),\n \t\t   edge->count.ipa ().initialized_p () ? edge->count.ipa ().to_gcov_type () : -1,\n \t\t   caller->count.ipa ().initialized_p () ? caller->count.ipa ().to_gcov_type () : -1,\n \t\t   compute_uninlined_call_time (edge,\n-\t\t\t\t\t\tunspec_edge_time).to_double (),\n+\t\t\t\t\t\tunspec_edge_time, freq).to_double (),\n \t\t   inlined_time.to_double (),\n \t\t   estimate_growth (callee),\n \t\t   callee_info->growth, overall_growth);"}]}