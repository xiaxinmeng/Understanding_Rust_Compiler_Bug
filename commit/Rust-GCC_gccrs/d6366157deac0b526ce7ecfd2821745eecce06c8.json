{"sha": "d6366157deac0b526ce7ecfd2821745eecce06c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNjYxNTdkZWFjMGI1MjZjZTdlY2ZkMjgyMTc0NWVlY2NlMDZjOA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2019-04-08T11:52:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-08T11:52:18Z"}, "message": "re PR middle-end/89725 (ICE in get_fnname_from_decl, at varasm.c:1723)\n\n2019-04-01  Bin Cheng  <bin.cheng@linux.alibaba.com>\n\n\tPR tree-optimization/89725\n\t* tree-chrec.c (chrec_contains_symbols): New parameter.  Handle outer\n\tloop's chrec as invariant symbol.\n\t* tree-chrec.h (chrec_contains_symbols): New parameter.\n\t* tree-data-ref.c (analyze_miv_subscript): Pass new argument.\n\t(build_classic_dist_vector_1, add_other_self_distances): Bypass access\n\tfunction of loops not in DDR's loop_nest.\n\t* tree-data-ref.h (index_in_loop_nest): Add unreachable check.\n\n\t* gcc.dg/tree-ssa/pr89725.c: New test.\n\nFrom-SVN: r270203", "tree": {"sha": "3042ff24ef928ab4c8b2ad26e74939b33f07787b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3042ff24ef928ab4c8b2ad26e74939b33f07787b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6366157deac0b526ce7ecfd2821745eecce06c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6366157deac0b526ce7ecfd2821745eecce06c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6366157deac0b526ce7ecfd2821745eecce06c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6366157deac0b526ce7ecfd2821745eecce06c8/comments", "author": null, "committer": null, "parents": [{"sha": "145f764aae16c101baf41c815abe99353fcf797d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145f764aae16c101baf41c815abe99353fcf797d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145f764aae16c101baf41c815abe99353fcf797d"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "a4c5520ecc1a4b8c07708fdc796d977c6d8a8897", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -1,3 +1,14 @@\n+2019-04-01  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/89725\n+\t* tree-chrec.c (chrec_contains_symbols): New parameter.  Handle outer\n+\tloop's chrec as invariant symbol.\n+\t* tree-chrec.h (chrec_contains_symbols): New parameter.\n+\t* tree-data-ref.c (analyze_miv_subscript): Pass new argument.\n+\t(build_classic_dist_vector_1, add_other_self_distances): Bypass access\n+\tfunction of loops not in DDR's loop_nest.\n+\t* tree-data-ref.h (index_in_loop_nest): Add unreachable check.\n+\n 2019-04-08  Chenghua Xu  <paul.hua.gm@gmail.com>\n \n \tPR target/89623"}, {"sha": "c8f538b26e6b20d4ece54031c9409e4a053adb01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -1,3 +1,8 @@\n+2019-04-01  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/89725\n+\t* gcc.dg/tree-ssa/pr89725.c: New test.\n+\n 2019-04-08  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.target/riscv/arch-1.c: Fix expected scanned pattern."}, {"sha": "ad826d90b866d08b03ed183d2fec65010bc0c7c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89725.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89725.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89725.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89725.c?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-interchange -fno-tree-dce\" } */\n+int abs (int);\n+int find_sad_16x16(int *intra_mode)\n+{\n+  int current_intra_sad_2,best_intra_sad2;\n+  int M1[16][16],M0[4][4][4][4],M3[4],M4[4][4];\n+  int i,j,k;\n+  int ii,jj;\n+  int up_avail, left_avail, left_up_avail;\n+  for (i=0;i<17;i++)\n+    if (left_up_avail)\n+      {\n+\tfor (jj=0;jj<4;jj++)\n+\t  for (ii=0;ii<4;ii++)\n+\t    for (j=0;j<4;j++)\n+\t      for (i=0;i<4;i++)\n+\t\t{\n+\t\t  M0[i][ii][2][jj]=M3[0]-M3[1];\n+\t\t  M0[i][ii][1][jj]=M3[2]+M3[3];\n+\t\t  current_intra_sad_2 += abs(M0[i][ii][j][jj]);\n+\t\t}\n+\n+        if(current_intra_sad_2 < best_intra_sad2)\n+          best_intra_sad2=current_intra_sad_2;\n+      }\n+  return 0;\n+}"}, {"sha": "8b5371a29a7d92ce0b03f8495e361a99eaf304c7", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -932,10 +932,12 @@ is_multivariate_chrec (const_tree chrec)\n     return false;\n }\n \n-/* Determines whether the chrec contains symbolic names or not.  */\n+/* Determines whether the chrec contains symbolic names or not.  If LOOP isn't\n+   NULL, we also consider chrec wrto outer loops of LOOP as symbol.  */\n \n static bool\n-chrec_contains_symbols (const_tree chrec, hash_set<const_tree> &visited)\n+chrec_contains_symbols (const_tree chrec, hash_set<const_tree> &visited,\n+\t\t\tstruct loop *loop)\n {\n   int i, n;\n \n@@ -952,18 +954,28 @@ chrec_contains_symbols (const_tree chrec, hash_set<const_tree> &visited)\n       || TREE_CODE (chrec) == FIELD_DECL)\n     return true;\n \n+  if (loop != NULL\n+      && TREE_CODE (chrec) == POLYNOMIAL_CHREC\n+      && flow_loop_nested_p (get_chrec_loop (chrec), loop))\n+    return true;\n+\n   n = TREE_OPERAND_LENGTH (chrec);\n   for (i = 0; i < n; i++)\n-    if (chrec_contains_symbols (TREE_OPERAND (chrec, i), visited))\n+    if (chrec_contains_symbols (TREE_OPERAND (chrec, i), visited, loop))\n       return true;\n   return false;\n }\n \n+/* Return true if CHREC contains any symbols.  If LOOP is not NULL, check if\n+   CHREC contains any chrec which is invariant wrto the loop (nest), in other\n+   words, chrec defined by outer loops of loop, so from LOOP's point of view,\n+   the chrec is considered as a SYMBOL.  */\n+\n bool\n-chrec_contains_symbols (const_tree chrec)\n+chrec_contains_symbols (const_tree chrec, struct loop* loop)\n {\n   hash_set<const_tree> visited;\n-  return chrec_contains_symbols (chrec, visited);\n+  return chrec_contains_symbols (chrec, visited, loop);\n }\n \n /* Determines whether the chrec contains undetermined coefficients.  */"}, {"sha": "258b5d53f8be1dea169636a8dccf093474c2e46e", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -80,7 +80,7 @@ extern bool convert_affine_scev (struct loop *, tree, tree *, tree *, gimple *,\n /* Observers.  */\n extern bool eq_evolutions_p (const_tree, const_tree);\n extern bool is_multivariate_chrec (const_tree);\n-extern bool chrec_contains_symbols (const_tree);\n+extern bool chrec_contains_symbols (const_tree, struct loop * = NULL);\n extern bool chrec_contains_symbols_defined_in_loop (const_tree, unsigned);\n extern bool chrec_contains_undetermined (const_tree);\n extern bool tree_contains_chrecs (const_tree, int *);"}, {"sha": "51da181c1f14ea49ae2d2c7f3b48fc3008528e2e", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -4060,9 +4060,9 @@ analyze_miv_subscript (tree chrec_a,\n     }\n \n   else if (evolution_function_is_affine_in_loop (chrec_a, loop_nest->num)\n-\t   && !chrec_contains_symbols (chrec_a)\n+\t   && !chrec_contains_symbols (chrec_a, loop_nest)\n \t   && evolution_function_is_affine_in_loop (chrec_b, loop_nest->num)\n-\t   && !chrec_contains_symbols (chrec_b))\n+\t   && !chrec_contains_symbols (chrec_b, loop_nest))\n     {\n       /* testsuite/.../ssa-chrec-35.c\n \t {0, +, 1}_2  vs.  {0, +, 1}_3\n@@ -4272,6 +4272,7 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n {\n   unsigned i;\n   lambda_vector init_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n+  struct loop *loop = DDR_LOOP_NEST (ddr)[0];\n \n   for (i = 0; i < DDR_NUM_SUBSCRIPTS (ddr); i++)\n     {\n@@ -4302,6 +4303,15 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n \t      return false;\n \t    }\n \n+\t  /* When data references are collected in a loop while data\n+\t     dependences are analyzed in loop nest nested in the loop, we\n+\t     would have more number of access functions than number of\n+\t     loops.  Skip access functions of loops not in the loop nest.\n+\n+\t     See PR89725 for more information.  */\n+\t  if (flow_loop_nested_p (get_loop (cfun, var_a), loop))\n+\t    continue;\n+\n \t  dist = int_cst_value (SUB_DISTANCE (subscript));\n \t  index = index_in_loop_nest (var_a, DDR_LOOP_NEST (ddr));\n \t  *index_carry = MIN (index, *index_carry);\n@@ -4413,6 +4423,7 @@ add_other_self_distances (struct data_dependence_relation *ddr)\n   unsigned i;\n   int index_carry = DDR_NB_LOOPS (ddr);\n   subscript *sub;\n+  struct loop *loop = DDR_LOOP_NEST (ddr)[0];\n \n   FOR_EACH_VEC_ELT (DDR_SUBSCRIPTS (ddr), i, sub)\n     {\n@@ -4442,6 +4453,16 @@ add_other_self_distances (struct data_dependence_relation *ddr)\n \t      return;\n \t    }\n \n+\t  /* When data references are collected in a loop while data\n+\t     dependences are analyzed in loop nest nested in the loop, we\n+\t     would have more number of access functions than number of\n+\t     loops.  Skip access functions of loops not in the loop nest.\n+\n+\t     See PR89725 for more information.  */\n+\t  if (flow_loop_nested_p (get_loop (cfun, CHREC_VARIABLE (access_fun)),\n+\t\t\t\t  loop))\n+\t    continue;\n+\n \t  index_carry = MIN (index_carry,\n \t\t\t     index_in_loop_nest (CHREC_VARIABLE (access_fun),\n \t\t\t\t\t\t DDR_LOOP_NEST (ddr)));"}, {"sha": "2a5082db398110d65bf96b9dcfffd820e793e6e5", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6366157deac0b526ce7ecfd2821745eecce06c8/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=d6366157deac0b526ce7ecfd2821745eecce06c8", "patch": "@@ -580,12 +580,11 @@ index_in_loop_nest (int var, vec<loop_p> loop_nest)\n   struct loop *loopi;\n   int var_index;\n \n-  for (var_index = 0; loop_nest.iterate (var_index, &loopi);\n-       var_index++)\n+  for (var_index = 0; loop_nest.iterate (var_index, &loopi); var_index++)\n     if (loopi->num == var)\n-      break;\n+      return var_index;\n \n-  return var_index;\n+  gcc_unreachable ();\n }\n \n /* Returns true when the data reference DR the form \"A[i] = ...\""}]}