{"sha": "48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkYmJjZDZlMjllNzUyMGI5MWRjZTUyZjQ5MmZhMDdmYjZlNGFhZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-20T21:42:54Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-20T21:42:54Z"}, "message": "re PR fortran/45438 ([OOP] ICE with -fcheck=pointer)\n\n2010-09-20  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45438\n\t* trans-expr.c (gfc_conv_procedure_call): Fix pointer checking for\n\tTBPs, PPCs and pointer/allocatable components.\n\n2010-09-20  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45438\n\t* gfortran.dg/pointer_check_7.f90: New.\n\nFrom-SVN: r164462", "tree": {"sha": "e6777450f7b259237fcf188c6329216d441178a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6777450f7b259237fcf188c6329216d441178a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad78b8a6887aef944aae522884f8c9e7b91fb860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad78b8a6887aef944aae522884f8c9e7b91fb860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad78b8a6887aef944aae522884f8c9e7b91fb860"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "d9777bf4f3435481b01562b1ec9031b94994f043", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "patch": "@@ -1,3 +1,9 @@\n+2010-09-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45438\n+\t* trans-expr.c (gfc_conv_procedure_call): Fix pointer checking for\n+\tTBPs, PPCs and pointer/allocatable components.\n+\n 2010-09-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/45081"}, {"sha": "9b24cad062ed1ada22d148ad0d251b1f1fdbcb71", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "patch": "@@ -3169,27 +3169,16 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n       if (gfc_option.rtcheck & GFC_RTCHECK_POINTER && e != NULL)\n         {\n-\t  symbol_attribute *attr;\n+\t  symbol_attribute attr;\n \t  char *msg;\n \t  tree cond;\n \n-\t  if (e->expr_type == EXPR_VARIABLE)\n-\t    attr = &e->symtree->n.sym->attr;\n-\t  else if (e->expr_type == EXPR_FUNCTION)\n-\t    {\n-\t      /* For intrinsic functions, the gfc_attr are not available.  */\n-\t      if (e->symtree->n.sym->attr.generic && e->value.function.isym)\n-\t\tgoto end_pointer_check;\n-\n-\t      if (e->symtree->n.sym->attr.generic)\n-\t\tattr = &e->value.function.esym->attr;\n-\t      else\n-\t\tattr = &e->symtree->n.sym->result->attr;\n-\t    }\n+\t  if (e->expr_type == EXPR_VARIABLE || e->expr_type == EXPR_FUNCTION)\n+\t    attr = gfc_expr_attr (e);\n \t  else\n \t    goto end_pointer_check;\n \n-          if (attr->optional)\n+          if (attr.optional)\n \t    {\n               /* If the actual argument is an optional pointer/allocatable and\n \t\t the formal argument takes an nonpointer optional value,\n@@ -3198,16 +3187,16 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t See Fortran 2003, Section 12.4.1.6 item (7)+(8).  */\n \t      tree present, null_ptr, type;\n \n-\t      if (attr->allocatable\n+\t      if (attr.allocatable\n \t\t  && (fsym == NULL || !fsym->attr.allocatable))\n \t\tasprintf (&msg, \"Allocatable actual argument '%s' is not \"\n \t\t\t  \"allocated or not present\", e->symtree->n.sym->name);\n-\t      else if (attr->pointer\n+\t      else if (attr.pointer\n \t\t       && (fsym == NULL || !fsym->attr.pointer))\n \t\tasprintf (&msg, \"Pointer actual argument '%s' is not \"\n \t\t\t  \"associated or not present\",\n \t\t\t  e->symtree->n.sym->name);\n-\t      else if (attr->proc_pointer\n+\t      else if (attr.proc_pointer\n \t\t       && (fsym == NULL || !fsym->attr.proc_pointer))\n \t\tasprintf (&msg, \"Proc-pointer actual argument '%s' is not \"\n \t\t\t  \"associated or not present\",\n@@ -3231,15 +3220,15 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t    }\n           else\n \t    {\n-\t      if (attr->allocatable\n+\t      if (attr.allocatable\n \t\t  && (fsym == NULL || !fsym->attr.allocatable))\n \t\tasprintf (&msg, \"Allocatable actual argument '%s' is not \"\n \t\t      \"allocated\", e->symtree->n.sym->name);\n-\t      else if (attr->pointer\n+\t      else if (attr.pointer\n \t\t       && (fsym == NULL || !fsym->attr.pointer))\n \t\tasprintf (&msg, \"Pointer actual argument '%s' is not \"\n \t\t      \"associated\", e->symtree->n.sym->name);\n-\t      else if (attr->proc_pointer\n+\t      else if (attr.proc_pointer\n \t\t       && (fsym == NULL || !fsym->attr.proc_pointer))\n \t\tasprintf (&msg, \"Proc-pointer actual argument '%s' is not \"\n \t\t      \"associated\", e->symtree->n.sym->name);"}, {"sha": "d1bf076e4c06714bffad2535cb0f9033843fbdcf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45438\n+\t* gfortran.dg/pointer_check_7.f90: New.\n+\n 2010-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/45728"}, {"sha": "0f6dcdc87fc4e188a0955fbcb903406499c69c86", "filename": "gcc/testsuite/gfortran.dg/pointer_check_7.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48dbbcd6e29e7520b91dce52f492fa07fb6e4aad/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_check_7.f90?ref=48dbbcd6e29e7520b91dce52f492fa07fb6e4aad", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-fcheck=pointer\" }\n+!\n+! PR 45438: [4.6 Regression] [OOP] ICE with -fcheck=pointer\n+!\n+! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+\n+module base_mat_mod\n+\n+  implicit none \n+\n+  type  :: base_sparse_mat\n+  contains \n+    procedure :: get_fmt\n+  end type\n+\n+contains\n+\n+  function get_fmt(a) result(res)\n+    class(base_sparse_mat), intent(in) :: a\n+    character(len=5) :: res\n+    res = 'NULL'\n+  end function\n+\n+  subroutine errlog(name)\n+    character(len=*) :: name\n+  end subroutine\n+\n+  subroutine test (a)\n+    class(base_sparse_mat), intent(in) :: a\n+    call errlog(a%get_fmt())\n+  end subroutine\n+\n+end module\n+\n+! { dg-final { cleanup-modules \"base_mat_mod\" } }"}]}