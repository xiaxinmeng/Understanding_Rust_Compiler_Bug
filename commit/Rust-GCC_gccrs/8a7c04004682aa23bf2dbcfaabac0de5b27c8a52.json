{"sha": "8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3YzA0MDA0NjgyYWEyM2JmMmRiY2ZhYWJhYzBkZTViMjdjOGE1Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:42:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:42:38Z"}, "message": "[multiple changes]\n\n2013-10-17  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_ugn.texi: Remove VMS conversion of -gnatet and -gnateT,\n\tnow that they are both in ug_words.\n\t* ug_words: Update qualifier for -gnatet Add qualifier for -gnateT\n\t* vms_data.ads: Update qualifier for -gnatet Add qualifier\n\tfor -gnateT\n\t* projects.texi: Continue to update the project documentation\n\tfor VMS.\n\n2013-10-17  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Body_References): New flag.\n\t(Body_References): New field.\n\t* sem_prag.adb (Record_Possible_Body_Reference): New procedure\n\t(Analyze_Input_Output): Call Record_Possible_Body_Reference\n\t(Analyze_Global_Item): Call Record_Possible_Body_Reference\n\t(Analyze_Refinement_Clause): Output messages if illegal global refs.\n\n2013-10-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Check_Component_Storage_Order): Reject a record or\n\tarray type that does not have an explicit Scalar_Storage_Order\n\tattribute definition if a component of the record, or the\n\telements of the array, have one.\n\t* gnat_rm.texi (attribute Scalar_Storage_Order): Document the above\n\trule.\n\nFrom-SVN: r203750", "tree": {"sha": "d538f7325a4a05faef13a7b61144256364e1db09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d538f7325a4a05faef13a7b61144256364e1db09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/comments", "author": null, "committer": null, "parents": [{"sha": "455f333611d47d6b632f6d64bd41e697694c5510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455f333611d47d6b632f6d64bd41e697694c5510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455f333611d47d6b632f6d64bd41e697694c5510"}], "stats": {"total": 264, "additions": 215, "deletions": 49}, "files": [{"sha": "ce029b4a8d10b3f3465be1f62a2b83197f624cab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -1,3 +1,31 @@\n+2013-10-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_ugn.texi: Remove VMS conversion of -gnatet and -gnateT,\n+\tnow that they are both in ug_words.\n+\t* ug_words: Update qualifier for -gnatet Add qualifier for -gnateT\n+\t* vms_data.ads: Update qualifier for -gnatet Add qualifier\n+\tfor -gnateT\n+\t* projects.texi: Continue to update the project documentation\n+\tfor VMS.\n+\n+2013-10-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Body_References): New flag.\n+\t(Body_References): New field.\n+\t* sem_prag.adb (Record_Possible_Body_Reference): New procedure\n+\t(Analyze_Input_Output): Call Record_Possible_Body_Reference\n+\t(Analyze_Global_Item): Call Record_Possible_Body_Reference\n+\t(Analyze_Refinement_Clause): Output messages if illegal global refs.\n+\n+2013-10-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Reject a record or\n+\tarray type that does not have an explicit Scalar_Storage_Order\n+\tattribute definition if a component of the record, or the\n+\telements of the array, have one.\n+\t* gnat_rm.texi (attribute Scalar_Storage_Order): Document the above\n+\trule.\n+\n 2013-10-17  Vincent Celier  <celier@adacore.com>\n \n \t* gnat_ugn.texi: Add examples of switches -gnateD, including"}, {"sha": "5047ec257ce1fed51b45f742271a9ea758c8cabb", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -132,6 +132,7 @@ package body Einfo is\n    --    String_Literal_Low_Bound        Node15\n \n    --    Access_Disp_Table               Elist16\n+   --    Body_References                 Elist16\n    --    Cloned_Subtype                  Node16\n    --    DTC_Entity                      Node16\n    --    Entry_Formal                    Node16\n@@ -552,8 +553,8 @@ package body Einfo is\n    --    Has_Delayed_Rep_Aspects         Flag261\n    --    May_Inherit_Delayed_Rep_Aspects Flag262\n    --    Has_Visible_Refinement          Flag263\n+   --    Has_Body_References             Flag264\n \n-   --    (unused)                        Flag264\n    --    (unused)                        Flag265\n    --    (unused)                        Flag266\n    --    (unused)                        Flag267\n@@ -733,6 +734,12 @@ package body Einfo is\n       return Flag40 (Id);\n    end Body_Needed_For_SAL;\n \n+   function Body_References (Id : E) return L is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      return Elist16 (Id);\n+   end Body_References;\n+\n    function C_Pass_By_Copy (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id));\n@@ -1294,6 +1301,12 @@ package body Einfo is\n       return Flag139 (Id);\n    end Has_Biased_Representation;\n \n+   function Has_Body_References (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      return Flag264 (Id);\n+   end Has_Body_References;\n+\n    function Has_Completion (Id : E) return B is\n    begin\n       return Flag26 (Id);\n@@ -3336,6 +3349,12 @@ package body Einfo is\n       Set_Flag40 (Id, V);\n    end Set_Body_Needed_For_SAL;\n \n+   procedure Set_Body_References (Id : E; V : L) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      Set_Elist16 (Id, V);\n+   end Set_Body_References;\n+\n    procedure Set_C_Pass_By_Copy (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Record_Type (Id) and then Is_Base_Type (Id));\n@@ -3909,6 +3928,12 @@ package body Einfo is\n       Set_Flag139 (Id, V);\n    end Set_Has_Biased_Representation;\n \n+   procedure Set_Has_Body_References (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      Set_Flag264 (Id, V);\n+   end Set_Has_Body_References;\n+\n    procedure Set_Has_Completion (Id : E; V : B := True) is\n    begin\n       Set_Flag26 (Id, V);\n@@ -7984,6 +8009,7 @@ package body Einfo is\n       W (\"Has_Anonymous_Master\",            Flag253 (Id));\n       W (\"Has_Atomic_Components\",           Flag86  (Id));\n       W (\"Has_Biased_Representation\",       Flag139 (Id));\n+      W (\"Has_Body_References\",             Flag264 (Id));\n       W (\"Has_Completion\",                  Flag26  (Id));\n       W (\"Has_Completion_In_Body\",          Flag71  (Id));\n       W (\"Has_Complex_Representation\",      Flag140 (Id));\n@@ -8672,6 +8698,10 @@ package body Einfo is\n    procedure Write_Field16_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+\n+         when E_Abstract_State                             =>\n+            Write_Str (\"Body_References\");\n+\n          when E_Record_Type                                |\n               E_Record_Type_With_Private                   =>\n             Write_Str (\"Access_Disp_Table\");"}, {"sha": "6520fe6bdad5da3d5a0757a3ed300c86dce0541b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -493,6 +493,12 @@ package Einfo is\n --       units. Indicates that the source for the body must be included\n --       when the unit is part of a standalone library.\n \n+--    Body_References (Elist16)\n+--       Defined in abstract state entities. Only set if Has_Body_References\n+--       flag is set True, in which case it contains an element list of global\n+--       references (identifiers) in the current package body to this abstract\n+--       state that are illegal if the abstract state has a visible refinement.\n+\n --    C_Pass_By_Copy (Flag125) [implementation base type only]\n --       Defined in record types. Set if a pragma Convention for the record\n --       type specifies convention C_Pass_By_Copy. This convention name is\n@@ -1405,6 +1411,10 @@ package Einfo is\n --       size of the type, forcing biased representation for the object, but\n --       the subtype is still an unbiased type.\n \n+--    Has_Body_References (Flag264)\n+--       Defined in entities for abstract states. Set if Body_References has\n+--       at least one entry.\n+\n --    Has_Completion (Flag26)\n --       Defined in all entities that require a completion (functions,\n --       procedures, private types, limited private types, incomplete types,\n@@ -5117,6 +5127,8 @@ package Einfo is\n    --  E_Abstract_State\n    --    Refinement_Constituents             (Elist8)\n    --    Refined_State                       (Node10)\n+   --    Body_References                     (Elist16)\n+   --    Has_Body_References                 (Flag264)\n    --    Has_Visible_Refinement              (Flag263)\n    --    Has_Non_Null_Refinement             (synth)\n    --    Has_Null_Refinement                 (synth)\n@@ -6230,6 +6242,7 @@ package Einfo is\n    function Block_Node                          (Id : E) return N;\n    function Body_Entity                         (Id : E) return E;\n    function Body_Needed_For_SAL                 (Id : E) return B;\n+   function Body_References                     (Id : E) return L;\n    function CR_Discriminant                     (Id : E) return E;\n    function C_Pass_By_Copy                      (Id : E) return B;\n    function Can_Never_Be_Null                   (Id : E) return B;\n@@ -6325,6 +6338,7 @@ package Einfo is\n    function Has_Anonymous_Master                (Id : E) return B;\n    function Has_Atomic_Components               (Id : E) return B;\n    function Has_Biased_Representation           (Id : E) return B;\n+   function Has_Body_References                 (Id : E) return B;\n    function Has_Completion                      (Id : E) return B;\n    function Has_Completion_In_Body              (Id : E) return B;\n    function Has_Complex_Representation          (Id : E) return B;\n@@ -6848,6 +6862,7 @@ package Einfo is\n    procedure Set_Block_Node                      (Id : E; V : N);\n    procedure Set_Body_Entity                     (Id : E; V : E);\n    procedure Set_Body_Needed_For_SAL             (Id : E; V : B := True);\n+   procedure Set_Body_References                 (Id : E; V : L);\n    procedure Set_CR_Discriminant                 (Id : E; V : E);\n    procedure Set_C_Pass_By_Copy                  (Id : E; V : B := True);\n    procedure Set_Can_Never_Be_Null               (Id : E; V : B := True);\n@@ -6942,6 +6957,7 @@ package Einfo is\n    procedure Set_Has_Anonymous_Master            (Id : E; V : B := True);\n    procedure Set_Has_Atomic_Components           (Id : E; V : B := True);\n    procedure Set_Has_Biased_Representation       (Id : E; V : B := True);\n+   procedure Set_Has_Body_References             (Id : E; V : B := True);\n    procedure Set_Has_Completion                  (Id : E; V : B := True);\n    procedure Set_Has_Completion_In_Body          (Id : E; V : B := True);\n    procedure Set_Has_Complex_Representation      (Id : E; V : B := True);\n@@ -7568,6 +7584,7 @@ package Einfo is\n    pragma Inline (Block_Node);\n    pragma Inline (Body_Entity);\n    pragma Inline (Body_Needed_For_SAL);\n+   pragma Inline (Body_References);\n    pragma Inline (CR_Discriminant);\n    pragma Inline (C_Pass_By_Copy);\n    pragma Inline (Can_Never_Be_Null);\n@@ -7660,6 +7677,7 @@ package Einfo is\n    pragma Inline (Has_Anonymous_Master);\n    pragma Inline (Has_Atomic_Components);\n    pragma Inline (Has_Biased_Representation);\n+   pragma Inline (Has_Body_References);\n    pragma Inline (Has_Completion);\n    pragma Inline (Has_Completion_In_Body);\n    pragma Inline (Has_Complex_Representation);\n@@ -8031,6 +8049,7 @@ package Einfo is\n    pragma Inline (Set_Block_Node);\n    pragma Inline (Set_Body_Entity);\n    pragma Inline (Set_Body_Needed_For_SAL);\n+   pragma Inline (Set_Body_References);\n    pragma Inline (Set_CR_Discriminant);\n    pragma Inline (Set_C_Pass_By_Copy);\n    pragma Inline (Set_Can_Never_Be_Null);\n@@ -8121,6 +8140,7 @@ package Einfo is\n    pragma Inline (Set_Has_Anonymous_Master);\n    pragma Inline (Set_Has_Atomic_Components);\n    pragma Inline (Set_Has_Biased_Representation);\n+   pragma Inline (Set_Has_Body_References);\n    pragma Inline (Set_Has_Completion);\n    pragma Inline (Set_Has_Completion_In_Body);\n    pragma Inline (Set_Has_Complex_Representation);"}, {"sha": "1ab8f1e7bda8914b4481fca4a149fbe90460f8b7", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -92,11 +92,15 @@ package body Freeze is\n \n    procedure Check_Component_Storage_Order\n      (Encl_Type : Entity_Id;\n-      Comp      : Entity_Id);\n+      Comp      : Entity_Id;\n+      ADC       : Node_Id);\n    --  For an Encl_Type that has a Scalar_Storage_Order attribute definition\n-   --  clause, verify that the component type is compatible. For arrays,\n-   --  Comp is Empty; for records, it is the entity of the component under\n-   --  consideration.\n+   --  clause, verify that the component type has an explicit and compatible\n+   --  attribute/aspect. For arrays, Comp is Empty; for records, it is the\n+   --  entity of the component under consideration. For an Encl_Type that\n+   --  does not have a Scalar_Storage_Order attribute definition clause,\n+   --  verify that the component also does not have such a clause.\n+   --  ADC is the attribute definition clause if present (or Empty).\n \n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n@@ -1068,11 +1072,12 @@ package body Freeze is\n \n    procedure Check_Component_Storage_Order\n      (Encl_Type : Entity_Id;\n-      Comp      : Entity_Id)\n+      Comp      : Entity_Id;\n+      ADC       : Node_Id)\n    is\n       Comp_Type : Entity_Id;\n+      Comp_ADC  : Node_Id;\n       Err_Node  : Node_Id;\n-      ADC       : Node_Id;\n \n       Comp_Byte_Aligned : Boolean;\n       --  Set True for the record case, when Comp starts on a byte boundary\n@@ -1113,11 +1118,24 @@ package body Freeze is\n       --  the attribute definition clause is attached to the first subtype.\n \n       Comp_Type := Base_Type (Comp_Type);\n-      ADC := Get_Attribute_Definition_Clause\n-               (First_Subtype (Comp_Type),\n-                Attribute_Scalar_Storage_Order);\n+      Comp_ADC := Get_Attribute_Definition_Clause\n+                    (First_Subtype (Comp_Type),\n+                     Attribute_Scalar_Storage_Order);\n \n-      if Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type) then\n+      --  Case of enclosing type not having explicit SSO: component cannot\n+      --  have it either.\n+\n+      if No (ADC) then\n+         if Present (Comp_ADC) then\n+            Error_Msg_N\n+              (\"composite type must have explicit scalar storage order\",\n+               Err_Node);\n+         end if;\n+\n+      --  Case of enclosing type having explicit SSO: check compatible\n+      --  attribute on Comp_Type if composite.\n+\n+      elsif Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type) then\n          if Present (Comp) and then Chars (Comp) = Name_uParent then\n             if Reverse_Storage_Order (Encl_Type)\n                  /=\n@@ -1142,6 +1160,9 @@ package body Freeze is\n                & \"storage order as enclosing composite\", Err_Node);\n          end if;\n \n+      --  Enclosing type has explicit SSO, non-composite component must not\n+      --  be aliased.\n+\n       elsif Component_Aliased then\n          Error_Msg_N\n            (\"aliased component not permitted for type with \"\n@@ -2312,11 +2333,12 @@ package body Freeze is\n \n             --  Check for scalar storage order\n \n-            if Present (Get_Attribute_Definition_Clause\n-                        (Arr, Attribute_Scalar_Storage_Order))\n-            then\n-               Check_Component_Storage_Order (Arr, Empty);\n-            end if;\n+            Check_Component_Storage_Order\n+              (Encl_Type => Arr,\n+               Comp      => Empty,\n+               ADC       => Get_Attribute_Definition_Clause\n+                              (First_Subtype (Arr),\n+                               Attribute_Scalar_Storage_Order));\n \n             --  Processing that is done only for subtypes\n \n@@ -2999,15 +3021,16 @@ package body Freeze is\n                  (\"??scalar storage order specified but no component clause\",\n                   ADC);\n             end if;\n+         end if;\n \n-            --  Check attribute on component types\n+         --  Check consistent attribute setting on component types\n \n-            Comp := First_Component (Rec);\n-            while Present (Comp) loop\n-               Check_Component_Storage_Order (Rec, Comp);\n-               Next_Component (Comp);\n-            end loop;\n-         end if;\n+         Comp := First_Component (Rec);\n+         while Present (Comp) loop\n+            Check_Component_Storage_Order\n+              (Encl_Type => Rec, Comp => Comp, ADC => ADC);\n+            Next_Component (Comp);\n+         end loop;\n \n          --  Deal with Bit_Order aspect specifying a non-default bit order\n "}, {"sha": "5dcfbe8663424f559d19342e34164e4461084398", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -8727,6 +8727,10 @@ have a @code{Scalar_Storage_Order} attribute definition clause. In addition,\n if the component does not start on a byte boundary, then the scalar storage\n order specified for S and for the nested component type shall be identical.\n \n+If @var{S} appears as the type of a record or array component, the enclosing\n+record or array shall also have a @code{Scalar_Storage_Order} attribute\n+definition clause.\n+\n No component of a type that has a @code{Scalar_Storage_Order} attribute\n definition may be aliased.\n "}, {"sha": "4b1030397593e70ded7d4e4432d3d56dcc323629", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -3825,12 +3825,12 @@ temporary use of special test software.\n @cindex @option{-gnateS} (@command{gcc})\n Synonym of @option{-fdump-scos}, kept for backards compatibility.\n \n-@item ^-gnatet^/TARGET_DEPENDENT_INFO^=@var{path}\n+@item -gnatet=@var{path}\n @cindex @option{-gnatet=file} (@command{gcc})\n Generate target dependent information. The format of the output file is\n described in the section about switch @option{-gnateT}.\n \n-@item ^-gnateT^/TARGET_DEPENDENT_INFO^=@var{path}\n+@item -gnateT=@var{path}\n @cindex @option{-gnateT} (@command{gcc})\n Read target dependent information, such as endianness or sizes and alignments\n of base type. If this switch is passed, the default target dependent"}, {"sha": "166a9e829c00833b7ec3a713c8f6cd15cd2dd41d", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -3170,10 +3170,10 @@ The following packages are currently supported in project files\n   @command{gnatfind} via the @command{gnat} driver. Its attributes\n   @b{Default_Switches} and @b{^Switches^Switches^} have the same semantics as for the\n   package @code{Builder}.\n-@item Gnatls\n+@item ^Gnatls^Gnatls^\n   This package the options to use when invoking @command{gnatls} via the\n   @command{gnat} driver.\n-@item Gnatstub\n+@item ^Gnatstub^Gnatstub^\n   This package specifies the options used when calling the tool\n   @command{gnatstub} via the @command{gnat} driver. Its attributes\n   @b{Default_Switches} and @b{^Switches^Switches^} have the same semantics as for the\n@@ -3630,8 +3630,8 @@ end MyProj;\n * Package Cross_Reference Attributes::\n * Package Eliminate Attributes::\n * Package Finder Attributes::\n-* Package gnatls Attributes::\n-* Package gnatstub Attributes::\n+* Package ^gnatls^gnatls^ Attributes::\n+* Package ^gnatstub^gnatstub^ Attributes::\n * Package IDE Attributes::\n * Package Install Attributes::\n * Package Linker Attributes::\n@@ -4630,8 +4630,8 @@ invoking @code{gnatfind} for the source.\n \n @end itemize\n \n-@node Package gnatls Attributes\n-@subsubsection Package gnatls Attributes\n+@node Package ^gnatls^gnatls^ Attributes\n+@subsubsection Package ^gnatls^gnatls^ Attributes\n \n @itemize @bullet\n \n@@ -4641,16 +4641,16 @@ Value is a list of switches to be used when invoking @code{gnatls}.\n \n @end itemize\n \n-@node Package gnatstub Attributes\n-@subsubsection Package gnatstub Attributes\n+@node Package ^gnatstub^gnatstub^ Attributes\n+@subsubsection Package ^gnatstub^gnatstub^ Attributes\n \n @itemize @bullet\n \n @item @b{Default_Switches}: list, indexed, case-insensitive index\n \n Index is a language name. Value is a list of switches to be used when invoking\n @code{gnatstub} for a source of the language, if there is no applicable\n-attribute Switches.\n+attribute ^Switches^Switches^.\n \n @item @b{^Switches^Switches^}: list, optional index, indexed, case-insensitive index,\n                     others allowed\n@@ -4699,11 +4699,11 @@ the handling of switches.\n Value is a string that specifies the name of the debugger to be used, such as\n gdb, powerpc-wrs-vxworks-gdb or gdb-4.\n \n-@item @b{gnatlist}: single\n+@item @b{^gnatlist^gnatlist^}: single\n \n-Value is a string that specifies the name of the @command{gnatls} utility\n+Value is a string that specifies the name of the @command{^gnatls^gnatls^} utility\n to be used to retrieve information about the predefined path; for example,\n-@code{\"gnatls\"}, @code{\"powerpc-wrs-vxworks-gnatls\"}.\n+@code{\"^gnatls^gnatls^\"}, @code{\"powerpc-wrs-vxworks-gnatls\"}.\n \n @item @b{VCS_Kind}: single\n "}, {"sha": "0b758a2591d0cf954dbb051c9ec27d88bb0d343b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -277,23 +277,30 @@ package body Sem_Prag is\n    --  of a Test_Case pragma if present (possibly Empty). We treat these as\n    --  spec expressions (i.e. similar to a default expression).\n \n+   procedure Record_Possible_Body_Reference\n+     (Item    : Node_Id;\n+      Item_Id : Entity_Id);\n+   --  Given an entity reference (Item) and the corresponding Entity (Item_Id),\n+   --  determines if we have a body reference to an abstract state, which may\n+   --  be illegal if the state is refined within the body.\n+\n    procedure Rewrite_Assertion_Kind (N : Node_Id);\n    --  If N is Pre'Class, Post'Class, Invariant'Class, or Type_Invariant'Class,\n    --  then it is rewritten as an identifier with the corresponding special\n    --  name _Pre, _Post, _Invariant, or _Type_Invariant. Used by pragmas\n    --  Check, Check_Policy.\n \n+   procedure Set_Unit_Name (N : Node_Id; With_Item : Node_Id);\n+   --  Place semantic information on the argument of an Elaborate/Elaborate_All\n+   --  pragma. Entity name for unit and its parents is taken from item in\n+   --  previous with_clause that mentions the unit.\n+\n    procedure rv;\n    --  This is a dummy function called by the processing for pragma Reviewable.\n    --  It is there for assisting front end debugging. By placing a Reviewable\n    --  pragma in the source program, a breakpoint on rv catches this place in\n    --  the source, allowing convenient stepping to the point of interest.\n \n-   procedure Set_Unit_Name (N : Node_Id; With_Item : Node_Id);\n-   --  Place semantic information on the argument of an Elaborate/Elaborate_All\n-   --  pragma. Entity name for unit and its parents is taken from item in\n-   --  previous with_clause that mentions the unit.\n-\n    --------------\n    -- Add_Item --\n    --------------\n@@ -772,6 +779,8 @@ package body Sem_Prag is\n \n                Item_Id := Entity_Of (Item);\n \n+               Record_Possible_Body_Reference (Item, Item_Id);\n+\n                if Present (Item_Id) then\n                   if Ekind_In (Item_Id, E_Abstract_State,\n                                         E_In_Parameter,\n@@ -1645,6 +1654,7 @@ package body Sem_Prag is\n             Item_Id := Entity_Of (Item);\n \n             if Present (Item_Id) then\n+               Record_Possible_Body_Reference (Item, Item_Id);\n \n                --  A global item may denote a formal parameter of an enclosing\n                --  subprogram. Do this check first to provide a better error\n@@ -21641,6 +21651,29 @@ package body Sem_Prag is\n                        (\"& must denote an abstract state\", State, State_Id);\n                   end if;\n \n+                  --  Enforce SPARK RM (6.1.5(4)): A global item shall not\n+                  --  denote a state abstraction whose refinement is visible\n+                  --  (a state abstraction cannot be named within its enclosing\n+                  --  package's body other than in its refinement).\n+\n+                  if Has_Body_References (State_Id) then\n+                     declare\n+                        Ref : Elmt_Id;\n+                        Nod : Node_Id;\n+                     begin\n+                        Ref := First_Elmt (Body_References (State_Id));\n+                        while Present (Ref) loop\n+                           Nod := Node (Ref);\n+                           Error_Msg_N\n+                             (\"global reference to & not allowed \"\n+                              & \"(SPARK RM 6.1.5(4))\", Nod);\n+                           Error_Msg_Sloc := Sloc (State);\n+                           Error_Msg_N (\"\\refinement of & is visible#\", Nod);\n+                           Next_Elmt (Ref);\n+                        end loop;\n+                     end;\n+                  end if;\n+\n                --  The state name is illegal\n \n                else\n@@ -23296,6 +23329,27 @@ package body Sem_Prag is\n \n    end Process_Compilation_Unit_Pragmas;\n \n+   ------------------------------------\n+   -- Record_Possible_Body_Reference --\n+   ------------------------------------\n+\n+   procedure Record_Possible_Body_Reference\n+     (Item    : Node_Id;\n+      Item_Id : Entity_Id)\n+   is\n+   begin\n+      if In_Package_Body\n+        and then Ekind (Item_Id) = E_Abstract_State\n+      then\n+         if not Has_Body_References (Item_Id) then\n+            Set_Has_Body_References (Item_Id, True);\n+            Set_Body_References (Item_Id, New_Elmt_List);\n+         end if;\n+\n+         Append_Elmt (Item, Body_References (Item_Id));\n+      end if;\n+   end Record_Possible_Body_Reference;\n+\n    ------------------------------\n    -- Relocate_Pragmas_To_Body --\n    ------------------------------"}, {"sha": "bae43b97edda90a952a8fd912108c99cd0e1232a", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -72,7 +72,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatep         ^ /DATA_PREPROCESSING\n -gnateP         ^ /CATEGORIZATION_WARNINGS\n -gnateS         ^ /SCO_OUTPUT\n--gnatet         ^ /TARGET_DEPENDENT_INFO\n+-gnatet         ^ /WRITE_TARGET_DEPENDENT_INFO\n+-gnateT         ^ /READ_TARGET_DEPENDENT_INFO\n -gnateV         ^ /PARAMETER_VALIDITY_CHECK\n -gnateY         ^ /IGNORE_STYLE_CHECKS_PRAGMAS\n -gnatE          ^ /CHECKS=ELABORATION"}, {"sha": "6fc9ed0886beea4a5dce1553f309f099e71392cf", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a7c04004682aa23bf2dbcfaabac0de5b27c8a52/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=8a7c04004682aa23bf2dbcfaabac0de5b27c8a52", "patch": "@@ -2885,12 +2885,17 @@ package VMS_Data is\n    --\n    --   All compiler tables start at nnn times usual starting size.\n \n-   S_GCC_Target  : aliased constant S := \"/TARGET_DEPENDENT_INFO \"         &\n-                                             \"-gnatet\";\n-   --        /NOTARGET_DEPENDENT_INFO (D)\n-   --        /TARGET_DEPENDENT_INFO\n+   S_GCC_Target_W  : aliased constant S := \"/WRITE_TARGET_DEPENDENT_INFO=<\" &\n+                                             \"-gnatet=>\";\n+   --        /WRITE_TARGET_DEPENDENT_INFO=file\n    --\n-   --   Generate target dependent information.\n+   --   Generate target dependent information to file.\n+\n+   S_GCC_Target_R  : aliased constant S := \"/READ_TARGET_DEPENDENT_INFO=<\"  &\n+                                             \"-gnateT=>\";\n+   --        /READ_TARGET_DEPENDENT_INFO=file\n+   --\n+   --   Read target dependent information from file.\n \n    S_GCC_Trace   : aliased constant S := \"/TRACE_UNITS \"                   &\n                                             \"-gnatdc\";\n@@ -3743,7 +3748,8 @@ package VMS_Data is\n                      S_GCC_Symbol  'Access,\n                      S_GCC_Syntax  'Access,\n                      S_GCC_Table   'Access,\n-                     S_GCC_Target  'Access,\n+                     S_GCC_Target_W'Access,\n+                     S_GCC_Target_R'Access,\n                      S_GCC_Trace   'Access,\n                      S_GCC_Tree    'Access,\n                      S_GCC_Trys    'Access,"}]}