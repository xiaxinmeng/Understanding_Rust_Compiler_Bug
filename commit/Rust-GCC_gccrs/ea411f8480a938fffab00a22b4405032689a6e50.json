{"sha": "ea411f8480a938fffab00a22b4405032689a6e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0MTFmODQ4MGE5MzhmZmZhYjAwYTIyYjQ0MDUwMzI2ODlhNmU1MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-09T23:56:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-09T23:56:07Z"}, "message": "compiler: Permit \"for range x\" clauses.\n\nFixes Issue 8370.\n\nFrom-SVN: r216051", "tree": {"sha": "3d641cc1b7ab99508201c2ccffe850a875d924f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d641cc1b7ab99508201c2ccffe850a875d924f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea411f8480a938fffab00a22b4405032689a6e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea411f8480a938fffab00a22b4405032689a6e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea411f8480a938fffab00a22b4405032689a6e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea411f8480a938fffab00a22b4405032689a6e50/comments", "author": null, "committer": null, "parents": [{"sha": "3369b9193606b86677e65bc96699939fb6a8d13e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3369b9193606b86677e65bc96699939fb6a8d13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3369b9193606b86677e65bc96699939fb6a8d13e"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "d77f462ee3e110d735777dbc886cee68a1309b00", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea411f8480a938fffab00a22b4405032689a6e50/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea411f8480a938fffab00a22b4405032689a6e50/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=ea411f8480a938fffab00a22b4405032689a6e50", "patch": "@@ -3836,6 +3836,12 @@ Parse::simple_stat(bool may_be_composite_lit, bool* return_exp,\n       this->unget_token(Token::make_identifier_token(identifier, is_exported,\n \t\t\t\t\t\t     location));\n     }\n+  else if (p_range_clause != NULL && token->is_keyword(KEYWORD_RANGE))\n+    {\n+      Typed_identifier_list til;\n+      this->range_clause_decl(&til, p_range_clause);\n+      return NULL;\n+    }\n \n   Expression* exp = this->expression(PRECEDENCE_NORMAL, true,\n \t\t\t\t     may_be_composite_lit,\n@@ -5278,7 +5284,7 @@ Parse::for_clause(Expression** cond, Block** post)\n     }\n }\n \n-// RangeClause = IdentifierList ( \"=\" | \":=\" ) \"range\" Expression .\n+// RangeClause = [ IdentifierList ( \"=\" | \":=\" ) ] \"range\" Expression .\n \n // This is the := version.  It is called with a list of identifiers.\n \n@@ -5291,7 +5297,6 @@ Parse::range_clause_decl(const Typed_identifier_list* til,\n \n   p_range_clause->found = true;\n \n-  go_assert(til->size() >= 1);\n   if (til->size() > 2)\n     error_at(this->location(), \"too many variables for range clause\");\n \n@@ -5300,6 +5305,9 @@ Parse::range_clause_decl(const Typed_identifier_list* til,\n \t\t\t\t      NULL);\n   p_range_clause->range = expr;\n \n+  if (til->empty())\n+    return;\n+\n   bool any_new = false;\n \n   const Typed_identifier* pti = &til->front();\n@@ -5347,6 +5355,9 @@ Parse::range_clause_expr(const Expression_list* vals,\n   p_range_clause->range = this->expression(PRECEDENCE_NORMAL, false, false,\n \t\t\t\t\t   NULL, NULL);\n \n+  if (vals->empty())\n+    return;\n+\n   p_range_clause->index = vals->front();\n   if (vals->size() == 1)\n     p_range_clause->value = NULL;"}, {"sha": "69073b509130babccec5f3583797178986e8610c", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea411f8480a938fffab00a22b4405032689a6e50/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea411f8480a938fffab00a22b4405032689a6e50/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=ea411f8480a938fffab00a22b4405032689a6e50", "patch": "@@ -5305,8 +5305,12 @@ Statement::make_for_statement(Block* init, Expression* cond, Block* post,\n int\n For_range_statement::do_traverse(Traverse* traverse)\n {\n-  if (this->traverse_expression(traverse, &this->index_var_) == TRAVERSE_EXIT)\n-    return TRAVERSE_EXIT;\n+  if (this->index_var_ != NULL)\n+    {\n+      if (this->traverse_expression(traverse, &this->index_var_)\n+\t  == TRAVERSE_EXIT)\n+\treturn TRAVERSE_EXIT;\n+    }\n   if (this->value_var_ != NULL)\n     {\n       if (this->traverse_expression(traverse, &this->value_var_)\n@@ -5434,25 +5438,27 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n   if (iter_init != NULL)\n     body->add_statement(Statement::make_block_statement(iter_init, loc));\n \n-  Statement* assign;\n-  Expression* index_ref = Expression::make_temporary_reference(index_temp, loc);\n-  if (this->value_var_ == NULL)\n+  if (this->index_var_ != NULL)\n     {\n-      assign = Statement::make_assignment(this->index_var_, index_ref, loc);\n-    }\n-  else\n-    {\n-      Expression_list* lhs = new Expression_list();\n-      lhs->push_back(this->index_var_);\n-      lhs->push_back(this->value_var_);\n+      Statement* assign;\n+      Expression* index_ref =\n+\tExpression::make_temporary_reference(index_temp, loc);\n+      if (this->value_var_ == NULL)\n+\tassign = Statement::make_assignment(this->index_var_, index_ref, loc);\n+      else\n+\t{\n+\t  Expression_list* lhs = new Expression_list();\n+\t  lhs->push_back(this->index_var_);\n+\t  lhs->push_back(this->value_var_);\n \n-      Expression_list* rhs = new Expression_list();\n-      rhs->push_back(index_ref);\n-      rhs->push_back(Expression::make_temporary_reference(value_temp, loc));\n+\t  Expression_list* rhs = new Expression_list();\n+\t  rhs->push_back(index_ref);\n+\t  rhs->push_back(Expression::make_temporary_reference(value_temp, loc));\n \n-      assign = Statement::make_tuple_assignment(lhs, rhs, loc);\n+\t  assign = Statement::make_tuple_assignment(lhs, rhs, loc);\n+\t}\n+      body->add_statement(assign);\n     }\n-  body->add_statement(assign);\n \n   body->add_statement(Statement::make_block_statement(this->statements_, loc));\n "}]}