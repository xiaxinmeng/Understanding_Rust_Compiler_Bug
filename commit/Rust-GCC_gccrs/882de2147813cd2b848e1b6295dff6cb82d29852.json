{"sha": "882de2147813cd2b848e1b6295dff6cb82d29852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyZGUyMTQ3ODEzY2QyYjg0OGUxYjYyOTVkZmY2Y2I4MmQyOTg1Mg==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2014-11-13T09:46:53Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2014-11-13T09:46:53Z"}, "message": "cp-tree.h (cp_build_function_call): Remove prototype.\n\n2014-11-13  Kai Tietz  <ktietz@redhat.com>\n\n\t* cp-tree.h (cp_build_function_call): Remove prototype.\n\t(cp_build_addr_expr_strict): Likewise.\n\t(build_typed_address): Likewise.\n\t* typeck.c (build_typed_address): Removed.\n\t(cp_build_addr_expr_strict): Make static.\n\t(cp_build_function_call): Likewise.\n\nFrom-SVN: r217469", "tree": {"sha": "49c1dabeeb585b9033230a72ece038921f5754dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49c1dabeeb585b9033230a72ece038921f5754dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/882de2147813cd2b848e1b6295dff6cb82d29852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882de2147813cd2b848e1b6295dff6cb82d29852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882de2147813cd2b848e1b6295dff6cb82d29852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882de2147813cd2b848e1b6295dff6cb82d29852/comments", "author": null, "committer": null, "parents": [{"sha": "152914cda7c44225b68712a1f76be9ec31c42703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152914cda7c44225b68712a1f76be9ec31c42703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152914cda7c44225b68712a1f76be9ec31c42703"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "d4351e7b87c59dcbd1800bce7789c256de3fa3a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=882de2147813cd2b848e1b6295dff6cb82d29852", "patch": "@@ -1,3 +1,12 @@\n+2014-11-13  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* cp-tree.h (cp_build_function_call): Remove prototype.\n+\t(cp_build_addr_expr_strict): Likewise.\n+\t(build_typed_address): Likewise.\n+\t* typeck.c (build_typed_address): Removed.\n+\t(cp_build_addr_expr_strict): Make static.\n+\t(cp_build_function_call): Likewise.\n+\n 2014-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 1510"}, {"sha": "7a1a0f74b02da3d652d078bbe99e60abd91ab16b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=882de2147813cd2b848e1b6295dff6cb82d29852", "patch": "@@ -6136,7 +6136,6 @@ extern tree build_array_ref\t\t\t(location_t, tree, tree);\n extern tree cp_build_array_ref\t\t\t(location_t, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree, tsubst_flags_t);\n-extern tree cp_build_function_call              (tree, tree, tsubst_flags_t);\n extern tree cp_build_function_call_nary         (tree, tsubst_flags_t, ...)\n \t\t\t\t\t\tATTRIBUTE_SENTINEL;\n extern tree cp_build_function_call_vec\t\t(tree, vec<tree, va_gc> **,\n@@ -6152,7 +6151,6 @@ extern tree build_x_unary_op\t\t\t(location_t,\n \t\t\t\t\t\t enum tree_code, tree,\n                                                  tsubst_flags_t);\n extern tree cp_build_addr_expr\t\t\t(tree, tsubst_flags_t);\n-extern tree cp_build_addr_expr_strict\t\t(tree, tsubst_flags_t);\n extern tree cp_build_unary_op                   (enum tree_code, tree, int, \n                                                  tsubst_flags_t);\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n@@ -6212,7 +6210,6 @@ extern tree build_x_vec_perm_expr               (location_t,\n extern tree build_simple_component_ref\t\t(tree, tree);\n extern tree build_ptrmemfunc_access_expr\t(tree, tree);\n extern tree build_address\t\t\t(tree);\n-extern tree build_typed_address\t\t\t(tree, tree);\n extern tree build_nop\t\t\t\t(tree, tree);\n extern tree non_reference\t\t\t(tree);\n extern tree lookup_anon_field\t\t\t(tree, tree);"}, {"sha": "184363e64465430ce8b7abe81acf3531cfb8b898", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882de2147813cd2b848e1b6295dff6cb82d29852/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=882de2147813cd2b848e1b6295dff6cb82d29852", "patch": "@@ -42,6 +42,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-ubsan.h\"\n #include \"params.h\"\n \n+static tree cp_build_addr_expr_strict (tree, tsubst_flags_t);\n+static tree cp_build_function_call (tree, tree, tsubst_flags_t);\n static tree pfn_from_ptrmemfunc (tree);\n static tree delta_from_ptrmemfunc (tree);\n static tree convert_for_assignment (tree, tree, impl_conv_rhs, tree, int,\n@@ -3400,7 +3402,7 @@ build_function_call_vec (location_t /*loc*/, vec<location_t> /*arg_loc*/,\n \n /* Build a function call using a tree list of arguments.  */\n \n-tree\n+static tree\n cp_build_function_call (tree function, tree params, tsubst_flags_t complain)\n {\n   vec<tree, va_gc> *vec;\n@@ -5322,19 +5324,6 @@ build_address (tree t)\n   return t;\n }\n \n-/* Returns the address of T with type TYPE.  */\n-\n-tree\n-build_typed_address (tree t, tree type)\n-{\n-  if (error_operand_p (t) || !cxx_mark_addressable (t))\n-    return error_mark_node;\n-  t = build_fold_addr_expr_with_type (t, type);\n-  if (TREE_CODE (t) != ADDR_EXPR)\n-    t = rvalue (t);\n-  return t;\n-}\n-\n /* Return a NOP_EXPR converting EXPR to TYPE.  */\n \n tree\n@@ -5628,7 +5617,7 @@ cp_build_addr_expr (tree arg, tsubst_flags_t complain)\n \n /* Take the address of ARG, but only if it's an lvalue.  */\n \n-tree\n+static tree\n cp_build_addr_expr_strict (tree arg, tsubst_flags_t complain)\n {\n   return cp_build_addr_expr_1 (arg, 1, complain);"}]}