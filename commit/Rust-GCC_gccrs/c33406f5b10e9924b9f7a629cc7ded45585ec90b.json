{"sha": "c33406f5b10e9924b9f7a629cc7ded45585ec90b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzNDA2ZjViMTBlOTkyNGI5ZjdhNjI5Y2M3ZGVkNDU1ODVlYzkwYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-02T16:44:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-02T16:44:04Z"}, "message": "lto-streamer.c (lto_streamer_cache_insert_1, [...]): Use pointer map instead of hashtable.\n\n\t* lto-streamer.c (lto_streamer_cache_insert_1,\n\tlto_streamer_cache_lookup, lto_streamer_cache_create,\n\tlto_streamer_cache_delete): Use pointer map instead of hashtable.\n\t* lto-streamer.h (lto_streamer_cache_d): Turn node_map into pointer_map.\n\nFrom-SVN: r173259", "tree": {"sha": "7e48f380b12a761366bd63d9aaa630f22481114f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e48f380b12a761366bd63d9aaa630f22481114f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c33406f5b10e9924b9f7a629cc7ded45585ec90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33406f5b10e9924b9f7a629cc7ded45585ec90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33406f5b10e9924b9f7a629cc7ded45585ec90b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33406f5b10e9924b9f7a629cc7ded45585ec90b/comments", "author": null, "committer": null, "parents": [{"sha": "95c952c53231c402909d9342ee7ec1bcda2509e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c952c53231c402909d9342ee7ec1bcda2509e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c952c53231c402909d9342ee7ec1bcda2509e7"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "c7165f840d2f3c88c2260a4dc0a171f294938f20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c33406f5b10e9924b9f7a629cc7ded45585ec90b", "patch": "@@ -1,3 +1,10 @@\n+2011-05-02   Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer.c (lto_streamer_cache_insert_1,\n+\tlto_streamer_cache_lookup, lto_streamer_cache_create,\n+\tlto_streamer_cache_delete): Use pointer map instead of hashtable.\n+\t* lto-streamer.h (lto_streamer_cache_d): Turn node_map into pointer_map.\n+\n 2011-05-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/m68k/genopt.sh, config/m68k/m68k-isas.def,"}, {"sha": "be54305d2c5ed7ed8650efa32e4e8cbbd0325947", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=c33406f5b10e9924b9f7a629cc7ded45585ec90b", "patch": "@@ -348,26 +348,20 @@ lto_streamer_cache_insert_1 (struct lto_streamer_cache_d *cache,\n \t\t\t     bool insert_at_next_slot_p)\n {\n   void **slot;\n-  struct tree_int_map d_entry, *entry;\n   unsigned ix;\n   bool existed_p;\n \n   gcc_assert (t);\n \n-  d_entry.base.from = t;\n-  slot = htab_find_slot (cache->node_map, &d_entry, INSERT);\n-  if (*slot == NULL)\n+  slot = pointer_map_insert (cache->node_map, t);\n+  if (!*slot)\n     {\n       /* Determine the next slot to use in the cache.  */\n       if (insert_at_next_slot_p)\n \tix = VEC_length (tree, cache->nodes);\n       else\n \tix = *ix_p;\n-\n-      entry = (struct tree_int_map *)pool_alloc (cache->node_map_entries);\n-      entry->base.from = t;\n-      entry->to = ix;\n-      *slot = entry;\n+       *slot = (void *)(size_t) (ix + 1);\n \n       lto_streamer_cache_add_to_node_array (cache, ix, t);\n \n@@ -376,8 +370,7 @@ lto_streamer_cache_insert_1 (struct lto_streamer_cache_d *cache,\n     }\n   else\n     {\n-      entry = (struct tree_int_map *) *slot;\n-      ix = entry->to;\n+      ix = (size_t) *slot - 1;\n \n       if (!insert_at_next_slot_p && ix != *ix_p)\n \t{\n@@ -442,14 +435,12 @@ lto_streamer_cache_lookup (struct lto_streamer_cache_d *cache, tree t,\n \t\t\t   unsigned *ix_p)\n {\n   void **slot;\n-  struct tree_int_map d_slot;\n   bool retval;\n   unsigned ix;\n \n   gcc_assert (t);\n \n-  d_slot.base.from = t;\n-  slot = htab_find_slot (cache->node_map, &d_slot, NO_INSERT);\n+  slot = pointer_map_contains  (cache->node_map, t);\n   if (slot == NULL)\n     {\n       retval = false;\n@@ -458,7 +449,7 @@ lto_streamer_cache_lookup (struct lto_streamer_cache_d *cache, tree t,\n   else\n     {\n       retval = true;\n-      ix = ((struct tree_int_map *) *slot)->to;\n+      ix = (size_t) *slot - 1;\n     }\n \n   if (ix_p)\n@@ -608,11 +599,7 @@ lto_streamer_cache_create (void)\n \n   cache = XCNEW (struct lto_streamer_cache_d);\n \n-  cache->node_map = htab_create (101, tree_int_map_hash, tree_int_map_eq, NULL);\n-\n-  cache->node_map_entries = create_alloc_pool (\"node map\",\n-\t\t\t\t\t       sizeof (struct tree_int_map),\n-\t\t\t\t\t       100);\n+  cache->node_map = pointer_map_create ();\n \n   /* Load all the well-known tree nodes that are always created by\n      the compiler on startup.  This prevents writing them out\n@@ -636,8 +623,7 @@ lto_streamer_cache_delete (struct lto_streamer_cache_d *c)\n   if (c == NULL)\n     return;\n \n-  htab_delete (c->node_map);\n-  free_alloc_pool (c->node_map_entries);\n+  pointer_map_destroy (c->node_map);\n   VEC_free (tree, heap, c->nodes);\n   free (c);\n }"}, {"sha": "3d87e18a825a84d4cd35f13d848a34fc3bc2e2ed", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33406f5b10e9924b9f7a629cc7ded45585ec90b/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=c33406f5b10e9924b9f7a629cc7ded45585ec90b", "patch": "@@ -346,10 +346,7 @@ typedef void (lto_free_section_data_f) (struct lto_file_decl_data *,\n struct lto_streamer_cache_d\n {\n   /* The mapping between tree nodes and slots into the nodes array.  */\n-  htab_t node_map;\n-\n-  /* Node map to store entries into.  */\n-  alloc_pool node_map_entries;\n+  struct pointer_map_t *node_map;\n \n   /* The nodes pickled so far.  */\n   VEC(tree,heap) *nodes;"}]}