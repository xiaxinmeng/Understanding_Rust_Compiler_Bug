{"sha": "fdf448f76bd08212cd2a78425251331099e98847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmNDQ4Zjc2YmQwODIxMmNkMmE3ODQyNTI1MTMzMTA5OWU5ODg0Nw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-06-08T22:12:28Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-06-08T22:12:28Z"}, "message": "re PR libgcj/2874 (libjava testsuite disk space usage)\n\n\tFix for PR libgcj/2874:\n\t* libjava.mauve/mauve.exp (gcj_run_mauve_tests): New proc.\n\t(test_mauve): Return 0 on failure.\n\t* lib/libjava.exp (test_libjava_from_source): Remove generated\n\tfiles if test is successful.\n\t(test_libjava_from_javac): Likewise.\n\t(gcj_cleanup): New proc.\n\nFrom-SVN: r43050", "tree": {"sha": "1b75247782c6555483875b7435c3cc97c090fd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b75247782c6555483875b7435c3cc97c090fd23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf448f76bd08212cd2a78425251331099e98847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf448f76bd08212cd2a78425251331099e98847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf448f76bd08212cd2a78425251331099e98847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf448f76bd08212cd2a78425251331099e98847/comments", "author": null, "committer": null, "parents": [{"sha": "e68e310815a8ef2fa1e9ac966aeabbe0fd9c81cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68e310815a8ef2fa1e9ac966aeabbe0fd9c81cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68e310815a8ef2fa1e9ac966aeabbe0fd9c81cf"}], "stats": {"total": 112, "additions": 89, "deletions": 23}, "files": [{"sha": "71374659e630f6b07c0861e1850e9ca0f57e2caf", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=fdf448f76bd08212cd2a78425251331099e98847", "patch": "@@ -1,3 +1,13 @@\n+2001-06-08  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR libgcj/2874:\n+\t* libjava.mauve/mauve.exp (gcj_run_mauve_tests): New proc.\n+\t(test_mauve): Return 0 on failure.\n+\t* lib/libjava.exp (test_libjava_from_source): Remove generated\n+\tfiles if test is successful.\n+\t(test_libjava_from_javac): Likewise.\n+\t(gcj_cleanup): New proc.\n+\n 2001-06-05  Jeff Sturm  <jsturm@one-point.com>\n \n \t* lib/libjava.exp (libjava_arguments): Build with `-no-install'"}, {"sha": "f6947ccdf3d216afe259192f529b5269ec2a1333", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=fdf448f76bd08212cd2a78425251331099e98847", "patch": "@@ -188,6 +188,21 @@ proc libjava_find_lib {dir name} {\n     return \"\"\n }\n \n+# Remove a bunch of files.\n+proc gcj_cleanup {args} {\n+    foreach file $args {\n+\tif {[string match *.o $file]} {\n+\t    verbose \"removing [file rootname $file].lo\"\n+\t    file delete -force [file rootname $file].lo\n+\t}\n+\tfile delete -force -- $file\n+\tverbose \"removing $file\"\n+    }\n+    # It is simplest to do this instead of trying to figure out what\n+    # bits in .libs ought to be removed.\n+    catch {system \"rm -rf .libs\"}\n+}\n+\n # Compute arguments needed for compiler.  MODE is a libtool mode:\n # either compile or link.\n proc libjava_arguments {{mode compile}} {\n@@ -383,6 +398,8 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \tset errname \"$errname $compile_args\"\n     }\n \n+    set removeList [list $executable]\n+\n     set x [prune_warnings \\\n \t     [libjava_tcompile $srcfile \"$executable\" $target $args]]\n     if {[info exists opts(xfail-gcj)]} {\n@@ -393,6 +410,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \n \tif {[info exists opts(shouldfail)]} {\n \t    pass \"$errname compilation from source\"\n+\t    eval gcj_cleanup $removeList\n \t    return\n \t}\n \n@@ -419,9 +437,11 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \t    untested \"$errname execution from source compiled test\"\n \t    untested \"$errname output from source compiled test\"\n \t}\n+\teval gcj_cleanup $removeList\n \treturn\n     }\n     if {[info exists opts(no-link)]} {\n+\teval gcj_cleanup $removeList\n \treturn\n     }\n \n@@ -467,6 +487,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n     if { $passed == 1 } {\n \tpass \"$errname output from source compiled test\"\n+\teval gcj_cleanup $removeList\n     } else {\n \tclone_output \"expected was $expected\"\n \tclone_output \"output was $output\"\n@@ -542,6 +563,8 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n     pass \"$errname byte compilation\"\n \n+    set removeList {}\n+\n     # Find name to use for --main, and name of all class files.\n     set jvscan [find_jvscan]\n     verbose \"jvscan is $jvscan\"\n@@ -573,6 +596,8 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tlappend class_files $objdir/$file.class\n     }\n \n+    eval lappend removeList $class_files\n+\n     # Usually it is an error for a test program not to have a `main'\n     # method.  However, for no-exec tests it is ok.  Treat no-link\n     # like no-exec here.\n@@ -615,18 +640,20 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t    set executable [file rootname [file tail $c_file]].o\n \t    set x [prune_warnings \\\n \t\t     [libjava_tcompile $c_file \"$executable\" $type $args]]\n+\t    lappend removeList $executable\n \t    if {$x != \"\"} {\n \t\tbreak\n \t    }\n \t}\n     } else {\n-\t# This is no evil: we de-listify CLASS_FILES so that we can\n+\t# This is so evil: we de-listify CLASS_FILES so that we can\n \t# turn around and quote the `$' in it for the shell.  I really\n \t# hate DejaGNU.  It is so !@#$!@# unpredictable.\n \tset hack \"\"\n \tforeach stupid $class_files {\n \t    set hack \"$hack $stupid\"\n \t}\n+\tlappend removeList $executable\n \tset x [prune_warnings \\\n \t\t [libjava_tcompile $hack \"$executable\" $type $args]]\n     }\n@@ -650,6 +677,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t    untested \"$errname execution from bytecode->native test\"\n \t    untested \"$errname output from bytecode->native test\"\n \t}\n+\teval gcj_cleanup $removeList\n \treturn\n     }\n \n@@ -662,7 +690,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     $status \"$errname execution from bytecode->native test\"\n     if { $status != \"pass\" } {\n \tuntested \"$errname output from bytecode->native test\"\n-\treturn;\n+\treturn\n     }\n \n     verbose \"resultfile is $resultfile\"\n@@ -695,6 +723,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n     if { $passed == 1 } {\n \tpass \"$errname output from bytecode->native test\"\n+\teval gcj_cleanup $removeList\n     } else {\n \tclone_output \"expected was $expected\"\n \tclone_output \"output was $output\""}, {"sha": "649e451a928bcd13577adc0e071f13aafe5ad622", "filename": "libjava/testsuite/libjava.mauve/mauve.exp", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf448f76bd08212cd2a78425251331099e98847/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp?ref=fdf448f76bd08212cd2a78425251331099e98847", "patch": "@@ -52,13 +52,14 @@ proc mauve_compute_uses {aName} {\n   return [lsort [array names uses]]\n }\n \n-# Run all the Mauve tests.\n+# Run all the Mauve tests.  Return 1 on success, 0 on any failure.  If\n+# the tests are skipped, that is treated like success.\n proc test_mauve {} {\n   global srcdir objdir subdir env\n \n   if {! [info exists env(MAUVEDIR)]} then {\n     verbose \"MAUVEDIR not set; not running Mauve tests\"\n-    return\n+    return 1\n   }\n \n   # Run in subdir so we don't overwrite our own Makefile.\n@@ -95,7 +96,7 @@ proc test_mauve {} {\n   } msg]} then {\n     fail \"Mauve configure\"\n     verbose \"configure failed with $msg\"\n-    return\n+    return 0\n   }\n   pass \"Mauve configure\"\n \n@@ -114,14 +115,14 @@ proc test_mauve {} {\n   } msg]} then {\n     fail \"Mauve build\"\n     verbose \"build failed with $msg\"\n-    return\n+    return 0\n   }\n   pass \"Mauve build\"\n \n   set srcfile $full_srcdir/$subdir/DejaGNUTestHarness.java\n   if {! [bytecompile_file $srcfile [pwd] $env(MAUVEDIR):[pwd]]} then {\n     fail \"Compile DejaGNUTestHarness.java\"\n-    return\n+    return 0\n   }\n   pass \"Compile DejaGNUTestHarness.java\"\n \n@@ -149,9 +150,10 @@ proc test_mauve {} {\n     lappend objlist $obj\n   }\n   if {! $ok} then {\n-    return\n+    return 0\n   }\n \n+  set proc_ok 1\n   set Executable DejaGNUTestHarness\n   foreach file $choices {\n     # Turn `java/lang/Foo.java' into `java.lang.Foo'.\n@@ -174,12 +176,14 @@ proc test_mauve {} {\n       }\n     }\n     if {! $ok} then {\n+      set proc_ok 0\n       continue\n     }\n \n     set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n \t\t\t     $Executable executable $link_args]]\n     if {$x != \"\"} then {\n+      set proc_ok 0\n       fail \"Link for $class\"\n       continue\n     }\n@@ -197,23 +201,28 @@ proc test_mauve {} {\n \tif {$what == \"PASS\" || $what == \"XPASS\"} then {\n \t  pass $msg\n \t} else {\n+\t  set proc_ok 0\n \t  fail $msg\n \t}\n       }\n     }\n   }\n+\n+  return $proc_ok\n }\n \n # Run all the Mauve tests in a sim environment.  In this case, the\n # program cannot use argv[] because there's no way to pass in the\n # command line, so tha name of the class to test is substituted by\n-# patching the source of the DejaGNUTestHarness.\n+# patching the source of the DejaGNUTestHarness.  Return 1 on success,\n+# 0 on any failure.  If the tests are skipped, that is treated like\n+# success.\n proc test_mauve_sim {} {\n   global srcdir subdir env\n \n   if {! [info exists env(MAUVEDIR)]} then {\n     verbose \"MAUVEDIR not set; not running Mauve tests\"\n-    return\n+    return 1\n   }\n \n   # Run in subdir so we don't overwrite our own Makefile.\n@@ -230,7 +239,7 @@ proc test_mauve_sim {} {\n   } msg]} then {\n     fail \"Mauve configure\"\n     verbose \"configure failed with $msg\"\n-    return\n+    return 0\n   }\n   pass \"Mauve configure\"\n \n@@ -249,7 +258,7 @@ proc test_mauve_sim {} {\n   } msg]} then {\n     fail \"Mauve build\"\n     verbose \"build failed with $msg\"\n-    return\n+    return 0\n   }\n   pass \"Mauve build\"\n \n@@ -279,11 +288,12 @@ proc test_mauve_sim {} {\n     lappend objlist $obj\n   }\n   if {! $ok} then {\n-    return\n+    return 0\n   }\n \n   lappend objlist gnu/testlet/DejaGNUTestHarness.o\n \n+  set proc_ok 1\n   set Executable DejaGNUTestHarness\n   foreach file $choices {\n     # Turn `java/lang/Foo.java' into `java.lang.Foo'.\n@@ -307,6 +317,7 @@ proc test_mauve_sim {} {\n       }\n     }\n     if {! $ok} then {\n+      set proc_ok 0\n       continue\n     }\n \n@@ -328,20 +339,22 @@ proc test_mauve_sim {} {\n     if {! [bytecompile_file [pwd]/gnu/testlet/$srcfile [pwd]/gnu/testlet \\\n \t       $env(MAUVEDIR):[pwd]]} then {\n \tfail \"Compile DejaGNUTestHarness.java\"\n-\treturn\n+\treturn 0\n     }\n \n     set x [prune_warnings \\\n \t     [target_compile gnu/testlet/DejaGNUTestHarness.class \\\n \t\tgnu/testlet/DejaGNUTestHarness.o object $compile_args]]\n     if {$x != \"\"} then {\n \tfail \"Compile DejaGNUTestHarness.java\"\n+        set proc_ok 0\n \tcontinue\n-      }\n+    }\n \n     set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n \t\t\t     $Executable executable $link_args]]\n     if {$x != \"\"} then {\n+      set proc_ok 0\n       fail \"Link for $class\"\n       continue\n     }\n@@ -359,19 +372,33 @@ proc test_mauve_sim {} {\n \tif {$what == \"PASS\" || $what == \"XPASS\"} then {\n \t  pass $msg\n \t} else {\n+\t  set proc_ok 0\n \t  fail $msg\n \t}\n       }\n     }\n   }\n+\n+  return $proc_ok\n }\n \n-# The test_mauve* procs will change the current directory.  It's\n-# simpler to fix this up here than to keep track of this in the procs.\n-set here [pwd]\n-if { [board_info target exists is_simulator] } {\n-    test_mauve_sim\n-} else {\n-    test_mauve\n+proc gcj_run_mauve_tests {} {\n+  # The test_mauve* procs will change the current directory.  It's\n+  # simpler to fix this up here than to keep track of this in the\n+  # procs.\n+  set here [pwd]\n+  if { [board_info target exists is_simulator] } {\n+    set r [test_mauve_sim]\n+  } else {\n+    set r [test_mauve]\n+  }\n+  cd $here\n+\n+  if {$r} {\n+    # No need to keep the build around.  FIXME: this knows how the\n+    # tests work.  This whole file could use a rewrite.\n+    system \"rm -rf mauve-build\"\n+  }\n }\n-cd $here\n+\n+gcj_run_mauve_tests"}]}