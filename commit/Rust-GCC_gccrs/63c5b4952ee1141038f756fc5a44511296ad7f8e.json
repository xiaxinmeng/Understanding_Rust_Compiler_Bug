{"sha": "63c5b4952ee1141038f756fc5a44511296ad7f8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjNWI0OTUyZWUxMTQxMDM4Zjc1NmZjNWE0NDUxMTI5NmFkN2Y4ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-04T19:37:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-04T19:37:19Z"}, "message": "defaults.h (TARGET_DECLSPEC): New macro.\n\n\t* defaults.h (TARGET_DECLSPEC): New macro.\n\t* c-cppbuiltin.c (c_cpp_builtins): Handle TARGET_DECLSPEC.\n\t* config/arm/pe.h (SUBTARGET_CPP_SPEC): Remove __declspec support.\n\t* config/arm/symbian. (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n\t* config/i386/beof-elf.h (TARGET_OS_CPP_BUILTINS): Remove\n\t__declspec support.\n\t(TARGET_DECLSPEC): Define.\n\t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Remove\n\t__declspec support.\n\t* config/i386/i386-interix.h (TARGET_OS_CPP_BUILTINS): Remove\n\t__declspec support.\n\t(TARGET_DECLSPEC): Define.\n\t* config/mcore/mcore.h (TARGET_CPU_CPP_BUILTINS): Remove\n\t__declspec support.\n\t* config/sh/symbian-pre.h (SUBTARGET_CPP_SPEC): Remove __declspec\n\tsupport.\n\t* doc/tm.texi (TARGET_DECLSPEC): Document.\n\n\t* doc/extend.texi: Fix typo in comment.\n\nFrom-SVN: r85571", "tree": {"sha": "3e625b8f05cee8c131162ddd24141215d432a989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e625b8f05cee8c131162ddd24141215d432a989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63c5b4952ee1141038f756fc5a44511296ad7f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c5b4952ee1141038f756fc5a44511296ad7f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c5b4952ee1141038f756fc5a44511296ad7f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c5b4952ee1141038f756fc5a44511296ad7f8e/comments", "author": null, "committer": null, "parents": [{"sha": "564076f545d934c127dcef53c0e7c60e199cf55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564076f545d934c127dcef53c0e7c60e199cf55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564076f545d934c127dcef53c0e7c60e199cf55e"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "0461d107dffc12320d3a0bd84ef2398bdfc84fbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -1,3 +1,25 @@\n+2004-08-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* defaults.h (TARGET_DECLSPEC): New macro.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Handle TARGET_DECLSPEC.\n+\t* config/arm/pe.h (SUBTARGET_CPP_SPEC): Remove __declspec support.\n+\t* config/arm/symbian. (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n+\t* config/i386/beof-elf.h (TARGET_OS_CPP_BUILTINS): Remove\n+\t__declspec support.\n+\t(TARGET_DECLSPEC): Define.\n+\t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Remove\n+\t__declspec support.\n+\t* config/i386/i386-interix.h (TARGET_OS_CPP_BUILTINS): Remove\n+\t__declspec support.\n+\t(TARGET_DECLSPEC): Define.\n+\t* config/mcore/mcore.h (TARGET_CPU_CPP_BUILTINS): Remove\n+\t__declspec support.\n+\t* config/sh/symbian-pre.h (SUBTARGET_CPP_SPEC): Remove __declspec\n+\tsupport.\n+\t* doc/tm.texi (TARGET_DECLSPEC): Document.\n+\n+\t* doc/extend.texi: Fix typo in comment.\n+\n 2004-08-04  Paul Brook  <paul@codesourcery.com>\n \n \t* target-def.h (TARGET_CXX_CDTOR_RETURNS_THIS): Define."}, {"sha": "441a38e3b8c1f58d656eb4b4d96e91f749e83db4", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -426,6 +426,15 @@ c_cpp_builtins (cpp_reader *pfile)\n   TARGET_CPU_CPP_BUILTINS ();\n   TARGET_OS_CPP_BUILTINS ();\n   TARGET_OBJFMT_CPP_BUILTINS ();\n+\n+  /* Support the __declspec keyword by turning them into attributes.\n+     Note that the current way we do this may result in a collision\n+     with predefined attributes later on.  This can be solved by using\n+     one attribute, say __declspec__, and passing args to it.  The\n+     problem with that approach is that args are not accumulated: each\n+     new appearance would clobber any existing args.  */\n+  if (TARGET_DECLSPEC)\n+    builtin_define (\"__declspec(x)=__attribute__((x))\");\n }\n \n /* Pass an object-like macro.  If it doesn't lie in the user's"}, {"sha": "7db549e68f31390106d3baac92f798b0540422f8", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -42,15 +42,8 @@\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: naked, dllimport, and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n #undef  SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"-D__pe__ -D__declspec(x)=__attribute__((x))\"\n+#define SUBTARGET_CPP_SPEC \"-D__pe__\"\n \n \n /* Experimental addition for pr 7885."}, {"sha": "2f8320de99e2d35bf8ed486882edcd3399459163", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -30,7 +30,7 @@\n    \"memmove\".  We cannot simply set flag_no_builtin in arm.c because\n    (a) flag_no_builtin is not declared in language-independent code,\n    and (b) that would prevent users from explicitly overriding the\n-   default with -fno-builtin, which may sometimes be useful.\n+   default with -fbuiltin, which may sometimes be useful.\n \n    Make all symbols hidden by default.  Symbian OS expects that all\n    exported symbols will be explicitly marked with\n@@ -48,3 +48,6 @@\n #define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} \"\t\t\\\n   \"%{static:-Bstatic} %{shared:-shared} %{symbolic:-Bsymbolic} \"\t\\\n   \"-X\"\n+\n+/* Support the \"dllimport\" attribute.  */\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1"}, {"sha": "b0de9bba834c40cfa48a78af4018978c77bc7508", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -55,6 +55,8 @@ Boston, MA 02111-1307, USA.  */\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 16\n \n+#define TARGET_DECLSPEC 1\n+\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -63,7 +65,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"_X86_\");\t\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tbuiltin_assert (\"system=beos\");\t\t\t\t\t\\\n \tif (flag_pic)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\"}, {"sha": "9c2e22aa706cf3dd0587b08795e9b7d25b7a5785", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -72,14 +72,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define MAYBE_UWIN_CPP_BUILTINS() /* Nothing.  */\n \n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: dllimport and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -88,7 +80,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n \tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tif (!flag_iso)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\"}, {"sha": "4119aa2d184946e5423e68350a4eb5e12e0a7696", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -54,6 +54,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_LOAD_ADDR(loc, reg)   \"     leal \" #loc \",\" #reg \"\\n\"\n \n+#define TARGET_DECLSPEC 1\n+\n /* cpp handles __STDC__ */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -64,7 +66,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\t\t\t\\\n \tbuiltin_assert (\"system=interix\");\t\t\t\t\\\n \tif (preprocessing_asm_p ())\t\t\t\t\t\\"}, {"sha": "dde4e093c50a9c94de22ebbe3814c34aae50c2a8", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -35,19 +35,11 @@\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: dllexport and dllimport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t  \\\n   do\t\t\t\t\t\t\t\t\t  \\\n     {\t\t\t\t\t\t\t\t\t  \\\n       builtin_define (\"__mcore__\");\t\t\t\t\t  \\\n       builtin_define (\"__MCORE__\");\t\t\t\t\t  \\\n-      builtin_define (\"__declspec(x)=__attribute__((x))\");\t\t  \\\n       if (TARGET_LITTLE_END)\t\t\t\t\t\t  \\\n         builtin_define (\"__MCORELE__\");\t\t\t\t\t  \\\n       else\t\t\t\t\t\t\t\t  \\"}, {"sha": "44fb4a939e288b494c2307bff54cecf8da30e9bb", "filename": "gcc/config/sh/symbian-pre.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -27,14 +27,7 @@\n /* Default to using the Renesas ABI.  */\n #define TARGET_ABI_DEFAULT\tRENESAS_BIT\n \n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: naked, dllimport, and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n-#define SUBTARGET_CPP_SPEC \"-D__declspec(x)=__attribute__((x))\"\n+#define SUBTARGET_CPP_SPEC \"\"\n \n /* Get tree.c to declare merge_dllimport_decl_attributes().  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES"}, {"sha": "3cd779ca29dccde83aa1b5dbb261720e269ab460", "filename": "gcc/defaults.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -415,6 +415,16 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define PIC_OFFSET_TABLE_REGNUM INVALID_REGNUM\n #endif\n \n+#ifndef TARGET_DECLSPEC\n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+/* If the target supports the \"dllimport\" attribute, users are\n+   probably used to the \"__declspec\" syntax.  */\n+#define TARGET_DECLSPEC 1\n+#else\n+#define TARGET_DECLSPEC 0\n+#endif\n+#endif\n+\n /* By default, the preprocessor should be invoked the same way in C++\n    as in C.  */\n #ifndef CPLUSPLUS_CPP_SPEC"}, {"sha": "1b4b76b569f9efd6e3a13dc8d74d31d5f8c49a87", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -2177,7 +2177,7 @@ int i __attribute__ ((visibility (\"hidden\")));\n See the ELF gABI for complete details, but the short story is:\n \n @table @dfn\n-@c keep this list of visibilies in alphabetical order.\n+@c keep this list of visibilities in alphabetical order.\n \n @item default\n Default visibility is the normal case for ELF.  This value is"}, {"sha": "2a0147cfd4de0054b161cf625cd6e20aae21b504", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5b4952ee1141038f756fc5a44511296ad7f8e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=63c5b4952ee1141038f756fc5a44511296ad7f8e", "patch": "@@ -8346,6 +8346,15 @@ as the expansion of @code{TARGET_MERGE_DECL_ATTRIBUTES}.  This is done\n in @file{i386/cygwin.h} and @file{i386/i386.c}, for example.\n @end deftypefn\n \n+@defmac TARGET_DECLSPEC\n+Define this macro to a non-zero value if you want to treat\n+@code{__declspec(X)} as equivalent to @code{__attribute((X))}.  By\n+default, this behavior is enabled only for targets that define\n+@code{TARGET_DLLIMPORT_DECL_ATTRIBUTES}.  The current implementation\n+of @code{__declspec} is via a built-in macro, but you should not rely\n+on this implementation detail.\n+@end defmac\n+\n @deftypefn {Target Hook} void TARGET_INSERT_ATTRIBUTES (tree @var{node}, tree *@var{attr_ptr})\n Define this target hook if you want to be able to add attributes to a decl\n when it is being created.  This is normally useful for back ends which"}]}