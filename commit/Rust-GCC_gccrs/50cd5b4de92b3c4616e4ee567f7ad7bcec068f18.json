{"sha": "50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjZDViNGRlOTJiM2M0NjE2ZTRlZTU2N2Y3YWQ3YmNlYzA2OGYxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-26T09:44:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-26T09:44:01Z"}, "message": "[multiple changes]\n\n2012-04-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\n2012-04-26  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_aggr.adb, exp_pakd.adb (Setup_Inline_Packed_Array_Reference,\n\tPacked_Array_Aggregate_Handled.Get_Component_Val):\n\tReverse bit numbering within PAT when Reverse_Storage_Order\n\tapplies to the enclosing record.\n\n2012-04-26  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Improve error message for\n\tScalar_Storage_Order inconsistent with Bit_Order.\n\nFrom-SVN: r186865", "tree": {"sha": "db5a7bbfe11d0e117ba306db000ae772a5fbd187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5a7bbfe11d0e117ba306db000ae772a5fbd187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/comments", "author": null, "committer": null, "parents": [{"sha": "851634c76df50c39045cfa3f2aabe02d7ad5203b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851634c76df50c39045cfa3f2aabe02d7ad5203b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851634c76df50c39045cfa3f2aabe02d7ad5203b"}], "stats": {"total": 143, "additions": 108, "deletions": 35}, "files": [{"sha": "53c3818b0bf8ff5b671a5f4031331119a1fff5b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "patch": "@@ -1,3 +1,19 @@\n+2012-04-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\n+2012-04-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_aggr.adb, exp_pakd.adb (Setup_Inline_Packed_Array_Reference,\n+\tPacked_Array_Aggregate_Handled.Get_Component_Val):\n+\tReverse bit numbering within PAT when Reverse_Storage_Order\n+\tapplies to the enclosing record.\n+\n+2012-04-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Improve error message for\n+\tScalar_Storage_Order inconsistent with Bit_Order.\n+\n 2012-04-25  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch9.adb: Add comments on the usage of the"}, {"sha": "39c1019a0287533d8b90952614a60e796bc7b0e3", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "patch": "@@ -6077,12 +6077,43 @@ package body Exp_Aggr is\n             Expr : Node_Id;\n             --  Next expression from positional parameters of aggregate\n \n+            Enclosing_Aggregate : Node_Id;\n+\n+            In_Reverse_Storage_Order_Record : Boolean;\n+            --  True if we are within an aggregate of a record type with\n+            --  reversed storage order.\n+\n          begin\n+            --  Determine whether we are in a reversed storage order record\n+            --  aggregate.\n+\n+            In_Reverse_Storage_Order_Record := False;\n+            Enclosing_Aggregate := Parent (N);\n+            while Present (Enclosing_Aggregate) loop\n+               if Nkind (Enclosing_Aggregate) = N_Component_Association then\n+                  null;\n+\n+               elsif Nkind (Enclosing_Aggregate) /= N_Aggregate then\n+                  exit;\n+\n+               elsif Is_Record_Type (Etype (Enclosing_Aggregate))\n+                    and then Reverse_Storage_Order\n+                               (Etype (Enclosing_Aggregate))\n+               then\n+                  In_Reverse_Storage_Order_Record := True;\n+                  exit;\n+               end if;\n+               Enclosing_Aggregate := Parent (Enclosing_Aggregate);\n+            end loop;\n+\n             --  For little endian, we fill up the low order bits of the target\n             --  value. For big endian we fill up the high order bits of the\n             --  target value (which is a left justified modular value).\n \n-            if Bytes_Big_Endian xor Debug_Flag_8 then\n+            if Bytes_Big_Endian\n+                 xor Debug_Flag_8\n+                 xor In_Reverse_Storage_Order_Record\n+            then\n                Shift := Csiz * (Len - 1);\n                Incr  := -Csiz;\n             else"}, {"sha": "233ce2f1c5c900da3df465cfb68bb83deeb9b684", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "patch": "@@ -1280,12 +1280,12 @@ package body Exp_Pakd is\n       --  Initially Rhs is the right hand side value, it will be replaced\n       --  later by an appropriate unchecked conversion for the assignment.\n \n-      Obj    : Node_Id;\n-      Atyp   : Entity_Id;\n-      PAT    : Entity_Id;\n-      Ctyp   : Entity_Id;\n-      Csiz   : Int;\n-      Cmask  : Uint;\n+      Obj   : Node_Id;\n+      Atyp  : Entity_Id;\n+      PAT   : Entity_Id;\n+      Ctyp  : Entity_Id;\n+      Csiz  : Int;\n+      Cmask : Uint;\n \n       Shift : Node_Id;\n       --  The expression for the shift value that is required\n@@ -1433,9 +1433,9 @@ package body Exp_Pakd is\n             Rhs_Val       := Expr_Rep_Value (Rhs);\n             Rhs_Val_Known := True;\n \n-         --  The following test catches the case of an unchecked conversion\n-         --  of an integer literal. This results from optimizing aggregates\n-         --  of packed types.\n+         --  The following test catches the case of an unchecked conversion of\n+         --  an integer literal. This results from optimizing aggregates of\n+         --  packed types.\n \n          elsif Nkind (Rhs) = N_Unchecked_Type_Conversion\n            and then Compile_Time_Known_Value (Expression (Rhs))\n@@ -2619,11 +2619,16 @@ package body Exp_Pakd is\n       Cmask  : out Uint;\n       Shift  : out Node_Id)\n    is\n-      Loc    : constant Source_Ptr := Sloc (N);\n-      PAT    : Entity_Id;\n-      Otyp   : Entity_Id;\n-      Csiz   : Uint;\n-      Osiz   : Uint;\n+      Loc  : constant Source_Ptr := Sloc (N);\n+      PAT  : Entity_Id;\n+      Otyp : Entity_Id;\n+      Pref : Node_Id;\n+      Csiz : Uint;\n+      Osiz : Uint;\n+\n+      In_Reverse_Storage_Order_Record : Boolean;\n+      --  Set True if Obj is a [sub]component of a record that has reversed\n+      --  scalar storage order.\n \n    begin\n       Csiz := Component_Size (Atyp);\n@@ -2658,7 +2663,7 @@ package body Exp_Pakd is\n       if Csiz /= 1 then\n          Shift :=\n            Make_Op_Multiply (Loc,\n-             Left_Opnd => Make_Integer_Literal (Loc, Csiz),\n+             Left_Opnd  => Make_Integer_Literal (Loc, Csiz),\n              Right_Opnd => Shift);\n       end if;\n \n@@ -2693,7 +2698,7 @@ package body Exp_Pakd is\n                 Prefix => Obj,\n                 Expressions => New_List (\n                   Make_Op_Divide (Loc,\n-                    Left_Opnd => Duplicate_Subexpr (Shift),\n+                    Left_Opnd  => Duplicate_Subexpr (Shift),\n                     Right_Opnd => Make_Integer_Literal (Loc, Osiz))));\n \n             Shift := New_Shift;\n@@ -2725,7 +2730,30 @@ package body Exp_Pakd is\n       --  the array used to implement the packed array, F is the number of bits\n       --  in a source array element, and Shift is the count so far computed.\n \n-      if Bytes_Big_Endian then\n+      --  We also have to adjust if the storage order is reversed\n+\n+      Pref := Obj;\n+      loop\n+         case Nkind (Pref) is\n+            when N_Selected_Component =>\n+               Pref := Prefix (Pref);\n+               exit;\n+\n+            when N_Indexed_Component =>\n+               Pref := Prefix (Pref);\n+\n+            when others =>\n+               Pref := Empty;\n+               exit;\n+         end case;\n+      end loop;\n+\n+      In_Reverse_Storage_Order_Record :=\n+        Present (Pref)\n+          and then Is_Record_Type (Etype (Pref))\n+          and then Reverse_Storage_Order (Etype (Pref));\n+\n+      if Bytes_Big_Endian xor In_Reverse_Storage_Order_Record then\n          Shift :=\n            Make_Op_Subtract (Loc,\n              Left_Opnd  => Make_Integer_Literal (Loc, Osiz - Csiz),"}, {"sha": "5a7d3b22deaee01b497936a79a2069fc8326cb4c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "patch": "@@ -2138,15 +2138,13 @@ package body Freeze is\n          if Present (ADC)\n            and then Reverse_Bit_Order (Rec) /= Reverse_Storage_Order (Rec)\n          then\n-            if Bytes_Big_Endian = not Reverse_Storage_Order (Rec) then\n-               Error_Msg_N\n-                 (\"Scalar_Storage_Order High_Order_First is inconsistent with\"\n-                  & \" Bit_Order\", ADC);\n-            else\n-               Error_Msg_N\n-                 (\"Scalar_Storage_Order Low_Order_First is inconsistent with\"\n-                  & \" Bit_Order\", ADC);\n-            end if;\n+            --  Note: report error on Rec, not on ADC, as ADC may apply to\n+            --  an ancestor type.\n+\n+            Error_Msg_Sloc := Sloc (ADC);\n+            Error_Msg_N\n+              (\"scalar storage order for& specified# inconsistent with \"\n+               & \"its bit order\", Rec);\n          end if;\n \n          --  Deal with Bit_Order aspect specifying a non-default bit order"}, {"sha": "4c37ca182abe2013a4132d7644ccf3a70ca68c24", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "patch": "@@ -1236,9 +1236,7 @@ package body Sem_Util is\n       --  Loop through sequence of basic declarative items\n \n       Outer : while Present (Decl) loop\n-         if Nkind (Decl) /= N_Subprogram_Body\n-           and then Nkind (Decl) /= N_Package_Body\n-           and then Nkind (Decl) /= N_Task_Body\n+         if not Nkind_In (Decl, N_Subprogram_Body, N_Package_Body, N_Task_Body)\n            and then Nkind (Decl) not in N_Body_Stub\n          then\n             Next (Decl);\n@@ -3577,15 +3575,15 @@ package body Sem_Util is\n             Enclosing_Subp : constant Node_Id := Enclosing_Subprogram (Def_Id);\n             Enclosing_Pack : constant Node_Id := Enclosing_Package (Def_Id);\n             Other_Scope    : constant Node_Id := Enclosing_Dynamic_Scope (C);\n-         begin\n \n+         begin\n             --  ... unless the new declaration is in a subprogram, and the\n             --  visible declaration is a variable declaration or a parameter\n             --  specification outside that subprogram.\n \n             if Present (Enclosing_Subp)\n               and then Nkind_In (Parent (C), N_Object_Declaration,\n-                                 N_Parameter_Specification)\n+                                             N_Parameter_Specification)\n               and then not Scope_Within_Or_Same (Other_Scope, Enclosing_Subp)\n             then\n                null;\n@@ -7595,13 +7593,13 @@ package body Sem_Util is\n       --------------------------------------\n \n       function Is_Internally_Generated_Renaming (N : Node_Id) return Boolean is\n-         P : Node_Id := N;\n+         P : Node_Id;\n \n       begin\n+         P := N;\n          while Present (P) loop\n             if Nkind (P) = N_Object_Renaming_Declaration then\n                return not Comes_From_Source (P);\n-\n             elsif Is_List_Member (P) then\n                return False;\n             end if;\n@@ -11659,9 +11657,11 @@ package body Sem_Util is\n    ------------------------\n \n    function Proper_First_Index (Array_Typ : Entity_Id) return Entity_Id is\n-      Typ : Entity_Id := Array_Typ;\n+      Typ : Entity_Id;\n \n    begin\n+      Typ := Array_Typ;\n+\n       if Ekind (Typ) = E_String_Literal_Subtype then\n          Typ := Base_Type (Typ);\n       end if;"}]}