{"sha": "81049807bab10e097d57fc5cdc772ac05fd96516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwNDk4MDdiYWIxMGUwOTdkNTdmYzVjZGM3NzJhYzA1ZmQ5NjUxNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:56:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:56:06Z"}, "message": "Add port done awhile ago for the ARC cpu.\n\n        * arc/arc.h: New file.\n        * arc/arc.c: New file.\n        * arc/arc.md: New file.\n        * arc/initfini.c: New file.\n        * arc/lib1funcs.asm: New file.\n        * arc/t-arc: New file.\n        * arc/xm-arc.h: New file.\n        * ginclude/va-arc.h: New file.\n        * ginclude/stdarg.h: Include va-arc.h ifdef __arc__.\n        * ginclude/varargs.h: Likewise.\n        * Makefile.in (USER_H): Add va-arc.h.\n        * configure.in (arc-*-elf*): Recognize.\n        * longlong.h: Add ARC support.\nMostly so I can test changes in snapshot scripts.\n\n        * expr.c (clear_storage): Use CONST0_RTX instead of const0_rtx.\n        when clearing non-BLKmode data.\nFixes sparc problem.\n\nFrom-SVN: r15188", "tree": {"sha": "9acf7aea21861a4d1bdf3cb28fef579a6cc31641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9acf7aea21861a4d1bdf3cb28fef579a6cc31641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81049807bab10e097d57fc5cdc772ac05fd96516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81049807bab10e097d57fc5cdc772ac05fd96516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81049807bab10e097d57fc5cdc772ac05fd96516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81049807bab10e097d57fc5cdc772ac05fd96516/comments", "author": null, "committer": null, "parents": [{"sha": "5680076c75fcecc23414bba2fd1585bb264f6f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5680076c75fcecc23414bba2fd1585bb264f6f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5680076c75fcecc23414bba2fd1585bb264f6f63"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "d922c27ca5f0848df0f76ac72346cac1f2697028", "filename": "gcc/config/arc/t-arc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81049807bab10e097d57fc5cdc772ac05fd96516/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81049807bab10e097d57fc5cdc772ac05fd96516/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=81049807bab10e097d57fc5cdc772ac05fd96516", "patch": "@@ -0,0 +1,72 @@\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = arc/lib1funcs.asm\n+LIB1ASMFUNCS = _mulsi3 _umulsidi3 _udivsi3 _divsi3 _umodsi3 _modsi3 _divmod_tools\n+\n+# We need libgcc routines to be mangled according to which cpu they\n+# were compiled for.\n+# ??? -mmangle-cpu passed by default for now.\n+#LIBGCC2_CFLAGS = -g1 -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) -mmangle-cpu\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so...\n+\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifndef __big_endian__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifndef __big_endian__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# .init/.fini section routines\n+\n+x-crtinit.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n+\t  -DCRT_INIT -finhibit-size-directive -fno-inline-functions \\\n+\t  -g0 -c $(srcdir)/config/arc/initfini.c -o $(dir)/crtinit.o\n+\n+x-crtfini.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n+\t  -DCRT_FINI -finhibit-size-directive -fno-inline-functions \\\n+\t  -g0 -c $(srcdir)/config/arc/initfini.c -o $(dir)/crtfini.o\n+\n+MULTILIB_OPTIONS = EB\n+MULTILIB_DIRNAMES = be\n+\n+# We need our own versions to build multiple copies of crt*.o.\n+# ??? Use new support in Makefile.\n+\n+LIBGCC = stmp-multilib-arc\n+INSTALL_LIBGCC = install-multilib-arc\n+\n+stmp-multilib-arc: stmp-multilib\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n+\t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t    GCC_CFLAGS=\"$(GCC_CFLAGS) $${flags}\" \\\n+\t    INCLUDES=\"$(INCLUDES)\" CRTSTUFF_T_CFLAGS=$(CRTSTUFF_T_CFLAGS) \\\n+\t    dir=\"$${dir}\" x-crtinit.o x-crtfini.o; \\\n+\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\tdone\n+\ttouch stmp-multilib-arc\n+\n+install-multilib-arc: install-multilib\n+\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n+\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n+\t  rm -f $(libsubdir)/$${dir}/crtinit.o; \\\n+\t  $(INSTALL_DATA) $${dir}/crtinit.o $(libsubdir)/$${dir}/crtinit.o; \\\n+\t  chmod a-x $(libsubdir)/$${dir}/crtinit.o; \\\n+\t  rm -f $(libsubdir)/$${dir}/crtfini.o; \\\n+\t  $(INSTALL_DATA) $${dir}/crtfini.o $(libsubdir)/$${dir}/crtfini.o; \\\n+\t  chmod a-x $(libsubdir)/$${dir}/crtfini.o; \\\n+\tdone"}]}