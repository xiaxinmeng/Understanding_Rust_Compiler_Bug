{"sha": "5de197f2103ffc17279366d25cf83a3cd7fe0001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlMTk3ZjIxMDNmZmMxNzI3OTM2NmQyNWNmODNhM2NkN2ZlMDAwMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-06T01:31:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-06T01:31:58Z"}, "message": "basic_ios.tcc: Formatting tweaks.\n\n\n2001-06-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/3045\n\t* include/bits/basic_ios.tcc: Formatting tweaks.\n\t* include/bits/ios_base.h: Formatting tweaks.\n\t* src/ios.cc (ios_base::Init::_S_ios_create): Use filebufs here.\n\t(ios_base::Init::_S_ios_destroy): ..and here. Explicitly call dtors.\n\t* src/globals.cc: Allocate filebufs for standard streams here.\n\t(buf_cout, buf_cin, buf_cerr): Like so.\n\t(buf_wcout, buf_wcin, buf_wcerr): And so.\n\t* testsuite/27_io/ios_init.cc: Add.\n\nFrom-SVN: r42922", "tree": {"sha": "9a6f2713e4cae48b2272089a4ed08a4746d26a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a6f2713e4cae48b2272089a4ed08a4746d26a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5de197f2103ffc17279366d25cf83a3cd7fe0001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de197f2103ffc17279366d25cf83a3cd7fe0001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de197f2103ffc17279366d25cf83a3cd7fe0001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de197f2103ffc17279366d25cf83a3cd7fe0001/comments", "author": null, "committer": null, "parents": [{"sha": "938b21d3dea09cdd5a336b4b0d94280627ac836a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938b21d3dea09cdd5a336b4b0d94280627ac836a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938b21d3dea09cdd5a336b4b0d94280627ac836a"}], "stats": {"total": 248, "additions": 190, "deletions": 58}, "files": [{"sha": "1867270701467b3ab694ca3fbb4836aaee6d91f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -1,3 +1,15 @@\n+2001-06-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/3045\n+\t* include/bits/basic_ios.tcc: Formatting tweaks.\n+\t* include/bits/ios_base.h: Formatting tweaks.\n+\t* src/ios.cc (ios_base::Init::_S_ios_create): Use filebufs here.\n+\t(ios_base::Init::_S_ios_destroy): ..and here. Explicitly call dtors.\n+\t* src/globals.cc: Allocate filebufs for standard streams here.\n+\t(buf_cout, buf_cin, buf_cerr): Like so.\n+\t(buf_wcout, buf_wcin, buf_wcerr): And so.\n+\t* testsuite/27_io/ios_init.cc: Add.\n+\t\n 2001-06-04  Brendan Kehoe  <brendan@zen.org>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n \t"}, {"sha": "47d940bd69cb7afbd0c73b52b9a0c9b71b86ad0f", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -30,8 +30,8 @@\n #ifndef _CPP_BITS_BASICIOS_TCC\n #define _CPP_BITS_BASICIOS_TCC 1\n \n-namespace std {\n-\n+namespace std\n+{\n   template<typename _CharT, typename _Traits>\n     basic_streambuf<_CharT, _Traits>* \n     basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)"}, {"sha": "381e1cb00d785869af3f20b15cf302cdfe872eac", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -38,7 +38,6 @@\n \n namespace std\n {\n-\n   // The following definitions of bitmask types are enums, not ints,\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that"}, {"sha": "11930b0083440f3edf88125eba48b72b8ccd633e", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -25,37 +25,52 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-// On AIX, and perhaps other systems, library initialization order\n-// is not guaranteed.  For example, the static initializers for the \n-// main program might run before the static initializers for this\n-// library.  That means that we cannot rely on static initialization in \n-// the library; there is no guarantee that things will get initialized\n-// in time.  This file contains definitions of all global variables\n-// that require initialization as arrays of characters.\n-\n+#include <fstream>\n #include <istream>\n #include <ostream>\n \n-namespace std {\n-  typedef char fake_istream[sizeof (istream)] \n-  __attribute__ ((aligned (__alignof__ (istream))));\n-  typedef char fake_ostream[sizeof (ostream)] \n-  __attribute__ ((aligned (__alignof__ (ostream))));\n+// On AIX, and perhaps other systems, library initialization order is\n+// not guaranteed.  For example, the static initializers for the main\n+// program might run before the static initializers for this library.\n+// That means that we cannot rely on static initialization in the\n+// library; there is no guarantee that things will get initialized in\n+// time.  This file contains definitions of all global variables that\n+// require initialization as arrays of characters.\n \n+// Because <iostream> declares the standard streams to be [io]stream\n+// types instead of say [io]fstream types, it is also necessary to\n+// allocate the actual file buffers in this file.\n+namespace std \n+{\n+  typedef char fake_istream[sizeof(istream)]\n+  __attribute__ ((aligned(__alignof__(istream))));\n+  typedef char fake_ostream[sizeof(ostream)] \n+  __attribute__ ((aligned(__alignof__(ostream))));\n   fake_istream cin;\n   fake_ostream cout;\n   fake_ostream cerr;\n   fake_ostream clog;\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef char fake_wistream[sizeof (wistream)] \n-  __attribute__ ((aligned (__alignof__ (wistream))));\n-  typedef char fake_wostream[sizeof (wostream)] \n-  __attribute__ ((aligned (__alignof__ (wostream))));\n+  typedef char fake_filebuf[sizeof(filebuf)]\n+  __attribute__ ((aligned(__alignof__(filebuf))));\n+  fake_filebuf buf_cout;\n+  fake_filebuf buf_cin;\n+  fake_filebuf buf_cerr;\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wistream[sizeof(wistream)] \n+  __attribute__ ((aligned(__alignof__(wistream))));\n+  typedef char fake_wostream[sizeof(wostream)] \n+  __attribute__ ((aligned(__alignof__(wostream))));\n   fake_wistream wcin;\n   fake_wostream wcout;\n   fake_wostream wcerr;\n   fake_wostream wclog;\n+\n+  typedef char fake_wfilebuf[sizeof(wfilebuf)]\n+  __attribute__ ((aligned(__alignof__(wfilebuf))));\n+  fake_wfilebuf buf_wcout;\n+  fake_wfilebuf buf_wcin;\n+  fake_wfilebuf buf_wcerr;\n #endif\n }"}, {"sha": "244585e98849eb84ffd90c8a2ea030133a82fe59", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 55, "deletions": 37, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -38,6 +38,25 @@\n \n namespace std \n {\n+  // Extern declarations for global objects in src/globals.cc.\n+  extern istream cin;\n+  extern ostream cout;\n+  extern ostream cerr;\n+  extern ostream clog;\n+  extern filebuf buf_cout;\n+  extern filebuf buf_cin;\n+  extern filebuf buf_cerr;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  extern wistream wcin;\n+  extern wostream wcout;\n+  extern wostream wcerr;\n+  extern wostream wclog;\n+  extern wfilebuf buf_wcout;\n+  extern wfilebuf buf_wcin;\n+  extern wfilebuf buf_wcerr;\n+#endif\n+\n   // Definitions for static const data members of __ios_flags.\n   const __ios_flags::__int_type __ios_flags::_S_boolalpha;\n   const __ios_flags::__int_type __ios_flags::_S_dec;\n@@ -109,17 +128,6 @@ namespace std\n   int ios_base::Init::_S_ios_base_init = 0;\n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n-  extern istream cin;\n-  extern ostream cout;\n-  extern ostream cerr;\n-  extern ostream clog;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  extern wistream wcin;\n-  extern wostream wcout;\n-  extern wostream wcerr;\n-  extern wostream wclog;\n-#endif\n-\n   ios_base::failure::failure(const string& __str) throw()\n   {\n     strncpy(_M_name, __str.c_str(), _M_bufsize);\n@@ -137,55 +145,65 @@ namespace std\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n     int __bufsize = __sync ? 0 : static_cast<int>(BUFSIZ);\n-    // NB: The file std_iostream.h creates the four standard files\n+\n+    // NB: The file globals.cc creates the four standard files\n     // with NULL buffers. At this point, we swap out the dummy NULL\n-    // buffers with the real deal.\n-    new (&cout) ostream(new filebuf(stdout, ios_base::out, __bufsize));\n-    new (&cin) istream(new filebuf(stdin, ios_base::in, 1));\n-    new (&cerr) ostream(new filebuf(stderr, ios_base::out, __bufsize));\n-    new (&clog) ostream(cerr.rdbuf());\n+    // [io]stream objects and buffers with the real deal.\n+    new (&buf_cout) filebuf(stdout, ios_base::out, __bufsize);\n+    new (&buf_cin) filebuf(stdin, ios_base::in, 1);\n+    new (&buf_cerr) filebuf(stderr, ios_base::out, __bufsize);\n+    new (&cout) ostream(&buf_cout);\n+    new (&cin) istream(&buf_cin);\n+    new (&cerr) ostream(&buf_cerr);\n+    new (&clog) ostream(&buf_cerr);\n     cin.tie(&cout);\n     cerr.flags(ios_base::unitbuf);\n     \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    new (&wcout) wostream( new wfilebuf(stdout, ios_base::out, __bufsize));\n-    new (&wcin) wistream(new wfilebuf(stdin, ios_base::in, 1));\n-    new (&wcerr) wostream(new wfilebuf(stderr, ios_base::out, __bufsize));\n-    new (&wclog) wostream(wcerr.rdbuf());\n+    new (&buf_wcout) wfilebuf(stdout, ios_base::out, __bufsize);\n+    new (&buf_wcin) wfilebuf(stdin, ios_base::in, 1);\n+    new (&buf_wcerr) wfilebuf(stderr, ios_base::out, __bufsize);\n+    new (&wcout) wostream(&buf_wcout);\n+    new (&wcin) wistream(&buf_wcin);\n+    new (&wcerr) wostream(&buf_wcerr);\n+    new (&wclog) wostream(&buf_wcerr);\n     wcin.tie(&wcout);\n     wcerr.flags(ios_base::unitbuf);\n #endif\n   }\n \n-  ios_base::Init::Init()\n-  {\n-    if (++_S_ios_base_init == 1)\n-      {\n-\t// Standard streams default to synced with \"C\" operations.\n-\tios_base::Init::_S_synced_with_stdio = true;\n-\t_S_ios_create(ios_base::Init::_S_synced_with_stdio);\n-      }\n-  }\n-\n   void\n   ios_base::Init::_S_ios_destroy()\n   {\n+    // Explicitly call dtors to free any memory that is dynamically\n+    // allocated by filebuf ctor or member functions, but don't\n+    // deallocate all memory by calling operator delete.\n     cout.flush();\n     cerr.flush();\n     clog.flush();\n-    delete cout.rdbuf();\n-    delete cin.rdbuf();\n-    delete cerr.rdbuf();\n+    buf_cout.~filebuf();\n+    buf_cin.~filebuf();\n+    buf_cerr.~filebuf();\n #ifdef _GLIBCPP_USE_WCHAR_T\n     wcout.flush();\n     wcerr.flush();\n     wclog.flush();\n-    delete wcout.rdbuf();\n-    delete wcin.rdbuf();\n-    delete wcerr.rdbuf();\n+    buf_wcout.~wfilebuf();\n+    buf_wcin.~wfilebuf();\n+    buf_wcerr.~wfilebuf();\n #endif\n   }\n \n+  ios_base::Init::Init()\n+  {\n+    if (++_S_ios_base_init == 1)\n+      {\n+\t// Standard streams default to synced with \"C\" operations.\n+\tios_base::Init::_S_synced_with_stdio = true;\n+\t_S_ios_create(ios_base::Init::_S_synced_with_stdio);\n+      }\n+  }\n+\n   ios_base::Init::~Init()\n   {\n     if (--_S_ios_base_init == 0)"}, {"sha": "3963cb6d776446f4ab235ea9ff00dc5e1b3bee71", "filename": "libstdc++-v3/testsuite/27_io/ios_init.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de197f2103ffc17279366d25cf83a3cd7fe0001/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc?ref=5de197f2103ffc17279366d25cf83a3cd7fe0001", "patch": "@@ -0,0 +1,88 @@\n+// 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.2.1.6 class ios_base::init\n+\n+#include <fstream>\n+#include <iostream>\n+#include <debug_assert.h>\n+\n+class gnu_filebuf: public std::filebuf\n+{\n+  int i;\n+public:\n+  gnu_filebuf(int j = 1): i(j) { }\n+  ~gnu_filebuf() { --i; }\n+  int get_i() { return i;}\n+};\n+\n+const int initial = 4;\n+gnu_filebuf buf(initial);\n+\n+// libstdc++/3045, in a vague way.\n+void test01()\n+{\n+  bool test = true;\n+  int k1;\n+\n+  // 1 normal\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::cout.rdbuf(&buf);\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+\n+  // 2 syncd off\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::cout.rdbuf(&buf);\n+    std::ios_base::sync_with_stdio(false); // make sure doesn't clobber buf\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+\n+  // 3 callling init\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+  {\n+    std::cout.rdbuf(&buf);\n+    std::ios_base::Init make_sure_initialized;\n+  }\n+  k1 = buf.get_i();\n+  VERIFY( k1 == initial );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}