{"sha": "337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3ZWQwZWI0OTBiMTQ4OTlmNDA0OWJjNGM4OTIyZWIxZDhhMmU2Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-22T17:13:24Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-22T17:14:51Z"}, "message": "i386: Fix __builtin_floor with FE_DOWNWARD rounding direction [PR96793]\n\nx86_expand_floorceil expander uses x86_sse_copysign_to_positive, which\nis unable to change the sign from - to +.  When FE_DOWNWARD rounding\ndirection is in effect, the expanded sequence that involves subtraction\ncan trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive\nfails to change the sign of the intermediate value, assumed to always\nbe positive, back to positive.\n\nThe patch adds one extra fabs that strips the sign from the intermediate\nvalue when flag_rounding_math is in effect.\n\n2020-12-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/96793\n\t* config/i386/i386-expand.c (ix86_expand_floorceil):\n\tRemove the sign of the intermediate value for flag_rounding_math.\n\t(ix86_expand_floorceildf_32): Ditto.\n\ngcc/testsuite/\n\tPR target/96793\n\t* gcc.target/i386/pr96793.c: New test.", "tree": {"sha": "cd68fc8e6ed92d585b4baa8b6c3f898d0c6d0c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd68fc8e6ed92d585b4baa8b6c3f898d0c6d0c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ed0eb490b14899f4049bc4c8922eb1d8a2e67/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e63d383b89cd75b7775883d71ed09724b9ee73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e63d383b89cd75b7775883d71ed09724b9ee73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e63d383b89cd75b7775883d71ed09724b9ee73f"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "f838112783c90fefbef3dc771d3d91257311544c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed0eb490b14899f4049bc4c8922eb1d8a2e67/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed0eb490b14899f4049bc4c8922eb1d8a2e67/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "patch": "@@ -16352,12 +16352,14 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n         if (!isless (xa, TWO52))\n           return x;\n \tx2 = (double)(long)x;\n+\n      Compensate.  Floor:\n \tif (x2 > x)\n \t  x2 -= 1;\n      Compensate.  Ceil:\n \tif (x2 < x)\n \t  x2 += 1;\n+\n \tif (HONOR_SIGNED_ZEROS (mode))\n \t  return copysign (x2, x);\n \treturn x2;\n@@ -16392,10 +16394,15 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   tmp = expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n \t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n-  emit_move_insn (res, tmp);\n-\n   if (HONOR_SIGNED_ZEROS (mode))\n-    ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), mask);\n+    {\n+      /* Remove the sign with FE_DOWNWARD, where x - x = -0.0.  */\n+      if (do_floor && flag_rounding_math)\n+\ttmp = ix86_expand_sse_fabs (tmp, NULL);\n+\n+      ix86_sse_copysign_to_positive (tmp, tmp, res, mask);\n+    }\n+  emit_move_insn (res, tmp);\n \n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n@@ -16415,12 +16422,14 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n           return x;\n         xa = xa + TWO52 - TWO52;\n         x2 = copysign (xa, x);\n+\n      Compensate.  Floor:\n         if (x2 > x)\n           x2 -= 1;\n      Compensate.  Ceil:\n         if (x2 < x)\n           x2 += 1;\n+\n \tif (HONOR_SIGNED_ZEROS (mode))\n \t  x2 = copysign (x2, x);\n \treturn x2;\n@@ -16457,8 +16466,14 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n   emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   tmp = expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n \t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n-  if (!do_floor && HONOR_SIGNED_ZEROS (mode))\n-    ix86_sse_copysign_to_positive (tmp, tmp, res, mask);\n+  if (HONOR_SIGNED_ZEROS (mode))\n+    {\n+      /* Remove the sign with FE_DOWNWARD, where x - x = -0.0.  */\n+      if (do_floor && flag_rounding_math)\n+\ttmp = ix86_expand_sse_fabs (tmp, NULL);\n+\n+      ix86_sse_copysign_to_positive (tmp, tmp, res, mask);\n+    }\n   emit_move_insn (res, tmp);\n \n   emit_label (label);"}, {"sha": "4a96478e31ed1b361e3af2d9348ad61570b24f1f", "filename": "gcc/testsuite/gcc.target/i386/pr96793.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed0eb490b14899f4049bc4c8922eb1d8a2e67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed0eb490b14899f4049bc4c8922eb1d8a2e67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96793.c?ref=337ed0eb490b14899f4049bc4c8922eb1d8a2e67", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/96793 */\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-require-effective-target fenv } */\n+/* { dg-options \"-O2 -frounding-math -msse2 -mno-sse4 -mfpmath=sse\" } */\n+\n+#include <fenv.h>\n+\n+double\n+__attribute__((noinline))\n+test (double value)\n+{\n+  return __builtin_floor (value);\n+}\n+\n+int\n+main ()\n+{\n+  double result;\n+\n+  fesetround (FE_DOWNWARD);\n+\n+  result = test (0.25);\n+\n+  if (__builtin_signbit (result) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}