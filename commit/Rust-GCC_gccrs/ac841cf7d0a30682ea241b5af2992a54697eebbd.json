{"sha": "ac841cf7d0a30682ea241b5af2992a54697eebbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4NDFjZjdkMGEzMDY4MmVhMjQxYjVhZjI5OTJhNTQ2OTdlZWJiZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-03-03T23:51:55Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-03-03T23:51:55Z"}, "message": "re PR target/65249 (unable to find a register to spill in class 'R0_REGS' when compiling protobuf on sh4)\n\nPR target/65249\n* config/sh/sh.md (symGOT_load): Use R0 reg for operands[2] when\n  called for __stack_chk_guard symbol.\n\nFrom-SVN: r221165", "tree": {"sha": "a033f8674200fb240cb399310cab5d2ce82523b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a033f8674200fb240cb399310cab5d2ce82523b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac841cf7d0a30682ea241b5af2992a54697eebbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac841cf7d0a30682ea241b5af2992a54697eebbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac841cf7d0a30682ea241b5af2992a54697eebbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac841cf7d0a30682ea241b5af2992a54697eebbd/comments", "author": null, "committer": null, "parents": [{"sha": "f6115d44cc5053b718f77679ef98b0e93e53a78b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6115d44cc5053b718f77679ef98b0e93e53a78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6115d44cc5053b718f77679ef98b0e93e53a78b"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "2108eb0b2dce0410bb6a61a8a343142f5e9fe720", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac841cf7d0a30682ea241b5af2992a54697eebbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac841cf7d0a30682ea241b5af2992a54697eebbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac841cf7d0a30682ea241b5af2992a54697eebbd", "patch": "@@ -1,3 +1,9 @@\n+2015-03-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/65249\n+\t* config/sh/sh.md (symGOT_load): Use R0 reg for operands[2] when\n+\tcalled for __stack_chk_guard symbol.\n+\n 2015-03-03  DJ Delorie  <dj@redhat.com>\n \n \t* config/rl78/rl78-real.md (*addqi_real): Allow SADDR types for"}, {"sha": "24ddc9e75897dbe6220a264d711bbfcc37094edc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac841cf7d0a30682ea241b5af2992a54697eebbd/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac841cf7d0a30682ea241b5af2992a54697eebbd/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ac841cf7d0a30682ea241b5af2992a54697eebbd", "patch": "@@ -10690,10 +10690,26 @@ label:\n   \"\"\n {\n   rtx mem;\n+  bool stack_chk_guard_p = false;\n \n   operands[2] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n   operands[3] = !can_create_pseudo_p () ? operands[0] : gen_reg_rtx (Pmode);\n \n+  if (!TARGET_SHMEDIA\n+      && flag_stack_protect\n+      && GET_CODE (operands[1]) == CONST\n+      && GET_CODE (XEXP (operands[1], 0)) == UNSPEC\n+      && GET_CODE (XVECEXP (XEXP (operands[1], 0), 0, 0)) == SYMBOL_REF\n+      && strcmp (XSTR (XVECEXP (XEXP (operands[1], 0), 0, 0), 0),\n+\t\t \"__stack_chk_guard\") == 0)\n+    stack_chk_guard_p = true;\n+\n+  /* Use R0 to avoid long R0 liveness which stack-protector tends to\n+     produce.  */\n+  if (! sh_lra_flag\n+      && stack_chk_guard_p && ! reload_in_progress && ! reload_completed)\n+    operands[2] = gen_rtx_REG (Pmode, R0_REG);\n+\n   if (TARGET_SHMEDIA)\n     {\n       rtx reg = operands[2];\n@@ -10721,13 +10737,7 @@ label:\n      insn to avoid combining (set A (plus rX r12)) and (set op0 (mem A))\n      when rX is a GOT address for the guard symbol.  Ugly but doesn't\n      matter because this is a rare situation.  */\n-  if (!TARGET_SHMEDIA\n-      && flag_stack_protect\n-      && GET_CODE (operands[1]) == CONST\n-      && GET_CODE (XEXP (operands[1], 0)) == UNSPEC\n-      && GET_CODE (XVECEXP (XEXP (operands[1], 0), 0, 0)) == SYMBOL_REF\n-      && strcmp (XSTR (XVECEXP (XEXP (operands[1], 0), 0, 0), 0),\n-\t\t \"__stack_chk_guard\") == 0)\n+  if (stack_chk_guard_p)\n     emit_insn (gen_chk_guard_add (operands[3], operands[2]));\n   else\n     emit_move_insn (operands[3], gen_rtx_PLUS (Pmode, operands[2],"}]}