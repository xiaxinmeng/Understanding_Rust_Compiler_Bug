{"sha": "36ec4a3c927bd2cc212a7f331ad842cd90eb5283", "node_id": "C_kwDOANBUbNoAKDM2ZWM0YTNjOTI3YmQyY2MyMTJhN2YzMzFhZDg0MmNkOTBlYjUyODM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-10-16T03:09:05Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-10-21T08:18:58Z"}, "message": "Factor out removal of write only stores from execute_fixup_cfg\n\nTo make it easier to fix PR 102703, factoring this code out\nto its own function makes it easier to read and less indentions\ntoo.\n\ngcc/ChangeLog:\n\n\t* tree-cfg.c (maybe_remove_writeonly_store): New function\n\tfactored out from ...\n\t(execute_fixup_cfg): Here. Call maybe_remove_writeonly_store.", "tree": {"sha": "65c064116c09614a24bdf064b2a03b32b7fcb58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c064116c09614a24bdf064b2a03b32b7fcb58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ec4a3c927bd2cc212a7f331ad842cd90eb5283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec4a3c927bd2cc212a7f331ad842cd90eb5283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ec4a3c927bd2cc212a7f331ad842cd90eb5283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec4a3c927bd2cc212a7f331ad842cd90eb5283/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a717f13355928d05f134409bf004f900d358046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a717f13355928d05f134409bf004f900d358046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a717f13355928d05f134409bf004f900d358046"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "dbbf6beb6e42dbe567f4f17b86136d7a255ce16c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec4a3c927bd2cc212a7f331ad842cd90eb5283/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec4a3c927bd2cc212a7f331ad842cd90eb5283/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=36ec4a3c927bd2cc212a7f331ad842cd90eb5283", "patch": "@@ -9666,6 +9666,38 @@ make_pass_warn_unused_result (gcc::context *ctxt)\n   return new pass_warn_unused_result (ctxt);\n }\n \n+/* Maybe Remove stores to variables we marked write-only.\n+   Return true if a store was removed. */\n+static bool\n+maybe_remove_writeonly_store (gimple_stmt_iterator &gsi, gimple *stmt)\n+{\n+  /* Keep access when store has side effect, i.e. in case when source\n+     is volatile.  */  \n+  if (!gimple_store_p (stmt)\n+      || gimple_has_side_effects (stmt)\n+      || optimize_debug)\n+    return false;\n+\n+  tree lhs = get_base_address (gimple_get_lhs (stmt));\n+\n+  if (!VAR_P (lhs)\n+      || (!TREE_STATIC (lhs) && !DECL_EXTERNAL (lhs))\n+      || !varpool_node::get (lhs)->writeonly)\n+    return false;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Removing statement, writes\"\n+\t       \" to write only var:\\n\");\n+      print_gimple_stmt (dump_file, stmt, 0,\n+\t\t\t TDF_VOPS|TDF_MEMSYMS);\n+    }\n+  unlink_stmt_vdef (stmt);\n+  gsi_remove (&gsi, true);\n+  release_defs (stmt);\n+  return true;\n+}\n+\n /* IPA passes, compilation of earlier functions or inlining\n    might have changed some properties, such as marked functions nothrow,\n    pure, const or noreturn.\n@@ -9721,33 +9753,13 @@ execute_fixup_cfg (void)\n \t\ttodo |= TODO_cleanup_cfg;\n \t     }\n \n-\t  /* Remove stores to variables we marked write-only.\n-\t     Keep access when store has side effect, i.e. in case when source\n-\t     is volatile.  */\n-\t  if (gimple_store_p (stmt)\n-\t      && !gimple_has_side_effects (stmt)\n-\t      && !optimize_debug)\n+\t  /* Remove stores to variables we marked write-only. */\n+\t  if (maybe_remove_writeonly_store (gsi, stmt))\n \t    {\n-\t      tree lhs = get_base_address (gimple_get_lhs (stmt));\n-\n-\t      if (VAR_P (lhs)\n-\t\t  && (TREE_STATIC (lhs) || DECL_EXTERNAL (lhs))\n-\t\t  && varpool_node::get (lhs)->writeonly)\n-\t\t{\n-\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t    {\n-\t\t      fprintf (dump_file, \"Removing statement, writes\"\n-\t\t               \" to write only var:\\n\");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0,\n-\t\t\t\t\t TDF_VOPS|TDF_MEMSYMS);\n-\t\t    }\n-\t\t  unlink_stmt_vdef (stmt);\n-\t\t  gsi_remove (&gsi, true);\n-\t\t  release_defs (stmt);\n-\t          todo |= TODO_update_ssa | TODO_cleanup_cfg;\n-\t          continue;\n-\t\t}\n+\t      todo |= TODO_update_ssa | TODO_cleanup_cfg;\n+\t      continue;\n \t    }\n+\n \t  /* For calls we can simply remove LHS when it is known\n \t     to be write-only.  */\n \t  if (is_gimple_call (stmt)"}]}