{"sha": "3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmNDJhN2JhY2YwNDkzM2E2Y2UzMmE5YjA0ZWE0MjE3ZjFjYzM5Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-03T18:51:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-03T18:51:49Z"}, "message": "mips-opts.h: New.\n\n\t* config/mips/mips-opts.h: New.\n\t* config/mips/mips.c (enum mips_r10k_cache_barrier_setting): Move\n\tto mips-opts.h.\n\t(mips_abi, mips_code_readable, mips_r10k_cache_barriee): Remove.\n\t(mips_handle_option): Don't handle OPT_mabi_, OPT_mcode_readable_\n\tor OPT_mr10k_cache_barrier_ here.  Access mips_cache_flush_func\n\tvia opts pointer.\n\t* config/mips/mips.h (enum mips_code_readable_setting): Move to\n\tmips-opts.h.\n\t(mips_abi, mips_code_readable): Don't declare.\n\t* config/mips/mips.opt (config/mips/mips-opts.h): New\n\tHeaderInclude.\n\t(mabi=): Use Enum and Var.\n\t(mips_abi): New Enum and EnumValue entries.\n\t(mcode-readable=): Use Enum and Var.\n\t(mips_code_readable_setting): New Enum and EnumValue entries.\n\t(mr10k-cache-barrier=): Use Enum and Var.\n\t(mips_r10k_cache_barrier_setting): New Enum and EnumValue entries.\n\nFrom-SVN: r173338", "tree": {"sha": "900fdb208864df8e10a6991c48e68925fa67b931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/900fdb208864df8e10a6991c48e68925fa67b931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6add7e946e2254cbc23517a5b6ace896515efd45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6add7e946e2254cbc23517a5b6ace896515efd45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6add7e946e2254cbc23517a5b6ace896515efd45"}], "stats": {"total": 178, "additions": 113, "deletions": 65}, "files": [{"sha": "37c251a584cf73504028e6ce934f346bc6ce3874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "patch": "@@ -1,3 +1,24 @@\n+2011-05-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/mips/mips-opts.h: New.\n+\t* config/mips/mips.c (enum mips_r10k_cache_barrier_setting): Move\n+\tto mips-opts.h.\n+\t(mips_abi, mips_code_readable, mips_r10k_cache_barriee): Remove.\n+\t(mips_handle_option): Don't handle OPT_mabi_, OPT_mcode_readable_\n+\tor OPT_mr10k_cache_barrier_ here.  Access mips_cache_flush_func\n+\tvia opts pointer.\n+\t* config/mips/mips.h (enum mips_code_readable_setting): Move to\n+\tmips-opts.h.\n+\t(mips_abi, mips_code_readable): Don't declare.\n+\t* config/mips/mips.opt (config/mips/mips-opts.h): New\n+\tHeaderInclude.\n+\t(mabi=): Use Enum and Var.\n+\t(mips_abi): New Enum and EnumValue entries.\n+\t(mcode-readable=): Use Enum and Var.\n+\t(mips_code_readable_setting): New Enum and EnumValue entries.\n+\t(mr10k-cache-barrier=): Use Enum and Var.\n+\t(mips_r10k_cache_barrier_setting): New Enum and EnumValue entries.\n+\n 2011-05-03  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (cgraph_node_set_def, varpool_node_set_def): Move out of GTY;"}, {"sha": "307036b74ac4788bc73e2bb693fd2d250ffd0fc9", "filename": "gcc/config/mips/mips-opts.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-opts.h?ref=3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "patch": "@@ -0,0 +1,39 @@\n+/* Definitions for option handling for MIPS.\n+   Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef MIPS_OPTS_H\n+#define MIPS_OPTS_H\n+\n+/* Enumerates the setting of the -mcode-readable option.  */\n+enum mips_code_readable_setting {\n+  CODE_READABLE_NO,\n+  CODE_READABLE_PCREL,\n+  CODE_READABLE_YES\n+};\n+\n+/* Enumerates the setting of the -mr10k-cache-barrier option.  */\n+enum mips_r10k_cache_barrier_setting {\n+  R10K_CACHE_BARRIER_NONE,\n+  R10K_CACHE_BARRIER_STORE,\n+  R10K_CACHE_BARRIER_LOAD_STORE\n+};\n+\n+#endif"}, {"sha": "ee0ad8d34518b4ee525fd21bb8435718d46258c2", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "patch": "@@ -182,13 +182,6 @@ enum mips_address_type {\n   ADDRESS_SYMBOLIC\n };\n \n-/* Enumerates the setting of the -mr10k-cache-barrier option.  */\n-enum mips_r10k_cache_barrier_setting {\n-  R10K_CACHE_BARRIER_NONE,\n-  R10K_CACHE_BARRIER_STORE,\n-  R10K_CACHE_BARRIER_LOAD_STORE\n-};\n-\n /* Macros to create an enumeration identifier for a function prototype.  */\n #define MIPS_FTYPE_NAME1(A, B) MIPS_##A##_FTYPE_##B\n #define MIPS_FTYPE_NAME2(A, B, C) MIPS_##A##_FTYPE_##B##_##C\n@@ -531,9 +524,6 @@ int mips_isa;\n /* The architecture selected by -mipsN, or null if -mipsN wasn't used.  */\n static const struct mips_cpu_info *mips_isa_option_info;\n \n-/* Which ABI to use.  */\n-int mips_abi = MIPS_ABI_DEFAULT;\n-\n /* Which cost information to use.  */\n static const struct mips_rtx_cost_data *mips_cost;\n \n@@ -551,12 +541,6 @@ static int mips_base_align_loops; /* align_loops */\n static int mips_base_align_jumps; /* align_jumps */\n static int mips_base_align_functions; /* align_functions */\n \n-/* The -mcode-readable setting.  */\n-enum mips_code_readable_setting mips_code_readable = CODE_READABLE_YES;\n-\n-/* The -mr10k-cache-barrier setting.  */\n-static enum mips_r10k_cache_barrier_setting mips_r10k_cache_barrier;\n-\n /* Index [M][R] is true if register R is allowed to hold a value of mode M.  */\n bool mips_hard_regno_mode_ok[(int) MAX_MACHINE_MODE][FIRST_PSEUDO_REGISTER];\n \n@@ -15464,21 +15448,6 @@ mips_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   switch (code)\n     {\n-    case OPT_mabi_:\n-      if (strcmp (arg, \"32\") == 0)\n-\tmips_abi = ABI_32;\n-      else if (strcmp (arg, \"o64\") == 0)\n-\tmips_abi = ABI_O64;\n-      else if (strcmp (arg, \"n32\") == 0)\n-\tmips_abi = ABI_N32;\n-      else if (strcmp (arg, \"64\") == 0)\n-\tmips_abi = ABI_64;\n-      else if (strcmp (arg, \"eabi\") == 0)\n-\tmips_abi = ABI_EABI;\n-      else\n-\treturn false;\n-      return true;\n-\n     case OPT_march_:\n     case OPT_mtune_:\n       return mips_parse_cpu (arg) != 0;\n@@ -15488,29 +15457,7 @@ mips_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       return mips_isa_option_info != 0;\n \n     case OPT_mno_flush_func:\n-      mips_cache_flush_func = NULL;\n-      return true;\n-\n-    case OPT_mcode_readable_:\n-      if (strcmp (arg, \"yes\") == 0)\n-\tmips_code_readable = CODE_READABLE_YES;\n-      else if (strcmp (arg, \"pcrel\") == 0)\n-\tmips_code_readable = CODE_READABLE_PCREL;\n-      else if (strcmp (arg, \"no\") == 0)\n-\tmips_code_readable = CODE_READABLE_NO;\n-      else\n-\treturn false;\n-      return true;\n-\n-    case OPT_mr10k_cache_barrier_:\n-      if (strcmp (arg, \"load-store\") == 0)\n-\tmips_r10k_cache_barrier = R10K_CACHE_BARRIER_LOAD_STORE;\n-      else if (strcmp (arg, \"store\") == 0)\n-\tmips_r10k_cache_barrier = R10K_CACHE_BARRIER_STORE;\n-      else if (strcmp (arg, \"none\") == 0)\n-\tmips_r10k_cache_barrier = R10K_CACHE_BARRIER_NONE;\n-      else\n-\treturn false;\n+      opts->x_mips_cache_flush_func = NULL;\n       return true;\n \n     default:"}, {"sha": "c619648236c703fb22da45715c0f2cde1dfe46b2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "patch": "@@ -72,12 +72,7 @@ struct mips_cpu_info {\n   unsigned int tune_flags;\n };\n \n-/* Enumerates the setting of the -mcode-readable option.  */\n-enum mips_code_readable_setting {\n-  CODE_READABLE_NO,\n-  CODE_READABLE_PCREL,\n-  CODE_READABLE_YES\n-};\n+#include \"config/mips/mips-opts.h\"\n \n /* Macros to silence warnings about numbers being signed in traditional\n    C and unsigned in ISO C when compiled on 32-bit hosts.  */\n@@ -2896,11 +2891,9 @@ extern bool mips_split_hi_p[];\n extern enum processor mips_arch;        /* which cpu to codegen for */\n extern enum processor mips_tune;        /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n-extern int mips_abi;\t\t\t/* which ABI to use */\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n extern bool mips_base_mips16;\n-extern enum mips_code_readable_setting mips_code_readable;\n extern GTY(()) struct target_globals *mips16_globals;\n #endif\n "}, {"sha": "caa9246cdf2bf4367fb8f0e64278bd3e90171347", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af42a7bacf04933a6ce32a9b04ea4217f1cc392/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=3af42a7bacf04933a6ce32a9b04ea4217f1cc392", "patch": "@@ -18,16 +18,38 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/mips/mips-opts.h\n+\n EB\n Driver\n \n EL\n Driver\n \n mabi=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(mips_abi) Var(mips_abi) Init(MIPS_ABI_DEFAULT)\n -mabi=ABI\tGenerate code that conforms to the given ABI\n \n+Enum\n+Name(mips_abi) Type(int)\n+Known MIPS ABIs (for use with the -mabi= option):\n+\n+EnumValue\n+Enum(mips_abi) String(32) Value(ABI_32)\n+\n+EnumValue\n+Enum(mips_abi) String(o64) Value(ABI_O64)\n+\n+EnumValue\n+Enum(mips_abi) String(n32) Value(ABI_N32)\n+\n+EnumValue\n+Enum(mips_abi) String(64) Value(ABI_64)\n+\n+EnumValue\n+Enum(mips_abi) String(eabi) Value(ABI_EABI)\n+\n mabicalls\n Target Report Mask(ABICALLS)\n Generate code that can be used in SVR4-style dynamic objects\n@@ -57,9 +79,22 @@ Target Report Mask(CHECK_ZERO_DIV)\n Trap on integer divide by zero\n \n mcode-readable=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(mips_code_readable_setting) Var(mips_code_readable) Init(CODE_READABLE_YES)\n -mcode-readable=SETTING\tSpecify when instructions are allowed to access code\n \n+Enum\n+Name(mips_code_readable_setting) Type(enum mips_code_readable_setting)\n+Valid arguments to -mcode-readable=:\n+\n+EnumValue\n+Enum(mips_code_readable_setting) String(yes) Value(CODE_READABLE_YES)\n+\n+EnumValue\n+Enum(mips_code_readable_setting) String(pcrel) Value(CODE_READABLE_PCREL)\n+\n+EnumValue\n+Enum(mips_code_readable_setting) String(no) Value(CODE_READABLE_NO)\n+\n mdivide-breaks\n Target Report RejectNegative Mask(DIVIDE_BREAKS)\n Use branch-and-break sequences to check for integer divide by zero\n@@ -255,9 +290,22 @@ Target Report Mask(PAIRED_SINGLE_FLOAT)\n Use paired-single floating-point instructions\n \n mr10k-cache-barrier=\n-Target Joined RejectNegative\n+Target Joined RejectNegative Enum(mips_r10k_cache_barrier_setting) Var(mips_r10k_cache_barrier) Init(R10K_CACHE_BARRIER_NONE)\n -mr10k-cache-barrier=SETTING\tSpecify when r10k cache barriers should be inserted\n \n+Enum\n+Name(mips_r10k_cache_barrier_setting) Type(enum mips_r10k_cache_barrier_setting)\n+Valid arguments to -mr10k-cache-barrier=:\n+\n+EnumValue\n+Enum(mips_r10k_cache_barrier_setting) String(load-store) Value(R10K_CACHE_BARRIER_LOAD_STORE)\n+\n+EnumValue\n+Enum(mips_r10k_cache_barrier_setting) String(store) Value(R10K_CACHE_BARRIER_STORE)\n+\n+EnumValue\n+Enum(mips_r10k_cache_barrier_setting) String(none) Value(R10K_CACHE_BARRIER_NONE)\n+\n mrelax-pic-calls\n Target Report Mask(RELAX_PIC_CALLS)\n Try to allow the linker to turn PIC calls into direct calls"}]}