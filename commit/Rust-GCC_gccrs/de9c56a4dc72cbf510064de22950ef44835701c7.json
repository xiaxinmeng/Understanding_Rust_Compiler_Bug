{"sha": "de9c56a4dc72cbf510064de22950ef44835701c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5YzU2YTRkYzcyY2JmNTEwMDY0ZGUyMjk1MGVmNDQ4MzU3MDFjNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-11-24T10:48:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-11-24T10:48:15Z"}, "message": "re PR c++/14024 (g++ isn't reporting aliasing warnings)\n\n2005-11-24  Richard Guenther  <rguenther@suse.de>\n\tDirk Mueller <dmueller@suse.de>\n\n\tPR c++/14024\n\t* c-common.h (strict_aliasing_warning): Declare.\n\t* c-common.c (strict_aliasing_warning): New function,\n\tsplit out from ...\n\t* c-typeck.c (build_c_cast): ... here.\n\n\t* typeck.c (build_reinterpret_cast_1): Use it.\n\n\t* g++.dg/warn/Wstrict-aliasing-1.C: New testcase.\n\t* g++.dg/warn/Wstrict-aliasing-2.C: Likewise.\n\t* g++.dg/warn/Wstrict-aliasing-3.C: Likewise.\n\t* g++.dg/warn/Wstrict-aliasing-4.C: Likewise.\n\t* g++.dg/warn/Wstrict-aliasing-5.C: Likewise.\n\t* g++.dg/warn/Wstrict-aliasing-6.C: Likewise.\n\nCo-Authored-By: Dirk Mueller <dmueller@suse.de>\n\nFrom-SVN: r107459", "tree": {"sha": "2423af056692fa5b5f531ef395833a9a44b629dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2423af056692fa5b5f531ef395833a9a44b629dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de9c56a4dc72cbf510064de22950ef44835701c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9c56a4dc72cbf510064de22950ef44835701c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9c56a4dc72cbf510064de22950ef44835701c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9c56a4dc72cbf510064de22950ef44835701c7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "349d23dd85821238f764ac9868dcd32fc50db5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349d23dd85821238f764ac9868dcd32fc50db5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349d23dd85821238f764ac9868dcd32fc50db5a9"}], "stats": {"total": 166, "additions": 139, "deletions": 27}, "files": [{"sha": "2efba8ce0b655b73f3c7a7d66ef5853e5d82de38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -1,3 +1,12 @@\n+2005-11-24  Richard Guenther  <rguenther@suse.de>\n+\tDirk Mueller <dmueller@suse.de>\n+\n+\tPR c++/14024\n+\t* c-common.h (strict_aliasing_warning): Declare.\n+\t* c-common.c (strict_aliasing_warning): New function,\n+\tsplit out from ...\n+\t* c-typeck.c (build_c_cast): ... here.\n+\n 2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* optabs.c (expand_binop): Use swap_commutative_operands_with_target"}, {"sha": "82fe6131c1de462caf9c5ff90e57cd404f1fa266", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -954,6 +954,42 @@ unsigned_conversion_warning (tree result, tree operand)\n     }\n }\n \n+/* Print a warning about casts that might indicate violation\n+   of strict aliasing rules if -Wstrict-aliasing is used and\n+   strict aliasing mode is in effect. otype is the original\n+   TREE_TYPE of expr, and type the type we're casting to. */\n+\n+void\n+strict_aliasing_warning(tree otype, tree type, tree expr)\n+{\n+  if (flag_strict_aliasing && warn_strict_aliasing\n+      && POINTER_TYPE_P (type) && POINTER_TYPE_P (otype)\n+      && TREE_CODE (expr) == ADDR_EXPR\n+      && (DECL_P (TREE_OPERAND (expr, 0))\n+          || TREE_CODE (TREE_OPERAND (expr, 0)) == COMPONENT_REF)\n+      && !VOID_TYPE_P (TREE_TYPE (type)))\n+    {\n+      /* Casting the address of an object to non void pointer. Warn\n+         if the cast breaks type based aliasing.  */\n+      if (!COMPLETE_TYPE_P (TREE_TYPE (type)))\n+        warning (OPT_Wstrict_aliasing, \"type-punning to incomplete type \"\n+                 \"might break strict-aliasing rules\");\n+      else\n+        {\n+          HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0)));\n+          HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n+\n+          if (!alias_sets_conflict_p (set1, set2))\n+            warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n+                     \"pointer will break strict-aliasing rules\");\n+          else if (warn_strict_aliasing > 1\n+                  && !alias_sets_might_conflict_p (set1, set2))\n+            warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n+                     \"pointer might break strict-aliasing rules\");\n+        }\n+    }\n+}\n+\n /* Nonzero if constant C has a value that is permissible\n    for type TYPE (an INTEGER_TYPE).  */\n "}, {"sha": "c78f4625327cc8fe162341ed5aa8d5d77d088a99", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -649,6 +649,7 @@ extern void binary_op_error (enum tree_code);\n extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);\n+extern void strict_aliasing_warning(tree, tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void unsigned_conversion_warning (tree, tree);"}, {"sha": "735d9e741ed0c592ff2de6acc083a62f80a84fd1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -3441,33 +3441,7 @@ build_c_cast (tree type, tree expr)\n \twarning (OPT_Wint_to_pointer_cast, \"cast to pointer from integer \"\n \t\t \"of different size\");\n \n-      if (flag_strict_aliasing && warn_strict_aliasing\n-\t  && TREE_CODE (type) == POINTER_TYPE\n-\t  && TREE_CODE (otype) == POINTER_TYPE\n-\t  && TREE_CODE (expr) == ADDR_EXPR\n-\t  && (DECL_P (TREE_OPERAND (expr, 0))\n-\t      || TREE_CODE (TREE_OPERAND (expr, 0)) == COMPONENT_REF)\n-\t  && !VOID_TYPE_P (TREE_TYPE (type)))\n-\t{\n-\t  /* Casting the address of an object to non void pointer. Warn\n-\t     if the cast breaks type based aliasing.  */\n-\t  if (!COMPLETE_TYPE_P (TREE_TYPE (type)))\n-\t    warning (OPT_Wstrict_aliasing, \"type-punning to incomplete type \"\n-\t\t     \"might break strict-aliasing rules\");\n-\t  else\n-\t    {\n-\t      HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0)));\n-\t      HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n-\n-\t      if (!alias_sets_conflict_p (set1, set2))\n-\t\twarning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n-\t\t\t \"pointer will break strict-aliasing rules\");\n-\t      else if (warn_strict_aliasing > 1\n-\t\t       && !alias_sets_might_conflict_p (set1, set2))\n-\t\twarning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n-\t\t\t \"pointer might break strict-aliasing rules\");\n-\t    }\n-\t}\n+      strict_aliasing_warning (otype, type, expr);\n \n       /* If pedantic, warn for conversions between function and object\n \t pointer types, except for converting a null pointer constant"}, {"sha": "dbf3330abb8b4d0d8f47f96f4331035350b9892d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -1,3 +1,10 @@\n+2005-11-24  Richard Guenther  <rguenther@suse.de>\n+\tDirk Mueller <dmueller@suse.de>\n+\n+\tPR c++/14024\n+\t* typeck.c (build_reinterpret_cast_1): Use\n+\tstrict_aliasing_warning.\n+\n 2005-11-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR c++/24235"}, {"sha": "60ef195a90cc3f6f6fe5d491f3a992fe50288c84", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -5011,6 +5011,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n   else if ((TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n \t   || (TYPE_PTROBV_P (type) && TYPE_PTROBV_P (intype)))\n     {\n+      tree sexpr = expr;\n+\n       if (!c_cast_p)\n \tcheck_for_casting_away_constness (intype, type, error,\n \t\t\t\t\t  \"reinterpret_cast\");\n@@ -5025,6 +5027,11 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t\t \"target type\",\n \t\t intype, type);\n \n+      /* We need to strip nops here, because the frontend likes to\n+\t create (int *)&a for array-to-pointer decay, instead of &a[0].  */\n+      STRIP_NOPS (sexpr);\n+      strict_aliasing_warning (intype, type, sexpr);\n+\n       return fold_if_not_in_template (build_nop (type, expr));\n     }\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))"}, {"sha": "d2bc993463755543c7a41a3ef57366841d2a9582", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -1,3 +1,14 @@\n+2005-11-24  Richard Guenther  <rguenther@suse.de>\n+\tDirk Mueller <dmueller@suse.de>\n+\n+\tPR c++/14024\n+\t* g++.dg/warn/Wstrict-aliasing-1.C: New testcase.\n+\t* g++.dg/warn/Wstrict-aliasing-2.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-3.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-4.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-5.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-6.C: Likewise.\n+\n 2005-11-23  Uros Bizjak  <uros@kss-loka.si>\n \n \t* g++.dg/other/i386-1.C: Pass if CPU has no SSE2 support."}, {"sha": "3e9db3611ae0dd64ca8089e9f6bb3a241b1c3b31", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-1.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+double x;\n+int *foo(void)\n+{\n+  return (int *)&x; /* { dg-warning \"strict-aliasing\" } */\n+}\n+"}, {"sha": "713b35461cf72d65dfe4b5c45b79e831012ade2e", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-2.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+double x;\n+\n+template <typename T>\n+T *foo(void)\n+{\n+  return (T *)&x; /* { dg-bogus \"strict-aliasing\" } */\n+}\n+\n+template double *foo<double>(void);\n+"}, {"sha": "9fc3538907352c78be30825f92d36f62243239c2", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+double x;\n+\n+template <typename T>\n+T *foo(void)\n+{\n+  return (T *)&x; /* { dg-warning \"strict-aliasing\" } */\n+}\n+\n+template int *foo<int>(void); /* { dg-warning \"instantiated from here\" } */\n+template char *foo<char>(void); /* { dg-bogus \"instantiated from here\" } */\n+"}, {"sha": "e877c70fb1d06466f99c23b586c257ad9a22c00e", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-4.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+double x;\n+\n+template <typename T>\n+T *foo(void)\n+{\n+  int a[2];\n+  float *y = (float *)a; /* { dg-bogus \"strict-aliasing\" } */\n+  return (T *)&x; /* { dg-bogus \"strict-aliasing\" } */\n+}\n+"}, {"sha": "a049251186585a1d86dd1084abc023ce80dbf9d9", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+float foo ()\n+{\n+  unsigned int MASK = 0x80000000;\n+  return (float &) MASK; /* { dg-warning \"strict-aliasing\" } */\n+}\n+"}, {"sha": "6f935c8540bf8aefd4aa3312777816b96fbc0f7e", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9c56a4dc72cbf510064de22950ef44835701c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-6.C?ref=de9c56a4dc72cbf510064de22950ef44835701c7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n+\n+int foo ()\n+{\n+  char buf[8];\n+  return *((int *)buf); /* { dg-warning \"strict-aliasing\" } */\n+}\n+"}]}