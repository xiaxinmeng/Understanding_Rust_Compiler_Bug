{"sha": "76e776e5e8c79221e20b722f3de2aa47aff82a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlNzc2ZTVlOGM3OTIyMWUyMGI3MjJmM2RlMmFhNDdhZmY4MmExMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T10:37:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T10:37:20Z"}, "message": "[multiple changes]\n\n2009-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): Do not create blocks around code\n\tstatements, even though the actual of the call is a concatenation,\n\tbecause the argument is static, and we want to preserve warning\n\tmessages  about sequences of code statements that are not marked\n\tvolatile.\n\n\t* sem_warn.adb: remove obsolete comment about warning being obsolete\n\n\t* s-tasren.adb (Task_Do_Or_Queue): If a timed entry call is being\n\trequeued and the delay has expired while within the accept statement\n\tthat executes the requeue, do not perform the requeue and indicate that\n\tthe timed call has been aborted.\n\n2009-04-24  Emmanuel Briot  <briot@adacore.com>\n\n\t* mlib-prj.adb, prj.adb, prj.ads, prj-nmsc.adb, prj-env.adb\n\t(Has_Ada_Sources, Has_Foreign_Sources): new subprograms\n\t(Project_Data.Ada_Sources_Present, Foreign_Sources_Present): removed,\n\tsince they can be computed from the above.\n\nFrom-SVN: r146698", "tree": {"sha": "75d2033d3b14ba196fe382fdbdb2908e8e8901a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d2033d3b14ba196fe382fdbdb2908e8e8901a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e776e5e8c79221e20b722f3de2aa47aff82a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e776e5e8c79221e20b722f3de2aa47aff82a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e776e5e8c79221e20b722f3de2aa47aff82a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e776e5e8c79221e20b722f3de2aa47aff82a11/comments", "author": null, "committer": null, "parents": [{"sha": "e3dd53ec495fe55dfedef9ef3264eeed6bba1776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dd53ec495fe55dfedef9ef3264eeed6bba1776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3dd53ec495fe55dfedef9ef3264eeed6bba1776"}], "stats": {"total": 181, "additions": 108, "deletions": 73}, "files": [{"sha": "069359429066dc6977dff555dd0002f2d5fe6f9a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -1,3 +1,25 @@\n+2009-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Do not create blocks around code\n+\tstatements, even though the actual of the call is a concatenation,\n+\tbecause the argument is static, and we want to preserve warning\n+\tmessages  about sequences of code statements that are not marked\n+\tvolatile.\n+\n+\t* sem_warn.adb: remove obsolete comment about warning being obsolete\n+\n+\t* s-tasren.adb (Task_Do_Or_Queue): If a timed entry call is being\n+\trequeued and the delay has expired while within the accept statement\n+\tthat executes the requeue, do not perform the requeue and indicate that\n+\tthe timed call has been aborted.\n+\n+2009-04-24  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* mlib-prj.adb, prj.adb, prj.ads, prj-nmsc.adb, prj-env.adb\n+\t(Has_Ada_Sources, Has_Foreign_Sources): new subprograms\n+\t(Project_Data.Ada_Sources_Present, Foreign_Sources_Present): removed,\n+\tsince they can be computed from the above.\n+\n 2009-04-24  Vincent Celier  <celier@adacore.com>\n \n \t* gnatcmd.adb: Call Prj.Env.Initialize with the Project_Tree"}, {"sha": "b02718d6bf9b8d466da6e3234993ce28fea6117e", "filename": "gcc/ada/mlib-prj.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fmlib-prj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fmlib-prj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-prj.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -1351,7 +1351,7 @@ package body MLib.Prj is\n \n          In_Main_Object_Directory := True;\n \n-         There_Are_Foreign_Sources := Data.Other_Sources_Present;\n+         There_Are_Foreign_Sources := Has_Foreign_Sources (Data);\n \n          loop\n             if Data.Object_Directory /= No_Path_Information then"}, {"sha": "451fcc483c97b20ce375159c7da50d62ceba8e90", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -1563,7 +1563,7 @@ package body Prj.Env is\n          --  If there are Ada sources, call action with the name of every\n          --  source directory.\n \n-         if In_Tree.Projects.Table (Project).Ada_Sources_Present then\n+         if Has_Ada_Sources (In_Tree.Projects.Table (Project)) then\n             while Current /= Nil_String loop\n                The_String := In_Tree.String_Elements.Table (Current);\n                Action (Get_Name_String (The_String.Display_Value));"}, {"sha": "7c3677b35f783983593698f5acf00cd94456cde0", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -4348,9 +4348,6 @@ package body Prj.Nmsc is\n       --  Shouldn't these be set to False by default, and only set to True when\n       --  we actually find some source file???\n \n-      Data.Ada_Sources_Present   := Data.Source_Dirs /= Nil_String;\n-      Data.Other_Sources_Present := Data.Source_Dirs /= Nil_String;\n-\n       if Data.Source_Dirs /= Nil_String then\n \n          --  Check if languages are specified in this project\n@@ -4396,13 +4393,6 @@ package body Prj.Nmsc is\n                   Data.Languages.Config.Kind := Unit_Based;\n                   Data.Languages.Config.Dependency_Kind :=\n                     ALI_File;\n-\n-                  --  Attribute Languages is not specified. So, it defaults to\n-                  --  a project of language Ada only. No sources of languages\n-                  --  other than Ada.\n-\n-                  Data.Other_Sources_Present := False;\n-\n                else\n                   Data.Languages.Config.Kind := File_Based;\n                end if;\n@@ -4417,11 +4407,6 @@ package body Prj.Nmsc is\n                NL_Id             : Language_Ptr;\n \n             begin\n-               --  Assume there are no languages declared\n-\n-               Data.Ada_Sources_Present := False;\n-               Data.Other_Sources_Present := False;\n-\n                --  If there are no languages declared, there are no sources\n \n                if Current = Nil_String then\n@@ -4455,18 +4440,6 @@ package body Prj.Nmsc is\n                      end loop;\n \n                      if NL_Id = No_Language_Index then\n-                        if Get_Mode = Ada_Only then\n-\n-                           --  Check for language Ada\n-\n-                           if Lang_Name = Name_Ada then\n-                              Data.Ada_Sources_Present := True;\n-\n-                           else\n-                              Data.Other_Sources_Present := True;\n-                           end if;\n-                        end if;\n-\n                         Index := new Language_Data'(No_Language_Data);\n                         Index.Name := Lang_Name;\n                         Index.Display_Name := Element.Value;\n@@ -7096,10 +7069,6 @@ package body Prj.Nmsc is\n             Name     : File_Name_Type;\n \n          begin\n-            if Get_Mode = Ada_Only then\n-               Data.Ada_Sources_Present := Current /= Nil_String;\n-            end if;\n-\n             if Get_Mode = Multi_Language then\n                if Current = Nil_String then\n                   Data.Languages := No_Language_Index;\n@@ -7292,7 +7261,7 @@ package body Prj.Nmsc is\n       then\n          --  We should have found at least one source, if not report an error\n \n-         if Data.Ada_Sources = Nil_String then\n+         if not Has_Ada_Sources (Data) then\n             Report_No_Sources\n               (Project, \"Ada\", In_Tree, Source_List_File.Location);\n          end if;"}, {"sha": "913ad888c0f58c80d3ed9e9aa2cdc193134dc43c", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -104,8 +104,6 @@ package body Prj is\n                       Lib_Auto_Init                  => False,\n                       Libgnarl_Needed                => Unknown,\n                       Symbol_Data                    => No_Symbols,\n-                      Ada_Sources_Present            => True,\n-                      Other_Sources_Present          => True,\n                       Ada_Sources                    => Nil_String,\n                       Interfaces_Defined             => False,\n                       Imported_Directories_Switches  => null,\n@@ -1184,6 +1182,42 @@ package body Prj is\n       raise Constraint_Error;\n    end Value;\n \n+   ---------------------\n+   -- Has_Ada_Sources --\n+   ---------------------\n+\n+   function Has_Ada_Sources (Data : Project_Data) return Boolean is\n+      Lang : Language_Ptr := Data.Languages;\n+   begin\n+      while Lang /= No_Language_Index loop\n+         if Lang.Name = Name_Ada then\n+            return Lang.First_Source /= No_Source;\n+         end if;\n+         Lang := Lang.Next;\n+      end loop;\n+\n+      return False;\n+   end Has_Ada_Sources;\n+\n+   -------------------------\n+   -- Has_Foreign_Sources --\n+   -------------------------\n+\n+   function Has_Foreign_Sources (Data : Project_Data) return Boolean is\n+      Lang : Language_Ptr := Data.Languages;\n+   begin\n+      while Lang /= No_Language_Index loop\n+         if Lang.Name /= Name_Ada\n+           and then Lang.First_Source /= No_Source\n+         then\n+            return True;\n+         end if;\n+         Lang := Lang.Next;\n+      end loop;\n+\n+      return False;\n+   end Has_Foreign_Sources;\n+\n begin\n    --  Make sure that the standard config and user project file extensions are\n    --  compatible with canonical case file naming."}, {"sha": "88d04770b0ef611a037b5fa6ea9321daa09848a2", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -1239,12 +1239,6 @@ package Prj is\n       --  In multi-language mode, the sources for all languages including Ada\n       --  are accessible through the Source_Iterator type\n \n-      Ada_Sources_Present : Boolean := True;\n-      --  True if there are Ada sources in the project\n-\n-      Other_Sources_Present : Boolean := True;\n-      --  True if there are non-Ada sources in the project\n-\n       Ada_Sources : String_List_Id := Nil_String;\n       --  The list of all the Ada source file names (gnatmake only).\n \n@@ -1350,6 +1344,12 @@ package Prj is\n    --  Return True when Language_Name (which must be lower case) is one of the\n    --  languages used for the project.\n \n+   function Has_Ada_Sources (Data : Project_Data) return Boolean;\n+   --  Return True if the project has Ada sources\n+\n+   function Has_Foreign_Sources (Data : Project_Data) return Boolean;\n+   --  Return True if the project has foreign sources\n+\n    Project_Error : exception;\n    --  Raised by some subprograms in Prj.Attr\n \n@@ -1417,8 +1417,9 @@ package Prj is\n       Equal      => \"=\");\n    --  Mapping of file names to indexes in the Units table\n \n-   type Private_Project_Tree_Data is private;\n-   --  Data for a project tree that is used only by the Project Manager\n+   ---------------------\n+   -- Source_Iterator --\n+   ---------------------\n \n    type Source_Iterator is private;\n \n@@ -1435,6 +1436,13 @@ package Prj is\n    procedure Next (Iter : in out Source_Iterator);\n    --  Move on to the next source\n \n+   -----------------------\n+   -- Project_Tree_Data --\n+   -----------------------\n+\n+   type Private_Project_Tree_Data is private;\n+   --  Data for a project tree that is used only by the Project Manager\n+\n    type Project_Tree_Data is\n       record\n          Name_Lists        : Name_List_Table.Instance;"}, {"sha": "7cdde56054d9c0adc6d7a796d8512b4f055c642b", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -1225,9 +1225,31 @@ package body System.Tasking.Rendezvous is\n       --  we would not have gotten this far, so now we should\n       --  (re)enqueue the call, if the mode permits that.\n \n-      if Entry_Call.Mode /= Conditional_Call\n-        or else not Entry_Call.With_Abort\n+      --  If the call is timed, it may have timed out before the requeue,\n+      --  in the unusual case where the current accept has taken longer than\n+      --  the given delay. In that case the requeue is cancelled, and the\n+      --  outer timed call will be aborted.\n+\n+      if Entry_Call.Mode = Conditional_Call\n+        or else\n+          (Entry_Call.Mode = Timed_Call\n+            and then Entry_Call.With_Abort\n+            and then Entry_Call.Cancellation_Attempted)\n       then\n+         STPO.Unlock (Acceptor);\n+\n+         if Parent_Locked then\n+            STPO.Unlock (Parent);\n+         end if;\n+\n+         STPO.Write_Lock (Entry_Call.Self);\n+\n+         pragma Assert (Entry_Call.State >= Was_Abortable);\n+\n+         Initialization.Wakeup_Entry_Caller (Self_ID, Entry_Call, Cancelled);\n+         STPO.Unlock (Entry_Call.Self);\n+\n+      else\n          --  Timed_Call, Simple_Call, or Asynchronous_Call\n \n          Queuing.Enqueue (Acceptor.Entry_Queues (E), Entry_Call);\n@@ -1266,22 +1288,6 @@ package body System.Tasking.Rendezvous is\n \n             STPO.Unlock (Entry_Call.Self);\n          end if;\n-\n-      else\n-         --  Conditional_Call and With_Abort\n-\n-         STPO.Unlock (Acceptor);\n-\n-         if Parent_Locked then\n-            STPO.Unlock (Parent);\n-         end if;\n-\n-         STPO.Write_Lock (Entry_Call.Self);\n-\n-         pragma Assert (Entry_Call.State >= Was_Abortable);\n-\n-         Initialization.Wakeup_Entry_Caller (Self_ID, Entry_Call, Cancelled);\n-         STPO.Unlock (Entry_Call.Self);\n       end if;\n \n       return True;"}, {"sha": "11bce01fe5a45126e15346c21bb238a0599c11d6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -3173,11 +3173,17 @@ package body Sem_Res is\n             --  A small optimization: if one of the actuals is a concatenation\n             --  create a block around a procedure call to recover stack space.\n             --  This alleviates stack usage when several procedure calls in\n-            --  the same statement list use concatenation.\n+            --  the same statement list use concatenation. We do not perform\n+            --  this wrapping for code statements, where the argument is a\n+            --  static string, and we want to preserve warnings involving\n+            --  sequences of such statements.\n \n             elsif Nkind (A) = N_Op_Concat\n               and then Nkind (N) = N_Procedure_Call_Statement\n               and then Expander_Active\n+              and then\n+                not (Is_Intrinsic_Subprogram (Nam)\n+                      and then Chars (Nam) = Name_Asm)\n             then\n                Establish_Transient_Scope (A, False);\n                Resolve (A, Etype (F));"}, {"sha": "ec1d1d767e0abe7a92f29aaf87c462249a48f23f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e776e5e8c79221e20b722f3de2aa47aff82a11/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=76e776e5e8c79221e20b722f3de2aa47aff82a11", "patch": "@@ -213,16 +213,6 @@ package body Sem_Warn is\n \n       --  Check multiple code statements in a row\n \n-      --  Note: the following code is now unreachable, because Asm statements\n-      --  are procedure calls whose actuals are concatenations, and as a result\n-      --  of a recent stack usage optimization each such call has its own\n-      --  block.\n-\n-      --  Are they always concatenations??? if so why not remove this code???\n-\n-      --  And indeed if we are really losing this warning, that's really bad\n-      --  and we need to put it back ???\n-\n       if Is_List_Member (N)\n         and then Present (Prev (N))\n         and then Nkind (Prev (N)) = N_Code_Statement"}]}