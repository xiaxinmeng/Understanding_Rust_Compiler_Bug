{"sha": "dfd39ed30dd69a3613d47a83d3739923051734aa", "node_id": "C_kwDOANBUbNoAKGRmZDM5ZWQzMGRkNjlhMzYxM2Q0N2E4M2QzNzM5OTIzMDUxNzM0YWE", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-01-29T20:14:48Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-02-21T14:12:19Z"}, "message": "libphobos: Add @nogc to gcc.backtrace and gcc.libbacktrace modules.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/gcc/backtrace.d (simpleErrorCallback): Add @nogc.\n\t(LibBacktrace.initLibBacktrace): Likewise.\n\t(LibBacktrace.this): Likewise.\n\t(UnwindBacktrace.this): Likewise.\n\t(getBacktrace): Likewise.\n\t(getBacktraceSymbols): Likewise.\n\t* libdruntime/gcc/libbacktrace.d.in (backtrace_create_state):\n\tLikewise.\n\t(backtrace_full): Likewise.\n\t(backtrace_simple): Likewise.\n\t(backtrace_print): Likewise.\n\t(backtrace_pcinfo): Likewise.\n\t(backtrace_syminfo): Likewise.", "tree": {"sha": "d5247c67bea787eee8a662b8287f9ed848b68351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5247c67bea787eee8a662b8287f9ed848b68351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfd39ed30dd69a3613d47a83d3739923051734aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd39ed30dd69a3613d47a83d3739923051734aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd39ed30dd69a3613d47a83d3739923051734aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd39ed30dd69a3613d47a83d3739923051734aa/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd033b8bcb0c50ad80084a3a13a391808b2deb6"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2b4a339e721d7f80a97bd57d79b8a489bbb58afd", "filename": "libphobos/libdruntime/gcc/backtrace.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd39ed30dd69a3613d47a83d3739923051734aa/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd39ed30dd69a3613d47a83d3739923051734aa/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d?ref=dfd39ed30dd69a3613d47a83d3739923051734aa", "patch": "@@ -46,7 +46,7 @@ static if (BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC)\n     /*\n      * Used for backtrace_create_state and backtrace_simple\n      */\n-    extern(C) void simpleErrorCallback(void* data, const(char)* msg, int errnum)\n+    extern(C) void simpleErrorCallback(void* data, const(char)* msg, int errnum) @nogc\n     {\n         if (data) // context is not available in backtrace_create_state\n         {\n@@ -187,7 +187,7 @@ static if (BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC)\n     // FIXME: state is never freed as libbacktrace doesn't provide a free function...\n     public class LibBacktrace : Throwable.TraceInfo\n     {\n-        static void initLibBacktrace()\n+        static void initLibBacktrace() @nogc\n         {\n             if (!initialized)\n             {\n@@ -196,7 +196,7 @@ static if (BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC)\n             }\n         }\n \n-        this(int firstFrame)\n+        this(int firstFrame) @nogc\n         {\n             _firstFrame = firstFrame;\n \n@@ -345,7 +345,7 @@ else\n      */\n     public class UnwindBacktrace : Throwable.TraceInfo\n     {\n-        this(int firstFrame)\n+        this(int firstFrame) @nogc\n         {\n             _firstFrame = firstFrame;\n             _callstack = getBacktrace();\n@@ -436,14 +436,14 @@ private:\n         return _URC_NO_REASON;\n     }\n \n-    UnwindBacktraceData getBacktrace()\n+    UnwindBacktraceData getBacktrace() @nogc\n     {\n         UnwindBacktraceData stackframe;\n         _Unwind_Backtrace(&unwindCB, &stackframe);\n         return stackframe;\n     }\n \n-    BTSymbolData getBacktraceSymbols(UnwindBacktraceData data)\n+    BTSymbolData getBacktraceSymbols(UnwindBacktraceData data) @nogc\n     {\n         BTSymbolData symData;\n "}, {"sha": "def017d155b5073cc6a4985113c20db417128712", "filename": "libphobos/libdruntime/gcc/libbacktrace.d.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd39ed30dd69a3613d47a83d3739923051734aa/libphobos%2Flibdruntime%2Fgcc%2Flibbacktrace.d.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd39ed30dd69a3613d47a83d3739923051734aa/libphobos%2Flibdruntime%2Fgcc%2Flibbacktrace.d.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Flibbacktrace.d.in?ref=dfd39ed30dd69a3613d47a83d3739923051734aa", "patch": "@@ -46,28 +46,28 @@ extern(C):\n         backtrace_error_callback;\n \n     backtrace_state* backtrace_create_state(const(char)* filename, int threaded,\n-                                            backtrace_error_callback error_callback, void* data) nothrow;\n+                                            backtrace_error_callback error_callback, void* data) @nogc nothrow;\n \n     alias extern(C) int function(void* data, uintptr_t pc, const(char)* filename, int lineno, const(char)* func)\n         backtrace_full_callback;\n \n     int backtrace_full(backtrace_state* state, int skip, backtrace_full_callback callback,\n-                       backtrace_error_callback error_callback, void* data) nothrow;\n+                       backtrace_error_callback error_callback, void* data) @nogc nothrow;\n \n     alias extern(C) int function(void* data, uintptr_t pc)\n         backtrace_simple_callback;\n \n     int backtrace_simple(backtrace_state* state, int skip, backtrace_simple_callback callback,\n-                         backtrace_error_callback error_callback, void* data) nothrow;\n+                         backtrace_error_callback error_callback, void* data) @nogc nothrow;\n \n-    void backtrace_print(backtrace_state* state, int skip, FILE* file) nothrow;\n+    void backtrace_print(backtrace_state* state, int skip, FILE* file) @nogc nothrow;\n \n     int backtrace_pcinfo(backtrace_state* state, uintptr_t pc, backtrace_full_callback callback,\n-                         backtrace_error_callback error_callback,    void* data) nothrow;\n+                         backtrace_error_callback error_callback,    void* data) @nogc nothrow;\n \n     alias extern(C) void function(void* data, uintptr_t pc, const(char)* symname, uintptr_t symval)\n         backtrace_syminfo_callback;\n \n     int backtrace_syminfo(backtrace_state *state, uintptr_t pc, backtrace_syminfo_callback callback,\n-                          backtrace_error_callback error_callback, void* data) nothrow;\n+                          backtrace_error_callback error_callback, void* data) @nogc nothrow;\n }"}]}