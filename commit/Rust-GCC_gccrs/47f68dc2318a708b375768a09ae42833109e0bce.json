{"sha": "47f68dc2318a708b375768a09ae42833109e0bce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNjhkYzIzMThhNzA4YjM3NTc2OGEwOWFlNDI4MzMxMDllMGJjZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T15:46:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T15:46:47Z"}, "message": "runtime: make NumGoroutine wait for system goroutines to register\n    \n    In libgo system goroutines register themselves after they start.\n    That means that there is a small race between the goroutine being\n    seen by the scheduler and the scheduler knowing that the goroutine\n    is a system goroutine. That in turn means that runtime.NumGoroutines\n    can overestimate the number of goroutines at times.\n    \n    This patch fixes the overestimate by counting the number of system\n    goroutines waiting to start, and pausing NumGoroutines until those\n    goroutines have all registered.\n    \n    This is kind of a lot of mechanism for this not very important\n    problem, but I couldn't think of a better approach.\n    \n    The test for this is TestNumGoroutine in runtime/proc_test.go.\n    The test is not currently run, but it will be soon.\n    \n    Reviewed-on: https://go-review.googlesource.com/46457\n\nFrom-SVN: r249565", "tree": {"sha": "6a99bb0ecaa8b80fff1f3d04929533bbc7d22048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a99bb0ecaa8b80fff1f3d04929533bbc7d22048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f68dc2318a708b375768a09ae42833109e0bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f68dc2318a708b375768a09ae42833109e0bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f68dc2318a708b375768a09ae42833109e0bce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f68dc2318a708b375768a09ae42833109e0bce/comments", "author": null, "committer": null, "parents": [{"sha": "b8f70831bfbd1e9bdd989010ea114967bee0f34b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f70831bfbd1e9bdd989010ea114967bee0f34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f70831bfbd1e9bdd989010ea114967bee0f34b"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "ccc7919d2c22ee5cab7a6a4f7bedc4c7abbe53f4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -1,4 +1,4 @@\n-54d83c2d67c35ad4f622936d2fbf81c17354fff9\n+681c8a7b0a9d52c0b81e7a4b1c55fe65ed889573\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "fdd73463aba0c22c12bd0e00371ffeb40c446b28", "filename": "libgo/go/runtime/debug.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug.go?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -54,6 +54,7 @@ func NumCgoCall() int64 {\n \n // NumGoroutine returns the number of goroutines that currently exist.\n func NumGoroutine() int {\n+\twaitForSystemGoroutines()\n \treturn int(gcount())\n }\n "}, {"sha": "229ccb55387892a4cf9c09ac9a2cfb6cbdced87c", "filename": "libgo/go/runtime/mfinal.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fmfinal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fmfinal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmfinal.go?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -106,6 +106,7 @@ var (\n func createfing() {\n \t// start the finalizer goroutine exactly once\n \tif fingCreate == 0 && atomic.Cas(&fingCreate, 0, 1) {\n+\t\texpectSystemGoroutine()\n \t\tgo runfinq()\n \t}\n }"}, {"sha": "ebb00e155d02f754091a6400bdb64344eda32f01", "filename": "libgo/go/runtime/mgc.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fmgc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fmgc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgc.go?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -209,6 +209,7 @@ func readgogc() int32 {\n // It kicks off the background sweeper goroutine and enables GC.\n func gcenable() {\n \tc := make(chan int, 1)\n+\texpectSystemGoroutine()\n \tgo bgsweep(c)\n \t<-c\n \tmemstats.enablegc = true // now that runtime is initialized, GC is okay\n@@ -1399,6 +1400,7 @@ func gcBgMarkStartWorkers() {\n \t\t\tbreak\n \t\t}\n \t\tif p.gcBgMarkWorker == 0 {\n+\t\t\texpectSystemGoroutine()\n \t\t\tgo gcBgMarkWorker(p)\n \t\t\tnotetsleepg(&work.bgMarkReady, -1)\n \t\t\tnoteclear(&work.bgMarkReady)"}, {"sha": "cb1e974eb53613a3fbd1a4ad93f8d6985323f561", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -233,6 +233,7 @@ func os_beforeExit() {\n \n // start forcegc helper goroutine\n func init() {\n+\texpectSystemGoroutine()\n \tgo forcegchelper()\n }\n \n@@ -2728,6 +2729,28 @@ func newproc(fn uintptr, arg unsafe.Pointer) *g {\n \treturn newg\n }\n \n+// expectedSystemGoroutines counts the number of goroutines expected\n+// to mark themselves as system goroutines. After they mark themselves\n+// by calling setSystemGoroutine, this is decremented. NumGoroutines\n+// uses this to wait for all system goroutines to mark themselves\n+// before it counts them.\n+var expectedSystemGoroutines uint32\n+\n+// expectSystemGoroutine is called when starting a goroutine that will\n+// call setSystemGoroutine. It increments expectedSystemGoroutines.\n+func expectSystemGoroutine() {\n+\tatomic.Xadd(&expectedSystemGoroutines, +1)\n+}\n+\n+// waitForSystemGoroutines waits for all currently expected system\n+// goroutines to register themselves.\n+func waitForSystemGoroutines() {\n+\tfor atomic.Load(&expectedSystemGoroutines) > 0 {\n+\t\tGosched()\n+\t\tosyield()\n+\t}\n+}\n+\n // setSystemGoroutine marks this goroutine as a \"system goroutine\".\n // In the gc toolchain this is done by comparing startpc to a list of\n // saved special PCs. In gccgo that approach does not work as startpc\n@@ -2738,6 +2761,7 @@ func newproc(fn uintptr, arg unsafe.Pointer) *g {\n func setSystemGoroutine() {\n \tgetg().isSystemGoroutine = true\n \tatomic.Xadd(&sched.ngsys, +1)\n+\tatomic.Xadd(&expectedSystemGoroutines, -1)\n }\n \n // Put on gfree list."}, {"sha": "cc167a8bcfe96cfcf2174fb980b14c75f5d8ed69", "filename": "libgo/go/runtime/time.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Ftime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f68dc2318a708b375768a09ae42833109e0bce/libgo%2Fgo%2Fruntime%2Ftime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftime.go?ref=47f68dc2318a708b375768a09ae42833109e0bce", "patch": "@@ -113,6 +113,7 @@ func addtimerLocked(t *timer) {\n \t}\n \tif !timers.created {\n \t\ttimers.created = true\n+\t\texpectSystemGoroutine()\n \t\tgo timerproc()\n \t}\n }"}]}