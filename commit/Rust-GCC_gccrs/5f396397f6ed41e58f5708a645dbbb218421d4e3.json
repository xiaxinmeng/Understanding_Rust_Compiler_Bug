{"sha": "5f396397f6ed41e58f5708a645dbbb218421d4e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzOTYzOTdmNmVkNDFlNThmNTcwOGE2NDVkYmJiMjE4NDIxZDRlMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-07-08T13:04:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-19T09:53:40Z"}, "message": "[Ada] Compiler abort on in_out function parameter with type invariant\n\ngcc/ada/\n\n\t* exp_ch6.adb (Add_View_Conversion_Invariants): Do not insert\n\tgenerated invariant checks when the call is a function call.\n\tThese tests are properly inserted in the code in procedure\n\tInsert_Post_Call_Actions, which takes care of finding the proper\n\tinsertion point for the checks.\n\t(Insert_Post_Call_Actions): Add question marks to indicate\n\tpossible gap in handling function calls that appear as aggregate\n\tcomponents.", "tree": {"sha": "a9d83f243f6e94e85b1db43ff5a2ddf9cbd23063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9d83f243f6e94e85b1db43ff5a2ddf9cbd23063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f396397f6ed41e58f5708a645dbbb218421d4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f396397f6ed41e58f5708a645dbbb218421d4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f396397f6ed41e58f5708a645dbbb218421d4e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f396397f6ed41e58f5708a645dbbb218421d4e3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ecd94cc7daf60ed04a81107c8d52c23cfef84d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ecd94cc7daf60ed04a81107c8d52c23cfef84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ecd94cc7daf60ed04a81107c8d52c23cfef84d"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "aa67343a1c7970740e3df4cb20d18ae31edd6c66", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f396397f6ed41e58f5708a645dbbb218421d4e3/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f396397f6ed41e58f5708a645dbbb218421d4e3/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5f396397f6ed41e58f5708a645dbbb218421d4e3", "patch": "@@ -2943,7 +2943,12 @@ package body Exp_Ch6 is\n             Par_Typ := Base_Type (Etype (Curr_Typ));\n          end loop;\n \n-         if not Is_Empty_List (Inv_Checks) then\n+         --  If the node is a function call the generated tests have been\n+         --  already handled in Insert_Post_Call_Actions.\n+\n+         if not Is_Empty_List (Inv_Checks)\n+           and then Nkind (Call_Node) = N_Procedure_Call_Statement\n+         then\n             Insert_Actions_After (Call_Node, Inv_Checks);\n          end if;\n       end Add_View_Conversion_Invariants;\n@@ -8388,6 +8393,7 @@ package body Exp_Ch6 is\n       --  The only exception is when the function call acts as an actual in a\n       --  procedure call. In this case the function call is in a list, but the\n       --  post-call actions must be inserted after the procedure call.\n+      --  What if the function call is an aggregate component ???\n \n       elsif Nkind (Context) = N_Procedure_Call_Statement then\n          Insert_Actions_After (Context, Post_Call);"}]}