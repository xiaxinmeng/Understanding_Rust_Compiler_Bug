{"sha": "e8a8bc249697d3c0d290b3926ab9c1aea89fd17c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThhOGJjMjQ5Njk3ZDNjMGQyOTBiMzkyNmFiOWMxYWVhODlmZDE3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-22T10:43:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-22T10:43:39Z"}, "message": "entered into RCS\n\nFrom-SVN: r1234", "tree": {"sha": "ac506c6ea19e0f7e855f5aa6114bd90919a3e801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac506c6ea19e0f7e855f5aa6114bd90919a3e801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c/comments", "author": null, "committer": null, "parents": [{"sha": "5c96a03732c08e298766858d9167a4c91aae0ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c96a03732c08e298766858d9167a4c91aae0ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c96a03732c08e298766858d9167a4c91aae0ab7"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "7be040d68017e0aee818b81f10e169e911c72fae", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a8bc249697d3c0d290b3926ab9c1aea89fd17c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e8a8bc249697d3c0d290b3926ab9c1aea89fd17c", "patch": "@@ -330,7 +330,7 @@ extern int target_flags;\n \n    On the RS/6000, bump this up a bit.  */\n \n-#define MEMORY_MOVE_COST(MODE)  4\n+#define MEMORY_MOVE_COST(MODE)  6\n \n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch.\n@@ -401,7 +401,8 @@ extern int target_flags;\n \n enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n   NON_SPECIAL_REGS, MQ_REGS, LINK_REGS, CTR_REGS, LINK_OR_CTR_REGS,\n-  SPECIAL_REGS, CR0_REGS, CR_REGS, ALL_REGS, LIM_REG_CLASSES };\n+  SPECIAL_REGS, SPEC_OR_GEN_REGS, CR0_REGS, CR_REGS, NON_FLOAT_REGS,\n+  ALL_REGS, LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n@@ -410,17 +411,19 @@ enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n #define REG_CLASS_NAMES\t\t\t\t\t \t\\\n   { \"NO_REGS\", \"BASE_REGS\", \"GENERAL_REGS\", \"FLOAT_REGS\",\t\\\n     \"NON_SPECIAL_REGS\", \"MQ_REGS\", \"LINK_REGS\", \"CTR_REGS\",\t\\\n-    \"LINK_OR_CTR_REGS\", \"SPECIAL_REGS\", \"CR0_REGS\", \"CR_REGS\", \"ALL_REGS\" }\n+    \"LINK_OR_CTR_REGS\", \"SPECIAL_REGS\", \"SPEC_OR_GEN_REGS\",\t\\\n+    \"CR0_REGS\", \"CR_REGS\", \"NON_FLOAT_REGS\", \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n #define REG_CLASS_CONTENTS\t\t\t\t\\\n   { {0, 0, 0}, {0xfffffffe, 0, 8}, {~0, 0, 8},\t\t\\\n-    {0, ~0, 0}, {~0, ~0, 0}, {0, 0, 1}, {0, 0, 2},\t\\\n-    {0, 0, 4}, {0, 0, 6}, {0, 0, 7}, {0, 0, 16}, \t\\\n-    {0, 0, 0xff0}, {~0, ~0, 0xfff5} }\n+    {0, ~0, 0}, {~0, ~0, 8}, {0, 0, 1}, {0, 0, 2},\t\\\n+    {0, 0, 4}, {0, 0, 6}, {0, 0, 7}, {~0, 0, 15},\t\\\n+    {0, 0, 16}, {0, 0, 0xff0}, {~0, 0, 0xffff},\t\t\\\n+    {~0, ~0, 0xffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -496,8 +499,9 @@ enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n    For the RS/6000, `Q' means that this is a memory operand that is just\n    an offset from a register.  */\n \n-#define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n-  ((C) == 'Q' ? indirect_operand (OP, VOIDmode) : 0)\n+#define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n+  ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG\t\\\n+   : 0)\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use."}]}