{"sha": "64a4f612f932d54d242f9c0f6594a84c2f764fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNGY2MTJmOTMyZDU0ZDI0MmY5YzBmNjU5NGE4NGMyZjc2NGZjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:17:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:17:23Z"}, "message": "[multiple changes]\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Remove extra\n\tspaces from error messages.\n\n2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Check_Large_Modular_Array): New procedure,\n\tsubsidiary to Expand_N_Object_ Declaration, to compute a guard on\n\tan object declaration for an array type with a modular index type\n\twith the size of Long_Long_Integer. Special processing is needed\n\tin this case to compute reliably the size of the object, and\n\teventually  to raise Storage_Error, when wrap-around arithmetic\n\tmight compute a meangingless size for the object.\n\n2017-01-23  Justin Squirek  <squirek@adacore.com>\n\n\t* a-wtenau.adb, par-endh.adb, sem_prag.adb,\n\tsem_type.adb: Code cleanups.\n\nFrom-SVN: r244775", "tree": {"sha": "f2ef337dca39b77083913e1e53d25e6319480d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ef337dca39b77083913e1e53d25e6319480d4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a4f612f932d54d242f9c0f6594a84c2f764fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a4f612f932d54d242f9c0f6594a84c2f764fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a4f612f932d54d242f9c0f6594a84c2f764fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a4f612f932d54d242f9c0f6594a84c2f764fcc/comments", "author": null, "committer": null, "parents": [{"sha": "be4e989cd110e3eda9b9b14e6d3f73c9408e8816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4e989cd110e3eda9b9b14e6d3f73c9408e8816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4e989cd110e3eda9b9b14e6d3f73c9408e8816"}], "stats": {"total": 98, "additions": 87, "deletions": 11}, "files": [{"sha": "76ee520f0b42033d6d1dfdc226e9954a3e075912", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -1,3 +1,23 @@\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Remove extra\n+\tspaces from error messages.\n+\n+2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Check_Large_Modular_Array): New procedure,\n+\tsubsidiary to Expand_N_Object_ Declaration, to compute a guard on\n+\tan object declaration for an array type with a modular index type\n+\twith the size of Long_Long_Integer. Special processing is needed\n+\tin this case to compute reliably the size of the object, and\n+\teventually  to raise Storage_Error, when wrap-around arithmetic\n+\tmight compute a meangingless size for the object.\n+\n+2017-01-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* a-wtenau.adb, par-endh.adb, sem_prag.adb,\n+\tsem_type.adb: Code cleanups.\n+\n 2017-01-23  Bob Duff  <duff@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): In the part of the code where"}, {"sha": "709703e95afa0a8dc5b70ddf082e1e2f272118e4", "filename": "gcc/ada/a-wtenau.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fa-wtenau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fa-wtenau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtenau.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -304,8 +304,6 @@ package body Ada.Wide_Text_IO.Enumeration_Aux is\n \n             exit when\n               Is_Character (WC)\n-                and then\n-                  not Is_Letter (To_Character (WC))\n                 and then\n                   not Is_Letter (To_Character (WC))\n                 and then"}, {"sha": "402434964bc312417f1c47ecd15829621a5d4121", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -5465,6 +5465,13 @@ package body Exp_Ch3 is\n       --  value, it may be possible to build an equivalent aggregate instead,\n       --  and prevent an actual call to the initialization procedure.\n \n+      procedure Check_Large_Modular_Array;\n+      --  Check that the size of the array can be computed without overflow,\n+      --  and generate a Storage_Error otherwise. This is only relevant for\n+      --  array types whose index in a (mod 2**64) type, where wrap-around\n+      --  arithmetic might yield a meaningless value for the length of the\n+      --  array, or its corresponding attribute.\n+\n       procedure Default_Initialize_Object (After : Node_Id);\n       --  Generate all default initialization actions for object Def_Id. Any\n       --  new code is inserted after node After.\n@@ -5602,6 +5609,58 @@ package body Exp_Ch3 is\n          end if;\n       end Build_Equivalent_Aggregate;\n \n+      -------------------------------\n+      -- Check_Large_Modular_Array --\n+      -------------------------------\n+\n+      procedure Check_Large_Modular_Array is\n+         Index_Typ : Entity_Id;\n+\n+      begin\n+         if Is_Array_Type (Typ)\n+           and then Is_Modular_Integer_Type (Etype (First_Index (Typ)))\n+         then\n+            --  To prevent arithmetic overflow with large values, we\n+            --  raise Storage_Error under the following guard:\n+            --\n+            --  (Arr'Last / 2 - Arr'First / 2) > (Typ'Last - 1) / 2\n+\n+            --  This takes care of the boundary case, but it is preferable\n+            --  to use a smaller limit, because even on 64-bit architectures\n+            --  an array of more than 2 ** 30 bytes is likely to raise\n+            --  Storage_Error.\n+\n+            Index_Typ := Etype (First_Index (Typ));\n+            if RM_Size (Index_Typ) = RM_Size (Standard_Long_Long_Integer) then\n+               Insert_Action (N,\n+                  Make_Raise_Storage_Error (Loc,\n+                   Condition =>\n+                     Make_Op_Ge (Loc,\n+                       Left_Opnd  =>\n+                         Make_Op_Subtract (Loc,\n+                           Left_Opnd =>\n+                             Make_Op_Divide (Loc,\n+                               Left_Opnd =>\n+                                 Make_Attribute_Reference (Loc,\n+                                   Prefix => New_Occurrence_Of (Typ, Loc),\n+                                 Attribute_Name => Name_Last),\n+                                Right_Opnd =>\n+                                  Make_Integer_Literal (Loc, Uint_2)),\n+                           Right_Opnd =>\n+                             Make_Op_Divide (Loc,\n+                               Left_Opnd =>\n+                                 Make_Attribute_Reference (Loc,\n+                                   Prefix => New_Occurrence_Of (Typ, Loc),\n+                                   Attribute_Name => Name_First),\n+                                Right_Opnd =>\n+                                  Make_Integer_Literal (Loc, Uint_2))),\n+                       Right_Opnd =>\n+                         Make_Integer_Literal (Loc,  (Uint_2 ** 30))),\n+                   Reason    => SE_Object_Too_Large));\n+            end if;\n+         end if;\n+      end Check_Large_Modular_Array;\n+\n       -------------------------------\n       -- Default_Initialize_Object --\n       -------------------------------\n@@ -6012,6 +6071,8 @@ package body Exp_Ch3 is\n          Build_Master_Entity (Def_Id);\n       end if;\n \n+      Check_Large_Modular_Array;\n+\n       --  Default initialization required, and no expression present\n \n       if No (Expr) then"}, {"sha": "2ae495e0f3415c6fc74b3ed11d1ee1a1acc8c8f7", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -9038,13 +9038,12 @@ package body Exp_Ch9 is\n                            & \"violate restriction \"\n                            & \"No_Implicit_Heap_Allocations??\", Priv, Prot_Typ);\n                      else\n-\n                         --  Object will be non-static if discriminants are\n \n                         Error_Msg_NE\n                           (\"creation of protected object of type& with \"\n-                           &  \"non-static discriminants  will violate\"\n-                           & \" restriction No_Implicit_Heap_Allocations??\",\n+                           & \"non-static discriminants will violate \"\n+                           & \"restriction No_Implicit_Heap_Allocations??\",\n                            Priv, Prot_Typ);\n                      end if;\n \n@@ -9068,7 +9067,7 @@ package body Exp_Ch9 is\n \n                         Error_Msg_NE\n                           (\"creation of protected object of type& with \"\n-                           & \"non-static discriminants  will violate \"\n+                           & \"non-static discriminants will violate \"\n                            & \"restriction \"\n                            & \"No_Implicit_Protected_Object_Allocations??\",\n                            Priv, Prot_Typ);"}, {"sha": "bbcbff92c13e28658242e9c3ebcd6206f4d1d9fa", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -576,7 +576,6 @@ package body Endh is\n          --  Cases of normal tokens following an END\n \n           (Token = Tok_Case   or else\n-           Token = Tok_For    or else\n            Token = Tok_If     or else\n            Token = Tok_Loop   or else\n            Token = Tok_Record or else"}, {"sha": "f34e2ff7f5a63e9a0d4f42f6891f518ccd0a15cf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -23951,7 +23951,7 @@ package body Sem_Prag is\n             --  Attribute 'Result matches attribute 'Result\n \n             elsif Is_Attribute_Result (Dep_Item)\n-              and then Is_Attribute_Result (Dep_Item)\n+               and then Is_Attribute_Result (Ref_Item)\n             then\n                Matched := True;\n "}, {"sha": "26415ae47dbf23b9a4137029d27f96149f4cde0a", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a4f612f932d54d242f9c0f6594a84c2f764fcc/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=64a4f612f932d54d242f9c0f6594a84c2f764fcc", "patch": "@@ -2578,7 +2578,6 @@ package body Sem_Type is\n \n          loop\n             if Present (Interfaces (E))\n-              and then Present (Interfaces (E))\n               and then not Is_Empty_Elmt_List (Interfaces (E))\n             then\n                Elmt := First_Elmt (Interfaces (E));"}]}