{"sha": "ef878564140cbcf23f479da88e07e5a996cec6bb", "node_id": "C_kwDOANBUbNoAKGVmODc4NTY0MTQwY2JjZjIzZjQ3OWRhODhlMDdlNWE5OTZjZWM2YmI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T18:07:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T18:07:47Z"}, "message": "analyzer: add regression test for PR 107158\n\nPR analyzer/107158 reports an ICE when using\n  -fanalyzer -fanalyzer-call-summaries\non a particular source file.\n\nIt turns out I just fixed this ICE in r13-3094-g6832c95c0e1a58.\n\nThis followup patch adds a somewhat reduced reproducer as a regression\ntest.  Unfortunately, although the ICE is fixed, there are two false\npositives from -Wanalyzer-malloc-leak on the test case, so I'm going to\nuse PR analyzer/107158 for tracking those false positives.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107158\n\t* gcc.dg/analyzer/call-summaries-pr107158.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "eb54f80aad3776c15465dfdd959e6ce3112b3fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb54f80aad3776c15465dfdd959e6ce3112b3fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef878564140cbcf23f479da88e07e5a996cec6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef878564140cbcf23f479da88e07e5a996cec6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef878564140cbcf23f479da88e07e5a996cec6bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef878564140cbcf23f479da88e07e5a996cec6bb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eff4fe383a59de94267352e25f77b29d8e6bb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eff4fe383a59de94267352e25f77b29d8e6bb42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eff4fe383a59de94267352e25f77b29d8e6bb42"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "54f442f0ad414b3eb8222238a050dabd88959c16", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-pr107158.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef878564140cbcf23f479da88e07e5a996cec6bb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef878564140cbcf23f479da88e07e5a996cec6bb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-pr107158.c?ref=ef878564140cbcf23f479da88e07e5a996cec6bb", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-additional-options \"-fanalyzer-call-summaries\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+enum { _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)) };\n+extern const unsigned short int **__ctype_b_loc(void)\n+  __attribute__((__nothrow__, __leaf__, __const__));\n+extern void *malloc(size_t __size)\n+  __attribute__((__nothrow__, __leaf__, __malloc__, __alloc_size__(1)));\n+extern char *strcpy(char *__restrict __dest, const char *__restrict __src)\n+  __attribute__((__nothrow__, __leaf__, __nonnull__(1, 2)));\n+extern size_t strlen(const char *__s)\n+  __attribute__((__nothrow__, __leaf__, __pure__, __nonnull__(1)));\n+\n+struct mydata {\n+  struct mydata *link;\n+  char *name;\n+  char *type;\n+};\n+\n+static struct mydata *all_data;\n+static int line_no;\n+\n+__attribute__((__noreturn__)) void failed(const char *message);\n+\n+static char *string_dup(const char *string) {\n+  char *buf;\n+\n+  if ((buf = malloc(strlen(string) + 1)) == ((void *)0))\n+    failed(\"malloc() failed\");\n+\n+  return strcpy(buf, string);\n+}\n+\n+static void store_data(const char *name, const char *type) {\n+  struct mydata *p, *q;\n+\n+  if ((p = (struct mydata *)malloc(sizeof(struct mydata))) == ((void *)0))\n+    failed(\"malloc() failed\");\n+\n+  p->link = ((void *)0);\n+  p->name = string_dup(name);\n+  p->type = string_dup(type);\n+\n+  if ((q = all_data) == ((void *)0))\n+    all_data = p;\n+  else {\n+    while (q->link != ((void *)0))\n+      q = q->link;\n+    q->link = p;\n+  }\n+}\n+\n+static void parse_tbl(char *buffer) {\n+  char *s = buffer;\n+  char *t = s + strlen(s);\n+\n+  do {\n+    t--;\n+    if (((*__ctype_b_loc())[(int)(((int)*t))] & (unsigned short int)_ISspace))\n+      *t = '\\0';\n+    else\n+      break;\n+  } while (t > s);\n+  while (((*__ctype_b_loc())[(int)(((int)*s))] & (unsigned short int)_ISspace))\n+    s++;\n+  buffer = s;\n+\n+  line_no++;\n+  if (*buffer != ';' && *buffer != '\\0') {\n+    if (*buffer == '#') {\n+      store_data(buffer, \"\"); /* { dg-bogus \"leak\" \"PR analyzer/107158\" { xfail *-*-* } } */\n+    } else {\n+\n+      while (*s && !((*__ctype_b_loc())[(int)(((int)*s))] &\n+                     (unsigned short int)_ISspace))\n+        s++;\n+      while (\n+          ((*__ctype_b_loc())[(int)(((int)*s))] & (unsigned short int)_ISspace))\n+        *s++ = '\\0';\n+      store_data(buffer, s); /* { dg-bogus \"leak\" \"PR analyzer/107158\" { xfail *-*-* } } */\n+    }\n+  }\n+}"}]}