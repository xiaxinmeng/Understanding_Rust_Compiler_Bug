{"sha": "c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxYjdjZGY5N2U2OTI1NWRkNGE1ZGRkZGE3ODJiYTI5YTMyYjNkMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-06-20T16:21:24Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-06-20T16:21:24Z"}, "message": "re PR java/2319 (invalid UTF-8 sequences should be rejected)\n\n\t* lex.c (java_read_char): Disallow invalid and overlong\n\tsequences.  Fixes PR java/2319.\n\nFrom-SVN: r43475", "tree": {"sha": "532ce701f09afb858ec0ca8628468260e7cbbb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532ce701f09afb858ec0ca8628468260e7cbbb80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1/comments", "author": null, "committer": null, "parents": [{"sha": "5d291213315a18afad4054e4cdcfdd303ed42fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d291213315a18afad4054e4cdcfdd303ed42fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d291213315a18afad4054e4cdcfdd303ed42fd2"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "96e1ba5743c478c22732bb422713226479594922", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "patch": "@@ -1,3 +1,8 @@\n+2001-06-19  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lex.c (java_read_char): Disallow invalid and overlong\n+\tsequences.  Fixes PR java/2319.\n+\n 2001-06-05  Jeff Sturm  <jsturm@one-point.com>\n \n \t* decl.c (create_primitive_vtable): Don't call make_decl_rtl."}, {"sha": "35cd31749ca29ffc51d71087301c4e9d79c5463e", "filename": "gcc/java/lex.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01b7cdf97e69255dd4a5dddda782ba29a32b3d1/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=c01b7cdf97e69255dd4a5dddda782ba29a32b3d1", "patch": "@@ -454,15 +454,21 @@ java_read_char (lex)\n       if (c == EOF)\n \treturn UEOF;\n       if (c < 128)\n-\treturn (unicode_t)c;\n+\treturn (unicode_t) c;\n       else\n \t{\n \t  if ((c & 0xe0) == 0xc0)\n \t    {\n \t      c1 = getc (lex->finput);\n \t      if ((c1 & 0xc0) == 0x80)\n-\t\treturn (unicode_t)(((c &0x1f) << 6) + (c1 & 0x3f));\n-\t      c = c1;\n+\t\t{\n+\t\t  unicode_t r = (unicode_t)(((c & 0x1f) << 6) + (c1 & 0x3f));\n+\t\t  /* Check for valid 2-byte characters.  We explicitly\n+\t\t     allow \\0 because this encoding is common in the\n+\t\t     Java world.  */\n+\t\t  if (r == 0 || (r >= 0x80 && r <= 0x7ff))\n+\t\t    return r;\n+\t\t}\n \t    }\n \t  else if ((c & 0xf0) == 0xe0)\n \t    {\n@@ -471,16 +477,23 @@ java_read_char (lex)\n \t\t{\n \t\t  c2 = getc (lex->finput);\n \t\t  if ((c2 & 0xc0) == 0x80)\n-\t\t    return (unicode_t)(((c & 0xf) << 12) + \n-\t\t\t\t       (( c1 & 0x3f) << 6) + (c2 & 0x3f));\n-\t\t  else\n-\t\t    c = c2;\n+\t\t    {\n+\t\t      unicode_t r =  (unicode_t)(((c & 0xf) << 12) + \n+\t\t\t\t\t\t (( c1 & 0x3f) << 6)\n+\t\t\t\t\t\t + (c2 & 0x3f));\n+\t\t      /* Check for valid 3-byte characters.\n+\t\t\t Don't allow surrogate, \\ufffe or \\uffff.  */\n+\t\t      if (r >= 0x800 && r <= 0xffff\n+\t\t\t  && ! (r >= 0xd800 && r <= 0xdfff)\n+\t\t\t  && r != 0xfffe && r != 0xffff)\n+\t\t\treturn r;\n+\t\t    }\n \t\t}\n-\t      else\n-\t\tc = c1;\n \t    }\n \n-\t  /* We simply don't support invalid characters.  */\n+\t  /* We simply don't support invalid characters.  We also\n+\t     don't support 4-, 5-, or 6-byte UTF-8 sequences, as these\n+\t     cannot be valid Java characters.  */\n \t  java_lex_error (\"malformed UTF-8 character\", 0);\n \t}\n     }"}]}