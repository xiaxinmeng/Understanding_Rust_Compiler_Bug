{"sha": "ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwYTdiNDlhOTliYjg1MTBmOTk4NTVkYWVlODU0MGZkNGYwZjFmMg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-05-22T04:38:37Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-05-22T04:38:37Z"}, "message": "javaprims.h (_Jv_FormatInt): New declaration.\n\n\n\t* gcj/javaprims.h (_Jv_FormatInt):  New declaration.\n\t* java/lang/natString.cc (_JvFormatInt):  New primitive, with logic\n\ttaken from old Integer.toString code.\n\t(Integer::valueOf):  Use _Jv_FormatInt.\n\t* java/lang/Integer.java (toString):  Just use call String.valueOf.\n\t* java/lang/Long.java (toString):  Fix typo in comment.\n\t* java/lang/String.java (valueOf(int)):  Make native.\n\t* java/lang/StringBuffer.java (append(int)):  Make native.\n\t* java/lang/natStringBuffer.cc:  New file, for append(jint).\n\t* Makefile.am (ant_source_files):  Add java/lang/natStringBuffer.cc.\n\nFrom-SVN: r42419", "tree": {"sha": "3fe6c5a88c43aaae750d120b81f91c5998141dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe6c5a88c43aaae750d120b81f91c5998141dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5d6a24c2e6bb180cf3f248f7c03296aa68f46c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d6a24c2e6bb180cf3f248f7c03296aa68f46c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d6a24c2e6bb180cf3f248f7c03296aa68f46c4"}], "stats": {"total": 138, "additions": 98, "deletions": 40}, "files": [{"sha": "a6b3122af695ab08860136b16db075654e1d48c3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -1,3 +1,16 @@\n+2001-05-21  Per Bothner  <per@bothner.com>\n+\n+\t* gcj/javaprims.h (_Jv_FormatInt):  New declaration.\n+\t* java/lang/natString.cc (_JvFormatInt):  New primitive, with logic\n+\ttaken from old Integer.toString code.\n+\t(Integer::valueOf):  Use _Jv_FormatInt.\n+\t* java/lang/Integer.java (toString):  Just use call String.valueOf.\n+\t* java/lang/Long.java (toString):  Fix typo in comment.\n+\t* java/lang/String.java (valueOf(int)):  Make native.\n+\t* java/lang/StringBuffer.java (append(int)):  Make native.\n+\t* java/lang/natStringBuffer.cc:  New file, for append(jint).\n+\t* Makefile.am (ant_source_files):  Add java/lang/natStringBuffer.cc.\n+\n 2001-05-21  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/gcj/runtime/VMClassLoader.java (VMClassLoader): Now public."}, {"sha": "2444ae7a255e43c53bf5000773e9abd69cd82118", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -1324,6 +1324,7 @@ java/lang/natMath.cc \\\n java/lang/natObject.cc \\\n java/lang/natRuntime.cc\t\\\n java/lang/natString.cc \\\n+java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n java/lang/natThrowable.cc \\"}, {"sha": "9b3a04d4a5eb4a967820feb625841db6b9beb559", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -1068,6 +1068,7 @@ java/lang/natMath.cc \\\n java/lang/natObject.cc \\\n java/lang/natRuntime.cc\t\\\n java/lang/natString.cc \\\n+java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n java/lang/natThrowable.cc \\\n@@ -1224,7 +1225,7 @@ java/io/natObjectOutputStream.lo java/lang/natCharacter.lo \\\n java/lang/natClass.lo java/lang/natClassLoader.lo \\\n java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n-java/lang/natRuntime.lo java/lang/natString.lo java/lang/natSystem.lo \\\n+java/lang/natRuntime.lo java/lang/natString.lo java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natThrowable.lo \\\n java/lang/reflect/natArray.lo java/lang/reflect/natConstructor.lo \\\n java/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n@@ -1632,7 +1633,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/natClassLoader.P .deps/java/lang/natConcreteProcess.P \\\n .deps/java/lang/natDouble.P .deps/java/lang/natFloat.P \\\n .deps/java/lang/natMath.P .deps/java/lang/natObject.P \\\n-.deps/java/lang/natRuntime.P .deps/java/lang/natString.P \\\n+.deps/java/lang/natRuntime.P .deps/java/lang/natString.P .deps/java/lang/natStringBuffer.P \\\n .deps/java/lang/natSystem.P .deps/java/lang/natThread.P \\\n .deps/java/lang/natThrowable.P .deps/java/lang/ref/PhantomReference.P \\\n .deps/java/lang/ref/Reference.P .deps/java/lang/ref/ReferenceQueue.P \\"}, {"sha": "21419c196ec926ec54bc09bdeecf2726b775ae70", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -371,6 +371,7 @@ extern \"C\" jboolean _Jv_IsInstanceOf(jobject, jclass);\n extern \"C\" jstring _Jv_AllocString(jsize) __attribute__((__malloc__));\n extern \"C\" jstring _Jv_NewString (const jchar*, jsize)\n   __attribute__((__malloc__));\n+extern jint _Jv_FormatInt (jchar* bufend, jint num);\n extern \"C\" jchar* _Jv_GetStringChars (jstring str);\n extern \"C\" jint _Jv_MonitorEnter (jobject);\n extern \"C\" jint _Jv_MonitorExit (jobject);"}, {"sha": "9ddfa312f06fa1bb42c3d2dde0d4e53e798b1dbd", "filename": "libjava/java/lang/Integer.java", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInteger.java?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -267,35 +267,7 @@ public String toString()\n \n   public static String toString(int num)\n   {\n-    // Use an arrary large enough for \"-2147483648\"; i.e. 11 chars.\n-    char[] buffer = new char[11];\n-    int i = 11;\n-    boolean isNeg;\n-    if (num < 0)\n-      {\n-        isNeg = true;\n-        num = -(num);\n-        if (num < 0)\n-          {\n-            // Must be MIN_VALUE, so handle this special case.\n-            buffer[--i] = '8';\n-            num = 214748364;\n-          }\n-      }\n-    else\n-      isNeg = false;\n-\n-    do\n-      {\n-        buffer[--i] = (char) ((int) '0' + (num % 10));\n-        num /= 10;\n-      }\n-    while (num > 0);\n-\n-    if (isNeg)\n-      buffer[--i] = '-';\n-\n-    return String.valueOf(buffer, i, 11-i);\n+    return String.valueOf (num);\n   }\n \n   public static String toString(int num, int radix)"}, {"sha": "c33a43b6c2cb44cfd5ab4077ff4db23705256ef7", "filename": "libjava/java/lang/Long.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FLong.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FLong.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLong.java?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -273,7 +273,7 @@ public static String toString(long num)\n     if (num <= Integer.MAX_VALUE && num >= Integer.MIN_VALUE)\n       return Integer.toString((int) num);\n \n-    // Use an arrary large enough for \"-9223372036854775808\"; i.e. 11 chars.\n+    // Use an array large enough for \"-9223372036854775808\"; i.e. 20 chars.\n     char[] buffer = new char[20];\n     int i = 20;\n     boolean isNeg;"}, {"sha": "fa599867fe72c66cf586ad1e7568c0a41d00d10f", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -319,10 +319,7 @@ public static String valueOf (boolean b)\n \n   public static native String valueOf (char c);\n \n-  public static String valueOf (int i)\n-  {\n-    return Integer.toString(i);\n-  }\n+  public static native String valueOf (int i);\n \n   public static String valueOf (long l)\n   {"}, {"sha": "211574a5b7eb25fadc7693fae950ffd9c631eb49", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -89,10 +89,7 @@ public synchronized StringBuffer append (char ch)\n    *  @return this <code>StringBuffer</code>.\n    *  @see java.lang.String#valueOf(int)\n    */\n-  public StringBuffer append (int inum)\n-  {\n-    return append (String.valueOf(inum));\n-  }\n+  public native StringBuffer append (int inum);\n \n   /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n    *  Uses <code>String.valueOf()</code> to convert to"}, {"sha": "659810f31e7245434d237876e5855670fc97938f", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -341,6 +341,52 @@ _Jv_GetStringUTFRegion (jstring str, jsize start, jsize len, char *buf)\n   return dptr - buf;\n }\n \n+/* Put printed (decimal) representation of NUM in a buffer.\n+   BUFEND marks the end of the buffer, which must be at least 11 jchars long.\n+   Returns the COUNT of jchars written.  The result is in\n+   (BUFEND - COUNT) (inclusive) upto (BUFEND) (exclusive). */\n+\n+jint\n+_Jv_FormatInt (jchar* bufend, jint num)\n+{\n+  register jchar* ptr = bufend;\n+  jboolean isNeg;\n+  if (num < 0)\n+    {\n+      isNeg = true;\n+      num = -(num);\n+      if (num < 0)\n+\t{\n+\t  // Must be MIN_VALUE, so handle this special case.\n+\t  // FIXME use 'unsigned jint' for num.\n+\t  *--ptr = '8';\n+\t  num = 214748364;\n+\t}\n+      }\n+    else\n+      isNeg = false;\n+\n+    do\n+      {\n+        *--ptr = (jchar) ((int) '0' + (num % 10));\n+        num /= 10;\n+      }\n+    while (num > 0);\n+\n+    if (isNeg)\n+      *--ptr = '-';\n+    return bufend - ptr;\n+}\n+\n+jstring\n+java::lang::String::valueOf (jint num)\n+{\n+  // Use an array large enough for \"-2147483648\"; i.e. 11 chars.\n+  jchar buffer[11];\n+  int i = _Jv_FormatInt (buffer+11, num);\n+  return _Jv_NewString (buffer+11-i, i);\n+}\n+\n jstring\n _Jv_AllocString(jsize len)\n {"}, {"sha": "bc70f67f25abeefde1f6f5469ae9d821e8926f88", "filename": "libjava/java/lang/natStringBuffer.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FnatStringBuffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0a7b49a99bb8510f99855daee8540fd4f0f1f2/libjava%2Fjava%2Flang%2FnatStringBuffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatStringBuffer.cc?ref=ef0a7b49a99bb8510f99855daee8540fd4f0f1f2", "patch": "@@ -0,0 +1,30 @@\n+// natStringBuffer.cc - Implementation of java.lang.StringBuffer native methods.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+#include <java/lang/StringBuffer.h>\n+\n+java::lang::StringBuffer*\n+java::lang::StringBuffer::append (jint num)\n+{\n+  // Use an array large enough for \"-2147483648\"; i.e. 11 chars.\n+  jchar buffer[11];\n+  int i = _Jv_FormatInt (buffer+11, num);\n+  JvSynchronize dummy (this);\n+  jint needed = count + i;\n+  ensureCapacity_unsynchronized (needed);\n+  jchar* dst = elements (value) + count;\n+  jchar* src = buffer+11-i;\n+  while (--i >= 0)\n+    *dst++ = *src++;\n+  count = needed;\n+  return this;\n+}"}]}