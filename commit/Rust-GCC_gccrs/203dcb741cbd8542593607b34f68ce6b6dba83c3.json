{"sha": "203dcb741cbd8542593607b34f68ce6b6dba83c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzZGNiNzQxY2JkODU0MjU5MzYwN2IzNGY2OGNlNmI2ZGJhODNjMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-04-03T11:59:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-04-03T11:59:42Z"}, "message": "h8300.md (a peephole2): Generalize to accept GT and LE.\n\n\t* config/h8300/h8300.md (a peephole2): Generalize to accept GT\n\tand LE.\n\t(another peephole2): Likewise.\n\nFrom-SVN: r65199", "tree": {"sha": "4cb00aa0185aec371858c4b4896db7df67d3c89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb00aa0185aec371858c4b4896db7df67d3c89e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203dcb741cbd8542593607b34f68ce6b6dba83c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203dcb741cbd8542593607b34f68ce6b6dba83c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203dcb741cbd8542593607b34f68ce6b6dba83c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203dcb741cbd8542593607b34f68ce6b6dba83c3/comments", "author": null, "committer": null, "parents": [{"sha": "dc00aebddf775cb5bafd517796d76fdeb716c1bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc00aebddf775cb5bafd517796d76fdeb716c1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc00aebddf775cb5bafd517796d76fdeb716c1bd"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "c9ba702a6352801a4e96b695f29fbcdbe680486e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203dcb741cbd8542593607b34f68ce6b6dba83c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203dcb741cbd8542593607b34f68ce6b6dba83c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=203dcb741cbd8542593607b34f68ce6b6dba83c3", "patch": "@@ -1,3 +1,9 @@\n+2003-04-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md (a peephole2): Generalize to accept GT\n+\tand LE.\n+\t(another peephole2): Likewise.\n+\n 2003-04-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/sparc/sol2-bi.h (ASM_CPU64_DEFAULT_SPEC): Add -TSO."}, {"sha": "b27a07796a04f3546d44f957b91b9df7dffad70b", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203dcb741cbd8542593607b34f68ce6b6dba83c3/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203dcb741cbd8542593607b34f68ce6b6dba83c3/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=203dcb741cbd8542593607b34f68ce6b6dba83c3", "patch": "@@ -4057,7 +4057,7 @@\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (const_int 255)))\n    (set (pc)\n-\t(if_then_else (match_operator 1 \"gtuleu_operator\"\n+\t(if_then_else (match_operator 1 \"gtle_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n@@ -4066,12 +4066,21 @@\n \t(and:HI (match_dup 0)\n \t\t(const_int -256)))\n    (set (pc)\n-\t(if_then_else (match_dup 4)\n+\t(if_then_else (match_dup 3)\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n-  \"operands[4] = ((GET_CODE (operands[1]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\")\n+  \"switch (GET_CODE (operands[1]))\n+     {\n+     case GTU:\n+       operands[3] = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     case LEU:\n+       operands[3] = gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     default:\n+       operands[3] = operands[1];\n+       break;\n+     }\")\n \n ;; (compare (reg:SI) (const_int)) takes 6 bytes, so we try to achieve\n ;; the equivalent with shorter sequences.  Here is the summary.  Cases\n@@ -4367,7 +4376,7 @@\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (const_int 65535)))\n    (set (pc)\n-\t(if_then_else (match_operator 1 \"gtuleu_operator\"\n+\t(if_then_else (match_operator 1 \"gtle_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n@@ -4376,12 +4385,21 @@\n \t(and:SI (match_dup 0)\n \t\t(const_int -65536)))\n    (set (pc)\n-\t(if_then_else (match_dup 4)\n+\t(if_then_else (match_dup 3)\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n-  \"operands[4] = ((GET_CODE (operands[1]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\")\n+  \"switch (GET_CODE (operands[1]))\n+     {\n+     case GTU:\n+       operands[3] = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     case LEU:\n+       operands[3] = gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     default:\n+       operands[3] = operands[1];\n+       break;\n+     }\")\n \n ;; For constants like -1, -2, 1, 2, it is still cheaper to make a copy\n ;; of the register being tested, do the subtraction on the copy, and"}]}