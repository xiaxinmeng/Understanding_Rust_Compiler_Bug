{"sha": "69f6e760a80eef94fa88119e4f2ac4c63353dc78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmNmU3NjBhODBlZWY5NGZhODgxMTllNGYyYWM0YzYzMzUzZGM3OA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2001-01-05T04:09:02Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-05T04:09:02Z"}, "message": "c4x.c (c4x_expand_prologue): Don't compile an ISR with more than 32767 words of local storage.\n\n\t* config/c4x/c4x.c (c4x_expand_prologue): Don't compile an ISR\n\twith more than 32767 words of local storage.\n\nFrom-SVN: r38703", "tree": {"sha": "df5ec5d0fffb94a39b2304b56fa43f334259b69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df5ec5d0fffb94a39b2304b56fa43f334259b69a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f6e760a80eef94fa88119e4f2ac4c63353dc78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6e760a80eef94fa88119e4f2ac4c63353dc78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f6e760a80eef94fa88119e4f2ac4c63353dc78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6e760a80eef94fa88119e4f2ac4c63353dc78/comments", "author": null, "committer": null, "parents": [{"sha": "06dd70c652a8ca50e09037918bf4ef804ac1d601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06dd70c652a8ca50e09037918bf4ef804ac1d601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06dd70c652a8ca50e09037918bf4ef804ac1d601"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "fd4905ae632d32a916530f9021ab6f7d4bf8b1f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6e760a80eef94fa88119e4f2ac4c63353dc78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6e760a80eef94fa88119e4f2ac4c63353dc78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69f6e760a80eef94fa88119e4f2ac4c63353dc78", "patch": "@@ -1,3 +1,8 @@\n+2001-01-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (c4x_expand_prologue): Don't compile an ISR\n+\twith more than 32767 words of local storage.\n+\n 2001-01-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_init_builtins): Remove builtin support"}, {"sha": "496da47ada2038d726b8f2e83c59d779534f7c10", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f6e760a80eef94fa88119e4f2ac4c63353dc78/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f6e760a80eef94fa88119e4f2ac4c63353dc78/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=69f6e760a80eef94fa88119e4f2ac4c63353dc78", "patch": "@@ -826,10 +826,15 @@ c4x_expand_prologue ()\n \t  insn = emit_insn (gen_movqi (gen_rtx_REG (QImode, AR3_REGNO),\n \t\t\t\t       gen_rtx_REG (QImode, SP_REGNO)));\n           RTX_FRAME_RELATED_P (insn) = 1;\n-\t  /* FIXME: Assume ISR doesn't require more than 32767 words\n-\t     of local variables.  */\n+\t  /* We require that an ISR uses fewer than 32768 words of\n+\t     local variables, otherwise we have to go to lots of\n+\t     effort to save a register, load it with the desired size,\n+\t     adjust the stack pointer, and then restore the modified\n+\t     register.  Frankly, I think it is a poor ISR that\n+\t     requires more than 32767 words of local temporary\n+\t     storage!  */\n \t  if (size > 32767)\n-\t    error (\"ISR %s requires %d words of local vars, max is 32767.\",\n+\t    fatal (\"ISR %s requires %d words of local vars, max is 32767.\",\n \t\t   current_function_name, size);\n \t  insn = emit_insn (gen_addqi3 (gen_rtx_REG (QImode, SP_REGNO),\n \t\t\t\t        gen_rtx_REG (QImode, SP_REGNO),"}]}