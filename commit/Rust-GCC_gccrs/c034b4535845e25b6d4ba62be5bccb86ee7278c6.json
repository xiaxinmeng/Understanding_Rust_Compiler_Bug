{"sha": "c034b4535845e25b6d4ba62be5bccb86ee7278c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzNGI0NTM1ODQ1ZTI1YjZkNGJhNjJiZTViY2NiODZlZTcyNzhjNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-11-06T00:01:01Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-06T00:01:01Z"}, "message": "re PR java/6388 (Integer.MIN_VALUE == 0x80000000 optimized to false on powerpc)\n\n\tFix for PR java/6388.\n\t* lex.h (JAVA_INTEGRAL_RANGE_ERROR): Wrap in do...while.\n\t* java-tree.h (enum java_tree_index): New values\n\tJTI_DECIMAL_INT_MAX_NODE, JTI_DECIMAL_LONG_MAX_NODE.\n\t(decimal_int_max, decimal_long_max): New defines.\n\t* lex.c (yylex): Rewrote range checking.  Sign extend literals.\n\t(error_if_numeric_overflow): Rewrote range checking.\n\t* decl.c (java_init_decl_processing): Initialize decimal_int_max,\n\tdecimal_long_max.\n\nFrom-SVN: r58843", "tree": {"sha": "2b6700e1b5e792d259ddb86880b95e93c8315f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6700e1b5e792d259ddb86880b95e93c8315f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c034b4535845e25b6d4ba62be5bccb86ee7278c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c034b4535845e25b6d4ba62be5bccb86ee7278c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c034b4535845e25b6d4ba62be5bccb86ee7278c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c034b4535845e25b6d4ba62be5bccb86ee7278c6/comments", "author": null, "committer": null, "parents": [{"sha": "112615e7d3db8aae00b002543db3ddf94e8e31a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112615e7d3db8aae00b002543db3ddf94e8e31a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112615e7d3db8aae00b002543db3ddf94e8e31a2"}], "stats": {"total": 109, "additions": 67, "deletions": 42}, "files": [{"sha": "4b1ee3edeaffdf157abb4550cb991efef4eac4b5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c034b4535845e25b6d4ba62be5bccb86ee7278c6", "patch": "@@ -1,3 +1,15 @@\n+2002-11-05  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR java/6388.\n+\t* lex.h (JAVA_INTEGRAL_RANGE_ERROR): Wrap in do...while.\n+\t* java-tree.h (enum java_tree_index): New values\n+\tJTI_DECIMAL_INT_MAX_NODE, JTI_DECIMAL_LONG_MAX_NODE.\n+\t(decimal_int_max, decimal_long_max): New defines.\n+\t* lex.c (yylex): Rewrote range checking.  Sign extend literals.\n+\t(error_if_numeric_overflow): Rewrote range checking.\n+\t* decl.c (java_init_decl_processing): Initialize decimal_int_max,\n+\tdecimal_long_max.\n+\n 2002-11-02  Tom Tromey  <tromey@redhat.com>\n \n \t* java-tree.h: Move JV_STATE_ERROR before JV_STATE_DONE."}, {"sha": "3d3665bc70353a62cf024eab86cdd815b4ea1b99", "filename": "gcc/java/decl.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c034b4535845e25b6d4ba62be5bccb86ee7278c6", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for the GNU compiler for the\n    Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -454,6 +454,20 @@ java_init_decl_processing ()\n   integer_four_node = build_int_2 (4, 0);\n   integer_minus_one_node = build_int_2 (-1, -1);\n \n+  /* A few values used for range checking in the lexer.  */\n+  decimal_int_max = build_int_2 (0x80000000, 0);\n+  TREE_TYPE (decimal_int_max) = unsigned_int_type_node;\n+#if HOST_BITS_PER_WIDE_INT == 64\n+  decimal_long_max = build_int_2 (0x8000000000000000, 0);\n+#else\n+#if HOST_BITS_PER_WIDE_INT == 32\n+  decimal_long_max = build_int_2 (0, 0x80000000);\n+#else\n+ #error \"unsupported size\"\n+#endif\n+#endif\n+  TREE_TYPE (decimal_long_max) = unsigned_long_type_node;\n+\n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);\n   bitsize_zero_node = bitsize_int (0);"}, {"sha": "051e41b9a018e7705a2d146c35957ef314753906", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c034b4535845e25b6d4ba62be5bccb86ee7278c6", "patch": "@@ -275,6 +275,9 @@ enum java_tree_index\n   JTI_UNSIGNED_INT_TYPE_NODE,\n   JTI_UNSIGNED_LONG_TYPE_NODE,\n   \n+  JTI_DECIMAL_INT_MAX_NODE,\n+  JTI_DECIMAL_LONG_MAX_NODE,\n+\n   JTI_BOOLEAN_TYPE_NODE,\n \n   JTI_OBJECT_TYPE_NODE,\n@@ -441,6 +444,11 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n #define unsigned_long_type_node \\\n   java_global_trees[JTI_UNSIGNED_LONG_TYPE_NODE]\n \n+#define decimal_int_max \\\n+  java_global_trees[JTI_DECIMAL_INT_MAX_NODE]\n+#define decimal_long_max \\\n+  java_global_trees[JTI_DECIMAL_LONG_MAX_NODE]\n+\n #define boolean_type_node \\\n   java_global_trees[JTI_BOOLEAN_TYPE_NODE]\n "}, {"sha": "6c7866c31c4ee107e01109b2cbe84ba662db75a9", "filename": "gcc/java/lex.c", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=c034b4535845e25b6d4ba62be5bccb86ee7278c6", "patch": "@@ -1218,34 +1218,35 @@ java_lex (java_lval)\n \t}\n       /* End borrowed section.  */\n \n+#ifndef JC1_LITE\n       /* Range checking.  */\n-      if (long_suffix)\n+      value = build_int_2 (low, high);\n+      /* Temporarily set type to unsigned.  */\n+      SET_LVAL_NODE_TYPE (value, (long_suffix\n+\t\t\t\t  ? unsigned_long_type_node\n+\t\t\t\t  : unsigned_int_type_node));\n+\n+      /* For base 10 numbers, only values up to the highest value\n+\t (plus one) can be written.  For instance, only ints up to\n+\t 2147483648 can be written.  The special case of the largest\n+\t negative value is handled elsewhere.  For other bases, any\n+\t number can be represented.  */\n+      if (overflow || (radix == 10\n+\t\t       && tree_int_cst_lt (long_suffix\n+\t\t\t\t\t   ? decimal_long_max\n+\t\t\t\t\t   : decimal_int_max,\n+\t\t\t\t\t   value)))\n \t{\n-\t  /* 9223372036854775808L is valid if operand of a '-'. Otherwise\n-\t     9223372036854775807L is the biggest `long' literal that can be\n-\t     expressed using a 10 radix. For other radices, everything that\n-\t     fits withing 64 bits is OK.  */\n-\t  int hb = (high >> 31);\n-\t  if (overflow || (hb && low && radix == 10)\n-\t      || (hb && high & 0x7fffffff && radix == 10))\n+\t  if (long_suffix)\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `long' literal\");\n-\t}\n-      else\n-\t{\n-\t  /* 2147483648 is valid if operand of a '-'. Otherwise,\n-\t     2147483647 is the biggest `int' literal that can be\n-\t     expressed using a 10 radix. For other radices, everything\n-\t     that fits within 32 bits is OK.  As all literals are\n-\t     signed, we sign extend here.  */\n-\t  int hb = (low >> 31) & 0x1;\n-\t  if (overflow || high || (hb && low & 0x7fffffff && radix == 10))\n+\t  else\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `int' literal\");\n-\t  high = -hb;\n \t}\n-#ifndef JC1_LITE\n-      value = build_int_2 (low, high);\n+\n+      /* Sign extend the value.  */\n+      SET_LVAL_NODE_TYPE (value, (long_suffix ? long_type_node : int_type_node));\n+      force_fit_type (value, 0);\n       JAVA_RADIX10_FLAG (value) = radix == 10;\n-      SET_LVAL_NODE_TYPE (value, long_suffix ? long_type_node : int_type_node);\n #else\n       SET_LVAL_NODE_TYPE (build_int_2 (low, high),\n \t\t\t  long_suffix ? long_type_node : int_type_node);\n@@ -1661,24 +1662,14 @@ static void\n error_if_numeric_overflow (value)\n      tree value;\n {\n-  if (TREE_CODE (value) == INTEGER_CST && JAVA_RADIX10_FLAG (value))\n+  if (TREE_CODE (value) == INTEGER_CST\n+      && JAVA_RADIX10_FLAG (value)\n+      && tree_int_cst_sgn (value) < 0)\n     {\n-      unsigned HOST_WIDE_INT lo, hi;\n-\n-      lo = TREE_INT_CST_LOW (value);\n-      hi = TREE_INT_CST_HIGH (value);\n       if (TREE_TYPE (value) == long_type_node)\n-\t{\n-\t  int hb = (hi >> 31);\n-\t  if (hb && !(hi & 0x7fffffff))\n-\t    java_lex_error (\"Numeric overflow for `long' literal\", 0);\n-\t}\n+\tjava_lex_error (\"Numeric overflow for `long' literal\", 0);\n       else\n-\t{\n-\t  int hb = (lo >> 31) & 0x1;\n-\t  if (hb && !(lo & 0x7fffffff))\n-\t    java_lex_error (\"Numeric overflow for `int' literal\", 0);\n-\t}\n+\tjava_lex_error (\"Numeric overflow for `int' literal\", 0);\n     }\n }\n #endif /* JC1_LITE */"}, {"sha": "e79d7ee13e4bcc53071af3dce9d7e6e91b52ac1d", "filename": "gcc/java/lex.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c034b4535845e25b6d4ba62be5bccb86ee7278c6/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=c034b4535845e25b6d4ba62be5bccb86ee7278c6", "patch": "@@ -1,5 +1,5 @@\n /* Language lexer definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n This file is part of GNU CC.\n@@ -185,7 +185,7 @@ extern void java_destroy_lexer PARAMS ((java_lexer *));\n #define SET_LVAL_NODE_TYPE(NODE, TYPE)\n #define BUILD_ID_WFL(EXP) (EXP)\n #define JAVA_FLOAT_RANGE_ERROR(S) {}\n-#define JAVA_INTEGRAL_RANGE_ERROR(S) {}\n+#define JAVA_INTEGRAL_RANGE_ERROR(S) do { } while (0)\n \n #else\n \n@@ -237,12 +237,12 @@ extern void java_destroy_lexer PARAMS ((java_lexer *));\n     ctxp->c_line->current = i;\t\t\t\t\t\t  \\\n   }\n #define JAVA_INTEGRAL_RANGE_ERROR(m)\t\t\\\n-  {\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n     int i = ctxp->c_line->current;\t\t\\\n     ctxp->c_line->current = number_beginning;\t\\\n     java_lex_error (m, 0);\t\t\t\\\n     ctxp->c_line->current = i;\t\t\t\\\n-  }\n+  } while (0)\n \n #endif /* Definitions for jc1 compilation only */\n "}]}