{"sha": "559993b85744ae09d33eedb1cb062392ac482f94", "node_id": "C_kwDOANBUbNoAKDU1OTk5M2I4NTc0NGFlMDlkMzNlZWRiMWNiMDYyMzkyYWM0ODJmOTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T13:33:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T18:06:07Z"}, "message": "libstdc++: Embed a static copy of tzdata.zi\n\nThis adds a copy of the tzdata.zi file to the library, and allows\nconfiguring to use it instead of a copy read from disk at runtime.\nThe content of the file is in the public domain, but will need to be\nupdated to the latest upstream file before making GCC releases.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ZONEINFO_DIR): Replace the\n\t--with-libstdcxx-zoneinfo-dir configure option with\n\t--with-libstdcxx-zoneinfo with yes/no/static choices as well as\n\ta directory.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* doc/xml/manual/configure.xml: Document configure option.\n\t* doc/html/manual/configure.html: Regenerate.\n\t* src/c++20/Makefile.am: Generate tzdata.zi.h header.\n\t* src/c++20/Makefile.in: Regenerate.\n\t* src/c++20/tzdb.cc (__gnu_cxx::zoneinfo_dir_override): Return a\n\tnull pointer if no directory is configured.\n\t(zoneinfo_dir): Replace with ...\n\t(zoneinfo_file): New function.\n\t(tzdata_stream): New istream class.\n\t(remote_version, reload_tzdb): Use tzdata_stream.\n\t* testsuite/lib/libstdc++.exp (check_effective_target_tzdb):\n\tCheck new _GLIBCXX_STATIC_TZDATA macro and ignore presence of\n\ttzdata.zi file in default location.\n\t* src/c++20/tzdata.zi: New file.", "tree": {"sha": "b36edbfee96fa0491ced43dbe77327d39c88f7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b36edbfee96fa0491ced43dbe77327d39c88f7e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/559993b85744ae09d33eedb1cb062392ac482f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559993b85744ae09d33eedb1cb062392ac482f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559993b85744ae09d33eedb1cb062392ac482f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559993b85744ae09d33eedb1cb062392ac482f94/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6c7617102df365918402c6ccc8e497c47dbe60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6c7617102df365918402c6ccc8e497c47dbe60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6c7617102df365918402c6ccc8e497c47dbe60"}], "stats": {"total": 4615, "additions": 4543, "deletions": 72}, "files": [{"sha": "3840a9d761aa7bdea97ea1068a557a7cf7d2a520", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -5157,28 +5157,87 @@ AC_DEFUN([GLIBCXX_EMERGENCY_EH_ALLOC], [\n dnl\n dnl Allow the location of tzdata files to be configured.\n dnl\n-dnl --with-libstdcxx-zoneinfo-dir=PATH will set the directory to PATH.\n+dnl --with-libstdcxx-zoneinfo=ARG where ARG can be:\n+dnl   DIR - use DIR/tzdata.zi and DIR/leapseconds files.\n+dnl   static - use static copy of tzdata.zi embedded in the library.\n+dnl   DIR,static - use DIR, but use embedded static copy as fallback.\n+dnl   yes - equivalent to DIR,static with a system-specific value for DIR.\n+dnl   no - disable most tzdb functionality.\n dnl\n dnl Defines:\n-dnl  _GLIBCXX_ZONEINFO_DIR if std::chrono::tzdb should use a non-default\n+dnl  _GLIBCXX_ZONEINFO_DIR if std::chrono::tzdb should use the specified\n dnl    directory for the tzdata.zi and leapseconds files.\n+dnl  _GLIBCXX_STATIC_TZDATA if std::chrono::tzdb should use an embedded\n+dnl    static copy of the tzdata.zi file.\n dnl\n AC_DEFUN([GLIBCXX_ZONEINFO_DIR], [\n-  AC_ARG_WITH([libstdcxx-zoneinfo-dir],\n-    AC_HELP_STRING([--with-libstdcxx-zoneinfo-dir],\n-\t\t   [the directory to search for tzdata files]),\n-    [zoneinfo_dir=\"${withval}\"\n-     AC_DEFINE(_GLIBCXX_ZONEINFO_DIR, \"${withval}\",\n-       [Define if a non-default location should be used for tzdata files.])\n-    ],\n-    [\n+  AC_ARG_WITH([libstdcxx-zoneinfo],\n+    AC_HELP_STRING([--with-libstdcxx-zoneinfo],\n+\t\t   [the location to use for tzdata]),\n+    [],[with_libstdcxx_zoneinfo=yes])\n+\n+  if test \"x${with_libstdcxx_zoneinfo}\" = xyes; then\n+    # Pick a default when no specific path is set.\n     case \"$host\" in\n-      # *-*-aix*) zoneinfo_dir=\"/usr/share/lib/zoneinfo\" ;;\n-      *) zoneinfo_dir=\"/usr/share/zoneinfo\" ;;\n+      gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n+\t# Not all distros ship tzdata.zi in this dir.\n+\tzoneinfo_dir=\"/usr/share/zoneinfo\"\n+\t;;\n+      *-*-aix*)\n+\t# Binary tzfile files are in /usr/share/lib/zoneinfo\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n+      *-*-darwin2*)\n+\t# Binary tzfile files are in /usr/share/lib/zoneinfo.default\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n+      *)\n+\t# Binary tzfile files are commonly found in /usr/share/zoneinfo\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n     esac\n-    ])\n-\n+    # Also embed a copy of the tzdata.zi file as a static string.\n+    embed_zoneinfo=yes\n+  elif test \"x${with_libstdcxx_zoneinfo}\" = xno; then\n+    # Disable tzdb support completely.\n+    zoneinfo_dir=none\n+    embed_zoneinfo=no\n+  else\n+    case \"${with_libstdcxx_zoneinfo}\" in\n+      static)\n+\t# Do not attempt to read from disk, always use embedded data.\n+\tzoneinfo_dir=none\n+\tembed_zoneinfo=yes\n+\t;;\n+      static,* | *,static)\n+\t# Try to read from disk, use embedded data as fallback.\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo#static,}\"\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo%,static}\"\n+\tembed_zoneinfo=yes\n+\t;;\n+      *)\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo}\"\n+\tembed_zoneinfo=no\n+\t;;\n+    esac\n+  fi\n   AC_MSG_NOTICE([zoneinfo data directory: ${zoneinfo_dir}])\n+  if test \"x${zoneinfo_dir}\" != xnone; then\n+    AC_DEFINE_UNQUOTED(_GLIBCXX_ZONEINFO_DIR, \"${zoneinfo_dir}\",\n+      [Define if a directory should be searched for tzdata files.])\n+    if $GLIBCXX_IS_NATIVE -a ! test -f \"$zoneinfo_dir/tzdata.zi\"; then\n+      AC_MSG_WARN(\"$zoneinfo_dir does not contain tzdata.zi file\")\n+    fi\n+  fi\n+  GLIBCXX_CONDITIONAL(USE_STATIC_TZDATA, test \"${embed_zoneinfo}\" = yes)\n+  if test \"x${embed_zoneinfo}\" = xyes; then\n+    AC_MSG_NOTICE([static tzdata.zi file will be compiled into the library])\n+    AC_DEFINE_UNQUOTED(_GLIBCXX_STATIC_TZDATA, 1,\n+      [Define if static tzdata should be compiled into the library.])\n+  fi\n ])\n \n # Macros from the top-level gcc directory."}, {"sha": "75eddfd016d922018fde3a6c0dcc4dd194e04869", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -854,6 +854,9 @@\n /* Define if size_t is unsigned int. */\n #undef _GLIBCXX_SIZE_T_IS_UINT\n \n+/* Define if static tzdata should be compiled into the library. */\n+#undef _GLIBCXX_STATIC_TZDATA\n+\n /* Define to the value of the EOF integer constant. */\n #undef _GLIBCXX_STDIO_EOF\n \n@@ -1037,7 +1040,7 @@\n /* Defined if as can handle rdseed. */\n #undef _GLIBCXX_X86_RDSEED\n \n-/* Define if a non-default location should be used for tzdata files. */\n+/* Define if a directory should be searched for tzdata files. */\n #undef _GLIBCXX_ZONEINFO_DIR\n \n /* Define to 1 if mutex_timedlock is available. */"}, {"sha": "ab12a2d5b27324ad1f42bf559d5790df263bffe1", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 98, "deletions": 23, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -675,6 +675,8 @@ DOT\n DOXYGEN\n BUILD_INFO_FALSE\n BUILD_INFO_TRUE\n+USE_STATIC_TZDATA_FALSE\n+USE_STATIC_TZDATA_TRUE\n EH_POOL_FLAGS\n ENABLE_BACKTRACE_FALSE\n ENABLE_BACKTRACE_TRUE\n@@ -961,7 +963,7 @@ enable_libstdcxx_filesystem_ts\n enable_libstdcxx_backtrace\n enable_libstdcxx_static_eh_pool\n with_libstdcxx_eh_pool_obj_count\n-with_libstdcxx_zoneinfo_dir\n+with_libstdcxx_zoneinfo\n enable_cet\n with_gxx_include_dir\n enable_version_specific_runtime_libs\n@@ -1705,8 +1707,8 @@ Optional Packages:\n   --with-libstdcxx-eh-pool-obj-count\n                           the number of exceptions that can be allocated from\n                           the pool if malloc fails\n-  --with-libstdcxx-zoneinfo-dir\n-                          the directory to search for tzdata files\n+  --with-libstdcxx-zoneinfo\n+                          the location to use for tzdata\n   --with-gxx-include-dir=DIR\n                           installation directory for include files\n   --with-toolexeclibdir=DIR\n@@ -12185,7 +12187,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12188 \"configure\"\n+#line 12190 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12291,7 +12293,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12294 \"configure\"\n+#line 12296 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16015,7 +16017,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16018 \"configure\"\n+#line 16020 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -16050,7 +16052,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16053 \"configure\"\n+#line 16055 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16085,7 +16087,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16088 \"configure\"\n+#line 16090 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16121,7 +16123,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16124 \"configure\"\n+#line 16126 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16277,7 +16279,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16280 \"configure\"\n+#line 16282 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16319,7 +16321,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16322 \"configure\"\n+#line 16324 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -71511,25 +71513,85 @@ fi\n # For src/c++20/tzdb.cc defaults.\n \n \n-# Check whether --with-libstdcxx-zoneinfo-dir was given.\n-if test \"${with_libstdcxx_zoneinfo_dir+set}\" = set; then :\n-  withval=$with_libstdcxx_zoneinfo_dir; zoneinfo_dir=\"${withval}\"\n-\n-$as_echo \"#define _GLIBCXX_ZONEINFO_DIR \\\"\\${withval}\\\"\" >>confdefs.h\n-\n-\n+# Check whether --with-libstdcxx-zoneinfo was given.\n+if test \"${with_libstdcxx_zoneinfo+set}\" = set; then :\n+  withval=$with_libstdcxx_zoneinfo;\n else\n+  with_libstdcxx_zoneinfo=yes\n+fi\n+\n \n+  if test \"x${with_libstdcxx_zoneinfo}\" = xyes; then\n+    # Pick a default when no specific path is set.\n     case \"$host\" in\n-      # *-*-aix*) zoneinfo_dir=\"/usr/share/lib/zoneinfo\" ;;\n-      *) zoneinfo_dir=\"/usr/share/zoneinfo\" ;;\n+      gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n+\t# Not all distros ship tzdata.zi in this dir.\n+\tzoneinfo_dir=\"/usr/share/zoneinfo\"\n+\t;;\n+      *-*-aix*)\n+\t# Binary tzfile files are in /usr/share/lib/zoneinfo\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n+      *-*-darwin2*)\n+\t# Binary tzfile files are in /usr/share/lib/zoneinfo.default\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n+      *)\n+\t# Binary tzfile files are commonly found in /usr/share/zoneinfo\n+\t# but tzdata.zi is not present there.\n+\tzoneinfo_dir=none\n+\t;;\n     esac\n+    # Also embed a copy of the tzdata.zi file as a static string.\n+    embed_zoneinfo=yes\n+  elif test \"x${with_libstdcxx_zoneinfo}\" = xno; then\n+    # Disable tzdb support completely.\n+    zoneinfo_dir=none\n+    embed_zoneinfo=no\n+  else\n+    case \"${with_libstdcxx_zoneinfo}\" in\n+      static)\n+\t# Do not attempt to read from disk, always use embedded data.\n+\tzoneinfo_dir=none\n+\tembed_zoneinfo=yes\n+\t;;\n+      static,* | *,static)\n+\t# Try to read from disk, use embedded data as fallback.\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo#static,}\"\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo%,static}\"\n+\tembed_zoneinfo=yes\n+\t;;\n+      *)\n+\tzoneinfo_dir=\"${with_libstdcxx_zoneinfo}\"\n+\tembed_zoneinfo=no\n+\t;;\n+    esac\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: zoneinfo data directory: ${zoneinfo_dir}\" >&5\n+$as_echo \"$as_me: zoneinfo data directory: ${zoneinfo_dir}\" >&6;}\n+  if test \"x${zoneinfo_dir}\" != xnone; then\n \n-fi\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_ZONEINFO_DIR \"${zoneinfo_dir}\"\n+_ACEOF\n \n+    if $GLIBCXX_IS_NATIVE -a ! test -f \"$zoneinfo_dir/tzdata.zi\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: \\\"$zoneinfo_dir does not contain tzdata.zi file\\\"\" >&5\n+$as_echo \"$as_me: WARNING: \\\"$zoneinfo_dir does not contain tzdata.zi file\\\"\" >&2;}\n+    fi\n+  fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: zoneinfo data directory: ${zoneinfo_dir}\" >&5\n-$as_echo \"$as_me: zoneinfo data directory: ${zoneinfo_dir}\" >&6;}\n+  if test \"x${embed_zoneinfo}\" = xyes; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: static tzdata.zi file will be compiled into the library\" >&5\n+$as_echo \"$as_me: static tzdata.zi file will be compiled into the library\" >&6;}\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_STATIC_TZDATA 1\n+_ACEOF\n+\n+  fi\n \n \n # Define documentation rules conditionally.\n@@ -72365,6 +72427,15 @@ else\n fi\n \n \n+    if test \"${embed_zoneinfo}\" = yes; then\n+  USE_STATIC_TZDATA_TRUE=\n+  USE_STATIC_TZDATA_FALSE='#'\n+else\n+  USE_STATIC_TZDATA_TRUE='#'\n+  USE_STATIC_TZDATA_FALSE=\n+fi\n+\n+\n \n \n cat >confcache <<\\_ACEOF\n@@ -72882,6 +72953,10 @@ if test -z \"${ENABLE_BACKTRACE_TRUE}\" && test -z \"${ENABLE_BACKTRACE_FALSE}\"; th\n   as_fn_error $? \"conditional \\\"ENABLE_BACKTRACE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${USE_STATIC_TZDATA_TRUE}\" && test -z \"${USE_STATIC_TZDATA_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"USE_STATIC_TZDATA\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${BUILD_INFO_TRUE}\" && test -z \"${BUILD_INFO_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"BUILD_INFO\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "9c5c2d9f17081b3ad7879d1efcc4d11a8d38b92d", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -279,4 +279,25 @@\n     </p></dd><dt><span class=\"term\"><code class=\"code\">--with-libstdcxx-eh-pool-obj-count=NUM</code></span></dt><dd><p>Set the size of the emergency exception handling pool. NUM is the\n       number of simultaneous allocated exceptions to support.\n       This does not change the library ABI.\n+    </p></dd><dt><span class=\"term\"><code class=\"code\">--with-libstdcxx-zoneinfo=OPTION</code></span></dt><dd><p>Choose how <code class=\"classname\">std::chrono::tzdb</code> will obtain\n+      the time zone info. The library requires a copy of the\n+      <code class=\"filename\">tzdata.zi</code> and <code class=\"filename\">leapseconds</code>\n+      files from the <a class=\"link\" href=\"https://www.iana.org/time-zones\" target=\"_top\">IANA Time Zone\n+      Database</a>. The choice OPTION=static will embed a copy of the files\n+      into the library, and use that static data when time zone information\n+      is required. The choice OPTION=dir will use the files\n+      <code class=\"filename\">dir/tzdata.zi</code> and\n+      <code class=\"filename\">dir/leapseconds</code> (which must exist when a program\n+      tries to access time zone information). The choice OPTION=dir,static\n+      will try to use files in <code class=\"filename\">dir</code> but if they are\n+      not available the embedded static data will be used instead.\n+      The default choice is OPTION=yes. This is equivalent to OPTION=dir,static\n+      with a system-specific default directory (if a suitable default for\n+      the target is known).\n+      The choice OPTION=no will disable all code for loading time zone info\n+      from file or from the embedded static data, which means that only the\n+      \"UTC\" and \"GMT\" time zones are defined. Using OPTION=no results in a\n+      smaller library, so is suitable for systems that will never need to\n+      query the time zone database.\n+      This does not change the library ABI.\n     </p></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"setup.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"setup.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"make.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a02.\u00a0Setup\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Make</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "8b3b8cab8c716c514fadd60be3a1c8261c23945f", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -469,6 +469,33 @@\n     </para>\n  </listitem></varlistentry>\n \n+ <varlistentry><term><code>--with-libstdcxx-zoneinfo=OPTION</code></term>\n+ <listitem>\n+    <para>Choose how <classname>std::chrono::tzdb</classname> will obtain\n+      the time zone info. The library requires a copy of the\n+      <filename>tzdata.zi</filename> and <filename>leapseconds</filename>\n+      files from the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+\txlink:href=\"https://www.iana.org/time-zones\">IANA Time Zone\n+      Database</link>. The choice OPTION=static will embed a copy of the files\n+      into the library, and use that static data when time zone information\n+      is required. The choice OPTION=dir will use the files\n+      <filename>dir/tzdata.zi</filename> and\n+      <filename>dir/leapseconds</filename> (which must exist when a program\n+      tries to access time zone information). The choice OPTION=dir,static\n+      will try to use files in <filename>dir</filename> but if they are\n+      not available the embedded static data will be used instead.\n+      The default choice is OPTION=yes. This is equivalent to OPTION=dir,static\n+      with a system-specific default directory (if a suitable default for\n+      the target is known).\n+      The choice OPTION=no will disable all code for loading time zone info\n+      from file or from the embedded static data, which means that only the\n+      \"UTC\" and \"GMT\" time zones are defined. Using OPTION=no results in a\n+      smaller library, so is suitable for systems that will never need to\n+      query the time zone database.\n+      This does not change the library ABI.\n+    </para>\n+ </listitem></varlistentry>\n+\n </variablelist>\n \n </section>"}, {"sha": "5ae4145bb4afa7886e8ad023620552d83f7343fe", "filename": "libstdc++-v3/src/c++20/Makefile.am", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -40,6 +40,19 @@ sources = tzdb.cc\n \n vpath % $(top_srcdir)/src/c++20\n \n+if USE_STATIC_TZDATA\n+tzdata.zi.h: $(top_srcdir)/src/c++20/tzdata.zi\n+\techo 'static const char tzdata_chars[] = R\"__libstdcxx__(' > $@.tmp\n+\tcat $^ >> $@.tmp\n+\techo ')__libstdcxx__\";' >> $@.tmp\n+\tmv $@.tmp $@\n+\n+tzdb.lo: tzdb.cc tzdata.zi.h\n+\t$(LTCXXCOMPILE) -I. -c $<\n+tzdb.o: tzdb.cc tzdata.zi.h\n+\t$(CXXCOMPILE) -I. -c $<\n+endif\n+\n libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be"}, {"sha": "fceda34cbcc0d089b87e7e96cfc5782944b7b8d8", "filename": "libstdc++-v3/src/c++20/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -742,6 +742,17 @@ uninstall-am:\n \n vpath % $(top_srcdir)/src/c++20\n \n+@USE_STATIC_TZDATA_TRUE@tzdata.zi.h: $(top_srcdir)/src/c++20/tzdata.zi\n+@USE_STATIC_TZDATA_TRUE@\techo 'static const char tzdata_chars[] = R\"__libstdcxx__(' > $@.tmp\n+@USE_STATIC_TZDATA_TRUE@\tcat $^ >> $@.tmp\n+@USE_STATIC_TZDATA_TRUE@\techo ')__libstdcxx__\";' >> $@.tmp\n+@USE_STATIC_TZDATA_TRUE@\tmv $@.tmp $@\n+\n+@USE_STATIC_TZDATA_TRUE@tzdb.lo: tzdb.cc tzdata.zi.h\n+@USE_STATIC_TZDATA_TRUE@\t$(LTCXXCOMPILE) -I. -c $<\n+@USE_STATIC_TZDATA_TRUE@tzdb.o: tzdb.cc tzdata.zi.h\n+@USE_STATIC_TZDATA_TRUE@\t$(CXXCOMPILE) -I. -c $<\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "3db1460e1bea9af07456995f637617726dd24b3c", "filename": "libstdc++-v3/src/c++20/tzdata.zi", "status": "added", "additions": 4207, "deletions": 0, "changes": 4207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi?ref=559993b85744ae09d33eedb1cb062392ac482f94"}, {"sha": "94fb04360916727a6b7815517d03c55a8f3cb552", "filename": "libstdc++-v3/src/c++20/tzdb.cc", "status": "modified", "additions": 87, "deletions": 29, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -60,10 +60,6 @@\n # endif\n #endif\n \n-#ifndef _GLIBCXX_ZONEINFO_DIR\n-# define _GLIBCXX_ZONEINFO_DIR \"/usr/share/zoneinfo\"\n-#endif\n-\n namespace __gnu_cxx\n {\n #ifdef _AIX\n@@ -75,7 +71,13 @@ namespace __gnu_cxx\n #if defined(__APPLE__) || defined(__hpux__)\n   // Need a weak definition for Mach-O.\n   [[gnu::weak]] const char* zoneinfo_dir_override()\n-  { return _GLIBCXX_ZONEINFO_DIR; }\n+  {\n+#ifdef _GLIBCXX_ZONEINFO_DIR\n+    return _GLIBCXX_ZONEINFO_DIR;\n+#else\n+    return nullptr;\n+#endif\n+  }\n #endif\n #endif\n }\n@@ -1008,30 +1010,91 @@ namespace std::chrono\n     return info;\n   }\n \n- namespace\n- {\n+  namespace\n+  {\n+    // If a zoneinfo directory is defined (either when the library was built,\n+    // or via the zoneinfo_dir_override function) then append filename to it.\n+    // The filename should have a leading '/' as one is not added explicitly.\n     string\n-    zoneinfo_dir()\n+    zoneinfo_file(string_view filename)\n     {\n+      string path;\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Waddress\"\n-      static const string dir = __gnu_cxx::zoneinfo_dir_override\n-\t\t\t\t  ? __gnu_cxx::zoneinfo_dir_override()\n-\t\t\t\t  : _GLIBCXX_ZONEINFO_DIR;\n+      if (__gnu_cxx::zoneinfo_dir_override)\n+      {\n+\tif (auto override_dir = __gnu_cxx::zoneinfo_dir_override())\n+\t  path = override_dir;\n #pragma GCC diagnostic pop\n-      return dir;\n+      }\n+#ifdef _GLIBCXX_ZONEINFO_DIR\n+      else\n+\tpath = _GLIBCXX_ZONEINFO_DIR;\n+#endif\n+      if (!path.empty())\n+\tpath.append(filename);\n+      return path;\n     }\n \n+    // N.B. Leading slash as required by zoneinfo_file function.\n     const string tzdata_file = \"/tzdata.zi\";\n     const string leaps_file = \"/leapseconds\";\n+\n+#ifdef _GLIBCXX_STATIC_TZDATA\n+// Static copy of tzdata.zi embedded in the library as tzdata_chars[]\n+#include \"tzdata.zi.h\"\n+#endif\n+\n+    // An istream type that can read from a file or from a string.\n+    struct tzdata_stream : istream\n+    {\n+      // std::spanbuf not available until C++23\n+      struct ispanbuf : streambuf\n+      {\n+\tispanbuf() : streambuf()\n+\t{\n+#ifdef _GLIBCXX_STATIC_TZDATA\n+\t  char* p = const_cast<char*>(tzdata_chars);\n+\t  this->setg(p, p, p + std::size(tzdata_chars) - 1);\n+#endif\n+\t}\n+\n+\t// N.B. seekoff and seekpos not overridden, not currently needed.\n+      };\n+\n+      union {\n+\tfilebuf fb;\n+\tispanbuf sb;\n+      };\n+\n+      tzdata_stream() : istream(nullptr)\n+      {\n+\tif (string path = zoneinfo_file(\"/tzdata.zi\"); !path.empty())\n+\t{\n+\t  filebuf fbuf;\n+\t  if (fbuf.open(path, std::ios::in))\n+\t    {\n+\t      std::construct_at(&fb, std::move(fbuf));\n+\t      this->init(&fb);\n+\t      return;\n+\t    }\n+\t}\n+\tstd::construct_at(&sb);\n+\tthis->init(&sb);\n+      }\n+\n+      ~tzdata_stream() { std::destroy_at(this->rdbuf()); } // use virtual dtor\n+\n+      bool using_static_data() const { return this->rdbuf() == &sb; }\n+    };\n   }\n \n   // Return leap_second values, and a bool indicating whether the values are\n   // current (true), or potentially out of date (false).\n   pair<vector<leap_second>, bool>\n   tzdb_list::_Node::_S_read_leap_seconds()\n   {\n-    const string filename = zoneinfo_dir() + leaps_file;\n+    const string filename = zoneinfo_file(leaps_file);\n \n     // This list is valid until at least 2023-06-28 00:00:00 UTC.\n     auto expires = sys_days{2023y/6/28};\n@@ -1127,31 +1190,25 @@ namespace std::chrono\n   namespace\n   {\n     // Read the version number from a tzdata.zi file.\n-    // Note that some systems do not have this file available by default\n-    // but we can configure the library to point to an alternate installation.\n     string\n-    remote_version(istream* zif)\n+    remote_version(istream& zif)\n     {\n-      ifstream f;\n-      if (!zif)\n-\t{\n-\t  f.open(zoneinfo_dir() + tzdata_file);\n-\t  zif = &f;\n-\t}\n       char hash;\n       string label;\n       string version;\n-      if (*zif >> hash >> label >> version)\n+      if (zif >> hash >> label >> version)\n \tif (hash == '#' && label == \"version\")\n \t  return version;\n+#if 0 // Ignore these files, because we're not using them anyway.\n #if defined __NetBSD__\n-      if (string ver; ifstream(zoneinfo_dir() + \"/TZDATA_VERSION\") >> ver)\n+      if (string ver; ifstream(zoneinfo_file(\"/TZDATA_VERSION\")) >> ver)\n \treturn ver;\n #elif defined __APPLE__\n       // The standard install on macOS has no tzdata.zi, but we can find the\n       // version from +VERSION.\n-      if (string ver; ifstream(zoneinfo_dir() + \"/+VERSION\") >> ver)\n+      if (string ver; ifstream(zoneinfo_file(\"/+VERSION\")) >> ver)\n \treturn ver;\n+#endif\n #endif\n       __throw_runtime_error(\"tzdb: no version found in tzdata.zi\");\n     }\n@@ -1160,7 +1217,8 @@ namespace std::chrono\n   // Definition of std::chrono::remote_version()\n   string remote_version()\n   {\n-    return remote_version(nullptr);\n+    tzdata_stream zif;\n+    return remote_version(zif);\n   }\n \n   // Used by chrono::reload_tzdb() to add a new node to the front of the list.\n@@ -1293,8 +1351,8 @@ namespace std::chrono\n   {\n     using Node = tzdb_list::_Node;\n \n-    ifstream zif(zoneinfo_dir() + tzdata_file);\n-    const string version = remote_version(&zif);\n+    tzdata_stream zif;\n+    const string version = remote_version(zif);\n \n #if USE_ATOMIC_SHARED_PTR\n     auto head = Node::_S_head_owner.load(memory_order::acquire);\n@@ -1311,7 +1369,7 @@ namespace std::chrono\n #endif\n \n     auto [leaps, leaps_ok] = Node::_S_read_leap_seconds();\n-    if (!leaps_ok)\n+    if (!leaps_ok && !zif.using_static_data())\n       __throw_runtime_error(\"tzdb: cannot parse leapseconds file\");\n \n     auto node = std::make_shared<Node>();"}, {"sha": "843497c0a8092ce0a3170477ab228f11c7bcec0c", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559993b85744ae09d33eedb1cb062392ac482f94/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=559993b85744ae09d33eedb1cb062392ac482f94", "patch": "@@ -1415,11 +1415,8 @@ proc check_effective_target_tzdb { } {\n \treturn 0\n     }\n     return [check_v3_target_prop_cached et_tzdb {\n-\tset cond \"defined _GLIBCXX_ZONEINFO_DIR\"\n-\tif {[v3_check_preprocessor_condition tzdb $cond]} {\n-\t    return 1\n-\t}\n-\treturn [file exists /usr/share/zoneinfo/tzdata.zi]\n+\tset cond \"defined _GLIBCXX_ZONEINFO_DIR || _GLIBCXX_STATIC_TZDATA\"\n+\treturn [v3_check_preprocessor_condition tzdb $cond]\n     }]\n }\n "}]}