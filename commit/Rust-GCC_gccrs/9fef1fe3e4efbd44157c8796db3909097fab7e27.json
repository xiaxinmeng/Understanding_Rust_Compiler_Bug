{"sha": "9fef1fe3e4efbd44157c8796db3909097fab7e27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlZjFmZTNlNGVmYmQ0NDE1N2M4Nzk2ZGIzOTA5MDk3ZmFiN2UyNw==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-04-12T14:28:50Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-04-12T14:28:50Z"}, "message": "Add --extdirs support.\n\nFrom-SVN: r52227", "tree": {"sha": "c805c665a66c87dca37b7dfcf03d737017b9baf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c805c665a66c87dca37b7dfcf03d737017b9baf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fef1fe3e4efbd44157c8796db3909097fab7e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fef1fe3e4efbd44157c8796db3909097fab7e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fef1fe3e4efbd44157c8796db3909097fab7e27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fef1fe3e4efbd44157c8796db3909097fab7e27/comments", "author": null, "committer": null, "parents": [{"sha": "395cb211416da7def56ca50868c8f1379f99fcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395cb211416da7def56ca50868c8f1379f99fcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395cb211416da7def56ca50868c8f1379f99fcda"}], "stats": {"total": 203, "additions": 183, "deletions": 20}, "files": [{"sha": "4a22366441a892b8a885264967ef01b55659174e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -1,3 +1,31 @@\n+2002-04-10  Andreas Jaeger  <aj@suse.de>\n+\n+\t* gcj.texi (Input Options): Fix extdirs patch.\n+\n+2002-04-10  Anthony Green  <green@redhat.com>\n+\n+\t* jcf-path.c (jcf_path_init) : Clean up local extdirs declaration.\n+\n+2002-04-09  Anthony Green  <green@redhat.com>\n+\n+\t* gcj.texi (Input Options): Add --extdirs documentation.\n+\t* jcf-dump.c (OPT_extdirs): New macro.\n+\t(options): Add extdirs option.\n+\t(help): Describe --extdirs.\n+\t(main): Handle OPT_extdirs.\n+\t* gjavah.c (OPT_extdirs): New macro.\n+\t(options): Add extdirs option.\n+\t(help): Describe --extdirs.\n+\t(main): Handle OPT_extdirs.\n+\t* jcf-path.c (jcf_path_init): Add extdirs support.\n+\t(jcf_path_extdirs_arg): New function.\n+\t(extensions): New variable to hold extensions path entries.\n+\t* jvspec.c: Remove -fextdirs= when compiling main().\n+\t* lang.c (java_decode_option): Handle -fextdirs=.\n+\t* jcf.h (jcf_path_extdirs_arg): Declare new function.\n+\t* Make-lang.in: Compile jcf-path with version info for use in\n+\tidentifying the appropriate libgcj.jar.\n+\n 2002-04-08  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR libgcj/5303:"}, {"sha": "e814a10237ee979015ca21e5ee27d0f5f515e8a2", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -315,7 +315,8 @@ java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H)\n # jcf-path.o needs a -D.\n java/jcf-path.o: java/jcf-path.c $(CONFIG_H) $(SYSTEM_H) java/jcf.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DLIBGCJ_ZIP_FILE='\"$(prefix)/share/libgcj.jar\"' \\\n+\t  -DLIBGCJ_ZIP_FILE='\"$(prefix)/share/java/libgcj-$(version).jar\"' \\\n+\t  -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n \t  $(srcdir)/java/jcf-path.c $(OUTPUT_OPTION)\n \n # Documentation"}, {"sha": "814c182a803df2d9f8aff6fc52db4a4a97ba7767", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -257,6 +257,10 @@ Deprecated synonym for @code{--classpath}.\n @item --bootclasspath=@var{path}\n Where to find the standard builtin classes, such as @code{java.lang.String}.\n \n+@item --extdirs=@var{path}\n+For each directory in the @var{path}, place the contents of that\n+directory at the end of the class path.\n+\n @item CLASSPATH\n This is an environment variable which holds a list of paths.\n @end table\n@@ -274,8 +278,13 @@ then its value is appended.\n Otherwise, the current directory (@code{\".\"}) is appended.\n \n @item\n-Finally, if @code{--bootclasspath} was specified, append its value.\n+If @code{--bootclasspath} was specified, append its value.\n Otherwise, append the built-in system directory, @file{libgcj.jar}.\n+\n+@item\n+Finaly, if @code{--extdirs} was specified, append the contents of the\n+specified directories at the end of the class path.  Otherwise, append\n+the contents of the built-in extdirs at @code{$(prefix)/share/java/ext}.\n @end itemize\n \n The classfile built by @command{gcj} for the class @code{java.lang.Object}"}, {"sha": "4daaa2bcd3b8afd3c9fe769641e4dc36c0d12921", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -2104,23 +2104,25 @@ DEFUN(process_file, (jcf, out),\n #define OPT_classpath     LONG_OPT (0)\n #define OPT_CLASSPATH     OPT_classpath\n #define OPT_bootclasspath LONG_OPT (1)\n-#define OPT_HELP          LONG_OPT (2)\n-#define OPT_TEMP          LONG_OPT (3)\n-#define OPT_VERSION       LONG_OPT (4)\n-#define OPT_PREPEND       LONG_OPT (5)\n-#define OPT_FRIEND        LONG_OPT (6)\n-#define OPT_ADD           LONG_OPT (7)\n-#define OPT_APPEND        LONG_OPT (8)\n-#define OPT_M             LONG_OPT (9)\n-#define OPT_MM            LONG_OPT (10)\n-#define OPT_MG            LONG_OPT (11)\n-#define OPT_MD            LONG_OPT (12)\n-#define OPT_MMD           LONG_OPT (13)\n+#define OPT_extdirs       LONG_OPT (2)\n+#define OPT_HELP          LONG_OPT (3)\n+#define OPT_TEMP          LONG_OPT (4)\n+#define OPT_VERSION       LONG_OPT (5)\n+#define OPT_PREPEND       LONG_OPT (6)\n+#define OPT_FRIEND        LONG_OPT (7)\n+#define OPT_ADD           LONG_OPT (8)\n+#define OPT_APPEND        LONG_OPT (9)\n+#define OPT_M             LONG_OPT (10)\n+#define OPT_MM            LONG_OPT (11)\n+#define OPT_MG            LONG_OPT (12)\n+#define OPT_MD            LONG_OPT (13)\n+#define OPT_MMD           LONG_OPT (14)\n \n static const struct option options[] =\n {\n   { \"classpath\",     required_argument, NULL, OPT_classpath },\n   { \"bootclasspath\", required_argument, NULL, OPT_bootclasspath },\n+  { \"extdirs\",       required_argument, NULL, OPT_extdirs },\n   { \"CLASSPATH\",     required_argument, NULL, OPT_CLASSPATH },\n   { \"help\",          no_argument,       NULL, OPT_HELP },\n   { \"stubs\",         no_argument,       &stubs, 1 },\n@@ -2163,6 +2165,7 @@ help ()\n   printf (\"  --classpath PATH        Set path to find .class files\\n\");\n   printf (\"  -IDIR                   Append directory to class path\\n\");\n   printf (\"  --bootclasspath PATH    Override built-in class path\\n\");\n+  printf (\"  --extdirs PATH          Set extensions directory path\\n\");\n   printf (\"  -d DIRECTORY            Set output directory name\\n\");\n   printf (\"  -o FILE                 Set output file name\\n\");\n   printf (\"  -td DIRECTORY           Set temporary directory name\\n\");\n@@ -2246,6 +2249,10 @@ DEFUN(main, (argc, argv),\n \t  jcf_path_bootclasspath_arg (optarg);\n \t  break;\n \n+\tcase OPT_extdirs:\n+\t  jcf_path_extdirs_arg (optarg);\n+\t  break;\n+\n \tcase OPT_HELP:\n \t  help ();\n \t  break;"}, {"sha": "8c4052db662b6829a4c09a4ede5426a834128fc3", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -776,14 +776,16 @@ DEFUN(process_class, (jcf),\n #define OPT_classpath     LONG_OPT (0)\n #define OPT_CLASSPATH     OPT_classpath\n #define OPT_bootclasspath LONG_OPT (1)\n-#define OPT_HELP          LONG_OPT (2)\n-#define OPT_VERSION       LONG_OPT (3)\n-#define OPT_JAVAP         LONG_OPT (4)\n+#define OPT_extdirs       LONG_OPT (2)\n+#define OPT_HELP          LONG_OPT (3)\n+#define OPT_VERSION       LONG_OPT (4)\n+#define OPT_JAVAP         LONG_OPT (5)\n \n static const struct option options[] =\n {\n   { \"classpath\",     required_argument, NULL, OPT_classpath },\n   { \"bootclasspath\", required_argument, NULL, OPT_bootclasspath },\n+  { \"extdirs\",       required_argument, NULL, OPT_extdirs },\n   { \"CLASSPATH\",     required_argument, NULL, OPT_CLASSPATH },\n   { \"help\",          no_argument,       NULL, OPT_HELP },\n   { \"verbose\",       no_argument,       NULL, 'v' },\n@@ -811,6 +813,7 @@ help ()\n   printf (\"  --classpath PATH        Set path to find .class files\\n\");\n   printf (\"  -IDIR                   Append directory to class path\\n\");\n   printf (\"  --bootclasspath PATH    Override built-in class path\\n\");\n+  printf (\"  --extdirs PATH          Set extensions directory path\\n\");\n   printf (\"  -o FILE                 Set output file name\\n\");\n   printf (\"\\n\");\n   printf (\"  --help                  Print this help, then exit\\n\");\n@@ -881,6 +884,10 @@ DEFUN(main, (argc, argv),\n \t  jcf_path_bootclasspath_arg (optarg);\n \t  break;\n \n+\tcase OPT_extdirs:\n+\t  jcf_path_extdirs_arg (optarg);\n+\t  break;\n+\n \tcase OPT_HELP:\n \t  help ();\n \t  break;"}, {"sha": "a87703e5ac02caa70c916fddba228e36c73478aa", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 105, "deletions": 3, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -26,6 +26,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"config.h\"\n #include \"system.h\"\n \n+#include <dirent.h>\n+\n #include \"jcf.h\"\n \n /* Some boilerplate that really belongs in a header.  */\n@@ -74,6 +76,7 @@ static void add_path PARAMS ((struct entry **, const char *, int));\n    -classpath option overrides $CLASSPATH\n    -CLASSPATH option is a synonym for -classpath (for compatibility)\n    -bootclasspath overrides built-in\n+   -extdirs sets the extensions directory path (overrides built-in)\n    -I prepends path to list\n \n    We implement this by keeping several path lists, and then simply\n@@ -92,6 +95,9 @@ static struct entry *classpath_user;\n    \"system\" flag set.  */\n static struct entry *sys_dirs;\n \n+/* This holds the extensions path entries.  */\n+static struct entry *extensions;\n+\n /* This is the sealed list.  It is just a combination of other lists.  */\n static struct entry *sealed;\n \n@@ -244,7 +250,7 @@ jcf_path_init ()\n       try = alloca (strlen (cp) + 50);\n       /* The exec prefix can be something like\n \t /usr/local/bin/../lib/gcc-lib/.  We want to change this\n-\t into a pointer to the share directory.  We support two\n+\t into a pointer to the share/java directory.  We support two\n \t configurations: one where prefix and exec-prefix are the\n \t same, and one where exec-prefix is `prefix/SOMETHING'.  */\n       strcpy (try, cp);\n@@ -256,30 +262,57 @@ jcf_path_init ()\n \n       strcpy (try + len, \"share\");\n       strcat (try, sep);\n-      strcat (try, \"libgcj.jar\");\n+      strcat (try, \"java\");\n+      strcat (try, sep);\n+      strcat (try, \"libgcj-\" DEFAULT_TARGET_VERSION \".jar\");\n       if (! stat (try, &stat_b))\n \t{\n \t  add_entry (&sys_dirs, try, 1);\n \t  found = 1;\n+\t  strcpy (&try[strlen (try)\n+\t\t      - strlen (\"libgcj-\" DEFAULT_TARGET_VERSION \".jar\")],\n+\t\t  sep);\n+\t  strcat (try, \"ext\");\n+\t  strcat (try, sep);\n+\t  if (! stat (try, &stat_b))\n+\t    jcf_path_extdirs_arg (try);\n \t}\n       else\n \t{\n \t  strcpy (try + len, DIR_UP);\n \t  strcat (try, sep);\n \t  strcat (try, \"share\");\n \t  strcat (try, sep);\n-\t  strcat (try, \"libgcj.jar\");\n+\t  strcat (try, \"java\");\n+\t  strcat (try, sep);\n+\t  strcat (try, \"libgcj-\" DEFAULT_TARGET_VERSION \".jar\");\n \t  if (! stat (try, &stat_b))\n \t    {\n \t      add_entry (&sys_dirs, try, 1);\n \t      found = 1;\n+\t      strcpy (&try[strlen (try)\n+\t\t\t  - strlen (\"libgcj-\" DEFAULT_TARGET_VERSION \".jar\")],\n+\t\t      sep);\n+\t      strcat (try, \"ext\");\n+\t      strcat (try, sep);\n+\t      if (! stat (try, &stat_b))\n+\t\tjcf_path_extdirs_arg (try);\n \t    }\n \t}\n     }\n   if (! found)\n     {\n       /* Desperation: use the installed one.  */\n+      char *extdirs;\n       add_entry (&sys_dirs, LIBGCJ_ZIP_FILE, 1);\n+      extdirs = (char *) alloca (strlen (LIBGCJ_ZIP_FILE));\n+      strcpy (extdirs, LIBGCJ_ZIP_FILE);\n+      strcpy (&extdirs[strlen (LIBGCJ_ZIP_FILE)\n+\t\t      - strlen (\"libgcj-\" DEFAULT_TARGET_VERSION \".jar\")],\n+\t      \"ext\");\n+      strcat (extdirs, sep);\n+      if (! stat (extdirs, &stat_b))\n+\tjcf_path_extdirs_arg (extdirs);\n     }\n \n   GET_ENV_PATH_LIST (cp, \"CLASSPATH\");\n@@ -307,6 +340,73 @@ jcf_path_bootclasspath_arg (path)\n   add_path (&sys_dirs, path, 1);\n }\n \n+/* Call this when -extdirs is seen on the command line.\n+ */\n+void\n+jcf_path_extdirs_arg (cp)\n+     const char *cp;\n+{\n+  const char *startp, *endp;\n+\n+  free_entry (&extensions);\n+\n+  if (cp)\n+    {\n+      char *buf = (char *) alloca (strlen (cp) + 3);\n+      startp = endp = cp;\n+      while (1)\n+\t{\n+\t  if (! *endp || *endp == PATH_SEPARATOR)\n+\t    {\n+\t      if (endp == startp)\n+\t\treturn;\n+\n+\t      strncpy (buf, startp, endp - startp);\n+\t      buf[endp - startp] = '\\0';\n+\n+\t      {  \n+\t\tDIR *dirp = NULL;\n+\t\tint dirname_length = strlen (buf);\n+\t\t\n+\t\tdirp = opendir (buf);\n+\t\tif (dirp == NULL)\n+\t\t  return;\n+\t\t\n+\t\tfor (;;)\n+\t\t  {\n+\t\t    struct dirent *direntp = readdir (dirp);\n+\t\t    \n+\t\t    if (!direntp)\n+\t\t      break;\n+\t\t    \n+\t\t    if (direntp->d_name[0] != '.')\n+\t\t      {\n+\t\t\tchar *name = \n+\t\t\t  (char *) alloca (dirname_length\n+\t\t\t\t\t   + strlen (direntp->d_name) + 2);\n+\t\t\tstrcpy (name, buf);\n+\t\t\tif (name[dirname_length-1] != DIR_SEPARATOR)\n+\t\t\t  {\n+\t\t\t    name[dirname_length] = DIR_SEPARATOR;\n+\t\t\t    name[dirname_length+1] = 0;\n+\t\t\t  }\n+\t\t\tstrcat (name, direntp->d_name);\n+\t\t\tadd_entry (&extensions, name, 0);\n+\t\t      }\n+\t\t  }\n+\t      }\n+\n+\t      if (! *endp)\n+\t\tbreak;\n+\t      ++endp;\n+\t      startp = endp;\n+\t    }\n+\t  else\n+\t    ++endp;\n+\t}\n+    }\n+}\n+\n /* Call this when -I is seen on the command line.  */\n void\n jcf_path_include_arg (path)\n@@ -347,7 +447,9 @@ jcf_path_seal (print)\n \n   append_entry (&sealed, secondary);\n   append_entry (&sealed, sys_dirs);\n+  append_entry (&sealed, extensions);\n   sys_dirs = NULL;\n+  extensions = NULL;\n \n   if (print)\n     {"}, {"sha": "c683e2b7de9a4e95eec5afc39a2955d702fcd9e5", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -273,6 +273,7 @@ extern void jcf_dependency_print_dummies PARAMS ((void));\n extern void jcf_path_init PARAMS ((void));\n extern void jcf_path_classpath_arg PARAMS ((const char *));\n extern void jcf_path_bootclasspath_arg PARAMS ((const char *));\n+extern void jcf_path_extdirs_arg PARAMS ((const char *));\n extern void jcf_path_include_arg PARAMS ((const char *));\n extern void jcf_path_seal PARAMS ((int));\n extern void *jcf_path_start PARAMS ((void));"}, {"sha": "74ca9d4131ace46823665159b2d834efbe29844e", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -68,6 +68,7 @@ static const char jvgenmain_spec[] =\n \t\t   %{<findirect-dispatch} \\\n \t\t   %{<fno-store-check} %{<foutput-class-dir}\\\n \t\t   %{<fclasspath*} %{<fCLASSPATH*} %{<fbootclasspath*}\\\n+\t\t   %{<fextdirs*}\\\n \t\t   %{<fuse-divide-subroutine} %{<fno-use-divide-subroutine}\\\n \t\t   %{<fcheck-references} %{<fno-check-references}\\\n \t\t   %{<ffilelist-file}\\"}, {"sha": "0f0984c3df0ee74c85e2b1f52dacf7fbe39ed0af", "filename": "gcc/java/lang.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fef1fe3e4efbd44157c8796db3909097fab7e27/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=9fef1fe3e4efbd44157c8796db3909097fab7e27", "patch": "@@ -359,6 +359,13 @@ java_decode_option (argc, argv)\n       jcf_path_bootclasspath_arg (p + sizeof (CLARG) - 1);\n       return 1;\n     }\n+#undef CLARG\n+#define CLARG \"-fextdirs=\"\n+  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n+    {\n+      jcf_path_extdirs_arg (p + sizeof (CLARG) - 1);\n+      return 1;\n+    }\n #undef CLARG\n   else if (strncmp (p, \"-I\", 2) == 0)\n     {"}]}