{"sha": "1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0ZjM2OTZhMjRhYTBmY2RjYTJkY2FkYzJjN2ZjODNiYTZiMmU1ZA==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-15T11:33:30Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:11:49Z"}, "message": "[PATCH, GCC/ARM, 7/10] Clear all VFP regs inline in hardfloat nscall functions\n\nThe patch is fairly straightforward in its approach and consist of the\nfollowing 3 logical changes:\n- abstract the number of floating-point register to clear in\n  max_fp_regno\n- use max_fp_regno to decide how many registers to clear so that the\n  same code works for Armv8-M and Armv8.1-M Mainline\n- emit vpush and vpop instruction respectively before and after a\n  nonsecure call\n\nNote that as in the patch to clear GPRs inline, debug information has to\nbe disabled for VPUSH and VPOP due to VPOP adding CFA adjustment note\nfor SP when R7 is sometimes used as CFA.\n\nChangeLog entries are as follows:\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (vfp_emit_fstmd): Declare early.\n\t(arm_emit_vfp_multi_reg_pop): Likewise.\n\t(cmse_nonsecure_call_inline_register_clear): Abstract number of VFP\n\tregisters to clear in max_fp_regno.  Emit VPUSH and VPOP to save and\n\trestore callee-saved VFP registers.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Add check for\n\tVPUSH and VPOP and update expectation for VSCCLRM.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: Likewise.", "tree": {"sha": "028bef77a772cd9471283a5b580c5fa365f35f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028bef77a772cd9471283a5b580c5fa365f35f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/comments", "author": null, "committer": null, "parents": [{"sha": "2d924ca620387c371cd564c821682012b3c97481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d924ca620387c371cd564c821682012b3c97481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d924ca620387c371cd564c821682012b3c97481"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "11938ef2432779fcbf22a50cd7390020ff717e9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -1,6 +1,15 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* config/arm/arm.c (vfp_emit_fstmd): Declare early.\n+\t(arm_emit_vfp_multi_reg_pop): Likewise.\n+\t(cmse_nonsecure_call_inline_register_clear): Abstract number of VFP\n+\tregisters to clear in max_fp_regno.  Emit VPUSH and VPOP to save and\n+\trestore callee-saved VFP registers.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* config/arm/arm.c (arm_emit_multi_reg_pop): Declare early.\n \t(cmse_nonsecure_call_clear_caller_saved): Rename into ...\n \t(cmse_nonsecure_call_inline_register_clear): This.  Save and clear"}, {"sha": "2cb2b8ec84b17d35ff446cd17fc15968bb53acaf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -188,6 +188,8 @@ static void emit_constant_insn (rtx cond, rtx pattern);\n static rtx_insn *emit_set_insn (rtx, rtx);\n static rtx emit_multi_reg_push (unsigned long, unsigned long);\n static void arm_emit_multi_reg_pop (unsigned long);\n+static int vfp_emit_fstmd (int, int);\n+static void arm_emit_vfp_multi_reg_pop (int, int, rtx);\n static int arm_arg_partial_bytes (cumulative_args_t,\n \t\t\t\t  const function_arg_info &);\n static rtx arm_function_arg (cumulative_args_t, const function_arg_info &);\n@@ -18287,8 +18289,10 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t  unsigned address_regnum, regno;\n \t  unsigned max_int_regno\n \t    = clear_callee_saved ? IP_REGNUM : LAST_ARG_REGNUM;\n+\t  unsigned max_fp_regno\n+\t    = TARGET_HAVE_FPCXT_CMSE ? LAST_VFP_REGNUM : D7_VFP_REGNUM;\n \t  unsigned maxregno\n-\t    = TARGET_HARD_FLOAT_ABI ? D7_VFP_REGNUM : max_int_regno;\n+\t    = TARGET_HARD_FLOAT_ABI ? max_fp_regno : max_int_regno;\n \t  auto_sbitmap to_clear_bitmap (maxregno + 1);\n \t  rtx_insn *seq;\n \t  rtx pat, call, unspec, clearing_reg, ip_reg, shift;\n@@ -18336,7 +18340,7 @@ cmse_nonsecure_call_inline_register_clear (void)\n \n \t      bitmap_clear (float_bitmap);\n \t      bitmap_set_range (float_bitmap, FIRST_VFP_REGNUM,\n-\t\t\t\tD7_VFP_REGNUM - FIRST_VFP_REGNUM + 1);\n+\t\t\t\tmax_fp_regno - FIRST_VFP_REGNUM + 1);\n \t      bitmap_ior (to_clear_bitmap, to_clear_bitmap, float_bitmap);\n \t    }\n \n@@ -18413,6 +18417,16 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t      /* Disable frame debug info in push because it needs to be\n \t\t disabled for pop (see below).  */\n \t      RTX_FRAME_RELATED_P (push_insn) = 0;\n+\n+\t      /* Save VFP callee-saved registers.  */\n+\t      if (TARGET_HARD_FLOAT_ABI)\n+\t\t{\n+\t\t  vfp_emit_fstmd (D7_VFP_REGNUM + 1,\n+\t\t\t\t  (max_fp_regno - D7_VFP_REGNUM) / 2);\n+\t\t  /* Disable frame debug info in push because it needs to be\n+\t\t     disabled for vpop (see below).  */\n+\t\t  RTX_FRAME_RELATED_P (get_last_insn ()) = 0;\n+\t\t}\n \t    }\n \n \t  /* Clear caller-saved registers that leak before doing a non-secure\n@@ -18427,9 +18441,25 @@ cmse_nonsecure_call_inline_register_clear (void)\n \n \t  if (TARGET_HAVE_FPCXT_CMSE)\n \t    {\n-\t      rtx_insn *next, *pop_insn, *after = insn;\n+\t      rtx_insn *next, *last, *pop_insn, *after = insn;\n \n \t      start_sequence ();\n+\n+\t      /* Restore VFP callee-saved registers.  */\n+\t      if (TARGET_HARD_FLOAT_ABI)\n+\t\t{\n+\t\t  int nb_callee_saved_vfp_regs =\n+\t\t    (max_fp_regno - D7_VFP_REGNUM) / 2;\n+\t\t  arm_emit_vfp_multi_reg_pop (D7_VFP_REGNUM + 1,\n+\t\t\t\t\t      nb_callee_saved_vfp_regs,\n+\t\t\t\t\t      stack_pointer_rtx);\n+\t\t  /* Disable frame debug info in vpop because the SP adjustment\n+\t\t     is made using a CFA adjustment note while CFA used is\n+\t\t     sometimes R7.  This then causes an assert failure in the\n+\t\t     CFI note creation code.  */\n+\t\t  RTX_FRAME_RELATED_P (get_last_insn ()) = 0;\n+\t\t}\n+\n \t      arm_emit_multi_reg_pop (callee_saved_mask);\n \t      pop_insn = get_last_insn ();\n \n@@ -18446,13 +18476,15 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t\t not reliable.  */\n \t      RTX_FRAME_RELATED_P (pop_insn) = 0;\n \n+\t      seq = get_insns ();\n+\t      last = get_last_insn ();\n \t      end_sequence ();\n \n-\t      emit_insn_after (pop_insn, after);\n+\t      emit_insn_after (seq, after);\n \n \t      /* Skip pop we have just inserted after nonsecure call, we know\n \t\t it does not contain a nonsecure call.  */\n-\t      insn = pop_insn;\n+\t      insn = last;\n \t    }\n \t}\n     }"}, {"sha": "24ebfcb913c35e4c036ae8c9e44d3a8598ca145d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -1,6 +1,17 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Add check for\n+\tVPUSH and VPOP and update expectation for VSCCLRM.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: Likewise.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* gcc.target/arm/cmse/cmse-1.c: Add check for PUSH and POP and update\n \tCLRM check.\n \t* gcc.target/arm/cmse/cmse-14.c: Likewise."}, {"sha": "e759db24fac27be2de664ad4faced7bb5d3be84a", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,12 +9,14 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s1, VPR\\}\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "9df7b5de3ad64e719fc97d7a67a4893398e87b32", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,8 +9,10 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "b36ff73cb9b46d4d3a91f854c022787dc000d9c3", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,10 +9,12 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts1, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "72493f032355828bdf48b84dc98d8102becd1b36", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,14 +9,16 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td1, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s1, VPR\\}\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "112ed78d6f172be31d4a4f06840d32a90cdf3dd4", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,8 +9,10 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "f48e8a0a020cebed8c9fa124d352f047442979d6", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c?ref=1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "patch": "@@ -9,9 +9,11 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vpush.64\\t\\{d8, d9, d10, d11, d12, d13, d14, d15\\}\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s31, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"vldm\\tsp!, \\{d8-d15\\}\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}]}