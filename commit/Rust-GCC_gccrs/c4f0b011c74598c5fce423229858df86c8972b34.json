{"sha": "c4f0b011c74598c5fce423229858df86c8972b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmMGIwMTFjNzQ1OThjNWZjZTQyMzIyOTg1OGRmODZjODk3MmIzNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-04T23:03:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-04T23:03:07Z"}, "message": "ONEWS: New file with the current contents of NEWS up to EGCS 1.1.\n\ngcc:\n\t* ONEWS: New file with the current contents of NEWS up to EGCS\n\t1.1.\n\t* NEWS: Generate automatically from online release notes from EGCS\n\t1.0 to GCC 2.95.2, using ../contrib/gennews.\n\ncontrib:\n\t* gennews: New script.\n\nFrom-SVN: r38016", "tree": {"sha": "8b57bde7f25887eeb2be0f37f922c330cb722a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b57bde7f25887eeb2be0f37f922c330cb722a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4f0b011c74598c5fce423229858df86c8972b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f0b011c74598c5fce423229858df86c8972b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f0b011c74598c5fce423229858df86c8972b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f0b011c74598c5fce423229858df86c8972b34/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb8cffb5fcb925b398e478c4f6ddd00374c7e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb8cffb5fcb925b398e478c4f6ddd00374c7e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb8cffb5fcb925b398e478c4f6ddd00374c7e5f"}], "stats": {"total": 3656, "additions": 2581, "deletions": 1075}, "files": [{"sha": "690f6be0299cc03a622d683e50df62364fb438d0", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f0b011c74598c5fce423229858df86c8972b34/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f0b011c74598c5fce423229858df86c8972b34/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=c4f0b011c74598c5fce423229858df86c8972b34", "patch": "@@ -1,3 +1,7 @@\n+2000-12-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gennews: New script.\n+\n 2000-11-22  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* gcc_update: Update a comment as we now require bison for CVS users."}, {"sha": "2717850485114175cfc880c1285509aa28782a8b", "filename": "contrib/gennews", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f0b011c74598c5fce423229858df86c8972b34/contrib%2Fgennews", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f0b011c74598c5fce423229858df86c8972b34/contrib%2Fgennews", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgennews?ref=c4f0b011c74598c5fce423229858df86c8972b34", "patch": "@@ -0,0 +1,52 @@\n+#! /bin/sh\n+#\n+# Script to generate the NEWS file from online release notes.\n+# Contributed by Joseph Myers <jsm28@cam.ac.uk>.\n+#\n+# Copyright (C) 2000 Free Software Foundation, Inc.\n+# This file is part of GNU CC.\n+#\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+\n+website=http://gcc.gnu.org/\n+files=\"gcc-2.95/gcc-2.95.2.html gcc-2.95/gcc-2.95.1.html\n+    gcc-2.95/gcc-2.95.html gcc-2.95/features.html gcc-2.95/caveats.html\n+    egcs-1.1/egcs-1.1.2.html egcs-1.1/egcs-1.1.1.html egcs-1.1/egcs-1.1.html\n+    egcs-1.1/features.html egcs-1.1/caveats.html\n+    egcs-1.0/egcs-1.0.3.html egcs-1.0/egcs-1.0.2.html egcs-1.0/egcs-1.0.1.html\n+    egcs-1.0/egcs-1.0.html egcs-1.0/features.html egcs-1.0/caveats.html\"\n+\n+set -e\n+\n+cat <<EOF\n+This file contains information about GCC releases which has been\n+generated automatically from the online release notes.  This file\n+covers releases of GCC (and the former EGCS project) since EGCS 1.0,\n+on the line of development that led to GCC 3; for information on GCC\n+2.8.1 and older releases of GCC 2, see ONEWS.\n+\n+EOF\n+\n+header=\"======================================================================\"\n+\n+echo $header\n+\n+for file in $files; do\n+    wfile=$website$file\n+    echo $wfile\n+    lynx -dump $wfile\n+    echo $header\n+done"}, {"sha": "05034cfaf2d070d6dce3b592a1cfa3d08555a857", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4f0b011c74598c5fce423229858df86c8972b34", "patch": "@@ -1,3 +1,10 @@\n+2000-12-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ONEWS: New file with the current contents of NEWS up to EGCS\n+\t1.1.\n+\t* NEWS: Generate automatically from online release notes from EGCS\n+\t1.0 to GCC 2.95.2, using ../contrib/gennews.\n+\n 2000-12-04  Neil Booth  <neilb@earthling.net>\n \n         * tradcif.y: Move lexptr to top of file.  Add rule to handle"}, {"sha": "4a34a72e5a21fd2b3b48f8734583c9d70fdf6813", "filename": "gcc/NEWS", "status": "modified", "additions": 1448, "deletions": 1075, "changes": 2523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FNEWS?ref=c4f0b011c74598c5fce423229858df86c8972b34"}, {"sha": "daa7ddd27f1113dfcf7d4bca85938ab7e0206b69", "filename": "gcc/ONEWS", "status": "added", "additions": 1070, "deletions": 0, "changes": 1070, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FONEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f0b011c74598c5fce423229858df86c8972b34/gcc%2FONEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FONEWS?ref=c4f0b011c74598c5fce423229858df86c8972b34", "patch": "@@ -0,0 +1,1070 @@\n+This file contains information about GCC releases up to GCC 2.8.1, and\n+some information about EGCS releases.  For more details of changes in\n+EGCS releases, and details of changes in GCC 2.95 and more recent\n+releases, see the release notes on the GCC web site and the file NEWS\n+which contains the most relevant parts of those release notes in text\n+form.\n+\n+Noteworthy changes in GCC for EGCS 1.1.\n+---------------------------------------\n+\n+The compiler now implements global common subexpression elimination (gcse) as\n+well as global constant/copy propagation.  (link to gcse page).\n+\n+More major improvements have been made to the alias analysis code.  A new\n+option to allow front-ends to provide alias information to the optimizers\n+has also been added (-fstrict-aliasing).  -fstrict-aliasing is off by default\n+now, but will be enabled by default in the future. (link to alias page)\n+\n+Major changes continue in the exception handling support.  This release\n+includes some changes to reduce static overhead for exception handling.  It\n+also includes some major changes to the setjmp/longjmp based EH mechanism to\n+make it less pessimistic.  And finally, major infrastructure improvements\n+to the dwarf2 EH mechanism have been made to make our EH support extensible.\n+\n+We have fixed the infamous security problems with temporary files. \n+\n+The \"regmove\" optimization pass has been nearly completely rewritten.  It now\n+uses much more information about the target to determine profitability of\n+transformations.\n+\n+The compiler now recomputes register usage information immediately before\n+register allocation.  Previously such information was only not kept up to\n+date after instruction combination which led to poor register allocation\n+choices by our priority based register allocator.\n+\n+The register reloading phase of the compiler has been improved to better\n+optimize spill code.  This primarily helps targets which generate lots of\n+spills (like the x86 ports and many register poor embedded ports).\n+\n+A few changes in the heuristics used by the register allocator and scheduler\n+have been made which can significantly improve performance for certain\n+applications.\n+\n+The compiler's branch shortening algorithms have been significantly improved\n+to work better on targets which align jump targets.\n+\n+The compiler now supports the \"ADDRESSOF\" optimization which can significantly\n+reduce the overhead for certain inline calls (and inline calls in general).\n+\n+The compiler now supports a code size optimization switch (-Os).  When enabled\n+the compiler will prefer optimizations which improve code size over those\n+which improve code speed.\n+\n+The compiler has been improved to completely eliminate library calls which\n+compute constant values.  This is particularly useful on machines which\n+do not have integer mul/div or floating point support on-chip.\n+\n+GCC now supports a \"--help\" option to print detailed help information.\n+\n+cpplib has been greatly improved.  It is probably useable for some sites now\n+(major missing feature is trigraphs).\n+\n+Memory footprint for the compiler has been significantly reduced for certain\n+pathalogical cases.\n+\n+Build time improvements for targets which support lots of sched parameters\n+(alpha and mips primarily).\n+\n+Compile time for certain programs using large constant initializers has been\n+improved (affects glibc significantly).\n+\n+Plus an incredible number of infrastructure changes, warning fixes, bugfixes\n+and local optimizations.\n+\n+Various improvements have been made to better support cross compilations.  They\n+are still not easy, but they are improving.\n+\n+Target specific NEWS\n+\n+    Sparc: Now includes V8 plus and V9 support, lots of tuning for Ultrasparcs\n+           and uses the Haifa scheduler by default.\n+\n+    Alpha: EV6 tuned, optimized expansion of memcpy/bzero.\n+\n+    x86: Data in the static store is aligned per Intel recommendations.  Jump\n+         targets are aligned per Intel recommendations.  Improved epilogue\n+         sequences for Pentium chips.  Backend improvements which should help\n+         register allocation on all x86 variants.  Support for PPro conditional\n+         move instructions has been fixed and enabled.  Random changes\n+\t throughout the port to make generated code more Pentium friendly.\n+         Improved support for 64bit integer operations.\n+         Unixware 7, a System V Release 5 target is now supported.\n+         SCO OpenServer targets can support GAS.  See gcc/INSTALL for details.\n+\n+    RS6000/PowerPC: Includes AIX4.3 support as well as PowerPC64 support.  \n+                    Haifa instruction scheduling is enabled by default now.\n+\n+    MIPS: Multiply/Multiply-Add support has been largely rewritten to generate\n+          more efficient code.  Includes mips16 support.\n+\n+    M68K: Various micro-optimizations and Coldfire fixes.\n+\n+    M32r: Major improvements to this port.\n+\n+    Arm: Includes Thumb and super interworking support.\n+\n+EGCS includes all gcc2 changes up to and including the June 9, 1998 snapshot.\n+\n+\n+Noteworthy changes in GCC version 2.8.1\n+---------------------------------------\n+\n+Numerous bugs have been fixed and some minor performance\n+improvements (compilation speed) have been made.\n+\n+Noteworthy changes in GCC version 2.8.0\n+---------------------------------------\n+\n+A major change in this release is the addition of a framework for\n+exception handling, currently used by C++.  Many internal changes and\n+optimization improvements have been made.  These increase the\n+maintainability and portability of GCC.  GCC now uses autoconf to\n+compute many host parameters.\n+\n+The following lists changes that add new features or targets.\n+\n+See cp/NEWS for new features of C++ in this release.\n+\n+New tools and features:\n+\n+    The Dwarf 2 debugging information format is supported on ELF systems, and\n+    is the default for -ggdb where available.  It can also be used for C++.\n+    The Dwarf version 1 debugging format is also permitted for C++, but\n+    does not work well.\n+\n+    gcov.c is provided for test coverage analysis and branch profiling\n+    analysis is also supported; see -fprofile-arcs, -ftest-coverage,\n+    and -fbranch-probabilities.\n+\n+    Support for the Checker memory checking tool.\n+\n+    New switch, -fstack-check, to check for stack overflow on systems that\n+    don't have such built into their ABI.\n+\n+    New switches, -Wundef and -Wno-undef to warn if an undefined identifier\n+    is evaluated in an #if directive.\n+\n+    Options -Wall and -Wimplicit now cause GCC to warn about implicit int\n+    in declarations (e.g. `register i;'), since the C Standard committee\n+    has decided to disallow this in the next revision of the standard;\n+    -Wimplicit-function-declarations and -Wimplicit-int are subsets of\n+    this.\n+\n+    Option -Wsign-compare causes GCC to warn about comparison of signed and\n+    unsigned values.\n+\n+    Add -dI option of cccp for cxref.\n+\n+New features in configuration, installation and specs file handling:\n+\n+    New option --enable-c-cpplib to configure script.\n+\n+    You can use --with-cpu on the configure command to specify the default\n+    CPU that GCC should generate code for.\n+\n+    The -specs=file switch allows you to override default specs used in\n+    invoking programs like cc1, as, etc.\n+\n+    Allow including one specs file from another and renaming a specs\n+    variable.\n+\n+    You can now relocate all GCC files with a single environment variable\n+    or a registry entry under Windows 95 and Windows NT.\n+\n+Changes in Objective-C:\n+\n+    The Objective-C Runtime Library has been made thread-safe.\n+\n+    The Objective-C Runtime Library contains an interface for creating\n+    mutexes, condition mutexes, and threads; it requires a back-end\n+    implementation for the specific platform and/or thread package.\n+    Currently supported are DEC/OSF1, IRIX, Mach, OS/2, POSIX, PCThreads,\n+    Solaris, and Windows32.  The --enable-threads parameter can be used\n+    when configuring GCC to enable and select a thread back-end.\n+\n+    Objective-C is now configured as separate front-end language to GCC,\n+    making it more convenient to conditionally build it.\n+\n+    The internal structures of the Objective-C Runtime Library have\n+    changed sufficiently to warrant a new version number; now version 8.\n+    Programs compiled with an older version must be recompiled.\n+\n+    The Objective-C Runtime Library can be built as a DLL on Windows 95\n+    and Windows NT systems.\n+    \n+    The Objective-C Runtime Library implements +load.\n+\n+The following new targets are supported (see also list under each\n+individual CPU below):\n+\n+    Embedded target m32r-elf.\n+    Embedded Hitachi Super-H using ELF.\n+    RTEMS real-time system on various CPU targets.\n+    ARC processor.\n+    NEC V850 processor.\n+    Matsushita MN10200 processor.\n+    Matsushita MN10300 processor.\n+    Sparc and PowerPC running on VxWorks.\n+    Support both glibc versions 1 and 2 on Linux-based GNU systems.\n+\n+New features for DEC Alpha systems:\n+\n+    Allow detailed specification of IEEE fp support:\n+      -mieee, -mieee-with-inexact, and -mieee-conformant\n+      -mfp-trap-mode=xxx, -mfp-round-mode=xxx, -mtrap-precision=xxx\n+    -mcpu=xxx for CPU selection\n+    Support scheduling parameters for EV5.\n+    Add support for BWX, CIX, and MAX instruction set extensions.\n+    Support Linux-based GNU systems.\n+    Support VMS.\n+\n+Additional supported processors and systems for MIPS targets:\n+\n+    MIPS4 instruction set.\n+    R4100, R4300 and R5000 processors.\n+    N32 and N64 ABI.\n+    IRIX 6.2.\n+    SNI SINIX.\n+    \n+New features for Intel x86 family:\n+\n+    Add scheduling parameters for Pentium and Pentium Pro.\n+    Support stabs on Solaris-x86.\n+    Intel x86 processors running the SCO OpenServer 5 family.\n+    Intel x86 processors running DG/UX.\n+    Intel x86 using Cygwin32 or Mingw32 on Windows 95 and Windows NT.\n+\n+New features for Motorola 68k family:\n+\n+    Support for 68060 processor.\n+    More consistent switches to specify processor.\n+    Motorola 68k family running AUX.\n+    68040 running pSOS, ELF object files, DBX debugging.\n+    Coldfire variant of Motorola m68k family.\n+\n+New features for the HP PA RISC:\n+\n+    -mspace and -mno-space\n+    -mlong-load-store and -mno-long-load-store\n+    -mbig-switch -mno-big-switch\n+\n+    GCC on the PA requires either gas-2.7 or the HP assembler; for best\n+    results using GAS is highly recommended.  GAS is required for -g and\n+    exception handling support.\n+\n+New features for SPARC-based systems:\n+\n+    The ultrasparc cpu.\n+    The sparclet cpu, supporting only a.out file format.\n+    Sparc running SunOS 4 with the GNU assembler.\n+    Sparc running the Linux-based GNU system.\n+    Embedded Sparc processors running the ELF object file format.\n+    -mcpu=xxx\n+    -mtune=xxx\n+    -malign-loops=xxx\n+    -malign-jumps=xxx\n+    -malign-functions=xxx\n+    -mimpure-text and -mno-impure-text\n+\n+    Options -mno-v8 and -mno-sparclite are no longer supported on SPARC\n+    targets.  Options -mcypress, -mv8, -msupersparc, -msparclite, -mf930,\n+    and -mf934 are deprecated and will be deleted in GCC 2.9.  Use\n+    -mcpu=xxx instead.\n+\n+New features for rs6000 and PowerPC systems:\n+\n+    Solaris 2.51 running on PowerPC's.\n+    The Linux-based GNU system running on PowerPC's.\n+    -mcpu=604e,602,603e,620,801,823,mpc505,821,860,power2\n+    -mtune=xxx\n+    -mrelocatable-lib, -mno-relocatable-lib\n+    -msim, -mmve, -memb\n+    -mupdate, -mno-update\n+    -mfused-madd, -mno-fused-madd\n+\n+    -mregnames\n+    -meabi\n+    -mcall-linux, -mcall-solaris, -mcall-sysv-eabi, -mcall-sysv-noeabi\n+    -msdata, -msdata=none, -msdata=default, -msdata=sysv, -msdata=eabi\n+    -memb, -msim, -mmvme\n+    -myellowknife, -mads\n+    wchar_t is now of type long as per the ABI, not unsigned short.\n+    -p/-pg support\n+    -mcpu=403 now implies -mstrict-align.\n+    Implement System V profiling.\n+\n+    Aix 4.1 GCC targets now default to -mcpu=common so that programs\n+    compiled can be moved between rs6000 and powerpc based systems.  A\n+    consequence of this is that -static won't work, and that some programs\n+    may be slightly slower.\n+\n+    You can select the default value to use for -mcpu=xxx on rs6000 and\n+    powerpc targets by using the --with-cpu=xxx option when configuring the\n+    compiler.  In addition, a new options, -mtune=xxx was added that\n+    selects the machine to schedule for but does not select the\n+    architecture level.\n+\n+    Directory names used for storing the multilib libraries on System V\n+    and embedded PowerPC systems have been shortened to work with commands\n+    like tar that have fixed limits on pathname size.\n+\n+New features for the Hitachi H8/300(H):\n+\n+    -malign-300\n+    -ms (for the Hitachi H8/S processor)\n+    -mint32\n+\n+New features for the ARM:\n+\n+    -march=xxx, -mtune=xxx, -mcpu=xxx\n+    Support interworking with Thumb code.\n+    ARM processor with a.out object format, COFF, or AOF assembler.\n+    ARM on \"semi-hosted\" platform.\n+    ARM running NetBSD.\n+    ARM running the Linux-based GNU system.\n+\n+New feature for Solaris systems:\n+\n+    GCC installation no longer makes a copy of system include files,\n+    thus insulating GCC better from updates to the operating system.\n+\n+\f\n+Noteworthy changes in GCC version 2.7.2\n+---------------------------------------\n+\n+A few bugs have been fixed (most notably the generation of an\n+invalid assembler opcode on some RS/6000 systems).\n+\n+Noteworthy changes in GCC version 2.7.1\n+---------------------------------------\n+\n+This release fixes numerous bugs (mostly minor) in GCC 2.7.0, but\n+also contains a few new features, mostly related to specific targets.\n+\n+Major changes have been made in code to support Windows NT.\n+\n+The following new targets are supported:\n+\n+\t2.9 BSD on PDP-11\n+\tLinux on m68k\n+\tHP/UX version 10 on HP PA RISC (treated like version 9)\n+\tDEC Alpha running Windows NT\n+\n+When parsing C, GCC now recognizes C++ style `//' comments unless you\n+specify `-ansi' or `-traditional'.\n+\n+The PowerPC System V targets (powerpc-*-sysv, powerpc-*-eabi) now use the\n+calling sequence specified in the System V Application Binary Interface\n+Processor Supplement (PowerPC Processor ABI Supplement) rather than the calling\n+sequence used in GCC version 2.7.0.  That calling sequence was based on the AIX\n+calling sequence without function descriptors.  To compile code for that older\n+calling sequence, either configure the compiler for powerpc-*-eabiaix or use\n+the -mcall-aix switch when compiling and linking.\n+\f\n+Noteworthy changes in GCC version 2.7.0\n+---------------------------------------\n+\n+GCC now works better on systems that use \".obj\" and \".exe\" instead of\n+\".o\" and no extension.  This involved changes to the driver program,\n+gcc.c, to convert \".o\" names to \".obj\" and to GCC's Makefile to use\n+\".obj\" and \".exe\" in filenames that are not targets.  In order to\n+build GCC on such systems, you may need versions of GNU make and/or\n+compatible shells.  At this point, this support is preliminary.\n+\n+Object file extensions of \".obj\" and executable file extensions of\n+\".exe\" are allowed when using appropriate version of GNU Make.\n+\n+Numerous enhancements were made to the __attribute__ facility including\n+more attributes and more places that support it.  We now support the\n+\"packed\", \"nocommon\", \"noreturn\", \"volatile\", \"const\", \"unused\",\n+\"transparent_union\", \"constructor\", \"destructor\", \"mode\", \"section\",\n+\"align\", \"format\", \"weak\", and \"alias\" attributes.  Each of these\n+names may also be specified with added underscores, e.g., \"__packed__\".\n+__attribute__ may now be applied to parameter definitions, function\n+definitions, and structure, enum, and union definitions.\n+\n+GCC now supports returning more structures in registers, as specified by\n+many calling sequences (ABIs), such as on the HP PA RISC.\n+\n+A new option '-fpack-struct' was added to automatically pack all structure\n+members together without holes.\n+\n+There is a new library (cpplib) and program (cppmain) that at some\n+point will replace cpp (aka cccp).  To use cppmain as cpp now, pass\n+the option CCCP=cppmain to make.  The library is already used by the\n+fix-header program, which should speed up the fixproto script.\n+\n+New options for supported targets:\n+\n+    GNU on many targets.\n+    NetBSD on MIPS, m68k, VAX, and x86.\n+    LynxOS on x86, m68k, Sparc, and RS/6000.\n+    VxWorks on many targets.\n+\n+    Windows/NT on x86 architecture.  Initial support for Windows/NT on Alpha\n+    (not fully working).\n+\n+    Many embedded targets, specifically UDI on a29k, aout, coff, elf,\n+    and vsta \"operating systems\" on m68k, m88k, mips, sparc, and x86.\n+\n+Additional support for x86 (i386, i486, and Pentium):\n+\n+    Work with old and new linkers for Linux-based GNU systems,\n+\tsupporting both a.out and ELF.\n+    FreeBSD on x86.\n+    Stdcall convention.\n+    -malign-double, -mregparm=, -malign-loops= and -malign-jumps=  switches.\n+    On ISC systems, support -Xp like -posix.\n+\n+Additions for RS/6000:\n+\n+    Instruction scheduling information for PowerPC 403.\n+    AIX 4.1 on PowerPC.\n+    -mstring and -mno-string.\n+    -msoft-float and floating-point emulation included.\n+    Preliminary support for PowerPC System V.4 with or without the GNU as.\n+    Preliminary support for EABI.\n+    Preliminary support for 64-bit systems.\n+    Both big and little endian systems.\n+\n+New features for MIPS-based systems:\n+\n+    r4650.\n+    mips4 and R8000.\n+    Irix 6.0.\n+    64-bit ABI.\n+    Allow dollar signs in labels on SGI/Irix 5.x.\n+\n+New support for HP PA RISC:\n+\n+    Generation of PIC (requires binutils-2.5.2.u6 or later).\n+    HP-UX version 9 on HP PA RISC (dynamically links even with -g).\n+    Processor variants for HP PA RISC: 700, 7100, and 7100LC.\n+    Automatic generation of long calls when needed.\n+    -mfast-indirect-calls for kernels and static binaries.\n+\n+    The called routine now copies arguments passed by invisible reference,\n+    as required by the calling standard.\n+\n+Other new miscellaneous target-specific support:\n+\n+    -mno-multm on a29k.\n+    -mold-align for i960.\n+    Configuration for \"semi-hosted\" ARM.\n+    -momit-leaf-frame-pointer for M88k.\n+    SH3 variant of Hitachi Super-H and support both big and little endian.\n+\n+Changes to Objective-C:\n+\n+    Bare-bones implementation of NXConstantString has been added,\n+    which is invoked by the @\"string\" directive.\n+\n+    Class * has been changed to Class to conform to the NextSTEP and\n+    OpenStep runtime.\n+\n+    Enhancements to make dynamic loading easier.\n+\n+    The module version number has been updated to Version 7, thus existing\n+    code will need to be recompiled to use the current run-time library.\n+\n+GCC now supports the ISO Normative Addendum 1 to the C Standard.\n+As a result:\n+\n+    The header <iso646.h> defines macros for C programs written\n+    in national variants of ISO 646.\n+\n+    The following digraph tokens are supported:\n+\t<:\t:>\t<%\t%>\t%:\t%:%:\n+    These behave like the following, respectively:\n+\t[\t]\t{\t}\t#\t##\n+\n+    Digraph tokens are supported unless you specify the `-traditional'\n+    option; you do not need to specify `-ansi' or `-trigraphs'.  Except\n+    for contrived and unlikely examples involving preprocessor\n+    stringizing, digraph interpretation doesn't change the meaning of\n+    programs; this is unlike trigraph interpretation, which changes the\n+    meanings of relatively common strings.\n+\n+    The macro __STDC_VERSION__ has the value 199409L.\n+\n+  As usual, for full conformance to the standard, you also need a\n+  C library that conforms.\n+\n+The following lists changes that have been made to g++.  If some\n+features mentioned below sound unfamiliar, you will probably want to\n+look at the recently-released public review copy of the C++ Working\n+Paper.  For PostScript and PDF (Adobe Acrobat) versions, see the\n+archive at ftp://research.att.com/dist/stdc++/WP.  For HTML and ASCII\n+versions, see ftp://ftp.cygnus.com/pub/g++.  On the web, see\n+http://www.cygnus.com/~mrs/wp-draft.\n+\n+The scope of variables declared in the for-init-statement has been changed\n+to conform to http://www.cygnus.com/~mrs/wp-draft/stmt.html#stmt.for; as a\n+result, packages such as groff 1.09 will not compile unless you specify the\n+-fno-for-scope flag.  PLEASE DO NOT REPORT THIS AS A BUG; this is a change\n+mandated by the C++ standardization committee.\n+\n+Binary incompatibilities:\n+\n+    The builtin 'bool' type is now the size of a machine word on RISC targets,\n+    for code efficiency; it remains one byte long on CISC targets.\n+\n+    Code that does not use #pragma interface/implementation will most\n+    likely shrink dramatically, as g++ now only emits the vtable for a\n+    class in the translation unit where its first non-inline, non-abstract\n+    virtual function is defined.\n+\n+    Classes that do not define the copy constructor will sometimes be\n+    passed and returned in registers.  This may illuminate latent bugs in\n+    your code.\n+\n+Support for automatic template instantiation has *NOT* been added, due\n+to a disagreement over design philosophies.\n+\n+Support for exception handling has been improved; more targets are now\n+supported, and throws will use the RTTI mechanism to match against the\n+catch parameter type.  Optimization is NOT SUPPORTED with\n+-fhandle-exceptions; no need to report this as a bug.\n+\n+Support for Run-Time Type Identification has been added with -frtti.\n+This support is still in alpha; one major restriction is that any file\n+compiled with -frtti must include <typeinfo.h>.\n+\n+Preliminary support for namespaces has been added.  This support is far\n+from complete, and probably not useful.\n+\n+Synthesis of compiler-generated constructors, destructors and\n+assignment operators is now deferred until the functions are used.\n+\n+The parsing of expressions such as `a ? b : c = 1' has changed from\n+`(a ? b : c) = 1' to `a : b ? (c = 1)'.\n+\n+The code generated for testing conditions, especially those using ||\n+and &&, is now more efficient.\n+\n+The operator keywords and, and_eq, bitand, bitor, compl, not, not_eq,\n+or, or_eq, xor and xor_eq are now supported.  Use -ansi or\n+-foperator-names to enable them.\n+\n+The 'explicit' keyword is now supported.  'explicit' is used to mark\n+constructors and type conversion operators that should not be used\n+implicitly.\n+\n+g++ now accepts the typename keyword, though it currently has no\n+semantics; it can be a no-op in the current template implementation.\n+You may want to start using it in your code, however, since the\n+pending rewrite of the template implementation to compile STL properly\n+(perhaps for 2.8.0, perhaps not) will require you to use it as\n+indicated by the current draft.\n+\n+Handling of user-defined type conversion has been overhauled so that\n+type conversion operators are now found and used properly in\n+expressions and function calls.\n+\n+-fno-strict-prototype now only applies to function declarations with\n+\"C\" linkage.\n+\n+g++ now warns about 'if (x=0)' with -Wparentheses or -Wall.\n+\n+#pragma weak and #pragma pack are supported on System V R4 targets, as\n+are various other target-specific #pragmas supported by gcc.\n+\n+new and delete of const types is now allowed (with no additional\n+semantics).\n+\n+Explicit instantiation of template methods is now supported.  Also,\n+'inline template class foo<int>;' can be used to emit only the vtable\n+for a template class.\n+\n+With -fcheck-new, g++ will check the return value of all calls to\n+operator new, and not attempt to modify a returned null pointer.\n+\n+The template instantiation code now handles more conversions when\n+passing to a parameter that does not depend on template arguments.\n+This means that code like 'string s; cout << s;' now works.\n+\n+Invalid jumps in a switch statement past declarations that require\n+initializations are now caught.\n+\n+Functions declared 'extern inline' now have the same linkage semantics\n+as inline member functions.  On supported targets, where previously\n+these functions (and vtables, and template instantiations) would have\n+been defined statically, they will now be defined as weak symbols so\n+that only one out-of-line definition is used.\n+\n+collect2 now demangles linker output, and c++filt has become part of\n+the gcc distribution.\n+\f\n+Noteworthy changes in GCC version 2.6.3:\n+\n+A few more bugs have been fixed.\n+\n+Noteworthy changes in GCC version 2.6.2:\n+\n+A few bugs have been fixed.\n+\n+Names of attributes can now be preceded and followed by double underscores.\n+\n+Noteworthy changes in GCC version 2.6.1:\n+\n+Numerous (mostly minor) bugs have been fixed.\n+\n+The following new configurations are supported:\n+\n+\tGNU on x86 (instead of treating it like MACH)\n+\tNetBSD on Sparc and Motorola 68k\n+\tAIX 4.1 on RS/6000 and PowerPC systems\n+\tSequent DYNIX/ptx 1.x and 2.x.\n+\tBoth COFF and ELF configurations on AViiON without using /bin/gcc\n+\tWindows/NT on x86 architecture; preliminary\n+\tAT&T DSP1610 digital signal processor chips\n+\ti960 systems on bare boards using COFF\n+\tPDP11; target only and not extensively tested\n+\n+The -pg option is now supported for Alpha under OSF/1 V3.0 or later.\n+\n+Files with an extension of \".c++\" are treated as C++ code.\n+\n+The -Xlinker and -Wl arguments are now passed to the linker in the\n+position they were specified on the command line.  This makes it\n+possible, for example, to pass flags to the linker about specific\n+object files.\n+\n+The use of positional arguments to the configure script is no longer\n+recommended.  Use --target= to specify the target; see the GCC manual.\n+\n+The 386 now supports two new switches: -mreg-alloc=<string> changes\n+the default register allocation order used by the compiler, and\n+-mno-wide-multiply disables the use of the mul/imul instructions that\n+produce 64 bit results in EAX:EDX from 32 bit operands to do long long\n+multiplies and 32-bit division by constants.\n+\f\n+Noteworthy changes in GCC version 2.6.0:\n+\n+Numerous bugs have been fixed, in the C and C++ front-ends, as\n+well as in the common compiler code.\n+\n+This release includes the C, Objective-C, and C++ compilers.  However,\n+we have moved the files for the C++ compiler (G++) files to a\n+subdirectory, cp.  Subsequent releases of GCC will split these files\n+to a separate TAR file.\n+\n+The G++ team has been tracking the development of the ANSI standard for C++.\n+Here are some new features added from the latest working paper:\n+\n+\t* built-in boolean type 'bool', with constants 'true' and 'false'.\n+\t* array new and delete (operator new [] and delete []).\n+\t* WP-conforming lifetime of temporaries.\n+\t* explicit instantiation of templates (template class A<int>;),\n+          along with an option (-fno-implicit-templates) to disable emission\n+          of implicitly instantiated templates, obsoletes -fexternal-templates.\n+\t* static member constants (static const int foo = 4; within the\n+          class declaration).\n+\n+Many error messages have been improved to tell the user more about the\n+problem.  Conformance checking with -pedantic-errors has been\n+improved.  G++ now compiles Fresco.\n+\n+There is now an experimental implementation of virtual functions using\n+thunks instead of Cfront-style vtables, enabled with -fvtable-thunks.\n+This option also enables a heuristic which causes the compiler to only\n+emit the vtable in the translation unit where its first non-inline\n+virtual function is defined; using this option and\n+-fno-implicit-templates, users should be able to avoid #pragma\n+interface/implementation altogether.\n+\n+Signatures have been added as a GNU C++ extension.  Using the option\n+-fhandle-signatures, users are able to turn on recognition of\n+signatures.  A short introduction on signatures is in the section\n+`Extension to the C++ Language' in the manual.\n+\n+The `g++' program is now a C program, rather than a shell script.\n+\n+Lots and lots and lots of bugs fixes, in nested types, access control,\n+pointers to member functions, the parser, templates, overload\n+resolution, etc, etc.\n+\n+There have been two major enhancements to the Objective-C compiler:\n+\n+1) Added portability.  It now runs on Alpha, and some problems with\n+   message forwarding have been addressed on other platforms.\n+\n+2) Selectors have been redefined to be pointers to structs like:\n+   { void *sel_id, char *sel_types }, where the sel_id is the unique\n+   identifier, the selector itself is no longer unique.  \n+\n+   Programmers should use the new function sel_eq to test selector\n+   equivalence.\n+\n+The following major changes have been made to the base compiler and\n+machine-specific files.\n+\n+- The MIL-STD-1750A is a new port, but still preliminary.\n+\n+- The h8/300h is now supported; both the h8/300 and h8/300h ports come\n+  with 32 bit IEEE 754 software floating point support.\n+\n+- The 64-bit Sparc (v9) and 64-bit MIPS chips are supported.\n+\n+- NetBSD is supported on m68k, Intel x86, and pc523 systems and FreeBSD\n+  on x86.\n+\n+- COFF is supported on x86, m68k, and Sparc systems running LynxOS.\n+\n+- 68K systems from Bull and Concurrent are supported and System V\n+  Release 4 is supported on the Atari.\n+\n+- GCC supports GAS on the Motorola 3300 (sysV68) and debugging\n+  (assuming GAS) on the Plexus 68K system.  (However, GAS does not yet\n+  work on those systems).\n+\n+- System V Release 4 is supported on MIPS (Tandem).\n+\n+- For DG/UX, an ELF configuration is now supported, and both the ELF\n+  and BCS configurations support ELF and COFF object file formats.\n+\n+- OSF/1 V2.0 is supported on Alpha.\n+\n+- Function profiling is also supported on Alpha.\n+\n+- GAS and GDB is supported for Irix 5 (MIPS).\n+\n+- \"common mode\" (code that will run on both POWER and PowerPC\n+  architectures) is now supported for the RS/6000 family; the\n+  compiler knows about more PPC chips.\n+\n+- Both NeXTStep 2.1 and 3 are supported on 68k-based architectures.\n+\n+- On the AMD 29k, the -msoft-float is now supported, as well as\n+  -mno-sum-in-toc for RS/6000, -mapp-regs and -mflat for Sparc, and\n+  -membedded-pic for MIPS.\n+\n+- GCC can now convert division by integer constants into the equivalent\n+  multiplication and shift operations when that is faster than the\n+  division.\n+\t\n+- Two new warning options, -Wbad-function-cast and\n+  -Wmissing-declarations have been added.\n+\n+- Configurations may now add machine-specific __attribute__ options on\n+  type; many machines support the `section' attribute.\n+\n+- The -ffast-math flag permits some optimization that violate strict\n+  IEEE rules, such as converting X * 0.0 to 0.0.\n+\f\n+Noteworthy changes in GCC version 2.5.8:\n+\n+This release only fixes a few serious bugs.  These include fixes for a\n+bug that prevented most programs from working on the RS/6000, a bug\n+that caused invalid assembler code for programs with a `switch'\n+statement on the NS32K, a G++ problem that caused undefined names in\n+some configurations, and several less serious problems, some of which\n+can affect most configuration.\n+\n+Noteworthy change in GCC version 2.5.7:\n+\n+This release only fixes a few bugs, one of which was causing bootstrap\n+compare errors on some systems.\n+\n+Noteworthy change in GCC version 2.5.6:\n+\n+A few backend bugs have been fixed, some of which only occur on one\n+machine.\n+\n+The C++ compiler in 2.5.6 includes:\n+\n+ * fixes for some common crashes\n+ * correct handling of nested types that are referenced as `foo::bar'\n+ * spurious warnings about friends being declared static and never\n+   defined should no longer appear\n+ * enums that are local to a method in a class, or a class that's\n+   local to a function, are now handled correctly.  For example:\n+       class foo { void bar () { enum { x, y } E; x; } };\n+       void bar () { class foo { enum { x, y } E; E baz; }; }\n+\n+Noteworthy change in GCC version 2.5.5:\n+\n+A large number of C++ bugs have been fixed.\n+\n+The fixproto script adds prototypes conditionally on __cplusplus.\n+\n+Noteworthy change in GCC version 2.5.4:\n+\n+A bug fix in passing of structure arguments for the HP-PA architecture\n+makes code compiled with GCC 2.5.4 incompatible with code compiled\n+with earlier versions (if it passes struct arguments of 33 to 64 bits,\n+interspersed with other types of arguments).\n+\n+Noteworthy change in gcc version 2.5.3:\n+\n+The method of \"mangling\" C++ function names has been changed.  So you\n+must recompile all C++ programs completely when you start using GCC\n+2.5.  Also, GCC 2.5 requires libg++ version 2.5.  Earlier libg++\n+versions won't work with GCC 2.5.  (This is generally true--GCC\n+version M.N requires libg++ version M.N.)\n+\f\n+Noteworthy GCC changes in version 2.5:\n+\n+* There is now support for the IBM 370 architecture as a target.\n+Currently the only operating system supported is MVS; GCC does not run\n+on MVS, so you must produce .s files using GCC as a cross compiler,\n+then transfer them to MVS to assemble them.  This port is not reliable\n+yet.\n+\n+* The Power PC is now supported.\n+\n+* The i860-based Paragon machine is now supported.\n+\n+* The Hitachi 3050 (an HP-PA machine) is now supported.\n+\n+* The variable __GNUC_MINOR__ holds the minor version number of GCC, as\n+an integer.  For version 2.5.X, the value is 5.\n+\n+* In C, initializers for static and global variables are now processed\n+an element at a time, so that they don't need a lot of storage.\n+\n+* The C syntax for specifying which structure field comes next in an\n+initializer is now `.FIELDNAME='.  The corresponding syntax for\n+array initializers is now `[INDEX]='.  For example,\n+\n+  char whitespace[256]\n+    = { [' '] = 1, ['\\t'] = 1, ['\\n'] = 1 };\n+\n+This was changed to accord with the syntax proposed by the Numerical\n+C Extensions Group (NCEG).\n+\n+* Complex numbers are now supported in C.  Use the keyword __complex__\n+to declare complex data types.  See the manual for details.\n+\n+* GCC now supports `long double' meaningfully on the Sparc (128-bit\n+floating point) and on the 386 (96-bit floating point).  The Sparc\n+support is enabled on Solaris 2.x because earlier system versions\n+(SunOS 4) have bugs in the emulation.\n+\n+* All targets now have assertions for cpu, machine and system.  So you\n+can now use assertions to distinguish among all supported targets.\n+\n+* Nested functions in C may now be inline.  Just declare them inline\n+in the usual way.\n+\n+* Packed structure members are now supported fully; it should be possible \n+to access them on any supported target, no matter how little alignment\n+they have.\n+\n+* To declare that a function does not return, you must now write\n+something like this (works only in 2.5):\n+\n+    void fatal () __attribute__ ((noreturn));\n+\n+or like this (works in older versions too):\n+\n+    typedef void voidfn ();\n+\n+    volatile voidfn fatal;\n+\n+It used to be possible to do so by writing this:\n+\n+    volatile void fatal ();\n+\n+but it turns out that ANSI C requires that to mean something\n+else (which is useless).\n+\n+Likewise, to declare that a function is side-effect-free\n+so that calls may be deleted or combined, write\n+something like this (works only in 2.5):\n+\n+    int computation () __attribute__ ((const));\n+\n+or like this (works in older versions too):\n+\n+    typedef int intfn ();\n+\n+    const intfn computation;\n+\n+* The new option -iwithprefixbefore specifies a directory to add to \n+the search path for include files in the same position where -I would\n+put it, but uses the specified prefix just like -iwithprefix.\n+\n+* Basic block profiling has been enhanced to record the function the\n+basic block comes from, and if the module was compiled for debugging,\n+the line number and filename.  A default version of the basic block\n+support module has been added to libgcc2 that appends the basic block\n+information to a text file 'bb.out'.  Machine descriptions can now\n+override the basic block support module in the target macro file.\n+\n+New features in g++:\n+\n+* The new flag `-fansi-overloading' for C++.  Use a newly implemented\n+scheme of argument matching for C++.  It makes g++ more accurately\n+obey the rules set down in Chapter 13 of the Annotated C++ Reference\n+Manual (the ARM).  This option will be turned on by default in a\n+future release.\n+\n+* The -finline-debug flag is now gone (it was never really used by the\n+  compiler).\n+\n+* Recognizing the syntax for pointers to members, e.g., \"foo::*bar\", has been\n+  dramatically improved.  You should not get any syntax errors or incorrect\n+  runtime results while using pointers to members correctly; if you do, it's\n+  a definite bug.\n+\n+* Forward declaration of an enum is now flagged as an error.\n+\n+* Class-local typedefs are now working properly.\n+\n+* Nested class support has been significantly improved.  The compiler\n+  will now (in theory) support up to 240 nested classes before hitting\n+  other system limits (like memory size).\n+\n+* There is a new C version of the `g++' driver, to replace the old\n+  shell script.  This should significantly improve the performance of\n+  executing g++ on a system where a user's PATH environment variable\n+  references many NFS-mounted filesystems.  This driver also works\n+  under MS-DOS and OS/2.\n+\n+* The ANSI committee working on the C++ standard has adopted a new\n+  keyword `mutable'.  This will allow you to make a specific member be\n+  modifiable in an otherwise const class.\n+\f\n+Noteworthy GCC changes in version 2.4.4:\n+\n+  A crash building g++ on various hosts (including m68k) has been\n+  fixed.  Also the g++ compiler no longer reports incorrect\n+  ambiguities in some situations where they do not exist, and\n+  const template member functions are now being found properly.\n+\n+Noteworthy GCC changes in version 2.4:\n+\n+* On each target, the default is now to return short structures\n+compatibly with the \"usual\" compiler on that target.\n+\n+For most targets, this means the default is to return all structures\n+in memory, like long structures, in whatever way is used on that\n+target.  Use -freg-struct-return to enable returning short structures\n+(and unions) in registers.\n+\n+This change means that newly compiled binaries are incompatible with\n+binaries compiled with previous versions of GCC.\n+\n+On some targets, GCC is itself the usual compiler.  On these targets,\n+the default way to return short structures is still in registers.\n+Use -fpcc-struct-return to tell GCC to return them in memory.\n+\n+* There is now a floating point emulator which can imitate the way all\n+supported target machines do floating point arithmetic.\n+\n+This makes it possible to have cross compilation to and from the VAX,\n+and between machines of different endianness.  However, this works\n+only when the target machine description is updated to use the new\n+facilities, and not all have been updated.\n+\n+This also makes possible support for longer floating point types.\n+GCC 2.4 supports extended format on the 68K if you use `long double',\n+for targets that have a 68881.  (When we have run time library\n+routines for extended floating point, then `long double' will use\n+extended format on all 68K targets.)\n+\n+We expect to support extended floating point on the i386 and Sparc in\n+future versions.\n+\n+* Building GCC now automatically fixes the system's header files.\n+This should require no attention.\n+\n+* GCC now installs an unsigned data type as size_t when it fixes the\n+header files (on all but a handful of old target machines).\n+Therefore, the bug that size_t failed to be unsigned is fixed.\n+\n+* Building and installation are now completely separate.\n+All new files are constructed during the build process; \n+installation just copies them.\n+\n+* New targets supported: Clipper, Hitachi SH, Hitachi 8300, and Sparc\n+Lite.\n+\n+* A totally new and much better Objective C run time system is included.\n+\n+* Objective C supports many new features.  Alas, I can't describe them\n+since I don't use that language; however, they are the same ones \n+supported in recent versions of the NeXT operating system.\n+\n+* The builtin functions __builtin_apply_args, __builtin_apply and\n+__builtin_return let you record the arguments and returned\n+value of a function without knowing their number or type.\n+\n+* The builtin string variables __FUNCTION__ and __PRETTY_FUNCTION__\n+give the name of the function in the source, and a pretty-printed\n+version of the name.  The two are the same in C, but differ in C++.\n+\n+* Casts to union types do not yield lvalues.\n+\n+* ## before an empty rest argument discards the preceding sequence\n+of non-whitespace characters from the macro definition.\n+(This feature is subject to change.)\n+\n+\n+New features specific to C++:\n+\n+* The manual contains a new section ``Common Misunderstandings with\n+GNU C++'' that C++ users should read.\n+\n+* #pragma interface and #pragma implementation let you use the same\n+C++ source file for both interface and implementation.\n+However, this mechanism is still in transition.\n+\n+* Named returned values let you avoid an extra constructor call\n+when a function result has a class type.\n+\n+* The C++ operators <? and >? yield min and max, respectively.\n+\n+* C++ gotos can exit a block safely even if the block has\n+aggregates that require destructors.\n+\n+* gcc defines the macro __GNUG__ when compiling C++ programs.\n+\n+* GNU C++ now correctly distinguishes between the prefix and postfix\n+forms of overloaded operator ++ and --.  To avoid breaking old\n+code, if a class defines only the prefix form, the compiler\n+accepts either ++obj or obj++, unless -pedantic is used.\n+\n+* If you are using version 2.3 of libg++, you need to rebuild it with\n+`make CC=gcc' to avoid mismatches in the definition of `size_t'.\n+\n+Newly documented compiler options:\n+\n+-fnostartfiles\n+\tOmit the standard system startup files when linking.\n+\n+-fvolatile-global\n+\tConsider memory references to extern and global data items to\n+\tbe volatile.\n+\n+-idirafter DIR\n+\tAdd DIR to the second include path.\n+\n+-iprefix PREFIX\n+\tSpecify PREFIX for later -iwithprefix options.\n+\n+-iwithprefix DIR\n+\tAdd PREFIX/DIR to the second include path.\n+\n+-mv8\n+\tEmit Sparc v8 code (with integer multiply and divide).\n+-msparclite\n+\tEmit Sparclite code (roughly v7.5).\n+\n+-print-libgcc-file-name\n+\tSearch for the libgcc.a file, print its absolute file name, and exit.\n+\n+-Woverloaded-virtual\n+\tWarn when a derived class function declaration may be an error\n+\tin defining a C++ virtual function. \n+\n+-Wtemplate-debugging\n+\tWhen using templates in a C++ program, warn if debugging is\n+\tnot yet fully available.\n+\n++eN\n+\tControl how C++ virtual function definitions are used\n+\t(like cfront 1.x).\n+"}]}