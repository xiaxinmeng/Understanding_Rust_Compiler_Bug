{"sha": "f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlZDRjZmI5ZDU1NzE3ZTM2YzNjMDU2ZjYxMmU3MzIzZmFjYzdmZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2007-11-05T15:42:30Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-11-05T15:42:30Z"}, "message": "re PR tree-optimization/32540 (Exponential time behavior in PRE)\n\n2007-11-05  Nick Clifton  <nickc@redhat.com>\n\t    Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/32540\n\tPR tree-optimization/33922\n\t* doc/invoke.texi: Document PARAM_MAX_PARTIAL_ANTIC_LENGTH.\n\t* tree-ssa-pre.c: Include params.h.\n\t(compute_partial_antic_aux): Use PARAM_MAX_PARTIAL_ANTIC_LENGTH\n\tto limit the maximum length of the PA set for a given block.\n\t* Makefile.in: Add a dependency upon params.h for tree-ssa-pre.c\n\t* params.def (PARAM_MAX_PARTIAL_ANTIC_LENGTH): New parameter.\n\n\t* gcc.dg/tree-ssa/pr32540-1.c: New.\n\t* gcc.dg/tree-ssa/pr32540-2.c: New.\n\t* gcc.dg/tree-ssa/pr33922.c: New.\n\n\nCo-Authored-By: Sebastian Pop <sebastian.pop@amd.com>\n\nFrom-SVN: r129901", "tree": {"sha": "532a1d6bef5e5f6807eb8923edc27006c580c3c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532a1d6bef5e5f6807eb8923edc27006c580c3c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afad0f6bbf0a98ac7189ca9dbcaef13594e674e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afad0f6bbf0a98ac7189ca9dbcaef13594e674e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afad0f6bbf0a98ac7189ca9dbcaef13594e674e"}], "stats": {"total": 197, "additions": 196, "deletions": 1}, "files": [{"sha": "0a5f2d8985119e7e68d8a98f03e4281d5a78325f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -1,3 +1,15 @@\n+2007-11-05  Nick Clifton  <nickc@redhat.com>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/32540\n+\tPR tree-optimization/33922\n+\t* doc/invoke.texi: Document PARAM_MAX_PARTIAL_ANTIC_LENGTH.\n+\t* tree-ssa-pre.c: Include params.h.\n+\t(compute_partial_antic_aux): Use PARAM_MAX_PARTIAL_ANTIC_LENGTH\n+\tto limit the maximum length of the PA set for a given block.\n+\t* Makefile.in: Add a dependency upon params.h for tree-ssa-pre.c\n+\t* params.def (PARAM_MAX_PARTIAL_ANTIC_LENGTH): New parameter.\n+\n 2007-11-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* libgcc2.c (__fixunstfDI, __fixunsxfDI, __fixunsdfDI,"}, {"sha": "85b75680966f42874c6965a38dd1d63c033b5b0c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -2068,7 +2068,7 @@ tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) $(CFGLOOP_H) \\\n    alloc-pool.h $(BASIC_BLOCK_H) bitmap.h $(HASHTAB_H) $(TREE_GIMPLE_H) \\\n-   $(TREE_INLINE_H) tree-iterator.h tree-ssa-sccvn.h\n+   $(TREE_INLINE_H) tree-iterator.h tree-ssa-sccvn.h $(PARAMS_H)\n tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) $(CFGLOOP_H) \\"}, {"sha": "5e24ed7d5ee5a3761d4670dca44d12fedc3294ce", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -7112,6 +7112,16 @@ mechanism for comparing types in C++ and Objective-C++.  However, if\n bugs in the canonical type system are causing compilation failures,\n set this value to 0 to disable canonical types.\n \n+@item max-partial-antic-length\n+Maximum length of the partial antic set computed during the tree\n+partial redundancy elimination optimization (@option{-ftree-pre}) when\n+optimizing at @option{-O3} and above.  For some sorts of source code\n+the enhanced partial redundancy elimination optimization can run away,\n+consuming all of the memory available on the host machine.  This\n+parameter sets a limit on the length of the sets that are computed,\n+which prevents the runaway behaviour.  Setting a value of 0 for\n+this paramter will allow an unlimited set length.\n+\n @end table\n @end table\n "}, {"sha": "fc85c8804ebf1f6602ce821b933c31ee85602734", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -707,6 +707,12 @@ DEFPARAM (PARAM_USE_CANONICAL_TYPES,\n \t  \"use-canonical-types\",\n \t  \"Whether to use canonical types\",\n \t  1, 0, 1)\n+\n+DEFPARAM (PARAM_MAX_PARTIAL_ANTIC_LENGTH,\n+\t  \"max-partial-antic-length\",\n+\t  \"Maximum length of partial antic set when performing tree pre optimization\",\n+\t  100, 0, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "6f505ed7a9ae3f9255b11eae0041b7d30e2fa748", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -1,3 +1,12 @@\n+2007-11-05  Nick Clifton  <nickc@redhat.com>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/32540\n+\tPR tree-optimization/33922\n+\t* gcc.dg/tree-ssa/pr32540-1.c: New.\n+\t* gcc.dg/tree-ssa/pr32540-2.c: New.\n+\t* gcc.dg/tree-ssa/pr33922.c: New.\n+\n 2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33939"}, {"sha": "ce8e0ae824f2a843a1ecbb10da803e879e3febf4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32540-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-1.c?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-pre\" } */\n+\n+int f(void);\n+void acceptloop_th(int *t) {\n+   int options = 0;\n+   if (f()) options |= 0x1 << 1;\n+   if (f()) options |= 0x1 << 2;\n+   if (f()) options |= 0x1 << 3;\n+   if (f()) options |= 0x1 << 4;\n+   if (f()) options |= 0x1 << 5;\n+   if (f()) options |= 0x1 << 6;\n+   if (f()) options |= 0x1 << 7;\n+   if (f()) options |= 0x1 << 8;\n+   if (f()) options |= 0x1 << 9;\n+   if (f()) options |= 0x1 << 10;\n+   if (f()) options |= 0x1 << 11;\n+   if (f()) options |= 0x1 << 12;\n+   if (f()) options |= 0x1 << 13;\n+   if (f()) options |= 0x1 << 14;\n+   if (f()) options |= 0x1 << 15;\n+   if (f()) options |= 0x1 << 16;\n+   if (f()) options |= 0x1 << 17;\n+   if (f()) options |= 0x1 << 18;\n+   if (f()) options |= 0x1 << 19;\n+   if (f()) options |= 0x1 << 20;\n+   if (f()) options |= 0x1 << 21;\n+   if (f()) options |= 0x1 << 22;\n+   if (f()) options |= 0x1 << 23;\n+   if (f()) options |= 0x1 << 24;\n+   if (f()) options |= 0x1 << 25;\n+   if (f()) options |= 0x1 << 26;\n+   if (f()) *t = options;\n+}"}, {"sha": "29a5e3c55d02bc9158c14dc8bd67cc67c0031e47", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32540-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32540-2.c?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-pre\" } */\n+\n+int f(void);\n+void acceptloop_th(int *t, int options) {\n+    if (f()) options |= 0x1 << 0;\n+    if (f()) options |= 0x1 << 1;\n+    if (f()) options |= 0x1 << 2;\n+    if (f()) options |= 0x1 << 3;\n+    if (f()) options |= 0x1 << 4;\n+    if (f()) options |= 0x1 << 5;\n+    if (f()) options |= 0x1 << 6;\n+    if (f()) options |= 0x1 << 7;\n+    if (f()) options |= 0x1 << 8;\n+    if (f()) options |= 0x1 << 9;\n+    if (f()) options |= 0x1 << 10;\n+    if (f()) options |= 0x1 << 11;\n+    if (f()) options |= 0x1 << 12;\n+    if (f()) options |= 0x1 << 13;\n+    if (f()) options |= 0x1 << 14;\n+    if (f()) options |= 0x1 << 15;\n+    if (f()) options |= 0x1 << 16;\n+    if (f()) options |= 0x1 << 17;\n+    if (f()) options |= 0x1 << 18;\n+    if (f()) options |= 0x1 << 19;\n+    if (f()) options |= 0x1 << 20;\n+    if (f()) options |= 0x1 << 21;\n+    if (f()) options |= 0x1 << 22;\n+    if (f()) options |= 0x1 << 23;\n+    if (f()) options |= 0x1 << 24;\n+    if (f()) options |= 0x1 << 25;\n+    if (f()) options |= 0x1 << 26;\n+    if (f()) *t = options;\n+}\n+"}, {"sha": "7429eb161e6bf8c0796b9f4726a2552d6e944b78", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33922.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33922.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33922.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33922.c?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-pre\" } */\n+\n+typedef enum\n+{\n+  ST_TiemanStyle,\n+}\n+BrailleDisplay;\n+static int pendingCommand;\n+static int currentModifiers;\n+typedef struct\n+{\n+  int (*updateKeys) (BrailleDisplay * brl, int *keyPressed);\n+}\n+ProtocolOperations;\n+static const ProtocolOperations *protocol;\n+brl_readCommand (BrailleDisplay * brl)\n+{\n+  unsigned long int keys;\n+  int command;\n+  int keyPressed;\n+  unsigned char routingKeys[200];\n+  int routingKeyCount;\n+  signed char rightVerticalSensor;\n+  if (pendingCommand != (-1))\n+    {\n+      return command;\n+    }\n+  if (!protocol->updateKeys (brl, &keyPressed))\n+    {\n+      if (rightVerticalSensor >= 0)\n+        keys |= 1;\n+      if ((routingKeyCount == 0) && keys)\n+        {\n+          if (currentModifiers)\n+            {\n+            doChord:switch (keys);\n+            }\n+          else\n+            {\n+            doCharacter:\n+              command = 0X2200;\n+              if (keys & 0X01UL)\n+                command |= 0001;\n+              if (keys & 0X02UL)\n+                command |= 0002;\n+              if (keys & 0X04UL)\n+                command |= 0004;\n+              if (keys & 0X08UL)\n+                command |= 0010;\n+              if (keys & 0X10UL)\n+                command |= 0020;\n+              if (keys & 0X20UL)\n+                command |= 0040;\n+              if (currentModifiers & (0X0010 | 0X0200))\n+                command |= 0100;\n+              if (currentModifiers & 0X0040)\n+                command |= 0200;\n+              if (currentModifiers & 0X0100)\n+                command |= 0X020000;\n+              if (currentModifiers & 0X0400)\n+                command |= 0X080000;\n+              if (currentModifiers & 0X0800)\n+                command |= 0X040000;\n+            }\n+          unsigned char key1 = routingKeys[0];\n+          if (key1 == 0)\n+            {\n+            }\n+          if (key1 == 1)\n+            if (keys)\n+              {\n+                currentModifiers |= 0X0010;\n+                goto doCharacter;\n+              }\n+        }\n+    }\n+  return command;\n+}"}, {"sha": "59396fd09ce933afb5a865f0e11201a93c846bcf", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ed4cfb9d55717e36c3c056f612e7323facc7ff/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f0ed4cfb9d55717e36c3c056f612e7323facc7ff", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n #include \"tree-ssa-sccvn.h\"\n+#include \"params.h\"\n \n /* TODO:\n \n@@ -1839,6 +1840,7 @@ compute_partial_antic_aux (basic_block block,\n   bitmap_set_t PA_OUT;\n   edge e;\n   edge_iterator ei;\n+  unsigned long max_pa = PARAM_VALUE (PARAM_MAX_PARTIAL_ANTIC_LENGTH);\n \n   old_PA_IN = PA_OUT = NULL;\n \n@@ -1847,6 +1849,14 @@ compute_partial_antic_aux (basic_block block,\n   if (block_has_abnormal_pred_edge)\n     goto maybe_dump_sets;\n \n+  /* If there are too many partially anticipatable values in the\n+     block, phi_translate_set can take an exponential time: stop\n+     before the translation starts.  */\n+  if (max_pa\n+      && single_succ_p (block)\n+      && bitmap_count_bits (PA_IN (single_succ (block))->values) > max_pa)\n+    goto maybe_dump_sets;\n+\n   old_PA_IN = PA_IN (block);\n   PA_OUT = bitmap_set_new ();\n "}]}