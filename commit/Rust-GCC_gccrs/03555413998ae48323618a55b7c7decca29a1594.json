{"sha": "03555413998ae48323618a55b7c7decca29a1594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1NTU0MTM5OThhZTQ4MzIzNjE4YTU1YjdjN2RlY2NhMjlhMTU5NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1997-09-10T02:28:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-10T02:28:20Z"}, "message": "error.c (dump_decl): Avoid crashing when presented with a uninitialized constant...\n\nTue Sep  9 17:57:25 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* error.c (dump_decl): Avoid crashing when presented with a\n\tuninitialized constant, as can occur with a template parameter.\n\nFrom-SVN: r15208", "tree": {"sha": "a1194d52597ec6e15cb52fb2ede9749a7004c06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1194d52597ec6e15cb52fb2ede9749a7004c06f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03555413998ae48323618a55b7c7decca29a1594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03555413998ae48323618a55b7c7decca29a1594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03555413998ae48323618a55b7c7decca29a1594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03555413998ae48323618a55b7c7decca29a1594/comments", "author": null, "committer": null, "parents": [{"sha": "a2676865a6f4f980779e6ff60839739fbc3ad826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2676865a6f4f980779e6ff60839739fbc3ad826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2676865a6f4f980779e6ff60839739fbc3ad826"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "c9eabf990d8645c4afe7274ef734bb77a663114e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03555413998ae48323618a55b7c7decca29a1594/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03555413998ae48323618a55b7c7decca29a1594/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03555413998ae48323618a55b7c7decca29a1594", "patch": "@@ -1,3 +1,8 @@\n+Tue Sep  9 17:57:25 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* error.c (dump_decl): Avoid crashing when presented with a\n+\tuninitialized constant, as can occur with a template parameter.\n+\n 1997-09-09  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* typeck.c (build_indirect_ref): Heed FLAG_VOLATILE similar to"}, {"sha": "4f4c5996bb786578acf628a87941aec22fab6dcc", "filename": "gcc/cp/error.c", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03555413998ae48323618a55b7c7decca29a1594/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03555413998ae48323618a55b7c7decca29a1594/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=03555413998ae48323618a55b7c7decca29a1594", "patch": "@@ -782,10 +782,13 @@ dump_decl (t, v)\n \n     case CONST_DECL:\n       if ((TREE_TYPE (t) != NULL_TREE && NEXT_CODE (t) == ENUMERAL_TYPE)\n-\t  || TREE_CODE (DECL_INITIAL (t)) == TEMPLATE_CONST_PARM)\n+\t  || (DECL_INITIAL (t) &&\n+\t      TREE_CODE (DECL_INITIAL (t)) == TEMPLATE_CONST_PARM))\n \tgoto general;\n-      else\n+      else if (DECL_INITIAL (t))\n \tdump_expr (DECL_INITIAL (t), 0);\n+      else\n+\tOB_PUTS (\"enumerator\");\n       break;\n \n     case USING_DECL:\n@@ -1363,29 +1366,33 @@ dump_expr (t, nop)\n       }\n \n     case TEMPLATE_CONST_PARM:\n-      if (current_template_parms)\n-\t{\n-\t  int i;\n-\t  int l = list_length (current_template_parms);\n-\t  tree parms = current_template_parms;\n-\t  tree r;\n-\n-\t  for (i = 0; i < l - TEMPLATE_CONST_LEVEL (t); ++i)\n-\t    {\n-\t      parms = TREE_CHAIN (parms);\n-\t      my_friendly_assert (parms != NULL_TREE, 0);\n-\t    }\n+      {\n+\tint l = current_template_parms ? \n+\t  list_length (current_template_parms) : 0;\n \n-\t  r = TREE_VEC_ELT (TREE_VALUE (parms),\n-\t\t\t    TEMPLATE_CONST_IDX (t));\n-\t  dump_decl (TREE_VALUE (r), -1);\n-\t}\n-      else\n-\t{\n-\t  OB_PUTS (\"<tparm \");\n-\t  OB_PUTI (TEMPLATE_CONST_IDX (t));\n-\t  OB_PUTS (\">\");\n-\t}\n+\tif (l >= TEMPLATE_CONST_LEVEL (t))\n+\t  {\n+\t    int i;\n+\t    tree parms = current_template_parms;\n+\t    tree r;\n+\t    \n+\t    for (i = 0; i < l - TEMPLATE_CONST_LEVEL (t); ++i)\n+\t      {\n+\t\tparms = TREE_CHAIN (parms);\n+\t\tmy_friendly_assert (parms != NULL_TREE, 0);\n+\t      }\n+\t    \n+\t    r = TREE_VEC_ELT (TREE_VALUE (parms),\n+\t\t\t      TEMPLATE_CONST_IDX (t));\n+\t    dump_decl (TREE_VALUE (r), -1);\n+\t  }\n+\telse\n+\t  {\n+\t    OB_PUTS (\"<tparm \");\n+\t    OB_PUTI (TEMPLATE_CONST_IDX (t));\n+\t    OB_PUTS (\">\");\n+\t  }\n+      }\n       break;\n \n     case IDENTIFIER_NODE:"}]}