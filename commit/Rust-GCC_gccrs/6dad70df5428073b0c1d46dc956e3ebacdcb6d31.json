{"sha": "6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhZDcwZGY1NDI4MDczYjBjMWQ0NmRjOTU2ZTNlYmFjZGNiNmQzMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-19T09:33:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-19T09:33:23Z"}, "message": "[multiple changes]\n\n\n2000-05-18  Chip Salzenberg  <chip@valinux.com>\n\n        * bits/ostream.tcc (_S_pad_char): Function template should not be\n        static.\n        * bits/streambuf.tcc (_S_copy_streambufs): Likewise.\n        * src/string-inst.cc (__destroy_aux): Instantiate for string*.\n\n2000-05-18  Nathan C. Myers  <ncm@cantrip.org>\n\n\t* mkcshadow: Change C_Swamp to C_legacy.\n\t* shadow/*: Same.\n\t* shadow/bits/*: Same.\n\ts/C_Swamp/C_legacy/g\n\ts/SWAMP/LEGACY/g\n\ts/_Shadow/_shadow/g\n\n2000-05-18  Anthony Williams  <anthony@anthonyw.cjb.net>\n\n\t* bits/locale_facets.tcc (num_get::_M_extract): Change char* to\n\tconst char*.\n\t* src/string-inst.cc (string::_S_find): Same.\n\nFrom-SVN: r34018", "tree": {"sha": "346e24edd235cd79a02a3a2e8d9a78f5b38711f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346e24edd235cd79a02a3a2e8d9a78f5b38711f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/comments", "author": null, "committer": null, "parents": [{"sha": "5cabe22bdf968f2f4018f0bbf57954a93af9e6cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cabe22bdf968f2f4018f0bbf57954a93af9e6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cabe22bdf968f2f4018f0bbf57954a93af9e6cf"}], "stats": {"total": 1101, "additions": 562, "deletions": 539}, "files": [{"sha": "c5dda7cf8a9c75dde4da29607a8b3f1d58b9234b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -1,3 +1,25 @@\n+2000-05-18  Chip Salzenberg  <chip@valinux.com>\n+\n+        * bits/ostream.tcc (_S_pad_char): Function template should not be\n+        static.\n+        * bits/streambuf.tcc (_S_copy_streambufs): Likewise.\n+        * src/string-inst.cc (__destroy_aux): Instantiate for string*.\n+\n+2000-05-18  Nathan C. Myers  <ncm@cantrip.org>\n+\n+\t* mkcshadow: Change C_Swamp to C_legacy.\n+\t* shadow/*: Same.\n+\t* shadow/bits/*: Same.\n+\ts/C_Swamp/C_legacy/g\n+\ts/SWAMP/LEGACY/g\n+\ts/_Shadow/_shadow/g\n+\n+2000-05-18  Anthony Williams  <anthony@anthonyw.cjb.net> \n+\n+\t* bits/locale_facets.tcc (num_get::_M_extract): Change char* to\n+\tconst char*.\n+\t* src/string-inst.cc (string::_S_find): Same.\n+\t\n 2000-05-18  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Change to"}, {"sha": "aa78632aec0444d1ad137d9a3808bb65c2b8d8d2", "filename": "libstdc++-v3/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -319,7 +319,7 @@ namespace std\n         {\n           __valid = false;\n           char __c = *__beg;\n-\t  char* __p = strchr(__fmt->_S_literals, __c);\n+\t  const char* __p = strchr(__fmt->_S_literals, __c);\n \t  \n \t  // NB: strchr returns true for __c == 0x0\n \t  if (__p && __c)"}, {"sha": "ca6813b97c3f92069cab3c911b36467924d5d598", "filename": "libstdc++-v3/bits/ostream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -407,7 +407,7 @@ namespace std {\n   // __newlen > __oldlen\n   // __news is allocated for __newlen size\n   template<typename _CharT, typename _Traits>\n-    static void\n+    void\n     _S_pad_char(basic_ios<_CharT, _Traits>& __ios, \n \t\t_CharT* __news, const _CharT* __olds,\n \t\tconst streamsize __newlen, const streamsize __oldlen)"}, {"sha": "924ddb0bcc87dd67197411c7b0053da344c9873b", "filename": "libstdc++-v3/bits/streambuf.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstreambuf.tcc?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -211,7 +211,7 @@ namespace std {\n   // standard. If so, then checks for __ios being zero would be\n   // necessary.\n   template<typename _CharT, typename _Traits>\n-    static streamsize\n+    streamsize\n     _S_copy_streambufs(basic_ios<_CharT, _Traits>& __ios,\n \t\t       basic_streambuf<_CharT, _Traits>* __sbin,\n \t\t       basic_streambuf<_CharT, _Traits>* __sbout) "}, {"sha": "caaaba26c5fdd950a53d7ed5c28f8946c86c88c9", "filename": "libstdc++-v3/mkcshadow", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fmkcshadow", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fmkcshadow", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcshadow?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -67,20 +67,20 @@ while read header; do\n \n #ifndef  _INCLUDED_CPP_${UPNAME}_\n \n-# ifdef _IN_C_SWAMP_  /* sub-included by a C header */\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n #   include_next <${header}>\n # else\n \n-    namespace _C_Swamp { namespace _C_Shadow { } }\n-    using namespace ::_C_Swamp::_C_Shadow;\n-    namespace _C_Swamp {\n+    namespace _C_legacy { namespace _C_shadow { } }\n+    using namespace ::_C_legacy::_C_shadow;\n+    namespace _C_legacy {\n       extern \"C\" {\n-#       define _IN_C_SWAMP_\n+#       define _IN_C_LEGACY_\n #       include_next <${header}>\n       } // close extern \"C\"\n-    }   // close namespace _C_Swamp::\n+    }   // close namespace _C_legacy::\n   \n-# endif /* _IN_C_SWAMP_ */\n+# endif /* _IN_C_LEGACY_ */\n #endif /* _INCLUDED_CPP_${UPNAME}_ */\n EOF\n #################### end ####################"}, {"sha": "5c4dc615cc360710373d9c3fa821c0b6e70ac7d9", "filename": "libstdc++-v3/shadow/bits/std_cctype.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -33,9 +33,9 @@\n #ifndef _CPP_CCTYPE\n #define _CPP_CCTYPE 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <ctype.h>\n     }\n@@ -55,8 +55,8 @@\n     inline int _CPP_tolower_capture(int c) { return tolower (c); }\n     inline int _CPP_toupper_capture(int c) { return toupper (c); }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n # undef isalnum\n # undef isalpha\n@@ -84,44 +84,44 @@\n # undef _X\n #endif\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std {\n \n     inline int isalnum(int __c)\n-      { return ::_C_Swamp::_CPP_isalnum_capture (__c); }\n+      { return ::_C_legacy::_CPP_isalnum_capture (__c); }\n     inline int isalpha (int __c)\n-      { return ::_C_Swamp::_CPP_isalpha_capture (__c); }\n+      { return ::_C_legacy::_CPP_isalpha_capture (__c); }\n     inline int iscntrl (int __c)\n-      { return ::_C_Swamp::_CPP_iscntrl_capture (__c); }\n+      { return ::_C_legacy::_CPP_iscntrl_capture (__c); }\n     inline int isdigit (int __c)\n-      { return ::_C_Swamp::_CPP_isdigit_capture (__c); }\n+      { return ::_C_legacy::_CPP_isdigit_capture (__c); }\n     inline int isgraph (int __c)\n-      { return ::_C_Swamp::_CPP_isgraph_capture (__c); }\n+      { return ::_C_legacy::_CPP_isgraph_capture (__c); }\n     inline int islower (int __c)\n-      { return ::_C_Swamp::_CPP_islower_capture (__c); }\n+      { return ::_C_legacy::_CPP_islower_capture (__c); }\n     inline int isprint (int __c)\n-      { return ::_C_Swamp::_CPP_isprint_capture (__c); }\n+      { return ::_C_legacy::_CPP_isprint_capture (__c); }\n     inline int ispunct (int __c)\n-      { return ::_C_Swamp::_CPP_ispunct_capture (__c); }\n+      { return ::_C_legacy::_CPP_ispunct_capture (__c); }\n     inline int isspace (int __c)\n-      { return ::_C_Swamp::_CPP_isspace_capture (__c); }\n+      { return ::_C_legacy::_CPP_isspace_capture (__c); }\n     inline int isupper (int __c)\n-      { return ::_C_Swamp::_CPP_isupper_capture (__c); }\n+      { return ::_C_legacy::_CPP_isupper_capture (__c); }\n     inline int isxdigit (int __c)\n-      { return ::_C_Swamp::_CPP_isxdigit_capture (__c); }\n+      { return ::_C_legacy::_CPP_isxdigit_capture (__c); }\n \n     inline int tolower (int __c)\n-      { return ::_C_Swamp::_CPP_tolower_capture (__c); }\n+      { return ::_C_legacy::_CPP_tolower_capture (__c); }\n     inline int toupper (int __c)\n-      { return ::_C_Swamp::_CPP_toupper_capture (__c); }\n+      { return ::_C_legacy::_CPP_toupper_capture (__c); }\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::isalnum;\n       using ::std::isalpha;\n       using ::std::iscntrl;\n@@ -138,6 +138,6 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "d019a2a01b583be26f666d17f76bb89fc7cad2f0", "filename": "libstdc++-v3/shadow/bits/std_cerrno.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,35 +34,35 @@\n #ifndef _CPP_CERRNO\n #define _CPP_CERRNO 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <errno.h>\n     }\n \n     int& _CPP_errno_capture() { return errno; }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n #  undef  errno\n-#  define errno ::_C_Swamp::_CPP_errno_capture()\n+#  define errno ::_C_legacy::_CPP_errno_capture()\n // # undef EDOM\n // # undef ERANGE\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std { \n   } // close namespace std::\n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "44f24625c02cb4efe4d30e1d63f533c422f274ce", "filename": "libstdc++-v3/shadow/bits/std_cfloat.h", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -41,9 +41,9 @@\n # endif\n #endif\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <float.h>\n     }\n@@ -89,97 +89,97 @@\n     inline double _CPP_DBL_MIN_capture() { return DBL_MIN; }\n     inline long double _CPP_LDBL_MIN_capture() { return LDBL_MIN; }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n # undef FLT_ROUNDS\n-# define FLT_ROUNDS ::_C_Swamp::_CPP_FLT_ROUNDS_capture() \n+# define FLT_ROUNDS ::_C_legacy::_CPP_FLT_ROUNDS_capture() \n \n // # undef FLT_RADIX  // OK as-is.\n \n # undef FLT_MANT_DIG\n-# define FLT_MANT_DIG ::_C_Swamp::_CPP_FLT_MANT_DIG_capture()\n+# define FLT_MANT_DIG ::_C_legacy::_CPP_FLT_MANT_DIG_capture()\n # undef DBL_MANT_DIG\n-# define DBL_MANT_DIG ::_C_Swamp::_CPP_DBL_MANT_DIG_capture()\n+# define DBL_MANT_DIG ::_C_legacy::_CPP_DBL_MANT_DIG_capture()\n # undef LDBL_MANT_DIG\n-# define LDBL_MANT_DIG ::_C_Swamp::_CPP_LDBL_MANT_DIG_capture()\n+# define LDBL_MANT_DIG ::_C_legacy::_CPP_LDBL_MANT_DIG_capture()\n \n # undef FLT_DIG\n-# define FLT_DIG ::_C_Swamp::_CPP_FLT_DIG_capture()\n+# define FLT_DIG ::_C_legacy::_CPP_FLT_DIG_capture()\n # undef DBL_DIG\n-# define DBL_DIG ::_C_Swamp::_CPP_DBL_DIG_capture()\n+# define DBL_DIG ::_C_legacy::_CPP_DBL_DIG_capture()\n # undef LDBL_DIG\n-# define LDBL_DIG ::_C_Swamp::_CPP_LDBL_DIG_capture()\n+# define LDBL_DIG ::_C_legacy::_CPP_LDBL_DIG_capture()\n \n # undef FLT_MIN_MIN_DIG\n-# define FLT_MIN_MIN_DIG ::_C_Swamp::_CPP_FLT_MIN_MIN_DIG_capture()\n+# define FLT_MIN_MIN_DIG ::_C_legacy::_CPP_FLT_MIN_MIN_DIG_capture()\n # undef DBL_MIN_MIN_DIG\n-# define DBL_MIN_MIN_DIG ::_C_Swamp::_CPP_DBL_MIN_MIN_DIG_capture()\n+# define DBL_MIN_MIN_DIG ::_C_legacy::_CPP_DBL_MIN_MIN_DIG_capture()\n # undef LDBL_MIN_MIN_DIG\n-# define LDBL_MIN_MIN_DIG ::_C_Swamp::_CPP_LDBL_MIN_MIN_DIG_capture()\n+# define LDBL_MIN_MIN_DIG ::_C_legacy::_CPP_LDBL_MIN_MIN_DIG_capture()\n \n # undef FLT_MIN_EXP\n-# define FLT_MIN_EXP ::_C_Swamp::_CPP_FLT_MIN_EXP_capture()\n+# define FLT_MIN_EXP ::_C_legacy::_CPP_FLT_MIN_EXP_capture()\n # undef DBL_MIN_EXP\n-# define DBL_MIN_EXP ::_C_Swamp::_CPP_DBL_MIN_EXP_capture()\n+# define DBL_MIN_EXP ::_C_legacy::_CPP_DBL_MIN_EXP_capture()\n # undef LDBL_MIN_EXP\n-# define LDBL_MIN_EXP ::_C_Swamp::_CPP_LDBL_MIN_EXP_capture()\n+# define LDBL_MIN_EXP ::_C_legacy::_CPP_LDBL_MIN_EXP_capture()\n \n # undef FLT_MIN_10_EXP\n-# define FLT_MIN_10_EXP ::_C_Swamp::_CPP_FLT_MIN_10_EXP_capture()\n+# define FLT_MIN_10_EXP ::_C_legacy::_CPP_FLT_MIN_10_EXP_capture()\n # undef DBL_MIN_10_EXP\n-# define DBL_MIN_10_EXP _::_C_Swamp::CPP_DBL_MIN_10_EXP_capture()\n+# define DBL_MIN_10_EXP _::_C_legacy::CPP_DBL_MIN_10_EXP_capture()\n # undef LDBL_MIN_10_EXP\n-# define LDBL_MIN_10_EXP ::_C_Swamp::_CPP_LDBL_MIN_10_EXP_capture()\n+# define LDBL_MIN_10_EXP ::_C_legacy::_CPP_LDBL_MIN_10_EXP_capture()\n \n # undef FLT_MAX_EXP\n-# define FLT_MAX_EXP ::_C_Swamp::_CPP_FLT_MAX_EXP_capture()\n+# define FLT_MAX_EXP ::_C_legacy::_CPP_FLT_MAX_EXP_capture()\n # undef DBL_MAX_EXP\n-# define DBL_MAX_EXP ::_C_Swamp::_CPP_DBL_MAX_EXP_capture()\n+# define DBL_MAX_EXP ::_C_legacy::_CPP_DBL_MAX_EXP_capture()\n # undef LDBL_MAX_EXP\n-# define LDBL_MAX_EXP ::_C_Swamp::_CPP_LDBL_MAX_EXP_capture()\n+# define LDBL_MAX_EXP ::_C_legacy::_CPP_LDBL_MAX_EXP_capture()\n \n # undef FLT_MAX_10_EXP\n-# define FLT_MAX_10_EXP ::_C_Swamp::_CPP_FLT_MAX_10_EXP_capture()\n+# define FLT_MAX_10_EXP ::_C_legacy::_CPP_FLT_MAX_10_EXP_capture()\n # undef DBL_MAX_10_EXP\n-# define DBL_MAX_10_EXP ::_C_Swamp::_CPP_DBL_MAX_10_EXP_capture()\n+# define DBL_MAX_10_EXP ::_C_legacy::_CPP_DBL_MAX_10_EXP_capture()\n # undef LDBL_MAX_10_EXP\n-# define LDBL_MAX_10_EXP ::_C_Swamp::_CPP_LDBL_MAX_10_EXP_capture()\n+# define LDBL_MAX_10_EXP ::_C_legacy::_CPP_LDBL_MAX_10_EXP_capture()\n \n # undef FLT_MAX\n-# define FLT_MAX ::_C_Swamp::_CPP_FLT_MAX_capture()\n+# define FLT_MAX ::_C_legacy::_CPP_FLT_MAX_capture()\n # undef DBL_MAX\n-# define DBL_MAX ::_C_Swamp::_CPP_DBL_MAX_capture()\n+# define DBL_MAX ::_C_legacy::_CPP_DBL_MAX_capture()\n # undef LDBL_MAX\n-# define LDBL_MAX ::_C_Swamp::_CPP_LDBL_MAX_capture()\n+# define LDBL_MAX ::_C_legacy::_CPP_LDBL_MAX_capture()\n \n # undef FLT_EPSILON\n-# define FLT_EPSILON ::_C_Swamp::_CPP_FLT_EPSILON_capture()\n+# define FLT_EPSILON ::_C_legacy::_CPP_FLT_EPSILON_capture()\n # undef DBL_EPSILON\n-# define DBL_EPSILON ::_C_Swamp::_CPP_DBL_EPSILON_capture()\n+# define DBL_EPSILON ::_C_legacy::_CPP_DBL_EPSILON_capture()\n # undef LDBL_EPSILON\n-# define LDBL_EPSILON ::_C_Swamp::_CPP_LDBL_EPSILON_capture()\n+# define LDBL_EPSILON ::_C_legacy::_CPP_LDBL_EPSILON_capture()\n \n # undef FLT_MIN\n-# define FLT_MIN ::_C_Swamp::_CPP_FLT_MIN_capture()\n+# define FLT_MIN ::_C_legacy::_CPP_FLT_MIN_capture()\n # undef DBL_MIN\n-# define DBL_MIN ::_C_Swamp::_CPP_DBL_MIN_capture()\n+# define DBL_MIN ::_C_legacy::_CPP_DBL_MIN_capture()\n # undef LDBL_MIN\n-# define LDBL_MIN ::_C_Swamp::_CPP_LDBL_MIN_capture()\n+# define LDBL_MIN ::_C_legacy::_CPP_LDBL_MIN_capture()\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std {\n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "e98c7566f981378b97f19991117ea73081ca0aa9", "filename": "libstdc++-v3/shadow/bits/std_climits.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,14 +34,14 @@\n #ifndef _CPP_CLIMITS\n #define _CPP_CLIMTIS\t1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <limits.h>\n     }\n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n   // Note: there is not much for this wrapper to do besides hiding \n   // vendor-extension names and (perhaps) replacing one or other\n@@ -53,12 +53,12 @@\n   namespace std {\n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "120c8f22f8ec72788f9b50392d8fd85dbf2465a3", "filename": "libstdc++-v3/shadow/bits/std_clocale.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -36,9 +36,9 @@\n \n # include <bits/std_cstddef.h> /* pick up NULL */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <locale.h>\n     }\n@@ -54,56 +54,56 @@\n     const int _CPP_LC_MESSAGES_capture = LC_MESSAGES;\n #endif\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // #  undef  NULL\n // #  define NULL 0  /* handled in <cstddef> */\n #  undef LC_ALL\n-#  define LC_ALL\t::_C_Swamp::_CPP_LC_ALL_capture\n+#  define LC_ALL\t::_C_legacy::_CPP_LC_ALL_capture\n #  undef LC_COLLATE\n-#  define LC_COLLATE\t::_C_Swamp::_CPP_LC_COLLATE_capture\n+#  define LC_COLLATE\t::_C_legacy::_CPP_LC_COLLATE_capture\n #  undef LC_CTYPE\n-#  define LC_CTYPE\t::_C_Swamp::_CPP_LC_CTYPE_capture\n+#  define LC_CTYPE\t::_C_legacy::_CPP_LC_CTYPE_capture\n #  undef LC_MONETARY\n-#  define LC_MONETARY\t::_C_Swamp::_CPP_LC_MONETARY_capture\n+#  define LC_MONETARY\t::_C_legacy::_CPP_LC_MONETARY_capture\n #  undef LC_NUMERIC\n-#  define LC_NUMERIC\t::_C_Swamp::_CPP_LC_NUMERIC_capture\n+#  define LC_NUMERIC\t::_C_legacy::_CPP_LC_NUMERIC_capture\n #  undef LC_TIME\n-#  define LC_TIME\t::_C_Swamp::_CPP_LC_TIME_capture\n+#  define LC_TIME\t::_C_legacy::_CPP_LC_TIME_capture\n #if 0 /* XXX need proper macro guard for this common extension. */\n #  undef LC_MESSAGES\n-#  define LC_MESSAGES\t::_C_Swamp::_CPP_LC_MESSAGES_capture\n+#  define LC_MESSAGES\t::_C_legacy::_CPP_LC_MESSAGES_capture\n #endif\n \n #  undef lconv\n #  undef setlocale\n #  undef localeconv\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    using ::_C_Swamp::setlocale;  \n+    using ::_C_legacy::setlocale;  \n \n     // note: still a POD type:\n-    struct lconv  : ::_C_Swamp::_CPP_lconv_capture  { };\n+    struct lconv  : ::_C_legacy::_CPP_lconv_capture  { };\n \n     inline lconv* localeconv() \n-      { return reinterpret_cast<lconv*>(::_C_Swamp::localeconv()); }\n+      { return reinterpret_cast<lconv*>(::_C_legacy::localeconv()); }\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::lconv;\n       using ::std::localeconv;\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif /* _CPP_CLOCALE */"}, {"sha": "9d61dfe7f87db1c3b65e09e6df55cc07e8786732", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,9 +34,9 @@\n #ifndef _CPP_CMATH\n #define _CPP_CMATH 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <math.h>\n     }\n@@ -70,11 +70,11 @@\n     inline double _CPP_fmod_capture(double __x, double __y) \n       { return fmod(__x, __y); }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n # undef HUGE_VAL\n-# define HUGE_VAL ::_C_Swamp::_CPP_HUGE_VAL_capture()\n+# define HUGE_VAL ::_C_legacy::_CPP_HUGE_VAL_capture()\n # undef acos\n # undef asin\n # undef atan\n@@ -98,88 +98,88 @@\n # undef floor\n # undef fmod\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       inline double acos(double __x)\n-        { return ::_C_Swamp::_CPP_acos_capture(__x); }\n+        { return ::_C_legacy::_CPP_acos_capture(__x); }\n       inline double asin(double __x)\n-        { return ::_C_Swamp::_CPP_asin_capture(__x); }\n+        { return ::_C_legacy::_CPP_asin_capture(__x); }\n       inline double atan(double __x)\n-        { return ::_C_Swamp::_CPP_atan_capture(__x); }\n+        { return ::_C_legacy::_CPP_atan_capture(__x); }\n       inline double atan2(double __y, double __x)\n-      \t{ return ::_C_Swamp::_CPP_atan2_capture(__y,__x); }\n+      \t{ return ::_C_legacy::_CPP_atan2_capture(__y,__x); }\n       inline double cos(double __x)\n-        { return ::_C_Swamp::_CPP_cos_capture(__x); }\n+        { return ::_C_legacy::_CPP_cos_capture(__x); }\n       inline double sin(double __x)\n-        { return ::_C_Swamp::_CPP_sin_capture(__x); }\n+        { return ::_C_legacy::_CPP_sin_capture(__x); }\n       inline double tan(double __x)\n-        { return ::_C_Swamp::_CPP_tan_capture(__x); }\n+        { return ::_C_legacy::_CPP_tan_capture(__x); }\n       inline double cosh(double __x)\n-        { return ::_C_Swamp::_CPP_cosh_capture(__x); }\n+        { return ::_C_legacy::_CPP_cosh_capture(__x); }\n       inline double sinh(double __x)\n-        { return ::_C_Swamp::_CPP_sinh_capture(__x); }\n+        { return ::_C_legacy::_CPP_sinh_capture(__x); }\n       inline double tanh(double __x)\n-        { return ::_C_Swamp::_CPP_tanh_capture(__x); }\n+        { return ::_C_legacy::_CPP_tanh_capture(__x); }\n       inline double exp(double __x)\n-        { return ::_C_Swamp::_CPP_exp_capture(__x); }\n+        { return ::_C_legacy::_CPP_exp_capture(__x); }\n       inline double frexp(double __x, int* __exp)\n-      \t{ return ::_C_Swamp::_CPP_frexp_capture(__x, __exp); }\n+      \t{ return ::_C_legacy::_CPP_frexp_capture(__x, __exp); }\n       inline double ldexp(double __x, int __exp)\n-      \t{ return ::_C_Swamp::_CPP_ldexp_capture(__x, __exp); }\n+      \t{ return ::_C_legacy::_CPP_ldexp_capture(__x, __exp); }\n       inline double log(double __x)\n-        { return ::_C_Swamp::_CPP_log_capture(__x); }\n+        { return ::_C_legacy::_CPP_log_capture(__x); }\n       inline double log10(double __x)\n-        { return ::_C_Swamp::_CPP_log10_capture(__x); }\n+        { return ::_C_legacy::_CPP_log10_capture(__x); }\n       inline double modf(double __x, double* __iptr)\n-      \t{ return ::_C_Swamp::_CPP_modf_capture(__x, __iptr); }\n+      \t{ return ::_C_legacy::_CPP_modf_capture(__x, __iptr); }\n       inline double pow(double __x, double __y)\n-      \t{ return ::_C_Swamp::_CPP_pow_capture(__x, __y); }\n+      \t{ return ::_C_legacy::_CPP_pow_capture(__x, __y); }\n       inline double sqrt(double __x)\n-        { return ::_C_Swamp::_CPP_sqrt_capture(__x); }\n+        { return ::_C_legacy::_CPP_sqrt_capture(__x); }\n       inline double ceil(double __x)\n-        { return ::_C_Swamp::_CPP_ceil_capture(__x); }\n+        { return ::_C_legacy::_CPP_ceil_capture(__x); }\n       inline double fabs(double __x)\n-        { return ::_C_Swamp::_CPP_fabs_capture(__x); }\n+        { return ::_C_legacy::_CPP_fabs_capture(__x); }\n       inline double floor(double __x)\n-        { return ::_C_Swamp::_CPP_floor_capture(__x); }\n+        { return ::_C_legacy::_CPP_floor_capture(__x); }\n       inline double fmod(double __x, double __y)\n-      \t{ return ::_C_Swamp::_CPP_fmod_capture(__x, __y); }\n+      \t{ return ::_C_legacy::_CPP_fmod_capture(__x, __y); }\n \n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    using ::_C_Swamp::_C_Shadow::acos;\n-    using ::_C_Swamp::_C_Shadow::asin;\n-    using ::_C_Swamp::_C_Shadow::atan;\n-    using ::_C_Swamp::_C_Shadow::atan2;\n-    using ::_C_Swamp::_C_Shadow::cos;\n-    using ::_C_Swamp::_C_Shadow::sin;\n-    using ::_C_Swamp::_C_Shadow::tan;\n-    using ::_C_Swamp::_C_Shadow::cosh;\n-    using ::_C_Swamp::_C_Shadow::sinh;\n-    using ::_C_Swamp::_C_Shadow::tanh;\n-    using ::_C_Swamp::_C_Shadow::exp;\n-    using ::_C_Swamp::_C_Shadow::frexp;\n-    using ::_C_Swamp::_C_Shadow::ldexp;\n-    using ::_C_Swamp::_C_Shadow::log;\n-    using ::_C_Swamp::_C_Shadow::log10;\n-    using ::_C_Swamp::_C_Shadow::modf;\n-    using ::_C_Swamp::_C_Shadow::pow;\n-    using ::_C_Swamp::_C_Shadow::sqrt;\n-    using ::_C_Swamp::_C_Shadow::ceil;\n-    using ::_C_Swamp::_C_Shadow::fabs;\n-    using ::_C_Swamp::_C_Shadow::floor;\n-    using ::_C_Swamp::_C_Shadow::fmod;\n+    using ::_C_legacy::_C_shadow::acos;\n+    using ::_C_legacy::_C_shadow::asin;\n+    using ::_C_legacy::_C_shadow::atan;\n+    using ::_C_legacy::_C_shadow::atan2;\n+    using ::_C_legacy::_C_shadow::cos;\n+    using ::_C_legacy::_C_shadow::sin;\n+    using ::_C_legacy::_C_shadow::tan;\n+    using ::_C_legacy::_C_shadow::cosh;\n+    using ::_C_legacy::_C_shadow::sinh;\n+    using ::_C_legacy::_C_shadow::tanh;\n+    using ::_C_legacy::_C_shadow::exp;\n+    using ::_C_legacy::_C_shadow::frexp;\n+    using ::_C_legacy::_C_shadow::ldexp;\n+    using ::_C_legacy::_C_shadow::log;\n+    using ::_C_legacy::_C_shadow::log10;\n+    using ::_C_legacy::_C_shadow::modf;\n+    using ::_C_legacy::_C_shadow::pow;\n+    using ::_C_legacy::_C_shadow::sqrt;\n+    using ::_C_legacy::_C_shadow::ceil;\n+    using ::_C_legacy::_C_shadow::fabs;\n+    using ::_C_legacy::_C_shadow::floor;\n+    using ::_C_legacy::_C_shadow::fmod;\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "d506d0f5900d4623995d196a74b9fde0ce96d420", "filename": "libstdc++-v3/shadow/bits/std_csetjmp.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,42 +34,42 @@\n #ifndef _CPP_CSETJMP\n #define _CPP_CSETJMP 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <setjmp.h>\n     }\n     typedef jmp_buf   _CPP_jmp_buf_capture;\n     inline int _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n #  undef jmp_buf\n #  undef setjmp\n-#  define setjmp(__jb) ::_C_Swamp::_CPP_setjmp_capture(__jb)\n+#  define setjmp(__jb) ::_C_legacy::_CPP_setjmp_capture(__jb)\n #  undef longjmp\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_jmp_buf_capture  jmp_buf;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_jmp_buf_capture  jmp_buf;\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    using ::_C_Swamp::_C_Shadow::jmp_buf;  \n-    using ::_C_Swamp::longjmp;\n+    using ::_C_legacy::_C_shadow::jmp_buf;  \n+    using ::_C_legacy::longjmp;\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "0a640597675b691d255a4751aced6feffd27a4ed", "filename": "libstdc++-v3/shadow/bits/std_csignal.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,9 +34,9 @@\n #ifndef _CPP_CSIGNAL\n #define _CPP_CSIGNAL 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <signal.h>\n       typedef void (*_CPP_CSIGFUN_capture)(int);  // a C function pointer\n@@ -52,60 +52,60 @@\n     const int _CPP_SIGSEGV_capture = SIGSEGV;\n     const int _CPP_SIGTERM_capture = SIGTERM;\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n #  undef sig_atomic_t\n #  undef raise\n #  undef signal\n #  undef SIG_DFL\n #  define SIG_DFL \\\n-     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_DFL_capture)\n+     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_DFL_capture)\n #  undef SIG_ERR\n #  define SIG_ERR \\\n-     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_ERR_capture)\n+     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_ERR_capture)\n #  undef SIG_IGN\n #  define SIG_IGN \\\n-     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_IGN_capture)\n+     reinterpret_cast<void (*)(int)>(::_C_legacy::_CPP_SIG_IGN_capture)\n #  undef SIGABRT\n-#  define SIGABRT ::_C_Swamp::_CPP_SIGABRT_capture\n+#  define SIGABRT ::_C_legacy::_CPP_SIGABRT_capture\n #  undef SIGFPE\n-#  define SIGFPE  ::_C_Swamp::_CPP_SIGFPE_capture \n+#  define SIGFPE  ::_C_legacy::_CPP_SIGFPE_capture \n #  undef SIGILL\n-#  define SIGILL  ::_C_Swamp::_CPP_SIGILL_capture\n+#  define SIGILL  ::_C_legacy::_CPP_SIGILL_capture\n #  undef SIGINT\n-#  define SIGINT  ::_C_Swamp::_CPP_SIGINT_capture\n+#  define SIGINT  ::_C_legacy::_CPP_SIGINT_capture\n #  undef SIGSEGV\n-#  define SIGSEGV ::_C_Swamp::_CPP_SIGSEGV_capture\n+#  define SIGSEGV ::_C_legacy::_CPP_SIGSEGV_capture\n #  undef SIGTERM\n-#  define SIGTERM ::_C_Swamp::_CPP_SIGTERM_capture\n+#  define SIGTERM ::_C_legacy::_CPP_SIGTERM_capture\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_sig_atomic_t_capture sig_atomic_t;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_sig_atomic_t_capture sig_atomic_t;\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    using ::_C_Swamp::_C_Shadow::sig_atomic_t;\n-    using ::_C_Swamp::raise;\n+    using ::_C_legacy::_C_shadow::sig_atomic_t;\n+    using ::_C_legacy::raise;\n \n     inline void (*signal(int __sig, void (* __fun)(int)))(int)\n       { return reinterpret_cast<void (*)(int)>(\n-          ::_C_Swamp::signal(__sig,\n-\t    reinterpret_cast< ::_C_Swamp::_CPP_CSIGFUN_capture>(__fun)));\n+          ::_C_legacy::signal(__sig,\n+\t    reinterpret_cast< ::_C_legacy::_CPP_CSIGFUN_capture>(__fun)));\n       }\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::signal;\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "9b59ba9c08c26c3733f88a7b455bc044062abc96", "filename": "libstdc++-v3/shadow/bits/std_cstdarg.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,9 +34,9 @@\n #ifndef _CPP_CSTDARG\n #define _CPP_CSTDARG 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <stdarg.h>\n     }\n@@ -60,41 +60,41 @@\n \n     // typedef size_t    _CPP_size_t_capture;  // handled in <cstddef>\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n #  ifdef __GNUC__\n \n #    undef va_list\n-     using _C_Swamp::__gnuc_va_list;\n+     using _C_legacy::__gnuc_va_list;\n \n #  elif  /* probably must be tailored for each compiler, as above. */\n \n #    undef va_list\n #    undef va_start\n-#    define va_start(a,b) ::_C_Swamp::_CPP_va_start_capture(a,b)\n+#    define va_start(a,b) ::_C_legacy::_CPP_va_start_capture(a,b)\n #    undef va_arg\n-#    define va_arg(a,b)   ::_C_Swamp::_CPP_va_arg_capture<b>(a)\n+#    define va_arg(a,b)   ::_C_legacy::_CPP_va_arg_capture<b>(a)\n #    undef va_end\n-#    define va_end(a)     ::_C_Swamp::_CPP_va_end_capture(a)\n+#    define va_end(a)     ::_C_legacy::_CPP_va_end_capture(a)\n \n #  endif\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_va_list_capture va_list;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_va_list_capture va_list;\n     }\n   }\n   namespace std {\n-    using ::_C_Swamp::_C_Shadow::va_list;  \n+    using ::_C_legacy::_C_shadow::va_list;  \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "d146d0dfede61ee12cd21b0b28cfc724f085858b", "filename": "libstdc++-v3/shadow/bits/std_cstddef.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,17 +34,17 @@\n #ifndef _CPP_CSTDDEF\n #define _CPP_CSTDDEF 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <stddef.h>\n     }\n     typedef ptrdiff_t _CPP_ptrdiff_t_capture; \n     typedef size_t    _CPP_size_t_capture; \n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n #  undef ptrdiff_t  \n #  undef size_t  \n@@ -53,26 +53,26 @@\n #  define NULL 0 \n // # undef offsetof\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_ptrdiff_t_capture  ptrdiff_t;\n-      typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_ptrdiff_t_capture  ptrdiff_t;\n+      typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    using ::_C_Swamp::_C_Shadow::ptrdiff_t;  \n-    using ::_C_Swamp::_C_Shadow::size_t;  \n+    using ::_C_legacy::_C_shadow::ptrdiff_t;  \n+    using ::_C_legacy::_C_shadow::size_t;  \n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "36cb3fd981b7566cb9fff99fc159f88a237d7ef8", "filename": "libstdc++-v3/shadow/bits/std_cstdio.h", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -44,9 +44,9 @@\n # include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n # include <bits/std_cstdarg.h>  /* pick up va_list, va_start, va_end */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <stdio.h>\n     }\n@@ -77,38 +77,38 @@\n     inline int _CPP_putchar_capture(int __c)       { return putchar(__c); }\n     inline int _CPP_feof_capture(FILE* __f)        { return feof(__f); }\n \n-    namespace _C_Shadow {\n+    namespace _C_shadow {\n     }\n \n-  } // close namespace ::_C_Swamp::\n+  } // close namespace ::_C_legacy::\n \n // # undef size_t  /* handled in <cstddef> */\n # undef FILE \n # undef fpos_t \n # undef _IOFBF\n-# define _IOFBF\t\t::_C_Swamp::_CPP__IOFBF_capture\n+# define _IOFBF\t\t::_C_legacy::_CPP__IOFBF_capture\n # undef _IOLBF\n-# define _IOLBF\t\t::_C_Swamp::_CPP__IOLBF_capture\n+# define _IOLBF\t\t::_C_legacy::_CPP__IOLBF_capture\n # undef _IONBF\t\n-# define _IONBF\t\t::_C_Swamp::_CPP__IONBF_capture\n+# define _IONBF\t\t::_C_legacy::_CPP__IONBF_capture\n # undef BUFSIZ\n-# define BUFSIZ\t\t::_C_Swamp::_CPP_BUFSIZ_capture\n+# define BUFSIZ\t\t::_C_legacy::_CPP_BUFSIZ_capture\n # undef EOF\n-# define EOF\t\t::_C_Swamp::_CPP_EOF_capture\n+# define EOF\t\t::_C_legacy::_CPP_EOF_capture\n # undef FOPEN_MAX\n-# define FOPEN_MAX\t::_C_Swamp::_CPP_FOPEN_MAX_capture\n+# define FOPEN_MAX\t::_C_legacy::_CPP_FOPEN_MAX_capture\n # undef FILENAME_MAX\n-# define FILENAME_MAX\t::_C_Swamp::_CPP_FILENAME_MAX_capture\n+# define FILENAME_MAX\t::_C_legacy::_CPP_FILENAME_MAX_capture\n # undef L_tmpnam\n-# define L_tmpnam\t::_C_Swamp::_CPP_L_tmpnam_capture\n+# define L_tmpnam\t::_C_legacy::_CPP_L_tmpnam_capture\n # undef SEEK_CUR\n-# define SEEK_CUR\t::_C_Swamp::_CPP_SEEK_CUR_capture\n+# define SEEK_CUR\t::_C_legacy::_CPP_SEEK_CUR_capture\n # undef SEEK_END\n-# define SEEK_END\t::_C_Swamp::_CPP_SEEK_END_capture\n+# define SEEK_END\t::_C_legacy::_CPP_SEEK_END_capture\n # undef SEEK_SET\n-# define SEEK_SET\t::_C_Swamp::_CPP_SEEK_SET_capture\n+# define SEEK_SET\t::_C_legacy::_CPP_SEEK_SET_capture\n # undef TMP_MAX\n-# define TMP_MAX\t::_C_Swamp::_CPP_TMP_MAX_capture\n+# define TMP_MAX\t::_C_legacy::_CPP_TMP_MAX_capture\n \n # undef remove\n # undef rename\n@@ -152,157 +152,157 @@\n # undef ferror\n # undef perror\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n \n-    struct FILE   : ::_C_Swamp::_CPP_FILE_capture { };\n-    struct fpos_t { ::_C_Swamp::_CPP_fpos_t_capture _M_dummy; };\n+    struct FILE   : ::_C_legacy::_CPP_FILE_capture { };\n+    struct fpos_t { ::_C_legacy::_CPP_fpos_t_capture _M_dummy; };\n \n     inline FILE* _CPP_stderr()\n-      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stderr_capture() ); }\n+      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stderr_capture() ); }\n     inline FILE* _CPP_stdin()\n-      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stdin_capture() ); }\n+      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stdin_capture() ); }\n     inline FILE* _CPP_stdout()\n-      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stdout_capture() ); }\n+      { return reinterpret_cast<FILE*>( ::_C_legacy::_CPP_stdout_capture() ); }\n \n-    using ::_C_Swamp::remove;\n-    using ::_C_Swamp::rename;\n+    using ::_C_legacy::remove;\n+    using ::_C_legacy::rename;\n \n     inline FILE*\n-      tmpfile() { return reinterpret_cast<FILE*>(::_C_Swamp::tmpfile()); }\n+      tmpfile() { return reinterpret_cast<FILE*>(::_C_legacy::tmpfile()); }\n \n-    using ::_C_Swamp::tmpnam;\n+    using ::_C_legacy::tmpnam;\n \n     inline int\n-      fclose(FILE* __f) { return ::_C_Swamp::fclose(__f); }\n+      fclose(FILE* __f) { return ::_C_legacy::fclose(__f); }\n \n     inline int\n-      fflush(FILE* __f) { return ::_C_Swamp::fflush(__f); }\n+      fflush(FILE* __f) { return ::_C_legacy::fflush(__f); }\n \n     inline FILE*\n       fopen(char const* __name, char const* __mode) \n-        { return reinterpret_cast<FILE*>(::_C_Swamp::fopen(__name,__mode)); }\n+        { return reinterpret_cast<FILE*>(::_C_legacy::fopen(__name,__mode)); }\n \n     inline FILE*\n       freopen(char const* __name, char const* __mode, FILE* __f) \n         { return reinterpret_cast<FILE*>(\n-\t  ::_C_Swamp::freopen(__name,__mode,__f)); }\n+\t  ::_C_legacy::freopen(__name,__mode,__f)); }\n \n     inline void\n       setbuf(FILE* __f, char* __buf) \n-        { return ::_C_Swamp::setbuf(__f, __buf); }\n+        { return ::_C_legacy::setbuf(__f, __buf); }\n \n     inline int\n       setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n-        { return ::_C_Swamp::setvbuf(__f, __buf, __mode, __size); }\n+        { return ::_C_legacy::setvbuf(__f, __buf, __mode, __size); }\n \n     inline int\n       fprintf(FILE* __f, char const* __fmt, ...)\n         { va_list __v; va_start(__v,__fmt); \n-          int __i = ::_C_Swamp::vfprintf(__f, __fmt, __v); va_end(__v);\n+          int __i = ::_C_legacy::vfprintf(__f, __fmt, __v); va_end(__v);\n \t    return __i; }\n \n     inline int\n       fscanf(FILE* __f, char const* __fmt, ...)\n         { va_list __v; va_start(__v,__fmt); \n-          int __i = ::_C_Swamp::vfscanf(__f, __fmt, __v); va_end(__v);\n+          int __i = ::_C_legacy::vfscanf(__f, __fmt, __v); va_end(__v);\n \t    return __i; }\n \n-    using ::_C_Swamp::printf;\n-    using ::_C_Swamp::scanf;\n-    using ::_C_Swamp::sprintf;\n-    using ::_C_Swamp::sscanf;\n+    using ::_C_legacy::printf;\n+    using ::_C_legacy::scanf;\n+    using ::_C_legacy::sprintf;\n+    using ::_C_legacy::sscanf;\n \n-    // using ::_C_Swamp::vfprintf;\n+    // using ::_C_legacy::vfprintf;\n     inline int\n       vfprintf(FILE* __f, char const* __fmt, va_list __v)\n-        { return ::_C_Swamp::vfprintf(__f, __fmt, __v); }\n+        { return ::_C_legacy::vfprintf(__f, __fmt, __v); }\n \n     inline int\n       vprintf(char const* __fmt, va_list __v)\n-        { return ::_C_Swamp::vprintf(__fmt, __v); }\n+        { return ::_C_legacy::vprintf(__fmt, __v); }\n \n     inline int\n       vsprintf(char* __buf, char const* __fmt, va_list __v)\n-        { return ::_C_Swamp::vsprintf(__buf, __fmt, __v); }\n+        { return ::_C_legacy::vsprintf(__buf, __fmt, __v); }\n \n     inline int\n-      fgetc(FILE* __f) { return ::_C_Swamp::fgetc(__f); }\n+      fgetc(FILE* __f) { return ::_C_legacy::fgetc(__f); }\n \n-    // using ::_C_Swamp::fgets;\n+    // using ::_C_legacy::fgets;\n     inline char*\n       fgets(char* __buf, int __n, FILE* __f) \n-        { return ::_C_Swamp::fgets(__buf, __n, __f); }\n+        { return ::_C_legacy::fgets(__buf, __n, __f); }\n \n     inline int\n-      fputc(int __c, FILE* __f) { return ::_C_Swamp::fputc(__c, __f); }\n+      fputc(int __c, FILE* __f) { return ::_C_legacy::fputc(__c, __f); }\n \n     inline int\n       fputs(char const* __s, FILE* __f) \n-        { return ::_C_Swamp::fputs(__s, __f); }\n+        { return ::_C_legacy::fputs(__s, __f); }\n \n     inline int\n-      getc(FILE* __f) { return ::_C_Swamp::_CPP_getc_capture(__f); }\n+      getc(FILE* __f) { return ::_C_legacy::_CPP_getc_capture(__f); }\n \n     inline int\n-      getchar() { return ::_C_Swamp::_CPP_getchar_capture(); }\n+      getchar() { return ::_C_legacy::_CPP_getchar_capture(); }\n \n-    using ::_C_Swamp::gets;\n+    using ::_C_legacy::gets;\n \n     inline int\n       putc(int __c, FILE* __f) \n-        { return ::_C_Swamp::_CPP_putc_capture(__c, __f); }\n+        { return ::_C_legacy::_CPP_putc_capture(__c, __f); }\n \n     inline int\n-      putchar(int __c) { return ::_C_Swamp::_CPP_putchar_capture(__c); }\n+      putchar(int __c) { return ::_C_legacy::_CPP_putchar_capture(__c); }\n \n-    using ::_C_Swamp::puts;\n+    using ::_C_legacy::puts;\n \n-    // using ::_C_Swamp::ungetc;\n+    // using ::_C_legacy::ungetc;\n     inline int\n-      ungetc(int __c, FILE* __f) { return ::_C_Swamp::ungetc(__c, __f); }\n+      ungetc(int __c, FILE* __f) { return ::_C_legacy::ungetc(__c, __f); }\n \n     inline size_t\n       fread(void* __p, size_t __z, size_t __n, FILE* __f)\n-        { return ::_C_Swamp::fread(__p,__z,__n,__f); }\n+        { return ::_C_legacy::fread(__p,__z,__n,__f); }\n \n     inline size_t\n       fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n-        { return ::_C_Swamp::fwrite(__p,__z,__n,__f); }\n+        { return ::_C_legacy::fwrite(__p,__z,__n,__f); }\n \n     inline int\n       fgetpos(FILE* __f, fpos_t* __pos)\n-        { return ::_C_Swamp::fgetpos(__f,&__pos->_M_dummy); }\n+        { return ::_C_legacy::fgetpos(__f,&__pos->_M_dummy); }\n \n     inline int\n       fseek(FILE* __f, long __off, int __how)\n-        { return ::_C_Swamp::fseek(__f,__off,__how); }\n+        { return ::_C_legacy::fseek(__f,__off,__how); }\n \n     inline int\n       fsetpos(FILE* __f, fpos_t const* __pos)\n-        { return ::_C_Swamp::fsetpos(__f,&__pos->_M_dummy); }\n+        { return ::_C_legacy::fsetpos(__f,&__pos->_M_dummy); }\n \n     inline long\n-      ftell(FILE* __f) { return ::_C_Swamp::ftell(__f); }\n+      ftell(FILE* __f) { return ::_C_legacy::ftell(__f); }\n \n     inline void\n-      rewind(FILE* __f) { return ::_C_Swamp::rewind(__f); }\n+      rewind(FILE* __f) { return ::_C_legacy::rewind(__f); }\n \n     inline void\n-      clearerr(FILE* __f) { return ::_C_Swamp::clearerr(__f); }\n+      clearerr(FILE* __f) { return ::_C_legacy::clearerr(__f); }\n \n     inline int\n-      feof(FILE* __f) { return ::_C_Swamp::_CPP_feof_capture(__f); }\n+      feof(FILE* __f) { return ::_C_legacy::_CPP_feof_capture(__f); }\n \n     inline int\n-      ferror(FILE* __f) { return ::_C_Swamp::ferror(__f); }\n+      ferror(FILE* __f) { return ::_C_legacy::ferror(__f); }\n \n-    using ::_C_Swamp::perror;\n+    using ::_C_legacy::perror;\n \n   } // close namespace std::\n   \n@@ -313,8 +313,8 @@\n # undef stdout\n # define stdout ::std::_CPP_stdout()\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::FILE;\n       using ::std::fpos_t;\n \n@@ -362,7 +362,7 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "26c9a8706384ae830516a7d03967807bc62a76ae", "filename": "libstdc++-v3/shadow/bits/std_cstdlib.h", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -40,9 +40,9 @@\n \n # include <bits/std_cstddef.h>  /* pick up NULL, size_t */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <stdlib.h>\n       typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n@@ -56,9 +56,9 @@\n     typedef div_t   _CPP_div_t_capture;\n     typedef ldiv_t  _CPP_ldiv_t_capture;\n \n-    namespace _C_Shadow { \n+    namespace _C_shadow { \n     }\n-  } // close namespace ::_C_Swamp::\n+  } // close namespace ::_C_legacy::\n \n #  undef size_t\n #  undef wchar_t\n@@ -69,13 +69,13 @@\n // #  undef  NULL\n // #  define NULL         0\n #  undef  EXIT_SUCCESS\n-#  define EXIT_SUCCESS (::_C_Swamp::_CPP_EXIT_SUCCESS_capture)\n+#  define EXIT_SUCCESS (::_C_legacy::_CPP_EXIT_SUCCESS_capture)\n #  undef  EXIT_FAILURE\n-#  define EXIT_FAILURE (::_C_Swamp::_CPP_EXIT_FAILURE_capture)\n+#  define EXIT_FAILURE (::_C_legacy::_CPP_EXIT_FAILURE_capture)\n #  undef  RAND_MAX\n-#  define RAND_MAX     (::_C_Swamp::_CPP_RAND_MAX_capture)\n+#  define RAND_MAX     (::_C_legacy::_CPP_RAND_MAX_capture)\n #  undef  MB_CUR_MAX\n-#  define MB_CUR_MAX   (::_C_Swamp::_CPP_MB_CUR_MAX_capture())\n+#  define MB_CUR_MAX   (::_C_legacy::_CPP_MB_CUR_MAX_capture())\n \n #  undef atof\n #  undef atoi\n@@ -106,47 +106,47 @@\n #  undef mbstowcs\n #  undef wcstombs\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // these come from <cstddef>\n-      // typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n-      // typedef ::_C_Swamp::_CPP_wchar_t_capture wchar_t;\n+      // typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n+      // typedef ::_C_legacy::_CPP_wchar_t_capture wchar_t;\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    // using ::_C_Swamp::_C_Shadow::size_t;  \n-    // using ::_C_Swamp::_C_Shadow::wchar_t;\n+    // using ::_C_legacy::_C_shadow::size_t;  \n+    // using ::_C_legacy::_C_shadow::wchar_t;\n \n-    typedef ::_C_Swamp::_CPP_div_t_capture _CPP_div_t;\n+    typedef ::_C_legacy::_CPP_div_t_capture _CPP_div_t;\n     struct div_t  : _CPP_div_t {};\n-    typedef ::_C_Swamp::_CPP_ldiv_t_capture _CPP_ldiv_t;\n+    typedef ::_C_legacy::_CPP_ldiv_t_capture _CPP_ldiv_t;\n     struct ldiv_t : _CPP_ldiv_t {};\n     // note: div_t and ldiv_t are still POD types \n \n     // EXIT_SUCCESS, EXIT_FAILURE, RAND_MAX, MB_CUR_MAX, NULL\n \n-    using ::_C_Swamp::atof;\n-    using ::_C_Swamp::atoi;\n-    using ::_C_Swamp::atol;\n-    using ::_C_Swamp::strtod;\n-    using ::_C_Swamp::strtol;\n-    using ::_C_Swamp::strtoul;\n-    using ::_C_Swamp::rand;\n-    using ::_C_Swamp::srand;\n-    using ::_C_Swamp::calloc;\n-    using ::_C_Swamp::free;\n-    using ::_C_Swamp::malloc;\n-    using ::_C_Swamp::realloc;\n+    using ::_C_legacy::atof;\n+    using ::_C_legacy::atoi;\n+    using ::_C_legacy::atol;\n+    using ::_C_legacy::strtod;\n+    using ::_C_legacy::strtol;\n+    using ::_C_legacy::strtoul;\n+    using ::_C_legacy::rand;\n+    using ::_C_legacy::srand;\n+    using ::_C_legacy::calloc;\n+    using ::_C_legacy::free;\n+    using ::_C_legacy::malloc;\n+    using ::_C_legacy::realloc;\n     void abort();     // XXX must define this correctly for C++.\n \n #define _FUN_OVERLOAD_BUG\n     // extern \"C\" funs declared void f(int (*)()) overload OK with C++ funs,\n     //  but not if declared void f(int (*)(void)).\n \n #if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_Swamp::atexit;     // XXX must redefine this one!\n+    using ::_C_legacy::atexit;     // XXX must redefine this one!\n #endif\n     int atexit(void (*)());       // XXX must define this.\n       // More precisely, we need an extern \"C\" atexit() that\n@@ -156,30 +156,30 @@\n       //   be marked to be called using the proper convention.\n \n     void exit(int __i)   // XXX must define correctly for C++, like atexit().\n-      { ::_C_Swamp::exit(__i); }\n+      { ::_C_legacy::exit(__i); }\n \n-    using ::_C_Swamp::getenv;\n-    using ::_C_Swamp::system;\n+    using ::_C_legacy::getenv;\n+    using ::_C_legacy::system;\n \n     // XXX note that the raw conversion between C and C++ function \n     // pointers may not be portable to some targets; those targets need\n     // a forwarding function.\n \n #if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_Swamp::bsearch;  // overload\n+    using ::_C_legacy::bsearch;  // overload\n #endif\n     inline void* bsearch(const void* __key, const void* __base, size_t __n, \n \t\t  size_t __size, int (*__cmp)(const void*, const void*))\n-      { return ::_C_Swamp::bsearch(__key,__base,__n,__size,\n-          reinterpret_cast< ::_C_Swamp::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n+      { return ::_C_legacy::bsearch(__key,__base,__n,__size,\n+          reinterpret_cast< ::_C_legacy::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n \n #if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n-    using ::_C_Swamp::qsort;    // overload\n+    using ::_C_legacy::qsort;    // overload\n #endif\n     inline void qsort(void* __base, size_t __n, size_t __size,\n \t              int (*__cmp)(const void*, const void*)) \n-      { return ::_C_Swamp::qsort(__base,__n,__size,\n-          reinterpret_cast< ::_C_Swamp::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n+      { return ::_C_legacy::qsort(__base,__n,__size,\n+          reinterpret_cast< ::_C_legacy::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n \n \n     inline int abs(int __x) \n@@ -191,16 +191,16 @@\n     inline ldiv_t ldiv(long __num, long __den)\n       { _ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n \n-    using ::_C_Swamp::mblen;\n-    using ::_C_Swamp::mbtowc;;\n-    using ::_C_Swamp::wctomb;\n-    using ::_C_Swamp::mbstowcs;\n-    using ::_C_Swamp::wcstombs;\n+    using ::_C_legacy::mblen;\n+    using ::_C_legacy::mbtowc;;\n+    using ::_C_legacy::wctomb;\n+    using ::_C_legacy::mbstowcs;\n+    using ::_C_legacy::wcstombs;\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::div_t;\n       using ::std::ldiv_t;\n \n@@ -216,7 +216,7 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "441afeca94a876c195ce561b5a984cf5a404fb83", "filename": "libstdc++-v3/shadow/bits/std_cstring.h", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -40,9 +40,9 @@\n \n # include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <string.h>\n     }\n@@ -100,8 +100,8 @@\n     inline size_t _CPP_strlen_capture(char const* __s)\n       { return strlen(__s); }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // size_t, NULL\n # undef memcpy\n@@ -127,8 +127,8 @@\n # undef strerror\n # undef strlen\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n   namespace std {\n@@ -137,75 +137,75 @@\n     // C++ definition differs from C in some cases.\n \n     inline void* memcpy(void* __s1, void const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_memcpy_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_memcpy_capture(__s1,__s2,__n); }\n     inline void* memmove(void* __s1, void const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_memmove_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_memmove_capture(__s1,__s2,__n); }\n     inline void* strcpy(char* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strcpy_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strcpy_capture(__s1,__s2); }\n     inline char* strncpy(char* __s1, char const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_strncpy_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_strncpy_capture(__s1,__s2,__n); }\n     inline char* strcat(char* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strcat_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strcat_capture(__s1,__s2); }\n     inline char* strncat(char* __s1, char const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_strncat_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_strncat_capture(__s1,__s2,__n); }\n     inline int memcmp(void const* __s1, \n \t\t      void const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_memcmp_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_memcmp_capture(__s1,__s2,__n); }\n     inline int strcmp(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strcmp_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strcmp_capture(__s1,__s2); }\n     inline int strcoll(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strcoll_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strcoll_capture(__s1,__s2); }\n     inline int strncmp(char const* __s1, \n \t\t                    char const* __s2, size_t __n)\n-      { return ::_C_Swamp::_CPP_strncmp_capture(__s1,__s2,__n); }\n+      { return ::_C_legacy::_CPP_strncmp_capture(__s1,__s2,__n); }\n     inline size_t strxfrm(char* __b, char const* __s, size_t __n)\n-      { return ::_C_Swamp::_CPP_strxfrm_capture(__b,__s,__n); }\n+      { return ::_C_legacy::_CPP_strxfrm_capture(__b,__s,__n); }\n \n     inline void const* memchr(void const* __s1, int __c, size_t __n)\n-      { return ::_C_Swamp::_CPP_memchr_capture(__s1,__c,__n); }\n+      { return ::_C_legacy::_CPP_memchr_capture(__s1,__c,__n); }\n     inline       void* memchr(      void* __s1, int __c, size_t __n)\n-      { return ::_C_Swamp::_CPP_memchr_capture(__s1,__c,__n); }\n+      { return ::_C_legacy::_CPP_memchr_capture(__s1,__c,__n); }\n \n     inline char const* strchr(char const* __s1, int __c)\n-      { return ::_C_Swamp::_CPP_strchr_capture(__s1,__c); }\n+      { return ::_C_legacy::_CPP_strchr_capture(__s1,__c); }\n     inline       char* strchr(      char* __s1, int __c)\n-      { return ::_C_Swamp::_CPP_strchr_capture(__s1,__c); }\n+      { return ::_C_legacy::_CPP_strchr_capture(__s1,__c); }\n \n     inline size_t strcspn(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strcspn_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strcspn_capture(__s1,__s2); }\n \n     inline char const* strpbrk(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strpbrk_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strpbrk_capture(__s1,__s2); }\n     inline       char* strpbrk(      char* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strpbrk_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strpbrk_capture(__s1,__s2); }\n \n     inline char const* strrchr(char const* __s1, int __c)\n-      { return ::_C_Swamp::_CPP_strrchr_capture(__s1,__c); }\n+      { return ::_C_legacy::_CPP_strrchr_capture(__s1,__c); }\n     inline       char* strrchr(      char* __s1, int __c)\n-      { return ::_C_Swamp::_CPP_strrchr_capture(__s1,__c); }\n+      { return ::_C_legacy::_CPP_strrchr_capture(__s1,__c); }\n \n     inline size_t strspn(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strspn_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strspn_capture(__s1,__s2); }\n \n     inline char const* strstr(char const* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strstr_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strstr_capture(__s1,__s2); }\n     inline       char* strstr(      char* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strstr_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strstr_capture(__s1,__s2); }\n \n     inline char* strtok(char* __s1, char const* __s2)\n-      { return ::_C_Swamp::_CPP_strtok_capture(__s1,__s2); }\n+      { return ::_C_legacy::_CPP_strtok_capture(__s1,__s2); }\n     inline void* memset(void* __s, int __c, size_t __n)\n-      { return ::_C_Swamp::_CPP_memset_capture(__s,__c,__n); }\n+      { return ::_C_legacy::_CPP_memset_capture(__s,__c,__n); }\n \n-    using ::_C_Swamp::strerror;\n+    using ::_C_legacy::strerror;\n \n     inline size_t strlen(char const* __s)\n-      { return ::_C_Swamp::_CPP_strlen_capture(__s); }\n+      { return ::_C_legacy::_CPP_strlen_capture(__s); }\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // adopt names back into C\n       using ::std::memcpy;\n       using ::std::memmove;\n@@ -232,7 +232,7 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "429fcf832ebf3d24026294704db60dd2329fc258", "filename": "libstdc++-v3/shadow/bits/std_ctime.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -36,9 +36,9 @@\n \n # include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <time.h>\n     }\n@@ -49,13 +49,13 @@\n     typedef time_t    _CPP_time_t_capture;\n     typedef struct tm _CPP_tm_capture;\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // #  undef  NULL\n // #  define NULL 0  /* handled in <cstddef> */\n #  undef  CLOCKS_PER_SEC\n-#  define CLOCKS_PER_SEC (::_C_Swamp::_CPP_CLOCKS_PER_SEC_capture())\n+#  define CLOCKS_PER_SEC (::_C_legacy::_CPP_CLOCKS_PER_SEC_capture())\n \n #  undef size_t  /* handled in <cstddef> */\n #  undef clock_t\n@@ -71,49 +71,49 @@\n #  undef localtime\n #  undef strftime\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      // typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n-      typedef ::_C_Swamp::_CPP_clock_t_capture  clock_t;\n-      typedef ::_C_Swamp::_CPP_time_t_capture   time_t;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      // typedef ::_C_legacy::_CPP_size_t_capture  size_t;\n+      typedef ::_C_legacy::_CPP_clock_t_capture  clock_t;\n+      typedef ::_C_legacy::_CPP_time_t_capture   time_t;\n     }\n   }\n   namespace std {\n \n     // Adopt C names into std::\n-    // using ::_C_Swamp::_C_Shadow::size_t;  \n-    using ::_C_Swamp::_C_Shadow::clock_t;  \n-    using ::_C_Swamp::_C_Shadow::time_t;\n+    // using ::_C_legacy::_C_shadow::size_t;  \n+    using ::_C_legacy::_C_shadow::clock_t;  \n+    using ::_C_legacy::_C_shadow::time_t;\n \n     // note: still a POD type:\n-    struct tm  : ::_C_Swamp::_CPP_tm_capture  { };\n+    struct tm  : ::_C_legacy::_CPP_tm_capture  { };\n \n-    using ::_C_Swamp::clock;\n-    using ::_C_Swamp::difftime;\n-    using ::_C_Swamp::mktime;\n-    using ::_C_Swamp::time;\n+    using ::_C_legacy::clock;\n+    using ::_C_legacy::difftime;\n+    using ::_C_legacy::mktime;\n+    using ::_C_legacy::time;\n \n     inline char* asctime(const tm* __tp) \n-      { return ::_C_Swamp::asctime(\n-          static_cast< ::_C_Swamp::_CPP_tm_capture const*>(__tp)); }\n+      { return ::_C_legacy::asctime(\n+          static_cast< ::_C_legacy::_CPP_tm_capture const*>(__tp)); }\n \n-    using ::_C_Swamp::ctime;\n+    using ::_C_legacy::ctime;\n \n     inline tm* gmtime(time_t const* __tp) \n-      { return reinterpret_cast<tm*>(::_C_Swamp::gmtime(__tp)); }\n+      { return reinterpret_cast<tm*>(::_C_legacy::gmtime(__tp)); }\n \n     inline tm* localtime(const time_t* __tp) \n-      { return reinterpret_cast<tm*>(::_C_Swamp::localtime(__tp)); } \n+      { return reinterpret_cast<tm*>(::_C_legacy::localtime(__tp)); } \n \n     inline size_t strftime(char* __buf, size_t __maxsz, \n                            char const* __fmt, tm const* __tp) \n-      { return ::_C_Swamp::strftime(__buf, __maxsz, __fmt,\n-                 static_cast< ::_C_Swamp::_CPP_tm_capture const*>(__tp)); }\n+      { return ::_C_legacy::strftime(__buf, __maxsz, __fmt,\n+                 static_cast< ::_C_legacy::_CPP_tm_capture const*>(__tp)); }\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       using ::std::tm;\n       using ::std::asctime;\n       using ::std::gmtime;\n@@ -122,7 +122,7 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "bd5c74c9089fe8ef28397295e1a42feab90f7bac", "filename": "libstdc++-v3/shadow/bits/std_cwchar.h", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -40,9 +40,9 @@\n # include <bits/std_ctime.h>    /* struct tm */\n # include <bits/std_cstring.h>  /* memset */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <wchar.h>\n     }\n@@ -64,15 +64,15 @@\n       { return putwchar(__c); }\n #endif\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // #  undef size_t  /* handled in <cstddef> */\n # undef wchar_t\n # undef wint_t\n # undef mbstate_t\n # undef WEOF\n-# define WEOF ::_C_Swamp::_CPP_WEOF_capture\n+# define WEOF ::_C_legacy::_CPP_WEOF_capture\n \n // the following are not in glibc-2.0\n # undef fgetwc\n@@ -159,105 +159,105 @@\n # undef wcspbrk\n # undef wcswcs\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_wint_t_capture wint_t; \n-      // typedef ::_C_Swamp::_CPP_wctype_t_capture wctype_t;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_wint_t_capture wint_t; \n+      // typedef ::_C_legacy::_CPP_wctype_t_capture wctype_t;\n     }\n   }\n   namespace std {\n \n-    // using ::_C_Swamp::wchar_t;\n-    using ::_C_Swamp::_C_Shadow::wint_t;\n-    // using ::_C_Swamp::WEOF;\n+    // using ::_C_legacy::wchar_t;\n+    using ::_C_legacy::_C_shadow::wint_t;\n+    // using ::_C_legacy::WEOF;\n \n    // XXX this might better be replaced with one unrelated to the C mbstate_t.\n \n    struct mbstate_t { \n-     _C_Swamp::_CPP_mbstate_t_capture _M_dum; \n+     _C_legacy::_CPP_mbstate_t_capture _M_dum; \n      mbstate_t() { std::memset(&_M_dum,0,sizeof(_M_dum)); }\n    };\n \n #if 0 /* glibc-2.0 does not implement these. */\n     inline wint_t fgetwc(FILE* __f)\n-      { return ::_C_Swamp::fgetwc(__f); }\n+      { return ::_C_legacy::fgetwc(__f); }\n     inline wchar_t* fgetws(wchar_t* __s, int __n, FILE* __f)\n-      { return ::_C_Swamp::fgetws(__s,__n,__f); }\n+      { return ::_C_legacy::fgetws(__s,__n,__f); }\n     inline wint_t fputwc(wint_t __c, FILE* __f)\n-      { return ::_C_Swamp::fputwc(__c,__f); }\n+      { return ::_C_legacy::fputwc(__c,__f); }\n     inline int fputws(const wchar_t* __s, FILE* __f)\n-      { return ::_C_Swamp::fputws(__s,__f); }\n+      { return ::_C_legacy::fputws(__s,__f); }\n     inline wint_t ungetwc(wint_t __c, FILE* __f)\n-      { return ::_C_Swamp::ungetwc(__c,__f); }\n+      { return ::_C_legacy::ungetwc(__c,__f); }\n \n     inline wint_t getwc(FILE* __f)\n-      { return ::_C_Swamp::_CPP_getwc_capture(__f); }\n+      { return ::_C_legacy::_CPP_getwc_capture(__f); }\n     inline wint_t getwchar()\n-      { return ::_C_Swamp::_CPP_getwchar_capture(); }\n+      { return ::_C_legacy::_CPP_getwchar_capture(); }\n     inline wint_t putwc(wint_t __c, FILE* __f)\n-      { return ::_C_Swamp::_CPP_putwc_capture(__c,__f); }\n+      { return ::_C_legacy::_CPP_putwc_capture(__c,__f); }\n     inline wint_t putwchar(wint_t __c)\n-      { return ::_C_Swamp::_CPP_putwchar_capture(__c); }\n+      { return ::_C_legacy::_CPP_putwchar_capture(__c); }\n \n     // similarly wprintf etc.\n #endif\n \n-    using ::_C_Swamp::wcscpy;\n-    using ::_C_Swamp::wcscat;\n-    using ::_C_Swamp::wcscmp;\n-    using ::_C_Swamp::wcscoll;\n-    using ::_C_Swamp::wcsxfrm;\n-    using ::_C_Swamp::wcschr;\n-    using ::_C_Swamp::wcscspn;\n-    using ::_C_Swamp::wcspbrk;\n-    using ::_C_Swamp::wcstok;\n-    using ::_C_Swamp::wcslen;\n+    using ::_C_legacy::wcscpy;\n+    using ::_C_legacy::wcscat;\n+    using ::_C_legacy::wcscmp;\n+    using ::_C_legacy::wcscoll;\n+    using ::_C_legacy::wcsxfrm;\n+    using ::_C_legacy::wcschr;\n+    using ::_C_legacy::wcscspn;\n+    using ::_C_legacy::wcspbrk;\n+    using ::_C_legacy::wcstok;\n+    using ::_C_legacy::wcslen;\n #ifndef __sun\n-    using ::_C_Swamp::wcsdup;\n-    using ::_C_Swamp::wcsstr;\n-    using ::_C_Swamp::wmemchr;\n-    using ::_C_Swamp::wmemcmp;\n-    using ::_C_Swamp::wmemcpy;\n-    using ::_C_Swamp::wmemmove;\n-    using ::_C_Swamp::wmemset;\n-    using ::_C_Swamp::btowc;\n-    using ::_C_Swamp::wctob;\n-    using ::_C_Swamp::mbsinit;\n-    using ::_C_Swamp::mbrtowc;\n-    using ::_C_Swamp::wcrtomb;\n-    using ::_C_Swamp::mbrlen;\n+    using ::_C_legacy::wcsdup;\n+    using ::_C_legacy::wcsstr;\n+    using ::_C_legacy::wmemchr;\n+    using ::_C_legacy::wmemcmp;\n+    using ::_C_legacy::wmemcpy;\n+    using ::_C_legacy::wmemmove;\n+    using ::_C_legacy::wmemset;\n+    using ::_C_legacy::btowc;\n+    using ::_C_legacy::wctob;\n+    using ::_C_legacy::mbsinit;\n+    using ::_C_legacy::mbrtowc;\n+    using ::_C_legacy::wcrtomb;\n+    using ::_C_legacy::mbrlen;\n #endif\n #ifdef __USE_GNU\n-    using ::_C_Swamp::mbsrtowcs;\n-    using ::_C_Swamp::wcsrtombs;\n-    using ::_C_Swamp::mbsnrtowcs;\n-    using ::_C_Swamp::mbsnrtombs;\n-    using ::_C_Swamp::wcscmpy\n-    using ::_C_Swamp::wcwidth;\n-    using ::_C_Swamp::wcswidth;\n+    using ::_C_legacy::mbsrtowcs;\n+    using ::_C_legacy::wcsrtombs;\n+    using ::_C_legacy::mbsnrtowcs;\n+    using ::_C_legacy::mbsnrtombs;\n+    using ::_C_legacy::wcscmpy\n+    using ::_C_legacy::wcwidth;\n+    using ::_C_legacy::wcswidth;\n #endif\n-    using ::_C_Swamp::wcstod;\n-    using ::_C_Swamp::wcstol;\n-    using ::_C_Swamp::wcstoul;\n-    using ::_C_Swamp::wcsncat;\n-    using ::_C_Swamp::wcsncmp;\n-    using ::_C_Swamp::wcsncpy;\n-    using ::_C_Swamp::wcsrchr;\n-    using ::_C_Swamp::wcsspn;\n-    // using ::_C_Swamp::wcswcs;\n+    using ::_C_legacy::wcstod;\n+    using ::_C_legacy::wcstol;\n+    using ::_C_legacy::wcstoul;\n+    using ::_C_legacy::wcsncat;\n+    using ::_C_legacy::wcsncmp;\n+    using ::_C_legacy::wcsncpy;\n+    using ::_C_legacy::wcsrchr;\n+    using ::_C_legacy::wcsspn;\n+    // using ::_C_legacy::wcswcs;\n \n #if 0  /* not implemented in glibc-2 */\n     inline size_t wcsftime(wchar_t* __s, size_t __n, \n \t\t           char const* __fmt, struct tm const* __tmb)\n-      { return ::_C_Swamp::wcsftime(__s,__n,__fmt,__tmb); }\n+      { return ::_C_legacy::wcsftime(__s,__n,__fmt,__tmb); }\n \n-    using ::_C_Swamp::wctype;\n+    using ::_C_legacy::wctype;\n #endif\n \n   }\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n #if 0 /* XXX glibc-2.0 does not implement these. */\n       using ::std::fgetwc;\n       using ::std::fgetws;\n@@ -274,6 +274,6 @@\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "5fb6cdf76f1c816d118c11d5425c1616d2b49abc", "filename": "libstdc++-v3/shadow/bits/std_cwctype.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -38,9 +38,9 @@\n \n # include <bits/std_cwchar.h>  /* pick up wint_t, WEOF */\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <wctype.h>\n     }\n@@ -49,8 +49,8 @@\n \n     // XXX probably should capture defs of the \"is\" functions.\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n # undef size_t  /* handled in <cstddef> */\n # undef wchar_t\n@@ -80,39 +80,39 @@\n # undef iscodeset2\n # undef iscodeset3\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n-      typedef ::_C_Swamp::_CPP_wctype_t_capture wctype_t;\n-      typedef ::_C_Swamp::_CPP_wctrans_t_capture wctrans_t;\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n+      typedef ::_C_legacy::_CPP_wctype_t_capture wctype_t;\n+      typedef ::_C_legacy::_CPP_wctrans_t_capture wctrans_t;\n     }\n   }\n   namespace std {\n-    using ::_C_Swamp::_C_Shadow::wctype_t;\n-    using ::_C_Swamp::_C_Shadow::wctrans_t;\n+    using ::_C_legacy::_C_shadow::wctype_t;\n+    using ::_C_legacy::_C_shadow::wctrans_t;\n \n     // XXX probably should capture these to inlines.\n-    using ::_C_Swamp::iswalpha;\n-    using ::_C_Swamp::iswupper;\n-    using ::_C_Swamp::iswlower;\n-    using ::_C_Swamp::iswdigit;\n-    using ::_C_Swamp::iswxdigit;\n-    using ::_C_Swamp::iswalnum;\n-    using ::_C_Swamp::iswspace;\n-    using ::_C_Swamp::iswpunct;\n-    using ::_C_Swamp::iswprint;\n-    using ::_C_Swamp::iswgraph;\n-    using ::_C_Swamp::iswcntrl;\n-    using ::_C_Swamp::iswctype;\n-    using ::_C_Swamp::towlower;\n-    using ::_C_Swamp::towupper;\n+    using ::_C_legacy::iswalpha;\n+    using ::_C_legacy::iswupper;\n+    using ::_C_legacy::iswlower;\n+    using ::_C_legacy::iswdigit;\n+    using ::_C_legacy::iswxdigit;\n+    using ::_C_legacy::iswalnum;\n+    using ::_C_legacy::iswspace;\n+    using ::_C_legacy::iswpunct;\n+    using ::_C_legacy::iswprint;\n+    using ::_C_legacy::iswgraph;\n+    using ::_C_legacy::iswcntrl;\n+    using ::_C_legacy::iswctype;\n+    using ::_C_legacy::towlower;\n+    using ::_C_legacy::towupper;\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif"}, {"sha": "4a34cefc11e15112508c04173a51d2bf494169f3", "filename": "libstdc++-v3/shadow/bits/wrap_libio.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -36,36 +36,36 @@\n #ifndef _CPP_WRAP_LIBIO_H\n #define _CPP_WRAP_LIBIO_H 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <libio.h>\n     }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // #  undef that\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // typedef stuff\n     }\n   }\n   namespace std {\n \n-    // using ::_C_Swamp::stuff\n+    // using ::_C_legacy::stuff\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // using ::std::stuff\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "80d8d6541624368a0cea8c5fcd25dc9f74150a7a", "filename": "libstdc++-v3/shadow/bits/wrap_unistd.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -36,38 +36,38 @@\n #ifndef _CPP_WRAP_UNISTD_H\n #define _CPP_WRAP_UNISTD_H 1\n \n-  namespace _C_Swamp {\n+  namespace _C_legacy {\n     extern \"C\" {\n-#     define _IN_C_SWAMP_\n+#     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <unistd.h>\n     }\n \n-    namespace _C_Shadow { }\n-  } // close namespace ::_C_Swamp::\n+    namespace _C_shadow { }\n+  } // close namespace ::_C_legacy::\n \n // #  undef that\n \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // typedef stuff\n     }\n   }\n   namespace std {\n \n-    using ::_C_Swamp::read;\n-    using ::_C_Swamp::write;\n-    using ::_C_Swamp::open;\n+    using ::_C_legacy::read;\n+    using ::_C_legacy::write;\n+    using ::_C_legacy::open;\n \n   } // close namespace std::\n   \n-  namespace _C_Swamp {\n-    namespace _C_Shadow {\n+  namespace _C_legacy {\n+    namespace _C_shadow {\n       // using ::std::stuff\n     }\n   }\n \n-# undef _IN_C_SWAMP_\n+# undef _IN_C_LEGACY_\n \n #endif\n "}, {"sha": "ab3fb4ed836bce958e3c01be7c3fd80d9b5e01fa", "filename": "libstdc++-v3/shadow/ctype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fctype.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::isalnum;\n   using ::std::isalpha;\n   using ::std::iscntrl;"}, {"sha": "7571fd01a6e776718583f1e75e7b8eaf9090c108", "filename": "libstdc++-v3/shadow/libio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flibio.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   // using ::std::stuff\n \n # define _INCLUDED_CPP_LIBIO_H_ 1"}, {"sha": "c1a652c5f80e96a5d41fd9f2b65ad99e6a1603df", "filename": "libstdc++-v3/shadow/locale.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flocale.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::lconv;\n   using ::std::setlocale;\n   using ::std::localeconv;"}, {"sha": "47370cc3df460b6de6ead9ceae2a1179e8531d07", "filename": "libstdc++-v3/shadow/math.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fmath.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::acos;\n   using ::std::asin;\n   using ::std::atan;"}, {"sha": "d316905e79e27fa144e549f1169b0b8bc86a8d08", "filename": "libstdc++-v3/shadow/setjmp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::jmp_buf;\n   using ::std::longjmp;\n # define _INCLUDED_CPP_SETJMP_H_ 1"}, {"sha": "013177ad4d61c64578b083efa02fcbd8551ea9b9", "filename": "libstdc++-v3/shadow/signal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::sig_atomic_t;\n   using ::std::raise;\n   using ::std::signal;"}, {"sha": "3e906fcd3b613172ef0b35d6750c4346d9f54152", "filename": "libstdc++-v3/shadow/stdarg.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::va_list;\n # define _INCLUDED_CPP_STDARG_H_ 1\n # endif"}, {"sha": "d24829c568c8d63cd4bf3f0db37dfdd00690d29f", "filename": "libstdc++-v3/shadow/stddef.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -42,7 +42,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::ptrdiff_t;\n   using ::std::size_t;\n # define _INCLUDED_CPP_STDDEF_H_ 1"}, {"sha": "5a36eee8cdbcfb9c0f4cfc56c112492bb817d965", "filename": "libstdc++-v3/shadow/stdio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::size_t;\n   using ::std::fpos_t; \n   using ::std::remove;"}, {"sha": "6bc378bfbf3d0aa6a7547f821fa42b8dc6e4233c", "filename": "libstdc++-v3/shadow/stdlib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::size_t;\n   using ::std::div_t;\n   using ::std::ldiv_t;"}, {"sha": "5b913b3de2f3c1b4563a1808668a163ed9dd4465", "filename": "libstdc++-v3/shadow/string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstring.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::memcpy;\n   using ::std::memmove;\n   using ::std::strcpy;"}, {"sha": "2ace7c93ed9ad7f02fc0815ccde9f61134bc0921", "filename": "libstdc++-v3/shadow/time.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ftime.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -40,7 +40,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::size_t;  /* handled in <cstddef> */\n   using ::std::clock_t;\n   using ::std::time_t;"}, {"sha": "f1faf243e8fd66511610156f570ee5219078d9a8", "filename": "libstdc++-v3/shadow/unistd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Funistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Funistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Funistd.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -35,7 +35,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   // using ::std::stuff\n \n # define _INCLUDED_CPP_UNISTD_H_ 1"}, {"sha": "7686cdbe11eb38329d2ec196d4869b7533d9b9fa", "filename": "libstdc++-v3/shadow/wchar.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::size_t;  /* handled in <cstddef> */\n   using ::std::wint_t;\n   using ::std::mbstate_t;\n@@ -104,6 +104,6 @@\n   using ::std::wcsrchr;\n   using ::std::wcsspn;\n # define _INCLUDED_CPP_WCHAR_H_ 1\n-# endif /* _IN_C_SWAMP_ */\n+# endif /* _IN_C_LEGACY_ */\n \n #endif /* _INCLUDED_CPP_WCHAR_H_ */"}, {"sha": "d84c5e8e8263a46d048dd62453e3cc7022d7e50f", "filename": "libstdc++-v3/shadow/wctype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -34,7 +34,7 @@\n # include <bits/generic_shadow.h>\n # undef _SHADOW_NAME\n \n-# ifndef _IN_C_SWAMP_\n+# ifndef _IN_C_LEGACY_\n   using ::std::size_t; \n   using ::std::wint_t;\n   using ::std::wctype_t;"}, {"sha": "d50b1137e49bda23ae13a58cc8bb94f04afed5ea", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dad70df5428073b0c1d46dc956e3ebacdcb6d31/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=6dad70df5428073b0c1d46dc956e3ebacdcb6d31", "patch": "@@ -63,6 +63,7 @@ namespace std\n   template S::basic_string(S const&);\n   template S::_Rep* S::_Rep::_S_create(size_t, S::allocator_type const&);\n   template void S::_Rep::_M_destroy(S::allocator_type const&) throw();\n+  template void __destroy_aux(S*, S*, __false_type);\n #endif\n \n #ifdef CTORNC\n@@ -287,7 +288,7 @@ namespace std\n     const char* \n     string::_S_find(const char* __beg, const char* __end, char __c)\n     { \n-      char* __retval = strchr(__beg, __c); \n+      const char* __retval = strchr(__beg, __c); \n       return (__retval ? __retval : __end);\n     }\n #else"}]}