{"sha": "b48e2217672b79a81448ff675ad9dea8a325bfe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZTIyMTc2NzJiNzlhODE0NDhmZjY3NWFkOWRlYThhMzI1YmZlMQ==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2019-06-12T19:41:02Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@gcc.gnu.org", "date": "2019-06-12T19:41:02Z"}, "message": "testsuite: Add check for unsupported TI ABI PRU features to testsuite\n\ngcc/testsuite/ChangeLog:\n\n2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n\n\t* lib/gcc-dg.exp: Filter unsupported features in PRU's TI ABI mode.\n\t* lib/target-utils.exp: Ditto.\n\t* lib/target-supports.exp (check_effective_target_function_pointers,\n\tcheck_effective_target_large_return_values): New.\n\nFrom-SVN: r272207", "tree": {"sha": "0939aefcec18d4ff531cfce567016c71fbd8bf39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0939aefcec18d4ff531cfce567016c71fbd8bf39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48e2217672b79a81448ff675ad9dea8a325bfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e2217672b79a81448ff675ad9dea8a325bfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48e2217672b79a81448ff675ad9dea8a325bfe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e2217672b79a81448ff675ad9dea8a325bfe1/comments", "author": null, "committer": null, "parents": [{"sha": "31f1fa4e4083948c0a2953c28fca15f4f165b03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f1fa4e4083948c0a2953c28fca15f4f165b03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f1fa4e4083948c0a2953c28fca15f4f165b03e"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "b8970c31ff540d26430b9510d0e3d5ad5011438b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b48e2217672b79a81448ff675ad9dea8a325bfe1", "patch": "@@ -1,3 +1,10 @@\n+2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* lib/gcc-dg.exp: Filter unsupported features in PRU's TI ABI mode.\n+\t* lib/target-utils.exp: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_function_pointers,\n+\tcheck_effective_target_large_return_values): New.\n+\n 2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* lib/gcc-dg.exp: Bail on region overflow for tiny targets."}, {"sha": "e23b63cf3d163f93b4c10347049675d8d4ce0983", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=b48e2217672b79a81448ff675ad9dea8a325bfe1", "patch": "@@ -422,6 +422,17 @@ proc gcc-dg-prune { system text } {\n \treturn \"::unsupported::memory full\"\n     }\n \n+    if { [string match \"*error: function pointers not supported*\" $text]\n+\t  && ![check_effective_target_function_pointers] } {\n+\t# The format here is important.  See dg.exp.\n+\treturn \"::unsupported::funcptr\"\n+    }\n+    if { [string match \"*error: large return values not supported*\" $text]\n+    \t  && ![check_effective_target_large_return_values] } {\n+\t# The format here is important.  See dg.exp.\n+\treturn \"::unsupported::large return values\"\n+    }\n+\n     return $text\n }\n "}, {"sha": "01472879062bfaf960b69273ae7febaf31c323a2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b48e2217672b79a81448ff675ad9dea8a325bfe1", "patch": "@@ -2644,6 +2644,32 @@ proc check_effective_target_size20plus { } {\n     }]\n }\n \n+# Return 1 if target supports function pointers, 0 otherwise.\n+\n+proc check_effective_target_function_pointers { } {\n+    if { [istarget pru-*-*] } {\n+\treturn [check_no_compiler_messages func_ptr_avail assembly {\n+\t    #ifdef __PRU_EABI_GNU__\n+\t    #error unsupported\n+\t    #endif\n+\t}]\n+    }\n+    return 1\n+}\n+\n+# Return 1 if target supports arbitrarily large return values, 0 otherwise.\n+\n+proc check_effective_target_large_return_values { } {\n+    if { [istarget pru-*-*] } {\n+\treturn [check_no_compiler_messages large_return_values assembly {\n+\t    #ifdef __PRU_EABI_GNU__\n+\t    #error unsupported\n+\t    #endif\n+\t}]\n+    }\n+    return 1\n+}\n+\n # Return 1 if we support 24-bit or larger array and structure sizes\n # using default options, 0 otherwise.\n # This implies at least a 32-bit address space, as no targets have an address"}, {"sha": "0dd1f3494e89095efaf952f6c6ad62fc4dcd125e", "filename": "gcc/testsuite/lib/target-utils.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e2217672b79a81448ff675ad9dea8a325bfe1/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-utils.exp?ref=b48e2217672b79a81448ff675ad9dea8a325bfe1", "patch": "@@ -44,5 +44,13 @@ proc ${tool}_check_unsupported_p { output } {\n \t     [string match \"*exceeds local store*\" $output] } {\n \treturn \"memory full\"\n     }\n+    if { [string match \"*error: function pointers not supported*\" $output]\n+\t  && ![check_effective_target_function_pointers] } {\n+\treturn \"function pointers not supported\"\n+    }\n+    if { [string match \"*error: large return values not supported*\" $output]\n+\t  && ![check_effective_target_large_return_values] } {\n+\treturn \"large return values not supported\"\n+    }\n     return \"\"\n }"}]}