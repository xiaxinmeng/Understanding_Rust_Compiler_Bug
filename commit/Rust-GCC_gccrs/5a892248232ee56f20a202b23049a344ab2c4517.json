{"sha": "5a892248232ee56f20a202b23049a344ab2c4517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4OTIyNDgyMzJlZTU2ZjIwYTIwMmIyMzA0OWEzNDRhYjJjNDUxNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-27T13:02:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-27T13:02:24Z"}, "message": "re PR tree-optimization/57343 (wrong code on x86_64-linux at -Os and above)\n\n2013-05-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57343\n\t* tree-ssa-loop-niter.c (number_of_iterations_ne_max): Do not\n\tuse multiple_of_p if not TYPE_OVERFLOW_UNDEFINED.\n\t(number_of_iterations_cond): Do not build the folded tree.\n\n\t* gcc.dg/torture/pr57343.c: New testcase.\n\nFrom-SVN: r199357", "tree": {"sha": "9c4df07f019ab2916f49a727626c48c780323fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4df07f019ab2916f49a727626c48c780323fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a892248232ee56f20a202b23049a344ab2c4517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a892248232ee56f20a202b23049a344ab2c4517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a892248232ee56f20a202b23049a344ab2c4517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a892248232ee56f20a202b23049a344ab2c4517/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1de852b6813728f736dffdd7f69944e26423305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1de852b6813728f736dffdd7f69944e26423305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1de852b6813728f736dffdd7f69944e26423305"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "7d6d31e01a22fc71602971119d1f78b32ddb86a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a892248232ee56f20a202b23049a344ab2c4517", "patch": "@@ -1,3 +1,10 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57343\n+\t* tree-ssa-loop-niter.c (number_of_iterations_ne_max): Do not\n+\tuse multiple_of_p if not TYPE_OVERFLOW_UNDEFINED.\n+\t(number_of_iterations_cond): Do not build the folded tree.\n+\n 2013-05-27  Richard Biener  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "40c213fc2515b7d39d5be4ad4dd56bfd45339132", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a892248232ee56f20a202b23049a344ab2c4517", "patch": "@@ -1,3 +1,8 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57343\n+\t* gcc.dg/torture/pr57343.c: New testcase.\n+\n 2013-05-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57417"}, {"sha": "b05bad5cb43aa1c410b8be096f6a3cd3b7d7a60b", "filename": "gcc/testsuite/gcc.dg/torture/pr57343.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57343.c?ref=5a892248232ee56f20a202b23049a344ab2c4517", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+int c = 0;\n+\n+int\n+main ()\n+{\n+  int i, f = 1;\n+  for (i = 0; i < 5; i++)\n+    {\n+      --c;\n+      unsigned char h = c * 100;\n+      if (h == 0)\n+\t{\n+\t  f = 0;\n+\t  break;\n+\t}\n+    }\n+  if (f != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f5629306e4bb20ffc0d6e97632a2194dd0cabfef", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a892248232ee56f20a202b23049a344ab2c4517/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=5a892248232ee56f20a202b23049a344ab2c4517", "patch": "@@ -552,10 +552,18 @@ number_of_iterations_ne_max (mpz_t bnd, bool no_overflow, tree c, tree s,\n {\n   double_int max;\n   mpz_t d;\n+  tree type = TREE_TYPE (c);\n   bool bnds_u_valid = ((no_overflow && exit_must_be_taken)\n \t\t       || mpz_sgn (bnds->below) >= 0);\n \n-  if (multiple_of_p (TREE_TYPE (c), c, s))\n+  if (integer_onep (s)\n+      || (TREE_CODE (c) == INTEGER_CST\n+\t  && TREE_CODE (s) == INTEGER_CST\n+\t  && tree_to_double_int (c).mod (tree_to_double_int (s),\n+\t\t\t\t\t TYPE_UNSIGNED (type),\n+\t\t\t\t\t EXACT_DIV_EXPR).is_zero ())\n+      || (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (c))\n+\t  && multiple_of_p (type, c, s)))\n     {\n       /* If C is an exact multiple of S, then its value will be reached before\n \t the induction variable overflows (unless the loop is exited in some\n@@ -572,16 +580,15 @@ number_of_iterations_ne_max (mpz_t bnd, bool no_overflow, tree c, tree s,\n      the whole # of iterations analysis will fail).  */\n   if (!no_overflow)\n     {\n-      max = double_int::mask (TYPE_PRECISION (TREE_TYPE (c))\n-\t\t\t     - tree_low_cst (num_ending_zeros (s), 1));\n+      max = double_int::mask (TYPE_PRECISION (type)\n+\t\t\t      - tree_low_cst (num_ending_zeros (s), 1));\n       mpz_set_double_int (bnd, max, true);\n       return;\n     }\n \n   /* Now we know that the induction variable does not overflow, so the loop\n      iterates at most (range of type / S) times.  */\n-  mpz_set_double_int (bnd, double_int::mask (TYPE_PRECISION (TREE_TYPE (c))),\n-\t\t      true);\n+  mpz_set_double_int (bnd, double_int::mask (TYPE_PRECISION (type)), true);\n \n   /* If the induction variable is guaranteed to reach the value of C before\n      overflow, ... */\n@@ -1311,7 +1318,8 @@ number_of_iterations_cond (struct loop *loop,\n     }\n \n   /* If the loop exits immediately, there is nothing to do.  */\n-  if (integer_zerop (fold_build2 (code, boolean_type_node, iv0->base, iv1->base)))\n+  tree tem = fold_binary (code, boolean_type_node, iv0->base, iv1->base);\n+  if (tem && integer_zerop (tem))\n     {\n       niter->niter = build_int_cst (unsigned_type_for (type), 0);\n       niter->max = double_int_zero;"}]}