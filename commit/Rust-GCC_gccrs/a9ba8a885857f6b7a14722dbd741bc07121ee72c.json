{"sha": "a9ba8a885857f6b7a14722dbd741bc07121ee72c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliYThhODg1ODU3ZjZiN2ExNDcyMmRiZDc0MWJjMDcxMjFlZTcyYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-16T00:15:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-16T00:15:01Z"}, "message": "Revert accidental checkin of the FCOMI patch that I was testing.\n\nFrom-SVN: r26486", "tree": {"sha": "71910ad9b29be1d82a286a6ee17f669d2eb274c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71910ad9b29be1d82a286a6ee17f669d2eb274c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ba8a885857f6b7a14722dbd741bc07121ee72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba8a885857f6b7a14722dbd741bc07121ee72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ba8a885857f6b7a14722dbd741bc07121ee72c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba8a885857f6b7a14722dbd741bc07121ee72c/comments", "author": null, "committer": null, "parents": [{"sha": "a14003ee207f471846c4396e0e165aec4e4dcaed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14003ee207f471846c4396e0e165aec4e4dcaed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14003ee207f471846c4396e0e165aec4e4dcaed"}], "stats": {"total": 164, "additions": 59, "deletions": 105}, "files": [{"sha": "843c84c8fd52907d3c45b097f827ed9bc6c2eece", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 59, "deletions": 105, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8a885857f6b7a14722dbd741bc07121ee72c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8a885857f6b7a14722dbd741bc07121ee72c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a9ba8a885857f6b7a14722dbd741bc07121ee72c", "patch": "@@ -3139,8 +3139,7 @@ put_jump_code (code, reverse, file)\n      FILE *file;\n {\n   int flags = cc_prev_status.flags;\n-  int ieee = (TARGET_IEEE_FP && (flags & CC_IN_80387)\n-\t      && !(cc_prev_status.flags & CC_FCOMI));\n+  int ieee = (TARGET_IEEE_FP && (flags & CC_IN_80387));\n   const char *suffix;\n \n   if (flags & CC_Z_IN_NOT_C)\n@@ -3897,7 +3896,7 @@ notice_update_cc (exp)\n           if (stack_regs_mentioned_p (SET_SRC (XVECEXP (exp, 0, 0))))\n \t    {\n               cc_status.flags |= CC_IN_80387;\n-\t      if (TARGET_CMOVE && stack_regs_mentioned_p\n+\t      if (0 && TARGET_CMOVE && stack_regs_mentioned_p\n \t\t  (XEXP (SET_SRC (XVECEXP (exp, 0, 0)), 1)))\n \t\tcc_status.flags |= CC_FCOMI;\n \t    }\n@@ -4255,7 +4254,7 @@ output_float_compare (insn, operands)\n   int unordered_compare = GET_MODE (SET_SRC (body)) == CCFPEQmode;\n   rtx tmp;\n \n-  if (TARGET_CMOVE && STACK_REG_P (operands[1]))\n+  if (0 && TARGET_CMOVE && STACK_REG_P (operands[1]))\n     {\n       cc_status.flags |= CC_FCOMI;\n       cc_prev_status.flags &= ~CC_TEST_AX;\n@@ -4289,8 +4288,7 @@ output_float_compare (insn, operands)\n \t    {\n \t      output_asm_insn (AS2 (fucomip,%y1,%0), operands);\n \t      output_asm_insn (AS1 (fstp, %y0), operands);\n-\t      if (!TARGET_IEEE_FP)\n-\t\treturn \"\";\n+\t      return \"\";\n \t    }\n \t  else\n \t    output_asm_insn (\"fucompp\", operands);\n@@ -4326,8 +4324,7 @@ output_float_compare (insn, operands)\n       if (cc_status.flags & CC_FCOMI)\n \t{\n \t  output_asm_insn (strcat (buf, AS2 (%z1,%y1,%0)), operands);\n-\t  if (!TARGET_IEEE_FP)\n-\t    return \"\";\n+\t  return \"\";\n \t}\n       else\n         output_asm_insn (strcat (buf, AS1 (%z1,%y1)), operands);\n@@ -4351,19 +4348,17 @@ output_fp_cc0_set (insn)\n   rtx next;\n   enum rtx_code code;\n \n-  if (!(cc_status.flags & CC_FCOMI))\n-    {\n-      xops[0] = gen_rtx_REG (HImode, 0);\n-      output_asm_insn (AS1 (fnsts%W0,%0), xops);\n-    }\n+  xops[0] = gen_rtx_REG (HImode, 0);\n+  output_asm_insn (AS1 (fnsts%W0,%0), xops);\n \n   if (! TARGET_IEEE_FP)\n     {\n       if (!(cc_status.flags & CC_REVERSED))\n         {\n           next = next_cc0_user (insn);\n-  \n-          if (GET_CODE (PATTERN (next)) == SET\n+\n+          if (GET_CODE (next) == JUMP_INSN\n+              && GET_CODE (PATTERN (next)) == SET\n               && SET_DEST (PATTERN (next)) == pc_rtx\n               && GET_CODE (SET_SRC (PATTERN (next))) == IF_THEN_ELSE)\n \t    code = GET_CODE (XEXP (SET_SRC (PATTERN (next)), 0));\n@@ -4388,7 +4383,8 @@ output_fp_cc0_set (insn)\n   if (next == NULL_RTX)\n     abort ();\n \n-  if (GET_CODE (PATTERN (next)) == SET\n+  if (GET_CODE (next) == JUMP_INSN\n+      && GET_CODE (PATTERN (next)) == SET\n       && SET_DEST (PATTERN (next)) == pc_rtx\n       && GET_CODE (SET_SRC (PATTERN (next))) == IF_THEN_ELSE)\n     code = GET_CODE (XEXP (SET_SRC (PATTERN (next)), 0));\n@@ -4411,103 +4407,61 @@ output_fp_cc0_set (insn)\n   else\n     abort ();\n \n-  if (cc_status.flags & CC_FCOMI)\n-    {\n-      /* It is very tricky. We have to do it right. */\n-\n-      xops [0] = gen_rtx_REG (QImode, 0);\n-\n-      switch (code)\n-\t{\n-\tcase GT:\n-\tcase GE:\n-\t  break;\n-\n-\tcase LT:\n-\t  output_asm_insn (AS1 (setb,%b0), xops);\n-\t  output_asm_insn (AS1 (setp,%h0), xops);\n-\t  output_asm_insn (AS2 (cmp%B0,%b0,%h0), xops);\n-\t  break;\n+  xops[0] = gen_rtx_REG (QImode, 0);\n \n-\tcase LE:\n-\t  output_asm_insn (AS1 (setbe,%b0), xops);\n-\t  output_asm_insn (AS1 (setnp,%h0), xops);\n-\t  output_asm_insn (AS2 (xor%B0,%b0,%h0), xops);\n-\t  break;\n-\n-\tcase EQ:\n-\tcase NE:\n-\t  output_asm_insn (AS1 (setne,%b0), xops);\n-\t  output_asm_insn (AS1 (setp,%h0), xops);\n-\t  output_asm_insn (AS2 (or%B0,%b0,%h0), xops);\n-\t  break;\n-\n-\tcase GTU:\n-\tcase LTU:\n-\tcase GEU:\n-\tcase LEU:\n-\tdefault:\n-\t  abort ();\n-\t}\n-    }\n-  else\n+  switch (code)\n     {\n-      xops[0] = gen_rtx_REG (QImode, 0);\n-\n-      switch (code)\n-\t{\n-\tcase GT:\n-\t  xops[1] = GEN_INT (0x45);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  /* je label */\n-\t  break;\n+    case GT:\n+      xops[1] = GEN_INT (0x45);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      /* je label */\n+      break;\n \n-\tcase LT:\n-\t  xops[1] = GEN_INT (0x45);\n-\t  xops[2] = GEN_INT (0x01);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-\t  /* je label */\n-\t  break;\n+    case LT:\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x01);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+      /* je label */\n+      break;\n \n-\tcase GE:\n-\t  xops[1] = GEN_INT (0x05);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  /* je label */\n-\t  break;\n+    case GE:\n+      xops[1] = GEN_INT (0x05);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      /* je label */\n+      break;\n \n-\tcase LE:\n-\t  xops[1] = GEN_INT (0x45);\n-\t  xops[2] = GEN_INT (0x40);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  output_asm_insn (AS1 (dec%B0,%h0), xops);\n-\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-\t  /* jb label */\n-\t  break;\n+    case LE:\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x40);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      output_asm_insn (AS1 (dec%B0,%h0), xops);\n+      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+      /* jb label */\n+      break;\n \n-\tcase EQ:\n-\t  xops[1] = GEN_INT (0x45);\n-\t  xops[2] = GEN_INT (0x40);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n-\t  /* je label */\n-\t  break;\n+    case EQ:\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x40);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n+      /* je label */\n+      break;\n \n-\tcase NE:\n-\t  xops[1] = GEN_INT (0x44);\n-\t  xops[2] = GEN_INT (0x40);\n-\t  output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n-\t  output_asm_insn (AS2 (xor%B0,%2,%h0), xops);\n-\t  /* jne label */\n-\t  break;\n+    case NE:\n+      xops[1] = GEN_INT (0x44);\n+      xops[2] = GEN_INT (0x40);\n+      output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n+      output_asm_insn (AS2 (xor%B0,%2,%h0), xops);\n+      /* jne label */\n+      break;\n \n-\tcase GTU:\n-\tcase LTU:\n-\tcase GEU:\n-\tcase LEU:\n-\tdefault:\n-\t  abort ();\n-\t}\n+    case GTU:\n+    case LTU:\n+    case GEU:\n+    case LEU:\n+    default:\n+      abort ();\n     }\n \n   return \"\";"}]}