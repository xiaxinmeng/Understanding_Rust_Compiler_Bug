{"sha": "e398fcb9ce8eed5df3bc3ef1549450979028230f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5OGZjYjljZThlZWQ1ZGYzYmMzZWYxNTQ5NDUwOTc5MDI4MjMwZg==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-07-24T19:13:48Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-07-26T17:11:47Z"}, "message": "rs6000: add option -mblock-ops-unaligned-vsx\n\nThis option is mostly being added to provide -mno-block-ops-unaligned-vsx.\nThe default is set the same as -mefficient-unaligned-vsx. This option will\ncontrol the use of unaligned VSX loads/stores in the inline expansion\nof memcpy() and memmove(). The use case for this would be if you're\ncompiling code that is doing a memcpy to memory mapped device memory\nthat is cache-inhibited. On some powerpc processors this requires the\nunaligned vsx ops to be emulated by the kernel which is very slow.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tSet the default value for -mblock-ops-unaligned-vsx.\n\t* config/rs6000/rs6000.opt: Add -mblock-ops-unaligned-vsx.\n\t* doc/invoke.texi: Document -mblock-ops-unaligned-vsx.", "tree": {"sha": "15058516103eefde9fa42b52cdfd26b8ba03fa19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15058516103eefde9fa42b52cdfd26b8ba03fa19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e398fcb9ce8eed5df3bc3ef1549450979028230f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e398fcb9ce8eed5df3bc3ef1549450979028230f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e398fcb9ce8eed5df3bc3ef1549450979028230f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e398fcb9ce8eed5df3bc3ef1549450979028230f/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e764ae1d666002b136726e6548481013527197d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e764ae1d666002b136726e6548481013527197d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e764ae1d666002b136726e6548481013527197d"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "0c7506ff85dc9eb5518e1bbe0e4efed494601623", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e398fcb9ce8eed5df3bc3ef1549450979028230f", "patch": "@@ -3979,6 +3979,14 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n+  if (!(rs6000_isa_flags_explicit & OPTION_MASK_BLOCK_OPS_UNALIGNED_VSX))\n+    {\n+      if (TARGET_EFFICIENT_UNALIGNED_VSX)\n+\trs6000_isa_flags |= OPTION_MASK_BLOCK_OPS_UNALIGNED_VSX;\n+      else\n+\trs6000_isa_flags &= ~OPTION_MASK_BLOCK_OPS_UNALIGNED_VSX;\n+    }\n+\n   /* Use long double size to select the appropriate long double.  We use\n      TYPE_PRECISION to differentiate the 3 different long double types.  We map\n      128 into the precision used for TFmode.  */\n@@ -23167,6 +23175,8 @@ struct rs6000_opt_mask {\n static struct rs6000_opt_mask const rs6000_opt_masks[] =\n {\n   { \"altivec\",\t\t\tOPTION_MASK_ALTIVEC,\t\tfalse, true  },\n+  { \"block-ops-unaligned-vsx\",  OPTION_MASK_BLOCK_OPS_UNALIGNED_VSX,\n+                                                                false, true  },\n   { \"cmpb\",\t\t\tOPTION_MASK_CMPB,\t\tfalse, true  },\n   { \"crypto\",\t\t\tOPTION_MASK_CRYPTO,\t\tfalse, true  },\n   { \"direct-move\",\t\tOPTION_MASK_DIRECT_MOVE,\tfalse, true  },"}, {"sha": "9d3e740e93086bb97b8d3d75c30200228ffca5fd", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=e398fcb9ce8eed5df3bc3ef1549450979028230f", "patch": "@@ -324,6 +324,10 @@ mblock-move-inline-limit=\n Target Report Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined UInteger Save\n Max number of bytes to move inline.\n \n+mblock-ops-unaligned-vsx\n+Target Report Mask(BLOCK_OPS_UNALIGNED_VSX) Var(rs6000_isa_flags)\n+Generate unaligned VSX load/store for inline expansion of memcpy/memmove.\n+\n mblock-compare-inline-limit=\n Target Report Var(rs6000_block_compare_inline_limit) Init(63) RejectNegative Joined UInteger Save\n Max number of bytes to compare without loops."}, {"sha": "5449c338370bbd531b8934293eac6036464b3158", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e398fcb9ce8eed5df3bc3ef1549450979028230f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e398fcb9ce8eed5df3bc3ef1549450979028230f", "patch": "@@ -1182,6 +1182,7 @@ See RS/6000 and PowerPC Options.\n -mblock-move-inline-limit=@var{num} @gol\n -mblock-compare-inline-limit=@var{num} @gol\n -mblock-compare-inline-loop-limit=@var{num} @gol\n+-mno-block-ops-unaligned-vsx @gol\n -mstring-compare-inline-limit=@var{num} @gol\n -misel  -mno-isel @gol\n -mvrsave  -mno-vrsave @gol\n@@ -27023,6 +27024,13 @@ store instructions when the option @option{-mcpu=future} is used.\n @opindex mno-mma\n Generate (do not generate) the MMA instructions when the option\n @option{-mcpu=future} is used.\n+\n+@item -mblock-ops-unaligned-vsx\n+@itemx -mno-block-ops-unaligned-vsx\n+@opindex block-ops-unaligned-vsx\n+@opindex no-block-ops-unaligned-vsx\n+Generate (do not generate) unaligned vsx loads and stores for\n+inline expansion of @code{memcpy} and @code{memmove}.\n @end table\n \n @node RX Options"}]}