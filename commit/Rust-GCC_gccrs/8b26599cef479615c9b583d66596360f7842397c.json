{"sha": "8b26599cef479615c9b583d66596360f7842397c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyNjU5OWNlZjQ3OTYxNWM5YjU4M2Q2NjU5NjM2MGY3ODQyMzk3Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-16T20:35:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-16T20:35:16Z"}, "message": "guality.exp: Run also c-c++-common/guality/ tests.\n\n\t* gcc.dg/guality/guality.exp: Run also c-c++-common/guality/ tests.\n\t* gcc.dg/guality/guality.h: Include unistd.h.  Make the header usable\n\tin C++.\n\t(gualcvt): New overloaded inline.\n\t(GUALCVT): Use it for C++.\n\t* g++.dg/guality/guality.exp: New.\n\t* g++.dg/guality/guality.h: New.\n\t* g++.dg/guality/redeclaration1.C: New test.\n\t* g++.dg/dg.exp: Prune also guality/* tests.\n\t* gcc.dg/guality/pr43141.c: Moved to...\n\t* c-c++-common/guality/pr43141.c: ... here.\n\nFrom-SVN: r162266", "tree": {"sha": "2cb66858f66bfe83bdfa6c602f92ed8a4d9b2917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cb66858f66bfe83bdfa6c602f92ed8a4d9b2917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b26599cef479615c9b583d66596360f7842397c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b26599cef479615c9b583d66596360f7842397c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b26599cef479615c9b583d66596360f7842397c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b26599cef479615c9b583d66596360f7842397c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a4825bda18b76ef8b0f979ef439e0007a440b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4825bda18b76ef8b0f979ef439e0007a440b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4825bda18b76ef8b0f979ef439e0007a440b8f"}], "stats": {"total": 126, "additions": 124, "deletions": 2}, "files": [{"sha": "fa9f59674bfe1aeab214fbcdb3799a87e722d7e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -1,3 +1,17 @@\n+2010-07-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/guality/guality.exp: Run also c-c++-common/guality/ tests.\n+\t* gcc.dg/guality/guality.h: Include unistd.h.  Make the header usable\n+\tin C++.\n+\t(gualcvt): New overloaded inline.\n+\t(GUALCVT): Use it for C++.\n+\t* g++.dg/guality/guality.exp: New.\n+\t* g++.dg/guality/guality.h: New.\n+\t* g++.dg/guality/redeclaration1.C: New test.\n+\t* g++.dg/dg.exp: Prune also guality/* tests.\n+\t* gcc.dg/guality/pr43141.c: Moved to...\n+\t* c-c++-common/guality/pr43141.c: ... here.\n+\n 2010-07-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37077"}, {"sha": "e6fe79a0efc3a9880a4e00e6e5a81233122dbbcf", "filename": "gcc/testsuite/c-c++-common/guality/pr43141.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2Fpr43141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2Fpr43141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2Fpr43141.c?ref=8b26599cef479615c9b583d66596360f7842397c", "previous_filename": "gcc/testsuite/gcc.dg/guality/pr43141.c"}, {"sha": "5851dcc94f28daac2c5842c235291ea9b6d0e5b8", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2000, 2007 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2007, 2009, 2010 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -47,6 +47,7 @@ set tests [prune $tests $srcdir/$subdir/gomp/*]\n set tests [prune $tests $srcdir/$subdir/tree-prof/*]\n set tests [prune $tests $srcdir/$subdir/torture/*]\n set tests [prune $tests $srcdir/$subdir/graphite/*]\n+set tests [prune $tests $srcdir/$subdir/guality/*]\n \n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CXXFLAGS"}, {"sha": "9a1785036ef1648d226993d7f9d743d9775231aa", "filename": "gcc/testsuite/g++.dg/guality/guality.exp", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.exp?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -0,0 +1,53 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib g++-dg.exp\n+load_lib gcc-gdb-test.exp\n+\n+# Disable on darwin until radr://7264615 is resolved.\n+if { [istarget *-*-darwin*] } {\n+  return\n+}\n+\n+proc check_guality {args} {\n+    set result [eval check_compile guality_check executable $args \"-g -O0\"]\n+    set lines [lindex $result 0]\n+    set output [lindex $result 1]\n+    set ret 0\n+    if {[string match \"\" $lines]} {\n+      set execout [g++_load \"./$output\"]\n+      set ret [string match \"*1 PASS, 0 FAIL, 0 UNRESOLVED*\" $execout]\n+    }\n+    remote_file build delete $output\n+    return $ret\n+}\n+\n+dg-init\n+\n+global GDB\n+if ![info exists ::env(GUALITY_GDB_NAME)] {\n+    if [info exists GDB] {\n+\tset guality_gdb_name \"$GDB\"\n+    } else {\n+\tset guality_gdb_name \"[transform gdb]\"\n+    }\n+    setenv GUALITY_GDB_NAME \"$guality_gdb_name\"\n+}\n+\n+if {[check_guality \"\n+  #include \\\"$srcdir/$subdir/guality.h\\\"\n+  volatile long int varl = 6;\n+  int main (int argc, char *argv\\[\\])\n+  {\n+    GUALCHKVAL (varl);\n+    return 0;\n+  }\n+\"]} {\n+  gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.C]] \"\"\n+  gcc-dg-runtest [lsort [glob $srcdir/c-c++-common/guality/*.c]] \"\"\n+}\n+\n+if [info exists guality_gdb_name] {\n+    unsetenv GUALITY_GDB_NAME\n+}\n+\n+dg-finish"}, {"sha": "dd858d28b4b853a7447fcd201ddab74b7d47f5ad", "filename": "gcc/testsuite/g++.dg/guality/guality.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fguality.h?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.dg/guality/guality.h\""}, {"sha": "16f2f0ca4813d0bffa3ffe84969b128248794100", "filename": "gcc/testsuite/g++.dg/guality/redeclaration1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fredeclaration1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fredeclaration1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fredeclaration1.C?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run }\n+// { dg-options \"-g\" }\n+\n+volatile int l;\n+\n+namespace S\n+{\n+  int i = 24;\n+  void __attribute__((noinline))\n+  f()\n+  {\n+    int i = 42;\n+    l = i;\t\t// { dg-final { gdb-test 13 \"i\" \"42\" } }\n+    {\n+      extern int i;\n+      l = i;\t\t// { dg-final { gdb-test 16 \"i\" \"24\" } }\n+    }\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+  S::f ();\n+  return 0;\n+}"}, {"sha": "49e2ac5a5500ec543893c669eb8b6eb14016f79d", "filename": "gcc/testsuite/gcc.dg/guality/guality.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.exp?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -43,6 +43,7 @@ if {[check_guality \"\n   }\n \"]} {\n   gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \"\"\n+  gcc-dg-runtest [lsort [glob $srcdir/c-c++-common/guality/*.c]] \"-Wc++-compat\"\n }\n \n if [info exists guality_gdb_name] {"}, {"sha": "f6c662ce8f654f889fe576b4eab48e753ca92c9c", "filename": "gcc/testsuite/gcc.dg/guality/guality.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b26599cef479615c9b583d66596360f7842397c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h?ref=8b26599cef479615c9b583d66596360f7842397c", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <stdlib.h>\n #include <string.h>\n #include <stdint.h>\n+#include <unistd.h>\n \n /* This is a first cut at checking that debug information matches\n    run-time.  The idea is to annotate programs with GUALCHK* macros\n@@ -61,6 +62,7 @@ typedef intmax_t gualchk_t;\n /* Convert a pointer or integral type to the widest integral type,\n    as expected by guality_check.  */\n \n+#ifndef __cplusplus\n #define GUALCVT(val)\t\t\t\t\t\t\\\n   ((gualchk_t)__builtin_choose_expr\t\t\t\t\\\n    (__builtin_types_compatible_p (__typeof (val), gualchk_t),\t\\\n@@ -69,6 +71,30 @@ typedef intmax_t gualchk_t;\n     (__builtin_classify_type (val)\t\t\t\t\\\n      == __builtin_classify_type (&guality_skip),\t\t\\\n      (uintptr_t)(val),(intptr_t)(val))))\n+#else\n+template <typename T>\n+inline __attribute__((always_inline)) gualchk_t\n+gualcvt (T *val)\n+{\n+  return (uintptr_t) val;\n+}\n+\n+template <typename T>\n+inline __attribute__((always_inline)) gualchk_t\n+gualcvt (T val)\n+{\n+  return (intptr_t) val;\n+}\n+\n+template <>\n+inline __attribute__((always_inline)) gualchk_t\n+gualcvt<gualchk_t> (gualchk_t val)\n+{\n+  return val;\n+}\n+\n+#define GUALCVT(val) gualcvt (val)\n+#endif\n \n /* Attach a debugger to the current process and verify that the string\n    EXPR, evaluated by the debugger, yields the gualchk_t number VAL.\n@@ -195,7 +221,7 @@ main (int argc, char *argv[])\n       else\n \t{\n \t  int len = strlen (guality_gdb_command) + sizeof (GUALITY_GDB_ARGS);\n-\t  char *buf = __builtin_alloca (len);\n+\t  char *buf = (char *) __builtin_alloca (len);\n \t  strcpy (buf, guality_gdb_command);\n \t  strcat (buf, GUALITY_GDB_ARGS);\n \t  guality_gdb_command = buf;"}]}