{"sha": "bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlNDc1ZTJlMDU5ZWYzMGQ1ZGFlN2VlYTBjYjBlMDljOTdhM2YxOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-19T08:14:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:14:38Z"}, "message": "[Ada] Fix copy operation with private discriminated record type\n\nThis prevents the object code from reading too many bytes from the\nsource for a copy operation involving a private discriminated record\ntype with default discriminants and generated for the assignment of an\naggregate to a variable or the initialization of a constant.\n\nThe front-end already knows that it needs to convert the operation\ninvolving the aggregate into individual assignments if the type of the\naggregate has mutable components, but it would not do so if this type is\nprivate, which does not change anything for code generation.\n\nRunning these commands:\n\n  gnatmake -q p -g -fsanitize=address\n  p\n\nOn the following sources:\n\nwith Q; use Q;\n\nprocedure P is\n\n   type Rec is record\n      A : T;\n   end record;\n\n   C : constant Rec := Rec'(A => Default_T);\n\nbegin\n   null;\nend;\n\npackage Q is\n\n   type T is private;\n\n   Default_T : constant T;\n\nprivate\n\n   A : constant := 170;\n   B : constant := 8192;\n\n   type A_Index is range 1 .. A;\n   type B_Index is range 1 .. B;\n\n   type A_Array is array (A_Index) of Boolean;\n   type B_Array is array (B_Index) of Boolean;\n\n   type Data_Type is (A_Type, B_Type);\n\n   type T (Discriminant : Data_Type := A_Type) is record\n      case Discriminant is\n         when A_Type =>\n            Field_A : A_Array;\n         when B_Type =>\n            Field_B : B_Array;\n      end case;\n   end record;\n\n   Default_T : constant T :=\n     T'(Discriminant => A_Type, Field_A => (others => True));\n\nend Q;\n\nShould execute silently.\n\n2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Has_Mutable_Components): Look at the underlying\n\ttype of components to find out whether they are mutable.\n\nFrom-SVN: r275954", "tree": {"sha": "4d735318b500056f3988a82b6713ab7cd426cb4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d735318b500056f3988a82b6713ab7cd426cb4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18/comments", "author": null, "committer": null, "parents": [{"sha": "d53301c91fe9cfffaa06880ea1e32a9fc9246709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53301c91fe9cfffaa06880ea1e32a9fc9246709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53301c91fe9cfffaa06880ea1e32a9fc9246709"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "ff666826090ab9b45952bcd7b17f9ea905931333", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "patch": "@@ -1,3 +1,8 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Has_Mutable_Components): Look at the underlying\n+\ttype of components to find out whether they are mutable.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch12.adb (Instantiate_Package_Body): Check that the body"}, {"sha": "3d3dd1b83416b11d890585c9c1d34ffacee3174d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee475e2e059ef30d5dae7eea0cb0e09c97a3f18/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=bee475e2e059ef30d5dae7eea0cb0e09c97a3f18", "patch": "@@ -8162,13 +8162,15 @@ package body Exp_Aggr is\n \n    function Has_Mutable_Components (Typ : Entity_Id) return Boolean is\n       Comp : Entity_Id;\n+      Ctyp : Entity_Id;\n \n    begin\n       Comp := First_Component (Typ);\n       while Present (Comp) loop\n-         if Is_Record_Type (Etype (Comp))\n-           and then Has_Discriminants (Etype (Comp))\n-           and then not Is_Constrained (Etype (Comp))\n+         Ctyp := Underlying_Type (Etype (Comp));\n+         if Is_Record_Type (Ctyp)\n+           and then Has_Discriminants (Ctyp)\n+           and then not Is_Constrained (Ctyp)\n          then\n             return True;\n          end if;"}]}