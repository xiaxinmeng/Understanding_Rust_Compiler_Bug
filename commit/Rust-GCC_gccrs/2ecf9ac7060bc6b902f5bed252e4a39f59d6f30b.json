{"sha": "2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjZjlhYzcwNjBiYzZiOTAyZjViZWQyNTJlNGEzOWY1OWQ2ZjMwYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-10-13T10:04:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-10-13T10:04:59Z"}, "message": "i386: Check red zone size in push peephole2\n\nCheck red zone size, instead of if red zone is available, in push\npeephole2s.\n\ngcc/\n\n\tPR target/82499\n\t* config/i386/i386.h (ix86_red_zone_size): New.\n\t* config/i386/i386.md (push peephole2s): Replace\n\t\"!ix86_using_red_zone ()\" with \"ix86_red_zone_size == 0\".\n\ngcc/testsuite/\n\n\tPR target/82499\n\t* gcc.target/i386/pr82499-1.c: New file.\n\t* gcc.target/i386/pr82499-2.c: Likewise.\n\t* gcc.target/i386/pr82499-3.c: Likewise.\n\nFrom-SVN: r253718", "tree": {"sha": "444926911f61aeb31e73e71e49de485d44dfbdfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/444926911f61aeb31e73e71e49de485d44dfbdfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8649149a3cdf939cf5d74da35eae6eb4802f9cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8649149a3cdf939cf5d74da35eae6eb4802f9cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8649149a3cdf939cf5d74da35eae6eb4802f9cd8"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "57686022742b1f0b8377ab5763e4caa6a11ad2e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/82499\n+\t* config/i386/i386.h (ix86_red_zone_size): New.\n+\t* config/i386/i386.md (push peephole2s): Replace\n+\t\"!ix86_using_red_zone ()\" with \"ix86_red_zone_size == 0\".\n+\n 2017-10-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b2feded0464c6e2f92efd674a6127b432a3eb6b6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -2603,6 +2603,7 @@ struct GTY(()) machine_function {\n #define ix86_current_function_calls_tls_descriptor \\\n   (ix86_tls_descriptor_calls_expanded_in_cfun && df_regs_ever_live_p (SP_REG))\n #define ix86_static_chain_on_stack (cfun->machine->static_chain_on_stack)\n+#define ix86_red_zone_size (cfun->machine->frame.red_zone_size)\n \n /* Control behavior of x86_file_start.  */\n #define X86_FILE_START_VERSION_DIRECTIVE false"}, {"sha": "8262cf1c3f03e2c026965cc73930686e5b2394a5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -18814,7 +18814,7 @@\n \t      (clobber (mem:BLK (scratch)))])]\n   \"(TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n-   && !ix86_using_red_zone ()\"\n+   && ix86_red_zone_size == 0\"\n   [(clobber (match_dup 1))\n    (parallel [(set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n \t      (clobber (mem:BLK (scratch)))])])\n@@ -18828,7 +18828,7 @@\n \t      (clobber (mem:BLK (scratch)))])]\n   \"(TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n-   && !ix86_using_red_zone ()\"\n+   && ix86_red_zone_size == 0\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n    (parallel [(set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n@@ -18843,7 +18843,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"(TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n-   && !ix86_using_red_zone ()\"\n+   && ix86_red_zone_size == 0\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))])\n \n@@ -18855,7 +18855,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"(TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n    && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n-   && !ix86_using_red_zone ()\"\n+   && ix86_red_zone_size == 0\"\n   [(clobber (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))\n    (set (mem:W (pre_dec:P (reg:P SP_REG))) (match_dup 1))])"}, {"sha": "30ab9bd49e503c6a1960ebd79ae97b8a51eb7ff3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/82499\n+\t* gcc.target/i386/pr82499-1.c: New file.\n+\t* gcc.target/i386/pr82499-2.c: Likewise.\n+\t* gcc.target/i386/pr82499-3.c: Likewise.\n+\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82524"}, {"sha": "3aba62a466f4772d392a65af1bcacb38104e2b37", "filename": "gcc/testsuite/gcc.target/i386/pr82499-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-1.c?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* The pic register save adds unavoidable stack pointer references.  */\n+/* { dg-skip-if \"\" { ia32 && { ! nonpic } } } */\n+/* These options are selected to ensure 1 word needs to be allocated\n+   on the stack to maintain alignment for the call.  This should be\n+   transformed to push+pop.  We also want to force unwind info updates.  */\n+/* { dg-options \"-Os -fomit-frame-pointer -fasynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=3\" { target ia32 } } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=4\" { target { ! ia32 } } } */\n+/* ms_abi has reserved stack-region.  */\n+/* { dg-skip-if \"\" { x86_64-*-mingw* } } */\n+\n+extern void g (void);\n+int\n+f (void)\n+{\n+  g ();\n+  return 42;\n+}\n+\n+/* { dg-final { scan-assembler-not \"(sub|add)(l|q)\\[\\\\t \\]*\\\\$\\[0-9\\]*,\\[\\\\t \\]*%\\[re\\]?sp\" } } */"}, {"sha": "dde4d657e1ac85e84cf3ee92500b7055ba966a4c", "filename": "gcc/testsuite/gcc.target/i386/pr82499-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-2.c?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* The pic register save adds unavoidable stack pointer references.  */\n+/* { dg-skip-if \"\" { ia32 && { ! nonpic } } } */\n+/* These options are selected to ensure 1 word needs to be allocated\n+   on the stack to maintain alignment for the call.  This should be\n+   transformed to push+pop.  We also want to force unwind info updates.  */\n+/* { dg-options \"-Os -fomit-frame-pointer -fasynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=3\" { target ia32 } } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=4 -mno-red-zone\" { target { ! ia32 } } } */\n+/* ms_abi has reserved stack-region.  */\n+/* { dg-skip-if \"\" { x86_64-*-mingw* } } */\n+\n+extern void g (void);\n+int\n+f (void)\n+{\n+  g ();\n+  return 42;\n+}\n+\n+/* { dg-final { scan-assembler-not \"(sub|add)(l|q)\\[\\\\t \\]*\\\\$\\[0-9\\]*,\\[\\\\t \\]*%\\[re\\]?sp\" } } */"}, {"sha": "b55a860fccaed8c556fc5b4fc4b0d6df37f17761", "filename": "gcc/testsuite/gcc.target/i386/pr82499-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82499-3.c?ref=2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* The pic register save adds unavoidable stack pointer references.  */\n+/* { dg-skip-if \"\" { ia32 && { ! nonpic } } } */\n+/* These options are selected to ensure 1 word needs to be allocated\n+   on the stack to maintain alignment for the call.  This should be\n+   transformed to push+pop.  We also want to force unwind info updates.  */\n+/* { dg-options \"-O2 -mtune-ctrl=single_push,single_pop -fomit-frame-pointer -fasynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=3\" { target ia32 } } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=4\" { target { ! ia32 } } } */\n+/* ms_abi has reserved stack-region.  */\n+/* { dg-skip-if \"\" { x86_64-*-mingw* } } */\n+\n+extern void g (void);\n+int\n+f (void)\n+{\n+  g ();\n+  return 42;\n+}\n+\n+/* { dg-final { scan-assembler-not \"(sub|add)(l|q)\\[\\\\t \\]*\\\\$\\[0-9\\]*,\\[\\\\t \\]*%\\[re\\]?sp\" } } */"}]}