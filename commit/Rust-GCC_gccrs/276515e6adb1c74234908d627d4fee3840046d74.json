{"sha": "276515e6adb1c74234908d627d4fee3840046d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2NTE1ZTZhZGIxYzc0MjM0OTA4ZDYyN2Q0ZmVlMzg0MDA0NmQ3NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-12-01T15:05:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-12-01T15:05:55Z"}, "message": "re PR fortran/82605 ([PDT] ICE in insert_parameter_exprs, at fortran/decl.c:3154)\n\n2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82605\n\t* resolve.c (get_pdt_constructor): Initialize 'cons' to NULL.\n\t(resolve_pdt): Correct typo in prior comment. Emit an error if\n\tany parameters are deferred and the object is neither pointer\n\tnor allocatable.\n\n\tPR fortran/82606\n\t* decl.c (gfc_get_pdt_instance): Continue if the parameter sym\n\tis not present or has no name. Select the parameter by name\n\tof component, rather than component order. Remove all the other\n\tmanipulations of 'tail' when building the pdt instance.\n\t(gfc_match_formal_arglist): Emit and error if a star is picked\n\tup in a PDT decl parameter list.\n\n\tPR fortran/82622\n\t* trans-array.c (set_loop_bounds): If a GFC_SS_COMPONENT has an\n\tinfo->end, use it rather than falling through to\n\tgcc_unreachable.\n\t(structure_alloc_comps): Check that param->name is non-null\n\tbefore comparing with the component name.\n\t* trans-decl.c (gfc_get_symbol_decl): Do not use the static\n\tinitializer for PDT symbols.\n\t(gfc_init_default_dt): Do nothing for PDT symbols.\n\t* trans-io.c (transfer_array_component): Parameterized array\n\tcomponents use the descriptor ubound since the shape is not\n\tavailable.\n\n\tPR fortran/82719\n\tPR fortran/82720\n\t* trans-expr.c (gfc_conv_component_ref): Do not use the charlen\n\tbackend_decl of pdt strings. Use the hidden component instead.\n\t* trans-io.c (transfer_expr): Do not do IO on \"hidden\" string\n\tlengths. Use the hidden string length for pdt string transfers\n\tby adding it to the se structure. When finished nullify the\n\tse string length.\n\n\tPR fortran/82866\n\t* decl.c (gfc_match_formal_arglist): If a name is not found or\n\tstar is found, while reading a type parameter list, emit an\n\timmediate error.\n\t(gfc_match_derived_decl): On reading a PDT parameter list, on\n\tfailure to match call gfc_error_recovery.\n\n\tPR fortran/82978\n\t* decl.c (build_struct): Character kind defaults to 1, so use\n\tkind_expr whatever is the set value.\n\t(gfc_get_pdt_instance): Ditto.\n\t* trans-array.c (structure_alloc_comps): Copy the expression\n\tfor the PDT string length before parameter substitution. Use\n\tthis expression for evaluation and free it after use.\n\n2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82605\n\t* gfortran.dg/pdt_4.f03 : Incorporate the new error.\n\n\tPR fortran/82606\n\t* gfortran.dg/pdt_19.f03 : New test.\n\t* gfortran.dg/pdt_21.f03 : New test.\n\n\tPR fortran/82622\n\t* gfortran.dg/pdt_20.f03 : New test.\n\t* gfortran.dg/pdt_22.f03 : New test.\n\n\tPR fortran/82719\n\tPR fortran/82720\n\t* gfortran.dg/pdt_23.f03 : New test.\n\n\tPR fortran/82866\n\t* gfortran.dg/pdt_24.f03 : New test.\n\n\tPR fortran/82978\n\t* gfortran.dg/pdt_10.f03 : Correct for error in coding the for\n\tkind 4 component and change the kind check appropriately.\n\t* gfortran.dg/pdt_25.f03 : New test.\n\nFrom-SVN: r255311", "tree": {"sha": "4d2b578e5bf55e2797591227105877bd53876596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d2b578e5bf55e2797591227105877bd53876596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/276515e6adb1c74234908d627d4fee3840046d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276515e6adb1c74234908d627d4fee3840046d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/276515e6adb1c74234908d627d4fee3840046d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276515e6adb1c74234908d627d4fee3840046d74/comments", "author": null, "committer": null, "parents": [{"sha": "ebdc83f0a8bc06147df7bf00fa4b3b805fa331c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdc83f0a8bc06147df7bf00fa4b3b805fa331c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdc83f0a8bc06147df7bf00fa4b3b805fa331c0"}], "stats": {"total": 412, "additions": 374, "deletions": 38}, "files": [{"sha": "75a2b7a4108de80c16130758af18e98949294e2c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -1,3 +1,56 @@\n+2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82605\n+\t* resolve.c (get_pdt_constructor): Initialize 'cons' to NULL.\n+\t(resolve_pdt): Correct typo in prior comment. Emit an error if\n+\tany parameters are deferred and the object is neither pointer\n+\tnor allocatable.\n+\n+\tPR fortran/82606\n+\t* decl.c (gfc_get_pdt_instance): Continue if the parameter sym\n+\tis not present or has no name. Select the parameter by name\n+\tof component, rather than component order. Remove all the other\n+\tmanipulations of 'tail' when building the pdt instance.\n+\t(gfc_match_formal_arglist): Emit and error if a star is picked\n+\tup in a PDT decl parameter list.\n+\n+\tPR fortran/82622\n+\t* trans-array.c (set_loop_bounds): If a GFC_SS_COMPONENT has an\n+\tinfo->end, use it rather than falling through to\n+\tgcc_unreachable.\n+\t(structure_alloc_comps): Check that param->name is non-null\n+\tbefore comparing with the component name.\n+\t* trans-decl.c (gfc_get_symbol_decl): Do not use the static\n+\tinitializer for PDT symbols.\n+\t(gfc_init_default_dt): Do nothing for PDT symbols.\n+\t* trans-io.c (transfer_array_component): Parameterized array\n+\tcomponents use the descriptor ubound since the shape is not\n+\tavailable.\n+\n+\tPR fortran/82719\n+\tPR fortran/82720\n+\t* trans-expr.c (gfc_conv_component_ref): Do not use the charlen\n+\tbackend_decl of pdt strings. Use the hidden component instead.\n+\t* trans-io.c (transfer_expr): Do not do IO on \"hidden\" string\n+\tlengths. Use the hidden string length for pdt string transfers\n+\tby adding it to the se structure. When finished nullify the\n+\tse string length.\n+\n+\tPR fortran/82866\n+\t* decl.c (gfc_match_formal_arglist): If a name is not found or\n+\tstar is found, while reading a type parameter list, emit an\n+\timmediate error.\n+\t(gfc_match_derived_decl): On reading a PDT parameter list, on\n+\tfailure to match call gfc_error_recovery.\n+\n+\tPR fortran/82978\n+\t* decl.c (build_struct): Character kind defaults to 1, so use\n+\tkind_expr whatever is the set value.\n+\t(gfc_get_pdt_instance): Ditto.\n+\t* trans-array.c (structure_alloc_comps): Copy the expression\n+\tfor the PDT string length before parameter substitution. Use\n+\tthis expression for evaluation and free it after use.\n+\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/79153"}, {"sha": "67e1c5bf314aa278280ff8b89c5951dcc547ddb4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -1971,7 +1971,8 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n     c->ts.u.cl = cl;\n \n   if (c->ts.type != BT_CLASS && c->ts.type != BT_DERIVED\n-      && c->ts.kind == 0 && saved_kind_expr != NULL)\n+      && (c->ts.kind == 0 || c->ts.type == BT_CHARACTER)\n+      && saved_kind_expr != NULL)\n     c->kind_expr = gfc_copy_expr (saved_kind_expr);\n \n   c->attr = current_attr;\n@@ -3250,6 +3251,9 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \tname_seen = true;\n       param = type_param_name_list->sym;\n \n+      if (!param || !param->name)\n+\tcontinue;\n+\n       c1 = gfc_find_component (pdt, param->name, false, true, NULL);\n       /* An error should already have been thrown in resolve.c\n \t (resolve_fl_derived0).  */\n@@ -3406,9 +3410,19 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n   for (; c1; c1 = c1->next)\n     {\n       gfc_add_component (instance, c1->name, &c2);\n+\n       c2->ts = c1->ts;\n       c2->attr = c1->attr;\n \n+      /* The order of declaration of the type_specs might not be the\n+\t same as that of the components.  */\n+      if (c1->attr.pdt_kind || c1->attr.pdt_len)\n+\t{\n+\t  for (tail = type_param_spec_list; tail; tail = tail->next)\n+\t    if (strcmp (c1->name, tail->name) == 0)\n+\t      break;\n+\t}\n+\n       /* Deal with type extension by recursively calling this function\n \t to obtain the instance of the extended type.  */\n       if (gfc_current_state () != COMP_DERIVED\n@@ -3453,17 +3467,12 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \t    }\n \t  instance->attr.extension = c2->ts.u.derived->attr.extension + 1;\n \n-\t  /* Advance the position in the spec list by the number of\n-\t     parameters in the extended type.  */\n-\t  tail = type_param_spec_list;\n-\t  for (f = c1->ts.u.derived->formal; f && f->next; f = f->next)\n-\t    tail = tail->next;\n-\n \t  continue;\n \t}\n \n       /* Set the component kind using the parameterized expression.  */\n-      if (c1->ts.kind == 0 && c1->kind_expr != NULL)\n+      if ((c1->ts.kind == 0 || c1->ts.type == BT_CHARACTER)\n+\t   && c1->kind_expr != NULL)\n \t{\n \t  gfc_expr *e = gfc_copy_expr (c1->kind_expr);\n \t  gfc_insert_kind_parameter_exprs (e);\n@@ -3509,8 +3518,6 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \n \t  if (!c2->initializer && c1->initializer)\n \t    c2->initializer = gfc_copy_expr (c1->initializer);\n-\n-\t  tail = tail->next;\n \t}\n \n       /* Copy the array spec.  */\n@@ -5944,18 +5951,24 @@ gfc_match_formal_arglist (gfc_symbol *progname, int st_flag,\n       if (gfc_match_char ('*') == MATCH_YES)\n \t{\n \t  sym = NULL;\n-\t  if (!gfc_notify_std (GFC_STD_F95_OBS, \"Alternate-return argument \"\n-\t\t\t       \"at %C\"))\n+\t  if (!typeparam && !gfc_notify_std (GFC_STD_F95_OBS,\n+\t\t\t     \"Alternate-return argument at %C\"))\n \t    {\n \t      m = MATCH_ERROR;\n \t      goto cleanup;\n \t    }\n+\t  else if (typeparam)\n+\t    gfc_error_now (\"A parameter name is required at %C\");\n \t}\n       else\n \t{\n \t  m = gfc_match_name (name);\n \t  if (m != MATCH_YES)\n-\t    goto cleanup;\n+\t    {\n+\t      if(typeparam)\n+\t\tgfc_error_now (\"A parameter name is required at %C\");\n+\t      goto cleanup;\n+\t    }\n \n \t  if (!typeparam && gfc_get_symbol (name, NULL, &sym))\n \t    goto cleanup;\n@@ -9828,9 +9841,11 @@ gfc_match_derived_decl (void)\n \n   if (parameterized_type)\n     {\n-      /* Ignore error or mismatches to avoid the component declarations\n-\t causing problems later.  */\n-      gfc_match_formal_arglist (sym, 0, 0, true);\n+      /* Ignore error or mismatches by going to the end of the statement\n+\t in order to avoid the component declarations causing problems.  */\n+      m = gfc_match_formal_arglist (sym, 0, 0, true);\n+      if (m != MATCH_YES)\n+\tgfc_error_recovery ();\n       m = gfc_match_eos ();\n       if (m != MATCH_YES)\n \treturn m;"}, {"sha": "041ee0d6459854b562b045f68c0b6a60b6dfea9e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -1174,7 +1174,7 @@ static bool\n get_pdt_constructor (gfc_expr *expr, gfc_constructor **constr,\n \t\t     gfc_symbol *derived)\n {\n-  gfc_constructor *cons;\n+  gfc_constructor *cons = NULL;\n   gfc_component *comp;\n   bool t = true;\n \n@@ -14010,6 +14010,8 @@ resolve_fl_derived0 (gfc_symbol *sym)\n     {\n       for (f = sym->formal; f; f = f->next)\n \t{\n+\t  if (!f->sym)\n+\t    continue;\n \t  c = gfc_find_component (sym, f->sym->name, true, true, NULL);\n \t  if (c == NULL)\n \t    {\n@@ -14283,7 +14285,7 @@ resolve_fl_parameter (gfc_symbol *sym)\n }\n \n \n-/* Called by resolve_symbol to chack PDTs.  */\n+/* Called by resolve_symbol to check PDTs.  */\n \n static void\n resolve_pdt (gfc_symbol* sym)\n@@ -14293,11 +14295,18 @@ resolve_pdt (gfc_symbol* sym)\n   gfc_component *c;\n   bool const_len_exprs = true;\n   bool assumed_len_exprs = false;\n+  symbol_attribute *attr;\n \n   if (sym->ts.type == BT_DERIVED)\n-    derived = sym->ts.u.derived;\n+    {\n+      derived = sym->ts.u.derived;\n+      attr = &(sym->attr);\n+    }\n   else if (sym->ts.type == BT_CLASS)\n-    derived = CLASS_DATA (sym)->ts.u.derived;\n+    {\n+      derived = CLASS_DATA (sym)->ts.u.derived;\n+      attr = &(CLASS_DATA (sym)->attr);\n+    }\n   else\n     gcc_unreachable ();\n \n@@ -14315,6 +14324,14 @@ resolve_pdt (gfc_symbol* sym)\n \tconst_len_exprs = false;\n       else if (param->spec_type == SPEC_ASSUMED)\n \tassumed_len_exprs = true;\n+\n+      if (param->spec_type == SPEC_DEFERRED\n+\t  && !attr->allocatable && !attr->pointer)\n+\tgfc_error (\"The object %qs at %L has a deferred LEN \"\n+\t\t   \"parameter %qs and is neither allocatable \"\n+\t\t   \"nor a pointer\", sym->name, &sym->declared_at,\n+\t\t   param->name);\n+\n     }\n \n   if (!const_len_exprs"}, {"sha": "155702a0a10255842bb121d32f14c1c3420fb3a6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -5043,6 +5043,17 @@ set_loop_bounds (gfc_loopinfo *loop)\n \t\tbreak;\n \t      }\n \n+\t    case GFC_SS_COMPONENT:\n+\t      {\n+\t\tif (info->end[dim] != NULL_TREE)\n+\t\t  {\n+\t\t    loop->to[n] = info->end[dim];\n+\t\t    break;\n+\t\t  }\n+\t\telse\n+\t\t  gcc_unreachable ();\n+\t      }\n+\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n@@ -8975,7 +8986,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      gfc_actual_arglist *param = pdt_param_list;\n \t      gfc_init_se (&tse, NULL);\n \t      for (; param; param = param->next)\n-\t\tif (!strcmp (c->name, param->name))\n+\t\tif (param->name && !strcmp (c->name, param->name))\n \t\t  c_expr = param->expr;\n \n \t      if (!c_expr)\n@@ -8992,21 +9003,24 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t    {\n \t      gfc_se tse;\n \t      gfc_init_se (&tse, NULL);\n-\t      tree strlen;\n+\t      tree strlen = NULL_TREE;\n+\t      gfc_expr *e = gfc_copy_expr (c->ts.u.cl->length);\n \t      /* Convert the parameterized string length to its value. The\n \t\t string length is stored in a hidden field in the same way as\n \t\t deferred string lengths.  */\n-\t      gfc_insert_parameter_exprs (c->ts.u.cl->length, pdt_param_list);\n+\t      gfc_insert_parameter_exprs (e, pdt_param_list);\n \t      if (gfc_deferred_strlen (c, &strlen) && strlen != NULL_TREE)\n \t\t{\n-\t\t  gfc_conv_expr_type (&tse, c->ts.u.cl->length,\n+\t\t  gfc_conv_expr_type (&tse, e,\n \t\t\t\t      TREE_TYPE (strlen));\n \t\t  strlen = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t\t\t    TREE_TYPE (strlen),\n \t\t\t\t\t    decl, strlen, NULL_TREE);\n \t\t  gfc_add_modify (&fnblock, strlen, tse.expr);\n \t\t  c->ts.u.cl->backend_decl = strlen;\n \t\t}\n+\t      gfc_free_expr (e);\n+\n \t      /* Scalar parameterizied strings can be allocated now.  */\n \t      if (!c->as)\n \t\t{"}, {"sha": "ada38b894c4176b810da31532d82dc8fdadc33e6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -1809,7 +1809,10 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  || !gfc_can_put_var_on_stack (DECL_SIZE_UNIT (decl))\n \t  || sym->attr.data || sym->ns->proc_name->attr.flavor == FL_MODULE)\n       && (flag_coarray != GFC_FCOARRAY_LIB\n-\t  || !sym->attr.codimension || sym->attr.allocatable))\n+\t  || !sym->attr.codimension || sym->attr.allocatable)\n+      && !(sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.pdt_type)\n+      && !(sym->ts.type == BT_CLASS\n+\t   && CLASS_DATA (sym)->ts.u.derived->attr.pdt_type))\n     {\n       /* Add static initializer. For procedures, it is only needed if\n \t SAVE is specified otherwise they need to be reinitialized\n@@ -4004,6 +4007,10 @@ gfc_init_default_dt (gfc_symbol * sym, stmtblock_t * block, bool dealloc)\n \n   gcc_assert (block);\n \n+  /* Initialization of PDTs is done elsewhere.  */\n+  if (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.pdt_type)\n+    return;\n+\n   gcc_assert (!sym->attr.allocatable);\n   gfc_set_sym_referenced (sym);\n   e = gfc_lval_expr_from_sym (sym);"}, {"sha": "2ba5c405cf7835638be01bfa9b7d3420f85b81fc", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -2401,7 +2401,8 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n   /* Allocatable deferred char arrays are to be handled by the gfc_deferred_\n      strlen () conditional below.  */\n   if (c->ts.type == BT_CHARACTER && !c->attr.proc_pointer\n-      && !(c->attr.allocatable && c->ts.deferred))\n+      && !(c->attr.allocatable && c->ts.deferred)\n+      && !c->attr.pdt_string)\n     {\n       tmp = c->ts.u.cl->backend_decl;\n       /* Components must always be constant length.  */"}, {"sha": "68486f86a67da7d330f67931865607cbf7b85a98", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -2146,7 +2146,12 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n   ss = gfc_get_array_ss (gfc_ss_terminator, NULL, cm->as->rank,\n \t\t\t GFC_SS_COMPONENT);\n   ss_array = &ss->info->data.array;\n-  ss_array->shape = gfc_get_shape (cm->as->rank);\n+\n+  if (cm->attr.pdt_array)\n+    ss_array->shape = NULL;\n+  else\n+    ss_array->shape = gfc_get_shape (cm->as->rank);\n+\n   ss_array->descriptor = expr;\n   ss_array->data = gfc_conv_array_data (expr);\n   ss_array->offset = gfc_conv_array_offset (expr);\n@@ -2155,10 +2160,15 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n       ss_array->start[n] = gfc_conv_array_lbound (expr, n);\n       ss_array->stride[n] = gfc_index_one_node;\n \n-      mpz_init (ss_array->shape[n]);\n-      mpz_sub (ss_array->shape[n], cm->as->upper[n]->value.integer,\n-               cm->as->lower[n]->value.integer);\n-      mpz_add_ui (ss_array->shape[n], ss_array->shape[n], 1);\n+      if (cm->attr.pdt_array)\n+\tss_array->end[n] = gfc_conv_array_ubound (expr, n);\n+      else\n+\t{\n+\t  mpz_init (ss_array->shape[n]);\n+\t  mpz_sub (ss_array->shape[n], cm->as->upper[n]->value.integer,\n+\t\t   cm->as->lower[n]->value.integer);\n+\t  mpz_add_ui (ss_array->shape[n], ss_array->shape[n], 1);\n+\t}\n     }\n \n   /* Once we got ss, we use scalarizer to create the loop.  */\n@@ -2193,8 +2203,11 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n   gfc_add_block_to_block (&block, &loop.pre);\n   gfc_add_block_to_block (&block, &loop.post);\n \n-  gcc_assert (ss_array->shape != NULL);\n-  gfc_free_shape (&ss_array->shape, cm->as->rank);\n+  if (!cm->attr.pdt_array)\n+    {\n+      gcc_assert (ss_array->shape != NULL);\n+      gfc_free_shape (&ss_array->shape, cm->as->rank);\n+    }\n   gfc_cleanup_loop (&loop);\n \n   return gfc_finish_block (&block);\n@@ -2452,6 +2465,10 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr,\n \n \t      for (c = ts->u.derived->components; c; c = c->next)\n \t\t{\n+\t\t  /* Ignore hidden string lengths.  */\n+\t\t  if (c->name[0] == '_')\n+\t\t    continue;\n+\n \t\t  field = c->backend_decl;\n \t\t  gcc_assert (field && TREE_CODE (field) == FIELD_DECL);\n \n@@ -2466,9 +2483,29 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr,\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      if (!c->attr.pointer)\n+\t\t      tree strlen = NULL_TREE;\n+\n+\t\t      if (!c->attr.pointer && !c->attr.pdt_string)\n \t\t\ttmp = gfc_build_addr_expr (NULL_TREE, tmp);\n+\n+\t\t      /* Use the hidden string length for pdt strings.  */\n+\t\t      if (c->attr.pdt_string\n+\t\t\t  && gfc_deferred_strlen (c, &strlen)\n+\t\t\t  && strlen != NULL_TREE)\n+\t\t\t{\n+\t\t\t  strlen = fold_build3_loc (UNKNOWN_LOCATION,\n+\t\t\t\t\t\t    COMPONENT_REF,\n+\t\t\t\t\t\t    TREE_TYPE (strlen),\n+\t\t\t\t\t\t    expr, strlen, NULL_TREE);\n+\t\t\t  se->string_length = strlen;\n+\t\t\t}\n+\n \t\t      transfer_expr (se, &c->ts, tmp, code, NULL_TREE);\n+\n+\t\t      /* Reset so that the pdt string length does not propagate\n+\t\t\t through to other strings.  */\n+\t\t      if (c->attr.pdt_string && strlen)\n+\t\t\tse->string_length = NULL_TREE;\n \t\t   }\n \t\t}\n \t      return;"}, {"sha": "cd00f52b5745caba4d7a76e2c4d4a83f716a4a99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -1,3 +1,28 @@\n+2017-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82605\n+\t* gfortran.dg/pdt_4.f03 : Incorporate the new error.\n+\n+\tPR fortran/82606\n+\t* gfortran.dg/pdt_19.f03 : New test.\n+\t* gfortran.dg/pdt_21.f03 : New test.\n+\n+\tPR fortran/82622\n+\t* gfortran.dg/pdt_20.f03 : New test.\n+\t* gfortran.dg/pdt_22.f03 : New test.\n+\n+\tPR fortran/82719\n+\tPR fortran/82720\n+\t* gfortran.dg/pdt_23.f03 : New test.\n+\n+\tPR fortran/82866\n+\t* gfortran.dg/pdt_24.f03 : New test.\n+\n+\tPR fortran/82978\n+\t* gfortran.dg/pdt_10.f03 : Correct for error in coding the for\n+\tkind 4 component and change the kind check appropriately.\n+\t* gfortran.dg/pdt_25.f03 : New test.\n+\n 2017-12-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83232"}, {"sha": "35c3bdd2fc0b352cdde3d037495609a3d9e7103d", "filename": "gcc/testsuite/gfortran.dg/pdt_10.f03", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_10.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -10,6 +10,7 @@ program p\n    use, intrinsic :: iso_fortran_env, only : CK => character_kinds\n    implicit none\n    character(kind = 4), parameter :: c = 'a'\n+   character(kind = 4), parameter :: hello = \"Hello World!\"\n    type :: pdt_t(k,l)\n       integer, kind :: k = CK(1)\n       integer, len :: l\n@@ -23,8 +24,8 @@ program p\n    if (KIND (foo%s) .ne. 1) call abort\n    if (len (foo%s) .ne. 12) call abort\n \n-   foo_4%s = \"Hello World!\"\n-   if (foo_4%s .ne. \"Hello World!\") call abort\n-   if (KIND (foo_4%s) .ne. 1) call abort\n+   foo_4%s = hello\n+   if (foo_4%s .ne. hello) call abort\n+   if (KIND (foo_4%s) .ne. 4) call abort\n    if (len (foo_4%s) .ne. 12) call abort\n end program"}, {"sha": "3a12e0e3556502cd3b11cc2d78ce512cbe8610df", "filename": "gcc/testsuite/gfortran.dg/pdt_19.f03", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_19.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR82606.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t(a, b)\n+      integer, len :: b   ! Note different order of component declarations\n+      integer, kind :: a  ! compared with the type_spec_list order.\n+      real(a) :: r(b)\n+   end type\n+   type(t(8, :)), allocatable :: x\n+   real(x%a) :: y         ! Used to die here because initializers were mixed up.\n+   allocate(t(8, 2) :: x)\n+   if (kind(y) .ne. x%a) call abort\n+   deallocate(x)\n+end"}, {"sha": "a8028a227aff445fc3eef75f2973fae05041c162", "filename": "gcc/testsuite/gfortran.dg/pdt_20.f03", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_20.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR82622.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t(a)\n+      integer, len :: a\n+   end type\n+   type t2(b)\n+      integer, len :: b\n+      type(t(1)) :: r(b)\n+   end type\n+   type(t2(:)), allocatable :: x\n+   allocate (t2(3) :: x)            ! Used to segfault in trans-array.c.\n+   if (x%b .ne. 3) call abort\n+   if (x%b .ne. size (x%r, 1)) call abort\n+   if (any (x%r%a .ne. 1)) call abort\n+end"}, {"sha": "0788e8b3cdccada1a5aa87d92cb433a275163115", "filename": "gcc/testsuite/gfortran.dg/pdt_21.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_21.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_21.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_21.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR82606 comment #1.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t(a, b, *) ! { dg-error \"A parameter name is required\" }\n+      integer, kind :: a\n+      integer, len :: b\n+      real(a) :: r(b)\n+   end type\n+   type(t(8, 3)) :: x\n+   real(x%a) :: y\n+end"}, {"sha": "3516ae2420a102b002aa709be9e98cb722e98195", "filename": "gcc/testsuite/gfortran.dg/pdt_22.f03", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_22.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_22.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_22.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR82622 comment #1, where the declaration of\n+! 'x' choked during initialization. Once fixed, it was found that\n+! IO was not working correctly for PDT array components.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(120) :: buffer\n+   integer :: i(4)\n+   type t(a)\n+      integer, len :: a\n+   end type\n+   type t2(b)\n+      integer, len :: b\n+      type(t(1)) :: r(b)\n+   end type\n+   type(t2(3)) :: x\n+   write (buffer,*) x\n+   read (buffer,*) i\n+   if (any (i .ne. [3,1,1,1])) call abort\n+end"}, {"sha": "045b68db3dbbe4a55b4b787c03a3d37bd0abbb9d", "filename": "gcc/testsuite/gfortran.dg/pdt_23.f03", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_23.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! Tests the fixes for PR82719 and PR82720.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(120) :: buffer\n+   character(3) :: chr\n+   integer :: i\n+   type t(a)\n+      integer, len :: a\n+      character(len=a) :: c\n+   end type\n+   type(t(:)), allocatable :: x\n+   allocate (t(2) :: x)\n+\n+   x = t(2,'ab')\n+   write (buffer, *) x%c ! Tests the fix for PR82720\n+   read (buffer, *) chr\n+   if (trim (chr) .ne. 'ab') call abort\n+\n+   x = t(3,'xyz')\n+   if (len (x%c) .ne. 3) call abort\n+   write (buffer, *) x   ! Tests the fix for PR82719\n+   read (buffer, *) i, chr\n+   if (i .ne. 3) call abort\n+   if (chr .ne. 'xyz') call abort\n+\n+   buffer = \" 3  lmn\"\n+   read (buffer, *) x   ! Some thought will be needed for PDT reads.\n+   if (x%c .ne. 'lmn') call abort\n+end"}, {"sha": "fb0a3d9da00f750f624f89ab9f7f0ff9ac179d76", "filename": "gcc/testsuite/gfortran.dg/pdt_24.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_24.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_24.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_24.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! Tests the fixes for PR82866.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+module s\n+   type t(*, a, :) ! { dg-error \"A parameter name is required\" }\n+     integer, len :: a\n+   end type\n+end"}, {"sha": "69dfdeb26e3db63d6aa135e76e4f4cb7a99206ec", "filename": "gcc/testsuite/gfortran.dg/pdt_25.f03", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_25.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_25.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_25.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -0,0 +1,43 @@\n+! {dg-do run }\n+!\n+! Tests the fix for PR82978 in which all the parameterized string\n+! lengths with the same value of parameter 'k' had the same value\n+! regardless of the value of 'l'. In this testcase, the length for\n+! 'l' = 5 was taken.\n+!\n+! Contributed by Fritz Reese  <foreese@gcc.gnu.org>\n+!\n+  implicit none\n+\n+  type :: pdt_t(k, l)\n+    integer, kind :: k\n+    integer, len :: l\n+    character(kind=k,len=l) :: chr\n+    integer :: i(l)\n+  end type\n+\n+  type(pdt_t(1, 4))   :: x1\n+  type(pdt_t(1, 5))   :: x2\n+  type(pdt_t(4, 5))   :: x3\n+\n+  call test (x1, 4)\n+  call test (x2, 5)\n+\n+! Kind tests appear because of problem identified in comment #!\n+! due to Dominque d'Humieres  <dominiq@lps.ens.fr>\n+\n+  if (kind (x2%chr) .ne. 1) call abort\n+  if (kind (x3%chr) .ne. 4) call abort\n+\n+contains\n+\n+  subroutine test (x, i)\n+    type(pdt_t(1, *)) :: x\n+    integer :: i\n+\n+    if (x%l .ne. i) call abort\n+    if (len(x%chr) .ne. i) call abort\n+    if (size(x%i,1) .ne. i) call abort\n+  end subroutine\n+\n+end"}, {"sha": "5e953286588c970bc17e14e6ffe6f41d3cad01be", "filename": "gcc/testsuite/gfortran.dg/pdt_4.f03", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276515e6adb1c74234908d627d4fee3840046d74/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03?ref=276515e6adb1c74234908d627d4fee3840046d74", "patch": "@@ -96,7 +96,10 @@ module bad_vars\n   subroutine foo(arg)\n     type (mytype(4, *)) :: arg      ! OK\n   end subroutine\n-  subroutine bar(arg)               ! OK\n+  subroutine bar(arg)               ! { dg-error \"is neither allocatable nor a pointer\" }\n     type (thytype(8, :, 4) :: arg\n   end subroutine\n+  subroutine foobar(arg)            ! OK\n+    type (thytype(8, *, 4) :: arg\n+  end subroutine\n end"}]}