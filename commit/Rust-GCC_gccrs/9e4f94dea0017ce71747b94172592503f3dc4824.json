{"sha": "9e4f94dea0017ce71747b94172592503f3dc4824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0Zjk0ZGVhMDAxN2NlNzE3NDdiOTQxNzI1OTI1MDNmM2RjNDgyNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-26T20:15:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-26T20:15:36Z"}, "message": "fde-glibc.c: Fix comment typos.\n\n\t* config/ia64/fde-glibc.c: Fix comment typos.\n\t* config/ia64/hpux.h: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ia64/unwind-ia64.c: Likewise.\n\nFrom-SVN: r61857", "tree": {"sha": "61332b35111b01643095d8689a02bf93de337797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61332b35111b01643095d8689a02bf93de337797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e4f94dea0017ce71747b94172592503f3dc4824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4f94dea0017ce71747b94172592503f3dc4824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e4f94dea0017ce71747b94172592503f3dc4824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4f94dea0017ce71747b94172592503f3dc4824/comments", "author": null, "committer": null, "parents": [{"sha": "4aae8a9a4b76096ecedba3b01161ba4e86d154be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aae8a9a4b76096ecedba3b01161ba4e86d154be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aae8a9a4b76096ecedba3b01161ba4e86d154be"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "4d839eae1b462426dfd58a2e373b3eaed9ff383c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -1,3 +1,11 @@\n+2003-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/ia64/fde-glibc.c: Fix comment typos.\n+\t* config/ia64/hpux.h: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ia64/unwind-ia64.c: Likewise.\n+\n 2003-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/i386/i386-modes.def: Fix comment typos."}, {"sha": "6bd193fdf41557829d608dc6b62093e08ccbc978", "filename": "gcc/config/ia64/fde-glibc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffde-glibc.c?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -121,7 +121,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n \n   if (p_dynamic)\n     {\n-      /* For dynamicly linked executables and shared libraries,\n+      /* For dynamically linked executables and shared libraries,\n \t DT_PLTGOT is the gp value for that object.  */\n       Elf64_Dyn *dyn = (Elf64_Dyn *)(p_dynamic->p_vaddr + load_base);\n       for (; dyn->d_tag != DT_NULL ; dyn++)"}, {"sha": "3ebb7be77ddec0026136ced50db54ae6e5161020", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Target OS builtins.  */\n /* -D__fpreg=long double is needed to compensate for\n-   the lack of __fpreg which is a primative type in\n+   the lack of __fpreg which is a primitive type in\n    HP C but does not exist in GNU C.  */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n do {\t\t\t\t\t\t\t\\"}, {"sha": "c641e2d6128fcecc2723ce7badb96d117afafa8e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -1036,7 +1036,7 @@ ia64_move_ok (dst, src)\n     return GET_CODE (src) == CONST_DOUBLE && CONST_DOUBLE_OK_FOR_G (src);\n }\n \n-/* Check if OP is a mask suitible for use with SHIFT in a dep.z instruction.\n+/* Check if OP is a mask suitable for use with SHIFT in a dep.z instruction.\n    Return the length of the field, or <= 0 on failure.  */\n \n int\n@@ -1779,7 +1779,7 @@ ia64_compute_frame_size (size)\n   i = regno - OUT_REG (0) + 1;\n \n   /* When -p profiling, we need one output register for the mcount argument.\n-     Likwise for -a profiling for the bb_init_func argument.  For -ax\n+     Likewise for -a profiling for the bb_init_func argument.  For -ax\n      profiling, we need two output registers for the two bb_init_trace_func\n      arguments.  */\n   if (current_function_profile)\n@@ -2246,7 +2246,7 @@ do_restore (move_fn, reg, cfa_off)\n \n /* Wrapper functions that discards the CONST_INT spill offset.  These\n    exist so that we can give gr_spill/gr_fill the offset they need and\n-   use a consistant function interface.  */\n+   use a consistent function interface.  */\n \n static rtx\n gen_movdi_x (dest, src, offset)\n@@ -2861,7 +2861,7 @@ ia64_expand_epilogue (sibcall_p)\n \t first available call clobbered register.  If there was a frame_pointer \n \t register, we may have swapped the names of r2 and HARD_FRAME_POINTER_REGNUM, \n \t so we have to make sure we're using the string \"r2\" when emitting\n-\t the register name for the assmbler.  */\n+\t the register name for the assembler.  */\n       if (current_frame_info.reg_fp && current_frame_info.reg_fp == GR_REG (2))\n \tfp = HARD_FRAME_POINTER_REGNUM;\n \n@@ -3392,7 +3392,7 @@ ia64_function_arg (cum, mode, type, named, incoming)\n     }\n \n   /* If there is a prototype, then FP values go in a FR register when\n-     named, and in a GR registeer when unnamed.  */\n+     named, and in a GR register when unnamed.  */\n   else if (cum->prototype)\n     {\n       if (! named)\n@@ -3532,7 +3532,7 @@ ia64_function_arg_advance (cum, mode, type, named)\n     cum->int_regs = cum->words;\n \n   /* If there is a prototype, then FP values go in a FR register when\n-     named, and in a GR registeer when unnamed.  */\n+     named, and in a GR register when unnamed.  */\n   else if (cum->prototype)\n     {\n       if (! named)\n@@ -3972,7 +3972,7 @@ ia64_print_operand (file, x, code)\n   return;\n }\n \f\n-/* Calulate the cost of moving data from a register in class FROM to\n+/* Calculate the cost of moving data from a register in class FROM to\n    one in class TO, using MODE.  */\n \n int\n@@ -5209,7 +5209,7 @@ safe_group_barrier_needed_p (insn)\n }\n \n /* INSNS is a chain of instructions.  Scan the chain, and insert stop bits\n-   as necessary to eliminate dependendencies.  This function assumes that\n+   as necessary to eliminate dependencies.  This function assumes that\n    a final instruction scheduling pass has been run which has already\n    inserted most of the necessary stop bits.  This function only inserts\n    new ones at basic block boundaries, since these are invisible to the\n@@ -5484,7 +5484,7 @@ static const char *bundle_name [NR_BUNDLES] =\n \n int ia64_final_schedule = 0;\n \n-/* Codes of the corrsponding quieryied units: */\n+/* Codes of the corresponding quieryied units: */\n \n static int _0mii_, _0mmi_, _0mfi_, _0mmf_;\n static int _0bbb_, _0mbb_, _0mib_, _0mmb_, _0mfb_, _0mlx_;\n@@ -5517,7 +5517,7 @@ static state_t temp_dfa_state = NULL;\n static state_t prev_cycle_state = NULL;\n \n /* The following array element values are TRUE if the corresponding\n-   insn reuqires to add stop bits before it.  */\n+   insn requires to add stop bits before it.  */\n \n static char *stops_p;\n "}, {"sha": "fb51797b51f1b7ec6687b836094a7ccf78b90975", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -589,7 +589,7 @@ while (0)\n    all the FIXED_REGISTERS.  Until this problem has been\n    resolved this macro can be used to overcome this situation.\n    In particular, block_propagate() requires this list\n-   be acurate, or we can remove registers which should be live.\n+   be accurate, or we can remove registers which should be live.\n    This macro is used in regs_invalidated_by_call.  */\n \n #define CALL_REALLY_USED_REGISTERS \\"}, {"sha": "9aae673c06893978f9673b3c77aa19b3591a1072", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4f94dea0017ce71747b94172592503f3dc4824/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=9e4f94dea0017ce71747b94172592503f3dc4824", "patch": "@@ -1465,7 +1465,7 @@ ia64_rse_rnat_addr (unsigned long *slot_addr)\n   return (unsigned long *) ((unsigned long) slot_addr | (0x3f << 3));\n }\n \n-/* Calcuate the number of registers in the dirty partition starting at\n+/* Calculate the number of registers in the dirty partition starting at\n    BSPSTORE with a size of DIRTY bytes.  This isn't simply DIRTY\n    divided by eight because the 64th slot is used to store ar.rnat.  */\n static inline unsigned long"}]}