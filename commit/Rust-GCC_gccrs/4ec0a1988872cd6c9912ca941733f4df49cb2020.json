{"sha": "4ec0a1988872cd6c9912ca941733f4df49cb2020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjMGExOTg4ODcyY2Q2Yzk5MTJjYTk0MTczM2Y0ZGY0OWNiMjAyMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-07-06T11:07:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-07-06T11:07:32Z"}, "message": "re PR tree-optimization/52009 (Another missed tail merging opportunity)\n\n2012-07-06  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/52009\n\t* tree-ssa-tail-merge.c (gimple_equal_p): For GIMPLE_ASSIGN, compare\n\tvalue numbers of gimple_vdef.\n\t* tree-ssa-sccvn.h (vn_reference_insert): Add vdef parameter to\n\tprototype.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Handle MODIFY_EXPR.\n\t(vn_reference_insert): Add and handle vdef parameter.\n\t(visit_reference_op_load): Add argument to vn_reference_insert call.\n\t(visit_reference_op_store): Find value number of vdef of store.  Insert\n\tvalue number of vdef of store.\n\nFrom-SVN: r189321", "tree": {"sha": "59363a6bdd234708373380456b551c1ba94f47c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59363a6bdd234708373380456b551c1ba94f47c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ec0a1988872cd6c9912ca941733f4df49cb2020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec0a1988872cd6c9912ca941733f4df49cb2020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec0a1988872cd6c9912ca941733f4df49cb2020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec0a1988872cd6c9912ca941733f4df49cb2020/comments", "author": null, "committer": null, "parents": [{"sha": "e81941b70ea127c83c7c5ac1754bb15925fea2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81941b70ea127c83c7c5ac1754bb15925fea2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81941b70ea127c83c7c5ac1754bb15925fea2b9"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "12339ad08739f65e321416b5716888674efbdafb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ec0a1988872cd6c9912ca941733f4df49cb2020", "patch": "@@ -1,3 +1,16 @@\n+2012-07-06  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/52009\n+\t* tree-ssa-tail-merge.c (gimple_equal_p): For GIMPLE_ASSIGN, compare\n+\tvalue numbers of gimple_vdef.\n+\t* tree-ssa-sccvn.h (vn_reference_insert): Add vdef parameter to\n+\tprototype.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Handle MODIFY_EXPR.\n+\t(vn_reference_insert): Add and handle vdef parameter.\n+\t(visit_reference_op_load): Add argument to vn_reference_insert call.\n+\t(visit_reference_op_store): Find value number of vdef of store.  Insert\n+\tvalue number of vdef of store.\n+\n 2012-07-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (simple lea to add peephole): Also transform"}, {"sha": "cd1acde49dfc231db331a5a3ab06fa1095c40e23", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=4ec0a1988872cd6c9912ca941733f4df49cb2020", "patch": "@@ -628,6 +628,9 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \n       switch (temp.opcode)\n \t{\n+\tcase MODIFY_EXPR:\n+\t  temp.op0 = TREE_OPERAND (ref, 1);\n+\t  break;\n \tcase WITH_SIZE_EXPR:\n \t  temp.op0 = TREE_OPERAND (ref, 1);\n \t  temp.off = 0;\n@@ -748,6 +751,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n       VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n \n       if (REFERENCE_CLASS_P (ref)\n+\t  || TREE_CODE (ref) == MODIFY_EXPR\n \t  || TREE_CODE (ref) == WITH_SIZE_EXPR\n \t  || (TREE_CODE (ref) == ADDR_EXPR\n \t      && !is_gimple_min_invariant (ref)))\n@@ -1941,7 +1945,7 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n    RESULT, and return the resulting reference structure we created.  */\n \n vn_reference_t\n-vn_reference_insert (tree op, tree result, tree vuse)\n+vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n {\n   void **slot;\n   vn_reference_t vr1;\n@@ -1957,6 +1961,7 @@ vn_reference_insert (tree op, tree result, tree vuse)\n   vr1->set = get_alias_set (op);\n   vr1->hashcode = vn_reference_compute_hash (vr1);\n   vr1->result = TREE_CODE (result) == SSA_NAME ? SSA_VAL (result) : result;\n+  vr1->result_vdef = vdef;\n \n   slot = htab_find_slot_with_hash (current_info->references, vr1, vr1->hashcode,\n \t\t\t\t   INSERT);\n@@ -2775,7 +2780,7 @@ visit_reference_op_load (tree lhs, tree op, gimple stmt)\n   else\n     {\n       changed = set_ssa_val_to (lhs, lhs);\n-      vn_reference_insert (op, lhs, last_vuse);\n+      vn_reference_insert (op, lhs, last_vuse, NULL_TREE);\n     }\n \n   return changed;\n@@ -2789,8 +2794,11 @@ static bool\n visit_reference_op_store (tree lhs, tree op, gimple stmt)\n {\n   bool changed = false;\n-  tree result;\n+  vn_reference_t vnresult = NULL;\n+  tree result, assign;\n   bool resultsame = false;\n+  tree vuse = gimple_vuse (stmt);\n+  tree vdef = gimple_vdef (stmt);\n \n   /* First we want to lookup using the *vuses* from the store and see\n      if there the last store to this location with the same address\n@@ -2808,7 +2816,7 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n      Otherwise, the vdefs for the store are used when inserting into\n      the table, since the store generates a new memory state.  */\n \n-  result = vn_reference_lookup (lhs, gimple_vuse (stmt), VN_NOWALK, NULL);\n+  result = vn_reference_lookup (lhs, vuse, VN_NOWALK, NULL);\n \n   if (result)\n     {\n@@ -2821,8 +2829,17 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n \n   if (!result || !resultsame)\n     {\n-      tree vdef;\n+      assign = build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, op);\n+      vn_reference_lookup (assign, vuse, VN_NOWALK, &vnresult);\n+      if (vnresult)\n+\t{\n+\t  VN_INFO (vdef)->use_processed = true;\n+\t  return set_ssa_val_to (vdef, vnresult->result_vdef);\n+\t}\n+    }\n \n+  if (!result || !resultsame)\n+    {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"No store match\\n\");\n@@ -2834,30 +2851,29 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n \t}\n       /* Have to set value numbers before insert, since insert is\n \t going to valueize the references in-place.  */\n-      if ((vdef = gimple_vdef (stmt)))\n+      if (vdef)\n \t{\n \t  changed |= set_ssa_val_to (vdef, vdef);\n \t}\n \n       /* Do not insert structure copies into the tables.  */\n       if (is_gimple_min_invariant (op)\n \t  || is_gimple_reg (op))\n-        vn_reference_insert (lhs, op, vdef);\n+        vn_reference_insert (lhs, op, vdef, NULL);\n+\n+      assign = build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, op);\n+      vn_reference_insert (assign, lhs, vuse, vdef);\n     }\n   else\n     {\n       /* We had a match, so value number the vdef to have the value\n \t number of the vuse it came from.  */\n-      tree def, use;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Store matched earlier value,\"\n \t\t \"value numbering store vdefs to matching vuses.\\n\");\n \n-      def = gimple_vdef (stmt);\n-      use = gimple_vuse (stmt);\n-\n-      changed |= set_ssa_val_to (def, SSA_VAL (use));\n+      changed |= set_ssa_val_to (vdef, SSA_VAL (vuse));\n     }\n \n   return changed;"}, {"sha": "6109463ffa9d062d189e7c219cdf6b63f87b9c3a", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=4ec0a1988872cd6c9912ca941733f4df49cb2020", "patch": "@@ -200,7 +200,7 @@ tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t VEC (vn_reference_op_s, heap) *,\n \t\t\t\t vn_reference_t *, vn_lookup_kind);\n tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *);\n-vn_reference_t vn_reference_insert (tree, tree, tree);\n+vn_reference_t vn_reference_insert (tree, tree, tree, tree);\n vn_reference_t vn_reference_insert_pieces (tree, alias_set_type, tree,\n \t\t\t\t\t   VEC (vn_reference_op_s, heap) *,\n \t\t\t\t\t   tree, unsigned int);"}, {"sha": "9ec3b8a5091b1a6a67deef5157ee84be4d0bc4a5", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec0a1988872cd6c9912ca941733f4df49cb2020/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=4ec0a1988872cd6c9912ca941733f4df49cb2020", "patch": "@@ -1119,6 +1119,14 @@ gimple_equal_p (same_succ same_succ, gimple s1, gimple s2)\n     case GIMPLE_ASSIGN:\n       lhs1 = gimple_get_lhs (s1);\n       lhs2 = gimple_get_lhs (s2);\n+      if (gimple_vdef (s1))\n+\t{\n+\t  if (vn_valueize (gimple_vdef (s1)) != vn_valueize (gimple_vdef (s2)))\n+\t    return false;\n+\t  if (TREE_CODE (lhs1) != SSA_NAME\n+\t      && TREE_CODE (lhs2) != SSA_NAME)\n+\t    return true;\n+\t}\n       return (TREE_CODE (lhs1) == SSA_NAME\n \t      && TREE_CODE (lhs2) == SSA_NAME\n \t      && vn_valueize (lhs1) == vn_valueize (lhs2));"}]}