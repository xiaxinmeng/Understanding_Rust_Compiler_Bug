{"sha": "4d0a023751b086e7f11dc4529042104a9bd8cb1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwYTAyMzc1MWIwODZlN2YxMWRjNDUyOTA0MjEwNGE5YmQ4Y2IxYg==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2015-07-22T10:44:16Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2015-07-22T10:44:16Z"}, "message": "re PR target/63870 ([Aarch64] [ARM] Errors in use of NEON intrinsics are reported incorrectly)\n\ngcc/ChangeLog:\n\n2015-07-22  Charles Baylis  <charles.baylis@linaro.org>\n\n\tPR target/63870\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers):\n\tAdd qualifier_struct_load_store_lane_index.\n\t(aarch64_types_loadstruct_lane_qualifiers): Use\n\tqualifier_struct_load_store_lane_index for lane index argument for\n\tlast argument.\n\t(aarch64_types_storestruct_lane_qualifiers): Ditto.\n\t(builtin_simd_arg): Add SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n\t(aarch64_simd_expand_args): Add new argument describing mode of\n\tbuiltin. Check lane bounds for arguments with\n\tSIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n\t(aarch64_simd_expand_builtin): Emit error for incorrect lane indices\n\tif marked with SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n\t(aarch64_simd_expand_builtin): Handle arguments with\n\tqualifier_struct_load_store_lane_index. Pass machine mode of builtin to\n\taarch64_simd_expand_args.\n\t* config/aarch64/aarch64-simd-builtins.def: Declare ld[234]_lane and\n\tvst[234]_lane with BUILTIN_VALLDIF.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_vec_load_lanesoi_lane<mode>): Use VALLDIF iterator. Perform\n\tendianness reversal on lane index.\n\t(aarch64_vec_load_lanesci_lane<mode>): Ditto.\n\t(aarch64_vec_load_lanesxi_lane<mode>): Ditto.\n\t(vec_store_lanesoi_lane<mode>): Use VALLDIF iterator.\n\t(vec_store_lanesci_lane<mode>): Ditto.\n\t(vec_store_lanesxi_lane<mode>): Ditto.\n\t(aarch64_ld2_lane<mode>): Use VALLDIF iterator. Remove endianness\n\treversal of lane index.\n\t(aarch64_ld3_lane<mode>): Ditto.\n\t(aarch64_ld4_lane<mode>): Ditto.\n\t(aarch64_st2_lane<mode>): Ditto.\n\t(aarch64_st3_lane<mode>): Ditto.\n\t(aarch64_st4_lane<mode>): Ditto.\n\t* config/aarch64/arm_neon.h (__LD2_LANE_FUNC): Rename mode parameter\n\tto qmode. Add new mode parameter. Update uses.\n       \t(__LD3_LANE_FUNC): Ditto.\n\t(__LD4_LANE_FUNC): Ditto.\n\t(__ST2_LANE_FUNC): Ditto.\n\t(__ST3_LANE_FUNC): Ditto.\n\t(__ST4_LANE_FUNC): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n2015-07-22  Charles Baylis  <charles.baylis@linaro.org>\n\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_p8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s8_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u16_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u32_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u64_indices_1.c: New\n\ttest.\n        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u8_indices_1.c: New\n\ttest.\n\nFrom-SVN: r226059", "tree": {"sha": "deda13ca3d88880a785e6f8d8bd91e97d54ea58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deda13ca3d88880a785e6f8d8bd91e97d54ea58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d0a023751b086e7f11dc4529042104a9bd8cb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0a023751b086e7f11dc4529042104a9bd8cb1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0a023751b086e7f11dc4529042104a9bd8cb1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0a023751b086e7f11dc4529042104a9bd8cb1b/comments", "author": null, "committer": null, "parents": [{"sha": "ebaec5f07981378d779e45060d7fee9f419949aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaec5f07981378d779e45060d7fee9f419949aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebaec5f07981378d779e45060d7fee9f419949aa"}], "stats": {"total": 2800, "additions": 2621, "deletions": 179}, "files": [{"sha": "079432fd156411d3ddc657d9cc0cdafbf0c84c0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -1,3 +1,46 @@\n+2015-07-22  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/63870\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers):\n+\tAdd qualifier_struct_load_store_lane_index.\n+\t(aarch64_types_loadstruct_lane_qualifiers): Use\n+\tqualifier_struct_load_store_lane_index for lane index argument for\n+\tlast argument.\n+\t(aarch64_types_storestruct_lane_qualifiers): Ditto.\n+\t(builtin_simd_arg): Add SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n+\t(aarch64_simd_expand_args): Add new argument describing mode of\n+\tbuiltin. Check lane bounds for arguments with\n+\tSIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n+\t(aarch64_simd_expand_builtin): Emit error for incorrect lane indices\n+\tif marked with SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX.\n+\t(aarch64_simd_expand_builtin): Handle arguments with\n+\tqualifier_struct_load_store_lane_index. Pass machine mode of builtin to\n+\taarch64_simd_expand_args.\n+\t* config/aarch64/aarch64-simd-builtins.def: Declare ld[234]_lane and\n+\tvst[234]_lane with BUILTIN_VALLDIF.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_vec_load_lanesoi_lane<mode>): Use VALLDIF iterator. Perform\n+\tendianness reversal on lane index.\n+\t(aarch64_vec_load_lanesci_lane<mode>): Ditto.\n+\t(aarch64_vec_load_lanesxi_lane<mode>): Ditto.\n+\t(vec_store_lanesoi_lane<mode>): Use VALLDIF iterator.\n+\t(vec_store_lanesci_lane<mode>): Ditto.\n+\t(vec_store_lanesxi_lane<mode>): Ditto.\n+\t(aarch64_ld2_lane<mode>): Use VALLDIF iterator. Remove endianness\n+\treversal of lane index.\n+\t(aarch64_ld3_lane<mode>): Ditto.\n+\t(aarch64_ld4_lane<mode>): Ditto.\n+\t(aarch64_st2_lane<mode>): Ditto.\n+\t(aarch64_st3_lane<mode>): Ditto.\n+\t(aarch64_st4_lane<mode>): Ditto.\n+\t* config/aarch64/arm_neon.h (__LD2_LANE_FUNC): Rename mode parameter\n+\tto qmode. Add new mode parameter. Update uses.\n+       \t(__LD3_LANE_FUNC): Ditto.\n+\t(__LD4_LANE_FUNC): Ditto.\n+\t(__ST2_LANE_FUNC): Ditto.\n+\t(__ST3_LANE_FUNC): Ditto.\n+\t(__ST4_LANE_FUNC): Ditto.\n+\n 2015-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/invoke.texi (Language Independent Options): Rename node to"}, {"sha": "4b7832940610dc467863f0a3fb1a28f76873972f", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -114,7 +114,9 @@ enum aarch64_type_qualifiers\n   /* Polynomial types.  */\n   qualifier_poly = 0x100,\n   /* Lane indices - must be in range, and flipped for bigendian.  */\n-  qualifier_lane_index = 0x200\n+  qualifier_lane_index = 0x200,\n+  /* Lane indices for single lane structure loads and stores.  */\n+  qualifier_struct_load_store_lane_index = 0x400\n };\n \n typedef struct\n@@ -216,7 +218,7 @@ aarch64_types_load1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n static enum aarch64_type_qualifiers\n aarch64_types_loadstruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_const_pointer_map_mode,\n-      qualifier_none, qualifier_none };\n+      qualifier_none, qualifier_struct_load_store_lane_index };\n #define TYPES_LOADSTRUCT_LANE (aarch64_types_loadstruct_lane_qualifiers)\n \n static enum aarch64_type_qualifiers\n@@ -248,7 +250,7 @@ aarch64_types_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n static enum aarch64_type_qualifiers\n aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_pointer_map_mode,\n-      qualifier_none, qualifier_none };\n+      qualifier_none, qualifier_struct_load_store_lane_index };\n #define TYPES_STORESTRUCT_LANE (aarch64_types_storestruct_lane_qualifiers)\n \n #define CF0(N, X) CODE_FOR_aarch64_##N##X\n@@ -864,12 +866,14 @@ typedef enum\n   SIMD_ARG_COPY_TO_REG,\n   SIMD_ARG_CONSTANT,\n   SIMD_ARG_LANE_INDEX,\n+  SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX,\n   SIMD_ARG_STOP\n } builtin_simd_arg;\n \n static rtx\n aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n-\t\t\t  tree exp, builtin_simd_arg *args)\n+\t\t\t  tree exp, builtin_simd_arg *args,\n+\t\t\t  enum machine_mode builtin_mode)\n {\n   rtx pat;\n   rtx op[SIMD_MAX_BUILTIN_ARGS + 1]; /* First element for result operand.  */\n@@ -908,6 +912,19 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\top[opc] = copy_to_mode_reg (mode, op[opc]);\n \t      break;\n \n+\t    case SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX:\n+\t      gcc_assert (opc > 1);\n+\t      if (CONST_INT_P (op[opc]))\n+\t\t{\n+\t\t  aarch64_simd_lane_bounds (op[opc], 0,\n+\t\t\t\t\t    GET_MODE_NUNITS (builtin_mode),\n+\t\t\t\t\t    exp);\n+\t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n+\t\t  op[opc] =\n+\t\t    GEN_INT (ENDIAN_LANE_N (builtin_mode, INTVAL (op[opc])));\n+\t\t}\n+\t      goto constant_arg;\n+\n \t    case SIMD_ARG_LANE_INDEX:\n \t      /* Must be a previous operand into which this is an index.  */\n \t      gcc_assert (opc > 0);\n@@ -922,6 +939,7 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t      /* Fall through - if the lane index isn't a constant then\n \t\t the next case will error.  */\n \t    case SIMD_ARG_CONSTANT:\n+constant_arg:\n \t      if (!(*insn_data[icode].operand[opc].predicate)\n \t\t  (op[opc], mode))\n \t      {\n@@ -1030,6 +1048,8 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n \n       if (d->qualifiers[qualifiers_k] & qualifier_lane_index)\n \targs[k] = SIMD_ARG_LANE_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_struct_load_store_lane_index)\n+\targs[k] = SIMD_ARG_STRUCT_LOAD_STORE_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n \targs[k] = SIMD_ARG_CONSTANT;\n       else if (d->qualifiers[qualifiers_k] & qualifier_maybe_immediate)\n@@ -1053,7 +1073,7 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n   /* The interface to aarch64_simd_expand_args expects a 0 if\n      the function is void, and a 1 if it is not.  */\n   return aarch64_simd_expand_args\n-\t  (target, icode, !is_void, exp, &args[1]);\n+\t  (target, icode, !is_void, exp, &args[1], d->mode);\n }\n \n rtx"}, {"sha": "d0f298a1f075f51d4d47c6f364860dd1d0a545e0", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -88,9 +88,9 @@\n   BUILTIN_VALLDIF (LOADSTRUCT, ld3r, 0)\n   BUILTIN_VALLDIF (LOADSTRUCT, ld4r, 0)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs>_lane<VQ:mode>.  */\n-  BUILTIN_VQ (LOADSTRUCT_LANE, ld2_lane, 0)\n-  BUILTIN_VQ (LOADSTRUCT_LANE, ld3_lane, 0)\n-  BUILTIN_VQ (LOADSTRUCT_LANE, ld4_lane, 0)\n+  BUILTIN_VALLDIF (LOADSTRUCT_LANE, ld2_lane, 0)\n+  BUILTIN_VALLDIF (LOADSTRUCT_LANE, ld3_lane, 0)\n+  BUILTIN_VALLDIF (LOADSTRUCT_LANE, ld4_lane, 0)\n   /* Implemented by aarch64_st<VSTRUCT:nregs><VDC:mode>.  */\n   BUILTIN_VDC (STORESTRUCT, st2, 0)\n   BUILTIN_VDC (STORESTRUCT, st3, 0)\n@@ -100,9 +100,9 @@\n   BUILTIN_VQ (STORESTRUCT, st3, 0)\n   BUILTIN_VQ (STORESTRUCT, st4, 0)\n \n-  BUILTIN_VQ (STORESTRUCT_LANE, st2_lane, 0)\n-  BUILTIN_VQ (STORESTRUCT_LANE, st3_lane, 0)\n-  BUILTIN_VQ (STORESTRUCT_LANE, st4_lane, 0)\n+  BUILTIN_VALLDIF (STORESTRUCT_LANE, st2_lane, 0)\n+  BUILTIN_VALLDIF (STORESTRUCT_LANE, st3_lane, 0)\n+  BUILTIN_VALLDIF (STORESTRUCT_LANE, st4_lane, 0)\n \n   BUILTIN_VQW (BINOP, saddl2, 0)\n   BUILTIN_VQW (BINOP, uaddl2, 0)"}, {"sha": "d5da35ad769bfd9cca5d391b6dbb19480a8d51a0", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -3919,10 +3919,13 @@\n \t(unspec:OI [(match_operand:<V_TWO_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:OI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n \t\t   UNSPEC_LD2_LANE))]\n   \"TARGET_SIMD\"\n-  \"ld2\\\\t{%S0.<Vetype> - %T0.<Vetype>}[%3], %1\"\n+  {\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n+    return \"ld2\\\\t{%S0.<Vetype> - %T0.<Vetype>}[%3], %1\";\n+  }\n   [(set_attr \"type\" \"neon_load2_one_lane\")]\n )\n \n@@ -3959,9 +3962,9 @@\n (define_insn \"vec_store_lanesoi_lane<mode>\"\n   [(set (match_operand:<V_TWO_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_TWO_ELEM> [(match_operand:OI 1 \"register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_ST2_LANE))]\n+\t\t   UNSPEC_ST2_LANE))]\n   \"TARGET_SIMD\"\n   {\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n@@ -4014,10 +4017,13 @@\n \t(unspec:CI [(match_operand:<V_THREE_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:CI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_LD3_LANE))]\n   \"TARGET_SIMD\"\n-  \"ld3\\\\t{%S0.<Vetype> - %U0.<Vetype>}[%3], %1\"\n+{\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n+    return \"ld3\\\\t{%S0.<Vetype> - %U0.<Vetype>}[%3], %1\";\n+}\n   [(set_attr \"type\" \"neon_load3_one_lane\")]\n )\n \n@@ -4054,9 +4060,9 @@\n (define_insn \"vec_store_lanesci_lane<mode>\"\n   [(set (match_operand:<V_THREE_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_THREE_ELEM> [(match_operand:CI 1 \"register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_ST3_LANE))]\n+\t\t   UNSPEC_ST3_LANE))]\n   \"TARGET_SIMD\"\n   {\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n@@ -4109,10 +4115,13 @@\n \t(unspec:XI [(match_operand:<V_FOUR_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:XI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_LD4_LANE))]\n   \"TARGET_SIMD\"\n-  \"ld4\\\\t{%S0.<Vetype> - %V0.<Vetype>}[%3], %1\"\n+{\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n+    return \"ld4\\\\t{%S0.<Vetype> - %V0.<Vetype>}[%3], %1\";\n+}\n   [(set_attr \"type\" \"neon_load4_one_lane\")]\n )\n \n@@ -4149,9 +4158,9 @@\n (define_insn \"vec_store_lanesxi_lane<mode>\"\n   [(set (match_operand:<V_FOUR_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_FOUR_ELEM> [(match_operand:XI 1 \"register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_ST4_LANE))]\n+\t\t   UNSPEC_ST4_LANE))]\n   \"TARGET_SIMD\"\n   {\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n@@ -4566,14 +4575,12 @@\n \t(match_operand:DI 1 \"register_operand\" \"w\")\n \t(match_operand:OI 2 \"register_operand\" \"0\")\n \t(match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_TWO_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n-\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesoi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4586,14 +4593,12 @@\n \t(match_operand:DI 1 \"register_operand\" \"w\")\n \t(match_operand:CI 2 \"register_operand\" \"0\")\n \t(match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_THREE_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n-\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesci_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4606,14 +4611,12 @@\n \t(match_operand:DI 1 \"register_operand\" \"w\")\n \t(match_operand:XI 2 \"register_operand\" \"0\")\n \t(match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t(unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_FOUR_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n-\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesxi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4850,54 +4853,45 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_st2_lane<VQ:mode>\"\n+(define_expand \"aarch64_st2_lane<mode>\"\n  [(match_operand:DI 0 \"register_operand\" \"r\")\n   (match_operand:OI 1 \"register_operand\" \"w\")\n-  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_TWO_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[0]);\n-  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n \n-  emit_insn (gen_vec_store_lanesoi_lane<VQ:mode> (mem,\n-\t\t\t\t\t\t  operands[1],\n-\t\t\t\t\t\t  operands[2]));\n+  emit_insn (gen_vec_store_lanesoi_lane<mode> (mem, operands[1], operands[2]));\n   DONE;\n })\n \n-(define_expand \"aarch64_st3_lane<VQ:mode>\"\n+(define_expand \"aarch64_st3_lane<mode>\"\n  [(match_operand:DI 0 \"register_operand\" \"r\")\n   (match_operand:CI 1 \"register_operand\" \"w\")\n-  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_THREE_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[0]);\n-  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n \n-  emit_insn (gen_vec_store_lanesci_lane<VQ:mode> (mem,\n-\t\t\t\t\t\t  operands[1],\n-\t\t\t\t\t\t  operands[2]));\n+  emit_insn (gen_vec_store_lanesci_lane<mode> (mem, operands[1], operands[2]));\n   DONE;\n })\n \n-(define_expand \"aarch64_st4_lane<VQ:mode>\"\n+(define_expand \"aarch64_st4_lane<mode>\"\n  [(match_operand:DI 0 \"register_operand\" \"r\")\n   (match_operand:XI 1 \"register_operand\" \"w\")\n-  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+  (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   machine_mode mode = <V_FOUR_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[0]);\n-  operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n \n-  emit_insn (gen_vec_store_lanesxi_lane<VQ:mode> (mem,\n-\t\t\t\t\t\t  operands[1],\n-\t\t\t\t\t\t  operands[2]));\n+  emit_insn (gen_vec_store_lanesxi_lane<mode> (mem, operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "fce557779c2f8ebe46a0eb7a29092b1b8597729e", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 147, "deletions": 129, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -9950,8 +9950,8 @@ __STRUCTN (float, 64, 4)\n #undef __STRUCTN\n \n \n-#define __ST2_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n-\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+#define __ST2_LANE_FUNC(intype, largetype, ptrtype, mode,\t\t     \\\n+\t\t\tqmode, ptr_mode, funcsuffix, signedtype)\t     \\\n __extension__ static __inline void\t\t\t\t\t     \\\n __attribute__ ((__always_inline__))\t\t\t\t\t     \\\n vst2_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n@@ -9965,31 +9965,37 @@ vst2_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n   __temp.val[1]\t\t\t\t\t\t\t\t     \\\n     = vcombine_##funcsuffix (__b.val[1],\t\t\t\t     \\\n \t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n-  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n-  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n+  __o = __builtin_aarch64_set_qregoi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[0], 0); \\\n+  __o = __builtin_aarch64_set_qregoi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[1], 1); \\\n   __builtin_aarch64_st2_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n-__ST2_LANE_FUNC (float32x2x2_t, float32x4x2_t, float32_t, v4sf, sf, f32,\n+__ST2_LANE_FUNC (float32x2x2_t, float32x4x2_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n-__ST2_LANE_FUNC (float64x1x2_t, float64x2x2_t, float64_t, v2df, df, f64,\n+__ST2_LANE_FUNC (float64x1x2_t, float64x2x2_t, float64_t, df, v2df, df, f64,\n \t\t float64x2_t)\n-__ST2_LANE_FUNC (poly8x8x2_t, poly8x16x2_t, poly8_t, v16qi, qi, p8, int8x16_t)\n-__ST2_LANE_FUNC (poly16x4x2_t, poly16x8x2_t, poly16_t, v8hi, hi, p16,\n+__ST2_LANE_FUNC (poly8x8x2_t, poly8x16x2_t, poly8_t, v8qi, v16qi, qi, p8,\n+\t\t int8x16_t)\n+__ST2_LANE_FUNC (poly16x4x2_t, poly16x8x2_t, poly16_t, v4hi, v8hi, hi, p16,\n \t\t int16x8_t)\n-__ST2_LANE_FUNC (int8x8x2_t, int8x16x2_t, int8_t, v16qi, qi, s8, int8x16_t)\n-__ST2_LANE_FUNC (int16x4x2_t, int16x8x2_t, int16_t, v8hi, hi, s16, int16x8_t)\n-__ST2_LANE_FUNC (int32x2x2_t, int32x4x2_t, int32_t, v4si, si, s32, int32x4_t)\n-__ST2_LANE_FUNC (int64x1x2_t, int64x2x2_t, int64_t, v2di, di, s64, int64x2_t)\n-__ST2_LANE_FUNC (uint8x8x2_t, uint8x16x2_t, uint8_t, v16qi, qi, u8, int8x16_t)\n-__ST2_LANE_FUNC (uint16x4x2_t, uint16x8x2_t, uint16_t, v8hi, hi, u16,\n+__ST2_LANE_FUNC (int8x8x2_t, int8x16x2_t, int8_t, v8qi, v16qi, qi, s8,\n+\t\t int8x16_t)\n+__ST2_LANE_FUNC (int16x4x2_t, int16x8x2_t, int16_t, v4hi, v8hi, hi, s16,\n \t\t int16x8_t)\n-__ST2_LANE_FUNC (uint32x2x2_t, uint32x4x2_t, uint32_t, v4si, si, u32,\n+__ST2_LANE_FUNC (int32x2x2_t, int32x4x2_t, int32_t, v2si, v4si, si, s32,\n \t\t int32x4_t)\n-__ST2_LANE_FUNC (uint64x1x2_t, uint64x2x2_t, uint64_t, v2di, di, u64,\n+__ST2_LANE_FUNC (int64x1x2_t, int64x2x2_t, int64_t, di, v2di, di, s64,\n+\t\t int64x2_t)\n+__ST2_LANE_FUNC (uint8x8x2_t, uint8x16x2_t, uint8_t, v8qi, v16qi, qi, u8,\n+\t\t int8x16_t)\n+__ST2_LANE_FUNC (uint16x4x2_t, uint16x8x2_t, uint16_t, v4hi, v8hi, hi, u16,\n+\t\t int16x8_t)\n+__ST2_LANE_FUNC (uint32x2x2_t, uint32x4x2_t, uint32_t, v2si, v4si, si, u32,\n+\t\t int32x4_t)\n+__ST2_LANE_FUNC (uint64x1x2_t, uint64x2x2_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n #undef __ST2_LANE_FUNC\n@@ -10018,8 +10024,8 @@ __ST2_LANE_FUNC (uint16x8x2_t, uint16_t, v8hi, hi, u16)\n __ST2_LANE_FUNC (uint32x4x2_t, uint32_t, v4si, si, u32)\n __ST2_LANE_FUNC (uint64x2x2_t, uint64_t, v2di, di, u64)\n \n-#define __ST3_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n-\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+#define __ST3_LANE_FUNC(intype, largetype, ptrtype, mode,\t\t     \\\n+\t\t\tqmode, ptr_mode, funcsuffix, signedtype)\t     \\\n __extension__ static __inline void\t\t\t\t\t     \\\n __attribute__ ((__always_inline__))\t\t\t\t\t     \\\n vst3_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n@@ -10036,33 +10042,39 @@ vst3_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n   __temp.val[2]\t\t\t\t\t\t\t\t     \\\n     = vcombine_##funcsuffix (__b.val[2],\t\t\t\t     \\\n \t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[2], 2);  \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[0], 0); \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[1], 1); \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[2], 2); \\\n   __builtin_aarch64_st3_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n-__ST3_LANE_FUNC (float32x2x3_t, float32x4x3_t, float32_t, v4sf, sf, f32,\n+__ST3_LANE_FUNC (float32x2x3_t, float32x4x3_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n-__ST3_LANE_FUNC (float64x1x3_t, float64x2x3_t, float64_t, v2df, df, f64,\n+__ST3_LANE_FUNC (float64x1x3_t, float64x2x3_t, float64_t, df, v2df, df, f64,\n \t\t float64x2_t)\n-__ST3_LANE_FUNC (poly8x8x3_t, poly8x16x3_t, poly8_t, v16qi, qi, p8, int8x16_t)\n-__ST3_LANE_FUNC (poly16x4x3_t, poly16x8x3_t, poly16_t, v8hi, hi, p16,\n+__ST3_LANE_FUNC (poly8x8x3_t, poly8x16x3_t, poly8_t, v8qi, v16qi, qi, p8,\n+\t\t int8x16_t)\n+__ST3_LANE_FUNC (poly16x4x3_t, poly16x8x3_t, poly16_t, v4hi, v8hi, hi, p16,\n+\t\t int16x8_t)\n+__ST3_LANE_FUNC (int8x8x3_t, int8x16x3_t, int8_t, v8qi, v16qi, qi, s8,\n+\t\t int8x16_t)\n+__ST3_LANE_FUNC (int16x4x3_t, int16x8x3_t, int16_t, v4hi, v8hi, hi, s16,\n \t\t int16x8_t)\n-__ST3_LANE_FUNC (int8x8x3_t, int8x16x3_t, int8_t, v16qi, qi, s8, int8x16_t)\n-__ST3_LANE_FUNC (int16x4x3_t, int16x8x3_t, int16_t, v8hi, hi, s16, int16x8_t)\n-__ST3_LANE_FUNC (int32x2x3_t, int32x4x3_t, int32_t, v4si, si, s32, int32x4_t)\n-__ST3_LANE_FUNC (int64x1x3_t, int64x2x3_t, int64_t, v2di, di, s64, int64x2_t)\n-__ST3_LANE_FUNC (uint8x8x3_t, uint8x16x3_t, uint8_t, v16qi, qi, u8, int8x16_t)\n-__ST3_LANE_FUNC (uint16x4x3_t, uint16x8x3_t, uint16_t, v8hi, hi, u16,\n+__ST3_LANE_FUNC (int32x2x3_t, int32x4x3_t, int32_t, v2si, v4si, si, s32,\n+\t\t int32x4_t)\n+__ST3_LANE_FUNC (int64x1x3_t, int64x2x3_t, int64_t, di, v2di, di, s64,\n+\t\t int64x2_t)\n+__ST3_LANE_FUNC (uint8x8x3_t, uint8x16x3_t, uint8_t, v8qi, v16qi, qi, u8,\n+\t\t int8x16_t)\n+__ST3_LANE_FUNC (uint16x4x3_t, uint16x8x3_t, uint16_t, v4hi, v8hi, hi, u16,\n \t\t int16x8_t)\n-__ST3_LANE_FUNC (uint32x2x3_t, uint32x4x3_t, uint32_t, v4si, si, u32,\n+__ST3_LANE_FUNC (uint32x2x3_t, uint32x4x3_t, uint32_t, v2si, v4si, si, u32,\n \t\t int32x4_t)\n-__ST3_LANE_FUNC (uint64x1x3_t, uint64x2x3_t, uint64_t, v2di, di, u64,\n+__ST3_LANE_FUNC (uint64x1x3_t, uint64x2x3_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n #undef __ST3_LANE_FUNC\n@@ -10091,8 +10103,8 @@ __ST3_LANE_FUNC (uint16x8x3_t, uint16_t, v8hi, hi, u16)\n __ST3_LANE_FUNC (uint32x4x3_t, uint32_t, v4si, si, u32)\n __ST3_LANE_FUNC (uint64x2x3_t, uint64_t, v2di, di, u64)\n \n-#define __ST4_LANE_FUNC(intype, largetype, ptrtype,\t\t\t     \\\n-\t\t\tmode, ptr_mode, funcsuffix, signedtype)\t\t     \\\n+#define __ST4_LANE_FUNC(intype, largetype, ptrtype, mode,\t\t     \\\n+\t\t\tqmode, ptr_mode, funcsuffix, signedtype)\t     \\\n __extension__ static __inline void\t\t\t\t\t     \\\n __attribute__ ((__always_inline__))\t\t\t\t\t     \\\n vst4_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n@@ -10112,35 +10124,41 @@ vst4_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n   __temp.val[3]\t\t\t\t\t\t\t\t     \\\n     = vcombine_##funcsuffix (__b.val[3],\t\t\t\t     \\\n \t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[0], 0);  \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[1], 1);  \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[2], 2);  \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t     \\\n-\t\t\t\t\t    (signedtype) __temp.val[3], 3);  \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[0], 0); \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[1], 1); \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[2], 2); \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t     \\\n+\t\t\t\t\t     (signedtype) __temp.val[3], 3); \\\n   __builtin_aarch64_st4_lane##mode ((__builtin_aarch64_simd_ ## ptr_mode *)  \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n-__ST4_LANE_FUNC (float32x2x4_t, float32x4x4_t, float32_t, v4sf, sf, f32,\n+__ST4_LANE_FUNC (float32x2x4_t, float32x4x4_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n-__ST4_LANE_FUNC (float64x1x4_t, float64x2x4_t, float64_t, v2df, df, f64,\n+__ST4_LANE_FUNC (float64x1x4_t, float64x2x4_t, float64_t, df, v2df, df, f64,\n \t\t float64x2_t)\n-__ST4_LANE_FUNC (poly8x8x4_t, poly8x16x4_t, poly8_t, v16qi, qi, p8, int8x16_t)\n-__ST4_LANE_FUNC (poly16x4x4_t, poly16x8x4_t, poly16_t, v8hi, hi, p16,\n+__ST4_LANE_FUNC (poly8x8x4_t, poly8x16x4_t, poly8_t, v8qi, v16qi, qi, p8,\n+\t\t int8x16_t)\n+__ST4_LANE_FUNC (poly16x4x4_t, poly16x8x4_t, poly16_t, v4hi, v8hi, hi, p16,\n \t\t int16x8_t)\n-__ST4_LANE_FUNC (int8x8x4_t, int8x16x4_t, int8_t, v16qi, qi, s8, int8x16_t)\n-__ST4_LANE_FUNC (int16x4x4_t, int16x8x4_t, int16_t, v8hi, hi, s16, int16x8_t)\n-__ST4_LANE_FUNC (int32x2x4_t, int32x4x4_t, int32_t, v4si, si, s32, int32x4_t)\n-__ST4_LANE_FUNC (int64x1x4_t, int64x2x4_t, int64_t, v2di, di, s64, int64x2_t)\n-__ST4_LANE_FUNC (uint8x8x4_t, uint8x16x4_t, uint8_t, v16qi, qi, u8, int8x16_t)\n-__ST4_LANE_FUNC (uint16x4x4_t, uint16x8x4_t, uint16_t, v8hi, hi, u16,\n+__ST4_LANE_FUNC (int8x8x4_t, int8x16x4_t, int8_t, v8qi, v16qi, qi, s8,\n+\t\t int8x16_t)\n+__ST4_LANE_FUNC (int16x4x4_t, int16x8x4_t, int16_t, v4hi, v8hi, hi, s16,\n+\t\t int16x8_t)\n+__ST4_LANE_FUNC (int32x2x4_t, int32x4x4_t, int32_t, v2si, v4si, si, s32,\n+\t\t int32x4_t)\n+__ST4_LANE_FUNC (int64x1x4_t, int64x2x4_t, int64_t, di, v2di, di, s64,\n+\t\t int64x2_t)\n+__ST4_LANE_FUNC (uint8x8x4_t, uint8x16x4_t, uint8_t, v8qi, v16qi, qi, u8,\n+\t\t int8x16_t)\n+__ST4_LANE_FUNC (uint16x4x4_t, uint16x8x4_t, uint16_t, v4hi, v8hi, hi, u16,\n \t\t int16x8_t)\n-__ST4_LANE_FUNC (uint32x2x4_t, uint32x4x4_t, uint32_t, v4si, si, u32,\n+__ST4_LANE_FUNC (uint32x2x4_t, uint32x4x4_t, uint32_t, v2si, v4si, si, u32,\n \t\t int32x4_t)\n-__ST4_LANE_FUNC (uint64x1x4_t, uint64x2x4_t, uint64_t, v2di, di, u64,\n+__ST4_LANE_FUNC (uint64x1x4_t, uint64x2x4_t, uint64_t, di, v2di, di, u64,\n \t\t int64x2_t)\n \n #undef __ST4_LANE_FUNC\n@@ -16799,8 +16817,8 @@ vld4q_dup_f64 (const float64_t * __a)\n \n /* vld2_lane */\n \n-#define __LD2_LANE_FUNC(intype, vectype, largetype, ptrtype,\t\t   \\\n-\t\t\t mode, ptrmode, funcsuffix, signedtype)\t\t   \\\n+#define __LD2_LANE_FUNC(intype, vectype, largetype, ptrtype, mode,\t   \\\n+\t\t\t qmode, ptrmode, funcsuffix, signedtype)\t   \\\n __extension__ static __inline intype __attribute__ ((__always_inline__))   \\\n vld2_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n {\t\t\t\t\t\t\t\t\t   \\\n@@ -16810,42 +16828,42 @@ vld2_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n     vcombine_##funcsuffix (__b.val[0], vcreate_##funcsuffix (0));\t   \\\n   __temp.val[1] =\t\t\t\t\t\t\t   \\\n     vcombine_##funcsuffix (__b.val[1], vcreate_##funcsuffix (0));\t   \\\n-  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[0],\t   \\\n-\t\t\t\t\t   0);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregoi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[1],\t   \\\n-\t\t\t\t\t   1);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregoi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[0],\t   \\\n+\t\t\t\t\t    0);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregoi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[1],\t   \\\n+\t\t\t\t\t    1);\t\t\t\t   \\\n   __o =\t__builtin_aarch64_ld2_lane##mode (\t\t\t\t   \\\n \t  (__builtin_aarch64_simd_##ptrmode *) __ptr, __o, __c);\t   \\\n   __b.val[0] = (vectype) __builtin_aarch64_get_dregoidi (__o, 0);\t   \\\n   __b.val[1] = (vectype) __builtin_aarch64_get_dregoidi (__o, 1);\t   \\\n   return __b;\t\t\t\t\t\t\t\t   \\\n }\n \n-__LD2_LANE_FUNC (float32x2x2_t, float32x2_t, float32x4x2_t, float32_t, v4sf,\n+__LD2_LANE_FUNC (float32x2x2_t, float32x2_t, float32x4x2_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n-__LD2_LANE_FUNC (float64x1x2_t, float64x1_t, float64x2x2_t, float64_t, v2df,\n+__LD2_LANE_FUNC (float64x1x2_t, float64x1_t, float64x2x2_t, float64_t, df, v2df,\n \t\t df, f64, float64x2_t)\n-__LD2_LANE_FUNC (poly8x8x2_t, poly8x8_t, poly8x16x2_t, poly8_t, v16qi, qi, p8,\n+__LD2_LANE_FUNC (poly8x8x2_t, poly8x8_t, poly8x16x2_t, poly8_t, v8qi, v16qi, qi, p8,\n \t\t int8x16_t)\n-__LD2_LANE_FUNC (poly16x4x2_t, poly16x4_t, poly16x8x2_t, poly16_t, v8hi, hi,\n+__LD2_LANE_FUNC (poly16x4x2_t, poly16x4_t, poly16x8x2_t, poly16_t, v4hi, v8hi, hi,\n \t\t p16, int16x8_t)\n-__LD2_LANE_FUNC (int8x8x2_t, int8x8_t, int8x16x2_t, int8_t, v16qi, qi, s8,\n+__LD2_LANE_FUNC (int8x8x2_t, int8x8_t, int8x16x2_t, int8_t, v8qi, v16qi, qi, s8,\n \t\t int8x16_t)\n-__LD2_LANE_FUNC (int16x4x2_t, int16x4_t, int16x8x2_t, int16_t, v8hi, hi, s16,\n+__LD2_LANE_FUNC (int16x4x2_t, int16x4_t, int16x8x2_t, int16_t, v4hi, v8hi, hi, s16,\n \t\t int16x8_t)\n-__LD2_LANE_FUNC (int32x2x2_t, int32x2_t, int32x4x2_t, int32_t, v4si, si, s32,\n+__LD2_LANE_FUNC (int32x2x2_t, int32x2_t, int32x4x2_t, int32_t, v2si, v4si, si, s32,\n \t\t int32x4_t)\n-__LD2_LANE_FUNC (int64x1x2_t, int64x1_t, int64x2x2_t, int64_t, v2di, di, s64,\n+__LD2_LANE_FUNC (int64x1x2_t, int64x1_t, int64x2x2_t, int64_t, di, v2di, di, s64,\n \t\t int64x2_t)\n-__LD2_LANE_FUNC (uint8x8x2_t, uint8x8_t, uint8x16x2_t, uint8_t, v16qi, qi, u8,\n+__LD2_LANE_FUNC (uint8x8x2_t, uint8x8_t, uint8x16x2_t, uint8_t, v8qi, v16qi, qi, u8,\n \t\t int8x16_t)\n-__LD2_LANE_FUNC (uint16x4x2_t, uint16x4_t, uint16x8x2_t, uint16_t, v8hi, hi,\n+__LD2_LANE_FUNC (uint16x4x2_t, uint16x4_t, uint16x8x2_t, uint16_t, v4hi, v8hi, hi,\n \t\t u16, int16x8_t)\n-__LD2_LANE_FUNC (uint32x2x2_t, uint32x2_t, uint32x4x2_t, uint32_t, v4si, si,\n+__LD2_LANE_FUNC (uint32x2x2_t, uint32x2_t, uint32x4x2_t, uint32_t, v2si, v4si, si,\n \t\t u32, int32x4_t)\n-__LD2_LANE_FUNC (uint64x1x2_t, uint64x1_t, uint64x2x2_t, uint64_t, v2di, di,\n+__LD2_LANE_FUNC (uint64x1x2_t, uint64x1_t, uint64x2x2_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n #undef __LD2_LANE_FUNC\n@@ -16884,8 +16902,8 @@ __LD2_LANE_FUNC (uint64x2x2_t, uint64x2_t, uint64_t, v2di, di, u64)\n \n /* vld3_lane */\n \n-#define __LD3_LANE_FUNC(intype, vectype, largetype, ptrtype,\t\t   \\\n-\t\t\t mode, ptrmode, funcsuffix, signedtype)\t\t   \\\n+#define __LD3_LANE_FUNC(intype, vectype, largetype, ptrtype, mode,\t   \\\n+\t\t\t qmode, ptrmode, funcsuffix, signedtype)\t   \\\n __extension__ static __inline intype __attribute__ ((__always_inline__))   \\\n vld3_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n {\t\t\t\t\t\t\t\t\t   \\\n@@ -16897,15 +16915,15 @@ vld3_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n     vcombine_##funcsuffix (__b.val[1], vcreate_##funcsuffix (0));\t   \\\n   __temp.val[2] =\t\t\t\t\t\t\t   \\\n     vcombine_##funcsuffix (__b.val[2], vcreate_##funcsuffix (0));\t   \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[0],\t   \\\n-\t\t\t\t\t   0);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[1],\t   \\\n-\t\t\t\t\t   1);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregci##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[2],\t   \\\n-\t\t\t\t\t   2);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[0],\t   \\\n+\t\t\t\t\t    0);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[1],\t   \\\n+\t\t\t\t\t    1);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregci##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[2],\t   \\\n+\t\t\t\t\t    2);\t\t\t\t   \\\n   __o =\t__builtin_aarch64_ld3_lane##mode (\t\t\t\t   \\\n \t  (__builtin_aarch64_simd_##ptrmode *) __ptr, __o, __c);\t   \\\n   __b.val[0] = (vectype) __builtin_aarch64_get_dregcidi (__o, 0);\t   \\\n@@ -16914,29 +16932,29 @@ vld3_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n   return __b;\t\t\t\t\t\t\t\t   \\\n }\n \n-__LD3_LANE_FUNC (float32x2x3_t, float32x2_t, float32x4x3_t, float32_t, v4sf,\n+__LD3_LANE_FUNC (float32x2x3_t, float32x2_t, float32x4x3_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n-__LD3_LANE_FUNC (float64x1x3_t, float64x1_t, float64x2x3_t, float64_t, v2df,\n+__LD3_LANE_FUNC (float64x1x3_t, float64x1_t, float64x2x3_t, float64_t, df, v2df,\n \t\t df, f64, float64x2_t)\n-__LD3_LANE_FUNC (poly8x8x3_t, poly8x8_t, poly8x16x3_t, poly8_t, v16qi, qi, p8,\n+__LD3_LANE_FUNC (poly8x8x3_t, poly8x8_t, poly8x16x3_t, poly8_t, v8qi, v16qi, qi, p8,\n \t\t int8x16_t)\n-__LD3_LANE_FUNC (poly16x4x3_t, poly16x4_t, poly16x8x3_t, poly16_t, v8hi, hi,\n+__LD3_LANE_FUNC (poly16x4x3_t, poly16x4_t, poly16x8x3_t, poly16_t, v4hi, v8hi, hi,\n \t\t p16, int16x8_t)\n-__LD3_LANE_FUNC (int8x8x3_t, int8x8_t, int8x16x3_t, int8_t, v16qi, qi, s8,\n+__LD3_LANE_FUNC (int8x8x3_t, int8x8_t, int8x16x3_t, int8_t, v8qi, v16qi, qi, s8,\n \t\t int8x16_t)\n-__LD3_LANE_FUNC (int16x4x3_t, int16x4_t, int16x8x3_t, int16_t, v8hi, hi, s16,\n+__LD3_LANE_FUNC (int16x4x3_t, int16x4_t, int16x8x3_t, int16_t, v4hi, v8hi, hi, s16,\n \t\t int16x8_t)\n-__LD3_LANE_FUNC (int32x2x3_t, int32x2_t, int32x4x3_t, int32_t, v4si, si, s32,\n+__LD3_LANE_FUNC (int32x2x3_t, int32x2_t, int32x4x3_t, int32_t, v2si, v4si, si, s32,\n \t\t int32x4_t)\n-__LD3_LANE_FUNC (int64x1x3_t, int64x1_t, int64x2x3_t, int64_t, v2di, di, s64,\n+__LD3_LANE_FUNC (int64x1x3_t, int64x1_t, int64x2x3_t, int64_t, di, v2di, di, s64,\n \t\t int64x2_t)\n-__LD3_LANE_FUNC (uint8x8x3_t, uint8x8_t, uint8x16x3_t, uint8_t, v16qi, qi, u8,\n+__LD3_LANE_FUNC (uint8x8x3_t, uint8x8_t, uint8x16x3_t, uint8_t, v8qi, v16qi, qi, u8,\n \t\t int8x16_t)\n-__LD3_LANE_FUNC (uint16x4x3_t, uint16x4_t, uint16x8x3_t, uint16_t, v8hi, hi,\n+__LD3_LANE_FUNC (uint16x4x3_t, uint16x4_t, uint16x8x3_t, uint16_t, v4hi, v8hi, hi,\n \t\t u16, int16x8_t)\n-__LD3_LANE_FUNC (uint32x2x3_t, uint32x2_t, uint32x4x3_t, uint32_t, v4si, si,\n+__LD3_LANE_FUNC (uint32x2x3_t, uint32x2_t, uint32x4x3_t, uint32_t, v2si, v4si, si,\n \t\t u32, int32x4_t)\n-__LD3_LANE_FUNC (uint64x1x3_t, uint64x1_t, uint64x2x3_t, uint64_t, v2di, di,\n+__LD3_LANE_FUNC (uint64x1x3_t, uint64x1_t, uint64x2x3_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n #undef __LD3_LANE_FUNC\n@@ -16977,8 +16995,8 @@ __LD3_LANE_FUNC (uint64x2x3_t, uint64x2_t, uint64_t, v2di, di, u64)\n \n /* vld4_lane */\n \n-#define __LD4_LANE_FUNC(intype, vectype, largetype, ptrtype,\t\t   \\\n-\t\t\t mode, ptrmode, funcsuffix, signedtype)\t\t   \\\n+#define __LD4_LANE_FUNC(intype, vectype, largetype, ptrtype, mode,\t   \\\n+\t\t\t qmode, ptrmode, funcsuffix, signedtype)\t   \\\n __extension__ static __inline intype __attribute__ ((__always_inline__))   \\\n vld4_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n {\t\t\t\t\t\t\t\t\t   \\\n@@ -16992,18 +17010,18 @@ vld4_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n     vcombine_##funcsuffix (__b.val[2], vcreate_##funcsuffix (0));\t   \\\n   __temp.val[3] =\t\t\t\t\t\t\t   \\\n     vcombine_##funcsuffix (__b.val[3], vcreate_##funcsuffix (0));\t   \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[0],\t   \\\n-\t\t\t\t\t   0);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[1],\t   \\\n-\t\t\t\t\t   1);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[2],\t   \\\n-\t\t\t\t\t   2);\t\t\t\t   \\\n-  __o = __builtin_aarch64_set_qregxi##mode (__o,\t\t\t   \\\n-\t\t\t\t\t   (signedtype) __temp.val[3],\t   \\\n-\t\t\t\t\t   3);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[0],\t   \\\n+\t\t\t\t\t    0);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[1],\t   \\\n+\t\t\t\t\t    1);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[2],\t   \\\n+\t\t\t\t\t    2);\t\t\t\t   \\\n+  __o = __builtin_aarch64_set_qregxi##qmode (__o,\t\t\t   \\\n+\t\t\t\t\t    (signedtype) __temp.val[3],\t   \\\n+\t\t\t\t\t    3);\t\t\t\t   \\\n   __o =\t__builtin_aarch64_ld4_lane##mode (\t\t\t\t   \\\n \t  (__builtin_aarch64_simd_##ptrmode *) __ptr, __o, __c);\t   \\\n   __b.val[0] = (vectype) __builtin_aarch64_get_dregxidi (__o, 0);\t   \\\n@@ -17015,29 +17033,29 @@ vld4_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n \n /* vld4q_lane */\n \n-__LD4_LANE_FUNC (float32x2x4_t, float32x2_t, float32x4x4_t, float32_t, v4sf,\n+__LD4_LANE_FUNC (float32x2x4_t, float32x2_t, float32x4x4_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n-__LD4_LANE_FUNC (float64x1x4_t, float64x1_t, float64x2x4_t, float64_t, v2df,\n+__LD4_LANE_FUNC (float64x1x4_t, float64x1_t, float64x2x4_t, float64_t, df, v2df,\n \t\t df, f64, float64x2_t)\n-__LD4_LANE_FUNC (poly8x8x4_t, poly8x8_t, poly8x16x4_t, poly8_t, v16qi, qi, p8,\n+__LD4_LANE_FUNC (poly8x8x4_t, poly8x8_t, poly8x16x4_t, poly8_t, v8qi, v16qi, qi, p8,\n \t\t int8x16_t)\n-__LD4_LANE_FUNC (poly16x4x4_t, poly16x4_t, poly16x8x4_t, poly16_t, v8hi, hi,\n+__LD4_LANE_FUNC (poly16x4x4_t, poly16x4_t, poly16x8x4_t, poly16_t, v4hi, v8hi, hi,\n \t\t p16, int16x8_t)\n-__LD4_LANE_FUNC (int8x8x4_t, int8x8_t, int8x16x4_t, int8_t, v16qi, qi, s8,\n+__LD4_LANE_FUNC (int8x8x4_t, int8x8_t, int8x16x4_t, int8_t, v8qi, v16qi, qi, s8,\n \t\t int8x16_t)\n-__LD4_LANE_FUNC (int16x4x4_t, int16x4_t, int16x8x4_t, int16_t, v8hi, hi, s16,\n+__LD4_LANE_FUNC (int16x4x4_t, int16x4_t, int16x8x4_t, int16_t, v4hi, v8hi, hi, s16,\n \t\t int16x8_t)\n-__LD4_LANE_FUNC (int32x2x4_t, int32x2_t, int32x4x4_t, int32_t, v4si, si, s32,\n+__LD4_LANE_FUNC (int32x2x4_t, int32x2_t, int32x4x4_t, int32_t, v2si, v4si, si, s32,\n \t\t int32x4_t)\n-__LD4_LANE_FUNC (int64x1x4_t, int64x1_t, int64x2x4_t, int64_t, v2di, di, s64,\n+__LD4_LANE_FUNC (int64x1x4_t, int64x1_t, int64x2x4_t, int64_t, di, v2di, di, s64,\n \t\t int64x2_t)\n-__LD4_LANE_FUNC (uint8x8x4_t, uint8x8_t, uint8x16x4_t, uint8_t, v16qi, qi, u8,\n+__LD4_LANE_FUNC (uint8x8x4_t, uint8x8_t, uint8x16x4_t, uint8_t, v8qi, v16qi, qi, u8,\n \t\t int8x16_t)\n-__LD4_LANE_FUNC (uint16x4x4_t, uint16x4_t, uint16x8x4_t, uint16_t, v8hi, hi,\n+__LD4_LANE_FUNC (uint16x4x4_t, uint16x4_t, uint16x8x4_t, uint16_t, v4hi, v8hi, hi,\n \t\t u16, int16x8_t)\n-__LD4_LANE_FUNC (uint32x2x4_t, uint32x2_t, uint32x4x4_t, uint32_t, v4si, si,\n+__LD4_LANE_FUNC (uint32x2x4_t, uint32x2_t, uint32x4x4_t, uint32_t, v2si, v4si, si,\n \t\t u32, int32x4_t)\n-__LD4_LANE_FUNC (uint64x1x4_t, uint64x1_t, uint64x2x4_t, uint64_t, v2di, di,\n+__LD4_LANE_FUNC (uint64x1x4_t, uint64x1_t, uint64x2x4_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n #undef __LD4_LANE_FUNC"}, {"sha": "80803088961df48ed528e491f8172d9dbcb36a29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 267, "deletions": 0, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -1,3 +1,270 @@\n+2015-07-22  Charles Baylis  <charles.baylis@linaro.org>\n+\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_p8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s8_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u16_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u32_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u64_indices_1.c: New\n+\ttest.\n+        * gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u8_indices_1.c: New\n+\ttest.\n+\n 2015-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/template/crash81.C: Update."}, {"sha": "04be713d4bf14e91f133c458c442f01dbf697cdf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x2x2_t\n+f_vld2_lane_f32 (float32_t * p, float32x2x2_t v)\n+{\n+  float32x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "a03d16535835b87cef4855ce6678921eb577c75a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x1x2_t\n+f_vld2_lane_f64 (float64_t * p, float64x1x2_t v)\n+{\n+  float64x1x2_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "3a7aeb32a0ebda3c9aeb58eb3fda8ed3d8926819", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+poly8x8x2_t\n+f_vld2_lane_p8 (poly8_t * p, poly8x8x2_t v)\n+{\n+  poly8x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "0b6314c8b6690ff9cf1ecefe5dbfce837144c6de", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x4x2_t\n+f_vld2_lane_s16 (int16_t * p, int16x4x2_t v)\n+{\n+  int16x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "331478025b42b470e6d4548c4703992621ef8078", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x2x2_t\n+f_vld2_lane_s32 (int32_t * p, int32x2x2_t v)\n+{\n+  int32x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "351ba40a69f2e0bc608717254a5af20940b11e54", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x1x2_t\n+f_vld2_lane_s64 (int64_t * p, int64x1x2_t v)\n+{\n+  int64x1x2_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "1db7462ba05d3ea0e275b9cca20964ff3e8b48c8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int8x8x2_t\n+f_vld2_lane_s8 (int8_t * p, int8x8x2_t v)\n+{\n+  int8x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "b65ae561f9b50ff67a921eed9da0d61e5011e53d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x4x2_t\n+f_vld2_lane_u16 (uint16_t * p, uint16x4x2_t v)\n+{\n+  uint16x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "4990ed0ed02452670751cb35373c839e581c5cc9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x2x2_t\n+f_vld2_lane_u32 (uint32_t * p, uint32x2x2_t v)\n+{\n+  uint32x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "09ff01c54f2f18417262ae8b3b41be4da15752ad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x1x2_t\n+f_vld2_lane_u64 (uint64_t * p, uint64x1x2_t v)\n+{\n+  uint64x1x2_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "d0c40a13ad1c41c896bc9c072b7fb909ef31067b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint8x8x2_t\n+f_vld2_lane_u8 (uint8_t * p, uint8x8x2_t v)\n+{\n+  uint8x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "84853f3522e229443bd619cf046f7144e67b2414", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x4x2_t\n+f_vld2q_lane_f32 (float32_t * p, float32x4x2_t v)\n+{\n+  float32x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "4f106bc9b47cdf16f2725ffd4dece8ed04f7da77", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x2x2_t\n+f_vld2q_lane_f64 (float64_t * p, float64x2x2_t v)\n+{\n+  float64x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "04eab142715d44cb0b5dfe06f039077c4e925a6e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_p8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+poly8x16x2_t\n+f_vld2q_lane_p8 (poly8_t * p, poly8x16x2_t v)\n+{\n+  poly8x16x2_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "048517d5f089b2b9ff314e228f68b84b7615946d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x8x2_t\n+f_vld2q_lane_s16 (int16_t * p, int16x8x2_t v)\n+{\n+  int16x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "620bafb53b3f1f5a4fd2774d099c6a91e95025d9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x4x2_t\n+f_vld2q_lane_s32 (int32_t * p, int32x4x2_t v)\n+{\n+  int32x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e182c6d5c1e7d4e51606b0ce5f9ff776476e1342", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x2x2_t\n+f_vld2q_lane_s64 (int64_t * p, int64x2x2_t v)\n+{\n+  int64x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "a58538e02ad6ac30634be638edfa961362f32c15", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_s8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int8x16x2_t\n+f_vld2q_lane_s8 (int8_t * p, int8x16x2_t v)\n+{\n+  int8x16x2_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "cf6e9a12f99c933504cc6a7f198b5fe1f48880c3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x8x2_t\n+f_vld2q_lane_u16 (uint16_t * p, uint16x8x2_t v)\n+{\n+  uint16x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "6945cf0d9121b21ffd5662d530a36a899fdc267d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x4x2_t\n+f_vld2q_lane_u32 (uint32_t * p, uint32x4x2_t v)\n+{\n+  uint32x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "84f09594922407e6e19dcea84a882e068a99c37b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x2x2_t\n+f_vld2q_lane_u64 (uint64_t * p, uint64x2x2_t v)\n+{\n+  uint64x2x2_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "82ecfe25484c9c810c92b345bc446841e628e3bb", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_u8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint8x16x2_t\n+f_vld2q_lane_u8 (uint8_t * p, uint8x16x2_t v)\n+{\n+  uint8x16x2_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld2q_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "4db8b7ca02b9b467902b033a87ae3c962c20d473", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x2x3_t\n+f_vld3_lane_f32 (float32_t * p, float32x2x3_t v)\n+{\n+  float32x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "74659768b92a41352a3a052048f8b3fcfb498565", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x1x3_t\n+f_vld3_lane_f64 (float64_t * p, float64x1x3_t v)\n+{\n+  float64x1x3_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "712c67c72c7316df9c095c3fd55588ac7c626cea", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+poly8x8x3_t\n+f_vld3_lane_p8 (poly8_t * p, poly8x8x3_t v)\n+{\n+  poly8x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "22e11d3931681b5aea05e867fc24b04f02ed71cc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x4x3_t\n+f_vld3_lane_s16 (int16_t * p, int16x4x3_t v)\n+{\n+  int16x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "ed4f50bea4c12e35ca461b669ab5262729d7fc4e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x2x3_t\n+f_vld3_lane_s32 (int32_t * p, int32x2x3_t v)\n+{\n+  int32x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "ae7b35e4ccfd584eaf96eee46c2175136f07e63f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x1x3_t\n+f_vld3_lane_s64 (int64_t * p, int64x1x3_t v)\n+{\n+  int64x1x3_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "320ef376af63e6dd1602ad670da2877d18de225b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int8x8x3_t\n+f_vld3_lane_s8 (int8_t * p, int8x8x3_t v)\n+{\n+  int8x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "a00253a345ecceefa5aa45a8fd7a582f441884a9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x4x3_t\n+f_vld3_lane_u16 (uint16_t * p, uint16x4x3_t v)\n+{\n+  uint16x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "d53ead36796babbfb187678e5031036076e423b0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x2x3_t\n+f_vld3_lane_u32 (uint32_t * p, uint32x2x3_t v)\n+{\n+  uint32x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e9b44278d098e76d4e8c257c4c8122076f346a89", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x1x3_t\n+f_vld3_lane_u64 (uint64_t * p, uint64x1x3_t v)\n+{\n+  uint64x1x3_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "3afff9f95d34d0e078599561a356a1447d6c4978", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint8x8x3_t\n+f_vld3_lane_u8 (uint8_t * p, uint8x8x3_t v)\n+{\n+  uint8x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e38799cc5404f69ab97bc974f8ee520007828504", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x4x3_t\n+f_vld3q_lane_f32 (float32_t * p, float32x4x3_t v)\n+{\n+  float32x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "c84c6c8e0dab6ddd37f93e59ff0e092edb3c5fc9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x2x3_t\n+f_vld3q_lane_f64 (float64_t * p, float64x2x3_t v)\n+{\n+  float64x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "1dea0d4e895eb83597be60ab51213c29ad2a7c29", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_p8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+poly8x16x3_t\n+f_vld3q_lane_p8 (poly8_t * p, poly8x16x3_t v)\n+{\n+  poly8x16x3_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "03f59f04926f32d9768cce163ed875965b4614a9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x8x3_t\n+f_vld3q_lane_s16 (int16_t * p, int16x8x3_t v)\n+{\n+  int16x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "57315ba9bca25cf8ad7c5f3f06d60f39cf655cc5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x4x3_t\n+f_vld3q_lane_s32 (int32_t * p, int32x4x3_t v)\n+{\n+  int32x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "fff4f80599d8d4d905f339c29096586f551b7dcd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x2x3_t\n+f_vld3q_lane_s64 (int64_t * p, int64x2x3_t v)\n+{\n+  int64x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "9c340e078ba2d5c79d5c90344b6b733e3e3b0d8a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_s8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int8x16x3_t\n+f_vld3q_lane_s8 (int8_t * p, int8x16x3_t v)\n+{\n+  int8x16x3_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "3dfaacbf970c0557045a8ef7cde33d36ab336e64", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x8x3_t\n+f_vld3q_lane_u16 (uint16_t * p, uint16x8x3_t v)\n+{\n+  uint16x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "9d4ed461a9dd1a6c131a74ecc9651228abe4c5f2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x4x3_t\n+f_vld3q_lane_u32 (uint32_t * p, uint32x4x3_t v)\n+{\n+  uint32x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "ca188a8748a22e526119664b415ef6b5cc1477c6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x2x3_t\n+f_vld3q_lane_u64 (uint64_t * p, uint64x2x3_t v)\n+{\n+  uint64x2x3_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "5ca835ed2b12b407f311022f343d788ce53a1d2b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_u8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint8x16x3_t\n+f_vld3q_lane_u8 (uint8_t * p, uint8x16x3_t v)\n+{\n+  uint8x16x3_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld3q_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "f956ee6b62dcebf311c7477254dbbd39dacb324d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x2x4_t\n+f_vld4_lane_f32 (float32_t * p, float32x2x4_t v)\n+{\n+  float32x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "52763b4903b5d533e94780895ab4e5bf2314df98", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x1x4_t\n+f_vld4_lane_f64 (float64_t * p, float64x1x4_t v)\n+{\n+  float64x1x4_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "8f9d3eeabdb5463e51f185178b3c63faab7e0fd9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+poly8x8x4_t\n+f_vld4_lane_p8 (poly8_t * p, poly8x8x4_t v)\n+{\n+  poly8x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "53f51a0f0b55cde2e5d333fa90379c64d5941edc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x4x4_t\n+f_vld4_lane_s16 (int16_t * p, int16x4x4_t v)\n+{\n+  int16x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "7b8396edab92728c08693ff1a6b2a4cb81569475", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x2x4_t\n+f_vld4_lane_s32 (int32_t * p, int32x2x4_t v)\n+{\n+  int32x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "8cc138eadea2ed87084f1df8dc39d4d0172de7ba", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x1x4_t\n+f_vld4_lane_s64 (int64_t * p, int64x1x4_t v)\n+{\n+  int64x1x4_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "1c3bcf375a7d43005c548f103e2267a48ee9f91f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int8x8x4_t\n+f_vld4_lane_s8 (int8_t * p, int8x8x4_t v)\n+{\n+  int8x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "2ac73af886bb8d90ad144437a4853c204c61f3bf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x4x4_t\n+f_vld4_lane_u16 (uint16_t * p, uint16x4x4_t v)\n+{\n+  uint16x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e37e03823c72805fac718b40d4af9b550741aee3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x2x4_t\n+f_vld4_lane_u32 (uint32_t * p, uint32x2x4_t v)\n+{\n+  uint32x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "96f0bb896458fd67f33d826a94ce27edd1329f17", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x1x4_t\n+f_vld4_lane_u64 (uint64_t * p, uint64x1x4_t v)\n+{\n+  uint64x1x4_t res;\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e8de33513ffc96d06ccec707a851c15463df480c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint8x8x4_t\n+f_vld4_lane_u8 (uint8_t * p, uint8x8x4_t v)\n+{\n+  uint8x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "93d573027782ce745c5fe7087c7d6ad6197d62a2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+float32x4x4_t\n+f_vld4q_lane_f32 (float32_t * p, float32x4x4_t v)\n+{\n+  float32x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_f32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "062e0ebaf0056fead8e225c9a3e74ba70fb6e8f1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+float64x2x4_t\n+f_vld4q_lane_f64 (float64_t * p, float64x2x4_t v)\n+{\n+  float64x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_f64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "32ae95b9804e9f845b800fdfbf1b669d6b569ab8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_p8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+poly8x16x4_t\n+f_vld4q_lane_p8 (poly8_t * p, poly8x16x4_t v)\n+{\n+  poly8x16x4_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_p8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "f4a7225f3a36c004ec9d56629ec8fe6e767af9a1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int16x8x4_t\n+f_vld4q_lane_s16 (int16_t * p, int16x8x4_t v)\n+{\n+  int16x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "45dd197fe7b7bd5408f4f492d6c7af00d911f518", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+int32x4x4_t\n+f_vld4q_lane_s32 (int32_t * p, int32x4x4_t v)\n+{\n+  int32x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "5a01d051b75dc872d99de0226149593dd4900f2a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int64x2x4_t\n+f_vld4q_lane_s64 (int64_t * p, int64x2x4_t v)\n+{\n+  int64x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "db6691791f8334cfe32f8938285607814d1b2241", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_s8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+int8x16x4_t\n+f_vld4q_lane_s8 (int8_t * p, int8x16x4_t v)\n+{\n+  int8x16x4_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_s8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "5a27639477c2497092926b1776c8b043900d5497", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u16_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint16x8x4_t\n+f_vld4q_lane_u16 (uint16_t * p, uint16x8x4_t v)\n+{\n+  uint16x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "5d8a57080fe8887cc6e12c3e3ae9166da54dcbb8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u32_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+uint32x4x4_t\n+f_vld4q_lane_u32 (uint32_t * p, uint32x4x4_t v)\n+{\n+  uint32x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u32 (p, v, -1);\n+  return res;\n+}"}, {"sha": "92b4c517db254401df60b751c8552979230a73ac", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u64_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint64x2x4_t\n+f_vld4q_lane_u64 (uint64_t * p, uint64x2x4_t v)\n+{\n+  uint64x2x4_t res;\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u64 (p, v, -1);\n+  return res;\n+}"}, {"sha": "293416da9a443ad72c2f11b67b86a4e3419697f3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_u8_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,17 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+uint8x16x4_t\n+f_vld4q_lane_u8 (uint8_t * p, uint8x16x4_t v)\n+{\n+  uint8x16x4_t res;\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  res = vld4q_lane_u8 (p, v, -1);\n+  return res;\n+}"}, {"sha": "1a39625a60430c5b81445524704507060f93e2d8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_f32 (float32_t * p, float32x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "367471517ceca3b478e6a7ad4c4d7653507db082", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2_lane_f64 (float64_t * p, float64x1x2_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "770fe9da3f00c44a9492360f04efcd062a5b10bf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_p8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_p8 (poly8_t * p, poly8x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "ac89d03b415de8585f79c605e94be72ae6fff185", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_s16 (int16_t * p, int16x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "4bbceb654377c3e6d8e8f0c3c824432ae9d035c4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_s32 (int32_t * p, int32x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "da60b9bfef1d48649095ddd41ab504577d035854", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2_lane_s64 (int64_t * p, int64x1x2_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "b5bf3d685a7bc39e3ab72ab491d204f20702ea4f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_s8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_s8 (int8_t * p, int8x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "bfdc5c0b15c55b878e7c160ef293ac5cbde38d61", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_u16 (uint16_t * p, uint16x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "e32c6ff3d632e2016517efd261239fe56adc5a00", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_u32 (uint32_t * p, uint32x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "03546bdd97fe4d378bb803cc36db43c91a2bd6b9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2_lane_u64 (uint64_t * p, uint64x1x2_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "74da14c03054d7287c3239f2ef8c7f3f291535fe", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_u8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2_lane_u8 (uint8_t * p, uint8x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2_lane_u8 (p, v, -1);\n+  return;\n+}"}, {"sha": "246c60cef0189b474f4458f35b80bb9b8dbe97f1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_f32 (float32_t * p, float32x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "a1029217975b03ef66bdfd5217216922be421a56", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_f64 (float64_t * p, float64x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "8966b539b8356d9299701224f5225a73eac1cd33", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_p8 (poly8_t * p, poly8x16x2_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "19d22a1f2b11c2f9380db7441cac1bb5a600a5aa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_s16 (int16_t * p, int16x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "bbb772c0ccffd74217f3514f158fca63af7610ac", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_s32 (int32_t * p, int32x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "6efc68133955193fb2f0e7fbf39b712e1d8e7bde", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_s64 (int64_t * p, int64x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "7c0eb4999855ee533cc8692adf83c3a9a455323f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_s8 (int8_t * p, int8x16x2_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "b079a34f75a4d17fa5406e1280d229603fa3efaf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_u16 (uint16_t * p, uint16x8x2_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "b919e2b81fc5d2cee0747a3a077750639ab05d95", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_u32 (uint32_t * p, uint32x4x2_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "7d31d65ee904645f293a4718f98c31468f1acdad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_u64 (uint64_t * p, uint64x2x2_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "9c35ce9757082db983079949a28eb51d13e2d0b8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst2q_lane_u8 (uint8_t * p, uint8x16x2_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst2q_lane_u8 (p, v, -1);\n+  return;\n+}"}, {"sha": "1d7a57ef4c57b01b7b89656461e63d4084e2388e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_f32 (float32_t * p, float32x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "5e9b9ea91de5b65a5d67b08e576d5c7d63b85463", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3_lane_f64 (float64_t * p, float64x1x3_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "7599a19571c6e40fe1b4d91099ee39990e3d8f30", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_p8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_p8 (poly8_t * p, poly8x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "f8b856de6a87726f2bba8da7a045227fa18efad6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_s16 (int16_t * p, int16x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "7fbf2e896c7750c5f5d1af986488ccb580bfe6f3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_s32 (int32_t * p, int32x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "801dcc048cd1f16e586b1fb243880473ca2f6d05", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3_lane_s64 (int64_t * p, int64x1x3_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "1623326ceab147e97872e7f85a64236ae070d0d7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_s8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_s8 (int8_t * p, int8x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "7304da6504f42b6e2df9c30df246773cdffa090c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_u16 (uint16_t * p, uint16x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "4c1c4b788469941fba01a4d76bbcaa039c1560e9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_u32 (uint32_t * p, uint32x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "adc8fb2a15fc727bc66de62b2f395a4e2f38c1b3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3_lane_u64 (uint64_t * p, uint64x1x3_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "8a55b5539c08018c8773f6a1668081abd3c0d5b2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_u8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3_lane_u8 (uint8_t * p, uint8x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3_lane_u8 (p, v, -1);\n+  return;\n+}"}, {"sha": "8a081fef39be48c073646a46602ce75e1fd7ca7f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_f32 (float32_t * p, float32x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "2d867f2dc1129a1c1d1b97e168c1887f236d0ad0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_f64 (float64_t * p, float64x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "295f6b6fcb292ca7bd73ed5eb71f411c0e6db347", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_p8 (poly8_t * p, poly8x16x3_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "160c90c399653ffc7b3f2850680420f0d751baf1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_s16 (int16_t * p, int16x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "0324f3ce11c6477fa27302e0164a708b4c7fc757", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_s32 (int32_t * p, int32x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "b56512610e09af31494896ef28c652f55004f75b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_s64 (int64_t * p, int64x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "5e35bb9959b95d3aec751b7263691bf17c8b6ad3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_s8 (int8_t * p, int8x16x3_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "9eaae3b66a46e5769b40038849a96d539773d750", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_u16 (uint16_t * p, uint16x8x3_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "62339fcdb14d9ec92bc28aaa8376960463a0d8fa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_u32 (uint32_t * p, uint32x4x3_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "39044cc226d7f89311397c7f2ec0a2832bd79dd1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_u64 (uint64_t * p, uint64x2x3_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "bf48dbb3d59c6c9f51a1fa516763af121511c7b3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst3q_lane_u8 (uint8_t * p, uint8x16x3_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst3q_lane_u8 (p, v, -1);\n+  return;\n+}"}, {"sha": "7f045120ef0f40e91a416c27d2e7f1788bcc5985", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_f32 (float32_t * p, float32x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_f32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "ddee219d376e2b6e8eaa2c4f8b9e4f3df67ed6c4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4_lane_f64 (float64_t * p, float64x1x4_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_f64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "14491acbff175f6d4f22e84d4778c915838b71f8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_p8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_p8 (poly8_t * p, poly8x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_p8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "8434a9b30ef175e5f77b070cbc7abce0403e657f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_s16 (int16_t * p, int16x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "53a4a46ae56bb1c6288165f66d1afef3111f42f8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_s32 (int32_t * p, int32x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "051c8eb9fc2e1782d9e600d74ad5410d78868791", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4_lane_s64 (int64_t * p, int64x1x4_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "33967ac515a88e7ea9ff24feb4ea8c422c9cbcf7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_s8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_s8 (int8_t * p, int8x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "8e358dd7d6b94195b8e9f8613be4ceb8b810eba7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_u16 (uint16_t * p, uint16x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "4f7899f04a2faeb90e5bc673a7a0571f3bf31663", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_u32 (uint32_t * p, uint32x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u32 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "9fb06d1809703b80e5523e248af327f2caadfc94", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4_lane_u64 (uint64_t * p, uint64x1x4_t v)\n+{\n+  /* { dg-error \"lane 1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u64 (p, v, 1);\n+  /* { dg-error \"lane -1 out of range 0 - 0\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "3a183224bc99930084ce8edd8bcb698e2a7dd037", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_u8_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4_lane_u8 (uint8_t * p, uint8x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u8 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4_lane_u8 (p, v, -1);\n+  return;\n+}"}, {"sha": "72f7d0287d85e56af5035e624084434319822168", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_f32 (float32_t * p, float32x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_f32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_f32 (p, v, -1);\n+  return;\n+}"}, {"sha": "c5f721fbed23ed94130fdd513919cec9f9f510ad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_f64 (float64_t * p, float64x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_f64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_f64 (p, v, -1);\n+  return;\n+}"}, {"sha": "3e57c954de624fd7dfafbe9776a796f5921658fb", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_p8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_p8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_p8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_p8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_p8 (poly8_t * p, poly8x16x4_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_p8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_p8 (p, v, -1);\n+  return;\n+}"}, {"sha": "5fcbc7f03cb7b7b1440bfe2156a852678183029b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_s16 (int16_t * p, int16x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s16 (p, v, -1);\n+  return;\n+}"}, {"sha": "c039c8729e0519f4ed45884da998a00c07dfb2b7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_s32 (int32_t * p, int32x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s32 (p, v, -1);\n+  return;\n+}"}, {"sha": "824a7e7e9d0b187beda314bab1b51ba805ee3b8e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_s64 (int64_t * p, int64x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s64 (p, v, -1);\n+  return;\n+}"}, {"sha": "0850c674d5dd79c16cee6d97d3011c484d4134fc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_s8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_s8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_s8 (int8_t * p, int8x16x4_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_s8 (p, v, -1);\n+  return;\n+}"}, {"sha": "6950a22921e884c015085ede91475dff7b051bca", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u16_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u16_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_u16 (uint16_t * p, uint16x8x4_t v)\n+{\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u16 (p, v, -1);\n+  return;\n+}"}, {"sha": "3c9a17184454b5a1ee2f3b803914dc7153a38a7b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u32_indices_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u32_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,15 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_u32 (uint32_t * p, uint32x4x4_t v)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u32 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u32 (p, v, -1);\n+  return;\n+}"}, {"sha": "8543e58da0025656a549c4ea7b29682f1f903560", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u64_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u64_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u64_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u64_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_u64 (uint64_t * p, uint64x2x4_t v)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u64 (p, v, 2);\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u64 (p, v, -1);\n+  return;\n+}"}, {"sha": "ade4801600ef37488242ac9d383f7b2a0fef63f7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_u8_indices_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u8_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0a023751b086e7f11dc4529042104a9bd8cb1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u8_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_u8_indices_1.c?ref=4d0a023751b086e7f11dc4529042104a9bd8cb1b", "patch": "@@ -0,0 +1,16 @@\n+#include <arm_neon.h>\n+\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-excess-errors \"\" { xfail arm*-*-* } } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+void\n+f_vst4q_lane_u8 (uint8_t * p, uint8x16x4_t v)\n+{\n+  /* { dg-error \"lane 16 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u8 (p, v, 16);\n+  /* { dg-error \"lane -1 out of range 0 - 15\" \"\" { xfail arm*-*-* } 0 } */\n+  vst4q_lane_u8 (p, v, -1);\n+  return;\n+}"}]}