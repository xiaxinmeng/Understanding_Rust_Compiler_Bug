{"sha": "6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ZjA2Nzg3ZjljMGE5ODA2YTNmNjdhNzNkZDEyYzMzYThlODA3MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-13T10:17:51Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-13T10:17:51Z"}, "message": "tree.h (TYPE_OVERFLOW_SANITIZED): Define.\n\n\t* tree.h (TYPE_OVERFLOW_SANITIZED): Define.\n\t* fold-const.c (fold_binary_loc): Use it.\n\t* match.pd: Likewise.\n\nFrom-SVN: r217470", "tree": {"sha": "e233c5cc245878914cc351b054d0a383873e68eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e233c5cc245878914cc351b054d0a383873e68eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "882de2147813cd2b848e1b6295dff6cb82d29852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882de2147813cd2b848e1b6295dff6cb82d29852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882de2147813cd2b848e1b6295dff6cb82d29852"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "be3f64dad304bc2aad8fd564d08fbdddb856f0bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "patch": "@@ -1,3 +1,9 @@\n+2014-11-13  Marek Polacek  <polacek@redhat.com>\n+\n+\t* tree.h (TYPE_OVERFLOW_SANITIZED): Define.\n+\t* fold-const.c (fold_binary_loc): Use it.\n+\t* match.pd: Likewise.\n+\n 2014-11-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc/lra-lives.c (struct bb_data): Rename to ..."}, {"sha": "a711be9c1064cb40c6c4da9a1b1e4c9e4245afe4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "patch": "@@ -10516,9 +10516,7 @@ fold_binary_loc (location_t loc,\n \n       /* A - B -> A + (-B) if B is easily negatable.  */\n       if (negate_expr_p (arg1)\n-\t  && (!INTEGRAL_TYPE_P (type)\n-\t      || TYPE_OVERFLOW_WRAPS (type)\n-\t      || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0)\n+\t  && !TYPE_OVERFLOW_SANITIZED (type)\n \t  && ((FLOAT_TYPE_P (type)\n                /* Avoid this transformation if B is a positive REAL_CST.  */\n \t       && (TREE_CODE (arg1) != REAL_CST"}, {"sha": "5a423201183f0af0e412046b1b8871af935788b5", "filename": "gcc/match.pd", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "patch": "@@ -285,26 +285,20 @@ along with GCC; see the file COPYING3.  If not see\n   /* Apply STRIP_NOPS on @0 and the negate.  */\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n        && tree_nop_conversion_p (type, TREE_TYPE (@1))\n-       && (!INTEGRAL_TYPE_P (type)\n-\t   || TYPE_OVERFLOW_WRAPS (type)\n-\t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n+       && !TYPE_OVERFLOW_SANITIZED (type))\n    (minus (convert @0) (convert @1))))\n  /* A - (-B) -> A + B */\n  (simplify\n   (minus (convert1? @0) (convert2? (negate @1)))\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n        && tree_nop_conversion_p (type, TREE_TYPE (@1))\n-       && (!INTEGRAL_TYPE_P (type)\n-\t   || TYPE_OVERFLOW_WRAPS (type)\n-\t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n+       && !TYPE_OVERFLOW_SANITIZED (type))\n    (plus (convert @0) (convert @1))))\n  /* -(-A) -> A */\n  (simplify\n   (negate (convert? (negate @1)))\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n-       && (!INTEGRAL_TYPE_P (type)\n-\t   || TYPE_OVERFLOW_WRAPS (type)\n-\t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n+       && !TYPE_OVERFLOW_SANITIZED (type))\n    (convert @1)))\n \n  /* We can't reassociate floating-point or fixed-point plus or minus"}, {"sha": "108b52dcd686d9f9d7bbcf79bd5b5a0cbbeb3fdf", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "patch": "@@ -789,6 +789,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define TYPE_OVERFLOW_TRAPS(TYPE) \\\n   (!TYPE_UNSIGNED (TYPE) && flag_trapv)\n \n+/* True if an overflow is to be preserved for sanitization.  */\n+#define TYPE_OVERFLOW_SANITIZED(TYPE)\t\t\t\\\n+  (INTEGRAL_TYPE_P (TYPE)\t\t\t\t\\\n+   && !TYPE_OVERFLOW_WRAPS (TYPE)\t\t\t\\\n+   && (flag_sanitize & SANITIZE_SI_OVERFLOW))\n+\n /* True if pointer types have undefined overflow.  */\n #define POINTER_TYPE_OVERFLOW_UNDEFINED (flag_strict_overflow)\n "}]}