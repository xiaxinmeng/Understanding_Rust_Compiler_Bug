{"sha": "a755f004a9a3eb54e3d59c92f3d0631067f21294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1NWYwMDRhOWEzZWI1NGUzZDU5YzkyZjNkMDYzMTA2N2YyMTI5NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T20:42:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T20:42:50Z"}, "message": "regrename.c: Use rtx_insn\n\ngcc/\n\t* regrename.c (create_new_chain): Strengthen param \"insn\" from rtx\n\tto rtx_insn *.\n\t(init_rename_info): Replace use of NULL_RTX with NULL when dealing\n\twith an insn.\n\t(regrename_analyze): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(scan_rtx_reg): Likewise for param \"insn\".\n\t(scan_rtx_address): Likewise.\n\t(scan_rtx): Likewise.\n\t(restore_operands): Likewise.\n\t(record_out_operands): Likewise.\n\t(build_def_use): Likewise for local \"insn\".  Replace use of\n\tNULL_RTX with NULL when dealing with an insn.\n\nFrom-SVN: r214368", "tree": {"sha": "b15b12092c6849bed0725d66fcd698e88fb87353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15b12092c6849bed0725d66fcd698e88fb87353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a755f004a9a3eb54e3d59c92f3d0631067f21294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a755f004a9a3eb54e3d59c92f3d0631067f21294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a755f004a9a3eb54e3d59c92f3d0631067f21294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a755f004a9a3eb54e3d59c92f3d0631067f21294/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f695656902c24ec3c56c00020d49097e4d73a761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f695656902c24ec3c56c00020d49097e4d73a761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f695656902c24ec3c56c00020d49097e4d73a761"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "3c2f3a36edcf1d1b35e0ef406bfbacb65cc2082d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a755f004a9a3eb54e3d59c92f3d0631067f21294/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a755f004a9a3eb54e3d59c92f3d0631067f21294/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a755f004a9a3eb54e3d59c92f3d0631067f21294", "patch": "@@ -1,3 +1,19 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* regrename.c (create_new_chain): Strengthen param \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(init_rename_info): Replace use of NULL_RTX with NULL when dealing\n+\twith an insn.\n+\t(regrename_analyze): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(scan_rtx_reg): Likewise for param \"insn\".\n+\t(scan_rtx_address): Likewise.\n+\t(scan_rtx): Likewise.\n+\t(restore_operands): Likewise.\n+\t(record_out_operands): Likewise.\n+\t(build_def_use): Likewise for local \"insn\".  Replace use of\n+\tNULL_RTX with NULL when dealing with an insn.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (reg_scan): Strengthen param \"f\" from rtx to rtx_insn *."}, {"sha": "95947894c1a96267870bb171be41759d3bb964e6", "filename": "gcc/regrename.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a755f004a9a3eb54e3d59c92f3d0631067f21294/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a755f004a9a3eb54e3d59c92f3d0631067f21294/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=a755f004a9a3eb54e3d59c92f3d0631067f21294", "patch": "@@ -107,7 +107,7 @@ static struct obstack rename_obstack;\n    information about insn operands, and we store it here.  */\n vec<insn_rr_info> insn_rr;\n \n-static void scan_rtx (rtx, rtx *, enum reg_class, enum scan_actions,\n+static void scan_rtx (rtx_insn *, rtx *, enum reg_class, enum scan_actions,\n \t\t      enum op_type);\n static bool build_def_use (basic_block);\n \n@@ -219,7 +219,7 @@ record_operand_use (struct du_head *head, struct du_chain *this_du)\n \n static du_head_p\n create_new_chain (unsigned this_regno, unsigned this_nregs, rtx *loc,\n-\t\t  rtx insn, enum reg_class cl)\n+\t\t  rtx_insn *insn, enum reg_class cl)\n {\n   struct du_head *head = XOBNEW (&rename_obstack, struct du_head);\n   struct du_chain *this_du;\n@@ -576,7 +576,7 @@ init_rename_info (struct bb_rename_info *p, basic_block bb)\n \t  du_head_p chain;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"opening incoming chain\\n\");\n-\t  chain = create_new_chain (i, iri->nregs, NULL, NULL_RTX, NO_REGS);\n+\t  chain = create_new_chain (i, iri->nregs, NULL, NULL, NO_REGS);\n \t  bitmap_set_bit (&p->incoming_open_chains_set, chain->id);\n \t}\n     }\n@@ -721,7 +721,7 @@ regrename_analyze (bitmap bb_mask)\n \t  open_chains = NULL;\n \t  if (insn_rr.exists ())\n \t    {\n-\t      rtx insn;\n+\t      rtx_insn *insn;\n \t      FOR_BB_INSNS (bb1, insn)\n \t\t{\n \t\t  insn_rr_info *p = &insn_rr[INSN_UID (insn)];\n@@ -1020,7 +1020,7 @@ note_sets_clobbers (rtx x, const_rtx set, void *data)\n }\n \n static void\n-scan_rtx_reg (rtx insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n+scan_rtx_reg (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n \t      enum op_type type)\n {\n   struct du_head **p;\n@@ -1175,7 +1175,7 @@ scan_rtx_reg (rtx insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n    BASE_REG_CLASS depending on how the register is being considered.  */\n \n static void\n-scan_rtx_address (rtx insn, rtx *loc, enum reg_class cl,\n+scan_rtx_address (rtx_insn *insn, rtx *loc, enum reg_class cl,\n \t\t  enum scan_actions action, enum machine_mode mode,\n \t\t  addr_space_t as)\n {\n@@ -1325,7 +1325,7 @@ scan_rtx_address (rtx insn, rtx *loc, enum reg_class cl,\n }\n \n static void\n-scan_rtx (rtx insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n+scan_rtx (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n \t  enum op_type type)\n {\n   const char *fmt;\n@@ -1455,7 +1455,7 @@ hide_operands (int n_ops, rtx *old_operands, rtx *old_dups,\n    are processing; the arguments are the same as in hide_operands.  */\n \n static void\n-restore_operands (rtx insn, int n_ops, rtx *old_operands, rtx *old_dups)\n+restore_operands (rtx_insn *insn, int n_ops, rtx *old_operands, rtx *old_dups)\n {\n   int i;\n   for (i = 0; i < recog_data.n_dups; i++)\n@@ -1472,7 +1472,7 @@ restore_operands (rtx insn, int n_ops, rtx *old_operands, rtx *old_dups)\n    record information about the operands in the insn.  */\n \n static void\n-record_out_operands (rtx insn, bool earlyclobber, insn_rr_info *insn_info)\n+record_out_operands (rtx_insn *insn, bool earlyclobber, insn_rr_info *insn_info)\n {\n   int n_ops = recog_data.n_operands;\n   const operand_alternative *op_alt = which_op_alt ();\n@@ -1522,7 +1522,7 @@ record_out_operands (rtx insn, bool earlyclobber, insn_rr_info *insn_info)\n static bool\n build_def_use (basic_block bb)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   unsigned HOST_WIDE_INT untracked_operands;\n \n   fail_current_block = false;\n@@ -1619,7 +1619,7 @@ build_def_use (basic_block bb)\n \t\t  enum machine_mode mode = GET_MODE (op);\n \t\t  unsigned this_regno = REGNO (op);\n \t\t  unsigned this_nregs = hard_regno_nregs[this_regno][mode];\n-\t\t  create_new_chain (this_regno, this_nregs, NULL, NULL_RTX,\n+\t\t  create_new_chain (this_regno, this_nregs, NULL, NULL,\n \t\t\t\t    NO_REGS);\n \t\t}\n \t    }"}]}