{"sha": "3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1YmNhYzMzOWM1YjE2NmJjMWE1MWMzODIyNmE4ZGM1ZTY0ODRjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-13T03:44:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-15T21:52:55Z"}, "message": "libgo: update to Go 1.16.2 release\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/301459", "tree": {"sha": "0049b97ee92ee092025a5691336112654a21be94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0049b97ee92ee092025a5691336112654a21be94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b843d4716698957606c05219a66d3fc4b44ba83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b843d4716698957606c05219a66d3fc4b44ba83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b843d4716698957606c05219a66d3fc4b44ba83"}], "stats": {"total": 702, "additions": 510, "deletions": 192}, "files": [{"sha": "c0bfa1ff78a932d0b3c0a9bd3e88449be162908e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -1,4 +1,4 @@\n-2f281eb24ef256a2d3bb9fc1a7ef964d82b40182\n+10b00ad87303d37c68b2d54dd25d655bd316946e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a52dceb182f86670343b8a9ad4b00842487130a0", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -1,4 +1,4 @@\n-f21be2fdc6f1becdbed1592ea0b245cdeedc5ac8\n+3979fb9af9ccfc0b7ccb613dcf256b18c2c295f0\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "d0b0a9004604c29380fbff0d0e12ecb2bfc8675a", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -1 +1 @@\n-go1.16\n+go1.16.2"}, {"sha": "c288ad965bc92cd4477e8c9da1eb8033d84c3cbe", "filename": "libgo/go/archive/zip/reader.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -664,7 +664,7 @@ func toValidName(name string) string {\n \tif strings.HasPrefix(p, \"/\") {\n \t\tp = p[len(\"/\"):]\n \t}\n-\tfor strings.HasPrefix(name, \"../\") {\n+\tfor strings.HasPrefix(p, \"../\") {\n \t\tp = p[len(\"../\"):]\n \t}\n \treturn p"}, {"sha": "5faf1f49b51e7b8e4cd25fbb34dfd32d46ed03bd", "filename": "libgo/go/archive/zip/reader_test.go", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -1081,3 +1081,38 @@ func TestFS(t *testing.T) {\n \t\tt.Fatal(err)\n \t}\n }\n+\n+func TestCVE202127919(t *testing.T) {\n+\t// Archive containing only the file \"../test.txt\"\n+\tdata := []byte{\n+\t\t0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00,\n+\t\t0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2e, 0x2e,\n+\t\t0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78,\n+\t\t0x74, 0x0a, 0xc9, 0xc8, 0x2c, 0x56, 0xc8, 0x2c,\n+\t\t0x56, 0x48, 0x54, 0x28, 0x49, 0x2d, 0x2e, 0x51,\n+\t\t0x28, 0x49, 0xad, 0x28, 0x51, 0x48, 0xcb, 0xcc,\n+\t\t0x49, 0xd5, 0xe3, 0x02, 0x04, 0x00, 0x00, 0xff,\n+\t\t0xff, 0x50, 0x4b, 0x07, 0x08, 0xc0, 0xd7, 0xed,\n+\t\t0xc3, 0x20, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00,\n+\t\t0x00, 0x50, 0x4b, 0x01, 0x02, 0x14, 0x00, 0x14,\n+\t\t0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0xc0, 0xd7, 0xed, 0xc3, 0x20, 0x00, 0x00,\n+\t\t0x00, 0x1a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e,\n+\t\t0x2e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74,\n+\t\t0x78, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x39, 0x00,\n+\t\t0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t}\n+\tr, err := NewReader(bytes.NewReader([]byte(data)), int64(len(data)))\n+\tif err != nil {\n+\t\tt.Fatalf(\"Error reading the archive: %v\", err)\n+\t}\n+\t_, err = r.Open(\"test.txt\")\n+\tif err != nil {\n+\t\tt.Errorf(\"Error reading file: %v\", err)\n+\t}\n+}"}, {"sha": "35582f3975f50ee85f575d5c06b1215c8be53733", "filename": "libgo/go/cmd/go.mod", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo.mod?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -6,7 +6,7 @@ require (\n \tgithub.com/google/pprof v0.0.0-20201203190320-1bf35d6f28c2\n \tgolang.org/x/arch v0.0.0-20201008161808-52c3e6f60cff\n \tgolang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897\n-\tgolang.org/x/mod v0.4.1\n+\tgolang.org/x/mod v0.4.2-0.20210302225053-d515b24adc21\n \tgolang.org/x/sys v0.0.0-20201204225414-ed752295db88 // indirect\n \tgolang.org/x/tools v0.0.0-20210107193943-4ed967dd8eff\n )"}, {"sha": "329a2f5eda48175bac1ef07742e7511adba1eb07", "filename": "libgo/go/cmd/go/internal/get/get.go", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fget%2Fget.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fget%2Fget.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fget%2Fget.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -431,7 +431,7 @@ func downloadPackage(p *load.Package) error {\n \t\t}\n \t\timportPrefix = importPrefix[:slash]\n \t}\n-\tif err := module.CheckImportPath(importPrefix); err != nil {\n+\tif err := checkImportPath(importPrefix); err != nil {\n \t\treturn fmt.Errorf(\"%s: invalid import path: %v\", p.ImportPath, err)\n \t}\n \tsecurity := web.SecureOnly\n@@ -591,3 +591,31 @@ func selectTag(goVersion string, tags []string) (match string) {\n \t}\n \treturn \"\"\n }\n+\n+// checkImportPath is like module.CheckImportPath, but it forbids leading dots\n+// in path elements. This can lead to 'go get' creating .git and other VCS\n+// directories in places we might run VCS tools later.\n+func checkImportPath(path string) error {\n+\tif err := module.CheckImportPath(path); err != nil {\n+\t\treturn err\n+\t}\n+\tcheckElem := func(elem string) error {\n+\t\tif elem[0] == '.' {\n+\t\t\treturn fmt.Errorf(\"malformed import path %q: leading dot in path element\", path)\n+\t\t}\n+\t\treturn nil\n+\t}\n+\telemStart := 0\n+\tfor i, r := range path {\n+\t\tif r == '/' {\n+\t\t\tif err := checkElem(path[elemStart:]); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\telemStart = i + 1\n+\t\t}\n+\t}\n+\tif err := checkElem(path[elemStart:]); err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}"}, {"sha": "8bc9ed50bede7ffcc9069a4b2ff0a4d974a538b8", "filename": "libgo/go/cmd/go/internal/modcmd/tidy.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Ftidy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Ftidy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Ftidy.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -62,10 +62,11 @@ func runTidy(ctx context.Context, cmd *base.Command, args []string) {\n \tmodload.RootMode = modload.NeedRoot\n \n \tmodload.LoadPackages(ctx, modload.PackageOpts{\n-\t\tTags:                  imports.AnyTags(),\n-\t\tResolveMissingImports: true,\n-\t\tLoadTests:             true,\n-\t\tAllowErrors:           tidyE,\n+\t\tTags:                     imports.AnyTags(),\n+\t\tResolveMissingImports:    true,\n+\t\tLoadTests:                true,\n+\t\tAllowErrors:              tidyE,\n+\t\tSilenceMissingStdImports: true,\n \t}, \"all\")\n \n \tmodload.TidyBuildList()"}, {"sha": "ac1fb7720aad4c86e86cfab8a9193fcad4bde4ed", "filename": "libgo/go/cmd/go/internal/modcmd/vendor.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Fvendor.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Fvendor.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodcmd%2Fvendor.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -64,10 +64,11 @@ func runVendor(ctx context.Context, cmd *base.Command, args []string) {\n \tmodload.RootMode = modload.NeedRoot\n \n \tloadOpts := modload.PackageOpts{\n-\t\tTags:                  imports.AnyTags(),\n-\t\tResolveMissingImports: true,\n-\t\tUseVendorAll:          true,\n-\t\tAllowErrors:           vendorE,\n+\t\tTags:                     imports.AnyTags(),\n+\t\tResolveMissingImports:    true,\n+\t\tUseVendorAll:             true,\n+\t\tAllowErrors:              vendorE,\n+\t\tSilenceMissingStdImports: true,\n \t}\n \t_, pkgs := modload.LoadPackages(ctx, loadOpts, \"all\")\n "}, {"sha": "5a98408a325fb35f02f6a597727793af11032e9a", "filename": "libgo/go/cmd/go/internal/modget/get.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fget.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -1514,7 +1514,7 @@ func (r *resolver) checkPackagesAndRetractions(ctx context.Context, pkgPatterns\n \t\t}\n \t}\n \tif retractPath != \"\" {\n-\t\tfmt.Fprintf(os.Stderr, \"go: to switch to the latest unretracted version, run:\\n\\tgo get %s@latest\", retractPath)\n+\t\tfmt.Fprintf(os.Stderr, \"go: to switch to the latest unretracted version, run:\\n\\tgo get %s@latest\\n\", retractPath)\n \t}\n }\n "}, {"sha": "1a5a60f7eb98fb97454ded379eeff593e8df97da", "filename": "libgo/go/cmd/go/internal/modget/query.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fquery.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fquery.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodget%2Fquery.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -186,7 +186,7 @@ func (q *query) validate() error {\n \tif q.pattern == \"all\" {\n \t\t// If there is no main module, \"all\" is not meaningful.\n \t\tif !modload.HasModRoot() {\n-\t\t\treturn fmt.Errorf(`cannot match \"all\": working directory is not part of a module`)\n+\t\t\treturn fmt.Errorf(`cannot match \"all\": %v`, modload.ErrNoModRoot)\n \t\t}\n \t\tif !versionOkForMainModule(q.version) {\n \t\t\t// TODO(bcmills): \"all@none\" seems like a totally reasonable way to"}, {"sha": "995641c9f1f36d8a65192f6448e0c6f18c502fe4", "filename": "libgo/go/cmd/go/internal/modload/import.go", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fimport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fimport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fimport.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -51,7 +51,7 @@ func (e *ImportMissingError) Error() string {\n \t\tif e.isStd {\n \t\t\treturn fmt.Sprintf(\"package %s is not in GOROOT (%s)\", e.Path, filepath.Join(cfg.GOROOT, \"src\", e.Path))\n \t\t}\n-\t\tif e.QueryErr != nil {\n+\t\tif e.QueryErr != nil && e.QueryErr != ErrNoModRoot {\n \t\t\treturn fmt.Sprintf(\"cannot find module providing package %s: %v\", e.Path, e.QueryErr)\n \t\t}\n \t\tif cfg.BuildMod == \"mod\" || (cfg.BuildMod == \"readonly\" && allowMissingModuleImports) {\n@@ -66,13 +66,11 @@ func (e *ImportMissingError) Error() string {\n \t\t\treturn fmt.Sprintf(\"module %s provides package %s and is replaced but not required; to add it:\\n\\tgo get %s\", e.replaced.Path, e.Path, suggestArg)\n \t\t}\n \n-\t\tsuggestion := \"\"\n-\t\tif !HasModRoot() {\n-\t\t\tsuggestion = \": working directory is not part of a module\"\n-\t\t} else {\n-\t\t\tsuggestion = fmt.Sprintf(\"; to add it:\\n\\tgo get %s\", e.Path)\n+\t\tmessage := fmt.Sprintf(\"no required module provides package %s\", e.Path)\n+\t\tif e.QueryErr != nil {\n+\t\t\treturn fmt.Sprintf(\"%s: %v\", message, e.QueryErr)\n \t\t}\n-\t\treturn fmt.Sprintf(\"no required module provides package %s%s\", e.Path, suggestion)\n+\t\treturn fmt.Sprintf(\"%s; to add it:\\n\\tgo get %s\", message, e.Path)\n \t}\n \n \tif e.newMissingVersion != \"\" {\n@@ -318,7 +316,11 @@ func importFromBuildList(ctx context.Context, path string, buildList []module.Ve\n \t\treturn mods[0], dirs[0], nil\n \t}\n \n-\treturn module.Version{}, \"\", &ImportMissingError{Path: path, isStd: pathIsStd}\n+\tvar queryErr error\n+\tif !HasModRoot() {\n+\t\tqueryErr = ErrNoModRoot\n+\t}\n+\treturn module.Version{}, \"\", &ImportMissingError{Path: path, QueryErr: queryErr, isStd: pathIsStd}\n }\n \n // queryImport attempts to locate a module that can be added to the current"}, {"sha": "8ec1c8681a9c8f2376c16c2e070dc533cee0ba49", "filename": "libgo/go/cmd/go/internal/modload/init.go", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Finit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Finit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Finit.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -177,7 +177,7 @@ func Init() {\n \t\t\t\tbase.Fatalf(\"go: cannot find main module, but -modfile was set.\\n\\t-modfile cannot be used to set the module root directory.\")\n \t\t\t}\n \t\t\tif RootMode == NeedRoot {\n-\t\t\t\tbase.Fatalf(\"go: cannot find main module; see 'go help modules'\")\n+\t\t\t\tbase.Fatalf(\"go: %v\", ErrNoModRoot)\n \t\t\t}\n \t\t\tif !mustUseModules {\n \t\t\t\t// GO111MODULE is 'auto', and we can't find a module root.\n@@ -338,9 +338,11 @@ func die() {\n \t\t}\n \t\tbase.Fatalf(\"go: cannot find main module, but found %s in %s\\n\\tto create a module there, run:\\n\\t%sgo mod init\", name, dir, cdCmd)\n \t}\n-\tbase.Fatalf(\"go: cannot find main module; see 'go help modules'\")\n+\tbase.Fatalf(\"go: %v\", ErrNoModRoot)\n }\n \n+var ErrNoModRoot = errors.New(\"go.mod file not found in current directory or any parent directory; see 'go help modules'\")\n+\n // LoadModFile sets Target and, if there is a main module, parses the initial\n // build list from its go.mod file.\n //\n@@ -539,9 +541,10 @@ func fixVersion(ctx context.Context, fixed *bool) modfile.VersionFixer {\n \t\t\t}\n \t\t}\n \t\tif vers != \"\" && module.CanonicalVersion(vers) == vers {\n-\t\t\tif err := module.CheckPathMajor(vers, pathMajor); err == nil {\n-\t\t\t\treturn vers, nil\n+\t\t\tif err := module.CheckPathMajor(vers, pathMajor); err != nil {\n+\t\t\t\treturn \"\", module.VersionError(module.Version{Path: path, Version: vers}, err)\n \t\t\t}\n+\t\t\treturn vers, nil\n \t\t}\n \n \t\tinfo, err := Query(ctx, path, vers, \"\", nil)"}, {"sha": "7b1aa7fd41311b966290d1e1f28ce4e2d6ce802a", "filename": "libgo/go/cmd/go/internal/modload/list.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Flist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Flist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Flist.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -73,7 +73,7 @@ func listModules(ctx context.Context, args []string, listVersions, listRetracted\n \t\t\tbase.Fatalf(\"go: cannot use relative path %s to specify module\", arg)\n \t\t}\n \t\tif !HasModRoot() && (arg == \"all\" || strings.Contains(arg, \"...\")) {\n-\t\t\tbase.Fatalf(\"go: cannot match %q: working directory is not part of a module\", arg)\n+\t\t\tbase.Fatalf(\"go: cannot match %q: %v\", arg, ErrNoModRoot)\n \t\t}\n \t\tif i := strings.Index(arg, \"@\"); i >= 0 {\n \t\t\tpath := arg[:i]"}, {"sha": "154fc3c6f0afc6bba814240e3504ef0a94d290ed", "filename": "libgo/go/cmd/go/internal/modload/load.go", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fload.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fload.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fmodload%2Fload.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -170,6 +170,12 @@ type PackageOpts struct {\n \t// that occur while loading packages. SilenceErrors implies AllowErrors.\n \tSilenceErrors bool\n \n+\t// SilenceMissingStdImports indicates that LoadPackages should not print\n+\t// errors or terminate the process if an imported package is missing, and the\n+\t// import path looks like it might be in the standard library (perhaps in a\n+\t// future version).\n+\tSilenceMissingStdImports bool\n+\n \t// SilenceUnmatchedWarnings suppresses the warnings normally emitted for\n \t// patterns that did not match any packages.\n \tSilenceUnmatchedWarnings bool\n@@ -287,8 +293,13 @@ func LoadPackages(ctx context.Context, opts PackageOpts, patterns ...string) (ma\n \t\t\t\t\tsumErr.importerIsTest = importer.testOf != nil\n \t\t\t\t}\n \t\t\t}\n+\t\t\tsilence := opts.SilenceErrors\n+\t\t\tif stdErr := (*ImportMissingError)(nil); errors.As(pkg.err, &stdErr) &&\n+\t\t\t\tstdErr.isStd && opts.SilenceMissingStdImports {\n+\t\t\t\tsilence = true\n+\t\t\t}\n \n-\t\t\tif !opts.SilenceErrors {\n+\t\t\tif !silence {\n \t\t\t\tif opts.AllowErrors {\n \t\t\t\t\tfmt.Fprintf(os.Stderr, \"%s: %v\\n\", pkg.stackText(), pkg.err)\n \t\t\t\t} else {"}, {"sha": "666b1a0e560c5156d39c56e7ae5a2a5baedaeaa6", "filename": "libgo/go/cmd/go/internal/run/run.go", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Frun%2Frun.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Frun%2Frun.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Frun%2Frun.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -96,28 +96,12 @@ func runRun(ctx context.Context, cmd *base.Command, args []string) {\n \t\tbase.Fatalf(\"go run: no go files listed\")\n \t}\n \tcmdArgs := args[i:]\n-\tif p.Error != nil {\n-\t\tbase.Fatalf(\"%s\", p.Error)\n-\t}\n+\tload.CheckPackageErrors([]*load.Package{p})\n \n-\tp.Internal.OmitDebug = true\n-\tif len(p.DepsErrors) > 0 {\n-\t\t// Since these are errors in dependencies,\n-\t\t// the same error might show up multiple times,\n-\t\t// once in each package that depends on it.\n-\t\t// Only print each once.\n-\t\tprinted := map[*load.PackageError]bool{}\n-\t\tfor _, err := range p.DepsErrors {\n-\t\t\tif !printed[err] {\n-\t\t\t\tprinted[err] = true\n-\t\t\t\tbase.Errorf(\"%s\", err)\n-\t\t\t}\n-\t\t}\n-\t}\n-\tbase.ExitIfErrors()\n \tif p.Name != \"main\" {\n \t\tbase.Fatalf(\"go run: cannot run non-main package\")\n \t}\n+\tp.Internal.OmitDebug = true\n \tp.Target = \"\" // must build - not up to date\n \tif p.Internal.CmdlineFiles {\n \t\t//set executable name if go file is given as cmd-argument"}, {"sha": "875a836fd27247387c3d31f9252a8d3ae1f8b8c2", "filename": "libgo/go/cmd/go/testdata/script/mod_convert_dep.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_convert_dep.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_convert_dep.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_convert_dep.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -18,7 +18,7 @@ stdout '^m$'\n # Test that we ignore directories when trying to find alternate config files.\n cd $WORK/gopkgdir/x\n ! go list .\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! stderr 'Gopkg.lock'\n \n -- $WORK/test/Gopkg.lock --"}, {"sha": "9da69306dacc4032e73c7610770c252732d7178b", "filename": "libgo/go/cmd/go/testdata/script/mod_edit.txt", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_edit.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_edit.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_edit.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -16,9 +16,9 @@ cmpenv go.mod $WORK/go.mod.init\n cmpenv go.mod $WORK/go.mod.init\n \n # go mod edits\n-go mod edit -droprequire=x.1 -require=x.1@v1.0.0 -require=x.2@v1.1.0 -droprequire=x.2 -exclude='x.1 @ v1.2.0' -exclude=x.1@v1.2.1 -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z' -retract=v1.6.0 -retract=[v1.1.0,v1.2.0] -retract=[v1.3.0,v1.4.0] -retract=v1.0.0\n+go mod edit -droprequire=x.1 -require=x.1@v1.0.0 -require=x.2@v1.1.0 -droprequire=x.2 -exclude='x.1 @ v1.2.0' -exclude=x.1@v1.2.1 -exclude=x.1@v2.0.0+incompatible -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z' -retract=v1.6.0 -retract=[v1.1.0,v1.2.0] -retract=[v1.3.0,v1.4.0] -retract=v1.0.0\n cmpenv go.mod $WORK/go.mod.edit1\n-go mod edit -droprequire=x.1 -dropexclude=x.1@v1.2.1 -dropreplace=x.1@v1.3.0 -require=x.3@v1.99.0 -dropretract=v1.0.0 -dropretract=[v1.1.0,v1.2.0]\n+go mod edit -droprequire=x.1 -dropexclude=x.1@v1.2.1 -dropexclude=x.1@v2.0.0+incompatible -dropreplace=x.1@v1.3.0 -require=x.3@v1.99.0 -dropretract=v1.0.0 -dropretract=[v1.1.0,v1.2.0]\n cmpenv go.mod $WORK/go.mod.edit2\n \n # -exclude and -retract reject invalid versions.\n@@ -27,6 +27,17 @@ stderr '^go mod: -exclude=example.com/m@bad: version \"bad\" invalid: must be of t\n ! go mod edit -retract=bad\n stderr '^go mod: -retract=bad: version \"bad\" invalid: must be of the form v1.2.3$'\n \n+! go mod edit -exclude=example.com/m@v2.0.0\n+stderr '^go mod: -exclude=example.com/m@v2\\.0\\.0: version \"v2\\.0\\.0\" invalid: should be v2\\.0\\.0\\+incompatible \\(or module example\\.com/m/v2\\)$'\n+\n+! go mod edit -exclude=example.com/m/v2@v1.0.0\n+stderr '^go mod: -exclude=example.com/m/v2@v1\\.0\\.0: version \"v1\\.0\\.0\" invalid: should be v2, not v1$'\n+\n+! go mod edit -exclude=gopkg.in/example.v1@v2.0.0\n+stderr '^go mod: -exclude=gopkg\\.in/example\\.v1@v2\\.0\\.0: version \"v2\\.0\\.0\" invalid: should be v1, not v2$'\n+\n+cmpenv go.mod $WORK/go.mod.edit2\n+\n # go mod edit -json\n go mod edit -json\n cmpenv stdout $WORK/go.mod.json\n@@ -88,6 +99,7 @@ require x.1 v1.0.0\n exclude (\n \tx.1 v1.2.0\n \tx.1 v1.2.1\n+\tx.1 v2.0.0+incompatible\n )\n \n replace ("}, {"sha": "1e01973ff41d1053cdf4f5e745257463f5c8c883", "filename": "libgo/go/cmd/go/testdata/script/mod_find.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_find.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_find.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_find.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -49,7 +49,7 @@ rm go.mod\n # Test that we ignore directories when trying to find go.mod.\n cd $WORK/gomoddir\n ! go list .\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n [!symlink] stop\n "}, {"sha": "565589268ee52662f472b5040454c6806c0e0527", "filename": "libgo/go/cmd/go/testdata/script/mod_outside.txt", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_outside.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_outside.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_outside.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -12,13 +12,13 @@ stdout 'NUL|/dev/null'\n # 'go list' without arguments implicitly operates on the current directory,\n # which is not in a module.\n ! go list\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n go list -m\n stdout '^command-line-arguments$'\n # 'go list' in the working directory should fail even if there is a a 'package\n # main' present: without a main module, we do not know its package path.\n ! go list ./needmod\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go list all' lists the transitive import graph of the main module,\n # which is empty if there is no main module.\n@@ -41,7 +41,7 @@ stdout 'command-line-arguments'\n \n # 'go list' on a package from a module should fail.\n ! go list example.com/printversion\n-stderr '^no required module provides package example.com/printversion: working directory is not part of a module$'\n+stderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go list -m' with an explicit version should resolve that version.\n@@ -54,19 +54,19 @@ stdout 'v1.0.0\\s+v1.0.1\\s+v1.1.0'\n \n # 'go list -m all' should fail. \"all\" is not meaningful outside of a module.\n ! go list -m all\n-stderr 'go: cannot match \"all\": working directory is not part of a module'\n+stderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go list -m <mods> all' should also fail.\n ! go list -m example.com/printversion@v1.0.0 all\n-stderr 'go: cannot match \"all\": working directory is not part of a module'\n+stderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! stdout 'example.com/version'\n \n # 'go list -m' with wildcards should fail. Wildcards match modules in the\n # build list, so they aren't meaningful outside a module.\n ! go list -m ...\n-stderr 'go: cannot match \"...\": working directory is not part of a module'\n+stderr 'go: cannot match \"...\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! go list -m rsc.io/quote/...\n-stderr 'go: cannot match \"rsc.io/quote/...\": working directory is not part of a module'\n+stderr 'go: cannot match \"rsc.io/quote/...\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go clean' should skip the current directory if it isn't in a module.\n@@ -76,20 +76,20 @@ go clean -n\n \n # 'go mod graph' should fail, since there's no module graph.\n ! go mod graph\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go mod why' should fail, since there is no main module to depend on anything.\n ! go mod why -m example.com/version\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go mod edit', 'go mod tidy', and 'go mod fmt' should fail:\n # there is no go.mod file to edit.\n ! go mod tidy\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! go mod edit -fmt\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! go mod edit -require example.com/version@v1.0.0\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go mod download' without arguments should report an error.\n@@ -104,33 +104,33 @@ exists $GOPATH/pkg/mod/cache/download/example.com/printversion/@v/v1.0.0.zip\n \n # 'go mod download all' should fail. \"all\" is not meaningful outside of a module.\n ! go mod download all\n-stderr 'go: cannot match \"all\": working directory is not part of a module'\n+stderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go mod vendor' should fail: it starts by clearing the existing vendor\n # directory, and we don't know where that is.\n ! go mod vendor\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go mod verify' should fail: we have no modules to verify.\n ! go mod verify\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go get' without arguments implicitly operates on the main module, and thus\n # should fail.\n ! go get\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! go get -u\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n ! go get -u ./needmod\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go get -u all' upgrades the transitive import graph of the main module,\n # which is empty.\n ! go get -u all\n-stderr 'go get: cannot match \"all\": working directory is not part of a module'\n+stderr '^go get: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go get' should check the proposed module graph for consistency,\n # even though we won't write it anywhere.\n@@ -147,16 +147,16 @@ exists $GOPATH/pkg/mod/example.com/version@v1.0.0\n # 'go build' without arguments implicitly operates on the current directory, and should fail.\n cd needmod\n ! go build\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n cd ..\n \n # 'go build' of a non-module directory should fail too.\n ! go build ./needmod\n-stderr 'cannot find main module'\n+stderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go build' of source files should fail if they import anything outside std.\n ! go build -n ./needmod/needmod.go\n-stderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: working directory is not part of a module$'\n+stderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go build' of source files should succeed if they do not import anything outside std.\n go build -n -o ignore ./stdonly/stdonly.go\n@@ -179,7 +179,7 @@ go doc fmt\n \n # 'go doc' should fail for a package path outside a module.\n ! go doc example.com/version\n-stderr 'doc: no required module provides package example.com/version: working directory is not part of a module'\n+stderr 'doc: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go install' with a version should succeed if all constraints are met.\n # See mod_install_pkg_version.\n@@ -194,7 +194,7 @@ stderr '^go install: version is required when current directory is not in a modu\n # 'go install' should fail if a source file imports a package that must be\n # resolved to a module.\n ! go install ./needmod/needmod.go\n-stderr 'needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: working directory is not part of a module'\n+stderr 'needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go install' should succeed with a package in GOROOT.\n go install cmd/addr2line\n@@ -206,12 +206,12 @@ stderr 'can only use path@version syntax with'\n \n # 'go run' should fail if a package argument must be resolved to a module.\n ! go run example.com/printversion\n-stderr '^no required module provides package example.com/printversion: working directory is not part of a module$'\n+stderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n # 'go run' should fail if a source file imports a package that must be\n # resolved to a module.\n ! go run ./needmod/needmod.go\n-stderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: working directory is not part of a module$'\n+stderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n \n \n # 'go fmt' should be able to format files outside of a module."}, {"sha": "395537b1a7177917d95805970163b3c7ff12edd3", "filename": "libgo/go/cmd/go/testdata/script/mod_tidy_error.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_tidy_error.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_tidy_error.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Fmod_tidy_error.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -4,12 +4,12 @@ env GO111MODULE=on\n # 'go mod tidy' and 'go mod vendor' should not hide loading errors.\n \n ! go mod tidy\n-stderr '^issue27063 imports\\n\\tnonexist: package nonexist is not in GOROOT \\(.*\\)'\n+! stderr 'package nonexist is not in GOROOT'\n stderr '^issue27063 imports\\n\\tnonexist.example.com: cannot find module providing package nonexist.example.com'\n stderr '^issue27063 imports\\n\\tissue27063/other imports\\n\\tother.example.com/nonexist: cannot find module providing package other.example.com/nonexist'\n \n ! go mod vendor\n-stderr '^issue27063 imports\\n\\tnonexist: package nonexist is not in GOROOT \\(.*\\)'\n+! stderr 'package nonexist is not in GOROOT'\n stderr '^issue27063 imports\\n\\tnonexist.example.com: cannot find module providing package nonexist.example.com'\n stderr '^issue27063 imports\\n\\tissue27063/other imports\\n\\tother.example.com/nonexist: cannot find module providing package other.example.com/nonexist'\n "}, {"sha": "10842768a8840e2ee89b4d0e7cf4b3dc136ee3d1", "filename": "libgo/go/cmd/vendor/modules.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fvendor%2Fmodules.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fcmd%2Fvendor%2Fmodules.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fvendor%2Fmodules.txt?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -28,7 +28,7 @@ golang.org/x/arch/x86/x86asm\n golang.org/x/crypto/ed25519\n golang.org/x/crypto/ed25519/internal/edwards25519\n golang.org/x/crypto/ssh/terminal\n-# golang.org/x/mod v0.4.1\n+# golang.org/x/mod v0.4.2-0.20210302225053-d515b24adc21\n ## explicit\n golang.org/x/mod/internal/lazyregexp\n golang.org/x/mod/modfile"}, {"sha": "6f9594d7ba7a3ae2cc1609e910b95d4020497b57", "filename": "libgo/go/encoding/xml/xml.go", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -271,7 +271,7 @@ func NewTokenDecoder(t TokenReader) *Decoder {\n // it will return an error.\n //\n // Token implements XML name spaces as described by\n-// https://www.w3.org/TR/REC-xml-names/.  Each of the\n+// https://www.w3.org/TR/REC-xml-names/. Each of the\n // Name structures contained in the Token has the Space\n // set to the URL identifying its name space when known.\n // If Token encounters an unrecognized name space prefix,\n@@ -285,16 +285,17 @@ func (d *Decoder) Token() (Token, error) {\n \tif d.nextToken != nil {\n \t\tt = d.nextToken\n \t\td.nextToken = nil\n-\t} else if t, err = d.rawToken(); err != nil {\n-\t\tswitch {\n-\t\tcase err == io.EOF && d.t != nil:\n-\t\t\terr = nil\n-\t\tcase err == io.EOF && d.stk != nil && d.stk.kind != stkEOF:\n-\t\t\terr = d.syntaxError(\"unexpected EOF\")\n+\t} else {\n+\t\tif t, err = d.rawToken(); t == nil && err != nil {\n+\t\t\tif err == io.EOF && d.stk != nil && d.stk.kind != stkEOF {\n+\t\t\t\terr = d.syntaxError(\"unexpected EOF\")\n+\t\t\t}\n+\t\t\treturn nil, err\n \t\t}\n-\t\treturn t, err\n+\t\t// We still have a token to process, so clear any\n+\t\t// errors (e.g. EOF) and proceed.\n+\t\terr = nil\n \t}\n-\n \tif !d.Strict {\n \t\tif t1, ok := d.autoClose(t); ok {\n \t\t\td.nextToken = t"}, {"sha": "5672ebb375f0d4a25019e0ea402922f6c60cd9a8", "filename": "libgo/go/encoding/xml/xml_test.go", "status": "modified", "additions": 82, "deletions": 22, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -33,30 +33,90 @@ func (t *toks) Token() (Token, error) {\n \n func TestDecodeEOF(t *testing.T) {\n \tstart := StartElement{Name: Name{Local: \"test\"}}\n-\tt.Run(\"EarlyEOF\", func(t *testing.T) {\n-\t\td := NewTokenDecoder(&toks{earlyEOF: true, t: []Token{\n-\t\t\tstart,\n-\t\t\tstart.End(),\n-\t\t}})\n-\t\terr := d.Decode(&struct {\n-\t\t\tXMLName Name `xml:\"test\"`\n-\t\t}{})\n-\t\tif err != nil {\n-\t\t\tt.Error(err)\n+\ttests := []struct {\n+\t\tname   string\n+\t\ttokens []Token\n+\t\tok     bool\n+\t}{\n+\t\t{\n+\t\t\tname: \"OK\",\n+\t\t\ttokens: []Token{\n+\t\t\t\tstart,\n+\t\t\t\tstart.End(),\n+\t\t\t},\n+\t\t\tok: true,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Malformed\",\n+\t\t\ttokens: []Token{\n+\t\t\t\tstart,\n+\t\t\t\tStartElement{Name: Name{Local: \"bad\"}},\n+\t\t\t\tstart.End(),\n+\t\t\t},\n+\t\t\tok: false,\n+\t\t},\n+\t}\n+\tfor _, tc := range tests {\n+\t\tfor _, eof := range []bool{true, false} {\n+\t\t\tname := fmt.Sprintf(\"%s/earlyEOF=%v\", tc.name, eof)\n+\t\t\tt.Run(name, func(t *testing.T) {\n+\t\t\t\td := NewTokenDecoder(&toks{\n+\t\t\t\t\tearlyEOF: eof,\n+\t\t\t\t\tt:        tc.tokens,\n+\t\t\t\t})\n+\t\t\t\terr := d.Decode(&struct {\n+\t\t\t\t\tXMLName Name `xml:\"test\"`\n+\t\t\t\t}{})\n+\t\t\t\tif tc.ok && err != nil {\n+\t\t\t\t\tt.Fatalf(\"d.Decode: expected nil error, got %v\", err)\n+\t\t\t\t}\n+\t\t\t\tif _, ok := err.(*SyntaxError); !tc.ok && !ok {\n+\t\t\t\t\tt.Errorf(\"d.Decode: expected syntax error, got %v\", err)\n+\t\t\t\t}\n+\t\t\t})\n \t\t}\n-\t})\n-\tt.Run(\"LateEOF\", func(t *testing.T) {\n-\t\td := NewTokenDecoder(&toks{t: []Token{\n-\t\t\tstart,\n-\t\t\tstart.End(),\n-\t\t}})\n-\t\terr := d.Decode(&struct {\n-\t\t\tXMLName Name `xml:\"test\"`\n-\t\t}{})\n-\t\tif err != nil {\n-\t\t\tt.Error(err)\n+\t}\n+}\n+\n+type toksNil struct {\n+\treturnEOF bool\n+\tt         []Token\n+}\n+\n+func (t *toksNil) Token() (Token, error) {\n+\tif len(t.t) == 0 {\n+\t\tif !t.returnEOF {\n+\t\t\t// Return nil, nil before returning an EOF. It's legal, but\n+\t\t\t// discouraged.\n+\t\t\tt.returnEOF = true\n+\t\t\treturn nil, nil\n \t\t}\n-\t})\n+\t\treturn nil, io.EOF\n+\t}\n+\tvar tok Token\n+\ttok, t.t = t.t[0], t.t[1:]\n+\treturn tok, nil\n+}\n+\n+func TestDecodeNilToken(t *testing.T) {\n+\tfor _, strict := range []bool{true, false} {\n+\t\tname := fmt.Sprintf(\"Strict=%v\", strict)\n+\t\tt.Run(name, func(t *testing.T) {\n+\t\t\tstart := StartElement{Name: Name{Local: \"test\"}}\n+\t\t\tbad := StartElement{Name: Name{Local: \"bad\"}}\n+\t\t\td := NewTokenDecoder(&toksNil{\n+\t\t\t\t// Malformed\n+\t\t\t\tt: []Token{start, bad, start.End()},\n+\t\t\t})\n+\t\t\td.Strict = strict\n+\t\t\terr := d.Decode(&struct {\n+\t\t\t\tXMLName Name `xml:\"test\"`\n+\t\t\t}{})\n+\t\t\tif _, ok := err.(*SyntaxError); !ok {\n+\t\t\t\tt.Errorf(\"d.Decode: expected syntax error, got %v\", err)\n+\t\t\t}\n+\t\t})\n+\t}\n }\n \n const testInput = `"}, {"sha": "1c0dc4692c9314945556dc6299b711c928dbd22d", "filename": "libgo/go/go/build/build_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -614,7 +614,7 @@ func TestImportPackageOutsideModule(t *testing.T) {\n \tctxt.GOPATH = gopath\n \tctxt.Dir = filepath.Join(gopath, \"src/example.com/p\")\n \n-\twant := \"working directory is not part of a module\"\n+\twant := \"go.mod file not found in current directory or any parent directory\"\n \tif _, err := ctxt.Import(\"example.com/p\", gopath, FindOnly); err == nil {\n \t\tt.Fatal(\"importing package when no go.mod is present succeeded unexpectedly\")\n \t} else if errStr := err.Error(); !strings.Contains(errStr, want) {"}, {"sha": "f8c9384985985929e27cda4acba115db0381d64e", "filename": "libgo/go/golang.org/x/mod/modfile/rule.go", "status": "modified", "additions": 127, "deletions": 40, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodfile%2Frule.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodfile%2Frule.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodfile%2Frule.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -125,6 +125,12 @@ func (f *File) AddComment(text string) {\n \n type VersionFixer func(path, version string) (string, error)\n \n+// errDontFix is returned by a VersionFixer to indicate the version should be\n+// left alone, even if it's not canonical.\n+var dontFixRetract VersionFixer = func(_, vers string) (string, error) {\n+\treturn vers, nil\n+}\n+\n // Parse parses the data, reported in errors as being from file,\n // into a File struct. It applies fix, if non-nil, to canonicalize all module versions found.\n func Parse(file string, data []byte, fix VersionFixer) (*File, error) {\n@@ -142,16 +148,26 @@ func ParseLax(file string, data []byte, fix VersionFixer) (*File, error) {\n \treturn parseToFile(file, data, fix, false)\n }\n \n-func parseToFile(file string, data []byte, fix VersionFixer, strict bool) (*File, error) {\n+func parseToFile(file string, data []byte, fix VersionFixer, strict bool) (parsed *File, err error) {\n \tfs, err := parse(file, data)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \tf := &File{\n \t\tSyntax: fs,\n \t}\n-\n \tvar errs ErrorList\n+\n+\t// fix versions in retract directives after the file is parsed.\n+\t// We need the module path to fix versions, and it might be at the end.\n+\tdefer func() {\n+\t\toldLen := len(errs)\n+\t\tf.fixRetract(fix, &errs)\n+\t\tif len(errs) > oldLen {\n+\t\t\tparsed, err = nil, errs\n+\t\t}\n+\t}()\n+\n \tfor _, x := range fs.Stmt {\n \t\tswitch x := x.(type) {\n \t\tcase *Line:\n@@ -370,7 +386,7 @@ func (f *File) add(errs *ErrorList, block *LineBlock, line *Line, verb string, a\n \n \tcase \"retract\":\n \t\trationale := parseRetractRationale(block, line)\n-\t\tvi, err := parseVersionInterval(verb, &args, fix)\n+\t\tvi, err := parseVersionInterval(verb, \"\", &args, dontFixRetract)\n \t\tif err != nil {\n \t\t\tif strict {\n \t\t\t\twrapError(err)\n@@ -397,6 +413,47 @@ func (f *File) add(errs *ErrorList, block *LineBlock, line *Line, verb string, a\n \t}\n }\n \n+// fixRetract applies fix to each retract directive in f, appending any errors\n+// to errs.\n+//\n+// Most versions are fixed as we parse the file, but for retract directives,\n+// the relevant module path is the one specified with the module directive,\n+// and that might appear at the end of the file (or not at all).\n+func (f *File) fixRetract(fix VersionFixer, errs *ErrorList) {\n+\tif fix == nil {\n+\t\treturn\n+\t}\n+\tpath := \"\"\n+\tif f.Module != nil {\n+\t\tpath = f.Module.Mod.Path\n+\t}\n+\tvar r *Retract\n+\twrapError := func(err error) {\n+\t\t*errs = append(*errs, Error{\n+\t\t\tFilename: f.Syntax.Name,\n+\t\t\tPos:      r.Syntax.Start,\n+\t\t\tErr:      err,\n+\t\t})\n+\t}\n+\n+\tfor _, r = range f.Retract {\n+\t\tif path == \"\" {\n+\t\t\twrapError(errors.New(\"no module directive found, so retract cannot be used\"))\n+\t\t\treturn // only print the first one of these\n+\t\t}\n+\n+\t\targs := r.Syntax.Token\n+\t\tif args[0] == \"retract\" {\n+\t\t\targs = args[1:]\n+\t\t}\n+\t\tvi, err := parseVersionInterval(\"retract\", path, &args, fix)\n+\t\tif err != nil {\n+\t\t\twrapError(err)\n+\t\t}\n+\t\tr.VersionInterval = vi\n+\t}\n+}\n+\n // isIndirect reports whether line has a \"// indirect\" comment,\n // meaning it is in go.mod only for its effect on indirect dependencies,\n // so that it can be dropped entirely once the effective version of the\n@@ -491,13 +548,13 @@ func AutoQuote(s string) string {\n \treturn s\n }\n \n-func parseVersionInterval(verb string, args *[]string, fix VersionFixer) (VersionInterval, error) {\n+func parseVersionInterval(verb string, path string, args *[]string, fix VersionFixer) (VersionInterval, error) {\n \ttoks := *args\n \tif len(toks) == 0 || toks[0] == \"(\" {\n \t\treturn VersionInterval{}, fmt.Errorf(\"expected '[' or version\")\n \t}\n \tif toks[0] != \"[\" {\n-\t\tv, err := parseVersion(verb, \"\", &toks[0], fix)\n+\t\tv, err := parseVersion(verb, path, &toks[0], fix)\n \t\tif err != nil {\n \t\t\treturn VersionInterval{}, err\n \t\t}\n@@ -509,7 +566,7 @@ func parseVersionInterval(verb string, args *[]string, fix VersionFixer) (Versio\n \tif len(toks) == 0 {\n \t\treturn VersionInterval{}, fmt.Errorf(\"expected version after '['\")\n \t}\n-\tlow, err := parseVersion(verb, \"\", &toks[0], fix)\n+\tlow, err := parseVersion(verb, path, &toks[0], fix)\n \tif err != nil {\n \t\treturn VersionInterval{}, err\n \t}\n@@ -523,7 +580,7 @@ func parseVersionInterval(verb string, args *[]string, fix VersionFixer) (Versio\n \tif len(toks) == 0 {\n \t\treturn VersionInterval{}, fmt.Errorf(\"expected version after ','\")\n \t}\n-\thigh, err := parseVersion(verb, \"\", &toks[0], fix)\n+\thigh, err := parseVersion(verb, path, &toks[0], fix)\n \tif err != nil {\n \t\treturn VersionInterval{}, err\n \t}\n@@ -631,8 +688,7 @@ func parseVersion(verb string, path string, s *string, fix VersionFixer) (string\n \t\t}\n \t}\n \tif fix != nil {\n-\t\tvar err error\n-\t\tt, err = fix(path, t)\n+\t\tfixed, err := fix(path, t)\n \t\tif err != nil {\n \t\t\tif err, ok := err.(*module.ModuleError); ok {\n \t\t\t\treturn \"\", &Error{\n@@ -643,19 +699,23 @@ func parseVersion(verb string, path string, s *string, fix VersionFixer) (string\n \t\t\t}\n \t\t\treturn \"\", err\n \t\t}\n+\t\tt = fixed\n+\t} else {\n+\t\tcv := module.CanonicalVersion(t)\n+\t\tif cv == \"\" {\n+\t\t\treturn \"\", &Error{\n+\t\t\t\tVerb:    verb,\n+\t\t\t\tModPath: path,\n+\t\t\t\tErr: &module.InvalidVersionError{\n+\t\t\t\t\tVersion: t,\n+\t\t\t\t\tErr:     errors.New(\"must be of the form v1.2.3\"),\n+\t\t\t\t},\n+\t\t\t}\n+\t\t}\n+\t\tt = cv\n \t}\n-\tif v := module.CanonicalVersion(t); v != \"\" {\n-\t\t*s = v\n-\t\treturn *s, nil\n-\t}\n-\treturn \"\", &Error{\n-\t\tVerb:    verb,\n-\t\tModPath: path,\n-\t\tErr: &module.InvalidVersionError{\n-\t\t\tVersion: t,\n-\t\t\tErr:     errors.New(\"must be of the form v1.2.3\"),\n-\t\t},\n-\t}\n+\t*s = t\n+\treturn *s, nil\n }\n \n func modulePathMajor(path string) (string, error) {\n@@ -835,11 +895,8 @@ func (f *File) DropRequire(path string) error {\n // AddExclude adds a exclude statement to the mod file. Errors if the provided\n // version is not a canonical version string\n func (f *File) AddExclude(path, vers string) error {\n-\tif !isCanonicalVersion(vers) {\n-\t\treturn &module.InvalidVersionError{\n-\t\t\tVersion: vers,\n-\t\t\tErr:     errors.New(\"must be of the form v1.2.3\"),\n-\t\t}\n+\tif err := checkCanonicalVersion(path, vers); err != nil {\n+\t\treturn err\n \t}\n \n \tvar hint *Line\n@@ -916,17 +973,15 @@ func (f *File) DropReplace(oldPath, oldVers string) error {\n // AddRetract adds a retract statement to the mod file. Errors if the provided\n // version interval does not consist of canonical version strings\n func (f *File) AddRetract(vi VersionInterval, rationale string) error {\n-\tif !isCanonicalVersion(vi.High) {\n-\t\treturn &module.InvalidVersionError{\n-\t\t\tVersion: vi.High,\n-\t\t\tErr:     errors.New(\"must be of the form v1.2.3\"),\n-\t\t}\n+\tvar path string\n+\tif f.Module != nil {\n+\t\tpath = f.Module.Mod.Path\n \t}\n-\tif !isCanonicalVersion(vi.Low) {\n-\t\treturn &module.InvalidVersionError{\n-\t\t\tVersion: vi.Low,\n-\t\t\tErr:     errors.New(\"must be of the form v1.2.3\"),\n-\t\t}\n+\tif err := checkCanonicalVersion(path, vi.High); err != nil {\n+\t\treturn err\n+\t}\n+\tif err := checkCanonicalVersion(path, vi.Low); err != nil {\n+\t\treturn err\n \t}\n \n \tr := &Retract{\n@@ -1086,8 +1141,40 @@ func lineRetractLess(li, lj *Line) bool {\n \treturn semver.Compare(vii.High, vij.High) > 0\n }\n \n-// isCanonicalVersion tests if the provided version string represents a valid\n-// canonical version.\n-func isCanonicalVersion(vers string) bool {\n-\treturn vers != \"\" && semver.Canonical(vers) == vers\n+// checkCanonicalVersion returns a non-nil error if vers is not a canonical\n+// version string or does not match the major version of path.\n+//\n+// If path is non-empty, the error text suggests a format with a major version\n+// corresponding to the path.\n+func checkCanonicalVersion(path, vers string) error {\n+\t_, pathMajor, pathMajorOk := module.SplitPathVersion(path)\n+\n+\tif vers == \"\" || vers != module.CanonicalVersion(vers) {\n+\t\tif pathMajor == \"\" {\n+\t\t\treturn &module.InvalidVersionError{\n+\t\t\t\tVersion: vers,\n+\t\t\t\tErr:     fmt.Errorf(\"must be of the form v1.2.3\"),\n+\t\t\t}\n+\t\t}\n+\t\treturn &module.InvalidVersionError{\n+\t\t\tVersion: vers,\n+\t\t\tErr:     fmt.Errorf(\"must be of the form %s.2.3\", module.PathMajorPrefix(pathMajor)),\n+\t\t}\n+\t}\n+\n+\tif pathMajorOk {\n+\t\tif err := module.CheckPathMajor(vers, pathMajor); err != nil {\n+\t\t\tif pathMajor == \"\" {\n+\t\t\t\t// In this context, the user probably wrote \"v2.3.4\" when they meant\n+\t\t\t\t// \"v2.3.4+incompatible\". Suggest that instead of \"v0 or v1\".\n+\t\t\t\treturn &module.InvalidVersionError{\n+\t\t\t\t\tVersion: vers,\n+\t\t\t\t\tErr:     fmt.Errorf(\"should be %s+incompatible (or module %s/%v)\", vers, path, semver.Major(vers)),\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\n+\treturn nil\n }"}, {"sha": "272baeef176d84caa42da02f8aba72e50769ef8d", "filename": "libgo/go/golang.org/x/mod/module/module.go", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodule%2Fmodule.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodule%2Fmodule.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fmod%2Fmodule%2Fmodule.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -270,7 +270,7 @@ func fileNameOK(r rune) bool {\n \n // CheckPath checks that a module path is valid.\n // A valid module path is a valid import path, as checked by CheckImportPath,\n-// with two additional constraints.\n+// with three additional constraints.\n // First, the leading path element (up to the first slash, if any),\n // by convention a domain name, must contain only lower-case ASCII letters,\n // ASCII digits, dots (U+002E), and dashes (U+002D);\n@@ -280,8 +280,9 @@ func fileNameOK(r rune) bool {\n // and must not contain any dots. For paths beginning with \"gopkg.in/\",\n // this second requirement is replaced by a requirement that the path\n // follow the gopkg.in server's conventions.\n+// Third, no path element may begin with a dot.\n func CheckPath(path string) error {\n-\tif err := checkPath(path, false); err != nil {\n+\tif err := checkPath(path, modulePath); err != nil {\n \t\treturn fmt.Errorf(\"malformed module path %q: %v\", path, err)\n \t}\n \ti := strings.Index(path, \"/\")\n@@ -315,7 +316,7 @@ func CheckPath(path string) error {\n //\n // A valid path element is a non-empty string made up of\n // ASCII letters, ASCII digits, and limited ASCII punctuation: - . _ and ~.\n-// It must not begin or end with a dot (U+002E), nor contain two dots in a row.\n+// It must not end with a dot (U+002E), nor contain two dots in a row.\n //\n // The element prefix up to the first dot must not be a reserved file name\n // on Windows, regardless of case (CON, com1, NuL, and so on). The element\n@@ -326,19 +327,29 @@ func CheckPath(path string) error {\n // top-level package documentation for additional information about\n // subtleties of Unicode.\n func CheckImportPath(path string) error {\n-\tif err := checkPath(path, false); err != nil {\n+\tif err := checkPath(path, importPath); err != nil {\n \t\treturn fmt.Errorf(\"malformed import path %q: %v\", path, err)\n \t}\n \treturn nil\n }\n \n+// pathKind indicates what kind of path we're checking. Module paths,\n+// import paths, and file paths have different restrictions.\n+type pathKind int\n+\n+const (\n+\tmodulePath pathKind = iota\n+\timportPath\n+\tfilePath\n+)\n+\n // checkPath checks that a general path is valid.\n // It returns an error describing why but not mentioning path.\n // Because these checks apply to both module paths and import paths,\n // the caller is expected to add the \"malformed ___ path %q: \" prefix.\n // fileName indicates whether the final element of the path is a file name\n // (as opposed to a directory name).\n-func checkPath(path string, fileName bool) error {\n+func checkPath(path string, kind pathKind) error {\n \tif !utf8.ValidString(path) {\n \t\treturn fmt.Errorf(\"invalid UTF-8\")\n \t}\n@@ -357,35 +368,34 @@ func checkPath(path string, fileName bool) error {\n \telemStart := 0\n \tfor i, r := range path {\n \t\tif r == '/' {\n-\t\t\tif err := checkElem(path[elemStart:i], fileName); err != nil {\n+\t\t\tif err := checkElem(path[elemStart:i], kind); err != nil {\n \t\t\t\treturn err\n \t\t\t}\n \t\t\telemStart = i + 1\n \t\t}\n \t}\n-\tif err := checkElem(path[elemStart:], fileName); err != nil {\n+\tif err := checkElem(path[elemStart:], kind); err != nil {\n \t\treturn err\n \t}\n \treturn nil\n }\n \n // checkElem checks whether an individual path element is valid.\n-// fileName indicates whether the element is a file name (not a directory name).\n-func checkElem(elem string, fileName bool) error {\n+func checkElem(elem string, kind pathKind) error {\n \tif elem == \"\" {\n \t\treturn fmt.Errorf(\"empty path element\")\n \t}\n \tif strings.Count(elem, \".\") == len(elem) {\n \t\treturn fmt.Errorf(\"invalid path element %q\", elem)\n \t}\n-\tif elem[0] == '.' && !fileName {\n+\tif elem[0] == '.' && kind == modulePath {\n \t\treturn fmt.Errorf(\"leading dot in path element\")\n \t}\n \tif elem[len(elem)-1] == '.' {\n \t\treturn fmt.Errorf(\"trailing dot in path element\")\n \t}\n \tcharOK := pathOK\n-\tif fileName {\n+\tif kind == filePath {\n \t\tcharOK = fileNameOK\n \t}\n \tfor _, r := range elem {\n@@ -406,7 +416,7 @@ func checkElem(elem string, fileName bool) error {\n \t\t}\n \t}\n \n-\tif fileName {\n+\tif kind == filePath {\n \t\t// don't check for Windows short-names in file names. They're\n \t\t// only an issue for import paths.\n \t\treturn nil\n@@ -444,7 +454,7 @@ func checkElem(elem string, fileName bool) error {\n // top-level package documentation for additional information about\n // subtleties of Unicode.\n func CheckFilePath(path string) error {\n-\tif err := checkPath(path, true); err != nil {\n+\tif err := checkPath(path, filePath); err != nil {\n \t\treturn fmt.Errorf(\"malformed file path %q: %v\", path, err)\n \t}\n \treturn nil\n@@ -647,7 +657,7 @@ func EscapePath(path string) (escaped string, err error) {\n // Versions are allowed to be in non-semver form but must be valid file names\n // and not contain exclamation marks.\n func EscapeVersion(v string) (escaped string, err error) {\n-\tif err := checkElem(v, true); err != nil || strings.Contains(v, \"!\") {\n+\tif err := checkElem(v, filePath); err != nil || strings.Contains(v, \"!\") {\n \t\treturn \"\", &InvalidVersionError{\n \t\t\tVersion: v,\n \t\t\tErr:     fmt.Errorf(\"disallowed version string\"),\n@@ -706,7 +716,7 @@ func UnescapeVersion(escaped string) (v string, err error) {\n \tif !ok {\n \t\treturn \"\", fmt.Errorf(\"invalid escaped version %q\", escaped)\n \t}\n-\tif err := checkElem(v, true); err != nil {\n+\tif err := checkElem(v, filePath); err != nil {\n \t\treturn \"\", fmt.Errorf(\"invalid escaped version %q: %v\", v, err)\n \t}\n \treturn v, nil"}, {"sha": "6db9443474711123592bae207e17d26fb34bceb4", "filename": "libgo/go/time/zoneinfo.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Ftime%2Fzoneinfo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Ftime%2Fzoneinfo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -377,8 +377,10 @@ func tzsetOffset(s string) (offset int, rest string, ok bool) {\n \t\tneg = true\n \t}\n \n+\t// The tzdata code permits values up to 24 * 7 here,\n+\t// although POSIX does not.\n \tvar hours int\n-\thours, s, ok = tzsetNum(s, 0, 24)\n+\thours, s, ok = tzsetNum(s, 0, 24*7)\n \tif !ok {\n \t\treturn 0, \"\", false\n \t}\n@@ -487,7 +489,7 @@ func tzsetRule(s string) (rule, string, bool) {\n \t}\n \n \toffset, s, ok := tzsetOffset(s[1:])\n-\tif !ok || offset < 0 {\n+\tif !ok {\n \t\treturn rule{}, \"\", false\n \t}\n \tr.time = offset"}, {"sha": "3e32da02b2e1334d67f1d74708d946a4809a2e65", "filename": "libgo/go/time/zoneinfo_test.go", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Ftime%2Fzoneinfo_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fgo%2Ftime%2Fzoneinfo_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_test.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -189,22 +189,50 @@ func TestMalformedTZData(t *testing.T) {\n \t}\n }\n \n-func TestLoadLocationFromTZDataSlim(t *testing.T) {\n-\t// A 2020b slim tzdata for Europe/Berlin\n-\ttzData := \"TZif2\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00TZif2\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00<\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x12\\xff\\xff\\xff\\xffo\\xa2a\\xf8\\xff\\xff\\xff\\xff\\x9b\\f\\x17`\\xff\\xff\\xff\\xff\\x9b\\xd5\\xda\\xf0\\xff\\xff\\xff\\xff\\x9c\u066e\\x90\\xff\\xff\\xff\\xff\\x9d\\xa4\\xb5\\x90\\xff\\xff\\xff\\xff\\x9e\\xb9\\x90\\x90\\xff\\xff\\xff\\xff\\x9f\\x84\\x97\\x90\\xff\\xff\\xff\\xff\\xc8\\tq\\x90\\xff\\xff\\xff\\xff\\xcc\\xe7K\\x10\\xff\\xff\\xff\\xff\u0369\\x17\\x90\\xff\\xff\\xff\\xff\\u03a2C\\x10\\xff\\xff\\xff\\xff\u03d24\\x10\\xff\\xff\\xff\\xff\u0402%\\x10\\xff\\xff\\xff\\xff\\xd1r\\x16\\x10\\xff\\xff\\xff\\xff\u0476\\x96\\x00\\xff\\xff\\xff\\xff\\xd2X\\xbe\\x80\\xff\\xff\\xff\\xff\u04a1O\\x10\\xff\\xff\\xff\\xff\\xd3c\\x1b\\x90\\xff\\xff\\xff\\xff\\xd4K#\\x90\\xff\\xff\\xff\\xff\\xd59\\xd1 \\xff\\xff\\xff\\xff\\xd5g\\xe7\\x90\\xff\\xff\\xff\\xff\u0568s\\x00\\xff\\xff\\xff\\xff\\xd6)\\xb4\\x10\\xff\\xff\\xff\\xff\\xd7,\\x1a\\x10\\xff\\xff\\xff\\xff\\xd8\\t\\x96\\x10\\xff\\xff\\xff\\xff\\xd9\\x02\\xc1\\x90\\xff\\xff\\xff\\xff\\xd9\\xe9x\\x10\\x00\\x00\\x00\\x00\\x13MD\\x10\\x00\\x00\\x00\\x00\\x143\\xfa\\x90\\x00\\x00\\x00\\x00\\x15#\\xeb\\x90\\x00\\x00\\x00\\x00\\x16\\x13\u0710\\x00\\x00\\x00\\x00\\x17\\x03\u0350\\x00\\x00\\x00\\x00\\x17\\xf3\\xbe\\x90\\x00\\x00\\x00\\x00\\x18\u3bd0\\x00\\x00\\x00\\x00\\x19\u04e0\\x90\\x00\\x00\\x00\\x00\\x1a\u00d1\\x90\\x00\\x00\\x00\\x00\\x1b\\xbc\\xbd\\x10\\x00\\x00\\x00\\x00\\x1c\\xac\\xae\\x10\\x00\\x00\\x00\\x00\\x1d\\x9c\\x9f\\x10\\x00\\x00\\x00\\x00\\x1e\\x8c\\x90\\x10\\x00\\x00\\x00\\x00\\x1f|\\x81\\x10\\x00\\x00\\x00\\x00 lr\\x10\\x00\\x00\\x00\\x00!\\\\c\\x10\\x00\\x00\\x00\\x00\\\"LT\\x10\\x00\\x00\\x00\\x00#<E\\x10\\x00\\x00\\x00\\x00$,6\\x10\\x00\\x00\\x00\\x00%\\x1c'\\x10\\x00\\x00\\x00\\x00&\\f\\x18\\x10\\x00\\x00\\x00\\x00'\\x05C\\x90\\x00\\x00\\x00\\x00'\\xf54\\x90\\x00\\x00\\x00\\x00(\\xe5%\\x90\\x00\\x00\\x00\\x00)\\xd5\\x16\\x90\\x00\\x00\\x00\\x00*\\xc5\\a\\x90\\x00\\x00\\x00\\x00+\\xb4\\xf8\\x90\\x00\\x00\\x00\\x00,\\xa4\\xe9\\x90\\x00\\x00\\x00\\x00-\\x94\u0690\\x00\\x00\\x00\\x00.\\x84\u02d0\\x00\\x00\\x00\\x00/t\\xbc\\x90\\x00\\x00\\x00\\x000d\\xad\\x90\\x00\\x00\\x00\\x001]\\xd9\\x10\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x03\\x01\\x02\\x01\\x02\\x01\\x03\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x00\\x00\\f\\x88\\x00\\x00\\x00\\x00\\x1c \\x01\\x04\\x00\\x00\\x0e\\x10\\x00\\t\\x00\\x00*0\\x01\\rLMT\\x00CEST\\x00CET\\x00CEMT\\x00\\nCET-1CEST,M3.5.0,M10.5.0/3\\n\"\n+var slimTests = []struct {\n+\tzoneName   string\n+\ttzData     string\n+\twantName   string\n+\twantOffset int\n+}{\n+\t{\n+\t\t// 2020b slim tzdata for Europe/Berlin.\n+\t\tzoneName:   \"Europe/Berlin\",\n+\t\ttzData:     \"TZif2\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00TZif2\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00<\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x12\\xff\\xff\\xff\\xffo\\xa2a\\xf8\\xff\\xff\\xff\\xff\\x9b\\f\\x17`\\xff\\xff\\xff\\xff\\x9b\\xd5\\xda\\xf0\\xff\\xff\\xff\\xff\\x9c\u066e\\x90\\xff\\xff\\xff\\xff\\x9d\\xa4\\xb5\\x90\\xff\\xff\\xff\\xff\\x9e\\xb9\\x90\\x90\\xff\\xff\\xff\\xff\\x9f\\x84\\x97\\x90\\xff\\xff\\xff\\xff\\xc8\\tq\\x90\\xff\\xff\\xff\\xff\\xcc\\xe7K\\x10\\xff\\xff\\xff\\xff\u0369\\x17\\x90\\xff\\xff\\xff\\xff\\u03a2C\\x10\\xff\\xff\\xff\\xff\u03d24\\x10\\xff\\xff\\xff\\xff\u0402%\\x10\\xff\\xff\\xff\\xff\\xd1r\\x16\\x10\\xff\\xff\\xff\\xff\u0476\\x96\\x00\\xff\\xff\\xff\\xff\\xd2X\\xbe\\x80\\xff\\xff\\xff\\xff\u04a1O\\x10\\xff\\xff\\xff\\xff\\xd3c\\x1b\\x90\\xff\\xff\\xff\\xff\\xd4K#\\x90\\xff\\xff\\xff\\xff\\xd59\\xd1 \\xff\\xff\\xff\\xff\\xd5g\\xe7\\x90\\xff\\xff\\xff\\xff\u0568s\\x00\\xff\\xff\\xff\\xff\\xd6)\\xb4\\x10\\xff\\xff\\xff\\xff\\xd7,\\x1a\\x10\\xff\\xff\\xff\\xff\\xd8\\t\\x96\\x10\\xff\\xff\\xff\\xff\\xd9\\x02\\xc1\\x90\\xff\\xff\\xff\\xff\\xd9\\xe9x\\x10\\x00\\x00\\x00\\x00\\x13MD\\x10\\x00\\x00\\x00\\x00\\x143\\xfa\\x90\\x00\\x00\\x00\\x00\\x15#\\xeb\\x90\\x00\\x00\\x00\\x00\\x16\\x13\u0710\\x00\\x00\\x00\\x00\\x17\\x03\u0350\\x00\\x00\\x00\\x00\\x17\\xf3\\xbe\\x90\\x00\\x00\\x00\\x00\\x18\u3bd0\\x00\\x00\\x00\\x00\\x19\u04e0\\x90\\x00\\x00\\x00\\x00\\x1a\u00d1\\x90\\x00\\x00\\x00\\x00\\x1b\\xbc\\xbd\\x10\\x00\\x00\\x00\\x00\\x1c\\xac\\xae\\x10\\x00\\x00\\x00\\x00\\x1d\\x9c\\x9f\\x10\\x00\\x00\\x00\\x00\\x1e\\x8c\\x90\\x10\\x00\\x00\\x00\\x00\\x1f|\\x81\\x10\\x00\\x00\\x00\\x00 lr\\x10\\x00\\x00\\x00\\x00!\\\\c\\x10\\x00\\x00\\x00\\x00\\\"LT\\x10\\x00\\x00\\x00\\x00#<E\\x10\\x00\\x00\\x00\\x00$,6\\x10\\x00\\x00\\x00\\x00%\\x1c'\\x10\\x00\\x00\\x00\\x00&\\f\\x18\\x10\\x00\\x00\\x00\\x00'\\x05C\\x90\\x00\\x00\\x00\\x00'\\xf54\\x90\\x00\\x00\\x00\\x00(\\xe5%\\x90\\x00\\x00\\x00\\x00)\\xd5\\x16\\x90\\x00\\x00\\x00\\x00*\\xc5\\a\\x90\\x00\\x00\\x00\\x00+\\xb4\\xf8\\x90\\x00\\x00\\x00\\x00,\\xa4\\xe9\\x90\\x00\\x00\\x00\\x00-\\x94\u0690\\x00\\x00\\x00\\x00.\\x84\u02d0\\x00\\x00\\x00\\x00/t\\xbc\\x90\\x00\\x00\\x00\\x000d\\xad\\x90\\x00\\x00\\x00\\x001]\\xd9\\x10\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x03\\x01\\x02\\x01\\x02\\x01\\x03\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x00\\x00\\f\\x88\\x00\\x00\\x00\\x00\\x1c \\x01\\x04\\x00\\x00\\x0e\\x10\\x00\\t\\x00\\x00*0\\x01\\rLMT\\x00CEST\\x00CET\\x00CEMT\\x00\\nCET-1CEST,M3.5.0,M10.5.0/3\\n\",\n+\t\twantName:   \"CET\",\n+\t\twantOffset: 3600,\n+\t},\n+\t{\n+\t\t// 2021a slim tzdata for America/Nuuk.\n+\t\tzoneName:   \"America/Nuuk\",\n+\t\ttzData:     \"TZif3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00TZif3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\"\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\f\\xff\\xff\\xff\\xff\\x9b\\x80h\\x00\\x00\\x00\\x00\\x00\\x13M|P\\x00\\x00\\x00\\x00\\x143\\xfa\\x90\\x00\\x00\\x00\\x00\\x15#\\xeb\\x90\\x00\\x00\\x00\\x00\\x16\\x13\u0710\\x00\\x00\\x00\\x00\\x17\\x03\u0350\\x00\\x00\\x00\\x00\\x17\\xf3\\xbe\\x90\\x00\\x00\\x00\\x00\\x18\u3bd0\\x00\\x00\\x00\\x00\\x19\u04e0\\x90\\x00\\x00\\x00\\x00\\x1a\u00d1\\x90\\x00\\x00\\x00\\x00\\x1b\\xbc\\xbd\\x10\\x00\\x00\\x00\\x00\\x1c\\xac\\xae\\x10\\x00\\x00\\x00\\x00\\x1d\\x9c\\x9f\\x10\\x00\\x00\\x00\\x00\\x1e\\x8c\\x90\\x10\\x00\\x00\\x00\\x00\\x1f|\\x81\\x10\\x00\\x00\\x00\\x00 lr\\x10\\x00\\x00\\x00\\x00!\\\\c\\x10\\x00\\x00\\x00\\x00\\\"LT\\x10\\x00\\x00\\x00\\x00#<E\\x10\\x00\\x00\\x00\\x00$,6\\x10\\x00\\x00\\x00\\x00%\\x1c'\\x10\\x00\\x00\\x00\\x00&\\f\\x18\\x10\\x00\\x00\\x00\\x00'\\x05C\\x90\\x00\\x00\\x00\\x00'\\xf54\\x90\\x00\\x00\\x00\\x00(\\xe5%\\x90\\x00\\x00\\x00\\x00)\\xd5\\x16\\x90\\x00\\x00\\x00\\x00*\\xc5\\a\\x90\\x00\\x00\\x00\\x00+\\xb4\\xf8\\x90\\x00\\x00\\x00\\x00,\\xa4\\xe9\\x90\\x00\\x00\\x00\\x00-\\x94\u0690\\x00\\x00\\x00\\x00.\\x84\u02d0\\x00\\x00\\x00\\x00/t\\xbc\\x90\\x00\\x00\\x00\\x000d\\xad\\x90\\x00\\x00\\x00\\x001]\\xd9\\x10\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\xff\\xff\u03c0\\x00\\x00\\xff\\xff\\xd5\\xd0\\x00\\x04\\xff\\xff\\xe3\\xe0\\x01\\bLMT\\x00-03\\x00-02\\x00\\n<-03>3<-02>,M3.5.0/-2,M10.5.0/-1\\n\",\n+\t\twantName:   \"-03\",\n+\t\twantOffset: -10800,\n+\t},\n+\t{\n+\t\t// 2021a slim tzdata for Asia/Gaza.\n+\t\tzoneName:   \"Asia/Gaza\",\n+\t\ttzData:     \"TZif3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00TZif3\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00s\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x15\\xff\\xff\\xff\\xff}\\xbdJ\\xb0\\xff\\xff\\xff\\xff\\xc8Y\\xcf\\x00\\xff\\xff\\xff\\xff\\xc8\\xfa\\xa6\\x00\\xff\\xff\\xff\\xff\\xc98\\x9c\\x80\\xff\\xff\\xff\\xff\\xcc\\xe5\\xeb\\x80\\xff\\xff\\xff\\xff\u036c\\xfe\\x00\\xff\\xff\\xff\\xff\\xce\\xc7\\x1f\\x00\\xff\\xff\\xff\\xff\u03cf\\x83\\x00\\xff\\xff\\xff\\xff\u0429\\xa4\\x00\\xff\\xff\\xff\\xff\u0444}\\x00\\xff\\xff\\xff\\xff\u048a\u05c0\\xff\\xff\\xff\\xff\\xd3e\\xb0\\x80\\xff\\xff\\xff\\xff\\xd4l\\v\\x00\\xff\\xff\\xff\\xff\\xe86c`\\xff\\xff\\xff\\xff\\xe8\\xf4-P\\xff\\xff\\xff\\xff\\xea\\v\\xb9`\\xff\\xff\\xff\\xff\\xea\\xd5`\\xd0\\xff\\xff\\xff\\xff\\xeb\\xec\\xfa\\xf0\\xff\\xff\\xff\\xff\\xec\\xb5m\\x00\\xff\\xff\\xff\\xff\\xed\\xcf\\u007f\\xf0\\xff\\xff\\xff\\xff\\xee\\x97\\xf2\\x00\\xff\\xff\\xff\\xff\ufc33p\\xff\\xff\\xff\\xff\\xf0y%\\x80\\xff\\xff\\xff\\xff\\xf1\\x91\\xe6\\xf0\\xff\\xff\\xff\\xff\\xf2ZY\\x00\\xff\\xff\\xff\\xff\\xf3s\\x1ap\\xff\\xff\\xff\\xff\\xf4;\\x8c\\x80\\xff\\xff\\xff\\xff\\xf5U\\x9fp\\xff\\xff\\xff\\xff\\xf6\\x1e\\x11\\x80\\xff\\xff\\xff\\xff\\xf76\\xd2\\xf0\\xff\\xff\\xff\\xff\\xf7\\xffE\\x00\\xff\\xff\\xff\\xff\\xf9\\x18\\x06p\\xff\\xff\\xff\\xff\\xf9\\xe1\\xca\\x00\\xff\\xff\\xff\\xff\\xfa\\xf99\\xf0\\xff\\xff\\xff\\xff\\xfb'BP\\x00\\x00\\x00\\x00\\b|\\x8b\\xe0\\x00\\x00\\x00\\x00\\b\\xfd\\xb0\\xd0\\x00\\x00\\x00\\x00\\t\\xf6\\xea`\\x00\\x00\\x00\\x00\\n\\xa63\\xd0\\x00\\x00\\x00\\x00\\x13\\xe9\\xfc`\\x00\\x00\\x00\\x00\\x14![`\\x00\\x00\\x00\\x00\\x1a\\xfa\\xc6`\\x00\\x00\\x00\\x00\\x1b\\x8en`\\x00\\x00\\x00\\x00\\x1c\\xbe\\xf8\\xe0\\x00\\x00\\x00\\x00\\x1dw|\\xd0\\x00\\x00\\x00\\x00\\x1e\\xcc\\xff`\\x00\\x00\\x00\\x00\\x1f`\\x99P\\x00\\x00\\x00\\x00 \\x82\\xb1`\\x00\\x00\\x00\\x00!I\\xb5\\xd0\\x00\\x00\\x00\\x00\\\"^\\x9e\\xe0\\x00\\x00\\x00\\x00# ]P\\x00\\x00\\x00\\x00$Z0`\\x00\\x00\\x00\\x00%\\x00?P\\x00\\x00\\x00\\x00&\\v\\xed\\xe0\\x00\\x00\\x00\\x00&\\xd6\\xe6\\xd0\\x00\\x00\\x00\\x00'\\xeb\\xcf\\xe0\\x00\\x00\\x00\\x00(\\xc0\\x03P\\x00\\x00\\x00\\x00)\\xd4\\xec`\\x00\\x00\\x00\\x00*\\xa9\\x1f\\xd0\\x00\\x00\\x00\\x00+\\xbbe\\xe0\\x00\\x00\\x00\\x00,\\x89\\x01\\xd0\\x00\\x00\\x00\\x00-\\x9bG\\xe0\\x00\\x00\\x00\\x00._\\xa9P\\x00\\x00\\x00\\x00/{)\\xe0\\x00\\x00\\x00\\x000H\\xc5\\xd0\\x00\\x00\\x00\\x000\\xe7\\a\\xe0\\x00\\x00\\x00\\x001dF`\\x00\\x00\\x00\\x002A\\xc2`\\x00\\x00\\x00\\x003D(`\\x00\\x00\\x00\\x004!\\xa4`\\x00\\x00\\x00\\x005$\\n`\\x00\\x00\\x00\\x006\\x01\\x86`\\x00\\x00\\x00\\x007\\x16a`\\x00\\x00\\x00\\x008\\x06DP\\x00\\x00\\x00\\x008\\xff}\\xe0\\x00\\x00\\x00\\x009\\xef`\\xd0\\x00\\x00\\x00\\x00:\\xdf_\\xe0\\x00\\x00\\x00\\x00;\\xcfB\\xd0\\x00\\x00\\x00\\x00<\\xbfA\\xe0\\x00\\x00\\x00\\x00=\\xaf$\\xd0\\x00\\x00\\x00\\x00>\\x9f#\\xe0\\x00\\x00\\x00\\x00?\\x8f\\x06\\xd0\\x00\\x00\\x00\\x00@\\u007f\\x05\\xe0\\x00\\x00\\x00\\x00A\\\\\\x81\\xe0\\x00\\x00\\x00\\x00B^\\xe7\\xe0\\x00\\x00\\x00\\x00CA\\xb7\\xf0\\x00\\x00\\x00\\x00D-\\xa6`\\x00\\x00\\x00\\x00E\\x12\\xfdP\\x00\\x00\\x00\\x00F\\x0e\\xd9\\xe0\\x00\\x00\\x00\\x00F\\xe8op\\x00\\x00\\x00\\x00G\\xec\\x18\\xe0\\x00\\x00\\x00\\x00H\\xb7\\x11\\xd0\\x00\\x00\\x00\\x00I\\xcb\\xfa\\xe0\\x00\\x00\\x00\\x00J\\xa0<`\\x00\\x00\\x00\\x00K\\xad.\\x9c\\x00\\x00\\x00\\x00La\\xbd\\xd0\\x00\\x00\\x00\\x00M\\x94\\xf9\\x9c\\x00\\x00\\x00\\x00N5\\xc2P\\x00\\x00\\x00\\x00Ot\\xdb`\\x00\\x00\\x00\\x00P[\\x91\\xe0\\x00\\x00\\x00\\x00QT\\xbd`\\x00\\x00\\x00\\x00RD\\xa0P\\x00\\x00\\x00\\x00S4\\x9f`\\x00\\x00\\x00\\x00TIlP\\x00\\x00\\x00\\x00U\\x15\\xd2\\xe0\\x00\\x00\\x00\\x00V)\\\\`\\x00\\x00\\x00\\x00V\\xf5\\xc2\\xf0\\x00\\x00\\x00\\x00X\\x13\\xca`\\x00\\x00\\x00\\x00X\u0564\\xf0\\x00\\x00\\x00\\x00Y\\xf3\\xac`\\x00\\x00\\x00\\x00Z\\xb5\\x86\\xf0\\x00\\x00\\x00\\x00[\u04ce`\\x00\\x00\\x00\\x00\\\\\\x9dC\\xe0\\x00\\x00\\x00\\x00]\\xb3bP\\x00\\x00\\x00\\x00^~w`\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x02\\x01\\x00\\x00 P\\x00\\x00\\x00\\x00*0\\x01\\x04\\x00\\x00\\x1c \\x00\\t\\x00\\x00*0\\x01\\r\\x00\\x00\\x1c \\x00\\x11LMT\\x00EEST\\x00EET\\x00IDT\\x00IST\\x00\\nEET-2EEST,M3.4.4/48,M10.4.4/49\\n\",\n+\t\twantName:   \"EET\",\n+\t\twantOffset: 7200,\n+\t},\n+}\n \n-\treference, err := time.LoadLocationFromTZData(\"Europe/Berlin\", []byte(tzData))\n-\tif err != nil {\n-\t\tt.Fatal(err)\n-\t}\n+func TestLoadLocationFromTZDataSlim(t *testing.T) {\n+\tfor _, test := range slimTests {\n+\t\treference, err := time.LoadLocationFromTZData(test.zoneName, []byte(test.tzData))\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n \n-\td := time.Date(2020, time.October, 29, 15, 30, 0, 0, reference)\n-\ttzName, tzOffset := d.Zone()\n-\tif want := \"CET\"; tzName != want {\n-\t\tt.Errorf(\"Zone name == %s, want %s\", tzName, want)\n-\t}\n-\tif want := 3600; tzOffset != want {\n-\t\tt.Errorf(\"Zone offset == %d, want %d\", tzOffset, want)\n+\t\td := time.Date(2020, time.October, 29, 15, 30, 0, 0, reference)\n+\t\ttzName, tzOffset := d.Zone()\n+\t\tif tzName != test.wantName {\n+\t\t\tt.Errorf(\"Zone name == %s, want %s\", tzName, test.wantName)\n+\t\t}\n+\t\tif tzOffset != test.wantOffset {\n+\t\t\tt.Errorf(\"Zone offset == %d, want %d\", tzOffset, test.wantOffset)\n+\t\t}\n \t}\n }\n \n@@ -269,7 +297,8 @@ func TestTzsetOffset(t *testing.T) {\n \t\t{\"+08\", 8 * 60 * 60, \"\", true},\n \t\t{\"-01:02:03\", -1*60*60 - 2*60 - 3, \"\", true},\n \t\t{\"01\", 1 * 60 * 60, \"\", true},\n-\t\t{\"100\", 0, \"\", false},\n+\t\t{\"100\", 100 * 60 * 60, \"\", true},\n+\t\t{\"1000\", 0, \"\", false},\n \t\t{\"8PDT\", 8 * 60 * 60, \"PDT\", true},\n \t} {\n \t\toff, out, ok := time.TzsetOffset(test.in)\n@@ -294,6 +323,7 @@ func TestTzsetRule(t *testing.T) {\n \t\t{\"30/03:00:00\", time.Rule{Kind: time.RuleDOY, Day: 30, Time: 3 * 60 * 60}, \"\", true},\n \t\t{\"M4.5.6/03:00:00\", time.Rule{Kind: time.RuleMonthWeekDay, Mon: 4, Week: 5, Day: 6, Time: 3 * 60 * 60}, \"\", true},\n \t\t{\"M4.5.7/03:00:00\", time.Rule{}, \"\", false},\n+\t\t{\"M4.5.6/-04\", time.Rule{Kind: time.RuleMonthWeekDay, Mon: 4, Week: 5, Day: 6, Time: -4 * 60 * 60}, \"\", true},\n \t} {\n \t\tr, out, ok := time.TzsetRule(test.in)\n \t\tif r != test.r || out != test.out || ok != test.ok {"}, {"sha": "2d991012c820c76ec410720dc342093687ae6369", "filename": "libgo/misc/cgo/testplugin/plugin_test.go", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Fplugin_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Fplugin_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Fplugin_test.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -201,12 +201,11 @@ func TestMethod(t *testing.T) {\n \t// Exported symbol's method must be live.\n \tgoCmd(t, \"build\", \"-buildmode=plugin\", \"-o\", \"plugin.so\", \"./method/plugin.go\")\n \tgoCmd(t, \"build\", \"-o\", \"method.exe\", \"./method/main.go\")\n+\trun(t, \"./method.exe\")\n+}\n \n-\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n-\tdefer cancel()\n-\tcmd := exec.CommandContext(ctx, \"./method.exe\")\n-\tout, err := cmd.CombinedOutput()\n-\tif err != nil {\n-\t\tt.Fatalf(\"%s: %v\\n%s\", strings.Join(cmd.Args, \" \"), err, out)\n-\t}\n+func TestMethod2(t *testing.T) {\n+\tgoCmd(t, \"build\", \"-buildmode=plugin\", \"-o\", \"method2.so\", \"./method2/plugin.go\")\n+\tgoCmd(t, \"build\", \"-o\", \"method2.exe\", \"./method2/main.go\")\n+\trun(t, \"./method2.exe\")\n }"}, {"sha": "6a87e7b6a0fe0d83cc1f87c7ae2b93d1d9cb71c3", "filename": "libgo/misc/cgo/testplugin/testdata/method2/main.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fmain.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// A type can be passed to a plugin and converted to interface\n+// there. So its methods need to be live.\n+\n+package main\n+\n+import (\n+\t\"plugin\"\n+\n+\t\"testplugin/method2/p\"\n+)\n+\n+var t p.T\n+\n+type I interface { M() }\n+\n+func main() {\n+\tpl, err := plugin.Open(\"method2.so\")\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tf, err := pl.Lookup(\"F\")\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tf.(func(p.T) interface{})(t).(I).M()\n+}"}, {"sha": "acb526acec9a0f7b677f52ff1e024f0b3b6523a9", "filename": "libgo/misc/cgo/testplugin/testdata/method2/p/p.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fp%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fp%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fp%2Fp.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T int\n+\n+func (T) M() { println(\"M\") }"}, {"sha": "6198e7648ee204227c6e05d57c70d4b2fc39f5d0", "filename": "libgo/misc/cgo/testplugin/testdata/method2/plugin.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fplugin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5bcac339c5b166bc1a51c38226a8dc5e6484ca/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fplugin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestplugin%2Ftestdata%2Fmethod2%2Fplugin.go?ref=3a5bcac339c5b166bc1a51c38226a8dc5e6484ca", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2021 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"testplugin/method2/p\"\n+\n+func main() {}\n+\n+func F(t p.T) interface{} { return t }"}]}