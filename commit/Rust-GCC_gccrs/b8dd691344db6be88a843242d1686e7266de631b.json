{"sha": "b8dd691344db6be88a843242d1686e7266de631b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkZDY5MTM0NGRiNmJlODhhODQzMjQyZDE2ODZlNzI2NmRlNjMxYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-06T02:07:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-06T02:07:34Z"}, "message": "DR 1518 DR 1630 PR c++/54835 PR c++/60417\n\n\tDR 1518\n\tDR 1630\n\tPR c++/54835\n\tPR c++/60417\n\t* call.c (convert_like_real): Check value-initialization before\n\texplicit.\n\t* typeck2.c (process_init_constructor_record): Don't set\n\tCONSTRUCTOR_IS_DIRECT_INIT.\n\t(process_init_constructor_array): Likewise.\n\t* init.c (build_vec_init): Likewise.\n\nFrom-SVN: r222836", "tree": {"sha": "409cfc7b3a2f6dac9696531b7f57aeb84e497086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/409cfc7b3a2f6dac9696531b7f57aeb84e497086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8dd691344db6be88a843242d1686e7266de631b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd691344db6be88a843242d1686e7266de631b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8dd691344db6be88a843242d1686e7266de631b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd691344db6be88a843242d1686e7266de631b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99573e81e88654e318c1e07419f36fb6d50caac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99573e81e88654e318c1e07419f36fb6d50caac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99573e81e88654e318c1e07419f36fb6d50caac9"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "3276b76bbb392d69e09a3d429fe7c8bb0d6317b9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -1,3 +1,16 @@\n+2015-05-05  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 1518\n+\tDR 1630\n+\tPR c++/54835\n+\tPR c++/60417\n+\t* call.c (convert_like_real): Check value-initialization before\n+\texplicit.\n+\t* typeck2.c (process_init_constructor_record): Don't set\n+\tCONSTRUCTOR_IS_DIRECT_INIT.\n+\t(process_init_constructor_array): Likewise.\n+\t* init.c (build_vec_init): Likewise.\n+\n 2015-05-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (cp_parser_asm_definition): Only test for"}, {"sha": "b77f69a267e1b0542c44effcbc52685215ef8213", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -6243,19 +6243,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \ttree convfn = cand->fn;\n \tunsigned i;\n \n-\t/* When converting from an init list we consider explicit\n-\t   constructors, but actually trying to call one is an error.  */\n-\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n-\t    /* Unless this is for direct-list-initialization.  */\n-\t    && !DIRECT_LIST_INIT_P (expr))\n-\t  {\n-\t    if (!(complain & tf_error))\n-\t      return error_mark_node;\n-\t    error (\"converting to %qT from initializer list would use \"\n-\t\t   \"explicit constructor %qD\", totype, convfn);\n-\t  }\n-\n-\t/* If we're initializing from {}, it's value-initialization.  */\n+\t/* If we're initializing from {}, it's value-initialization.  Note\n+\t   that under the resolution of core 1630, value-initialization can\n+\t   use explicit constructors.  */\n \tif (BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t    && CONSTRUCTOR_NELTS (expr) == 0\n \t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n@@ -6271,6 +6261,18 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    return expr;\n \t  }\n \n+\t/* When converting from an init list we consider explicit\n+\t   constructors, but actually trying to call one is an error.  */\n+\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n+\t    /* Unless this is for direct-list-initialization.  */\n+\t    && !DIRECT_LIST_INIT_P (expr))\n+\t  {\n+\t    if (!(complain & tf_error))\n+\t      return error_mark_node;\n+\t    error (\"converting to %qT from initializer list would use \"\n+\t\t   \"explicit constructor %qD\", totype, convfn);\n+\t  }\n+\n \texpr = mark_rvalue_use (expr);\n \n \t/* Set user_conv_p on the argument conversions, so rvalue/base"}, {"sha": "c41e30cff5c807836efb2c486b292ddb3471d732", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -3720,7 +3720,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t  if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n \t    {\n \t      init = build_constructor (init_list_type_node, NULL);\n-\t      CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n \t    }\n \t  else\n \t    {"}, {"sha": "6e0c777eac1fb95e163f71913104ec0c7c5af627", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -1285,7 +1285,6 @@ process_init_constructor_array (tree type, tree init,\n \t       we can't rely on the back end to do it for us, so make the\n \t       initialization explicit by list-initializing from T{}.  */\n \t    next = build_constructor (init_list_type_node, NULL);\n-\t    CONSTRUCTOR_IS_DIRECT_INIT (next) = true;\n \t    next = massage_init_elt (TREE_TYPE (type), next, complain);\n \t    if (initializer_zerop (next))\n \t      /* The default zero-initialization is fine for us; don't\n@@ -1396,9 +1395,6 @@ process_init_constructor_record (tree type, tree init,\n \t     for us, so build up TARGET_EXPRs.  If the type in question is\n \t     a class, just build one up; if it's an array, recurse.  */\n \t  next = build_constructor (init_list_type_node, NULL);\n-\t  /* Call this direct-initialization pending DR 1518 resolution so\n-\t     that explicit default ctors don't break valid C++03 code.  */\n-\t  CONSTRUCTOR_IS_DIRECT_INIT (next) = true;\n \t  next = massage_init_elt (TREE_TYPE (field), next, complain);\n \n \t  /* Warn when some struct elements are implicitly initialized.  */"}, {"sha": "9f8ee0b1d23fe274580aeea51c9ab46668215784", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-dr1518.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-dr1518.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-dr1518.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-dr1518.C?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -0,0 +1,27 @@\n+// DR 1518\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  explicit A() = default;\n+};\n+\n+struct B : A {\n+  explicit B() = default;\n+};\n+\n+struct C {\n+  explicit C();\n+};\n+\n+struct D : A {\n+  C c;\n+  explicit D() = default;\n+};\n+\n+template<typename T> void f() {\n+  T t = {};\n+}\n+template<typename T> void g() {\n+  void x(T t);\n+  x({});\n+}"}, {"sha": "de2e19d3adcf7e157ca8cc52b25f7971a58d01a6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist40.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd691344db6be88a843242d1686e7266de631b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C?ref=b8dd691344db6be88a843242d1686e7266de631b", "patch": "@@ -8,6 +8,6 @@ struct A\n \n int main()\n {\n-  A a1 = { };\t\t\t// { dg-error \"explicit\" }\n+  A a1 = { };\n   A a2 = { 24 };\t\t// { dg-error \"explicit\" }\n }"}]}