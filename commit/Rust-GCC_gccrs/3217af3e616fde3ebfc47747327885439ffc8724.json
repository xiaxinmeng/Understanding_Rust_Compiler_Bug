{"sha": "3217af3e616fde3ebfc47747327885439ffc8724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxN2FmM2U2MTZmZGUzZWJmYzQ3NzQ3MzI3ODg1NDM5ZmZjODcyNA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-05-22T22:23:54Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-05-22T22:23:54Z"}, "message": "sh.opt (mfixed-range): New option.\n\n\t* config/sh/sh.opt (mfixed-range): New option.\n\t* config/sh/sh-protos.h (sh_fix_range): Declare.\n\t* config/sh/sh.c (sh_fix_range): New function.\n\t* config/sh/sh.h (sh_fixed_range_str): Declare.\n\t(OVERRIDE_OPTIONS): Call sh_fix_range if sh_fixed_range_str\n\tis not empty.\n\t* doc/invoke.texi (SH Options): Document -mfixed-range.\n\nFrom-SVN: r135779", "tree": {"sha": "b2c226e9b1e83787ed86c0958d4b5d6a57d413a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c226e9b1e83787ed86c0958d4b5d6a57d413a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3217af3e616fde3ebfc47747327885439ffc8724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3217af3e616fde3ebfc47747327885439ffc8724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3217af3e616fde3ebfc47747327885439ffc8724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3217af3e616fde3ebfc47747327885439ffc8724/comments", "author": null, "committer": null, "parents": [{"sha": "143350a8e2a65c8604f2fc5d36e04cf838bf280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143350a8e2a65c8604f2fc5d36e04cf838bf280a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143350a8e2a65c8604f2fc5d36e04cf838bf280a"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "116fb9691092329e6708a4f368203ad9d9038f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -1,3 +1,13 @@\n+2008-05-22  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.opt (mfixed-range): New option.\n+\t* config/sh/sh-protos.h (sh_fix_range): Declare.\n+\t* config/sh/sh.c (sh_fix_range): New function.\n+\t* config/sh/sh.h (sh_fixed_range_str): Declare.\n+\t(OVERRIDE_OPTIONS): Call sh_fix_range if sh_fixed_range_str\n+\tis not empty.\n+\t* doc/invoke.texi (SH Options): Document -mfixed-range.\n+\n 2008-05-22  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/sol2-10.h (SUBTARGET_RETURN_IN_MEMORY): Undefine"}, {"sha": "a03c624d660fa87e86feedf9a637fcc5acc6682e", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -173,6 +173,7 @@ extern enum reg_class sh_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t   struct secondary_reload_info *);\n extern int sh2a_get_function_vector_number (rtx);\n extern int sh2a_is_function_vector_call (rtx);\n+extern void sh_fix_range (const char *);\n \n #endif /* ! GCC_SH_PROTOS_H */\n "}, {"sha": "3af0ee8cff12119a7fb102cc21b59bb263b70d0a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -7973,6 +7973,68 @@ initial_elimination_offset (int from, int to)\n   else\n     return total_auto_space;\n }\n+\n+/* Parse the -mfixed-range= option string.  */\n+void\n+sh_fix_range (const char *const_str)\n+{\n+  int i, first, last;\n+  char *str, *dash, *comma;\n+  \n+  /* str must be of the form REG1'-'REG2{,REG1'-'REG} where REG1 and\n+     REG2 are either register names or register numbers.  The effect\n+     of this option is to mark the registers in the range from REG1 to\n+     REG2 as ``fixed'' so they won't be used by the compiler.  */\n+  \n+  i = strlen (const_str);\n+  str = (char *) alloca (i + 1);\n+  memcpy (str, const_str, i + 1);\n+  \n+  while (1)\n+    {\n+      dash = strchr (str, '-');\n+      if (!dash)\n+\t{\n+\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  return;\n+\t}\n+      *dash = '\\0';\n+      comma = strchr (dash + 1, ',');\n+      if (comma)\n+\t*comma = '\\0';\n+      \n+      first = decode_reg_name (str);\n+      if (first < 0)\n+\t{\n+\t  warning (0, \"unknown register name: %s\", str);\n+\t  return;\n+\t}\n+      \n+      last = decode_reg_name (dash + 1);\n+      if (last < 0)\n+\t{\n+\t  warning (0, \"unknown register name: %s\", dash + 1);\n+\t  return;\n+\t}\n+      \n+      *dash = '-';\n+      \n+      if (first > last)\n+\t{\n+\t  warning (0, \"%s-%s is an empty range\", str, dash + 1);\n+\t  return;\n+\t}\n+      \n+      for (i = first; i <= last; ++i)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+\n+      if (!comma)\n+\tbreak;\n+\n+      *comma = ',';\n+      str = comma + 1;\n+    }\n+}\n \f\n /* Insert any deferred function attributes from earlier pragmas.  */\n static void"}, {"sha": "2ff4a81f9b6b3ca7a00e7b4b0a5b6175e743ec57", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -533,6 +533,8 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \n #define SUBTARGET_OVERRIDE_OPTIONS (void) 0\n \n+extern const char *sh_fixed_range_str;\n+\n #define OVERRIDE_OPTIONS \t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   int regno;\t\t\t\t\t\t\t\t\\\n@@ -754,6 +756,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n       if (align_functions < min_align)\t\t\t\t\t\\\n \talign_functions = min_align;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (sh_fixed_range_str)\t\t\t\t\t\t\\\n+    sh_fix_range (sh_fixed_range_str);\t\t\t\t\t\\\n } while (0)\n \f\n /* Target machine storage layout.  */"}, {"sha": "145e2d504c39857161a2172dc1692363d089f845", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -248,6 +248,10 @@ mdivsi3_libfunc=\n Target RejectNegative Joined Var(sh_divsi3_libfunc) Init(\"\")\n Specify name for 32 bit signed division function\n \n+mfixed-range=\n+Target RejectNegative Joined Var(sh_fixed_range_str)\n+Specify range of registers to make fixed\n+\n mfmovd\n Target RejectNegative Mask(FMOVD) Undocumented\n "}, {"sha": "061311fb2603d540967fb44c8461665ff33d05b2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217af3e616fde3ebfc47747327885439ffc8724/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3217af3e616fde3ebfc47747327885439ffc8724", "patch": "@@ -748,7 +748,7 @@ See RS/6000 and PowerPC Options.\n -mbigtable  -mfmovd  -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n -mieee  -mbitops  -misize  -minline-ic_invalidate -mpadstruct  -mspace @gol\n -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n--mdivsi3_libfunc=@var{name}  @gol\n+-mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n -madjust-unroll -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n  -minvalid-symbols}\n \n@@ -14090,6 +14090,14 @@ Set the name of the library function used for 32 bit signed division to\n division strategies, and the compiler will still expect the same\n sets of input/output/clobbered registers as if this option was not present.\n \n+@item -mfixed-range=@var{register-range}\n+@opindex mfixed-range\n+Generate code treating the given register range as fixed registers.\n+A fixed register is one that the register allocator can not use.  This is\n+useful when compiling kernel code.  A register range is specified as\n+two registers separated by a dash.  Multiple register ranges can be\n+specified separated by a comma.\n+\n @item -madjust-unroll\n @opindex madjust-unroll\n Throttle unrolling to avoid thrashing target registers."}]}