{"sha": "cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "node_id": "C_kwDOANBUbNoAKGNkMzk2NGViZDNlOTRlZDBkZjRlY2FhZGI3ZmQzNGU5OTFjZWM3NTM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-19T14:20:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-19T14:20:04Z"}, "message": "libstdc++: Stop defining _GLIBCXX_ASSERTIONS in floating_to_chars.cc\n\nAssertions were originally enabled in the compiled-in floating-point\nstd::to_chars implementation to help shake out any bugs, but they\napparently impose a significant performance penalty, most notably for\nthe hex formatting which is around 25% slower with assertions enabled.\nThis seems too high a cost for unconditionally enabling them.\n\nThe newly added calls to __builtin_unreachable work around the compiler\nno longer knowing that the set of valid values of 'fmt' is limited (which\nwas previously upheld by an assert).\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_to_chars.cc (_GLIBCXX_ASSERTIONS): Don't\n\tdefine.\n\t(__floating_to_chars_shortest): Add __builtin_unreachable calls to\n\tsquelch false-positive -Wmaybe-uninitialized and -Wreturn-type\n\twarnings.\n\t(__floating_to_chars_precision): Likewise.", "tree": {"sha": "00c3cf8f67d2df5ea7a7d20968921cc85cbf5d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c3cf8f67d2df5ea7a7d20968921cc85cbf5d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753/comments", "author": null, "committer": null, "parents": [{"sha": "fdb3f82fb324c3ddd7464d11c8ea60a98f486a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb3f82fb324c3ddd7464d11c8ea60a98f486a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb3f82fb324c3ddd7464d11c8ea60a98f486a0e"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "4599d68a39c04af91f6877ec6e6da6abd17855be", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "patch": "@@ -22,9 +22,6 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-// Activate __glibcxx_assert within this file to shake out any bugs.\n-#define _GLIBCXX_ASSERTIONS 1\n-\n #include <charconv>\n \n #include <bit>\n@@ -1114,6 +1111,7 @@ template<typename T>\n       }\n \n     __glibcxx_assert(false);\n+    __builtin_unreachable();\n   }\n \n template<typename T>\n@@ -1202,6 +1200,8 @@ template<typename T>\n \t    effective_precision = min(precision, max_eff_scientific_precision);\n \t    output_specifier = \"%.*Lg\";\n \t  }\n+\telse\n+\t  __builtin_unreachable();\n \tconst int excess_precision = (fmt != chars_format::general\n \t\t\t\t      ? precision - effective_precision : 0);\n \n@@ -1234,6 +1234,8 @@ template<typename T>\n \t      output_length_upper_bound = sign + strlen(\"0\");\n \t    output_length_upper_bound += sizeof(radix) + effective_precision;\n \t  }\n+\telse\n+\t  __builtin_unreachable();\n \n \t// Do the sprintf into the local buffer.\n \tchar buffer[output_length_upper_bound+1];\n@@ -1570,6 +1572,7 @@ template<typename T>\n       }\n \n     __glibcxx_assert(false);\n+    __builtin_unreachable();\n   }\n \n // Define the overloads for float."}]}