{"sha": "c021f10b188584445b45ec9649cff4d39e640c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyMWYxMGIxODg1ODQ0NDViNDVlYzk2NDljZmY0ZDM5ZTY0MGMzZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-07-06T02:26:33Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-07-06T02:26:33Z"}, "message": "vec.h (FOR_EACH_VEC_ELT_REVERSE): New macro.\n\ngcc/\n\t* vec.h (FOR_EACH_VEC_ELT_REVERSE): New macro.\n\t* function.h (struct_function): Change type of local_decls field\n\tto a VEC.\n\t(add_local_decl): New function.\n\t(FOR_EACH_LOCAL_DECL): New macro.\n\t* cfgexpand.c (init_vars_expansion): Adjust for new type of\n\tcfun->local_decls.\n\t(estimated_stack_frame_size): Likewise.\n\t(expand_used_vars): Likewise.\n\t* cgraphbuild.c (build_cgraph_edges): Likewise.\n\t* function.c (instantiate_decls_1): Likewise.\n\t* ipa-struct-reorg.c (build_data_structure): Likewise.\n\t* ipa-type-escape.c (analyze_function): Likewise.\n\t* lto-streamer-in.c (input_function): Likewise.\n\t* lto-streamer-out.c (output_function): Likewise.\n\t* tree-ssa-live.c (remove_unused_locals): Likewise.\n\t* tree.c (free_lang_data_in_decl): Likewise.\n\t(find_decls_types_in_node): Likewise.\n\t* omp-low.c (remove_exit_barrier): Likewise.\n\t(expand_omp_taskreg): Likewise.\n\t(list2chain): Rename to...\n\t(vec2chain): ...this.  Adjust.\n\t* cgraphunit.c (assemble_thunk): Call add_local_decl.\n\t* tree-cfg.c (replace_by_duplicate_decl): Likewise.\n\t* gimple-low.c (record_vars_into): Likewise.\n\t* tree-inline.c (remap_decls): Likewise.\n\t(declare_return_variable): Likewise.\n\t(declare_inline_vars): Likewise.\n\t(copy_forbidden): Adjust for new type of cfun->local_decls.\n\t(add_local_variables): New function.\n\t(expand_call_inline): Call it.\n\t(tree_function_versioning): Likewise.\n\ngcc/cp/\n\t* decl.c (cp_finish_decl): Call add_local_decl.\n\t* optimize.c (clone_body): Adjust for new type of cfun->local_decls.\n\nFrom-SVN: r161862", "tree": {"sha": "d191bb056818e7ad987268cffaf32a266a191f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d191bb056818e7ad987268cffaf32a266a191f4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c021f10b188584445b45ec9649cff4d39e640c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c021f10b188584445b45ec9649cff4d39e640c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c021f10b188584445b45ec9649cff4d39e640c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c021f10b188584445b45ec9649cff4d39e640c3e/comments", "author": null, "committer": null, "parents": [{"sha": "979cc399477378ad45eb030ef5029e35c6be4371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979cc399477378ad45eb030ef5029e35c6be4371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979cc399477378ad45eb030ef5029e35c6be4371"}], "stats": {"total": 435, "additions": 233, "deletions": 202}, "files": [{"sha": "156b55a0c855efa3a5b0a59d2c8a41d272b254be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1,3 +1,38 @@\n+2010-07-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* vec.h (FOR_EACH_VEC_ELT_REVERSE): New macro.\n+\t* function.h (struct_function): Change type of local_decls field\n+\tto a VEC.\n+\t(add_local_decl): New function.\n+\t(FOR_EACH_LOCAL_DECL): New macro.\n+\t* cfgexpand.c (init_vars_expansion): Adjust for new type of\n+\tcfun->local_decls.\n+\t(estimated_stack_frame_size): Likewise.\n+\t(expand_used_vars): Likewise.\n+\t* cgraphbuild.c (build_cgraph_edges): Likewise.\n+\t* function.c (instantiate_decls_1): Likewise.\n+\t* ipa-struct-reorg.c (build_data_structure): Likewise.\n+\t* ipa-type-escape.c (analyze_function): Likewise.\n+\t* lto-streamer-in.c (input_function): Likewise.\n+\t* lto-streamer-out.c (output_function): Likewise.\n+\t* tree-ssa-live.c (remove_unused_locals): Likewise.\n+\t* tree.c (free_lang_data_in_decl): Likewise.\n+\t(find_decls_types_in_node): Likewise.\n+\t* omp-low.c (remove_exit_barrier): Likewise.\n+\t(expand_omp_taskreg): Likewise.\n+\t(list2chain): Rename to...\n+\t(vec2chain): ...this.  Adjust.\n+\t* cgraphunit.c (assemble_thunk): Call add_local_decl.\n+\t* tree-cfg.c (replace_by_duplicate_decl): Likewise.\n+\t* gimple-low.c (record_vars_into): Likewise.\n+\t* tree-inline.c (remap_decls): Likewise.\n+\t(declare_return_variable): Likewise.\n+\t(declare_inline_vars): Likewise.\n+\t(copy_forbidden): Adjust for new type of cfun->local_decls.\n+\t(add_local_variables): New function.\n+\t(expand_call_inline): Call it.\n+\t(tree_function_versioning): Likewise.\n+\n 2010-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tAVX Programming Reference (June, 2010)"}, {"sha": "5b0596ec7065c259bb314c05945f2a0f68cdecb3", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1226,9 +1226,10 @@ static void\n init_vars_expansion (void)\n {\n   tree t;\n+  unsigned ix;\n   /* Set TREE_USED on all variables in the local_decls.  */\n-  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n-    TREE_USED (TREE_VALUE (t)) = 1;\n+  FOR_EACH_LOCAL_DECL (cfun, ix, t)\n+    TREE_USED (t) = 1;\n \n   /* Clear TREE_USED on all variables associated with a block scope.  */\n   clear_tree_used (DECL_INITIAL (current_function_decl));\n@@ -1264,14 +1265,13 @@ estimated_stack_frame_size (void)\n {\n   HOST_WIDE_INT size = 0;\n   size_t i;\n-  tree t, outer_block = DECL_INITIAL (current_function_decl);\n+  tree var, outer_block = DECL_INITIAL (current_function_decl);\n+  unsigned ix;\n \n   init_vars_expansion ();\n \n-  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n+  FOR_EACH_LOCAL_DECL (cfun, ix, var)\n     {\n-      tree var = TREE_VALUE (t);\n-\n       if (TREE_USED (var))\n         size += expand_one_var (var, true, false);\n       TREE_USED (var) = 1;\n@@ -1296,9 +1296,10 @@ estimated_stack_frame_size (void)\n static void\n expand_used_vars (void)\n {\n-  tree t, next, outer_block = DECL_INITIAL (current_function_decl);\n-  tree maybe_local_decls = NULL_TREE;\n+  tree var, outer_block = DECL_INITIAL (current_function_decl);\n+  VEC(tree,heap) *maybe_local_decls = NULL;\n   unsigned i;\n+  unsigned len;\n \n   /* Compute the phase of the stack frame for this function.  */\n   {\n@@ -1333,15 +1334,12 @@ expand_used_vars (void)\n \n   /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n-  t = cfun->local_decls;\n-  cfun->local_decls = NULL_TREE;\n-  for (; t; t = next)\n+\n+  len = VEC_length (tree, cfun->local_decls);\n+  FOR_EACH_LOCAL_DECL (cfun, i, var)\n     {\n-      tree var = TREE_VALUE (t);\n       bool expand_now = false;\n \n-      next = TREE_CHAIN (t);\n-\n       /* Expanded above already.  */\n       if (is_gimple_reg (var))\n \t{\n@@ -1377,25 +1375,29 @@ expand_used_vars (void)\n \t  /* Keep artificial non-ignored vars in cfun->local_decls\n \t     chain until instantiate_decls.  */\n \t  if (rtl && (MEM_P (rtl) || GET_CODE (rtl) == CONCAT))\n-\t    {\n-\t      TREE_CHAIN (t) = cfun->local_decls;\n-\t      cfun->local_decls = t;\n-\t      continue;\n-\t    }\n+\t    add_local_decl (cfun, var);\n \t  else if (rtl == NULL_RTX)\n-\t    {\n-\t      /* If rtl isn't set yet, which can happen e.g. with\n-\t\t -fstack-protector, retry before returning from this\n-\t\t function.  */\n-\t      TREE_CHAIN (t) = maybe_local_decls;\n-\t      maybe_local_decls = t;\n-\t      continue;\n-\t    }\n+\t    /* If rtl isn't set yet, which can happen e.g. with\n+\t       -fstack-protector, retry before returning from this\n+\t       function.  */\n+\t    VEC_safe_push (tree, heap, maybe_local_decls, var);\n \t}\n-\n-      ggc_free (t);\n     }\n \n+  /* We duplicated some of the decls in CFUN->LOCAL_DECLS.\n+\n+     +-----------------+-----------------+\n+     | ...processed... | ...duplicates...|\n+     +-----------------+-----------------+\n+                       ^\n+\t\t       +-- LEN points here.\n+\n+     We just want the duplicates, as those are the artificial\n+     non-ignored vars that we want to keep until instantiate_decls.\n+     Move them down and truncate the array.  */\n+  if (!VEC_empty (tree, cfun->local_decls))\n+    VEC_block_remove (tree, cfun->local_decls, 0, len);\n+\n   /* At this point, all variables within the block tree with TREE_USED\n      set are actually used by the optimized function.  Lay them out.  */\n   expand_used_vars_for_block (outer_block, true);\n@@ -1452,24 +1454,16 @@ expand_used_vars (void)\n   /* If there were any artificial non-ignored vars without rtl\n      found earlier, see if deferred stack allocation hasn't assigned\n      rtl to them.  */\n-  for (t = maybe_local_decls; t; t = next)\n+  FOR_EACH_VEC_ELT_REVERSE (tree, maybe_local_decls, i, var)\n     {\n-      tree var = TREE_VALUE (t);\n       rtx rtl = DECL_RTL_IF_SET (var);\n \n-      next = TREE_CHAIN (t);\n-\n       /* Keep artificial non-ignored vars in cfun->local_decls\n \t chain until instantiate_decls.  */\n       if (rtl && (MEM_P (rtl) || GET_CODE (rtl) == CONCAT))\n-\t{\n-\t  TREE_CHAIN (t) = cfun->local_decls;\n-\t  cfun->local_decls = t;\n-\t  continue;\n-\t}\n-\n-      ggc_free (t);\n+\tadd_local_decl (cfun, var);\n     }\n+  VEC_free (tree, heap, maybe_local_decls);\n \n   /* If the target requires that FRAME_OFFSET be aligned, do it.  */\n   if (STACK_ALIGNMENT_NEEDED)"}, {"sha": "3bd42e340396b29c21f7680d9d43c22aaa60835c", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -328,7 +328,8 @@ build_cgraph_edges (void)\n   struct cgraph_node *node = cgraph_node (current_function_decl);\n   struct pointer_set_t *visited_nodes = pointer_set_create ();\n   gimple_stmt_iterator gsi;\n-  tree step;\n+  tree decl;\n+  unsigned ix;\n \n   /* Create the callgraph edges and record the nodes referenced by the function.\n      body.  */\n@@ -378,15 +379,10 @@ build_cgraph_edges (void)\n    }\n \n   /* Look for initializers of constant variables and private statics.  */\n-  for (step = cfun->local_decls;\n-       step;\n-       step = TREE_CHAIN (step))\n-    {\n-      tree decl = TREE_VALUE (step);\n-      if (TREE_CODE (decl) == VAR_DECL\n-\t  && (TREE_STATIC (decl) && !DECL_EXTERNAL (decl)))\n-\tvarpool_finalize_decl (decl);\n-    }\n+  FOR_EACH_LOCAL_DECL (cfun, ix, decl)\n+    if (TREE_CODE (decl) == VAR_DECL\n+\t&& (TREE_STATIC (decl) && !DECL_EXTERNAL (decl)))\n+      varpool_finalize_decl (decl);\n   record_eh_tables (node, cfun);\n \n   pointer_set_destroy (visited_nodes);"}, {"sha": "da1f983476fe959f7773b4e39c06fb5730edf4a6", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1520,7 +1520,7 @@ assemble_thunk (struct cgraph_node *node)\n \t  if (!is_gimple_reg_type (restype))\n \t    {\n \t      restmp = resdecl;\n-\t      cfun->local_decls = tree_cons (NULL_TREE, restmp, cfun->local_decls);\n+\t      add_local_decl (cfun, restmp);\n \t      BLOCK_VARS (DECL_INITIAL (current_function_decl)) = restmp;\n \t    }\n \t  else"}, {"sha": "3f2cac1b90a54e2e24878469f2eefe3f0364c41f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1,3 +1,8 @@\n+2010-07-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (cp_finish_decl): Call add_local_decl.\n+\t* optimize.c (clone_body): Adjust for new type of cfun->local_decls.\n+\n 2010-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (tsubst): Early declare code = TREE_CODE (t) and use it"}, {"sha": "541f77ecf08852c63addedceea388dc171e6d385", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -5838,8 +5838,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t       but [cd]tors are never actually compiled directly.  We need\n \t       to put statics on the list so we can deal with the label\n \t       address extension.  */\n-\t    cfun->local_decls = tree_cons (NULL_TREE, decl,\n-\t\t\t\t\t   cfun->local_decls);\n+\t    add_local_decl (cfun, decl);\n \t}\n \n       /* Convert the initializer to the type of DECL, if we have not"}, {"sha": "7ec2034f052709b4320978f421826049ff2f9d93", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -107,12 +107,11 @@ clone_body (tree clone, tree fn, void *arg_map)\n   if (DECL_NAME (clone) == base_dtor_identifier\n       || DECL_NAME (clone) == base_ctor_identifier)\n     {\n-      tree decls = DECL_STRUCT_FUNCTION (fn)->local_decls;\n-      for (; decls; decls = TREE_CHAIN (decls))\n-\t{\n-\t  tree decl = TREE_VALUE (decls);\n-\t  walk_tree (&DECL_INITIAL (decl), copy_tree_body_r, &id, NULL);\n-\t}\n+      unsigned ix;\n+      tree decl;\n+\n+      FOR_EACH_LOCAL_DECL (DECL_STRUCT_FUNCTION (fn), ix, decl)\n+        walk_tree (&DECL_INITIAL (decl), copy_tree_body_r, &id, NULL);\n     }\n \n   append_to_statement_list_force (stmts, &DECL_SAVED_TREE (clone));"}, {"sha": "9075e08e633bc9aaee00ff3e33b9a0794cf41358", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1815,7 +1815,8 @@ instantiate_decls_1 (tree let)\n static void\n instantiate_decls (tree fndecl)\n {\n-  tree decl, t, next;\n+  tree decl;\n+  unsigned ix;\n \n   /* Process all parameters of the function.  */\n   for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n@@ -1832,16 +1833,10 @@ instantiate_decls (tree fndecl)\n   /* Now process all variables defined in the function or its subblocks.  */\n   instantiate_decls_1 (DECL_INITIAL (fndecl));\n \n-  t = cfun->local_decls;\n-  cfun->local_decls = NULL_TREE;\n-  for (; t; t = next)\n-    {\n-      next = TREE_CHAIN (t);\n-      decl = TREE_VALUE (t);\n-      if (DECL_RTL_SET_P (decl))\n-\tinstantiate_decl_rtl (DECL_RTL (decl));\n-      ggc_free (t);\n-    }\n+  FOR_EACH_LOCAL_DECL (cfun, ix, decl)\n+    if (DECL_RTL_SET_P (decl))\n+      instantiate_decl_rtl (DECL_RTL (decl));\n+  VEC_free (tree, gc, cfun->local_decls);\n }\n \n /* Pass through the INSNS of function FNDECL and convert virtual register"}, {"sha": "fec0168a5d2a5664bd04186903707459c4cdb4a6", "filename": "gcc/function.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -503,8 +503,8 @@ struct GTY(()) function {\n      pointer.  */\n   tree nonlocal_goto_save_area;\n \n-  /* List of function local variables, functions, types and constants.  */\n-  tree local_decls;\n+  /* Vector of function local variables, functions, types and constants.  */\n+  VEC(tree,gc) *local_decls;\n \n   /* For md files.  */\n \n@@ -609,6 +609,17 @@ struct GTY(()) function {\n   unsigned int is_thunk : 1;\n };\n \n+/* Add the decl D to the local_decls list of FUN.  */\n+\n+static inline void\n+add_local_decl (struct function *fun, tree d)\n+{\n+  VEC_safe_push (tree, gc, fun->local_decls, d);\n+}\n+\n+#define FOR_EACH_LOCAL_DECL(FUN, I, D)\t\t\\\n+  FOR_EACH_VEC_ELT_REVERSE (tree, (FUN)->local_decls, I, D)\n+\n /* If va_list_[gf]pr_size is set to this, it means we don't know how\n    many units need to be saved.  */\n #define VA_LIST_MAX_GPR_SIZE\t255"}, {"sha": "381068abb269046563f128e20232c4d626cd3f04", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -907,8 +907,7 @@ record_vars_into (tree vars, tree fn)\n \tcontinue;\n \n       /* Record the variable.  */\n-      cfun->local_decls = tree_cons (NULL_TREE, var,\n-\t\t\t\t\t     cfun->local_decls);\n+      add_local_decl (cfun, var);\n     }\n \n   if (fn != current_function_decl)"}, {"sha": "4ee8e024a7d62e88d2a8a673ead089e0ee1dab93", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -3418,7 +3418,6 @@ static void\n build_data_structure (VEC (tree, heap) **unsuitable_types)\n {\n   tree var, type;\n-  tree var_list;\n   struct varpool_node *current_varpool;\n   struct cgraph_node *c_node;\n \n@@ -3441,6 +3440,7 @@ build_data_structure (VEC (tree, heap) **unsuitable_types)\n       if (avail == AVAIL_LOCAL || avail == AVAIL_AVAILABLE)\n \t{\n \t  struct function *fn = DECL_STRUCT_FUNCTION (c_node->decl);\n+\t  unsigned ix;\n \n \t  for (var = DECL_ARGUMENTS (c_node->decl); var;\n \t       var = TREE_CHAIN (var))\n@@ -3456,14 +3456,9 @@ build_data_structure (VEC (tree, heap) **unsuitable_types)\n \t    }\n \n \t  /* Check function local variables.  */\n-\t  for (var_list = fn->local_decls; var_list;\n-\t       var_list = TREE_CHAIN (var_list))\n-\t    {\n-\t      var = TREE_VALUE (var_list);\n-\n-\t      if (is_candidate (var, &type, unsuitable_types))\n-\t\tadd_structure (type);\n-\t    }\n+\t  FOR_EACH_LOCAL_DECL (fn, ix, var)\n+\t    if (is_candidate (var, &type, unsuitable_types))\n+\t      add_structure (type);\n \t}\n     }\n }"}, {"sha": "3b395f94e2192441ca1d11d1c43f03f06d94d945", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1676,12 +1676,11 @@ analyze_function (struct cgraph_node *fn)\n   /* There may be const decls with interesting right hand sides.  */\n   if (DECL_STRUCT_FUNCTION (decl))\n     {\n-      tree step;\n-      for (step = DECL_STRUCT_FUNCTION (decl)->local_decls;\n-\t   step;\n-\t   step = TREE_CHAIN (step))\n+      tree var;\n+      unsigned ix;\n+\n+      FOR_EACH_LOCAL_DECL (DECL_STRUCT_FUNCTION (decl), ix, var)\n \t{\n-\t  tree var = TREE_VALUE (step);\n \t  if (TREE_CODE (var) == VAR_DECL\n \t      && DECL_INITIAL (var)\n \t      && !TREE_STATIC (var))"}, {"sha": "47f40e24be934dff15e3cb00110ec37bc77a5df2", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1286,6 +1286,7 @@ input_function (tree fn_decl, struct data_in *data_in,\n   struct bitpack_d bp;\n   struct cgraph_node *node;\n   tree args, narg, oarg;\n+  int len;\n \n   fn = DECL_STRUCT_FUNCTION (fn_decl);\n   tag = input_record_start (ib);\n@@ -1320,7 +1321,17 @@ input_function (tree fn_decl, struct data_in *data_in,\n   fn->nonlocal_goto_save_area = lto_input_tree (ib, data_in);\n \n   /* Read all the local symbols.  */\n-  fn->local_decls = lto_input_tree (ib, data_in);\n+  len = lto_input_sleb128 (ib);\n+  if (len > 0)\n+    {\n+      int i;\n+      VEC_safe_grow (tree, gc, fn->local_decls, len);\n+      for (i = 0; i < len; i++)\n+\t{\n+\t  tree t = lto_input_tree (ib, data_in);\n+\t  VEC_replace (tree, fn->local_decls, i, t);\n+\t}\n+    }\n \n   /* Read all function arguments.  We need to re-map them here to the\n      arguments of the merged function declaration.  */"}, {"sha": "b7029519caea5455bc4e2b647ce35ea8ebcf923d", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -1840,6 +1840,8 @@ output_function (struct cgraph_node *node)\n   struct function *fn;\n   basic_block bb;\n   struct output_block *ob;\n+  unsigned i;\n+  tree t;\n \n   function = node->decl;\n   fn = DECL_STRUCT_FUNCTION (function);\n@@ -1886,7 +1888,9 @@ output_function (struct cgraph_node *node)\n   lto_output_tree_ref (ob, fn->nonlocal_goto_save_area);\n \n   /* Output all the local variables in the function.  */\n-  lto_output_tree_ref (ob, fn->local_decls);\n+  output_sleb128 (ob, VEC_length (tree, fn->local_decls));\n+  for (i = 0; VEC_iterate (tree, fn->local_decls, i, t); i++)\n+    lto_output_tree_ref (ob, t);\n \n   /* Output the head of the arguments list.  */\n   lto_output_tree_ref (ob, DECL_ARGUMENTS (function));"}, {"sha": "f289159e2e677a677526005b9d18fac73df34fda", "filename": "gcc/omp-low.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -3138,20 +3138,18 @@ maybe_catch_exception (gimple_seq body)\n /* Chain all the DECLs in LIST by their TREE_CHAIN fields.  */\n \n static tree\n-list2chain (tree list)\n+vec2chain (VEC(tree,gc) *v)\n {\n-  tree t;\n+  tree chain = NULL_TREE, t;\n+  unsigned ix;\n \n-  for (t = list; t; t = TREE_CHAIN (t))\n+  FOR_EACH_VEC_ELT_REVERSE (tree, v, ix, t)\n     {\n-      tree var = TREE_VALUE (t);\n-      if (TREE_CHAIN (t))\n-\tTREE_CHAIN (var) = TREE_VALUE (TREE_CHAIN (t));\n-      else\n-\tTREE_CHAIN (var) = NULL_TREE;\n+      TREE_CHAIN (t) = chain;\n+      chain = t;\n     }\n \n-  return list ? TREE_VALUE (list) : NULL_TREE;\n+  return chain;\n }\n \n \n@@ -3210,12 +3208,12 @@ remove_exit_barrier (struct omp_region *region)\n \t    {\n \t      gimple parallel_stmt = last_stmt (region->entry);\n \t      tree child_fun = gimple_omp_parallel_child_fn (parallel_stmt);\n-\t      tree local_decls = DECL_STRUCT_FUNCTION (child_fun)->local_decls;\n-\t      tree block;\n+\t      tree local_decls, block, decl;\n+\t      unsigned ix;\n \n \t      any_addressable_vars = 0;\n-\t      for (; local_decls; local_decls = TREE_CHAIN (local_decls))\n-\t\tif (TREE_ADDRESSABLE (TREE_VALUE (local_decls)))\n+\t      FOR_EACH_LOCAL_DECL (DECL_STRUCT_FUNCTION (child_fun), ix, decl)\n+\t\tif (TREE_ADDRESSABLE (decl))\n \t\t  {\n \t\t    any_addressable_vars = 1;\n \t\t    break;\n@@ -3334,7 +3332,7 @@ expand_omp_taskreg (struct omp_region *region)\n {\n   basic_block entry_bb, exit_bb, new_bb;\n   struct function *child_cfun;\n-  tree child_fn, block, t, ws_args, *tp;\n+  tree child_fn, block, t, ws_args;\n   tree save_current;\n   gimple_stmt_iterator gsi;\n   gimple entry_stmt, stmt;\n@@ -3380,6 +3378,8 @@ expand_omp_taskreg (struct omp_region *region)\n     }\n   else\n     {\n+      unsigned ix;\n+\n       /* If the parallel region needs data sent from the parent\n \t function, then the very first statement (except possible\n \t tree profile counter updates) of the parallel body\n@@ -3457,7 +3457,7 @@ expand_omp_taskreg (struct omp_region *region)\n \n       /* Declare local variables needed in CHILD_CFUN.  */\n       block = DECL_INITIAL (child_fn);\n-      BLOCK_VARS (block) = list2chain (child_cfun->local_decls);\n+      BLOCK_VARS (block) = vec2chain (child_cfun->local_decls);\n       /* The gimplifier could record temporaries in parallel/task block\n \t rather than in containing function's local_decls chain,\n \t which would mean cgraph missed finalizing them.  Do it now.  */\n@@ -3515,11 +3515,11 @@ expand_omp_taskreg (struct omp_region *region)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n \n       /* Remove non-local VAR_DECLs from child_cfun->local_decls list.  */\n-      for (tp = &child_cfun->local_decls; *tp; )\n-\tif (DECL_CONTEXT (TREE_VALUE (*tp)) != cfun->decl)\n-\t  tp = &TREE_CHAIN (*tp);\n+      for (ix = 0; VEC_iterate (tree, child_cfun->local_decls, ix, t); )\n+\tif (DECL_CONTEXT (t) != cfun->decl)\n+\t  ix++;\n \telse\n-\t  *tp = TREE_CHAIN (*tp);\n+\t  VEC_unordered_remove (tree, child_cfun->local_decls, ix);\n \n       /* Inform the callgraph about the new function.  */\n       DECL_STRUCT_FUNCTION (child_fn)->curr_properties"}, {"sha": "87603e7003702851724b04e1141ef4ad8d425be6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -5596,7 +5596,7 @@ replace_by_duplicate_decl (tree *tp, struct pointer_map_t *vars_map,\n       if (SSA_VAR_P (t))\n \t{\n \t  new_t = copy_var_decl (t, DECL_NAME (t), TREE_TYPE (t));\n-\t  f->local_decls = tree_cons (NULL_TREE, new_t, f->local_decls);\n+\t  add_local_decl (f, new_t);\n \t}\n       else\n \t{\n@@ -6316,7 +6316,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n void\n dump_function_to_file (tree fn, FILE *file, int flags)\n {\n-  tree arg, vars, var;\n+  tree arg, var;\n   struct function *dsf;\n   bool ignore_topmost_bind = false, any_var = false;\n   basic_block bb;\n@@ -6356,15 +6356,14 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \n   /* When GIMPLE is lowered, the variables are no longer available in\n      BIND_EXPRs, so display them separately.  */\n-  if (cfun && cfun->decl == fn && cfun->local_decls)\n+  if (cfun && cfun->decl == fn && !VEC_empty (tree, cfun->local_decls))\n     {\n+      unsigned ix;\n       ignore_topmost_bind = true;\n \n       fprintf (file, \"{\\n\");\n-      for (vars = cfun->local_decls; vars; vars = TREE_CHAIN (vars))\n+      FOR_EACH_LOCAL_DECL (cfun, ix, var)\n \t{\n-\t  var = TREE_VALUE (vars);\n-\n \t  print_generic_decl (file, var, flags);\n \t  if (flags & TDF_VERBOSE)\n \t    print_node (file, \"\", var, 4);"}, {"sha": "e295a6a589026fddbdb57670b3dd3bc661b988b4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -545,8 +545,7 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n \t  if (TREE_CODE (old_var) == VAR_DECL\n \t      && ! DECL_EXTERNAL (old_var)\n \t      && (var_ann (old_var) || !gimple_in_ssa_p (cfun)))\n-\t    cfun->local_decls = tree_cons (NULL_TREE, old_var,\n-\t\t\t\t\t\t   cfun->local_decls);\n+\t    add_local_decl (cfun, old_var);\n \t  if ((!optimize || debug_info_level > DINFO_LEVEL_TERSE)\n \t      && !DECL_IGNORED_P (old_var)\n \t      && nonlocalized_list)\n@@ -2854,9 +2853,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest)\n     }\n \n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n-  DECL_STRUCT_FUNCTION (caller)->local_decls\n-    = tree_cons (NULL_TREE, var,\n-\t\t DECL_STRUCT_FUNCTION (caller)->local_decls);\n+  add_local_decl (DECL_STRUCT_FUNCTION (caller), var);\n \n   /* Do not have the rest of GCC warn about this variable as it should\n      not be visible to the user.  */\n@@ -2915,7 +2912,8 @@ static const char *\n copy_forbidden (struct function *fun, tree fndecl)\n {\n   const char *reason = fun->cannot_be_copied_reason;\n-  tree step;\n+  tree decl;\n+  unsigned ix;\n \n   /* Only examine the function once.  */\n   if (fun->cannot_be_copied_set)\n@@ -2934,23 +2932,19 @@ copy_forbidden (struct function *fun, tree fndecl)\n       goto fail;\n     }\n \n-  for (step = fun->local_decls; step; step = TREE_CHAIN (step))\n-    {\n-      tree decl = TREE_VALUE (step);\n-\n-      if (TREE_CODE (decl) == VAR_DECL\n-\t  && TREE_STATIC (decl)\n-\t  && !DECL_EXTERNAL (decl)\n-\t  && DECL_INITIAL (decl)\n-\t  && walk_tree_without_duplicates (&DECL_INITIAL (decl),\n-\t\t\t\t\t   has_label_address_in_static_1,\n-\t\t\t\t\t   fndecl))\n-\t{\n-\t  reason = G_(\"function %q+F can never be copied because it saves \"\n-\t\t      \"address of local label in a static variable\");\n-\t  goto fail;\n-\t}\n-    }\n+  FOR_EACH_LOCAL_DECL (fun, ix, decl)\n+    if (TREE_CODE (decl) == VAR_DECL\n+\t&& TREE_STATIC (decl)\n+\t&& !DECL_EXTERNAL (decl)\n+\t&& DECL_INITIAL (decl)\n+\t&& walk_tree_without_duplicates (&DECL_INITIAL (decl),\n+\t\t\t\t\t has_label_address_in_static_1,\n+\t\t\t\t\t fndecl))\n+      {\n+\treason = G_(\"function %q+F can never be copied because it saves \"\n+\t\t    \"address of local label in a static variable\");\n+\tgoto fail;\n+      }\n \n  fail:\n   fun->cannot_be_copied_reason = reason;\n@@ -3737,6 +3731,26 @@ prepend_lexical_block (tree current_block, tree new_block)\n   BLOCK_SUPERCONTEXT (new_block) = current_block;\n }\n \n+/* Add local variables from CALLEE to CALLER.  */\n+\n+static inline void\n+add_local_variables (struct function *callee, struct function *caller,\n+\t\t     copy_body_data *id, bool check_var_ann)\n+{\n+  tree var;\n+  unsigned ix;\n+\n+  FOR_EACH_LOCAL_DECL (callee, ix, var)\n+    if (TREE_STATIC (var) && !TREE_ASM_WRITTEN (var))\n+      {\n+\tif (!check_var_ann\n+\t    || (var_ann (var) && add_referenced_var (var)))\n+\t  add_local_decl (caller, var);\n+      }\n+    else if (!can_be_nonlocal (var, id))\n+      add_local_decl (caller, remap_decl (var, id));\n+}\n+\n /* Fetch callee declaration from the call graph edge going from NODE and\n    associated with STMR call statement.  Return NULL_TREE if not found.  */\n static tree\n@@ -3769,8 +3783,6 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   gimple_stmt_iterator gsi, stmt_gsi;\n   bool successfully_inlined = FALSE;\n   bool purge_dead_abnormal_edges;\n-  tree t_step;\n-  tree var;\n \n   /* Set input_location here so we get the right instantiation context\n      if we call instantiate_decl from inlinable_function_p.  */\n@@ -3974,20 +3986,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   use_retvar = declare_return_variable (id, return_slot, modify_dest);\n \n   /* Add local vars in this inlined callee to caller.  */\n-  t_step = id->src_cfun->local_decls;\n-  for (; t_step; t_step = TREE_CHAIN (t_step))\n-    {\n-      var = TREE_VALUE (t_step);\n-      if (TREE_STATIC (var) && !TREE_ASM_WRITTEN (var))\n-\t{\n-\t  if (var_ann (var) && add_referenced_var (var))\n-\t    cfun->local_decls = tree_cons (NULL_TREE, var,\n-\t\t\t\t\t   cfun->local_decls);\n-\t}\n-      else if (!can_be_nonlocal (var, id))\n-\tcfun->local_decls = tree_cons (NULL_TREE, remap_decl (var, id),\n-\t\t\t\t       cfun->local_decls);\n-    }\n+  add_local_variables (id->src_cfun, cfun, id, true);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -4729,7 +4728,7 @@ declare_inline_vars (tree block, tree vars)\n     {\n       DECL_SEEN_IN_BIND_EXPR_P (t) = 1;\n       gcc_assert (!TREE_STATIC (t) && !TREE_ASM_WRITTEN (t));\n-      cfun->local_decls = tree_cons (NULL_TREE, t, cfun->local_decls);\n+      add_local_decl (cfun, t);\n     }\n \n   if (block)\n@@ -5060,7 +5059,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   basic_block old_entry_block, bb;\n   VEC (gimple, heap) *init_stmts = VEC_alloc (gimple, heap, 10);\n \n-  tree t_step;\n   tree old_current_function_decl = current_function_decl;\n   tree vars = NULL_TREE;\n \n@@ -5185,19 +5183,9 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \n   declare_inline_vars (DECL_INITIAL (new_decl), vars);\n \n-  if (DECL_STRUCT_FUNCTION (old_decl)->local_decls != NULL_TREE)\n+  if (!VEC_empty (tree, DECL_STRUCT_FUNCTION (old_decl)->local_decls))\n     /* Add local vars.  */\n-    for (t_step = DECL_STRUCT_FUNCTION (old_decl)->local_decls;\n-\t t_step; t_step = TREE_CHAIN (t_step))\n-      {\n-\ttree var = TREE_VALUE (t_step);\n-\tif (TREE_STATIC (var) && !TREE_ASM_WRITTEN (var))\n-\t  cfun->local_decls = tree_cons (NULL_TREE, var, cfun->local_decls);\n-\telse if (!can_be_nonlocal (var, &id))\n-\t  cfun->local_decls =\n-\t    tree_cons (NULL_TREE, remap_decl (var, &id),\n-\t\t       cfun->local_decls);\n-      }\n+    add_local_variables (DECL_STRUCT_FUNCTION (old_decl), cfun, &id, false);\n \n   /* Copy the Function's body.  */\n   copy_body (&id, old_entry_block->count, REG_BR_PROB_BASE,"}, {"sha": "045d42cda3ce07174bcbdf8d7b8dcf402b1b030f", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -663,10 +663,11 @@ void\n remove_unused_locals (void)\n {\n   basic_block bb;\n-  tree t, *cell;\n+  tree var, t;\n   referenced_var_iterator rvi;\n   var_ann_t ann;\n   bitmap global_unused_vars = NULL;\n+  unsigned ix;\n \n   /* Removing declarations from lexical blocks when not optimizing is\n      not only a waste of time, it actually causes differences in stack\n@@ -733,10 +734,8 @@ remove_unused_locals (void)\n   cfun->has_local_explicit_reg_vars = false;\n \n   /* Remove unmarked local vars from local_decls.  */\n-  for (cell = &cfun->local_decls; *cell; )\n+  for (ix = 0; VEC_iterate (tree, cfun->local_decls, ix, var); )\n     {\n-      tree var = TREE_VALUE (*cell);\n-\n       if (TREE_CODE (var) != FUNCTION_DECL\n \t  && (!(ann = var_ann (var))\n \t      || !ann->used))\n@@ -749,42 +748,37 @@ remove_unused_locals (void)\n \t    }\n \t  else\n \t    {\n-\t      *cell = TREE_CHAIN (*cell);\n+\t      VEC_unordered_remove (tree, cfun->local_decls, ix);\n \t      continue;\n \t    }\n \t}\n       else if (TREE_CODE (var) == VAR_DECL\n \t       && DECL_HARD_REGISTER (var)\n \t       && !is_global_var (var))\n \tcfun->has_local_explicit_reg_vars = true;\n-      cell = &TREE_CHAIN (*cell);\n+\n+      ix++;\n     }\n \n   /* Remove unmarked global vars from local_decls.  */\n   if (global_unused_vars != NULL)\n     {\n-      for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n-\t{\n-\t  tree var = TREE_VALUE (t);\n-\n-\t  if (TREE_CODE (var) == VAR_DECL\n-\t      && is_global_var (var)\n-\t      && (ann = var_ann (var)) != NULL\n-\t      && ann->used)\n-\t    mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n-\t}\n-\n-      for (cell = &cfun->local_decls; *cell; )\n-\t{\n-\t  tree var = TREE_VALUE (*cell);\n-\n-\t  if (TREE_CODE (var) == VAR_DECL\n-\t      && is_global_var (var)\n-\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n-\t    *cell = TREE_CHAIN (*cell);\n-\t  else\n-\t    cell = &TREE_CHAIN (*cell);\n-\t}\n+      tree var;\n+      unsigned ix;\n+      FOR_EACH_LOCAL_DECL (cfun, ix, var)\n+\tif (TREE_CODE (var) == VAR_DECL\n+\t    && is_global_var (var)\n+\t    && (ann = var_ann (var)) != NULL\n+\t    && ann->used)\n+\t  mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n+\n+      for (ix = 0; VEC_iterate (tree, cfun->local_decls, ix, var); )\n+\tif (TREE_CODE (var) == VAR_DECL\n+\t    && is_global_var (var)\n+\t    && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n+\t  VEC_unordered_remove (tree, cfun->local_decls, ix);\n+\telse\n+\t  ix++;\n       BITMAP_FREE (global_unused_vars);\n     }\n "}, {"sha": "4247047956463cda3345ec0811789ddeb111d4c2", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -4498,6 +4498,7 @@ free_lang_data_in_decl (tree decl)\n       if (gimple_has_body_p (decl))\n \t{\n \t  tree t;\n+\t  unsigned ix;\n \t  struct pointer_set_t *locals;\n \n \t  /* If DECL has a gimple body, then the context for its\n@@ -4514,14 +4515,13 @@ free_lang_data_in_decl (tree decl)\n \n \t  /* Collect all the symbols declared in DECL.  */\n \t  locals = pointer_set_create ();\n-\t  t = DECL_STRUCT_FUNCTION (decl)->local_decls;\n-\t  for (; t; t = TREE_CHAIN (t))\n+\t  FOR_EACH_LOCAL_DECL (DECL_STRUCT_FUNCTION (decl), ix, t)\n \t    {\n-\t      pointer_set_insert (locals, TREE_VALUE (t));\n+\t      pointer_set_insert (locals, t);\n \n \t      /* All the local symbols should have DECL as their\n \t\t context.  */\n-\t      DECL_CONTEXT (TREE_VALUE (t)) = decl;\n+\t      DECL_CONTEXT (t) = decl;\n \t    }\n \n \t  /* Get rid of any decl not in local_decls.  */\n@@ -4873,6 +4873,7 @@ find_decls_types_in_node (struct cgraph_node *n, struct free_lang_data_d *fld)\n {\n   basic_block bb;\n   struct function *fn;\n+  unsigned ix;\n   tree t;\n \n   find_decls_types (n->decl, fld);\n@@ -4885,8 +4886,8 @@ find_decls_types_in_node (struct cgraph_node *n, struct free_lang_data_d *fld)\n   fn = DECL_STRUCT_FUNCTION (n->decl);\n \n   /* Traverse locals. */\n-  for (t = fn->local_decls; t; t = TREE_CHAIN (t))\n-    find_decls_types (TREE_VALUE (t), fld);\n+  FOR_EACH_LOCAL_DECL (fn, ix, t)\n+    find_decls_types (t, fld);\n \n   /* Traverse EH regions in FN.  */\n   {"}, {"sha": "a652250112d45991ad754747c3cd3ee3112e355d", "filename": "gcc/vec.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c021f10b188584445b45ec9649cff4d39e640c3e/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=c021f10b188584445b45ec9649cff4d39e640c3e", "patch": "@@ -190,6 +190,13 @@ along with GCC; see the file COPYING3.  If not see\n \n #define VEC_iterate(T,V,I,P)\t(VEC_OP(T,base,iterate)(VEC_BASE(V),I,&(P)))\n \n+/* Convenience macro for reverse iteration.  */\n+\n+#define FOR_EACH_VEC_ELT_REVERSE(T,V,I,P) \\\n+  for (I = VEC_length (T, (V)) - 1;           \\\n+       VEC_iterate (T, (V), (I), (P));\t  \\\n+       (I)--)\n+\n /* Allocate new vector.\n    VEC(T,A) *VEC_T_A_alloc(int reserve);\n "}]}