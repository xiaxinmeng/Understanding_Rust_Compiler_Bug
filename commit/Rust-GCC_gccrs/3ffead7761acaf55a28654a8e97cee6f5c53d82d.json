{"sha": "3ffead7761acaf55a28654a8e97cee6f5c53d82d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmZWFkNzc2MWFjYWY1NWEyODY1NGE4ZTk3Y2VlNmY1YzUzZDgyZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-12-13T10:43:02Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-12-13T10:43:02Z"}, "message": "[Patch Doc] Update documentation for __fp16 type\n\ngcc/\n\n\t* doc/extend.texi (Half-Precision): Update to document current\n\tcompiler behaviour.\n\nFrom-SVN: r243602", "tree": {"sha": "01f5f77fbd480891a107c0c23e9d728ffb9d1156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f5f77fbd480891a107c0c23e9d728ffb9d1156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ffead7761acaf55a28654a8e97cee6f5c53d82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffead7761acaf55a28654a8e97cee6f5c53d82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ffead7761acaf55a28654a8e97cee6f5c53d82d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffead7761acaf55a28654a8e97cee6f5c53d82d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87d5619ead709aa4314d7b0d6553c9905e3d66b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d5619ead709aa4314d7b0d6553c9905e3d66b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d5619ead709aa4314d7b0d6553c9905e3d66b5"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "5fd41549487c27494bb29f1d780504ffb84909bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffead7761acaf55a28654a8e97cee6f5c53d82d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffead7761acaf55a28654a8e97cee6f5c53d82d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ffead7761acaf55a28654a8e97cee6f5c53d82d", "patch": "@@ -1,3 +1,8 @@\n+2016-12-13  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* doc/extend.texi (Half-Precision): Update to document current\n+\tcompiler behaviour.\n+\n 2016-12-13  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/extend.texi (Floating Types): Document availability of"}, {"sha": "5f7f676ccaaf1a6d7981cb6884b724acc148a2d9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffead7761acaf55a28654a8e97cee6f5c53d82d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffead7761acaf55a28654a8e97cee6f5c53d82d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3ffead7761acaf55a28654a8e97cee6f5c53d82d", "patch": "@@ -1012,11 +1012,12 @@ that handle conversions if/when long double is changed to be IEEE\n @cindex half-precision floating point\n @cindex @code{__fp16} data type\n \n-On ARM targets, GCC supports half-precision (16-bit) floating point via\n-the @code{__fp16} type.  You must enable this type explicitly\n-with the @option{-mfp16-format} command-line option in order to use it.\n+On ARM and AArch64 targets, GCC supports half-precision (16-bit) floating\n+point via the @code{__fp16} type defined in the ARM C Language Extensions.\n+On ARM systems, you must enable this type explicitly with the\n+@option{-mfp16-format} command-line option in order to use it.\n \n-ARM supports two incompatible representations for half-precision\n+ARM targets support two incompatible representations for half-precision\n floating-point values.  You must choose one of the representations and\n use it consistently in your program.\n \n@@ -1031,31 +1032,32 @@ format, but does not support infinities or NaNs.  Instead, the range\n of exponents is extended, so that this format can represent normalized\n values in the range of @math{2^{-14}} to 131008.\n \n-The @code{__fp16} type is a storage format only.  For purposes\n-of arithmetic and other operations, @code{__fp16} values in C or C++\n-expressions are automatically promoted to @code{float}.  In addition,\n-you cannot declare a function with a return value or parameters\n-of type @code{__fp16}.\n+The GCC port for AArch64 only supports the IEEE 754-2008 format, and does\n+not require use of the @option{-mfp16-format} command-line option.\n \n-Note that conversions from @code{double} to @code{__fp16}\n-involve an intermediate conversion to @code{float}.  Because\n-of rounding, this can sometimes produce a different result than a\n-direct conversion.\n+The @code{__fp16} type may only be used as an argument to intrinsics defined\n+in @code{<arm_fp16.h>}, or as a storage format.  For purposes of\n+arithmetic and other operations, @code{__fp16} values in C or C++\n+expressions are automatically promoted to @code{float}.\n \n-ARM provides hardware support for conversions between\n+The ARM target provides hardware support for conversions between\n @code{__fp16} and @code{float} values\n-as an extension to VFP and NEON (Advanced SIMD).  GCC generates\n-code using these hardware instructions if you compile with\n-options to select an FPU that provides them;\n+as an extension to VFP and NEON (Advanced SIMD), and from ARMv8 provides\n+hardware support for conversions between @code{__fp16} and @code{double}\n+values.  GCC generates code using these hardware instructions if you\n+compile with options to select an FPU that provides them;\n for example, @option{-mfpu=neon-fp16 -mfloat-abi=softfp},\n in addition to the @option{-mfp16-format} option to select\n a half-precision format.\n \n Language-level support for the @code{__fp16} data type is\n independent of whether GCC generates code using hardware floating-point\n instructions.  In cases where hardware support is not specified, GCC\n-implements conversions between @code{__fp16} and @code{float} values\n-as library calls.\n+implements conversions between @code{__fp16} and other types as library\n+calls.\n+\n+It is recommended that portable code use the @code{_Float16} type defined\n+by ISO/IEC TS 18661-3:2015 (@xref{Floating Types}).\n \n @node Decimal Float\n @section Decimal Floating Types"}]}