{"sha": "4a75460b0099618b2d79ffda615a9516dcd5c224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3NTQ2MGIwMDk5NjE4YjJkNzlmZmRhNjE1YTk1MTZkY2Q1YzIyNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-23T08:16:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-23T08:16:56Z"}, "message": "[nvptx, libgomp] Fix cuMemAlloc with size zero\n\nConsider test-case:\n...\nint\nmain (void)\n{\n  #pragma acc parallel async\n  ;\n  #pragma acc parallel async\n  ;\n  #pragma acc wait\n\n  return 0;\n}\n...\n\nThis fails with:\n...\nlibgomp: cuMemAlloc error: invalid argument\nSegmentation fault (core dumped)\n...\nThe cuMemAlloc error is due to the fact that we're try to allocate 0 bytes.\n\nFix this by preventing calling map_push with size zero argument in nvptx_exec.\n\nThis also has the consequence that for the abort-1.c test-case, we end up\ncalling cuMemFree during map_fini for the struct cuda_map allocated in\nmap_init, which fails because an abort happened.  Fix this by calling\ncuMemFree with CUDA_CALL_NOCHECK in cuda_map_destroy.\n\n2019-01-23  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/PR88946\n\t* plugin/plugin-nvptx.c (cuda_map_destroy): Use CUDA_CALL_NOCHECK for\n\tcuMemFree.\n\t(nvptx_exec): Don't call map_push if mapnum == 0.\n\t* testsuite/libgomp.oacc-c-c++-common/pr88946.c: New test.\n\nFrom-SVN: r268178", "tree": {"sha": "2596f989d134272b77a51936fc8e04458455975c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2596f989d134272b77a51936fc8e04458455975c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a75460b0099618b2d79ffda615a9516dcd5c224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a75460b0099618b2d79ffda615a9516dcd5c224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a75460b0099618b2d79ffda615a9516dcd5c224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a75460b0099618b2d79ffda615a9516dcd5c224/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "660fc924c7e3d7278d0d24600cad467237ce5234", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4a75460b0099618b2d79ffda615a9516dcd5c224", "patch": "@@ -1,3 +1,11 @@\n+2019-01-23  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/PR88946\n+\t* plugin/plugin-nvptx.c (cuda_map_destroy): Use CUDA_CALL_NOCHECK for\n+\tcuMemFree.\n+\t(nvptx_exec): Don't call map_push if mapnum == 0.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr88946.c: New test.\n+\n 2019-01-23  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/88941"}, {"sha": "ff90b67cb866d277c19432aa75ccbc86e15a97a8", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=4a75460b0099618b2d79ffda615a9516dcd5c224", "patch": "@@ -260,7 +260,7 @@ cuda_map_destroy (struct cuda_map *map)\n        atexit handler (PR83795).  */\n     ;\n   else\n-    CUDA_CALL_ASSERT (cuMemFree, map->d);\n+    CUDA_CALL_NOCHECK (cuMemFree, map->d);\n \n   free (map);\n }\n@@ -1164,7 +1164,7 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n   struct ptx_stream *dev_str;\n   void *kargs[1];\n   void *hp;\n-  CUdeviceptr dp;\n+  CUdeviceptr dp = 0;\n   struct nvptx_thread *nvthd = nvptx_thread ();\n   int warp_size = nvthd->ptx_dev->warp_size;\n   const char *maybe_abort_msg = \"(perhaps abort was called)\";\n@@ -1361,23 +1361,27 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \t\t\t   dims[GOMP_DIM_VECTOR]);\n     }\n \n-  /* This reserves a chunk of a pre-allocated page of memory mapped on both\n-     the host and the device. HP is a host pointer to the new chunk, and DP is\n-     the corresponding device pointer.  */\n-  pthread_mutex_lock (&ptx_event_lock);\n-  dp = map_push (dev_str, mapnum * sizeof (void *));\n-  pthread_mutex_unlock (&ptx_event_lock);\n-\n-  GOMP_PLUGIN_debug (0, \"  %s: prepare mappings\\n\", __FUNCTION__);\n-\n-  /* Copy the array of arguments to the mapped page.  */\n-  hp = alloca(sizeof(void *) * mapnum);\n-  for (i = 0; i < mapnum; i++)\n-    ((void **) hp)[i] = devaddrs[i];\n+  if (mapnum > 0)\n+    {\n+      /* This reserves a chunk of a pre-allocated page of memory mapped on both\n+\t the host and the device. HP is a host pointer to the new chunk, and DP is\n+\t the corresponding device pointer.  */\n+      pthread_mutex_lock (&ptx_event_lock);\n+      dp = map_push (dev_str, mapnum * sizeof (void *));\n+      pthread_mutex_unlock (&ptx_event_lock);\n+\n+      GOMP_PLUGIN_debug (0, \"  %s: prepare mappings\\n\", __FUNCTION__);\n+\n+      /* Copy the array of arguments to the mapped page.  */\n+      hp = alloca(sizeof(void *) * mapnum);\n+      for (i = 0; i < mapnum; i++)\n+\t((void **) hp)[i] = devaddrs[i];\n+\n+      /* Copy the (device) pointers to arguments to the device */\n+      CUDA_CALL_ASSERT (cuMemcpyHtoD, dp, hp,\n+\t\t\tmapnum * sizeof (void *));\n+    }\n \n-  /* Copy the (device) pointers to arguments to the device */\n-  CUDA_CALL_ASSERT (cuMemcpyHtoD, dp, hp,\n-\t\t    mapnum * sizeof (void *));\n   GOMP_PLUGIN_debug (0, \"  %s: kernel %s: launch\"\n \t\t     \" gangs=%u, workers=%u, vectors=%u\\n\",\n \t\t     __FUNCTION__, targ_fn->launch->fn, dims[GOMP_DIM_GANG],\n@@ -1422,7 +1426,8 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \n       CUDA_CALL_ASSERT (cuEventRecord, *e, dev_str->stream);\n \n-      event_add (PTX_EVT_KNL, e, (void *)dev_str, 0);\n+      if (mapnum > 0)\n+\tevent_add (PTX_EVT_KNL, e, (void *)dev_str, 0);\n     }\n #else\n   r = CUDA_CALL_NOCHECK (cuCtxSynchronize, );\n@@ -1439,7 +1444,10 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n #ifndef DISABLE_ASYNC\n   if (async < acc_async_noval)\n #endif\n-    map_pop (dev_str);\n+    {\n+      if (mapnum > 0)\n+\tmap_pop (dev_str);\n+    }\n }\n \n void * openacc_get_current_cuda_context (void);"}, {"sha": "ad56ded1d2b3e05aaaed4e569d95ef7d7280ac0e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr88946.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a75460b0099618b2d79ffda615a9516dcd5c224/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88946.c?ref=4a75460b0099618b2d79ffda615a9516dcd5c224", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+\n+int\n+main (void)\n+{\n+  #pragma acc parallel async\n+  ;\n+\n+  #pragma acc parallel async\n+  ;\n+\n+  #pragma acc wait\n+\n+  return 0;\n+}"}]}