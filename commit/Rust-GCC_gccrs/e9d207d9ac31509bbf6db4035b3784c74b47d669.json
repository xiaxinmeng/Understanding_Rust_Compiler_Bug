{"sha": "e9d207d9ac31509bbf6db4035b3784c74b47d669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkMjA3ZDlhYzMxNTA5YmJmNmRiNDAzNWIzNzg0Yzc0YjQ3ZDY2OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-12-21T22:10:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-12-21T22:10:30Z"}, "message": "re PR other/29639 (ext/bitmap_allocator/check_allocate_max_size.cc execution test)\n\n\tPR other/29639\n\t* configure.ac (HAVE_LD_EH_GC_SECTIONS): Check that exception tables\n\tare kept for .gnu.linkonce.t sections if COMDAT groups are disabled.\n\t* configure: Regenerate.\n\nFrom-SVN: r120121", "tree": {"sha": "e54d62a50edf79cac72303478711cfb6eec51622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54d62a50edf79cac72303478711cfb6eec51622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d207d9ac31509bbf6db4035b3784c74b47d669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d207d9ac31509bbf6db4035b3784c74b47d669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d207d9ac31509bbf6db4035b3784c74b47d669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d207d9ac31509bbf6db4035b3784c74b47d669/comments", "author": null, "committer": null, "parents": [{"sha": "5f7fc2b8328f2ecebc668874dd541d9dcd46d17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7fc2b8328f2ecebc668874dd541d9dcd46d17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7fc2b8328f2ecebc668874dd541d9dcd46d17c"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "a967053b9ea8543240bde370ab05ab01273806c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9d207d9ac31509bbf6db4035b3784c74b47d669", "patch": "@@ -1,3 +1,10 @@\n+2006-12-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR other/29639\n+\t* configure.ac (HAVE_LD_EH_GC_SECTIONS): Check that exception tables\n+\tare kept for .gnu.linkonce.t sections if COMDAT groups are disabled.\n+\t* configure: Regenerate.\n+\n 2006-12-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* rtlanal.c (subreg_get_info): Do not make register size"}, {"sha": "09fc0aa6108eee38ad04bae833b7ea0457b60c73", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e9d207d9ac31509bbf6db4035b3784c74b47d669", "patch": "@@ -16053,10 +16053,46 @@ EOF\n       gcc_cv_ld_eh_gc_sections=no\n     elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n       gcc_cv_ld_eh_gc_sections=yes\n+      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.\n+      if test x$gcc_cv_as_comdat_group != xyes; then\n+\tgcc_cv_ld_eh_gc_sections=no\n+\tcat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.gnu.linkonce.t.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t       | grep \"gc-sections option ignored\" > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=no\n+\t  elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=yes\n+\t  fi\n+\tfi\n+      fi\n     fi\n   fi\n   rm -f conftest.s conftest.o conftest\n fi\n+case \"$target\" in\n+  hppa*-*-linux*)\n+    # ??? This apparently exposes a binutils bug with PC-relative relocations.\n+    gcc_cv_ld_eh_gc_sections=no\n+    ;;\n+esac\n if test x$gcc_cv_ld_eh_gc_sections = xyes; then\n \n cat >>confdefs.h <<\\_ACEOF"}, {"sha": "706735ee95d9773463eac45a88e6742c36e61184", "filename": "gcc/configure.ac", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d207d9ac31509bbf6db4035b3784c74b47d669/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e9d207d9ac31509bbf6db4035b3784c74b47d669", "patch": "@@ -3192,10 +3192,46 @@ EOF\n       gcc_cv_ld_eh_gc_sections=no\n     elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n       gcc_cv_ld_eh_gc_sections=yes\n+      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.\n+      if test x$gcc_cv_as_comdat_group != xyes; then\n+\tgcc_cv_ld_eh_gc_sections=no\n+\tcat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.gnu.linkonce.t.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t       | grep \"gc-sections option ignored\" > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=no\n+\t  elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+\t    gcc_cv_ld_eh_gc_sections=yes\n+\t  fi\n+\tfi\n+      fi\n     fi\n   fi\n   rm -f conftest.s conftest.o conftest\n fi\n+case \"$target\" in\n+  hppa*-*-linux*)\n+    # ??? This apparently exposes a binutils bug with PC-relative relocations.\n+    gcc_cv_ld_eh_gc_sections=no\n+    ;;\n+esac\n if test x$gcc_cv_ld_eh_gc_sections = xyes; then\n \tAC_DEFINE(HAVE_LD_EH_GC_SECTIONS, 1,\n   [Define if your linker supports garbage collection of"}]}