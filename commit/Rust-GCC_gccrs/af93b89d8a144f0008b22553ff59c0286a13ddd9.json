{"sha": "af93b89d8a144f0008b22553ff59c0286a13ddd9", "node_id": "C_kwDOANBUbNoAKGFmOTNiODlkOGExNDRmMDAwOGIyMjU1M2ZmNTljMDI4NmExM2RkZDk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-02T08:07:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-01T08:43:17Z"}, "message": "[Ada] Minor tweaks to dispatching support code\n\nNo functional changes.\n\ngcc/ada/\n\n\t* exp_disp.ads (Expand_Interface_Thunk): Change type of Prim.\n\t* exp_disp.adb (Expand_Interface_Thunk): Declare Is_Predef_Op\n\tearlier, do not initialize Iface_Formal, use No idiom and tweaks\n\tcomments.\n\t(Register_Primitive): Declare L earlier and tweak comments.\n\t* sem_disp.adb (Check_Dispatching_Operation): Move tests out of\n\tloop.", "tree": {"sha": "e3a590ca6e31a2880983d0057661d63830e1b083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3a590ca6e31a2880983d0057661d63830e1b083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af93b89d8a144f0008b22553ff59c0286a13ddd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af93b89d8a144f0008b22553ff59c0286a13ddd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af93b89d8a144f0008b22553ff59c0286a13ddd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af93b89d8a144f0008b22553ff59c0286a13ddd9/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1091dd34ee60aa96a513c09ef1d70f40a6a38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1091dd34ee60aa96a513c09ef1d70f40a6a38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1091dd34ee60aa96a513c09ef1d70f40a6a38f"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "8666902be8d21e737d069e74d43bb9f9288ad501", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=af93b89d8a144f0008b22553ff59c0286a13ddd9", "patch": "@@ -1731,26 +1731,26 @@ package body Exp_Disp is\n    ----------------------------\n \n    procedure Expand_Interface_Thunk\n-     (Prim       : Node_Id;\n+     (Prim       : Entity_Id;\n       Thunk_Id   : out Entity_Id;\n       Thunk_Code : out Node_Id;\n       Iface      : Entity_Id)\n    is\n-      Loc     : constant Source_Ptr := Sloc (Prim);\n-      Actuals : constant List_Id    := New_List;\n-      Decl    : constant List_Id    := New_List;\n-      Formals : constant List_Id    := New_List;\n-      Target  : constant Entity_Id  := Ultimate_Alias (Prim);\n+      Actuals      : constant List_Id    := New_List;\n+      Decl         : constant List_Id    := New_List;\n+      Formals      : constant List_Id    := New_List;\n+      Loc          : constant Source_Ptr := Sloc (Prim);\n+      Target       : constant Entity_Id  := Ultimate_Alias (Prim);\n+      Is_Predef_Op : constant Boolean    :=\n+                       Is_Predefined_Dispatching_Operation (Prim)\n+                         or else Is_Predefined_Dispatching_Operation (Target);\n \n       Decl_1        : Node_Id;\n       Decl_2        : Node_Id;\n       Expr          : Node_Id;\n       Formal        : Node_Id;\n       Ftyp          : Entity_Id;\n-      Iface_Formal  : Node_Id := Empty;  -- initialize to prevent warning\n-      Is_Predef_Op  : constant Boolean :=\n-                        Is_Predefined_Dispatching_Operation (Prim)\n-                          or else Is_Predefined_Dispatching_Operation (Target);\n+      Iface_Formal  : Node_Id;\n       New_Arg       : Node_Id;\n       Offset_To_Top : Node_Id;\n       Target_Formal : Entity_Id;\n@@ -1764,16 +1764,17 @@ package body Exp_Disp is\n       if Is_Eliminated (Target) then\n          return;\n \n-      --  In case of primitives that are functions without formals and a\n-      --  controlling result there is no need to build the thunk.\n+      --  No thunk needed if the primitive has no formals. In this case, this\n+      --  must be a function with a controlling result.\n \n-      elsif not Present (First_Formal (Target)) then\n+      elsif No (First_Formal (Target)) then\n          pragma Assert (Ekind (Target) = E_Function\n            and then Has_Controlling_Result (Target));\n+\n          return;\n       end if;\n \n-      --  Duplicate the formals of the Target primitive. In the thunk, the type\n+      --  Duplicate the formals of the target primitive. In the thunk, the type\n       --  of the controlling formal is the covered interface type (instead of\n       --  the target tagged type). Done to avoid problems with discriminated\n       --  tagged types because, if the controlling type has discriminants with\n@@ -1785,14 +1786,14 @@ package body Exp_Disp is\n       --  because they don't have available the Interface_Alias attribute (see\n       --  Sem_Ch3.Add_Internal_Interface_Entities).\n \n-      if not Is_Predef_Op then\n+      if Is_Predef_Op then\n+         Iface_Formal := Empty;\n+      else\n          Iface_Formal := First_Formal (Interface_Alias (Prim));\n       end if;\n \n       Formal := First_Formal (Target);\n       while Present (Formal) loop\n-         Ftyp := Etype (Formal);\n-\n          --  Use the interface type as the type of the controlling formal (see\n          --  comment above).\n \n@@ -1814,10 +1815,10 @@ package body Exp_Disp is\n \n             --  Sanity check performed to ensure the proper controlling type\n             --  when the thunk has exactly one controlling parameter and it\n-            --  comes first. In such case the GCC backend reuses the C++\n+            --  comes first. In such a case, the GCC back end reuses the C++\n             --  thunks machinery which perform a computation equivalent to\n             --  the code generated by the expander; for other cases the GCC\n-            --  backend translates the expanded code unmodified. However, as\n+            --  back end translates the expanded code unmodified. However, as\n             --  a generalization, the check is performed for all controlling\n             --  types.\n \n@@ -7115,12 +7116,13 @@ package body Exp_Disp is\n      (Loc     : Source_Ptr;\n       Prim    : Entity_Id) return List_Id\n    is\n+      L : constant List_Id := New_List;\n+\n       DT_Ptr        : Entity_Id;\n       Iface_Prim    : Entity_Id;\n       Iface_Typ     : Entity_Id;\n       Iface_DT_Ptr  : Entity_Id;\n       Iface_DT_Elmt : Elmt_Id;\n-      L             : constant List_Id := New_List;\n       Pos           : Uint;\n       Tag           : Entity_Id;\n       Tag_Typ       : Entity_Id;\n@@ -7130,7 +7132,7 @@ package body Exp_Disp is\n    begin\n       pragma Assert (not Restriction_Active (No_Dispatching_Calls));\n \n-      --  Do not register in the dispatch table eliminated primitives\n+      --  Do not register eliminated primitives in the dispatch table\n \n       if not RTE_Available (RE_Tag)\n         or else Is_Eliminated (Ultimate_Alias (Prim))\n@@ -7139,10 +7141,12 @@ package body Exp_Disp is\n          return L;\n       end if;\n \n+      --  Primitive associated with a tagged type\n+\n       if not Present (Interface_Alias (Prim)) then\n          Tag_Typ := Scope (DTC_Entity (Prim));\n-         Pos := DT_Position (Prim);\n-         Tag := First_Tag_Component (Tag_Typ);\n+         Pos     := DT_Position (Prim);\n+         Tag     := First_Tag_Component (Tag_Typ);\n \n          if Is_Predefined_Dispatching_Operation (Prim)\n            or else Is_Predefined_Dispatching_Alias (Prim)"}, {"sha": "b122e59cb95fca4e082e63b328ef1967e0321e5e", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=af93b89d8a144f0008b22553ff59c0286a13ddd9", "patch": "@@ -234,7 +234,7 @@ package Exp_Disp is\n    --  dispatch table of the target type.\n \n    procedure Expand_Interface_Thunk\n-     (Prim       : Node_Id;\n+     (Prim       : Entity_Id;\n       Thunk_Id   : out Entity_Id;\n       Thunk_Code : out Node_Id;\n       Iface      : Entity_Id);"}, {"sha": "79af10a81f050a00820caa142ff666e1b80b9f13", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af93b89d8a144f0008b22553ff59c0286a13ddd9/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=af93b89d8a144f0008b22553ff59c0286a13ddd9", "patch": "@@ -1728,7 +1728,11 @@ package body Sem_Disp is\n             --  emitted after those tables are built, to prevent access before\n             --  elaboration in gigi.\n \n-            if Body_Is_Last_Primitive and then Expander_Active then\n+            if Body_Is_Last_Primitive\n+              and then not Building_Static_DT (Tagged_Type)\n+              and then Expander_Active\n+              and then Tagged_Type_Expansion\n+            then\n                declare\n                   Subp_Body : constant Node_Id := Unit_Declaration_Node (Subp);\n                   Elmt      : Elmt_Id;\n@@ -1739,13 +1743,9 @@ package body Sem_Disp is\n                   while Present (Elmt) loop\n                      Prim := Node (Elmt);\n \n-                     --  No code required to register primitives in VM targets\n-\n                      if Present (Alias (Prim))\n                        and then Present (Interface_Alias (Prim))\n                        and then Alias (Prim) = Subp\n-                       and then not Building_Static_DT (Tagged_Type)\n-                       and then Tagged_Type_Expansion\n                      then\n                         Insert_Actions_After (Subp_Body,\n                           Register_Primitive (Sloc (Subp_Body), Prim => Prim));"}]}