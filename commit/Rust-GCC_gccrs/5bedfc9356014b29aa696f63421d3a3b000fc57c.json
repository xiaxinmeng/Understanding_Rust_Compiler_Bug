{"sha": "5bedfc9356014b29aa696f63421d3a3b000fc57c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlZGZjOTM1NjAxNGIyOWFhNjk2ZjYzNDIxZDNhM2IwMDBmYzU3Yw==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2003-03-01T23:38:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-01T23:38:13Z"}, "message": "File (getAbsolutePath): Prefix drive specifier on Windows for paths starting with a '\\'.\n\n2003-03-01  Ranjit Mathew  <rmathew@hotmail.com>\n\n\t* java/io/File (getAbsolutePath): Prefix drive specifier on\n\tWindows for paths starting with a '\\'.\n\t(toURL): Make URL more consistent with what Sun's JDK returns.\n\n\t* java/io/natFileWin32.cc (java::io::File::isAbsolute): Return\n\ttrue only if the path is a UNC network path or it starts with a\n\tdrive specifier.\n\n\t* java/net/URLStreamHandler.java (parseURL): Correct minor typo.\n\tBe prepared to handle either '/' or '\\\\' in the file path for\n\tWindows if using the \"file\" protocol.\n\tCanonicalise the file path if using a relative path in the given\n\tcontext and the \"file\" protocol.\n\nFrom-SVN: r63635", "tree": {"sha": "4cd6d3bffb8812360e139400a1ec89459ba0a0d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd6d3bffb8812360e139400a1ec89459ba0a0d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bedfc9356014b29aa696f63421d3a3b000fc57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bedfc9356014b29aa696f63421d3a3b000fc57c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bedfc9356014b29aa696f63421d3a3b000fc57c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bedfc9356014b29aa696f63421d3a3b000fc57c/comments", "author": null, "committer": null, "parents": [{"sha": "73058ef68c40c5c9f129d79e3eccc19543412d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73058ef68c40c5c9f129d79e3eccc19543412d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73058ef68c40c5c9f129d79e3eccc19543412d55"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "a86821f246cb72c60f2999c981f302b71adb20d3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5bedfc9356014b29aa696f63421d3a3b000fc57c", "patch": "@@ -1,3 +1,19 @@\n+2003-03-01  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* java/io/File (getAbsolutePath): Prefix drive specifier on\n+\tWindows for paths starting with a '\\'.\n+\t(toURL): Make URL more consistent with what Sun's JDK returns.\n+\n+\t* java/io/natFileWin32.cc (java::io::File::isAbsolute): Return\n+\ttrue only if the path is a UNC network path or it starts with a\n+\tdrive specifier.\n+\n+\t* java/net/URLStreamHandler.java (parseURL): Correct minor typo.\n+\tBe prepared to handle either '/' or '\\\\' in the file path for\n+\tWindows if using the \"file\" protocol.\n+\tCanonicalise the file path if using a relative path in the given\n+\tcontext and the \"file\" protocol.\n+\n 2003-03-01  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* java/lang/natWin32Process.cc (startProcess): Double-quote each"}, {"sha": "367fd44eb6923cb5d22a03681ccc3eb972295976", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=5bedfc9356014b29aa696f63421d3a3b000fc57c", "patch": "@@ -1,6 +1,6 @@\n // File.java - File name\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2003  Free Software Foundation, Inc.\n \n    This file is part of libgcj.\n \n@@ -153,12 +153,20 @@ public File (File dir, String name)\n     this (dir == null ? null : dir.path, name);\n   }\n \n-  // FIXME  ???\n   public String getAbsolutePath ()\n   {\n     if (isAbsolute ())\n       return path;\n-    return System.getProperty(\"user.dir\") + separatorChar + path;\n+    else if (separatorChar == '\\\\' \n+             && path.length () > 0 && path.charAt (0) == '\\\\')\n+      {\n+        // On Windows, even if the path starts with a '\\\\' it is not\n+        // really absolute until we prefix the drive specifier from\n+        // the current working directory to it.\n+        return System.getProperty (\"user.dir\").substring (0, 2) + path;\n+      }\n+    else\n+      return System.getProperty (\"user.dir\") + separatorChar + path;\n   }\n \n   /** @since 1.2 */\n@@ -289,8 +297,14 @@ public String toString ()\n \n   public URL toURL () throws MalformedURLException\n   {\n-    return new URL (\"file://\" + getAbsolutePath ()\n-\t\t    + (isDirectory() ? \"/\" : \"\"));\n+    // On Win32, Sun's JDK returns URLs of the form \"file:/c:/foo/bar.txt\",\n+    // while on UNIX, it returns URLs of the form \"file:/foo/bar.txt\". \n+    if (separatorChar == '\\\\')\n+      return new URL (\"file:/\" + getAbsolutePath ().replace ('\\\\', '/')\n+\t\t      + (isDirectory() ? \"/\" : \"\"));\n+    else\n+      return new URL (\"file:\" + getAbsolutePath ()\n+\t\t      + (isDirectory() ? \"/\" : \"\"));\n   }\n \n   private final native boolean performMkdir ();"}, {"sha": "9029881e165018a06103d68537d9af2651921336", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=5bedfc9356014b29aa696f63421d3a3b000fc57c", "patch": "@@ -119,9 +119,14 @@ java::io::File::getCanonicalPath (void)\n jboolean\n java::io::File::isAbsolute (void)\n {\n-  if (path->length() > 0\n-      && (path->charAt(0) == '/' || path->charAt(0) == '\\\\'))\n+  // See if the path represents a Windows UNC network path.\n+  if (path->length () > 1\n+      && (path->charAt (0) == '\\\\') && (path->charAt (1) == '\\\\'))\n     return true;\n+\n+  // Note that the path is not an absolute path even if it starts with\n+  // a '/' or a '\\' because it lacks a drive specifier.\n+\n   if (path->length() < 3)\n     return false;\n   // Hard-code A-Za-z because Windows (I think) can't use non-ASCII"}, {"sha": "d3dd3ccf0f76b23b083ac5cf32cda988cb394c43", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bedfc9356014b29aa696f63421d3a3b000fc57c/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=5bedfc9356014b29aa696f63421d3a3b000fc57c", "patch": "@@ -1,5 +1,5 @@\n /* URLStreamHandler.java -- Abstract superclass for all protocol handlers\n-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,6 +39,7 @@\n package java.net;\n \n import java.io.IOException;\n+import java.io.File;\n \n /*\n  * Written using on-line Java Platform 1.2 API Specification, as well\n@@ -112,7 +113,7 @@ protected abstract URLConnection openConnection(URL u)\n    * subclasses that implement protocols with URL's the follow a different \n    * syntax should override this method.  The lone exception is that if\n    * the protocol name set in the URL is \"file\", this method will accept\n-   * a an empty hostname (i.e., \"file:///\"), which is legal for that protocol\n+   * an empty hostname (i.e., \"file:///\"), which is legal for that protocol\n    *\n    * @param url The URL object in which to store the results\n    * @param spec The String-ized URL to parse\n@@ -176,8 +177,32 @@ else if (host == null)\n     else if (start < end)\n       {\n \t// Context is available, but only override it if there is a new file.\n-\tfile = file.substring(0, file.lastIndexOf('/'))\n-\t\t+ '/' + spec.substring(start, end);\n+        char sepChar = '/';\n+        int lastSlash = file.lastIndexOf (sepChar);\n+        if (lastSlash < 0 && File.separatorChar != sepChar\n+            && url.getProtocol ().equals (\"file\"))\n+          {\n+            // On Windows, even '\\' is allowed in a \"file\" URL.\n+            sepChar = File.separatorChar;\n+            lastSlash = file.lastIndexOf (sepChar);\n+          }\n+        \n+        file = file.substring(0, lastSlash)\n+                + sepChar + spec.substring (start, end);\n+\n+        if (url.getProtocol ().equals (\"file\"))\n+          {\n+            // For \"file\" URLs constructed relative to a context, we\n+            // need to canonicalise the file path.\n+            try\n+              {\n+                file = new File (file).getCanonicalPath ();\n+              }\n+            catch (IOException e)\n+              {\n+              }\n+          }\n+\n \tref = null;\n       }\n "}]}