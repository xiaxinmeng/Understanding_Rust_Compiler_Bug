{"sha": "88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiM2U2MzE1MDZhNTFlNWUxYWUwNDIyNGVmZTBiNWFjNWY3ZDBjYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-20T11:37:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-20T11:37:19Z"}, "message": "Tweak whitespace in std::allocator files\n\n\t* include/bits/allocator.h: Remove trailing whitespace, tab-indent.\n\t* include/ext/new_allocator.h: Likewise.\n\nFrom-SVN: r241371", "tree": {"sha": "02b7eb7957fcfedfe7d1d988afeabffa8cc8fd03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02b7eb7957fcfedfe7d1d988afeabffa8cc8fd03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e20345f137fe5116140ba78193f88dd57e2b8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e20345f137fe5116140ba78193f88dd57e2b8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e20345f137fe5116140ba78193f88dd57e2b8a6"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "f0360c5b8a0c88b47fba51565c1ecbe11f879873", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "patch": "@@ -1,5 +1,8 @@\n 2016-10-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/allocator.h: Remove trailing whitespace, tab-indent.\n+\t* include/ext/new_allocator.h: Likewise.\n+\n \tPR libstdc++/78052\n \t* include/bits/allocator.h (allocator<void>::construct)\n \t(allocator<void>::destroy): Define."}, {"sha": "327e25090ff5189d061d4fb083a90f6630bb465e", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "patch": "@@ -75,8 +75,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef void        value_type;\n \n       template<typename _Tp1>\n-        struct rebind\n-        { typedef allocator<_Tp1> other; };\n+\tstruct rebind\n+\t{ typedef allocator<_Tp1> other; };\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -86,13 +86,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef true_type is_always_equal;\n \n       template<typename _Up, typename... _Args>\n-        void\n-        construct(_Up* __p, _Args&&... __args)\n+\tvoid\n+\tconstruct(_Up* __p, _Args&&... __args)\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n-        void\n-        destroy(_Up* __p) { __p->~_Up(); }\n+\tvoid\n+\tdestroy(_Up* __p) { __p->~_Up(); }\n #endif\n     };\n \n@@ -117,8 +117,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp        value_type;\n \n       template<typename _Tp1>\n-        struct rebind\n-        { typedef allocator<_Tp1> other; };\n+\tstruct rebind\n+\t{ typedef allocator<_Tp1> other; };\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -134,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : __allocator_base<_Tp>(__a) { }\n \n       template<typename _Tp1>\n-        allocator(const allocator<_Tp1>&) throw() { }\n+\tallocator(const allocator<_Tp1>&) throw() { }\n \n       ~allocator() throw() { }\n "}, {"sha": "7633029de9be9a91fa507a068a5fae30f34c09bc", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=88b3e631506a51e5e1ae04224efe0b5ac5f7d0ca", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  An allocator that uses global new, as per [20.4].\n    *  @ingroup allocators\n    *\n-   *  This is precisely the allocator defined in the C++ Standard. \n+   *  This is precisely the allocator defined in the C++ Standard.\n    *    - all allocation calls operator new\n    *    - all deallocation calls operator delete\n    *\n@@ -67,8 +67,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp        value_type;\n \n       template<typename _Tp1>\n-        struct rebind\n-        { typedef new_allocator<_Tp1> other; };\n+\tstruct rebind\n+\t{ typedef new_allocator<_Tp1> other; };\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -81,7 +81,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n+\tnew_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // about what the return value is when __n == 0.\n       pointer\n       allocate(size_type __n, const void* = 0)\n-      { \n+      {\n \tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n@@ -131,21 +131,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n-        void\n-        construct(_Up* __p, _Args&&... __args)\n+\tvoid\n+\tconstruct(_Up* __p, _Args&&... __args)\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n-        void \n-        destroy(_Up* __p) { __p->~_Up(); }\n+\tvoid\n+\tdestroy(_Up* __p) { __p->~_Up(); }\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_] allocator::construct\n-      void \n-      construct(pointer __p, const _Tp& __val) \n+      void\n+      construct(pointer __p, const _Tp& __val)\n       { ::new((void *)__p) _Tp(__val); }\n \n-      void \n+      void\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n     };\n@@ -154,7 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)\n     { return true; }\n-  \n+\n   template<typename _Tp>\n     inline bool\n     operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)"}]}