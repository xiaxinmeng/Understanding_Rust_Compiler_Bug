{"sha": "eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmNjZjZDJhYTRlNmNiY2UyODljZTYxYWE5MDNlZDNlZTRiNTJmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-10T20:12:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-10T20:12:50Z"}, "message": "PR c++/92847 - C++20 comparison ambiguity with class template.\n\nThis testcase demonstrates that looking at cand->template_decl is not a good\nstarting place for finding the most general template, as it is only set for\nprimary templates.\n\n\t* call.c (cand_parms_match): Handle all templated functions.\n\nFrom-SVN: r279185", "tree": {"sha": "e7e2454d6723bc9e7cd9b780d1fc4abdf0820bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e2454d6723bc9e7cd9b780d1fc4abdf0820bbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09b661cea17a144e68009ecdf61a92a05bf852dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b661cea17a144e68009ecdf61a92a05bf852dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b661cea17a144e68009ecdf61a92a05bf852dd"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "c77605461422f59d53901a02004014d3c9db5698", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "patch": "@@ -1,5 +1,8 @@\n 2019-12-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/92847 - C++20 comparison ambiguity with class template.\n+\t* call.c (cand_parms_match): Handle all templated functions.\n+\n \tFix C++20 structural type vs. private base.\n \t* class.c (build_base_field_1): Take access parameter.\n \t(build_base_field): Likewise."}, {"sha": "cbd5747d6ca4459ca820f03ce7d90794f25e7089", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "patch": "@@ -11052,24 +11052,25 @@ joust_maybe_elide_copy (z_candidate *&cand)\n bool\n cand_parms_match (z_candidate *c1, z_candidate *c2)\n {\n-  tree fn1 = c1->template_decl;\n-  tree fn2 = c2->template_decl;\n-  if (fn1 && fn2)\n-    {\n-      fn1 = most_general_template (TI_TEMPLATE (fn1));\n-      fn1 = DECL_TEMPLATE_RESULT (fn1);\n-      fn2 = most_general_template (TI_TEMPLATE (fn2));\n-      fn2 = DECL_TEMPLATE_RESULT (fn2);\n-    }\n-  else\n-    {\n-      fn1 = c1->fn;\n-      fn2 = c2->fn;\n-    }\n+  tree fn1 = c1->fn;\n+  tree fn2 = c2->fn;\n   if (fn1 == fn2)\n     return true;\n   if (identifier_p (fn1) || identifier_p (fn2))\n     return false;\n+  /* We don't look at c1->template_decl because that's only set for primary\n+     templates, not e.g. non-template member functions of class templates.  */\n+  tree t1 = most_general_template (fn1);\n+  tree t2 = most_general_template (fn2);\n+  if (t1 || t2)\n+    {\n+      if (!t1 || !t2)\n+\treturn false;\n+      if (t1 == t2)\n+\treturn true;\n+      fn1 = DECL_TEMPLATE_RESULT (t1);\n+      fn2 = DECL_TEMPLATE_RESULT (t2);\n+    }\n   return compparms (TYPE_ARG_TYPES (TREE_TYPE (fn1)),\n \t\t    TYPE_ARG_TYPES (TREE_TYPE (fn2)));\n }"}, {"sha": "d0424377e8e3ac560de7ac7f7cccd2230c6cdf7b", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-rewrite5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite5.C?ref=eff66cd2aa4e6cbce289ce61aa903ed3ee4b52fa", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+struct A {\n+  A() {}\n+\n+  template<typename U>\n+    A(const A<U>&) {}\n+\n+  bool operator==(const A&) const { return true; }\n+};\n+\n+A<const int> a;\n+A<int> b;\n+auto c = (a == b);"}]}