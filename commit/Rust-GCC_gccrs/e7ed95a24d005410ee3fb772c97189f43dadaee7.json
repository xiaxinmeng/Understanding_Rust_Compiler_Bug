{"sha": "e7ed95a24d005410ee3fb772c97189f43dadaee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlZDk1YTI0ZDAwNTQxMGVlM2ZiNzcyYzk3MTg5ZjQzZGFkYWVlNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-09-17T21:07:09Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-09-17T21:07:09Z"}, "message": "Pad short functions with NOPs for Atom.\n\ngcc/\n\n2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\t* config/i386/i386.c (initial_ix86_tune_features): Add\n\tX86_TUNE_PAD_SHORT_FUNCTION.\n\t(ix86_code_end): Pad with 8 NOPs for TARGET_PAD_SHORT_FUNCTION.\n\t(ix86_count_insn): New.\n\t(ix86_pad_short_function): Likewise.\n\t(ix86_reorg): Support TARGET_PAD_SHORT_FUNCTION.\n\n\t* config/i386/i386.h (ix86_tune_indices): Add\n\tX86_TUNE_PAD_SHORT_FUNCTION.\n\t(TARGET_PAD_SHORT_FUNCTION): New.\n\n\t* config/i386/i386.md (UNSPEC_NOPS): New.\n\t(nops): Likewise.\n\ngcc/testsuite/\n\n2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/pad-1.c: New.\n\t* gcc.target/i386/pad-2.c: Likewise.\n\t* gcc.target/i386/pad-3.c: Likewise.\n\t* gcc.target/i386/pad-4.c: Likewise.\n\t* gcc.target/i386/pad-5a.c: Likewise.\n\t* gcc.target/i386/pad-5b.c: Likewise.\n\t* gcc.target/i386/pad-6a.c: Likewise.\n\t* gcc.target/i386/pad-6b.c: Likewise.\n\t* gcc.target/i386/pad-7.c: Likewise.\n\t* gcc.target/i386/pad-8.c: Likewise.\n\t* gcc.target/i386/pad-9.c: Likewise.\n\t* gcc.target/i386/pad-10.c: Likewise.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r164379", "tree": {"sha": "de5a48ea5e9cadf018a942934426371b6d2cf5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de5a48ea5e9cadf018a942934426371b6d2cf5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ed95a24d005410ee3fb772c97189f43dadaee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ed95a24d005410ee3fb772c97189f43dadaee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ed95a24d005410ee3fb772c97189f43dadaee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ed95a24d005410ee3fb772c97189f43dadaee7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cab7c1398a6275c0b8e4132f3c2d1e22181c00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cab7c1398a6275c0b8e4132f3c2d1e22181c00b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cab7c1398a6275c0b8e4132f3c2d1e22181c00b"}], "stats": {"total": 344, "additions": 343, "deletions": 1}, "files": [{"sha": "dcfc7e6678358e47564b08a0b0a94cfc054aea85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -1,3 +1,20 @@\n+2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (initial_ix86_tune_features): Add\n+\tX86_TUNE_PAD_SHORT_FUNCTION.\n+\t(ix86_code_end): Pad with 8 NOPs for TARGET_PAD_SHORT_FUNCTION.\n+\t(ix86_count_insn): New.\n+\t(ix86_pad_short_function): Likewise.\n+\t(ix86_reorg): Support TARGET_PAD_SHORT_FUNCTION.\n+\n+\t* config/i386/i386.h (ix86_tune_indices): Add\n+\tX86_TUNE_PAD_SHORT_FUNCTION.\n+\t(TARGET_PAD_SHORT_FUNCTION): New.\n+\n+\t* config/i386/i386.md (UNSPEC_NOPS): New.\n+\t(nops): Likewise.\n+\n 2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/45234"}, {"sha": "d9f92371e683ebd87be752e7dd327aa374bdfbc5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -1576,6 +1576,9 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_PAD_RETURNS */\n   m_AMD_MULTIPLE | m_CORE2 | m_GENERIC,\n \n+  /* X86_TUNE_PAD_SHORT_FUNCTION: Pad short funtion.  */\n+  m_ATOM,\n+\n   /* X86_TUNE_EXT_80387_CONSTANTS */\n   m_K6_GEODE | m_ATHLON_K8 | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO\n   | m_CORE2 | m_GENERIC,\n@@ -8021,6 +8024,11 @@ ix86_code_end (void)\n \n       xops[0] = gen_rtx_REG (Pmode, regno);\n       xops[1] = gen_rtx_MEM (Pmode, stack_pointer_rtx);\n+      /* Pad stack IP move with 4 instructions.  2 NOPs count as 1\n+         instruction.  */\n+      if (TARGET_PAD_SHORT_FUNCTION)\n+\toutput_asm_insn (\"nop; nop; nop; nop; nop; nop; nop; nop\",\n+\t\t\t xops);\n       output_asm_insn (\"mov%z0\\t{%1, %0|%0, %1}\", xops);\n       output_asm_insn (\"ret\", xops);\n       final_end_function ();\n@@ -27882,14 +27890,130 @@ ix86_pad_returns (void)\n     }\n }\n \n+/* Count the minimum number of instructions in BB.  Return 4 if the\n+   number of instructions >= 4.  */\n+\n+static int \n+ix86_count_insn_bb (basic_block bb)\n+{\n+  rtx insn;\n+  int insn_count = 0;\n+\n+  /* Count number of instructions in this block.  Return 4 if the number\n+     of instructions >= 4.  */\n+  FOR_BB_INSNS (bb, insn)\n+    {\n+      /* Only happen in exit blocks.  */\n+      if (JUMP_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) == RETURN)\n+\tbreak;\n+\n+      if (NONDEBUG_INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) != USE\n+\t  && GET_CODE (PATTERN (insn)) != CLOBBER)\n+\t{\n+\t  insn_count++;\n+\t  if (insn_count >= 4)\n+\t    return insn_count;\n+\t}\n+    }\n+\n+  return insn_count;\n+}\n+\n+\n+/* Count the minimum number of instructions in code path in BB.  \n+   Return 4 if the number of instructions >= 4.  */\n+\n+static int \n+ix86_count_insn (basic_block bb)\n+{\n+  edge e;\n+  edge_iterator ei;\n+  int min_prev_count;\n+\n+  /* Only bother counting instructions along paths with no\n+     more than 2 basic blocks between entry and exit.  Given\n+     that BB has an edge to exit, determine if a predecessor\n+     of BB has an edge from entry.  If so, compute the number\n+     of instructions in the predecessor block.  If there\n+     happen to be multiple such blocks, compute the minimum.  */\n+  min_prev_count = 4;\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    {\n+      edge prev_e;\n+      edge_iterator prev_ei;\n+\n+      if (e->src == ENTRY_BLOCK_PTR)\n+\t{\n+\t  min_prev_count = 0;\n+\t  break;\n+\t}\n+      FOR_EACH_EDGE (prev_e, prev_ei, e->src->preds)\n+\t{\n+\t  if (prev_e->src == ENTRY_BLOCK_PTR)\n+\t    {\n+\t      int count = ix86_count_insn_bb (e->src);\n+\t      if (count < min_prev_count)\n+\t\tmin_prev_count = count;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (min_prev_count < 4)\n+    min_prev_count += ix86_count_insn_bb (bb);\n+\n+  return min_prev_count;\n+}\n+\n+/* Pad short funtion to 4 instructions.   */\n+\n+static void\n+ix86_pad_short_function (void)\n+{\n+  edge e;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR->preds)\n+    {\n+      rtx ret = BB_END (e->src);\n+      if (JUMP_P (ret) && GET_CODE (PATTERN (ret)) == RETURN)\n+\t{\n+\t  int insn_count = ix86_count_insn (e->src);\n+\n+\t  /* Pad short function.  */\n+\t  if (insn_count < 4)\n+\t    {\n+\t      rtx insn = ret;\n+\n+\t      /* Find epilogue.  */\n+\t      while (insn\n+\t\t     && (!NOTE_P (insn)\n+\t\t\t || NOTE_KIND (insn) != NOTE_INSN_EPILOGUE_BEG))\n+\t\tinsn = PREV_INSN (insn);\n+\n+\t      if (!insn)\n+\t\tinsn = ret;\n+\n+\t      /* Two NOPs are counted as one instruction.  */\n+\t      insn_count = 2 * (4  - insn_count);\n+\t      emit_insn_before (gen_nops (GEN_INT (insn_count)), insn);\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Implement machine specific optimizations.  We implement padding of returns\n    for K8 CPUs and pass to avoid 4 jumps in the single 16 byte window.  */\n static void\n ix86_reorg (void)\n {\n   if (optimize && optimize_function_for_speed_p (cfun))\n     {\n-      if (TARGET_PAD_RETURNS)\n+      if (TARGET_PAD_SHORT_FUNCTION)\n+\tix86_pad_short_function ();\n+      else if (TARGET_PAD_RETURNS)\n \tix86_pad_returns ();\n #ifdef ASM_OUTPUT_MAX_SKIP_PAD\n       if (TARGET_FOUR_JUMP_LIMIT)"}, {"sha": "aa246c6fdcc9ec8fba5a7732e520022167ac8026", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -299,6 +299,7 @@ enum ix86_tune_indices {\n   X86_TUNE_USE_BT,\n   X86_TUNE_USE_INCDEC,\n   X86_TUNE_PAD_RETURNS,\n+  X86_TUNE_PAD_SHORT_FUNCTION,\n   X86_TUNE_EXT_80387_CONSTANTS,\n   X86_TUNE_SHORTEN_X87_SSE,\n   X86_TUNE_AVOID_VECTOR_DECODE,\n@@ -385,6 +386,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_USE_BT\t\tix86_tune_features[X86_TUNE_USE_BT]\n #define TARGET_USE_INCDEC\tix86_tune_features[X86_TUNE_USE_INCDEC]\n #define TARGET_PAD_RETURNS\tix86_tune_features[X86_TUNE_PAD_RETURNS]\n+#define TARGET_PAD_SHORT_FUNCTION \\\n+\tix86_tune_features[X86_TUNE_PAD_SHORT_FUNCTION]\n #define TARGET_EXT_80387_CONSTANTS \\\n \tix86_tune_features[X86_TUNE_EXT_80387_CONSTANTS]\n #define TARGET_SHORTEN_X87_SSE\tix86_tune_features[X86_TUNE_SHORTEN_X87_SSE]"}, {"sha": "4ccd932a84034f3c44784e3fc44934be75f89df8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -104,6 +104,7 @@\n   UNSPEC_LD_MPIC\t; load_macho_picbase\n   UNSPEC_TRUNC_NOOP\n   UNSPEC_DIV_ALREADY_SPLIT\n+  UNSPEC_NOPS\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -11465,6 +11466,39 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n+;; Generate nops.  Operand 0 is the number of nops, up to 8.\n+(define_insn \"nops\"\n+  [(unspec [(match_operand 0 \"const_int_operand\" \"\")]\n+\t   UNSPEC_NOPS)]\n+  \"reload_completed\"\n+{\n+  switch (INTVAL (operands[0]))\n+    {\n+    case 1:\n+      return \"nop\";\n+    case 2:\n+      return \"nop; nop\";\n+    case 3:\n+      return \"nop; nop; nop\";\n+    case 4:\n+      return \"nop; nop; nop; nop\";\n+    case 5:\n+      return \"nop; nop; nop; nop; nop\";\n+    case 6:\n+      return \"nop; nop; nop; nop; nop; nop\";\n+    case 7:\n+      return \"nop; nop; nop; nop; nop; nop; nop\";\n+    case 8:\n+      return \"nop; nop; nop; nop; nop; nop; nop; nop\";\n+    default:\n+      gcc_unreachable ();\n+      break;\n+  }\n+}\n+  [(set (attr \"length\") (symbol_ref \"INTVAL (operands[0])\"))\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"modrm\" \"0\")])\n+\n ;; Pad to 16-byte boundary, max skip in op0.  Used to avoid\n ;; branch prediction penalty for the third jump in a 16-byte\n ;; block on K8."}, {"sha": "f1193f90c4e96de072ca9e84ff632e231ab51400", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -1,3 +1,18 @@\n+2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/pad-1.c: New.\n+\t* gcc.target/i386/pad-2.c: Likewise.\n+\t* gcc.target/i386/pad-3.c: Likewise.\n+\t* gcc.target/i386/pad-4.c: Likewise.\n+\t* gcc.target/i386/pad-5a.c: Likewise.\n+\t* gcc.target/i386/pad-5b.c: Likewise.\n+\t* gcc.target/i386/pad-6a.c: Likewise.\n+\t* gcc.target/i386/pad-6b.c: Likewise.\n+\t* gcc.target/i386/pad-7.c: Likewise.\n+\t* gcc.target/i386/pad-8.c: Likewise.\n+\t* gcc.target/i386/pad-9.c: Likewise.\n+\t* gcc.target/i386/pad-10.c: Likewise.\n+\n 2010-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/45234"}, {"sha": "87a9d6c81f1ff7238302c120de8c7b356d450436", "filename": "gcc/testsuite/gcc.target/i386/pad-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mtune=generic -S\" } */\n+/* { dg-final { scan-assembler \"rep\" } } */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+\n+void\n+foo ()\n+{\n+}"}, {"sha": "6ba3b787402dac753d3b5df898442e37ea3e95fd", "filename": "gcc/testsuite/gcc.target/i386/pad-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+extern void bar ();\n+\n+int\n+foo2 (int z, int x)\n+{\n+  if (x == 1)\n+    {\n+      bar ();\n+      return z;\n+    }\n+  else\n+    return x + z;\n+}"}, {"sha": "964547cc9045a2ea323369f3ef6fcae34cdbc6cb", "filename": "gcc/testsuite/gcc.target/i386/pad-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+void\n+foo ()\n+{\n+}"}, {"sha": "52442b40f95108daa0384a73684a5de2a7a595c8", "filename": "gcc/testsuite/gcc.target/i386/pad-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int s[8] = {1, 2, 3, 4, 5, 6, 7, 8};\n+int d[8] = {11, 22, 33, 44, 55, 66, 77, 88};\n+\n+void\n+foo ()\n+{\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    d[i] = s[i] + 0x1000;\n+}"}, {"sha": "a7033fae3aff3e1d4fa4aaa397d0c1c6ba71d275", "filename": "gcc/testsuite/gcc.target/i386/pad-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S -fPIC\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+extern int bar;\n+\n+int\n+foo ()\n+{\n+  return bar;\n+}"}, {"sha": "9d0aa2a8000671db94555a4f5e2b01c6425c5e02", "filename": "gcc/testsuite/gcc.target/i386/pad-5a.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y, int z)\n+{\n+   return x + y + z;\n+}"}, {"sha": "2e1cf129d89a8e0c6d206db004c78fa39491159b", "filename": "gcc/testsuite/gcc.target/i386/pad-5b.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y, int z)\n+{\n+   return x + y + z;\n+}"}, {"sha": "e865967a7a761bc974b440cb445d4b155be4fe4a", "filename": "gcc/testsuite/gcc.target/i386/pad-6a.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y)\n+{\n+   return x + y;\n+}"}, {"sha": "41aeaee7ce0a0d06d4e389d4c051a8e5d81a2e15", "filename": "gcc/testsuite/gcc.target/i386/pad-6b.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y)\n+{\n+   return x + y;\n+}"}, {"sha": "7a7493d05bcf0818c7b5fa6f232ad3fc513e0397", "filename": "gcc/testsuite/gcc.target/i386/pad-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-not \"nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y, int z)\n+{\n+   return x + y + z + y;\n+}"}, {"sha": "873a0a4fa2fc8fb945933400f0aa600d4e031219", "filename": "gcc/testsuite/gcc.target/i386/pad-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+int\n+foo (int x, int y)\n+{\n+   return y;\n+}"}, {"sha": "3d68805d143cdb02553fa921e8ce8124348384f3", "filename": "gcc/testsuite/gcc.target/i386/pad-9.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ed95a24d005410ee3fb772c97189f43dadaee7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c?ref=e7ed95a24d005410ee3fb772c97189f43dadaee7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-final { scan-assembler-not \"rep\" } } */\n+\n+extern void bar (void);\n+\n+void\n+foo (int x)\n+{\n+  if (x)\n+    bar ();\n+}"}]}