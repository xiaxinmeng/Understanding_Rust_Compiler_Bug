{"sha": "01156003a987af28c1432f247471b2192566612a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExNTYwMDNhOTg3YWYyOGMxNDMyZjI0NzQ3MWIyMTkyNTY2NjEyYQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-11-18T12:30:52Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-11-18T12:30:52Z"}, "message": "builtin-types.def (BT_FN_PTR_CONST_PTR_VAR): New.\n\n        * builtin-types.def (BT_FN_PTR_CONST_PTR_VAR): New.\n        * chkp-builtins.def (BUILT_IN_CHKP_BIND_BOUNDS): New.\n        * cfgexpand.c (expand_call_stmt): Expand BUILT_IN_CHKP_BIND_BOUNDS.\n        * gimple.c (gimple_call_get_nobnd_arg_index): Remove.\n        * gimple.h (gf_mask): Add GF_CALL_WITH_BOUNDS.\n        (gimple_call_with_bounds_p): New.\n        (gimple_call_set_with_bounds): New.\n        (gimple_call_num_nobnd_args): Remove.\n        (gimple_call_nobnd_arg): Remove.\n        * tree.h (CALL_WITH_BOUNDS_P): New.\n        * rtl.h (CALL_EXPR_WITH_BOUNDS_P): New.\n\nFrom-SVN: r204947", "tree": {"sha": "c33b65ba49a84fb08a5cd31eafd59e6001a95d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33b65ba49a84fb08a5cd31eafd59e6001a95d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01156003a987af28c1432f247471b2192566612a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01156003a987af28c1432f247471b2192566612a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01156003a987af28c1432f247471b2192566612a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01156003a987af28c1432f247471b2192566612a/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fec39fa6b010bb0a37c93412e8f147668c558f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec39fa6b010bb0a37c93412e8f147668c558f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec39fa6b010bb0a37c93412e8f147668c558f98"}], "stats": {"total": 118, "additions": 67, "deletions": 51}, "files": [{"sha": "72e707a6ed5106c8375064a65145a0e404d57bb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -1,3 +1,17 @@\n+2013-11-18  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* builtin-types.def (BT_FN_PTR_CONST_PTR_VAR): New.\n+\t* chkp-builtins.def (BUILT_IN_CHKP_BIND_BOUNDS): New.\n+\t* cfgexpand.c (expand_call_stmt): Expand BUILT_IN_CHKP_BIND_BOUNDS.\n+\t* gimple.c (gimple_call_get_nobnd_arg_index): Remove.\n+\t* gimple.h (gf_mask): Add GF_CALL_WITH_BOUNDS.\n+\t(gimple_call_with_bounds_p): New.\n+\t(gimple_call_set_with_bounds): New.\n+\t(gimple_call_num_nobnd_args): Remove.\n+\t(gimple_call_nobnd_arg): Remove.\n+\t* tree.h (CALL_WITH_BOUNDS_P): New.\n+\t* rtl.h (CALL_EXPR_WITH_BOUNDS_P): New.\n+\n 2013-11-18  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* cgraph.h (symtab_node_asm_name): Rename to symtab_node::asm_name."}, {"sha": "e7bfaf943d40d55244a10d5a9748d65d672c1db2", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -542,6 +542,8 @@ DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_VAR_1 (BT_FN_UINT32_UINT32_VAR,\n \t\t\t BT_UINT32, BT_UINT32)\n+DEF_FUNCTION_TYPE_VAR_1 (BT_FN_PTR_CONST_PTR_VAR,\n+\t\t\t BT_PTR, BT_CONST_PTR)\n \n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_FILEPTR_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_FILEPTR, BT_CONST_STRING)"}, {"sha": "124a4b89dfba4b56dc38060d51f046aab03f499b", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -2154,12 +2154,22 @@ expand_call_stmt (gimple stmt)\n       return;\n     }\n \n-  exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n-\n-  CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n   decl = gimple_call_fndecl (stmt);\n   builtin_p = decl && DECL_BUILT_IN (decl);\n \n+  /* Bind bounds call is expanded as assignment.  */\n+  if (builtin_p\n+      && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+      && DECL_FUNCTION_CODE (decl) == BUILT_IN_CHKP_BIND_BOUNDS)\n+    {\n+      expand_assignment (gimple_call_lhs (stmt),\n+\t\t\t gimple_call_arg (stmt, 0), false);\n+      return;\n+    }\n+\n+  exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n+  CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n+\n   /* If this is not a builtin function, the function type through which the\n      call is made may be different from the type of the function.  */\n   if (!builtin_p)"}, {"sha": "b920950d603935a013f0fb5c024a21299689dc31", "filename": "gcc/chkp-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Fchkp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Fchkp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchkp-builtins.def?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -42,6 +42,9 @@ DEF_BUILTIN_STUB (BUILT_IN_CHKP_EXTRACT_LOWER, \"__chkp_extract_lower\")\n DEF_BUILTIN_STUB (BUILT_IN_CHKP_EXTRACT_UPPER, \"__chkp_extract_upper\")\n DEF_BUILTIN_STUB (BUILT_IN_CHKP_NARROW, \"__chkp_narrow\")\n \n+/* Builtins to bind bounds to call arguments.  */\n+DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BIND_BOUNDS, \"__chkp_bind_bounds\", BT_FN_PTR_CONST_PTR_VAR, ATTR_CONST_NOTHROW_LEAF_LIST)\n+\n /* Pointer Bounds Checker builtins for users.  Only\n    BUILT_IN_CHKP_SET_PTR_BOUNDS may be redefined\n    by target.  Other builtins calls are expanded"}, {"sha": "2d642616ae331e9eea4b4ad7728fe15c652da6e1", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -365,26 +365,6 @@ gimple_build_call_from_tree (tree t)\n }\n \n \n-/* Return index of INDEX's non bound argument of the call.  */\n-\n-unsigned\n-gimple_call_get_nobnd_arg_index (const_gimple gs, unsigned index)\n-{\n-  unsigned num_args = gimple_call_num_args (gs);\n-  for (unsigned n = 0; n < num_args; n++)\n-    {\n-      if (POINTER_BOUNDS_P (gimple_call_arg (gs, n)))\n-\tcontinue;\n-      else if (index)\n-\tindex--;\n-      else\n-\treturn n;\n-    }\n-\n-  gcc_unreachable ();\n-}\n-\n-\n /* Build a GIMPLE_ASSIGN statement.\n \n    LHS of the assignment."}, {"sha": "4234c3cfdb497c80753a0aa8d6246520aa362efc", "filename": "gcc/gimple.h", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -101,6 +101,7 @@ enum gf_mask {\n     GF_CALL_NOTHROW\t\t= 1 << 4,\n     GF_CALL_ALLOCA_FOR_VAR\t= 1 << 5,\n     GF_CALL_INTERNAL\t\t= 1 << 6,\n+    GF_CALL_WITH_BOUNDS \t= 1 << 7,\n     GF_OMP_PARALLEL_COMBINED\t= 1 << 0,\n     GF_OMP_FOR_KIND_MASK\t= 3 << 0,\n     GF_OMP_FOR_KIND_FOR\t\t= 0 << 0,\n@@ -737,7 +738,6 @@ gimple gimple_build_call_valist (tree, unsigned, va_list);\n gimple gimple_build_call_internal (enum internal_fn, unsigned, ...);\n gimple gimple_build_call_internal_vec (enum internal_fn, vec<tree> );\n gimple gimple_build_call_from_tree (tree);\n-extern unsigned gimple_call_get_nobnd_arg_index (const_gimple, unsigned);\n gimple gimple_build_assign_stat (tree, tree MEM_STAT_DECL);\n #define gimple_build_assign(l,r) gimple_build_assign_stat (l, r MEM_STAT_INFO)\n gimple gimple_build_assign_with_ops (enum tree_code, tree,\n@@ -1960,6 +1960,31 @@ gimple_call_internal_p (const_gimple gs)\n }\n \n \n+/* Return true if call GS is marked as instrumented by\n+   Pointer Bounds Checker.  */\n+\n+static inline bool\n+gimple_call_with_bounds_p (const_gimple gs)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  return (gs->gsbase.subcode & GF_CALL_WITH_BOUNDS) != 0;\n+}\n+\n+\n+/* If INSTRUMENTED_P is true, marm statement GS as instrumented by\n+   Pointer Bounds Checker.  */\n+\n+static inline void\n+gimple_call_set_with_bounds (gimple gs, bool with_bounds)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  if (with_bounds)\n+    gs->gsbase.subcode |= GF_CALL_WITH_BOUNDS;\n+  else\n+    gs->gsbase.subcode &= ~GF_CALL_WITH_BOUNDS;\n+}\n+\n+\n /* Return the target of internal call GS.  */\n \n static inline enum internal_fn\n@@ -2125,32 +2150,6 @@ gimple_call_arg (const_gimple gs, unsigned index)\n }\n \n \n-/* Return the number of arguments used by call statement GS\n-   ignoring bound ones.  */\n-\n-static inline unsigned\n-gimple_call_num_nobnd_args (const_gimple gs)\n-{\n-  unsigned num_args = gimple_call_num_args (gs);\n-  unsigned res = num_args;\n-  for (unsigned n = 0; n < num_args; n++)\n-    if (POINTER_BOUNDS_P (gimple_call_arg (gs, n)))\n-      res--;\n-  return res;\n-}\n-\n-\n-/* Return INDEX's call argument ignoring bound ones.  */\n-static inline tree\n-gimple_call_nobnd_arg (const_gimple gs, unsigned index)\n-{\n-  /* No bound args may exist if pointers checker is off.  */\n-  if (!flag_check_pointer_bounds)\n-    return gimple_call_arg (gs, index);\n-  return gimple_call_arg (gs, gimple_call_get_nobnd_arg_index (gs, index));\n-}\n-\n-\n /* Return a pointer to the argument at position INDEX for call\n    statement GS.  */\n "}, {"sha": "bab5b7c75377bf6db50ab68077db90c70e5c19e3", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -266,7 +266,8 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      In a CODE_LABEL, part of the two-bit alternate entry field.\n      1 in a CONCAT is VAL_EXPR_IS_COPIED in var-tracking.c.\n      1 in a VALUE is SP_BASED_VALUE_P in cselib.c.\n-     1 in a SUBREG generated by LRA for reload insns.  */\n+     1 in a SUBREG generated by LRA for reload insns.\n+     1 in a CALL for calls instrumented by Pointer Bounds Checker.  */\n   unsigned int jump : 1;\n   /* In a CODE_LABEL, part of the two-bit alternate entry field.\n      1 in a MEM if it cannot trap.\n@@ -1420,6 +1421,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LRA_SUBREG_P(RTX)\t\\\n   (RTL_FLAG_CHECK1 (\"LRA_SUBREG_P\", (RTX), SUBREG)->jump)\n \n+/* True if call is instrumented by Pointer Bounds Checker.  */\n+#define CALL_EXPR_WITH_BOUNDS_P(RTX) \\\n+  (RTL_FLAG_CHECK1 (\"CALL_EXPR_WITH_BOUNDS_P\", (RTX), CALL)->jump)\n+\n /* Access various components of an ASM_OPERANDS rtx.  */\n \n #define ASM_OPERANDS_TEMPLATE(RTX) XCSTR (RTX, 0, ASM_OPERANDS)"}, {"sha": "dee15be7321db25537cfce39092f97428d43c4ff", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01156003a987af28c1432f247471b2192566612a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01156003a987af28c1432f247471b2192566612a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=01156003a987af28c1432f247471b2192566612a", "patch": "@@ -831,6 +831,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define CALL_ALLOCA_FOR_VAR_P(NODE) \\\n   (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n \n+/* In a CALL_EXPR, means call was instrumented by Pointer Bounds Checker.  */\n+#define CALL_WITH_BOUNDS_P(NODE) (CALL_EXPR_CHECK (NODE)->base.deprecated_flag)\n+\n /* In a type, nonzero means that all objects of the type are guaranteed by the\n    language or front-end to be properly aligned, so we can indicate that a MEM\n    of this type is aligned at least to the alignment of the type, even if it"}]}