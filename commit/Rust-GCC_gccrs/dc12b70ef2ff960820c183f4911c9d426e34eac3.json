{"sha": "dc12b70ef2ff960820c183f4911c9d426e34eac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMxMmI3MGVmMmZmOTYwODIwYzE4M2Y0OTExYzlkNDI2ZTM0ZWFjMw==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2010-03-31T02:44:10Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2010-03-31T02:44:10Z"}, "message": "re PR other/43562 (GCC ICE on optimize attribute)\n\n\tPR 43562\n\t* reload.h (caller_save_initialized_p): Declare.\n\t* toplev.c (backend_init_target): Don't call\n\tinit_caller_save but set caller_save_initialized_p\n\tto false.\n\t* caller-save.c (caller_save_initialized_p): Define.\n\t(init_caller_save): Check caller_save_initialized_p.\n\t* ira.c (ira): Call init_caller_save if flag_caller_saves.\n\n\ttestsuite/\n\tPR 43562\n\t* gcc.dg/pr43562.c: New test.\n\nFrom-SVN: r157849", "tree": {"sha": "bdc83c7c76ffc03569d38f8626f441aecbd9e452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdc83c7c76ffc03569d38f8626f441aecbd9e452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc12b70ef2ff960820c183f4911c9d426e34eac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc12b70ef2ff960820c183f4911c9d426e34eac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc12b70ef2ff960820c183f4911c9d426e34eac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc12b70ef2ff960820c183f4911c9d426e34eac3/comments", "author": null, "committer": null, "parents": [{"sha": "d500b6cfc85cbd6d7a042796689d796d498fc468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d500b6cfc85cbd6d7a042796689d796d498fc468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d500b6cfc85cbd6d7a042796689d796d498fc468"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "bd2182106529e37651df8f09077029e3ee11ce8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -1,3 +1,14 @@\n+2010-03-31  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR 43562\n+\t* reload.h (caller_save_initialized_p): Declare.\n+\t* toplev.c (backend_init_target): Don't call\n+\tinit_caller_save but set caller_save_initialized_p\n+\tto false.\n+\t* caller-save.c (caller_save_initialized_p): Define.\n+\t(init_caller_save): Check caller_save_initialized_p.\n+\t* ira.c (ira): Call init_caller_save if flag_caller_saves.\n+\n 2010-03-30  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42977"}, {"sha": "7a00dbd72aeab9b5de6211262f367e2465b44daf", "filename": "gcc/caller-save.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -40,6 +40,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"ggc.h\"\n \n+/* True if caller-save has been initialized.  */\n+bool caller_save_initialized_p;\n+\n /* Call used hard registers which can not be saved because there is no\n    insn for this.  */\n HARD_REG_SET no_caller_save_reg_set;\n@@ -208,6 +211,11 @@ init_caller_save (void)\n   rtx address;\n   int i, j;\n \n+  if (caller_save_initialized_p)\n+    return;\n+\n+  caller_save_initialized_p = true;\n+\n   CLEAR_HARD_REG_SET (no_caller_save_reg_set);\n   /* First find all the registers that we need to deal with and all\n      the modes that they can have.  If we can't find a mode to use,"}, {"sha": "ce0f0da0fcd3870348df1571a71d70929b3c6928", "filename": "gcc/ira.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -3127,6 +3127,9 @@ ira (FILE *f)\n \n   timevar_push (TV_IRA);\n \n+  if (flag_caller_saves)\n+    init_caller_save ();\n+\n   if (flag_ira_verbose < 10)\n     {\n       internal_flag_ira_verbose = flag_ira_verbose;"}, {"sha": "883d1416ee37d10e7626f89757d9b0c1744babf9", "filename": "gcc/reload.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -349,6 +349,9 @@ extern bool elimination_target_reg_p (rtx);\n /* Deallocate the reload register used by reload number R.  */\n extern void deallocate_reload_reg (int r);\n \n+/* True if caller-save has been reinitialized.  */\n+extern bool caller_save_initialized_p;\n+\n /* Functions in caller-save.c:  */\n \n /* Initialize for caller-save.  */"}, {"sha": "70ab74b81c9250acd7db87357633df4244999a99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -1,3 +1,8 @@\n+2010-03-31  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR 43562\n+\t* gcc.dg/pr43562.c: New test.\n+\n 2010-03-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43076"}, {"sha": "352c107a93580cd48ece1e42d11d677c3ecb6adc", "filename": "gcc/testsuite/gcc.dg/pr43562.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43562.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43562.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43562.c?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O0\" } */\n+/* { dg-do compile } */\n+\n+extern unsigned foo (void);\n+extern void bar (void);\n+\n+__attribute__ ((optimize (\"O2\")))\n+void bak ()\n+{\n+  unsigned a;\n+  while (1)\n+    {\n+      a = foo ();\n+      while (a)\n+\t{\n+\t  a &= 1;\n+\t  bar ();\n+\t}\n+    }\n+}"}, {"sha": "68a1b8c15ed1811407d7707f8f2b493654ad160e", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc12b70ef2ff960820c183f4911c9d426e34eac3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dc12b70ef2ff960820c183f4911c9d426e34eac3", "patch": "@@ -2191,8 +2191,8 @@ backend_init_target (void)\n \n   /* We may need to recompute regno_save_code[] and regno_restore_code[]\n      after a mode change as well.  */\n-  if (flag_caller_saves)\n-    init_caller_save ();\n+  caller_save_initialized_p = false;\n+\n   expand_dummy_function_end ();\n }\n "}]}