{"sha": "69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmNTFhMjExYTA5NGEzYWM0ZWJiZGM1YzUwNGUwYzJkMGEzMTg4YQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-07-01T21:11:20Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-07-01T21:11:20Z"}, "message": "rs6000.md (movdf_hardfloat32): Handle PRE_INC and PRE_DEC the same as offsettable in cases 1 and 2.\n\n        * rs6000.md (movdf_hardfloat32): Handle PRE_INC and PRE_DEC the\n        same as offsettable in cases 1 and 2.\n\nFrom-SVN: r27898", "tree": {"sha": "88b446947956cd4463aa56b75e63de351918a885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88b446947956cd4463aa56b75e63de351918a885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a/comments", "author": null, "committer": null, "parents": [{"sha": "786d6092335c35f24756c3375b263d3acebc6f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786d6092335c35f24756c3375b263d3acebc6f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786d6092335c35f24756c3375b263d3acebc6f02"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "b232703b75e6462dbb2c42f4fb611cd694e3351b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "patch": "@@ -1,3 +1,8 @@\n+Fri Jul  2 00:04:23 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (movdf_hardfloat32): Handle PRE_INC and PRE_DEC the\n+\tsame as offsettable in cases 1 and 2.\n+\n Thu Jul  1 20:54:10 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (extqh): Define as 64-((R&7)*8) instead of 56-(((R-1)&7)*8)."}, {"sha": "10f2c0847911a18ebb269e541c608d6cd8720e4c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=69f51a211a094a3ac4ebbdc5c504e0c2d0a3188a", "patch": "@@ -6329,7 +6329,9 @@\n     case 1:\n       if (offsettable_memref_p (operands[1])\n \t  || (GET_CODE (operands[1]) == MEM\n-\t      && GET_CODE (XEXP (operands[1], 0)) == LO_SUM))\n+\t      && (GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n+\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n+\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)))\n \t{\n \t  /* If the low-address word is used in the address, we must load\n \t     it last.  Otherwise, load it first.  Note that we cannot have\n@@ -6345,10 +6347,6 @@\n \t{\n \t  rtx addreg;\n \n-\t  if (GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n-\t    abort ();\n-\n \t  addreg = find_addr_reg (XEXP (operands[1], 0));\n \t  if (refers_to_regno_p (REGNO (operands[0]),\n \t\t\t\t REGNO (operands[0]) + 1,\n@@ -6371,16 +6369,14 @@\n     case 2:\n       if (offsettable_memref_p (operands[0])\n \t  || (GET_CODE (operands[0]) == MEM\n-\t      && GET_CODE (XEXP (operands[0], 0)) == LO_SUM))\n+\t      && (GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n+\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n+\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)))\n \treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n       else\n \t{\n \t  rtx addreg;\n \n-\t  if (GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n-\t    abort ();\n-\n \t  addreg = find_addr_reg (XEXP (operands[0], 0));\n \t  output_asm_insn (\\\"{stx|stwx} %1,%0\\\", operands);\n \t  output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);"}]}