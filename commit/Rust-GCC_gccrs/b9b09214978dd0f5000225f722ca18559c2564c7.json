{"sha": "b9b09214978dd0f5000225f722ca18559c2564c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliMDkyMTQ5NzhkZDBmNTAwMDIyNWY3MjJjYTE4NTU5YzI1NjRjNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-12T12:18:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-12T12:18:06Z"}, "message": "re PR libstdc++/52942 (using std::ref with a std::unordered_map fails to compile)\n\n2012-04-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/52942\n\t* include/bits/stl_function.h (_Identity, _Select1st, _Select2nd):\n\tIn C++11 mode do not derive from std::unary_function.\n\t* include/ext/functional (identity, select1st, select2nd): Adjust.\n\t* testsuite/23_containers/unordered_map/requirements/52942.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/52942.cc: Likewise.\n\nFrom-SVN: r186375", "tree": {"sha": "481d2abf3380f5c27a7cc9197b9f4117bd8a5b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/481d2abf3380f5c27a7cc9197b9f4117bd8a5b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b09214978dd0f5000225f722ca18559c2564c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b09214978dd0f5000225f722ca18559c2564c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b09214978dd0f5000225f722ca18559c2564c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b09214978dd0f5000225f722ca18559c2564c7/comments", "author": null, "committer": null, "parents": [{"sha": "5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2"}], "stats": {"total": 131, "additions": 121, "deletions": 10}, "files": [{"sha": "b8cea521cfa7f67f89628400ac1dfc7d80ba379b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b9b09214978dd0f5000225f722ca18559c2564c7", "patch": "@@ -1,3 +1,12 @@\n+2012-04-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/52942\n+\t* include/bits/stl_function.h (_Identity, _Select1st, _Select2nd):\n+\tIn C++11 mode do not derive from std::unary_function.\n+\t* include/ext/functional (identity, select1st, select2nd): Adjust.\n+\t* testsuite/23_containers/unordered_map/requirements/52942.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/52942.cc: Likewise.\n+\n 2012-04-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/52924"}, {"sha": "33d5e709628efe557e0c1b2ebff081e70423e8cb", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=b9b09214978dd0f5000225f722ca18559c2564c7", "patch": "@@ -1,6 +1,7 @@\n // Functor implementations -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010,\n+// 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -471,7 +472,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /** @}  */\n \n   template<typename _Tp>\n-    struct _Identity : public unary_function<_Tp,_Tp>\n+    struct _Identity\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+    // unary_function itself is deprecated in C++11 and deriving from\n+    // it can even be a nuisance (see PR 52942).\n+    : public unary_function<_Tp,_Tp>\n+#endif\n     {\n       _Tp&\n       operator()(_Tp& __x) const\n@@ -483,8 +489,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Pair>\n-    struct _Select1st : public unary_function<_Pair,\n-\t\t\t\t\t      typename _Pair::first_type>\n+    struct _Select1st\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+    : public unary_function<_Pair, typename _Pair::first_type>\n+#endif\n     {\n       typename _Pair::first_type&\n       operator()(_Pair& __x) const\n@@ -508,8 +516,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Pair>\n-    struct _Select2nd : public unary_function<_Pair,\n-\t\t\t\t\t      typename _Pair::second_type>\n+    struct _Select2nd\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+    : public unary_function<_Pair, typename _Pair::second_type>\n+#endif\n     {\n       typename _Pair::second_type&\n       operator()(_Pair& __x) const"}, {"sha": "f8402c16dc60764ff5adc7b9e6578154d451b3d1", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=b9b09214978dd0f5000225f722ca18559c2564c7", "patch": "@@ -1,6 +1,6 @@\n // Functional extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -183,7 +183,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @addtogroup SGIextensions\n    */\n   template <class _Tp>\n-    struct identity : public std::_Identity<_Tp> {};\n+    struct identity\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    : public std::unary_function<_Tp,_Tp>,\n+      public std::_Identity<_Tp> {};\n+#else\n+    : public std::_Identity<_Tp> {};\n+#endif\n \n   /** @c select1st and @c select2nd are extensions provided by SGI.  Their\n    *  @c operator()s\n@@ -197,11 +203,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Pair>\n-    struct select1st : public std::_Select1st<_Pair> {};\n+    struct select1st\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    : public std::unary_function<_Pair, typename _Pair::first_type>,\n+      public std::_Select1st<_Pair> {};\n+#else\n+    : public std::_Select1st<_Pair> {};\n+#endif\n \n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Pair>\n-    struct select2nd : public std::_Select2nd<_Pair> {};\n+    struct select2nd\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    : public std::unary_function<_Pair, typename _Pair::second_type>,\n+      public std::_Select2nd<_Pair> {};\n+#else\n+    : public std::_Select2nd<_Pair> {};\n+#endif\n   /** @}  */\n \n   // extension documented next"}, {"sha": "bf05fab0d2800bfd6c0e27daec0cdfd923fe319d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/52942.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F52942.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F52942.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F52942.cc?ref=b9b09214978dd0f5000225f722ca18559c2564c7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <functional>\n+\n+struct TFoo {};\n+\n+struct TFoo_hash\n+{\n+  std::size_t operator()(const TFoo &) const { return 0; }\n+};\n+\n+void f1(std::unordered_map<TFoo, int, TFoo_hash> &) {}\n+\n+void f2()\n+{\n+  std::unordered_map<TFoo, int, TFoo_hash> map1;\n+  std::bind(f1, std::ref(map1));\n+}"}, {"sha": "067e57a5e267a6ab426a05d6ede6fbf3d2153ceb", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/52942.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F52942.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b09214978dd0f5000225f722ca18559c2564c7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F52942.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F52942.cc?ref=b9b09214978dd0f5000225f722ca18559c2564c7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <functional>\n+\n+struct TFoo {};\n+\n+struct TFoo_hash\n+{\n+  std::size_t operator()(const TFoo &) const { return 0; }\n+};\n+\n+void f1(std::unordered_set<TFoo, TFoo_hash> &) {}\n+\n+void f2()\n+{\n+  std::unordered_set<TFoo, TFoo_hash> set1;\n+  std::bind(f1, std::ref(set1));\n+}"}]}