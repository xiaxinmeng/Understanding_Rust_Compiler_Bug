{"sha": "421173e6d334fe5b5d1701b8e730b19b5e132ad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxMTczZTZkMzM0ZmU1YjVkMTcwMWI4ZTczMGIxOWI1ZTEzMmFkNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@sourceware.cygnus.com", "date": "2000-07-26T21:30:45Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-07-26T21:30:45Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Test for GNU ld before trying to use any of its options.\n\n2000-07-26  Phil Edwards  <pme@sourceware.cygnus.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES):  Test for GNU ld\n\t  before trying to use any of its options.\n\t  (CHECK_MATH_DECL*,CHECK_BUILTIN_MATH_DECL*):  Cache tests.\n\t* aclocal.m4:  Regenerate.\n\t* configure.in:  Having found GNU make, name it.\n\t* configure:  Regenerate.\n\t* docs/install.html:  Mention possible problems with caching.\n\t* src/Makefile.am (CXXLINK):  Use new OPT_LDFLAGS.\n\t* src/Makefile.in:  Regenerate.\n\t* libio/Makefile.in:  Regenerate.\n\t* math/Makefile.in:  Regenerate.\n\t* Makefile.in:  Regenerate.\n\nFrom-SVN: r35269", "tree": {"sha": "5aad3931b03d6431708008c2808a0268916c7a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aad3931b03d6431708008c2808a0268916c7a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421173e6d334fe5b5d1701b8e730b19b5e132ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421173e6d334fe5b5d1701b8e730b19b5e132ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421173e6d334fe5b5d1701b8e730b19b5e132ad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421173e6d334fe5b5d1701b8e730b19b5e132ad5/comments", "author": null, "committer": null, "parents": [{"sha": "79d1334242dca47a8ecc4c1e70e25a636f6dfca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d1334242dca47a8ecc4c1e70e25a636f6dfca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d1334242dca47a8ecc4c1e70e25a636f6dfca3"}], "stats": {"total": 5502, "additions": 3318, "deletions": 2184}, "files": [{"sha": "0659130cd286c413ea61d9b642d9a16a34a028b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -1,3 +1,18 @@\n+2000-07-26  Phil Edwards  <pme@sourceware.cygnus.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES):  Test for GNU ld\n+\t  before trying to use any of its options.\n+\t  (CHECK_MATH_DECL*,CHECK_BUILTIN_MATH_DECL*):  Cache tests.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure.in:  Having found GNU make, name it.\n+\t* configure:  Regenerate.\n+\t* docs/install.html:  Mention possible problems with caching.\n+\t* src/Makefile.am (CXXLINK):  Use new OPT_LDFLAGS.\n+\t* src/Makefile.in:  Regenerate.\n+\t* libio/Makefile.in:  Regenerate.\n+\t* math/Makefile.in:  Regenerate.\n+\t* Makefile.in:  Regenerate.\n+\n 2000-07-26  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* src/misc-inst.cc (std): Remove instantiations."}, {"sha": "22e1f721f950a972bb38922367e97689c1a30862", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -85,6 +85,7 @@ LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@"}, {"sha": "5e80ba769c01e392ea260a082e090e3fc52a73f8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 92, "deletions": 65, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -253,39 +253,56 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n \n dnl\n-dnl Check to see if tricky linker opts can be used.\n+dnl If GNU ld is in use, check to see if tricky linker opts can be used.  If\n+dnl the native linker is in use, all variables will be defined to something\n+dnl safe (like an empty string).\n+dnl\n+dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible.\n+dnl Define OPT_LDFLAGS='-Wl,-O1' if possible.\n dnl\n-dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible\n dnl GLIBCPP_CHECK_LINKER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n-  # All these tests are for C++; save the language and the compiler flags.\n-  # Need to do this so that g++ won't try to link in libstdc++\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS='-x c++  -Wl,--gc-sections'\n-\n-  # Check for -Wl,--gc-sections\n-  AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n-  AC_TRY_RUN([\n-   int main(void) \n-   {\n-     try { throw 1; }\n-     catch (...) { };\n-     return 0;\n-   }\n-  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  else\n-    # this is the suspicious part\n-    CFLAGS=''\n-  fi\n-  if test \"$ac_sectionLDflags\" = \"yes\"; then\n-    SECTION_LDFLAGS='-Wl,--gc-sections'\n-  fi\n-  AC_MSG_RESULT($ac_sectionLDflags)\n+  # If we're not using GNU ld, then there's no point in even trying these\n+  # tests.  Check for that first.  We should have already tested for gld\n+  # by now (in libtool), but require it now just to be safe...\n+  AC_REQUIRE([AC_PROG_LD])\n+  if test \"$ac_cv_prog_gnu_ld\" = \"no\"; then\n+    SECTION_LDFLAGS=''\n+    OPT_LDFLAGS=''\n+\n+  else   # GNU ld it is!  Joy and bunny rabbits!\n+\n+    # All these tests are for C++; save the language and the compiler flags.\n+    # Need to do this so that g++ won't try to link in libstdc++\n+    ac_test_CFLAGS=\"${CFLAGS+set}\"\n+    ac_save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS='-x c++  -Wl,--gc-sections'\n+\n+    # Check for -Wl,--gc-sections\n+    AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n+    AC_TRY_RUN([\n+     int main(void) \n+     {\n+       try { throw 1; }\n+       catch (...) { };\n+       return 0;\n+     }\n+    ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n+    if test \"$ac_test_CFLAGS\" = set; then\n+      CFLAGS=\"$ac_save_CFLAGS\"\n+    else\n+      # this is the suspicious part\n+      CFLAGS=''\n+    fi\n+    if test \"$ac_sectionLDflags\" = \"yes\"; then\n+      SECTION_LDFLAGS='-Wl,--gc-sections'\n+    fi\n+    AC_MSG_RESULT($ac_sectionLDflags)\n+    OPT_LDFLAGS='-Wl,-O1'\n \n+  fi\n   AC_SUBST(SECTION_LDFLAGS)\n+  AC_SUBST(OPT_LDFLAGS)\n ])\n \n \n@@ -302,15 +319,17 @@ dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -329,15 +348,17 @@ dnl ASSUMES argument is a math function with TWO parameters\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0, 0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0, 0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -356,15 +377,17 @@ dnl ASSUMES argument is a math function with THREE parameters\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0, 0, 0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0, 0, 0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -385,21 +408,25 @@ dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n       AC_TRY_LINK([#include <math.h>], \n-      [ $1(0);],\n-      [link_$1=yes], [link_$1=no])\n-    AC_MSG_RESULT($link_$1)\n-    if test x$link_$1 = x\"yes\"; then\n+                  [ $1(0);], \n+                  [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+    ])\n+    AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n+    if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n       AC_DEFINE_UNQUOTED(${ac_tr_func})\n     fi\n@@ -1521,7 +1548,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: acinclude.m4,v 1.47 2000/07/26 06:51:37 bkoz Exp $\n+dnl @version 1.1 #### replaced Id string now that Id is for lib-v3; pme\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "fdddfda80404eb97faf9e1d6e375215991b559e9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 92, "deletions": 65, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -265,39 +265,56 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n \n \n dnl\n-dnl Check to see if tricky linker opts can be used.\n+dnl If GNU ld is in use, check to see if tricky linker opts can be used.  If\n+dnl the native linker is in use, all variables will be defined to something\n+dnl safe (like an empty string).\n+dnl\n+dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible.\n+dnl Define OPT_LDFLAGS='-Wl,-O1' if possible.\n dnl\n-dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible\n dnl GLIBCPP_CHECK_LINKER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n-  # All these tests are for C++; save the language and the compiler flags.\n-  # Need to do this so that g++ won't try to link in libstdc++\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS='-x c++  -Wl,--gc-sections'\n-\n-  # Check for -Wl,--gc-sections\n-  AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n-  AC_TRY_RUN([\n-   int main(void) \n-   {\n-     try { throw 1; }\n-     catch (...) { };\n-     return 0;\n-   }\n-  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  else\n-    # this is the suspicious part\n-    CFLAGS=''\n-  fi\n-  if test \"$ac_sectionLDflags\" = \"yes\"; then\n-    SECTION_LDFLAGS='-Wl,--gc-sections'\n-  fi\n-  AC_MSG_RESULT($ac_sectionLDflags)\n+  # If we're not using GNU ld, then there's no point in even trying these\n+  # tests.  Check for that first.  We should have already tested for gld\n+  # by now (in libtool), but require it now just to be safe...\n+  AC_REQUIRE([AC_PROG_LD])\n+  if test \"$ac_cv_prog_gnu_ld\" = \"no\"; then\n+    SECTION_LDFLAGS=''\n+    OPT_LDFLAGS=''\n+\n+  else   # GNU ld it is!  Joy and bunny rabbits!\n+\n+    # All these tests are for C++; save the language and the compiler flags.\n+    # Need to do this so that g++ won't try to link in libstdc++\n+    ac_test_CFLAGS=\"${CFLAGS+set}\"\n+    ac_save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS='-x c++  -Wl,--gc-sections'\n+\n+    # Check for -Wl,--gc-sections\n+    AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n+    AC_TRY_RUN([\n+     int main(void) \n+     {\n+       try { throw 1; }\n+       catch (...) { };\n+       return 0;\n+     }\n+    ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n+    if test \"$ac_test_CFLAGS\" = set; then\n+      CFLAGS=\"$ac_save_CFLAGS\"\n+    else\n+      # this is the suspicious part\n+      CFLAGS=''\n+    fi\n+    if test \"$ac_sectionLDflags\" = \"yes\"; then\n+      SECTION_LDFLAGS='-Wl,--gc-sections'\n+    fi\n+    AC_MSG_RESULT($ac_sectionLDflags)\n+    OPT_LDFLAGS='-Wl,-O1'\n \n+  fi\n   AC_SUBST(SECTION_LDFLAGS)\n+  AC_SUBST(OPT_LDFLAGS)\n ])\n \n \n@@ -314,15 +331,17 @@ dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -341,15 +360,17 @@ dnl ASSUMES argument is a math function with TWO parameters\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0, 0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0, 0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -368,15 +389,17 @@ dnl ASSUMES argument is a math function with THREE parameters\n dnl\n dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0, 0, 0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0, 0, 0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_CHECK_FUNCS($1)    \n   fi\n ])\n@@ -397,21 +420,25 @@ dnl ASSUMES argument is a math function with ONE parameter\n dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_DECL_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n   AC_MSG_CHECKING([for $1 declaration])\n-  AC_TRY_COMPILE([#include <math.h>], \n-  [ $1(0);], \n-  [use_$1=yes], [use_$1=no])\n-  AC_MSG_RESULT($use_$1)\n-  AC_LANG_RESTORE\n-  if test x$use_$1 = x\"yes\"; then\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <math.h>], \n+                   [ $1(0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n     AC_MSG_CHECKING([for $1 linkage])\n+    AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n       AC_TRY_LINK([#include <math.h>], \n-      [ $1(0);],\n-      [link_$1=yes], [link_$1=no])\n-    AC_MSG_RESULT($link_$1)\n-    if test x$link_$1 = x\"yes\"; then\n+                  [ $1(0);], \n+                  [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n+    ])\n+    AC_MSG_RESULT($glibcpp_cv_func_$1_link)\n+    if test x$glibcpp_cv_func_$1_link = x\"yes\"; then\n       ac_tr_func=HAVE_`echo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n       AC_DEFINE_UNQUOTED(${ac_tr_func})\n     fi\n@@ -1533,7 +1560,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: acinclude.m4,v 1.47 2000/07/26 06:51:37 bkoz Exp $\n+dnl @version 1.1 #### replaced Id string now that Id is for lib-v3; pme\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "cd73eec7f22349a5dfa7c18e265be46dea61a298", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3099, "deletions": 2049, "changes": 5148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5"}, {"sha": "d38f266bbbe228a7147c7ddd07ac9d358aab1e85", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -200,7 +200,7 @@ if test ! -f stamp-sanity-warned; then\n   echo \"  faster => ${srcdir}/docs/configopts.html\"\n   echo \"  slower => <URL:http://sources.redhat.com/libstdc++/configopts.html>\"\n   echo \"\"\n-  echo \"before proceeding with make.\"\n+  echo \"before proceeding with ${_cv_gnu_make_command}.\"\n   echo \"\"\n fi\n "}, {"sha": "e39586103b8098c5a1764b8ce99598e327593dd7", "filename": "libstdc++-v3/docs/install.html", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fdocs%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fdocs%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Finstall.html?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 Installation Instructions</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: install.html,v 1.4 2000/06/27 15:56:17 pme Exp $ -->\n+<!-- $Id: install.html,v 1.5 2000/07/11 21:45:07 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -268,6 +268,15 @@ <H3>[re]building only libstdc++</H3>\n       message when compiling stringMAIN.cc, see <A HREF=\"#Werror\">the\n       resolution at the end of this document</A>.\n    </P>\n+   <P>If you are rebuilding from a previous build [attempt], some\n+      information is kept in a cache file.  This is stored in\n+      <EM>gccbuilddir/cpu-vendor-OS/</EM> if you are building with\n+      multilibs (the default), or in\n+      <EM>gccbuilddir/cpu-vendor-OS/</EM>libstdc++-v3 if you have\n+      multilibs disabled.  The filename is config.cache; if previous\n+      information is causing problems, you can delete it entirely, or\n+      simply edit it and remove lines.\n+   </P>\n    <P>You're done.  Now install the rebuilt pieces with\n       <PRE>\n    make install</PRE>\n@@ -383,7 +392,7 @@ <H2><A NAME=\"\"></A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@egcs.cygnus.com\">Gabriel Dos Reis</A>.\n-<BR> $Id: install.html,v 1.4 2000/06/27 15:56:17 pme Exp $\n+<BR> $Id: install.html,v 1.5 2000/07/11 21:45:07 pme Exp $\n </EM></P>\n \n "}, {"sha": "20f69d5bdac56053f3bd18e797fa06d57bbef324", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -85,6 +85,7 @@ LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@"}, {"sha": "3498fb3a3d23be3677ed0392e6a13b2f11f105de", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -85,6 +85,7 @@ LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@"}, {"sha": "067cfec7969d1192e4686626a4606b1683fb9928", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -21,6 +21,8 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n+## $Id$\n+\n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n@@ -98,7 +100,7 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \\\n # rules automake generates would be used.  We cannot allow CXX to be used\n # in libtool since this would add -lstdc++ to the link line which of\n # course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" -Wl,-O1 @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n headers = \\"}, {"sha": "361409218ea966118667ce8bb000d5bc0a035f89", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421173e6d334fe5b5d1701b8e730b19b5e132ad5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=421173e6d334fe5b5d1701b8e730b19b5e132ad5", "patch": "@@ -84,6 +84,7 @@ LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -169,7 +170,7 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \\\n # rules automake generates would be used.  We cannot allow CXX to be used\n # in libtool since this would add -lstdc++ to the link line which of\n # course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" -Wl,-O1 @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n headers = \\\n \tbits/cpp_type_traits.h \\"}]}