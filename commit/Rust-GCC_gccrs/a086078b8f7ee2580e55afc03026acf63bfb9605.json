{"sha": "a086078b8f7ee2580e55afc03026acf63bfb9605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA4NjA3OGI4ZjdlZTI1ODBlNTVhZmMwMzAyNmFjZjYzYmZiOTYwNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-30T13:52:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-30T13:52:55Z"}, "message": "re PR fortran/87359 (pointer being freed was not allocated)\n\n2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87359\n\t* trans-array.c (gfc_is_reallocatable_lhs): Correct the problem\n\tintroduced by r264358, which prevented components of associate\n\tnames from being reallocated on assignment.\n\n\n2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87359\n\t* gfortran.dg/associate_40.f90 : New test.\n\nFrom-SVN: r264725", "tree": {"sha": "16e4ee88506a0816352bbb6f207faa23c1c50f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e4ee88506a0816352bbb6f207faa23c1c50f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a086078b8f7ee2580e55afc03026acf63bfb9605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a086078b8f7ee2580e55afc03026acf63bfb9605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a086078b8f7ee2580e55afc03026acf63bfb9605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a086078b8f7ee2580e55afc03026acf63bfb9605/comments", "author": null, "committer": null, "parents": [{"sha": "ba08c70a0c73b9fef5b78e2e5706845aa85c4df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba08c70a0c73b9fef5b78e2e5706845aa85c4df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba08c70a0c73b9fef5b78e2e5706845aa85c4df7"}], "stats": {"total": 118, "additions": 114, "deletions": 4}, "files": [{"sha": "399d6f9cc3f7e718bb7a4be7cac10e9bd4b17bbe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a086078b8f7ee2580e55afc03026acf63bfb9605", "patch": "@@ -1,3 +1,10 @@\n+2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87359\n+\t* trans-array.c (gfc_is_reallocatable_lhs): Correct the problem\n+\tintroduced by r264358, which prevented components of associate\n+\tnames from being reallocated on assignment.\n+\n 2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/70752"}, {"sha": "1e8f777211d38ce253c29d8c1d94ea491d76f737", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a086078b8f7ee2580e55afc03026acf63bfb9605", "patch": "@@ -9574,11 +9574,12 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n \n   sym = expr->symtree->n.sym;\n \n-  if (sym->attr.associate_var)\n+  if (sym->attr.associate_var && !expr->ref)\n     return false;\n \n   /* An allocatable class variable with no reference.  */\n   if (sym->ts.type == BT_CLASS\n+      && !sym->attr.associate_var\n       && CLASS_DATA (sym)->attr.allocatable\n       && expr->ref && expr->ref->type == REF_COMPONENT\n       && strcmp (expr->ref->u.c.component->name, \"_data\") == 0\n@@ -9587,9 +9588,10 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n \n   /* An allocatable variable.  */\n   if (sym->attr.allocatable\n-\t&& expr->ref\n-\t&& expr->ref->type == REF_ARRAY\n-\t&& expr->ref->u.ar.type == AR_FULL)\n+      && !sym->attr.associate_var\n+      && expr->ref\n+      && expr->ref->type == REF_ARRAY\n+      && expr->ref->u.ar.type == AR_FULL)\n     return true;\n \n   /* All that can be left are allocatable components.  */"}, {"sha": "4dc292aded6be41052c827f36fc16c6642871910", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a086078b8f7ee2580e55afc03026acf63bfb9605", "patch": "@@ -1,3 +1,8 @@\n+2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87359\n+\t* gfortran.dg/associate_40.f90 : New test.\n+\n 2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/70752"}, {"sha": "8ca5ef5422e1fda30adcaf3d97b68f6a7d6d92da", "filename": "gcc/testsuite/gfortran.dg/associate_40.f90", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_40.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a086078b8f7ee2580e55afc03026acf63bfb9605/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_40.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_40.f90?ref=a086078b8f7ee2580e55afc03026acf63bfb9605", "patch": "@@ -0,0 +1,96 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for the second part of PR87359 in which the reallocation on\n+! assignment for components of associate names was disallowed by r264358.\n+! -fcheck-all exposed the mismatch in array shapes. The deallocations at\n+! the end of the main program are there to make sure that valgrind does\n+! not report an memory leaks.\n+!\n+! Contributed by Juergen Reuter  <juergen.reuter@desy.de>\n+!\n+module phs_fks\n+  implicit none\n+  private\n+  public :: phs_identifier_t\n+  public :: phs_fks_t\n+  type :: phs_identifier_t\n+     integer, dimension(:), allocatable :: contributors\n+  contains\n+    procedure :: init => phs_identifier_init\n+  end type phs_identifier_t\n+\n+  type :: phs_fks_t\n+     type(phs_identifier_t), dimension(:), allocatable :: phs_identifiers\n+  end type phs_fks_t\n+contains\n+\n+  subroutine phs_identifier_init &\n+     (phs_id, contributors)\n+     class(phs_identifier_t), intent(out) :: phs_id\n+     integer, intent(in), dimension(:) :: contributors\n+     allocate (phs_id%contributors (size (contributors)))\n+     phs_id%contributors = contributors\n+   end subroutine phs_identifier_init\n+\n+end module phs_fks\n+\n+!!!!!\n+\n+module instances\n+  use phs_fks\n+  implicit none\n+  private\n+  public :: process_instance_t\n+\n+  type :: nlo_event_deps_t\n+     type(phs_identifier_t), dimension(:), allocatable :: phs_identifiers\n+  end type nlo_event_deps_t\n+\n+  type :: process_instance_t\n+     type(phs_fks_t), pointer :: phs => null ()\n+     type(nlo_event_deps_t) :: event_deps\n+   contains\n+     procedure :: init => process_instance_init\n+     procedure :: setup_real_event_kinematics => pi_setup_real_event_kinematics\n+  end type process_instance_t\n+\n+contains\n+\n+  subroutine process_instance_init (instance)\n+    class(process_instance_t), intent(out), target :: instance\n+    integer :: i\n+    integer :: i_born, i_real\n+    allocate (instance%phs)\n+  end subroutine process_instance_init\n+\n+  subroutine pi_setup_real_event_kinematics (process_instance)\n+    class(process_instance_t), intent(inout) :: process_instance\n+    integer :: i_real, i\n+    associate (event_deps => process_instance%event_deps)\n+       i_real = 2\n+       associate (phs => process_instance%phs)\n+          allocate (phs%phs_identifiers (3))\n+          call phs%phs_identifiers(1)%init ([1])\n+          call phs%phs_identifiers(2)%init ([1,2])\n+          call phs%phs_identifiers(3)%init ([1,2,3])\n+          process_instance%event_deps%phs_identifiers = phs%phs_identifiers  ! Error: mismatch in array shapes.\n+       end associate\n+    end associate\n+  end subroutine pi_setup_real_event_kinematics\n+\n+end module instances\n+\n+!!!!!\n+\n+program main\n+  use instances, only: process_instance_t\n+  implicit none\n+  type(process_instance_t), allocatable, target :: process_instance\n+  allocate (process_instance)\n+  call process_instance%init ()\n+  call process_instance%setup_real_event_kinematics ()\n+  if (associated (process_instance%phs)) deallocate (process_instance%phs)\n+  if (allocated (process_instance)) deallocate (process_instance)\n+end program main\n+! { dg-final { scan-tree-dump-times \"__builtin_realloc\" 2 \"original\" } }"}]}