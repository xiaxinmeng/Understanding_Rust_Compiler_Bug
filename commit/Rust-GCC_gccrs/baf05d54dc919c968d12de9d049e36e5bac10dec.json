{"sha": "baf05d54dc919c968d12de9d049e36e5bac10dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmMDVkNTRkYzkxOWM5NjhkMTJkZTlkMDQ5ZTM2ZTViYWMxMGRlYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-16T13:24:46Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-16T13:24:46Z"}, "message": "c++: partially initialized constexpr array [PR99700]\n\nHere, reduced_constant_expression_p is incorrectly returning true for a\npartially initialized array CONSTRUCTOR (in C++20 mode) because when the\nCONSTRUCTOR_NO_CLEARING flag is set, the predicate doesn't check that\nthe CONSTRUCTOR spans the entire array like it does for class CONSTRUCTORS.\nThis patch adds a dedicated loop for the array case that simultaneously\nverifies the CONSTRUCTOR spans the entire array and is made up of valid\nconstant expressions.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99700\n\t* constexpr.c (reduced_constant_expression_p): For array\n\tCONSTRUCTORs, use a dedicated loop that additionally verifies\n\tthe CONSTRUCTOR spans the entire array.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99700\n\t* g++.dg/cpp2a/constexpr-init21.C: New test.", "tree": {"sha": "27466678b6db6aec3db06272c99efde1b6a2b651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27466678b6db6aec3db06272c99efde1b6a2b651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baf05d54dc919c968d12de9d049e36e5bac10dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf05d54dc919c968d12de9d049e36e5bac10dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf05d54dc919c968d12de9d049e36e5bac10dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf05d54dc919c968d12de9d049e36e5bac10dec/comments", "author": null, "committer": null, "parents": [{"sha": "47f42744f6e10ad41db926d739306e6f237fd3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f42744f6e10ad41db926d739306e6f237fd3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f42744f6e10ad41db926d739306e6f237fd3ac"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "b74bbac3cd26b80393b3aa877edad1515f4d864f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf05d54dc919c968d12de9d049e36e5bac10dec/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf05d54dc919c968d12de9d049e36e5bac10dec/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=baf05d54dc919c968d12de9d049e36e5bac10dec", "patch": "@@ -46,6 +46,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n static HOST_WIDE_INT find_array_ctor_elt (tree ary, tree dindex,\n \t\t\t\t\t  bool insert = false);\n+static int array_index_cmp (tree key, tree index);\n \n /* Returns true iff FUN is an instantiation of a constexpr function\n    template or a defaulted constexpr function.  */\n@@ -2910,9 +2911,27 @@ reduced_constant_expression_p (tree t)\n \t    /* An initialized vector would have a VECTOR_CST.  */\n \t    return false;\n \t  else if (cxx_dialect >= cxx20\n-\t\t   /* An ARRAY_TYPE doesn't have any TYPE_FIELDS.  */\n \t\t   && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n-\t    field = NULL_TREE;\n+\t    {\n+\t      /* There must be a valid constant initializer at every array\n+\t\t index.  */\n+\t      tree min = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (t)));\n+\t      tree max = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (t)));\n+\t      tree cursor = min;\n+\t      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, idx, val)\n+\t\t{\n+\t\t  if (!reduced_constant_expression_p (val))\n+\t\t    return false;\n+\t\t  if (array_index_cmp (cursor, idx) != 0)\n+\t\t    return false;\n+\t\t  if (TREE_CODE (idx) == RANGE_EXPR)\n+\t\t    cursor = TREE_OPERAND (idx, 1);\n+\t\t  cursor = int_const_binop (PLUS_EXPR, cursor, size_one_node);\n+\t\t}\n+\t      if (find_array_ctor_elt (t, max) == -1)\n+\t\treturn false;\n+\t      goto ok;\n+\t    }\n \t  else if (cxx_dialect >= cxx20\n \t\t   && TREE_CODE (TREE_TYPE (t)) == UNION_TYPE)\n \t    {\n@@ -2946,6 +2965,7 @@ reduced_constant_expression_p (tree t)\n       for (; field; field = next_initializable_field (DECL_CHAIN (field)))\n \tif (!is_really_empty_class (TREE_TYPE (field), /*ignore_vptr*/false))\n \t  return false;\n+ok:\n       if (CONSTRUCTOR_NO_CLEARING (t))\n \t/* All the fields are initialized.  */\n \tCONSTRUCTOR_NO_CLEARING (t) = false;"}, {"sha": "f5e1b3e76da4dae1392ac88288246faf7b469dc4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init21.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf05d54dc919c968d12de9d049e36e5bac10dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf05d54dc919c968d12de9d049e36e5bac10dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init21.C?ref=baf05d54dc919c968d12de9d049e36e5bac10dec", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/99700\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct A {\n+  T c[5];\n+  constexpr A(int skip = -1) {\n+    for (int i = 0; i < 5; i++)\n+      if (i != skip)\n+        c[i] = {};\n+  }\n+};\n+\n+constexpr A<int> a;\n+constexpr A<int> a0(0); // { dg-error \"not a constant expression|incompletely initialized\" }\n+constexpr A<int> a1(1); // { dg-error \"not a constant expression|incompletely initialized\" }\n+constexpr A<int> a2(2); // { dg-error \"not a constant expression|incompletely initialized\" }\n+constexpr A<int> a3(3); // { dg-error \"not a constant expression|incompletely initialized\" }\n+constexpr A<int> a4(4); // { dg-error \"not a constant expression|incompletely initialized\" }\n+\n+struct s { int n; };\n+constexpr A<s> b;\n+constexpr A<s> b0(0); // {  dg-error \"not a constant expression|incompletely initialized\" }\n+\n+struct empty {};\n+constexpr A<empty> c;\n+constexpr A<empty> c0(0);"}]}