{"sha": "2f7f96b166e840c8b40666e07a027afe4768cef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3Zjk2YjE2NmU4NDBjOGI0MDY2NmUwN2EwMjdhZmU0NzY4Y2VmNA==", "commit": {"author": {"name": "Joel Brobecker", "email": "brobecker@adacore.com", "date": "2019-12-30T22:26:29Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-12-30T22:26:29Z"}, "message": "Guard aarch64/aapcs64 tests using abitest.S by check_weak_available\n\n2019-12-16  Joel Brobecker  <brobecker@adacore.com>\n           Olivier Hainque  <hainque@adacore.com>\n\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Guard tests using\n\tabitest.S by check_weak_available.\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r279793", "tree": {"sha": "1b38568fc1c1728f76d218f0909750e3184c5b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b38568fc1c1728f76d218f0909750e3184c5b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7f96b166e840c8b40666e07a027afe4768cef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f96b166e840c8b40666e07a027afe4768cef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7f96b166e840c8b40666e07a027afe4768cef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f96b166e840c8b40666e07a027afe4768cef4/comments", "author": {"login": "brobecke", "id": 11981700, "node_id": "MDQ6VXNlcjExOTgxNzAw", "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brobecke", "html_url": "https://github.com/brobecke", "followers_url": "https://api.github.com/users/brobecke/followers", "following_url": "https://api.github.com/users/brobecke/following{/other_user}", "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}", "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions", "organizations_url": "https://api.github.com/users/brobecke/orgs", "repos_url": "https://api.github.com/users/brobecke/repos", "events_url": "https://api.github.com/users/brobecke/events{/privacy}", "received_events_url": "https://api.github.com/users/brobecke/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c75e82cd60a1479c1c8539296cd2e91ea9063526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75e82cd60a1479c1c8539296cd2e91ea9063526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75e82cd60a1479c1c8539296cd2e91ea9063526"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "dd51f671d8da3498339002dad13ba9abd02e91a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f96b166e840c8b40666e07a027afe4768cef4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f96b166e840c8b40666e07a027afe4768cef4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f7f96b166e840c8b40666e07a027afe4768cef4", "patch": "@@ -1,3 +1,9 @@\n+2019-12-30  Joel Brobecker  <brobecker@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Guard tests using\n+\tabitest.S by check_weak_available.\n+\n 2019-12-30  Peter Bergner <bergner@linux.ibm.com>\n \n        PR target/92923"}, {"sha": "36687800ecdcc927cfec7bec8ce11978bf29f1b9", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f96b166e840c8b40666e07a027afe4768cef4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f96b166e840c8b40666e07a027afe4768cef4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=2f7f96b166e840c8b40666e07a027afe4768cef4", "patch": "@@ -29,12 +29,16 @@ torture-init\n set-torture-options $C_TORTURE_OPTIONS\n set additional_flags \"-W -Wall -Wno-abi\"\n \n-# Test parameter passing.\n-foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n-    if {[runtest_file_p $runtests $src]} {\n+# Test parameter passing.  This uses abitest.S which relies on weak\n+# symbols.\n+\n+if { [check_weak_available] } {\n+    foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n+\tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n \t\t\t\t    $additional_flags\n+\t}\n     }\n }\n \n@@ -48,25 +52,31 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/rec_*.c]] {\n     }\n }\n \n-# Test unnamed argument retrieval via the va_arg macro.\n-foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n-    if {[runtest_file_p $runtests $src]} {\n+# Test unnamed argument retrieval via the va_arg macro.  This uses abitest.S\n+# which relies on weak symbols.\n+if { [check_weak_available] } {\n+    foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n+\tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n \t\t\t\t    $additional_flags\n+\t}\n     }\n }\n \n-# Test function return value.\n-#   Disable -fipa-ra to prevent the compiler from generating\n-#   conflicting code.\n-set additional_flags_for_func_ret $additional_flags\n-append additional_flags_for_func_ret \" -fno-ipa-ra\"\n-foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {\n-    if {[runtest_file_p $runtests $src]} {\n+# Test function return value.  This uses abitest.S which relies on\n+# weak symbols.\n+if { [check_weak_available] } {\n+    #   Disable -fipa-ra to prevent the compiler from generating\n+    #   conflicting code.\n+    set additional_flags_for_func_ret $additional_flags\n+    append additional_flags_for_func_ret \" -fno-ipa-ra\"\n+    foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {\n+\tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n \t\t\t\t    $additional_flags_for_func_ret\n+\t}\n     }\n }\n "}]}