{"sha": "bf49b1396b843c126db4f8e97326f0138ff9a2d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0OWIxMzk2Yjg0M2MxMjZkYjRmOGU5NzMyNmYwMTM4ZmY5YTJkMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-05-04T13:49:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-05-04T13:49:50Z"}, "message": "rtl.h (MEM_COPY_ATTRIBUTES): Also copy RTX_UNCHANGING_P and MEM_ALIAS_SET.\n\n\t* rtl.h (MEM_COPY_ATTRIBUTES): Also copy RTX_UNCHANGING_P and\n\tMEM_ALIAS_SET.\n\t* alias.c (canon_rtx): Don't copy RTX_UNCHANGING_P or MEM_ALIAS_SET\n\twhen calling MEM_COPY_ATTRIBUTES.\n\t* emit-rtl.c (operand_subword, change_address): Likewise.\n\t* explow.c (stabilize): Likewise.\n\t* expr.c (protect_from_queue, emit_move_insn_1): Likewise.\n\t* integrate.c (copy_rtx_and_substitute): Likewise.\n\t* combine.c (combine_simplify_rtx): Don't copy RTX_UNCHANGING_P\n\twhen calling MEM_COPY_ATTRIBUTES.\n\t(make_extraction, simplify_shift_const, gen_lowpart_for_combine):\n\tLikewise.\n\t* cse.c (gen_lowpart_if_possible): Likewise.\n\t* function.c (fixup_var_refs_1, purge_addressof_1): Likewise.\n\t* optabs.c (gen_move_insn): Likewise.\n\t* recog.c (validate_replace_rtx_1): Likewise.\n\t* simplify-rtx.c (add_mem_for_addr): Likewise.\n\t* stmt.c (expand_anon_union_decl): Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/h8300/h7300.c (fix_bit_operand): Likewise.\n\t* config/m88k/m88k.c (legitimize_address, block_move_loop): Likewise.\n\t(block_move_no_loop, block_move_sequence): Likewise.\n\t* config/rs6000/rs6000.c (expand_block_move_mem): Likewise.\n\t* config/alpha/alpha.c (get_aligned_mem): Likewise.\n\tClear MEM_ALIAS_SET.\n\t* final.c (alter_subreg): Don't copy MEM_ALIAS_SET when calling\n\tMEM_COPY_ATTRIBUTES.\n\nFrom-SVN: r33665", "tree": {"sha": "ecad7aa7b8512c49c56eb75cc4f3a6297327ec20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecad7aa7b8512c49c56eb75cc4f3a6297327ec20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf49b1396b843c126db4f8e97326f0138ff9a2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf49b1396b843c126db4f8e97326f0138ff9a2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf49b1396b843c126db4f8e97326f0138ff9a2d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf49b1396b843c126db4f8e97326f0138ff9a2d3/comments", "author": null, "committer": null, "parents": [{"sha": "5b8714bfa9c437674e8881def75401fe069d964d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8714bfa9c437674e8881def75401fe069d964d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8714bfa9c437674e8881def75401fe069d964d"}], "stats": {"total": 104, "additions": 41, "deletions": 63}, "files": [{"sha": "bb92e0de6539c5b3938e4492cd1fa5b938468f59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -1,3 +1,33 @@\n+Thu May  4 09:45:12 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rtl.h (MEM_COPY_ATTRIBUTES): Also copy RTX_UNCHANGING_P and\n+\tMEM_ALIAS_SET.\n+\t* alias.c (canon_rtx): Don't copy RTX_UNCHANGING_P or MEM_ALIAS_SET\n+\twhen calling MEM_COPY_ATTRIBUTES.\n+\t* emit-rtl.c (operand_subword, change_address): Likewise.\n+\t* explow.c (stabilize): Likewise.\n+\t* expr.c (protect_from_queue, emit_move_insn_1): Likewise.\n+\t* integrate.c (copy_rtx_and_substitute): Likewise.\n+\t* combine.c (combine_simplify_rtx): Don't copy RTX_UNCHANGING_P\n+\twhen calling MEM_COPY_ATTRIBUTES.\n+\t(make_extraction, simplify_shift_const, gen_lowpart_for_combine):\n+\tLikewise.\n+\t* cse.c (gen_lowpart_if_possible): Likewise.\n+\t* function.c (fixup_var_refs_1, purge_addressof_1): Likewise.\n+\t* optabs.c (gen_move_insn): Likewise.\n+\t* recog.c (validate_replace_rtx_1): Likewise.\n+\t* simplify-rtx.c (add_mem_for_addr): Likewise.\n+\t* stmt.c (expand_anon_union_decl): Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/h8300/h7300.c (fix_bit_operand): Likewise.\n+\t* config/m88k/m88k.c (legitimize_address, block_move_loop): Likewise.\n+\t(block_move_no_loop, block_move_sequence): Likewise.\n+\t* config/rs6000/rs6000.c (expand_block_move_mem): Likewise.\n+\t* config/alpha/alpha.c (get_aligned_mem): Likewise.\n+\tClear MEM_ALIAS_SET.\n+\t* final.c (alter_subreg): Don't copy MEM_ALIAS_SET when calling\n+\tMEM_COPY_ATTRIBUTES.\n+\n 2000-05-03  Robert Lipe <robertlipe@usa.net>\n         \n         * configure.in (i[34567]86-*-isc*) [tmake_file]: Add t-i386bare"}, {"sha": "e29c57e5234273cacda27855720e40debf56a369", "filename": "gcc/alias.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -586,9 +586,7 @@ canon_rtx (x)\n \t{\n \t  rtx new = gen_rtx_MEM (GET_MODE (x), addr);\n \n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n \t  MEM_COPY_ATTRIBUTES (new, x);\n-\t  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (x);\n \t  x = new;\n \t}\n     }"}, {"sha": "6c14228d1f14300116a4352b0810cdd642881f4b", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -3740,7 +3740,6 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t\t\t   plus_constant (XEXP (inner, 0),\n \t\t\t\t\t  (SUBREG_WORD (x) * UNITS_PER_WORD\n \t\t\t\t\t   + endian_offset)));\n-\t  RTX_UNCHANGING_P (x) = RTX_UNCHANGING_P (inner);\n \t  MEM_COPY_ATTRIBUTES (x, inner);\n \t  return x;\n \t}\n@@ -5922,7 +5921,6 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t    offset = pos / BITS_PER_UNIT;\n \n \t  new = gen_rtx_MEM (tmode, plus_constant (XEXP (inner, 0), offset));\n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (inner);\n \t  MEM_COPY_ATTRIBUTES (new, inner);\n \t}\n       else if (GET_CODE (inner) == REG)\n@@ -6147,7 +6145,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t{\n \t  rtx newmem = gen_rtx_MEM (wanted_inner_mode,\n \t\t\t\t    plus_constant (XEXP (inner, 0), offset));\n-\t  RTX_UNCHANGING_P (newmem) = RTX_UNCHANGING_P (inner);\n+\n \t  MEM_COPY_ATTRIBUTES (newmem, inner);\n \t  inner = newmem;\n \t}\n@@ -8914,7 +8912,7 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \t\tnew = gen_rtx_MEM (tmode,\n \t\t\t\t   plus_constant (XEXP (varop, 0),\n \t\t\t\t\t\t  count / BITS_PER_UNIT));\n-\t      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (varop);\n+\n \t      MEM_COPY_ATTRIBUTES (new, varop);\n \t      varop = gen_rtx_combine (code == ASHIFTRT ? SIGN_EXTEND\n \t\t\t\t       : ZERO_EXTEND, mode, new);\n@@ -9669,7 +9667,6 @@ gen_lowpart_for_combine (mode, x)\n \t\t     - MIN (UNITS_PER_WORD, GET_MODE_SIZE (GET_MODE (x))));\n \t}\n       new = gen_rtx_MEM (mode, plus_constant (XEXP (x, 0), offset));\n-      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n       MEM_COPY_ATTRIBUTES (new, x);\n       return new;\n     }"}, {"sha": "89a08cfef6934afb42068fdbdb46073aa934e2aa", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -1033,11 +1033,10 @@ get_aligned_mem (ref, paligned_mem, pbitnum)\n \n   *paligned_mem = gen_rtx_MEM (SImode, plus_constant (base, offset & ~3));\n   MEM_COPY_ATTRIBUTES (*paligned_mem, ref);\n-  RTX_UNCHANGING_P (*paligned_mem) = RTX_UNCHANGING_P (ref);\n \n   /* Sadly, we cannot use alias sets here because we may overlap other\n      data in a different alias set.  */\n-  /* MEM_ALIAS_SET (*paligned_mem) = MEM_ALIAS_SET (ref); */\n+  MEM_ALIAS_SET (*paligned_mem) = 0;\n \n   *pbitnum = GEN_INT ((offset & 3) * 8);\n }"}, {"sha": "0862668df949094e7eb9e2b5cef468ea4622ac2c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -3309,10 +3309,8 @@\n \n   mem1 = gen_rtx_MEM (QImode, addr);\n   MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n-  RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n   mem2 = gen_rtx_MEM (QImode, plus_constant (addr, 1));\n   MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n-  RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = mem1;\n   operands[2] = gen_reg_rtx (SImode);\n@@ -3427,7 +3425,6 @@\n     operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]));\n     operands[2] = gen_rtx_MEM (QImode, operands[3]);\n     MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n-    RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n     if (GET_CODE (operands[1]) == PLUS\n \t&& GET_CODE (XEXP (operands[1], 1)) == CONST_INT\n@@ -3522,7 +3519,6 @@\n \n     operands[2] = gen_rtx_MEM (QImode, operands[0]);\n     MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n-    RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n     if (GET_CODE (operands[1]) == PLUS\n \t&& GET_CODE (XEXP (operands[1], 1)) == CONST_INT\n@@ -4201,7 +4197,6 @@\n \t\t          new = gen_rtx_MEM (SImode,\n \t\t\t\t   \t     plus_constant (base, new_offset));\n \t                  MEM_COPY_ATTRIBUTES (new, operands[1]);\n-\t\t          RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t          emit_insn (gen_movsi (reg, new));\n \t\t          if (((INTVAL (offset) & 2) != 0)\n \t\t\t      ^ (BYTES_BIG_ENDIAN ? 1 : 0))\n@@ -4237,15 +4232,12 @@\n \t\t\t      new = gen_rtx_MEM (SImode,\n \t\t\t\t  \t         plus_constant (base, new_offset));\n                               MEM_COPY_ATTRIBUTES (new, operands[1]);\n-\t\t\t      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t\t      emit_insn (gen_movsi (reg, new));\n \t\t\t    }\n \t\t          else\n \t\t\t    {\n \t\t\t      new = gen_rtx_MEM (SImode, XEXP (operands[1], 0));\n \t                      MEM_COPY_ATTRIBUTES (new, operands[1]);\n-\t\t\t      RTX_UNCHANGING_P (new)\n-\t\t\t        = RTX_UNCHANGING_P (operands[1]);\n \t\t\t      emit_insn (gen_rotated_loadsi (reg, new));\n \t\t\t    }\n \n@@ -4393,10 +4385,8 @@\n \n   mem1 = gen_rtx_MEM (QImode, addr);\n   MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n-  RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n   mem2 = gen_rtx_MEM (QImode, plus_constant (addr, 1));\n   MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n-  RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = mem1;\n   operands[2] = gen_reg_rtx (SImode);"}, {"sha": "ee4d0ad31d46ad2d57a91628c12052578b26809b", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -2814,7 +2814,6 @@ fix_bit_operand (operands, what, type)\n \t      rtx mem = gen_rtx_MEM (GET_MODE (operands[0]),\n \t\t\t\t     copy_to_mode_reg (Pmode,\n \t\t\t\t\t\t       XEXP (operands[0], 0)));\n-\t      RTX_UNCHANGING_P (mem) = RTX_UNCHANGING_P (operands[0]);\n \t      MEM_COPY_ATTRIBUTES (mem, operands[0]);\n \t      operands[0] = mem;\n \t    }\n@@ -2824,7 +2823,6 @@ fix_bit_operand (operands, what, type)\n \t      rtx mem = gen_rtx_MEM (GET_MODE (operands[1]),\n \t\t\t\t     copy_to_mode_reg (Pmode,\n \t\t\t\t\t\t       XEXP (operands[1], 0)));\n-\t      RTX_UNCHANGING_P (mem) = RTX_UNCHANGING_P (operands[1]);\n \t      MEM_COPY_ATTRIBUTES (mem, operands[0]);\n \t      operands[1] = mem;\n \t    }"}, {"sha": "555d49f23a530d891caf5840b09ebd477d8356f4", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -402,7 +402,6 @@ legitimize_address (pic, orig, reg, scratch)\n       && GET_CODE (orig) == MEM)\n     {\n       new = gen_rtx_MEM (GET_MODE (orig), new);\n-      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (orig);\n       MEM_COPY_ATTRIBUTES (new, orig);\n     }\n   return new;\n@@ -602,7 +601,6 @@ block_move_loop (dest, dest_mem, src, src_mem, size, align)\n \t\t\t   gen_rtx_PLUS (Pmode,\n \t\t\t\t\t gen_rtx_REG (Pmode, 3),\n \t\t\t\t\t offset_rtx));\n-  RTX_UNCHANGING_P (value_rtx) = RTX_UNCHANGING_P (src_mem);\n   MEM_COPY_ATTRIBUTES (value_rtx, src_mem);\n \n   emit_insn (gen_call_movstrsi_loop\n@@ -659,7 +657,6 @@ block_move_no_loop (dest, dest_mem, src, src_mem, size, align)\n \t\t\t\t\t gen_rtx_REG (Pmode, 3),\n \t\t\t\t\t offset_rtx));\n \n-  RTX_UNCHANGING_P (value_rtx) = RTX_UNCHANGING_P (src_mem);\n   MEM_COPY_ATTRIBUTES (value_rtx, src_mem);\n \n   value_reg = ((((most - (size - remainder)) / align) & 1) == 0\n@@ -730,7 +727,6 @@ block_move_sequence (dest, dest_mem, src, src_mem, size, align, offset)\n \t  srcp = gen_rtx_MEM (MEM_IN_STRUCT_P (src_mem) ? mode[next] : BLKmode,\n \t\t\t      plus_constant (src, offset_ld));\n \n-\t  RTX_UNCHANGING_P (srcp) = RTX_UNCHANGING_P (src_mem);\n \t  MEM_COPY_ATTRIBUTES (srcp, src_mem);\n \t  emit_insn (gen_rtx_SET (VOIDmode, temp[next], srcp));\n \t  offset_ld += amount[next];\n@@ -744,7 +740,6 @@ block_move_sequence (dest, dest_mem, src, src_mem, size, align, offset)\n \t    = gen_rtx_MEM (MEM_IN_STRUCT_P (dest_mem) ? mode[phase] : BLKmode,\n \t\t\t   plus_constant (dest, offset_st));\n \n-\t  RTX_UNCHANGING_P (dstp) = RTX_UNCHANGING_P (dest_mem);\n \t  MEM_COPY_ATTRIBUTES (dstp, dest_mem);\n \t  emit_insn (gen_rtx_SET (VOIDmode, dstp, temp[phase]));\n \t  offset_st += amount[phase];"}, {"sha": "215b8121c27ba8e094c5c8b7588619626dae10c1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -2286,7 +2286,6 @@ expand_block_move_mem (mode, addr, orig_mem)\n {\n   rtx mem = gen_rtx_MEM (mode, addr);\n \n-  RTX_UNCHANGING_P (mem) = RTX_UNCHANGING_P (orig_mem);\n   MEM_COPY_ATTRIBUTES (mem, orig_mem);\n #ifdef MEM_UNALIGNED_P\n   MEM_UNALIGNED_P (mem) = MEM_UNALIGNED_P (orig_mem);"}, {"sha": "474857070cee0abcba47c42e59f123f1ab9b27ef", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -4176,7 +4176,6 @@ gen_lowpart_if_possible (mode, x)\n       new = gen_rtx_MEM (mode, plus_constant (XEXP (x, 0), offset));\n       if (! memory_address_p (mode, XEXP (new, 0)))\n \treturn 0;\n-      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n       MEM_COPY_ATTRIBUTES (new, x);\n       return new;\n     }"}, {"sha": "82a2ca209b21185db6c1cd8b281a74d2196fd942", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -1283,11 +1283,7 @@ operand_subword (op, i, validate_address, mode)\n \t}\n \n       new = gen_rtx_MEM (word_mode, addr);\n-\n       MEM_COPY_ATTRIBUTES (new, op);\n-      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (op);\n-      MEM_ALIAS_SET (new) = MEM_ALIAS_SET (op);\n-\n       return new;\n     }\n \n@@ -1597,9 +1593,7 @@ change_address (memref, mode, addr)\n     return memref;\n \n   new = gen_rtx_MEM (mode, addr);\n-  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (memref);\n   MEM_COPY_ATTRIBUTES (new, memref);\n-  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (memref);\n   return new;\n }\n \f"}, {"sha": "4d3756e56768fe6bd28f12df3397c19eb2abead3", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -644,22 +644,18 @@ stabilize (x)\n     {\n       rtx temp = copy_all_regs (addr);\n       rtx mem;\n+\n       if (GET_CODE (temp) != REG)\n \ttemp = copy_to_reg (temp);\n       mem = gen_rtx_MEM (GET_MODE (x), temp);\n \n       /* Mark returned memref with in_struct if it's in an array or\n-\t structure.  Copy const and volatile from original memref.  */\n+\t structure.  Copy everything else from original memref.  */\n \n-      RTX_UNCHANGING_P (mem) = RTX_UNCHANGING_P (x);\n       MEM_COPY_ATTRIBUTES (mem, x);\n       if (GET_CODE (addr) == PLUS)\n \tMEM_SET_IN_STRUCT_P (mem, 1);\n \n-      /* Since the new MEM is just like the old X, it can alias only\n-\t the things that X could.  */\n-      MEM_ALIAS_SET (mem) = MEM_ALIAS_SET (x);\n-\n       return mem;\n     }\n   return x;"}, {"sha": "8de3905e4460393968bfb0c0ce2a9ce1200a410c", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -402,9 +402,7 @@ protect_from_queue (x, modify)\n \t  register rtx y = XEXP (x, 0);\n \t  register rtx new = gen_rtx_MEM (GET_MODE (x), QUEUED_VAR (y));\n \n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n \t  MEM_COPY_ATTRIBUTES (new, x);\n-\t  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (x);\n \n \t  if (QUEUED_INSN (y))\n \t    {\n@@ -2748,19 +2746,15 @@ emit_move_insn_1 (x, y)\n \t{\n \t  rtx new = gen_rtx_MEM (GET_MODE (x), inner);\n \n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n \t  MEM_COPY_ATTRIBUTES (new, x);\n-\t  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (x);\n \t  x = new;\n \t}\n       if (reload_in_progress && GET_CODE (y) == MEM\n \t  && (inner = find_replacement (&XEXP (y, 0))) != XEXP (y, 0))\n \t{\n \t  rtx new = gen_rtx_MEM (GET_MODE (y), inner);\n \n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (y);\n \t  MEM_COPY_ATTRIBUTES (new, y);\n-\t  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (y);\n \t  y = new;\n \t}\n "}, {"sha": "dc9334fa5a3fb3f04280739d3385e7ec3ca3ac47", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -3110,12 +3110,12 @@ alter_subreg (x)\n   else if (GET_CODE (y) == MEM)\n     {\n       register int offset = SUBREG_WORD (x) * UNITS_PER_WORD;\n+\n       if (BYTES_BIG_ENDIAN)\n \toffset -= (MIN (UNITS_PER_WORD, GET_MODE_SIZE (GET_MODE (x)))\n \t\t   - MIN (UNITS_PER_WORD, GET_MODE_SIZE (GET_MODE (y))));\n       PUT_CODE (x, MEM);\n       MEM_COPY_ATTRIBUTES (x, y);\n-      MEM_ALIAS_SET (x) = MEM_ALIAS_SET (y);\n       XEXP (x, 0) = plus_constant (XEXP (y, 0), offset);\n     }\n "}, {"sha": "6815ab8d875cdbb0a91d01880c64d5d59e602df0", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -2046,7 +2046,6 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \n \t\t  newmem = gen_rtx_MEM (wanted_mode,\n \t\t\t\t\tplus_constant (XEXP (tem, 0), offset));\n-\t\t  RTX_UNCHANGING_P (newmem) = RTX_UNCHANGING_P (tem);\n \t\t  MEM_COPY_ATTRIBUTES (newmem, tem);\n \n \t\t  /* Make the change and see if the insn remains valid.  */\n@@ -2238,7 +2237,6 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t\t    newmem = gen_rtx_MEM (wanted_mode,\n \t\t\t\t\t  plus_constant (XEXP (tem, 0),\n \t\t\t\t\t\t\t offset));\n-\t\t    RTX_UNCHANGING_P (newmem) = RTX_UNCHANGING_P (tem);\n \t\t    MEM_COPY_ATTRIBUTES (newmem, tem);\n \n \t\t    /* Make the change and see if the insn remains valid.  */\n@@ -2928,7 +2926,6 @@ purge_addressof_1 (loc, insn, force, store, ht)\n \t{\n \t  sub2 = gen_rtx_MEM (GET_MODE (x), copy_rtx (XEXP (sub, 0)));\n \t  MEM_COPY_ATTRIBUTES (sub2, sub);\n-\t  RTX_UNCHANGING_P (sub2) = RTX_UNCHANGING_P (sub);\n \t  sub = sub2;\n \t}\n       else if (GET_CODE (sub) == REG"}, {"sha": "8e0f9101c35b31ed4028ef96b05e33173949a07b", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -2130,8 +2130,6 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n       PUT_MODE (copy, mode);\n       XEXP (copy, 0) = copy_rtx_and_substitute (XEXP (orig, 0), map, 0);\n       MEM_COPY_ATTRIBUTES (copy, orig);\n-      MEM_ALIAS_SET (copy) = MEM_ALIAS_SET (orig);\n-      RTX_UNCHANGING_P (copy) = RTX_UNCHANGING_P (orig);\n       return copy;\n       \n     default:"}, {"sha": "0cfe0649d6fc86938faa95878e809f0f054f7ce0", "filename": "gcc/optabs.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -3769,7 +3769,6 @@ gen_move_insn (x, y)\n \t  if (x == 0 && GET_CODE (x1) == MEM)\n \t    {\n \t      x = gen_rtx_MEM (tmode, XEXP (x1, 0));\n-\t      RTX_UNCHANGING_P (x) = RTX_UNCHANGING_P (x1);\n \t      MEM_COPY_ATTRIBUTES (x, x1);\n \t      copy_replacements (x1, x);\n \t    }\n@@ -3778,7 +3777,6 @@ gen_move_insn (x, y)\n \t  if (y == 0 && GET_CODE (y1) == MEM)\n \t    {\n \t      y = gen_rtx_MEM (tmode, XEXP (y1, 0));\n-\t      RTX_UNCHANGING_P (y) = RTX_UNCHANGING_P (y1);\n \t      MEM_COPY_ATTRIBUTES (y, y1);\n \t      copy_replacements (y1, y);\n \t    }"}, {"sha": "ee3862805cd593979a9696781422eafe5040ac76", "filename": "gcc/recog.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -518,7 +518,6 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t\t       - MIN (UNITS_PER_WORD, GET_MODE_SIZE (mode)));\n \n \t  new = gen_rtx_MEM (mode, plus_constant (XEXP (to, 0), offset));\n-\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (to);\n \t  MEM_COPY_ATTRIBUTES (new, to);\n \t  validate_change (object, loc, new, 1);\n \t  return;\n@@ -576,7 +575,6 @@ validate_replace_rtx_1 (loc, from, to, object)\n \n \t      newmem = gen_rtx_MEM (wanted_mode,\n \t\t\t\t    plus_constant (XEXP (to, 0), offset));\n-\t      RTX_UNCHANGING_P (newmem) = RTX_UNCHANGING_P (to);\n \t      MEM_COPY_ATTRIBUTES (newmem, to);\n \n \t      validate_change (object, &XEXP (x, 2), GEN_INT (pos), 1);"}, {"sha": "3a873a58a77260971bcfcd54fbeae17011a5eb53", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -760,12 +760,13 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n    not refer to a scalar.*/\n #define MEM_SCALAR_P(RTX) ((RTX)->frame_related)\n \n-/* Copy the MEM_VOLATILE_P, MEM_IN_STRUCT_P, and MEM_SCALAR_P\n-   attributes from RHS to LHS.  */\n+/* Copy the attributes that apply to memory locations from RHS to LHS.  */\n #define MEM_COPY_ATTRIBUTES(LHS, RHS)\t\t\t\\\n   (MEM_VOLATILE_P (LHS) = MEM_VOLATILE_P (RHS),\t\t\\\n    MEM_IN_STRUCT_P (LHS) = MEM_IN_STRUCT_P (RHS),\t\\\n-   MEM_SCALAR_P (LHS) = MEM_SCALAR_P (RHS))\n+   MEM_SCALAR_P (LHS) = MEM_SCALAR_P (RHS),\t\t\\\n+   MEM_ALIAS_SET (LHS) = MEM_ALIAS_SET (RHS),\t\t\\\n+   RTX_UNCHANGING_P (LHS) = RTX_UNCHANGING_P (RHS))\n \n /* If VAL is non-zero, set MEM_IN_STRUCT_P and clear MEM_SCALAR_P in\n    RTX.  Otherwise, vice versa.  Use this macro only when you are"}, {"sha": "84bba2d4817a839a146a7906b9f21c3b9912269a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -2604,11 +2604,9 @@ add_mem_for_addr (addr_elt, mem_elt, x)\n       return;\n \n   new = gen_rtx_MEM (GET_MODE (x), addr_elt->u.val_rtx);\n-  addr_elt->addr_list = new_elt_list (addr_elt->addr_list, mem_elt);\n-\n-  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (x);\n   MEM_COPY_ATTRIBUTES (new, x);\n \n+  addr_elt->addr_list = new_elt_list (addr_elt->addr_list, mem_elt);\n   mem_elt->locs = new_elt_loc_list (mem_elt->locs, new);\n }\n "}, {"sha": "88538e007da2278c5ef61b8ee8d756466a85f50b", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf49b1396b843c126db4f8e97326f0138ff9a2d3/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=bf49b1396b843c126db4f8e97326f0138ff9a2d3", "patch": "@@ -4228,7 +4228,6 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n \t    {\n \t      DECL_RTL (decl_elt) = gen_rtx_MEM (mode, copy_rtx (XEXP (x, 0)));\n \t      MEM_COPY_ATTRIBUTES (DECL_RTL (decl_elt), x);\n-\t      RTX_UNCHANGING_P (DECL_RTL (decl_elt)) = RTX_UNCHANGING_P (x);\n \t    }\n \t}\n       else if (GET_CODE (x) == REG)"}]}