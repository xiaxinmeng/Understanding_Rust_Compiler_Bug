{"sha": "7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3NWI0MWYxZDAxMzcwMDVkODdjYzVkZDEyYjJhN2RmMmYzMGM1ZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-08-30T18:46:11Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-08-30T18:46:11Z"}, "message": "re PR libstdc++/77395 (std::is_constructible is false for type constructible via implicit conversion operator affecting std::tuple)\n\n\tPR libstdc++/77395\n\t* include/std/type_traits (is_constructible): Forward-declare...\n\t(__is_base_to_derived_ref): ...and use here.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n\t* testsuite/20_util/is_constructible/77395.cc: New.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/tuple/77395.cc: New.\n\nFrom-SVN: r239870", "tree": {"sha": "ffae8536b3701decffb3eba640f374e07ceeba77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffae8536b3701decffb3eba640f374e07ceeba77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1becf59f9aac8fa3df76493ae778a95f4148031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1becf59f9aac8fa3df76493ae778a95f4148031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1becf59f9aac8fa3df76493ae778a95f4148031"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "dc9ee9f5f1cdcaf9851ba9b68f5d09f07207cb7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -1,3 +1,15 @@\n+2016-08-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/77395\n+\t* include/std/type_traits (is_constructible): Forward-declare...\n+\t(__is_base_to_derived_ref): ...and use here.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n+\t* testsuite/20_util/is_constructible/77395.cc: New.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/tuple/77395.cc: New.\n+\n 2016-08-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/22_locale/time_get/get/char/2.cc: Move dg-do run"}, {"sha": "5085196f654d4ff918148874305f847402e79114", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -1007,6 +1007,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                           is_function<_From>>>::value>\n     struct __is_base_to_derived_ref;\n \n+  template<typename _Tp, typename... _Args>\n+    struct is_constructible;\n+\n   // Detect whether we have a downcast situation during\n   // reference binding.\n   template<typename _From, typename _To>\n@@ -1017,7 +1020,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename remove_cv<typename remove_reference<_To\n         >::type>::type __dst_t;\n       typedef __and_<__not_<is_same<__src_t, __dst_t>>,\n-\t\t     is_base_of<__src_t, __dst_t>> type;\n+\t\t     is_base_of<__src_t, __dst_t>,\n+\t\t     __not_<is_constructible<__dst_t, _From>>> type;\n       static constexpr bool value = type::value;\n     };\n "}, {"sha": "2048e0d7cff54ab718cafa1a460825f6784ad84c", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2255 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2259 }\n \n #include <utility>\n "}, {"sha": "b1fe8a0399b8ac1a3343be9eda9f682043623232", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/77395.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F77395.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F77395.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F77395.cc?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <utility>\n+\n+struct derived;\n+struct base\n+{\n+  operator derived & () &;\n+  operator derived const & () const &;\n+  operator derived && () &&;\n+};\n+\n+struct derived : base {};\n+\n+base::operator derived & () &\n+{\n+  return *static_cast<derived *>(this);\n+}\n+\n+base::operator derived const & () const &\n+{\n+  return *static_cast<derived const *>(this);\n+}\n+\n+base::operator derived && () &&\n+{\n+  return std::move(*static_cast<derived *>(this));\n+}\n+\n+int main()\n+{\n+  base b;\n+  derived&& d(static_cast<derived&&>(std::move(b)));\n+  derived&& d2(std::move(b));\n+  static_assert(std::is_constructible<derived&&, base&&>::value, \"\");\n+}"}, {"sha": "4f0720af4126c5f64dcec83a60077d96a2601003", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -47,4 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1920 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1924 }"}, {"sha": "8eea6b967f37ce80dc06cc4bf3d745fb7f73f43d", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -47,5 +47,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1816 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1773 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1820 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1777 }"}, {"sha": "26501bfcc11bafa6855c03b90393dd6fcb763df3", "filename": "libstdc++-v3/testsuite/20_util/tuple/77395.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F77395.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7875b41f1d0137005d87cc5dd12b2a7df2f30c5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F77395.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F77395.cc?ref=7875b41f1d0137005d87cc5dd12b2a7df2f30c5e", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <utility>\n+\n+struct derived;\n+struct base\n+{\n+    operator derived & () &;\n+    operator derived const & () const &;\n+    operator derived && () &&;\n+};\n+\n+struct derived : base {};\n+\n+base::operator derived & () & { return *static_cast<derived *>(this); }\n+base::operator derived const & () const & { return *static_cast<derived const *>(this); }\n+base::operator derived && () && { return std::move(*static_cast<derived *>(this)); }\n+\n+std::tuple<derived &&> test(base && b)\n+{\n+    return std::tuple<derived &&>(std::move(b));\n+}\n+\n+int main(int,char**)\n+{\n+    auto d = std::get<0>(test(derived{}));\n+    return 0;\n+}"}]}