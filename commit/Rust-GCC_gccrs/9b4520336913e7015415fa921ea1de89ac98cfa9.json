{"sha": "9b4520336913e7015415fa921ea1de89ac98cfa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0NTIwMzM2OTEzZTcwMTU0MTVmYTkyMWVhMWRlODlhYzk4Y2ZhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-12T19:36:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-12T19:36:01Z"}, "message": "c-attribs.c (c_common_attribute_table): Add \"omp declare target implicit\" attribute.\n\n\t* c-attribs.c (c_common_attribute_table): Add\n\t\"omp declare target implicit\" attribute.\n\n\t* c-decl.c (c_decl_attributes): Don't diagnose vars without mappable\n\ttype here, instead add \"omp declare target implicit\" attribute.\n\t(finish_decl): Diagnose vars without mappable type here.\n\n\t* decl2.c (cplus_decl_attributes): Don't diagnose vars without mappable\n\ttype here, instead add \"omp declare target implicit\" attribute.  Add\n\tthat attribute instead of \"omp declare target\" also when\n\tprocessing_template_decl.\n\t* decl.c (cp_finish_decl): Diagnose vars without mappable type here,\n\tand before calling cp_omp_mappable_type call complete_type.\n\n\t* c-c++-common/gomp/declare-target-3.c: New test.\n\t* g++.dg/gomp/declare-target-2.C: New test.\n\nFrom-SVN: r262605", "tree": {"sha": "211237062b7d9f8fe1a8f83048df1c6535b2bc5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211237062b7d9f8fe1a8f83048df1c6535b2bc5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4520336913e7015415fa921ea1de89ac98cfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4520336913e7015415fa921ea1de89ac98cfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4520336913e7015415fa921ea1de89ac98cfa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4520336913e7015415fa921ea1de89ac98cfa9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f34756291a6848f8eb6028a7a92808369ae8771b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34756291a6848f8eb6028a7a92808369ae8771b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34756291a6848f8eb6028a7a92808369ae8771b"}], "stats": {"total": 155, "additions": 147, "deletions": 8}, "files": [{"sha": "f35304d735ee8522932f14b3ed2b2ff4b5658c7c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -1,3 +1,8 @@\n+2018-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (c_common_attribute_table): Add\n+\t\"omp declare target implicit\" attribute.\n+\n 2018-07-12  Richard Biener  <rguenther@suse.de>\n \n \tPR c/86453"}, {"sha": "9da9c2765e34737dae7a44eb4e72854ba8fa8458", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -439,6 +439,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_omp_declare_target_attribute, NULL },\n   { \"omp declare target link\", 0, 0, true, false, false, false,\n \t\t\t      handle_omp_declare_target_attribute, NULL },\n+  { \"omp declare target implicit\", 0, 0, true, false, false, false,\n+\t\t\t      handle_omp_declare_target_attribute, NULL },\n   { \"alloc_align\",\t      1, 1, false, true, true, false,\n \t\t\t      handle_alloc_align_attribute,\n \t                      attr_alloc_exclusions },"}, {"sha": "424b6a12bff9f00a06ca3087626a53658f4e3ba9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -1,3 +1,9 @@\n+2018-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-decl.c (c_decl_attributes): Don't diagnose vars without mappable\n+\ttype here, instead add \"omp declare target implicit\" attribute.\n+\t(finish_decl): Diagnose vars without mappable type here.\n+\n 2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Thomas Schwinge <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "ed1dd28cac63c8fe2155b99cd74ef60419e97f4e", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -4643,8 +4643,8 @@ c_decl_attributes (tree *node, tree attributes, int flags)\n     {\n       if (VAR_P (*node)\n \t  && !lang_hooks.types.omp_mappable_type (TREE_TYPE (*node)))\n-\terror (\"%q+D in declare target directive does not have mappable type\",\n-\t       *node);\n+\tattributes = tree_cons (get_identifier (\"omp declare target implicit\"),\n+\t\t\t\tNULL_TREE, attributes);\n       else\n \tattributes = tree_cons (get_identifier (\"omp declare target\"),\n \t\t\t\tNULL_TREE, attributes);\n@@ -5223,7 +5223,27 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \tdiagnose_uninitialized_cst_member (decl, type);\n     }\n \n-\tinvoke_plugin_callbacks (PLUGIN_FINISH_DECL, decl);\n+  if (flag_openmp\n+      && VAR_P (decl)\n+      && lookup_attribute (\"omp declare target implicit\",\n+\t\t\t   DECL_ATTRIBUTES (decl)))\n+    {\n+      DECL_ATTRIBUTES (decl)\n+\t= remove_attribute (\"omp declare target implicit\",\n+\t\t\t    DECL_ATTRIBUTES (decl));\n+      if (!lang_hooks.types.omp_mappable_type (TREE_TYPE (decl)))\n+\terror (\"%q+D in declare target directive does not have mappable type\",\n+\t       decl);\n+      else if (!lookup_attribute (\"omp declare target\",\n+\t\t\t\t  DECL_ATTRIBUTES (decl))\n+\t       && !lookup_attribute (\"omp declare target link\",\n+\t\t\t\t     DECL_ATTRIBUTES (decl)))\n+\tDECL_ATTRIBUTES (decl)\n+\t  = tree_cons (get_identifier (\"omp declare target\"),\n+\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+    }\n+\n+  invoke_plugin_callbacks (PLUGIN_FINISH_DECL, decl);\n }\n \n /* Given a parsed parameter declaration, decode it into a PARM_DECL."}, {"sha": "a640259193c26bab3f9dc1c71d03265ae3693e60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -1,3 +1,12 @@\n+2018-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl2.c (cplus_decl_attributes): Don't diagnose vars without mappable\n+\ttype here, instead add \"omp declare target implicit\" attribute.  Add\n+\tthat attribute instead of \"omp declare target\" also when\n+\tprocessing_template_decl.\n+\t* decl.c (cp_finish_decl): Diagnose vars without mappable type here,\n+\tand before calling cp_omp_mappable_type call complete_type.\n+\n 2018-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/86406"}, {"sha": "3c1e2ef36984129e2fa2d561908bbe3113f7d6e5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -7222,6 +7222,27 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (was_readonly)\n     TREE_READONLY (decl) = 1;\n \n+  if (flag_openmp\n+      && VAR_P (decl)\n+      && lookup_attribute (\"omp declare target implicit\",\n+\t\t\t   DECL_ATTRIBUTES (decl)))\n+    {\n+      DECL_ATTRIBUTES (decl)\n+\t= remove_attribute (\"omp declare target implicit\",\n+\t\t\t    DECL_ATTRIBUTES (decl));\n+      complete_type (TREE_TYPE (decl));\n+      if (!cp_omp_mappable_type (TREE_TYPE (decl)))\n+\terror (\"%q+D in declare target directive does not have mappable type\",\n+\t       decl);\n+      else if (!lookup_attribute (\"omp declare target\",\n+\t\t\t\t  DECL_ATTRIBUTES (decl))\n+\t       && !lookup_attribute (\"omp declare target link\",\n+\t\t\t\t     DECL_ATTRIBUTES (decl)))\n+\tDECL_ATTRIBUTES (decl)\n+\t  = tree_cons (get_identifier (\"omp declare target\"),\n+\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+    }\n+\n   invoke_plugin_callbacks (PLUGIN_FINISH_DECL, decl);\n }\n "}, {"sha": "f8fc20e409359c3c1af60b1fa18b7c1e4daec6ae", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -1490,11 +1490,11 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n \t  && DECL_CLASS_SCOPE_P (*decl))\n \terror (\"%q+D static data member inside of declare target directive\",\n \t       *decl);\n-      else if (!processing_template_decl\n-\t       && VAR_P (*decl)\n-\t       && !cp_omp_mappable_type (TREE_TYPE (*decl)))\n-\terror (\"%q+D in declare target directive does not have mappable type\",\n-\t       *decl);\n+      else if (VAR_P (*decl)\n+\t       && (processing_template_decl\n+\t\t   || !cp_omp_mappable_type (TREE_TYPE (*decl))))\n+\tattributes = tree_cons (get_identifier (\"omp declare target implicit\"),\n+\t\t\t\tNULL_TREE, attributes);\n       else\n \tattributes = tree_cons (get_identifier (\"omp declare target\"),\n \t\t\t\tNULL_TREE, attributes);"}, {"sha": "e72883860d6ae7f0b9ae0af942f8d8d410a8684a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -1,3 +1,8 @@\n+2018-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/declare-target-3.c: New test.\n+\t* g++.dg/gomp/declare-target-2.C: New test.\n+\n 2018-07-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/86453"}, {"sha": "bf72fda0a89f1b347e48aa141c52ef4140e7f4ea", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#pragma omp declare target\n+int a[] = { 1, 2, 3 };\n+extern int b[];\t\t\t/* { dg-error \"'b' in declare target directive does not have mappable type\" } */\n+extern int c[];\t\t\t/* { dg-error \"'c' in declare target directive does not have mappable type\" } */\n+extern int d[];\t\t\t/* { dg-error \"'d' in declare target directive does not have mappable type\" } */\n+int d[3];\n+#pragma omp end declare target\n+int c[3];\n+int e[] = { 1, 2, 3 };\n+#pragma omp declare target to (e)\n+extern int f[];\n+#pragma omp declare target to (f) /* { dg-error \"'f' does not have a mappable type in 'to' clause\" } */\n+extern int g[];\n+#pragma omp declare target to (g) /* { dg-error \"'g' does not have a mappable type in 'to' clause\" } */\n+int g[3];\n+extern int h[];\n+int h[3];\n+#pragma omp declare target to (h)\n+\n+int i[] = { 1, 2, 3 };\n+int j[] = { 1, 2, 3 };\n+extern int k[];\n+extern int l[];\n+extern int m[];\n+extern int n[];\n+extern int o[];\n+extern int p[];\n+int k[3];\n+int l[3];\n+int q;\n+\n+void\n+foo (void)\n+{\n+  #pragma omp target update to (q) to (i)\n+  #pragma omp target map (tofrom: j)\n+  ;\n+  #pragma omp target update from (q) from (k)\n+  #pragma omp target map (to: l)\n+  ;\n+  #pragma omp target update from (q) from (m)\t/* { dg-error \"'m' does not have a mappable type in 'from' clause\" } */\n+  #pragma omp target map (from: n)\t\t/* { dg-error \"'n' does not have a mappable type in 'map' clause\" } */\n+  ;\n+  #pragma omp target update to (q) to (o)\t/* { dg-error \"'o' does not have a mappable type in 'to' clause\" } */\n+  #pragma omp target map (from: p)\t\t/* { dg-error \"'p' does not have a mappable type in 'map' clause\" } */\n+  ;\n+}\n+\n+int o[3];\n+int p[3];"}, {"sha": "e080ca6bfb5b6dffbb4599b888bb30d2175477f0", "filename": "gcc/testsuite/g++.dg/gomp/declare-target-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4520336913e7015415fa921ea1de89ac98cfa9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-2.C?ref=9b4520336913e7015415fa921ea1de89ac98cfa9", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-options \"-fopenmp\" }\n+\n+#pragma omp declare target\n+template <typename T>\n+struct S { T a; };\n+template <typename T>\n+struct U { T a; };\n+template <typename T>\n+struct V { T a; };\n+template <typename T>\n+struct W { T a; };\n+\n+S<int> d;\n+U<long> e[10];\n+extern V<char> f[5];\n+extern W<short> g[];\t\t// { dg-error \"'g' in declare target directive does not have mappable type\" }\n+#pragma omp end declare target"}]}