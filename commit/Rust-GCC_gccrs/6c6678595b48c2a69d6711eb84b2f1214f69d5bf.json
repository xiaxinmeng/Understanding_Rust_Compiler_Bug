{"sha": "6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2Njc4NTk1YjQ4YzJhNjlkNjcxMWViODRiMmYxMjE0ZjY5ZDViZg==", "commit": {"author": {"name": "Arend Bayer", "email": "arend.bayer@web.de", "date": "2005-01-27T23:00:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-27T23:00:19Z"}, "message": "cse.c: (find_best_addr): Don't call copy_rtx before calling fold_rtx.\n\n\t* cse.c: (find_best_addr): Don't call copy_rtx before calling\n\tfold_rtx.  Save cost recomputation if fold_rtx did nothing.\n\t(fold_rtx) <ASM_OPERANDS>: Don't do anything if INSN is\n\tNULL_RTX.\n\nCo-Authored-By: Kazu Hirata <kazu@cs.umass.edu>\n\nFrom-SVN: r94345", "tree": {"sha": "7ab36bd9a65425cdb4d1699512a34481c62f2e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab36bd9a65425cdb4d1699512a34481c62f2e34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6678595b48c2a69d6711eb84b2f1214f69d5bf/comments", "author": null, "committer": null, "parents": [{"sha": "88af764e45e01bcd4aedaddc769cbc579b523f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88af764e45e01bcd4aedaddc769cbc579b523f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88af764e45e01bcd4aedaddc769cbc579b523f77"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "0d063b0e3c854dcb763c871a1662726f01520eed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6678595b48c2a69d6711eb84b2f1214f69d5bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6678595b48c2a69d6711eb84b2f1214f69d5bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "patch": "@@ -1,3 +1,11 @@\n+2005-01-27  Arend Bayer  <arend.bayer@web.de>\n+\t    Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cse.c: (find_best_addr): Don't call copy_rtx before calling\n+\tfold_rtx.  Save cost recomputation if fold_rtx did nothing.\n+\t(fold_rtx) <ASM_OPERANDS>: Don't do anything if INSN is\n+\tNULL_RTX.\n+\n 2005-01-27  Jeff Law  <law@redhat.com>\n \n \t* tree-into-ssa.c (ssa_rewrite_initialize_block): Do not register"}, {"sha": "54d184aa29566c929e02616a0e85b2b4cf7070f6", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6678595b48c2a69d6711eb84b2f1214f69d5bf/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6678595b48c2a69d6711eb84b2f1214f69d5bf/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6c6678595b48c2a69d6711eb84b2f1214f69d5bf", "patch": "@@ -2844,18 +2844,21 @@ find_best_addr (rtx insn, rtx *loc, enum machine_mode mode)\n      be valid and produce better code.  */\n   if (!REG_P (addr))\n     {\n-      rtx folded = fold_rtx (copy_rtx (addr), NULL_RTX);\n-      int addr_folded_cost = address_cost (folded, mode);\n-      int addr_cost = address_cost (addr, mode);\n-\n-      if ((addr_folded_cost < addr_cost\n-\t   || (addr_folded_cost == addr_cost\n-\t       /* ??? The rtx_cost comparison is left over from an older\n-\t\t  version of this code.  It is probably no longer helpful.  */\n-\t       && (rtx_cost (folded, MEM) > rtx_cost (addr, MEM)\n-\t\t   || approx_reg_cost (folded) < approx_reg_cost (addr))))\n-\t  && validate_change (insn, loc, folded, 0))\n-\taddr = folded;\n+      rtx folded = fold_rtx (addr, NULL_RTX);\n+      if (folded != addr)\n+\t{\n+\t  int addr_folded_cost = address_cost (folded, mode);\n+\t  int addr_cost = address_cost (addr, mode);\n+\n+\t  if ((addr_folded_cost < addr_cost\n+\t       || (addr_folded_cost == addr_cost\n+\t\t   /* ??? The rtx_cost comparison is left over from an older\n+\t\t      version of this code.  It is probably no longer helpful.*/\n+\t\t   && (rtx_cost (folded, MEM) > rtx_cost (addr, MEM)\n+\t\t       || approx_reg_cost (folded) < approx_reg_cost (addr))))\n+\t      && validate_change (insn, loc, folded, 0))\n+\t    addr = folded;\n+\t}\n     }\n \n   /* If this address is not in the hash table, we can't look for equivalences\n@@ -3608,9 +3611,12 @@ fold_rtx (rtx x, rtx insn)\n #endif\n \n     case ASM_OPERANDS:\n-      for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n-\tvalidate_change (insn, &ASM_OPERANDS_INPUT (x, i),\n-\t\t\t fold_rtx (ASM_OPERANDS_INPUT (x, i), insn), 0);\n+      if (insn)\n+\t{\n+\t  for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n+\t    validate_change (insn, &ASM_OPERANDS_INPUT (x, i),\n+\t\t\t     fold_rtx (ASM_OPERANDS_INPUT (x, i), insn), 0);\n+\t}\n       break;\n \n     default:"}]}