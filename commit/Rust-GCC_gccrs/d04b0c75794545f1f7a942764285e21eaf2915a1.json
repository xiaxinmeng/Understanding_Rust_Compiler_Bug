{"sha": "d04b0c75794545f1f7a942764285e21eaf2915a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0YjBjNzU3OTQ1NDVmMWY3YTk0Mjc2NDI4NWUyMWVhZjI5MTVhMQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T20:21:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-16T20:21:10Z"}, "message": "c++: covariant reference return types [PR99664]\n\nThis implements the wording changes of CWG 960 which clarifies that two\nreference types are covariant only if they're both lvalue references\nor both rvalue references.\n\n\tDR 960\n\tPR c++/99664\n\ngcc/cp/ChangeLog:\n\n\t* search.c (check_final_overrider): Compare TYPE_REF_IS_RVALUE\n\twhen the return types are references.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/inherit/covariant23.C: New test.", "tree": {"sha": "b6d7e09642e68a99009793d8e96486d9578fe91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d7e09642e68a99009793d8e96486d9578fe91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04b0c75794545f1f7a942764285e21eaf2915a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04b0c75794545f1f7a942764285e21eaf2915a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04b0c75794545f1f7a942764285e21eaf2915a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04b0c75794545f1f7a942764285e21eaf2915a1/comments", "author": null, "committer": null, "parents": [{"sha": "9faf8348621ae6ab583af593d67ac424300a2bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faf8348621ae6ab583af593d67ac424300a2bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faf8348621ae6ab583af593d67ac424300a2bad"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "943671acff85045aead153a508c8e7361590b098", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b0c75794545f1f7a942764285e21eaf2915a1/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b0c75794545f1f7a942764285e21eaf2915a1/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d04b0c75794545f1f7a942764285e21eaf2915a1", "patch": "@@ -1948,7 +1948,13 @@ check_final_overrider (tree overrider, tree basefn)\n       fail = !INDIRECT_TYPE_P (base_return);\n       if (!fail)\n \t{\n-\t  fail = cp_type_quals (base_return) != cp_type_quals (over_return);\n+\t  if (cp_type_quals (base_return) != cp_type_quals (over_return))\n+\t    fail = 1;\n+\n+\t  if (TYPE_REF_P (base_return)\n+\t      && (TYPE_REF_IS_RVALUE (base_return)\n+\t\t  != TYPE_REF_IS_RVALUE (over_return)))\n+\t    fail = 1;\n \n \t  base_return = TREE_TYPE (base_return);\n \t  over_return = TREE_TYPE (over_return);"}, {"sha": "b27be15ef4581951d880d1e655524bd9f74833cf", "filename": "gcc/testsuite/g++.dg/inherit/covariant23.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04b0c75794545f1f7a942764285e21eaf2915a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04b0c75794545f1f7a942764285e21eaf2915a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant23.C?ref=d04b0c75794545f1f7a942764285e21eaf2915a1", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/99664\n+// { dg-do compile { target c++11 } }\n+\n+struct Res { };\n+\n+struct A {\n+  virtual Res &&f();\n+  virtual Res &g();\n+};\n+\n+struct B : A {\n+  Res &f() override; // { dg-error \"return type\" }\n+  Res &&g() override; // { dg-error \"return type\" }\n+};"}]}