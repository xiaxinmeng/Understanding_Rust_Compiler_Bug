{"sha": "e99008fc24f17f93604d3980a15e7add979b560a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5MDA4ZmMyNGYxN2Y5MzYwNGQzOTgwYTE1ZTdhZGQ5NzliNTYwYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-24T01:04:35Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-24T01:04:35Z"}, "message": "fix duplication of test\n\nFrom-SVN: r200359", "tree": {"sha": "44977f1455ef70dabb764036356df71fd42e6455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44977f1455ef70dabb764036356df71fd42e6455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e99008fc24f17f93604d3980a15e7add979b560a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99008fc24f17f93604d3980a15e7add979b560a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99008fc24f17f93604d3980a15e7add979b560a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99008fc24f17f93604d3980a15e7add979b560a/comments", "author": null, "committer": null, "parents": [{"sha": "8345965a52241f49a64ed1291c54da3d8b79f740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345965a52241f49a64ed1291c54da3d8b79f740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8345965a52241f49a64ed1291c54da3d8b79f740"}], "stats": {"total": 253, "additions": 0, "deletions": 253}, "files": [{"sha": "75733d64bd01d482b4b2b85cf0754498486098a5", "filename": "gcc/testsuite/gcc.target/powerpc/le-altivec-consts.c", "status": "modified", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99008fc24f17f93604d3980a15e7add979b560a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99008fc24f17f93604d3980a15e7add979b560a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c?ref=e99008fc24f17f93604d3980a15e7add979b560a", "patch": "@@ -251,256 +251,3 @@ int main ()\n }\n \n /* { dg-final { scan-assembler-not \"lvx\" { target { powerpc*le-*-* } } } } */\n-/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n-/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n-\n-/* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n-\n-extern void abort (void);\n-\n-typedef __attribute__ ((vector_size (16))) unsigned char v16qi;\n-typedef __attribute__ ((vector_size (16))) unsigned short v8hi;\n-typedef __attribute__ ((vector_size (16))) unsigned int v4si;\n-\n-typedef __attribute__((aligned(16))) char c16[16];\n-typedef __attribute__((aligned(16))) short s8[8];\n-typedef __attribute__((aligned(16))) int i4[4];\n-\n-#define V16QI(V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16)\t\\\n-  v16qi v = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16};\t\\\n-  static c16 w = {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}; \\\n-  check_v16qi (v, w);\n-\n-#define V8HI(V1,V2,V3,V4,V5,V6,V7,V8)\t\t\\\n-  v8hi v = {V1,V2,V3,V4,V5,V6,V7,V8};\t\t\\\n-  static s8 w = {V1,V2,V3,V4,V5,V6,V7,V8};\t\\\n-  check_v8hi (v, w);\n-\n-#define V4SI(V1,V2,V3,V4)\t\\\n-  v4si v = {V1,V2,V3,V4};\t\\\n-  static i4 w = {V1,V2,V3,V4};\t\\\n-  check_v4si (v, w);\n-\n-\f\n-/* Use three different check functions for each mode-instruction pair.\n-   The callers have no typecasting and no addressable vectors, to make\n-   the test more robust.  */\n-\n-void __attribute__ ((noinline)) check_v16qi (v16qi v1, char *v2)\n-{\n-  if (memcmp (&v1, v2, 16))\n-    abort ();\n-}\n-\n-void __attribute__ ((noinline)) check_v8hi (v8hi v1, short *v2)\n-{\n-  if (memcmp (&v1, v2, 16))\n-    abort ();\n-}\n-\n-void __attribute__ ((noinline)) check_v4si (v4si v1, int *v2)\n-{\n-  if (memcmp (&v1, v2, 16))\n-    abort ();\n-}\n-\n-\f\n-/* V16QI tests.  */\n-\n-void v16qi_vspltisb ()\n-{\n-  V16QI (15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15);\n-}\n-\n-void v16qi_vspltisb_neg ()\n-{\n-  V16QI (-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5);\n-}\n-\n-void v16qi_vspltisb_addself ()\n-{\n-  V16QI (30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30);\n-}\n-\n-void v16qi_vspltisb_neg_addself ()\n-{\n-  V16QI (-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24);\n-}\n-\n-void v16qi_vspltish ()\n-{\n-  V16QI (15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0, 15, 0);\n-}\n-\n-void v16qi_vspltish_addself ()\n-{\n-  V16QI (30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0, 30, 0);\n-}\n-\n-void v16qi_vspltish_neg ()\n-{\n-  V16QI (-5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1, -5, -1);\n-}\n-\n-void v16qi_vspltisw ()\n-{\n-  V16QI (15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0);\n-}\n-\n-void v16qi_vspltisw_addself ()\n-{\n-  V16QI (30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0);\n-}\n-\n-void v16qi_vspltisw_neg ()\n-{\n-  V16QI (-5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1);\n-}\n-\n-\f\n-/* V8HI tests. */\n-\n-void v8hi_vspltisb ()\n-{\n-  V8HI (0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F, 0x0F0F);\n-}\n-\n-void v8hi_vspltisb_addself ()\n-{\n-  V8HI (0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E, 0x1E1E);\n-}\n-\n-void v8hi_vspltisb_neg ()\n-{\n-  V8HI (0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB, 0xFBFB);\n-}\n-\n-void v8hi_vspltish ()\n-{\n-  V8HI (15, 15, 15, 15, 15, 15, 15, 15);\n-}\n-\n-void v8hi_vspltish_neg ()\n-{\n-  V8HI (-5, -5, -5, -5, -5, -5, -5, -5);\n-}\n-\n-void v8hi_vspltish_addself ()\n-{\n-  V8HI (30, 30, 30, 30, 30, 30, 30, 30);\n-}\n-\n-void v8hi_vspltish_neg_addself ()\n-{\n-  V8HI (-24, -24, -24, -24, -24, -24, -24, -24);\n-}\n-\n-void v8hi_vspltisw ()\n-{\n-  V8HI (15, 0, 15, 0, 15, 0, 15, 0);\n-}\n-\n-void v8hi_vspltisw_addself ()\n-{\n-  V8HI (30, 0, 30, 0, 30, 0, 30, 0);\n-}\n-\n-void v8hi_vspltisw_neg ()\n-{\n-  V8HI (-5, -1, -5, -1, -5, -1, -5, -1);\n-}\n-\n-/* V4SI tests. */\n-\n-void v4si_vspltisb ()\n-{\n-  V4SI (0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F);\n-}\n-\n-void v4si_vspltisb_addself ()\n-{\n-  V4SI (0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E, 0x1E1E1E1E);\n-}\n-\n-void v4si_vspltisb_neg ()\n-{\n-  V4SI (0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB, 0xFBFBFBFB);\n-}\n-\n-void v4si_vspltish ()\n-{\n-  V4SI (0x000F000F, 0x000F000F, 0x000F000F, 0x000F000F);\n-}\n-\n-void v4si_vspltish_addself ()\n-{\n-  V4SI (0x001E001E, 0x001E001E, 0x001E001E, 0x001E001E);\n-}\n-\n-void v4si_vspltish_neg ()\n-{\n-  V4SI (0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB, 0xFFFBFFFB);\n-}\n-\n-void v4si_vspltisw ()\n-{\n-  V4SI (15, 15, 15, 15);\n-}\n-\n-void v4si_vspltisw_neg ()\n-{\n-  V4SI (-5, -5, -5, -5);\n-}\n-\n-void v4si_vspltisw_addself ()\n-{\n-  V4SI (30, 30, 30, 30);\n-}\n-\n-void v4si_vspltisw_neg_addself ()\n-{\n-  V4SI (-24, -24, -24, -24);\n-}\n-\n-\f\n-\n-int main ()\n-{\n-  v16qi_vspltisb ();\n-  v16qi_vspltisb_neg ();\n-  v16qi_vspltisb_addself ();\n-  v16qi_vspltisb_neg_addself ();\n-  v16qi_vspltish ();\n-  v16qi_vspltish_addself ();\n-  v16qi_vspltish_neg ();\n-  v16qi_vspltisw ();\n-  v16qi_vspltisw_addself ();\n-  v16qi_vspltisw_neg ();\n-\n-  v8hi_vspltisb ();\n-  v8hi_vspltisb_addself ();\n-  v8hi_vspltisb_neg ();\n-  v8hi_vspltish ();\n-  v8hi_vspltish_neg ();\n-  v8hi_vspltish_addself ();\n-  v8hi_vspltish_neg_addself ();\n-  v8hi_vspltisw ();\n-  v8hi_vspltisw_addself ();\n-  v8hi_vspltisw_neg ();\n-\n-  v4si_vspltisb ();\n-  v4si_vspltisb_addself ();\n-  v4si_vspltisb_neg ();\n-  v4si_vspltish ();\n-  v4si_vspltish_addself ();\n-  v4si_vspltish_neg ();\n-  v4si_vspltisw ();\n-  v4si_vspltisw_neg ();\n-  v4si_vspltisw_addself ();\n-  v4si_vspltisw_neg_addself ();\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler-not \"lvx\" { target { powerpc*le-*-* } } } } */"}]}