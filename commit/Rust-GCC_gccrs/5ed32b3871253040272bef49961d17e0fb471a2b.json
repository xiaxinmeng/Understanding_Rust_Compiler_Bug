{"sha": "5ed32b3871253040272bef49961d17e0fb471a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkMzJiMzg3MTI1MzA0MDI3MmJlZjQ5OTYxZDE3ZTBmYjQ3MWEyYg==", "commit": {"author": {"name": "Aaron Luchko", "email": "aluchko@redhat.com", "date": "2005-06-30T23:19:36Z"}, "committer": {"name": "Aaron Luchko", "email": "aluchko@gcc.gnu.org", "date": "2005-06-30T23:19:36Z"}, "message": "* gnu/classpath/jdwp/util/JdwpString.java: New file.\n\nFrom-SVN: r101482", "tree": {"sha": "15f5d5692256ecfa7738130fca120649dfb1f050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f5d5692256ecfa7738130fca120649dfb1f050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ed32b3871253040272bef49961d17e0fb471a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed32b3871253040272bef49961d17e0fb471a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed32b3871253040272bef49961d17e0fb471a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed32b3871253040272bef49961d17e0fb471a2b/comments", "author": null, "committer": null, "parents": [{"sha": "39ce81c9c560d14c746714e6ec1621cad38bae93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ce81c9c560d14c746714e6ec1621cad38bae93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ce81c9c560d14c746714e6ec1621cad38bae93"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "e9cc451c107bc47273baa349a2b9160a7810dc57", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed32b3871253040272bef49961d17e0fb471a2b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed32b3871253040272bef49961d17e0fb471a2b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5ed32b3871253040272bef49961d17e0fb471a2b", "patch": "@@ -1,3 +1,7 @@\n+2005-06-30  Aaron Luchko  <aluchko@redhat.com>\n+\n+\t* gnu/classpath/jdwp/util/JdwpString.java: New file.\n+\n 2005-06-30  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/transport/JdwpPacket.java (write): New method."}, {"sha": "592249fccb24e556b8630b379f3811f24f8f06d1", "filename": "libjava/gnu/classpath/jdwp/util/JdwpString.java", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed32b3871253040272bef49961d17e0fb471a2b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FJdwpString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed32b3871253040272bef49961d17e0fb471a2b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FJdwpString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FJdwpString.java?ref=5ed32b3871253040272bef49961d17e0fb471a2b", "patch": "@@ -0,0 +1,95 @@\n+/* JdwpString.java -- utility class to read and write jdwp strings\n+   Copyright (C) 2005 Free Software Foundation\n+ \n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.util;\n+\n+import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A class to compute the JDWP representation of Strings.\n+ * \n+ * @author Aaron Luchko <aluchko@redhat.com>\n+ */\n+public class JdwpString\n+{\n+\n+  /**\n+   * Write this String to the outStream as a string understood by jdwp.\n+   * \n+   * @param os write the String here\n+   * @param string the String to write\n+   * @throws IOException\n+   */\n+  public static void writeString(DataOutputStream os, String string)\n+      throws IOException\n+  {\n+    // Get the bytes of the string as a string in UTF-8\n+    byte[] strBytes = string.getBytes(\"UTF-8\");\n+    os.writeInt(strBytes.length);\n+    os.write(strBytes);\n+  }\n+\n+  /**\n+   * Read a jdwp style string from the ByteBuffer.\n+   * \n+   * @param bb contains the string\n+   * @return the String that was read\n+   * @throws JdwpInternalErrorException bb didn't contain a value UTF-8 string\n+   */\n+  public static String readString(ByteBuffer bb)\n+      throws JdwpInternalErrorException\n+  {\n+    int length = bb.getInt();\n+    byte[] strBytes = new byte[length];\n+    bb.get(strBytes);\n+    try\n+      {\n+        return new String(strBytes, \"UTF-8\");\n+      }\n+    catch (UnsupportedEncodingException ex)\n+      {\n+        // Any string from the VM should be in UTF-8 so an encoding error\n+        // shouldn't be possible\n+        throw new JdwpInternalErrorException(ex);\n+      }\n+  }\n+}"}]}