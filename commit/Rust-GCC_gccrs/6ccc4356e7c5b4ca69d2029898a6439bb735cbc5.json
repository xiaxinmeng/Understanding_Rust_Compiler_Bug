{"sha": "6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "node_id": "C_kwDOANBUbNoAKDZjY2M0MzU2ZTdjNWI0Y2E2OWQyMDI5ODk4YTY0MzliYjczNWNiYzU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-03-07T13:56:34Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-04-29T08:43:36Z"}, "message": "Prefer global range info setters that take a range.\n\nThis patch consolidates the multiple ways we have of storing global\nranges into one accepting a range.\n\nIn an upcoming patch series later this cycle we will be providing a\nway to store iranges globally, as opposed to the mechanism we have now\nwhich squishes wider ranges into value_range's.  This is preparation\nfor such work.\n\nTested and benchmarked on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-evrp-analyze.cc\n\t(evrp_range_analyzer::set_ssa_range_info): Use *range_info methods\n\tthat take a range.\n\t* gimple-ssa-sprintf.cc (try_substitute_return_value): Same.\n\t* ipa-prop.cc (ipcp_update_vr): Same.\n\t* tree-inline.cc (remap_ssa_name): Same.\n\t* tree-ssa-copy.cc (fini_copy_prop): Same.\n\t* tree-ssa-math-opts.cc (optimize_spaceship): Same.\n\t* tree-ssa-phiopt.cc (replace_phi_edge_with_variable): Same.\n\t* tree-ssa-pre.cc (insert_into_preds_of_block): Same.\n\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt): Same.\n\t* tree-ssa-strlen.cc (set_strlen_range): Same.\n\t(strlen_pass::handle_builtin_string_cmp): Same.\n\t* tree-ssanames.cc (set_range_info): Make static.\n\t(duplicate_ssa_name_range_info): Make static and add a new variant\n\tcalling the static.\n\t* tree-ssanames.h (set_range_info): Remove version taking wide ints.\n\t(duplicate_ssa_name_range_info): Remove version taking a\n\trange_info_def and replace with a version taking SSA names.\n\t* tree-vect-loop-manip.cc (vect_gen_vector_loop_niters): Use *range_info methods\n\tthat take a range.\n\t(vect_do_peeling): Same.\n\t* tree-vrp.cc (vrp_asserts::remove_range_assertions): Same.\n\t* vr-values.cc (simplify_truth_ops_using_ranges): Same.", "tree": {"sha": "5a61901594d131055e574313a5471b8395574fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a61901594d131055e574313a5471b8395574fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dea11cf4388fb2cd8c3894d3ce5583765e71a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dea11cf4388fb2cd8c3894d3ce5583765e71a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dea11cf4388fb2cd8c3894d3ce5583765e71a4"}], "stats": {"total": 141, "additions": 79, "deletions": 62}, "files": [{"sha": "5b6c9f8fe1bf3a06ff31c9a1f717eb72a9dd2096", "filename": "gcc/gimple-ssa-evrp-analyze.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fgimple-ssa-evrp-analyze.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fgimple-ssa-evrp-analyze.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -110,9 +110,7 @@ evrp_range_analyzer::set_ssa_range_info (tree lhs, value_range_equiv *vr)\n   if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n     {\n       if (!vr->varying_p () && vr->constant_p ())\n-\tset_range_info (lhs, vr->kind (),\n-\t\t\twi::to_wide (vr->min ()),\n-\t\t\twi::to_wide (vr->max ()));\n+\tset_range_info (lhs, *vr);\n     }\n   else if (POINTER_TYPE_P (TREE_TYPE (lhs))\n \t   && range_includes_zero_p (vr) == 0)"}, {"sha": "9a84fffed1aa255cbe50ce0ee8765c4ebfd35012", "filename": "gcc/gimple-ssa-sprintf.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fgimple-ssa-sprintf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fgimple-ssa-sprintf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -4231,7 +4231,8 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \n \t  wide_int min = wi::shwi (retval[0], prec);\n \t  wide_int max = wi::shwi (retval[1], prec);\n-\t  set_range_info (lhs, VR_RANGE, min, max);\n+\t  value_range r (TREE_TYPE (lhs), min, max);\n+\t  set_range_info (lhs, r);\n \n \t  setrange = true;\n \t}"}, {"sha": "80e67e93e12439a6960736b81502f7bfd619a7c7", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -5987,11 +5987,13 @@ ipcp_update_vr (struct cgraph_node *node)\n \t\t  print_decs (vr[i].max, dump_file);\n \t\t  fprintf (dump_file, \"]\\n\");\n \t\t}\n-\t      set_range_info (ddef, vr[i].type,\n-\t\t\t      wide_int_storage::from (vr[i].min, prec,\n-\t\t\t\t\t\t      TYPE_SIGN (type)),\n-\t\t\t      wide_int_storage::from (vr[i].max, prec,\n-\t\t\t\t\t\t      TYPE_SIGN (type)));\n+\t      value_range v (type,\n+\t\t\t     wide_int_storage::from (vr[i].min, prec,\n+\t\t\t\t\t\t     TYPE_SIGN (type)),\n+\t\t\t     wide_int_storage::from (vr[i].max, prec,\n+\t\t\t\t\t\t     TYPE_SIGN (type)),\n+\t\t\t     vr[i].type);\n+\t      set_range_info (ddef, v);\n \t    }\n \t  else if (POINTER_TYPE_P (TREE_TYPE (ddef))\n \t\t   && vr[i].nonzero_p (TREE_TYPE (ddef)))"}, {"sha": "29bb758b7bcfb2606264acc30eb1aa5a2c25e07f", "filename": "gcc/tree-inline.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -253,8 +253,7 @@ remap_ssa_name (tree name, copy_body_data *id)\n       /* So can range-info.  */\n       if (!POINTER_TYPE_P (TREE_TYPE (name))\n \t  && SSA_NAME_RANGE_INFO (name))\n-\tduplicate_ssa_name_range_info (new_tree, SSA_NAME_RANGE_TYPE (name),\n-\t\t\t\t       SSA_NAME_RANGE_INFO (name));\n+\tduplicate_ssa_name_range_info (new_tree, name);\n       return new_tree;\n     }\n \n@@ -291,8 +290,7 @@ remap_ssa_name (tree name, copy_body_data *id)\n       /* So can range-info.  */\n       if (!POINTER_TYPE_P (TREE_TYPE (name))\n \t  && SSA_NAME_RANGE_INFO (name))\n-\tduplicate_ssa_name_range_info (new_tree, SSA_NAME_RANGE_TYPE (name),\n-\t\t\t\t       SSA_NAME_RANGE_INFO (name));\n+\tduplicate_ssa_name_range_info (new_tree, name);\n       if (SSA_NAME_IS_DEFAULT_DEF (name))\n \t{\n \t  /* By inlining function having uninitialized variable, we might"}, {"sha": "7d636ecd4389ea7a58293074bffab6bb86093103", "filename": "gcc/tree-ssa-copy.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -556,9 +556,7 @@ fini_copy_prop (void)\n \t\t   && SSA_NAME_RANGE_INFO (var)\n \t\t   && !SSA_NAME_RANGE_INFO (copy_of[i].value)\n \t\t   && var_bb == copy_of_bb)\n-\t    duplicate_ssa_name_range_info (copy_of[i].value,\n-\t\t\t\t\t   SSA_NAME_RANGE_TYPE (var),\n-\t\t\t\t\t   SSA_NAME_RANGE_INFO (var));\n+\t    duplicate_ssa_name_range_info (copy_of[i].value, var);\n \t}\n     }\n "}, {"sha": "b528b0523ff104844eeca2c3c30ad775446de635", "filename": "gcc/tree-ssa-math-opts.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-math-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-math-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -4862,7 +4862,8 @@ optimize_spaceship (gimple *stmt)\n \n   wide_int wm1 = wi::minus_one (TYPE_PRECISION (integer_type_node));\n   wide_int w2 = wi::two (TYPE_PRECISION (integer_type_node));\n-  set_range_info (lhs, VR_RANGE, wm1, w2);\n+  value_range vr (TREE_TYPE (lhs), wm1, w2);\n+  set_range_info (lhs, vr);\n }\n \n "}, {"sha": "8c9c46d41f1957ea2c0727bd7eba28cee5ce1218", "filename": "gcc/tree-ssa-phiopt.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-phiopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-phiopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -416,9 +416,7 @@ replace_phi_edge_with_variable (basic_block cond_block,\n       && SSA_NAME_RANGE_INFO (phi_result)\n       && gimple_bb (SSA_NAME_DEF_STMT (new_tree)) == cond_block\n       && dbg_cnt (phiopt_edge_range))\n-    duplicate_ssa_name_range_info (new_tree,\n-\t\t\t\t   SSA_NAME_RANGE_TYPE (phi_result),\n-\t\t\t\t   SSA_NAME_RANGE_INFO (phi_result));\n+    duplicate_ssa_name_range_info (new_tree, phi_result);\n \n   /* Change the PHI argument to new.  */\n   SET_USE (PHI_ARG_DEF_PTR (phi, e->dest_idx), new_tree);"}, {"sha": "a578ce6dfa495c89a27bfd09ce207b1235097977", "filename": "gcc/tree-ssa-pre.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-pre.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-pre.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -3246,14 +3246,11 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n \t  && r.kind () == VR_RANGE\n \t  && !wi::neg_p (r.lower_bound (), SIGNED)\n \t  && !wi::neg_p (r.upper_bound (), SIGNED))\n-\t/* Just handle extension and sign-changes of all-positive ranges.  */\n-\tset_range_info (temp, VR_RANGE,\n-\t\t\twide_int_storage::from (r.lower_bound (),\n-\t\t\t\t\t\tTYPE_PRECISION (type),\n-\t\t\t\t\t\tTYPE_SIGN (type)),\n-\t\t\twide_int_storage::from (r.upper_bound (),\n-\t\t\t\t\t\tTYPE_PRECISION (type),\n-\t\t\t\t\t\tTYPE_SIGN (type)));\n+\t{\n+\t  /* Just handle extension and sign-changes of all-positive ranges.  */\n+\t  range_cast (r, type);\n+\t  set_range_info (temp, r);\n+\t}\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "3c90c1e23e6c28b6b4a5fe245cf86bd1a47b37fd", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -6304,9 +6304,7 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t\t   && SSA_NAME_RANGE_INFO (lhs)\n \t\t   && ! SSA_NAME_RANGE_INFO (sprime)\n \t\t   && b == sprime_b)\n-\t    duplicate_ssa_name_range_info (sprime,\n-\t\t\t\t\t   SSA_NAME_RANGE_TYPE (lhs),\n-\t\t\t\t\t   SSA_NAME_RANGE_INFO (lhs));\n+\t    duplicate_ssa_name_range_info (sprime, lhs);\n \t}\n \n       /* Inhibit the use of an inserted PHI on a loop header when"}, {"sha": "1e5f911fedb226476b0a8f923a5e09d29777ff30", "filename": "gcc/tree-ssa-strlen.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-strlen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssa-strlen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -1951,7 +1951,8 @@ set_strlen_range (tree lhs, wide_int min, wide_int max,\n   if (min == max)\n     return wide_int_to_tree (size_type_node, min);\n \n-  set_range_info (lhs, VR_RANGE, min, max);\n+  value_range vr (TREE_TYPE (lhs), min, max);\n+  set_range_info (lhs, vr);\n   return lhs;\n }\n \n@@ -4343,8 +4344,9 @@ strlen_pass::handle_builtin_string_cmp ()\n \t       known to be unequal set the range of the result to non-zero.\n \t       This allows the call to be eliminated if its result is only\n \t       used in tests for equality to zero.  */\n-\t    wide_int zero = wi::zero (TYPE_PRECISION (TREE_TYPE (lhs)));\n-\t    set_range_info (lhs, VR_ANTI_RANGE, zero, zero);\n+\t    value_range nz;\n+\t    nz.set_nonzero (TREE_TYPE (lhs));\n+\t    set_range_info (lhs, nz);\n \t    return false;\n \t  }\n \t/* When the two strings are definitely equal (such as when they"}, {"sha": "c957597af4f587d36d64d5c109deb6348143f09e", "filename": "gcc/tree-ssanames.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssanames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssanames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -389,7 +389,7 @@ set_range_info_raw (tree name, enum value_range_kind range_type,\n /* Store range information RANGE_TYPE, MIN, and MAX to tree ssa_name\n    NAME while making sure we don't store useless range info.  */\n \n-void\n+static void\n set_range_info (tree name, enum value_range_kind range_type,\n \t\tconst wide_int_ref &min, const wide_int_ref &max)\n {\n@@ -720,7 +720,7 @@ duplicate_ssa_name_ptr_info (tree name, struct ptr_info_def *ptr_info)\n \n /* Creates a duplicate of the range_info_def at RANGE_INFO of type\n    RANGE_TYPE for use by the SSA name NAME.  */\n-void\n+static void\n duplicate_ssa_name_range_info (tree name, enum value_range_kind range_type,\n \t\t\t       struct range_info_def *range_info)\n {\n@@ -743,6 +743,14 @@ duplicate_ssa_name_range_info (tree name, enum value_range_kind range_type,\n   SSA_NAME_RANGE_INFO (name) = new_range_info;\n }\n \n+void\n+duplicate_ssa_name_range_info (tree name, tree src)\n+{\n+  gcc_checking_assert (!POINTER_TYPE_P (TREE_TYPE (src)));\n+  duplicate_ssa_name_range_info (name,\n+\t\t\t\t SSA_NAME_RANGE_TYPE (src),\n+\t\t\t\t SSA_NAME_RANGE_INFO (src));\n+}\n \n \n /* Creates a duplicate of a ssa name NAME tobe defined by statement STMT"}, {"sha": "8c419b13e6a986b2d423f525475df100322776d4", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -67,8 +67,6 @@ struct GTY ((variable_size)) range_info_def {\n     if (VAR)\n \n /* Sets the value range to SSA.  */\n-extern void set_range_info (tree, enum value_range_kind, const wide_int_ref &,\n-\t\t\t    const wide_int_ref &);\n extern void set_range_info (tree, const value_range &);\n extern void set_nonzero_bits (tree, const wide_int_ref &);\n extern wide_int get_nonzero_bits (const_tree);\n@@ -92,8 +90,7 @@ extern void set_ptr_nonnull (tree);\n extern tree copy_ssa_name_fn (struct function *, tree, gimple *);\n extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n extern tree duplicate_ssa_name_fn (struct function *, tree, gimple *);\n-extern void duplicate_ssa_name_range_info (tree, enum value_range_kind,\n-\t\t\t\t\t   struct range_info_def *);\n+extern void duplicate_ssa_name_range_info (tree dest, tree src);\n extern void reset_flow_sensitive_info (tree);\n extern void reset_flow_sensitive_info_in_bb (basic_block);\n extern void release_defs (gimple *);"}, {"sha": "3eddda66a66940136f93dc20df517ccc3fb5a1d0", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -2056,22 +2056,28 @@ vect_gen_vector_loop_niters (loop_vec_info loop_vinfo, tree niters,\n       if (stmts != NULL && log_vf)\n \t{\n \t  if (niters_no_overflow)\n-\t    set_range_info (niters_vector, VR_RANGE,\n-\t\t\t    wi::one (TYPE_PRECISION (type)),\n-\t\t\t    wi::rshift (wi::max_value (TYPE_PRECISION (type),\n-\t\t\t\t\t\t       TYPE_SIGN (type)),\n-\t\t\t\t\texact_log2 (const_vf),\n-\t\t\t\t\tTYPE_SIGN (type)));\n+\t    {\n+\t      value_range vr (type,\n+\t\t\t      wi::one (TYPE_PRECISION (type)),\n+\t\t\t      wi::rshift (wi::max_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t\t TYPE_SIGN (type)),\n+\t\t\t\t\t  exact_log2 (const_vf),\n+\t\t\t\t\t  TYPE_SIGN (type)));\n+\t      set_range_info (niters_vector, vr);\n+\t    }\n \t  /* For VF == 1 the vector IV might also overflow so we cannot\n \t     assert a minimum value of 1.  */\n \t  else if (const_vf > 1)\n-\t    set_range_info (niters_vector, VR_RANGE,\n-\t\t\t    wi::one (TYPE_PRECISION (type)),\n-\t\t\t    wi::rshift (wi::max_value (TYPE_PRECISION (type),\n-\t\t\t\t\t\t       TYPE_SIGN (type))\n-\t\t\t\t\t- (const_vf - 1),\n-\t\t\t\t\texact_log2 (const_vf), TYPE_SIGN (type))\n-\t\t\t    + 1);\n+\t    {\n+\t      value_range vr (type,\n+\t\t\t      wi::one (TYPE_PRECISION (type)),\n+\t\t\t      wi::rshift (wi::max_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t\t TYPE_SIGN (type))\n+\t\t\t\t\t  - (const_vf - 1),\n+\t\t\t\t\t  exact_log2 (const_vf), TYPE_SIGN (type))\n+\t\t\t      + 1);\n+\t      set_range_info (niters_vector, vr);\n+\t    }\n \t}\n     }\n   *niters_vector_ptr = niters_vector;\n@@ -2888,9 +2894,12 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n       /* It's guaranteed that vector loop bound before vectorization is at\n \t least VF, so set range information for newly generated var.  */\n       if (new_var_p)\n-\tset_range_info (niters, VR_RANGE,\n-\t\t\twi::to_wide (build_int_cst (type, vf)),\n-\t\t\twi::to_wide (TYPE_MAX_VALUE (type)));\n+\t{\n+\t  value_range vr (type,\n+\t\t\t  wi::to_wide (build_int_cst (type, vf)),\n+\t\t\t  wi::to_wide (TYPE_MAX_VALUE (type)));\n+\t  set_range_info (niters, vr);\n+\t}\n \n       /* Prolog iterates at most bound_prolog times, latch iterates at\n \t most bound_prolog - 1 times.  */"}, {"sha": "ab6aa11c0440172adefc052e02f68dcb1d13f353", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -3742,9 +3742,16 @@ vrp_asserts::remove_range_assertions ()\n \t\t    && all_imm_uses_in_stmt_or_feed_cond (var, stmt,\n \t\t\t\t\t\t\t  single_pred (bb)))\n \t\t  {\n-\t\t    set_range_info (var, SSA_NAME_RANGE_TYPE (lhs),\n-\t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->get_min (),\n-\t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->get_max ());\n+\t\t    /* We could use duplicate_ssa_name_range_info here\n+\t\t       instead of peeking inside SSA_NAME_RANGE_INFO,\n+\t\t       but the aforementioned asserts that the\n+\t\t       destination has no global range.  This is\n+\t\t       slated for removal anyhow.  */\n+\t\t    value_range r (TREE_TYPE (lhs),\n+\t\t\t\t   SSA_NAME_RANGE_INFO (lhs)->get_min (),\n+\t\t\t\t   SSA_NAME_RANGE_INFO (lhs)->get_max (),\n+\t\t\t\t   SSA_NAME_RANGE_TYPE (lhs));\n+\t\t    set_range_info (var, r);\n \t\t    maybe_set_nonzero_bits (single_pred_edge (bb), var);\n \t\t  }\n \t      }"}, {"sha": "122586fbcc819a95d5b6f5c6e00c0531c71c703e", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccc4356e7c5b4ca69d2029898a6439bb735cbc5/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=6ccc4356e7c5b4ca69d2029898a6439bb735cbc5", "patch": "@@ -2980,9 +2980,12 @@ simplify_using_ranges::simplify_truth_ops_using_ranges\n       gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n       if (INTEGRAL_TYPE_P (TREE_TYPE (tem))\n \t  && TYPE_PRECISION (TREE_TYPE (tem)) > 1)\n-\tset_range_info (tem, VR_RANGE,\n-\t\t\twi::zero (TYPE_PRECISION (TREE_TYPE (tem))),\n-\t\t\twi::one (TYPE_PRECISION (TREE_TYPE (tem))));\n+\t{\n+\t  value_range vr (TREE_TYPE (tem),\n+\t\t\t  wi::zero (TYPE_PRECISION (TREE_TYPE (tem))),\n+\t\t\t  wi::one (TYPE_PRECISION (TREE_TYPE (tem))));\n+\t  set_range_info (tem, vr);\n+\t}\n       gimple_assign_set_rhs_with_ops (gsi, NOP_EXPR, tem);\n     }\n   /* Or without.  */"}]}