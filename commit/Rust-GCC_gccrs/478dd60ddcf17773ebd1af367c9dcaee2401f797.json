{"sha": "478dd60ddcf17773ebd1af367c9dcaee2401f797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4ZGQ2MGRkY2YxNzc3M2ViZDFhZjM2N2M5ZGNhZWUyNDAxZjc5Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-15T14:32:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-15T14:32:41Z"}, "message": "Machine-readable diagnostic output (PR other/19165)\n\nThis patch implements a -fdiagnostics-format=json option which\nconverts the diagnostics to be output to stderr in a JSON format;\nsee the documentation in invoke.texi.\n\nLogically-related diagnostics are nested at the JSON level, using\nthe auto_diagnostic_group mechanism.\n\ngcc/ChangeLog:\n\tPR other/19165\n\t* Makefile.in (OBJS): Move json.o to...\n\t(OBJS-libcommon): ...here and add diagnostic-format-json.o.\n\t* common.opt (fdiagnostics-format=): New option.\n\t(diagnostics_output_format): New enum.\n\t* diagnostic-format-json.cc: New file.\n\t* diagnostic.c (default_diagnostic_final_cb): New function, taken\n\tfrom start of diagnostic_finish.\n\t(diagnostic_initialize): Initialize final_cb to\n\tdefault_diagnostic_final_cb.\n\t(diagnostic_finish): Move \"being treated as errors\" messages to\n\tdefault_diagnostic_final_cb.  Call any final_cb.\n\t(default_diagnostic_finalizer): Add diagnostic_t param.\n\t(diagnostic_report_diagnostic): Pass \"orig_diag_kind\" to\n\tdiagnostic_finalizer callback.\n\t* diagnostic.h (enum diagnostics_output_format): New enum.\n\t(diagnostic_finalizer_fn): Reimplement, adding diagnostic_t param.\n\t(struct diagnostic_context): Add \"final_cb\".\n\t(default_diagnostic_finalizer): Add diagnostic_t param.\n\t(diagnostic_output_format_init): New decl.\n\t* doc/invoke.texi (-fdiagnostics-format): New option.\n\t* dwarf2out.c (gen_producer_string): Ignore\n\tOPT_fdiagnostics_format_.\n\t* gcc.c (driver_handle_option): Handle OPT_fdiagnostics_format_.\n\t* lto-wrapper.c (append_diag_options): Ignore it.\n\t* opts.c (common_handle_option): Handle it.\n\ngcc/c-family/ChangeLog:\n\tPR other/19165\n\t* c-opts.c (c_diagnostic_finalizer): Add diagnostic_t param.\n\ngcc/fortran/ChangeLog:\n\tPR other/19165\n\t* error.c (gfc_diagnostic_finalizer): Add diagnostic_t param.\n\ngcc/jit/ChangeLog:\n\tPR other/19165\n\t* dummy-frontend.c (jit_begin_diagnostic): Add diagnostic_t param.\n\ngcc/testsuite/ChangeLog:\n\tPR other/19165\n\t* c-c++-common/diagnostic-format-json-1.c: New test.\n\t* c-c++-common/diagnostic-format-json-2.c: New test.\n\t* c-c++-common/diagnostic-format-json-3.c: New test.\n\t* c-c++-common/diagnostic-format-json-4.c: New test.\n\t* c-c++-common/diagnostic-format-json-5.c: New test.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(custom_diagnostic_finalizer): Add diagnostic_t param.\n\t* gcc.dg/plugin/location_overflow_plugin.c\n\t(verify_unpacked_ranges): Likewise.\n\t(verify_no_columns): Likewise.\n\t* gfortran.dg/diagnostic-format-json-1.F90: New test.\n\t* gfortran.dg/diagnostic-format-json-2.F90: New test.\n\t* gfortran.dg/diagnostic-format-json-3.F90: New test.\n\nFrom-SVN: r266186", "tree": {"sha": "9504f45599f1a9e4f54c7ffbbe41f73bc1c04e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9504f45599f1a9e4f54c7ffbbe41f73bc1c04e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/478dd60ddcf17773ebd1af367c9dcaee2401f797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478dd60ddcf17773ebd1af367c9dcaee2401f797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478dd60ddcf17773ebd1af367c9dcaee2401f797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478dd60ddcf17773ebd1af367c9dcaee2401f797/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef190c93b07f04d61e28d70bb9a360fd2f3efbde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef190c93b07f04d61e28d70bb9a360fd2f3efbde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef190c93b07f04d61e28d70bb9a360fd2f3efbde"}], "stats": {"total": 889, "additions": 861, "deletions": 28}, "files": [{"sha": "8555d42d0094746be362b2112d2a85208960a694", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1,3 +1,32 @@\n+2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/19165\n+\t* Makefile.in (OBJS): Move json.o to...\n+\t(OBJS-libcommon): ...here and add diagnostic-format-json.o.\n+\t* common.opt (fdiagnostics-format=): New option.\n+\t(diagnostics_output_format): New enum.\n+\t* diagnostic-format-json.cc: New file.\n+\t* diagnostic.c (default_diagnostic_final_cb): New function, taken\n+\tfrom start of diagnostic_finish.\n+\t(diagnostic_initialize): Initialize final_cb to\n+\tdefault_diagnostic_final_cb.\n+\t(diagnostic_finish): Move \"being treated as errors\" messages to\n+\tdefault_diagnostic_final_cb.  Call any final_cb.\n+\t(default_diagnostic_finalizer): Add diagnostic_t param.\n+\t(diagnostic_report_diagnostic): Pass \"orig_diag_kind\" to\n+\tdiagnostic_finalizer callback.\n+\t* diagnostic.h (enum diagnostics_output_format): New enum.\n+\t(diagnostic_finalizer_fn): Reimplement, adding diagnostic_t param.\n+\t(struct diagnostic_context): Add \"final_cb\".\n+\t(default_diagnostic_finalizer): Add diagnostic_t param.\n+\t(diagnostic_output_format_init): New decl.\n+\t* doc/invoke.texi (-fdiagnostics-format): New option.\n+\t* dwarf2out.c (gen_producer_string): Ignore\n+\tOPT_fdiagnostics_format_.\n+\t* gcc.c (driver_handle_option): Handle OPT_fdiagnostics_format_.\n+\t* lto-wrapper.c (append_diag_options): Ignore it.\n+\t* opts.c (common_handle_option): Handle it.\n+\n 2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/88015"}, {"sha": "ec793175c3bdb60e958271b5589f2119e4ae9092", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1395,7 +1395,6 @@ OBJS = \\\n \tira-color.o \\\n \tira-emit.o \\\n \tira-lives.o \\\n-\tjson.o \\\n \tjump.o \\\n \tlanghooks.o \\\n \tlcm.o \\\n@@ -1619,6 +1618,7 @@ OBJS = \\\n # Objects in libcommon.a, potentially used by all host binaries and with\n # no target dependencies.\n OBJS-libcommon = diagnostic.o diagnostic-color.o diagnostic-show-locus.o \\\n+\tdiagnostic-format-json.o json.o \\\n \tedit-context.o \\\n \tpretty-print.o intl.o \\\n \tsbitmap.o \\"}, {"sha": "93ee0d4947b6624a500e83a2f179a4c134f979ff", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/19165\n+\t* c-opts.c (c_diagnostic_finalizer): Add diagnostic_t param.\n+\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1236R1 - Signed integers are two's complement"}, {"sha": "ce015bbaaf4336fba48fd7f276144522daa62377", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -165,7 +165,8 @@ c_common_option_lang_mask (void)\n /* Diagnostic finalizer for C/C++/Objective-C/Objective-C++.  */\n static void\n c_diagnostic_finalizer (diagnostic_context *context,\n-\t\t\tdiagnostic_info *diagnostic)\n+\t\t\tdiagnostic_info *diagnostic,\n+\t\t\tdiagnostic_t)\n {\n   diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n   /* By default print macro expansion contexts in the diagnostic"}, {"sha": "72a713593c3da10c0e5596e24ef164ff7f40dbbc", "filename": "gcc/common.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1277,6 +1277,23 @@ Enum(diagnostic_color_rule) String(always) Value(DIAGNOSTICS_COLOR_YES)\n EnumValue\n Enum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)\n \n+fdiagnostics-format=\n+Common Joined RejectNegative Enum(diagnostics_output_format)\n+-fdiagnostics-format=[text|json] Select output format\n+\n+; Required for these enum values.\n+SourceInclude\n+diagnostic.h\n+\n+Enum\n+Name(diagnostics_output_format) Type(int)\n+\n+EnumValue\n+Enum(diagnostics_output_format) String(text) Value(DIAGNOSTICS_OUTPUT_FORMAT_TEXT)\n+\n+EnumValue\n+Enum(diagnostics_output_format) String(json) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON)\n+\n fdiagnostics-parseable-fixits\n Common Var(flag_diagnostics_parseable_fixits)\n Print fix-it hints in machine-readable form."}, {"sha": "8d56120deae7ace59984122349fc926563ccd8ba", "filename": "gcc/diagnostic-format-json.cc", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,264 @@\n+/* JSON output for diagnostics\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include \"json.h\"\n+\n+/* The top-level JSON array of pending diagnostics.  */\n+\n+static json::array *toplevel_array;\n+\n+/* The JSON object for the current diagnostic group.  */\n+\n+static json::object *cur_group;\n+\n+/* The JSON array for the \"children\" array within the current diagnostic\n+   group.  */\n+\n+static json::array *cur_children_array;\n+\n+/* Generate a JSON object for LOC.  */\n+\n+static json::object *\n+json_from_expanded_location (location_t loc)\n+{\n+  expanded_location exploc = expand_location (loc);\n+  json::object *result = new json::object ();\n+  result->set (\"file\", new json::string (exploc.file));\n+  result->set (\"line\", new json::number (exploc.line));\n+  result->set (\"column\", new json::number (exploc.column));\n+  return result;\n+}\n+\n+/* Generate a JSON object for LOC_RANGE.  */\n+\n+static json::object *\n+json_from_location_range (const location_range *loc_range, unsigned range_idx)\n+{\n+  location_t caret_loc = get_pure_location (loc_range->m_loc);\n+\n+  if (caret_loc == UNKNOWN_LOCATION)\n+    return NULL;\n+\n+  location_t start_loc = get_start (loc_range->m_loc);\n+  location_t finish_loc = get_finish (loc_range->m_loc);\n+\n+  json::object *result = new json::object ();\n+  result->set (\"caret\", json_from_expanded_location (caret_loc));\n+  if (start_loc != caret_loc)\n+    result->set (\"start\", json_from_expanded_location (start_loc));\n+  if (finish_loc != caret_loc)\n+    result->set (\"finish\", json_from_expanded_location (finish_loc));\n+\n+  if (loc_range->m_label)\n+    {\n+      label_text text;\n+      text = loc_range->m_label->get_text (range_idx);\n+      if (text.m_buffer)\n+\tresult->set (\"label\", new json::string (text.m_buffer));\n+      text.maybe_free ();\n+    }\n+\n+  return result;\n+}\n+\n+/* Generate a JSON object for HINT.  */\n+\n+static json::object *\n+json_from_fixit_hint (const fixit_hint *hint)\n+{\n+  json::object *fixit_obj = new json::object ();\n+\n+  location_t start_loc = hint->get_start_loc ();\n+  fixit_obj->set (\"start\", json_from_expanded_location (start_loc));\n+  location_t next_loc = hint->get_next_loc ();\n+  fixit_obj->set (\"next\", json_from_expanded_location (next_loc));\n+  fixit_obj->set (\"string\", new json::string (hint->get_string ()));\n+\n+  return fixit_obj;\n+}\n+\n+/* No-op implementation of \"begin_diagnostic\" for JSON output.  */\n+\n+static void\n+json_begin_diagnostic (diagnostic_context *, diagnostic_info *)\n+{\n+}\n+\n+/* Implementation of \"end_diagnostic\" for JSON output.\n+   Generate a JSON object for DIAGNOSTIC, and store for output\n+   within current diagnostic group.  */\n+\n+static void\n+json_end_diagnostic (diagnostic_context *context, diagnostic_info *diagnostic,\n+\t\t     diagnostic_t orig_diag_kind)\n+{\n+  json::object *diag_obj = new json::object ();\n+\n+  /* Get \"kind\" of diagnostic.  */\n+  {\n+    static const char *const diagnostic_kind_text[] = {\n+#define DEFINE_DIAGNOSTIC_KIND(K, T, C) (T),\n+#include \"diagnostic.def\"\n+#undef DEFINE_DIAGNOSTIC_KIND\n+      \"must-not-happen\"\n+    };\n+    /* Lose the trailing \": \".  */\n+    const char *kind_text = diagnostic_kind_text[diagnostic->kind];\n+    size_t len = strlen (kind_text);\n+    gcc_assert (len > 2);\n+    gcc_assert (kind_text[len - 2] == ':');\n+    gcc_assert (kind_text[len - 1] == ' ');\n+    char *rstrip = xstrdup (kind_text);\n+    rstrip[len - 2] = '\\0';\n+    diag_obj->set (\"kind\", new json::string (rstrip));\n+    free (rstrip);\n+  }\n+\n+  // FIXME: encoding of the message (json::string requires UTF-8)\n+  diag_obj->set (\"message\",\n+\t\t new json::string (pp_formatted_text (context->printer)));\n+  pp_clear_output_area (context->printer);\n+\n+  char *option_text;\n+  option_text = context->option_name (context, diagnostic->option_index,\n+\t\t\t\t      orig_diag_kind, diagnostic->kind);\n+  if (option_text)\n+    {\n+      diag_obj->set (\"option\", new json::string (option_text));\n+      free (option_text);\n+    }\n+\n+  /* If we've already emitted a diagnostic within this auto_diagnostic_group,\n+     then add diag_obj to its \"children\" array.  */\n+  if (cur_group)\n+    {\n+      gcc_assert (cur_children_array);\n+      cur_children_array->append (diag_obj);\n+    }\n+  else\n+    {\n+      /* Otherwise, make diag_obj be the top-level object within the group;\n+\t add a \"children\" array.  */\n+      toplevel_array->append (diag_obj);\n+      cur_group = diag_obj;\n+      cur_children_array = new json::array ();\n+      diag_obj->set (\"children\", cur_children_array);\n+    }\n+\n+  const rich_location *richloc = diagnostic->richloc;\n+\n+  json::array *loc_array = new json::array ();\n+  diag_obj->set (\"locations\", loc_array);\n+\n+  for (unsigned int i = 0; i < richloc->get_num_locations (); i++)\n+    {\n+      const location_range *loc_range = richloc->get_range (i);\n+      json::object *loc_obj = json_from_location_range (loc_range, i);\n+      if (loc_obj)\n+\tloc_array->append (loc_obj);\n+    }\n+\n+  if (richloc->get_num_fixit_hints ())\n+    {\n+      json::array *fixit_array = new json::array ();\n+      diag_obj->set (\"fixits\", fixit_array);\n+      for (unsigned int i = 0; i < richloc->get_num_fixit_hints (); i++)\n+\t{\n+\t  const fixit_hint *hint = richloc->get_fixit_hint (i);\n+\t  json::object *fixit_obj = json_from_fixit_hint (hint);\n+\t  fixit_array->append (fixit_obj);\n+\t}\n+    }\n+\n+  /* TODO: tree-ish things:\n+     TODO: functions\n+     TODO: inlining information\n+     TODO: macro expansion information.  */\n+}\n+\n+/* No-op implementation of \"begin_group_cb\" for JSON output.  */\n+\n+static void\n+json_begin_group (diagnostic_context *)\n+{\n+}\n+\n+/* Implementation of \"end_group_cb\" for JSON output.  */\n+\n+static void\n+json_end_group (diagnostic_context *)\n+{\n+  cur_group = NULL;\n+  cur_children_array = NULL;\n+}\n+\n+/* Callback for final cleanup for JSON output.  */\n+\n+static void\n+json_final_cb (diagnostic_context *)\n+{\n+  /* Flush the top-level array.  */\n+  toplevel_array->dump (stderr);\n+  fprintf (stderr, \"\\n\");\n+  delete toplevel_array;\n+  toplevel_array = NULL;\n+}\n+\n+/* Set the output format for CONTEXT to FORMAT.  */\n+\n+void\n+diagnostic_output_format_init (diagnostic_context *context,\n+\t\t\t       enum diagnostics_output_format format)\n+{\n+  switch (format)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case DIAGNOSTICS_OUTPUT_FORMAT_TEXT:\n+      /* The default; do nothing.  */\n+      break;\n+\n+    case DIAGNOSTICS_OUTPUT_FORMAT_JSON:\n+      {\n+\t/* Set up top-level JSON array.  */\n+\tif (toplevel_array == NULL)\n+\t  toplevel_array = new json::array ();\n+\n+\t/* Override callbacks.  */\n+\tcontext->begin_diagnostic = json_begin_diagnostic;\n+\tcontext->end_diagnostic = json_end_diagnostic;\n+\tcontext->begin_group_cb = json_begin_group;\n+\tcontext->end_group_cb =  json_end_group;\n+\tcontext->final_cb =  json_final_cb;\n+\n+\t/* The option is handled in JSON format, rather than as text.  */\n+\tcontext->show_option_requested = false;\n+\n+\t/* Don't colorize the text.  */\n+\tpp_show_color (context->printer) = false;\n+      }\n+      break;\n+    }\n+}"}, {"sha": "27e98fa94346361d3a7ca7ad90980d5e233d446d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -131,6 +131,28 @@ diagnostic_set_caret_max_width (diagnostic_context *context, int value)\n   context->caret_max_width = value;\n }\n \n+/* Default implementation of final_cb.  */\n+\n+static void\n+default_diagnostic_final_cb (diagnostic_context *context)\n+{\n+  /* Some of the errors may actually have been warnings.  */\n+  if (diagnostic_kind_count (context, DK_WERROR))\n+    {\n+      /* -Werror was given.  */\n+      if (context->warning_as_error_requested)\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s: all warnings being treated as errors\"),\n+\t\t     progname);\n+      /* At least one -Werror= was given.  */\n+      else\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s: some warnings being treated as errors\"),\n+\t\t     progname);\n+      pp_newline_and_flush (context->printer);\n+    }\n+}\n+\n /* Initialize the diagnostic message outputting machinery.  */\n void\n diagnostic_initialize (diagnostic_context *context, int n_opts)\n@@ -185,6 +207,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->diagnostic_group_emission_count = 0;\n   context->begin_group_cb = NULL;\n   context->end_group_cb = NULL;\n+  context->final_cb = default_diagnostic_final_cb;\n }\n \n /* Maybe initialize the color support. We require clients to do this\n@@ -220,21 +243,8 @@ diagnostic_color_init (diagnostic_context *context, int value /*= -1 */)\n void\n diagnostic_finish (diagnostic_context *context)\n {\n-  /* Some of the errors may actually have been warnings.  */\n-  if (diagnostic_kind_count (context, DK_WERROR))\n-    {\n-      /* -Werror was given.  */\n-      if (context->warning_as_error_requested)\n-\tpp_verbatim (context->printer,\n-\t\t     _(\"%s: all warnings being treated as errors\"),\n-\t\t     progname);\n-      /* At least one -Werror= was given.  */\n-      else\n-\tpp_verbatim (context->printer,\n-\t\t     _(\"%s: some warnings being treated as errors\"),\n-\t\t     progname);\n-      pp_newline_and_flush (context->printer);\n-    }\n+  if (context->final_cb)\n+    context->final_cb (context);\n \n   diagnostic_file_cache_fini ();\n \n@@ -642,7 +652,8 @@ default_diagnostic_start_span_fn (diagnostic_context *context,\n \n void\n default_diagnostic_finalizer (diagnostic_context *context,\n-\t\t\t      diagnostic_info *diagnostic)\n+\t\t\t      diagnostic_info *diagnostic,\n+\t\t\t      diagnostic_t)\n {\n   diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n   pp_destroy_prefix (context->printer);\n@@ -1006,7 +1017,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   pp_output_formatted_text (context->printer);\n   if (context->show_option_requested)\n     print_option_information (context, diagnostic, orig_diag_kind);\n-  (*diagnostic_finalizer (context)) (context, diagnostic);\n+  (*diagnostic_finalizer (context)) (context, diagnostic, orig_diag_kind);\n   if (context->parseable_fixits_p)\n     {\n       print_parseable_fixits (context->printer, diagnostic->richloc);"}, {"sha": "a926f9bdd0b0716f268fd1ca7c96fb0b6b463e22", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -24,6 +24,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pretty-print.h\"\n #include \"diagnostic-core.h\"\n \n+/* Enum for overriding the standard output format.  */\n+\n+enum diagnostics_output_format\n+{\n+  /* The default: textual output.  */\n+  DIAGNOSTICS_OUTPUT_FORMAT_TEXT,\n+\n+  /* JSON-based output.  */\n+  DIAGNOSTICS_OUTPUT_FORMAT_JSON\n+};\n+\n /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of\n    its context and its KIND (ice, error, warning, note, ...)  See complete\n    list in diagnostic.def.  */\n@@ -60,7 +71,9 @@ typedef void (*diagnostic_starter_fn) (diagnostic_context *,\n typedef void (*diagnostic_start_span_fn) (diagnostic_context *,\n \t\t\t\t\t  expanded_location);\n \n-typedef diagnostic_starter_fn diagnostic_finalizer_fn;\n+typedef void (*diagnostic_finalizer_fn) (diagnostic_context *,\n+\t\t\t\t\t diagnostic_info *,\n+\t\t\t\t\t diagnostic_t);\n \n class edit_context;\n \n@@ -243,6 +256,9 @@ struct diagnostic_context\n   /* If non-NULL, this will be called when a stack of groups is\n      popped if any diagnostics were emitted within that group.  */\n   void (*end_group_cb) (diagnostic_context * context);\n+\n+  /* Callback for final cleanup.  */\n+  void (*final_cb) (diagnostic_context *context);\n };\n \n static inline void\n@@ -341,7 +357,8 @@ extern char *diagnostic_build_prefix (diagnostic_context *, const diagnostic_inf\n void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_start_span_fn (diagnostic_context *,\n \t\t\t\t       expanded_location);\n-void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n+void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *,\n+\t\t\t\t   diagnostic_t);\n void diagnostic_set_caret_max_width (diagnostic_context *context, int value);\n void diagnostic_action_after_output (diagnostic_context *, diagnostic_t);\n void diagnostic_check_max_errors (diagnostic_context *, bool flush = false);\n@@ -401,5 +418,7 @@ extern char *file_name_as_prefix (diagnostic_context *, const char *);\n \n extern char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n \n+extern void diagnostic_output_format_init (diagnostic_context *,\n+\t\t\t\t\t   enum diagnostics_output_format);\n \n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "535b258d22be33a706bb226680b8ee13435fd9f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -268,6 +268,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n+-fdiagnostics-format=@r{[}text@r{|}json@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-labels -fno-diagnostics-show-line-numbers @gol\n -fdiagnostics-minimum-margin-width=@var{width} @gol\n@@ -3979,6 +3980,193 @@ Do not print column numbers in diagnostics.  This may be necessary if\n diagnostics are being scanned by a program that does not understand the\n column numbers, such as @command{dejagnu}.\n \n+@item -fdiagnostics-format=@var{FORMAT}\n+@opindex fdiagnostics-format\n+Select a different format for printing diagnostics.\n+@var{FORMAT} is @samp{text} or @samp{json}.\n+The default is @samp{text}.\n+\n+The @samp{json} format consists of a top-level JSON array containing JSON\n+objects representing the diagnostics.\n+\n+The JSON is emitted as one line, without formatting; the examples below\n+have been formatted for clarity.\n+\n+Diagnostics can have child diagnostics.  For example, this error and note:\n+\n+@smallexample\n+misleading-indentation.c:15:3: warning: this 'if' clause does not\n+  guard... [-Wmisleading-indentation]\n+   15 |   if (flag)\n+      |   ^~\n+misleading-indentation.c:17:5: note: ...this statement, but the latter\n+  is misleadingly indented as if it were guarded by the 'if'\n+   17 |     y = 2;\n+      |     ^\n+@end smallexample\n+\n+@noindent\n+might be printed in JSON form (after formatting) like this:\n+\n+@smallexample\n+[\n+    @{\n+        \"kind\": \"warning\",\n+        \"locations\": [\n+            @{\n+                \"caret\": @{\n+                    \"column\": 3,\n+                    \"file\": \"misleading-indentation.c\",\n+                    \"line\": 15\n+                @},\n+                \"finish\": @{\n+                    \"column\": 4,\n+                    \"file\": \"misleading-indentation.c\",\n+                    \"line\": 15\n+                @}\n+            @}\n+        ],\n+        \"message\": \"this \\u2018if\\u2019 clause does not guard...\",\n+        \"option\": \"-Wmisleading-indentation\",\n+        \"children\": [\n+            @{\n+                \"kind\": \"note\",\n+                \"locations\": [\n+                    @{\n+                        \"caret\": @{\n+                            \"column\": 5,\n+                            \"file\": \"misleading-indentation.c\",\n+                            \"line\": 17\n+                        @}\n+                    @}\n+                ],\n+                \"message\": \"...this statement, but the latter is @dots{}\"\n+            @}\n+        ]\n+    @},\n+    @dots{}\n+]\n+@end smallexample\n+\n+@noindent\n+where the @code{note} is a child of the @code{warning}.\n+\n+A diagnostic has a @code{kind}.  If this is @code{warning}, then there is\n+an @code{option} key describing the command-line option controlling the\n+warning.\n+\n+A diagnostic can contain zero or more locations.  Each location has up\n+to three positions within it: a @code{caret} position and optional\n+@code{start} and @code{finish} positions.  A location can also have\n+an optional @code{label} string.  For example, this error:\n+\n+@smallexample\n+bad-binary-ops.c:64:23: error: invalid operands to binary + (have 'S' @{aka\n+   'struct s'@} and 'T' @{aka 'struct t'@})\n+   64 |   return callee_4a () + callee_4b ();\n+      |          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n+      |          |              |\n+      |          |              T @{aka struct t@}\n+      |          S @{aka struct s@}\n+@end smallexample\n+\n+@noindent\n+has three locations.  Its primary location is at the ``+'' token at column\n+23.  It has two secondary locations, describing the left and right-hand sides\n+of the expression, which have labels.  It might be printed in JSON form as:\n+\n+@smallexample\n+    @{\n+        \"children\": [],\n+        \"kind\": \"error\",\n+        \"locations\": [\n+            @{\n+                \"caret\": @{\n+                    \"column\": 23, \"file\": \"bad-binary-ops.c\", \"line\": 64\n+                @}\n+            @},\n+            @{\n+                \"caret\": @{\n+                    \"column\": 10, \"file\": \"bad-binary-ops.c\", \"line\": 64\n+                @},\n+                \"finish\": @{\n+                    \"column\": 21, \"file\": \"bad-binary-ops.c\", \"line\": 64\n+                @},\n+                \"label\": \"S @{aka struct s@}\"\n+            @},\n+            @{\n+                \"caret\": @{\n+                    \"column\": 25, \"file\": \"bad-binary-ops.c\", \"line\": 64\n+                @},\n+                \"finish\": @{\n+                    \"column\": 36, \"file\": \"bad-binary-ops.c\", \"line\": 64\n+                @},\n+                \"label\": \"T @{aka struct t@}\"\n+            @}\n+        ],\n+        \"message\": \"invalid operands to binary + @dots{}\"\n+    @}\n+@end smallexample\n+\n+If a diagnostic contains fix-it hints, it has a @code{fixits} array,\n+consisting of half-open intervals, similar to the output of\n+@option{-fdiagnostics-parseable-fixits}.  For example, this diagnostic\n+with a replacement fix-it hint:\n+\n+@smallexample\n+demo.c:8:15: error: 'struct s' has no member named 'colour'; did you\n+  mean 'color'?\n+    8 |   return ptr->colour;\n+      |               ^~~~~~\n+      |               color\n+@end smallexample\n+\n+@noindent\n+might be printed in JSON form as:\n+\n+@smallexample\n+    @{\n+        \"children\": [],\n+        \"fixits\": [\n+            @{\n+                \"next\": @{\n+                    \"column\": 21,\n+                    \"file\": \"demo.c\",\n+                    \"line\": 8\n+                @},\n+                \"start\": @{\n+                    \"column\": 15,\n+                    \"file\": \"demo.c\",\n+                    \"line\": 8\n+                @},\n+                \"string\": \"color\"\n+            @}\n+        ],\n+        \"kind\": \"error\",\n+        \"locations\": [\n+            @{\n+                \"caret\": @{\n+                    \"column\": 15,\n+                    \"file\": \"demo.c\",\n+                    \"line\": 8\n+                @},\n+                \"finish\": @{\n+                    \"column\": 20,\n+                    \"file\": \"demo.c\",\n+                    \"line\": 8\n+                @}\n+            @}\n+        ],\n+        \"message\": \"\\u2018struct s\\u2019 has no member named @dots{}\"\n+    @}\n+@end smallexample\n+\n+@noindent\n+where the fix-it hint suggests replacing the text from @code{start} up\n+to but not including @code{next} with @code{string}'s value.  Deletions\n+are expressed via an empty value for @code{string}, insertions by\n+having @code{start} equal @code{next}.\n+\n @end table\n \n @node Warning Options"}, {"sha": "d2bea2770fd50496ea1ebe22cefe8c1d0ee1d23b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -24267,6 +24267,7 @@ gen_producer_string (void)\n       case OPT_fdiagnostics_show_labels:\n       case OPT_fdiagnostics_show_line_numbers:\n       case OPT_fdiagnostics_color_:\n+      case OPT_fdiagnostics_format_:\n       case OPT_fverbose_asm:\n       case OPT____:\n       case OPT__sysroot_:"}, {"sha": "2868db9f6a02ade91a7e9c1452a4fb1eb9fd7aae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/19165\n+\t* error.c (gfc_diagnostic_finalizer): Add diagnostic_t param.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cpp.c: Replace \"source_location\" with \"location_t\"."}, {"sha": "5b41fd3530aefd28cf67d6522ea3e3f318fe7f11", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1132,7 +1132,8 @@ gfc_diagnostic_start_span (diagnostic_context *context,\n \n static void\n gfc_diagnostic_finalizer (diagnostic_context *context,\n-\t\t\t  diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n+\t\t\t  diagnostic_info *diagnostic ATTRIBUTE_UNUSED,\n+\t\t\t  diagnostic_t orig_diag_kind ATTRIBUTE_UNUSED)\n {\n   pp_destroy_prefix (context->printer);\n   pp_newline_and_flush (context->printer);"}, {"sha": "afc18b33a155a9907451fb003e0ea85de69527af", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -4001,6 +4001,11 @@ driver_handle_option (struct gcc_options *opts,\n       diagnostic_color_init (dc, value);\n       break;\n \n+    case OPT_fdiagnostics_format_:\n+      diagnostic_output_format_init (dc,\n+\t\t\t\t     (enum diagnostics_output_format)value);\n+      break;\n+\n     case OPT_Wa_:\n       {\n \tint prev, j;"}, {"sha": "4f8f73719689bbe6eaa5a168ae90cbe6b9f08fb9", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/19165\n+\t* dummy-frontend.c (jit_begin_diagnostic): Add diagnostic_t param.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit-playback.c: Replace \"source_location\" with \"location_t\"."}, {"sha": "ec918522500fab034d66e1e38beca9210a145baf", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -110,7 +110,8 @@ jit_begin_diagnostic (diagnostic_context */*context*/,\n \n static void\n jit_end_diagnostic (diagnostic_context *context,\n-\t\t    diagnostic_info *diagnostic)\n+\t\t    diagnostic_info *diagnostic,\n+\t\t    diagnostic_t)\n {\n   gcc_assert (gcc::jit::active_playback_ctxt);\n   JIT_LOG_SCOPE (gcc::jit::active_playback_ctxt->get_logger ());"}, {"sha": "90d8c1c7fb272940bb31695fd41d2e8389d1f30b", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -646,6 +646,7 @@ append_diag_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n       switch (option->opt_index)\n \t{\n \tcase OPT_fdiagnostics_color_:\n+\tcase OPT_fdiagnostics_format_:\n \tcase OPT_fdiagnostics_show_caret:\n \tcase OPT_fdiagnostics_show_labels:\n \tcase OPT_fdiagnostics_show_line_numbers:"}, {"sha": "318ed4420578448bbcf346b7f50536a3893d978d", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -2232,6 +2232,11 @@ common_handle_option (struct gcc_options *opts,\n       diagnostic_color_init (dc, value);\n       break;\n \n+    case OPT_fdiagnostics_format_:\n+      diagnostic_output_format_init (dc,\n+\t\t\t\t     (enum diagnostics_output_format)value);\n+      break;\n+\n     case OPT_fdiagnostics_parseable_fixits:\n       dc->parseable_fixits_p = value;\n       break;"}, {"sha": "9eb2c3aae26d5ded552e6628e37c2a5d2de3293d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -1,3 +1,20 @@\n+2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/19165\n+\t* c-c++-common/diagnostic-format-json-1.c: New test.\n+\t* c-c++-common/diagnostic-format-json-2.c: New test.\n+\t* c-c++-common/diagnostic-format-json-3.c: New test.\n+\t* c-c++-common/diagnostic-format-json-4.c: New test.\n+\t* c-c++-common/diagnostic-format-json-5.c: New test.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(custom_diagnostic_finalizer): Add diagnostic_t param.\n+\t* gcc.dg/plugin/location_overflow_plugin.c\n+\t(verify_unpacked_ranges): Likewise.\n+\t(verify_no_columns): Likewise.\n+\t* gfortran.dg/diagnostic-format-json-1.F90: New test.\n+\t* gfortran.dg/diagnostic-format-json-2.F90: New test.\n+\t* gfortran.dg/diagnostic-format-json-3.F90: New test.\n+\n 2018-11-15  Richard Biener  <rguenther@suse.de>\n \n         PR middle-end/88029"}, {"sha": "9359db48c1770f4ec261c4c6531e49c3de805b27", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json\" } */\n+\n+#error message\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"#error message\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-1.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 2\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-1.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 6\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */"}, {"sha": "239c75ed769f93944ab2119878cb8ce2bbf940e8", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json\" } */\n+\n+#warning message\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" } */\n+/* { dg-regexp \"\\\"option\\\": \\\"-Wcpp\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 2\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 8\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */"}, {"sha": "1c54ecacc9fd9a602bb04b47b2354dcb8d69ebcf", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json -Werror\" } */\n+\n+#warning message\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" } */\n+/* { dg-regexp \"\\\"option\\\": \\\"-Werror=cpp\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 2\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 4\" } */\n+/* { dg-regexp \"\\\"column\\\": 8\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */"}, {"sha": "1c3b0343b6fb7c5a99a65c069c135c6d5a55f444", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json -Wmisleading-indentation\" } */\n+\n+int test (void)\n+{\n+  if (1)\n+    return 3;\n+    return 4;\n+  return 5;\n+}\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* Verify nested diagnostics.  */\n+\n+/* The nested diagnostic.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"note\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"...this statement, but the latter is misleadingly indented as if it were guarded by the 'if'\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-4.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 5\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-4.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 10\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+\n+/* The outer diagnostic.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"this 'if' clause does not guard...\\\"\" } */\n+/* { dg-regexp \"\\\"option\\\": \\\"-Wmisleading-indentation\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-4.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 6\" } */\n+/* { dg-regexp \"\\\"column\\\": 3\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-4.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 6\" } */\n+/* { dg-regexp \"\\\"column\\\": 4\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */\n+"}, {"sha": "f36e896d228bbfa4b0186779ba75651c67ec4132", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-5.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json\" } */\n+\n+struct s { int color; };\n+\n+int test (struct s *ptr)\n+{\n+  return ptr->colour;\n+}\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\".*\\\"\" } */\n+\n+/* Verify fix-it hints.  */\n+\n+/* { dg-regexp \"\\\"string\\\": \\\"color\\\"\" } */\n+\n+/* { dg-regexp \"\\\"start\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 15\" } */\n+\n+/* { dg-regexp \"\\\"next\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 21\" } */\n+\n+/* { dg-regexp \"\\\"fixits\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 15\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 8\" } */\n+/* { dg-regexp \"\\\"column\\\": 20\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */"}, {"sha": "fce68a15d28f31f1ee39e68ca611ca03623b1b19", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -129,7 +129,8 @@ static bool force_show_locus_color = false;\n \n static void\n custom_diagnostic_finalizer (diagnostic_context *context,\n-\t\t\t     diagnostic_info *diagnostic)\n+\t\t\t     diagnostic_info *diagnostic,\n+\t\t\t     diagnostic_t)\n {\n   bool old_show_color = pp_show_color (context->printer);\n   if (force_show_locus_color)"}, {"sha": "5c9d5bae77e0eda18211e401a2e28c454bb3fc34", "filename": "gcc/testsuite/gcc.dg/plugin/location_overflow_plugin.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation_overflow_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation_overflow_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Flocation_overflow_plugin.c?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -39,28 +39,30 @@ static diagnostic_finalizer_fn original_finalizer = NULL;\n \n static void\n verify_unpacked_ranges  (diagnostic_context *context,\n-\t\t\t diagnostic_info *diagnostic)\n+\t\t\t diagnostic_info *diagnostic,\n+\t\t\t diagnostic_t orig_diag_kind)\n {\n   /* Verify that the locations are ad-hoc, not packed. */\n   location_t loc = diagnostic_location (diagnostic);\n   gcc_assert (IS_ADHOC_LOC (loc));\n \n   /* We're done testing; chain up to original finalizer.  */\n   gcc_assert (original_finalizer);\n-  original_finalizer (context, diagnostic);\n+  original_finalizer (context, diagnostic, orig_diag_kind);\n }\n \n static void\n verify_no_columns  (diagnostic_context *context,\n-\t\t    diagnostic_info *diagnostic)\n+\t\t    diagnostic_info *diagnostic,\n+\t\t    diagnostic_t orig_diag_kind)\n {\n   /* Verify that the locations have no columns. */\n   location_t loc = diagnostic_location (diagnostic);\n   gcc_assert (LOCATION_COLUMN (loc) == 0);\n \n   /* We're done testing; chain up to original finalizer.  */\n   gcc_assert (original_finalizer);\n-  original_finalizer (context, diagnostic);\n+  original_finalizer (context, diagnostic, orig_diag_kind);\n }\n \n int"}, {"sha": "7fade1f65fce6f9d15cea2336137886ad7dd67a4", "filename": "gcc/testsuite/gfortran.dg/diagnostic-format-json-1.F90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-1.F90?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fdiagnostics-format=json\" }\n+\n+#error message\n+\n+! Use dg-regexp to consume the JSON output starting with\n+! the innermost values, and working outwards.\n+! We can't rely on any ordering of the keys.\n+\n+! { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" }\n+! { dg-regexp \"\\\"message\\\": \\\"#error message\\\"\" }\n+\n+! { dg-regexp \"\\\"caret\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-1.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 2\" }\n+\n+! { dg-regexp \"\\\"finish\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-1.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 6\" }\n+\n+! { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" }\n+! { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" }\n+! { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" }"}, {"sha": "a6d27d9e16a64dd26def5d75e5d7140bd66bb02d", "filename": "gcc/testsuite/gfortran.dg/diagnostic-format-json-2.F90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdiagnostics-format=json\" }\n+\n+#warning message\n+\n+! Use dg-regexp to consume the JSON output starting with\n+! the innermost values, and working outwards.\n+! We can't rely on any ordering of the keys. \n+\n+! { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" }\n+! { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" }\n+! { dg-regexp \"\\\"option\\\": \\\"-Wcpp\\\"\" }\n+\n+! { dg-regexp \"\\\"caret\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 2\" }\n+\n+! { dg-regexp \"\\\"finish\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 8\" }\n+\n+! { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" }\n+! { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" }\n+! { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" }"}, {"sha": "702a937d9c63e79da8e34aff2d3e4b65afc708a6", "filename": "gcc/testsuite/gfortran.dg/diagnostic-format-json-3.F90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478dd60ddcf17773ebd1af367c9dcaee2401f797/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90?ref=478dd60ddcf17773ebd1af367c9dcaee2401f797", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdiagnostics-format=json -Werror\" }\n+\n+#warning message\n+\n+! Use dg-regexp to consume the JSON output starting with\n+! the innermost values, and working outwards.\n+! We can't rely on any ordering of the keys.\n+\n+! { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" }\n+! { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" }\n+! { dg-regexp \"\\\"option\\\": \\\"-Werror=cpp\\\"\" }\n+\n+! { dg-regexp \"\\\"caret\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 2\" }\n+\n+! { dg-regexp \"\\\"finish\\\": \\{\" }\n+! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.F90\\\"\" }\n+! { dg-regexp \"\\\"line\\\": 4\" }\n+! { dg-regexp \"\\\"column\\\": 8\" }\n+\n+! { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" }\n+! { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" }\n+! { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" }"}]}