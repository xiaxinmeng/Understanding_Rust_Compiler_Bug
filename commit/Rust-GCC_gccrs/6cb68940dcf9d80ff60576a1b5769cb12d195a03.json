{"sha": "6cb68940dcf9d80ff60576a1b5769cb12d195a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiNjg5NDBkY2Y5ZDgwZmY2MDU3NmExYjU3NjljYjEyZDE5NWEwMw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-17T18:37:18Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-22T16:59:14Z"}, "message": "cris: Fix addi insn mult vs. shift canonicalization\n\nEver since the canonicalization clean-up of (mult X (1 << N)) into\n(ashift X N) outside addresses, the CRIS addi patterns have been\nunmatched.  No big deal.\n\nUnfortunately, nobody thought of adjusting reloaded addresses, so\ntransforming mult into a shift has to be a kludged for when reload\ndecides that it has to move an address like (plus (mult reg0 4) reg1)\ninto a register, as happens building libgfortran.  (No, simplify_rtx\net al don't automatically DTRT.)  Something less kludgy would make\nsense if it wasn't for the current late development stage and reload\nbeing deprecated.  I don't know whether this issue is absent for LRA,\nthough.\n\nI added a testsuite for the reload issue, despite being exposed by a\nlibgfortran build, so the issue would be covered by C/C++ builds, but\nto the CRIS test-suite, not as a generic test, to avoid bad feelings\nfrom anyone preferring short test-times to redundant coverage.\n\ngcc:\n\t* config/cris/cris.c (cris_print_operand) <'T'>: Change\n\tvalid operand from is now an addi mult-value to shift-value.\n\t* config/cris/cris.md (*addi): Change expression of scaled\n\toperand from mult to ashift.\n\t* config/cris/cris.md (*addi_reload): New insn_and_split.\n\ngcc/testsuite:\n\t* gcc.target/cris/torture/sync-reload-mul-1.c: New test.", "tree": {"sha": "a5e4269f7cc4558fce59785786803e1bbc298fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5e4269f7cc4558fce59785786803e1bbc298fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb68940dcf9d80ff60576a1b5769cb12d195a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb68940dcf9d80ff60576a1b5769cb12d195a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb68940dcf9d80ff60576a1b5769cb12d195a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb68940dcf9d80ff60576a1b5769cb12d195a03/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afed55036b65526be006d55f003f670ebeadb223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afed55036b65526be006d55f003f670ebeadb223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afed55036b65526be006d55f003f670ebeadb223"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "8a42aa16da131255950cf41baacc6b8aa92da2b2", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=6cb68940dcf9d80ff60576a1b5769cb12d195a03", "patch": "@@ -880,9 +880,6 @@ cris_print_operand (FILE *file, rtx x, int code)\n {\n   rtx operand = x;\n \n-  /* Size-strings corresponding to MULT expressions.  */\n-  static const char *const mults[] = { \"BAD:0\", \".b\", \".w\", \"BAD:3\", \".d\" };\n-\n   /* New code entries should just be added to the switch below.  If\n      handling is finished, just return.  If handling was just a\n      modification of the operand, the modified operand should be put in\n@@ -1212,11 +1209,21 @@ cris_print_operand (FILE *file, rtx x, int code)\n       return;\n \n     case 'T':\n-      /* Print the size letter for an operand to a MULT, which must be a\n-\t const_int with a suitable value.  */\n-      if (!CONST_INT_P (operand) || INTVAL (operand) > 4)\n-\tLOSE_AND_RETURN (\"invalid operand for 'T' modifier\", x);\n-      fprintf (file, \"%s\", mults[INTVAL (operand)]);\n+      {\n+\t/* Print the size letter for an operand to a ASHIFT, which must be a\n+\t   const_int with a suitable value.  */\n+\tint shiftval;\n+\n+\tif (!CONST_INT_P (operand))\n+\t  LOSE_AND_RETURN (\"invalid operand for 'T' modifier\", x);\n+\n+\tshiftval = INTVAL (operand);\n+\n+\tif (!(shiftval == 1 || shiftval == 2))\n+\t  LOSE_AND_RETURN (\"invalid operand for 'T' modifier\", x);\n+\n+\tfprintf (file, \"%s\", shiftval == 1 ? \".w\" : \".d\");\n+      }\n       return;\n \n     case 0:"}, {"sha": "069f7e00b6dbd261485b30599a168d95630fb648", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=6cb68940dcf9d80ff60576a1b5769cb12d195a03", "patch": "@@ -1278,18 +1278,43 @@\n (define_insn \"*addi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI\n-\t (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t  (match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 3 \"const_int_operand\" \"n\"))\n \t (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"operands[0] != frame_pointer_rtx\n    && operands[1] != frame_pointer_rtx\n    && CONST_INT_P (operands[3])\n-   && (INTVAL (operands[3]) == 1\n-       || INTVAL (operands[3]) == 2 || INTVAL (operands[3]) == 4)\"\n+   && (INTVAL (operands[3]) == 1 || INTVAL (operands[3]) == 2)\"\n   \"addi %2%T3,%0\"\n   [(set_attr \"slottable\" \"yes\")\n    (set_attr \"cc\" \"none\")])\n \n+;; The mult-vs-ashift canonicalization-cleanup plagues us: nothing in\n+;; reload transforms a \"scaled multiplication\" into an ashift in a\n+;; reloaded address; it's passed as-is and expected to be recognized,\n+;; or else we get a tell-tale \"unrecognizable insn\".\n+;; On top of that, we *should* match the bare insn, as a *matching\n+;; pattern* (as opposed to e.g. a reload_load_address expander\n+;; changing the mul into an ashift), so can_reload_into will re-use\n+;; registers in the reloaded expression instead of allocating a new\n+;; register.\n+(define_insn_and_split \"*addi_reload\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI\n+\t (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t (match_operand:SI 1 \"register_operand\" \"0\")))]\n+  \"operands[0] != frame_pointer_rtx\n+   && operands[1] != frame_pointer_rtx\n+   && CONST_INT_P (operands[3])\n+   && (INTVAL (operands[3]) == 2 || INTVAL (operands[3]) == 4)\n+   && (reload_in_progress || reload_completed)\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(plus:SI (ashift:SI (match_dup 2) (match_dup 3)) (match_dup 1)))]\n+  \"operands[3] = operands[3] == const2_rtx ? const1_rtx : const2_rtx;\")\n+\n ;; This pattern is usually generated after reload, so a '%' is\n ;; ineffective; use explicit combinations.\n (define_insn \"*addi_b_<mode>\""}, {"sha": "836633f19998cb3c28fa63dcb005008c7f03419f", "filename": "gcc/testsuite/gcc.target/cris/torture/sync-reload-mul-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fsync-reload-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68940dcf9d80ff60576a1b5769cb12d195a03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fsync-reload-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fsync-reload-mul-1.c?ref=6cb68940dcf9d80ff60576a1b5769cb12d195a03", "patch": "@@ -0,0 +1,13 @@\n+void\n+_gfortran_caf_event_post (unsigned int **pp, unsigned int index,\n+     int image_index __attribute__ ((unused)),\n+     int *stat, char *errmsg __attribute__ ((unused)),\n+     unsigned int errmsg_len __attribute__ ((unused)))\n+{\n+  unsigned int value = 1;\n+  unsigned int *event = *pp + index;\n+  __atomic_fetch_add (event, value, 0);\n+\n+  if(stat)\n+    *stat = 0;\n+}"}]}