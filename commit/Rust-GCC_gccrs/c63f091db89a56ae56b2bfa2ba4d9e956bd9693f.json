{"sha": "c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzZjA5MWRiODlhNTZhZTU2YjJiZmEyYmE0ZDllOTU2YmQ5NjkzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-23T08:41:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-23T08:41:58Z"}, "message": "rs6000: Fix up __m64 typedef in mmintrin.h [PR97301]\n\nThe x86 __m64 type is defined as:\n/* The Intel API is flexible enough that we must allow aliasing with other\n   vector types, and their scalar components.  */\ntypedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\nand so matches the comment above it in that reads and stores through\npointers to __m64 can alias anything.\nBut in the rs6000 headers that is the case only for __m128, but not __m64.\n\nThe following patch adds that attribute, which fixes the\nFAIL: gcc.target/powerpc/sse-movhps-1.c execution test\nFAIL: gcc.target/powerpc/sse-movlps-1.c execution test\nregressions that appeared when Honza improved ipa-modref.\n\n2021-01-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/97301\n\t* config/rs6000/mmintrin.h (__m64): Add __may_alias__ attribute.", "tree": {"sha": "c25c6d8add37e5841cae1f55c104280bb6c46d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c25c6d8add37e5841cae1f55c104280bb6c46d7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8cef3cba6945730c69e15dcdad726e74b50fe58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cef3cba6945730c69e15dcdad726e74b50fe58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8cef3cba6945730c69e15dcdad726e74b50fe58"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "0bd929c5afe9ca6ed3225f035bcd5321aeaad693", "filename": "gcc/config/rs6000/mmintrin.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmmintrin.h?ref=c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "patch": "@@ -58,7 +58,8 @@\n #include <altivec.h>\n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n-typedef __attribute__ ((__aligned__ (8))) unsigned long long __m64;\n+typedef __attribute__ ((__aligned__ (8),\n+\t\t\t__may_alias__)) unsigned long long __m64;\n \n typedef __attribute__ ((__aligned__ (8)))\n union"}]}