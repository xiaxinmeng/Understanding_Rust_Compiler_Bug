{"sha": "20b8d7342cc4920c79aebc0317150abe66068957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiOGQ3MzQyY2M0OTIwYzc5YWViYzAzMTcxNTBhYmU2NjA2ODk1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-09T07:37:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-09T07:37:04Z"}, "message": "re PR middle-end/50865 (Invalid code generation for INT64_MIN % 1 on x86_64)\n\n\tPR middle-end/50865\n\tPR tree-optimization/69097\n\t* fold-const.h (expr_not_equal_to): New prototype.\n\t* fold-const.c: Include stringpool.h and tree-ssanames.h.\n\t(expr_not_equal_to): New function.\n\t* match.pd (X % -Y is the same as X % Y): Don't optimize\n\tunless X is known not to be equal to minimum or Y is known\n\tnot to be equal to -1.\n\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Add GSI argument.\n\tfold TRUNC_MOD_EXPR if the second argument is not a power of two.\n\t(simplify_stmt_using_ranges): Adjust caller.\n\t(vrp_finalize): Call set_value_range on SSA_NAMEs before calling\n\tsubstitute_and_fold.\n\n\t* gcc.c-torture/execute/pr50865.c: New test.\n\t* gcc.c-torture/execute/pr69097-1.c: New test.\n\t* gcc.c-torture/execute/pr69097-2.c: New test.\n\t* gcc.dg/pr69097-1.c: New test.\n\t* gcc.dg/pr69097-2.c: New test.\n\nFrom-SVN: r232188", "tree": {"sha": "45e51c7b289d01fdbda2b9323067a5127cd78f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45e51c7b289d01fdbda2b9323067a5127cd78f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b8d7342cc4920c79aebc0317150abe66068957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b8d7342cc4920c79aebc0317150abe66068957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b8d7342cc4920c79aebc0317150abe66068957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b8d7342cc4920c79aebc0317150abe66068957/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c50e614be6bb98f8a67f6fda4f73b412b035329d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50e614be6bb98f8a67f6fda4f73b412b035329d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50e614be6bb98f8a67f6fda4f73b412b035329d"}], "stats": {"total": 464, "additions": 447, "deletions": 17}, "files": [{"sha": "015673c02e433e7bd4121bc2ebc0fb10402a9c22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -1,3 +1,19 @@\n+2016-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/50865\n+\tPR tree-optimization/69097\n+\t* fold-const.h (expr_not_equal_to): New prototype.\n+\t* fold-const.c: Include stringpool.h and tree-ssanames.h.\n+\t(expr_not_equal_to): New function.\n+\t* match.pd (X % -Y is the same as X % Y): Don't optimize\n+\tunless X is known not to be equal to minimum or Y is known\n+\tnot to be equal to -1.\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Add GSI argument.\n+\tfold TRUNC_MOD_EXPR if the second argument is not a power of two.\n+\t(simplify_stmt_using_ranges): Adjust caller.\n+\t(vrp_finalize): Call set_value_range on SSA_NAMEs before calling\n+\tsubstitute_and_fold.\n+\n 2016-01-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::merge_classes): Do not ICE on VAR_DECL"}, {"sha": "abd53606aa13b550908061e2c41665f99129e759", "filename": "gcc/fold-const.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -74,6 +74,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"md5.h\"\n #include \"case-cfn-macros.h\"\n+#include \"stringpool.h\"\n+#include \"tree-ssanames.h\"\n \n #ifndef LOAD_EXTEND_OP\n #define LOAD_EXTEND_OP(M) UNKNOWN\n@@ -9101,6 +9103,45 @@ tree_expr_nonzero_p (tree t)\n   return ret;\n }\n \n+/* Return true if T is known not to be equal to an integer W.  */\n+\n+bool\n+expr_not_equal_to (tree t, const wide_int &w)\n+{\n+  wide_int min, max, nz;\n+  value_range_type rtype;\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_CST:\n+      return wi::ne_p (t, w);\n+\n+    case SSA_NAME:\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\treturn false;\n+      rtype = get_range_info (t, &min, &max);\n+      if (rtype == VR_RANGE)\n+\t{\n+\t  if (wi::lt_p (max, w, TYPE_SIGN (TREE_TYPE (t))))\n+\t    return true;\n+\t  if (wi::lt_p (w, min, TYPE_SIGN (TREE_TYPE (t))))\n+\t    return true;\n+\t}\n+      else if (rtype == VR_ANTI_RANGE\n+\t       && wi::le_p (min, w, TYPE_SIGN (TREE_TYPE (t)))\n+\t       && wi::le_p (w, max, TYPE_SIGN (TREE_TYPE (t))))\n+\treturn true;\n+      /* If T has some known zero bits and W has any of those bits set,\n+\t then T is known not to be equal to W.  */\n+      if (wi::ne_p (wi::zext (wi::bit_and_not (w, get_nonzero_bits (t)),\n+\t\t\t      TYPE_PRECISION (TREE_TYPE (t))), 0))\n+\treturn true;\n+      return false;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Fold a binary expression of code CODE and type TYPE with operands\n    OP0 and OP1.  LOC is the location of the resulting expression.\n    Return the folded expression if folding is successful.  Otherwise,"}, {"sha": "02f42709c4e0eec08f06311a7f6ebd023775af53", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -177,6 +177,7 @@ extern bool merge_ranges (int *, tree *, tree *, int, tree, tree, int,\n \t\t\t  tree, tree);\n extern tree sign_bit_p (tree, const_tree);\n extern tree exact_inverse (tree, tree);\n+extern bool expr_not_equal_to (tree t, const wide_int &);\n extern tree const_unop (enum tree_code, tree, tree);\n extern tree const_binop (enum tree_code, tree, tree, tree);\n extern bool negate_mathfn_p (combined_fn);"}, {"sha": "64e718cc5c90519b87eaef554440ab307b261a10", "filename": "gcc/match.pd", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -295,7 +295,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (trunc_mod @0 (convert? (negate @1)))\n  (if (!TYPE_UNSIGNED (type)\n       && !TYPE_OVERFLOW_TRAPS (type)\n-      && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+      && tree_nop_conversion_p (type, TREE_TYPE (@1))\n+      /* Avoid this transformation if X might be INT_MIN or\n+\t Y might be -1, because we would then change valid\n+\t INT_MIN % -(-1) into invalid INT_MIN % -1.  */\n+      && (expr_not_equal_to (@0, TYPE_MIN_VALUE (type))\n+\t  || expr_not_equal_to (@1, wi::minus_one (TYPE_PRECISION\n+\t\t\t\t\t\t\t(TREE_TYPE (@1))))))\n   (trunc_mod @0 (convert @1))))\n \n /* X - (X / Y) * Y is the same as X % Y.  */"}, {"sha": "107ea24f396eb7bd14c91bdfc24827414590faaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -1,3 +1,13 @@\n+2016-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/50865\n+\tPR tree-optimization/69097\n+\t* gcc.c-torture/execute/pr50865.c: New test.\n+\t* gcc.c-torture/execute/pr69097-1.c: New test.\n+\t* gcc.c-torture/execute/pr69097-2.c: New test.\n+\t* gcc.dg/pr69097-1.c: New test.\n+\t* gcc.dg/pr69097-2.c: New test.\n+\n 2016-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69164"}, {"sha": "1f05802f5d189c2702cb06555daa6664b008b98f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr50865.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr50865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr50865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr50865.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/50865 */\n+\n+#define INT64_MIN (-__LONG_LONG_MAX__ - 1)\n+\n+int\n+main ()\n+{\n+  volatile long long l1 = 1;\n+  volatile long long l2 = -1;\n+  volatile long long l3 = -1;\n+\n+  if ((INT64_MIN % 1LL) != 0)\n+    __builtin_abort ();\n+  if ((INT64_MIN % l1) != 0)\n+    __builtin_abort ();\n+  if (l2 == -1)\n+    {\n+      if ((INT64_MIN % 1LL) != 0)\n+\t__builtin_abort ();\n+    }\n+  else if ((INT64_MIN % -l2) != 0)\n+    __builtin_abort ();\n+  if ((INT64_MIN % -l3) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "b2b107e7bbfd27cc5bb42614a2f8caf26a29c604", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69097-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-1.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/69097 */\n+\n+int a, b;\n+unsigned int c;\n+\n+int\n+main ()\n+{\n+  int d = b;\n+  b = ~(~a + (~d | b));\n+  a = ~(~c >> b);\n+  c = a % b;\n+  return 0;\n+}"}, {"sha": "8fe991bb81950057d834fb444cea2e306a989d34", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69097-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69097-2.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/69097 */\n+\n+__attribute__((noinline, noclone)) int\n+f1 (int x, int y)\n+{\n+  return x % y;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f2 (int x, int y)\n+{\n+  return x % -y;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f3 (int x, int y)\n+{\n+  int z = -y;\n+  return x % z;\n+}\n+\n+int\n+main ()\n+{\n+  if (f1 (-__INT_MAX__ - 1, 1) != 0\n+      || f2 (-__INT_MAX__ - 1, -1) != 0\n+      || f3 (-__INT_MAX__ - 1, -1) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0c20764128e9e9217de60c41d0c4f09b0fe90df4", "filename": "gcc/testsuite/gcc.dg/pr69097-1.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-1.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -0,0 +1,140 @@\n+/* PR tree-optimization/69097 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* All the x % -y below should be optimized into x % y, as\n+   it should never be INT_MIN % -(-1).  */\n+/* { dg-final { scan-tree-dump-not \"-y\" \"optimized\" } } */\n+\n+int\n+f1 (int x, int y)\n+{\n+  if (x == -__INT_MAX__ - 1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  if (x < -__INT_MAX__)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  if (y == -1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  if (y < 0)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  if (y >= -1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  if (y < 0 || y > 24)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f7 (int x, int y)\n+{\n+  if (y <= -17 || y >= -1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f8 (int x, int y)\n+{\n+  if (y >= -13 && y <= 15)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f9 (int x, int y)\n+{\n+  return x % -(y & ~4);\n+}\n+\n+int\n+f10 (int x, int y)\n+{\n+  if (x != -__INT_MAX__ - 1)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f11 (int x, int y)\n+{\n+  if (x >= -__INT_MAX__)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f12 (int x, int y)\n+{\n+  if (y != -1)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f13 (int x, int y)\n+{\n+  if (y >= 0)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f14 (int x, int y)\n+{\n+  if (y < -1)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f15 (int x, int y)\n+{\n+  if (y >= 0 && y <= 24)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f16 (int x, int y)\n+{\n+  if (y > -17 && y < -1)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f17 (int x, int y)\n+{\n+  if (y < -13 || y > 15)\n+    return x % -y;\n+  return 34;\n+}"}, {"sha": "bf7ac0eb0795314b4e766e6774b58317a96878f0", "filename": "gcc/testsuite/gcc.dg/pr69097-2.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69097-2.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -0,0 +1,138 @@\n+/* PR tree-optimization/69097 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"-y\" 17 \"optimized\" } } */\n+\n+int\n+f1 (int x, int y)\n+{\n+  if (x == -__INT_MAX__)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  if (x >= -__INT_MAX__ + 1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  if (y == -2)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  if (y < -1)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  if (y >= 0)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  if (y < -1 || y > 24)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f7 (int x, int y)\n+{\n+  if (y <= -17 || y >= 0)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f8 (int x, int y)\n+{\n+  if (y >= -13 && y <= -2)\n+    __builtin_unreachable ();\n+  return x % -y;\n+}\n+\n+int\n+f9 (int x, int y)\n+{\n+  return x % -y;\n+}\n+\n+int\n+f10 (int x, int y)\n+{\n+  if (x != -__INT_MAX__)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f11 (int x, int y)\n+{\n+  if (x < -__INT_MAX__ + 2)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f12 (int x, int y)\n+{\n+  if (y != -2)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f13 (int x, int y)\n+{\n+  if (y >= -1)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f14 (int x, int y)\n+{\n+  if (y < 0)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f15 (int x, int y)\n+{\n+  if (y >= -1 && y <= 24)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f16 (int x, int y)\n+{\n+  if (y > -17 && y < 0)\n+    return x % -y;\n+  return 34;\n+}\n+\n+int\n+f17 (int x, int y)\n+{\n+  if (y < -13 || y > -4)\n+    return x % -y;\n+  return 34;\n+}"}, {"sha": "e6c11e01fd9eacd7cf1f5670e3100b9de4520042", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b8d7342cc4920c79aebc0317150abe66068957/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=20b8d7342cc4920c79aebc0317150abe66068957", "patch": "@@ -8942,7 +8942,7 @@ simplify_truth_ops_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n    modulo.  */\n \n static bool\n-simplify_div_or_mod_using_ranges (gimple *stmt)\n+simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n {\n   enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n   tree val = NULL;\n@@ -8971,12 +8971,19 @@ simplify_div_or_mod_using_ranges (gimple *stmt)\n     }\n \n   if (!integer_pow2p (op1))\n-    return false;\n-\n-  if (TYPE_UNSIGNED (TREE_TYPE (op0)))\n     {\n-      val = integer_one_node;\n+      /* X % -Y can be only optimized into X % Y either if\n+\t X is not INT_MIN, or Y is not -1.  Fold it now, as after\n+\t remove_range_assertions the range info might be not available\n+\t anymore.  */\n+      if (rhs_code == TRUNC_MOD_EXPR\n+\t  && fold_stmt (gsi, follow_single_use_edges))\n+\treturn true;\n+      return false;\n     }\n+\n+  if (TYPE_UNSIGNED (TREE_TYPE (op0)))\n+    val = integer_one_node;\n   else\n     {\n       bool sop = false;\n@@ -9890,7 +9897,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \tcase TRUNC_MOD_EXPR:\n \t  if (TREE_CODE (rhs1) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n-\t    return simplify_div_or_mod_using_ranges (stmt);\n+\t    return simplify_div_or_mod_using_ranges (gsi, stmt);\n \t  break;\n \n       /* Transform ABS (X) into X or -X as appropriate.  */\n@@ -10200,16 +10207,6 @@ vrp_finalize (bool warn_array_bounds_p)\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  substitute_and_fold (op_with_constant_singleton_value_range,\n-\t\t       vrp_fold_stmt, false);\n-\n-  if (warn_array_bounds && warn_array_bounds_p)\n-    check_all_array_refs ();\n-\n-  /* We must identify jump threading opportunities before we release\n-     the datastructures built by VRP.  */\n-  identify_jump_threads ();\n-\n   /* Set value range to non pointer SSA_NAMEs.  */\n   for (i  = 0; i < num_vr_values; i++)\n     if (vr_value[i])\n@@ -10230,6 +10227,16 @@ vrp_finalize (bool warn_array_bounds_p)\n \t\t\tvr_value[i]->max);\n       }\n \n+  substitute_and_fold (op_with_constant_singleton_value_range,\n+\t\t       vrp_fold_stmt, false);\n+\n+  if (warn_array_bounds && warn_array_bounds_p)\n+    check_all_array_refs ();\n+\n+  /* We must identify jump threading opportunities before we release\n+     the datastructures built by VRP.  */\n+  identify_jump_threads ();\n+\n   /* Free allocated memory.  */\n   for (i = 0; i < num_vr_values; i++)\n     if (vr_value[i])"}]}