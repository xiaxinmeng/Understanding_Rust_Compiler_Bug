{"sha": "c177e80609287cd32c6096a4ddc4dbef56c74f77", "node_id": "C_kwDOANBUbNoAKGMxNzdlODA2MDkyODdjZDMyYzYwOTZhNGRkYzRkYmVmNTZjNzRmNzc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-01T00:17:04Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-01T00:17:04Z"}, "message": "Daily bump.", "tree": {"sha": "536ce28da364421463e7f961f5b1dd0464b1ecb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536ce28da364421463e7f961f5b1dd0464b1ecb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c177e80609287cd32c6096a4ddc4dbef56c74f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c177e80609287cd32c6096a4ddc4dbef56c74f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c177e80609287cd32c6096a4ddc4dbef56c74f77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c177e80609287cd32c6096a4ddc4dbef56c74f77/comments", "author": null, "committer": null, "parents": [{"sha": "f5e2f2d0ad1b293c534338a72094926313e12039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e2f2d0ad1b293c534338a72094926313e12039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e2f2d0ad1b293c534338a72094926313e12039"}], "stats": {"total": 1204, "additions": 1203, "deletions": 1}, "files": [{"sha": "c2ba824f47bf2a15abf92fe4b511f8c88d8c54c7", "filename": "ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,15 @@\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Makefile.def: Add bootstrap to libbacktrace, libphobos, zlib, and\n+\tlibatomic.\n+\t* Makefile.in: Regenerate.\n+\t* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Fix command for GDC.\n+\t(STAGE1_CONFIGURE_FLAGS): Add --with-libphobos-druntime-only if\n+\ttarget-libphobos-bootstrap.\n+\t(STAGE2_CONFIGURE_FLAGS): Likewise.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add support for bootstrapping D front-end.\n+\n 2021-11-16  Martin Uecker  <uecker@gcc.gnu.org>\n \n \t* MAINTAINERS: Add myself to DCO section and update email address."}, {"sha": "eb768facb96cd4fd300d56b644b487b11b4a43f1", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,7 @@\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* acx.m4 (ACX_PROG_GDC): New m4 function.\n+\n 2021-09-19  Andrew Pinski  <apinski@marvell.com>\n \n \tPR bootstrap/102389"}, {"sha": "d8101a363ec534c165a6805573f1e8d04ca0b24a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,385 @@\n+2021-11-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103463\n+\tPR target/103484\n+\t* config/i386/i386.md (*x86_64_shld_1): Set_attr\n+\tlength_immediate to 1.\n+\t(*x86_shld_1): Ditto.\n+\t(*x86_64_shrd_1): Ditto.\n+\t(*x86_shrd_1): Ditto.\n+\n+2021-11-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tClarify diagnostic.\n+\t(altivec_resolve_new_overloaded_builtin): Likewise.\n+\n+2021-11-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103267\n+\t* ipa-sra.c (scan_function): Also check ECF_LOOPING_CONST_OR_PURE flag.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/103494\n+\t* tree-vect-stmts.c (vect_get_gather_scatter_ops): Remove ncopies\n+\targument and calculate ncopies from gs_info->offset_vectype\n+\twhere necessary.\n+\t(vectorizable_store, vectorizable_load): Update accordingly.\n+\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Makefile.in (GDC): New variable.\n+\t(GDCFLAGS): New variable.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add call to ACX_PROG_GDC.  Substitute GDCFLAGS.\n+\n+2021-11-30  Martin Liska  <mliska@suse.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103449\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_body_adjustments::prepare_debug_expressions): Be\n+\tcareful about hash_map reallocating itself.  Simpify a return\n+\twhich always returns true.\n+\n+2021-11-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103440\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Continue\n+\tnormal param processing for equiv params.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/i386.c (ix86_shift_rotate_cost): Remove\n+\tunreachable return.\n+\t* tree-chrec.c (evolution_function_is_invariant_rec_p):\n+\tLikewise.\n+\t* tree-if-conv.c (if_convertible_stmt_p): Likewise.\n+\t* tree-ssa-pre.c (fully_constant_expression): Likewise.\n+\t* tree-vrp.c (operand_less_p): Likewise.\n+\t* reload.c (reg_overlap_mentioned_for_reload_p): Remove\n+\tunreachable gcc_unreachable ().\n+\t* sel-sched-ir.h (bb_next_bb): Likewise.\n+\t* varasm.c (compare_constant): Likewise.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103489\n+\t* tree-vect-loop.c (vectorizable_phi): Verify argument\n+\tvector type compatibility to mitigate bool pattern recog\n+\tbug.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-offload.c (oacc_loop_auto_partitions): Remove erroneous\n+\t\"Orphan reductions cannot have gang partitioning\" handling.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-offload.c (oacc_loop_process): Implement \"gang reduction on\n+\tan orphan loop\" checking.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-general.h (enum oacc_loop_flags): Add OLF_REDUCTION enum.\n+\t* omp-low.c (lower_oacc_head_mark): Use it to mark OpenACC\n+\treductions.\n+\t* omp-offload.c (oacc_loop_auto_partitions): Don't assign gang\n+\tlevel parallelism to orphan reductions.\n+\n+2021-11-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103451\n+\t* range-op.cc (operator_div::wi_fold): Remove\n+\tcan_throw_non_call_exceptions special case.\n+\t* tree-ssa-sink.c (sink_code_in_bb): Same.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.c (arg1_arg4_map): New variable.\n+\t(vect_get_operand_map): Handle IFN_MASK_GATHER_LOAD.\n+\t(vect_build_slp_tree_1): Likewise.\n+\t(vect_build_slp_tree_2): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_load): Expect the mask to be\n+\tthe last SLP child node rather than the first.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-if-conv.c: Include tree-eh.h.\n+\t(predicate_statements): Remove pe argument.  Don't hoist\n+\tstatements here.\n+\t(combine_blocks): Remove pe argument.\n+\t(ifcvt_available_on_edge_p, ifcvt_can_hoist): New functions.\n+\t(ifcvt_hoist_invariants): Likewise.\n+\t(tree_if_conversion): Update call to combine_blocks.  Call\n+\tifcvt_hoist_invariants after VN.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/102467\n+\t* doc/sourcebuild.texi (vect_gather_load_ifn): Document.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n+\tCommonize safelen handling.  Punt for anything involving\n+\tgathers and scatters unless safelen says otherwise.\n+\t* tree-vect-slp.c (arg1_map): New variable.\n+\t(vect_get_operand_map): Handle IFN_GATHER_LOAD.\n+\t(vect_build_slp_tree_1): Likewise.\n+\t(vect_build_slp_tree_2): Likewise.\n+\t(compatible_calls_p): If vect_get_operand_map returns nonnull,\n+\tcheck that any skipped arguments are equal.\n+\t(vect_slp_analyze_node_operations_1): Tighten reduction check.\n+\t* tree-vect-stmts.c (check_load_store_for_partial_vectors): Take\n+\tan ncopies argument.\n+\t(vect_get_gather_scatter_ops): Take slp_node and ncopies arguments.\n+\tHandle SLP nodes.\n+\t(vectorizable_store, vectorizable_load): Adjust accordingly.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple.h (gimple_num_args, gimple_arg, gimple_arg_ptr): New\n+\tfunctions.\n+\t* tree-vect-slp.c (cond_expr_maps, arg2_map): New variables.\n+\t(vect_get_operand_map): New function.\n+\t(vect_get_and_check_slp_defs): Fix outdated comment.\n+\tUse vect_get_operand_map and new gimple argument accessors.\n+\t(vect_build_slp_tree_2): Likewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Use code_helper\n+\tto record the operations performed by statements, only using\n+\tCALL_EXPR for things that don't map to built-in or internal\n+\tfunctions.  For shifts, require all shift amounts to be equal\n+\tif optab_vector is not supported but optab_scalar is.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_check_gather_scatter): Continue\n+\tprocessing conversions if the current offset is a pointer.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_is_reduction): Use STMT_VINFO_REDUC_IDX.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* genopinit.c (main): Turn supports_vec_gather_load and\n+\tsupports_vec_scatter_store into signed char arrays and remove\n+\tsupports_vec_gather_load_cached and supports_vec_scatter_store_cached.\n+\t* optabs-query.c (supports_vec_convert_optab_p): Add a mode parameter.\n+\tIf the mode is not VOIDmode, test only for that mode.\n+\t(supports_vec_gather_load_p): Likewise.\n+\t(supports_vec_scatter_store_p): Likewise.\n+\t* optabs-query.h (supports_vec_gather_load_p): Likewise.\n+\t(supports_vec_scatter_store_p): Likewise.\n+\t* tree-vect-data-refs.c (vect_check_gather_scatter): Pass the\n+\tvector mode to supports_vec_gather_load_p and\n+\tsupports_vec_scatter_store_p.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.c (commutative_binary_fn_p): Handle IFN_ADD_OVERFLOW\n+\tand IFN_MUL_OVERFLOW.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.c (commutative_binary_fn_p): Handle IFN_UBSAN_CHECK_ADD\n+\tand IFN_UBSAN_CHECK_MUL.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.c (commutative_binary_fn_p): Handle IFN_COMPLEX_MUL.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple-fold.c: Include internal-fn.h.\n+\t(fold_stmt_1): If a function maps to an internal one, use\n+\tfirst_commutative_argument to canonicalize the order of\n+\tcommutative arguments.\n+\t* gimple-match-head.c (gimple_resimplify2, gimple_resimplify3)\n+\t(gimple_resimplify4, gimple_resimplify5): Extend commutativity\n+\tchecks to functions.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/md.texi (reduc_fmin_scal_@var{m}): Document.\n+\t(reduc_fmax_scal_@var{m}): Likewise.\n+\t* optabs.def (reduc_fmax_scal_optab): New optab.\n+\t(reduc_fmin_scal_optab): Likewise\n+\t* internal-fn.def (REDUC_FMAX, REDUC_FMIN): New functions.\n+\t* tree-vect-loop.c (reduction_fn_for_scalar_code): Handle\n+\tCASE_CFN_FMAX and CASE_CFN_FMIN.\n+\t(neutral_op_for_reduction): Likewise.\n+\t(needs_fold_left_reduction_p): Likewise.\n+\t* config/aarch64/iterators.md (FMAXMINV): New iterator.\n+\t(fmaxmin): Handle UNSPEC_FMAXNMV and UNSPEC_FMINNMV.\n+\t* config/aarch64/aarch64-simd.md (reduc_<optab>_scal_<mode>): Fix\n+\tunspec mode.\n+\t(reduc_<fmaxmin>_scal_<mode>): New pattern.\n+\t* config/aarch64/aarch64-sve.md (reduc_<fmaxmin>_scal_<mode>):\n+\tLikewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.h (associated_internal_fn): Declare overload that\n+\ttakes a (combined_cfn, return type) pair.\n+\t* builtins.c (associated_internal_fn): Split new overload out\n+\tof original fndecl version.  Also provide an overload that takes\n+\ta (combined_cfn, return type) pair.\n+\t* internal-fn.h (commutative_binary_fn_p): Declare.\n+\t(commutative_ternary_fn_p): Likewise.\n+\t(associative_binary_fn_p): Likewise.\n+\t* internal-fn.c (commutative_binary_fn_p, commutative_ternary_fn_p):\n+\tNew functions, split out from...\n+\t(first_commutative_argument): ...here.\n+\t(associative_binary_fn_p): New function.\n+\t* gimple-match.h (code_helper): Add a constructor that takes\n+\tinternal functions.\n+\t(commutative_binary_op_p): Declare.\n+\t(commutative_ternary_op_p): Likewise.\n+\t(first_commutative_argument): Likewise.\n+\t(associative_binary_op_p): Likewise.\n+\t(canonicalize_code): Likewise.\n+\t(directly_supported_p): Likewise.\n+\t(get_conditional_internal_fn): Likewise.\n+\t(gimple_build): New overloads that takes a code_helper.\n+\t* gimple-fold.c (gimple_build): Likewise.\n+\t* gimple-match-head.c (commutative_binary_op_p): New function.\n+\t(commutative_ternary_op_p): Likewise.\n+\t(first_commutative_argument): Likewise.\n+\t(associative_binary_op_p): Likewise.\n+\t(canonicalize_code): Likewise.\n+\t(directly_supported_p): Likewise.\n+\t(get_conditional_internal_fn): Likewise.\n+\t* tree-vectorizer.h: Include gimple-match.h.\n+\t(neutral_op_for_reduction): Take a code_helper instead of a tree_code.\n+\t(needs_fold_left_reduction_p): Likewise.\n+\t(reduction_fn_for_scalar_code): Likewise.\n+\t(vect_can_vectorize_without_simd_p): Declare a nNew overload that takes\n+\ta code_helper.\n+\t* tree-vect-loop.c: Include case-cfn-macros.h.\n+\t(fold_left_reduction_fn): Take a code_helper instead of a tree_code.\n+\t(reduction_fn_for_scalar_code): Likewise.\n+\t(neutral_op_for_reduction): Likewise.\n+\t(needs_fold_left_reduction_p): Likewise.\n+\t(use_mask_by_cond_expr_p): Likewise.\n+\t(build_vect_cond_expr): Likewise.\n+\t(vect_create_partial_epilog): Likewise.  Use gimple_build rather\n+\tthan gimple_build_assign.\n+\t(check_reduction_path): Handle calls and operate on code_helpers\n+\trather than tree_codes.\n+\t(vect_is_simple_reduction): Likewise.\n+\t(vect_model_reduction_cost): Likewise.\n+\t(vect_find_reusable_accumulator): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\t(vectorizable_reduction): Likewise.  Make more use of\n+\tlane_reduc_code_p.\n+\t(vect_transform_reduction): Use gimple_extract_op but expect\n+\ta tree_code for now.\n+\t(vect_can_vectorize_without_simd_p): New overload that takes\n+\ta code_helper.\n+\t* tree-vect-stmts.c (vectorizable_call): Handle reductions in\n+\tfully-masked loops.\n+\t* tree-vect-patterns.c (vect_mark_pattern_stmts): Use\n+\tgimple_extract_op when updating STMT_VINFO_REDUC_IDX.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple-match.h (code_helper): Provide == and != overloads.\n+\t(code_helper::operator tree_code): Make explicit.\n+\t(code_helper::operator combined_fn): Likewise.\n+\t* gimple-match-head.c (convert_conditional_op): Use explicit\n+\tconversions where necessary.\n+\t(gimple_resimplify1, gimple_resimplify2, gimple_resimplify3): Likewise.\n+\t(maybe_push_res_to_seq, gimple_simplify): Likewise.\n+\t* gimple-fold.c (replace_stmt_with_simplification): Likewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple-match.h (code_helper): Add functions for querying whether\n+\tthe code represents an internal_fn or a built_in_function.\n+\tProvide explicit conversion operators for both cases.\n+\t(gimple_extract_op): Declare.\n+\t* gimple-match-head.c (gimple_extract): New function, extracted from...\n+\t(gimple_simplify): ...here.\n+\t(gimple_extract_op): New function.\n+\n+2021-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/103274\n+\t* config/i386/i386.c (ix86_output_call_insn): Beef up comment about\n+\tnops emitted with SEH.\n+\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): When switching to\n+\tthe cold section, emit a nop before the directive if the previous\n+\tactive instruction is a call.\n+\n+2021-11-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100711\n+\t* config/i386/sse.md (define_split): New splitters to simplify\n+\tnot;vec_duplicate;and as vec_duplicate;andn.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103485\n+\t* match.pd (-((int)x >> (prec - 1)) to (unsigned)x >> (prec - 1)):\n+\tUse VIEW_CONVERT_EXPR for vectors.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgrtl.c (skip_insns_after_block): Refactor code to\n+\tbe more easily readable.\n+\t* expr.c (op_by_pieces_d::run): Remove unreachable\n+\tassert.\n+\t* sched-deps.c (sched_analyze): Remove unreachable\n+\tgcc_unreachable.\n+\t* sel-sched-ir.c (in_same_ebb_p): Likewise.\n+\t* tree-ssa-alias.c (nonoverlapping_refs_since_match_p):\n+\tRemove unreachable code.\n+\t* tree-vect-slp.c (vectorize_slp_instance_root_stmt):\n+\tRefactor to avoid unreachable loop iteration.\n+\t* tree.c (walk_tree_1): Remove unreachable break.\n+\t* vec-perm-indices.c (vec_perm_indices::series_p): Remove\n+\tunreachable return.\n+\n+2021-11-30  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/102347\n+\t* config/rs6000/rs6000-call.c (rs6000_builtin_decl): Remove builtin mask\n+\tcheck.\n+\n+2021-11-30  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c\n+\t(rs6000_cost_data::update_target_cost_per_stmt): Adjust the way to\n+\tcompute extra penalized cost.  Remove useless parameter.\n+\t(rs6000_cost_data::rs6000_add_stmt_cost): Adjust the call to function\n+\tupdate_target_cost_per_stmt.\n+\n+2021-11-30  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tRevert:\n+\t2021-11-17  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/visium/visium.md (*add<mode>3_insn, *addsi3_insn, *addi3_insn,\n+\t*sub<mode>3_insn, *subsi3_insn, *subdi3_insn, *neg<mode>2_insn,\n+\t*negdi2_insn, *and<mode>3_insn, *ior<mode>3_insn, *xor<mode>3_insn,\n+\t*one_cmpl<mode>2_insn, *ashl<mode>3_insn, *ashr<mode>3_insn,\n+\t*lshr<mode>3_insn, *trunchiqi2_insn, *truncsihi2_insn,\n+\t*truncdisi2_insn, *extendqihi2_insn, *extendqisi2_insn,\n+\t*extendhisi2_insn, *extendsidi2_insn, *zero_extendqihi2_insn,\n+\t*zero_extendqisi2_insn, *zero_extendsidi2_insn): Fix split condition.\n+\n+2021-11-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103467\n+\t* gimple-range-gori.cc (range_def_chain::register_dependency): Don't\n+\tuse an object reference after a potential resize.\n+\n 2021-11-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/102811"}, {"sha": "d78b1941af4078635ee30fc43d5794c924551b05", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1 +1 @@\n-20211130\n+20211201"}, {"sha": "d7c5de5a4f94aa8d04a44b2c1a48939940163c87", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,19 @@\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Remove \"gang reduction on an\n+\torphan loop\" checking.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Emit an error on orphan\n+\tOpenACC gang reductions.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression):\n+\tavoid unreachable code after break.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "72e099a0d37a319c178a40a2d4907b81c47e1c08", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,37 @@\n+2021-11-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-gimplify.c (genericize_if_stmt): Always build a COND_EXPR.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* logic.cc (cnf_size_r): Remove unreachable and inconsistently\n+\tplaced gcc_unreachable ()s.\n+\t* pt.c (iterative_hash_template_arg): Remove unreachable\n+\tgcc_unreachable and return.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* semantics.c (finish_omp_clauses): Remove \"gang reduction on an\n+\torphan loop\" checking.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* semantics.c (finish_omp_clauses): Emit an error on orphan\n+\tOpenACC gang reductions.\n+\n+2021-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-gimplify.c (cp_fold_r): Perform folding of\n+\tstd::source_location::current() calls here...\n+\t(cp_fold): ... rather than here.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* parser.c (cp_parser_postfix_expression): Remove\n+\tunreachable code.\n+\t* pt.c (tsubst_expr): Remove unreachable breaks.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "c985f0078031aa9368cfe679471b0d6d629ce63e", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,244 @@\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd b8384668f.\n+\t* Make-lang.in (d-warn): Use strict warnings.\n+\t(DMD_WARN_CXXFLAGS): Remove.\n+\t(DMD_COMPILE): Remove.\n+\t(CHECKING_DFLAGS): Define.\n+\t(WARN_DFLAGS): Define.\n+\t(ALL_DFLAGS): Define.\n+\t(DCOMPILE.base): Define.\n+\t(DCOMPILE): Define.\n+\t(DPOSTCOMPILE): Define.\n+\t(DLINKER): Define.\n+\t(DLLINKER): Define.\n+\t(D_FRONTEND_OBJS): Add new dmd front-end objects.\n+\t(D_GENERATED_SRCS): Remove.\n+\t(D_GENERATED_OBJS): Remove.\n+\t(D_ALL_OBJS): Remove D_GENERATED_OBJS.\n+\t(d21$(exeext)): Build using DLLINKER and -static-libphobos.\n+\t(d.tags): Remove dmd/*.c and dmd/root/*.c.\n+\t(d.mostlyclean): Remove D_GENERATED_SRCS, d/idgen$(build_exeext),\n+\td/impcnvgen$(build_exeext).\n+\t(D_INCLUDES): Include $(srcdir)/d/dmd/res.\n+\t(CFLAGS-d/id.o): Remove.\n+\t(CFLAGS-d/impcnvtab.o): Remove.\n+\t(d/%.o): Build using DCOMPILE and DPOSTCOMPILE.  Update dependencies\n+\tfrom d/dmd/%.c to d/dmd/%.d.\n+\t(d/idgen$(build_exeext)): Remove.\n+\t(d/impcnvgen$(build_exeext)): Remove.\n+\t(d/id.c): Remove.\n+\t(d/id.h): Remove.\n+\t(d/impcnvtab.c): Remove.\n+\t(d/%.dmdgen.o): Remove.\n+\t(D_SYSTEM_H): Remove.\n+\t(d/idgen.dmdgen.o): Remove.\n+\t(d/impcnvgen.dmdgen.o): Remove.\n+\t* config-lang.in (boot_language): New variable.\n+\t* d-attribs.cc: Include dmd/expression.h.\n+\t* d-builtins.cc: Include d-frontend.h.\n+\t(build_frontend_type): Update for new front-end interface.\n+\t(d_eval_constant_expression): Likewise.\n+\t(d_build_builtins_module): Likewise.\n+\t(maybe_set_builtin_1): Likewise.\n+\t(d_build_d_type_nodes): Likewise.\n+\t* d-codegen.cc (d_decl_context): Likewise.\n+\t(declaration_reference_p): Likewise.\n+\t(declaration_type): Likewise.\n+\t(parameter_reference_p): Likewise.\n+\t(parameter_type): Likewise.\n+\t(get_array_length): Likewise.\n+\t(build_delegate_cst): Likewise.\n+\t(build_typeof_null_value): Likewise.\n+\t(identity_compare_p): Likewise.\n+\t(lower_struct_comparison): Likewise.\n+\t(build_filename_from_loc): Likewise.\n+\t(build_assert_call): Remove LIBCALL_SWITCH_ERROR.\n+\t(build_bounds_index_condition): Call LIBCALL_ARRAYBOUNDS_INDEXP on\n+\tbounds error.\n+\t(build_bounds_slice_condition): Call LIBCALL_ARRAYBOUNDS_SLICEP on\n+\tbounds error.\n+\t(array_bounds_check): Update for new front-end interface.\n+\t(checkaction_trap_p): Handle CHECKACTION_context.\n+\t(get_function_type): Update for new front-end interface.\n+\t(d_build_call): Likewise.\n+\t* d-compiler.cc: Remove include of dmd/scope.h.\n+\t(Compiler::genCmain): Remove.\n+\t(Compiler::paintAsType): Update for new front-end interface.\n+\t(Compiler::onParseModule): Likewise.\n+\t* d-convert.cc (convert_expr): Remove call to LIBCALL_ARRAYCAST.\n+\t(convert_for_rvalue): Update for new front-end interface.\n+\t(convert_for_assignment): Likewise.\n+\t(convert_for_condition): Likewise.\n+\t(d_array_convert): Likewise.\n+\t* d-diagnostic.cc (error): Remove.\n+\t(errorSupplemental): Remove.\n+\t(warning): Remove.\n+\t(warningSupplemental): Remove.\n+\t(deprecation): Remove.\n+\t(deprecationSupplemental): Remove.\n+\t(message): Remove.\n+\t(vtip): New.\n+\t* d-frontend.cc (global): Remove.\n+\t(Global::_init): Remove.\n+\t(Global::startGagging): Remove.\n+\t(Global::endGagging): Remove.\n+\t(Global::increaseErrorCount): Remove.\n+\t(Loc::Loc): Remove.\n+\t(Loc::toChars): Remove.\n+\t(Loc::equals): Remove.\n+\t(isBuiltin): Update for new front-end interface.\n+\t(eval_builtin): Likewise.\n+\t(getTypeInfoType): Likewise.\n+\t(inlineCopy): Remove.\n+\t* d-incpath.cc: Include d-frontend.h.\n+\t(add_globalpaths): Call d_gc_malloc to allocate Strings.\n+\t(add_filepaths): Likewise.\n+\t* d-lang.cc: Include dmd/id.h, dmd/root/file.h, d-frontend.h.  Remove\n+\tinclude of dmd/mars.h, id.h.\n+\t(entrypoint_module): Remove.\n+\t(entrypoint_root_module): Remove.\n+\t(deps_write_string): Update for new front-end interface.\n+\t(deps_write): Likewise.\n+\t(d_init_options): Call rt_init.  Remove setting global params that are\n+\tdefault initialized by the front-end.\n+\t(d_handle_option): Handle OPT_fcheckaction_, OPT_fdump_c___spec_,\n+\tOPT_fdump_c___spec_verbose, OPT_fextern_std_, OPT_fpreview,\n+\tOPT_revert, OPT_fsave_mixins_, and OPT_ftransition.\n+\t(d_post_options): Propagate dip1021 and dip1000 preview flags to\n+\tdip25, and flag_diagnostics_show_caret to printErrorContext.\n+\t(d_add_entrypoint_module): Remove.\n+\t(d_parse_file): Update for new front-end interface.\n+\t(d_type_promotes_to): Likewise.\n+\t(d_types_compatible_p): Likewise.\n+\t* d-longdouble.cc (CTFloat::zero): Remove.\n+\t(CTFloat::one): Remove.\n+\t(CTFloat::minusone): Remove.\n+\t(CTFloat::half): Remove.\n+\t* d-system.h (POSIX): Remove.\n+\t(realpath): Remove.\n+\t(isalpha): Remove.\n+\t(isalnum): Remove.\n+\t(isdigit): Remove.\n+\t(islower): Remove.\n+\t(isprint): Remove.\n+\t(isspace): Remove.\n+\t(isupper): Remove.\n+\t(isxdigit): Remove.\n+\t(tolower): Remove.\n+\t(_mkdir): Remove.\n+\t(INT32_MAX): Remove.\n+\t(INT32_MIN): Remove.\n+\t(INT64_MIN): Remove.\n+\t(UINT32_MAX): Remove.\n+\t(UINT64_MAX): Remove.\n+\t* d-target.cc: Include calls.h.\n+\t(target): Remove.\n+\t(define_float_constants): Remove initialization of snan.\n+\t(Target::_init): Update for new front-end interface.\n+\t(Target::isVectorTypeSupported): Likewise.\n+\t(Target::isVectorOpSupported): Remove cases for unordered operators.\n+\t(TargetCPP::typeMangle): Update for new front-end interface.\n+\t(TargetCPP::parameterType): Likewise.\n+\t(Target::systemLinkage): Likewise.\n+\t(Target::isReturnOnStack): Likewise.\n+\t(Target::isCalleeDestroyingArgs): Define.\n+\t(Target::preferPassByRef): Define.\n+\t* d-tree.h (d_add_entrypoint_module): Remove.\n+\t* decl.cc (gcc_attribute_p): Update for new front-end interface.\n+\t(apply_pragma_crt): Define.\n+\t(DeclVisitor::visit(PragmaDeclaration *)): Handle pragmas\n+\tcrt_constructor and crt_destructor.\n+\t(DeclVisitor::visit(TemplateDeclaration *)): Update for new front-end\n+\tinterface.\n+\t(DeclVisitor::visit): Likewise.\n+\t(DeclVisitor::finish_vtable): Likewise.\n+\t(get_symbol_decl): Error if template has more than one nesting\n+\tcontext.  Update for new front-end interface.\n+\t(make_thunk): Update for new front-end interface.\n+\t(get_vtable_decl): Likewise.\n+\t* expr.cc (ExprVisitor::visit): Likewise.\n+\t(build_return_dtor): Likewise.\n+\t* imports.cc (ImportVisitor::visit): Likewise.\n+\t* intrinsics.cc: Include dmd/expression.h.  Remove include of\n+\tdmd/mangle.h.\n+\t(maybe_set_intrinsic): Update for new front-end interface.\n+\t* intrinsics.def (INTRINSIC_ROL): Update intrinsic signature.\n+\t(INTRINSIC_ROR): Likewise.\n+\t(INTRINSIC_ROR_TIARG): Likewise.\n+\t(INTRINSIC_TOPREC): Likewise.\n+\t(INTRINSIC_TOPRECL): Likewise.\n+\t(INTRINSIC_TAN): Update intrinsic module and signature.\n+\t(INTRINSIC_ISNAN): Likewise.\n+\t(INTRINSIC_ISFINITE): Likewise.\n+\t(INTRINSIC_COPYSIGN): Define intrinsic.\n+\t(INTRINSIC_COPYSIGNI): Define intrinsic.\n+\t(INTRINSIC_EXP): Update intrinsic module.\n+\t(INTRINSIC_EXPM1): Likewise.\n+\t(INTRINSIC_EXP2): Likewise.\n+\t(INTRINSIC_LOG): Likewise.\n+\t(INTRINSIC_LOG2): Likewise.\n+\t(INTRINSIC_LOG10): Likewise.\n+\t(INTRINSIC_POW): Likewise.\n+\t(INTRINSIC_ROUND): Likewise.\n+\t(INTRINSIC_FLOORF): Likewise.\n+\t(INTRINSIC_FLOOR): Likewise.\n+\t(INTRINSIC_FLOORL): Likewise.\n+\t(INTRINSIC_CEILF): Likewise.\n+\t(INTRINSIC_CEIL): Likewise.\n+\t(INTRINSIC_CEILL): Likewise.\n+\t(INTRINSIC_TRUNC): Likewise.\n+\t(INTRINSIC_FMIN): Likewise.\n+\t(INTRINSIC_FMAX): Likewise.\n+\t(INTRINSIC_FMA): Likewise.\n+\t(INTRINSIC_VA_ARG): Update intrinsic signature.\n+\t(INTRINSIC_VASTART): Likewise.\n+\t* lang.opt (fcheck=): Add alternate aliases for contract switches.\n+\t(fcheckaction=): New option.\n+\t(check_action): New Enum and EnumValue entries.\n+\t(fdump-c++-spec-verbose): New option.\n+\t(fdump-c++-spec=): New option.\n+\t(fextern-std=): New option.\n+\t(extern_stdcpp): New Enum and EnumValue entries\n+\t(fpreview=): New options.\n+\t(frevert=): New options.\n+\t(fsave-mixins): New option.\n+\t(ftransition=): Update options.\n+\t* modules.cc (get_internal_fn): Replace Prot with Visibility.\n+\t(build_internal_fn): Likewise.\n+\t(build_dso_cdtor_fn): Likewise.\n+\t(build_module_tree): Remove check for __entrypoint module.\n+\t* runtime.def (P5): Define.\n+\t(ARRAYBOUNDS_SLICEP): Define.\n+\t(ARRAYBOUNDS_INDEXP): Define.\n+\t(NEWTHROW): Define.\n+\t(ADCMP2): Remove.\n+\t(ARRAYCAST): Remove.\n+\t(SWITCH_STRING): Remove.\n+\t(SWITCH_USTRING): Remove.\n+\t(SWITCH_DSTRING): Remove.\n+\t(SWITCH_ERROR): Remove.\n+\t* toir.cc (IRVisitor::visit): Update for new front-end interface.\n+\t(IRVisitor::check_previous_goto): Remove checks for case and default\n+\tstatements.\n+\t(IRVisitor::visit(SwitchStatement *)): Remove handling of string\n+\tswitch conditions.\n+\t* typeinfo.cc: Include d-frontend.h.\n+\t(get_typeinfo_kind): Update for new front-end interface.\n+\t(make_frontend_typeinfo): Likewise.\n+\t(TypeInfoVisitor::visit): Likewise.\n+\t(builtin_typeinfo_p): Likewise.\n+\t(get_typeinfo_decl): Likewise.\n+\t(build_typeinfo): Likewise.\n+\t* types.cc (valist_array_p): Likewise.\n+\t(make_array_type): Likewise.\n+\t(merge_aggregate_types): Likewise.\n+\t(TypeVisitor::visit(TypeBasic *)): Likewise.\n+\t(TypeVisitor::visit(TypeFunction *)): Likewise.\n+\t(TypeVisitor::visit(TypeStruct *)): Update comment.\n+\t* verstr.h: Removed.\n+\t* d-frontend.h: New file.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "b6b26b453dca6cf8d79e71aca8a725c42e056c0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,77 @@\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102787\n+\t* array.c (expand_constructor): When encountering a constant array\n+\texpression or array section within a constructor, simplify it to\n+\tenable better expansion.\n+\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103473\n+\t* simplify.c (simplify_minmaxloc_nodim): Avoid NULL pointer\n+\tdereference when shape is not set.\n+\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/101565\n+\t* check.c (gfc_check_image_index): Verify that SUB argument to\n+\tIMAGE_INDEX is of type integer.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* frontend-passes.c (gfc_expr_walker): Add comment to\n+\tindicate tail recursion.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* target-memory.c (gfc_element_size): Remove unreachable return.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (resolve_oacc_loop_blocks): Remove \"gang reduction on\n+\tan orphan loop\" checking.\n+\t(oacc_is_parallel, oacc_is_kernels, oacc_is_serial)\n+\t(oacc_is_compute_construct): Remove.\n+\n+2021-11-30  Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (oacc_is_parallel_or_serial): Evolve into...\n+\t(oacc_is_compute_construct): ... this function.\n+\t(resolve_oacc_loop_blocks): Use \"oacc_is_compute_construct\"\n+\tinstead of \"oacc_is_parallel_or_serial\" for checking that a\n+\tloop is not orphaned.\n+\n+2021-11-30  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (oacc_is_serial, oacc_is_parallel_or_serial): New.\n+\t(resolve_oacc_loop_blocks): Use oacc_is_parallel_or_serial instead of\n+\toacc_is_parallel.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (oacc_is_parallel, oacc_is_kernels): New 'static'\n+\tfunctions.\n+\t(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC gang\n+\treductions.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* decl.c (gfc_insert_parameter_exprs): Only return after\n+\tresetting type_param_spec_list.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* frontend-passes.c (gfc_expr_walker): Remove unreachable\n+\tbreak.\n+\t* scanner.c (skip_fixed_comments): Remove unreachable\n+\tgcc_unreachable.\n+\t* trans-expr.c (gfc_expr_is_variable): Refactor to make\n+\tcontrol flow more obvious.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "8a1cb9ff91c25bf6904a986b8a55bd4dc082bb88", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,8 @@\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* objc-act.c (objc_build_setter_call): Remove unreachable\n+\treturn.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "5c9083e0ce8412f5689feb638195f26d0ded554e", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,7 @@\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* EXCLUDES: Remove d/dmd sources from list.\n+\n 2021-08-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "f6d0e96116a029a58173814b7f9483826cdc452d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,252 @@\n+2021-11-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103463.c: New test.\n+\t* gcc.target/i386/pr103463-2.c: New test.\n+\n+2021-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94579\n+\t* gcc.dg/analyzer/pr94579.c: New test.\n+\n+2021-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99269\n+\t* gcc.dg/analyzer/pr99269.c: New test.\n+\n+2021-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/100524\n+\t* gcc.dg/analyzer/pragma-2.c: New test.\n+\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/array_constructor_54.f90: New test.\n+\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103473\n+\t* gfortran.dg/minmaxloc_15.f90: New test.\n+\n+2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/101565\n+\t* gfortran.dg/coarray_49.f90: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/103494\n+\t* gcc.dg/vect/pr103494.c: New test.\n+\t* g++.dg/vect/pr103494.cc: Likewise.\n+\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Wcastresult2.d: Update test.\n+\t* gdc.dg/asm1.d: Likewise.\n+\t* gdc.dg/asm2.d: Likewise.\n+\t* gdc.dg/asm3.d: Likewise.\n+\t* gdc.dg/gdc282.d: Likewise.\n+\t* gdc.dg/imports/gdc170.d: Likewise.\n+\t* gdc.dg/intrinsics.d: Likewise.\n+\t* gdc.dg/pr101672.d: Likewise.\n+\t* gdc.dg/pr90650a.d: Likewise.\n+\t* gdc.dg/pr90650b.d: Likewise.\n+\t* gdc.dg/pr94777a.d: Likewise.\n+\t* gdc.dg/pr95250.d: Likewise.\n+\t* gdc.dg/pr96869.d: Likewise.\n+\t* gdc.dg/pr98277.d: Likewise.\n+\t* gdc.dg/pr98457.d: Likewise.\n+\t* gdc.dg/simd1.d: Likewise.\n+\t* gdc.dg/simd2a.d: Likewise.\n+\t* gdc.dg/simd2b.d: Likewise.\n+\t* gdc.dg/simd2c.d: Likewise.\n+\t* gdc.dg/simd2d.d: Likewise.\n+\t* gdc.dg/simd2e.d: Likewise.\n+\t* gdc.dg/simd2f.d: Likewise.\n+\t* gdc.dg/simd2g.d: Likewise.\n+\t* gdc.dg/simd2h.d: Likewise.\n+\t* gdc.dg/simd2i.d: Likewise.\n+\t* gdc.dg/simd2j.d: Likewise.\n+\t* gdc.dg/simd7951.d: Likewise.\n+\t* gdc.dg/torture/gdc309.d: Likewise.\n+\t* gdc.dg/torture/pr94424.d: Likewise.\n+\t* gdc.dg/torture/pr94777b.d: Likewise.\n+\t* lib/gdc-utils.exp (gdc-convert-args): Handle new compiler options.\n+\t(gdc-convert-test): Handle CXXFLAGS, EXTRA_OBJC_SOURCES, and ARG_SETS\n+\ttest directives.\n+\t(gdc-do-test): Only import modules in the test run directory.\n+\t* gdc.dg/pr94777c.d: New test.\n+\t* gdc.dg/pr96156b.d: New test.\n+\t* gdc.dg/pr96157c.d: New test.\n+\t* gdc.dg/simd_ctfe.d: New test.\n+\t* gdc.dg/torture/simd17344.d: New test.\n+\t* gdc.dg/torture/simd20052.d: New test.\n+\t* gdc.dg/torture/simd6.d: New test.\n+\t* gdc.dg/torture/simd7.d: New test.\n+\n+2021-11-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr103440.c: New.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103489\n+\t* gcc.dg/torture/pr103489.c: New testcase.\n+\n+2021-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/103278\n+\t* gcc.dg/tree-ssa/if-to-switch-5.c: Make the test acceptable by\n+\ttargets with no jump-tables.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/nested-reductions-1-routine.c: Adjust.\n+\t* c-c++-common/goacc/nested-reductions-2-routine.c: Adjust.\n+\t* c-c++-common/goacc/orphan-reductions-2.c: Adjust.\n+\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: Adjust.\n+\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: Adjust.\n+\t* gfortran.dg/goacc/orphan-reductions-1.f90: Adjust.\n+\t* gfortran.dg/goacc/orphan-reductions-2.f90: Adjust.\n+\n+2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/orphan-reductions-1.f90: Adjust.\n+\n+2021-11-30  Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/orphan-reductions-3.f90: New test\n+\tverifying that the \"gang reduction on an orphan loop\" error message\n+\tis not emitted for non-orphaned loops.\n+\t* c-c++-common/goacc/orphan-reductions-3.c: Likewise for C and C++.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/nested-reductions-1-routine.c: Adjust.\n+\t* c-c++-common/goacc/nested-reductions-2-routine.c: Likewise.\n+\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n+\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: Likewise.\n+\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: Likewise.\n+\t* c-c++-common/goacc/orphan-reductions-1.c: New test.\n+\t* c-c++-common/goacc/orphan-reductions-2.c: New test.\n+\t* gfortran.dg/goacc/orphan-reductions-1.f90: New test.\n+\t* gfortran.dg/goacc/orphan-reductions-2.f90: New test.\n+\n+2021-11-30  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/routine-4.c (seq, vector, worker, gang):\n+\tRemove loop reductions.\n+\t* c-c++-common/goacc/routine-4-extern.c (seq, vector, worker, gang):\n+\tLikewise.\n+\n+2021-11-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR testsuite/103477\n+\t* gcc.dg/tree-ssa/pr103345.c: Correct xor test for big-endian.\n+\n+2021-11-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103451\n+\t* gcc.dg/pr103451.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-gather-3.c: New test.\n+\t* gcc.dg/vect/vect-gather-4.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_gather_load_8.c: Likewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr99102.c: Add -fno-vect-cost-model.\n+\tRevert:\n+\t2020-09-09  Richard Biener  [rguenther@suse.de]\n+\t* gcc.target/i386/pr87007-4.c: Adjust.\n+\t* gcc.target/i386/pr87007-5.c: Likewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_gather_load_ifn): New target test.\n+\t* gcc.dg/vect/vect-gather-1.c: New test.\n+\t* gcc.dg/vect/vect-gather-2.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_11.c: Likewise.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_13.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gfortran.dg/vect/vect-8.f90: Bump number of vectorized loops\n+\tto 25 for SVE.\n+\t* gcc.target/aarch64/sve/gather_load_10.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/add-mul-overflow-1.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/ubsan/commutative-1.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/complex_mul_1.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/fmax-fmin-1.c: New test.\n+\n+2021-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-fmax-1.c: New test.\n+\t* gcc.dg/vect/vect-fmax-2.c: Likewise.\n+\t* gcc.dg/vect/vect-fmax-3.c: Likewise.\n+\t* gcc.dg/vect/vect-fmin-1.c: New test.\n+\t* gcc.dg/vect/vect-fmin-2.c: Likewise.\n+\t* gcc.dg/vect/vect-fmin-3.c: Likewise.\n+\t* gcc.target/aarch64/fmaxnm_1.c: Likewise.\n+\t* gcc.target/aarch64/fmaxnm_2.c: Likewise.\n+\t* gcc.target/aarch64/fminnm_1.c: Likewise.\n+\t* gcc.target/aarch64/fminnm_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmaxnm_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmaxnm_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/fminnm_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/fminnm_3.c: Likewise.\n+\n+2021-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* c-c++-common/cpp/ucnid-2011-1-utf8.c: Expect errors in C++.\n+\t* c-c++-common/cpp/ucnid-2011-1.c: Likewise.\n+\t* g++.dg/cpp/ucnid-4-utf8.C: Add missing space to dg-options.\n+\t* g++.dg/cpp23/normalize3.C: Enable for c++11 rather than just c++23.\n+\t* g++.dg/cpp23/normalize4.C: Likewise.\n+\t* g++.dg/cpp23/normalize5.C: Likewise.\n+\t* g++.dg/cpp23/normalize7.C: Expect errors rather than just warnings\n+\tfor c++11 and up rather than just c++23.\n+\t* g++.dg/cpp23/ucnid-2-utf8.C: Expect errors even for c++11 .. c++20.\n+\n+2021-11-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100711\n+\t* gcc.target/i386/pr100711-1.c: New test case.\n+\t* gcc.target/i386/pr100711-2.c: New test case.\n+\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103485\n+\t* gcc.dg/pr103485.c: New testcase.\n+\n+2021-11-30  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/102347\n+\t* gcc.target/powerpc/pr102347.c: New test.\n+\n 2021-11-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103217"}, {"sha": "1c04bf2c1b2f0f9f78882788923ed4c5b88e2c8e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,13 @@\n+2021-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* charset.c (convert_escape): Remove unreachable break.\n+\n+2021-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* init.c (lang_defaults): Enable cxx23_identifiers for\n+\t-std={gnu,c}++{11,14,17,20} too.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "13ef5d3d5d5dcfc74129790c626a4a61ff1baa7a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,8 @@\n+2021-11-30  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n+\n+\t* config/vxcrtstuff.c: Undefine caddr_t, pid_t, rlim_t,\n+\tssize_t and vfork after including auto-host.h.\n+\n 2021-11-29  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n \n \t* config.host (powerpc-wrs-vxworks): Do not add crtbegin.o and"}, {"sha": "ed89f02e2906d156702412528b58b481c8b0e045", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,15 @@\n+2021-11-30  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Remove\n+\ttemporary skip.\n+\n+2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Temporarily\n+\tskip.\n+\n 2021-11-29  Richard Biener  <rguenther@suse.de>\n \n \t* oacc-plugin.c (GOMP_PLUGIN_acc_default_dim): Remove unreachable"}, {"sha": "7b574abdd076c461b92aebcd4cc40ca22a6618b8", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,100 @@\n+2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime e6caaab9.\n+\t* libdruntime/Makefile.am (D_EXTRA_FLAGS): Build libdruntime with\n+\t-fpreview=dip1000, -fpreview=fieldwise, and -fpreview=dtorfields.\n+\t(ALL_DRUNTIME_SOURCES): Add DRUNTIME_DSOURCES_STDCXX.\n+\t(DRUNTIME_DSOURCES): Update list of C binding modules.\n+\t(DRUNTIME_DSOURCES_STDCXX): Likewise.\n+\t(DRUNTIME_DSOURCES_LINUX): Likewise.\n+\t(DRUNTIME_DSOURCES_OPENBSD): Likewise.\n+\t(DRUNTIME_DISOURCES): Remove __entrypoint.di.\n+\t* libdruntime/Makefile.in: Regenerated.\n+\t* libdruntime/__entrypoint.di: Removed.\n+\t* libdruntime/gcc/deh.d (_d_isbaseof): Update signature.\n+\t(_d_createTrace): Likewise.\n+\t(__gdc_begin_catch): Remove reference to the exception.\n+\t(_d_throw): Increment reference count of thrown object before unwind.\n+\t(__gdc_personality): Chain exceptions with  Throwable.chainTogether.\n+\t* libdruntime/gcc/emutls.d: Update imports.\n+\t* libdruntime/gcc/sections/elf.d: Update imports.\n+\t(DSO.moduleGroup): Update signature.\n+\t* libdruntime/gcc/sections/macho.d: Update imports.\n+\t(DSO.moduleGroup): Update signature.\n+\t* libdruntime/gcc/sections/pecoff.d: Update imports.\n+\t(DSO.moduleGroup): Update signature.\n+\t* src/MERGE: Merge upstream phobos 5ab9ad256.\n+\t* src/Makefile.am (D_EXTRA_DFLAGS): Add -fpreview=dip1000 and\n+\t-fpreview=dtorfields flags.\n+\t(PHOBOS_DSOURCES): Update list of std modules.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/lib/libphobos.exp (libphobos-dg-test): Handle assembly\n+\tcompile types.\n+\t(dg-test): Override.\n+\t(additional_prunes): Define.\n+\t(libphobos-dg-prune): Filter any additional_prunes set by tests.\n+\t* testsuite/libphobos.aa/test_aa.d: Update test.\n+\t* testsuite/libphobos.druntime/druntime.exp (version_flags): Add\n+\t-fversion=CoreUnittest.\n+\t* testsuite/libphobos.druntime_shared/druntime_shared.exp\n+\t(version_flags): Add -fversion=CoreUnittest -fversion=Shared.\n+\t* testsuite/libphobos.exceptions/unknown_gc.d: Update test.\n+\t* testsuite/libphobos.hash/test_hash.d: Update test.\n+\t* testsuite/libphobos.phobos/phobos.exp (version_flags): Add\n+\t-fversion=StdUnittest\n+\t* testsuite/libphobos.phobos_shared/phobos_shared.exp (version_flags):\n+\tLikewise.\n+\t* testsuite/libphobos.shared/host.c: Update test.\n+\t* testsuite/libphobos.shared/load.d: Update test.\n+\t* testsuite/libphobos.shared/load_13414.d: Update test.\n+\t* testsuite/libphobos.thread/fiber_guard_page.d: Update test.\n+\t* testsuite/libphobos.thread/tlsgc_sections.d: Update test.\n+\t* testsuite/testsuite_flags.in: Add -fpreview=dip1000 to --gdcflags.\n+\t* testsuite/libphobos.shared/link_mod_collision.d: Removed.\n+\t* testsuite/libphobos.shared/load_mod_collision.d: Removed.\n+\t* testsuite/libphobos.betterc/betterc.exp: New test.\n+\t* testsuite/libphobos.config/config.exp: New test.\n+\t* testsuite/libphobos.gc/gc.exp: New test.\n+\t* testsuite/libphobos.imports/imports.exp: New test.\n+\t* testsuite/libphobos.lifetime/lifetime.exp: New test.\n+\t* testsuite/libphobos.unittest/unittest.exp: New test.\n+\t* testsuite/libphobos.allocations/alloc_from_assert.d: New file.\n+\t* testsuite/libphobos.betterc/test18828.d: New file.\n+\t* testsuite/libphobos.betterc/test19416.d: New file.\n+\t* testsuite/libphobos.betterc/test19421.d: New file.\n+\t* testsuite/libphobos.betterc/test19561.d: New file.\n+\t* testsuite/libphobos.betterc/test19924.d: New file.\n+\t* testsuite/libphobos.betterc/test20088.d: New file.\n+\t* testsuite/libphobos.betterc/test20613.d: New file.\n+\t* testsuite/libphobos.config/test19433.d: New file.\n+\t* testsuite/libphobos.config/test20459.d: New file.\n+\t* testsuite/libphobos.exceptions/assert_fail.d: New file.\n+\t* testsuite/libphobos.exceptions/catch_in_finally.d: New file.\n+\t* testsuite/libphobos.exceptions/future_message.d: New file.\n+\t* testsuite/libphobos.exceptions/long_backtrace_trunc.d: New file.\n+\t* testsuite/libphobos.exceptions/refcounted.d: New file.\n+\t* testsuite/libphobos.exceptions/rt_trap_exceptions.d: New file.\n+\t* testsuite/libphobos.exceptions/rt_trap_exceptions_drt.d: New file.\n+\t* testsuite/libphobos.gc/attributes.d: New file.\n+\t* testsuite/libphobos.gc/forkgc.d: New file.\n+\t* testsuite/libphobos.gc/forkgc2.d: New file.\n+\t* testsuite/libphobos.gc/nocollect.d: New file.\n+\t* testsuite/libphobos.gc/precisegc.d: New file.\n+\t* testsuite/libphobos.gc/recoverfree.d: New file.\n+\t* testsuite/libphobos.gc/sigmaskgc.d: New file.\n+\t* testsuite/libphobos.gc/startbackgc.d: New file.\n+\t* testsuite/libphobos.imports/bug18193.d: New file.\n+\t* testsuite/libphobos.init_fini/custom_gc.d: New file.\n+\t* testsuite/libphobos.init_fini/test18996.d: New file.\n+\t* testsuite/libphobos.lifetime/large_aggregate_destroy_21097.d: New file.\n+\t* testsuite/libphobos.thread/external_threads.d: New file.\n+\t* testsuite/libphobos.thread/join_detach.d: New file.\n+\t* testsuite/libphobos.thread/test_import.d: New file.\n+\t* testsuite/libphobos.thread/tlsstack.d: New file.\n+\t* testsuite/libphobos.typeinfo/enum_.d: New file.\n+\t* testsuite/libphobos.typeinfo/isbaseof.d: New file.\n+\t* testsuite/libphobos.unittest/customhandler.d: New file.\n+\n 2021-11-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* testsuite/lib/libphobos.exp: Prune warnings from external"}, {"sha": "e7602224bfd8c061effa2d19a2361ac50c5895f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c177e80609287cd32c6096a4ddc4dbef56c74f77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c177e80609287cd32c6096a4ddc4dbef56c74f77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c177e80609287cd32c6096a4ddc4dbef56c74f77", "patch": "@@ -1,3 +1,60 @@\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/cons/char/moveable.cc: Allow\n+\tmoved-from string to be non-empty.\n+\t* testsuite/21_strings/basic_string/cons/char/moveable2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/char/moveable2_c++17.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/moveable.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/moveable2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/moveable2_c++17.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/87749.cc:\n+\tConstruct empty string before setting oom flag.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/87749.cc:\n+\tLikewise.\n+\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h (basic_string(basic_string&&)): Fix\n+\tmem-initializer for _GLIBCXX_FULLY_DYNAMIC_STRING==0 case.\n+\t* testsuite/21_strings/basic_string/cons/char/noexcept_move_construct.cc:\n+\tRemove outdated comment.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/noexcept_move_construct.cc:\n+\tLikewise.\n+\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/sstream-inst.cc (_GLIBCXX_USE_CXX11_ABI): Define to\n+\tselect new ABI.\n+\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_vector.h (vector::_S_do_relocate): Remove\n+\tC++20 constexpr specifier.\n+\t(vector::_S_relocate) [__cpp_if_constexpr]: Call __relocate_a\n+\tdirectly without tag dispatching.\n+\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103453\n+\t* config/allocator/malloc_allocator_base.h\n+\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Define for Clang.\n+\t* config/allocator/new_allocator_base.h\n+\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Likewise.\n+\n+2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/debug_mode.xml: Replace \"his or her\" with \"they\".\n+\t* doc/html/manual/debug_mode_design.html: Regenerate.\n+\n+2021-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/bit (byteswap): Add [[nodiscard]].\n+\n 2021-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/std/bit (__cpp_lib_byteswap, byteswap): Define."}]}