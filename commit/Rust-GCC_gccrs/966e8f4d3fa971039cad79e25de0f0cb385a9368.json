{"sha": "966e8f4d3fa971039cad79e25de0f0cb385a9368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2ZThmNGQzZmE5NzEwMzljYWQ3OWUyNWRlMGYwY2IzODVhOTM2OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-02-29T20:09:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-02-29T20:09:05Z"}, "message": "toplev.c (input_file_stack, [...]): Remove.\n\ngcc\n\t* toplev.c (input_file_stack, input_file_stack_tick, fs_p,\n\tinput_file_stack_history, input_file_stack_restored): Remove.\n\t(push_srcloc, pop_srcloc, restore_input_file_stack): Likewise.\n\t* input.h (struct file_stack): Remove.\n\t(push_srcloc, pop_srcloc, restore_input_file_stack): Likewise.\n\t(input_file_stack, input_file_stack_tick, INPUT_FILE_STACK_BITS):\n\tLikewise.\n\t* diagnostic.h (struct diagnostic_context) <last_module>: Change\n\ttype.\n\t(diagnostic_last_module_changed): Add 'map' argument.\n\t(diagnostic_set_last_function): Likewise.\n\t* diagnostic.c (undiagnostic_report_current_module): Iterate using\n\tline map, not input_file_stack.\n\t* c-lex.c (fe_file_change): Don't use push_srcloc or pop_srcloc.\ngcc/cp\n\t* parser.c (struct cp_token) <input_file_stack_index>: Remove.\n\t(cp_lexer_get_preprocessor_token): Update.\n\t(cp_lexer_set_source_position_from_token): Don't call\n\trestore_input_file_stack.\n\t* lex.c (cxx_init): Don't use push_srcloc or pop_srcloc.\ngcc/testsuite\n\t* g++.dg/warn/pragma-system_header2.C: Ignore \"included from\"\n\tline.\n\nFrom-SVN: r132775", "tree": {"sha": "11ac9314a803ee4f351c76ac29b94a265faace5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ac9314a803ee4f351c76ac29b94a265faace5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966e8f4d3fa971039cad79e25de0f0cb385a9368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966e8f4d3fa971039cad79e25de0f0cb385a9368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966e8f4d3fa971039cad79e25de0f0cb385a9368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966e8f4d3fa971039cad79e25de0f0cb385a9368/comments", "author": null, "committer": null, "parents": [{"sha": "3cbe0ba6aab8e6310613a7cfc1d153840f210cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbe0ba6aab8e6310613a7cfc1d153840f210cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbe0ba6aab8e6310613a7cfc1d153840f210cf7"}], "stats": {"total": 195, "additions": 70, "deletions": 125}, "files": [{"sha": "a3a554037ee3c0eb81c2e26da66467ae15b86c5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -1,3 +1,20 @@\n+2008-02-29  Tom Tromey  <tromey@redhat.com>\n+\n+\t* toplev.c (input_file_stack, input_file_stack_tick, fs_p,\n+\tinput_file_stack_history, input_file_stack_restored): Remove.\n+\t(push_srcloc, pop_srcloc, restore_input_file_stack): Likewise.\n+\t* input.h (struct file_stack): Remove.\n+\t(push_srcloc, pop_srcloc, restore_input_file_stack): Likewise.\n+\t(input_file_stack, input_file_stack_tick, INPUT_FILE_STACK_BITS):\n+\tLikewise.\n+\t* diagnostic.h (struct diagnostic_context) <last_module>: Change\n+\ttype.\n+\t(diagnostic_last_module_changed): Add 'map' argument.\n+\t(diagnostic_set_last_function): Likewise.\n+\t* diagnostic.c (undiagnostic_report_current_module): Iterate using\n+\tline map, not input_file_stack.\n+\t* c-lex.c (fe_file_change): Don't use push_srcloc or pop_srcloc.\n+\n 2008-02-29  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (arm_addsi3): Add r/k/n alternative."}, {"sha": "617cd7ee52c092eb108b82f158da450ae34f62a7", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -207,8 +207,7 @@ fe_file_change (const struct line_map *new_map)\n \t{\n \t  int included_at = LAST_SOURCE_LINE_LOCATION (new_map - 1);\n \n-\t  input_location = included_at;\n-\t  push_srcloc (new_map->start_location);\n+\t  input_location = new_map->start_location;\n \t  (*debug_hooks->start_source_file) (included_at, new_map->to_file);\n #ifndef NO_IMPLICIT_EXTERN_C\n \t  if (c_header_level)\n@@ -231,7 +230,7 @@ fe_file_change (const struct line_map *new_map)\n \t  --pending_lang_change;\n \t}\n #endif\n-      pop_srcloc ();\n+      input_location = new_map->start_location;\n \n       (*debug_hooks->end_source_file) (new_map->to_line);\n     }"}, {"sha": "4c0d9198bcb94f7bc8f625c9b516ecbc6729d981", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -1,3 +1,11 @@\n+2008-02-29  Tom Tromey  <tromey@redhat.com>\n+\n+\t* parser.c (struct cp_token) <input_file_stack_index>: Remove.\n+\t(cp_lexer_get_preprocessor_token): Update.\n+\t(cp_lexer_set_source_position_from_token): Don't call\n+\trestore_input_file_stack.\n+\t* lex.c (cxx_init): Don't use push_srcloc or pop_srcloc.\n+\n 2008-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tRevert:"}, {"sha": "0b2a37259f4cba292de52b085086edc724958c28", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -372,6 +372,7 @@ bool statement_code_p[MAX_TREE_CODES];\n bool\n cxx_init (void)\n {\n+  location_t saved_loc;\n   unsigned int i;\n   static const enum tree_code stmt_codes[] = {\n    CTOR_INITIALIZER,\tTRY_BLOCK,\tHANDLER,\n@@ -385,7 +386,8 @@ cxx_init (void)\n   for (i = 0; i < ARRAY_SIZE (stmt_codes); i++)\n     statement_code_p[stmt_codes[i]] = true;\n \n-  push_srcloc (BUILTINS_LOCATION);\n+  saved_loc = input_location;\n+  input_location = BUILTINS_LOCATION;\n \n   init_reswords ();\n   init_tree ();\n@@ -413,15 +415,15 @@ cxx_init (void)\n \n   if (c_common_init () == false)\n     {\n-      pop_srcloc();\n+      input_location = saved_loc;\n       return false;\n     }\n \n   init_cp_pragma ();\n \n   init_repo ();\n \n-  pop_srcloc();\n+  input_location = saved_loc;\n   return true;\n }\n \f"}, {"sha": "458ab7b64ddb728dfab3c06819c2ef907356ea07", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -79,8 +79,6 @@ typedef struct cp_token GTY (())\n      KEYWORD is RID_MAX) iff this name was looked up and found to be\n      ambiguous.  An error has already been reported.  */\n   BOOL_BITFIELD ambiguous_p : 1;\n-  /* The input file stack index at which this token was found.  */\n-  unsigned input_file_stack_index : INPUT_FILE_STACK_BITS;\n   /* The value associated with this token, if any.  */\n   union cp_token_value {\n     /* Used for CPP_NESTED_NAME_SPECIFIER and CPP_TEMPLATE_ID.  */\n@@ -99,7 +97,7 @@ DEF_VEC_ALLOC_P (cp_token_position,heap);\n \n static cp_token eof_token =\n {\n-  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, 0, false, 0, { NULL },\n+  CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, false, 0, { NULL },\n   0\n };\n \n@@ -408,7 +406,6 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n   token->type\n     = c_lex_with_flags (&token->u.value, &token->location, &token->flags,\n \t\t\tlexer == NULL ? 0 : C_LEX_RAW_STRINGS);\n-  token->input_file_stack_index = input_file_stack_tick;\n   token->keyword = RID_MAX;\n   token->pragma_kind = PRAGMA_NONE;\n   token->in_system_header = in_system_header;\n@@ -490,7 +487,6 @@ cp_lexer_set_source_position_from_token (cp_token *token)\n     {\n       input_location = token->location;\n       in_system_header = token->in_system_header;\n-      restore_input_file_stack (token->input_file_stack_index);\n     }\n }\n "}, {"sha": "bc4e051b8b5c7d20eb70584f51794da5e5478c92", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -269,31 +269,37 @@ diagnostic_report_current_function (diagnostic_context *context,\n void\n diagnostic_report_current_module (diagnostic_context *context)\n {\n-  struct file_stack *p;\n+  const struct line_map *map;\n \n   if (pp_needs_newline (context->printer))\n     {\n       pp_newline (context->printer);\n       pp_needs_newline (context->printer) = false;\n     }\n \n-  p = input_file_stack;\n-  if (p && diagnostic_last_module_changed (context))\n+  if (input_location <= BUILTINS_LOCATION)\n+    return;\n+\n+  map = linemap_lookup (line_table, input_location);\n+  if (map && diagnostic_last_module_changed (context, map))\n     {\n-      expanded_location xloc = expand_location (p->location);\n-      pp_verbatim (context->printer,\n-                   \"In file included from %s:%d\",\n-\t\t   xloc.file, xloc.line);\n-      while ((p = p->next) != NULL)\n+      diagnostic_set_last_module (context, map);\n+      if (! MAIN_FILE_P (map))\n \t{\n-\t  xloc = expand_location (p->location);\n+\t  map = INCLUDED_FROM (line_table, map);\n \t  pp_verbatim (context->printer,\n-\t\t       \",\\n                 from %s:%d\",\n-\t\t       xloc.file, xloc.line);\n+\t\t       \"In file included from %s:%d\",\n+\t\t       map->to_file, LAST_SOURCE_LINE (map));\n+\t  while (! MAIN_FILE_P (map))\n+\t    {\n+\t      map = INCLUDED_FROM (line_table, map);\n+\t      pp_verbatim (context->printer,\n+\t\t\t   \",\\n                 from %s:%d\",\n+\t\t\t   map->to_file, LAST_SOURCE_LINE (map));\n+\t    }\n+\t  pp_verbatim (context->printer, \":\");\n+\t  pp_newline (context->printer);\n \t}\n-      pp_verbatim (context->printer, \":\");\n-      diagnostic_set_last_module (context);\n-      pp_newline (context->printer);\n     }\n }\n "}, {"sha": "992c0c46025056017b0e25bc23cd4b558e6e0109", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -1,5 +1,5 @@\n /* Various declarations for language-independent diagnostics subroutines.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n@@ -110,8 +110,9 @@ struct diagnostic_context\n      function name.  */\n   tree last_function;\n \n-  /* Used to detect when input_file_stack has changed since last described.  */\n-  int last_module;\n+  /* Used to detect when the input file stack has changed since last\n+     described.  */\n+  const struct line_map *last_module;\n \n   int lock;\n };\n@@ -152,13 +153,13 @@ struct diagnostic_context\n \n /* True if the last module or file in which a diagnostic was reported is\n    different from the current one.  */\n-#define diagnostic_last_module_changed(DC) \\\n-  ((DC)->last_module != input_file_stack_tick)\n+#define diagnostic_last_module_changed(DC, MAP)\t\\\n+  ((DC)->last_module != MAP)\n \n /* Remember the current module or file as being the last one in which we\n    report a diagnostic.  */\n-#define diagnostic_set_last_module(DC) \\\n-  (DC)->last_module = input_file_stack_tick\n+#define diagnostic_set_last_module(DC, MAP)\t\\\n+  (DC)->last_module = MAP\n \n /* Raise SIGABRT on any diagnostic of severity DK_ERROR or higher.  */\n #define diagnostic_abort_on_error(DC) \\"}, {"sha": "5d4325923159b754e9c048619ba863a5a460e612", "filename": "gcc/input.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -49,34 +49,15 @@ extern expanded_location expand_location (source_location);\n    This could be removed but it hardly seems worth the effort.  */\n typedef source_location location_t;\n \n-struct file_stack\n-{\n-  struct file_stack *next;\n-  location_t location;\n-};\n-\n /* Top-level source file.  */\n extern const char *main_input_filename;\n \n extern location_t input_location;\n-extern void push_srcloc (location_t);\n-extern void pop_srcloc (void);\n-extern void restore_input_file_stack (int);\n \n #define LOCATION_FILE(LOC) ((expand_location (LOC)).file)\n #define LOCATION_LINE(LOC) ((expand_location (LOC)).line)\n \n #define input_line LOCATION_LINE (input_location)\n #define input_filename LOCATION_FILE (input_location)\n \n-/* Stack of currently pending input files.\n-   The line member is not accurate for the innermost file on the stack.  */\n-extern struct file_stack *input_file_stack;\n-\n-/* Incremented on each change to input_file_stack.  */\n-extern int input_file_stack_tick;\n-\n-/* The number of bits available for input_file_stack_tick.  */\n-#define INPUT_FILE_STACK_BITS\t31\n-\n #endif"}, {"sha": "951afe1ab27a26177c00cb5ec967c0e5d3a5dbed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -1,3 +1,8 @@\n+2008-02-29  Tom Tromey  <tromey@redhat.com>\n+\n+\t* g++.dg/warn/pragma-system_header2.C: Ignore \"included from\"\n+\tline.\n+\n 2008-02-29  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* testsuite/gcc.dg/tree-ssa/ltrans-8.c: Increase the size of strides"}, {"sha": "a39bea72143a2333ffea559be7d0be309a834aa2", "filename": "gcc/testsuite/g++.dg/warn/pragma-system_header2.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpragma-system_header2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpragma-system_header2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpragma-system_header2.C?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -3,6 +3,7 @@\n \n #include \"pragma-system_header2.h\"\n \n+\n void f()\n {\n   g<int>();\n@@ -11,3 +12,6 @@ void f()\n \n // { dg-warning \"conversion\" \"\" { target *-*-* } 2 }\n // { dg-warning \"conversion\" \"\" { target *-*-* } 5 }\n+\n+// I couldn't find another way to make this work.\n+// { dg-prune-output \"In file included from\" }"}, {"sha": "5b1600cfeffddca510fbb2b40e08d7313b99a7d9", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966e8f4d3fa971039cad79e25de0f0cb385a9368/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=966e8f4d3fa971039cad79e25de0f0cb385a9368", "patch": "@@ -144,23 +144,6 @@ location_t input_location;\n \n struct line_maps *line_table;\n \n-/* Stack of currently pending input files.  */\n-\n-struct file_stack *input_file_stack;\n-\n-/* Incremented on each change to input_file_stack.  */\n-int input_file_stack_tick;\n-\n-/* Record of input_file_stack at each tick.  */\n-typedef struct file_stack *fs_p;\n-DEF_VEC_P(fs_p);\n-DEF_VEC_ALLOC_P(fs_p,heap);\n-static VEC(fs_p,heap) *input_file_stack_history;\n-\n-/* Whether input_file_stack has been restored to a previous state (in\n-   which case there should be no more pushing).  */\n-static bool input_file_stack_restored;\n-\n /* Name to use as base of names for dump output files.  */\n \n const char *dump_base_name;\n@@ -953,63 +936,6 @@ warn_deprecated_use (tree node)\n     }\n }\n \n-/* Save the current INPUT_LOCATION on the top entry in the\n-   INPUT_FILE_STACK.  Push a new entry for FILE and LINE, and set the\n-   INPUT_LOCATION accordingly.  */\n-\n-void\n-push_srcloc (location_t fline)\n-{\n-  struct file_stack *fs;\n-\n-  gcc_assert (!input_file_stack_restored);\n-  if (input_file_stack_tick == (int) ((1U << INPUT_FILE_STACK_BITS) - 1))\n-    sorry (\"GCC supports only %d input file changes\", input_file_stack_tick);\n-\n-  fs = XNEW (struct file_stack);\n-  fs->location = input_location;\n-  fs->next = input_file_stack;\n-  input_location = fline;\n-  input_file_stack = fs;\n-  input_file_stack_tick++;\n-  VEC_safe_push (fs_p, heap, input_file_stack_history, input_file_stack);\n-}\n-\n-/* Pop the top entry off the stack of presently open source files.\n-   Restore the INPUT_LOCATION from the new topmost entry on the\n-   stack.  */\n-\n-void\n-pop_srcloc (void)\n-{\n-  struct file_stack *fs;\n-\n-  gcc_assert (!input_file_stack_restored);\n-  if (input_file_stack_tick == (int) ((1U << INPUT_FILE_STACK_BITS) - 1))\n-    sorry (\"GCC supports only %d input file changes\", input_file_stack_tick);\n-\n-  fs = input_file_stack;\n-  input_location = fs->location;\n-  input_file_stack = fs->next;\n-  input_file_stack_tick++;\n-  VEC_safe_push (fs_p, heap, input_file_stack_history, input_file_stack);\n-}\n-\n-/* Restore the input file stack to its state as of TICK, for the sake\n-   of diagnostics after processing the whole input.  Once this has\n-   been called, push_srcloc and pop_srcloc may no longer be\n-   called.  */\n-void\n-restore_input_file_stack (int tick)\n-{\n-  if (tick == 0)\n-    input_file_stack = NULL;\n-  else\n-    input_file_stack = VEC_index (fs_p, input_file_stack_history, tick - 1);\n-  input_file_stack_tick = tick;\n-  input_file_stack_restored = true;\n-}\n-\n /* Compile an entire translation unit.  Write a file of assembly\n    output and various debugging dumps.  */\n "}]}