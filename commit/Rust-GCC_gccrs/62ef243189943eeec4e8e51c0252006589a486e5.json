{"sha": "62ef243189943eeec4e8e51c0252006589a486e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlZjI0MzE4OTk0M2VlZWM0ZThlNTFjMDI1MjAwNjU4OWE0ODZlNQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-04-07T06:33:55Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-04-07T06:33:55Z"}, "message": "Fix comments.\n\n2010-04-07  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-if-conv.c: Fix indentation and comments.\n\nFrom-SVN: r158041", "tree": {"sha": "66ada3bcd0734431a3b7efbb5409dd5788355485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66ada3bcd0734431a3b7efbb5409dd5788355485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ef243189943eeec4e8e51c0252006589a486e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ef243189943eeec4e8e51c0252006589a486e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ef243189943eeec4e8e51c0252006589a486e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ef243189943eeec4e8e51c0252006589a486e5/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baaa8e9638e4f5681fa80840b4cae44122b7e6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baaa8e9638e4f5681fa80840b4cae44122b7e6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baaa8e9638e4f5681fa80840b4cae44122b7e6b7"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "4eae15aecd3ab1007322ec2254a17e37067d6d4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ef243189943eeec4e8e51c0252006589a486e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ef243189943eeec4e8e51c0252006589a486e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62ef243189943eeec4e8e51c0252006589a486e5", "patch": "@@ -1,3 +1,7 @@\n+2010-04-07  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-if-conv.c: Fix indentation and comments.\n+\n 2010-04-07  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-if-conv.c: Sort static functions in topological order."}, {"sha": "4a563f32311e09cf212d3fa936cd0f90a43da229", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ef243189943eeec4e8e51c0252006589a486e5/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ef243189943eeec4e8e51c0252006589a486e5/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=62ef243189943eeec4e8e51c0252006589a486e5", "patch": "@@ -130,7 +130,7 @@ ifc_temp_var (tree type, tree exp)\n   return stmt;\n }\n \n-/* Add condition COND into predicate list of basic block BB.  */\n+/* Add condition NEW_COND into predicate list of basic block BB.  */\n \n static void\n add_to_predicate_list (basic_block bb, tree new_cond)\n@@ -139,16 +139,18 @@ add_to_predicate_list (basic_block bb, tree new_cond)\n \n   if (cond)\n     cond = fold_build2_loc (EXPR_LOCATION (cond),\n-\t\t\tTRUTH_OR_EXPR, boolean_type_node,\n-\t\t\tunshare_expr (cond), new_cond);\n+\t\t\t    TRUTH_OR_EXPR, boolean_type_node,\n+\t\t\t    unshare_expr (cond), new_cond);\n   else\n     cond = new_cond;\n \n   bb->aux = cond;\n }\n \n-/* Add condition COND into BB's predicate list.  PREV_COND is\n-   existing condition.  */\n+/* And condition COND to the previous condition PREV_COND and add this\n+   to the predicate list of the destination of edge E.  GSI is the\n+   place where the gimplification of the resulting condition should\n+   output code.  LOOP is the loop to be if-converted.  */\n \n static tree\n add_to_dst_predicate_list (struct loop *loop, edge e,\n@@ -254,7 +256,7 @@ tree_if_convert_cond_stmt (struct loop *loop, gimple stmt, tree cond,\n    loop.  It is used here when it is required to delete current statement.  */\n \n static tree\n-tree_if_convert_stmt (struct loop *  loop, gimple t, tree cond,\n+tree_if_convert_stmt (struct loop *loop, gimple t, tree cond,\n \t\t      gimple_stmt_iterator *gsi)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -872,8 +874,8 @@ replace_phi_with_cond_gimple_assign_stmt (gimple phi, tree cond,\n     }\n }\n \n-/* Process phi nodes for the given  LOOP.  Replace phi nodes with cond\n-   modify expr.  */\n+/* Process phi nodes for the given LOOP.  Replace phi nodes with\n+   conditional modify expressions.  */\n \n static void\n process_phi_nodes (struct loop *loop)\n@@ -882,7 +884,6 @@ process_phi_nodes (struct loop *loop)\n   unsigned int orig_loop_num_nodes = loop->num_nodes;\n   unsigned int i;\n \n-  /* Replace phi nodes with cond. modify expr.  */\n   for (i = 1; i < orig_loop_num_nodes; i++)\n     {\n       gimple phi;\n@@ -897,7 +898,7 @@ process_phi_nodes (struct loop *loop)\n       phi_gsi = gsi_start_phis (bb);\n       gsi = gsi_after_labels (bb);\n \n-      /* BB has two predecessors. Using predecessor's aux field, set\n+      /* BB has two predecessors.  Using predecessor's aux field, set\n \t appropriate condition for the PHI node replacement.  */\n       if (!gsi_end_p (phi_gsi))\n \ttrue_bb = find_phi_replacement_condition (loop, bb, &cond, &gsi);\n@@ -914,8 +915,8 @@ process_phi_nodes (struct loop *loop)\n   return;\n }\n \n-/* Combine all basic block from the given LOOP into one or two super\n-   basic block.  Replace PHI nodes with conditional modify expression.  */\n+/* Combine all the basic blocks from LOOP into one or two super basic\n+   blocks.  Replace PHI nodes with conditional modify expressions.  */\n \n static void\n combine_blocks (struct loop *loop)"}]}