{"sha": "aea744402793cf5f295c638d76844b3290ce30a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhNzQ0NDAyNzkzY2Y1ZjI5NWM2MzhkNzY4NDRiMzI5MGNlMzBhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-12-06T10:06:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-12-06T10:06:38Z"}, "message": "[multiple changes]\n\n2007-12-06  Zdenek Dvorak  <ook@ucw.cz>\n\t    Dorit Nuzman  <dorit@il.ibm.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/34005\n\t* tree-gimple.c (is_gimple_formal_tmp_rhs): Add a case for COND_EXPR.\n\t* gimplify.c (gimplify_ctx): Add a new member allow_rhs_cond_expr.\n\t(gimplify_pure_cond_expr): New function.\n\t(generic_expr_could_trap_p): New function.\n\t(gimplify_cond_expr): Call gimplify_pure_cond_expr.\n\t(force_gimple_operand): Initialize new field allow_rhs_cond_expr.\n\n2007-12-06  Martin Michlmayr <tbm@cyrius.com>\n\t    Dorit Nuzman  <dorit@il.ibm.com>\n\n\tPR tree-optimization/34005\n\t* gcc.dg/vect/pr34005.c: New test.\n\nFrom-SVN: r130647", "tree": {"sha": "d3ee7ca422466e7b440771e07c8bd5951262c11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ee7ca422466e7b440771e07c8bd5951262c11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea744402793cf5f295c638d76844b3290ce30a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea744402793cf5f295c638d76844b3290ce30a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea744402793cf5f295c638d76844b3290ce30a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea744402793cf5f295c638d76844b3290ce30a5/comments", "author": null, "committer": null, "parents": [{"sha": "12959abe9ee629768541ebcba0cbc12865d5b8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12959abe9ee629768541ebcba0cbc12865d5b8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12959abe9ee629768541ebcba0cbc12865d5b8af"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "5a6d8acf9ccf763ae0394d9f833237913f594554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aea744402793cf5f295c638d76844b3290ce30a5", "patch": "@@ -1,3 +1,15 @@\n+2007-12-06  Zdenek Dvorak  <ook@ucw.cz>\n+\t    Dorit Nuzman  <dorit@il.ibm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/34005\n+\t* tree-gimple.c (is_gimple_formal_tmp_rhs): Add a case for COND_EXPR.\n+\t* gimplify.c (gimplify_ctx): Add a new member allow_rhs_cond_expr.\n+\t(gimplify_pure_cond_expr): New function.\n+\t(generic_expr_could_trap_p): New function.\n+\t(gimplify_cond_expr): Call gimplify_pure_cond_expr.\n+\t(force_gimple_operand): Initialize new field allow_rhs_cond_expr.\n+\n 2007-12-06  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_emit_stack_tie): New function."}, {"sha": "06f73802a88c985a336bfd214fa8f675d60d15b7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=aea744402793cf5f295c638d76844b3290ce30a5", "patch": "@@ -94,6 +94,7 @@ struct gimplify_ctx\n   int conditions;\n   bool save_stack;\n   bool into_ssa;\n+  bool allow_rhs_cond_expr;\n };\n \n static struct gimplify_ctx *gimplify_ctxp;\n@@ -2546,6 +2547,61 @@ gimple_boolify (tree expr)\n     }\n }\n \n+/* Given a conditional expression *EXPR_P without side effects, gimplify\n+   its operands.  New statements are inserted to PRE_P.  */\n+\n+static enum gimplify_status\n+gimplify_pure_cond_expr (tree *expr_p, tree *pre_p)\n+{\n+  tree expr = *expr_p, cond;\n+  enum gimplify_status ret, tret;\n+  enum tree_code code;\n+\n+  cond = gimple_boolify (COND_EXPR_COND (expr));\n+\n+  /* We need to handle && and || specially, as their gimplification\n+     creates pure cond_expr, thus leading to an infinite cycle otherwise.  */\n+  code = TREE_CODE (cond);\n+  if (code == TRUTH_ANDIF_EXPR)\n+    TREE_SET_CODE (cond, TRUTH_AND_EXPR);\n+  else if (code == TRUTH_ORIF_EXPR)\n+    TREE_SET_CODE (cond, TRUTH_OR_EXPR);\n+  ret = gimplify_expr (&cond, pre_p, NULL,\n+\t\t\t      is_gimple_condexpr, fb_rvalue);\n+  COND_EXPR_COND (*expr_p) = cond;\n+\n+  tret = gimplify_expr (&COND_EXPR_THEN (expr), pre_p, NULL,\n+\t\t\t\t   is_gimple_val, fb_rvalue);\n+  ret = MIN (ret, tret);\n+  tret = gimplify_expr (&COND_EXPR_ELSE (expr), pre_p, NULL,\n+\t\t\t\t   is_gimple_val, fb_rvalue);\n+\n+  return MIN (ret, tret);\n+}\n+\n+/* Returns true if evaluating EXPR could trap.\n+   EXPR is GENERIC, while tree_could_trap_p can be called\n+   only on GIMPLE.  */\n+\n+static bool\n+generic_expr_could_trap_p (tree expr)\n+{\n+  unsigned i, n;\n+\n+  if (!expr || is_gimple_val (expr))\n+    return false;\n+\n+  if (!EXPR_P (expr) || tree_could_trap_p (expr))\n+    return true;\n+\n+  n = TREE_OPERAND_LENGTH (expr);\n+  for (i = 0; i < n; i++)\n+    if (generic_expr_could_trap_p (TREE_OPERAND (expr, i)))\n+      return true;\n+\n+  return false;\n+}\n+\n /*  Convert the conditional expression pointed to by EXPR_P '(p) ? a : b;'\n     into\n \n@@ -2579,6 +2635,15 @@ gimplify_cond_expr (tree *expr_p, tree *pre_p, fallback_t fallback)\n \n       if ((fallback & fb_lvalue) == 0)\n \t{\n+\t  if (gimplify_ctxp->allow_rhs_cond_expr\n+\t      /* If either branch has side effects or could trap, it can't be\n+\t\t evaluated unconditionally.  */\n+\t      && !TREE_SIDE_EFFECTS (TREE_OPERAND (*expr_p, 1))\n+\t      && !generic_expr_could_trap_p (TREE_OPERAND (*expr_p, 1))\n+\t      && !TREE_SIDE_EFFECTS (TREE_OPERAND (*expr_p, 2))\n+\t      && !generic_expr_could_trap_p (TREE_OPERAND (*expr_p, 2)))\n+\t    return gimplify_pure_cond_expr (expr_p, pre_p);\n+\n \t  result = tmp2 = tmp = create_tmp_var (TREE_TYPE (expr), \"iftmp\");\n \t  ret = GS_ALL_DONE;\n \t}\n@@ -2593,7 +2658,7 @@ gimplify_cond_expr (tree *expr_p, tree *pre_p, fallback_t fallback)\n \t  if (TREE_TYPE (TREE_OPERAND (expr, 2)) != void_type_node)\n \t    TREE_OPERAND (expr, 2) =\n \t      build_fold_addr_expr (TREE_OPERAND (expr, 2));\n-\t  \n+\n \t  tmp2 = tmp = create_tmp_var (type, \"iftmp\");\n \n \t  expr = build3 (COND_EXPR, void_type_node, TREE_OPERAND (expr, 0),\n@@ -6444,6 +6509,7 @@ force_gimple_operand (tree expr, tree *stmts, bool simple, tree var)\n \n   push_gimplify_context ();\n   gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n+  gimplify_ctxp->allow_rhs_cond_expr = true;\n \n   if (var)\n     expr = build_gimple_modify_stmt (var, expr);"}, {"sha": "42e053919b8cc92eefea53af50961e94dc9f36fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aea744402793cf5f295c638d76844b3290ce30a5", "patch": "@@ -1,3 +1,9 @@\n+2007-12-06  Martin Michlmayr <tbm@cyrius.com>\n+\t    Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/34005\n+\t* gcc.dg/vect/pr34005.c: New test.\n+\n 2007-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34336"}, {"sha": "813f950b52072c401af485c610b78efd24b27766", "filename": "gcc/testsuite/gcc.dg/vect/pr34005.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr34005.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr34005.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr34005.c?ref=aea744402793cf5f295c638d76844b3290ce30a5", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/34005 */\n+/* { dg-do compile } */\n+\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+\n+void XdmcpUnwrap (unsigned char *output, int k)\n+{\n+  int i;\n+  unsigned char blocks[2][8];\n+  k = (k == 0) ? 1 : 0;\n+  for (i = 0; i < 32; i++)\n+    output[i] = blocks[k][i];\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "abd35f7957bc62cddd6cb4462537cdd84e51ee85", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea744402793cf5f295c638d76844b3290ce30a5/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=aea744402793cf5f295c638d76844b3290ce30a5", "patch": "@@ -61,6 +61,7 @@ is_gimple_formal_tmp_rhs (tree t)\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n+    case COND_EXPR:\n     case ADDR_EXPR:\n     case CALL_EXPR:\n     case CONSTRUCTOR:"}]}