{"sha": "4c1e539511beba77c4bc803a2f86bc91e37d6827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxZTUzOTUxMWJlYmE3N2M0YmM4MDNhMmY4NmJjOTFlMzdkNjgyNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-06-04T08:15:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-15T13:42:55Z"}, "message": "[Ada] Do not generate elaboration code for alignment aspect\n\ngcc/ada/\n\n\t* einfo.ads (Delayed Freezing and Elaboration): Adjust description.\n\t* freeze.adb (Freeze_Object_Declaration): Likewise.\n\t* sem_ch3.adb (Delayed_Aspect_Present): Likewise.  Do not return\n\ttrue for Alignment.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Do not always delay\n\tfor Alignment.  Moreover, for Alignment and various Size aspects,\n\tdo not delay if the expression is an attribute whose prefix is the\n\tStandard package.", "tree": {"sha": "2377bcf4855009c2092052eb2bb81781af4aba92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2377bcf4855009c2092052eb2bb81781af4aba92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c1e539511beba77c4bc803a2f86bc91e37d6827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1e539511beba77c4bc803a2f86bc91e37d6827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1e539511beba77c4bc803a2f86bc91e37d6827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1e539511beba77c4bc803a2f86bc91e37d6827/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6fec84da802171366537fcd497955d527aa201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6fec84da802171366537fcd497955d527aa201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6fec84da802171366537fcd497955d527aa201"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "bea4db02471c41fc5cdc72df5d5f70f58e112db8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4c1e539511beba77c4bc803a2f86bc91e37d6827", "patch": "@@ -281,8 +281,7 @@ package Einfo is\n --  For object declarations, the flag is set when an address clause for the\n --  object is encountered. Legality checks on the address expression only take\n --  place at the freeze point of the object. In Ada 2012, the flag is also set\n---  when an address or an alignment aspect for the object is encountered (note\n---  the discrepancy with the non-aspect case).\n+--  when an address aspect for the object is encountered.\n \n --  Most types have an explicit freeze node, because they cannot be elaborated\n --  until all representation and operational items that apply to them have been"}, {"sha": "ff5418856ec49807dc83cac0099d596ac28942ff", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4c1e539511beba77c4bc803a2f86bc91e37d6827", "patch": "@@ -3431,7 +3431,7 @@ package body Freeze is\n          Check_Address_Clause (E);\n \n          --  Similar processing is needed for aspects that may affect object\n-         --  layout, like Alignment, if there is an initialization expression.\n+         --  layout, like Address, if there is an initialization expression.\n          --  We don't do this if there is a pragma Linker_Section, because it\n          --  would prevent the back end from statically initializing the\n          --  object; we don't want elaboration code in that case."}, {"sha": "5937ce2bfe3d6b4075fd12434a4131fef612994d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4c1e539511beba77c4bc803a2f86bc91e37d6827", "patch": "@@ -2861,17 +2861,30 @@ package body Sem_Ch13 is\n                   if A_Id in Boolean_Aspects and then No (Expr) then\n                      Delay_Required := False;\n \n-                  --  For non-Boolean aspects, don't delay if integer literal,\n-                  --  unless the aspect is Alignment, which affects the\n-                  --  freezing of an initialized object.\n+                  --  For non-Boolean aspects, don't delay if integer literal\n \n                   elsif A_Id not in Boolean_Aspects\n-                    and then A_Id /= Aspect_Alignment\n                     and then Present (Expr)\n                     and then Nkind (Expr) = N_Integer_Literal\n                   then\n                      Delay_Required := False;\n \n+                  --  For Alignment and various Size aspects, don't delay for\n+                  --  an attribute reference whose prefix is Standard, for\n+                  --  example Standard'Maximum_Alignment or Standard'Word_Size.\n+\n+                  elsif (A_Id = Aspect_Alignment\n+                          or else A_Id = Aspect_Component_Size\n+                          or else A_Id = Aspect_Object_Size\n+                          or else A_Id = Aspect_Size\n+                          or else A_Id = Aspect_Value_Size)\n+                    and then Present (Expr)\n+                    and then Nkind (Expr) = N_Attribute_Reference\n+                    and then Nkind (Prefix (Expr)) = N_Identifier\n+                    and then Chars (Prefix (Expr)) = Name_Standard\n+                  then\n+                     Delay_Required := False;\n+\n                   --  All other cases are delayed\n \n                   else"}, {"sha": "f0a588fc112cc8bbeeacf19075c2d24608aaf43e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1e539511beba77c4bc803a2f86bc91e37d6827/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4c1e539511beba77c4bc803a2f86bc91e37d6827", "patch": "@@ -3668,7 +3668,7 @@ package body Sem_Ch3 is\n       --  has aspects that require delayed analysis, the resolution of the\n       --  aggregate must be deferred to the freeze point of the object. This\n       --  special processing was created for address clauses, but it must\n-      --  also apply to Alignment. This must be done before the aspect\n+      --  also apply to address aspects. This must be done before the aspect\n       --  specifications are analyzed because we must handle the aggregate\n       --  before the analysis of the object declaration is complete.\n \n@@ -3896,7 +3896,7 @@ package body Sem_Ch3 is\n             while Present (A) loop\n                A_Id := Get_Aspect_Id (Chars (Identifier (A)));\n \n-               if A_Id = Aspect_Alignment or else A_Id = Aspect_Address then\n+               if A_Id = Aspect_Address then\n \n                   --  Set flag on object entity, for later processing at\n                   --  the freeze point."}]}