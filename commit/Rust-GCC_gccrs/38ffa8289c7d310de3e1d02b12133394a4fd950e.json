{"sha": "38ffa8289c7d310de3e1d02b12133394a4fd950e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmZmE4Mjg5YzdkMzEwZGUzZTFkMDJiMTIxMzMzOTRhNGZkOTUwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-04T15:17:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-04T15:17:55Z"}, "message": "re PR c++/46220 (Error: invalid covariant return type generated for incomplete class type and different qualifer)\n\n\tPR c++/46220\n\t* search.c (check_final_overrider): Allow pointer to same incomplete\n\tclass type with different cv-quals.\n\nFrom-SVN: r170676", "tree": {"sha": "269bfa08de2425a9791eebce628816130abc5f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/269bfa08de2425a9791eebce628816130abc5f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38ffa8289c7d310de3e1d02b12133394a4fd950e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ffa8289c7d310de3e1d02b12133394a4fd950e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ffa8289c7d310de3e1d02b12133394a4fd950e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ffa8289c7d310de3e1d02b12133394a4fd950e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "087070764a30f817bba64be783768e5489422ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087070764a30f817bba64be783768e5489422ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/087070764a30f817bba64be783768e5489422ef0"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "ce4ade16a84d4c16c3ea7228d901fcdc099f4fea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38ffa8289c7d310de3e1d02b12133394a4fd950e", "patch": "@@ -1,3 +1,9 @@\n+2011-03-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46220\n+\t* search.c (check_final_overrider): Allow pointer to same incomplete\n+\tclass type with different cv-quals.\n+\n 2011-03-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/47974"}, {"sha": "07ec9efd336ada4a57a3f599eee43756629c67aa", "filename": "gcc/cp/search.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=38ffa8289c7d310de3e1d02b12133394a4fd950e", "patch": "@@ -1835,11 +1835,17 @@ check_final_overrider (tree overrider, tree basefn)\n \n       if (CLASS_TYPE_P (base_return) && CLASS_TYPE_P (over_return))\n \t{\n-\t  tree binfo = lookup_base (over_return, base_return,\n-\t\t\t\t    ba_check | ba_quiet, NULL);\n+\t  /* Strictly speaking, the standard requires the return type to be\n+\t     complete even if it only differs in cv-quals, but that seems\n+\t     like a bug in the wording.  */\n+\t  if (!same_type_ignoring_top_level_qualifiers_p (base_return, over_return))\n+\t    {\n+\t      tree binfo = lookup_base (over_return, base_return,\n+\t\t\t\t\tba_check | ba_quiet, NULL);\n \n-\t  if (!binfo)\n-\t    fail = 1;\n+\t      if (!binfo)\n+\t\tfail = 1;\n+\t    }\n \t}\n       else if (!pedantic\n \t       && can_convert (TREE_TYPE (base_type), TREE_TYPE (over_type)))"}, {"sha": "c56bea48f04b78277940a1201fb4cf9f3ccc5a61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38ffa8289c7d310de3e1d02b12133394a4fd950e", "patch": "@@ -1,3 +1,7 @@\n+2011-03-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/inherit/covariant19.C: New.\n+\n 2011-03-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/47968"}, {"sha": "22c2b0eb6f629f48e9852d0910a2a2cec01de02a", "filename": "gcc/testsuite/g++.dg/inherit/covariant19.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ffa8289c7d310de3e1d02b12133394a4fd950e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant19.C?ref=38ffa8289c7d310de3e1d02b12133394a4fd950e", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/46220\n+// According to the letter of the standard this is invalid,\n+// but that seems like a bug.\n+\n+class Baz;\n+class Foo {\n+public:\n+    virtual const Baz* getBaz() = 0;\n+};\n+class Bar : public Foo {\n+public:\n+    Baz* getBaz();\n+};\n+"}]}