{"sha": "2e3e9ead11e1201c4581bb318d87917bca744949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzZTllYWQxMWUxMjAxYzQ1ODFiYjMxOGQ4NzkxN2JjYTc0NDk0OQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-11-25T18:10:29Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1998-11-25T18:10:29Z"}, "message": "c4x.h (TARGET_DEFAULT): Add PARALEL_MPY_FLAG.\n\n\t* config/c4x/c4x.h (TARGET_DEFAULT): Add PARALEL_MPY_FLAG.\n\t(TARGET_SMALL_REG_CLASS): Set to 0 so that SMALL_REGISTER_CLASSES\n\tis no longer enabled if PARALLEL_MPY_FLAG set.\n\t(HARD_REGNO_CALL_CLOBBERED): Add parentheses to remove ambiguity.\n\t(REG_CLASS_CONTENTS): Add braces around initializers.\n\t(HAVE_MULTIPLE_PACK): Define.\n\t(ASM_OUTPUT_BYTE_FLOAT): Use %lf format specifier with\n\tREAL_VALUE_TO_DECIMAL.\n\t(ASM_OUTPUT_SHORT_FLOAT): Use %lf format specifier with\n\tREAL_VALUE_TO_DECIMAL.\n\t(ar0_reg_operand): Add prototype.\n\t(ar0_mem_operand): Likewise.\n\t(ar1_reg_operand): Likewise.\n\t(ar1_mem_operand): Likewise.\n\t(ar2_reg_operand): Likewise.\n\t(ar2_mem_operand): Likewise.\n\t(ar3_reg_operand): Likewise.\n\t(ar3_mem_operand): Likewise.\n\t(ar4_reg_operand): Likewise.\n\t(ar4_mem_operand): Likewise.\n\t(ar5_reg_operand): Likewise.\n\t(ar5_mem_operand): Likewise.\n\t(ar6_reg_operand): Likewise.\n\t(ar6_mem_operand): Likewise.\n\t(ar7_reg_operand): Likewise.\n\t(ar7_mem_operand): Likewise.\n\t(ir0_reg_operand): Likewise.\n\t(ir0_mem_operand): Likewise.\n\t(ir1_reg_operand): Likewise.\n\t(ir1_mem_operand): Likewise.\n\t(group1_reg_operand): Likewise.\n\t(group1_mem_operand): Likewise.\n\t(ir1_reg_operand): Likewise.\n\t(arx_reg_operand): Likewise.\n\t(not_rc_reg): Likewise.\n\t(not_modify_reg): Likewise.\n\t(c4x_group1_reg_operand): Remove prototype.\n\t(c4x_group1_mem_operand): Likewise.\n\t(c4x_arx_reg_operand): Likewise.\n\nFrom-SVN: r23876", "tree": {"sha": "713629c010c36cb4b5458ca6eff4d7d9870548c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/713629c010c36cb4b5458ca6eff4d7d9870548c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e3e9ead11e1201c4581bb318d87917bca744949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3e9ead11e1201c4581bb318d87917bca744949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3e9ead11e1201c4581bb318d87917bca744949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3e9ead11e1201c4581bb318d87917bca744949/comments", "author": null, "committer": null, "parents": [{"sha": "3c9a0d0fed62758f6821efd2b0c9ffb6f534e2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9a0d0fed62758f6821efd2b0c9ffb6f534e2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9a0d0fed62758f6821efd2b0c9ffb6f534e2ce"}], "stats": {"total": 195, "additions": 142, "deletions": 53}, "files": [{"sha": "5aa069057b4c40f672213806790886ccc73b6624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3e9ead11e1201c4581bb318d87917bca744949/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3e9ead11e1201c4581bb318d87917bca744949/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e3e9ead11e1201c4581bb318d87917bca744949", "patch": "@@ -1,3 +1,45 @@\n+Thu Nov 26 14:56:32 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.h (TARGET_DEFAULT): Add PARALEL_MPY_FLAG.\n+\t(TARGET_SMALL_REG_CLASS): Set to 0 so that SMALL_REGISTER_CLASSES\n+\tis no longer enabled if PARALLEL_MPY_FLAG set.\n+\t(HARD_REGNO_CALL_CLOBBERED): Add parentheses to remove ambiguity.\n+\t(REG_CLASS_CONTENTS): Add braces around initializers.\n+\t(HAVE_MULTIPLE_PACK): Define.\n+\t(ASM_OUTPUT_BYTE_FLOAT): Use %lf format specifier with \n+\tREAL_VALUE_TO_DECIMAL.\n+\t(ASM_OUTPUT_SHORT_FLOAT): Use %lf format specifier with \n+\tREAL_VALUE_TO_DECIMAL.\n+\t(ar0_reg_operand): Add prototype.\n+\t(ar0_mem_operand): Likewise.\n+\t(ar1_reg_operand): Likewise.\n+\t(ar1_mem_operand): Likewise.\n+\t(ar2_reg_operand): Likewise.\n+\t(ar2_mem_operand): Likewise.\n+\t(ar3_reg_operand): Likewise.\n+\t(ar3_mem_operand): Likewise.\n+\t(ar4_reg_operand): Likewise.\n+\t(ar4_mem_operand): Likewise.\n+\t(ar5_reg_operand): Likewise.\n+\t(ar5_mem_operand): Likewise.\n+\t(ar6_reg_operand): Likewise.\n+\t(ar6_mem_operand): Likewise.\n+\t(ar7_reg_operand): Likewise.\n+\t(ar7_mem_operand): Likewise.\n+\t(ir0_reg_operand): Likewise.\n+\t(ir0_mem_operand): Likewise.\n+\t(ir1_reg_operand): Likewise.\n+\t(ir1_mem_operand): Likewise.\n+\t(group1_reg_operand): Likewise.\n+\t(group1_mem_operand): Likewise.\n+\t(ir1_reg_operand): Likewise.\n+\t(arx_reg_operand): Likewise.\n+\t(not_rc_reg): Likewise.\n+\t(not_modify_reg): Likewise.\n+\t(c4x_group1_reg_operand): Remove prototype.\n+\t(c4x_group1_mem_operand): Likewise.\n+\t(c4x_arx_reg_operand): Likewise.\n+\n Wed Nov 25 19:02:55 1998  (Stephen L Moshier) <moshier@world.std.com>\n \n \t* emit-rtl.c (gen_lowpart_common): Remove earlier change."}, {"sha": "60fa0830884a7f378876b4bc34e87793d5ec2fb1", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 100, "deletions": 53, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3e9ead11e1201c4581bb318d87917bca744949/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3e9ead11e1201c4581bb318d87917bca744949/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=2e3e9ead11e1201c4581bb318d87917bca744949", "patch": "@@ -211,11 +211,9 @@\n \n /* Default target switches */\n \n-/* Play safe, not the fastest code.  Note that setting PARALLEL_MPY\n-flag will set SMALL_REGISTER_CLASSES which can be a price to pay,\n-especially when MPY||ADD instructions are only generated very\n-infrequenctly. */\n-#define TARGET_DEFAULT\t\tALIASES_FLAG | RPTB_FLAG | PARALLEL_PACK_FLAG\n+/* Play safe, not the fastest code. */\n+#define TARGET_DEFAULT\t\tALIASES_FLAG | PARALLEL_PACK_FLAG \\\n+\t\t\t\t| PARALLEL_MPY_FLAG | TARGET_RPTB_FLAG\n \n /* Caveats:\n    Max iteration count for RPTB/RPTS is 2^31 + 1.\n@@ -227,7 +225,7 @@ extern int target_flags;\n \n #define TARGET_INLINE\t\t1 /* Inline MPYI */\n #define TARGET_PARALLEL\t        1 /* Enable parallel insns in MD */\n-#define TARGET_SMALL_REG_CLASS\t1 \n+#define TARGET_SMALL_REG_CLASS\t0\n \n #define TARGET_SMALL\t\t(target_flags & SMALL_MEMORY_FLAG)\n #define TARGET_MPYI\t\t(!TARGET_C3X || (target_flags & MPYI_FLAG))\n@@ -534,6 +532,11 @@ extern void c4x_optimization_options ();\n \t     c4x_regclass_map[i] = NO_REGS;\t\t\\\n \t }\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n+    if (TARGET_PRESERVE_FLOAT)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tc4x_caller_save_map[R6_REGNO] = HFmode;\t\t\\\n+\tc4x_caller_save_map[R7_REGNO] = HFmode;\t\t\\\n+      }\t\t\t\t\t\t\t\\\n    }\n \n /* Order of Allocation of Registers  */\n@@ -579,11 +582,10 @@ extern void c4x_optimization_options ();\n    across a call in mode MODE.  This does not have to include the call used\n    registers.  */\n \n-#define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)\t\t            \\\n-     (((REGNO) == R6_REGNO || (REGNO) == R7_REGNO)                          \\\n-      && (MODE) != QFmode                                                   \\\n-      || ((REGNO) == R4_REGNO || (REGNO) == R5_REGNO || (REGNO == R8_REGNO) \\\n-\t  && ((MODE) != QImode || (MODE) != HImode || (MODE) != Pmode)))\n+#define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)\t\t              \\\n+     ((((REGNO) == R6_REGNO || (REGNO) == R7_REGNO) && ! ((MODE) == QFmode))  \\\n+      || (((REGNO) == R4_REGNO || (REGNO) == R5_REGNO || (REGNO == R8_REGNO)) \\\n+\t  && ! ((MODE) == QImode || (MODE) == HImode || (MODE) == Pmode)))\n \n /* Specify the modes required to caller save a given hard regno.  */\n \n@@ -668,26 +670,27 @@ enum reg_class\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n-   of length N_REG_CLASSES.  */\n-\n+   of length N_REG_CLASSES.  RC is not included in GENERAL_REGS\n+   since the register allocator will often choose a general register\n+   in preference to RC for the decrement_and_branch_on_count pattern.  */\n \n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t\t\t\\\n- 0x00000000, /*     No registers */\t\t\\\n- 0x00000003, /* 't' R0-R1\t */\t\t\\\n- 0x0000000c, /* 'u' R2-R3\t */\t\t\\\n- 0x000000ff, /* 'q' R0-R7\t */\t\t\\\n- 0xf00000ff, /* 'f' R0-R11       */\t\t\\\n- 0x0000ff00, /* 'a' AR0-AR7 */\t\t\t\\\n- 0x00060000, /* 'x' IR0-IR1 */\t\t\t\\\n- 0x00080000, /* 'k' BK */\t\t\t\\\n- 0x00100000, /* 'b' SP */\t\t\t\\\n- 0x08000000, /* 'v' RC */\t\t\t\\\n- 0x0e1eff00, /* 'c' AR0-AR7, IR0-IR1, RC, RS, RE, BK, SP */\t\\\n- 0xfe1effff, /* 'r' R0-R11, AR0-AR7, IR0-IR1, RC, RS, RE, BK, SP */\\\n- 0x00010000, /* 'z' DP */\t\t\t\\\n- 0x00200000, /* 'y' ST */\t\t\t\\\n- 0xffffffff, /*     All registers */\t\t\\\n+ {0x00000000}, /*     No registers */\t\t\\\n+ {0x00000003}, /* 't' R0-R1\t */\t\t\\\n+ {0x0000000c}, /* 'u' R2-R3\t */\t\t\\\n+ {0x000000ff}, /* 'q' R0-R7\t */\t\t\\\n+ {0xf00000ff}, /* 'f' R0-R11       */\t\t\\\n+ {0x0000ff00}, /* 'a' AR0-AR7 */\t\t\\\n+ {0x00060000}, /* 'x' IR0-IR1 */\t\t\\\n+ {0x00080000}, /* 'k' BK */\t\t\t\\\n+ {0x00100000}, /* 'b' SP */\t\t\t\\\n+ {0x08000000}, /* 'v' RC */\t\t\t\\\n+ {0x0e1eff00}, /* 'c' AR0-AR7, IR0-IR1, BK, SP, RS, RE, RC */\t\\\n+ {0xfe1effff}, /* 'r' R0-R11, AR0-AR7, IR0-IR1, BK, SP, RS, RE, RC */\\\n+ {0x00010000}, /* 'z' DP */\t\t\t\\\n+ {0x00200000}, /* 'y' ST */\t\t\t\\\n+ {0xffffffff}, /*     All registers */\t\t\\\n }\n \n /* The same information, inverted:\n@@ -697,30 +700,26 @@ enum reg_class\n \n #define REGNO_REG_CLASS(REGNO) (c4x_regclass_map[REGNO])\n \n-/* When SMALL_REGISTER_CLASSES is defined, the compiler allows\n-registers explicitly used in the rtl to be used as spill registers but\n-prevents the compiler from extending the lifetime of these registers.\n-Problems can occur if reload has to spill a register used explicitly\n-in the RTL if it has a long lifetime.   This is only likely to be a problem\n-with a function having many variables and thus lots of spilling.  \n-\n-We only need to define SMALL_REGISTER_CLASSES if TARGET_PARALLEL_MPY\n-is defined since the MPY|ADD insns require the classes R0R1_REGS and\n-R2R3_REGS which are used by the function return registers (R0,R1) and\n-the register arguments (R2,R3), respectively.  I'm reluctant to define\n-this macro since it stomps on many potential optimisations.  Ideally\n-it should have a register class argument so that not all the register\n-classes gets penalised for the sake of a naughty few...  For long\n-double arithmetic we need two additional registers that we can use as\n-spill registers.  */\n+/* When SMALL_REGISTER_CLASSES is defined, the lifetime of registers\n+   explicitly used in the rtl is kept as short as possible.\n+\n+   We only need to define SMALL_REGISTER_CLASSES if TARGET_PARALLEL_MPY\n+   is defined since the MPY|ADD insns require the classes R0R1_REGS and\n+   R2R3_REGS which are used by the function return registers (R0,R1) and\n+   the register arguments (R2,R3), respectively.  I'm reluctant to define\n+   this macro since it stomps on many potential optimisations.  Ideally\n+   it should have a register class argument so that not all the register\n+   classes gets penalised for the sake of a naughty few...  For long\n+   double arithmetic we need two additional registers that we can use as\n+   spill registers.  */\n \n #define SMALL_REGISTER_CLASSES (TARGET_SMALL_REG_CLASS && TARGET_PARALLEL_MPY)\n \n #define BASE_REG_CLASS\tADDR_REGS\n #define INDEX_REG_CLASS INDEX_REGS\n \n /*\n-  Constraints for the C4x\n+  Register constraints for the C4x\n  \n   a - address reg (ar0-ar7)\n   b - stack reg (sp)\n@@ -737,6 +736,8 @@ spill registers.  */\n   y - status register (st)\n   z - dp reg (dp) \n \n+  Memory/constant constraints for the C4x\n+\n   G - short float 16-bit\n   I - signed 16-bit constant (sign extended)\n   J - signed 8-bit constant (sign extended)  (C4x only)\n@@ -1528,6 +1529,8 @@ extern struct rtx_def *c4x_gen_compare_reg ();\n #define HAVE_PRE_MODIFY_DISP 1\n #define HAVE_POST_MODIFY_DISP 1\n \n+#define HAVE_MULTIPLE_PACK 2\n+\n /* What about LABEL_REF?  */\n #define CONSTANT_ADDRESS_P(X) (GET_CODE (X) == SYMBOL_REF)\n \n@@ -1976,7 +1979,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n {   long l;\t\t\t\t\t\t\\\n     char str[30];\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-    REAL_VALUE_TO_DECIMAL (VALUE, \"%20f\", str);\t\t\\\n+    REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\", l, str);\\\n     else\t\t\t\t\t\t\\\n@@ -1995,7 +1998,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n {   long l[2];\t\t\t\t\t\t\\\n     char str[30];\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-    REAL_VALUE_TO_DECIMAL (VALUE, \"%20f\", str);\t\t\\\n+    REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n     l[1] = (l[0] << 8) | ((l[1] >> 24) & 0xff);\t\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\\t.word\\t0%08xh\\n\", \\\n@@ -2580,10 +2583,60 @@ extern int rc_reg_operand ();\n \n extern int st_reg_operand ();\n \n+extern int ar0_reg_operand ();\n+\n+extern int ar0_mem_operand ();\n+\n+extern int ar1_reg_operand ();\n+\n+extern int ar1_mem_operand ();\n+\n+extern int ar2_reg_operand ();\n+\n+extern int ar2_mem_operand ();\n+\n+extern int ar3_reg_operand ();\n+\n+extern int ar3_mem_operand ();\n+\n+extern int ar4_reg_operand ();\n+\n+extern int ar4_mem_operand ();\n+\n+extern int ar5_reg_operand ();\n+\n+extern int ar5_mem_operand ();\n+\n+extern int ar6_reg_operand ();\n+\n+extern int ar6_mem_operand ();\n+\n+extern int ar7_reg_operand ();\n+\n+extern int ar7_mem_operand ();\n+\n+extern int ir0_reg_operand ();\n+\n+extern int ir0_mem_operand ();\n+\n+extern int ir1_reg_operand ();\n+\n+extern int ir1_mem_operand ();\n+\n+extern int group1_reg_operand ();\n+\n+extern int group1_mem_operand ();\n+\n+extern int arx_reg_operand ();\n+\n extern int call_operand ();\n \n extern int par_ind_operand ();\n \n+extern int not_rc_reg ();\n+\n+extern int not_modify_reg ();\n+\n extern int c4x_H_constant ();\n \n extern int c4x_I_constant ();\n@@ -2606,12 +2659,6 @@ extern void c4x_emit_libcall3 ();\n \n extern void c4x_emit_libcall_mulhi ();\n \n-extern int c4x_group1_reg_operand ();\n-\n-extern int c4x_group1_mem_operand ();\n-\n-extern int c4x_arx_reg_operand ();\n-\n extern int legitimize_operands ();\n \n extern int valid_operands ();"}]}