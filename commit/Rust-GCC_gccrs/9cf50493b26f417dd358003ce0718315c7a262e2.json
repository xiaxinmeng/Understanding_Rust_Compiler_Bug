{"sha": "9cf50493b26f417dd358003ce0718315c7a262e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmNTA0OTNiMjZmNDE3ZGQzNTgwMDNjZTA3MTgzMTVjN2EyNjJlMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-04-08T06:51:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:51:16Z"}, "message": "exp_strm.adb (Build_Record_Or_Elementary_Input_Function): If this is an Input function for an access type...\n\n2008-04-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function): If this is\n\tan Input function for an access type, do not perform default\n\tinitialization on the local variable that receives the value, to\n\tprevent spurious warnings when the type is null-excluding.\n\nFrom-SVN: r134032", "tree": {"sha": "a4e2ff3acf7498dca680bafe86bb3030a16a9ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e2ff3acf7498dca680bafe86bb3030a16a9ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf50493b26f417dd358003ce0718315c7a262e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf50493b26f417dd358003ce0718315c7a262e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf50493b26f417dd358003ce0718315c7a262e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf50493b26f417dd358003ce0718315c7a262e2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f0b5314c46929b788c0d407038a8e2bf0767cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0b5314c46929b788c0d407038a8e2bf0767cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0b5314c46929b788c0d407038a8e2bf0767cca"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "2ffa26a4cf9c4c99707c3c6e776b1f9a134bd13e", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf50493b26f417dd358003ce0718315c7a262e2/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf50493b26f417dd358003ce0718315c7a262e2/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=9cf50493b26f417dd358003ce0718315c7a262e2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -373,7 +373,7 @@ package body Exp_Strm is\n       --  array may be user-defined, and be frozen after the type for which\n       --  we are generating the stream subprogram. In that case, freeze the\n       --  stream attribute of the component type, whose declaration could not\n-      --  generate any additional freezing actions in any case. See 5509-003.\n+      --  generate any additional freezing actions in any case.\n \n       if Nam = Name_Read then\n          RW := TSS (Base_Type (Ctyp), TSS_Stream_Read);\n@@ -1092,13 +1092,14 @@ package body Exp_Strm is\n       Decl : out Node_Id;\n       Fnam : out Entity_Id)\n    is\n-      Cn     : Name_Id;\n-      J      : Pos;\n-      Decls  : List_Id;\n-      Constr : List_Id;\n-      Stms   : List_Id;\n-      Discr  : Entity_Id;\n-      Odef   : Node_Id;\n+      Cn       : Name_Id;\n+      J        : Pos;\n+      Decls    : List_Id;\n+      Constr   : List_Id;\n+      Obj_Decl : Node_Id;\n+      Stms     : List_Id;\n+      Discr    : Entity_Id;\n+      Odef     : Node_Id;\n \n    begin\n       Decls  := New_List;\n@@ -1152,14 +1153,23 @@ package body Exp_Strm is\n \n       --  Perhaps we should just generate an extended return in all cases???\n \n+      Obj_Decl :=\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n+          Object_Definition => Odef);\n+\n+      --  If the type is an access type, do not perform default initialization.\n+      --  The object is about to get its value from Read, and if the type is\n+      --  null excluding we do not want spurious warnings on an initial null.\n+\n+      if Is_Access_Type (Typ) then\n+         Set_No_Initialization (Obj_Decl);\n+      end if;\n+\n       if Ada_Version >= Ada_05 then\n          Stms := New_List (\n            Make_Extended_Return_Statement (Loc,\n-             Return_Object_Declarations =>\n-               New_List (Make_Object_Declaration (Loc,\n-                           Defining_Identifier =>\n-                             Make_Defining_Identifier (Loc, Name_V),\n-                           Object_Definition => Odef)),\n+             Return_Object_Declarations => New_List (Obj_Decl),\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  New_List (Make_Attribute_Reference (Loc,\n@@ -1170,10 +1180,7 @@ package body Exp_Strm is\n                                Make_Identifier (Loc, Name_V)))))));\n \n       else\n-         Append_To (Decls,\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n-             Object_Definition => Odef));\n+         Append_To (Decls, Obj_Decl);\n \n          Stms := New_List (\n             Make_Attribute_Reference (Loc,"}]}