{"sha": "bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1Yjc2NDJlYmJhYjM3ZDJhNTZhNGQzZGUxMzU3MWE0ZTU1ODRhZQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-01-05T00:42:04Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-01-05T00:42:04Z"}, "message": "intrinsic.texi (LBOUND): Add documentation.\n\n* intrinsic.texi (LBOUND): Add documentation.\n(LGE): Add documentation.\n(LGT): Add documentation.\n(LINK): Add documentation.\n(LLE): Add documentation.\n(LLT): Add documentation.\n(LNBLNK): Add documentation.\n(UBOUND): Add documentation.\n(UNLINK): Add documentation.\n\nFrom-SVN: r120466", "tree": {"sha": "449a64b74d5ca8736ec0b11c4c998be60f28dbe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/449a64b74d5ca8736ec0b11c4c998be60f28dbe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae/comments", "author": null, "committer": null, "parents": [{"sha": "a87948f7fb4ad896453bd3f5e1ee832033d5831a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87948f7fb4ad896453bd3f5e1ee832033d5831a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87948f7fb4ad896453bd3f5e1ee832033d5831a"}], "stats": {"total": 219, "additions": 173, "deletions": 46}, "files": [{"sha": "8f598ecf0f539aaeb5f0a24391fb3fc5a9a381ff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "patch": "@@ -1,3 +1,15 @@\n+2007-01-04  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi (LBOUND): Add documentation.\n+\t(LGE): Add documentation.\n+\t(LGT): Add documentation.\n+\t(LINK): Add documentation.\n+\t(LLE): Add documentation.\n+\t(LLT): Add documentation.\n+\t(LNBLNK): Add documentation.\n+\t(UBOUND): Add documentation.\n+\t(UNLINK): Add documentation.\n+\n 2007-01-04  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* intrinsic.texi (IAND): Clarify argument specifications."}, {"sha": "17b608d855394dceeb76a7904699df28e43c2bf7", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 161, "deletions": 46, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5b7642ebbab37d2a56a4d3de13571a4e5584ae/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=bc5b7642ebbab37d2a56a4d3de13571a4e5584ae", "patch": "@@ -5288,29 +5288,40 @@ end program test_kind\n @node LBOUND\n @section @code{LBOUND} --- Lower dimension bounds of an array\n @cindex @code{LBOUND} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Returns the lower bounds of an array, or a single lower bound\n+along the @var{DIM} dimension.\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Inquiry function\n \n @item @emph{Syntax}:\n+@code{I = LBOUND(ARRAY [, DIM])}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array, of any type.\n+@item @var{DIM} @tab (Optional) Shall be a scalar @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+If @var{DIM} is absent, the result is an array of the lower bounds of\n+@var{ARRAY}.  If @var{DIM} is present, the result is a scalar\n+corresponding to the lower bound of the array along that dimension.  If\n+@var{ARRAY} is an expression rather than a whole array or array\n+structure component, or if it has a zero extent along the relevant\n+dimension, the lower bound is taken to be 1.\n+\n @item @emph{See also}:\n @ref{UBOUND}\n @end table\n \n \n \n-\n @node LEN\n @section @code{LEN} --- Length of a character entity\n @cindex @code{LEN} intrinsic\n@@ -5378,169 +5389,260 @@ The return value is of @code{INTEGER(kind=4)} type.\n \n \n \n-\n @node LGE\n @section @code{LGE} --- Lexical greater than or equal\n @cindex @code{LGE} intrinsic\n @cindex comparison (lexical)\n-\n-Intrinsic implemented, documentation pending.\n+@cindex lexical comparison\n \n @table @asis\n @item @emph{Description}:\n+Determines whether one string is lexically greater than or equal to\n+another string, where the two strings are interpreted as containing\n+ASCII character codes.  If the String A and String B are not the same\n+length, the shorter is compared as if spaces were appended to it to form\n+a value that has the same length as the longer.\n+\n+In general, the lexical comparison intrinsics @code{LGE}, @code{LGT},\n+@code{LLE}, and @code{LLT} differ from the corresponding intrinsic\n+operators @code{.GE.}, @code{.GT.}, @code{.LE.}, and @code{.LT.}, in\n+that the latter use the processor's character ordering (which is not\n+ASCII on some targets), whereas the former always use the ASCII\n+ordering.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{L = LGE(STRING_A, STRING_B)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+Returns @code{.TRUE.} if @code{STRING_A >= STRING_B}, and @code{.FALSE.}\n+otherwise, based on the ASCII ordering.\n \n @item @emph{See also}:\n @ref{LGT}, @ref{LLE}, @ref{LLT}\n @end table\n \n \n \n-\n @node LGT\n @section @code{LGT} --- Lexical greater than\n @cindex @code{LGT} intrinsic\n @cindex comparison (lexical)\n-\n-Intrinsic implemented, documentation pending.\n+@cindex lexical comparison\n \n @table @asis\n @item @emph{Description}:\n+Determines whether one string is lexically greater than another string,\n+where the two strings are interpreted as containing ASCII character\n+codes.  If the String A and String B are not the same length, the\n+shorter is compared as if spaces were appended to it to form a value\n+that has the same length as the longer.\n+\n+In general, the lexical comparison intrinsics @code{LGE}, @code{LGT},\n+@code{LLE}, and @code{LLT} differ from the corresponding intrinsic\n+operators @code{.GE.}, @code{.GT.}, @code{.LE.}, and @code{.LT.}, in\n+that the latter use the processor's character ordering (which is not\n+ASCII on some targets), whereas the former always use the ASCII\n+ordering.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{L = LGT(STRING_A, STRING_B)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+Returns @code{.TRUE.} if @code{STRING_A > STRING_B}, and @code{.FALSE.}\n+otherwise, based on the ASCII ordering.\n \n @item @emph{See also}:\n @ref{LGE}, @ref{LLE}, @ref{LLT}\n @end table\n \n \n \n-\n @node LINK\n @section @code{LINK} --- Create a hard link\n @cindex @code{LINK} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Makes a (hard) link from file @var{PATH1} to @var{PATH2}. A null character (@code{CHAR(0)}) can be used to mark the\n+end of the names in @var{PATH1} and @var{PATH2}; otherwise, trailing blanks in the file names are\n+ignored.  If the @var{STATUS} argument is supplied, it contains 0 on success or a nonzero error code\n+upon return; see @code{link(2)}.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL LINK(PATH1, PATH2 [, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+@multitable @columnfractions .15 .80\n+@item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n+@end multitable\n \n @item @emph{See also}:\n @ref{UNLINK}\n @end table\n \n \n \n-\n @node LLE\n @section @code{LLE} --- Lexical less than or equal\n @cindex @code{LLE} intrinsic\n @cindex comparison (lexical)\n-\n-Intrinsic implemented, documentation pending.\n+@cindex lexical comparison\n \n @table @asis\n @item @emph{Description}:\n+Determines whether one string is lexically less than or equal to another\n+string, where the two strings are interpreted as containing ASCII\n+character codes.  If the String A and String B are not the same length,\n+the shorter is compared as if spaces were appended to it to form a value\n+that has the same length as the longer.\n+\n+In general, the lexical comparison intrinsics @code{LGE}, @code{LGT},\n+@code{LLE}, and @code{LLT} differ from the corresponding intrinsic\n+operators @code{.GE.}, @code{.GT.}, @code{.LE.}, and @code{.LT.}, in\n+that the latter use the processor's character ordering (which is not\n+ASCII on some targets), whereas the former always use the ASCII\n+ordering.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{L = LLE(STRING_A, STRING_B)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+Returns @code{.TRUE.} if @code{STRING_A <= STRING_B}, and @code{.FALSE.}\n+otherwise, based on the ASCII ordering.\n \n @item @emph{See also}:\n @ref{LGE}, @ref{LGT}, @ref{LLT}\n @end table\n \n \n \n-\n @node LLT\n @section @code{LLT} --- Lexical less than\n @cindex @code{LLT} intrinsic\n @cindex comparison (lexical)\n+@cindex lexical comparison\n \n Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Determines whether one string is lexically less than another string,\n+where the two strings are interpreted as containing ASCII character\n+codes.  If the String A and String B are not the same length, the\n+shorter is compared as if spaces were appended to it to form a value\n+that has the same length as the longer.\n+\n+In general, the lexical comparison intrinsics @code{LGE}, @code{LGT},\n+@code{LLE}, and @code{LLT} differ from the corresponding intrinsic\n+operators @code{.GE.}, @code{.GT.}, @code{.LE.}, and @code{.LT.}, in\n+that the latter use the processor's character ordering (which is not\n+ASCII on some targets), whereas the former always use the ASCII\n+ordering.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{L = LLT(STRING_A, STRING_B)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+Returns @code{.TRUE.} if @code{STRING_A < STRING_B}, and @code{.FALSE.}\n+otherwise, based on the ASCII ordering.\n \n @item @emph{See also}:\n @ref{LGE}, @ref{LGT}, @ref{LLE}\n @end table\n \n \n \n-\n @node LNBLNK\n @section @code{LNBLNK} --- Index of the last non-blank character in a string\n @cindex @code{LNBLNK} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Returns the length of a character string, ignoring any trailing blanks.\n+This is identical to the standard @code{LEN_TRIM} intrinsic, and is only\n+included for backwards compatibility.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Elemental function\n+\n @item @emph{Syntax}:\n+@code{L = LNBLNK(STRING)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING} @tab Shall be a scalar of type @code{CHARACTER(*)},\n+with @code{INTENT(IN)}\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+The return value is of @code{INTEGER(kind=4)} type.\n \n @item @emph{See also}:\n @ref{INDEX}, @ref{LEN_TRIM}\n @end table\n \n \n \n-\n @node LOC\n @section @code{LOC} --- Returns the address of a variable\n @cindex @code{LOC} intrinsic\n@@ -8247,36 +8349,44 @@ Transformational function\n \n \n \n-\n @node UBOUND\n @section @code{UBOUND} --- Upper dimension bounds of an array\n @cindex @code{UBOUND} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n-\n+Returns the upper bounds of an array, or a single upper bound\n+along the @var{DIM} dimension.\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Inquiry function\n \n @item @emph{Syntax}:\n+@code{I = UBOUND(ARRAY [, DIM])}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array, of any type.\n+@item @var{DIM} @tab (Optional) Shall be a scalar @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+If @var{DIM} is absent, the result is an array of the upper bounds of\n+@var{ARRAY}.  If @var{DIM} is present, the result is a scalar\n+corresponding to the upper bound of the array along that dimension.  If\n+@var{ARRAY} is an expression rather than a whole array or array\n+structure component, or if it has a zero extent along the relevant\n+dimension, the upper bound is taken to be the number of elements along\n+the relevant dimension.\n \n @item @emph{See also}:\n @ref{LBOUND}\n @end table\n \n \n \n-\n @node UMASK\n @section @code{UMASK} --- Set the file creation mask\n @cindex @code{UMASK} intrinsic\n@@ -8302,34 +8412,39 @@ Subroutine\n \n \n \n-\n @node UNLINK\n @section @code{UNLINK} --- Remove a file from the file system\n @cindex @code{UNLINK} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Unlinks the file @var{PATH}. A null character (@code{CHAR(0)}) can be used to mark the\n+end of the name in @var{PATH}; otherwise, trailing blanks in the file name are\n+ignored.  If the @var{STATUS} argument is supplied, it contains 0 on success or a nonzero error code\n+upon return; see @code{link(2)}.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL UNLINK(PATH [, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n+@multitable @columnfractions .15 .80\n+@item @var{PATH} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n+@end multitable\n \n @item @emph{See also}:\n @ref{LINK}\n @end table\n \n \n \n-\n @node UNMASK\n @section @code{UNMASK} --- (?)\n @cindex @code{UNMASK} intrinsic"}]}