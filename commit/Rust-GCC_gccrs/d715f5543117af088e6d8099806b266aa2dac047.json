{"sha": "d715f5543117af088e6d8099806b266aa2dac047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxNWY1NTQzMTE3YWYwODhlNmQ4MDk5ODA2YjI2NmFhMmRhYzA0Nw==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@redhat.com", "date": "2019-01-21T11:47:30Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2019-01-21T11:47:30Z"}, "message": "Fix after P0600.\n\ngcc/testsuite/ChangeLog\n2019-02-20  Ulrich Drepper  <drepper@redhat.com>\n\n\tFix after P0600.\n\t* g++.dg/init/new39.C: Don't just ignore result of new.\n\nlibstdc++/ChangeLog\n2019-02-20  Ulrich Drepper  <drepper@redhat.com>\n\n\tImplement C++20 P0600r1.\n\t* include/backward/hash_map: Add nodiscard attribute to empty.\n\t* include/backward/hash_set: Likewise.\n\t* backward/hashtable.h: Likewise.\n\t* include/bits/basic_string.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/hashtable.h: Likewise.\n\t* include/bits/regex.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_queue.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_stack.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/unordered_map.h: Likewise.\n\t* include/bits/unordered_set.h: Likewise.\n\t* include/debug/array: Likewise.\n\t* include/experimental/any: Likewise.\n\t* include/experimental/bits/fs_path.h: Likewise.\n\t* include/experimental/internet: Likewise.\n\t* include/experimental/string_view: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/info_fn_imps.hpp:\n\tLikewise.\n\t*\ninclude/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/tree_trace_base.hpp: Likewise.\n\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/slist: Likewise.\n\t* include/ext/vstring.h: Likewise.\n\t* include/profile/array: Likewise.\n\t* include/std/array: Likewise.\n\t* include/tr1/array: Likewise.\n\t* include/tr1/hashtable.h: Likewise.\n\t* include/tr1/regex: Likewise.\n\t* include/tr2/dynamic_bitset: Likewise.\n\t* include/bits/alloc_traits.h: Add nodiscard attribute to\n\tallocate.\n\t* include/experimental/memory_resource: Likewise.\n\t* include/ext/alloc_traits.h: Likewise.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/debug_allocator.h: Likewise.\n\t* include/ext/extptr_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/pool_allocator.h: Likewise.\n\t* include/ext/throw_allocator.h: Likewise.\n\t* include/std/scoped_allocator: Likewise.\n\t* libsupc++/eh_alloc.cc: Likewise.\n\t* include/std/future: Add nodiscard attribute to async.\n\t* libsupc++/new: Add nodiscard attribute to new.\n\nFrom-SVN: r268111", "tree": {"sha": "8a278f392e532b7d9a500a1ea59be3d154a5bd0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a278f392e532b7d9a500a1ea59be3d154a5bd0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d715f5543117af088e6d8099806b266aa2dac047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d715f5543117af088e6d8099806b266aa2dac047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d715f5543117af088e6d8099806b266aa2dac047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d715f5543117af088e6d8099806b266aa2dac047/comments", "author": null, "committer": null, "parents": [{"sha": "91f1f6cd66d6b34c8938d11735708646a338e8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f1f6cd66d6b34c8938d11735708646a338e8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f1f6cd66d6b34c8938d11735708646a338e8d2"}], "stats": {"total": 283, "additions": 193, "deletions": 90}, "files": [{"sha": "a629dcdd84b771d02d3116311e389ddaed898808", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1,3 +1,8 @@\n+2019-01-20  Ulrich Drepper  <drepper@redhat.com>\n+\n+\tFix after C++ P0600 implementation.\n+\t* g++.dg/init/new39.C: Don't just ignore result of new.\n+\n 2019-01-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.dg/runnable.d: Add more tests for comparing complex types."}, {"sha": "430701db6843664a903f268967b0564163610556", "filename": "gcc/testsuite/g++.dg/init/new39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew39.C?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -57,7 +57,7 @@ int\n main ()\n {\n   try {\n-    ::operator new(size_t(-1));\n+    (void) ::operator new(size_t(-1));\n     abort ();\n   } catch (std::bad_alloc &) {\n   }"}, {"sha": "cb7f1a61af7a59e4ffe24c0874676743e7ddc674", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1,3 +1,92 @@\n+2019-01-20  Ulrich Drepper  <drepper@redhat.com>\n+\n+\tImplement C++20 P0600r1.\n+\t* include/backward/hash_map: Add nodiscard attribute to empty.\n+\t* include/backward/hash_set: Likewise.\n+\t* backward/hashtable.h: Likewise.\n+\t* include/bits/basic_string.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/hashtable.h: Likewise.\n+\t* include/bits/regex.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_queue.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/stl_stack.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/unordered_map.h: Likewise.\n+\t* include/bits/unordered_set.h: Likewise.\n+\t* include/debug/array: Likewise.\n+\t* include/experimental/any: Likewise.\n+\t* include/experimental/bits/fs_path.h: Likewise.\n+\t* include/experimental/internet: Likewise.\n+\t* include/experimental/string_view: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tinfo_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tleft_child_next_sibling_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/tree_trace_base.hpp: Likewise.\n+\t* include/ext/pb_ds/trie_policy.hpp: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/slist: Likewise.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/profile/array: Likewise.\n+\t* include/std/array: Likewise.\n+\t* include/tr1/array: Likewise.\n+\t* include/tr1/hashtable.h: Likewise.\n+\t* include/tr1/regex: Likewise.\n+\t* include/tr2/dynamic_bitset: Likewise.\n+\t* include/bits/alloc_traits.h: Add nodiscard attribute to\n+\tallocate.\n+\t* include/experimental/memory_resource: Likewise.\n+\t* include/ext/alloc_traits.h: Likewise.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/debug_allocator.h: Likewise.\n+\t* include/ext/extptr_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/pool_allocator.h: Likewise.\n+\t* include/ext/throw_allocator.h: Likewise.\n+\t* include/std/scoped_allocator: Likewise.\n+\t* libsupc++/eh_alloc.cc: Likewise.\n+\t* include/std/future: Add nodiscard attribute to async.\n+\t* libsupc++/new: Add nodiscard attribute to new.\n+\n 2019-01-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/87514"}, {"sha": "66a5218fc6fccfe75288fbd61335aaac155c0058", "filename": "libstdc++-v3/include/backward/hash_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -166,7 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return _M_ht.max_size(); }\n       \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return _M_ht.empty(); }\n   \n@@ -385,7 +385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return _M_ht.max_size(); }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return _M_ht.empty(); }\n "}, {"sha": "2dc0ed774fa95925b75ec0c586e5eaf00cab20bc", "filename": "libstdc++-v3/include/backward/hash_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -168,7 +168,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return _M_ht.max_size(); }\n       \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return _M_ht.empty(); }\n       \n@@ -369,7 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return _M_ht.max_size(); }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return _M_ht.empty(); }\n "}, {"sha": "28c487a71c2fd8b47d537396f8ce0c0062a9d9e7", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -379,7 +379,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return size_type(-1); }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return size() == 0; }\n "}, {"sha": "ed61ce845f83b82a01159ce90ba8a9cbae4401c8", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -301,7 +301,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls @c a.allocate(n)\n       */\n-      static pointer\n+      _GLIBCXX_NODISCARD static pointer\n       allocate(_Alloc& __a, size_type __n)\n       { return __a.allocate(__n); }\n \n@@ -316,7 +316,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is\n        *  well-formed, otherwise returns @c a.allocate(n)\n       */\n-      static pointer\n+      _GLIBCXX_NODISCARD static pointer\n       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)\n       { return _S_allocate(__a, __n, __hint, 0); }\n \n@@ -439,7 +439,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls @c a.allocate(n)\n       */\n-      static pointer\n+      _GLIBCXX_NODISCARD static pointer\n       allocate(allocator_type& __a, size_type __n)\n       { return __a.allocate(__n); }\n \n@@ -453,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Returns <tt> a.allocate(n, hint) </tt>\n       */\n-      static pointer\n+      _GLIBCXX_NODISCARD static pointer\n       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)\n       { return __a.allocate(__n, __hint); }\n "}, {"sha": "0a6dd3cbc7149bc1b07df819a743b5070b6d7fff", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1027,7 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n \n@@ -4007,7 +4007,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n "}, {"sha": "4c277845a51d9dc4a28c66287b31e0503f43fc70", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -774,7 +774,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns true if the %forward_list is empty.  (Thus begin() would\n        *  equal end().)\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return this->_M_impl._M_head._M_next == nullptr; }\n "}, {"sha": "31794fb12c2519ae1c71eb004507b45e5e9805fc", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -533,7 +533,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size() const noexcept\n       { return _M_element_count; }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return size() == 0; }\n "}, {"sha": "7576cd7a9c069bffa51971941f4ff10ef21e76a3", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1705,7 +1705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @retval true The %match_results object is empty.\n        * @retval false The %match_results object is not empty.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return size() == 0; }\n "}, {"sha": "1574895a2c648b4e0f098539f130790ddf753fb9", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1377,7 +1377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns true if the %deque is empty.  (Thus begin() would\n        *  equal end().)\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish == this->_M_impl._M_start; }\n "}, {"sha": "68bab94af1e052d0aab3b74ec515862e943a5f97", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1047,7 +1047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns true if the %list is empty.  (Thus begin() would equal\n        *  end().)\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }\n "}, {"sha": "a61d23cac680d392beb0520ce1078fd7e3ad351d", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -459,7 +459,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /** Returns true if the %map is empty.  (Thus begin() would equal\n        *  end().)\n       */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n "}, {"sha": "29a96d8a45bc2b98df8d44e49d7f4df189bde21f", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -452,7 +452,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // capacity\n       /** Returns true if the %multimap is empty.  */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n "}, {"sha": "7a0fb832480566ba210d4be1ba989894805444cc", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       ///  Returns true if the %set is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n "}, {"sha": "aa8dd02ed6eab1dcd357e885589d0eea679dfcbe", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -185,7 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  Returns true if the %queue is empty.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return c.empty(); }\n \n@@ -563,7 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  Returns true if the %queue is empty.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return c.empty(); }\n "}, {"sha": "7c903cf3a9a3f46fc6afbe1d538761cfc8f0c654", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -410,7 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       ///  Returns true if the %set is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n "}, {"sha": "8581dce210c7ef6996cdabe95be5235efcdfda61", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -181,7 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  Returns true if the %stack is empty.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return c.empty(); }\n "}, {"sha": "47ae0ae9531f1ec280562384607825b6b90e5b14", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1027,7 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return _M_impl._M_node_count == 0; }\n "}, {"sha": "54de0e09ce7ef4e32804539d94b1fbc505d57b3d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -964,7 +964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns true if the %vector is empty.  (Thus begin() would\n        *  equal end().)\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return begin() == end(); }\n "}, {"sha": "ecb3ef411fc3a2bdde99891a3361a0fa3c1bb475", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -300,7 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // size and capacity:\n \n       ///  Returns true if the %unordered_map is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return _M_h.empty(); }\n \n@@ -1441,7 +1441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // size and capacity:\n \n       ///  Returns true if the %unordered_multimap is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return _M_h.empty(); }\n "}, {"sha": "3e1180f323adefe16d02c443d13d12d0512e7de4", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -294,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // size and capacity:\n \n       ///  Returns true if the %unordered_set is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return _M_h.empty(); }\n \n@@ -1102,7 +1102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // size and capacity:\n \n       ///  Returns true if the %unordered_multiset is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return _M_h.empty(); }\n "}, {"sha": "9e94e656c0418a81cfd2f3447e70944023512322", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -71,7 +71,7 @@ namespace __debug\n       template<std::size_t _Size>\n \tstruct _Array_check_nonempty\n  \t{\n-\t  bool empty() { return _Size == 0; }\n+\t  _GLIBCXX_NODISCARD bool empty() { return _Size == 0; }\n \n \t  _Array_check_nonempty()\n \t  { __glibcxx_check_nonempty(); }\n@@ -145,7 +145,7 @@ namespace __debug\n       constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      constexpr bool\n+      _GLIBCXX_NODISCARD constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access."}, {"sha": "ed7a115f6b2b894821e5081883081bebc2208c8d", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -266,7 +266,7 @@ inline namespace fundamentals_v1\n     // observers\n \n     /// Reports whether there is a contained object or not.\n-    bool empty() const noexcept { return _M_manager == nullptr; }\n+    _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_manager == nullptr; }\n \n #if __cpp_rtti\n     /// The @c typeid of the contained object, or @c typeid(void) if empty."}, {"sha": "239776df313eaa353f8e3c1641c797bc846de144", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -365,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     // query\n \n-    bool empty() const noexcept { return _M_pathname.empty(); }\n+    _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_pathname.empty(); }\n     bool has_root_name() const;\n     bool has_root_directory() const;\n     bool has_root_path() const;"}, {"sha": "80682efed530824041026d57ef99227462d753f8", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1049,7 +1049,7 @@ namespace ip\n \n     iterator begin() const noexcept { return _M_begin; }\n     iterator end() const noexcept { return _M_end; }\n-    bool empty() const noexcept { return _M_begin == _M_end; }\n+    _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_begin == _M_end; }\n \n     size_t\n     size() const noexcept { return _M_end->to_uint() - _M_begin->to_uint(); }\n@@ -1093,7 +1093,7 @@ namespace ip\n \n     iterator begin() const noexcept { return _M_begin; }\n     iterator end() const noexcept { return _M_end; }\n-    bool empty() const noexcept { return _M_begin == _M_end; }\n+    _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_begin == _M_end; }\n \n     iterator\n     find(const address_v6& __addr) const noexcept\n@@ -1721,7 +1721,7 @@ namespace ip\n       // size:\n       size_type size() const noexcept { return _M_size; }\n       size_type max_size() const noexcept { return _M_results.max_size(); }\n-      bool empty() const noexcept { return _M_results.empty(); }\n+      _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_results.empty(); }\n \n       // element access:\n       const_iterator begin() const { return _M_results.begin(); }"}, {"sha": "e9fece55cd0233785aba5179fe7aedd88b04494e", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -88,7 +88,7 @@ namespace pmr {\n \n     memory_resource& operator=(const memory_resource&) = default;\n \n-    void*\n+    _GLIBCXX_NODISCARD void*\n     allocate(size_t __bytes, size_t __alignment = _S_max_align)\n     { return do_allocate(__bytes, __alignment); }\n \n@@ -145,7 +145,7 @@ namespace pmr {\n       polymorphic_allocator&\n \toperator=(const polymorphic_allocator& __rhs) = default;\n \n-      _Tp* allocate(size_t __n)\n+      _GLIBCXX_NODISCARD _Tp* allocate(size_t __n)\n       { return static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp))); }\n "}, {"sha": "8cc0e90246b05f7ec5357fc6dd085dc139d9d406", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -169,7 +169,7 @@ inline namespace fundamentals_v1\n \t\t/ sizeof(value_type) / 4;\n       }\n \n-      constexpr bool\n+      _GLIBCXX_NODISCARD constexpr bool\n       empty() const noexcept\n       { return this->_M_len == 0; }\n "}, {"sha": "65fa3de271c87a3aaffc999b50de65dac8e1fef2", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -128,7 +128,7 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n     typedef typename _Alloc::size_type              size_type;\n     typedef typename _Alloc::difference_type        difference_type;\n \n-    static pointer\n+    _GLIBCXX_NODISCARD static pointer\n     allocate(_Alloc& __a, size_type __n)\n     { return __a.allocate(__n); }\n "}, {"sha": "c0d4a3497dc36b2b90b5b8dba0c8f9fea7295085", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -151,7 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       ~array_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, const void* = 0)\n       {\n \tif (_M_array == 0 || _M_used + __n > _M_array->size())"}, {"sha": "532bad295b6af503cb00461ca53ea3ca3f89325c", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_space_left() const throw()\n \t{ return _M_end_of_storage - _M_finish; }\n \n-\tpointer\n+\t_GLIBCXX_NODISCARD pointer\n \tallocate(size_type __n)\n \t{ return static_cast<pointer>(::operator new(__n * sizeof(_Tp))); }\n \n@@ -1009,7 +1009,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~bitmap_allocator() _GLIBCXX_USE_NOEXCEPT\n       { }\n \n-      pointer \n+      _GLIBCXX_NODISCARD pointer \n       allocate(size_type __n)\n       {\n \tif (__n > this->max_size())\n@@ -1033,7 +1033,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-      pointer \n+      _GLIBCXX_NODISCARD pointer \n       allocate(size_type __n, typename bitmap_allocator<void>::const_pointer)\n       { return allocate(__n); }\n "}, {"sha": "c5fc57e68dda25faf0ec8202de4a89594c269af7", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -118,7 +118,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       debug_allocator(const _Alloc& __a)\n       : _M_allocator(__a), _M_extra(_S_extra()) { }\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n)\n       {\n         pointer __res = _M_allocator.allocate(__n + _M_extra);      \n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return __res + _M_extra;\n       }\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, const void* __hint)\n       {\n         pointer __res = _M_allocator.allocate(__n + _M_extra, __hint);"}, {"sha": "2ce87b60c44c5bb9a1727d814179e322899bbfe7", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -92,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_pointer address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n-      pointer allocate(size_type __n, void* __hint = 0)\n+      _GLIBCXX_NODISCARD pointer allocate(size_type __n, void* __hint = 0)\n       { return _M_real_alloc.allocate(__n,__hint); }\n \n       void deallocate(pointer __p, size_type __n)"}, {"sha": "43e84f47fbd7db30bb8740db99abbc0e1d512447", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -665,7 +665,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       ~__mt_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, const void* = 0);\n \n       void\n@@ -684,7 +684,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Tp, typename _Poolp>\n-    typename __mt_alloc<_Tp, _Poolp>::pointer\n+    _GLIBCXX_NODISCARD typename __mt_alloc<_Tp, _Poolp>::pointer\n     __mt_alloc<_Tp, _Poolp>::\n     allocate(size_type __n, const void*)\n     {"}, {"sha": "e24539100f9e9885cf0d590a8801740c9fa521f6", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -98,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, const void* = static_cast<const void*>(0))\n       {\n \tif (__n > this->max_size())"}, {"sha": "4019f864307468f14854fc640b0ebe2afafe049f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -39,6 +39,7 @@\n  */\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "dbfd612917e6435b4ad5b14fb9e255450dd7b963", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -144,7 +144,7 @@ namespace __gnu_pbds\n \n       ~binary_heap();\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline size_type"}, {"sha": "d81d5500659ae5e108c8ab3f36a5a98eb4b3960c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -39,6 +39,7 @@\n  */\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "1a6affc70b2324cca776c21607959e611fecc0a4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -271,7 +271,7 @@ namespace __gnu_pbds\n       max_size() const;\n \n       /// True if size() == 0.\n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       /// Return current hash_fn."}, {"sha": "9d38890f7f687577d3cf86736c578d5b3b9197b0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -52,6 +52,7 @@ max_size() const\n { return m_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "bcc1fc47b126190daa4c857eb390c6a92f101687", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -46,6 +46,7 @@ size() const\n { return m_num_used_e; }\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "90dfd50ef8ec59f09a02c883ab586203af4cf35f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -279,7 +279,7 @@ namespace __gnu_pbds\n       max_size() const;\n \n       /// True if size() == 0.\n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       /// Return current hash_fn."}, {"sha": "464216e45dd9de7a1f91a3799c2b33f489fa53f3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -52,6 +52,7 @@ max_size() const\n { return s_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "d12710a1218e05841fa4790588ddb7dae3a6677e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -39,6 +39,7 @@\n  */\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "32d67eb3d3ae1d161e32f0803ea5e2062bb739da", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -144,7 +144,7 @@ namespace __gnu_pbds\n \n       ~left_child_next_sibling_heap();\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline size_type"}, {"sha": "5d2e81ff4a7d21a7d023e731fa4a7b9d7d18771f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -51,6 +51,7 @@ max_size() const\n { return s_entry_allocator.max_size(); }\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "a3c0fb49c9a3b6f5925783ed7484108eef4aba5f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -198,7 +198,7 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline mapped_reference"}, {"sha": "81e7305e315ef2b12bd8aeb7df44aadf1c1260df", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -54,6 +54,7 @@ max_size() const\n { return s_value_alloc.max_size(); }\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "0859da17d7a52d0e28f07d095fb892a345e3e63d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -239,7 +239,7 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline size_type"}, {"sha": "33fc3e14ccfd80a5c5aa75bcd8859007048c847d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -39,6 +39,7 @@\n  */\n \n PB_DS_CLASS_T_DEC\n+_GLIBCXX_NODISCARD\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const"}, {"sha": "3f7e054e24941a0c725b8634a98285b3d86dc7ef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -223,7 +223,7 @@ namespace __gnu_pbds\n \t    }\n \t}\n \n-\tinline bool\n+\t_GLIBCXX_NODISCARD inline bool\n \tempty() const\n \t{ return m_bag.empty(); }\n       };\n@@ -279,7 +279,7 @@ namespace __gnu_pbds\n \n       ~PB_DS_PAT_TRIE_NAME();\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline size_type"}, {"sha": "5c996d11e2850f03d00e54b931cceae876c7ead1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -87,7 +87,7 @@ namespace __gnu_pbds\n       inline void\n       pop();\n \n-      inline bool\n+      _GLIBCXX_NODISCARD inline bool\n       empty() const;\n \n       inline size_type\n@@ -178,7 +178,7 @@ namespace __gnu_pbds\n     }\n \n     template<typename _Node, typename _Alloc>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     rc<_Node, _Alloc>::\n     empty() const\n     {"}, {"sha": "3b349c70d35a208a45c4a53d143abfd4a3f8c155", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_trace_base.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -80,7 +80,7 @@ namespace __gnu_pbds\n       void\n       trace_node(node_const_iterator, size_type) const;\n \n-      virtual bool\n+      _GLIBCXX_NODISCARD virtual bool\n       empty() const = 0;\n \n       virtual node_const_iterator"}, {"sha": "9c750aa56b3b4a80df427c48efd4d2f9903b2460", "filename": "libstdc++-v3/include/ext/pb_ds/trie_policy.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -315,7 +315,7 @@ namespace __gnu_pbds\n     typedef typename __rebind_ma::reference \t\tmetadata_reference;\n \n     /// Returns true if the container is empty.\n-    virtual bool\n+    _GLIBCXX_NODISCARD virtual bool\n     empty() const = 0;\n \n     /// Returns the iterator associated with the trie's first element."}, {"sha": "4b23727abae2bf40a2d199cc3a4ad3d4aabc6a01", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, const void* = 0);\n \n       void\n@@ -210,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __pool_alloc<_Tp>::_S_force_new;\n \n   template<typename _Tp>\n-    _Tp*\n+    _GLIBCXX_NODISCARD _Tp*\n     __pool_alloc<_Tp>::allocate(size_type __n, const void*)\n     {\n       pointer __ret = 0;"}, {"sha": "127d113c3498f00286ecd36b79fffe570edf0ae8", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1797,7 +1797,7 @@ protected:\n       static int _S_compare(const _RopeRep* __x, const _RopeRep* __y);\n       \n     public:\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return 0 == this->_M_tree_ptr; }\n       "}, {"sha": "3b49ae20183e8961f6afbe97a6d2c43b74579541", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -458,7 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const\n       { return size_type(-1); }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return this->_M_head._M_next == 0; }\n "}, {"sha": "38e80f721da80d47eb2c2619daa2b9f5409b88e2", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -829,7 +829,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n-      pointer\n+      _GLIBCXX_NODISCARD pointer\n       allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n       {\n \tif (__n > this->max_size())"}, {"sha": "5942218531f4c904fda66cd640daa3a21fe3f7a5", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -518,7 +518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n "}, {"sha": "8f80e2a067fbf36ea904331d88a7b00848527e17", "filename": "libstdc++-v3/include/profile/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -124,7 +124,7 @@ namespace __profile\n       constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      constexpr bool\n+      _GLIBCXX_NODISCARD constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access."}, {"sha": "02c6f4b4dbe91d6a86280893f84cb720e4561728", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -177,7 +177,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      constexpr bool\n+      _GLIBCXX_NODISCARD constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access."}, {"sha": "10136e57a84983448486b6c1ad6d2385d337b695", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1703,7 +1703,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// async\n   template<typename _Fn, typename... _Args>\n-    future<__async_result_of<_Fn, _Args...>>\n+    _GLIBCXX_NODISCARD future<__async_result_of<_Fn, _Args...>>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args)\n     {\n       std::shared_ptr<__future_base::_State_base> __state;\n@@ -1736,7 +1736,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// async, potential overload\n   template<typename _Fn, typename... _Args>\n-    inline future<__async_result_of<_Fn, _Args...>>\n+    _GLIBCXX_NODISCARD inline future<__async_result_of<_Fn, _Args...>>\n     async(_Fn&& __fn, _Args&&... __args)\n     {\n       return std::async(launch::async|launch::deferred,"}, {"sha": "335df483f691d1fa1aa542ebe37771469e905810", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -343,10 +343,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const outer_allocator_type& outer_allocator() const noexcept\n       { return static_cast<const _OuterAlloc&>(*this); }\n \n-      pointer allocate(size_type __n)\n+      _GLIBCXX_NODISCARD pointer allocate(size_type __n)\n       { return __traits::allocate(outer_allocator(), __n); }\n \n-      pointer allocate(size_type __n, const_void_pointer __hint)\n+      _GLIBCXX_NODISCARD pointer allocate(size_type __n, const_void_pointer __hint)\n       { return __traits::allocate(outer_allocator(), __n, __hint); }\n \n       void deallocate(pointer __p, size_type __n)"}, {"sha": "5c0857b960e5b19c3aef2284ab731d19b12b1aae", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -119,7 +119,7 @@ namespace tr1\n       size_type \n       max_size() const { return _Nm; }\n \n-      bool \n+      _GLIBCXX_NODISCARD bool \n       empty() const { return size() == 0; }\n \n       // Element access."}, {"sha": "c1b5c9e8fdaf9d6f2cb0cc13d6780141d454c69e", "filename": "libstdc++-v3/include/tr1/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -244,7 +244,7 @@ namespace tr1\n       size() const\n       { return _M_element_count; }\n \n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return size() == 0; }\n "}, {"sha": "73c610d2bbdb1a67341948fd7807715c611e0037", "filename": "libstdc++-v3/include/tr1/regex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1870,7 +1870,7 @@ namespace regex_constants\n        * @retval true The %match_results object is empty.\n        * @retval false The %match_results object is not empty.\n        */\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const\n       { return size() == 0; }\n       "}, {"sha": "434a4cc87ec1c750974fa4e9273196483b1ccbb0", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -1014,7 +1014,7 @@ namespace tr2\n       { return this->_M_size(); }\n \n       /// Returns true if the dynamic_bitset is empty.\n-      bool\n+      _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n       { return (this->_M_Nb == 0); }\n "}, {"sha": "005c28dbb1146c28715ac69f013ae41e3492f992", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -86,7 +86,7 @@ namespace\n     public:\n       pool();\n \n-      void *allocate (std::size_t);\n+      _GLIBCXX_NODISCARD void *allocate (std::size_t);\n       void free (void *);\n \n       bool in_pool (void *);"}, {"sha": "6347d21b26f74a938492a2db381b44563619d5c0", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d715f5543117af088e6d8099806b266aa2dac047/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=d715f5543117af088e6d8099806b266aa2dac047", "patch": "@@ -122,9 +122,9 @@ namespace std\n  *  Placement new and delete signatures (take a memory address argument,\n  *  does nothing) may not be replaced by a user's program.\n */\n-void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n+_GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n   __attribute__((__externally_visible__));\n-void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n+_GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n   __attribute__((__externally_visible__));\n void operator delete(void*) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n@@ -136,26 +136,26 @@ void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT\n void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n #endif\n-void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+_GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__, __malloc__));\n-void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+_GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__, __malloc__));\n void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n #if __cpp_aligned_new\n-void* operator new(std::size_t, std::align_val_t)\n+_GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)\n   __attribute__((__externally_visible__));\n-void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)\n+_GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));\n void operator delete(void*, std::align_val_t)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n void operator delete(void*, std::align_val_t, const std::nothrow_t&)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n-void* operator new[](std::size_t, std::align_val_t)\n+_GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)\n   __attribute__((__externally_visible__));\n-void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)\n+_GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));\n void operator delete[](void*, std::align_val_t)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n@@ -170,9 +170,9 @@ void operator delete[](void*, std::size_t, std::align_val_t)\n #endif // __cpp_aligned_new\n \n // Default placement versions of operator new.\n-inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n+_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n { return __p; }\n-inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n+_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n { return __p; }\n \n // Default placement versions of operator delete."}]}