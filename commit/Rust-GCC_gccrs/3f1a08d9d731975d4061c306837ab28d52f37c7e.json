{"sha": "3f1a08d9d731975d4061c306837ab28d52f37c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxYTA4ZDlkNzMxOTc1ZDQwNjFjMzA2ODM3YWIyOGQ1MmYzN2M3ZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-24T02:57:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-28T01:17:36Z"}, "message": "For 128/256-bit vec_cond_expr, When mask operands is lt reg const0_rtx, blendv can be used instead of avx512 mask.\n\ngcc/ChangeLog:\n\n\tPR target/100648\n\t* config/i386/sse.md (*avx_cmp<mode>3_lt): New\n\tdefine_insn_and_split.\n\t(*avx_cmp<mode>3_ltint): Ditto.\n\t(*avx2_pcmp<mode>3_3): Ditto.\n\t(*avx2_pcmp<mode>3_4): Ditto.\n\t(*avx2_pcmp<mode>3_5): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100648\n\t* g++.target/i386/avx2-pr54700-2.C: Adjust testcase.\n\t* g++.target/i386/avx512vl-pr54700-1a.C: New test.\n\t* g++.target/i386/avx512vl-pr54700-1b.C: New test.\n\t* g++.target/i386/avx512vl-pr54700-2a.C: New test.\n\t* g++.target/i386/avx512vl-pr54700-2b.C: New test.\n\t* gcc.target/i386/avx512vl-pr100648.c: New test.\n\t* gcc.target/i386/avx512vl-blendv-1.c: New test.\n\t* gcc.target/i386/avx512vl-blendv-2.c: New test.", "tree": {"sha": "68001ffd1da3a0ded053ace7d5fa4280d902ce92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68001ffd1da3a0ded053ace7d5fa4280d902ce92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1a08d9d731975d4061c306837ab28d52f37c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1a08d9d731975d4061c306837ab28d52f37c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1a08d9d731975d4061c306837ab28d52f37c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1a08d9d731975d4061c306837ab28d52f37c7e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28560c6d4043d8f6ac570f35fb84e952e9c719fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28560c6d4043d8f6ac570f35fb84e952e9c719fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28560c6d4043d8f6ac570f35fb84e952e9c719fe"}], "stats": {"total": 325, "additions": 324, "deletions": 1}, "files": [{"sha": "ffcc0c819645e97eb22e10c01b1e68c386ac8a39", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -3048,6 +3048,68 @@\n \t  UNSPEC_PCMP))]\n   \"operands[5] = GEN_INT (INTVAL (operands[5]) ^ 4);\")\n \n+(define_insn_and_split \"*avx_cmp<mode>3_lt\"\n+ [(set (match_operand:VF_128_256  0 \"register_operand\")\n+\t(vec_merge:VF_128_256\n+\t  (match_operand:VF_128_256 1 \"vector_operand\")\n+\t  (match_operand:VF_128_256 2 \"vector_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:<sseintvecmode> 3 \"register_operand\")\n+\t     (match_operand:<sseintvecmode> 4 \"const0_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[2]))\n+      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[1])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_128_256\n+\t  [(match_dup 2)\n+\t   (match_dup 1)\n+\t   (lt:VF_128_256\n+\t     (match_dup 3)\n+\t     (match_dup 4))]\n+\t    UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 5)\n+    std::swap (operands[1], operands[2]);\n+})\n+\n+(define_insn_and_split \"*avx_cmp<mode>3_ltint\"\n+ [(set (match_operand:VI48_AVX  0 \"register_operand\")\n+\t(vec_merge:VI48_AVX\n+\t  (match_operand:VI48_AVX 1 \"vector_operand\")\n+\t  (match_operand:VI48_AVX 2 \"vector_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI48_AVX 3 \"register_operand\")\n+\t     (match_operand:VI48_AVX 4 \"const0_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[2]))\n+      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[1])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<ssebytemode>\n+\t  [(match_dup 2)\n+\t   (match_dup 1)\n+\t   (subreg:<ssebytemode>\n+\t     (lt:VI48_AVX\n+\t      (match_dup 3)\n+\t      (match_dup 4)) 0)]\n+\t    UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 5)\n+    std::swap (operands[1], operands[2]);\n+  operands[0] = gen_lowpart (<ssebytemode>mode, operands[0]);\n+  operands[1] = gen_lowpart (<ssebytemode>mode, operands[1]);\n+  operands[2] = gen_lowpart (<ssebytemode>mode, operands[2]);\n+})\n+\n (define_insn \"avx_vmcmp<mode>3\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x\")\n \t(vec_merge:VF_128\n@@ -13063,6 +13125,96 @@\n   DONE;\n })\n \n+(define_insn_and_split \"*avx2_pcmp<mode>3_3\"\n+ [(set (match_operand:VI1_AVX2  0 \"register_operand\")\n+\t(vec_merge:VI1_AVX2\n+\t  (match_operand:VI1_AVX2 1 \"vector_operand\")\n+\t  (match_operand:VI1_AVX2 2 \"vector_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI1_AVX2 3 \"register_operand\")\n+\t     (match_operand:VI1_AVX2 4 \"const0_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[2]))\n+      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[1])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t  [(match_dup 2)\n+\t   (match_dup 1)\n+\t   (lt:VI1_AVX2\n+\t     (match_dup 3)\n+\t     (match_dup 4))]\n+\t     UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 5)\n+    std::swap (operands[1], operands[2]);\n+})\n+\n+(define_insn_and_split \"*avx2_pcmp<mode>3_4\"\n+ [(set (match_operand:VI1_AVX2  0 \"register_operand\")\n+\t(vec_merge:VI1_AVX2\n+\t  (match_operand:VI1_AVX2 1 \"vector_operand\")\n+\t  (match_operand:VI1_AVX2 2 \"vector_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(subreg:VI1_AVX2 (not (match_operand 3 \"register_operand\")) 0)\n+\t     (match_operand:VI1_AVX2 4 \"const0_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_VECTOR_INT\n+  && GET_MODE_SIZE (GET_MODE (operands[3])) == <MODE_SIZE>\n+  /* LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[1]))\n+      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[2])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (lt:VI1_AVX2\n+\t     (match_dup 3)\n+\t     (match_dup 4))]\n+\t     UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 1)\n+    std::swap (operands[1], operands[2]);\n+  operands[3] = gen_lowpart (<MODE>mode, operands[3]);\n+})\n+\n+(define_insn_and_split \"*avx2_pcmp<mode>3_5\"\n+ [(set (match_operand:VI1_AVX2  0 \"register_operand\")\n+\t(vec_merge:VI1_AVX2\n+\t  (match_operand:VI1_AVX2 1 \"vector_operand\")\n+\t  (match_operand:VI1_AVX2 2 \"vector_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(not:VI1_AVX2 (match_operand:VI1_AVX2 3 \"register_operand\"))\n+\t     (match_operand:VI1_AVX2 4 \"const0_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* LT or GE 0 */\n+  && ((INTVAL (operands[5]) == 1 && !MEM_P (operands[1]))\n+      || (INTVAL (operands[5]) == 5 && !MEM_P (operands[2])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (lt:VI1_AVX2\n+\t     (match_dup 3)\n+\t     (match_dup 4))]\n+\t     UNSPEC_BLENDV))]\n+{\n+  if (INTVAL (operands[5]) == 1)\n+    std::swap (operands[1], operands[2]);\n+})\n+\n (define_expand \"<avx512>_eq<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>"}, {"sha": "e7a85c34b175b268416017657d4869861cf28992", "filename": "gcc/testsuite/g++.target/i386/avx2-pr54700-2.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -2,9 +2,15 @@\n /* { dg-do run { target avx2 } } */\n /* { dg-options \"-O2 -std=c++14 -mavx2 -mno-xop -mno-avx512f\" } */\n \n-#include \"avx2-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"avx2-check.h\"\n+#endif\n \n+#ifndef TEST\n #define TEST avx2_test\n+#endif\n+\n+#include CHECK_H\n \n #include \"avx2-pr54700-1.C\"\n "}, {"sha": "fedc3aad0190ec4ee2e074e06c4d3a3ca719a41d", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr54700-1a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1a.C?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/100648 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -mavx2 -mno-xop -mavx512vl -mavx512bw\" } */\n+/* { dg-final { scan-assembler-not \"vpcmpgt\\[bdq]\" } } */\n+/* { dg-final { scan-assembler-times \"vpblendvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vblendvps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vblendvpd\" 4 } } */\n+\n+#include \"avx2-pr54700-1.C\""}, {"sha": "03f9343565056fa1be0c4e07f9121ccd051f000c", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr54700-1b.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-1b.C?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/100648 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -mavx512vl -mavx512bw -mno-xop\" } */\n+/* { dg-final { scan-assembler-not \"pcmpgt\\[bdq]\" } } */\n+/* { dg-final { scan-assembler-times \"pblendvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blendvps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"blendvpd\" 4 } } */\n+\n+#include \"sse4_1-pr54700-1.C\""}, {"sha": "687a8c4fd8f02847752b4cbba36586cc8a290ad1", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr54700-2a.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2a.C?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/100648  */\n+/* { dg-do run { target avx2 } } */\n+/* { dg-options \"-O2 -std=c++14 -mavx2 -mavx512vl -mavx512bw\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx512f-helper.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST_test_256\n+#endif\n+\n+#include CHECK_H\n+#include \"avx2-pr54700-2.C\"\n+\n+#define AVX512VL\n+#define AVX512BW"}, {"sha": "40450a90c52bd310e2a5421de4682dadef83cf70", "filename": "gcc/testsuite/g++.target/i386/avx512vl-pr54700-2b.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512vl-pr54700-2b.C?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/pr100648 */\n+/* { dg-do run { target sse4 } } */\n+/* { dg-options \"-O2 -std=c++14 -msse4 -mavx512vl -mavx512bw -mno-xop\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx512f-helper.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST_test_128\n+#endif\n+\n+#include CHECK_H\n+#include \"sse4_1-pr54700-2.C\"\n+\n+#define AVX512VL\n+#define AVX512BW"}, {"sha": "6aa004b5e9fce60ce4db62f82fcc29087ee6224a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-blendv-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-1.c?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times {pblendvb[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {pblendvb[\\t ]*%ymm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvps[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvps[\\t ]*%ymm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvpd[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvpd[\\t ]*%ymm} 1 } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef float v8sf __attribute__ ((vector_size (32)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef double v4df __attribute__ ((vector_size (32)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+\n+v4sf\n+foo (v4sf a, v4sf b, v4sf c)\n+{\n+  return __builtin_ia32_blendvps (a, b, c);\n+}\n+\n+v8sf\n+foo2 (v8sf a, v8sf b, v8sf c)\n+{\n+  return __builtin_ia32_blendvps256 (a, b, c);\n+}\n+\n+v2df\n+foo3 (v2df a, v2df b, v2df c)\n+{\n+  return __builtin_ia32_blendvpd (a, b, c);\n+}\n+\n+v4df\n+foo4 (v4df a, v4df b, v4df c)\n+{\n+  return __builtin_ia32_blendvpd256 (a, b, c);\n+}\n+\n+v16qi\n+foo5 (v16qi a, v16qi b, v16qi c)\n+{\n+  return __builtin_ia32_pblendvb128 (a, b, c);\n+}\n+\n+v32qi\n+foo6 (v32qi a, v32qi b, v32qi c)\n+{\n+  return __builtin_ia32_pblendvb256 (a, b, c);\n+}"}, {"sha": "daddcd5a6859f6b0ea89e6785a4885b9bbe94f54", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-blendv-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-blendv-2.c?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not {pblendv} } } */\n+/* { dg-final { scan-assembler-not {blendvp} } } */\n+\n+#include <x86intrin.h>\n+__m128\n+foo (__m128 a, __m128 b)\n+{\n+  return _mm_blendv_ps (a, b, _mm_setzero_ps ());\n+}\n+\n+__m256\n+foo2 (__m256 a, __m256 b)\n+{\n+  return _mm256_blendv_ps (a, b, _mm256_set1_ps (-1.0));\n+}\n+\n+__m128d\n+foo3 (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_blendv_pd (a, b, _mm_set1_pd (1.0));\n+}\n+\n+__m256d\n+foo4 (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_blendv_pd (a, b, _mm256_set1_pd (-134.3));\n+}\n+\n+__m128i\n+foo5 (__m128i a, __m128i b, __m128i c)\n+{\n+  return _mm_blendv_epi8 (a, b, _mm_set1_epi8 (3));\n+}\n+\n+__m256i\n+foo6 (__m256i a, __m256i b, __m256i c)\n+{\n+  return _mm256_blendv_epi8 (a, b, _mm256_set1_epi8 (-22));\n+}"}, {"sha": "2ef7c7bcd964387f774bfb0a67198216baab192a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr100648.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100648.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1a08d9d731975d4061c306837ab28d52f37c7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100648.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100648.c?ref=3f1a08d9d731975d4061c306837ab28d52f37c7e", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/100648.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpblendvb\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tvpcmpeq\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvpandn\" } } */\n+#include <x86intrin.h>\n+\n+__m256i\n+f1 (__m256i a, __m256i b, __m256i mask)\n+{\n+  return _mm256_blendv_epi8(a, b, \n+    _mm256_andnot_si256(mask, _mm256_set1_epi8(255)));\n+}\n+\n+__m128i\n+f2 (__m128i a, __m128i b, __m128i mask)\n+{\n+  return _mm_blendv_epi8(a, b, \n+    _mm_andnot_si128(mask, _mm_set1_epi8(255)));\n+}"}]}