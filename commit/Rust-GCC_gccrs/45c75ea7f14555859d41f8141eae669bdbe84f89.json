{"sha": "45c75ea7f14555859d41f8141eae669bdbe84f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjNzVlYTdmMTQ1NTU4NTlkNDFmODE0MWVhZTY2OWJkYmU4NGY4OQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-02-06T16:51:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-02-06T16:51:03Z"}, "message": "[ARM] Cortex-A57 rtx costs\n\n\t* config/arm/aarch-cost-tables.h (cortexa57_extra_costs): New table.\n\tRemove extra newline at end of file.\n\t* config/arm/arm.c (arm_cortex_a57_tune): New tuning struct.\n\t(arm_issue_rate): Handle cortexa57.\n\t* config/arm/arm-cores.def (cortex-a57): Use cortex_a57 tuning.\n\t(cortex-a57.cortex-a53): Likewise.\n\nFrom-SVN: r207565", "tree": {"sha": "d2288fe5f4ee21ffe08092fee8b367f3604aa64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2288fe5f4ee21ffe08092fee8b367f3604aa64b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45c75ea7f14555859d41f8141eae669bdbe84f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c75ea7f14555859d41f8141eae669bdbe84f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c75ea7f14555859d41f8141eae669bdbe84f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c75ea7f14555859d41f8141eae669bdbe84f89/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69fe2dfb013a635182c30320fb9146a2cf35e0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69fe2dfb013a635182c30320fb9146a2cf35e0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69fe2dfb013a635182c30320fb9146a2cf35e0c1"}], "stats": {"total": 130, "additions": 127, "deletions": 3}, "files": [{"sha": "e489b6283d8c4860e8bc4666d377dea8152019af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45c75ea7f14555859d41f8141eae669bdbe84f89", "patch": "@@ -1,3 +1,12 @@\n+2014-02-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/aarch-cost-tables.h (cortexa57_extra_costs): New table.\n+\tRemove extra newline at end of file.\n+\t* config/arm/arm.c (arm_cortex_a57_tune): New tuning struct.\n+\t(arm_issue_rate): Handle cortexa57.\n+\t* config/arm/arm-cores.def (cortex-a57): Use cortex_a57 tuning.\n+\t(cortex-a57.cortex-a53): Likewise.\n+\n 2014-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59575"}, {"sha": "690ef9b0fd414855ae279d5e780d5e9361ad56d6", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=45c75ea7f14555859d41f8141eae669bdbe84f89", "patch": "@@ -222,6 +222,104 @@ const struct cpu_cost_table cortexa53_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table cortexa57_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    COSTS_N_INSNS (1), /* shift_reg.  */\n+    COSTS_N_INSNS (1), /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    COSTS_N_INSNS (1), /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    COSTS_N_INSNS (1), /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (2),       /* simple.  */\n+      COSTS_N_INSNS (3),       /* flag_setting.  */\n+      COSTS_N_INSNS (2),       /* extend.  */\n+      COSTS_N_INSNS (2),       /* add.  */\n+      COSTS_N_INSNS (2),       /* extend_add.  */\n+      COSTS_N_INSNS (18)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (4),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (2),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (2),       /* extend_add.  */\n+      COSTS_N_INSNS (34)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (3),         /* load.  */\n+    COSTS_N_INSNS (3),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (3),         /* ldrd.  */\n+    COSTS_N_INSNS (2),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    2,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),         /* loadf.  */\n+    COSTS_N_INSNS (4),         /* loadd.  */\n+    COSTS_N_INSNS (5),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    2,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    COSTS_N_INSNS (1)          /* store_unaligned.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (17),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (9),       /* mult_addsub. */\n+      COSTS_N_INSNS (9),       /* fma.  */\n+      COSTS_N_INSNS (4),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst. */\n+      COSTS_N_INSNS (2),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (31),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (9),       /* mult_addsub.  */\n+      COSTS_N_INSNS (9),       /* fma.  */\n+      COSTS_N_INSNS (4),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst.  */\n+      COSTS_N_INSNS (2),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)  /* alu.  */\n+  }\n+};\n \n #endif /* GCC_AARCH_COST_TABLES_H */\n-"}, {"sha": "42f00b46326d02544e1285eb016b9bf0230a2b9c", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=45c75ea7f14555859d41f8141eae669bdbe84f89", "patch": "@@ -153,7 +153,7 @@ ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,  FL_LDSCHED |\n \n /* V8 Architecture Processors */\n ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A, FL_LDSCHED | FL_CRC32, cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa15,\t8A, FL_LDSCHED | FL_CRC32, cortex_a15)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa15,\t8A, FL_LDSCHED | FL_CRC32, cortex_a57)\n \n /* V8 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32, cortex_a15)\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32, cortex_a57)"}, {"sha": "b5629861ca9274205eefddcb4253b382d77193d8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c75ea7f14555859d41f8141eae669bdbe84f89/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=45c75ea7f14555859d41f8141eae669bdbe84f89", "patch": "@@ -1632,6 +1632,22 @@ const struct tune_params arm_cortex_a53_tune =\n   false\t\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n };\n \n+const struct tune_params arm_cortex_a57_tune =\n+{\n+  arm_9e_rtx_costs,\n+  &cortexa57_extra_costs,\n+  NULL,                                         /* Scheduler cost adjustment.  */\n+  1,                                           /* Constant limit.  */\n+  2,                                           /* Max cond insns.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  false,                                       /* Prefer constant pool.  */\n+  arm_default_branch_cost,\n+  true,                                       /* Prefer LDRD/STRD.  */\n+  {true, true},                                /* Prefer non short circuit.  */\n+  &arm_default_vec_cost,                       /* Vectorizer costs.  */\n+  false                                        /* Prefer Neon for 64-bits bitops.  */\n+};\n+\n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n    less appealing.  Set max_insns_skipped to a low value.  */\n \n@@ -29352,6 +29368,7 @@ arm_issue_rate (void)\n   switch (arm_tune)\n     {\n     case cortexa15:\n+    case cortexa57:\n       return 3;\n \n     case cortexr4:"}]}