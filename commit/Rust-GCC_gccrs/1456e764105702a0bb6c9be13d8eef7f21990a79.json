{"sha": "1456e764105702a0bb6c9be13d8eef7f21990a79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1NmU3NjQxMDU3MDJhMGJiNmM5YmUxM2Q4ZWVmN2YyMTk5MGE3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-03T17:41:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-03T17:41:12Z"}, "message": "PR c++/85149 - generic lambda and constexpr if.\n\n\t* pt.c (build_extra_args, add_extra_args): Split from\n\ttsubst_pack_expansion.\n\t(tsubst_expr) [IF_STMT]: Use them.\n\t* cp-tree.h (IF_STMT_EXTRA_ARGS): New.\n\nFrom-SVN: r259043", "tree": {"sha": "a2a7b1c3ad63b40b6b58d47dad2b0efcbde9f65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2a7b1c3ad63b40b6b58d47dad2b0efcbde9f65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1456e764105702a0bb6c9be13d8eef7f21990a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1456e764105702a0bb6c9be13d8eef7f21990a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1456e764105702a0bb6c9be13d8eef7f21990a79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1456e764105702a0bb6c9be13d8eef7f21990a79/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f759575d3675150e665be997dd1e404e5c011f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f759575d3675150e665be997dd1e404e5c011f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f759575d3675150e665be997dd1e404e5c011f4"}], "stats": {"total": 127, "additions": 102, "deletions": 25}, "files": [{"sha": "9dbb215154e59826737599356a47a5d67bb11b24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1456e764105702a0bb6c9be13d8eef7f21990a79", "patch": "@@ -1,5 +1,11 @@\n 2018-04-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/85149 - generic lambda and constexpr if.\n+\t* pt.c (build_extra_args, add_extra_args): Split from\n+\ttsubst_pack_expansion.\n+\t(tsubst_expr) [IF_STMT]: Use them.\n+\t* cp-tree.h (IF_STMT_EXTRA_ARGS): New.\n+\n \t* typeck.c (merge_types): Limit matching attribute shortcut to\n \tthe default case.\n "}, {"sha": "f7bacd08c8f896153b653f285cbfd975b6390784", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1456e764105702a0bb6c9be13d8eef7f21990a79", "patch": "@@ -4866,6 +4866,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define IF_SCOPE(NODE)\t\tTREE_OPERAND (IF_STMT_CHECK (NODE), 3)\n #define IF_STMT_CONSTEXPR_P(NODE) TREE_LANG_FLAG_0 (IF_STMT_CHECK (NODE))\n \n+/* Like PACK_EXPANSION_EXTRA_ARGS, for constexpr if.  IF_SCOPE is used while\n+   building an IF_STMT; IF_STMT_EXTRA_ARGS is used after it is complete.  */\n+#define IF_STMT_EXTRA_ARGS(NODE) IF_SCOPE (NODE)\n+\n /* WHILE_STMT accessors. These give access to the condition of the\n    while statement and the body of the while statement, respectively.  */\n #define WHILE_COND(NODE)\tTREE_OPERAND (WHILE_STMT_CHECK (NODE), 0)"}, {"sha": "4c0d298cfcc58af357af92a48a43ff51f2569f2d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 59, "deletions": 25, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1456e764105702a0bb6c9be13d8eef7f21990a79", "patch": "@@ -11663,6 +11663,46 @@ extract_local_specs (tree pattern, tsubst_flags_t complain)\n   return data.extra;\n }\n \n+/* Extract any uses of local_specializations from PATTERN and add them to ARGS\n+   for use in PACK_EXPANSION_EXTRA_ARGS.  */\n+\n+tree\n+build_extra_args (tree pattern, tree args, tsubst_flags_t complain)\n+{\n+  tree extra = args;\n+  if (local_specializations)\n+    if (tree locals = extract_local_specs (pattern, complain))\n+      extra = tree_cons (NULL_TREE, extra, locals);\n+  return extra;\n+}\n+\n+/* Apply any local specializations from PACK_EXPANSION_EXTRA_ARGS and add the\n+   normal template args to ARGS.  */\n+\n+tree\n+add_extra_args (tree extra, tree args)\n+{\n+  if (extra && TREE_CODE (extra) == TREE_LIST)\n+    {\n+      for (tree elt = TREE_CHAIN (extra); elt; elt = TREE_CHAIN (elt))\n+\t{\n+\t  /* The partial instantiation involved local declarations collected in\n+\t     extract_local_specs; map from the general template to our local\n+\t     context.  */\n+\t  tree gen = TREE_PURPOSE (elt);\n+\t  tree inst = TREE_VALUE (elt);\n+\t  if (DECL_P (inst))\n+\t    if (tree local = retrieve_local_specialization (inst))\n+\t      inst = local;\n+\t  /* else inst is already a full instantiation of the pack.  */\n+\t  register_local_specialization (inst, gen);\n+\t}\n+      gcc_assert (!TREE_PURPOSE (extra));\n+      extra = TREE_VALUE (extra);\n+    }\n+  return add_to_template_args (extra, args);\n+}\n+\n /* Substitute ARGS into T, which is an pack expansion\n    (i.e. TYPE_PACK_EXPANSION or EXPR_PACK_EXPANSION). Returns a\n    TREE_VEC with the substituted arguments, a PACK_EXPANSION_* node\n@@ -11686,26 +11726,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   pattern = PACK_EXPANSION_PATTERN (t);\n \n   /* Add in any args remembered from an earlier partial instantiation.  */\n-  tree extra = PACK_EXPANSION_EXTRA_ARGS (t);\n-  if (extra && TREE_CODE (extra) == TREE_LIST)\n-    {\n-      for (tree elt = TREE_CHAIN (extra); elt; elt = TREE_CHAIN (elt))\n-\t{\n-\t  /* The partial instantiation involved local declarations collected in\n-\t     extract_local_specs; map from the general template to our local\n-\t     context.  */\n-\t  tree gen = TREE_PURPOSE (elt);\n-\t  tree inst = TREE_VALUE (elt);\n-\t  if (DECL_P (inst))\n-\t    if (tree local = retrieve_local_specialization (inst))\n-\t      inst = local;\n-\t  /* else inst is already a full instantiation of the pack.  */\n-\t  register_local_specialization (inst, gen);\n-\t}\n-      gcc_assert (!TREE_PURPOSE (extra));\n-      extra = TREE_VALUE (extra);\n-    }\n-  args = add_to_template_args (extra, args);\n+  args = add_extra_args (PACK_EXPANSION_EXTRA_ARGS (t), args);\n \n   levels = TMPL_ARGS_DEPTH (args);\n \n@@ -11881,11 +11902,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t have values for all the packs.  So remember these until then.  */\n \n       t = make_pack_expansion (pattern, complain);\n-      tree extra = args;\n-      if (local_specializations)\n-\tif (tree locals = extract_local_specs (pattern, complain))\n-\t  extra = tree_cons (NULL_TREE, extra, locals);\n-      PACK_EXPANSION_EXTRA_ARGS (t) = extra;\n+      PACK_EXPANSION_EXTRA_ARGS (t)\n+\t= build_extra_args (pattern, args, complain);\n       return t;\n     }\n   else if (unsubstituted_packs)\n@@ -16485,8 +16503,24 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case IF_STMT:\n       stmt = begin_if_stmt ();\n       IF_STMT_CONSTEXPR_P (stmt) = IF_STMT_CONSTEXPR_P (t);\n+      if (IF_STMT_CONSTEXPR_P (t))\n+\targs = add_extra_args (IF_STMT_EXTRA_ARGS (t), args);\n       tmp = RECUR (IF_COND (t));\n       tmp = finish_if_stmt_cond (tmp, stmt);\n+      if (IF_STMT_CONSTEXPR_P (t)\n+\t  && instantiation_dependent_expression_p (tmp))\n+\t{\n+\t  /* We're partially instantiating a generic lambda, but the condition\n+\t     of the constexpr if is still dependent.  Don't substitute into the\n+\t     branches now, just remember the template arguments.  */\n+\t  do_poplevel (IF_SCOPE (stmt));\n+\t  IF_COND (stmt) = IF_COND (t);\n+\t  THEN_CLAUSE (stmt) = THEN_CLAUSE (t);\n+\t  ELSE_CLAUSE (stmt) = ELSE_CLAUSE (t);\n+\t  IF_STMT_EXTRA_ARGS (stmt) = build_extra_args (t, args, complain);\n+\t  add_stmt (stmt);\n+\t  break;\n+\t}\n       if (IF_STMT_CONSTEXPR_P (t) && integer_zerop (tmp))\n \t/* Don't instantiate the THEN_CLAUSE. */;\n       else"}, {"sha": "c6ebf1ebab28a023235492485ccd31945eb12e41", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if17.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1456e764105702a0bb6c9be13d8eef7f21990a79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if17.C?ref=1456e764105702a0bb6c9be13d8eef7f21990a79", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/85149\n+// { dg-do run }\n+// { dg-additional-options -std=c++17 }\n+\n+template <typename T> struct is_void { static constexpr bool value = false; };\n+template <> struct is_void<void> { static constexpr bool value = true; };\n+\n+template<typename S, typename T>\n+constexpr decltype(auto) pipeline(S source, T target)\n+{\n+  return [=](auto... args)\n+    {\n+      if constexpr(false\n+\t\t   && is_void<decltype(source(args...))>::value)\n+\t{\n+\t  source(args...);\n+\t  return target();\n+\t}\n+      else\n+\t{\n+\t  return target(source(args...));\n+        }\n+    };\n+}\n+\n+int main() {\n+  int i = 10;\n+  int j = 42;\n+  auto p = pipeline([&]{ return j; },\n+\t\t    [=](int val){ return val * i; });\n+  if (p() != 420)\n+    __builtin_abort();\n+}"}]}