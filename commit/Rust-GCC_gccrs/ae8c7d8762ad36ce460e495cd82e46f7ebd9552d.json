{"sha": "ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4YzdkODc2MmFkMzZjZTQ2MGU0OTVjZDgyZTQ2ZjdlYmQ5NTUyZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-04-08T14:31:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-08T14:31:44Z"}, "message": "exp_attr.adb, [...]: Code clean up.\n\n2009-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb, sem_attr.adb, sem_util.adb: Code clean up.\n\nFrom-SVN: r145741", "tree": {"sha": "5c7d5ca8363e3376e29cd2917f4cc98c87d8eae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c7d5ca8363e3376e29cd2917f4cc98c87d8eae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/comments", "author": null, "committer": null, "parents": [{"sha": "ff69f95af086f0041be775afb527e3b98f9e8bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff69f95af086f0041be775afb527e3b98f9e8bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff69f95af086f0041be775afb527e3b98f9e8bf6"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "80c23763f87e45a55240c948443979edf5e174b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "patch": "@@ -1,3 +1,7 @@\n+2009-04-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.adb, sem_util.adb: Code clean up.\n+\n 2009-04-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_cat.adb (Check_Categorization_Dependencies): Handle Preelaborate"}, {"sha": "7f82cde78b1edf9430bd8ef2513aae9e67529418", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "patch": "@@ -867,7 +867,9 @@ package body Exp_Attr is\n             --  If the prefix of an Access attribute is a dereference of an\n             --  access parameter (or a renaming of such a dereference, or a\n             --  subcomponent of such a dereference) and the context is a\n-            --  general access type (but not an anonymous access type), then\n+            --  general access type (including the type of an object or\n+            --  component with an access_definition, but not the anonymous\n+            --  type of an access parameter or access discriminant), then\n             --  apply an accessibility check to the access parameter. We used\n             --  to rewrite the access parameter as a type conversion, but that\n             --  could only be done if the immediate prefix of the Access\n@@ -882,7 +884,8 @@ package body Exp_Attr is\n             elsif Id = Attribute_Access\n               and then Nkind (Enc_Object) = N_Explicit_Dereference\n               and then Is_Entity_Name (Prefix (Enc_Object))\n-              and then Ekind (Btyp) = E_General_Access_Type\n+              and then (Ekind (Btyp) = E_General_Access_Type\n+                         or else Is_Local_Anonymous_Access (Btyp))\n               and then Ekind (Entity (Prefix (Enc_Object))) in Formal_Kind\n               and then Ekind (Etype (Entity (Prefix (Enc_Object))))\n                          = E_Anonymous_Access_Type"}, {"sha": "014f0caf40281ece2f27c69397fc30f24a82f95e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "patch": "@@ -713,8 +713,7 @@ package body Sem_Attr is\n                then\n                   null;\n \n-               --  OK if reference to the current instance of a protected\n-               --  object.\n+               --  OK if reference to current instance of a protected object\n \n                elsif Is_Protected_Self_Reference (P) then\n                   null;\n@@ -1651,8 +1650,8 @@ package body Sem_Attr is\n \n          elsif Is_Protected_Self_Reference (P) then\n             Error_Attr_P\n-              (\"prefix of % attribute denotes current instance \" &\n-                 \"(RM 9.4(21/2))\");\n+              (\"prefix of % attribute denotes current instance \"\n+               & \"(RM 9.4(21/2))\");\n \n          elsif Ekind (Entity (P)) = E_Incomplete_Type\n             and then Present (Full_View (Entity (P)))\n@@ -2021,8 +2020,8 @@ package body Sem_Attr is\n          --  applies to other entity-denoting expressions.\n \n          if Is_Protected_Self_Reference (P) then\n-            --  An Address attribute on a protected object self reference\n-            --  is legal.\n+\n+            --  Address attribute on a protected object self reference is legal\n \n             null;\n "}, {"sha": "34ad212df0d221e6e6aa6206d61dbea1f8bc3e03", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c7d8762ad36ce460e495cd82e46f7ebd9552d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ae8c7d8762ad36ce460e495cd82e46f7ebd9552d", "patch": "@@ -6383,25 +6383,28 @@ package body Sem_Util is\n    -- Is_Protected_Self_Reference --\n    ---------------------------------\n \n-   function Is_Protected_Self_Reference (N : Node_Id) return Boolean\n-   is\n+   function Is_Protected_Self_Reference (N : Node_Id) return Boolean is\n+\n       function In_Access_Definition (N : Node_Id) return Boolean;\n       --  Returns true if N belongs to an access definition\n \n       --------------------------\n       -- In_Access_Definition --\n       --------------------------\n \n-      function In_Access_Definition (N : Node_Id) return Boolean\n-      is\n-         P : Node_Id := Parent (N);\n+      function In_Access_Definition (N : Node_Id) return Boolean is\n+         P : Node_Id;\n+\n       begin\n+         P := Parent (N);\n          while Present (P) loop\n             if Nkind (P) = N_Access_Definition then\n                return True;\n             end if;\n+\n             P := Parent (P);\n          end loop;\n+\n          return False;\n       end In_Access_Definition;\n "}]}