{"sha": "401d6e7bf17405f21501b602d6469c9c2384e75d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxZDZlN2JmMTc0MDVmMjE1MDFiNjAyZDY0NjljOWMyMzg0ZTc1ZA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2004-08-19T22:34:15Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-08-19T22:34:15Z"}, "message": "tree.c: Remove unused mark_local_for_remap_r.\n\n2004-08-20  Andreas Tobler  <a.tobler@schweiz.ch>\n\n        * tree.c: Remove unused mark_local_for_remap_r.\n\nFrom-SVN: r86289", "tree": {"sha": "519c8ca4bb0533f7eb04d10bb0cde96d1f19b9c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519c8ca4bb0533f7eb04d10bb0cde96d1f19b9c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/401d6e7bf17405f21501b602d6469c9c2384e75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401d6e7bf17405f21501b602d6469c9c2384e75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401d6e7bf17405f21501b602d6469c9c2384e75d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401d6e7bf17405f21501b602d6469c9c2384e75d/comments", "author": null, "committer": null, "parents": [{"sha": "292e0d3a8a3347c5200f7cda725743f1f1dafcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292e0d3a8a3347c5200f7cda725743f1f1dafcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292e0d3a8a3347c5200f7cda725743f1f1dafcbc"}], "stats": {"total": 50, "additions": 4, "deletions": 46}, "files": [{"sha": "cf2e0b85b13fbca947cfe06f1140dd0f4b5f7522", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401d6e7bf17405f21501b602d6469c9c2384e75d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401d6e7bf17405f21501b602d6469c9c2384e75d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=401d6e7bf17405f21501b602d6469c9c2384e75d", "patch": "@@ -1,3 +1,7 @@\n+2004-08-20  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* tree.c: Remove unused mark_local_for_remap_r.\n+\n 2004-08-19  Eric Christopher  <echristo@redhat.com>\n \n \t* cp-tree.h (cxx_unsave_expr_now): Delete prototype."}, {"sha": "703d963e3841089855e9cee247b9d4dc801a8ef4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401d6e7bf17405f21501b602d6469c9c2384e75d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401d6e7bf17405f21501b602d6469c9c2384e75d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=401d6e7bf17405f21501b602d6469c9c2384e75d", "patch": "@@ -42,7 +42,6 @@ static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n static cp_lvalue_kind lvalue_p_1 (tree, int);\n-static tree mark_local_for_remap_r (tree *, int *, void *);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n@@ -2125,51 +2124,6 @@ init_tree (void)\n   list_hash_table = htab_create_ggc (31, list_hash, list_hash_eq, NULL);\n }\n \n-/* Called via walk_tree.  If *TP points to a DECL_EXPR for a local\n-   declaration, copies the declaration and enters it in the splay_tree\n-   pointed to by DATA (which is really a `splay_tree *').  */\n-\n-static tree\n-mark_local_for_remap_r (tree* tp,\n-                        int* walk_subtrees ATTRIBUTE_UNUSED ,\n-                        void* data)\n-{\n-  tree t = *tp;\n-  splay_tree st = (splay_tree) data;\n-  tree decl;\n-\n-\n-  if (TREE_CODE (t) == DECL_EXPR\n-      && nonstatic_local_decl_p (DECL_EXPR_DECL (t)))\n-    decl = DECL_EXPR_DECL (t);\n-  else if (TREE_CODE (t) == LABEL_EXPR)\n-    decl = LABEL_EXPR_LABEL (t);\n-  else if (TREE_CODE (t) == TARGET_EXPR\n-\t   && nonstatic_local_decl_p (TREE_OPERAND (t, 0)))\n-    decl = TREE_OPERAND (t, 0);\n-  else if (TREE_CODE (t) == CASE_LABEL_EXPR)\n-    decl = CASE_LABEL (t);\n-  else\n-    decl = NULL_TREE;\n-\n-  if (decl)\n-    {\n-      tree copy;\n-\n-      /* Make a copy.  */\n-      copy = copy_decl_for_inlining (decl,\n-\t\t\t\t     DECL_CONTEXT (decl),\n-\t\t\t\t     DECL_CONTEXT (decl));\n-\n-      /* Remember the copy.  */\n-      splay_tree_insert (st,\n-\t\t\t (splay_tree_key) decl,\n-\t\t\t (splay_tree_value) copy);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Returns the kind of special function that DECL (a FUNCTION_DECL)\n    is.  Note that sfk_none is zero, so this function can be used as a\n    predicate to test whether or not DECL is a special function.  */"}]}