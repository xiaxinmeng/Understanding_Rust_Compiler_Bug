{"sha": "a1e2583920c753978f9512f7a18673f2975682eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlMjU4MzkyMGM3NTM5NzhmOTUxMmY3YTE4NjczZjI5NzU2ODJlYg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-04-15T08:35:53Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-04-15T08:35:53Z"}, "message": "extend.texi (__sync Builtins): Simplify some text.\n\n\t* doc/extend.texi (__sync Builtins): Simplify some text.  Update\n\tdetails about the implementation.  Make clear preference for\n\t__atomic builtins.  Reduce possibility of future change.\n\nFrom-SVN: r222120", "tree": {"sha": "f2203562c4630ddcc2083fc4908c76a7f421f687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2203562c4630ddcc2083fc4908c76a7f421f687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e2583920c753978f9512f7a18673f2975682eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e2583920c753978f9512f7a18673f2975682eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e2583920c753978f9512f7a18673f2975682eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e2583920c753978f9512f7a18673f2975682eb/comments", "author": null, "committer": null, "parents": [{"sha": "eea6e989581e0336875e2f5a76dac5bc3cff50cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea6e989581e0336875e2f5a76dac5bc3cff50cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea6e989581e0336875e2f5a76dac5bc3cff50cb"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "27ddea523969bfd94845099d7519ec4ba5babf09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2583920c753978f9512f7a18673f2975682eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2583920c753978f9512f7a18673f2975682eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1e2583920c753978f9512f7a18673f2975682eb", "patch": "@@ -1,3 +1,9 @@\n+2015-04-14  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* doc/extend.texi (__sync Builtins): Simplify some text.  Update\n+\tdetails about the implementation.  Make clear preference for\n+\t__atomic builtins.  Reduce possibility of future change.\n+\n 2015-04-15  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.opt (mallow-string-insns): New option."}, {"sha": "7470e40916687ca5586c260c0fc489e299cd9322", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2583920c753978f9512f7a18673f2975682eb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2583920c753978f9512f7a18673f2975682eb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a1e2583920c753978f9512f7a18673f2975682eb", "patch": "@@ -8213,15 +8213,19 @@ identifier, or a sequence of member accesses and array references.\n The following built-in functions\n are intended to be compatible with those described\n in the @cite{Intel Itanium Processor-specific Application Binary Interface},\n-section 7.4.  As such, they depart from the normal GCC practice of using\n-the @samp{__builtin_} prefix, and further that they are overloaded such that\n-they work on multiple types.\n+section 7.4.  As such, they depart from normal GCC practice by not using\n+the @samp{__builtin_} prefix and also by being overloaded so that they\n+work on multiple types.\n \n The definition given in the Intel documentation allows only for the use of\n-the types @code{int}, @code{long}, @code{long long} as well as their unsigned\n+the types @code{int}, @code{long}, @code{long long} or their unsigned\n counterparts.  GCC allows any integral scalar or pointer type that is\n 1, 2, 4 or 8 bytes in length.\n \n+These functions are implemented in terms of the @samp{__atomic}\n+builtins (@pxref{__atomic Builtins}).  They should not be used for new\n+code which should use the @samp{__atomic} builtins instead.\n+\n Not all operations are supported by all target processors.  If a particular\n operation cannot be implemented on the target processor, a warning is\n generated and a call to an external function is generated.  The external\n@@ -8243,11 +8247,10 @@ after the operation.\n All of the routines are described in the Intel documentation to take\n ``an optional list of variables protected by the memory barrier''.  It's\n not clear what is meant by that; it could mean that @emph{only} the\n-following variables are protected, or it could mean that these variables\n-should in addition be protected.  At present GCC ignores this list and\n-protects all variables that are globally accessible.  If in the future\n-we make some use of this list, an empty list will continue to mean all\n-globally accessible variables.\n+listed variables are protected, or it could mean a list of additional\n+variables to be protected.  The list is ignored by GCC which treats it as\n+empty.  GCC interprets an empty list as meaning that all globally\n+accessible variables should be protected.\n \n @table @code\n @item @var{type} __sync_fetch_and_add (@var{type} *ptr, @var{type} value, ...)"}]}