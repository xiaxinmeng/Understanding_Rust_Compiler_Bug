{"sha": "c7b5e39561d3a7895496c2fb231450544f4a9306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiNWUzOTU2MWQzYTc4OTU0OTZjMmZiMjMxNDUwNTQ0ZjRhOTMwNg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-02-24T21:43:01Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-02-24T21:43:01Z"}, "message": "Index: gcc/ChangeLog\n2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n\n\t* doc/tm.texi (Run-time Target): Document C_COMMON_OVERRIDE_OPTIONS.\n\t* doc/invoke.texi (C++ Dialect Options): Document \n\t-fno-use-cxa-get-exception-ptr.\n\t* configure.ac: Define DEFAULT_USE_CXA_ATEXIT to 2 not 1.\n\t* configure: Regenerate.\n\t* c.opt (fuse-cxa-get-exception-ptr): New.\n\t* c-opts.c (c_common_handle_option): Handle\n\tOPT_fuse_cxa_get_exception_ptr.\n\t* c-common.c (flag_use_cxa_atexit): Update documentation.\n\t(flag_use_cxa_get_exception_ptr): New.\n\t* c-common.h (flag_use_cxa_get_exception_ptr): New.\n\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Improve\n\tdocumentation.\n\t(C_COMMON_OVERRIDE_OPTIONS): New.\n\nIndex: gcc/testsuite/ChangeLog\n2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.dg/eh/uncaught1.C: Add dg-options for ppc-darwin.\n\t* g++.dg/eh/uncaught2.C: New.\n\t* g++.dg/eh/uncaught3.C: New.\n\nIndex: gcc/cp/ChangeLog\n2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n\n\t* except.c (expand_start_catch_block): Handle\n\tflag_use_cxa_get_exception_ptr.\n\nFrom-SVN: r111427", "tree": {"sha": "501f0f2b9d0c19c624f6a6ae51162e498fd2b1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/501f0f2b9d0c19c624f6a6ae51162e498fd2b1e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b5e39561d3a7895496c2fb231450544f4a9306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b5e39561d3a7895496c2fb231450544f4a9306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b5e39561d3a7895496c2fb231450544f4a9306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b5e39561d3a7895496c2fb231450544f4a9306/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "676cb929fcac50fbe3bd71de734a8f40b5b2ea10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676cb929fcac50fbe3bd71de734a8f40b5b2ea10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676cb929fcac50fbe3bd71de734a8f40b5b2ea10"}], "stats": {"total": 264, "additions": 257, "deletions": 7}, "files": [{"sha": "d54192595a09b74a01b5a70a93d9087a789f062f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1,3 +1,20 @@\n+2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* doc/tm.texi (Run-time Target): Document C_COMMON_OVERRIDE_OPTIONS.\n+\t* doc/invoke.texi (C++ Dialect Options): Document \n+\t-fno-use-cxa-get-exception-ptr.\n+\t* configure.ac: Define DEFAULT_USE_CXA_ATEXIT to 2 not 1.\n+\t* configure: Regenerate.\n+\t* c.opt (fuse-cxa-get-exception-ptr): New.\n+\t* c-opts.c (c_common_handle_option): Handle\n+\tOPT_fuse_cxa_get_exception_ptr.\n+\t* c-common.c (flag_use_cxa_atexit): Update documentation.\n+\t(flag_use_cxa_get_exception_ptr): New.\n+\t* c-common.h (flag_use_cxa_get_exception_ptr): New.\n+\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Improve\n+\tdocumentation.\n+\t(C_COMMON_OVERRIDE_OPTIONS): New.\n+\n 2006-02-24  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/24952"}, {"sha": "4f8ab8e0d4b758dce34de92ed72e83396323739d", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -424,10 +424,16 @@ int flag_weak = 1;\n int flag_working_directory = -1;\n \n /* Nonzero to use __cxa_atexit, rather than atexit, to register\n-   destructors for local statics and global objects.  */\n+   destructors for local statics and global objects.  '2' means it has been\n+   set nonzero as a default, not by a command-line flag.  */\n \n int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n \n+/* Nonzero to use __cxa_get_exception_ptr in C++ exception-handling\n+   code.  '2' means it has not been set explicitly on the command line.  */\n+\n+int flag_use_cxa_get_exception_ptr = 2;\n+\n /* Nonzero means make the default pedwarns warnings instead of errors.\n    The value of this flag is ignored if -pedantic is specified.  */\n "}, {"sha": "ed93f97b3e99741974cdc4dfe313dca10a9d4d85", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -549,6 +549,11 @@ extern int flag_working_directory;\n \n extern int flag_use_cxa_atexit;\n \n+/* Nonzero to use __cxa_get_exception_ptr in the C++ exception-handling\n+   logic.  */\n+\n+extern int flag_use_cxa_get_exception_ptr;\n+\n /* Nonzero means make the default pedwarns warnings instead of errors.\n    The value of this flag is ignored if -pedantic is specified.  */\n "}, {"sha": "c53238b5d6a17e9ae63b87e1699a5ae64910b4d9", "filename": "gcc/c-opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -786,6 +786,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_use_cxa_atexit = value;\n       break;\n       \n+    case OPT_fuse_cxa_get_exception_ptr:\n+      flag_use_cxa_get_exception_ptr = value;\n+      break;\n+      \n     case OPT_fvisibility_inlines_hidden:\n       visibility_options.inlines_hidden = value;\n       break;\n@@ -978,6 +982,12 @@ c_common_post_options (const char **pfilename)\n   register_include_chains (parse_in, sysroot, iprefix, imultilib,\n \t\t\t   std_inc, std_cxx_inc && c_dialect_cxx (), verbose);\n \n+#ifdef C_COMMON_OVERRIDE_OPTIONS\n+  /* Some machines may reject certain combinations of C\n+     language-specific options.  */\n+  C_COMMON_OVERRIDE_OPTIONS;\n+#endif\n+\n   flag_inline_trees = 1;\n \n   /* Use tree inlining.  */"}, {"sha": "1fd12f78284e52e677d6b991cb7d12fbfee7e425", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -713,6 +713,10 @@ fuse-cxa-atexit\n C++ ObjC++\n Use __cxa_atexit to register destructors\n \n+fuse-cxa-get-exception-ptr\n+C++ ObjC++\n+Use __cxa_get_exception_ptr in exception handling\n+\n fvisibility-inlines-hidden\n C++ ObjC++\n Marks all inlined methods as having hidden visibility"}, {"sha": "30a2fff77d7b4ee9ab8ca8b92efee9f7901e0f43", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -59,11 +59,10 @@\n   while (0)\n \n \n-/* The Darwin ABI always includes AltiVec, can't be (validly) turned\n-   off.  */\n-\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n+  /* The Darwin ABI always includes AltiVec, can't be (validly) turned\t\\\n+     off.  */\t\t\t\t\t\t\t\t\\\n   rs6000_altivec_abi = 1;\t\t\t\t\t\t\\\n   TARGET_ALTIVEC_VRSAVE = 1;\t\t\t\t\t\t\\\n   if (DEFAULT_ABI == ABI_DARWIN)\t\t\t\t\t\\\n@@ -87,6 +86,21 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while(0)\n \n+#define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\\n+  /* On powerpc, __cxa_get_exception_ptr is available starting in the\t\\\n+     10.5 libstdc++.dylib.  */\t\t\t\t\t\t\\\n+  if ((! darwin_macosx_version_min\t\t\t\t\t\\\n+       || strverscmp (darwin_macosx_version_min, \"10.5\") < 0)\t\t\\\n+      && flag_use_cxa_get_exception_ptr == 2)\t\t\t\t\\\n+    flag_use_cxa_get_exception_ptr = 0;\t\t\t\t\t\\\n+  /* On powerpc, __cxa_atexit is available starting in the 10.4\t\t\\\n+     libSystem.dylib.  */\t\t\t\t\t\t\\\n+  if ((! darwin_macosx_version_min\t\t\t\t\t\\\n+       || strverscmp (darwin_macosx_version_min, \"10.4\") < 0)\t\t\\\n+      && flag_use_cxa_atexit == 2)\t\t\t\t\t\\\n+    flag_use_cxa_atexit = 0;\t\t\t\t\t\t\\\n+} while (0)\n+\n /* Darwin has 128-bit long double support in libc in 10.4 and later.\n    Default to 128-bit long doubles even on earlier platforms for ABI\n    consistency; arithmetic will work even if libc and libm support is"}, {"sha": "fe6f1bd3b4dd8895d3e7da9ceeaa787455e3d421", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -12346,7 +12346,7 @@ fi\n   if test x$use_cxa_atexit = xyes; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define DEFAULT_USE_CXA_ATEXIT 1\n+#define DEFAULT_USE_CXA_ATEXIT 2\n _ACEOF\n \n   fi"}, {"sha": "447f8270fb6beaf4ad4c04a649a0d25f6f8fa9c7", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1392,7 +1392,7 @@ if test x$enable___cxa_atexit = xyes || \\\n     use_cxa_atexit=yes\n   fi\n   if test x$use_cxa_atexit = xyes; then\n-    AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 1,\n+    AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 2,\n       [Define if you want to use __cxa_atexit, rather than atexit, to\n       register C++ destructors for local statics and global objects.\n       This is essential for fully standards-compliant handling of"}, {"sha": "a1df2bb9dfcc6eaaadc983532f09823f6d3afabb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1,3 +1,8 @@\n+2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* except.c (expand_start_catch_block): Handle\n+\tflag_use_cxa_get_exception_ptr.\n+\n 2006-02-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/26291"}, {"sha": "87e958676fa15b07640ea9cff7c3664f0510b9e2", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -446,7 +446,8 @@ expand_start_catch_block (tree decl)\n   /* If the C++ object needs constructing, we need to do that before\n      calling __cxa_begin_catch, so that std::uncaught_exception gets\n      the right value during the copy constructor.  */\n-  else if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl)))\n+  else if (flag_use_cxa_get_exception_ptr \n+\t   && TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl)))\n     {\n       exp = do_get_exception_ptr ();\n       initialize_handler_parm (decl, exp);"}, {"sha": "a81ab589a2b0e7c772edd6824cc9928d8765c876", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1581,6 +1581,12 @@ This option is required for fully standards-compliant handling of static\n destructors, but will only work if your C library supports\n @code{__cxa_atexit}.\n \n+@item -fno-use-cxa-get-exception-ptr\n+@opindex fno-use-cxa-get-exception-ptr\n+Don't use the @code{__cxa_get_exception_ptr} runtime routine.  This\n+will cause @code{std::uncaught_exception} to be incorrect, but is necessary\n+if the runtime routine is not available.\n+\n @item -fvisibility-inlines-hidden\n @opindex fvisibility-inlines-hidden\n Causes all inlined methods to be marked with"}, {"sha": "cebb71cdee221e9fce8b5f2ef60b4786ed253945", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -778,6 +778,13 @@ Don't use this macro to turn on various extra optimizations for\n @option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n @end defmac\n \n+@defmac C_COMMON_OVERRIDE_OPTIONS\n+This is similar to @code{OVERRIDE_OPTIONS} but is only used in the C\n+language frontends (C, Objective-C, C++, Objective-C++) and so can be\n+used to alter option flag variables which only exist in those\n+frontends.\n+@end defmac\n+\n @defmac OPTIMIZATION_OPTIONS (@var{level}, @var{size})\n Some machines may desire to change what optimizations are performed for\n various optimization levels.   This macro, if defined, is executed once"}, {"sha": "1d4bef360e807d17255c92555f70355938d7ab24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1,3 +1,9 @@\n+2006-02-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.dg/eh/uncaught1.C: Add dg-options for ppc-darwin.\n+\t* g++.dg/eh/uncaught2.C: New.\n+\t* g++.dg/eh/uncaught3.C: New.\n+\n 2006-02-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26423"}, {"sha": "afbf5af4d2214b390ae2ba2f056789d80a8b729a", "filename": "gcc/testsuite/g++.dg/eh/uncaught1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught1.C?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -1,5 +1,6 @@\n // PR libstdc++/10606\n // { dg-do run }\n+// { dg-options \"-fuse-cxa-get-exception-ptr\" { target powerpc*-*-darwin* } }\n \n #include <exception>\n #include <cstdlib>"}, {"sha": "a99b2d7f36e4803bca3fa569afe2c789657fe00a", "filename": "gcc/testsuite/g++.dg/eh/uncaught2.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught2.C?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do compile }\n+// { dg-final { scan-assembler-not \"__cxa_get_exception\" } }\n+// { dg-options \"-fno-use-cxa-get-exception-ptr\" }\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+\n+struct Check {\n+  int obj1, obj2;\n+  bool state;\n+};\n+\n+static Check const data[] = {\n+  { 0, 0, false },\t// construct [0]\n+  { 1, 0, true  },\t// [1] = [0]\n+  { 0, 0, true  },\t// destruct [0]\n+  { 2, 1, true  },\t// [2] = [1]\n+  { 2, 2, true  },      // destruct [2]\n+  { 3, 1, true  },\t// [3] = [1]\n+  { 3, 3, false },\t// destruct [3]\n+  { 1, 1, false },\t// destruct [1]\n+  { 9, 9, false }\t// end-of-data\n+};\n+\n+static int pos = 0;\n+\n+static void test(int obj1, int obj2, bool state)\n+{\n+  if (obj1 != data[pos].obj1) abort ();\n+  if (obj2 != data[pos].obj2) abort ();\n+  if (state != data[pos].state) abort ();\n+  pos++;\n+}\n+\n+\n+struct S {\n+  int id;\n+  S ();\n+  S (const S &);\n+  ~S ();\n+};\n+\n+static int next_id = 0;\n+\n+S::S()\n+  : id (next_id++)\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+S::S(const S &x)\n+  : id (next_id++)\n+{\n+  test (id, x.id, std::uncaught_exception ());\n+}\n+\n+S::~S()\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+extern void foo (S *);\n+\n+int main()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  S s0;\n+\t  throw s0;\t// s1 is the exception object\n+\t}\n+      catch (S s2)\n+\t{\n+\t  throw;\n+\t}\n+    }\n+  catch (S s3)\n+    {\n+    }\n+ \n+  return 0;\n+}"}, {"sha": "4ce4a5337067d7abf98beb1ae5f470590ac44473", "filename": "gcc/testsuite/g++.dg/eh/uncaught3.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b5e39561d3a7895496c2fb231450544f4a9306/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funcaught3.C?ref=c7b5e39561d3a7895496c2fb231450544f4a9306", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do compile { target powerpc*-*-darwin* } }\n+// { dg-final { scan-assembler-not \"__cxa_get_exception\" } }\n+// { dg-options \"-mmacosx-version-min=10.4\" }\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+\n+struct Check {\n+  int obj1, obj2;\n+  bool state;\n+};\n+\n+static Check const data[] = {\n+  { 0, 0, false },\t// construct [0]\n+  { 1, 0, true  },\t// [1] = [0]\n+  { 0, 0, true  },\t// destruct [0]\n+  { 2, 1, true  },\t// [2] = [1]\n+  { 2, 2, true  },      // destruct [2]\n+  { 3, 1, true  },\t// [3] = [1]\n+  { 3, 3, false },\t// destruct [3]\n+  { 1, 1, false },\t// destruct [1]\n+  { 9, 9, false }\t// end-of-data\n+};\n+\n+static int pos = 0;\n+\n+static void test(int obj1, int obj2, bool state)\n+{\n+  if (obj1 != data[pos].obj1) abort ();\n+  if (obj2 != data[pos].obj2) abort ();\n+  if (state != data[pos].state) abort ();\n+  pos++;\n+}\n+\n+\n+struct S {\n+  int id;\n+  S ();\n+  S (const S &);\n+  ~S ();\n+};\n+\n+static int next_id = 0;\n+\n+S::S()\n+  : id (next_id++)\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+S::S(const S &x)\n+  : id (next_id++)\n+{\n+  test (id, x.id, std::uncaught_exception ());\n+}\n+\n+S::~S()\n+{\n+  test (id, id, std::uncaught_exception ());\n+}\n+\n+extern void foo (S *);\n+\n+int main()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  S s0;\n+\t  throw s0;\t// s1 is the exception object\n+\t}\n+      catch (S s2)\n+\t{\n+\t  throw;\n+\t}\n+    }\n+  catch (S s3)\n+    {\n+    }\n+ \n+  return 0;\n+}"}]}