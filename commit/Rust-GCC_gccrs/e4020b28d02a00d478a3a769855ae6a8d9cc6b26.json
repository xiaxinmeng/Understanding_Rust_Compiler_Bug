{"sha": "e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwMjBiMjhkMDJhMDBkNDc4YTNhNzY5ODU1YWU2YThkOWNjNmIyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-13T09:03:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-13T09:03:07Z"}, "message": "Don't assign a cost to vectorizable_assignment\n\nvectorizable_assignment handles true SSA-to-SSA copies (which hopefully\nwe don't see in practice) and no-op conversions that are required\nto maintain correct gimple, such as changes between signed and\nunsigned types.  These cases shouldn't generate any code and so\nshouldn't count against either the scalar or vector costs.\n\nLater patches test this, but it seemed worth splitting out.\n\n2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vect_nop_conversion_p): Declare.\n\t* tree-vect-stmts.c (vect_nop_conversion_p): New function.\n\t(vectorizable_assignment): Don't add a cost for nop conversions.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n\tLikewise.\n\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Likewise.\n\nFrom-SVN: r278122", "tree": {"sha": "8795d85f2e900a5d8c52ef2b19865109b138051a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8795d85f2e900a5d8c52ef2b19865109b138051a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f446c27195400aea98ff9c37ed2651ab54f7c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f446c27195400aea98ff9c37ed2651ab54f7c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f446c27195400aea98ff9c37ed2651ab54f7c03"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "9054178018eabae9142ae1473a5cff098c590c1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "patch": "@@ -1,3 +1,12 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_nop_conversion_p): Declare.\n+\t* tree-vect-stmts.c (vect_nop_conversion_p): New function.\n+\t(vectorizable_assignment): Don't add a cost for nop conversions.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n+\tLikewise.\n+\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Likewise.\n+\n 2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): Take the"}, {"sha": "75ec9e67a5c787b1fc3634254bea2144cc4869ea", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "patch": "@@ -1125,7 +1125,9 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n              else\n                kind = scalar_store;\n             }\n-          else\n+\t  else if (vect_nop_conversion_p (stmt_info))\n+\t    continue;\n+\t  else\n             kind = scalar_stmt;\n \n \t  record_stmt_cost (&LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),"}, {"sha": "a2c70ec5cd6e07ae46a91d59bdc1370dec905c37", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "patch": "@@ -2893,6 +2893,8 @@ vect_bb_slp_scalar_cost (basic_block bb,\n           else\n \t    kind = scalar_store;\n         }\n+      else if (vect_nop_conversion_p (stmt_info))\n+\tcontinue;\n       else\n \tkind = scalar_stmt;\n       record_stmt_cost (cost_vec, 1, kind, stmt_info, 0, vect_body);"}, {"sha": "c8a43ada16f774300e6488694cbd865719cf0ef0", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "patch": "@@ -5281,6 +5281,29 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Return true if we can assume from the scalar form of STMT_INFO that\n+   neither the scalar nor the vector forms will generate code.  STMT_INFO\n+   is known not to involve a data reference.  */\n+\n+bool\n+vect_nop_conversion_p (stmt_vec_info stmt_info)\n+{\n+  gassign *stmt = dyn_cast <gassign *> (stmt_info->stmt);\n+  if (!stmt)\n+    return false;\n+\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree_code code = gimple_assign_rhs_code (stmt);\n+  tree rhs = gimple_assign_rhs1 (stmt);\n+\n+  if (code == SSA_NAME || code == VIEW_CONVERT_EXPR)\n+    return true;\n+\n+  if (CONVERT_EXPR_CODE_P (code))\n+    return tree_nop_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs));\n+\n+  return false;\n+}\n \n /* Function vectorizable_assignment.\n \n@@ -5396,7 +5419,9 @@ vectorizable_assignment (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     {\n       STMT_VINFO_TYPE (stmt_info) = assignment_vec_info_type;\n       DUMP_VECT_SCOPE (\"vectorizable_assignment\");\n-      vect_model_simple_cost (stmt_info, ncopies, dt, ndts, slp_node, cost_vec);\n+      if (!vect_nop_conversion_p (stmt_info))\n+\tvect_model_simple_cost (stmt_info, ncopies, dt, ndts, slp_node,\n+\t\t\t\tcost_vec);\n       return true;\n     }\n "}, {"sha": "e93ccc74c66521467cbffb02f62327feb4cd7c96", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4020b28d02a00d478a3a769855ae6a8d9cc6b26/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=e4020b28d02a00d478a3a769855ae6a8d9cc6b26", "patch": "@@ -1650,6 +1650,7 @@ extern tree vect_get_vec_def_for_stmt_copy (vec_info *, tree);\n extern bool vect_transform_stmt (stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\t slp_tree, slp_instance);\n extern void vect_remove_stores (stmt_vec_info);\n+extern bool vect_nop_conversion_p (stmt_vec_info);\n extern opt_result vect_analyze_stmt (stmt_vec_info, bool *, slp_tree,\n \t\t\t\t     slp_instance, stmt_vector_for_cost *);\n extern void vect_get_load_cost (stmt_vec_info, int, bool,"}]}