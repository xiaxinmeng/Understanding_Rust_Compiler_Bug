{"sha": "698489049d429a0d27fa0552185c104d545a1807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4NDg5MDQ5ZDQyOWEwZDI3ZmEwNTUyMTg1YzEwNGQ1NDVhMTgwNw==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@redhat.com", "date": "2001-01-10T09:38:08Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2001-01-10T09:38:08Z"}, "message": "re PR libgcj/1596 (setScale() missing from java.math.BigDecimal)\n\n\tFix for PR libgcj/1596:\n\t* java/math/BigDecimal.java (divide): Check newScale for validity.\n\tEnsure that BigInteger.pow() is called with a non-negative value.\n\t(setScale (int)): New public method.\n\t(setScale (int,int)): New public method.\n\nFrom-SVN: r38861", "tree": {"sha": "232892def7d8356240f760851dd1f02e6943744d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/232892def7d8356240f760851dd1f02e6943744d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/698489049d429a0d27fa0552185c104d545a1807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698489049d429a0d27fa0552185c104d545a1807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/698489049d429a0d27fa0552185c104d545a1807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698489049d429a0d27fa0552185c104d545a1807/comments", "author": null, "committer": null, "parents": [{"sha": "534808a32ac90641ef010c92af2f588210176595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534808a32ac90641ef010c92af2f588210176595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534808a32ac90641ef010c92af2f588210176595"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "f326bb9d25af33d9864fd7a5bfe04f9f262a986c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/698489049d429a0d27fa0552185c104d545a1807/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/698489049d429a0d27fa0552185c104d545a1807/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=698489049d429a0d27fa0552185c104d545a1807", "patch": "@@ -1,3 +1,11 @@\n+2001-01-10  Warren Levy  <warrenl@redhat.com>\n+\n+\tFix for PR libgcj/1596:\n+\t* java/math/BigDecimal.java (divide): Check newScale for validity.\n+\tEnsure that BigInteger.pow() is called with a non-negative value.\n+\t(setScale (int)): New public method.\n+\t(setScale (int,int)): New public method.\n+\n 2001-01-09  Oskar Liljeblad <osk@hem.passagen.se>\n \n \tFix for PR libgcj/1338:"}, {"sha": "007f3a324076b02b2b706f8f03ca59249afbcca2", "filename": "libjava/java/math/BigDecimal.java", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/698489049d429a0d27fa0552185c104d545a1807/libjava%2Fjava%2Fmath%2FBigDecimal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/698489049d429a0d27fa0552185c104d545a1807/libjava%2Fjava%2Fmath%2FBigDecimal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigDecimal.java?ref=698489049d429a0d27fa0552185c104d545a1807", "patch": "@@ -1,5 +1,5 @@\n /* java.math.BigDecimal -- Arbitrary precision decimals.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -133,16 +133,27 @@ public BigDecimal divide(BigDecimal val, int newScale, int roundingMode)\n       throw \n \tnew IllegalArgumentException(\"illegal rounding mode: \" + roundingMode);\n \n-    if (scale < 0)\n-      throw new ArithmeticException (\"scale is negative: \" + scale);\n+    if (newScale < 0)\n+      throw new ArithmeticException (\"scale is negative: \" + newScale);\n \n     if (intVal.signum () == 0)\t// handle special case of 0.0/0.0\n       return ZERO;\n     \n-    BigInteger dividend = intVal.multiply (BigInteger.valueOf (10).pow \n-\t\t\t\t\t(newScale + 1 - (scale - val.scale)));\n+    // Ensure that pow gets a non-negative value.\n+    int valScale = val.scale;\n+    BigInteger valIntVal = val.intVal;\n+    int power = newScale + 1 - (scale - val.scale);\n+    if (power < 0)\n+      {\n+\t// Effectively increase the scale of val to avoid an\n+\t// IllegalArgumentException for a negative power.\n+        valIntVal = valIntVal.multiply (BigInteger.valueOf (10).pow (-power));\n+\tpower = 0;\n+      }\n+\n+    BigInteger dividend = intVal.multiply (BigInteger.valueOf (10).pow (power));\n     \n-    BigInteger parts[] = dividend.divideAndRemainder (val.intVal);\n+    BigInteger parts[] = dividend.divideAndRemainder (valIntVal);\n //      System.out.println(\"int: \" + parts[0]);\n //      System.out.println(\"rem: \" + parts[1]);\n \n@@ -347,4 +358,15 @@ public double doubleValue()\n   {\n     return Double.valueOf(toString()).doubleValue();\n   }\n+\n+  public BigDecimal setScale (int scale) throws ArithmeticException\n+  {\n+    return setScale (scale, ROUND_UNNECESSARY);\n+  }\n+\n+  public BigDecimal setScale (int scale, int roundingMode)\n+    throws ArithmeticException, IllegalArgumentException\n+  {\n+    return divide (ONE, scale, roundingMode);\n+  }\n }"}]}