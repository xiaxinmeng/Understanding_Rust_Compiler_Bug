{"sha": "8e745a17093aa4b5965fcf327c9d76f27e6c852f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3NDVhMTcwOTNhYTRiNTk2NWZjZjMyN2M5ZDc2ZjI3ZTZjODUyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-14T19:00:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-14T19:00:32Z"}, "message": "c-cppbuiltin.c (c_cpp_builtins): Define __cpp_structured_bindings.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_structured_bindings.\n\n\t* g++.dg/cpp1z/feat-cxx1z.C: Test __cpp_structured_bindings macro.\n\nFrom-SVN: r242395", "tree": {"sha": "1702fcc51e3bd50c33635a1cc5fdef029234f7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1702fcc51e3bd50c33635a1cc5fdef029234f7d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e745a17093aa4b5965fcf327c9d76f27e6c852f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e745a17093aa4b5965fcf327c9d76f27e6c852f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e745a17093aa4b5965fcf327c9d76f27e6c852f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e745a17093aa4b5965fcf327c9d76f27e6c852f/comments", "author": null, "committer": null, "parents": [{"sha": "bf166718a9252bc7f867cbbe4e7772bf731acb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf166718a9252bc7f867cbbe4e7772bf731acb0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf166718a9252bc7f867cbbe4e7772bf731acb0e"}], "stats": {"total": 219, "additions": 117, "deletions": 102}, "files": [{"sha": "fd132b5acef60dac84d45c032298417618993b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -1,6 +1,6 @@\n 2016-11-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n-        * tree-ssa-math-opts.c (find_bswap_or_nop): Zero out bytes in cmpxchg\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop): Zero out bytes in cmpxchg\n \tand cmpnop in two steps: first the ones not accessed in original gimple\n \texpression in a endian independent way and then the ones not accessed\n \tin the final result in an endian-specific way.\n@@ -17,38 +17,38 @@\n \tnew line.\n \n 2016-11-14  Prasad Ghangal  <prasad.ghangal@gmail.com>\n-\tRichard Biener  <rguenther@suse.de>\n+\t    Richard Biener  <rguenther@suse.de>\n     \n \t* doc/invoke.texi (fgimple): Document.\n-    \t* dumpfile.h (TDF_GIMPLE): Add.\n-    \t* dumpfile.c (dump_options): Add gimple.\n-    \t* gimple-pretty-print.c (dump_gimple_switch): Adjust dump\n+\t* dumpfile.h (TDF_GIMPLE): Add.\n+\t* dumpfile.c (dump_options): Add gimple.\n+\t* gimple-pretty-print.c (dump_gimple_switch): Adjust dump\n \tfor TDF_GIMPLE.\n \t(dump_gimple_label): Likewise.\n \t(dump_gimple_phi): Likewise.\n \t(dump_gimple_bb_header): Likewise.\n \t(dump_phi_nodes): Likewise.\n \t(pp_cfg_jump): Likewise.  Pass in dump flags.\n \t(dump_implicit_edges): Adjust.\n-    \t* passes.c (pass_init_dump_file): Do not dump function header\n-    \tfor TDF_GIMPLE.\n-    \t* tree-cfg.c (dump_function_to_file): Dump function return type\n+\t* passes.c (pass_init_dump_file): Do not dump function header\n+\tfor TDF_GIMPLE.\n+\t* tree-cfg.c (dump_function_to_file): Dump function return type\n \tand __GIMPLE keyword for TDF_GIMPLE.  Change guard for dumping\n \tGIMPLE stmts.\n-    \t* tree-pretty-print.c (dump_decl_name): Adjust dump for TDF_GIMPLE.\n-    \t(dump_generic_node): Likewise.\n+\t* tree-pretty-print.c (dump_decl_name): Adjust dump for TDF_GIMPLE.\n+\t(dump_generic_node): Likewise.\n \t* function.h (struct function): Add pass_startwith member.\n \t* passes.c (execute_one_pass): Implement startwith.\n-    \t* tree-ssanames.c (make_ssa_name_fn): New argument, check for version\n-    \tand assign proper version for parsed ssa names.\n-    \t* tree-ssanames.h (make_ssa_name_fn): Add new argument to the function.\n-    \t* internal-fn.c (expand_PHI): New function.\n-    \t* internal-fn.h (expand_PHI): Declared here.\n-    \t* internal-fn.def: New defination for PHI.\n-    \t* tree-cfg.c (lower_phi_internal_fn): New function.\n+\t* tree-ssanames.c (make_ssa_name_fn): New argument, check for version\n+\tand assign proper version for parsed ssa names.\n+\t* tree-ssanames.h (make_ssa_name_fn): Add new argument to the function.\n+\t* internal-fn.c (expand_PHI): New function.\n+\t* internal-fn.h (expand_PHI): Declared here.\n+\t* internal-fn.def: New defination for PHI.\n+\t* tree-cfg.c (lower_phi_internal_fn): New function.\n \t(build_gimple_cfg): Call it.\n-    \t(verify_gimple_call): Condition for passing label as arg in internal\n-    \tfunction PHI.\n+\t(verify_gimple_call): Condition for passing label as arg in internal\n+\tfunction PHI.\n \t* tree-into-ssa.c (rewrite_add_phi_arguments): Handle already\n \tpresent PHIs with arguments.\n "}, {"sha": "cb1b35c86e5f6f2cb147e003eba3a6d397abb83b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -1,9 +1,13 @@\n+2016-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_structured_bindings.\n+\n 2016-11-14  Prasad Ghangal  <prasad.ghangal@gmail.com>\n-\tRichard Biener  <rguenther@suse.de>\n-    \n-    \t* c-common.h (c_common_resword): Add RID_GIMPLE, RID_PHI types.\n-    \t* c-common.h (enum rid): Add RID_GIMPLE, RID_PHI.\n-    \t* c.opt (fgimple): New option.\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* c-common.h (c_common_resword): Add RID_GIMPLE, RID_PHI types.\n+\t* c-common.h (enum rid): Add RID_GIMPLE, RID_PHI.\n+\t* c.opt (fgimple): New option.\n \n 2016-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -590,7 +594,7 @@\n \tUse a copy when emitting warnings, setting the caret index from TYPE.\n \n 2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n-            Arnaud Charlet  <charlet@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n \n \t* c-ada-spec.c (dump_number): New function.\n \t(handle_escape_character): Likewise.\n@@ -2511,7 +2515,7 @@\n \tbefore trying to figure out whether we have a flexible array member.\n \n 2015-03-06  Eric Botcazou  <ebotcazou@adacore.com>\n-            Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* c-ada-spec.c (dump_ada_double_name): Fix pasto.\n \n@@ -4033,15 +4037,15 @@\n \tthat lower floating point number precision or about the other\n \tkinds of conversions.\n \t* c-common.h (enum conversion_safety): New enumeration.\n- \t(unsafe_conversion_p): switching return type to\n- \tconversion_safety enumeration.\n+\t(unsafe_conversion_p): switching return type to\n+\tconversion_safety enumeration.\n \t* c.opt: Adding new warning -Wfloat-conversion and\n \tenabling it with -Wconversion.\n \n 2013-11-19  Basile Starynkevitch  <basile@starynkevitch.net>\n \n-        * c-opts.c: Include plugin.h.\n-        (cb_file_change): Invoke plugin event PLUGIN_INCLUDE_FILE.\n+\t* c-opts.c: Include plugin.h.\n+\t(cb_file_change): Invoke plugin event PLUGIN_INCLUDE_FILE.\n \n 2013-11-19  Marek Polacek  <polacek@redhat.com>\n \n@@ -4261,7 +4265,7 @@\n \n 2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n-        Implement C++14 digit separators.\n+\tImplement C++14 digit separators.\n \t* c-lex.c (interpret_float): Remove digit separators from scratch string\n \tbefore building real literal.\n \n@@ -4829,7 +4833,7 @@\n \t__GXX_EXPERIMENTAL_CXX1Y__.\n \n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n-            Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* c.opt ([Wpointer-arith]): Enabled by -Wpedantic, as documented.\n \t* c-common.c (pointer_int_sum): Change -Wpointer-arith pedwarns\n@@ -4970,7 +4974,7 @@\n \n \tPR 55139\n \t* c-common.c (get_atomic_generic_size): Mask with\n-        MEMMODEL_MASK\n+\tMEMMODEL_MASK\n \n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n@@ -4984,16 +4988,16 @@\n \t* c-opts.c (c_common_handle_option): Do not handle Wformat here.\n \t* c-format.c (set_Wformat): Delete.\n \t(decode_format_attr): Replace OPT_Wformat with OPT_Wformat_.\n-        (maybe_read_dollar_number):  Likewise.\n-        (avoid_dollar_number):  Likewise.\n-        (finish_dollar_format_checking):  Likewise.\n-        (check_format_info):  Likewise.\n-        (check_format_info_main):  Likewise.\n-        (check_format_types):  Likewise.\n-        (format_type_warning):  Likewise.\n-        * c-common.c (int):  Likewise.\n-        (check_function_sentinel):  Likewise.\n-        * c-common.h (warn_format,set_Wformat): Do not declare here.\n+\t(maybe_read_dollar_number):  Likewise.\n+\t(avoid_dollar_number):  Likewise.\n+\t(finish_dollar_format_checking):  Likewise.\n+\t(check_format_info):  Likewise.\n+\t(check_format_info_main):  Likewise.\n+\t(check_format_types):  Likewise.\n+\t(format_type_warning):  Likewise.\n+\t* c-common.c (int):  Likewise.\n+\t(check_function_sentinel):  Likewise.\n+\t* c-common.h (warn_format,set_Wformat): Do not declare here.\n \n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "5c88e91e9e34f578831afae312bc76548d5ecb81", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -943,6 +943,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_deduction_guides=201606\");\n \t  cpp_define (pfile, \"__cpp_noexcept_function_type=201510\");\n \t  cpp_define (pfile, \"__cpp_template_auto=201606\");\n+\t  cpp_define (pfile, \"__cpp_structured_bindings=201606\");\n \t}\n       if (flag_concepts)\n \tcpp_define (pfile, \"__cpp_concepts=201507\");"}, {"sha": "1cb30e719bff6a392c767503bcf385ce889e1118", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -1,41 +1,41 @@\n 2016-11-14  Prasad Ghangal  <prasad.ghangal@gmail.com>\n-\tRichard Biener  <rguenther@suse.de>\n+\t    Richard Biener  <rguenther@suse.de>\n     \n-    \t* Make-lang.in (C_AND_OBJC_OBJS): Add gimple-parser.o.\n-    \t* config-lang.in (gtfiles): Add c/c-parser.h.\n-    \t* c-tree.h (enum c_declspec_word): Add cdw_gimple.\n-    \t(struct c_declspecs): Add gimple_pass member and gimple_p flag.\n-    \t* c-parser.c (enum c_id_kind, struct c_token,\n-    \tc_parser_next_token_is, c_parser_next_token_is_not,\n-    \tc_parser_next_token_is_keyword,\n-    \tenum c_lookahead_kind, enum c_dtr_syn, enum c_parser_prec):\n-    \tSplit out to ...\n-    \t* c-parser.h: ... new header.\n-    \t* c-parser.c: Include c-parser.h and gimple-parser.h.\n+\t* Make-lang.in (C_AND_OBJC_OBJS): Add gimple-parser.o.\n+\t* config-lang.in (gtfiles): Add c/c-parser.h.\n+\t* c-tree.h (enum c_declspec_word): Add cdw_gimple.\n+\t(struct c_declspecs): Add gimple_pass member and gimple_p flag.\n+\t* c-parser.c (enum c_id_kind, struct c_token,\n+\tc_parser_next_token_is, c_parser_next_token_is_not,\n+\tc_parser_next_token_is_keyword,\n+\tenum c_lookahead_kind, enum c_dtr_syn, enum c_parser_prec):\n+\tSplit out to ...\n+\t* c-parser.h: ... new header.\n+\t* c-parser.c: Include c-parser.h and gimple-parser.h.\n \t(c_parser_peek_token, c_parser_peek_2nd_token,\n-    \tc_token_starts_typename, c_parser_next_token_starts_declspecs,\n-    \tc_parser_next_tokens_start_declaration, c_parser_consume_token,\n-    \tc_parser_error, c_parser_require, c_parser_skip_until_found,\n-    \tc_parser_declspecs, c_parser_declarator, c_parser_peek_nth_token,\n-    \tc_parser_type_name): Export.\n-    \t(c_parser_tokens_buf): New function.\n-    \t(c_parser_error): Likewise.\n-    \t(c_parser_set_error): Likewise.\n-    \t(c_parser_declspecs): Handle RID_GIMPLE.\n+\tc_token_starts_typename, c_parser_next_token_starts_declspecs,\n+\tc_parser_next_tokens_start_declaration, c_parser_consume_token,\n+\tc_parser_error, c_parser_require, c_parser_skip_until_found,\n+\tc_parser_declspecs, c_parser_declarator, c_parser_peek_nth_token,\n+\tc_parser_type_name): Export.\n+\t(c_parser_tokens_buf): New function.\n+\t(c_parser_error): Likewise.\n+\t(c_parser_set_error): Likewise.\n+\t(c_parser_declspecs): Handle RID_GIMPLE.\n \t(c_parser_declaration_or_fndef): Parse __GIMPLE marked body\n \tvia c_parser_parse_gimple_body.\n-    \t* c-parser.h (c_parser_peek_token, c_parser_peek_2nd_token,\n-    \tc_token_starts_typename, c_parser_next_token_starts_declspecs,\n-    \tc_parser_next_tokens_start_declaration, c_parser_consume_token,\n-    \tc_parser_error, c_parser_require, c_parser_skip_until_found,\n-    \tc_parser_declspecs, c_parser_declarator, c_parser_peek_nth_token,\n-    \tc_parser_type_name): Declare.\n+\t* c-parser.h (c_parser_peek_token, c_parser_peek_2nd_token,\n+\tc_token_starts_typename, c_parser_next_token_starts_declspecs,\n+\tc_parser_next_tokens_start_declaration, c_parser_consume_token,\n+\tc_parser_error, c_parser_require, c_parser_skip_until_found,\n+\tc_parser_declspecs, c_parser_declarator, c_parser_peek_nth_token,\n+\tc_parser_type_name): Declare.\n \t(struct c_parser): Declare forward.\n \t(c_parser_tokens_buf): Declare.\n-        (c_parser_error): Likewise.\n-        (c_parser_set_error): Likewise.\n-    \t* gimple-parser.c: New file.\n-    \t* gimple-parser.h: Likewise.\n+\t(c_parser_error): Likewise.\n+\t(c_parser_set_error): Likewise.\n+\t* gimple-parser.c: New file.\n+\t* gimple-parser.h: Likewise.\n \n 2016-09-11  Le-Chun Wu  <lcwu@google.com>\n \t    Mark Wielaard  <mjw@redhat.com>\n@@ -2159,13 +2159,13 @@\n 2014-12-20  Martin Uecker  <uecker@eecs.berkeley.edu>\n \n \t* c-typeck.c: New behavious for pointers to arrays with qualifiers\n-        (common-pointer-type): For pointers to arrays take qualifiers from\n+\t(common-pointer-type): For pointers to arrays take qualifiers from\n \telement type.\n-        (build_conditional_expr): Add warnings for lost qualifiers.\n+\t(build_conditional_expr): Add warnings for lost qualifiers.\n \t(comp-target-types): Allow pointers to arrays with different qualifiers.\n-        (convert-for-assignment): Adapt warnings for discarded qualifiers. Add\n+\t(convert-for-assignment): Adapt warnings for discarded qualifiers. Add\n \tWARNING_FOR_QUALIFIERS macro and rename WARN_FOR_QUALIFIERS\n-        to PEDWARN_FOR_QUALIFIERS.\n+\tto PEDWARN_FOR_QUALIFIERS.\n \n 2014-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -2338,9 +2338,9 @@\n \n 2014-10-13  Anthony Brandon  <anthony.brandon@gmail.com>\n \n-        * c-parser.c (c_parser_all_labels): New function to replace\n+\t* c-parser.c (c_parser_all_labels): New function to replace\n \tthe duplicate code.\n-        (c_parser_statement): Call the new function.\n+\t(c_parser_statement): Call the new function.\n \n 2014-10-09  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "1a92ffa0e4ba13b5719a5859874ba7758f40f347", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -3006,8 +3006,8 @@\n 2016-03-21  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/70273\n-        * decl.c (notice_forced_label_r): New.\n-        (cp_finish_decl): Use it.\n+\t* decl.c (notice_forced_label_r): New.\n+\t(cp_finish_decl): Use it.\n \n 2016-03-21  Jason Merrill  <jason@redhat.com>\n "}, {"sha": "1c3e66cdc8e9d0782ddb45b5e9a9b55e1752d75b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -1,29 +1,33 @@\n+2016-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/feat-cxx1z.C: Test __cpp_structured_bindings macro.\n+\n 2016-11-14  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78300\n \t* gfortran.dg/class_result_3.f90: New test.\n \n 2016-11-14  Prasad Ghangal  <prasad.ghangal@gmail.com>\n-\tRichard Biener  <rguenther@suse.de>\n-\n-    \t* gcc.dg/gimplefe-1.c: New testcase.\n-    \t* gcc.dg/gimplefe-2.c: Likewise.\n-    \t* gcc.dg/gimplefe-3.c: Likewise.\n-    \t* gcc.dg/gimplefe-4.c: Likewise.\n-    \t* gcc.dg/gimplefe-5.c: Likewise.\n-    \t* gcc.dg/gimplefe-6.c: Likewise.\n-    \t* gcc.dg/gimplefe-7.c: Likewise.\n-    \t* gcc.dg/gimplefe-8.c: Likewise.\n-    \t* gcc.dg/gimplefe-9.c: Likewise.\n-    \t* gcc.dg/gimplefe-10.c: Likewise.\n-    \t* gcc.dg/gimplefe-11.c: Likewise.\n-    \t* gcc.dg/gimplefe-12.c: Likewise.\n-    \t* gcc.dg/gimplefe-13.c: Likewise.\n-    \t* gcc.dg/gimplefe-14.c: Likewise.\n-    \t* gcc.dg/gimplefe-15.c: Likewise.\n-    \t* gcc.dg/gimplefe-16.c: Likewise.\n-    \t* gcc.dg/gimplefe-17.c: Likewise.\n-    \t* gcc.dg/gimplefe-18.c: Likewise.\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-1.c: New testcase.\n+\t* gcc.dg/gimplefe-2.c: Likewise.\n+\t* gcc.dg/gimplefe-3.c: Likewise.\n+\t* gcc.dg/gimplefe-4.c: Likewise.\n+\t* gcc.dg/gimplefe-5.c: Likewise.\n+\t* gcc.dg/gimplefe-6.c: Likewise.\n+\t* gcc.dg/gimplefe-7.c: Likewise.\n+\t* gcc.dg/gimplefe-8.c: Likewise.\n+\t* gcc.dg/gimplefe-9.c: Likewise.\n+\t* gcc.dg/gimplefe-10.c: Likewise.\n+\t* gcc.dg/gimplefe-11.c: Likewise.\n+\t* gcc.dg/gimplefe-12.c: Likewise.\n+\t* gcc.dg/gimplefe-13.c: Likewise.\n+\t* gcc.dg/gimplefe-14.c: Likewise.\n+\t* gcc.dg/gimplefe-15.c: Likewise.\n+\t* gcc.dg/gimplefe-16.c: Likewise.\n+\t* gcc.dg/gimplefe-17.c: Likewise.\n+\t* gcc.dg/gimplefe-18.c: Likewise.\n \n 2016-11-14  Martin Liska  <mliska@suse.cz>\n "}, {"sha": "086fd25d8932f80984cebdb4064466cf254281f0", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e745a17093aa4b5965fcf327c9d76f27e6c852f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=8e745a17093aa4b5965fcf327c9d76f27e6c852f", "patch": "@@ -392,6 +392,12 @@\n #  error \"__cpp_noexcept_function_type != 201510\"\n #endif\n \n+#ifndef __cpp_structured_bindings\n+#  error \"__cpp_structured_bindings\"\n+#elif __cpp_structured_bindings != 201606\n+#  error \"__cpp_structured_bindings != 201606\"\n+#endif\n+\n #ifdef __has_cpp_attribute\n \n #  if ! __has_cpp_attribute(maybe_unused)"}]}