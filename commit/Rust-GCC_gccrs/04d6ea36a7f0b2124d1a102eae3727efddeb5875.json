{"sha": "04d6ea36a7f0b2124d1a102eae3727efddeb5875", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkNmVhMzZhN2YwYjIxMjRkMWExMDJlYWUzNzI3ZWZkZGViNTg3NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:17:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:17:45Z"}, "message": "[53/77] Pass a mode to const_scalar_mask_from_tree\n\nThe caller of const_scalar_mask_from_tree has proven that\nthe mode is a MODE_INT, so this patch passes it down as a\nscalar_int_mode.  It also expands the comment a little.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (const_scalar_mask_from_tree): Add a mode argument.\n\tExpand commentary.\n\t(expand_expr_real_1): Update call accordingly.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251505", "tree": {"sha": "446be370e6d10f03b5bc3943b0280e093b8eb6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446be370e6d10f03b5bc3943b0280e093b8eb6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d6ea36a7f0b2124d1a102eae3727efddeb5875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d6ea36a7f0b2124d1a102eae3727efddeb5875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d6ea36a7f0b2124d1a102eae3727efddeb5875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d6ea36a7f0b2124d1a102eae3727efddeb5875/comments", "author": null, "committer": null, "parents": [{"sha": "1a52709222c9c5fd3b9446d3ef1db6b87d020e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a52709222c9c5fd3b9446d3ef1db6b87d020e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a52709222c9c5fd3b9446d3ef1db6b87d020e13"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "db9507bf6c4adebe92255c04dff96cfd9b319efd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ea36a7f0b2124d1a102eae3727efddeb5875/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ea36a7f0b2124d1a102eae3727efddeb5875/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04d6ea36a7f0b2124d1a102eae3727efddeb5875", "patch": "@@ -1,3 +1,11 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (const_scalar_mask_from_tree): Add a mode argument.\n+\tExpand commentary.\n+\t(expand_expr_real_1): Update call accordingly.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7759ce78d92bbbbe2c62cae862f7dd46a4d9d663", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d6ea36a7f0b2124d1a102eae3727efddeb5875/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d6ea36a7f0b2124d1a102eae3727efddeb5875/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=04d6ea36a7f0b2124d1a102eae3727efddeb5875", "patch": "@@ -99,7 +99,7 @@ static void emit_single_push_insn (machine_mode, rtx, tree);\n static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx,\n \t\t\t  profile_probability);\n static rtx const_vector_from_tree (tree);\n-static rtx const_scalar_mask_from_tree (tree);\n+static rtx const_scalar_mask_from_tree (scalar_int_mode, tree);\n static tree tree_expr_size (const_tree);\n static HOST_WIDE_INT int_expr_size (tree);\n \n@@ -9969,7 +9969,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tif (is_int_mode (mode, &int_mode))\n \t  {\n \t    if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp)))\n-\t      return const_scalar_mask_from_tree (exp);\n+\t      return const_scalar_mask_from_tree (int_mode, exp);\n \t    else\n \t      {\n \t\ttree type_for_mode\n@@ -11724,12 +11724,12 @@ const_vector_mask_from_tree (tree exp)\n   return gen_rtx_CONST_VECTOR (mode, v);\n }\n \n-/* Return a CONST_INT rtx representing vector mask for\n-   a VECTOR_CST of booleans.  */\n+/* EXP is a VECTOR_CST in which each element is either all-zeros or all-ones.\n+   Return a constant scalar rtx of mode MODE in which bit X is set if element\n+   X of EXP is nonzero.  */\n static rtx\n-const_scalar_mask_from_tree (tree exp)\n+const_scalar_mask_from_tree (scalar_int_mode mode, tree exp)\n {\n-  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n   wide_int res = wi::zero (GET_MODE_PRECISION (mode));\n   tree elt;\n   unsigned i;"}]}