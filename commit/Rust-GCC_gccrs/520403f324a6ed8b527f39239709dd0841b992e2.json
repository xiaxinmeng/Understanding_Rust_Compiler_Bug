{"sha": "520403f324a6ed8b527f39239709dd0841b992e2", "node_id": "C_kwDOANBUbNoAKDUyMDQwM2YzMjRhNmVkOGI1MjdmMzkyMzk3MDlkZDA4NDFiOTkyZTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-01T09:26:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-01T09:26:46Z"}, "message": "cfgexpand: Handle WIDEN_{PLUS,MINUS}_EXPR and VEC_WIDEN_{PLUS,MINUS}_{HI,LO}_EXPR in expand_debug_expr [PR108967]\n\nWhen these tree codes were introduced, expand_debug_expr hasn't been\nupdated to handle them.  For the VEC_*_EXPR we currently mostly punt, the\nnon-vector ones can be handled easily.  In release compilers this doesn't\nICE, but with checking we ICE so that we make sure to handle all the needed\ntree codes there.\n\n2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/108967\n\t* cfgexpand.cc (expand_debug_expr): Handle WIDEN_{PLUS,MINUS}_EXPR\n\tand VEC_WIDEN_{PLUS,MINUS}_{HI,LO}_EXPR.\n\n\t* g++.dg/debug/pr108967.C: New test.", "tree": {"sha": "5f701a6658cb96061cff804e83307809cc2d1a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f701a6658cb96061cff804e83307809cc2d1a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/520403f324a6ed8b527f39239709dd0841b992e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520403f324a6ed8b527f39239709dd0841b992e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520403f324a6ed8b527f39239709dd0841b992e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520403f324a6ed8b527f39239709dd0841b992e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b222e725f53231a0bd9799ca93892a79d592a5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b222e725f53231a0bd9799ca93892a79d592a5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b222e725f53231a0bd9799ca93892a79d592a5f3"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "1a1b26b1c6c23ce273bcd08dc9a973f777174007", "filename": "gcc/cfgexpand.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520403f324a6ed8b527f39239709dd0841b992e2/gcc%2Fcfgexpand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520403f324a6ed8b527f39239709dd0841b992e2/gcc%2Fcfgexpand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.cc?ref=520403f324a6ed8b527f39239709dd0841b992e2", "patch": "@@ -5365,6 +5365,10 @@ expand_debug_expr (tree exp)\n     case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n+    case VEC_WIDEN_PLUS_HI_EXPR:\n+    case VEC_WIDEN_PLUS_LO_EXPR:\n+    case VEC_WIDEN_MINUS_HI_EXPR:\n+    case VEC_WIDEN_MINUS_LO_EXPR:\n     case VEC_PERM_EXPR:\n     case VEC_DUPLICATE_EXPR:\n     case VEC_SERIES_EXPR:\n@@ -5401,6 +5405,8 @@ expand_debug_expr (tree exp)\n     case WIDEN_MULT_EXPR:\n     case WIDEN_MULT_PLUS_EXPR:\n     case WIDEN_MULT_MINUS_EXPR:\n+    case WIDEN_PLUS_EXPR:\n+    case WIDEN_MINUS_EXPR:\n       if (SCALAR_INT_MODE_P (GET_MODE (op0))\n \t  && SCALAR_INT_MODE_P (mode))\n \t{\n@@ -5413,6 +5419,10 @@ expand_debug_expr (tree exp)\n \t    op1 = simplify_gen_unary (ZERO_EXTEND, mode, op1, inner_mode);\n \t  else\n \t    op1 = simplify_gen_unary (SIGN_EXTEND, mode, op1, inner_mode);\n+\t  if (TREE_CODE (exp) == WIDEN_PLUS_EXPR)\n+\t    return simplify_gen_binary (PLUS, mode, op0, op1);\n+\t  else if (TREE_CODE (exp) == WIDEN_MINUS_EXPR)\n+\t    return simplify_gen_binary (MINUS, mode, op0, op1);\n \t  op0 = simplify_gen_binary (MULT, mode, op0, op1);\n \t  if (TREE_CODE (exp) == WIDEN_MULT_EXPR)\n \t    return op0;"}, {"sha": "b50dadc592560c184f99d22eed7070e2afb00ebe", "filename": "gcc/testsuite/g++.dg/debug/pr108967.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520403f324a6ed8b527f39239709dd0841b992e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr108967.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520403f324a6ed8b527f39239709dd0841b992e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr108967.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr108967.C?ref=520403f324a6ed8b527f39239709dd0841b992e2", "patch": "@@ -0,0 +1,41 @@\n+// PR debug/108967\n+// { dg-do compile }\n+\n+struct F { unsigned short r[8]; };\n+extern void foo (F);\n+\n+static inline F\n+bar (F a, F b)\n+{\n+  for (int i = 0; i < 8; ++i)\n+    a.r[i] = a.r[i] + b.r[i] < (unsigned short) -1 ? a.r[i] + b.r[i] : (unsigned short) -1;\n+  return a;\n+}\n+\n+static inline void\n+baz (F v)\n+{\n+  foo (v);\n+}\n+\n+void\n+qux (F a, F b)\n+{\n+  F c = bar (a, b);\n+  baz (c);\n+}\n+\n+static inline F\n+corge (F a, F b)\n+{\n+  for (int i = 0; i < 8; ++i)\n+    a.r[i] = a.r[i] - b.r[i] > 0 ? a.r[i] - b.r[i] : 0;\n+  return a;\n+}\n+\n+void\n+garply (F a, F b)\n+{\n+  F c = corge (a, b);\n+  baz (c);\n+}"}]}