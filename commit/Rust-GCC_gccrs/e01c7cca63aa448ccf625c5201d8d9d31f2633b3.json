{"sha": "e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxYzdjY2E2M2FhNDQ4Y2NmNjI1YzUyMDFkOGQ5ZDMxZjI2MzNiMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-05-17T22:20:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-05-17T22:20:58Z"}, "message": "lto-symtab.c (lto_symtab_merge_cgraph_nodes): Resolve cross module weakrefs.\n\n\t* lto-symtab.c (lto_symtab_merge_cgraph_nodes): Resolve cross module\n\tweakrefs.\n\t* cgraph.c (dump_cgraph_node): Do not ice on unresolved alias.\n\t* cgraphunit.c (handle_alias_pairs): Store target of unresolved weakrefs.\n\t(output_weakrefs): Update.\n\nFrom-SVN: r199041", "tree": {"sha": "53d9b1d7619f8f399786efc4b2699b0c661f580d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53d9b1d7619f8f399786efc4b2699b0c661f580d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/comments", "author": null, "committer": null, "parents": [{"sha": "8ee05051146a7a571a2a65b3205854def9a757ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee05051146a7a571a2a65b3205854def9a757ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee05051146a7a571a2a65b3205854def9a757ba"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "5cc09ae4dddcbfe73a81d9f95175df3adb63d5ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "patch": "@@ -1,3 +1,11 @@\n+2013-05-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-symtab.c (lto_symtab_merge_cgraph_nodes): Resolve cross module\n+\tweakrefs.\n+\t* cgraph.c (dump_cgraph_node): Do not ice on unresolved alias.\n+\t* cgraphunit.c (handle_alias_pairs): Store target of unresolved weakrefs.\n+\t(output_weakrefs): Update.\n+\n 2013-05-17  Po-Chun Chang  <pchang9@cs.wisc.edu>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "899f65cb979cd5be741e76c1ac9e1958775669d9", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "patch": "@@ -1558,7 +1558,7 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n \t       (int)node->thunk.virtual_value,\n \t       (int)node->thunk.virtual_offset_p);\n     }\n-  if (node->alias && node->thunk.alias)\n+  if (node->alias && node->thunk.alias && DECL_P (node->thunk.alias))\n     {\n       fprintf (f, \"  Alias of %s\",\n \t       lang_hooks.decl_printable_name (node->thunk.alias, 2));"}, {"sha": "6ebf8d4aa062793ad5dbf072b91f42493b07951a", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "patch": "@@ -1069,9 +1069,17 @@ handle_alias_pairs (void)\n       if (!target_node && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)) != NULL)\n \t{\n \t  if (TREE_CODE (p->decl) == FUNCTION_DECL)\n-\t    cgraph_get_create_node (p->decl)->alias = true;\n+\t    {\n+\t      struct cgraph_node *anode = cgraph_get_create_node (p->decl);\n+\t      anode->alias = true;\n+\t      anode->thunk.alias = p->target;\n+\t    }\n \t  else\n-\t    varpool_get_node (p->decl)->alias = true;\n+\t    {\n+\t      struct varpool_node *anode = varpool_get_node (p->decl);\n+\t      anode->alias = true;\n+\t      anode->alias_of = p->target;\n+\t    }\n \t  DECL_EXTERNAL (p->decl) = 1;\n \t  alias_pairs->unordered_remove (i);\n \t  continue;\n@@ -1939,14 +1947,14 @@ output_weakrefs (void)\n         && !TREE_ASM_WRITTEN (node->symbol.decl)\n \t&& lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n       do_assemble_alias (node->symbol.decl,\n-\t\t         node->thunk.alias ? DECL_ASSEMBLER_NAME (node->thunk.alias)\n+\t\t         node->thunk.alias && DECL_P (node->thunk.alias) ? DECL_ASSEMBLER_NAME (node->thunk.alias)\n \t\t         : get_alias_symbol (node->symbol.decl));\n   FOR_EACH_VARIABLE (vnode)\n     if (vnode->alias && DECL_EXTERNAL (vnode->symbol.decl)\n         && !TREE_ASM_WRITTEN (vnode->symbol.decl)\n \t&& lookup_attribute (\"weakref\", DECL_ATTRIBUTES (vnode->symbol.decl)))\n       do_assemble_alias (vnode->symbol.decl,\n-\t\t         vnode->alias_of ? DECL_ASSEMBLER_NAME (vnode->alias_of)\n+\t\t         vnode->alias_of && DECL_P (vnode->alias_of) ? DECL_ASSEMBLER_NAME (vnode->alias_of)\n \t\t         : get_alias_symbol (vnode->symbol.decl));\n }\n "}, {"sha": "8091d36193e015dcff8c047972b547ee913dd95b", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c7cca63aa448ccf625c5201d8d9d31f2633b3/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=e01c7cca63aa448ccf625c5201d8d9d31f2633b3", "patch": "@@ -593,13 +593,67 @@ lto_symtab_merge_cgraph_nodes (void)\n \n   FOR_EACH_FUNCTION (cnode)\n     {\n+      /* Resolve weakrefs to symbol defined in other unit.  */\n+      if (!cnode->analyzed && cnode->thunk.alias && !DECL_P (cnode->thunk.alias))\n+\t{\n+\t  symtab_node node = symtab_node_for_asm (cnode->thunk.alias);\n+\t  if (node && is_a <cgraph_node> (node))\n+\t    {\n+\t      struct cgraph_node *n;\n+\n+\t      for (n = cgraph (node); n && n->alias;\n+\t\t   n = n->analyzed ? cgraph_alias_aliased_node (n) : NULL)\n+\t\tif (n == cnode)\n+\t\t  {\n+\t\t    error (\"function %q+D part of alias cycle\", cnode->symbol.decl);\n+\t\t    cnode->alias = false;\n+\t\t    break;\n+\t\t  }\n+\t      if (cnode->alias)\n+\t\t{\n+\t\t  cgraph_create_function_alias (cnode->symbol.decl, node->symbol.decl);\n+\t\t  ipa_record_reference ((symtab_node)cnode, (symtab_node)node,\n+\t\t\t\t\tIPA_REF_ALIAS, NULL);\n+\t\t  cnode->analyzed = true;\n+\t\t}\n+\t    }\n+\t  else if (node)\n+\t    error (\"%q+D alias in between function and variable is not supported\", cnode->symbol.decl);\n+\t}\n       if ((cnode->thunk.thunk_p || cnode->alias)\n-\t  && cnode->thunk.alias)\n+\t  && cnode->thunk.alias && DECL_P (cnode->thunk.alias))\n         cnode->thunk.alias = lto_symtab_prevailing_decl (cnode->thunk.alias);\n       cnode->symbol.aux = NULL;\n     }\n   FOR_EACH_VARIABLE (vnode)\n     {\n+      /* Resolve weakrefs to symbol defined in other unit.  */\n+      if (!vnode->analyzed && vnode->alias_of && !DECL_P (vnode->alias_of))\n+\t{\n+\t  symtab_node node = symtab_node_for_asm (vnode->alias_of);\n+\t  if (node && is_a <cgraph_node> (node))\n+\t    {\n+\t      struct varpool_node *n;\n+\n+\t      for (n = varpool (node); n && n->alias;\n+\t\t   n = n->analyzed ? varpool_alias_aliased_node (n) : NULL)\n+\t\tif (n == vnode)\n+\t\t  {\n+\t\t    error (\"function %q+D part of alias cycle\", vnode->symbol.decl);\n+\t\t    vnode->alias = false;\n+\t\t    break;\n+\t\t  }\n+\t      if (vnode->alias)\n+\t\t{\n+\t\t  varpool_create_variable_alias (vnode->symbol.decl, node->symbol.decl);\n+\t\t  ipa_record_reference ((symtab_node)vnode, (symtab_node)node,\n+\t\t\t\t\tIPA_REF_ALIAS, NULL);\n+\t\t  vnode->analyzed = true;\n+\t\t}\n+\t    }\n+\t  else if (node)\n+\t    error (\"%q+D alias in between function and variable is not supported\", vnode->symbol.decl);\n+\t}\n       if (vnode->alias_of)\n         vnode->alias_of = lto_symtab_prevailing_decl (vnode->alias_of);\n       vnode->symbol.aux = NULL;"}]}