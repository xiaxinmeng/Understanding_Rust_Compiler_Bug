{"sha": "6904f4b401d50c17b1a0dbd6eac64212700973fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwNGY0YjQwMWQ1MGMxN2IxYTBkYmQ2ZWFjNjQyMTI3MDA5NzNmYQ==", "commit": {"author": {"name": "David Krauss", "email": "potswa@mac.com", "date": "2011-06-10T05:18:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-10T05:18:36Z"}, "message": "re PR c++/49118 (Endless operator-> chain causes infinite loop)\n\n\tPR c++/49118\n\t* typeck2.c (build_x_arrow): Push fake template context\n\tto produce diagnostic on acyclic endless operator-> drill-down.\n\t* call.c (build_new_op): Change Boolean overload status\n\tvalue to a pointer to the overload function.\n\t* cp-tree.h: Likewise.\n\t* typeck.c: Likewise.\n\t* parser.c: Likewise.\n\t* decl2.c: Likewise.\n\t* pt.c: Likewise.\n\nFrom-SVN: r174889", "tree": {"sha": "cf32c9ad430552e602f47206b7f64bdc57c16863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf32c9ad430552e602f47206b7f64bdc57c16863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6904f4b401d50c17b1a0dbd6eac64212700973fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6904f4b401d50c17b1a0dbd6eac64212700973fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6904f4b401d50c17b1a0dbd6eac64212700973fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6904f4b401d50c17b1a0dbd6eac64212700973fa/comments", "author": null, "committer": null, "parents": [{"sha": "0dbe3777353ae62281f913cfc5df518d1dce98c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbe3777353ae62281f913cfc5df518d1dce98c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbe3777353ae62281f913cfc5df518d1dce98c7"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "dcea35ad8381942e12f5fe0e611f7beba788f582", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -1,3 +1,16 @@\n+2011-06-09  David Krauss  <potswa@mac.com>\n+\n+\tPR c++/49118\n+\t* typeck2.c (build_x_arrow): Push fake template context\n+\tto produce diagnostic on acyclic endless operator-> drill-down.\n+\t* call.c (build_new_op): Change Boolean overload status\n+\tvalue to a pointer to the overload function.\n+\t* cp-tree.h: Likewise.\n+\t* typeck.c: Likewise.\n+\t* parser.c: Likewise.\n+\t* decl2.c: Likewise.\n+\t* pt.c: Likewise.\n+\n 2011-06-09  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (maybe_constant_value): Handle overflowed input."}, {"sha": "4ee0eafe81dc6d312a762271aec41c7c2a4c815b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -4791,7 +4791,7 @@ avoid_sign_compare_warnings (tree orig_arg, tree arg)\n \n static tree\n build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n-\t      bool *overloaded_p, tsubst_flags_t complain)\n+\t\ttree *overload, tsubst_flags_t complain)\n {\n   tree orig_arg1 = arg1;\n   tree orig_arg2 = arg2;\n@@ -4958,7 +4958,7 @@ build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t  else\n \t    code = PREDECREMENT_EXPR;\n \t  result = build_new_op_1 (code, flags, arg1, NULL_TREE, NULL_TREE,\n-\t\t\t\t   overloaded_p, complain);\n+\t\t\t\t   overload, complain);\n \t  break;\n \n \t  /* The caller will deal with these.  */\n@@ -5005,8 +5005,8 @@ build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t}\n       else if (TREE_CODE (cand->fn) == FUNCTION_DECL)\n \t{\n-\t  if (overloaded_p)\n-\t    *overloaded_p = true;\n+\t  if (overload)\n+\t    *overload = cand->fn;\n \n \t  if (resolve_args (arglist, complain) == NULL)\n \t    result = error_mark_node;\n@@ -5165,11 +5165,11 @@ build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \n tree\n build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n-\t      bool *overloaded_p, tsubst_flags_t complain)\n+\t      tree *overload, tsubst_flags_t complain)\n {\n   tree ret;\n   bool subtime = timevar_cond_start (TV_OVERLOAD);\n-  ret = build_new_op_1 (code, flags, arg1, arg2, arg3, overloaded_p, complain);\n+  ret = build_new_op_1 (code, flags, arg1, arg2, arg3, overload, complain);\n   timevar_cond_stop (TV_OVERLOAD, subtime);\n   return ret;\n }"}, {"sha": "f7bcd0d42deb291ef12f04fc69543d1b3b7fed28", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -4717,7 +4717,7 @@ extern tree build_new_method_call\t\t(tree, tree, VEC(tree,gc) **,\n extern tree build_special_member_call\t\t(tree, tree, VEC(tree,gc) **,\n \t\t\t\t\t\t tree, int, tsubst_flags_t);\n extern tree build_new_op\t\t\t(enum tree_code, int, tree, \n-\t\t\t\t\t\t tree, tree, bool *,\n+\t\t\t\t\t\t tree, tree, tree *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_op_call\t\t\t(tree, VEC(tree,gc) **,\n \t\t\t\t\t\t tsubst_flags_t);\n@@ -5611,7 +5611,7 @@ extern tree cp_build_function_call_vec\t\t(tree, VEC(tree,gc) **,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_binary_op\t\t\t(enum tree_code, tree,\n \t\t\t\t\t\t enum tree_code, tree,\n-\t\t\t\t\t\t enum tree_code, bool *,\n+\t\t\t\t\t\t enum tree_code, tree *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_array_ref\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_x_unary_op\t\t\t(enum tree_code, tree,"}, {"sha": "8eee4588198826417ea401dd5effbdc45c347741", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -361,7 +361,7 @@ grok_array_decl (tree array_expr, tree index_exp)\n   if (MAYBE_CLASS_TYPE_P (type) || MAYBE_CLASS_TYPE_P (TREE_TYPE (index_exp)))\n     expr = build_new_op (ARRAY_REF, LOOKUP_NORMAL,\n \t\t\t array_expr, index_exp, NULL_TREE,\n-\t\t\t /*overloaded_p=*/NULL, tf_warning_or_error);\n+\t\t\t /*overload=*/NULL, tf_warning_or_error);\n   else\n     {\n       tree p1, p2, i1, i2;"}, {"sha": "961f9feb80085bce4052a484dab5730fcced0ad3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -6585,7 +6585,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n   cp_token *token;\n   enum tree_code tree_type, lhs_type, rhs_type;\n   enum cp_parser_prec new_prec, lookahead_prec;\n-  bool overloaded_p;\n+  tree overload;\n \n   /* Parse the first expression.  */\n   lhs = cp_parser_cast_expression (parser, /*address_p=*/false, cast_p, pidk);\n@@ -6688,7 +6688,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n       else if (tree_type == TRUTH_ORIF_EXPR)\n \tc_inhibit_evaluation_warnings -= lhs == truthvalue_true_node;\n \n-      overloaded_p = false;\n+      overload = NULL;\n       /* ??? Currently we pass lhs_type == ERROR_MARK and rhs_type ==\n \t ERROR_MARK for everything that is not a binary expression.\n \t This makes warn_about_parentheses miss some warnings that\n@@ -6703,7 +6703,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \tlhs = build2 (tree_type, boolean_type_node, lhs, rhs);\n       else\n \tlhs = build_x_binary_op (tree_type, lhs, lhs_type, rhs, rhs_type,\n-\t\t\t\t &overloaded_p, tf_warning_or_error);\n+\t\t\t\t &overload, tf_warning_or_error);\n       lhs_type = tree_type;\n \n       /* If the binary operator required the use of an overloaded operator,\n@@ -6712,7 +6712,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t otherwise permissible in an integral constant-expression if at\n \t least one of the operands is of enumeration type.  */\n \n-      if (overloaded_p\n+      if (overload\n \t  && cp_parser_non_integral_constant_expression (parser,\n \t\t\t\t\t\t\t NIC_OVERLOADED))\n \treturn error_mark_node;\n@@ -24245,8 +24245,6 @@ cp_parser_omp_for_cond (cp_parser *parser, tree decl)\n {\n   tree cond = cp_parser_binary_expression (parser, false, true,\n \t\t\t\t\t   PREC_NOT_OPERATOR, NULL);\n-  bool overloaded_p;\n-\n   if (cond == error_mark_node\n       || cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n     {\n@@ -24275,7 +24273,7 @@ cp_parser_omp_for_cond (cp_parser *parser, tree decl)\n   return build_x_binary_op (TREE_CODE (cond),\n \t\t\t    TREE_OPERAND (cond, 0), ERROR_MARK,\n \t\t\t    TREE_OPERAND (cond, 1), ERROR_MARK,\n-\t\t\t    &overloaded_p, tf_warning_or_error);\n+\t\t\t    /*overload=*/NULL, tf_warning_or_error);\n }\n \n /* Helper function, to parse omp for increment expression.  */"}, {"sha": "814a08f6a4ebbc2ca031026b752e8212cbe75585", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -12753,7 +12753,7 @@ tsubst_copy_and_build (tree t,\n \t (TREE_NO_WARNING (TREE_OPERAND (t, 1))\n \t  ? ERROR_MARK\n \t  : TREE_CODE (TREE_OPERAND (t, 1))),\n-\t /*overloaded_p=*/NULL,\n+\t /*overload=*/NULL,\n \t complain);\n \n     case SCOPE_REF:"}, {"sha": "1bed291617e8900660f4199688f2b5ce85c2db26", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -2035,7 +2035,7 @@ rationalize_conditional_expr (enum tree_code code, tree t,\n \t\t\t\t\t\t    ? LE_EXPR : GE_EXPR),\n \t\t\t\t\t\t   op0, TREE_CODE (op0),\n \t\t\t\t\t\t   op1, TREE_CODE (op1),\n-\t\t\t\t\t\t   /*overloaded_p=*/NULL,\n+\t\t\t\t\t\t   /*overload=*/NULL,\n \t\t\t\t\t\t   complain),\n                                 cp_build_unary_op (code, op0, 0, complain),\n                                 cp_build_unary_op (code, op1, 0, complain),\n@@ -2689,7 +2689,7 @@ build_x_indirect_ref (tree expr, ref_operator errorstring,\n     }\n \n   rval = build_new_op (INDIRECT_REF, LOOKUP_NORMAL, expr, NULL_TREE,\n-\t\t       NULL_TREE, /*overloaded_p=*/NULL, complain);\n+\t\t       NULL_TREE, /*overload=*/NULL, complain);\n   if (!rval)\n     rval = cp_build_indirect_ref (expr, errorstring, complain);\n \n@@ -3497,7 +3497,7 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n \n tree\n build_x_binary_op (enum tree_code code, tree arg1, enum tree_code arg1_code,\n-\t\t   tree arg2, enum tree_code arg2_code, bool *overloaded_p,\n+\t\t   tree arg2, enum tree_code arg2_code, tree *overload,\n \t\t   tsubst_flags_t complain)\n {\n   tree orig_arg1;\n@@ -3520,7 +3520,7 @@ build_x_binary_op (enum tree_code code, tree arg1, enum tree_code arg1_code,\n     expr = build_m_component_ref (arg1, arg2);\n   else\n     expr = build_new_op (code, LOOKUP_NORMAL, arg1, arg2, NULL_TREE,\n-\t\t\t overloaded_p, complain);\n+\t\t\t overload, complain);\n \n   /* Check for cases such as x+y<<z which users are likely to\n      misinterpret.  But don't warn about obj << x + y, since that is a\n@@ -3560,7 +3560,7 @@ build_x_array_ref (tree arg1, tree arg2, tsubst_flags_t complain)\n     }\n \n   expr = build_new_op (ARRAY_REF, LOOKUP_NORMAL, arg1, arg2, NULL_TREE,\n-\t\t       /*overloaded_p=*/NULL, complain);\n+\t\t       /*overload=*/NULL, complain);\n \n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (ARRAY_REF, expr, orig_arg1, orig_arg2,\n@@ -4558,7 +4558,7 @@ build_x_unary_op (enum tree_code code, tree xarg, tsubst_flags_t complain)\n     /* Don't look for a function.  */;\n   else\n     exp = build_new_op (code, LOOKUP_NORMAL, xarg, NULL_TREE, NULL_TREE,\n-\t\t\t/*overloaded_p=*/NULL, complain);\n+\t\t\t/*overload=*/NULL, complain);\n   if (!exp && code == ADDR_EXPR)\n     {\n       if (is_overloaded_fn (xarg))\n@@ -5545,7 +5545,7 @@ build_x_compound_expr (tree op1, tree op2, tsubst_flags_t complain)\n     }\n \n   result = build_new_op (COMPOUND_EXPR, LOOKUP_NORMAL, op1, op2, NULL_TREE,\n-\t\t\t /*overloaded_p=*/NULL, complain);\n+\t\t\t /*overload=*/NULL, complain);\n   if (!result)\n     result = cp_build_compound_expr (op1, op2, complain);\n \n@@ -6650,7 +6650,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t    {\n \t      result = build_new_op (MODIFY_EXPR, LOOKUP_NORMAL,\n \t\t\t\t     lhs, rhs, make_node (NOP_EXPR),\n-\t\t\t\t     /*overloaded_p=*/NULL, \n+\t\t\t\t     /*overload=*/NULL,\n \t\t\t\t     complain);\n \t      if (result == NULL_TREE)\n \t\treturn error_mark_node;\n@@ -6833,7 +6833,7 @@ build_x_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     {\n       tree rval = build_new_op (MODIFY_EXPR, LOOKUP_NORMAL, lhs, rhs,\n \t\t\t\tmake_node (modifycode),\n-\t\t\t\t/*overloaded_p=*/NULL,\n+\t\t\t\t/*overload=*/NULL,\n \t\t\t\tcomplain);\n       if (rval)\n \t{"}, {"sha": "fa64d1d72539fcfedf824ccae9a3ea2d529ab736", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -1429,14 +1429,20 @@ build_x_arrow (tree expr)\n \n   if (MAYBE_CLASS_TYPE_P (type))\n     {\n+      struct tinst_level *actual_inst = current_instantiation ();\n+      tree fn = NULL;\n+\n       while ((expr = build_new_op (COMPONENT_REF, LOOKUP_NORMAL, expr,\n \t\t\t\t   NULL_TREE, NULL_TREE,\n-\t\t\t\t   /*overloaded_p=*/NULL, \n-\t\t\t\t   tf_warning_or_error)))\n+\t\t\t\t   &fn, tf_warning_or_error)))\n \t{\n \t  if (expr == error_mark_node)\n \t    return error_mark_node;\n \n+\t  if (fn && DECL_USE_TEMPLATE (fn))\n+\t    push_tinst_level (fn);\n+\t  fn = NULL;\n+\n \t  if (vec_member (TREE_TYPE (expr), types_memoized))\n \t    {\n \t      error (\"circular pointer delegation detected\");\n@@ -1447,6 +1453,9 @@ build_x_arrow (tree expr)\n \t  last_rval = expr;\n \t}\n \n+      while (current_instantiation () != actual_inst)\n+\tpop_tinst_level ();\n+\n       if (last_rval == NULL_TREE)\n \t{\n \t  error (\"base operand of %<->%> has non-pointer type %qT\", type);"}, {"sha": "a1e9ae2dd74037b0cf28e96e99e50bfe7f7233f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -1,3 +1,7 @@\n+2011-06-09  David Krauss  <potswa@mac.com>\n+\n+\t* g++.dg/template/arrow1.C: New.\n+\n 2011-06-09  Jason Merrill  <jason@redhat.com>\n \n \t* lib/prune.exp: Prune \"note\"s."}, {"sha": "c96141063a0d392a48e0ef853262039086c4d545", "filename": "gcc/testsuite/g++.dg/template/arrow1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6904f4b401d50c17b1a0dbd6eac64212700973fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C?ref=6904f4b401d50c17b1a0dbd6eac64212700973fa", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/49118\n+// { dg-do compile }\n+\n+template< int n >\n+struct a {\n+    a< n+1 >\n+\toperator->()\n+\t{ return a< n+1 >(); }\n+};\n+\n+int main() {\n+    a<0>()->x; // { dg-error \"instantiation depth exceeds maximum\" }\n+}\n+\n+// { dg-prune-output \"incomplete type\" }\n+// { dg-prune-output \"declaration of\" }\n+// { dg-prune-output \"used but never defined\" }"}]}