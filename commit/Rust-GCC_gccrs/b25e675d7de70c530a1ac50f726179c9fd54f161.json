{"sha": "b25e675d7de70c530a1ac50f726179c9fd54f161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1ZTY3NWQ3ZGU3MGM1MzBhMWFjNTBmNzI2MTc5YzlmZDU0ZjE2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-25T18:27:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-25T18:27:08Z"}, "message": "PR c++/87748 - substitution failure error with decltype.\n\nThis issue is similar to PR 87480; in both cases we were doing non-dependent\nsubstitution with processing_template_decl set, leading to member access\nexpressions seeming still instantiation-dependent, and therefore decltype\nnot being simplified to its actual type.  And as in that PR, the fix is to\nclear processing_template_decl while substituting a default template\nargument.\n\n\t* pt.c (most_specialized_partial_spec): Clear\n\tprocessing_template_decl.\n\nFrom-SVN: r269921", "tree": {"sha": "433526769555de82ecf3ec0284998f10622da6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433526769555de82ecf3ec0284998f10622da6ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b25e675d7de70c530a1ac50f726179c9fd54f161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25e675d7de70c530a1ac50f726179c9fd54f161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25e675d7de70c530a1ac50f726179c9fd54f161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25e675d7de70c530a1ac50f726179c9fd54f161/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51e471ae61b6a9fe672fe92e00edacabf69f55a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e471ae61b6a9fe672fe92e00edacabf69f55a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e471ae61b6a9fe672fe92e00edacabf69f55a4"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "5739c38231637bd679f9177ee10b3700c16695b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b25e675d7de70c530a1ac50f726179c9fd54f161", "patch": "@@ -1,3 +1,9 @@\n+2019-03-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87748 - substitution failure error with decltype.\n+\t* pt.c (most_specialized_partial_spec): Clear\n+\tprocessing_template_decl.\n+\n 2019-03-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89214 - ICE when initializing aggregates with bases."}, {"sha": "05d5371d8a6ff0fb04d286655a7551831411614a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b25e675d7de70c530a1ac50f726179c9fd54f161", "patch": "@@ -23550,6 +23550,11 @@ most_specialized_partial_spec (tree target, tsubst_flags_t complain)\n       args = INNERMOST_TEMPLATE_ARGS (args);\n     }\n \n+  /* The caller hasn't called push_to_top_level yet, but we need\n+     get_partial_spec_bindings to be done in non-template context so that we'll\n+     fully resolve everything.  */\n+  processing_template_decl_sentinel ptds;\n+\n   for (t = DECL_TEMPLATE_SPECIALIZATIONS (main_tmpl); t; t = TREE_CHAIN (t))\n     {\n       tree spec_args;"}, {"sha": "f35b81268a2b83516d552cd55df90e939f23f1a3", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae64.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25e675d7de70c530a1ac50f726179c9fd54f161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae64.C?ref=b25e675d7de70c530a1ac50f726179c9fd54f161", "patch": "@@ -0,0 +1,69 @@\n+// PR c++/87748\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> T&& declval();\n+template <bool B, class T> struct enable_if;\n+template <class T> struct enable_if <true, T> { typedef T type; };\n+struct true_type { static const bool value = true; };\n+struct false_type { static const bool value = false; };\n+\n+struct string\n+{\n+  string (const char *p);\n+};\n+\n+/// Template to map all type arguments to void, useful for SFINAE, see also WG21 N3911.\n+template<class...> using void_t = void;\n+\n+/// REQUIRES<value> - Simplified version of enable_if<> to use SFINAE in function templates.\n+template<bool value> using REQUIRES = typename ::enable_if<value, bool>::type;\n+\n+/// DerivesString<T> - Check if @a T is of type 'string'.\n+template<class T> struct DerivesString\n+{\n+  static const int value = __is_same_as (T, string);\n+};\n+\n+/// Has__aida_visit__<T,Visitor> - Check if @a T provides a member template __aida_visit__<>(Visitor).\n+template<class, class, class = void> struct Has__aida_visit__ : false_type {};\n+template<class T, class V>\n+struct Has__aida_visit__<T, V, void_t< decltype (declval<T>().template __aida_visit__<V> (*(V*) 0)) >> : true_type {};\n+\n+struct Foo {\n+  template<class V> void __accept__ (V*);\n+};\n+\n+/// Base template for Visitor classes, dispatches operator() to visit_<type>() methods.\n+template<class DerivedVisitor>\n+class VisitorDispatcher {\n+  DerivedVisitor* derived () { return static_cast<DerivedVisitor*> (this); }\n+protected:\n+  typedef const char* Name; ///< Member name argument type for visit() methods.\n+public:\n+\n+  // dispatch for calls like: visitor (field, \"field\");\n+\n+  template<class A,\n+           REQUIRES< (!Has__aida_visit__<A, DerivedVisitor>::value) > = true>\n+  void operator() (A &a, Name n)\n+  { return derived()->visit_string (a, n); }\n+};\n+\n+class PspecVisitor : public VisitorDispatcher<PspecVisitor> {\n+public:\n+  void visit_string (::string &a, Name name);\n+};\n+\n+int\n+main (int argc, char *argv[])\n+{\n+#ifdef WITHASSERT // define this to fix g++-8.1.1\n+  static_assert (Has__aida_visit__<string, PspecVisitor>::value == false, \"\");\n+#endif\n+  PspecVisitor v;\n+  string str (\"A string\");\n+  v (str, \"some_string\");\n+  static_assert (Has__aida_visit__<string, PspecVisitor>::value == false, \"\");\n+  return 0;\n+}\n+// g++ -std=gnu++14 -Wall -O2 aidavisit.cc && ./a.out"}]}