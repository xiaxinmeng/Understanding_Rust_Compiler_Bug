{"sha": "41bd3d41301e812200371a73c7eddd1b0f0ddf44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiZDNkNDEzMDFlODEyMjAwMzcxYTczYzdlZGRkMWIwZjBkZGY0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-25T10:38:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-25T10:38:41Z"}, "message": "alpha.c (secondary_reload_class): Don't allocate a secondary for integral mode memories into FLOAT_REGS.\n\n        * alpha.c (secondary_reload_class): Don't allocate a secondary\n        for integral mode memories into FLOAT_REGS.  Rearrange the more\n        complicated memory expression inward.\n\nFrom-SVN: r31606", "tree": {"sha": "d5f73c18cd18fa028b247186bbb2537be5723b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5f73c18cd18fa028b247186bbb2537be5723b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41bd3d41301e812200371a73c7eddd1b0f0ddf44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bd3d41301e812200371a73c7eddd1b0f0ddf44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41bd3d41301e812200371a73c7eddd1b0f0ddf44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bd3d41301e812200371a73c7eddd1b0f0ddf44/comments", "author": null, "committer": null, "parents": [{"sha": "38544f542a81fc44c6febc3de11949a499ac2f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38544f542a81fc44c6febc3de11949a499ac2f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38544f542a81fc44c6febc3de11949a499ac2f05"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "f89a936cb2ccdcc103a7f9211b00184916284b99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bd3d41301e812200371a73c7eddd1b0f0ddf44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bd3d41301e812200371a73c7eddd1b0f0ddf44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41bd3d41301e812200371a73c7eddd1b0f0ddf44", "patch": "@@ -1,3 +1,9 @@\n+2000-01-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (secondary_reload_class): Don't allocate a secondary\n+\tfor integral mode memories into FLOAT_REGS.  Rearrange the more\n+\tcomplicated memory expression inward.\n+\n 2000-01-25  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* inclhack.def: Fixes to play nicer with FreeBSD, and"}, {"sha": "fa59cc1b373c2ccf9f6af7b2d4abc21f0eee6aae", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41bd3d41301e812200371a73c7eddd1b0f0ddf44/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41bd3d41301e812200371a73c7eddd1b0f0ddf44/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=41bd3d41301e812200371a73c7eddd1b0f0ddf44", "patch": "@@ -1095,16 +1095,14 @@ secondary_reload_class (class, mode, x, in)\n      rtx x;\n      int in;\n {\n-  if (GET_CODE (x) == MEM\n-      || (GET_CODE (x) == REG && REGNO (x) >= FIRST_PSEUDO_REGISTER)\n-      || (GET_CODE (x) == SUBREG\n-\t  && (GET_CODE (SUBREG_REG (x)) == MEM\n-\t      || (GET_CODE (SUBREG_REG (x)) == REG\n-\t\t  && REGNO (SUBREG_REG (x)) >= FIRST_PSEUDO_REGISTER))))\n-    {\n-      if (class == FLOAT_REGS && mode != DImode)\n-\treturn GENERAL_REGS;\n-      if ((mode == QImode || mode == HImode) && ! TARGET_BWX)\n+  if ((mode == QImode || mode == HImode) && ! TARGET_BWX)\n+    {\n+      if (GET_CODE (x) == MEM\n+\t  || (GET_CODE (x) == REG && REGNO (x) >= FIRST_PSEUDO_REGISTER)\n+\t  || (GET_CODE (x) == SUBREG\n+\t      && (GET_CODE (SUBREG_REG (x)) == MEM\n+\t\t  || (GET_CODE (SUBREG_REG (x)) == REG\n+\t\t      && REGNO (SUBREG_REG (x)) >= FIRST_PSEUDO_REGISTER))))\n \t{\n \t  if (!in || !aligned_memory_operand(x, mode))\n \t    return GENERAL_REGS;"}]}