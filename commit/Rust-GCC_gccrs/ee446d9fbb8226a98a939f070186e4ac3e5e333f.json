{"sha": "ee446d9fbb8226a98a939f070186e4ac3e5e333f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0NDZkOWZiYjgyMjZhOThhOTM5ZjA3MDE4NmU0YWMzZTVlMzMzZg==", "commit": {"author": {"name": "Jim Wilson", "email": "jim.wilson@linaro.org", "date": "2016-06-29T18:01:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2016-06-29T18:01:55Z"}, "message": "Add qdf24xx base tuning support.\n\n\tgcc/\n\t* config/aarch64/aarch64-cores.def (qdf24xx): Use qdf24xx tuning.\n\t* config/aarch64/aarch64.c (qdf24xx_addrcost_table,\n\tqdf24xx_regmove_cost, qdf24xx_tunings): New.\n\t* config/arm/aarch64-cost-tables.h (qdf24xx_extra_costs): New.\n\t* config/arm/arm-cores.def (qdf24xx): Use qdf24xx tuning.\n\t* config/arm/arm.c (arm_qdf24xx_tune): New.\n\n\tgcc/testsuite/\n\t* gcc.dg/asr_div1.c: Add aarch64 specific dg-options.\n\nFrom-SVN: r237857", "tree": {"sha": "5f5dd9d6b2c2022924bbe9ffe905b8a70352feb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5dd9d6b2c2022924bbe9ffe905b8a70352feb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee446d9fbb8226a98a939f070186e4ac3e5e333f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee446d9fbb8226a98a939f070186e4ac3e5e333f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee446d9fbb8226a98a939f070186e4ac3e5e333f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee446d9fbb8226a98a939f070186e4ac3e5e333f/comments", "author": null, "committer": null, "parents": [{"sha": "27f67461842af37e9b63426b6d6ab38a016a0f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f67461842af37e9b63426b6d6ab38a016a0f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f67461842af37e9b63426b6d6ab38a016a0f70"}], "stats": {"total": 195, "additions": 193, "deletions": 2}, "files": [{"sha": "b52c94e65a8e884bb1f2c47f5cac71d26a85203c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -1,3 +1,12 @@\n+2016-06-29  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* config/aarch64/aarch64-cores.def (qdf24xx): Use qdf24xx tuning.\n+\t* config/aarch64/aarch64.c (qdf24xx_addrcost_table,\n+\tqdf24xx_regmove_cost, qdf24xx_tunings): New.\n+\t* config/arm/aarch64-cost-tables.h (qdf24xx_extra_costs): New.\n+\t* config/arm/arm-cores.def (qdf24xx): Use qdf24xx tuning.\n+\t* config/arm/arm.c (arm_qdf24xx_tune): New.\n+\n 2016-06-29  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (cortexa53_tunings):"}, {"sha": "c4b31186bedfc400f2bf612f5345863ddb95872e", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -46,7 +46,7 @@ AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AA\n AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08\")\n AARCH64_CORE(\"cortex-a73\",  cortexa73, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa73, \"0x41\", \"0xd09\")\n AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  \"0x53\", \"0x001\")\n-AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa57, \"0x51\", \"0x800\")\n+AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   \"0x51\", \"0x800\")\n AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  \"0x43\", \"0x0a1\")\n AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, \"0x50\", \"0x000\")\n "}, {"sha": "356cb7ec6b8d01bec2c641ed9f49b7795b138d31", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -250,6 +250,22 @@ static const struct cpu_addrcost_table xgene1_addrcost_table =\n   0, /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table qdf24xx_addrcost_table =\n+{\n+    {\n+      1, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      1, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  0, /* register_offset  */\n+  0, /* register_sextend  */\n+  0, /* register_zextend  */\n+  0 /* imm_offset  */\n+};\n+\n static const struct cpu_regmove_cost generic_regmove_cost =\n {\n   1, /* GP2GP  */\n@@ -308,6 +324,15 @@ static const struct cpu_regmove_cost xgene1_regmove_cost =\n   2 /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost qdf24xx_regmove_cost =\n+{\n+  2, /* GP2GP  */\n+  /* Avoid the use of int<->fp moves for spilling.  */\n+  6, /* GP2FP  */\n+  6, /* FP2GP  */\n+  4 /* FP2FP  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost generic_vector_cost =\n {\n@@ -647,6 +672,32 @@ static const struct tune_params xgene1_tunings =\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n+static const struct tune_params qdf24xx_tunings =\n+{\n+  &qdf24xx_extra_costs,\n+  &qdf24xx_addrcost_table,\n+  &qdf24xx_regmove_cost,\n+  &generic_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  4, /* memmov_cost  */\n+  4, /* issue_rate  */\n+  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+   | AARCH64_FUSE_MOVK_MOVK), /* fuseable_ops  */\n+  16,\t/* function_align.  */\n+  8,\t/* jump_align.  */\n+  16,\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  64,\t/* cache_line_size.  */\n+  tune_params::AUTOPREFETCHER_STRONG,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t\t/* tune_flags.  */\n+};\n+\n /* Support for fine-grained override of the tuning structures.  */\n struct aarch64_tuning_override_function\n {"}, {"sha": "b30c84f1656e3759d4614b7a60595b030b2fc352", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -537,4 +537,107 @@ const struct cpu_cost_table xgene1_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table qdf24xx_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    0,                 /* shift_reg.  */\n+    COSTS_N_INSNS (1), /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    0,                 /* log_shift.  */\n+    0,                 /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    0,                 /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,\t               /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (2),       /* simple.  */\n+      COSTS_N_INSNS (2),       /* flag_setting.  */\n+      COSTS_N_INSNS (2),       /* extend.  */\n+      COSTS_N_INSNS (2),       /* add.  */\n+      COSTS_N_INSNS (2),       /* extend_add.  */\n+      COSTS_N_INSNS (4)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (3),       /* add.  */\n+      COSTS_N_INSNS (3),       /* extend_add.  */\n+      COSTS_N_INSNS (9)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (2),         /* load.  */\n+    COSTS_N_INSNS (2),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (2),         /* ldrd.  */\n+    COSTS_N_INSNS (2),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    2,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),         /* loadf.  */\n+    COSTS_N_INSNS (2),         /* loadd.  */\n+    COSTS_N_INSNS (3),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    2,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    COSTS_N_INSNS (1),         /* store_unaligned.  */\n+    COSTS_N_INSNS (1),         /* loadv.  */\n+    COSTS_N_INSNS (1)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (6),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (5),       /* mult_addsub. */\n+      COSTS_N_INSNS (5),       /* fma.  */\n+      COSTS_N_INSNS (3),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst. */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (11),      /* div.  */\n+      COSTS_N_INSNS (6),       /* mult.  */\n+      COSTS_N_INSNS (6),       /* mult_addsub.  */\n+      COSTS_N_INSNS (6),       /* fma.  */\n+      COSTS_N_INSNS (3),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst.  */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (2),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)  /* alu.  */\n+  }\n+};\n+\n #endif /* GCC_AARCH_COST_TABLES_H */"}, {"sha": "2072e1e6f8d84533deead24e6fb0b6aff7603f24", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -173,7 +173,7 @@ ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED\n ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n-ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH8A),            xgene1)\n \n /* V8 big.LITTLE implementations */"}, {"sha": "7f17ef40dd07385cb8f05f13e11eb7e0920a4873", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -2052,6 +2052,29 @@ const struct tune_params arm_xgene1_tune =\n   tune_params::SCHED_AUTOPREF_OFF\n };\n \n+const struct tune_params arm_qdf24xx_tune =\n+{\n+  arm_9e_rtx_costs,\n+  &qdf24xx_extra_costs,\n+  NULL,                                         /* Scheduler cost adjustment.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  4,\t\t\t\t\t\t/* Issue rate.  */\n+  ARM_PREFETCH_BENEFICIAL (0, -1, 64),\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n+  tune_params::SCHED_AUTOPREF_FULL\n+};\n+\n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n    less appealing.  Set max_insns_skipped to a low value.  */\n "}, {"sha": "db7cee284ed6ee7d20541dd3ab852b4d919a6e31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -1,3 +1,7 @@\n+2016-06-29  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* gcc.dg/asr_div1.c: Add aarch64 specific dg-options.\n+\n 2016-06-29  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* gfortran.dg/goacc/asyncwait-2.f95: Updated expected diagnostics."}, {"sha": "f808db3296a296dc073a5f4444a9392648b5ac69", "filename": "gcc/testsuite/gcc.dg/asr_div1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee446d9fbb8226a98a939f070186e4ac3e5e333f/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c?ref=ee446d9fbb8226a98a939f070186e4ac3e5e333f", "patch": "@@ -1,6 +1,7 @@\n /* Test division by const int generates only one shift.  */\n /* { dg-do run } */\n /* { dg-options \"-O2 -fdump-rtl-combine-all\" } */\n+/* { dg-options \"-O2 -fdump-rtl-combine-all -mtune=cortex-a53\" { target aarch64*-*-* } } */\n /* { dg-require-effective-target int32plus } */\n \n extern void abort (void);"}]}