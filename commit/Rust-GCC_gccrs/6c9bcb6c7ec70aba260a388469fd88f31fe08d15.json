{"sha": "6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "node_id": "C_kwDOANBUbNoAKDZjOWJjYjZjN2VjNzBhYmEyNjBhMzg4NDY5ZmQ4OGYzMWZlMDhkMTU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T15:32:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:41:50Z"}, "message": "RISC-V: Add indexed loads/stores C/C++ intrinsic support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-protos.h (get_vector_mode): New function.\n\t* config/riscv/riscv-v.cc (get_vector_mode): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.cc (enum lst_type): New enum.\n\t(class loadstore): Adjust for indexed loads/stores support.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: New function declare.\n\t* config/riscv/riscv-vector-builtins-functions.def (vluxei8): Ditto.\n\t(vluxei16): Ditto.\n\t(vluxei32): Ditto.\n\t(vluxei64): Ditto.\n\t(vloxei8): Ditto.\n\t(vloxei16): Ditto.\n\t(vloxei32): Ditto.\n\t(vloxei64): Ditto.\n\t(vsuxei8): Ditto.\n\t(vsuxei16): Ditto.\n\t(vsuxei32): Ditto.\n\t(vsuxei64): Ditto.\n\t(vsoxei8): Ditto.\n\t(vsoxei16): Ditto.\n\t(vsoxei32): Ditto.\n\t(vsoxei64): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc\n\t(struct indexed_loadstore_def): New class.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (required_extensions_p): Adjust\n\tfor indexed loads/stores support.\n\t(check_required_extensions): Ditto.\n\t(rvv_arg_type_info::get_base_vector_type): New function.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t(function_builder::add_unique_function): Adjust for indexed loads/stores\n\tsupport.\n\t(function_expander::use_exact_insn): New function.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Adjust for\n\tindexed loads/stores support.\n\t(struct rvv_arg_type_info): Ditto.\n\t(function_expander::index_mode): New function.\n\t(function_base::apply_tail_policy_p): Ditto.\n\t(function_base::apply_mask_policy_p): Ditto.\n\t* config/riscv/vector-iterators.md (unspec): New unspec.\n\t* config/riscv/vector.md (unspec): Ditto.\n\t(@pred_indexed_<order>load<VNX1_QHSD:mode><VNX1_QHSDI:mode>): New\n\tpattern.\n\t(@pred_indexed_<order>store<VNX1_QHSD:mode><VNX1_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX2_QHSD:mode><VNX2_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX2_QHSD:mode><VNX2_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX4_QHSD:mode><VNX4_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX4_QHSD:mode><VNX4_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX8_QHSD:mode><VNX8_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX8_QHSD:mode><VNX8_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX16_QHS:mode><VNX16_QHSI:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX16_QHS:mode><VNX16_QHSI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX32_QH:mode><VNX32_QHI:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX32_QH:mode><VNX32_QHI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX64_Q:mode><VNX64_Q:mode>): Ditto.\n\t(@pred_indexed_<order>store<VNX64_Q:mode><VNX64_Q:mode>): Ditto.", "tree": {"sha": "1ab38ec8391086b4d759960ecea619b05ca53c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab38ec8391086b4d759960ecea619b05ca53c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f8950b403f6351f125d8281d2e7430a43e7d125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8950b403f6351f125d8281d2e7430a43e7d125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8950b403f6351f125d8281d2e7430a43e7d125"}], "stats": {"total": 878, "additions": 845, "deletions": 33}, "files": [{"sha": "ceae4007fd1d3fe8c3c61d76e62b4fef759d77a4", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -172,6 +172,7 @@ enum mask_policy\n enum tail_policy get_prefer_tail_policy ();\n enum mask_policy get_prefer_mask_policy ();\n rtx get_avl_type_rtx (enum avl_type);\n+opt_machine_mode get_vector_mode (scalar_mode, poly_uint64);\n }\n \n /* We classify builtin types into two classes:"}, {"sha": "992b3437926a08cf2b0c09b1139aa79cbe263b2d", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -349,4 +349,26 @@ get_avl_type_rtx (enum avl_type type)\n   return gen_int_mode (type, Pmode);\n }\n \n+/* Return the RVV vector mode that has NUNITS elements of mode INNER_MODE.\n+   This function is not only used by builtins, but also will be used by\n+   auto-vectorization in the future.  */\n+opt_machine_mode\n+get_vector_mode (scalar_mode inner_mode, poly_uint64 nunits)\n+{\n+  enum mode_class mclass;\n+  if (inner_mode == E_BImode)\n+    mclass = MODE_VECTOR_BOOL;\n+  else if (FLOAT_MODE_P (inner_mode))\n+    mclass = MODE_VECTOR_FLOAT;\n+  else\n+    mclass = MODE_VECTOR_INT;\n+  machine_mode mode;\n+  FOR_EACH_MODE_IN_CLASS (mode, mclass)\n+    if (inner_mode == GET_MODE_INNER (mode)\n+\t&& known_eq (nunits, GET_MODE_NUNITS (mode))\n+\t&& riscv_v_ext_vector_mode_p (mode))\n+      return mode;\n+  return opt_machine_mode ();\n+}\n+\n } // namespace riscv_vector"}, {"sha": "129e89f443eff3866ef018714cf299a680f6db76", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -48,6 +48,16 @@ using namespace riscv_vector;\n \n namespace riscv_vector {\n \n+/* Enumerates types of loads/stores operations.\n+   It's only used in here so we don't define it\n+   in riscv-vector-builtins-bases.h.  */\n+enum lst_type\n+{\n+  LST_UNIT_STRIDE,\n+  LST_STRIDED,\n+  LST_INDEXED,\n+};\n+\n /* Implements vsetvl<mode> && vsetvlmax<mode>.  */\n template<bool VLMAX_P>\n class vsetvl : public function_base\n@@ -84,10 +94,16 @@ class vsetvl : public function_base\n   }\n };\n \n-/* Implements vle.v/vse.v/vlm.v/vsm.v/vlse.v/vsse.v codegen.  */\n-template <bool STORE_P, bool STRIDED_P = false>\n+/* Implements\n+ * vle.v/vse.v/vlm.v/vsm.v/vlse.v/vsse.v/vluxei.v/vloxei.v/vsuxei.v/vsoxei.v\n+ * codegen.  */\n+template<bool STORE_P, lst_type LST_TYPE, bool ORDERED_P>\n class loadstore : public function_base\n {\n+public:\n+  bool apply_tail_policy_p () const override { return !STORE_P; }\n+  bool apply_mask_policy_p () const override { return !STORE_P; }\n+\n   unsigned int call_properties (const function_instance &) const override\n   {\n     if (STORE_P)\n@@ -98,27 +114,39 @@ class loadstore : public function_base\n \n   bool can_be_overloaded_p (enum predication_type_index pred) const override\n   {\n-    if (STORE_P)\n+    if (STORE_P || LST_TYPE == LST_INDEXED)\n       return true;\n     return pred != PRED_TYPE_none && pred != PRED_TYPE_mu;\n   }\n \n   rtx expand (function_expander &e) const override\n   {\n-    if (STORE_P)\n+    if (LST_TYPE == LST_INDEXED)\n+      {\n+\tint unspec = ORDERED_P ? UNSPEC_ORDERED : UNSPEC_UNORDERED;\n+\tif (STORE_P)\n+\t  return e.use_exact_insn (\n+\t    code_for_pred_indexed_store (unspec, e.vector_mode (),\n+\t\t\t\t\t e.index_mode ()));\n+\telse\n+\t  return e.use_exact_insn (\n+\t    code_for_pred_indexed_load (unspec, e.vector_mode (),\n+\t\t\t\t\te.index_mode ()));\n+      }\n+    else if (LST_TYPE == LST_STRIDED)\n       {\n-\tif (STRIDED_P)\n+\tif (STORE_P)\n \t  return e.use_contiguous_store_insn (\n \t    code_for_pred_strided_store (e.vector_mode ()));\n \telse\n-\t  return e.use_contiguous_store_insn (\n-\t    code_for_pred_store (e.vector_mode ()));\n+\t  return e.use_contiguous_load_insn (\n+\t    code_for_pred_strided_load (e.vector_mode ()));\n       }\n     else\n       {\n-\tif (STRIDED_P)\n-\t  return e.use_contiguous_load_insn (\n-\t    code_for_pred_strided_load (e.vector_mode ()));\n+\tif (STORE_P)\n+\t  return e.use_contiguous_store_insn (\n+\t    code_for_pred_store (e.vector_mode ()));\n \telse\n \t  return e.use_contiguous_load_insn (\n \t    code_for_pred_mov (e.vector_mode ()));\n@@ -128,12 +156,28 @@ class loadstore : public function_base\n \n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n-static CONSTEXPR const loadstore<false> vle_obj;\n-static CONSTEXPR const loadstore<true> vse_obj;\n-static CONSTEXPR const loadstore<false> vlm_obj;\n-static CONSTEXPR const loadstore<true> vsm_obj;\n-static CONSTEXPR const loadstore<false, true> vlse_obj;\n-static CONSTEXPR const loadstore<true, true> vsse_obj;\n+static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n+static CONSTEXPR const loadstore<true, LST_UNIT_STRIDE, false> vse_obj;\n+static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vlm_obj;\n+static CONSTEXPR const loadstore<true, LST_UNIT_STRIDE, false> vsm_obj;\n+static CONSTEXPR const loadstore<false, LST_STRIDED, false> vlse_obj;\n+static CONSTEXPR const loadstore<true, LST_STRIDED, false> vsse_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, false> vluxei8_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, false> vluxei16_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, false> vluxei32_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, false> vluxei64_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, true> vloxei8_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, true> vloxei16_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, true> vloxei32_obj;\n+static CONSTEXPR const loadstore<false, LST_INDEXED, true> vloxei64_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, false> vsuxei8_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, false> vsuxei16_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, false> vsuxei32_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, false> vsuxei64_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei8_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei16_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei32_obj;\n+static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei64_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -148,5 +192,21 @@ BASE (vlm)\n BASE (vsm)\n BASE (vlse)\n BASE (vsse)\n+BASE (vluxei8)\n+BASE (vluxei16)\n+BASE (vluxei32)\n+BASE (vluxei64)\n+BASE (vloxei8)\n+BASE (vloxei16)\n+BASE (vloxei32)\n+BASE (vloxei64)\n+BASE (vsuxei8)\n+BASE (vsuxei16)\n+BASE (vsuxei32)\n+BASE (vsuxei64)\n+BASE (vsoxei8)\n+BASE (vsoxei16)\n+BASE (vsoxei32)\n+BASE (vsoxei64)\n \n } // end namespace riscv_vector"}, {"sha": "238c01dbf1fe491cbcd8e60f5891cece586081ac", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -32,6 +32,22 @@ extern const function_base *const vlm;\n extern const function_base *const vsm;\n extern const function_base *const vlse;\n extern const function_base *const vsse;\n+extern const function_base *const vluxei8;\n+extern const function_base *const vluxei16;\n+extern const function_base *const vluxei32;\n+extern const function_base *const vluxei64;\n+extern const function_base *const vloxei8;\n+extern const function_base *const vloxei16;\n+extern const function_base *const vloxei32;\n+extern const function_base *const vloxei64;\n+extern const function_base *const vsuxei8;\n+extern const function_base *const vsuxei16;\n+extern const function_base *const vsuxei32;\n+extern const function_base *const vsuxei64;\n+extern const function_base *const vsoxei8;\n+extern const function_base *const vsoxei16;\n+extern const function_base *const vsoxei32;\n+extern const function_base *const vsoxei64;\n }\n \n } // end namespace riscv_vector"}, {"sha": "9719b9b4bf122c6e87b99727a32b53df19ed30df", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -46,5 +46,21 @@ DEF_RVV_FUNCTION (vlm, loadstore, none_preds, b_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vsm, loadstore, none_preds, b_v_scalar_ptr_ops)\n DEF_RVV_FUNCTION (vlse, loadstore, full_preds, all_v_scalar_const_ptr_ptrdiff_ops)\n DEF_RVV_FUNCTION (vsse, loadstore, none_m_preds, all_v_scalar_ptr_ptrdiff_ops)\n+DEF_RVV_FUNCTION (vluxei8, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint8_index_ops)\n+DEF_RVV_FUNCTION (vluxei16, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint16_index_ops)\n+DEF_RVV_FUNCTION (vluxei32, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint32_index_ops)\n+DEF_RVV_FUNCTION (vluxei64, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint64_index_ops)\n+DEF_RVV_FUNCTION (vloxei8, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint8_index_ops)\n+DEF_RVV_FUNCTION (vloxei16, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint16_index_ops)\n+DEF_RVV_FUNCTION (vloxei32, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint32_index_ops)\n+DEF_RVV_FUNCTION (vloxei64, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint64_index_ops)\n+DEF_RVV_FUNCTION (vsuxei8, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint8_index_ops)\n+DEF_RVV_FUNCTION (vsuxei16, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint16_index_ops)\n+DEF_RVV_FUNCTION (vsuxei32, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint32_index_ops)\n+DEF_RVV_FUNCTION (vsuxei64, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint64_index_ops)\n+DEF_RVV_FUNCTION (vsoxei8, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint8_index_ops)\n+DEF_RVV_FUNCTION (vsoxei16, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint16_index_ops)\n+DEF_RVV_FUNCTION (vsoxei32, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint32_index_ops)\n+DEF_RVV_FUNCTION (vsoxei64, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint64_index_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "d261dfbceb7088640b1f265057c38f4e5ed9ac61", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -137,8 +137,57 @@ struct loadstore_def : public build_base\n   }\n };\n \n+/* indexed_loadstore_def class.  */\n+struct indexed_loadstore_def : public function_shape\n+{\n+  void build (function_builder &b,\n+\t      const function_group_info &group) const override\n+  {\n+    for (unsigned int pred_idx = 0; group.preds[pred_idx] != NUM_PRED_TYPES;\n+\t ++pred_idx)\n+      {\n+\tfor (unsigned int vec_type_idx = 0;\n+\t     group.ops_infos.types[vec_type_idx].index != NUM_VECTOR_TYPES;\n+\t     ++vec_type_idx)\n+\t  {\n+\t    tree index_type = group.ops_infos.args[1].get_tree_type (\n+\t      group.ops_infos.types[vec_type_idx].index);\n+\t    if (!index_type)\n+\t      continue;\n+\t    build_one (b, group, pred_idx, vec_type_idx);\n+\t  }\n+      }\n+  }\n+\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    /* Return nullptr if it can not be overloaded.  */\n+    if (overloaded_p && !instance.base->can_be_overloaded_p (instance.pred))\n+      return nullptr;\n+\n+    b.append_base_name (instance.base_name);\n+    /* vop<sew>_v --> vop<sew>_v_<type>.  */\n+    if (!overloaded_p)\n+      {\n+\t/* vop<sew> --> vop<sew>_v.  */\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\t/* vop<sew>_v --> vop<sew>_v_<type>.  */\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+      }\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n+SHAPE(indexed_loadstore, indexed_loadstore)\n \n } // end namespace riscv_vector"}, {"sha": "05bc68b7f12fa6467afa9b4e62406008997a0715", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -27,6 +27,7 @@ namespace shapes {\n extern const function_shape *const vsetvl;\n extern const function_shape *const vsetvlmax;\n extern const function_shape *const loadstore;\n+extern const function_shape *const indexed_loadstore;\n }\n \n } // end namespace riscv_vector"}, {"sha": "df4e2ee18417f96b7237dff88f45482d74f5660a", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 247, "deletions": 2, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -180,6 +180,58 @@ static CONSTEXPR const rvv_arg_type_info scalar_ptr_ptrdiff_args[]\n      rvv_arg_type_info (RVV_BASE_ptrdiff), rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (const scalar_type *, uint8_index_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_const_ptr_uint8_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_const_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint8_index), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (const scalar_type *, uint16_index_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_const_ptr_uint16_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_const_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint16_index), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (const scalar_type *, uint32_index_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_const_ptr_uint32_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_const_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint32_index), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (const scalar_type *, uint64_index_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_const_ptr_uint64_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_const_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint64_index), rvv_arg_type_info_end};\n+\n+/* A list of args for void func (scalar_type *, uint8_index_type, vector_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_ptr_uint8_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint8_index),\n+     rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for void func (scalar_type *, uint16_index_type, vector_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_ptr_uint16_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint16_index),\n+     rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for void func (scalar_type *, uint32_index_type, vector_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_ptr_uint32_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint32_index),\n+     rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for void func (scalar_type *, uint64_index_type, vector_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info scalar_ptr_uint64_index_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar_ptr),\n+     rvv_arg_type_info (RVV_BASE_uint64_index),\n+     rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -248,6 +300,38 @@ static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_ptrdiff_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      scalar_const_ptr_ptrdiff_args /* Args */};\n \n+/* A static operand information for vector_type func (const scalar_type *,\n+ * uint8_index_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_uint8_index_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_uint8_index_args /* Args */};\n+\n+/* A static operand information for vector_type func (const scalar_type *,\n+ * uint16_index_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_uint16_index_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_uint16_index_args /* Args */};\n+\n+/* A static operand information for vector_type func (const scalar_type *,\n+ * uint32_index_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_uint32_index_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_uint32_index_args /* Args */};\n+\n+/* A static operand information for vector_type func (const scalar_type *,\n+ * uint64_index_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_uint64_index_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_uint64_index_args /* Args */};\n+\n /* A static operand information for void func (scalar_type *, ptrdiff_t,\n  * vector_type) function registration. */\n static CONSTEXPR const rvv_op_info all_v_scalar_ptr_ptrdiff_ops\n@@ -256,6 +340,38 @@ static CONSTEXPR const rvv_op_info all_v_scalar_ptr_ptrdiff_ops\n      rvv_arg_type_info (RVV_BASE_void), /* Return type */\n      scalar_ptr_ptrdiff_args /* Args */};\n \n+/* A static operand information for void func (scalar_type *, uint8_index_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_ptr_uint8_index_ops\n+  = {all_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_uint8_index_args /* Args */};\n+\n+/* A static operand information for void func (scalar_type *, uint16_index_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_ptr_uint16_index_ops\n+  = {all_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_uint16_index_args /* Args */};\n+\n+/* A static operand information for void func (scalar_type *, uint32_index_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_ptr_uint32_index_ops\n+  = {all_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_uint32_index_args /* Args */};\n+\n+/* A static operand information for void func (scalar_type *, uint64_index_type,\n+ * vector_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_v_scalar_ptr_uint64_index_ops\n+  = {all_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_uint64_index_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -444,11 +560,41 @@ register_vector_type (vector_type_index type)\n   builtin_types[type].vector_ptr = build_pointer_type (vectype);\n }\n \n+/* Return true if the type has required_extensions.  */\n+static bool\n+required_extensions_p (enum rvv_base_type type)\n+{\n+  return type == RVV_BASE_vector || type == RVV_BASE_uint8_index\n+\t || type == RVV_BASE_uint16_index || type == RVV_BASE_uint32_index\n+\t || type == RVV_BASE_uint64_index;\n+}\n+\n /* Check whether all the RVV_REQUIRE_* values in REQUIRED_EXTENSIONS are\n    enabled.  */\n static bool\n-check_required_extensions (uint64_t required_extensions)\n+check_required_extensions (const function_instance &instance)\n {\n+  rvv_type_info type_info = instance.type;\n+  uint64_t required_extensions = type_info.required_extensions;\n+  const rvv_op_info *op_info = instance.op_info;\n+  tree type = builtin_types[type_info.index].vector;\n+  for (unsigned i = 0; op_info->args[i].base_type != NUM_BASE_TYPES; ++i)\n+    {\n+      if (!required_extensions_p (op_info->args[i].base_type))\n+\tcontinue;\n+\n+      enum vector_type_index vector_type\n+\t= op_info->args[i].get_base_vector_type (type);\n+      if (vector_type == NUM_VECTOR_TYPES)\n+\tcontinue;\n+      required_extensions |= op_info->types[vector_type].required_extensions;\n+\n+      /* According to RVV ISA, EEW=64 index of indexed loads/stores require\n+\t XLEN = 64.  */\n+      if (op_info->args[i].base_type == RVV_BASE_uint64_index)\n+\trequired_extensions |= RVV_REQUIRE_RV64BIT;\n+    }\n+\n   uint64_t riscv_isa_flags = 0;\n \n   if (TARGET_VECTOR_ELEN_FP_32)\n@@ -502,6 +648,56 @@ get_mask_policy_for_pred (enum predication_type_index pred)\n   return gen_int_mode (get_prefer_mask_policy (), Pmode);\n }\n \n+vector_type_index\n+rvv_arg_type_info::get_base_vector_type (tree type) const\n+{\n+  if (!type)\n+    return NUM_VECTOR_TYPES;\n+  poly_int64 nunits = GET_MODE_NUNITS (TYPE_MODE (type));\n+  machine_mode inner_mode;\n+  bool unsigned_p = TYPE_UNSIGNED (type);\n+  switch (base_type)\n+    {\n+    case RVV_BASE_uint8_index:\n+      inner_mode = E_QImode;\n+      unsigned_p = true;\n+      break;\n+    case RVV_BASE_uint16_index:\n+      inner_mode = E_HImode;\n+      unsigned_p = true;\n+      break;\n+    case RVV_BASE_uint32_index:\n+      inner_mode = E_SImode;\n+      unsigned_p = true;\n+      break;\n+    case RVV_BASE_uint64_index:\n+      inner_mode = E_DImode;\n+      unsigned_p = true;\n+      break;\n+    default:\n+      return NUM_VECTOR_TYPES;\n+    }\n+\n+  opt_machine_mode mode\n+    = get_vector_mode (as_a<scalar_mode> (inner_mode), nunits);\n+\n+  if (!mode.exists ())\n+    return NUM_VECTOR_TYPES;\n+  for (unsigned int i = 0; i < NUM_VECTOR_TYPES + 1; i++)\n+    {\n+      tree vector_type = builtin_types[i].vector;\n+      if (!vector_type)\n+\tcontinue;\n+\n+      if (TYPE_UNSIGNED (vector_type) != unsigned_p)\n+\tcontinue;\n+\n+      if (TYPE_MODE (vector_type) == mode.require ())\n+\treturn (enum vector_type_index) i;\n+    }\n+  return NUM_VECTOR_TYPES;\n+}\n+\n tree\n rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n {\n@@ -537,9 +733,20 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n       return long_unsigned_type_node;\n     case RVV_BASE_long:\n       return long_integer_type_node;\n+    case RVV_BASE_uint8_index:\n+    case RVV_BASE_uint16_index:\n+    case RVV_BASE_uint32_index:\n+    case RVV_BASE_uint64_index:\n+      if (get_base_vector_type (builtin_types[type_idx].vector)\n+\t  != NUM_VECTOR_TYPES)\n+\treturn builtin_types[get_base_vector_type (\n+\t\t\t       builtin_types[type_idx].vector)].vector;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n+  /* Return NULL_TREE if the type we don't want to register.  */\n+  return NULL_TREE;\n }\n \n function_instance::function_instance (const char *base_name_in,\n@@ -839,7 +1046,7 @@ function_builder::add_unique_function (const function_instance &instance,\n \t\t\t\t       vec<tree> &argument_types)\n {\n   /* Do not add this function if it is invalid.  */\n-  if (!check_required_extensions (instance.type.required_extensions))\n+  if (!check_required_extensions (instance))\n     return;\n \n   /* Add the function under its full (unique) name.  */\n@@ -918,6 +1125,44 @@ function_expander::add_mem_operand (machine_mode mode, unsigned argno)\n   add_fixed_operand (mem);\n }\n \n+/* Implement the call using instruction ICODE, with a 1:1 mapping between\n+   arguments and input operands.  */\n+rtx\n+function_expander::use_exact_insn (insn_code icode)\n+{\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+  tree mask_type = builtin_types[mask_types[type.index]].vector;\n+  machine_mode mask_mode = TYPE_MODE (mask_type);\n+\n+  /* Record the offset to get the argument.  */\n+  int arg_offset = 0;\n+\n+  if (use_real_mask_p (pred))\n+    add_input_operand (arg_offset++);\n+  else\n+    add_all_one_mask_operand (mask_mode);\n+\n+  /* Store operation doesn't have merge operand.  */\n+  if (!function_returns_void_p ())\n+    {\n+      if (use_real_merge_p (pred))\n+\tadd_input_operand (arg_offset++);\n+      else\n+\tadd_vundef_operand (mode);\n+    }\n+\n+  for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n+    add_input_operand (argno);\n+\n+  if (base->apply_tail_policy_p ())\n+    add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n+  if (base->apply_mask_policy_p ())\n+    add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n+\n+  add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n+  return generate_insn (icode);\n+}\n+\n /* Use contiguous load INSN.  */\n rtx\n function_expander::use_contiguous_load_insn (insn_code icode)"}, {"sha": "aec66b8ca4b8a97d55adccdea1d858ff3302d8f7", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -147,6 +147,10 @@ enum rvv_base_type\n   RVV_BASE_ptrdiff,\n   RVV_BASE_unsigned_long,\n   RVV_BASE_long,\n+  RVV_BASE_uint8_index,\n+  RVV_BASE_uint16_index,\n+  RVV_BASE_uint32_index,\n+  RVV_BASE_uint64_index,\n   NUM_BASE_TYPES\n };\n \n@@ -176,6 +180,7 @@ struct rvv_arg_type_info\n   {}\n   enum rvv_base_type base_type;\n \n+  vector_type_index get_base_vector_type (tree type) const;\n   tree get_tree_type (vector_type_index) const;\n };\n \n@@ -325,7 +330,9 @@ class function_expander : public function_call_info\n   void add_mem_operand (machine_mode, unsigned);\n \n   machine_mode vector_mode (void) const;\n+  machine_mode index_mode (void) const;\n \n+  rtx use_exact_insn (insn_code);\n   rtx use_contiguous_load_insn (insn_code);\n   rtx use_contiguous_store_insn (insn_code);\n   rtx generate_insn (insn_code);\n@@ -358,6 +365,12 @@ class function_base\n   /* Return true if intrinsics should apply vl operand.  */\n   virtual bool apply_vl_p () const;\n \n+  /* Return true if intrinsics should apply tail policy operand.  */\n+  virtual bool apply_tail_policy_p () const;\n+\n+  /* Return true if intrinsics should apply mask policy operand.  */\n+  virtual bool apply_mask_policy_p () const;\n+\n   /* Return true if intrinsic can be overloaded.  */\n   virtual bool can_be_overloaded_p (enum predication_type_index) const;\n \n@@ -444,6 +457,13 @@ function_expander::vector_mode (void) const\n   return TYPE_MODE (builtin_types[type.index].vector);\n }\n \n+/* Return the machine_mode of the corresponding index type.  */\n+inline machine_mode\n+function_expander::index_mode (void) const\n+{\n+  return TYPE_MODE (op_info->args[1].get_tree_type (type.index));\n+}\n+\n /* Default implementation of function_base::call_properties, with conservatively\n    correct behavior for floating-point instructions.  */\n inline unsigned int\n@@ -463,6 +483,22 @@ function_base::apply_vl_p () const\n   return true;\n }\n \n+/* We choose to apply tail policy operand by default since most of the\n+   intrinsics has tail policy operand.  */\n+inline bool\n+function_base::apply_tail_policy_p () const\n+{\n+  return true;\n+}\n+\n+/* We choose to apply mask policy operand by default since most of the\n+   intrinsics has mask policy operand.  */\n+inline bool\n+function_base::apply_mask_policy_p () const\n+{\n+  return true;\n+}\n+\n /* Since most of intrinsics can be overloaded, we set it true by default.  */\n inline bool\n function_base::can_be_overloaded_p (enum predication_type_index) const"}, {"sha": "2ac75b3f94c7983b116112e9c05249c41d83a0e1", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -18,6 +18,18 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+(define_c_enum \"unspec\" [\n+  UNSPEC_VSETVL\n+  UNSPEC_VUNDEF\n+  UNSPEC_VPREDICATE\n+  UNSPEC_VLMAX\n+  UNSPEC_STRIDED\n+\n+  ;; It's used to specify ordered/unorderd operation.\n+  UNSPEC_ORDERED\n+  UNSPEC_UNORDERED\n+])\n+\n (define_mode_iterator V [\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n@@ -35,6 +47,75 @@\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n+(define_mode_iterator VNX1_QHSD [\n+  VNx1QI VNx1HI VNx1SI\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VNX2_QHSD [\n+  VNx2QI VNx2HI VNx2SI\n+  (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VNX4_QHSD [\n+  VNx4QI VNx4HI VNx4SI\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VNX8_QHSD [\n+  VNx8QI VNx8HI VNx8SI\n+  (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VNX16_QHS [\n+  VNx16QI VNx16HI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx16SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX32_QH [\n+  VNx32QI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX64_Q [\n+  (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX1_QHSDI [\n+  VNx1QI VNx1HI VNx1SI\n+  (VNx1DI \"TARGET_64BIT && TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX2_QHSDI [\n+  VNx2QI VNx2HI VNx2SI\n+  (VNx2DI \"TARGET_64BIT && TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX4_QHSDI [\n+  VNx4QI VNx4HI VNx4SI\n+  (VNx4DI \"TARGET_64BIT && TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX8_QHSDI [\n+  VNx8QI VNx8HI VNx8SI\n+  (VNx8DI \"TARGET_64BIT && TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX16_QHSI [\n+  VNx16QI VNx16HI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VNX32_QHI [\n+  VNx32QI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_iterator V_WHOLE [\n   (VNx4QI \"TARGET_MIN_VLEN == 32\") VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   (VNx2HI \"TARGET_MIN_VLEN == 32\") VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n@@ -90,3 +171,9 @@\n   (VNx1SF \"32\") (VNx2SF \"32\") (VNx4SF \"32\") (VNx8SF \"32\") (VNx16SF \"32\")\n   (VNx1DF \"64\") (VNx2DF \"64\") (VNx4DF \"64\") (VNx8DF \"64\")\n ])\n+\n+(define_int_iterator ORDER [UNSPEC_ORDERED UNSPEC_UNORDERED])\n+\n+(define_int_attr order [\n+  (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n+])"}, {"sha": "403d2f6cda372dfb6d3a53c2555503c3aa92c054", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 294, "deletions": 15, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9bcb6c7ec70aba260a388469fd88f31fe08d15/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=6c9bcb6c7ec70aba260a388469fd88f31fe08d15", "patch": "@@ -28,14 +28,6 @@\n \n (include \"vector-iterators.md\")\n \n-(define_c_enum \"unspec\" [\n-  UNSPEC_VSETVL\n-  UNSPEC_VUNDEF\n-  UNSPEC_VPREDICATE\n-  UNSPEC_VLMAX\n-  UNSPEC_STRIDED\n-])\n-\n (define_constants [\n    (INVALID_ATTRIBUTE            255)\n ])\n@@ -149,7 +141,7 @@\n \n ;; It is valid for instruction that require sew/lmul ratio.\n (define_attr \"ratio\" \"\"\n-  (cond [(eq_attr \"type\" \"vimov,vfmov\")\n+  (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -199,21 +191,24 @@\n \n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n-\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu\")\n+\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The index of operand[] to get the avl op.\n (define_attr \"vl_op_idx\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts\")\n+  (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts,vstux,vstox\")\n \t   (const_int 4)\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n \t ;; wheras it is pred_strided_load if operands[3] is vector mode.\n          (eq_attr \"type\" \"vlds\")\n \t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n              (const_int 5)\n-             (const_int 4))]\n+             (const_int 4))\n+\n+\t (eq_attr \"type\" \"vldux,vldox\")\n+\t   (const_int 5)]\n   (const_int INVALID_ATTRIBUTE)))\n \n ;; The tail policy op value.\n@@ -226,7 +221,10 @@\n \t (eq_attr \"type\" \"vlds\")\n \t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n \t     (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n-\t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))]\n+\t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n+\n+\t (eq_attr \"type\" \"vldux,vldox\")\n+\t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The mask policy op value.\n@@ -239,7 +237,10 @@\n \t (eq_attr \"type\" \"vlds\")\n \t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n \t     (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n-\t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))]\n+\t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n+\n+\t (eq_attr \"type\" \"vldux,vldox\")\n+\t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The avl type value.\n@@ -254,7 +255,12 @@\n \t (eq_attr \"type\" \"vlds\")\n \t   (if_then_else (match_test \"VECTOR_MODE_P (GET_MODE (operands[3]))\")\n \t     (const_int INVALID_ATTRIBUTE)\n-\t     (symbol_ref \"INTVAL (operands[7])\"))]\n+\t     (symbol_ref \"INTVAL (operands[7])\"))\n+\n+\t (eq_attr \"type\" \"vldux,vldox\")\n+\t   (symbol_ref \"INTVAL (operands[8])\")\n+\t (eq_attr \"type\" \"vstux,vstox\")\n+\t   (symbol_ref \"INTVAL (operands[5])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; -----------------------------------------------------------------\n@@ -832,3 +838,276 @@\n   \"vsse<sew>.v\\t%3,%0,%z2%p1\"\n   [(set_attr \"type\" \"vsts\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated indexed loads/stores\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 7.6. Vector Indexed Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_indexed_<order>load<VNX1_QHSD:mode><VNX1_QHSDI:mode>\"\n+  [(set (match_operand:VNX1_QHSD 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX1_QHSD\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX1_QHSD\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX1_QHSDI 4 \"register_operand\" \" vr\")] ORDER)\n+\t  (match_operand:VNX1_QHSD 2 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX1_QHSDI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX1_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX1_QHSD:mode><VNX1_QHSDI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX1_QHSDI 2 \"register_operand\" \"  vr\")\n+\t   (match_operand:VNX1_QHSD 3 \"register_operand\"  \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX1_QHSDI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX1_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX2_QHSD:mode><VNX2_QHSDI:mode>\"\n+  [(set (match_operand:VNX2_QHSD 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX2_QHSD\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX2_QHSD\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX2_QHSDI 4 \"register_operand\" \" vr\")] ORDER)\n+\t  (match_operand:VNX2_QHSD 2 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX2_QHSDI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX2_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX2_QHSD:mode><VNX2_QHSDI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX2_QHSDI 2 \"register_operand\" \"  vr\")\n+\t   (match_operand:VNX2_QHSD 3 \"register_operand\"  \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX2_QHSDI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX2_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX4_QHSD:mode><VNX4_QHSDI:mode>\"\n+  [(set (match_operand:VNX4_QHSD 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX4_QHSD\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX4_QHSD\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX4_QHSDI 4 \"register_operand\" \" vr\")] ORDER)\n+\t  (match_operand:VNX4_QHSD 2 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX4_QHSDI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX4_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX4_QHSD:mode><VNX4_QHSDI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX4_QHSDI 2 \"register_operand\" \"  vr\")\n+\t   (match_operand:VNX4_QHSD 3 \"register_operand\"  \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX4_QHSDI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX4_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX8_QHSD:mode><VNX8_QHSDI:mode>\"\n+  [(set (match_operand:VNX8_QHSD 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX8_QHSD\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX8_QHSD\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX8_QHSDI 4 \"register_operand\" \" vr\")] ORDER)\n+\t  (match_operand:VNX8_QHSD 2 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX8_QHSDI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX8_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX8_QHSD:mode><VNX8_QHSDI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX8_QHSDI 2 \"register_operand\" \"  vr\")\n+\t   (match_operand:VNX8_QHSD 3 \"register_operand\"  \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX8_QHSDI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX8_QHSD:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX16_QHS:mode><VNX16_QHSI:mode>\"\n+  [(set (match_operand:VNX16_QHS 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX16_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX16_QHS\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX16_QHSI 4 \"register_operand\" \" vr\")] ORDER)\n+\t  (match_operand:VNX16_QHS 2 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX16_QHSI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX16_QHS:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX16_QHS:mode><VNX16_QHSI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX16_QHSI 2 \"register_operand\" \"  vr\")\n+\t   (match_operand:VNX16_QHS 3 \"register_operand\"  \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX16_QHSI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX16_QHS:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX32_QH:mode><VNX32_QHI:mode>\"\n+  [(set (match_operand:VNX32_QH 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX32_QH\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX32_QH\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX32_QHI 4 \"register_operand\"  \" vr\")] ORDER)\n+\t  (match_operand:VNX32_QH 2 \"vector_merge_operand\"  \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX32_QHI:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX32_QH:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX32_QH:mode><VNX32_QHI:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX32_QHI 2 \"register_operand\"  \"  vr\")\n+\t   (match_operand:VNX32_QH 3 \"register_operand\"   \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX32_QHI:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX32_QH:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>load<VNX64_Q:mode><VNX64_Q:mode>\"\n+  [(set (match_operand:VNX64_Q 0 \"register_operand\"      \"=&vr\")\n+\t(if_then_else:VNX64_Q\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \"vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \"   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VNX64_Q\n+\t    [(match_operand 3 \"pmode_register_operand\"    \"    r\")\n+\t     (mem:BLK (scratch))\n+\t     (match_operand:VNX64_Q 4 \"register_operand\"    \" vr\")] ORDER)\n+\t  (match_operand:VNX64_Q 2 \"vector_merge_operand\"   \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vl<order>xei<VNX64_Q:sew>.v\\t%0,(%3),%4%p1\"\n+  [(set_attr \"type\" \"vld<order>x\")\n+   (set_attr \"mode\" \"<VNX64_Q:MODE>\")])\n+\n+(define_insn \"@pred_indexed_<order>store<VNX64_Q:mode><VNX64_Q:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(unspec:<VM>\n+\t    [(match_operand:<VM> 0 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand 1 \"pmode_register_operand\"      \"   r\")\n+\t   (match_operand:VNX64_Q 2 \"register_operand\"    \"  vr\")\n+\t   (match_operand:VNX64_Q 3 \"register_operand\"    \"  vr\")] ORDER))]\n+  \"TARGET_VECTOR\"\n+  \"vs<order>xei<VNX64_Q:sew>.v\\t%3,(%1),%2%p0\"\n+  [(set_attr \"type\" \"vst<order>x\")\n+   (set_attr \"mode\" \"<VNX64_Q:MODE>\")])"}]}