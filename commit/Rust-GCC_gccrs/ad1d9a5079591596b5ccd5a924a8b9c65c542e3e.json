{"sha": "ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxZDlhNTA3OTU5MTU5NmI1Y2NkNWE5MjRhOGI5YzY1YzU0MmUzZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-25T06:05:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-25T06:05:26Z"}, "message": "compare-elim.c (try_eliminate_compare): Also handle operands with implicit extensions.\n\n\t* compare-elim.c (try_eliminate_compare): Also handle operands with\n\timplicit extensions.\n\nFrom-SVN: r186805", "tree": {"sha": "8e2667d3d240760a7fad8f32c9052da4eb73a1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e2667d3d240760a7fad8f32c9052da4eb73a1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e/comments", "author": null, "committer": null, "parents": [{"sha": "2b210b6f0b56e12be0d6251805321dd078d7c5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b210b6f0b56e12be0d6251805321dd078d7c5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b210b6f0b56e12be0d6251805321dd078d7c5d6"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "c7d8eac13ce047963a99d05c2b505cbdd20f2fdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "patch": "@@ -1,3 +1,8 @@\n+2012-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* compare-elim.c (try_eliminate_compare): Also handle operands with\n+\timplicit extensions.\n+\n 2012-04-25  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000 (SAVE_INLINE_VRS, REST_INLINE_VRS,\n@@ -205,8 +210,7 @@\n 2012-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/53084\n-\t* varasm.c (compute_reloc_for_constant): Handle ADDR_EXPR\n-\tof MEM_REF.\n+\t* varasm.c (compute_reloc_for_constant): Handle ADDR_EXPR of MEM_REF.\n \t(output_addressed_constants): Likewise.\n \n \tPR middle-end/52999"}, {"sha": "f11a7245caa9909811bc1c6f3808b9191f13da26", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "patch": "@@ -563,10 +563,26 @@ try_eliminate_compare (struct comparison *cmp)\n      Validate that PREV_CLOBBER itself does in fact refer to IN_A.  Do\n      recall that we've already validated the shape of PREV_CLOBBER.  */\n   x = XVECEXP (PATTERN (insn), 0, 0);\n-  if (!rtx_equal_p (SET_DEST (x), in_a))\n+  if (rtx_equal_p (SET_DEST (x), in_a))\n+    cmp_src = SET_SRC (x);\n+\n+  /* Also check operations with implicit extensions, e.g.:\n+     [(set (reg:DI)\n+\t   (zero_extend:DI (plus:SI (reg:SI)(reg:SI))))\n+      (set (reg:CCZ flags)\n+\t   (compare:CCZ\n+\t     (plus:SI (reg:SI)(reg:SI))\n+\t     (const_int 0)))]\t\t\t\t*/\n+  else if (REG_P (SET_DEST (x))\n+\t   && REG_P (in_a)\n+\t   && REGNO (SET_DEST (x)) == REGNO (in_a)\n+\t   && (GET_CODE (SET_SRC (x)) == ZERO_EXTEND\n+\t       || GET_CODE (SET_SRC (x)) == SIGN_EXTEND)\n+\t   && GET_MODE (XEXP (SET_SRC (x), 0)) == GET_MODE (in_a))\n+    cmp_src = XEXP (SET_SRC (x), 0);\n+  else\n     return false;\n-  cmp_src = SET_SRC (x);\n-  \n+\n   /* Determine if we ought to use a different CC_MODE here.  */\n   flags = maybe_select_cc_mode (cmp, cmp_src, cmp->in_b);\n   if (flags == NULL)"}]}