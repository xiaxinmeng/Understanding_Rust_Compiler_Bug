{"sha": "8f2e3902df05cd786280fa561b9b448de4547583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyZTM5MDJkZjA1Y2Q3ODYyODBmYTU2MWI5YjQ0OGRlNDU0NzU4Mw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2002-06-19T23:18:00Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-06-19T23:18:00Z"}, "message": "mips.c (symbol_operand): New function.\n\n2002-06-19  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.c (symbol_operand): New function.\n\t(mips_emit_prefetch): Ditto.\n\t* config/mips/mips-protos.h: Define.\n\t* config/mips/mips.h (ISA_HAS_PREFETCH): Define.\n\t(CONSTANT_ADDRESS_P): Adjust, use TARGET_GAS.\n\t(LEGITIMIZE_ADDRESS): Ditto.\n\t* config/mips/mips.md (prefetch, prefetch_si_address,\n\tprefetch_si, prefetch_di_address, prefetch_di): New patterns.\n\nFrom-SVN: r54805", "tree": {"sha": "f5a12fcb17f46b0537b1d83585d230821421755e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a12fcb17f46b0537b1d83585d230821421755e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2e3902df05cd786280fa561b9b448de4547583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2e3902df05cd786280fa561b9b448de4547583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2e3902df05cd786280fa561b9b448de4547583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2e3902df05cd786280fa561b9b448de4547583/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba3292dbb7ccbe4941d2fd1661f99d1d4da5e75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3292dbb7ccbe4941d2fd1661f99d1d4da5e75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3292dbb7ccbe4941d2fd1661f99d1d4da5e75d"}], "stats": {"total": 202, "additions": 160, "deletions": 42}, "files": [{"sha": "326e0cd48d4e1feac7b942dac53c3388357f1b2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2e3902df05cd786280fa561b9b448de4547583", "patch": "@@ -1,3 +1,14 @@\n+2002-06-19  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips.c (symbol_operand): New function.\n+\t(mips_emit_prefetch): Ditto.\n+\t* config/mips/mips-protos.h: Define.\n+\t* config/mips/mips.h (ISA_HAS_PREFETCH): Define.\n+\t(CONSTANT_ADDRESS_P): Adjust, use TARGET_GAS.\n+\t(LEGITIMIZE_ADDRESS): Ditto.\n+\t* config/mips/mips.md (prefetch, prefetch_si_address,\n+\tprefetch_si, prefetch_di_address, prefetch_di): New patterns.\n+\n 2002-06-19  Eric Christopher  <echristo@redhat.com>\n \n \t* config/fp-bit.h: Add unordered defines for gofast."}, {"sha": "2de221bd1366694a2bcb27ad501b75f259df8dca", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=8f2e3902df05cd786280fa561b9b448de4547583", "patch": "@@ -98,6 +98,7 @@ extern const char      *mips_fill_delay_slot PARAMS ((const char *,\n \t\t\t\t\t\t      rtx));\n extern const char      *mips_move_1word PARAMS ((rtx *, rtx, int));\n extern const char      *mips_move_2words PARAMS ((rtx *, rtx));\n+extern const char      *mips_emit_prefetch PARAMS ((rtx *));\n extern const char      *mips_restore_gp PARAMS ((rtx *, rtx));\n extern const char      *output_block_move PARAMS ((rtx, rtx *, int,\n \t\t\t\t\t\t   enum block_move_type));"}, {"sha": "5ee1805de3c234b0cfe2d41cf027154e0415a87e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8f2e3902df05cd786280fa561b9b448de4547583", "patch": "@@ -90,6 +90,8 @@ int coprocessor_operand \t\t\tPARAMS ((rtx,\n \t\t\t\t\t\t\tenum machine_mode));\n int coprocessor2_operand \t\t\tPARAMS ((rtx,\n \t\t\t\t\t\t\tenum machine_mode));\n+int symbolic_operand\t\t\t\tPARAMS ((rtx,\n+\t\t\t\t\t\t\t enum machine_mode));\n static int m16_check_op\t\t\t\tPARAMS ((rtx, int, int, int));\n static void block_move_loop\t\t\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t\t unsigned int,\n@@ -1384,6 +1386,26 @@ coprocessor2_operand (op, mode)\n \t  && REGNO (op) <= COP2_REG_LAST);\n }\n \n+/* Returns 1 if OP is a symbolic operand, i.e. a symbol_ref or a label_ref,\n+   possibly with an offset.  */\n+\n+int\n+symbolic_operand (op, mode)\n+      register rtx op;\n+      enum machine_mode mode;\n+{\n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+  if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)\n+    return 1;\n+  if (GET_CODE (op) == CONST\n+      && GET_CODE (XEXP (op,0)) == PLUS\n+      && GET_CODE (XEXP (XEXP (op,0), 0)) == SYMBOL_REF\n+      && GET_CODE (XEXP (XEXP (op,0), 1)) == CONST_INT)\n+    return 1;\n+  return 0;\n+}\n+\n /* Return nonzero if we split the address into high and low parts.  */\n \n /* ??? We should also handle reg+array somewhere.  We get four\n@@ -10394,6 +10416,37 @@ mips_issue_rate ()\n   return rate;\n }\n \n+const char *\n+mips_emit_prefetch (operands)\n+     rtx operands[];\n+{\n+ /* For the mips32/64 architectures the hint fields are arranged\n+    by operation (load/store) and locality (normal/streamed/retained).\n+    Irritatingly, numbers 2 and 3 are reserved leaving no simple\n+    algorithm for figuring the hint.  */\n+\n+    int write = INTVAL (operands[1]);\n+    int locality = INTVAL (operands[2]);\n+\n+    static const char * const alt[2][4] = {\n+\t{\n+\t \"pref\\t0,%a0\",\n+\t \"pref\\t4,%a0\",\n+\t \"pref\\t4,%a0\",\n+\t \"pref\\t6,%a0\"\n+\t},\n+\t{\n+\t \"pref\\t1,%a0\",\n+\t \"pref\\t5,%a0\",\n+\t \"pref\\t5,%a0\",\n+\t \"pref\\t7,%a0\"\n+\t}\n+    };\n+\n+    return alt[write][locality];\n+}\n+\n+\n \f\n #ifdef TARGET_IRIX6\n /* Output assembly to switch to section NAME with attribute FLAGS.  */"}, {"sha": "54cf4943e418f797ea20daa3509dafc0d65cec70", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 50, "deletions": 42, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8f2e3902df05cd786280fa561b9b448de4547583", "patch": "@@ -685,7 +685,7 @@ extern void\t\tsbss_section PARAMS ((void));\n   SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n   { \"cpu=\",\t&mips_cpu_string,\t\t\t\t\t\\\n       N_(\"Specify CPU for scheduling purposes\")},\t\t\t\\\n-  { \"tune=\",    &mips_tune_string,                                   \\\n+  { \"tune=\",    &mips_tune_string,\t\t\t                \\\n       N_(\"Specify CPU for scheduling purposes\")},                       \\\n   { \"arch=\",    &mips_arch_string,                                      \\\n       N_(\"Specify CPU for code generation purposes\")},                  \\\n@@ -725,14 +725,14 @@ extern void\t\tsbss_section PARAMS ((void));\n #define HAVE_SQRT_P()\t\t(!ISA_MIPS1)\n \n /* ISA has instructions for managing 64 bit fp and gp regs (eg. mips3).  */\n-#define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t        \\\n-\t\t\t\t || ISA_MIPS4\t\t\\\n+#define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t\t\t\t\\\n+\t\t\t\t || ISA_MIPS4\t\t\t\t\\\n                                  || ISA_MIPS64)\n \n /* ISA has branch likely instructions (eg. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n-#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1                          \\\n+#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has the conditional move instructions introduced in mips4.  */\n@@ -781,6 +781,12 @@ extern void\t\tsbss_section PARAMS ((void));\n #define ISA_HAS_DCLZ_DCLO       (ISA_MIPS64\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has data prefetch instruction.  */\n+#define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)\t       \t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n    -mips2 sets -mfp32 and -mgp32.  This can be overridden by an explicit\n    -mfp32, -mfp64, -mgp32 or -mgp64.  -mfp64 sets MASK_FLOAT64 in\n@@ -1060,7 +1066,7 @@ extern int mips_abi;\n %{mips3:%{!msingle-float:%{!m4650:-mfp64}} -mgp64} \\\n %{mips4:%{!msingle-float:%{!m4650:-mfp64}} -mgp64} \\\n %{mips32:-mfp32 -mgp32} \\\n-%{mips64:%{!msingle-float:%{!m4650:-mfp64}} -mgp64} \\\n+%{mips64:%{!msingle-float:-mfp64} -mgp64} \\\n %{mfp64:%{msingle-float:%emay not use both -mfp64 and -msingle-float}} \\\n %{mfp64:%{m4650:%emay not use both -mfp64 and -m4650}} \\\n %{mint64|mlong64|mlong32:-mexplicit-type-size }\\\n@@ -1343,21 +1349,21 @@ do {\t\t\t\t\t\t\t\\\n \n #define PUT_SDB_FUNCTION_START(LINE)\n \n-#define PUT_SDB_FUNCTION_END(LINE)            \\\n-do {                                                  \\\n-  extern FILE *asm_out_text_file;             \\\n+#define PUT_SDB_FUNCTION_END(LINE)\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  extern FILE *asm_out_text_file;\t\t\t\\\n   ASM_OUTPUT_SOURCE_LINE (asm_out_text_file, LINE + sdb_begin_function_line); \\\n } while (0)\n \n #define PUT_SDB_EPILOGUE_END(NAME)\n \n-#define PUT_SDB_SRC_FILE(FILENAME) \\\n+#define PUT_SDB_SRC_FILE(FILENAME)\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\\\n-  output_file_directive (asm_out_text_file, (FILENAME)); \\\n+  output_file_directive (asm_out_text_file, (FILENAME));\\\n } while (0)\n \n-#define SDB_GENERATE_FAKE(BUFFER, NUMBER) \\\n+#define SDB_GENERATE_FAKE(BUFFER, NUMBER)\t\t\\\n   sprintf ((BUFFER), \".%dfake\", (NUMBER));\n \n /* Correct the offset of automatic variables and arguments.  Note that\n@@ -1367,9 +1373,9 @@ do {\t\t\t\t\t\t\t\\\n    the frame pointer to be the stack pointer after the initial\n    adjustment.  */\n \n-#define DEBUGGER_AUTO_OFFSET(X)  \\\n+#define DEBUGGER_AUTO_OFFSET(X)\t\t\t\t\\\n   mips_debugger_offset (X, (HOST_WIDE_INT) 0)\n-#define DEBUGGER_ARG_OFFSET(OFFSET, X)  \\\n+#define DEBUGGER_ARG_OFFSET(OFFSET, X)\t\t\t\\\n   mips_debugger_offset (X, (HOST_WIDE_INT) OFFSET)\n \n /* Tell collect that the object format is ECOFF */\n@@ -2976,15 +2982,17 @@ typedef struct mips_args {\n    assembler would use $at as a temp to load in the large offset.  In this\n    case $at is already in use.  We convert such problem addresses to\n    `la $5,s;sw $4,70000($5)' via LEGITIMIZE_ADDRESS.  */\n-/* ??? SGI Irix 6 assembler fails for CONST address, so reject them.  */\n+/* ??? SGI Irix 6 assembler fails for CONST address, so reject them\n+   when !TARGET_GAS.  */\n+/* We should be rejecting everything but const addresses.  */\n #define CONSTANT_ADDRESS_P(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n     || GET_CODE (X) == CONST_INT || GET_CODE (X) == HIGH\t\t\\\n     || (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n \t&& ! (flag_pic && pic_address_needs_scratch (X))\t\t\\\n-\t&& (mips_abi == ABI_32\t\t\t\t\t\t\\\n-\t    || mips_abi == ABI_O64\t\t\t\t\t\\\n-\t    || mips_abi == ABI_EABI)))\n+\t&& (!TARGET_GAS)\t\t\t\t\t\t\\\n+\t&& (mips_abi == ABI_N32\t\t\t\t\t\t\\\n+\t    || mips_abi == ABI_64)))\n \n /* Define this, so that when PIC, reload won't try to reload invalid\n    addresses which require two reload registers.  */\n@@ -3075,9 +3083,9 @@ typedef struct mips_args {\n   if (GET_CODE (xinsn) == CONST\t\t\t\t\t\t\\\n       && ((flag_pic && pic_address_needs_scratch (xinsn))\t\t\\\n \t  /* ??? SGI's Irix 6 assembler can't handle CONST.  */\t\t\\\n-\t  || (mips_abi != ABI_32 \t\t\t\t\t\\\n-\t      && mips_abi != ABI_O64\t\t\t\t\t\\\n-\t      && mips_abi != ABI_EABI)))\t\t\t\t\\\n+\t  || (!TARGET_GAS\t\t\t\t\t\t\\\n+\t      && (mips_abi == ABI_N32 \t\t\t\t\t\\\n+\t          || mips_abi == ABI_64))))    \t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx ptr_reg = gen_reg_rtx (Pmode);\t\t\t\t\\\n       rtx constant = XEXP (XEXP (xinsn, 0), 1);\t\t\t\t\\\n@@ -3447,35 +3455,35 @@ typedef struct mips_args {\n       enum machine_mode xmode = GET_MODE (X);\t\t\t\t\\\n       if (xmode == SFmode)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  if (TUNE_MIPS3000\t\t\t\t\\\n-\t      || TUNE_MIPS3900\t\t\t\t\\\n-\t      || TUNE_MIPS5000)\t\t\t\t\\\n+\t  if (TUNE_MIPS3000\t\t\t\t\t\t\\\n+\t      || TUNE_MIPS3900\t\t\t\t\t\t\\\n+\t      || TUNE_MIPS5000)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (4);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (5);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (7);\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (xmode == DFmode)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  if (TUNE_MIPS3000\t\t\t\t\\\n-\t      || TUNE_MIPS3900\t\t\t\t\\\n-\t      || TUNE_MIPS5000)\t\t\t\t\\\n+\t  if (TUNE_MIPS3000\t\t\t\t\t\t\\\n+\t      || TUNE_MIPS3900\t\t\t\t\t\t\\\n+\t      || TUNE_MIPS5000)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (5);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (6);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (8);\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (TUNE_MIPS3000)\t\t\t\t\t\\\n+      if (TUNE_MIPS3000)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (12);\t\t\t\t\t\\\n-      else if (TUNE_MIPS3900)\t\t\t\t\\\n+      else if (TUNE_MIPS3900)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (2);\t\t\t\t\t\\\n-      else if (TUNE_MIPS6000)\t\t\t\t\\\n+      else if (TUNE_MIPS6000)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (17);\t\t\t\t\t\\\n-      else if (TUNE_MIPS5000)\t\t\t\t\\\n+      else if (TUNE_MIPS5000)\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (5);\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (10);\t\t\t\t\t\\\n@@ -3487,21 +3495,21 @@ typedef struct mips_args {\n       enum machine_mode xmode = GET_MODE (X);\t\t\t\t\\\n       if (xmode == SFmode)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  if (TUNE_MIPS3000\t\t\t\t\\\n-              || TUNE_MIPS3900)\t\t\t\t\\\n+\t  if (TUNE_MIPS3000\t\t\t\t\t\t\\\n+              || TUNE_MIPS3900)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (12);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (15);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (23);\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (xmode == DFmode)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  if (TUNE_MIPS3000\t\t\t\t\\\n-              || TUNE_MIPS3900)\t\t\t\t\\\n+\t  if (TUNE_MIPS3000\t\t\t\t\t\t\\\n+              || TUNE_MIPS3900)\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (19);\t\t\t\t\t\\\n-\t  else if (TUNE_MIPS6000)\t\t\t\t\\\n+\t  else if (TUNE_MIPS6000)\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (16);\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    return COSTS_N_INSNS (36);\t\t\t\t\t\\\n@@ -3511,12 +3519,12 @@ typedef struct mips_args {\n \t\t\t\t\t\t\t\t\t\\\n   case UDIV:\t\t\t\t\t\t\t\t\\\n   case UMOD:\t\t\t\t\t\t\t\t\\\n-    if (TUNE_MIPS3000\t\t\t\t\t\\\n-        || TUNE_MIPS3900)\t\t\t\t\t\\\n+    if (TUNE_MIPS3000\t\t\t\t\t\t\t\\\n+        || TUNE_MIPS3900)\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (35);\t\t\t\t\t\\\n-    else if (TUNE_MIPS6000)\t\t\t\t\\\n+    else if (TUNE_MIPS6000)\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (38);\t\t\t\t\t\\\n-    else if (TUNE_MIPS5000)\t\t\t\t\\\n+    else if (TUNE_MIPS5000)\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (36);\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (69);\t\t\t\t\t\\"}, {"sha": "fece404b40b035c2dcf3b587a6a5ebc4f109e62d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2e3902df05cd786280fa561b9b448de4547583/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8f2e3902df05cd786280fa561b9b448de4547583", "patch": "@@ -10540,6 +10540,51 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2\"\n ;;  ....................\n ;;\n \n+\n+(define_expand \"prefetch\"\n+  [(prefetch (match_operand 0 \"address_operand\" \"\")\n+\t     (match_operand 1 \"const_int_operand\" \"\")\n+\t     (match_operand 2 \"const_int_operand\" \"\"))]\n+  \"ISA_HAS_PREFETCH\"\n+\"{\n+     if (symbolic_operand (operands[0], GET_MODE (operands[0])))\n+\toperands[0] = force_reg (GET_MODE (operands[0]), operands[0]);\n+}\")\n+\n+(define_insn \"prefetch_si_address\"\n+  [(prefetch (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t      (match_operand:SI 3 \"const_int_operand\" \"i\"))\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCH && Pmode == SImode\"\n+  \"* return mips_emit_prefetch (operands);\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"prefetch_si\"\n+  [(prefetch (match_operand:SI 0 \"register_operand\" \"r\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCH && Pmode == SImode\"\n+  \"* return mips_emit_prefetch (operands);\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"prefetch_di_address\"\n+  [(prefetch (plus:DI (match_operand:DI 0 \"se_register_operand\" \"r\")\n+\t\t      (match_operand:DI 3 \"const_int_operand\" \"i\"))\n+\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCH && Pmode == DImode\"\n+  \"* return mips_emit_prefetch (operands);\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"prefetch_di\"\n+  [(prefetch (match_operand:DI 0 \"se_register_operand\" \"r\")\n+\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCH && Pmode == DImode\"\n+  \"* return mips_emit_prefetch (operands);\"\n+  [(set_attr \"type\" \"load\")])\n+\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\""}]}