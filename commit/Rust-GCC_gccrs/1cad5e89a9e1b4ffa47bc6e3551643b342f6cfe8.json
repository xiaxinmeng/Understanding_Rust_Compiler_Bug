{"sha": "1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhZDVlODlhOWUxYjRmZmE0N2JjNmUzNTUxNjQzYjM0MmY2Y2ZlOA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-02-10T15:37:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-02-10T15:53:12Z"}, "message": "arm: correct constraints on movsi_compare0 [PR91913]\n\nThe peephole that detects a mov of one register to another followed by\na comparison of the original register against zero is only used in Arm\nstate; but the instruction that matches this is generic to all 32-bit\ncompilation states.  That instruction lacks support for SP which is\npermitted in Arm state, but has restrictions in Thumb2 code.\n\nThis patch fixes the problem by allowing SP when in ARM state for all\nregisters; in Thumb state it allows SP only as a source when the\nregister really is copied to another target.\n\n\t* config/arm/arm.md (movsi_compare0): Allow SP as a source register\n\tin Thumb state and also as a destination in Arm state.  Add T16\n\tvariants.", "tree": {"sha": "467db9181b039c80af070cadd4f7a45a013e83bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467db9181b039c80af070cadd4f7a45a013e83bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8/comments", "author": null, "committer": null, "parents": [{"sha": "339ab27a7de411ec69d35ccb1f3c5b0877367660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339ab27a7de411ec69d35ccb1f3c5b0877367660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339ab27a7de411ec69d35ccb1f3c5b0877367660"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "60bd34758c0c5f00c7e5bd63f0acf24e8538ffee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "patch": "@@ -1,3 +1,10 @@\n+2020-02-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/91913\n+\t* config/arm/arm.md (movsi_compare0): Allow SP as a source register\n+\tin Thumb state and also as a destination in Arm state.  Add T16\n+\tvariants.\n+\n 2020-02-10  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* md.texi (Define Subst): Match closing paren in example."}, {"sha": "ab277996462cbb99b4338144ca3f87d75f9fe0ce", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1cad5e89a9e1b4ffa47bc6e3551643b342f6cfe8", "patch": "@@ -6627,16 +6627,21 @@\n \n (define_insn \"*movsi_compare0\"\n   [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"0,r\")\n+\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"0,0,l,rk,rk\")\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,rk,l,r,rk\")\n \t(match_dup 1))]\n   \"TARGET_32BIT\"\n   \"@\n    cmp%?\\\\t%0, #0\n+   cmp%?\\\\t%0, #0\n+   subs%?\\\\t%0, %1, #0\n+   subs%?\\\\t%0, %1, #0\n    subs%?\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"alus_imm,alus_imm\")]\n+   (set_attr \"arch\" \"t2,*,t2,t2,a\")\n+   (set_attr \"type\" \"alus_imm\")\n+   (set_attr \"length\" \"2,4,2,4,4\")]\n )\n \n ;; Subroutine to store a half word from a register into memory."}]}