{"sha": "c8a0a219fda4028ee80aa310588652d66a070ff5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhMGEyMTlmZGE0MDI4ZWU4MGFhMzEwNTg4NjUyZDY2YTA3MGZmNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-04-21T21:47:35Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-04-21T21:47:35Z"}, "message": "re PR c/30265 (Compound literal can cause invalid gimple)\n\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C/30265\n        * c-gimplifier.c (gimplify_compound_literal_expr): Mark the\n        decl as addressable if the compound literal was marked as\n        addressable.\n        Mark the decl as a gimple register if it is a complex or\n        vector decl and does not live in memory.\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C/30265\n        * gcc.c-torture/compile/compound-literal-2.c: New testcase.\n        * gcc.c-torture/compile/compound-literal-3.c: New testcase.\n\nFrom-SVN: r124024", "tree": {"sha": "b4183139462efcda6cbc5858a9ab77488e5d3493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4183139462efcda6cbc5858a9ab77488e5d3493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a0a219fda4028ee80aa310588652d66a070ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a0a219fda4028ee80aa310588652d66a070ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a0a219fda4028ee80aa310588652d66a070ff5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a0a219fda4028ee80aa310588652d66a070ff5/comments", "author": null, "committer": null, "parents": [{"sha": "c284e499898990a4d072f2b4ce7ff95571867ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c284e499898990a4d072f2b4ce7ff95571867ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c284e499898990a4d072f2b4ce7ff95571867ea2"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "8f74ec8492f0bc5c342772af077013d33d36a90d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8a0a219fda4028ee80aa310588652d66a070ff5", "patch": "@@ -1,3 +1,12 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C/30265\n+\t* c-gimplifier.c (gimplify_compound_literal_expr): Mark the\n+\tdecl as addressable if the compound literal was marked as\n+\taddressable.\n+\tMark the decl as a gimple register if it is a complex or\n+\tvector decl and does not live in memory.\n+\n 2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* tree.h (GIMPLE_TUPLE_P): Also true for PHI_NODEs."}, {"sha": "2a3803a6458fe8c8dab1398e39737070799e79a1", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=c8a0a219fda4028ee80aa310588652d66a070ff5", "patch": "@@ -183,6 +183,20 @@ gimplify_compound_literal_expr (tree *expr_p, tree *pre_p)\n {\n   tree decl_s = COMPOUND_LITERAL_EXPR_DECL_STMT (*expr_p);\n   tree decl = DECL_EXPR_DECL (decl_s);\n+  /* Mark the decl as addressable if the compound literal\n+     expression is addressable now, otherwise it is marked too late\n+     after we gimplify the initialization expression.  */\n+  if (TREE_ADDRESSABLE (*expr_p))\n+    TREE_ADDRESSABLE (decl) = 1;\n+\n+  /* Preliminarily mark non-addressed complex variables as eligible\n+     for promotion to gimple registers.  We'll transform their uses\n+     as we find them.  */\n+  if ((TREE_CODE (TREE_TYPE (decl)) == COMPLEX_TYPE\n+       || TREE_CODE (TREE_TYPE (decl)) == VECTOR_TYPE)\n+      && !TREE_THIS_VOLATILE (decl)\n+      && !needs_to_live_in_memory (decl))\n+    DECL_GIMPLE_REG_P (decl) = 1;\n \n   /* This decl isn't mentioned in the enclosing block, so add it to the\n      list of temps.  FIXME it seems a bit of a kludge to say that"}, {"sha": "e5772ffb52f855103a4572fa25cee09d24c06f25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8a0a219fda4028ee80aa310588652d66a070ff5", "patch": "@@ -1,3 +1,9 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C/30265\n+\t* gcc.c-torture/compile/compound-literal-2.c: New testcase.\n+\t* gcc.c-torture/compile/compound-literal-3.c: New testcase.\n+\n 2007-04-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/31136"}, {"sha": "7e2f304005a1032de349c9667e888e8e3ef08cdd", "filename": "gcc/testsuite/gcc.c-torture/compile/compound-literal-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-2.c?ref=c8a0a219fda4028ee80aa310588652d66a070ff5", "patch": "@@ -0,0 +1,8 @@\n+/* PR C/30265, invalid gimple was produced because we did not mark\n+   the compound literal's decl early enough.  */\n+\n+int f(float *);\n+int g(float x)\n+{\n+  return f(&(float){x}) + f(&x);\n+}"}, {"sha": "bcd413c9ca109ae4c3d30f859394e278173294d2", "filename": "gcc/testsuite/gcc.c-torture/compile/compound-literal-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a0a219fda4028ee80aa310588652d66a070ff5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcompound-literal-3.c?ref=c8a0a219fda4028ee80aa310588652d66a070ff5", "patch": "@@ -0,0 +1,8 @@\n+/* PR C/30265, invalid gimple was produced because we did not mark\n+   the compound literal's decl early enough.  */\n+\n+int f(_Complex float *);\n+int g(_Complex float x)\n+{\n+  return f(&(_Complex float){x+1}) + f(&x);\n+}"}]}