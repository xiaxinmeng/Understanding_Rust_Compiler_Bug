{"sha": "6acc594827256e256815741aef5102ca6838fa5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjYzU5NDgyNzI1NmUyNTY4MTU3NDFhZWY1MTAyY2E2ODM4ZmE1Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-05T14:40:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-05T14:40:37Z"}, "message": "[AArch64] Fix some define_insn_and_split conditions\n\nThe split conditions for aarch64_simd_bsldi_internal and\naarch64_simd_bsldi_alt were:\n\n  \"&& GP_REGNUM_P (REGNO (operands[0]))\"\n\nBut since they (deliberately) can be split before reload, the operand\nmatched by register_operand can be a SUBREG rather than a REG.  This\ntriggered a boostrap failure building libgcc with rtl checking enabled.\n\nWhile checking other define_insn_and_splits for the same thing,\nI noticed a couple of SIMD ones were missing the leading \"&&\",\nmeaning that they would trigger even without TARGET_SIMD.  That\nshouldn't matter in practice, since combine should never end up\ngenerating matching rtl, but...\n\n2017-12-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_bsldi_internal)\n\t(aarch64_simd_bsldi_alt): Check REG_P before GP_REGNUM_P.\n\t(aarch64_cm<optab>di, aarch64_cmtstdi): Add leading \"&&\" to\n\tsplit condition.\n\nFrom-SVN: r255423", "tree": {"sha": "91a76fe963fa6fe7d5bed54b2811f6a5527ed8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91a76fe963fa6fe7d5bed54b2811f6a5527ed8b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6acc594827256e256815741aef5102ca6838fa5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acc594827256e256815741aef5102ca6838fa5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acc594827256e256815741aef5102ca6838fa5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acc594827256e256815741aef5102ca6838fa5b/comments", "author": null, "committer": null, "parents": [{"sha": "8c9ee176a61d7591e666700e41af2aadb60b8f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9ee176a61d7591e666700e41af2aadb60b8f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9ee176a61d7591e666700e41af2aadb60b8f6a"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "87d2b12c7a71c8022de18b334b5ec33cd1f29e13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acc594827256e256815741aef5102ca6838fa5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acc594827256e256815741aef5102ca6838fa5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6acc594827256e256815741aef5102ca6838fa5b", "patch": "@@ -1,3 +1,10 @@\n+2017-12-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_bsldi_internal)\n+\t(aarch64_simd_bsldi_alt): Check REG_P before GP_REGNUM_P.\n+\t(aarch64_cm<optab>di, aarch64_cmtstdi): Add leading \"&&\" to\n+\tsplit condition.\n+\n 2017-12-05  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.c (xtensa_asan_shadow_offset): New"}, {"sha": "ae71af8334343a749f11db1801554eac01a33cac", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6acc594827256e256815741aef5102ca6838fa5b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6acc594827256e256815741aef5102ca6838fa5b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=6acc594827256e256815741aef5102ca6838fa5b", "patch": "@@ -2484,7 +2484,7 @@\n   bit\\\\t%0.8b, %2.8b, %1.8b\n   bif\\\\t%0.8b, %3.8b, %1.8b\n   #\"\n-  \"&& GP_REGNUM_P (REGNO (operands[0]))\"\n+  \"&& REG_P (operands[0]) && GP_REGNUM_P (REGNO (operands[0]))\"\n   [(match_dup 1) (match_dup 1) (match_dup 2) (match_dup 3)]\n {\n   /* Split back to individual operations.  If we're before reload, and\n@@ -2526,7 +2526,7 @@\n   bit\\\\t%0.8b, %3.8b, %1.8b\n   bif\\\\t%0.8b, %2.8b, %1.8b\n   #\"\n-  \"&& GP_REGNUM_P (REGNO (operands[0]))\"\n+  \"&& REG_P (operands[0]) && GP_REGNUM_P (REGNO (operands[0]))\"\n   [(match_dup 0) (match_dup 1) (match_dup 2) (match_dup 3)]\n {\n   /* Split back to individual operations.  If we're before reload, and\n@@ -4453,7 +4453,7 @@\n      (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(neg:DI\n \t  (COMPARISONS:DI\n@@ -4516,7 +4516,7 @@\n     (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(neg:DI\n \t  (UCOMPARISONS:DI\n@@ -4587,7 +4587,7 @@\n     (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(neg:DI\n \t  (ne:DI"}]}