{"sha": "b673e7547fb95d1f0d5cd17ae9e3874742cade66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3M2U3NTQ3ZmI5NWQxZjBkNWNkMTdhZTllMzg3NDc0MmNhZGU2Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-16T08:17:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-16T08:20:29Z"}, "message": "cd_dce: Return TODO_update_address_taken from last cd_dce [PR96271]\n\nOn the following testcase, handle_builtin_memcmp in the strlen pass folds\nthe memcmp into comparison of two MEM_REFs.  But nothing triggers updating\nof addressable vars afterwards, so even when the parameters are no longer\naddress taken, we force the parameters to stack and back anyway.\n\nThis patch causes TODO_update_address_taken to happen right before last forwprop\npass (at the end of last cd_dce), so after strlen1 too.\n\n2021-01-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96271\n\t* passes.def: Pass false argument to first two pass_cd_dce\n\tinstances and true to last instance.  Add comment that\n\tlast instance rewrites no longer addressed locals.\n\t* tree-ssa-dce.c (pass_cd_dce): Add update_address_taken_p member and\n\tinitialize it.\n\t(pass_cd_dce::set_pass_param): New method.\n\t(pass_cd_dce::execute): Return TODO_update_address_taken from\n\tlast cd_dce instance.\n\n\t* gcc.target/i386/pr96271.c: New test.", "tree": {"sha": "902a5f562ddc765c1e4788ea54154f00aba50733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/902a5f562ddc765c1e4788ea54154f00aba50733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b673e7547fb95d1f0d5cd17ae9e3874742cade66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b673e7547fb95d1f0d5cd17ae9e3874742cade66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b673e7547fb95d1f0d5cd17ae9e3874742cade66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b673e7547fb95d1f0d5cd17ae9e3874742cade66/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c356f221bbab29bf4d1626d161e0f584dddd600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c356f221bbab29bf4d1626d161e0f584dddd600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c356f221bbab29bf4d1626d161e0f584dddd600"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "e9ed3c7bc57733e1fd8449fe4714c659dc2a95b1", "filename": "gcc/passes.def", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b673e7547fb95d1f0d5cd17ae9e3874742cade66", "patch": "@@ -90,7 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_early_vrp);\n \t  NEXT_PASS (pass_merge_phi);\n           NEXT_PASS (pass_dse);\n-\t  NEXT_PASS (pass_cd_dce);\n+\t  NEXT_PASS (pass_cd_dce, false /* update_address_taken_p */);\n \t  NEXT_PASS (pass_phiopt, true /* early_p */);\n \t  NEXT_PASS (pass_modref);\n \t  NEXT_PASS (pass_tail_recursion);\n@@ -272,7 +272,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_loop_jam);\n \t  /* All unswitching, final value replacement and splitting can expose\n \t     empty loops.  Remove them now.  */\n-\t  NEXT_PASS (pass_cd_dce);\n+\t  NEXT_PASS (pass_cd_dce, false /* update_address_taken_p */);\n \t  NEXT_PASS (pass_iv_canon);\n \t  NEXT_PASS (pass_loop_distribution);\n \t  NEXT_PASS (pass_linterchange);\n@@ -336,7 +336,9 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_warn_restrict);\n       NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_cd_dce);\n+      NEXT_PASS (pass_cd_dce, true /* update_address_taken_p */);\n+      /* After late CD DCE we rewrite no longer addressed locals into SSA\n+\t form if possible.  */\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_fold_builtins);"}, {"sha": "b916bd1e0a183c97ebb132fefa8b683b0c2589d2", "filename": "gcc/testsuite/gcc.target/i386/pr96271.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96271.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96271.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96271.c?ref=b673e7547fb95d1f0d5cd17ae9e3874742cade66", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/96271 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=intel -msse2 -masm=att\" } */\n+/* { dg-final { scan-assembler \"movq\\t%xmm0, %r\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movq\\t%xmm1, %r\" { target { ! ia32 } } } } */\n+\n+int\n+foo (double a, double b)\n+{\n+  return __builtin_memcmp (&a, &b, sizeof (double)) == 0;\n+}"}, {"sha": "c027230acdc01072a936e985f88393aa168d24c0", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b673e7547fb95d1f0d5cd17ae9e3874742cade66/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=b673e7547fb95d1f0d5cd17ae9e3874742cade66", "patch": "@@ -1787,14 +1787,25 @@ class pass_cd_dce : public gimple_opt_pass\n {\n public:\n   pass_cd_dce (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_cd_dce, ctxt)\n+    : gimple_opt_pass (pass_data_cd_dce, ctxt), update_address_taken_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_cd_dce (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      update_address_taken_p = param;\n+    }\n   virtual bool gate (function *) { return flag_tree_dce != 0; }\n-  virtual unsigned int execute (function *) { return tree_ssa_cd_dce (); }\n+  virtual unsigned int execute (function *)\n+    {\n+      return (tree_ssa_cd_dce ()\n+\t      | (update_address_taken_p ? TODO_update_address_taken : 0));\n+    }\n \n+private:\n+  bool update_address_taken_p;\n }; // class pass_cd_dce\n \n } // anon namespace"}]}