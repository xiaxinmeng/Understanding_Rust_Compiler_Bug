{"sha": "5b77de89ae8a85507bcb536800633b1a0cb18bdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI3N2RlODlhZThhODU1MDdiY2I1MzY4MDA2MzNiMWEwY2IxOGJkYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-03-29T23:34:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-29T23:34:10Z"}, "message": "emutls.c (struct __emutls_array): New.\n\n        * emutls.c (struct __emutls_array): New.\n        (emutls_destroy): Use it instead of casting element 0 from void*.\n        (__emutls_get_address): Likewise.\n\nFrom-SVN: r123351", "tree": {"sha": "2c919bcf9dbd337e1077d98a0cfd9f4e1deaacc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c919bcf9dbd337e1077d98a0cfd9f4e1deaacc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b77de89ae8a85507bcb536800633b1a0cb18bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b77de89ae8a85507bcb536800633b1a0cb18bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b77de89ae8a85507bcb536800633b1a0cb18bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b77de89ae8a85507bcb536800633b1a0cb18bdc/comments", "author": null, "committer": null, "parents": [{"sha": "50decae30e08d8210069514bcec5d28550a4ae72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50decae30e08d8210069514bcec5d28550a4ae72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50decae30e08d8210069514bcec5d28550a4ae72"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "5af2da30d3d6fb5ed9b4cee186f22414f52d677d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b77de89ae8a85507bcb536800633b1a0cb18bdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b77de89ae8a85507bcb536800633b1a0cb18bdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b77de89ae8a85507bcb536800633b1a0cb18bdc", "patch": "@@ -1,3 +1,9 @@\n+2007-03-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* emutls.c (struct __emutls_array): New.\n+\t(emutls_destroy): Use it instead of casting element 0 from void*.\n+\t(__emutls_get_address): Likewise.\n+\n 2007-03-29  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (initializer_constant_valid_p): Don't deny"}, {"sha": "c3374a1c7de9accf63ff0073585de12f160f98ba", "filename": "gcc/emutls.c", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b77de89ae8a85507bcb536800633b1a0cb18bdc/gcc%2Femutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b77de89ae8a85507bcb536800633b1a0cb18bdc/gcc%2Femutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femutls.c?ref=5b77de89ae8a85507bcb536800633b1a0cb18bdc", "patch": "@@ -48,6 +48,12 @@ struct __emutls_object\n   void *templ;\n };\n \n+struct __emutls_array\n+{\n+  pointer size;\n+  void **data[];\n+};\n+\n #ifdef __GTHREADS\n #ifdef __GTHREAD_MUTEX_INIT\n static __gthread_mutex_t emutls_mutex = __GTHREAD_MUTEX_INIT;\n@@ -60,15 +66,16 @@ static pointer emutls_size;\n static void\n emutls_destroy (void *ptr)\n {\n-  void ***arr = (void ***) ptr;\n-  unsigned long int size = (unsigned long int) arr[0];\n-  ++arr;\n-  while (--size)\n+  struct __emutls_array *arr = ptr;\n+  pointer size = arr->size;\n+  pointer i;\n+\n+  for (i = 0; i < size; ++i)\n     {\n-      if (*arr)\n-\tfree ((*arr)[-1]);\n-      ++arr;\n+      if (arr->data[i])\n+\tfree (arr->data[i][-1]);\n     }\n+\n   free (ptr);\n }\n \n@@ -130,9 +137,9 @@ __emutls_get_address (struct __emutls_object *obj)\n #ifndef __GTHREADS\n   abort ();\n #else\n-  pointer offset;\n+  pointer offset = obj->loc.offset;\n \n-  if (__builtin_expect (obj->loc.offset == 0, 0))\n+  if (__builtin_expect (offset == 0, 0))\n     {\n       static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n       __gthread_once (&once, emutls_init);\n@@ -141,37 +148,37 @@ __emutls_get_address (struct __emutls_object *obj)\n       obj->loc.offset = offset;\n       __gthread_mutex_unlock (&emutls_mutex);\n     }\n-  else\n-    offset = obj->loc.offset;\n \n-  void **arr = (void **) __gthread_getspecific (emutls_key);\n+  struct __emutls_array *arr = __gthread_getspecific (emutls_key);\n   if (__builtin_expect (arr == NULL, 0))\n     {\n       pointer size = offset + 32;\n       arr = calloc (size, sizeof (void *));\n       if (arr == NULL)\n \tabort ();\n-      arr[0] = (void *) size;\n+      arr->size = size;\n       __gthread_setspecific (emutls_key, (void *) arr);\n     }\n-  else if (__builtin_expect (offset >= (pointer) arr[0], 0))\n+  else if (__builtin_expect (offset >= arr->size, 0))\n     {\n-      pointer orig_size = (pointer) arr[0];\n+      pointer orig_size = arr->size;\n       pointer size = orig_size * 2;\n       if (offset >= size)\n \tsize = offset + 32;\n       arr = realloc (arr, size * sizeof (void *));\n       if (arr == NULL)\n \tabort ();\n-      memset (arr + orig_size, 0, (size - orig_size) * sizeof (void *));\n+      arr->size = size;\n+      memset (arr->data + orig_size - 1, 0,\n+\t      (size - orig_size) * sizeof (void *));\n       __gthread_setspecific (emutls_key, (void *) arr);\n     }\n \n-  void *ret = arr[offset];\n+  void *ret = arr->data[offset - 1];\n   if (__builtin_expect (ret == NULL, 0))\n     {\n       ret = emutls_alloc (obj);\n-      arr[offset] = ret;\n+      arr->data[offset - 1] = ret;\n     }\n   return ret;\n #endif"}]}