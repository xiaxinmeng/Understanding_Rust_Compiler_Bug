{"sha": "f177a3d139bd6ff92eef93e0e3559ad6793e956b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3N2EzZDEzOWJkNmZmOTJlZWY5M2UwZTM1NTlhZDY3OTNlOTU2Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T20:01:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T20:01:09Z"}, "message": "compiler: improve type caching for interface types\n    \n    Add a cached to Interface_info_expression::do_type() so as to reuse\n    previously created interface types. This change reduces gccgo peak heap\n    usage when compiling the \"fmt\" package from around 16mb to around 10mb.\n    \n    Fixes golang/go#16334\n    \n    Reviewed-on: https://go-review.googlesource.com/24890\n\nFrom-SVN: r239095", "tree": {"sha": "9b28758c6ec6f21969975d0f9bde402698d8e2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b28758c6ec6f21969975d0f9bde402698d8e2f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f177a3d139bd6ff92eef93e0e3559ad6793e956b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f177a3d139bd6ff92eef93e0e3559ad6793e956b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f177a3d139bd6ff92eef93e0e3559ad6793e956b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f177a3d139bd6ff92eef93e0e3559ad6793e956b/comments", "author": null, "committer": null, "parents": [{"sha": "c7fdbdcdbd9f2ea3393ff6b3714394fa3922ab09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7fdbdcdbd9f2ea3393ff6b3714394fa3922ab09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7fdbdcdbd9f2ea3393ff6b3714394fa3922ab09"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "1d833281f1dc36d741bbb67d09d742d33aa204e9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f177a3d139bd6ff92eef93e0e3559ad6793e956b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f177a3d139bd6ff92eef93e0e3559ad6793e956b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f177a3d139bd6ff92eef93e0e3559ad6793e956b", "patch": "@@ -1,4 +1,4 @@\n-7d6c53910e52b7db2a77c1c1c3bc2c170283a1fa\n+0fb416a7bed076bdfef168480789bb2994a58de3\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "71a84c76b1dfcbf927bf6ea4560aa0e8bca50bfe", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f177a3d139bd6ff92eef93e0e3559ad6793e956b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f177a3d139bd6ff92eef93e0e3559ad6793e956b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f177a3d139bd6ff92eef93e0e3559ad6793e956b", "patch": "@@ -14114,16 +14114,27 @@ Interface_info_expression::do_type()\n     {\n     case INTERFACE_INFO_METHODS:\n       {\n+        typedef Unordered_map(Interface_type*, Type*) Hashtable;\n+        static Hashtable result_types;\n+\n+        Interface_type* itype = this->iface_->type()->interface_type();\n+\n+        Hashtable::const_iterator p = result_types.find(itype);\n+        if (p != result_types.end())\n+          return p->second;\n+\n         Type* pdt = Type::make_type_descriptor_ptr_type();\n-        if (this->iface_->type()->interface_type()->is_empty())\n-          return pdt;\n+        if (itype->is_empty())\n+          {\n+            result_types[itype] = pdt;\n+            return pdt;\n+          }\n \n         Location loc = this->location();\n         Struct_field_list* sfl = new Struct_field_list();\n         sfl->push_back(\n             Struct_field(Typed_identifier(\"__type_descriptor\", pdt, loc)));\n \n-        Interface_type* itype = this->iface_->type()->interface_type();\n         for (Typed_identifier_list::const_iterator p = itype->methods()->begin();\n              p != itype->methods()->end();\n              ++p)\n@@ -14156,7 +14167,9 @@ Interface_info_expression::do_type()\n             sfl->push_back(Struct_field(Typed_identifier(fname, mft, loc)));\n           }\n \n-        return Type::make_pointer_type(Type::make_struct_type(sfl, loc));\n+        Pointer_type *pt = Type::make_pointer_type(Type::make_struct_type(sfl, loc));\n+        result_types[itype] = pt;\n+        return pt;\n       }\n     case INTERFACE_INFO_OBJECT:\n       return Type::make_pointer_type(Type::make_void_type());"}]}