{"sha": "017665f63047ce47b087b0b283548a60e5abf3d2", "node_id": "C_kwDOANBUbNoAKDAxNzY2NWY2MzA0N2NlNDdiMDg3YjBiMjgzNTQ4YTYwZTVhYmYzZDI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-18T07:49:05Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-18T07:49:05Z"}, "message": "Fortran: Fix CLASS conversion check [PR102745]\n\n\tPR fortran/102745\ngcc/fortran/ChangeLog\n\t* intrinsic.c (gfc_convert_type_warn): Fix checks by checking CLASS\n\tand do typcheck in correct order for type extension.\n\t* misc.c (gfc_typename): Print proper not internal CLASS type name.\n\ngcc/testsuite/ChangeLog\n\t* gfortran.dg/class_72.f90: New.", "tree": {"sha": "5403224f6c3336a461883cb8719614f9fac07c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5403224f6c3336a461883cb8719614f9fac07c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/017665f63047ce47b087b0b283548a60e5abf3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017665f63047ce47b087b0b283548a60e5abf3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017665f63047ce47b087b0b283548a60e5abf3d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017665f63047ce47b087b0b283548a60e5abf3d2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b37435968bc76498481177593121d238f854fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b37435968bc76498481177593121d238f854fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b37435968bc76498481177593121d238f854fb"}], "stats": {"total": 100, "additions": 92, "deletions": 8}, "files": [{"sha": "f5c88d98cc9280269e39cbdb7858362089f73735", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=017665f63047ce47b087b0b283548a60e5abf3d2", "patch": "@@ -5237,12 +5237,13 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag,\n   /* In building an array constructor, gfortran can end up here when no\n      conversion is required for an intrinsic type.  We need to let derived\n      types drop through.  */\n-  if (from_ts.type != BT_DERIVED\n+  if (from_ts.type != BT_DERIVED && from_ts.type != BT_CLASS\n       && (from_ts.type == ts->type && from_ts.kind == ts->kind))\n     return true;\n \n-  if (expr->ts.type == BT_DERIVED && ts->type == BT_DERIVED\n-      && gfc_compare_types (&expr->ts, ts))\n+  if ((expr->ts.type == BT_DERIVED || expr->ts.type == BT_CLASS)\n+      && (ts->type == BT_DERIVED || ts->type == BT_CLASS)\n+      && gfc_compare_types (ts, &expr->ts))\n     return true;\n \n   /* If array is true then conversion is in an array constructor where"}, {"sha": "e6402e881e35aa735f696ae65167471eff9e1dbd", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=017665f63047ce47b087b0b283548a60e5abf3d2", "patch": "@@ -130,7 +130,6 @@ gfc_typename (gfc_typespec *ts, bool for_hash)\n   static char buffer2[GFC_MAX_SYMBOL_LEN + 8];\n   static int flag = 0;\n   char *buffer;\n-  gfc_typespec *ts1;\n   gfc_charlen_t length = 0;\n \n   buffer = flag ? buffer1 : buffer2;\n@@ -180,16 +179,17 @@ gfc_typename (gfc_typespec *ts, bool for_hash)\n       sprintf (buffer, \"TYPE(%s)\", ts->u.derived->name);\n       break;\n     case BT_CLASS:\n-      if (ts->u.derived == NULL)\n+      if (!ts->u.derived || !ts->u.derived->components\n+\t  || !ts->u.derived->components->ts.u.derived)\n \t{\n \t  sprintf (buffer, \"invalid class\");\n \t  break;\n \t}\n-      ts1 = ts->u.derived->components ? &ts->u.derived->components->ts : NULL;\n-      if (ts1 && ts1->u.derived && ts1->u.derived->attr.unlimited_polymorphic)\n+      if (ts->u.derived->components->ts.u.derived->attr.unlimited_polymorphic)\n \tsprintf (buffer, \"CLASS(*)\");\n       else\n-\tsprintf (buffer, \"CLASS(%s)\", ts->u.derived->name);\n+\tsprintf (buffer, \"CLASS(%s)\",\n+\t\t ts->u.derived->components->ts.u.derived->name);\n       break;\n     case BT_ASSUMED:\n       sprintf (buffer, \"TYPE(*)\");"}, {"sha": "0fd6ec010f5f3e09aa335b9022ba4714836205ec", "filename": "gcc/testsuite/gfortran.dg/class_72.f90", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_72.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017665f63047ce47b087b0b283548a60e5abf3d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_72.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_72.f90?ref=017665f63047ce47b087b0b283548a60e5abf3d2", "patch": "@@ -0,0 +1,83 @@\n+! PR fortran/102745\n+\n+implicit none\n+\n+type t\n+end type t\n+\n+type, extends(t) :: t2\n+end type t2\n+\n+type t3\n+end type t3\n+\n+type(t), allocatable :: var\n+type(t2), allocatable :: v2ar\n+type(t3), allocatable :: v3ar\n+class(t), allocatable :: cvar\n+class(t2), allocatable :: c2var\n+class(t3), allocatable :: c3var\n+\n+call f(var)\n+call f(v2ar)   ! { dg-error \"passed TYPE.t2. to TYPE.t.\" }\n+call f(v2ar%t)\n+call f(cvar)\n+call f(c2var)  ! { dg-error \"passed CLASS.t2. to TYPE.t.\" }\n+call f(c2var%t)\n+\n+call f2(var)   ! { dg-error \"passed TYPE.t. to TYPE.t2.\" }\n+call f2(v2ar)\n+call f2(cvar)  ! { dg-error \"passed CLASS.t. to TYPE.t2.\" }\n+call f2(c2var)\n+\n+\n+var = var\n+var = v2ar  ! { dg-error \"TYPE.t2. to TYPE.t.\" }\n+var = cvar\n+var = c2var ! { dg-error \"TYPE.t2. to TYPE.t.\" }\n+\n+v2ar = var  ! { dg-error \"Cannot convert TYPE.t. to TYPE.t2.\" }\n+v2ar = v2ar\n+v2ar = cvar ! { dg-error \"Cannot convert TYPE.t. to TYPE.t2.\" }\n+v2ar = c2var\n+\n+cvar = var\n+cvar = v2ar\n+cvar = cvar\n+cvar = c2var\n+\n+c2var = var   ! { dg-error \"Cannot convert TYPE.t. to CLASS.t2.\" }\n+c2var = v3ar  ! { dg-error \"Cannot convert TYPE.t3. to CLASS.t2.\" }\n+c2var = v2ar\n+c2var = cvar  ! { dg-error \"Cannot convert CLASS.t. to CLASS.t2.\" }\n+c2var = c3var ! { dg-error \"Cannot convert CLASS.t3. to CLASS.t2.\" }\n+c2var = c2var\n+\n+allocate (var, source=var)\n+allocate (var, source=v2ar)   ! { dg-error \"incompatible with source-expr\" }\n+allocate (var, source=cvar)\n+allocate (var, source=c2var)  ! { dg-error \"incompatible with source-expr\" }\n+\n+allocate (v2ar, source=var)   ! { dg-error \"incompatible with source-expr\" }\n+allocate (v2ar, source=v2ar)\n+allocate (v2ar, source=cvar)  ! { dg-error \"incompatible with source-expr\" }\n+allocate (v2ar, source=c2var)\n+\n+allocate (cvar, source=var)\n+allocate (cvar, source=v2ar)\n+allocate (cvar, source=cvar)\n+allocate (cvar, source=c2var)\n+\n+allocate (c2var, source=var)  ! { dg-error \"incompatible with source-expr\" }\n+allocate (c2var, source=v2ar)\n+allocate (c2var, source=cvar) ! { dg-error \"incompatible with source-expr\" }\n+allocate (c2var, source=c2var)\n+\n+contains\n+ subroutine f(x)\n+   type(t) :: x\n+ end\n+ subroutine f2(x)\n+   type(t2) :: x\n+ end\n+end"}]}