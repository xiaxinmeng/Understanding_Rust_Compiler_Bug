{"sha": "b04268a57f6e67376cf804e6e5866cf8cbfef968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0MjY4YTU3ZjZlNjczNzZjZjgwNGU2ZTU4NjZjZjhjYmZlZjk2OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:50:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:50:47Z"}, "message": "tree.h (tree_fits_shwi_p, [...]): Declare.\n\ngcc/\n\t* tree.h (tree_fits_shwi_p, tree_fits_uhwi_p): Declare.\n\t* tree.c (tree_fits_shwi_p, tree_fits_uhwi_p): Define.\n\nFrom-SVN: r204954", "tree": {"sha": "131a6aaf79560e8a3a9a65edd5dc63fa0d893de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/131a6aaf79560e8a3a9a65edd5dc63fa0d893de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04268a57f6e67376cf804e6e5866cf8cbfef968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04268a57f6e67376cf804e6e5866cf8cbfef968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04268a57f6e67376cf804e6e5866cf8cbfef968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04268a57f6e67376cf804e6e5866cf8cbfef968/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ca7c8cb966f02300a3775ba5575412aa6b1f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ca7c8cb966f02300a3775ba5575412aa6b1f94"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "6ae3a6faf7ff9ad148d7e4e174e99bfc960017ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b04268a57f6e67376cf804e6e5866cf8cbfef968", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree.h (tree_fits_shwi_p, tree_fits_uhwi_p): Declare.\n+\t* tree.c (tree_fits_shwi_p, tree_fits_uhwi_p): Define.\n+\n 2013-11-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc/config/ia64/ia64.c (ia64_split_tmode_move): Mark"}, {"sha": "374f560817e1cd7ebed916737a1964f7550e4692", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b04268a57f6e67376cf804e6e5866cf8cbfef968", "patch": "@@ -6990,6 +6990,32 @@ host_integerp (const_tree t, int pos)\n \t      || (pos && TREE_INT_CST_HIGH (t) == 0)));\n }\n \n+/* Return true if T is an INTEGER_CST whose numerical value (extended\n+   according to TYPE_UNSIGNED) fits in a signed HOST_WIDE_INT.  */\n+\n+bool\n+tree_fits_shwi_p (const_tree t)\n+{\n+  return (t != NULL_TREE\n+\t  && TREE_CODE (t) == INTEGER_CST\n+\t  && ((TREE_INT_CST_HIGH (t) == 0\n+\t       && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) >= 0)\n+\t      || (TREE_INT_CST_HIGH (t) == -1\n+\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0\n+\t\t  && !TYPE_UNSIGNED (TREE_TYPE (t)))));\n+}\n+\n+/* Return true if T is an INTEGER_CST whose numerical value (extended\n+   according to TYPE_UNSIGNED) fits in an unsigned HOST_WIDE_INT.  */\n+\n+bool\n+tree_fits_uhwi_p (const_tree t)\n+{\n+  return (t != NULL_TREE\n+\t  && TREE_CODE (t) == INTEGER_CST\n+\t  && TREE_INT_CST_HIGH (t) == 0);\n+}\n+\n /* Return the HOST_WIDE_INT least significant bits of T if it is an\n    INTEGER_CST and there is no overflow.  POS is nonzero if the result must\n    be non-negative.  We must be able to satisfy the above conditions.  */"}, {"sha": "59da1619aa6f0fc22ed2a8b55ec69de19916b9be", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04268a57f6e67376cf804e6e5866cf8cbfef968/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b04268a57f6e67376cf804e6e5866cf8cbfef968", "patch": "@@ -3662,6 +3662,16 @@ extern int host_integerp (const_tree, int)\n   ATTRIBUTE_PURE /* host_integerp is pure only when checking is disabled.  */\n #endif\n   ;\n+extern bool tree_fits_shwi_p (const_tree)\n+#ifndef ENABLE_TREE_CHECKING\n+  ATTRIBUTE_PURE /* tree_fits_shwi_p is pure only when checking is disabled.  */\n+#endif\n+  ;\n+extern bool tree_fits_uhwi_p (const_tree)\n+#ifndef ENABLE_TREE_CHECKING\n+  ATTRIBUTE_PURE /* tree_fits_uhwi_p is pure only when checking is disabled.  */\n+#endif\n+  ;\n extern HOST_WIDE_INT tree_low_cst (const_tree, int);\n #if !defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 4003)\n extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT"}]}