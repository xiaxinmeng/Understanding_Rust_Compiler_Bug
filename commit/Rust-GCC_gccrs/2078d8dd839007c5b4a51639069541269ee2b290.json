{"sha": "2078d8dd839007c5b4a51639069541269ee2b290", "node_id": "C_kwDOANBUbNoAKDIwNzhkOGRkODM5MDA3YzViNGE1MTYzOTA2OTU0MTI2OWVlMmIyOTA", "commit": {"author": {"name": "M V V S Manoj Kumar", "email": "mvvsmanojkumar@gmail.com", "date": "2023-04-14T12:59:48Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-21T09:26:13Z"}, "message": "Deleted the as_string ASR and HIR dumps\n\nFixes #2021, #2022\nDeleted Parser::debug_dump_ast_output, removed any functions that called\nit i.e Session::dump_ast and Session::dump_ast_expanded, and any\nassociated items.\n\nMade it so that when you use the dump option \"expanded\" it dumps the\npretty ast only.\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse-impl.h (Parser::debug_dump_ast_output): Removed this funtion.\n\t* rust-session-manager.cc (Session::enable_dump): Removed else if (arg == \"parse\").\n\t(Session::compile_crate): Removed calls of dump_ast and dump_ast_expanded.\n\t(Session::dump_ast): Removed this function.\n\t(Session::dump_ast_expanded): Removed this function.\n\t* rust-session-manager.h (struct CompileOptions): Removed the PARSER_AST_DUMP option.\n\nSigned-off-by: M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>", "tree": {"sha": "e1b302fcc4c741d28e5b33192509b88f349e9ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1b302fcc4c741d28e5b33192509b88f349e9ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2078d8dd839007c5b4a51639069541269ee2b290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2078d8dd839007c5b4a51639069541269ee2b290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2078d8dd839007c5b4a51639069541269ee2b290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2078d8dd839007c5b4a51639069541269ee2b290/comments", "author": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e26f836210a2defed7e49d7d2655b5525f0561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e26f836210a2defed7e49d7d2655b5525f0561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e26f836210a2defed7e49d7d2655b5525f0561"}], "stats": {"total": 56, "additions": 1, "deletions": 55}, "files": [{"sha": "2609e5ae94b478de8f01538409eb15187a2c281a", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2078d8dd839007c5b4a51639069541269ee2b290", "patch": "@@ -15189,13 +15189,4 @@ Parser<ManagedTokenSource>::done_end ()\n   const_TokenPtr t = lexer.peek_token ();\n   return (t->get_id () == RIGHT_CURLY || t->get_id () == END_OF_FILE);\n }\n-\n-// Parses crate and dumps AST to stderr, recursively.\n-template <typename ManagedTokenSource>\n-void\n-Parser<ManagedTokenSource>::debug_dump_ast_output (AST::Crate &crate,\n-\t\t\t\t\t\t   std::ostream &out)\n-{\n-  out << crate.as_string ();\n-}\n } // namespace Rust"}, {"sha": "565e8b3448aa940dced142963d69ec7cbc4b7433", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=2078d8dd839007c5b4a51639069541269ee2b290", "patch": "@@ -283,7 +283,7 @@ Session::enable_dump (std::string arg)\n     {\n       rust_error_at (\n \tLocation (),\n-\t\"dump option was not given a name. choose %<lex%>, %<parse%>, \"\n+\t\"dump option was not given a name. choose %<lex%>, \"\n \t\"%<register_plugins%>, %<injection%>, %<expansion%>, %<resolution%>,\"\n \t\" %<target_options%>, %<hir%>, or %<all%>\");\n       return false;\n@@ -297,10 +297,6 @@ Session::enable_dump (std::string arg)\n     {\n       options.enable_dump_option (CompileOptions::LEXER_DUMP);\n     }\n-  else if (arg == \"parse\")\n-    {\n-      options.enable_dump_option (CompileOptions::PARSER_AST_DUMP);\n-    }\n   else if (arg == \"ast-pretty\")\n     {\n       options.enable_dump_option (CompileOptions::AST_DUMP_PRETTY);\n@@ -495,10 +491,6 @@ Session::compile_crate (const char *filename)\n   handle_crate_name (*ast_crate.get ());\n \n   // dump options except lexer dump\n-  if (options.dump_option_enabled (CompileOptions::PARSER_AST_DUMP))\n-    {\n-      dump_ast (parser, *ast_crate.get ());\n-    }\n   if (options.dump_option_enabled (CompileOptions::AST_DUMP_TOKENSTREAM))\n     {\n       dump_tokenstream (*ast_crate.get ());\n@@ -572,7 +564,6 @@ Session::compile_crate (const char *filename)\n     {\n       // dump AST with expanded stuff\n       rust_debug (\"BEGIN POST-EXPANSION AST DUMP\");\n-      dump_ast_expanded (parser, parsed_crate);\n       dump_ast_pretty (parsed_crate, true);\n       rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n@@ -894,22 +885,6 @@ Session::expansion (AST::Crate &crate)\n   rust_debug (\"finished expansion\");\n }\n \n-void\n-Session::dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const\n-{\n-  std::ofstream out;\n-  out.open (kASTDumpFile);\n-  if (out.fail ())\n-    {\n-      rust_error_at (Linemap::unknown_location (), \"cannot open %s:%m; ignored\",\n-\t\t     kASTDumpFile);\n-      return;\n-    }\n-\n-  parser.debug_dump_ast_output (crate, out);\n-  out.close ();\n-}\n-\n void\n Session::dump_ast_pretty (AST::Crate &crate, bool expanded) const\n {\n@@ -950,22 +925,6 @@ Session::dump_tokenstream (AST::Crate &crate) const\n   out.close ();\n }\n \n-void\n-Session::dump_ast_expanded (Parser<Lexer> &parser, AST::Crate &crate) const\n-{\n-  std::ofstream out;\n-  out.open (kASTExpandedDumpFile);\n-  if (out.fail ())\n-    {\n-      rust_error_at (Linemap::unknown_location (), \"cannot open %s:%m; ignored\",\n-\t\t     kASTExpandedDumpFile);\n-      return;\n-    }\n-\n-  parser.debug_dump_ast_output (crate, out);\n-  out.close ();\n-}\n-\n void\n Session::dump_hir (HIR::Crate &crate) const\n {"}, {"sha": "5636a29590c4854fc3cfefb424a2c06a05ec0a55", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2078d8dd839007c5b4a51639069541269ee2b290/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=2078d8dd839007c5b4a51639069541269ee2b290", "patch": "@@ -166,7 +166,6 @@ struct CompileOptions\n   enum DumpOption\n   {\n     LEXER_DUMP,\n-    PARSER_AST_DUMP,\n     AST_DUMP_PRETTY,\n     AST_DUMP_TOKENSTREAM,\n     REGISTER_PLUGINS_DUMP,\n@@ -226,7 +225,6 @@ struct CompileOptions\n   void enable_all_dump_options ()\n   {\n     enable_dump_option (DumpOption::LEXER_DUMP);\n-    enable_dump_option (DumpOption::PARSER_AST_DUMP);\n     enable_dump_option (DumpOption::AST_DUMP_PRETTY);\n     enable_dump_option (DumpOption::AST_DUMP_TOKENSTREAM);\n     enable_dump_option (DumpOption::REGISTER_PLUGINS_DUMP);\n@@ -343,10 +341,8 @@ struct Session\n   bool enable_dump (std::string arg);\n \n   void dump_lex (Parser<Lexer> &parser) const;\n-  void dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const;\n   void dump_ast_pretty (AST::Crate &crate, bool expanded = false) const;\n   void dump_tokenstream (AST::Crate &crate) const;\n-  void dump_ast_expanded (Parser<Lexer> &parser, AST::Crate &crate) const;\n   void dump_hir (HIR::Crate &crate) const;\n   void dump_hir_pretty (HIR::Crate &crate) const;\n   void dump_type_resolution (HIR::Crate &crate) const;"}]}