{"sha": "0f2508394bbfae077f3e5d7ca05e93cabff06471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyNTA4Mzk0YmJmYWUwNzdmM2U1ZDdjYTA1ZTkzY2FiZmYwNjQ3MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-07T14:31:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-07T14:31:40Z"}, "message": "coverage.c (get_gcov_type): Use type_for_mode.\n\n2012-03-07  Richard Guenther  <rguenther@suse.de>\n\n\t* coverage.c (get_gcov_type): Use type_for_mode.\n\t(get_gcov_unsigned_t): Likewise.\n\t* expr.c (store_constructor): Use type_for_mode.\n\t(try_casesi): Likewise.\n\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates_for_size):\n\tRemove.\n\t(add_standard_iv_candidates): Use standard type trees.\n\t* dojump.c (do_jump): Remove dead code.\n\nFrom-SVN: r185048", "tree": {"sha": "9367ae3ff084cabf2d89d91b25e317ab9c681ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9367ae3ff084cabf2d89d91b25e317ab9c681ccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2508394bbfae077f3e5d7ca05e93cabff06471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2508394bbfae077f3e5d7ca05e93cabff06471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2508394bbfae077f3e5d7ca05e93cabff06471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2508394bbfae077f3e5d7ca05e93cabff06471/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "647d4b7512f3ecb46466e433adf975d01b810054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647d4b7512f3ecb46466e433adf975d01b810054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647d4b7512f3ecb46466e433adf975d01b810054"}], "stats": {"total": 82, "additions": 31, "deletions": 51}, "files": [{"sha": "3e5e76d99b4e6fadd3d8614faa96209e88f7df6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f2508394bbfae077f3e5d7ca05e93cabff06471", "patch": "@@ -1,3 +1,14 @@\n+2012-03-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* coverage.c (get_gcov_type): Use type_for_mode.\n+\t(get_gcov_unsigned_t): Likewise.\n+\t* expr.c (store_constructor): Use type_for_mode.\n+\t(try_casesi): Likewise.\n+\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates_for_size):\n+\tRemove.\n+\t(add_standard_iv_candidates): Use standard type trees.\n+\t* dojump.c (do_jump): Remove dead code.\n+\n 2012-03-07  Richard Guenther  <rguenther@suse.de>\n \n \t* c-typeck.c (pointer_diff): Use c_common_type_for_size."}, {"sha": "14fe52f404becb4ceb80c760a58a15b8f575d33f", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=0f2508394bbfae077f3e5d7ca05e93cabff06471", "patch": "@@ -131,15 +131,17 @@ static void coverage_obj_finish (VEC(constructor_elt,gc) *);\n tree\n get_gcov_type (void)\n {\n-  return lang_hooks.types.type_for_size (GCOV_TYPE_SIZE, false);\n+  enum machine_mode mode = smallest_mode_for_size (GCOV_TYPE_SIZE, MODE_INT);\n+  return lang_hooks.types.type_for_mode (mode, false);\n }\n \n /* Return the type node for gcov_unsigned_t.  */\n \n static tree\n get_gcov_unsigned_t (void)\n {\n-  return lang_hooks.types.type_for_size (32, true);\n+  enum machine_mode mode = smallest_mode_for_size (32, MODE_INT);\n+  return lang_hooks.types.type_for_mode (mode, true);\n }\n \f\n static hashval_t"}, {"sha": "67452005e90837d4850259c3ff58bc130d4903c5", "filename": "gcc/dojump.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=0f2508394bbfae077f3e5d7ca05e93cabff06471", "patch": "@@ -444,36 +444,6 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label, int prob)\n       /* Lowered by gimplify.c.  */\n       gcc_unreachable ();\n \n-    case COMPONENT_REF:\n-    case BIT_FIELD_REF:\n-    case ARRAY_REF:\n-    case ARRAY_RANGE_REF:\n-      {\n-        HOST_WIDE_INT bitsize, bitpos;\n-        int unsignedp;\n-        enum machine_mode mode;\n-        tree type;\n-        tree offset;\n-        int volatilep = 0;\n-\n-        /* Get description of this reference.  We don't actually care\n-           about the underlying object here.  */\n-        get_inner_reference (exp, &bitsize, &bitpos, &offset, &mode,\n-                             &unsignedp, &volatilep, false);\n-\n-        type = lang_hooks.types.type_for_size (bitsize, unsignedp);\n-        if (! SLOW_BYTE_ACCESS\n-            && type != 0 && bitsize >= 0\n-            && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp))\n-            && have_insn_for (COMPARE, TYPE_MODE (type)))\n-          {\n-\t    do_jump (fold_convert (type, exp), if_false_label, if_true_label,\n-\t\t     prob);\n-            break;\n-          }\n-        goto normal;\n-      }\n-\n     case MINUS_EXPR:\n       /* Nonzero iff operands of minus differ.  */\n       code = NE_EXPR;"}, {"sha": "e6fc100f9f8f7330778f4c35698aabd7f2840c04", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0f2508394bbfae077f3e5d7ca05e93cabff06471", "patch": "@@ -5893,8 +5893,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n \t\tif (TYPE_PRECISION (type) < BITS_PER_WORD)\n \t\t  {\n-\t\t    type = lang_hooks.types.type_for_size\n-\t\t      (BITS_PER_WORD, TYPE_UNSIGNED (type));\n+\t\t    type = lang_hooks.types.type_for_mode\n+\t\t      (word_mode, TYPE_UNSIGNED (type));\n \t\t    value = fold_convert (type, value);\n \t\t  }\n \n@@ -10726,7 +10726,6 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n {\n   struct expand_operand ops[5];\n   enum machine_mode index_mode = SImode;\n-  int index_bits = GET_MODE_BITSIZE (index_mode);\n   rtx op1, op2, index;\n \n   if (! HAVE_casesi)\n@@ -10753,7 +10752,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n     {\n       if (TYPE_MODE (index_type) != index_mode)\n \t{\n-\t  index_type = lang_hooks.types.type_for_size (index_bits, 0);\n+\t  index_type = lang_hooks.types.type_for_mode (index_mode, 0);\n \t  index_expr = fold_convert (index_type, index_expr);\n \t}\n "}, {"sha": "527c911e4a71edcd74ac0d8aad0a89d13e6d8a74", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2508394bbfae077f3e5d7ca05e93cabff06471/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=0f2508394bbfae077f3e5d7ca05e93cabff06471", "patch": "@@ -2405,28 +2405,26 @@ add_candidate (struct ivopts_data *data,\n     add_autoinc_candidates (data, base, step, important, use);\n }\n \n-/* Add a standard \"0 + 1 * iteration\" iv candidate for a\n-   type with SIZE bits.  */\n-\n-static void\n-add_standard_iv_candidates_for_size (struct ivopts_data *data,\n-\t\t\t\t     unsigned int size)\n-{\n-  tree type = lang_hooks.types.type_for_size (size, true);\n-  add_candidate (data, build_int_cst (type, 0), build_int_cst (type, 1),\n-\t\t true, NULL);\n-}\n-\n /* Adds standard iv candidates.  */\n \n static void\n add_standard_iv_candidates (struct ivopts_data *data)\n {\n-  add_standard_iv_candidates_for_size (data, INT_TYPE_SIZE);\n+  add_candidate (data, integer_zero_node, integer_one_node, true, NULL);\n+\n+  /* The same for a double-integer type if it is still fast enough.  */\n+  if (TYPE_PRECISION\n+        (long_integer_type_node) > TYPE_PRECISION (integer_type_node)\n+      && TYPE_PRECISION (long_integer_type_node) <= BITS_PER_WORD)\n+    add_candidate (data, build_int_cst (long_integer_type_node, 0),\n+\t\t   build_int_cst (long_integer_type_node, 1), true, NULL);\n \n   /* The same for a double-integer type if it is still fast enough.  */\n-  if (BITS_PER_WORD >= INT_TYPE_SIZE * 2)\n-    add_standard_iv_candidates_for_size (data, INT_TYPE_SIZE * 2);\n+  if (TYPE_PRECISION\n+        (long_long_integer_type_node) > TYPE_PRECISION (long_integer_type_node)\n+      && TYPE_PRECISION (long_long_integer_type_node) <= BITS_PER_WORD)\n+    add_candidate (data, build_int_cst (long_long_integer_type_node, 0),\n+\t\t   build_int_cst (long_long_integer_type_node, 1), true, NULL);\n }\n \n "}]}