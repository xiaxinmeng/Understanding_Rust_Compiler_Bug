{"sha": "01f440383c8758c7ecc80605cae98cc48c4ec335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmNDQwMzgzYzg3NThjN2VjYzgwNjA1Y2FlOThjYzQ4YzRlYzMzNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-10-14T08:40:04Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-10-14T08:40:04Z"}, "message": "[AArch64] Add spellchecking hints for -march,-mcpu,-mtune and their attributes\n\n\t* config/aarch64/aarch64.c (aarch64_print_hint_for_core_or_arch):\n\tNew function.\n\t(aarch64_print_hint_for_core): Likewise.\n\t(aarch64_print_hint_for_arch): Likewise.\n\t(aarch64_validate_march): Use it.  Fix indentation in type signature.\n\t(aarch64_validate_mcpu): Use aarch64_print_hint_for_core_or_arch.\n\t(aarch64_validate_mtune): Likewise.\n\t(aarch64_handle_attr_arch): Likewise.\n\t(aarch64_handle_attr_cpu): Likewise.\n\t(aarch64_handle_attr_tune): Likewise.\n\n\t* gcc.target/aarch64/spellcheck_1.c: New test.\n\t* gcc.target/aarch64/spellcheck_2.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_3.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_4.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_5.c: Likewise.\n\t* gcc.target/aarch64/spellcheck_6.c: Likewise.\n\nFrom-SVN: r241149", "tree": {"sha": "dad9dcb36963f42aac7ec8f3406c4e427ffdcfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dad9dcb36963f42aac7ec8f3406c4e427ffdcfe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f440383c8758c7ecc80605cae98cc48c4ec335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f440383c8758c7ecc80605cae98cc48c4ec335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f440383c8758c7ecc80605cae98cc48c4ec335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f440383c8758c7ecc80605cae98cc48c4ec335/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4827fd102c725deb4e7335b266e3566d41213428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4827fd102c725deb4e7335b266e3566d41213428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4827fd102c725deb4e7335b266e3566d41213428"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "fad5f2af953759cdc11a6e231c4104d877018c06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -1,3 +1,16 @@\n+2016-10-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_hint_for_core_or_arch):\n+\tNew function.\n+\t(aarch64_print_hint_for_core): Likewise.\n+\t(aarch64_print_hint_for_arch): Likewise.\n+\t(aarch64_validate_march): Use it.  Fix indentation in type signature.\n+\t(aarch64_validate_mcpu): Use aarch64_print_hint_for_core_or_arch.\n+\t(aarch64_validate_mtune): Likewise.\n+\t(aarch64_handle_attr_arch): Likewise.\n+\t(aarch64_handle_attr_cpu): Likewise.\n+\t(aarch64_handle_attr_tune): Likewise.\n+\n 2016-10-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* optabs.def: Remove optab function gen_int_libfunc for sdivmod_optab"}, {"sha": "74f1a6ad0580114405ca654b25059689578f10dc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -8272,6 +8272,44 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   aarch64_override_options_after_change_1 (opts);\n }\n \n+/* Print a hint with a suggestion for a core or architecture name that\n+   most closely resembles what the user passed in STR.  ARCH is true if\n+   the user is asking for an architecture name.  ARCH is false if the user\n+   is asking for a core name.  */\n+\n+static void\n+aarch64_print_hint_for_core_or_arch (const char *str, bool arch)\n+{\n+  auto_vec<const char *> candidates;\n+  const struct processor *entry = arch ? all_architectures : all_cores;\n+  for (; entry->name != NULL; entry++)\n+    candidates.safe_push (entry->name);\n+  char *s;\n+  const char *hint = candidates_list_and_hint (str, s, candidates);\n+  if (hint)\n+    inform (input_location, \"valid arguments are: %s;\"\n+\t\t\t     \" did you mean %qs?\", s, hint);\n+  XDELETEVEC (s);\n+}\n+\n+/* Print a hint with a suggestion for a core name that most closely resembles\n+   what the user passed in STR.  */\n+\n+inline static void\n+aarch64_print_hint_for_core (const char *str)\n+{\n+  aarch64_print_hint_for_core_or_arch (str, false);\n+}\n+\n+/* Print a hint with a suggestion for an architecture name that most closely\n+   resembles what the user passed in STR.  */\n+\n+inline static void\n+aarch64_print_hint_for_arch (const char *str)\n+{\n+  aarch64_print_hint_for_core_or_arch (str, true);\n+}\n+\n /* Validate a command-line -mcpu option.  Parse the cpu and extensions (if any)\n    specified in STR and throw errors if appropriate.  Put the results if\n    they are valid in RES and ISA_FLAGS.  Return whether the option is\n@@ -8294,6 +8332,7 @@ aarch64_validate_mcpu (const char *str, const struct processor **res,\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for -mcpu\", str);\n+\taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n \terror (\"invalid feature modifier in -mcpu=%qs\", str);\n@@ -8312,7 +8351,7 @@ aarch64_validate_mcpu (const char *str, const struct processor **res,\n \n static bool\n aarch64_validate_march (const char *str, const struct processor **res,\n-\t\t       unsigned long *isa_flags)\n+\t\t\t unsigned long *isa_flags)\n {\n   enum aarch64_parse_opt_result parse_res\n     = aarch64_parse_arch (str, res, isa_flags);\n@@ -8327,6 +8366,7 @@ aarch64_validate_march (const char *str, const struct processor **res,\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for -march\", str);\n+\taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n \terror (\"invalid feature modifier in -march=%qs\", str);\n@@ -8359,6 +8399,7 @@ aarch64_validate_mtune (const char *str, const struct processor **res)\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for -mtune\", str);\n+\taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n \tgcc_unreachable ();\n@@ -8730,6 +8771,7 @@ aarch64_handle_attr_arch (const char *str, const char *pragma_or_attr)\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for 'arch' target %s\", str, pragma_or_attr);\n+\taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n \terror (\"invalid feature modifier %qs for 'arch' target %s\",\n@@ -8770,6 +8812,7 @@ aarch64_handle_attr_cpu (const char *str, const char *pragma_or_attr)\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for 'cpu' target %s\", str, pragma_or_attr);\n+\taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n \terror (\"invalid feature modifier %qs for 'cpu' target %s\",\n@@ -8804,6 +8847,7 @@ aarch64_handle_attr_tune (const char *str, const char *pragma_or_attr)\n     {\n       case AARCH64_PARSE_INVALID_ARG:\n \terror (\"unknown value %qs for 'tune' target %s\", str, pragma_or_attr);\n+\taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n \tgcc_unreachable ();"}, {"sha": "ce1b6fdba3bd589ef34c867cba1e74350128a97b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -1,3 +1,12 @@\n+2016-10-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/spellcheck_1.c: New test.\n+\t* gcc.target/aarch64/spellcheck_2.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_3.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_4.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_5.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_6.c: Likewise.\n+\n 2016-10-13  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* gcc.target/m68k/stack-limit-1.c: Expect warning on line 0."}, {"sha": "76e54e8efe64fa2ccbee21ff75ad9c00d80042b4", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_1.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+__attribute__((target (\"arch=armv8-a-typo\"))) void\n+foo ()\n+{\n+}\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'armv8-a'?\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"unknown value 'armv8-a-typo' for 'arch' target attribute\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"target attribute 'arch=armv8-a-typo' is invalid\"  \"\" { target *-*-* } 5 } */"}, {"sha": "80d4795c3f2cf59e5c9b31487e2066549a72371d", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_2.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+__attribute__((target (\"cpu=cortex-a57-typo\"))) void\n+foo ()\n+{\n+}\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a57?\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"unknown value 'cortex-a57-typo' for 'cpu' target attribute\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"target attribute 'cpu=cortex-a57-typo' is invalid\"  \"\" { target *-*-* } 5 } */"}, {"sha": "ab1940f515e2338cc6eea6f8dc217e97ea781085", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_3.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+__attribute__((target (\"tune=cortex-a57-typo\"))) void\n+foo ()\n+{\n+}\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a57?\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"unknown value 'cortex-a57-typo' for 'tune' target attribute\"  \"\" { target *-*-* } 5 } */\n+/* { dg-error \"target attribute 'tune=cortex-a57-typo' is invalid\"  \"\" { target *-*-* } 5 } */"}, {"sha": "6f66fdc98e28d32dec46d79747cb31a94e9d7529", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_4.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"\" } } */\n+/* { dg-options \"-march=armv8-a-typo\" } */\n+\n+void\n+foo ()\n+{\n+}\n+\n+/* { dg-error \"unknown value 'armv8-a-typo' for -march\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'armv8-a'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "8ec581f12822380f3c01200225ecf8339cec5161", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_5.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=*\" } { \"\" } } */\n+/* { dg-options \"-mcpu=cortex-a17\" } */\n+\n+void\n+foo ()\n+{\n+}\n+\n+/* { dg-error \"unknown value 'cortex-a17' for -mcpu\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a57'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "8fa491b0ca4beae6c13aa90de84235495d8a9c33", "filename": "gcc/testsuite/gcc.target/aarch64/spellcheck_6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f440383c8758c7ecc80605cae98cc48c4ec335/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspellcheck_6.c?ref=01f440383c8758c7ecc80605cae98cc48c4ec335", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mtune=*\" } { \"\" } } */\n+/* { dg-options \"-mtune=cortex-a72-typo\" } */\n+\n+void\n+foo ()\n+{\n+}\n+\n+/* { dg-error \"unknown value 'cortex-a72-typo' for -mtune\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments are: \\[^\\n\\r]*; did you mean 'cortex-a72'?\"  \"\" { target *-*-* } 0 } */"}]}