{"sha": "1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3ODY4MzhiMTRmZjZmZjBmOGFmZDIxMTI3NWJhYWExZTc2ZjRkNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-06-16T11:46:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-06-16T11:46:14Z"}, "message": "loop.c (strength_reduce): Insert sets of derived givs at every biv increment, even if it's the only one.\n\n\t* loop.c (strength_reduce): Insert sets of derived givs at every\n\tbiv increment, even if it's the only one.\n\nFrom-SVN: r27549", "tree": {"sha": "8b724e498ebb99933897fa2187e3f932587d6869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b724e498ebb99933897fa2187e3f932587d6869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b786838b14ff6ff0f8afd211275baaa1e76f4d6/comments", "author": null, "committer": null, "parents": [{"sha": "4e61a9695a2292d4ba89a32a198606ef8bdced35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e61a9695a2292d4ba89a32a198606ef8bdced35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e61a9695a2292d4ba89a32a198606ef8bdced35"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "6f050bcedcd11698cb84ac100fe7ca75db2811d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b786838b14ff6ff0f8afd211275baaa1e76f4d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b786838b14ff6ff0f8afd211275baaa1e76f4d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "patch": "@@ -1,3 +1,8 @@\n+Wed Jun 16 19:44:33 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (strength_reduce): Insert sets of derived givs at every\n+\tbiv increment, even if it's the only one.\n+\n Wed Jun 16 10:33:02 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* dwarfout.c (add_incomplete_type): New fn."}, {"sha": "90720c4ec15bae24f8536cfa8f0f4df6860081de", "filename": "gcc/loop.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b786838b14ff6ff0f8afd211275baaa1e76f4d6/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b786838b14ff6ff0f8afd211275baaa1e76f4d6/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=1b786838b14ff6ff0f8afd211275baaa1e76f4d6", "patch": "@@ -4768,21 +4768,29 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t    = replace_rtx (PATTERN (v->insn), d->dest_reg, d->new_reg);\n \t\t  PATTERN (v->insn)\n \t\t    = replace_rtx (PATTERN (v->insn), v->dest_reg, v->new_reg);\n-\t\t  if (bl->biv_count != 1)\n+\t\t  /* For each place where the biv is incremented, add an\n+\t\t     insn to set the new, reduced reg for the giv.\n+\t\t     We used to do this only for biv_count != 1, but\n+\t\t     this fails when there is a giv after a single biv\n+\t\t     increment, e.g. when the last giv was expressed as\n+\t\t     pre-decrement.  */\n+\t\t  for (tv = bl->biv; tv; tv = tv->next_iv)\n \t\t    {\n-\t\t      /* For each place where the biv is incremented, add an\n-\t\t\t insn to set the new, reduced reg for the giv.  */\n-\t\t      for (tv = bl->biv; tv; tv = tv->next_iv)\n-\t\t\t{\n-\t\t\t  /* We always emit reduced giv increments before the\n-\t\t\t     biv increment when bl->biv_count != 1.  So by\n-\t\t\t     emitting the add insns for derived givs after the\n-\t\t\t     biv increment, they pick up the updated value of\n-\t\t\t     the reduced giv.  */\n-\t\t\t  emit_insn_after (copy_rtx (PATTERN (v->insn)),\n-\t\t\t\t\t   tv->insn);\n-\n-\t\t\t}\n+\t\t      /* We always emit reduced giv increments before the\n+\t\t\t biv increment when bl->biv_count != 1.  So by\n+\t\t\t emitting the add insns for derived givs after the\n+\t\t\t biv increment, they pick up the updated value of\n+\t\t\t the reduced giv.\n+\t\t\t If the reduced giv is processed with\n+\t\t\t auto_inc_opt == 1, then it is incremented earlier\n+\t\t\t than the biv, hence we'll still pick up the right\n+\t\t\t value.\n+\t\t\t If it's processed with auto_inc_opt == -1,\n+\t\t\t that implies that the biv increment is before the\n+\t\t\t first reduced giv's use.  The derived giv's lifetime\n+\t\t\t is after the reduced giv's lifetime, hence in this\n+\t\t\t case, the biv increment doesn't matter.  */\n+\t\t      emit_insn_after (copy_rtx (PATTERN (v->insn)), tv->insn);\n \t\t    }\n \t\t  continue;\n \t\t}"}]}