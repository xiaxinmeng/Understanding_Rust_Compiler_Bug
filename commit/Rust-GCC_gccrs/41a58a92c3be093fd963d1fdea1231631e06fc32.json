{"sha": "41a58a92c3be093fd963d1fdea1231631e06fc32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNThhOTJjM2JlMDkzZmQ5NjNkMWZkZWExMjMxNjMxZTA2ZmMzMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-11T12:23:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-11T12:23:12Z"}, "message": "re PR middle-end/48953 (ICE: verify_gimple failed: type mismatch in array reference with -flto and struct with vararray)\n\n2011-05-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/48953\n\t* tree-inline.c (remap_gimple_op_r): Also remap types of MEM_REFs.\n\n\t* gcc.dg/torture/pr48953.c: New testcase.\n\nFrom-SVN: r173653", "tree": {"sha": "4421880e85e5367fb727c8c2d5ff7e080dd0161c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4421880e85e5367fb727c8c2d5ff7e080dd0161c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a58a92c3be093fd963d1fdea1231631e06fc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a58a92c3be093fd963d1fdea1231631e06fc32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a58a92c3be093fd963d1fdea1231631e06fc32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a58a92c3be093fd963d1fdea1231631e06fc32/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9f8dcf9b3bd2972c947d793443a83a78104ae87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f8dcf9b3bd2972c947d793443a83a78104ae87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f8dcf9b3bd2972c947d793443a83a78104ae87"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "a439ef80558cb4fd545e52325e15bf233a74fe67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41a58a92c3be093fd963d1fdea1231631e06fc32", "patch": "@@ -1,3 +1,8 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48953\n+\t* tree-inline.c (remap_gimple_op_r): Also remap types of MEM_REFs.\n+\n 2011-05-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts.c (finish_options): Move warning settings from"}, {"sha": "5cfb9f23c6c2733d7ae5346481cb646f69c52d48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41a58a92c3be093fd963d1fdea1231631e06fc32", "patch": "@@ -1,3 +1,8 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48953\n+\t* gcc.dg/torture/pr48953.c: New testcase.\n+\n 2011-05-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/18041"}, {"sha": "41a3d7b80822a3e6f929bc9a12698799a88de82d", "filename": "gcc/testsuite/gcc.dg/torture/pr48953.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48953.c?ref=41a58a92c3be093fd963d1fdea1231631e06fc32", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-dce\" } */\n+\n+static inline int foo (int n, int k)\n+{\n+  struct S\n+  {\n+    int i[n];\n+    int value;\n+  } s[2];\n+  return s[k].value = 0;\n+}\n+\n+int main ()\n+{\n+  return foo (2, 0);\n+}"}, {"sha": "fc8c88fea9b6997605f0f068ff085a5a5395d930", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58a92c3be093fd963d1fdea1231631e06fc32/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=41a58a92c3be093fd963d1fdea1231631e06fc32", "patch": "@@ -811,9 +811,15 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n     {\n       /* Otherwise, just copy the node.  Note that copy_tree_r already\n \t knows not to copy VAR_DECLs, etc., so this is safe.  */\n+\n+      /* We should never have TREE_BLOCK set on non-statements.  */\n+      if (EXPR_P (*tp))\n+\tgcc_assert (!TREE_BLOCK (*tp));\n+\n       if (TREE_CODE (*tp) == MEM_REF)\n \t{\n \t  tree ptr = TREE_OPERAND (*tp, 0);\n+\t  tree type = remap_type (TREE_TYPE (*tp), id);\n \t  tree old = *tp;\n \t  tree tem;\n \n@@ -824,7 +830,7 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t  if ((tem = maybe_fold_offset_to_reference (EXPR_LOCATION (*tp),\n \t\t\t\t\t\t     ptr,\n \t\t\t\t\t\t     TREE_OPERAND (*tp, 1),\n-\t\t\t\t\t\t     TREE_TYPE (*tp)))\n+\t\t\t\t\t\t     type))\n \t      && TREE_THIS_VOLATILE (tem) == TREE_THIS_VOLATILE (old))\n \t    {\n \t      tree *tem_basep = &tem;\n@@ -846,7 +852,7 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t    }\n \t  else\n \t    {\n-\t      *tp = fold_build2 (MEM_REF, TREE_TYPE (*tp),\n+\t      *tp = fold_build2 (MEM_REF, type,\n \t\t\t\t ptr, TREE_OPERAND (*tp, 1));\n \t      TREE_THIS_VOLATILE (*tp) = TREE_THIS_VOLATILE (old);\n \t      TREE_THIS_NOTRAP (*tp) = TREE_THIS_NOTRAP (old);\n@@ -860,6 +866,9 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t tweak some special cases.  */\n       copy_tree_r (tp, walk_subtrees, NULL);\n \n+      if (TREE_CODE (*tp) != OMP_CLAUSE)\n+\tTREE_TYPE (*tp) = remap_type (TREE_TYPE (*tp), id);\n+\n       /* Global variables we haven't seen yet need to go into referenced\n \t vars.  If not referenced from types only.  */\n       if (gimple_in_ssa_p (cfun)\n@@ -868,13 +877,6 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t  && !processing_debug_stmt)\n \tadd_referenced_var (*tp);\n \n-      /* We should never have TREE_BLOCK set on non-statements.  */\n-      if (EXPR_P (*tp))\n-\tgcc_assert (!TREE_BLOCK (*tp));\n-\n-      if (TREE_CODE (*tp) != OMP_CLAUSE)\n-\tTREE_TYPE (*tp) = remap_type (TREE_TYPE (*tp), id);\n-\n       if (TREE_CODE (*tp) == TARGET_EXPR && TREE_OPERAND (*tp, 3))\n \t{\n \t  /* The copied TARGET_EXPR has never been expanded, even if the"}]}