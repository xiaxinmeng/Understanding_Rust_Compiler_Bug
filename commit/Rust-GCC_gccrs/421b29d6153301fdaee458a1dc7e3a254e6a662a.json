{"sha": "421b29d6153301fdaee458a1dc7e3a254e6a662a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxYjI5ZDYxNTMzMDFmZGFlZTQ1OGExZGM3ZTNhMjU0ZTZhNjYyYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-12-12T01:31:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-12-12T01:31:30Z"}, "message": "Expensive selftests: torture testing for fix-it boundary conditions (PR c/82050)\n\nThis patch adds selftest coverage for the fix for PR c/82050.\n\nThe selftest iterates over various \"interesting\" column and line-width\nvalues to try to shake out bugs in the fix-it printing routines, a kind\nof \"torture\" selftest.\n\nUnfortunately this selftest is noticably slower than the other selftests;\nadding it to diagnostic-show-locus.c led to:\n  -fself-test: 40218 pass(es) in 0.172000 seconds\nslowing down to:\n  -fself-test: 97315 pass(es) in 6.109000 seconds\nfor an unoptimized build (e.g. when hacking with --disable-bootstrap).\n\nGiven that this affects the compile-edit-test cycle of the \"gcc\"\nsubdirectory, this felt like an unacceptable amount of overhead to add.\n\nI attempted to optimize the test by reducing the amount of coverage, but\nthe test seems useful, and there seems to be a valid role for \"torture\"\nselftests.\n\nHence this patch adds a:\n  gcc.dg/plugin/expensive_selftests_plugin.c\nwith the responsibility for running \"expensive\" selftests, and adds the\nexpensive test there.  The patch moves a small amount of code from\nselftest::run_tests into a helper class so that the plugin can print\na useful summary line (to reassure us that the tests are actually being\nrun).\n\nWith that, the compile-edit-test cycle of the \"gcc\" subdir is unaffected;\nthe plugin takes:\n  expensive_selftests_plugin: 26641 pass(es) in 3.127000 seconds\nwhich seems reasonable within the much longer time taken by \"make check\"\n(I optimized some of the overhead away, hence the reduction from 6 seconds\nabove down to 3 seconds).\n\ngcc/ChangeLog:\n\tPR c/82050\n\t* selftest-run-tests.c (selftest::run_tests): Move start/finish code\n\tto...\n\t* selftest.c (selftest::test_runner::test_runner): New ctor.\n\t(selftest::test_runner::~test_runner): New dtor.\n\t* selftest.h (class selftest::test_runner): New class.\n\ngcc/testsuite/ChangeLog:\n\tPR c/82050\n\t* gcc.dg/plugin/expensive-selftests-1.c: New file.\n\t* gcc.dg/plugin/expensive_selftests_plugin.c: New file.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n\nFrom-SVN: r255563", "tree": {"sha": "b27018e1eb914a962a27cfb2ca93872533a85971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b27018e1eb914a962a27cfb2ca93872533a85971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421b29d6153301fdaee458a1dc7e3a254e6a662a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421b29d6153301fdaee458a1dc7e3a254e6a662a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421b29d6153301fdaee458a1dc7e3a254e6a662a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421b29d6153301fdaee458a1dc7e3a254e6a662a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd147a267f57a7345767950ed4897d65424e838d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd147a267f57a7345767950ed4897d65424e838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd147a267f57a7345767950ed4897d65424e838d"}], "stats": {"total": 243, "additions": 234, "deletions": 9}, "files": [{"sha": "54df8c0ee727b1b58ed532e91bd68464e58f6106", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -1,3 +1,12 @@\n+2017-12-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/82050\n+\t* selftest-run-tests.c (selftest::run_tests): Move start/finish code\n+\tto...\n+\t* selftest.c (selftest::test_runner::test_runner): New ctor.\n+\t(selftest::test_runner::~test_runner): New dtor.\n+\t* selftest.h (class selftest::test_runner): New class.\n+\n 2017-12-11  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_extract_fp32_from_shorth,"}, {"sha": "63d6e071ecac5a2a7922aba16a16fdd04be559d9", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -48,7 +48,7 @@ selftest::run_tests ()\n      option-handling.  */\n   path_to_selftest_files = flag_self_test;\n \n-  long start_time = get_run_time ();\n+  test_runner r (\"-fself-test\");\n \n   /* Run all the tests, in hand-coded order of (approximate) dependencies:\n      run the tests for lowest-level code first.  */\n@@ -109,14 +109,7 @@ selftest::run_tests ()\n      failed to be finalized can be detected by valgrind.  */\n   forcibly_ggc_collect ();\n \n-  /* Finished running tests.  */\n-  long finish_time = get_run_time ();\n-  long elapsed_time = finish_time - start_time;\n-\n-  fprintf (stderr,\n-\t   \"-fself-test: %i pass(es) in %ld.%06ld seconds\\n\",\n-\t   num_passes,\n-\t   elapsed_time / 1000000, elapsed_time % 1000000);\n+  /* Finished running tests; the test_runner dtor will print a summary.  */\n }\n \n #endif /* #if CHECKING_P */"}, {"sha": "ca84bfaf43d4f429e2d3609de088cc3ee7f96972", "filename": "gcc/selftest.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -213,6 +213,28 @@ locate_file (const char *name)\n   return concat (path_to_selftest_files, \"/\", name, NULL);\n }\n \n+/* selftest::test_runner's ctor.  */\n+\n+test_runner::test_runner (const char *name)\n+: m_name (name),\n+  m_start_time (get_run_time ())\n+{\n+}\n+\n+/* selftest::test_runner's dtor.  Print a summary line to stderr.  */\n+\n+test_runner::~test_runner ()\n+{\n+  /* Finished running tests.  */\n+  long finish_time = get_run_time ();\n+  long elapsed_time = finish_time - m_start_time;\n+\n+  fprintf (stderr,\n+\t   \"%s: %i pass(es) in %ld.%06ld seconds\\n\",\n+\t   m_name, num_passes,\n+\t   elapsed_time / 1000000, elapsed_time % 1000000);\n+}\n+\n /* Selftests for libiberty.  */\n \n /* Verify that xstrndup generates EXPECTED when called on SRC and N.  */"}, {"sha": "68b2e8ebfc526f96cfb15f9f293a8d5fcb8eeafd", "filename": "gcc/selftest.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -168,6 +168,20 @@ extern char *locate_file (const char *path);\n \n extern const char *path_to_selftest_files;\n \n+/* selftest::test_runner is an implementation detail of selftest::run_tests,\n+   exposed here to allow plugins to run their own suites of tests.  */\n+\n+class test_runner\n+{\n+ public:\n+  test_runner (const char *name);\n+  ~test_runner ();\n+\n+ private:\n+  const char *m_name;\n+  long m_start_time;\n+};\n+\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void attribute_c_tests ();"}, {"sha": "a4bd47b613ef9a95d22f3561b9b36ceb0d402a13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -1,3 +1,10 @@\n+2017-12-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/82050\n+\t* gcc.dg/plugin/expensive-selftests-1.c: New file.\n+\t* gcc.dg/plugin/expensive_selftests_plugin.c: New file.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n+\n 2017-12-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.dg/pr83361.c: Add -Wno-div-by-zero to dg-options."}, {"sha": "e46411700fa65f6628adcf47dfe68925f727f42a", "filename": "gcc/testsuite/gcc.dg/plugin/expensive-selftests-1.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive-selftests-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive-selftests-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive-selftests-1.c?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -0,0 +1,3 @@\n+int not_empty;\n+\n+/* { dg-regexp \"expensive_selftests_plugin: .* pass\\\\(es\\\\) in .* seconds\" } */"}, {"sha": "94707644101219701bf326f01045f23138a1349d", "filename": "gcc/testsuite/gcc.dg/plugin/expensive_selftests_plugin.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive_selftests_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive_selftests_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fexpensive_selftests_plugin.c?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -0,0 +1,175 @@\n+/* Run expensive selftests.  */\n+/* { dg-options \"-O\" } */\n+\n+#include \"gcc-plugin.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include \"edit-context.h\"\n+#include \"selftest.h\"\n+#include \"selftest-diagnostic.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Subroutine of test_fixit_on_very_long_line.\n+   Verify that LOC has the EXPECTED_COLUMN, apart from the various\n+   cases where it can't.  */\n+\n+static void\n+verify_column (location_t loc,\n+\t       const line_map_ordinary *ord_map,\n+\t       int line_width,\n+\t       int expected_column)\n+{\n+  ASSERT_TRUE (/* Normal case.  */\n+\t       LOCATION_COLUMN (loc) == expected_column\n+\t       /* ord_map can't store columns e.g. due to\n+\t\t  max_column_hint being too high.  */\n+\t       || ord_map->m_column_and_range_bits == 0\n+\t       /* Running out of location_t values.  */\n+\t       || loc > LINE_MAP_MAX_LOCATION_WITH_COLS\n+\t       /* column exceeds LINE_MAP_MAX_COLUMN_NUMBER.  */\n+\t       || expected_column > (int)LINE_MAP_MAX_COLUMN_NUMBER\n+\t       /* column exceeds max_column_hint for ord_map.  */\n+\t       || expected_column > line_width);\n+}\n+\n+/* Subroutine of test_fixit_on_very_long_line.\n+   Run various things for RICHLOC, but don't check; we just want them\n+   to survive.  */\n+\n+static void\n+test_richloc (rich_location *richloc)\n+{\n+  /* Run the diagnostic and fix-it printing code.  */\n+  test_diagnostic_context dc;\n+  diagnostic_show_locus (&dc, richloc, DK_ERROR);\n+\n+  /* Generate a diff.  */\n+  edit_context ec;\n+  ec.add_fixits (richloc);\n+  char *diff = ec.generate_diff (true);\n+  free (diff);\n+}\n+\n+/* Verify that the fix-it-printing code can cope with very long lines\n+   (PR c/82050).  */\n+\n+static void\n+test_fixit_on_very_long_line (const line_table_case &case_)\n+{\n+  /* Various interesting column/line-width values, to try to tickle\n+     out bugs.  */\n+  const int VERY_LONG_LINE = 8192;\n+  const int columns[] = {0,\n+\t\t\t 1,\n+\t\t\t 80,\n+\t\t\t LINE_MAP_MAX_COLUMN_NUMBER - 2,\n+\t\t\t LINE_MAP_MAX_COLUMN_NUMBER - 1,\n+\t\t\t LINE_MAP_MAX_COLUMN_NUMBER,\n+\t\t\t LINE_MAP_MAX_COLUMN_NUMBER + 1,\n+\t\t\t LINE_MAP_MAX_COLUMN_NUMBER + 2,\n+\t\t\t VERY_LONG_LINE,\n+\t\t\t VERY_LONG_LINE + 5};\n+  for (unsigned int width_idx = 0; width_idx < ARRAY_SIZE (columns);\n+       width_idx++)\n+    {\n+      int line_width = columns[width_idx];\n+\n+      /* Create a source file with a very long line.  */\n+      named_temp_file tmp (\".c\");\n+      FILE *f = fopen (tmp.get_filename (), \"w\");\n+      for (int i = 0; i < line_width; i++)\n+\tfputc (' ', f);\n+      fputc ('\\n', f);\n+      fclose (f);\n+\n+      line_table_test ltt (case_);\n+      const line_map_ordinary *ord_map = linemap_check_ordinary\n+\t(linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 0));\n+      linemap_line_start (line_table, 1, line_width);\n+\n+      for (unsigned int start_idx = 0; start_idx < ARRAY_SIZE (columns);\n+\t   start_idx++)\n+\t{\n+\t  int start_col = columns[start_idx];\n+\t  location_t start_loc\n+\t    = linemap_position_for_line_and_column (line_table, ord_map, 1,\n+\t\t\t\t\t\t    start_col);\n+\t  verify_column (start_loc, ord_map, line_width, start_col);\n+\t  for (unsigned int finish_idx = 0; finish_idx < ARRAY_SIZE (columns);\n+\t       finish_idx++)\n+\t    {\n+\t      int finish_col = columns[finish_idx];\n+\t      location_t finish_loc\n+\t\t= linemap_position_for_line_and_column (line_table, ord_map, 1,\n+\t\t\t\t\t\t\tfinish_col);\n+\t      verify_column (finish_loc, ord_map, line_width, finish_col);\n+\n+\t      /* Now use start-finish to exercise the fix-it code.\n+\t\t In each case, run the printing code, but don't check;\n+\t\t we just want it to survive.  */\n+\n+\t      /* Insertion.  */\n+\t      {\n+\t\trich_location richloc (line_table, start_loc);\n+\t\trichloc.add_fixit_insert_after (start_loc, \"insertion\");\n+\t\ttest_richloc (&richloc);\n+\t      }\n+\n+\t      /* Replacement.  */\n+\t      {\n+\t\trich_location richloc (line_table, start_loc);\n+\t\tsource_range range\n+\t\t  = source_range::from_locations (start_loc, finish_loc);\n+\t\trichloc.add_fixit_replace (range, \"replacement\");\n+\t\ttest_richloc (&richloc);\n+\t      }\n+\n+\t      /* Deletion.  */\n+\t      {\n+\t\trich_location richloc (line_table, start_loc);\n+\t\tsource_range range\n+\t\t  = source_range::from_locations (start_loc, finish_loc);\n+\t\trichloc.add_fixit_remove (range);\n+\t\ttest_richloc (&richloc);\n+\t      }\n+\t    }\n+\t}\n+    }\n+}\n+\n+/* Callback handler for the PLUGIN_FINISH event.\n+   At this point, all GCC subsystems should be initialized and\n+   \"warmed up\"; this is where we run our unit tests.  */\n+\n+static void\n+expensive_tests (void */*gcc_data*/, void */*user_data*/)\n+{\n+  test_runner r (\"expensive_selftests_plugin\");\n+\n+  for_each_line_table_case (test_fixit_on_very_long_line);\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+#if CHECKING_P\n+  const char *plugin_name = plugin_info->base_name;\n+  register_callback (plugin_info->base_name,\n+\t\t     PLUGIN_FINISH,\n+\t\t     selftest::expensive_tests,\n+\t\t     NULL); /* void *user_data */\n+  return 0;\n+#endif /* #if CHECKING_P */\n+}"}, {"sha": "ff3c976483522bae08d7eef2d3f4d423cd4b0fe6", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b29d6153301fdaee458a1dc7e3a254e6a662a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=421b29d6153301fdaee458a1dc7e3a254e6a662a", "patch": "@@ -82,6 +82,8 @@ set plugin_test_list [list \\\n     { must_tail_call_plugin.c \\\n \t  must-tail-call-1.c \\\n \t  must-tail-call-2.c } \\\n+    { expensive_selftests_plugin.c \\\n+\t  expensive-selftests-1.c } \\\n ]\n \n foreach plugin_test $plugin_test_list {"}]}