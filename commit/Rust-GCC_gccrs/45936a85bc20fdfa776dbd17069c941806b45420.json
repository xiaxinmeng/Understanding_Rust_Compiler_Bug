{"sha": "45936a85bc20fdfa776dbd17069c941806b45420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5MzZhODViYzIwZmRmYTc3NmRiZDE3MDY5Yzk0MTgwNmI0NTQyMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-04-19T20:28:05Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-04-19T20:28:05Z"}, "message": "vms.h: Change OBJECT_SUFFIX and EXECUTABLE_SUFFIX to TARGET_OBJECT_SUFFIX and...\n\n* config/alpha/vms.h: Change OBJECT_SUFFIX and EXECUTABLE_SUFFIX\nto TARGET_OBJECT_SUFFIX and TARGET_EXECUTABLE_SUFFIX.\n* config/i386/cygwin.h: Likewise.\n* config/i386/mingw32.h: Likewise.\n* config/vax/vms.h: Likewise.\n* config/i386/djgpp.h: Remove NO_AUTO_EXE_SUFFIX.\n\n* config/alpha/xm-vms.h: Change OBJECT_SUFFIX and EXECUTABLE_SUFFIX\nto HOST_OBJECT_SUFFIX and HOST_EXECUTABLE_SUFFIX.\n* config/i386/xm-cygwin.h: Likewise.\n* config/i386/xm-djgpp.h: Likewise.\n* config/i386/xm-mingw32.h: Likewise.\n* config/vax/xm-vms.h: Likewise.\n\n* mkdeps.c (deps_add_default_target): Use TARGET_OBJECT_SUFFIX\ninstead of OBJECT_SUFFIX.\n* collect2.c (find_a_file): Look for files matching the extension\nHOST_EXECUTABLE_SUFFIX instead of EXECUTABLE_SUFFIX.\n* gcc.c (DEFAULT_SWITCH_CURTAILS_COMPILATION): Depend on\nTARGET_EXECUTABLE_SUFFIX.\n(find_a_file): Use HOST_EXECUTABLE_SUFFIX.\n(make_relative_prefix): Likewise.\n(convert_filename): Use TARGET_ suffixes throughout.  Remove\nNO_AUTO_EXE_SUFFIX.\n(process_command): Likewise.\n(do_spec_1): Likewise.\n* java/lang.c (init_parse): Likewise.\n\n* gcc.texi : Document four new options matching the pattern\n(HOST|TARGET)_(OBJECT|EXECUTABLE)_SUFFIX.  Remove documentation\nfor deleted macros OBJECT_SUFFIX and EXECUTABLE_SUFFIX.  Remove\ndocumentation for NO_AUTO_EXE_SUFFIX.\n\nFrom-SVN: r41428", "tree": {"sha": "cf6e83402e0ab4fcad7565cb7dd117ec00d26693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf6e83402e0ab4fcad7565cb7dd117ec00d26693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45936a85bc20fdfa776dbd17069c941806b45420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45936a85bc20fdfa776dbd17069c941806b45420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45936a85bc20fdfa776dbd17069c941806b45420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45936a85bc20fdfa776dbd17069c941806b45420/comments", "author": null, "committer": null, "parents": [{"sha": "57883c536c6b7c02f5a1af6dc734b8000ad170e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57883c536c6b7c02f5a1af6dc734b8000ad170e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57883c536c6b7c02f5a1af6dc734b8000ad170e2"}], "stats": {"total": 200, "additions": 128, "deletions": 72}, "files": [{"sha": "73c12a060749f04b401e38c1129cc43be44daef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -1,3 +1,38 @@\n+2001-04-19 DJ Delorie  <dj@redhat.com>\n+\n+\t* config/alpha/vms.h: Change OBJECT_SUFFIX and EXECUTABLE_SUFFIX\n+\tto TARGET_OBJECT_SUFFIX and TARGET_EXECUTABLE_SUFFIX.\n+\t* config/i386/cygwin.h: Likewise.\n+\t* config/i386/mingw32.h: Likewise.\n+\t* config/vax/vms.h: Likewise.\n+\t* config/i386/djgpp.h: Remove NO_AUTO_EXE_SUFFIX.\n+\n+\t* config/alpha/xm-vms.h: Change OBJECT_SUFFIX and EXECUTABLE_SUFFIX\n+\tto HOST_OBJECT_SUFFIX and HOST_EXECUTABLE_SUFFIX.\n+\t* config/i386/xm-cygwin.h: Likewise.\n+\t* config/i386/xm-djgpp.h: Likewise.\n+\t* config/i386/xm-mingw32.h: Likewise.\n+\t* config/vax/xm-vms.h: Likewise.\n+\n+\t* mkdeps.c (deps_add_default_target): Use TARGET_OBJECT_SUFFIX\n+\tinstead of OBJECT_SUFFIX.\n+\t* collect2.c (find_a_file): Look for files matching the extension\n+\tHOST_EXECUTABLE_SUFFIX instead of EXECUTABLE_SUFFIX.\n+\t* gcc.c (DEFAULT_SWITCH_CURTAILS_COMPILATION): Depend on \n+\tTARGET_EXECUTABLE_SUFFIX.\n+\t(find_a_file): Use HOST_EXECUTABLE_SUFFIX.\n+\t(make_relative_prefix): Likewise.\n+\t(convert_filename): Use TARGET_ suffixes throughout.  Remove\n+\tNO_AUTO_EXE_SUFFIX.\n+\t(process_command): Likewise.\n+\t(do_spec_1): Likewise.\n+\t* java/lang.c (init_parse): Likewise.\n+\n+\t* gcc.texi : Document four new options matching the pattern\n+\t(HOST|TARGET)_(OBJECT|EXECUTABLE)_SUFFIX.  Remove documentation\n+\tfor deleted macros OBJECT_SUFFIX and EXECUTABLE_SUFFIX.  Remove\n+\tdocumentation for NO_AUTO_EXE_SUFFIX.\n+\n 2001-04-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* toplev.h (struct lang_hooks): Allow decode_option to indicate"}, {"sha": "63ec00dacfdc954fb40174e90d59276a295875dd", "filename": "gcc/collect2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -652,8 +652,8 @@ find_a_file (pprefix, name)\n   if (debug)\n     fprintf (stderr, \"Looking for '%s'\\n\", name);\n   \n-#ifdef EXECUTABLE_SUFFIX\n-  len += strlen (EXECUTABLE_SUFFIX);\n+#ifdef HOST_EXECUTABLE_SUFFIX\n+  len += strlen (HOST_EXECUTABLE_SUFFIX);\n #endif\n \n   temp = xmalloc (len);\n@@ -676,11 +676,11 @@ find_a_file (pprefix, name)\n \t  return temp;\n \t}\n \n-#ifdef EXECUTABLE_SUFFIX\n+#ifdef HOST_EXECUTABLE_SUFFIX\n \t/* Some systems have a suffix for executable files.\n \t   So try appending that.  */\n       strcpy (temp, name);\n-\tstrcat (temp, EXECUTABLE_SUFFIX);\n+\tstrcat (temp, HOST_EXECUTABLE_SUFFIX);\n \t\n \tif (access (temp, X_OK) == 0)\n \t  return temp;\n@@ -702,10 +702,10 @@ find_a_file (pprefix, name)\n \t    && access (temp, X_OK) == 0)\n \t  return temp;\n \n-#ifdef EXECUTABLE_SUFFIX\n+#ifdef HOST_EXECUTABLE_SUFFIX\n \t/* Some systems have a suffix for executable files.\n \t   So try appending that.  */\n-\tstrcat (temp, EXECUTABLE_SUFFIX);\n+\tstrcat (temp, HOST_EXECUTABLE_SUFFIX);\n \t\n \tif (stat (temp, &st) >= 0\n \t    && ! S_ISDIR (st.st_mode)"}, {"sha": "1b7c64eba4dbaa3ed8019478c73a9ebc126bd0f2", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -20,6 +20,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define OPEN_VMS 1\n \n+#define TARGET_OBJECT_SUFFIX \".obj\"\n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+\n /* This enables certain macros in alpha.h, which will make an indirect\n    reference to an external symbol an invalid address.  This needs to be\n    defined before we include alpha.h, since it determines which macros"}, {"sha": "08b9739491139e89c34cc77d53d3204676a16cf4", "filename": "gcc/config/alpha/xm-vms.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-vms.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -76,5 +76,5 @@ Boston, MA 02111-1307, USA.  */\n #define STDC_HEADERS 1\n #define HAVE_STRINGIZE 1\n \n-#define OBJECT_SUFFIX \".obj\"\n-#define EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_OBJECT_SUFFIX \".obj\""}, {"sha": "ba51a6f576b849629dea910b3cf67af065c479c6", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -26,6 +26,8 @@ Boston, MA 02111-1307, USA. */\n #define SDB_DEBUGGING_INFO \n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+\n #include <stdio.h>\n #include \"i386/gas.h\"\n #include \"dbxcoff.h\""}, {"sha": "91940b570ef276b72f026fe380b19f4f0e2d8156", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -150,11 +150,6 @@ Boston, MA 02111-1307, USA.  */\n    unless user explicitly requests it.  */\n #undef LOCAL_INCLUDE_DIR\n \n-/* Do not make only .exe if no executable file suffix was specified.  */\n-/* Let the linker handle that.  */\n-#undef NO_AUTO_EXE_SUFFIX\n-#define NO_AUTO_EXE_SUFFIX\n-\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_ctor, in_dtor\n "}, {"sha": "ba546d6a0eb605e8650503769bb49dcf0222c422", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for\n    hosting on Windows32, using GNU tools and the Windows32 API Library.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -24,6 +24,8 @@ Boston, MA 02111-1307, USA. */\n \n #include \"i386/cygwin.h\"\n \n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+\n /* Please keep changes to CPP_PREDEFINES in sync with i386/crtdll. The\n    only difference between the two should be __MSVCRT__ needed to \n    distinguish MSVC from CRTDLL runtime in mingw headers. */"}, {"sha": "b8187f41ab5ff4fa2db2754a8c4a860a870ec1b0", "filename": "gcc/config/i386/xm-cygwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -19,7 +19,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA. */\n \n-#define EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n /* Even though Cygwin tries to hide the DOS based filesystem, it\n    still shows though at times.  */"}, {"sha": "c26a5cf7bc86e8c436e5e7a37b9be04f1d16a95f", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU C-compiler for Intel 80386 running DJGPP.\n-   Copyright (C) 1988, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1996, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n /* Use semicolons to separate elements of a path.  */\n #define PATH_SEPARATOR ';'\n \n-#define EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n /* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n #define DIR_SEPARATOR '/'"}, {"sha": "b7bbe5f63dc34b37b9b23d1a21d9751333f218d9", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA. */\n    like Cygwin does.  */\n #define HAVE_DOS_BASED_FILE_SYSTEM\n \n-#define EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n #undef PATH_SEPARATOR\n #define PATH_SEPARATOR ';'"}, {"sha": "3c0bec373700607daac0f2ca5272da6c4c7105c3", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1988, 1994, 1995, 1996, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995, 1996, 1997, 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,6 +20,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define VMS_TARGET\n \n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+#define TARGET_OBJECT_SUFFIX \".obj\"\n+\n /* This enables certain macros in vax.h, which will make an indirect\n    reference to an external symbol an invalid address.  This needs to be\n    defined before we include vax.h, since it determines which macros"}, {"sha": "8433990523fc4014a2d574de4f586020ca56d1de", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -170,5 +170,5 @@ Boston, MA 02111-1307, USA.  */\n  #pragma message disable (undefescap)\n #endif\n \n-#define OBJECT_SUFFIX \".obj\"\n-#define EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_EXECUTABLE_SUFFIX \".exe\"\n+#define HOST_OBJECT_SUFFIX \".obj\""}, {"sha": "cb0cf49c50b6c91b21cc156c870e12dd9a43b01d", "filename": "gcc/gcc.c", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -92,18 +92,26 @@ compilation is specified by a string called a \"spec\".  */\n extern int getrusage PARAMS ((int, struct rusage *));\n #endif\n \n-/* By default there is no special suffix for executables.  */\n-#ifdef EXECUTABLE_SUFFIX\n-#define HAVE_EXECUTABLE_SUFFIX\n+/* By default there is no special suffix for target executables.  */\n+/* FIXME: when autoconf is fixed, remove the host check - dj */\n+#if defined(TARGET_EXECUTABLE_SUFFIX) && defined(HOST_EXECUTABLE_SUFFIX)\n+#define HAVE_TARGET_EXECUTABLE_SUFFIX\n #else\n-#define EXECUTABLE_SUFFIX \"\"\n+#define TARGET_EXECUTABLE_SUFFIX \"\"\n #endif\n \n-/* By default, the suffix for object files is \".o\".  */\n-#ifdef OBJECT_SUFFIX\n-#define HAVE_OBJECT_SUFFIX\n+/* By default there is no special suffix for host executables.  */\n+#ifdef HOST_EXECUTABLE_SUFFIX\n+#define HAVE_HOST_EXECUTABLE_SUFFIX\n #else\n-#define OBJECT_SUFFIX \".o\"\n+#define HOST_EXECUTABLE_SUFFIX \"\"\n+#endif\n+\n+/* By default, the suffix for target object files is \".o\".  */\n+#ifdef TARGET_OBJECT_SUFFIX\n+#define HAVE_TARGET_OBJECT_SUFFIX\n+#else\n+#define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n \n #ifndef VMS\n@@ -721,7 +729,7 @@ static struct user_specs *user_specs_head, *user_specs_tail;\n #define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n #endif\n \f\n-#ifdef HAVE_EXECUTABLE_SUFFIX\n+#ifdef HAVE_TARGET_EXECUTABLE_SUFFIX\n /* This defines which switches stop a full compilation.  */\n #define DEFAULT_SWITCH_CURTAILS_COMPILATION(CHAR) \\\n   ((CHAR) == 'c' || (CHAR) == 'S')\n@@ -2232,8 +2240,8 @@ make_relative_prefix (progname, bin_prefix, prefix)\n \t\t    }\n \t\t  strcat (nstore, progname);\n \t\t  if (! access (nstore, X_OK)\n-#ifdef HAVE_EXECUTABLE_SUFFIX\n-                      || ! access (strcat (nstore, EXECUTABLE_SUFFIX), X_OK)\n+#ifdef HAVE_HOST_EXECUTABLE_SUFFIX\n+                      || ! access (strcat (nstore, HOST_EXECUTABLE_SUFFIX), X_OK)\n #endif\n \t\t      )\n \t\t    {\n@@ -2352,7 +2360,7 @@ find_a_file (pprefix, name, mode)\n      int mode;\n {\n   char *temp;\n-  const char *file_suffix = ((mode & X_OK) != 0 ? EXECUTABLE_SUFFIX : \"\");\n+  const char *file_suffix = ((mode & X_OK) != 0 ? HOST_EXECUTABLE_SUFFIX : \"\");\n   struct prefix_list *pl;\n   int len = pprefix->max_len + strlen (name) + strlen (file_suffix) + 1;\n \n@@ -2807,7 +2815,7 @@ static int warn_std;\n /* Gives value to pass as \"warn\" to add_prefix for standard prefixes.  */\n static int *warn_std_ptr = 0;\n \f\n-#if defined(HAVE_OBJECT_SUFFIX) || defined(HAVE_EXECUTABLE_SUFFIX)\n+#if defined(HAVE_TARGET_OBJECT_SUFFIX) || defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n \n /* Convert NAME to a new name if it is the standard suffix.  DO_EXE\n    is true if we should look for an executable suffix as well.  */\n@@ -2825,22 +2833,22 @@ convert_filename (name, do_exe)\n \n   len = strlen (name);\n \n-#ifdef HAVE_OBJECT_SUFFIX\n-  /* Convert x.o to x.obj if OBJECT_SUFFIX is \".obj\".  */\n+#ifdef HAVE_TARGET_OBJECT_SUFFIX\n+  /* Convert x.o to x.obj if TARGET_OBJECT_SUFFIX is \".obj\".  */\n   if (len > 2\n       && name[len - 2] == '.'\n       && name[len - 1] == 'o')\n     {\n       obstack_grow (&obstack, name, len - 2);\n-      obstack_grow0 (&obstack, OBJECT_SUFFIX, strlen (OBJECT_SUFFIX));\n+      obstack_grow0 (&obstack, TARGET_OBJECT_SUFFIX, strlen (TARGET_OBJECT_SUFFIX));\n       name = obstack_finish (&obstack);\n     }\n #endif\n \n-#if defined(HAVE_EXECUTABLE_SUFFIX) && !defined(NO_AUTO_EXE_SUFFIX)\n+#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n   /* If there is no filetype, make it the executable suffix (which includes\n      the \".\").  But don't get confused if we have just \"-o\".  */\n-  if (! do_exe || EXECUTABLE_SUFFIX[0] == 0 || (len == 2 && name[0] == '-'))\n+  if (! do_exe || TARGET_EXECUTABLE_SUFFIX[0] == 0 || (len == 2 && name[0] == '-'))\n     return name;\n \n   for (i = len - 1; i >= 0; i--)\n@@ -2852,7 +2860,7 @@ convert_filename (name, do_exe)\n       return name;\n \n   obstack_grow (&obstack, name, len);\n-  obstack_grow0 (&obstack, EXECUTABLE_SUFFIX, strlen (EXECUTABLE_SUFFIX));\n+  obstack_grow0 (&obstack, TARGET_EXECUTABLE_SUFFIX, strlen (TARGET_EXECUTABLE_SUFFIX));\n   name = obstack_finish (&obstack);\n #endif\n \n@@ -3445,7 +3453,7 @@ process_command (argc, argv)\n \n \t    case 'o':\n \t      have_o = 1;\n-#if defined(HAVE_EXECUTABLE_SUFFIX)\n+#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n \t      if (! have_c)\n \t\t{\n \t\t  int skip;\n@@ -3474,7 +3482,7 @@ process_command (argc, argv)\n \t\t    }\n \t\t}\n #endif\n-#if defined(HAVE_EXECUTABLE_SUFFIX) || defined(HAVE_OBJECT_SUFFIX)\n+#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n \t      if (p[1] == 0)\n \t\targv[i + 1] = convert_filename (argv[i + 1], ! have_c);\n \t      else\n@@ -3823,7 +3831,7 @@ process_command (argc, argv)\n \t}\n       else\n \t{\n-#ifdef HAVE_OBJECT_SUFFIX\n+#ifdef HAVE_TARGET_OBJECT_SUFFIX\n \t  argv[i] = convert_filename (argv[i], 0);\n #endif\n \n@@ -4246,17 +4254,17 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    if (*p == '.' || ISALPHA ((unsigned char) *p))\n \t\t      abort ();\n \t\t    if (suffix_length == 0)\n-\t\t      suffix = OBJECT_SUFFIX;\n+\t\t      suffix = TARGET_OBJECT_SUFFIX;\n \t\t    else\n \t\t      {\n \t\t\tsaved_suffix\n \t\t\t  = (char *) xmalloc (suffix_length\n-\t\t\t\t\t      + strlen (OBJECT_SUFFIX));\n+\t\t\t\t\t      + strlen (TARGET_OBJECT_SUFFIX));\n \t\t\tstrncpy (saved_suffix, suffix, suffix_length);\n \t\t\tstrcpy (saved_suffix + suffix_length,\n-\t\t\t\tOBJECT_SUFFIX);\n+\t\t\t\tTARGET_OBJECT_SUFFIX);\n \t\t      }\n-\t\t    suffix_length += strlen (OBJECT_SUFFIX);\n+\t\t    suffix_length += strlen (TARGET_OBJECT_SUFFIX);\n \t\t  }\n \n \t\t/* See if we already have an association of %g/%u/%U and\n@@ -4335,7 +4343,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    }\n \n \t  case 'O':\n-\t    obstack_grow (&obstack, OBJECT_SUFFIX, strlen (OBJECT_SUFFIX));\n+\t    obstack_grow (&obstack, TARGET_OBJECT_SUFFIX, strlen (TARGET_OBJECT_SUFFIX));\n \t    arg_going = 1;\n \t    break;\n "}, {"sha": "70ed3eb2acd9f3e1dbc26d44bc7038c6fe915e33", "filename": "gcc/gcc.texi", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -4116,23 +4116,31 @@ character constant specifying that character.  When GCC displays file\n names, the character you specify will be used.  GCC will test for\n both slash and the character you specify when parsing filenames.\n \n-@findex OBJECT_SUFFIX\n-@item OBJECT_SUFFIX\n+@findex TARGET_OBJECT_SUFFIX\n+@item TARGET_OBJECT_SUFFIX\n Define this macro to be a C string representing the suffix for object\n-files on your machine.  If you do not define this macro, GCC will use\n-@samp{.o} as the suffix for object files.\n-\n-@findex EXECUTABLE_SUFFIX\n-@item EXECUTABLE_SUFFIX\n-Define this macro to be a C string representing the suffix for executable\n-files on your machine.  If you do not define this macro, GCC will use\n-the null string as the suffix for object files.\n-\n-@findex NO_AUTO_EXE_SUFFIX\n-@item NO_AUTO_EXE_SUFFIX\n-Define this macro if executable files on your machine have a suffix, but \n-the compiler driver should not automatically append it to the output file\n-name, if user hasn't specified one.\n+files on your target machine.  If you do not define this macro, GCC will\n+use @samp{.o} as the suffix for object files.\n+\n+@findex TARGET_EXECUTABLE_SUFFIX\n+@item TARGET_EXECUTABLE_SUFFIX\n+Define this macro to be a C string representing the suffix to be\n+automatically added to executable files on your target machine.  If you\n+do not define this macro, GCC will use the null string as the suffix for\n+executable files.\n+\n+@findex HOST_OBJECT_SUFFIX\n+@item HOST_OBJECT_SUFFIX\n+Define this macro to be a C string representing the suffix for object\n+files on your host machine (@samp{xm-*.h}).  If you do not define this\n+macro, GCC will use @samp{.o} as the suffix for object files.\n+\n+@findex HOST_EXECUTABLE_SUFFIX\n+@item HOST_EXECUTABLE_SUFFIX\n+Define this macro to be a C string representing the suffix for\n+executable files on your host machine (@samp{xm-*.h}).  If you do not\n+define this macro, GCC will use the null string as the suffix for\n+executable files.\n \n @findex HOST_BIT_BUCKET\n @item HOST_BIT_BUCKET"}, {"sha": "0c0b4d6fdf08f77e6c4cf0de5c9c5ff222a74d63", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -56,8 +56,8 @@ static int process_option_with_no PARAMS ((char *,\n \t\t\t\t\t   struct string_option *,\n \t\t\t\t\t   int));\n \n-#ifndef OBJECT_SUFFIX\n-# define OBJECT_SUFFIX \".o\"\n+#ifndef TARGET_OBJECT_SUFFIX\n+# define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n \n /* Table indexed by tree code giving a string containing a character\n@@ -408,7 +408,7 @@ init_parse (filename)\n \t      else\n \t\t{\n \t\t  char *buf = (char *) xmalloc (dot - filename +\n-\t\t\t\t\t\t3 + sizeof (OBJECT_SUFFIX));\n+\t\t\t\t\t\t3 + sizeof (TARGET_OBJECT_SUFFIX));\n \t\t  strncpy (buf, filename, dot - filename);\n \n \t\t  /* If emitting class files, we might have multiple\n@@ -421,7 +421,7 @@ init_parse (filename)\n \t\t    jcf_dependency_set_target (NULL);\n \t\t  else\n \t\t    {\n-\t\t      strcpy (buf + (dot - filename), OBJECT_SUFFIX);\n+\t\t      strcpy (buf + (dot - filename), TARGET_OBJECT_SUFFIX);\n \t\t      jcf_dependency_set_target (buf);\n \t\t    }\n "}, {"sha": "70c78f5d6a332c524e4b4966804782f2294d57d4", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45936a85bc20fdfa776dbd17069c941806b45420/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=45936a85bc20fdfa776dbd17069c941806b45420", "patch": "@@ -188,19 +188,19 @@ deps_add_default_target (d, tgt)\n     deps_add_target (d, \"-\", 1);\n   else\n     {\n-#ifndef OBJECT_SUFFIX\n-# define OBJECT_SUFFIX \".o\"\n+#ifndef TARGET_OBJECT_SUFFIX\n+# define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n       char *start = lbasename (tgt);\n-      char *o = (char *) alloca (strlen (start) + strlen (OBJECT_SUFFIX) + 1);\n+      char *o = (char *) alloca (strlen (start) + strlen (TARGET_OBJECT_SUFFIX) + 1);\n       char *suffix;\n \n       strcpy (o, start);\n       \n       suffix = strrchr (o, '.');\n       if (!suffix)\n         suffix = o + strlen (o);\n-      strcpy (suffix, OBJECT_SUFFIX);\n+      strcpy (suffix, TARGET_OBJECT_SUFFIX);\n       \n       deps_add_target (d, o, 1);\n     }"}]}