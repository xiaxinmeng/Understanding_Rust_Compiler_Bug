{"sha": "b5c878a5159f7d60f0c451b25888bcb2af4025e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjODc4YTUxNTlmN2Q2MGYwYzQ1MWIyNTg4OGJjYjJhZjQwMjVlNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-08T11:17:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-08T11:17:31Z"}, "message": "re PR tree-optimization/45578 (The polyhedron test mdbx is miscompiled with -O2 -ftree-vectorize at revision 163915)\n\n2010-09-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45578\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr):\n\tBe more careful when transfering alignment information to\n\tthe new induction variable.\n\t(copy_ref_info): Likewise.\n\n\t* gfortran.dg/pr45578.f90: New testcase.\n\nFrom-SVN: r163997", "tree": {"sha": "d55011734cc9ed57533d95ea89e04d8136321642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d55011734cc9ed57533d95ea89e04d8136321642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c878a5159f7d60f0c451b25888bcb2af4025e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c878a5159f7d60f0c451b25888bcb2af4025e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c878a5159f7d60f0c451b25888bcb2af4025e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c878a5159f7d60f0c451b25888bcb2af4025e5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88a2722e1fd941a7d02575a6663641d0739939a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a2722e1fd941a7d02575a6663641d0739939a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a2722e1fd941a7d02575a6663641d0739939a5"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "6da2bc44e96416fd2c2be19f92ee2a2f12c9cbc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5c878a5159f7d60f0c451b25888bcb2af4025e5", "patch": "@@ -1,3 +1,11 @@\n+2010-09-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45578\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr):\n+\tBe more careful when transfering alignment information to\n+\tthe new induction variable.\n+\t(copy_ref_info): Likewise.\n+\n 2010-09-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (TYPE_ORIG_SIZE_TYPE): Remove."}, {"sha": "1f2cb9202cb654e1f79dc10c4eda72fc2a0a135e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5c878a5159f7d60f0c451b25888bcb2af4025e5", "patch": "@@ -1,3 +1,8 @@\n+2010-09-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45578\n+\t* gfortran.dg/pr45578.f90: New testcase.\n+\n 2010-09-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/45590"}, {"sha": "da8863dc64ec0c317a13a695f4b2340ef89f4611", "filename": "gcc/testsuite/gfortran.dg/pr45578.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45578.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45578.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45578.f90?ref=b5c878a5159f7d60f0c451b25888bcb2af4025e5", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+!*==CENTCM.spg  processed by SPAG 6.55Dc at 09:26 on 23 Sep 2005\n+      SUBROUTINE CENTCM\n+      IMPLICIT DOUBLE PRECISION(A-H,O-Z)\n+      PARAMETER (NM=16384)\n+      PARAMETER (NG=100)\n+      PARAMETER (NH=100)\n+      PARAMETER (MU=20)\n+      PARAMETER (NL=1)\n+      PARAMETER (LL=10*NM)\n+      PARAMETER (KP=2001,KR=2001,KG=2001)\n+      COMMON /LCS   / X0(3,-2:NM) , X(3,-2:NM,5) , XIN(3,-2:NM)\n+      COMMON /MOLEC / LPBc(3) , MOLsp , MOLsa , NBX , NBY , NBZ , NPLa ,&\n+     &                LPBcsm\n+      cm1 = 0.D0\n+      cm2 = 0.D0\n+      cm3 = 0.D0\n+      DO i = 1 , MOLsa\n+         cm1 = cm1 + X0(1,i)\n+         cm2 = cm2 + X0(2,i)\n+         cm3 = cm3 + X0(3,i)\n+      ENDDO\n+      cm1 = cm1/MOLsa\n+      cm2 = cm2/MOLsa\n+      cm3 = cm3/MOLsa\n+      IF ( (cm1.EQ.0.D0) .AND. (cm2.EQ.0.D0) .AND. (cm3.EQ.0.D0) )      &\n+     &     RETURN\n+      DO i = 1 , MOLsa\n+        X0(1,i) = X0(1,i) - cm1\n+        X0(2,i) = X0(2,i) - cm2\n+        X0(3,i) = X0(3,i) - cm3\n+        XIN(1,i) = XIN(1,i) - cm1\n+        XIN(2,i) = XIN(2,i) - cm2\n+        XIN(3,i) = XIN(3,i) - cm3\n+      ENDDO\n+      CONTINUE\n+      END\n+      PROGRAM test\n+      IMPLICIT DOUBLE PRECISION(A-H,O-Z)\n+      PARAMETER (NM=16384)\n+      PARAMETER (NG=100)\n+      PARAMETER (NH=100)\n+      PARAMETER (MU=20)\n+      PARAMETER (NL=1)\n+      PARAMETER (LL=10*NM)\n+      PARAMETER (KP=2001,KR=2001,KG=2001)\n+      COMMON /LCS   / X0(3,-2:NM) , X(3,-2:NM,5) , XIN(3,-2:NM)\n+      COMMON /MOLEC / LPBc(3) , MOLsp , MOLsa , NBX , NBY , NBZ , NPLa ,&\n+     &                LPBcsm\n+      MOLsa = 10\n+      X0 = 1.\n+      CALL CENTCM\n+      END"}, {"sha": "432b3f95c45472fd60f35cec349d4ab62f05bb6f", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c878a5159f7d60f0c451b25888bcb2af4025e5/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b5c878a5159f7d60f0c451b25888bcb2af4025e5", "patch": "@@ -5863,7 +5863,16 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n       comp = force_gimple_operand_gsi (&bsi, comp, true, NULL_TREE,\n \t\t\t\t       true, GSI_SAME_STMT);\n       if (POINTER_TYPE_P (TREE_TYPE (tgt)))\n-\tduplicate_ssa_name_ptr_info (comp, SSA_NAME_PTR_INFO (tgt));\n+\t{\n+\t  duplicate_ssa_name_ptr_info (comp, SSA_NAME_PTR_INFO (tgt));\n+\t  /* As this isn't a plain copy we have to reset alignment\n+\t     information.  */\n+\t  if (SSA_NAME_PTR_INFO (comp))\n+\t    {\n+\t      SSA_NAME_PTR_INFO (comp)->align = BITS_PER_UNIT;\n+\t      SSA_NAME_PTR_INFO (comp)->misalign = 0;\n+\t    }\n+\t}\n     }\n \n   if (gimple_code (use->stmt) == GIMPLE_PHI)\n@@ -5891,26 +5900,44 @@ copy_ref_info (tree new_ref, tree old_ref)\n   TREE_SIDE_EFFECTS (new_ref) = TREE_SIDE_EFFECTS (old_ref);\n   TREE_THIS_VOLATILE (new_ref) = TREE_THIS_VOLATILE (old_ref);\n \n-  if (TREE_CODE (new_ref) == TARGET_MEM_REF)\n-    new_ptr_base = TMR_BASE (new_ref);\n-  else if (TREE_CODE (new_ref) == MEM_REF)\n-    new_ptr_base = TREE_OPERAND (new_ref, 0);\n+  new_ptr_base = TREE_OPERAND (new_ref, 0);\n \n   /* We can transfer points-to information from an old pointer\n      or decl base to the new one.  */\n   if (new_ptr_base\n       && TREE_CODE (new_ptr_base) == SSA_NAME\n-      && POINTER_TYPE_P (TREE_TYPE (new_ptr_base))\n       && !SSA_NAME_PTR_INFO (new_ptr_base))\n     {\n       tree base = get_base_address (old_ref);\n       if (!base)\n \t;\n-      else if ((INDIRECT_REF_P (base)\n-\t\t|| TREE_CODE (base) == MEM_REF)\n-\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n-\tduplicate_ssa_name_ptr_info\n-\t  (new_ptr_base, SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)));\n+      else if ((TREE_CODE (base) == MEM_REF\n+\t\t|| TREE_CODE (base) == TARGET_MEM_REF)\n+\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n+\t       && SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)))\n+\t{\n+\t  struct ptr_info_def *new_pi;\n+\t  duplicate_ssa_name_ptr_info\n+\t    (new_ptr_base, SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)));\n+\t  new_pi = SSA_NAME_PTR_INFO (new_ptr_base);\n+\t  /* We have to be careful about transfering alignment information.  */\n+\t  if (TREE_CODE (old_ref) == MEM_REF\n+\t      && !(TREE_CODE (new_ref) == TARGET_MEM_REF\n+\t\t   && (TMR_INDEX2 (new_ref)\n+\t\t       || (TMR_STEP (new_ref)\n+\t\t\t   && (TREE_INT_CST_LOW (TMR_STEP (new_ref))\n+\t\t\t       < new_pi->align)))))\n+\t    {\n+\t      new_pi->misalign += double_int_sub (mem_ref_offset (old_ref),\n+\t\t\t\t\t\t  mem_ref_offset (new_ref)).low;\n+\t      new_pi->misalign &= (new_pi->align - 1);\n+\t    }\n+\t  else\n+\t    {\n+\t      new_pi->align = BITS_PER_UNIT;\n+\t      new_pi->misalign = 0;\n+\t    }\n+\t}\n       else if (TREE_CODE (base) == VAR_DECL\n \t       || TREE_CODE (base) == PARM_DECL\n \t       || TREE_CODE (base) == RESULT_DECL)"}]}