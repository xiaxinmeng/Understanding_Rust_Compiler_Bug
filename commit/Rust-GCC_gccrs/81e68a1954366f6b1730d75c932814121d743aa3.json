{"sha": "81e68a1954366f6b1730d75c932814121d743aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFlNjhhMTk1NDM2NmY2YjE3MzBkNzVjOTMyODE0MTIxZDc0M2FhMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-03-01T10:45:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:14Z"}, "message": "[Ada] Rename Ada 202* to Ada 2022\n\ngcc/ada/\n\n\t* einfo.ads, errout.adb, errout.ads, exp_aggr.adb, exp_ch5.adb,\n\texp_ch6.adb, exp_ch8.adb, exp_ch9.adb, exp_imgv.adb,\n\texp_put_image.adb, fe.h, impunit.adb, impunit.ads,\n\tlibgnat/a-cobove.ads, libgnat/a-convec.ads, opt.ads,\n\tpar-ch12.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb,\n\tpar-ch6.adb, par-prag.adb, par-util.adb, scans.ads, scng.adb,\n\tsem_aggr.adb, sem_attr.adb, sem_ch10.adb, sem_ch12.adb,\n\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n\tsem_ch8.adb, sem_elab.adb, sem_eval.adb, sem_prag.adb,\n\tsem_res.adb, sem_type.adb, sem_util.adb, sem_util.ads,\n\tsinfo.ads, snames.ads-tmpl, sprint.adb, switch-c.adb, usage.adb,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_rm/implementation_defined_aspects.rst,\n\tgcc-interface/trans.c: Update all references to Ada 2020 to Ada\n\t2022. Rename pragma Ada_2020 to Ada_2022.  Update documentation\n\taccordingly.\n\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.", "tree": {"sha": "b66305227a77d8647e736d618980b8474147ab37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b66305227a77d8647e736d618980b8474147ab37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81e68a1954366f6b1730d75c932814121d743aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e68a1954366f6b1730d75c932814121d743aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e68a1954366f6b1730d75c932814121d743aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e68a1954366f6b1730d75c932814121d743aa3/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbdeeb889dfd4dcce214e1525b56a7464128a3c"}], "stats": {"total": 541, "additions": 290, "deletions": 251}, "files": [{"sha": "313e8c49d2f772fdd3c3fb0a3e71e2fe9c983747", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -566,7 +566,7 @@ Aspect Unreferenced\n \n This boolean aspect is equivalent to :ref:`pragma Unreferenced<Pragma-Unreferenced>`.\n \n-When using the ``-gnat2020`` switch, this aspect is also supported on formal\n+When using the ``-gnat2022`` switch, this aspect is also supported on formal\n parameters, which is in particular the only form possible for expression\n functions.\n "}, {"sha": "3da03dfd307237bc88fb19f8b27872b13335f241", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1380,6 +1380,12 @@ Alphabetical List of All Switches\n   Allow full Ada 2012 features (same as :switch:`-gnat12`)\n \n \n+.. index:: -gnat2022  (gcc)\n+\n+:switch:`-gnat2022`\n+  Allow full Ada 2022 features\n+\n+\n :switch:`-gnat83`\n   Enforce Ada 83 restrictions.\n \n@@ -5502,15 +5508,23 @@ indicate Ada 83 compatibility mode.\n   for further information).\n \n \n+.. index:: -gnat2022  (gcc)\n+.. index:: Ada 2022 mode\n+\n+:switch:`-gnat2022` (Ada 2022 mode)\n+  This switch directs the compiler to implement the Ada 2022 version of the\n+  language.\n+\n+\n .. index:: -gnatX  (gcc)\n .. index:: Ada language extensions\n .. index:: GNAT extensions\n \n :switch:`-gnatX` (Enable GNAT Extensions)\n   This switch directs the compiler to implement the latest version of the\n-  language (currently Ada 2012) and also to enable certain GNAT implementation\n+  language (currently Ada 2022) and also to enable certain GNAT implementation\n   extensions that are not part of any Ada standard. For a full list of these\n-  extensions, see the GNAT reference manual.\n+  extensions, see the GNAT reference manual, ``Pragma Extensions_Allowed``.\n \n \n .. _Character_Set_Control:"}, {"sha": "362e665b372139d35ced762733c4590e00862f95", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -88,10 +88,10 @@ package Einfo is\n --  default size of objects, creates chaos, and major incompatibilities in\n --  existing code.\n \n---  The Ada 2020 RM acknowledges it and adopts GNAT's Object_Size attribute\n+--  The Ada 2022 RM acknowledges it and adopts GNAT's Object_Size attribute\n --  for determining the default size of objects, but stops short of applying\n --  it universally like GNAT. Indeed the notable exceptions are nonaliased\n---  stand-alone objects, which are not covered by Object_Size in Ada 2020.\n+--  stand-alone objects, which are not covered by Object_Size in Ada 2022.\n \n --  We proceed as follows, for discrete and fixed-point subtypes, we have\n --  two separate sizes for each subtype:\n@@ -118,7 +118,7 @@ package Einfo is\n --       base type, and the Object_Size of a derived first subtype is copied\n --       from the parent first subtype.\n \n---    The Ada 2020 RM defined attribute Object_Size uses this implementation.\n+--    The Ada 2022 RM defined attribute Object_Size uses this implementation.\n \n --    The Value_Size, which is the number of bits required to store a value\n --    of the type. This size can be referred to using the Value_Size\n@@ -157,7 +157,7 @@ package Einfo is\n \n --    Value_Size and Object_Size may be explicitly set for any subtype using\n --    an attribute definition clause. Note that the use of such a clause can\n---    cause the RM 13.1(14) rule to be violated, in Ada 95 and 2020 for the\n+--    cause the RM 13.1(14) rule to be violated, in Ada 95 and 2022 for the\n --    Value_Size attribute, but only in Ada 95 for the Object_Size attribute.\n --    If access types reference aliased objects whose subtypes have differing\n --    Object_Size values as a result of explicit attribute definition clauses,\n@@ -2335,7 +2335,7 @@ package Einfo is\n --    Is_Full_Access (synth)\n --       Defined in all type entities, and also in constants, components and\n --       variables. Set if an aspect/pragma Atomic/Shared, or an aspect/pragma\n---       Volatile_Full_Access or an Ada 2020 aspect Full_Access_Only applies\n+--       Volatile_Full_Access or an Ada 2022 aspect Full_Access_Only applies\n --       to the entity. In the case of private and incomplete types, the flag\n --       applies to both the partial view and the full view.\n \n@@ -3377,7 +3377,7 @@ package Einfo is\n \n --    Is_Volatile_Full_Access (Flag285)\n --       Defined in all type entities, and also in constants, components, and\n---       variables. Set if an aspect/pragma Volatile_Full_Access or an Ada 2020\n+--       variables. Set if an aspect/pragma Volatile_Full_Access or an Ada 2022\n --       aspect Full_Access_Only applies to the entity. In the case of private\n --       and incomplete types, this flag is set in both the partial view and\n --       the full view."}, {"sha": "09092f93d3015971ea1389ee11ef5f5c92bf6d42", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -670,22 +670,22 @@ package body Errout is\n    end Error_Msg_Ada_2012_Feature;\n \n    --------------------------------\n-   -- Error_Msg_Ada_2020_Feature --\n+   -- Error_Msg_Ada_2022_Feature --\n    --------------------------------\n \n-   procedure Error_Msg_Ada_2020_Feature (Feature : String; Loc : Source_Ptr) is\n+   procedure Error_Msg_Ada_2022_Feature (Feature : String; Loc : Source_Ptr) is\n    begin\n-      if Ada_Version < Ada_2020 then\n-         Error_Msg (Feature & \" is an Ada 2020 feature\", Loc);\n+      if Ada_Version < Ada_2022 then\n+         Error_Msg (Feature & \" is an Ada 2022 feature\", Loc);\n \n          if No (Ada_Version_Pragma) then\n-            Error_Msg (\"\\unit must be compiled with -gnat2020 switch\", Loc);\n+            Error_Msg (\"\\unit must be compiled with -gnat2022 switch\", Loc);\n          else\n             Error_Msg_Sloc := Sloc (Ada_Version_Pragma);\n             Error_Msg (\"\\incompatible with Ada version set#\", Loc);\n          end if;\n       end if;\n-   end Error_Msg_Ada_2020_Feature;\n+   end Error_Msg_Ada_2022_Feature;\n \n    ------------------\n    -- Error_Msg_AP --"}, {"sha": "0a4ad621f5f680f2f530cb68d5eec59df28f2547", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -939,8 +939,8 @@ package Errout is\n    --  contain error message insertion characters in the normal manner, and in\n    --  particular may start with | to flag a non-serious error.\n \n-   procedure Error_Msg_Ada_2020_Feature (Feature : String; Loc : Source_Ptr);\n-   --  Analogous to Error_Msg_Ada_2012_Feature\n+   procedure Error_Msg_Ada_2022_Feature (Feature : String; Loc : Source_Ptr);\n+   --  Analogous to Error_Msg_Ada_2012_Feature, for Ada 2022\n \n    procedure dmsg (Id : Error_Msg_Id) renames Erroutc.dmsg;\n    --  Debugging routine to dump an error message"}, {"sha": "345baaf5b696c1af8ef99ca865ef51a35cf6f0b1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -2466,7 +2466,7 @@ package body Exp_Aggr is\n             Assoc := Last (Component_Associations (N));\n \n             if Nkind (Assoc) = N_Iterated_Component_Association then\n-               --  Ada 2020: generate a loop to have a proper scope for\n+               --  Ada 2022: generate a loop to have a proper scope for\n                --  the identifier that typically appears in the expression.\n                --  The lower bound of the loop is the position after all\n                --  previous positional components."}, {"sha": "c8866071ab86f254c4c4ace2a3e71f0afbe06060", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -3900,7 +3900,7 @@ package body Exp_Ch5 is\n \n    begin\n       if Present (Iterator_Filter (I_Spec)) then\n-         pragma Assert (Ada_Version >= Ada_2020);\n+         pragma Assert (Ada_Version >= Ada_2022);\n          Stats := New_List (Make_If_Statement (Loc,\n             Condition => Iterator_Filter (I_Spec),\n             Then_Statements => Stats));\n@@ -4201,7 +4201,7 @@ package body Exp_Ch5 is\n \n    begin\n       if Present (Iterator_Filter (I_Spec)) then\n-         pragma Assert (Ada_Version >= Ada_2020);\n+         pragma Assert (Ada_Version >= Ada_2022);\n          Stats := New_List (Make_If_Statement (Loc,\n             Condition => Iterator_Filter (I_Spec),\n             Then_Statements => Stats));\n@@ -4701,7 +4701,7 @@ package body Exp_Ch5 is\n             end if;\n \n             if Present (Iterator_Filter (LPS)) then\n-               pragma Assert (Ada_Version >= Ada_2020);\n+               pragma Assert (Ada_Version >= Ada_2022);\n                Set_Statements (N,\n                   New_List (Make_If_Statement (Loc,\n                     Condition => Iterator_Filter (LPS),"}, {"sha": "f03eb486a40317c69492aee694058cd209c0b44c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -2665,7 +2665,7 @@ package body Exp_Ch6 is\n       --  itself must not be rewritten, to prevent infinite recursion).\n \n       Must_Rewrite_Indirect_Call : constant Boolean :=\n-        Ada_Version >= Ada_2020\n+        Ada_Version >= Ada_2022\n           and then Nkind (Name (N)) = N_Explicit_Dereference\n           and then Ekind (Etype (Name (N))) = E_Subprogram_Type\n           and then Present\n@@ -6244,7 +6244,7 @@ package body Exp_Ch6 is\n                            (Postconditions_Proc (Spec_Id), Loc)))));\n             end if;\n \n-            --  Ada 2020 (AI12-0279): append the call to 'Yield unless this is\n+            --  Ada 2022 (AI12-0279): append the call to 'Yield unless this is\n             --  a generic subprogram (since in such case it will be added to\n             --  the instantiations).\n \n@@ -6700,7 +6700,7 @@ package body Exp_Ch6 is\n                      (Postconditions_Proc (Scope_Id), Loc)))));\n       end if;\n \n-      --  Ada 2020 (AI12-0279)\n+      --  Ada 2022 (AI12-0279)\n \n       if Has_Yield_Aspect (Scope_Id)\n         and then RTE_Available (RE_Yield)\n@@ -7650,7 +7650,7 @@ package body Exp_Ch6 is\n          Analyze_And_Resolve (Exp);\n       end if;\n \n-      --  Ada 2020 (AI12-0279)\n+      --  Ada 2022 (AI12-0279)\n \n       if Has_Yield_Aspect (Scope_Id)\n         and then RTE_Available (RE_Yield)"}, {"sha": "dba21edc089a111b8133fa3b79f13bce4d0e9255", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -76,7 +76,7 @@ package body Exp_Ch8 is\n    --  clause applies (that can specify an arbitrary bit boundary), or where\n    --  the enclosing record itself has a non-standard representation.\n \n-   --  In Ada 2020, a third case arises when the renamed object is a nonatomic\n+   --  In Ada 2022, a third case arises when the renamed object is a nonatomic\n    --  subcomponent of an atomic object, because reads of or writes to it must\n    --  access the enclosing atomic object. That's also the case for an object\n    --  subject to the Volatile_Full_Access GNAT aspect/pragma in any language"}, {"sha": "fa2d84d089c0d60c895591f5206252506bfac000", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -841,7 +841,7 @@ package body Exp_Ch9 is\n       Insert_Before (Last (Statements (Stats)), Call);\n       Analyze (Call);\n \n-      --  Ada 2020 (AI12-0279)\n+      --  Ada 2022 (AI12-0279)\n \n       if Has_Yield_Aspect (Entity (Entry_Direct_Name (Astat)))\n         and then RTE_Available (RE_Yield)\n@@ -864,7 +864,7 @@ package body Exp_Ch9 is\n             Append (Call, Statements (Hand));\n             Analyze (Call);\n \n-            --  Ada 2020 (AI12-0279)\n+            --  Ada 2022 (AI12-0279)\n \n             if Has_Yield_Aspect (Entity (Entry_Direct_Name (Astat)))\n               and then RTE_Available (RE_Yield)\n@@ -917,7 +917,7 @@ package body Exp_Ch9 is\n \n             Statements => New_List (Call))));\n \n-      --  Ada 2020 (AI12-0279)\n+      --  Ada 2022 (AI12-0279)\n \n       if Has_Yield_Aspect (Entity (Entry_Direct_Name (Astat)))\n         and then RTE_Available (RE_Yield)\n@@ -6209,11 +6209,11 @@ package body Exp_Ch9 is\n       begin\n          if Is_Static_Expression (N) then\n             return True;\n-         elsif Ada_Version >= Ada_2020\n+         elsif Ada_Version >= Ada_2022\n            and then Nkind (N) in N_Selected_Component | N_Indexed_Component\n            and then Statically_Names_Object (N)\n          then\n-            --  Restriction relaxed in Ada2020 to allow statically named\n+            --  Restriction relaxed in Ada 2022 to allow statically named\n             --  subcomponents.\n             return Is_Simple_Barrier (Prefix (N));\n          end if;\n@@ -6668,7 +6668,7 @@ package body Exp_Ch9 is\n \n          Analyze (N);\n \n-         --  Ada 2020 (AI12-0279)\n+         --  Ada 2022 (AI12-0279)\n \n          if Has_Yield_Aspect (Eent)\n            and then RTE_Available (RE_Yield)\n@@ -11005,7 +11005,7 @@ package body Exp_Ch9 is\n                Entry_Id : constant Entity_Id :=\n                            Entity (Entry_Direct_Name (Accept_Statement (Alt)));\n             begin\n-               --  Ada 2020 (AI12-0279)\n+               --  Ada 2022 (AI12-0279)\n \n                if Has_Yield_Aspect (Entry_Id)\n                  and then RTE_Available (RE_Yield)"}, {"sha": "3e7336aaf8cff822cad6f6f44ff0df758c54d152", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1041,7 +1041,7 @@ package body Exp_Imgv is\n \n       Ptyp := Underlying_Type (Entity (Pref));\n \n-      --  Ada 2020 allows 'Image on private types, so fetch the underlying\n+      --  Ada 2022 allows 'Image on private types, so fetch the underlying\n       --  type to obtain the structure of the type. We use the base type,\n       --  not the root type for discrete types, to handle properly derived\n       --  types, but we use the root type for enumeration types, because the\n@@ -1259,7 +1259,7 @@ package body Exp_Imgv is\n              Prefix         => New_Occurrence_Of (Ptyp, Loc),\n              Expressions    => New_List (Expr)));\n \n-      --  AI12-0020: Ada 2020 allows 'Image for all types, including private\n+      --  AI12-0020: Ada 2022 allows 'Image for all types, including private\n       --  types. If the full type is not a fixed-point type, then it is enough\n       --  to set the Conversion_OK flag. However, that would not work for\n       --  fixed-point types, because that flag changes the run-time semantics"}, {"sha": "a41b71f1795e0d926b3ff3252711a290e4949d60", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -925,13 +925,13 @@ package body Exp_Put_Image is\n \n    function Image_Should_Call_Put_Image (N : Node_Id) return Boolean is\n    begin\n-      if Ada_Version < Ada_2020 then\n+      if Ada_Version < Ada_2022 then\n          return False;\n       end if;\n \n-      --  In Ada 2020, T'Image calls T'Put_Image if there is an explicit\n+      --  In Ada 2022, T'Image calls T'Put_Image if there is an explicit\n       --  aspect_specification for Put_Image, or if U_Type'Image is illegal\n-      --  in pre-2020 versions of Ada.\n+      --  in pre-2022 versions of Ada.\n \n       declare\n          U_Type : constant Entity_Id := Underlying_Type (Entity (Prefix (N)));"}, {"sha": "46531bf7f8e2837c2eca00c9b193dc80d6703b05", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -203,7 +203,7 @@ extern Boolean In_Extended_Main_Code_Unit\t(Entity_Id);\n #define Suppress_Checks\t\t\topt__suppress_checks\n \n typedef enum {\n-  Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2020\n+  Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2022\n } Ada_Version_Type;\n \n typedef enum {"}, {"sha": "feb3a7e15c47f6cac243ae113ee8e271dceaa27f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -4237,7 +4237,7 @@ node_is_component (Node_Id gnat_node)\n    We implement 3 different semantics of atomicity in this function:\n \n      1. the Ada 95/2005/2012 semantics of the Atomic aspect/pragma,\n-     2. the Ada 2020 semantics of the Atomic aspect/pragma,\n+     2. the Ada 2022 semantics of the Atomic aspect/pragma,\n      3. the semantics of the Volatile_Full_Access GNAT aspect/pragma.\n \n   They are mutually exclusive and the FE should have rejected conflicts.  */\n@@ -4284,7 +4284,7 @@ get_atomic_access (Node_Id gnat_node, atomic_acces_t *type, bool *sync)\n     gnat_node = Expression (gnat_node);\n \n   /* Up to Ada 2012, for Atomic itself, only reads and updates of the object as\n-     a whole require atomic access (RM C.6(15)).  But, starting with Ada 2020,\n+     a whole require atomic access (RM C.6(15)).  But, starting with Ada 2022,\n      reads of or writes to a nonatomic subcomponent of the object also require\n      atomic access (RM C.6(19)).  */\n   if (node_is_atomic (gnat_node))\n@@ -4295,7 +4295,7 @@ get_atomic_access (Node_Id gnat_node, atomic_acces_t *type, bool *sync)\n       for (gnat_temp = gnat_node, gnat_parent = Parent (gnat_temp);\n \t   node_is_component (gnat_parent) && Prefix (gnat_parent) == gnat_temp;\n \t   gnat_temp = gnat_parent, gnat_parent = Parent (gnat_temp))\n-\tif (Ada_Version < Ada_2020 || node_is_atomic (gnat_parent))\n+\tif (Ada_Version < Ada_2022 || node_is_atomic (gnat_parent))\n \t  goto not_atomic;\n \telse\n \t  as_a_whole = false;\n@@ -4314,7 +4314,7 @@ get_atomic_access (Node_Id gnat_node, atomic_acces_t *type, bool *sync)\n   for (gnat_temp = gnat_node;\n        node_is_component (gnat_temp);\n        gnat_temp = Prefix (gnat_temp))\n-    if ((Ada_Version >= Ada_2020 && node_is_atomic (Prefix (gnat_temp)))\n+    if ((Ada_Version >= Ada_2022 && node_is_atomic (Prefix (gnat_temp)))\n \t|| node_is_volatile_full_access (Prefix (gnat_temp)))\n       {\n \t*type = OUTER_ATOMIC;"}, {"sha": "68729da05df3feb72d797208d9a444a5a84bc0ec", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -9944,7 +9944,7 @@ This boolean aspect is equivalent to @ref{10b,,pragma Unmodified}.\n \n This boolean aspect is equivalent to @ref{10c,,pragma Unreferenced}.\n \n-When using the @code{-gnat2020} switch, this aspect is also supported on formal\n+When using the @code{-gnat2022} switch, this aspect is also supported on formal\n parameters, which is in particular the only form possible for expression\n functions.\n "}, {"sha": "e6078e67e9ba7b469780495dbb05da2b2691c348", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -8794,6 +8794,16 @@ Allow full Ada 2005 features (same as @code{-gnat05})\n @item @code{-gnat2012}\n \n Allow full Ada 2012 features (same as @code{-gnat12})\n+@end table\n+\n+@geindex -gnat2022 (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnat2022}\n+\n+Allow full Ada 2022 features\n \n @item @code{-gnat83}\n \n@@ -14340,6 +14350,19 @@ may generally be compiled using this switch (see the description of the\n for further information).\n @end table\n \n+@geindex -gnat2022 (gcc)\n+\n+@geindex Ada 2022 mode\n+\n+\n+@table @asis\n+\n+@item @code{-gnat2022} (Ada 2022 mode)\n+\n+This switch directs the compiler to implement the Ada 2022 version of the\n+language.\n+@end table\n+\n @geindex -gnatX (gcc)\n \n @geindex Ada language extensions\n@@ -14352,9 +14375,9 @@ for further information).\n @item @code{-gnatX} (Enable GNAT Extensions)\n \n This switch directs the compiler to implement the latest version of the\n-language (currently Ada 2012) and also to enable certain GNAT implementation\n+language (currently Ada 2022) and also to enable certain GNAT implementation\n extensions that are not part of any Ada standard. For a full list of these\n-extensions, see the GNAT reference manual.\n+extensions, see the GNAT reference manual, @code{Pragma Extensions_Allowed}.\n @end table\n \n @node Character Set Control,File Naming Control,Compiling Different Versions of Ada,Compiler Switches"}, {"sha": "75b50467a0ae52ff808b98c299c988b82a60aa74", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -618,12 +618,12 @@ package body Impunit is\n    );                 -- GNATCOLL.OMP\n \n    --------------------\n-   -- Ada 202X Units --\n+   -- Ada 2022 Units --\n    --------------------\n \n-   --  The following units should be used only in Ada 202X mode\n+   --  The following units should be used only in Ada 2022 mode\n \n-   Non_Imp_File_Names_2X : constant File_List := (\n+   Non_Imp_File_Names_22 : constant File_List := (\n     (\"a-nubinu\", T),  -- Ada.Numerics.Big_Numbers\n     (\"a-nbnbin\", T),  -- Ada.Numerics.Big_Numbers.Big_Integers\n     (\"a-nbnbre\", T),  -- Ada.Numerics.Big_Numbers.Big_Reals\n@@ -767,11 +767,11 @@ package body Impunit is\n          end if;\n       end loop;\n \n-      --  See if name is in 202X list\n+      --  See if name is in 2022 list\n \n-      for J in Non_Imp_File_Names_2X'Range loop\n-         if Buffer (1 .. 8) = Non_Imp_File_Names_2X (J).Fname then\n-            return Ada_202X_Unit;\n+      for J in Non_Imp_File_Names_22'Range loop\n+         if Buffer (1 .. 8) = Non_Imp_File_Names_22 (J).Fname then\n+            return Ada_2022_Unit;\n          end if;\n       end loop;\n "}, {"sha": "7caa1ba27a0c00696229df3d0fb30748dbd24cb7", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -47,7 +47,7 @@ package Impunit is\n       Ada_95_Unit,\n       Ada_2005_Unit,\n       Ada_2012_Unit,\n-      Ada_202X_Unit);\n+      Ada_2022_Unit);\n       --  This unit is defined in the Ada RM of the given year. This is used to\n       --  give a warning when withing a unit from a wrong mode (e.g. withing an\n       --  Ada_2012_Unit when compiling with -gnat95). Note that in Ada 83 mode,"}, {"sha": "e808d85cd0f03bb69f18ecf8c754b3bb804a58f7", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -85,7 +85,7 @@ package Ada.Containers.Bounded_Vectors is\n \n    function New_Vector (First, Last : Index_Type) return Vector\n      with Pre => First = Index_Type'First;\n-   --  Ada_2020 aggregate operation.\n+   --  Ada 2022 aggregate operation.\n \n    function To_Vector (Length : Count_Type) return Vector;\n "}, {"sha": "53dc6716c57e9c9fd1f9f435f699dbd095775937", "filename": "gcc/ada/libgnat/a-convec.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -332,7 +332,7 @@ is\n \n    function New_Vector (First, Last : Index_Type) return Vector\n      with Pre => First = Index_Type'First;\n-   --  Ada_2020 aggregate operation.\n+   --  Ada 2022 aggregate operation.\n \n    procedure Insert_Vector\n      (Container : in out Vector;"}, {"sha": "429bd4234743c3f68edcafee8950f012edcc36f7", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -72,7 +72,7 @@ package Opt is\n    --  trying to specify other values will be ignored (in case of pragma\n    --  Ada_xxx) or generate an error (in case of -gnat83/95/xx switches).\n \n-   type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2020);\n+   type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2022);\n    pragma Ordered (Ada_Version_Type);\n    pragma Convention (C, Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n@@ -108,7 +108,7 @@ package Opt is\n    --  remains set to Ada_Version_Default). This is used in the rare cases\n    --  (notably pragma Obsolescent) where we want the explicit version set.\n \n-   Ada_Version_Runtime : Ada_Version_Type := Ada_2020;\n+   Ada_Version_Runtime : Ada_Version_Type := Ada_2022;\n    --  GNAT\n    --  Ada version used to compile the runtime. Used to set Ada_Version (but\n    --  not Ada_Version_Explicit) when compiling predefined or internal units.\n@@ -1726,11 +1726,11 @@ package Opt is\n    --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n    --  mode. Modified by use of -gnatwy/Y.\n \n-   Warn_On_Ada_202X_Compatibility : Boolean := True;\n+   Warn_On_Ada_2022_Compatibility : Boolean := True;\n    --  GNAT\n-   --  Set to True to generate all warnings on Ada 202X compatibility issues,\n-   --  including warnings on Ada 202X obsolescent features used in Ada 202X\n-   --  mode. ???There is no warning switch for this yet.\n+   --  Set to True to generate all warnings on Ada 2022 compatibility issues,\n+   --  including warnings on Ada 2022 obsolescent features used in Ada 2022\n+   --  mode.\n \n    Warn_On_All_Unread_Out_Parameters : Boolean := False;\n    --  GNAT"}, {"sha": "ba11a990ba9d7510e58c0347d54f9407b417282b", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -960,7 +960,7 @@ package body Ch12 is\n \n             --    type DT is new T with private with Atomic;\n \n-            Error_Msg_Ada_2020_Feature\n+            Error_Msg_Ada_2022_Feature\n               (\"formal type with aspect specification\", Token_Ptr);\n \n             return Def_Node;"}, {"sha": "2a7959939d0d7605a015f58309ff5cbee3e3aa5a", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1486,7 +1486,7 @@ package body Ch3 is\n       --  access_definition\n \n       elsif Token = Tok_Renames then\n-         Error_Msg_Ada_2020_Feature\n+         Error_Msg_Ada_2022_Feature\n            (\"object renaming without subtype\", Token_Ptr);\n \n          Scan; -- past renames"}, {"sha": "ba128ec687b4c07e253ef6bef0a0701dac9aa360", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1280,7 +1280,7 @@ package body Ch4 is\n       if Nkind (Aggr_Node) /= N_Aggregate\n            and then\n          Nkind (Aggr_Node) /= N_Extension_Aggregate\n-         and then Ada_Version < Ada_2020\n+         and then Ada_Version < Ada_2022\n       then\n          Error_Msg\n            (\"aggregate may not have single positional component\", Aggr_Sloc);\n@@ -1399,7 +1399,7 @@ package body Ch4 is\n       if Token = Tok_Left_Bracket then\n          Scan;\n \n-         --  Special case for null aggregate in Ada 2020\n+         --  Special case for null aggregate in Ada 2022\n \n          if Token = Tok_Right_Bracket then\n             Scan;   --  past ]\n@@ -1601,7 +1601,7 @@ package body Ch4 is\n          --  identifier or OTHERS follows (the latter cases are missing\n          --  comma cases). Also assume positional if a semicolon follows,\n          --  which can happen if there are missing parens.\n-         --  In Ada_2012 and Ada_2020 an iterated association can appear.\n+         --  In Ada 2012 and 2022 an iterated association can appear.\n \n          elsif Nkind (Expr_Node) in\n            N_Iterated_Component_Association | N_Iterated_Element_Association\n@@ -2928,7 +2928,7 @@ package body Ch4 is\n                Scan; -- past minus\n \n             when Tok_At_Sign =>  --  AI12-0125 : target_name\n-               Error_Msg_Ada_2020_Feature (\"target name\", Token_Ptr);\n+               Error_Msg_Ada_2022_Feature (\"target name\", Token_Ptr);\n \n                Node1 := P_Name;\n                return Node1;\n@@ -3396,7 +3396,7 @@ package body Ch4 is\n \n       procedure Build_Iterated_Element_Association;\n       --  If the iterator includes a key expression or a filter, it is\n-      --  an Ada_2020 Iterator_Element_Association within a container\n+      --  an Ada 2022 Iterator_Element_Association within a container\n       --  aggregate.\n \n       ----------------------------------------\n@@ -3432,7 +3432,7 @@ package body Ch4 is\n       Save_Scan_State (State);\n \n       --  A lookahead is necessary to differentiate between the\n-      --  Ada 2012 form with a choice list, and the Ada 202x element\n+      --  Ada 2012 form with a choice list, and the Ada 2022 element\n       --  iterator form, recognized by the presence of \"OF\". Other\n       --  disambiguation requires context and is done during semantic\n       --  analysis. Note that \"for X in E\" is syntactically ambiguous:\n@@ -3463,15 +3463,15 @@ package body Ch4 is\n \n          if Token = Tok_Use then\n \n-            --  Ada_2020 Key-expression is present, rewrite node as an\n+            --  Ada 2022 Key-expression is present, rewrite node as an\n             --  Iterated_Element_Association.\n \n             Scan;  --  past USE\n             Build_Iterated_Element_Association;\n             Set_Key_Expression (Assoc_Node, P_Expression);\n \n          elsif Present (Filter) then\n-            --  A loop_parameter_specification also indicates an Ada_2020\n+            --  A loop_parameter_specification also indicates an Ada 2022\n             --  construct, in contrast with a subtype indication used in\n             --  array aggregates.\n \n@@ -3481,7 +3481,7 @@ package body Ch4 is\n          TF_Arrow;\n          Set_Expression (Assoc_Node, P_Expression);\n \n-      elsif Ada_Version >= Ada_2020\n+      elsif Ada_Version >= Ada_2022\n         and then Token = Tok_Of\n       then\n          Restore_Scan_State (State);\n@@ -3504,7 +3504,7 @@ package body Ch4 is\n          Set_Expression (Assoc_Node, P_Expression);\n       end if;\n \n-      Error_Msg_Ada_2020_Feature (\"iterated component\", Token_Ptr);\n+      Error_Msg_Ada_2022_Feature (\"iterated component\", Token_Ptr);\n \n       return Assoc_Node;\n    end P_Iterated_Component_Association;\n@@ -3689,7 +3689,7 @@ package body Ch4 is\n             Result : constant Node_Id :=\n               Make_Expression_With_Actions (Loc, Actions, Expression);\n          begin\n-            Error_Msg_Ada_2020_Feature (\"declare expression\", Loc);\n+            Error_Msg_Ada_2022_Feature (\"declare expression\", Loc);\n \n             return Result;\n          end;"}, {"sha": "a7024317b5530bd96359028e3a7b2723faaacd20", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1714,7 +1714,7 @@ package body Ch5 is\n         (Loop_Param_Specification_Node, P_Discrete_Subtype_Definition);\n \n       if Token = Tok_When then\n-         Error_Msg_Ada_2020_Feature (\"iterator filter\", Token_Ptr);\n+         Error_Msg_Ada_2022_Feature (\"iterator filter\", Token_Ptr);\n \n          Scan; -- past WHEN\n          Set_Iterator_Filter\n@@ -1775,7 +1775,7 @@ package body Ch5 is\n       Set_Name (Node1, P_Name);\n \n       if Token = Tok_When then\n-         Error_Msg_Ada_2020_Feature (\"iterator filter\", Token_Ptr);\n+         Error_Msg_Ada_2022_Feature (\"iterator filter\", Token_Ptr);\n \n          Scan; -- past WHEN\n          Set_Iterator_Filter"}, {"sha": "9d4f736a61fcff76ee22db743328476a1da48e67", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1620,7 +1620,7 @@ package body Ch6 is\n          --  the time being.\n \n          elsif Token = Tok_With then\n-            Error_Msg_Ada_2020_Feature\n+            Error_Msg_Ada_2022_Feature\n               (\"aspect on formal parameter\", Token_Ptr);\n \n             P_Aspect_Specifications (Specification_Node, False);"}, {"sha": "33182ccd6ceff1a8b34349a8b1c4a2cee2789a79", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -385,13 +385,13 @@ begin\n          end if;\n \n       --------------\n-      -- Ada_2020 --\n+      -- Ada_2022 --\n       --------------\n \n-      when Pragma_Ada_2020 =>\n+      when Pragma_Ada_2022 =>\n          if Arg_Count = 0 then\n-            Ada_Version := Ada_2020;\n-            Ada_Version_Explicit := Ada_2020;\n+            Ada_Version := Ada_2022;\n+            Ada_Version_Explicit := Ada_2022;\n             Ada_Version_Pragma := Pragma_Node;\n          end if;\n "}, {"sha": "149b1a1f223d43a53d6c73cdc520ea3cae587f10", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -276,10 +276,10 @@ package body Util is\n \n       --  If we have a right paren, then that is taken as ending the list\n       --  i.e. no comma is present.\n-      --  Ditto for a right bracket in Ada 2020.\n+      --  Ditto for a right bracket in Ada 2022.\n \n       elsif Token = Tok_Right_Paren\n-        or else (Token = Tok_Right_Bracket and then Ada_Version >= Ada_2020)\n+        or else (Token = Tok_Right_Bracket and then Ada_Version >= Ada_2022)\n       then\n          return False;\n "}, {"sha": "0e9ccd2f905af9ed25388be7fec3ae33132a2e60", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -81,7 +81,7 @@ package Scans is\n       --  exception-name\". This degrades error recovery slightly, and perhaps\n       --  we could do better, but not worth the effort.\n \n-      --  Ada 2020 introduces square brackets as delimiters for array and\n+      --  Ada 2022 introduces square brackets as delimiters for array and\n       --  container aggregates.\n \n       Tok_Raise,           -- RAISE"}, {"sha": "66b11055dd13ec46905203d886774fe7a9814337", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1303,7 +1303,7 @@ package body Scng is\n          --  AI12-0125-03 : @ is target_name\n \n          when '@' =>\n-            Error_Msg_Ada_2020_Feature (\"target name\", Token_Ptr);\n+            Error_Msg_Ada_2022_Feature (\"target name\", Token_Ptr);\n \n             Accumulate_Checksum ('@');\n             Scan_Ptr := Scan_Ptr + 1;\n@@ -1707,7 +1707,7 @@ package body Scng is\n             --  \"abs\"'Address. Other literals are included to give better error\n             --  behavior for illegal cases like 123'Img.\n             --\n-            --  In Ada 2020, a target name (i.e. @) is a valid prefix of an\n+            --  In Ada 2022, a target name (i.e. @) is a valid prefix of an\n             --  attribute, and functions like a name.\n \n             if Prev_Token = Tok_All\n@@ -1827,10 +1827,10 @@ package body Scng is\n             return;\n \n          --  Right bracket or right brace, treated as right paren but proper\n-         --  aggregate delimiter in Ada 2020.\n+         --  aggregate delimiter in Ada 2022.\n \n          when ']' | '}' =>\n-            if Ada_Version >= Ada_2020 then\n+            if Ada_Version >= Ada_2022 then\n                Token := Tok_Right_Bracket;\n \n             else"}, {"sha": "ae0c2be6e6a62e558cb6430d4945811851393f88", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -907,7 +907,7 @@ package body Sem_Aggr is\n \n       elsif Present (Find_Aspect (Typ, Aspect_Aggregate))\n         and then Ekind (Typ) /= E_Record_Type\n-        and then Ada_Version >= Ada_2020\n+        and then Ada_Version >= Ada_2022\n       then\n          Resolve_Container_Aggregate (N, Typ);\n \n@@ -3140,7 +3140,7 @@ package body Sem_Aggr is\n       Base : constant Node_Id := Expression (N);\n \n    begin\n-      Error_Msg_Ada_2020_Feature (\"delta aggregate\", Sloc (N));\n+      Error_Msg_Ada_2022_Feature (\"delta aggregate\", Sloc (N));\n \n       if not Is_Composite_Type (Typ) then\n          Error_Msg_N (\"not a composite type\", N);"}, {"sha": "17aa577addcbeb1b67bc531ccdb773499aeb143b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -168,11 +168,11 @@ package body Sem_Attr is\n       Attribute_Max_Alignment_For_Allocation => True,\n       others                                 => False);\n \n-   --  The following array is the list of attributes defined in the Ada 2020\n+   --  The following array is the list of attributes defined in the Ada 2022\n    --  RM which are not defined in Ada 2012. These are recognized in Ada\n    --  95/2005/2012 modes, but are considered to be implementation defined.\n \n-   Attribute_20 : constant Attribute_Class_Array := Attribute_Class_Array'(\n+   Attribute_22 : constant Attribute_Class_Array := Attribute_Class_Array'(\n       Attribute_Enum_Rep                     |\n       Attribute_Enum_Val                     => True,\n       others                                 => False);\n@@ -1486,11 +1486,11 @@ package body Sem_Attr is\n             --  Image_Type may be empty in case of another error detected,\n             --  or if an N_Raise_xxx_Error node is a parent of N.\n \n-            if Ada_Version < Ada_2020\n+            if Ada_Version < Ada_2022\n               and then Present (Image_Type)\n               and then not Is_Scalar_Type (Image_Type)\n             then\n-               Error_Msg_Ada_2020_Feature (\"nonscalar ''Image\", Sloc (P));\n+               Error_Msg_Ada_2022_Feature (\"nonscalar ''Image\", Sloc (P));\n                Error_Attr;\n             end if;\n          end Check_Image_Type;\n@@ -2870,17 +2870,17 @@ package body Sem_Attr is\n \n          case Uneval_Old_Setting is\n             when 'E' =>\n-               --  ??? In the case where Ada_Version is < Ada_2020 and\n-               --  an illegal 'Old prefix would be legal in Ada_2020,\n-               --  we'd like to call Error_Msg_Ada_2020_Feature.\n+               --  ??? In the case where Ada_Version is < Ada_2022 and\n+               --  an illegal 'Old prefix would be legal in Ada_2022,\n+               --  we'd like to call Error_Msg_Ada_2022_Feature.\n                --  Identifying that case involves some work.\n \n                Error_Attr_P\n                  (\"prefix of attribute % that is potentially \"\n                   & \"unevaluated must statically name an entity\"\n \n-                  --  further text needed for accuracy if Ada_2020\n-                  & (if Ada_Version >= Ada_2020\n+                  --  further text needed for accuracy if Ada_2022\n+                  & (if Ada_Version >= Ada_2022\n                        and then Attr_Id = Attribute_Old\n                      then \" or be eligible for conditional evaluation\"\n                           & \" (RM 6.1.1 (27))\"\n@@ -2957,13 +2957,13 @@ package body Sem_Attr is\n \n       --  Deal with Ada 2005 attributes that are implementation attributes\n       --  because they appear in a version of Ada before Ada 2005, ditto for\n-      --  Ada 2012 and Ada 2020 attributes appearing in an earlier version.\n+      --  Ada 2012 and Ada 2022 attributes appearing in an earlier version.\n \n       if (Attribute_05 (Attr_Id) and then Ada_Version < Ada_2005)\n             or else\n          (Attribute_12 (Attr_Id) and then Ada_Version < Ada_2012)\n             or else\n-         (Attribute_20 (Attr_Id) and then Ada_Version < Ada_2020)\n+         (Attribute_22 (Attr_Id) and then Ada_Version < Ada_2022)\n       then\n          Check_Restriction (No_Implementation_Attributes, N);\n       end if;\n@@ -5202,7 +5202,7 @@ package body Sem_Attr is\n          else\n             --  Ensure that the prefix of attribute 'Old is an entity when it\n             --  is potentially unevaluated (6.1.1 (27/3)). This rule is\n-            --  relaxed in Ada2020 - this relaxation is reflected in the\n+            --  relaxed in Ada 2022 - this relaxation is reflected in the\n             --  call (below) to Eligible_For_Conditional_Evaluation.\n \n             if Is_Potentially_Unevaluated (N)\n@@ -11497,9 +11497,9 @@ package body Sem_Attr is\n                end if;\n \n                --  Check for nonatomic subcomponent of a full access object\n-               --  in Ada 2020 (RM C.6 (12)).\n+               --  in Ada 2022 (RM C.6 (12)).\n \n-               if Ada_Version >= Ada_2020\n+               if Ada_Version >= Ada_2022\n                  and then Is_Subcomponent_Of_Full_Access_Object (P)\n                  and then not Is_Atomic_Object (P)\n                then"}, {"sha": "9ec584439b9f4a31fca102175cc2a12d479e20fc", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -2708,11 +2708,11 @@ package body Sem_Ch10 is\n                      Error_Msg_N (\"& is an Ada 2012 unit?i?\", Name (N));\n                   end if;\n \n-               when Ada_202X_Unit =>\n-                  if Ada_Version < Ada_2020\n-                    and then Warn_On_Ada_202X_Compatibility\n+               when Ada_2022_Unit =>\n+                  if Ada_Version < Ada_2022\n+                    and then Warn_On_Ada_2022_Compatibility\n                   then\n-                     Error_Msg_N (\"& is an Ada 202x unit?i?\", Name (N));\n+                     Error_Msg_N (\"& is an Ada 2022 unit?i?\", Name (N));\n                   end if;\n             end case;\n          end if;"}, {"sha": "b835befc646f7239b6a5c7306c323f313d2b00d4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -502,7 +502,7 @@ package body Sem_Ch12 is\n \n    function Build_Subprogram_Decl_Wrapper\n      (Formal_Subp : Entity_Id) return Node_Id;\n-   --  Ada 2020 allows formal subprograms to carry pre/postconditions.\n+   --  Ada 2022 allows formal subprograms to carry pre/postconditions.\n    --  At the point of instantiation these contracts apply to uses of\n    --  the actual subprogram. This is implemented by creating wrapper\n    --  subprograms instead of the renamings previously used to link\n@@ -1104,7 +1104,7 @@ package body Sem_Ch12 is\n       --  package. As usual an other association must be last in the list.\n \n       procedure Build_Subprogram_Wrappers;\n-      --  Ada 2020: AI12-0272 introduces pre/postconditions for formal\n+      --  Ada 2022: AI12-0272 introduces pre/postconditions for formal\n       --  subprograms. The implementation of making the formal into a renaming\n       --  of the actual does not work, given that subprogram renaming cannot\n       --  carry aspect specifications. Instead we must create subprogram\n@@ -3589,7 +3589,7 @@ package body Sem_Ch12 is\n \n       Generate_Reference_To_Generic_Formals (Current_Scope);\n \n-      --  For Ada 2020, some formal parameters can carry aspects, which must\n+      --  For Ada 2022, some formal parameters can carry aspects, which must\n       --  be name-resolved at the end of the list of formal parameters (which\n       --  has the semantics of a declaration list).\n \n@@ -11011,7 +11011,7 @@ package body Sem_Ch12 is\n       --  constructed wrapper contains a call to the entity in the renaming.\n       --  This is an expansion activity, as is the wrapper creation.\n \n-      if Ada_Version >= Ada_2020\n+      if Ada_Version >= Ada_2022\n         and then Has_Contracts (Analyzed_Formal)\n         and then not Is_Entity_Name (Actual)\n         and then Expander_Active\n@@ -11435,9 +11435,9 @@ package body Sem_Ch12 is\n          end if;\n \n          --  Check for instantiation on nonatomic subcomponent of a full access\n-         --  object in Ada 2020 (RM C.6 (12)).\n+         --  object in Ada 2022 (RM C.6 (12)).\n \n-         if Ada_Version >= Ada_2020\n+         if Ada_Version >= Ada_2022\n             and then Is_Subcomponent_Of_Full_Access_Object (Actual)\n             and then not Is_Atomic_Object (Actual)\n          then\n@@ -12681,7 +12681,7 @@ package body Sem_Ch12 is\n       Subt       : Entity_Id;\n \n       procedure Check_Shared_Variable_Control_Aspects;\n-      --  Ada 2020: Verify that shared variable control aspects (RM C.6)\n+      --  Ada 2022: Verify that shared variable control aspects (RM C.6)\n       --  that may be specified for a formal type are obeyed by the actual.\n \n       procedure Diagnose_Predicated_Actual;\n@@ -12712,7 +12712,7 @@ package body Sem_Ch12 is\n       --  Check_Shared_Variable_Control_Aspects --\n       --------------------------------------------\n \n-      --  Ada 2020: Verify that shared variable control aspects (RM C.6)\n+      --  Ada 2022: Verify that shared variable control aspects (RM C.6)\n       --  that may be specified for the formal are obeyed by the actual.\n       --  If the formal is a derived type the aspect specifications must match.\n       --  NOTE: AI12-0282 implies that matching of aspects is required between\n@@ -12723,7 +12723,7 @@ package body Sem_Ch12 is\n \n       procedure Check_Shared_Variable_Control_Aspects is\n       begin\n-         if Ada_Version >= Ada_2020 then\n+         if Ada_Version >= Ada_2022 then\n             if Is_Atomic (A_Gen_T) and then not Is_Atomic (Act_T) then\n                Error_Msg_NE\n                   (\"actual for& must have Atomic aspect\", Actual, A_Gen_T);\n@@ -13413,7 +13413,7 @@ package body Sem_Ch12 is\n          --  Perform atomic/volatile checks (RM C.6(12)). Note that AI05-0218-1\n          --  removes the second instance of the phrase \"or allow pass by copy\".\n \n-         --  For Ada 2020, the aspect may be specified explicitly for the\n+         --  For Ada 2022, the aspect may be specified explicitly for the\n          --  formal regardless of whether an ancestor obeys it.\n \n          if Is_Atomic (Act_T)"}, {"sha": "5e2611fb0967adbd19ba24a9c672b2ea549f17c3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -247,7 +247,7 @@ package body Sem_Ch13 is\n    --  are in keeping with the components of Address_Clause_Check_Record below.\n \n    procedure Validate_Aspect_Aggregate (N : Node_Id);\n-   --  Check legality of operations given in the Ada 202x Aggregate aspect for\n+   --  Check legality of operations given in the Ada 2022 Aggregate aspect for\n    --  containers.\n \n    procedure Resolve_Aspect_Aggregate\n@@ -258,7 +258,7 @@ package body Sem_Ch13 is\n \n    procedure Validate_Aspect_Stable_Properties\n      (E : Entity_Id; N : Node_Id; Class_Present : Boolean);\n-   --  Check legality of functions given in the Ada 202x Stable_Properties\n+   --  Check legality of functions given in the Ada 2022 Stable_Properties\n    --  (or Stable_Properties'Class) aspect.\n \n    procedure Resolve_Aspect_Stable_Properties\n@@ -1033,7 +1033,7 @@ package body Sem_Ch13 is\n          end if;\n \n          --  For representation aspects, check for case of untagged derived\n-         --  type whose parent either has primitive operations (pre Ada 202x),\n+         --  type whose parent either has primitive operations (pre Ada 2022),\n          --  or is a by-reference type (RM 13.1(10)).\n          --  Strictly speaking the check also applies to Ada 2012 but it is\n          --  really too constraining for existing code already, so relax it.\n@@ -1049,8 +1049,8 @@ package body Sem_Ch13 is\n               and then Has_Primitive_Operations (Parent_Type)\n             then\n                Error_Msg_N\n-                 (\"|representation aspect not permitted before Ada 202x: \" &\n-                  \"use -gnat2020!\", N);\n+                 (\"|representation aspect not permitted before Ada 2022: \" &\n+                  \"use -gnat2022!\", N);\n                Error_Msg_NE\n                  (\"\\parent type & has primitive operations!\", N, Parent_Type);\n \n@@ -1863,7 +1863,7 @@ package body Sem_Ch13 is\n             --  Perform analysis of aspect Yield\n \n             procedure Analyze_Aspect_Static;\n-            --  Ada 202x (AI12-0075): Perform analysis of aspect Static\n+            --  Ada 2022 (AI12-0075): Perform analysis of aspect Static\n \n             procedure Check_Expr_Is_OK_Static_Expression\n               (Expr : Node_Id;\n@@ -2521,8 +2521,8 @@ package body Sem_Ch13 is\n                Is_Imported_Intrinsic : Boolean;\n \n             begin\n-               if Ada_Version < Ada_2020 then\n-                  Error_Msg_Ada_2020_Feature (\"aspect %\", Sloc (Aspect));\n+               if Ada_Version < Ada_2022 then\n+                  Error_Msg_Ada_2022_Feature (\"aspect %\", Sloc (Aspect));\n                   return;\n                end if;\n \n@@ -2558,14 +2558,14 @@ package body Sem_Ch13 is\n \n                   return;\n \n-               --  Ada 202x (AI12-0075): Check that the function satisfies\n+               --  Ada 2022 (AI12-0075): Check that the function satisfies\n                --  several requirements of static functions as specified in\n                --  RM 6.8(5.1-5.8). Note that some of the requirements given\n                --  there are checked elsewhere.\n \n                else\n                   --  The expression of the expression function must be a\n-                  --  potentially static expression (RM 202x 6.8(3.2-3.4)).\n+                  --  potentially static expression (RM 2022 6.8(3.2-3.4)).\n                   --  That's checked in Sem_Ch6.Analyze_Expression_Function.\n \n                   --  The function must not contain any calls to itself, which\n@@ -2936,7 +2936,7 @@ package body Sem_Ch13 is\n                --  as is the case with generic derived types.\n \n                if Nkind (Original_Node (N)) = N_Formal_Type_Declaration then\n-                  if Ada_Version < Ada_2020 then\n+                  if Ada_Version < Ada_2022 then\n                      Error_Msg_N\n                        (\"aspect % not allowed for formal type declaration\",\n                         Aspect);\n@@ -4326,7 +4326,7 @@ package body Sem_Ch13 is\n                      goto Continue;\n                   end if;\n \n-                  if Ada_Version < Ada_2020 then\n+                  if Ada_Version < Ada_2022 then\n                      Check_Restriction\n                        (No_Implementation_Aspect_Specifications, N);\n                   end if;\n@@ -4643,7 +4643,7 @@ package body Sem_Ch13 is\n                      Analyze_Aspect_Disable_Controlled;\n                      goto Continue;\n \n-                  --  Ada 202x (AI12-0129): Exclusive_Functions\n+                  --  Ada 2022 (AI12-0129): Exclusive_Functions\n \n                   elsif A_Id = Aspect_Exclusive_Functions then\n                      if Ekind (E) /= E_Protected_Type then\n@@ -4656,18 +4656,18 @@ package body Sem_Ch13 is\n \n                      goto Continue;\n \n-                  --  Ada 202x (AI12-0363): Full_Access_Only\n+                  --  Ada 2022 (AI12-0363): Full_Access_Only\n \n                   elsif A_Id = Aspect_Full_Access_Only then\n-                     Error_Msg_Ada_2020_Feature (\"aspect %\", Sloc (Aspect));\n+                     Error_Msg_Ada_2022_Feature (\"aspect %\", Sloc (Aspect));\n \n-                  --  Ada 202x (AI12-0075): static expression functions\n+                  --  Ada 2022 (AI12-0075): static expression functions\n \n                   elsif A_Id = Aspect_Static then\n                      Analyze_Aspect_Static;\n                      goto Continue;\n \n-                  --  Ada 2020 (AI12-0279)\n+                  --  Ada 2022 (AI12-0279)\n \n                   elsif A_Id = Aspect_Yield then\n                      Analyze_Aspect_Yield;\n@@ -14497,7 +14497,7 @@ package body Sem_Ch13 is\n         and then (Nkind (N) /= N_Pragma\n                    or else Get_Pragma_Id (N) /= Pragma_Convention)\n       then\n-         if Ada_Version < Ada_2020 then\n+         if Ada_Version < Ada_2022 then\n             Error_Msg_N\n               (\"representation item not allowed for generic type\", N);\n             return True;\n@@ -14619,7 +14619,7 @@ package body Sem_Ch13 is\n          return True;\n \n       --  Check for case of untagged derived type whose parent either has\n-      --  primitive operations (pre Ada 202x), or is a by-reference type (RM\n+      --  primitive operations (pre Ada 2022), or is a by-reference type (RM\n       --  13.1(10)). In this case we do not output a Too_Late message, since\n       --  there is no earlier point where the rep item could be placed to make\n       --  it legal.\n@@ -14639,7 +14639,7 @@ package body Sem_Ch13 is\n            and then Has_Primitive_Operations (Parent_Type)\n          then\n             Error_Msg_N\n-              (\"|representation item not permitted before Ada 202x!\", N);\n+              (\"|representation item not permitted before Ada 2022!\", N);\n             Error_Msg_NE\n               (\"\\parent type & has primitive operations!\", N, Parent_Type);\n             return True;\n@@ -15252,7 +15252,7 @@ package body Sem_Ch13 is\n       Assign_Indexed_Subp : Node_Id := Empty;\n \n    begin\n-      Error_Msg_Ada_2020_Feature (\"aspect Aggregate\", Sloc (N));\n+      Error_Msg_Ada_2022_Feature (\"aspect Aggregate\", Sloc (N));\n \n       if Nkind (N) /= N_Aggregate\n         or else Present (Expressions (N))\n@@ -15371,7 +15371,7 @@ package body Sem_Ch13 is\n    --  Start of processing for Validate_Aspect_Stable_Properties\n \n    begin\n-      Error_Msg_Ada_2020_Feature (\"aspect Stable_Properties\", Sloc (N));\n+      Error_Msg_Ada_2022_Feature (\"aspect Stable_Properties\", Sloc (N));\n \n       if (not Is_Aspect_Of_Type) and then (not Is_Subprogram (E)) then\n          Error_Msg_N (\"Stable_Properties aspect can only be specified for \""}, {"sha": "8bcfe40b628db53505596eb547884b0926af7e5f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -3195,7 +3195,7 @@ package body Sem_Ch3 is\n                --  so that pre/postconditions can be handled directly on the\n                --  generated wrapper.\n \n-               if Ada_Version >= Ada_2020\n+               if Ada_Version >= Ada_2022\n                  and then Present (Aspect_Specifications (N))\n                then\n                   Build_Access_Subprogram_Wrapper (N);\n@@ -11100,7 +11100,7 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         --  Ada 2005 (AI95-0414) and Ada 2020 (AI12-0269): Diagnose failure to\n+         --  Ada 2005 (AI95-0414) and Ada 2022 (AI12-0269): Diagnose failure to\n          --  match No_Return in parent, but do it unconditionally in Ada 95 too\n          --  for procedures, since this is our pragma.\n \n@@ -15816,7 +15816,7 @@ package body Sem_Ch3 is\n       --  that functions with controlling access results of record extensions\n       --  with a null extension part require overriding (AI95-00391/06).\n \n-      --  Ada 202x (AI12-0042): Similarly, set those properties for\n+      --  Ada 2022 (AI12-0042): Similarly, set those properties for\n       --  implementing the rule of RM 7.3.2(6.1/4).\n \n       --  A subprogram subject to pragma Extensions_Visible with value False\n@@ -15973,7 +15973,7 @@ package body Sem_Ch3 is\n          Set_Mechanism (New_Subp, Mechanism (Parent_Subp));\n       end if;\n \n-      --  Ada 2020 (AI12-0279): If a Yield aspect is specified True for a\n+      --  Ada 2022 (AI12-0279): If a Yield aspect is specified True for a\n       --  primitive subprogram S of a type T, then the aspect is inherited\n       --  by the corresponding primitive subprogram of each descendant of T.\n "}, {"sha": "453b50e6463f4289bcd13fbde67625eb0124b703", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1113,7 +1113,7 @@ package body Sem_Ch5 is\n                --  assignment, and gets tied up with itself.\n \n                --  We also omit the warning if the RHS includes target names,\n-               --  that is to say the Ada2020 \"@\" that denotes an instance of\n+               --  that is to say the Ada 2022 \"@\" that denotes an instance of\n                --  the LHS, which indicates that the current value is being\n                --  used. Note that this implicit reference to the entity on\n                --  the RHS is not treated as a source reference."}, {"sha": "ed6b09aac2defb0be5ffe2e772323baec7ccc5ad", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -579,7 +579,7 @@ package body Sem_Ch6 is\n                --  the global flag Checking_Potentially_Static_Expression\n                --  enabled. If the resulting expression is static, then it's\n                --  OK, but if not, that means the expression violates the\n-               --  requirements of the Ada 202x RM in 4.9(3.2/5-3.4/5) and\n+               --  requirements of the Ada 2022 RM in 4.9(3.2/5-3.4/5) and\n                --  we flag an error.\n \n                if Is_Static_Function (Def_Id) then\n@@ -744,7 +744,7 @@ package body Sem_Ch6 is\n       --  Function result subtype\n \n       procedure Check_No_Return_Expression (Return_Expr : Node_Id);\n-      --  Ada 2020: Check that the return expression in a No_Return function\n+      --  Ada 2022: Check that the return expression in a No_Return function\n       --  meets the conditions specified by RM 6.5.1(5.1/5).\n \n       procedure Check_Return_Construct_Accessibility (Return_Stmt : Node_Id);\n@@ -1450,13 +1450,13 @@ package body Sem_Ch6 is\n \n             Check_Return_Construct_Accessibility (N);\n \n-            --  Ada 2020 (AI12-0269): Any return statement that applies to a\n+            --  Ada 2022 (AI12-0269): Any return statement that applies to a\n             --  nonreturning function shall be a simple_return_statement with\n             --  an expression that is a raise_expression, or else a call on a\n             --  nonreturning function, or else a parenthesized expression of\n             --  one of these.\n \n-            if Ada_Version >= Ada_2020\n+            if Ada_Version >= Ada_2022\n               and then No_Return (Scope_Id)\n               and then Comes_From_Source (N)\n             then\n@@ -1550,10 +1550,10 @@ package body Sem_Ch6 is\n                end if;\n             end if;\n \n-            --  Ada 2020 (AI12-0269): Any return statement that applies to a\n+            --  Ada 2022 (AI12-0269): Any return statement that applies to a\n             --  nonreturning function shall be a simple_return_statement.\n \n-            if Ada_Version >= Ada_2020\n+            if Ada_Version >= Ada_2022\n               and then No_Return (Scope_Id)\n               and then Comes_From_Source (N)\n             then"}, {"sha": "8a1a13cada1caa5cb75f59f44e8d5dcc765a0ac5", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1530,7 +1530,7 @@ package body Sem_Ch8 is\n       --  Ignore (accept) N_Raise_xxx_Error nodes in this context.\n \n       elsif No_Raise_xxx_Error (Nam) = OK then\n-         Error_Msg_Ada_2020_Feature (\"value in renaming\", Sloc (Nam));\n+         Error_Msg_Ada_2022_Feature (\"value in renaming\", Sloc (Nam));\n       end if;\n \n       Set_Etype (Id, T2);"}, {"sha": "f6edcac2c021f39c376068ab0d6fadc7dfa04675", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -3762,10 +3762,10 @@ package body Sem_Elab is\n       Set_Is_SPARK_Mode_On_Node (Marker, Is_SPARK_Mode_On_Node (N));\n       Set_Target                (Marker, Subp_Id);\n \n-      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  Ada 2022 (AI12-0175): Calls to certain functions that are essentially\n       --  unchecked conversions are preelaborable.\n \n-      if Ada_Version >= Ada_2020 then\n+      if Ada_Version >= Ada_2022 then\n          Set_Is_Preelaborable_Call (Marker, Is_Preelaborable_Construct (N));\n       else\n          Set_Is_Preelaborable_Call (Marker, False);\n@@ -8877,10 +8877,10 @@ package body Sem_Elab is\n \n       Error_Msg_Warn := GNAT_Mode;\n \n-      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  Ada 2022 (AI12-0175): Calls to certain functions that are essentially\n       --  unchecked conversions are preelaborable.\n \n-      if Ada_Version >= Ada_2020 then\n+      if Ada_Version >= Ada_2022 then\n          Error_Msg_N\n            (\"<<non-preelaborable call not allowed in preelaborated unit\", N);\n       else\n@@ -17558,14 +17558,14 @@ package body Sem_Elab is\n             --  Complain if ref that comes from source in preelaborated unit\n             --  and we are not inside a subprogram (i.e. we are in elab code).\n \n-            --  Ada 2020 (AI12-0175): Calls to certain functions that are\n+            --  Ada 2022 (AI12-0175): Calls to certain functions that are\n             --  essentially unchecked conversions are preelaborable.\n \n             if Comes_From_Source (N)\n               and then In_Preelaborated_Unit\n               and then not In_Inlined_Body\n               and then Nkind (N) /= N_Attribute_Reference\n-              and then not (Ada_Version >= Ada_2020\n+              and then not (Ada_Version >= Ada_2022\n                              and then Is_Preelaborable_Construct (N))\n             then\n                Error_Preelaborated_Call (N);"}, {"sha": "a67688d20dfac6f7b12fc5bb918961dec3d99a22", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -140,7 +140,7 @@ package body Sem_Eval is\n    Checking_For_Potentially_Static_Expression : Boolean := False;\n    --  Global flag that is set True during Analyze_Static_Expression_Function\n    --  in order to verify that the result expression of a static expression\n-   --  function is a potentially static function (see RM202x 6.8(5.3)).\n+   --  function is a potentially static function (see RM2022 6.8(5.3)).\n \n    -----------------------\n    -- Local Subprograms --\n@@ -2303,7 +2303,7 @@ package body Sem_Eval is\n       then\n          Eval_Intrinsic_Call (N, Entity (Name (N)));\n \n-      --  Ada 202x (AI12-0075): If checking for potentially static expressions\n+      --  Ada 2022 (AI12-0075): If checking for potentially static expressions\n       --  is enabled and we have a call to a static function, substitute a\n       --  static value for the call, to allow folding the expression. This\n       --  supports checking the requirement of RM 6.8(5.3/5) in\n@@ -2594,7 +2594,7 @@ package body Sem_Eval is\n             return;\n          end if;\n \n-      --  Ada 202x (AI12-0075): If checking for potentially static expressions\n+      --  Ada 2022 (AI12-0075): If checking for potentially static expressions\n       --  is enabled and we have a reference to a formal parameter of mode in,\n       --  substitute a static value for the reference, to allow folding the\n       --  expression. This supports checking the requirement of RM 6.8(5.3/5)\n@@ -3436,7 +3436,7 @@ package body Sem_Eval is\n    --  Relational operations are static functions, so the result is static if\n    --  both operands are static (RM 4.9(7), 4.9(20)), except that up to Ada\n    --  2012, for strings the result is never static, even if the operands are.\n-   --  The string case was relaxed in Ada 2020, see AI12-0201.\n+   --  The string case was relaxed in Ada 2022, see AI12-0201.\n \n    --  However, for internally generated nodes, we allow string equality and\n    --  inequality to be static. This is because we rewrite A in \"ABC\" as an\n@@ -3777,12 +3777,12 @@ package body Sem_Eval is\n            and then Right_Len /= Uint_Minus_1\n            and then Left_Len /= Right_Len\n          then\n-            --  AI12-0201: comparison of string is static in Ada 202x\n+            --  AI12-0201: comparison of string is static in Ada 2022\n \n             Fold_Uint\n               (N,\n                Test (Nkind (N) = N_Op_Ne),\n-               Static => Ada_Version >= Ada_2020\n+               Static => Ada_Version >= Ada_2022\n                            and then Is_String_Type (Left_Typ));\n             Warn_On_Known_Condition (N);\n             return;\n@@ -3802,16 +3802,16 @@ package body Sem_Eval is\n         (N, Left, Right, Is_Static_Expression, Fold);\n \n       --  Comparisons of scalars can give static results.\n-      --  In addition starting with Ada 202x (AI12-0201), comparison of strings\n+      --  In addition starting with Ada 2022 (AI12-0201), comparison of strings\n       --  can also give static results, and as noted above, we also allow for\n       --  earlier Ada versions internally generated equality and inequality for\n       --  strings.\n-      --  ??? The Comes_From_Source test below isn't correct and will accept\n-      --  some cases that are illegal in Ada 2012. and before. Now that Ada\n-      --  202x has relaxed the rules, this doesn't really matter.\n+      --  The Comes_From_Source test below isn't correct and will accept\n+      --  some cases that are illegal in Ada 2012 and before. Now that Ada\n+      --  2022 has relaxed the rules, this doesn't really matter.\n \n       if Is_String_Type (Left_Typ) then\n-         if Ada_Version < Ada_2020\n+         if Ada_Version < Ada_2022\n            and then (Comes_From_Source (N)\n                       or else Nkind (N) not in N_Op_Eq | N_Op_Ne)\n          then\n@@ -4107,7 +4107,7 @@ package body Sem_Eval is\n       end if;\n \n       --  If original node was a type conversion, then result if non-static\n-      --  up to Ada 2012. AI12-0201 changes that with Ada 202x.\n+      --  up to Ada 2012. AI12-0201 changes that with Ada 2022.\n \n       if Nkind (Original_Node (N)) = N_Type_Conversion\n         and then Ada_Version <= Ada_2012\n@@ -4269,13 +4269,13 @@ package body Sem_Eval is\n       --  Conversion_OK is set, in which case it counts as integer.\n \n       --  Fold conversion, case of string type. The result is static starting\n-      --  with Ada 202x (AI12-0201).\n+      --  with Ada 2022 (AI12-0201).\n \n       if Is_String_Type (Target_Type) then\n          Fold_Str\n            (N,\n             Strval (Get_String_Val (Operand)),\n-            Static => Ada_Version >= Ada_2020);\n+            Static => Ada_Version >= Ada_2022);\n          return;\n \n       --  Fold conversion, case of integer target type\n@@ -6597,7 +6597,7 @@ package body Sem_Eval is\n    --  match if they are set (unless checking an actual for a formal derived\n    --  type). The use of 'Object_Size can cause this to be false even if the\n    --  types would otherwise match in the Ada 95 RM sense, but this deviation\n-   --  is adopted by AI12-059 which introduces Object_Size in Ada 2020.\n+   --  is adopted by AI12-059 which introduces Object_Size in Ada 2022.\n \n    function Subtypes_Statically_Match\n      (T1                      : Entity_Id;"}, {"sha": "67b2f25edf5c4fac77cba9391f5d3625daf1e278", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -4818,10 +4818,10 @@ package body Sem_Prag is\n          then\n             null;\n \n-         --  For Ada 2020, pre/postconditions can appear on formal subprograms\n+         --  For Ada 2022, pre/postconditions can appear on formal subprograms\n \n          elsif Nkind (Subp_Decl) = N_Formal_Concrete_Subprogram_Declaration\n-            and then Ada_Version >= Ada_2020\n+            and then Ada_Version >= Ada_2022\n          then\n             null;\n \n@@ -7258,7 +7258,7 @@ package body Sem_Prag is\n       procedure Process_Atomic_Independent_Shared_Volatile is\n          procedure Check_Full_Access_Only (Ent : Entity_Id);\n          --  Apply legality checks to type or object Ent subject to the\n-         --  Full_Access_Only aspect in Ada 2020 (RM C.6(8.2)).\n+         --  Full_Access_Only aspect in Ada 2022 (RM C.6(8.2)).\n \n          procedure Mark_Component_Or_Object (Ent : Entity_Id);\n          --  Appropriately set flags on the given entity, either an array or\n@@ -7430,7 +7430,7 @@ package body Sem_Prag is\n             --  Attribute belongs on the base type. If the view of the type is\n             --  currently private, it also belongs on the underlying type.\n \n-            --  In Ada 2020, the pragma can apply to a formal type, for which\n+            --  In Ada 2022, the pragma can apply to a formal type, for which\n             --  there may be no underlying type.\n \n             if Prag_Id = Pragma_Atomic\n@@ -7541,14 +7541,14 @@ package body Sem_Prag is\n \n          Check_Duplicate_Pragma (E);\n \n-         --  Check the constraints of Full_Access_Only in Ada 2020. Note that\n+         --  Check the constraints of Full_Access_Only in Ada 2022. Note that\n          --  they do not apply to GNAT's Volatile_Full_Access because 1) this\n          --  aspect subsumes the Volatile aspect and 2) nesting is supported\n          --  for this aspect and the outermost enclosing VFA object prevails.\n \n          --  Note also that we used to forbid specifying both Atomic and VFA on\n          --  the same type or object, but the restriction has been lifted in\n-         --  light of the semantics of Full_Access_Only and Atomic in Ada 2020.\n+         --  light of the semantics of Full_Access_Only and Atomic in Ada 2022.\n \n          if Prag_Id = Pragma_Volatile_Full_Access\n            and then From_Aspect_Specification (N)\n@@ -11334,7 +11334,7 @@ package body Sem_Prag is\n                Warn    => Treat_Restrictions_As_Warnings,\n                Profile => Ravenscar);\n \n-            --  Set the following restriction which was added to Ada 2020,\n+            --  Set the following restriction which was added to Ada 2022,\n             --  but as a binding interpretation:\n             --     No_Dependence => Ada.Synchronous_Barriers\n             --  for Ravenscar (and therefore for Ravenscar variants) but not\n@@ -12529,15 +12529,15 @@ package body Sem_Prag is\n          end;\n \n          --------------\n-         -- Ada_2020 --\n+         -- Ada_2022 --\n          --------------\n \n-         --  pragma Ada_2020;\n+         --  pragma Ada_2022;\n \n          --  Note: this pragma also has some specific processing in Par.Prag\n-         --  because we want to set the Ada 2020 version mode during parsing.\n+         --  because we want to set the Ada 2022 version mode during parsing.\n \n-         when Pragma_Ada_2020 =>\n+         when Pragma_Ada_2022 =>\n             GNAT_Pragma;\n \n             Check_Arg_Count (0);\n@@ -12546,8 +12546,8 @@ package body Sem_Prag is\n \n             --  Now set appropriate Ada mode\n \n-            Ada_Version          := Ada_2020;\n-            Ada_Version_Explicit := Ada_2020;\n+            Ada_Version          := Ada_2022;\n+            Ada_Version_Explicit := Ada_2022;\n             Ada_Version_Pragma   := N;\n \n          -------------------------------------\n@@ -13507,7 +13507,7 @@ package body Sem_Prag is\n                    and then Nkind (Object_Definition (D)) =\n                                        N_Constrained_Array_Definition)\n               or else\n-                 (Ada_Version >= Ada_2020\n+                 (Ada_Version >= Ada_2022\n                    and then Nkind (D) = N_Formal_Type_Declaration)\n             then\n                --  The flag is set on the base type, or on the object\n@@ -19793,18 +19793,18 @@ package body Sem_Prag is\n                   raise Pragma_Exit;\n                end if;\n \n-               --  Loop to find matching procedures or functions (Ada 2020)\n+               --  Loop to find matching procedures or functions (Ada 2022)\n \n                E := Entity (Id);\n \n                Found := False;\n                while Present (E)\n                  and then Scope (E) = Current_Scope\n                loop\n-                  --  Ada 2020 (AI12-0269): A function can be No_Return\n+                  --  Ada 2022 (AI12-0269): A function can be No_Return\n \n                   if Ekind (E) in E_Generic_Procedure | E_Procedure\n-                    or else (Ada_Version >= Ada_2020\n+                    or else (Ada_Version >= Ada_2022\n                               and then\n                              Ekind (E) in E_Generic_Function | E_Function)\n                   then\n@@ -19896,7 +19896,7 @@ package body Sem_Prag is\n                   then\n                      Set_No_Return (Entity (Id));\n \n-                  elsif Ada_Version >= Ada_2020 then\n+                  elsif Ada_Version >= Ada_2022 then\n                      Error_Pragma_Arg\n                        (\"no subprogram& found for pragma%\", Arg);\n \n@@ -30656,17 +30656,17 @@ package body Sem_Prag is\n                elsif Present (Generic_Parent (Specification (Stmt))) then\n                   return Stmt;\n \n-               --  Ada 2020: contract on formal subprogram or on generated\n+               --  Ada 2022: contract on formal subprogram or on generated\n                --  Access_Subprogram_Wrapper, which appears after the related\n                --  Access_Subprogram declaration.\n \n                elsif Is_Generic_Actual_Subprogram (Defining_Entity (Stmt))\n-                 and then Ada_Version >= Ada_2020\n+                 and then Ada_Version >= Ada_2022\n                then\n                   return Stmt;\n \n                elsif Is_Access_Subprogram_Wrapper (Defining_Entity (Stmt))\n-                 and then Ada_Version >= Ada_2020\n+                 and then Ada_Version >= Ada_2022\n                then\n                   return Stmt;\n                end if;\n@@ -31140,7 +31140,7 @@ package body Sem_Prag is\n       Pragma_Ada_2005                       => -1,\n       Pragma_Ada_12                         => -1,\n       Pragma_Ada_2012                       => -1,\n-      Pragma_Ada_2020                       => -1,\n+      Pragma_Ada_2022                       => -1,\n       Pragma_Aggregate_Individually_Assign  => 0,\n       Pragma_All_Calls_Remote               => -1,\n       Pragma_Allow_Integer_Address          => -1,"}, {"sha": "25badeead4503052017eacdd9aa1ba4c0410fbb1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -2120,7 +2120,7 @@ package body Sem_Res is\n             end loop;\n          end if;\n \n-         --  Additional message and hint if the ambiguity involves an Ada2020\n+         --  Additional message and hint if the ambiguity involves an Ada 2022\n          --  container aggregate.\n \n          Check_Ambiguous_Aggregate (N);\n@@ -2786,7 +2786,7 @@ package body Sem_Res is\n             elsif Nkind (N) = N_Aggregate\n               and then Etype (N) = Any_Composite\n             then\n-               if Ada_Version >= Ada_2020\n+               if Ada_Version >= Ada_2022\n                  and then Has_Aspect (Typ, Aspect_Aggregate)\n                then\n                   Resolve_Container_Aggregate (N, Typ);\n@@ -4830,9 +4830,9 @@ package body Sem_Res is\n                end if;\n \n                --  Check for nonatomic subcomponent of a full access object\n-               --  in Ada 2020 (RM C.6 (12)).\n+               --  in Ada 2022 (RM C.6 (12)).\n \n-               if Ada_Version >= Ada_2020\n+               if Ada_Version >= Ada_2022\n                  and then Is_Subcomponent_Of_Full_Access_Object (A)\n                  and then not Is_Atomic_Object (A)\n                then\n@@ -6699,7 +6699,7 @@ package body Sem_Res is\n             Scope_Loop : while Scop /= Standard_Standard loop\n                if Same_Or_Aliased_Subprograms (Nam, Scop) then\n \n-                  --  Ada 202x (AI12-0075): Static functions are never allowed\n+                  --  Ada 2022 (AI12-0075): Static functions are never allowed\n                   --  to make a recursive call, as specified by 6.8(5.4/5).\n \n                   if Is_Static_Function (Scop) then\n@@ -7130,7 +7130,7 @@ package body Sem_Res is\n \n       Warn_On_Overlapping_Actuals (Nam, N);\n \n-      --  Ada 202x (AI12-0075): If the call is a static call to a static\n+      --  Ada 2022 (AI12-0075): If the call is a static call to a static\n       --  expression function, then we want to \"inline\" the call, replacing\n       --  it with the folded static result. This is not done if the checking\n       --  for a potentially static expression is enabled or if an error has\n@@ -9401,7 +9401,7 @@ package body Sem_Res is\n       end if;\n \n       --  If the array type is atomic and the component is not, then this is\n-      --  worth a warning before Ada 2020, since we have a situation where the\n+      --  worth a warning before Ada 2022, since we have a situation where the\n       --  access to the component may cause extra read/writes of the atomic\n       --  object, or partial word accesses, both of which may be unexpected.\n \n@@ -9412,7 +9412,7 @@ package body Sem_Res is\n                                  and then Has_Atomic_Components\n                                             (Entity (Prefix (N)))))\n         and then not Is_Atomic (Component_Type (Array_Type))\n-        and then Ada_Version < Ada_2020\n+        and then Ada_Version < Ada_2022\n       then\n          Error_Msg_N\n            (\"??access to non-atomic component of atomic array\", Prefix (N));\n@@ -10982,15 +10982,15 @@ package body Sem_Res is\n       if Nkind (N) = N_Selected_Component then\n \n          --  If the record type is atomic and the component is not, then this\n-         --  is worth a warning before Ada 2020, since we have a situation\n+         --  is worth a warning before Ada 2022, since we have a situation\n          --  where the access to the component may cause extra read/writes of\n          --  the atomic object, or partial word accesses, both of which may be\n          --  unexpected.\n \n          if Is_Atomic_Ref_With_Address (N)\n            and then not Is_Atomic (Entity (S))\n            and then not Is_Atomic (Etype (Entity (S)))\n-           and then Ada_Version < Ada_2020\n+           and then Ada_Version < Ada_2022\n          then\n             Error_Msg_N\n               (\"??access to non-atomic component of atomic record\","}, {"sha": "2998d2f8eb1fa5355c6f09a51d339e9a7411205d", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1020,10 +1020,10 @@ package body Sem_Type is\n       elsif T2 = Any_Composite and then Is_Aggregate_Type (T1) then\n          return True;\n \n-      --  In Ada_2020, an aggregate is compatible with the type that\n-      --  as the ccorrespoding aspect.\n+      --  In Ada_2022, an aggregate is compatible with the type that\n+      --  as the corresponding aspect.\n \n-      elsif Ada_Version >= Ada_2020\n+      elsif Ada_Version >= Ada_2022\n         and then T2 = Any_Composite\n         and then Present (Find_Aspect (T1, Aspect_Aggregate))\n       then"}, {"sha": "8448efeec3404b0a9d0cab69ea974c5e5740ef7d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -149,7 +149,7 @@ package body Sem_Util is\n    --  have a default.\n \n    function Is_Preelaborable_Function (Id : Entity_Id) return Boolean;\n-   --  Ada 2020: Determine whether the specified function is suitable as the\n+   --  Ada 2022: Determine whether the specified function is suitable as the\n    --  name of a call in a preelaborable construct (RM 10.2.1(7/5)).\n \n    type Null_Status_Kind is\n@@ -10146,7 +10146,7 @@ package body Sem_Util is\n       then\n          Discrim_Value_Status := Static_Expr;\n       else\n-         if Ada_Version >= Ada_2020 then\n+         if Ada_Version >= Ada_2022 then\n             if Original_Node (Discrim_Value) /= Discrim_Value\n                and then Nkind (Discrim_Value) = N_Type_Conversion\n                and then Etype (Original_Node (Discrim_Value))\n@@ -10185,13 +10185,13 @@ package body Sem_Util is\n             --  components are being gathered for an aggregate, in which case\n             --  the caller must check Report_Errors.\n             --\n-            --  In Ada 2020 the above rules are relaxed. A nonstatic governing\n+            --  In Ada 2022 the above rules are relaxed. A nonstatic governing\n             --  discriminant is OK as long as it has a static subtype and\n             --  every value of that subtype (and there must be at least one)\n             --  selects the same variant.\n \n             if OK_Scope_For_Discrim_Value_Error_Messages then\n-               if Ada_Version >= Ada_2020 then\n+               if Ada_Version >= Ada_2022 then\n                   Error_Msg_FE\n                     (\"value for discriminant & must be static or \" &\n                      \"discriminant's nominal subtype must be static \" &\n@@ -15517,7 +15517,7 @@ package body Sem_Util is\n          return Is_Tagged_Type (Etype (Obj))\n            and then Is_Aliased_View (Expression (Obj));\n \n-      --  Ada 202x AI12-0228\n+      --  Ada 2022 AI12-0228\n \n       elsif Nkind (Obj) = N_Qualified_Expression\n         and then Ada_Version >= Ada_2012\n@@ -18362,10 +18362,10 @@ package body Sem_Util is\n \n             when N_Function_Call =>\n \n-               --  Ada 2020 (AI12-0175): Calls to certain functions that are\n+               --  Ada 2022 (AI12-0175): Calls to certain functions that are\n                --  essentially unchecked conversions are preelaborable.\n \n-               if Ada_Version >= Ada_2020\n+               if Ada_Version >= Ada_2022\n                  and then Nkind (Expr) = N_Function_Call\n                  and then Is_Entity_Name (Name (Expr))\n                  and then Is_Preelaborable_Function (Entity (Name (Expr)))\n@@ -18597,7 +18597,7 @@ package body Sem_Util is\n                     and then Is_Object_Reference (Expression (N));\n \n                else\n-                  --  AI12-0226: In Ada 202x a value conversion of an object is\n+                  --  AI12-0226: In Ada 2022 a value conversion of an object is\n                   --  an object.\n \n                   return Is_Object_Reference (Expression (N));\n@@ -19291,8 +19291,8 @@ package body Sem_Util is\n            and then Aggregate_Type /= Any_Composite\n          then\n             if Is_Array_Type (Aggregate_Type) then\n-               if Ada_Version >= Ada_2020 then\n-                  --  For Ada_2020, this predicate returns True for\n+               if Ada_Version >= Ada_2022 then\n+                  --  For Ada 2022, this predicate returns True for\n                   --  any \"repeatedly evaluated\" expression.\n                   return True;\n                end if;\n@@ -19705,10 +19705,10 @@ package body Sem_Util is\n       elsif Nkind (N) = N_Null then\n          return True;\n \n-      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  Ada 2022 (AI12-0175): Calls to certain functions that are essentially\n       --  unchecked conversions are preelaborable.\n \n-      elsif Ada_Version >= Ada_2020\n+      elsif Ada_Version >= Ada_2022\n         and then Nkind (N) = N_Function_Call\n         and then Is_Entity_Name (Name (N))\n         and then Is_Preelaborable_Function (Entity (Name (N)))\n@@ -20210,11 +20210,11 @@ package body Sem_Util is\n \n    function Is_Static_Function (Subp : Entity_Id) return Boolean is\n    begin\n-      --  Always return False for pre Ada 2020 to e.g. ignore the Static\n-      --  aspect in package Interfaces for Ada_Version < 2020 and also\n+      --  Always return False for pre Ada 2022 to e.g. ignore the Static\n+      --  aspect in package Interfaces for Ada_Version < 2022 and also\n       --  for efficiency.\n \n-      return Ada_Version >= Ada_2020\n+      return Ada_Version >= Ada_2022\n         and then Has_Aspect (Subp, Aspect_Static)\n         and then\n           (No (Find_Value_Of_Aspect (Subp, Aspect_Static))\n@@ -30845,7 +30845,7 @@ package body Sem_Util is\n                --  type case correctly, so we avoid that problem by\n                --  returning True here.\n                return True;\n-            elsif Ada_Version < Ada_2020 then\n+            elsif Ada_Version < Ada_2022 then\n                return False;\n             elsif not Is_Conditionally_Evaluated (Expr) then\n                return False;"}, {"sha": "a8f8e0bd9c192ebc29357ef8865a3716b77ae7bb", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -380,7 +380,7 @@ package Sem_Util is\n    --  means that for sure CE cannot be raised.\n \n    procedure Check_Ambiguous_Aggregate (Call : Node_Id);\n-   --  Additional information on an ambiguous call in Ada_2020 when a\n+   --  Additional information on an ambiguous call in Ada_2022 when a\n    --  subprogram call has an actual that is an aggregate, and the\n    --  presence of container aggregates (or types with the correwponding\n    --  aspect)  provides an additional interpretation. Message indicates\n@@ -2002,7 +2002,7 @@ package Sem_Util is\n \n    function Is_Full_Access_Object (N : Node_Id) return Boolean;\n    --  Determine whether arbitrary node N denotes a reference to a full access\n-   --  object as per Ada 2020 RM C.6(8.2).\n+   --  object as per Ada 2022 RM C.6(8.2).\n \n    function Is_Fully_Initialized_Type (Typ : Entity_Id) return Boolean;\n    --  Typ is a type entity. This function returns true if this type is fully\n@@ -3374,7 +3374,7 @@ package Sem_Util is\n          --  (typically a 'Old attribute reference), returns True if\n          --     - the expression is conditionally evaluated; and\n          --     - its determining expressions are all known on entry; and\n-         --     - Ada_Version >= Ada_2020.\n+         --     - Ada_Version >= Ada_2022.\n          --  See RM 6.1.1 for definitions of these terms.\n          --\n          --  Also returns True if Expr is of an anonymous access type;"}, {"sha": "880c8f596e91578495bd6d0ee00199c024b6b907", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1756,7 +1756,7 @@ package Sinfo is\n    --      Test_Case\n \n    --  Is_Homogeneous_Aggregate (Flag14)\n-   --    A flag set on an Ada 2020 aggregate that uses square brackets as\n+   --    A flag set on an Ada 2022 aggregate that uses square brackets as\n    --    delimiters, and thus denotes an array or container aggregate, or\n    --    the prefix of a reduction attribute.\n \n@@ -4252,7 +4252,7 @@ package Sinfo is\n       --  the construct is parsed as an Iterated_Component_Association,\n       --  and legality checks are performed during semantic analysis.\n \n-      --  Both iterated associations are Ada2020 features that are\n+      --  Both iterated associations are Ada 2022 features that are\n       --  expanded during aggregate construction, and do not appear in\n       --  expanded code.\n \n@@ -4938,7 +4938,7 @@ package Sinfo is\n       --  Sloc points to @\n       --  Etype (Node5-Sem)\n \n-      --  Note (Ada 2020): node is used during analysis as a placeholder for\n+      --  Note (Ada 2022): node is used during analysis as a placeholder for\n       --  the value of the LHS of the enclosing assignment statement. Node is\n       --  eventually rewritten together with enclosing assignment, and backends\n       --  are not aware of it.\n@@ -5101,7 +5101,7 @@ package Sinfo is\n       --    DEFINING_IDENTIFIER in [reverse] DISCRETE_SUBTYPE_DEFINITION\n       --    [Iterator_Filter]\n \n-      --  Note; the optional Iterator_Filter is an Ada_2020 construct.\n+      --  Note: the optional Iterator_Filter is an Ada 2022 construct.\n \n       --  N_Loop_Parameter_Specification\n       --  Sloc points to first identifier\n@@ -8020,7 +8020,7 @@ package Sinfo is\n       --  If the actions contain declarations, then these declarations may\n       --  be referenced within the expression.\n \n-      --  (AI12-0236-1): In Ada 2020, for a declare_expression, the parser\n+      --  (AI12-0236-1): In Ada 2022, for a declare_expression, the parser\n       --  generates an N_Expression_With_Actions. Declare_expressions have\n       --  various restrictions, which we do not enforce on\n       --  N_Expression_With_Actions nodes that are generated by the"}, {"sha": "c0182a9a9c2069dba683f383b6e4f076655b5913", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -402,7 +402,7 @@ package Snames is\n    Name_Ada_2005                       : constant Name_Id := N + $; -- GNAT\n    Name_Ada_12                         : constant Name_Id := N + $; -- GNAT\n    Name_Ada_2012                       : constant Name_Id := N + $; -- GNAT\n-   Name_Ada_2020                       : constant Name_Id := N + $; -- GNAT\n+   Name_Ada_2022                       : constant Name_Id := N + $; -- GNAT\n    Name_Aggregate_Individually_Assign  : constant Name_Id := N + $; -- GNAT\n    Name_Allow_Integer_Address          : constant Name_Id := N + $; -- GNAT\n    Name_Annotate                       : constant Name_Id := N + $; -- GNAT\n@@ -1741,8 +1741,8 @@ package Snames is\n       Pragma_Ada_2005,\n       Pragma_Ada_12,\n       Pragma_Ada_2012,\n-      Pragma_Ada_2020,\n-      --  Note that there is no Pragma_Ada_20. Pragma_Ada_05/12 are for\n+      Pragma_Ada_2022,\n+      --  Note that there is no Pragma_Ada_22. Pragma_Ada_05/12 are for\n       --  compatibility reasons only; the full year names are preferred.\n       Pragma_Aggregate_Individually_Assign,\n       Pragma_Allow_Integer_Address,"}, {"sha": "2eeea52d8bdf4faab6c9bd89268049cc5d39d507", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -2493,7 +2493,7 @@ package body Sprint is\n \n             --  AI12-0275: Object_Renaming_Declaration without explicit subtype\n \n-            elsif Ada_Version >= Ada_2020 then\n+            elsif Ada_Version >= Ada_2022 then\n                null;\n \n             else"}, {"sha": "10f5f77176417636ced2dad62ff5beeef2d8162b", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -1581,8 +1581,10 @@ package body Switch.C is\n                elsif Switch_Chars (Ptr .. Ptr + 3) = \"2012\" then\n                   Ada_Version := Ada_2012;\n \n-               elsif Switch_Chars (Ptr .. Ptr + 3) = \"2020\" then\n-                  Ada_Version := Ada_2020;\n+               elsif Switch_Chars (Ptr .. Ptr + 3) = \"2020\"\n+                 or else Switch_Chars (Ptr .. Ptr + 3) = \"2022\"\n+               then\n+                  Ada_Version := Ada_2022;\n \n                else\n                   Bad_Switch (\"-gnat\" & Switch_Chars (Ptr .. Ptr + 3));"}, {"sha": "c88ccece83ad98421ee47dce4e3df9358eea3028", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e68a1954366f6b1730d75c932814121d743aa3/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=81e68a1954366f6b1730d75c932814121d743aa3", "patch": "@@ -698,22 +698,12 @@ begin\n       --  Line for -gnat95 switch\n \n       Write_Switch_Char (\"95\");\n-\n-      if Ada_Version_Default = Ada_95 then\n-         Write_Line (\"Ada 95 mode (default)\");\n-      else\n-         Write_Line (\"Ada 95 mode\");\n-      end if;\n+      Write_Line (\"Ada 95 mode\");\n \n       --  Line for -gnat2005 switch\n \n       Write_Switch_Char (\"2005\");\n-\n-      if Ada_Version_Default = Ada_2005 then\n-         Write_Line (\"Ada 2005 mode (default)\");\n-      else\n-         Write_Line (\"Ada 2005 mode\");\n-      end if;\n+      Write_Line (\"Ada 2005 mode\");\n    end if;\n \n    --  Line for -gnat2012 switch\n@@ -726,6 +716,16 @@ begin\n       Write_Line (\"Ada 2012 mode\");\n    end if;\n \n+   --  Line for -gnat2022 switch\n+\n+   Write_Switch_Char (\"2022\");\n+\n+   if Ada_Version_Default = Ada_2022 then\n+      Write_Line (\"Ada 2022 mode (default)\");\n+   else\n+      Write_Line (\"Ada 2022 mode\");\n+   end if;\n+\n    --  Line for -gnat-p switch\n \n    Write_Switch_Char (\"-p\");"}]}