{"sha": "e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmY2M3MDc0ODkwZTBiZTBhOWVjN2IyZDE3OTcyY2VlYTVhZWFkNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-09-21T23:05:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-21T23:05:39Z"}, "message": "Update Go testsuite to release r60.\n\n\t* go.test/go-test.exp (errchk): Add special case for bug332.\n\t(go-gc-tests): Add special cases for bug347 and bug348.  Recognize\n\tsome more test lines.\n\nFrom-SVN: r179063", "tree": {"sha": "2acf1e16abe40f8771b31004357e768d47be2d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2acf1e16abe40f8771b31004357e768d47be2d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/comments", "author": null, "committer": null, "parents": [{"sha": "2d778bb7ab273cc8e68c483cce1587d6d943c230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d778bb7ab273cc8e68c483cce1587d6d943c230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d778bb7ab273cc8e68c483cce1587d6d943c230"}], "stats": {"total": 2482, "additions": 2403, "deletions": 79}, "files": [{"sha": "99436d1648c3a725455cbcc8a46dc2b8e158bdac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -1,3 +1,9 @@\n+2011-09-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go.test/go-test.exp (errchk): Add special case for bug332.\n+\t(go-gc-tests): Add special cases for bug347 and bug348.  Recognize\n+\tsome more test lines.\n+\n 2011-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/other/i386-3.C: Remove duplicated dg-options."}, {"sha": "0e8f2a6e28f7fde068cb94ccc2c9a1d7aff65dbe", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -81,6 +81,12 @@ proc errchk { test opts } {\n \t    set index [string first \"dg-error\" $out_line]\n \t    regsub -all \"\\\\\\[\\\\.\\\\\\]\" $out_line \"\\\\\\\\\\[.\\\\\\\\\\]\" out_line\n \t}\n+\t# Special case for bug332, in which the error message wants to\n+\t# match the file name, which is not what dg-error expects.\n+\tif [string match \"*dg-error*bug332*\" $out_line] {\n+\t    set index [string first \"dg-error\" $out_line]\n+\t    regsub -start $index \"bug332\" $out_line \"undefined type\" out_line\n+\t}\n \tputs $fdout $out_line\n     }\n     close $fdin\n@@ -258,6 +264,13 @@ proc go-gc-tests { } {\n \t    }\n \t}\n \n+\tif { [string match \"*bug347*\" $test] \\\n+\t\t || [string match \"*bug348*\" $test] } {\n+\t    # These bugs rely on runtime.Caller which currently fails.\n+\t    untested $name\n+\t    continue\n+\t}\n+\n \tset fd [open $test r]\n \n \tset lines_ok 1\n@@ -451,15 +464,23 @@ proc go-gc-tests { } {\n \t\t\t$test_line] \\\n \t\t       || [string match \\\n \t\t\t       \"// \\$G \\$D/\\$F.dir/p1.go && \\$G \\$D/\\$F.dir/p2.go\" \\\n+\t\t\t       $test_line] \\\n+\t\t       || [string match \\\n+\t\t\t       \"// \\$G \\$D/\\$F.dir/b.go && \\$G \\$D/\\$F.dir/a.go\" \\\n \t\t\t       $test_line] } {\n \t    if { [string match \\\n+\t\t      \"// \\$G \\$D/\\$F.dir/bug0.go && errchk \\$G \\$D/\\$F.dir/bug1.go\" \\\n+\t\t      $test_line] } {\n+\t\tset name1 \"bug0.go\"\n+\t\tset name2 \"bug1.go\"\n+\t    } elseif { [string match \\\n \t\t      \"// \\$G \\$D/\\$F.dir/p1.go && \\$G \\$D/\\$F.dir/p2.go\" \\\n \t\t      $test_line] } {\n \t\tset name1 \"p1.go\"\n \t\tset name2 \"p2.go\"\n \t    } else {\n-\t\tset name1 \"bug0.go\"\n-\t\tset name2 \"bug1.go\"\n+\t\tset name1 \"b.go\"\n+\t\tset name2 \"a.go\"\n \t    }\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\""}, {"sha": "1335e4d34fdf11b41032c413a9284d3a15cd42b6", "filename": "gcc/testsuite/go.test/test/bench/regex-dna-parallel.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna-parallel.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -89,7 +89,7 @@ func countMatches(pat string, bytes []byte) int {\n \n func main() {\n \truntime.GOMAXPROCS(4)\n-\tbytes, err := ioutil.ReadFile(\"/dev/stdin\")\n+\tbytes, err := ioutil.ReadAll(os.Stdin)\n \tif err != nil {\n \t\tfmt.Fprintf(os.Stderr, \"can't read input: %s\\n\", err)\n \t\tos.Exit(2)"}, {"sha": "042d7f28361a4abfdaf7af3e5727da2715fbf4e2", "filename": "gcc/testsuite/go.test/test/bench/regex-dna.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fregex-dna.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -87,7 +87,7 @@ func countMatches(pat string, bytes []byte) int {\n }\n \n func main() {\n-\tbytes, err := ioutil.ReadFile(\"/dev/stdin\")\n+\tbytes, err := ioutil.ReadAll(os.Stdin)\n \tif err != nil {\n \t\tfmt.Fprintf(os.Stderr, \"can't read input: %s\\n\", err)\n \t\tos.Exit(2)"}, {"sha": "2541a766b7f63d61b545274f6a5451a487f9b396", "filename": "gcc/testsuite/go.test/test/bench/timing.log", "status": "modified", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -674,3 +674,229 @@ threadring 50000000\n \tgcc -O2 threadring.c\t30.50u 258.05s 325.72r\n \tgccgo -O2 threadring.go\t92.87u 748.39s 728.46r\n \tgc threadring\t38.03u 0.01s 38.04r\n+\n+# Apr 15, 2011\n+# Move to new machine, Intel Xeon E5520@2.27GHz.\n+# (Was Opteron(tm) Processor 8214 HE)\n+\n+fasta -n 25000000\n+OLD:\n+\tgcc -O2 fasta.c\t3.39u 0.04s 3.42r\n+\tgccgo -O2 fasta.go\t3.52u 0.00s 3.52r\n+\tgc fasta\t3.63u 0.04s 3.67r\n+\tgc_B fasta\t3.66u 0.00s 3.66r\n+NEW:\n+\tgcc -O2 fasta.c\t1.45u 0.02s 1.47r\n+\tgccgo -O2 fasta.go\t1.51u 0.01s 1.51r\n+\tgc fasta\t2.04u 0.00s 2.04r\n+\tgc_B fasta\t2.05u 0.00s 2.04r\n+\n+reverse-complement < output-of-fasta-25000000\n+OLD:\n+\tgcc -O2 reverse-complement.c\t1.87u 1.51s 7.02r\n+\tgccgo -O2 reverse-complement.go\t1.56u 0.54s 3.37r\n+\tgc reverse-complement\t1.73u 0.36s 2.08r\n+\tgc_B reverse-complement\t1.75u 0.37s 2.12r\n+NEW:\n+\tgcc -O2 reverse-complement.c\t1.20u 0.47s 12.96r\n+\tgccgo -O2 reverse-complement.go\t0.88u 0.14s 1.01r\n+\tgc reverse-complement\t1.13u 0.17s 1.30r\n+\tgc_B reverse-complement\t1.11u 0.09s 1.20r\n+\n+nbody -n 50000000\n+OLD:\n+\tgcc -O2 -lm nbody.c\t21.90u 0.00s 21.92r\n+\tgccgo -O2 nbody.go\t23.12u 0.03s 23.19r\n+\tgc nbody\t29.07u 0.00s 29.07r\n+\tgc_B nbody\t31.84u 0.00s 31.85r\n+NEW:\n+\tgcc -O2 -lm nbody.c\t13.01u 0.00s 13.03r\n+\tgccgo -O2 nbody.go\t13.35u 0.00s 13.37r\n+\tgc nbody\t21.78u 0.00s 21.82r\n+\tgc_B nbody\t21.72u 0.00s 21.76r\n+\n+binary-tree 15 # too slow to use 20\n+OLD:\n+\tgcc -O2 binary-tree.c -lm\t0.83u 0.02s 0.84r\n+\tgccgo -O2 binary-tree.go\t2.61u 0.02s 2.62r\n+\tgccgo -O2 binary-tree-freelist.go\t0.32u 0.01s 0.32r\n+\tgc binary-tree\t3.93u 0.04s 3.97r\n+\tgc binary-tree-freelist\t0.47u 0.03s 0.50r\n+NEW:\n+\tgcc -O2 binary-tree.c -lm\t0.60u 0.00s 0.59r\n+\tgccgo -O2 binary-tree.go\t1.53u 0.00s 1.52r\n+\tgccgo -O2 binary-tree-freelist.go\t0.01u 0.00s 0.00r\n+\tgc binary-tree\t1.93u 0.02s 1.95r\n+\tgc binary-tree-freelist\t0.32u 0.01s 0.32r\n+\n+fannkuch 12\n+OLD:\n+\tgcc -O2 fannkuch.c\t57.64u 0.00s 57.64r\n+\tgccgo -O2 fannkuch.go\t65.56u 0.01s 65.65r\n+\tgccgo -O2 fannkuch-parallel.go\t179.12u 0.00s 49.82r\n+\tgc fannkuch\t126.39u 0.00s 126.39r\n+\tgc fannkuch-parallel\t172.49u 0.02s 45.44r\n+\tgc_B fannkuch\t89.30u 0.00s 89.28r\n+NEW:\n+\tgcc -O2 fannkuch.c\t45.17u 0.00s 45.26r\n+\tgccgo -O2 fannkuch.go\t53.63u 0.00s 53.73r\n+\tgccgo -O2 fannkuch-parallel.go\t216.72u 0.00s 58.42r\n+\tgc fannkuch\t108.21u 0.00s 108.44r\n+\tgc fannkuch-parallel\t227.20u 0.00s 57.27r\n+\tgc_B fannkuch\t56.14u 0.00s 56.26r\n+\n+regex-dna 100000\n+OLD:\n+\tgcc -O2 regex-dna.c -lpcre\t0.77u 0.01s 0.78r\n+\tgccgo -O2 regex-dna.go\t10.15u 0.02s 10.23r\n+\tgccgo -O2 regex-dna-parallel.go\t33.81u 3.22s 11.62r\n+\tgc regex-dna\t6.52u 0.04s 6.56r\n+\tgc regex-dna-parallel\t6.84u 0.03s 2.70r\n+\tgc_B regex-dna\t6.83u 0.01s 6.84r\n+NEW:\n+\tgcc -O2 regex-dna.c -lpcre\t0.47u 0.00s 0.47r\n+\tgccgo -O2 regex-dna.go\t6.00u 0.00s 6.00r\n+\tgccgo -O2 regex-dna-parallel.go\t44.54u 1.57s 6.51r\n+\tgc regex-dna\t5.41u 0.01s 5.42r\n+\tgc regex-dna-parallel\t5.62u 0.01s 2.20r\n+\tgc_B regex-dna\t5.50u 0.00s 5.50r\n+\n+spectral-norm 5500\n+OLD:\n+\tgcc -O2 spectral-norm.c -lm\t12.29u 0.00s 12.28r\n+\tgccgo -O2 spectral-norm.go\t11.56u 0.00s 11.55r\n+\tgc spectral-norm\t23.98u 0.00s 24.00r\n+\tgc_B spectral-norm\t24.62u 0.00s 24.65r\n+NEW:\n+\tgcc -O2 spectral-norm.c -lm\t15.79u 0.00s 15.82r\n+\tgccgo -O2 spectral-norm.go\t15.32u 0.00s 15.35r\n+\tgc spectral-norm\t19.62u 0.01s 19.67r\n+\tgc_B spectral-norm\t19.62u 0.00s 19.66r\n+\n+k-nucleotide 1000000\n+OLD:\n+\tgcc -O2 k-nucleotide.c\t9.82u 0.06s 9.87r\n+\tgccgo -O2 k-nucleotide.go\t8.30u 0.02s 8.32r\n+\tgccgo -O2 k-nucleotide-parallel.go\t8.84u 0.05s 3.02r\n+\tgc k-nucleotide\t15.38u 0.07s 15.44r\n+\tgc k-nucleotide-parallel\t16.40u 0.03s 5.93r\n+\tgc_B k-nucleotide\t15.19u 0.05s 15.23r\n+NEW:\n+\tgcc -O2 -k-nucleotide.c\t4.88u 0.03s 4.92r\n+\tgccgo -O2 k-nucleotide.go\t5.94u 0.01s 5.96r\n+\tgccgo -O2 k-nucleotide-parallel.go\t6.44u 0.03s 1.47r\n+\tgc k-nucleotide\t9.61u 0.01s 9.63r\n+\tgc k-nucleotide-parallel\t9.70u 0.00s 3.39r\n+\tgc_B k-nucleotide\t9.19u 0.03s 9.23r\n+\n+mandelbrot 16000\n+OLD:\n+\tgcc -O2 mandelbrot.c\t54.54u 0.00s 54.56r\n+\tgccgo -O2 mandelbrot.go\t59.63u 0.03s 59.67r\n+\tgc mandelbrot\t64.82u 0.00s 64.83r\n+\tgc_B mandelbrot\t64.84u 0.00s 64.91r\n+NEW:\n+\tgcc -O2 mandelbrot.c\t36.07u 0.01s 36.15r\n+\tgccgo -O2 mandelbrot.go\t43.57u 0.00s 43.66r\n+\tgc mandelbrot\t60.66u 0.00s 60.79r\n+\tgc_B mandelbrot\t60.90u 0.00s 61.03r\n+\n+meteor 2098\n+OLD:\n+\tgcc -O2 meteor-contest.c\t0.11u 0.00s 0.10r\n+\tgccgo -O2 meteor-contest.go\t0.10u 0.01s 0.10r\n+\tgc meteor-contest\t0.18u 0.00s 0.17r\n+\tgc_B meteor-contest\t0.17u 0.00s 0.16r\n+NEW:\n+\tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.09r\n+\tgccgo -O2 meteor-contest.go\t0.10u 0.00s 0.09r\n+\tgc meteor-contest\t0.14u 0.00s 0.14r\n+\tgc_B meteor-contest\t0.13u 0.00s 0.13r\n+\n+pidigits 10000\n+OLD:\n+\tgcc -O2 pidigits.c -lgmp\t2.22u 0.00s 2.21r\n+\tgccgo -O2 pidigits.go\t13.39u 0.00s 13.40r\n+\tgc pidigits\t6.42u 0.04s 6.45r\n+\tgc_B pidigits\t6.45u 0.02s 6.47r\n+NEW:\n+\tgcc -O2 pidigits.c -lgmp\t2.27u 0.00s 2.29r\n+\tgccgo -O2 pidigits.go\t9.21u 0.00s 9.22r\n+\tgc pidigits\t3.60u 0.00s 3.60r\n+\tgc_B pidigits\t3.56u 0.02s 3.58r\n+\n+threadring 50000000\n+OLD:\n+\tgcc -O2 threadring.c -lpthread\t34.51u 267.95s 336.12r\n+\tgccgo -O2 threadring.go\t103.51u 588.57s 627.16r\n+\tgc threadring\t54.68u 0.00s 54.73r\n+NEW:\n+\tgcc -O2 threadring.c 32.00u 259.39s 369.74r\n+\tgccgo -O2 threadring.go\t133.06u 546.02s 595.33r\n+\tgc threadring\t16.75u 0.02s 16.80r\n+\n+chameneos 6000000\n+OLD:\n+\tgcc -O2 chameneosredux.c -lpthread\t12.65u 31.02s 13.33r\n+\tgccgo -O2 chameneosredux.go\t47.04u 302.84s 252.29r\n+\tgc chameneosredux\t14.14u 0.00s 14.14r\n+NEW:\n+\tgcc -O2 chameneosredux.c -lpthread\t8.05u 63.43s 11.16r\n+\tgccgo -O2 chameneosredux.go\t82.95u 304.37s 207.64r\n+\tgc chameneosredux\t9.42u 0.00s 9.43r\n+\n+# May 13, 2011\n+# after gc update to inline append when possible - 35% faster\n+\n+regex-dna 100000\n+\tgc regex-dna\t3.94u 0.00s 3.95r\n+\tgc regex-dna-parallel\t4.15u 0.01s 1.63r\n+\tgc_B regex-dna\t4.01u 0.01s 4.02r\n+\n+# Aug 4, 2011\n+# After various updates to locking code and some runtime changes.\n+# Slowdowns believed due to slower (but more correct) memmove.\n+\n+fannkuch 12\n+\tgccgo -O2 fannkuch.go\t51.59u 0.00s 51.69r # -4%\n+\tgccgo -O2 fannkuch-parallel.go\t253.17u 0.00s 64.67r # -11%\n+\tgc fannkuch\t103.14u 0.00s 103.36r # -5%\n+\tgc fannkuch-parallel\t189.63u 0.00s 49.37r # +9%\n+\tgc_B fannkuch\t49.19u 0.00s 49.29r # -14%\n+\n+regex-dna 100000\n+\tgc regex-dna\t3.78u 0.00s 3.78r # -43%\n+\tgc regex-dna-parallel\t3.84u 0.02s 1.48r # -49%\n+\tgc_B regex-dna\t3.62u 0.00s 3.63r # -52%\n+\n+k-nucleotide 1000000\n+\tgc k-nucleotide\t12.23u 0.02s 12.27r # +27%\n+\tgc k-nucleotide-parallel\t12.76u 0.02s 4.37r # +29%\n+\tgc_B k-nucleotide\t12.18u 0.01s 12.21r # +33%\n+\n+threadring 50000000\n+\tgc threadring\t17.49u 0.00s 17.53r # +4%\n+\n+chameneos 6000000\n+\tgc chameneosredux\t7.61u 0.00s 7.63r # -24%\n+\n+Aug 9, 2011\n+# After custom algorithms for 1- 2- 4- 8-byte scalars.\n+\n+fannkuch 12\n+\tgc fannkuch-parallel\t157.17u 0.00s 41.08r # -17%\n+\n+k-nucleotide 1000000\n+\tgc k-nucleotide\t8.72u 0.03s 8.76r # -39%\n+\tgc k-nucleotide-parallel\t8.79u 0.01s 3.14r # -39%\n+\tgc_B k-nucleotide\t8.65u 0.03s 8.69r # -39%\n+\n+pidigits 10000\n+\tgc pidigits\t3.71u 0.02s 3.73r # +4%\n+\tgc_B pidigits\t3.73u 0.00s 3.73r # +4%\n+\n+threadring 50000000\n+\tgc threadring\t14.51u 0.00s 14.54r # -17%\n+\n+chameneos 6000000\n+\tgc chameneosredux\t7.41u 0.00s 7.42r # -3%"}, {"sha": "2ba6810ac3476194f7177286bb4181f6afeadda5", "filename": "gcc/testsuite/go.test/test/chan/select6.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect6.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,34 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2075\n+// A bug in select corrupts channel queues of failed cases\n+// if there are multiple waiters on those channels and the\n+// select is the last in the queue. If further waits are made\n+// on the channel without draining it first then those waiters\n+// will never wake up. In the code below c1 is such a channel.\n+\n+package main\n+\n+func main() {\n+\tc1 := make(chan bool)\n+\tc2 := make(chan bool)\n+\tc3 := make(chan bool)\n+\tgo func() { <-c1 }()\n+\tgo func() {\n+\t\tselect {\n+\t\tcase <-c1:\n+\t\t\tpanic(\"dummy\")\n+\t\tcase <-c2:\n+\t\t\tc3 <- true\n+\t\t}\n+\t\t<-c1\n+\t}()\n+\tgo func() { c2 <- true }()\n+\t<-c3\n+\tc1 <- true\n+\tc1 <- true\n+}"}, {"sha": "617c9dab3416e45af7dd8665277277f7e8209b3e", "filename": "gcc/testsuite/go.test/test/chan/zerosize.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fzerosize.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fzerosize.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fzerosize.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,16 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Making channels of a zero-sized type should not panic.\n+\n+package main\n+\n+func main() {\n+\t_ = make(chan [0]byte)\n+\t_ = make(chan [0]byte, 1)\n+\t_ = make(chan struct{})\n+\t_ = make(chan struct{}, 1)\n+}"}, {"sha": "09f1dfb576fe2334c1d06c8af3c6f4358c3c18b9", "filename": "gcc/testsuite/go.test/test/declbad.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -40,7 +40,7 @@ func main() {\n \t{\n \t\t// single redeclaration\n \t\ti, f, s := f3()\n-\t\ti := f1() // ERROR \"redeclared|no new|incompatible\"\n+\t\ti := 1 // ERROR \"redeclared|no new|incompatible\"\n \t\t_, _, _ = i, f, s\n \t}\n \t// double redeclaration"}, {"sha": "5c0f45059a2bf8c02de9aef2741399611dae4ef7", "filename": "gcc/testsuite/go.test/test/divide.go", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,54 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// divide corner cases\n+\n+package main\n+\n+import \"fmt\"\n+\n+func f8(x, y, q, r int8) {\n+\tif t := x / y; t != q {\n+\t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t}\n+\tif t := x % y; t != r {\n+\t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t}\n+}\n+\n+func f16(x, y, q, r int16) {\n+\tif t := x / y; t != q {\n+\t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t}\n+\tif t := x % y; t != r {\n+\t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t}\n+}\n+\n+func f32(x, y, q, r int32) {\n+\tif t := x / y; t != q {\n+\t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t}\n+\tif t := x % y; t != r {\n+\t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t}\n+}\n+\n+func f64(x, y, q, r int64) {\n+\tif t := x / y; t != q {\n+\t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t}\n+\tif t := x % y; t != r {\n+\t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t}\n+}\n+\n+func main() {\n+\tf8(-1<<7, -1, -1<<7, 0)\n+\tf16(-1<<15, -1, -1<<15, 0)\n+\tf32(-1<<31, -1, -1<<31, 0)\n+\tf64(-1<<63, -1, -1<<63, 0)\n+}"}, {"sha": "6b00570bdec9f150872352b718ff710120646f51", "filename": "gcc/testsuite/go.test/test/errchk", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -17,6 +17,13 @@\n \n use POSIX;\n \n+my $exitcode = 1;\n+\n+if(@ARGV >= 1 && $ARGV[0] eq \"-0\") {\n+\t$exitcode = 0;\n+\tshift;\n+}\n+\n if(@ARGV < 1) {\n \tprint STDERR \"Usage: errchk COMPILER [OPTS] SOURCEFILES\\n\";\n \texit 1;\n@@ -47,12 +54,18 @@ $out = join('', <CMD>);\n \n close CMD;\n \n-if($? == 0) {\n+if($exitcode != 0 && $? == 0) {\n \tprint STDERR \"BUG: errchk: command succeeded unexpectedly\\n\";\n \tprint STDERR @out;\n \texit 0;\n }\n \n+if($exitcode == 0 && $? != 0) {\n+\tprint STDERR \"BUG: errchk: command failed unexpectedly\\n\";\n+\tprint STDERR @out;\n+\texit 0;\n+}\n+\n if(!WIFEXITED($?)) {\n \tprint STDERR \"BUG: errchk: compiler crashed\\n\";\n \tprint STDERR @out, \"\\n\";\n@@ -75,25 +88,46 @@ sub chk {\n \t\t$line++;\n \t\tnext if $src =~ m|////|;  # double comment disables ERROR\n \t\tnext unless $src =~ m|// (GC_)?ERROR (.*)|;\n-\t\t$regexp = $2;\n-\t\tif($regexp !~ /^\"([^\"]*)\"/) {\n+\t\tmy $all = $2;\n+\t\tif($all !~ /^\"([^\"]*)\"/) {\n \t\t\tprint STDERR \"$file:$line: malformed regexp\\n\";\n \t\t\tnext;\n \t\t}\n-\t\t$regexp = $1;\n-\n \t\t@errmsg = grep { /$file:$line[:[]/ } @out;\n \t\t@out = grep { !/$file:$line[:[]/ } @out;\n \t\tif(@errmsg == 0) {\n \t\t\tbug();\n-\t\t\tprint STDERR \"errchk: $file:$line: missing expected error: '$regexp'\\n\";\n+\t\t\tprint STDERR \"errchk: $file:$line: missing expected error: '$all'\\n\";\n \t\t\tnext;\n \t\t}\n-\t\t@match = grep { /$regexp/ } @errmsg;\n-\t\tif(@match == 0) {\n+\t\tforeach my $regexp ($all =~ /\"([^\"]*)\"/g) {\n+\t\t\t# Turn relative line number in message into absolute line number.\n+\t\t\tif($regexp =~ /LINE(([+-])([0-9]+))?/) {\n+\t\t\t\tmy $n = $line;\n+\t\t\t\tif(defined($1)) {\n+\t\t\t\t\tif($2 eq \"+\") {\n+\t\t\t\t\t\t$n += int($3);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t$n -= int($3);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t$regexp = \"$`$file:$n$'\";\n+\t\t\t}\n+\t\n+\t\t\t@match = grep { /$regexp/ } @errmsg;\n+\t\t\tif(@match == 0) {\n+\t\t\t\tbug();\n+\t\t\t\tprint STDERR \"errchk: $file:$line: error messages do not match '$regexp'\\n\";\n+\t\t\t\tnext;\n+\t\t\t}\n+\t\t\t@errmsg = grep { !/$regexp/ } @errmsg;\n+\t\t}\n+\t\tif(@errmsg != 0) {\n \t\t\tbug();\n-\t\t\tprint STDERR \"errchk: $file:$line: error message does not match '$regexp'\\n\";\n-\t\t\tnext;\n+\t\t\tprint STDERR \"errchk: $file:$line: unmatched error messages:\\n\";\n+\t\t\tforeach my $l (@errmsg) {\n+\t\t\t\tprint STDERR \"> $l\";\n+\t\t\t}\n \t\t}\n \t}\n }"}, {"sha": "e12be72f925b7aa93241998caa824cdda6ee3aa9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug205.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -12,7 +12,7 @@ var m map[string]int;\n \n func main() {\n \tprintln(t[\"hi\"]);\t// ERROR \"integer\"\n-\tprintln(s[\"hi\"]);\t// ERROR \"integer\"\n+\tprintln(s[\"hi\"]);\t// ERROR \"integer\" \"to type uint\"\n \tprintln(m[0]);\t// ERROR \"map index\"\n }\n "}, {"sha": "da335dbc05a942fcf3ee8cfdb503479262d0a207", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug228.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -8,7 +8,7 @@ package main\n \n func f(x int, y ...int)\t// ok\n \n-func g(x int, y float) (...)\t// ERROR \"[.][.][.]\"\n+func g(x int, y float) (...)\t// ERROR \"[.][.][.]\" \"final argument\"\n \n func h(x, y ...int)\t\t// ERROR \"[.][.][.]\"\n "}, {"sha": "6c9de9ba93eb85ba7cdbc6ee9f71c3962f9e24e2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug229.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug229.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug229.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug229.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -16,5 +16,5 @@ func main() {\n \n \tt.ch = nil\t// ERROR \"unexported\"\n \t\n-\tprintln(testing.anyLowercaseName(\"asdf\"))\t// ERROR \"unexported\"\n+\tprintln(testing.anyLowercaseName(\"asdf\"))\t// ERROR \"unexported\" \"undefined: testing.anyLowercaseName\"\n }"}, {"sha": "9500e582bbeb3841aa1b85f72d6c69717780c936", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug231.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug231.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug231.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug231.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -17,6 +17,6 @@ func main() {\n \tvar i I\n \t\n \ti = m\n-\ti = t\t// ERROR \"not a method|has no methods\"\n+\ti = t\t// ERROR \"not a method|has no methods\" \"does not implement I\"\n \t_ = i\n }"}, {"sha": "4d5a905f054f3eb6c0a73cd284fccde9fe7df704", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug238.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug238.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug238.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug238.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -19,4 +19,3 @@ const h bool = false\n const i int = 2\n const j float64 = 5\n \n-func main() { println(a, b, c, d, e, f, g) }"}, {"sha": "dd5aaa7b8af31ac57605aad1db6aeb3d88c82359", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug273.go", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -47,15 +47,6 @@ func bigcap() {\n \tg1 = make([]int, 10, big)\n }\n \n-const (\n-\taddrBits = 8*uint(unsafe.Sizeof((*byte)(nil)))\n-\tsh = addrBits/2 - 2\n-)\n-var g2 [][1<<sh][1<<sh]byte\n-func overflow() {\n-\tg2 = make([][1<<sh][1<<sh]byte, 64)\n-}\n-\n var g3 map[int]int\n func badmapcap() {\n \tg3 = make(map[int]int, minus1)\n@@ -74,6 +65,8 @@ func bigchancap() {\n \tg4 = make(chan int, big)\n }\n \n+const addrBits = unsafe.Sizeof((*byte)(nil))\n+\n var g5 chan [1<<15]byte\n func overflowchan() {\n \tif addrBits == 32 {\n@@ -92,7 +85,6 @@ func main() {\n \tshouldfail(badcap, \"badcap\")\n \tshouldfail(badcap1, \"badcap1\")\n \tshouldfail(bigcap, \"bigcap\")\n-\tshouldfail(overflow, \"overflow\")\n \tshouldfail(badmapcap, \"badmapcap\")\n \tshouldfail(bigmapcap, \"bigmapcap\")\n \tshouldfail(badchancap, \"badchancap\")"}, {"sha": "198544c3f5425104923e6112ea0b30cdbf6ffb63", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug274.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -25,6 +25,7 @@ func main() {\n \t\tL1:  // ERROR \"statement\"\n \tdefault:\n \t\t     // correct since no semicolon is required before a '}'\n-\t\tL2:  // GCCGO_ERROR \"not used\"\n+\t\tgoto L2\n+\t\tL2:\n \t}\n }"}, {"sha": "8767cdfea5459476f6075be3a57c5e660d9ddfd5", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug297.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -11,5 +11,5 @@ package main\n type ByteSize float64\n const (\n \t_ = iota;   // ignore first value by assigning to blank identifier\n-\tKB ByteSize = 1<<(10*X) // ERROR \"undefined\"\n+\tKB ByteSize = 1<<(10*X) // ERROR \"undefined\" \"as type ByteSize\"\n )"}, {"sha": "c16c3f98af196a35d73ea52903e5356799af7446", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug298.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug298.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug298.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug298.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -7,5 +7,5 @@\n package ddd\n \n func Sum() int\n-\tfor i := range []int{} { return i }  // ERROR \"return outside function|expected\"\n+\tfor i := range []int{} { return i }  // ERROR \"statement outside function|expected\"\n "}, {"sha": "0de56d3d649354e5196e2b2af18f520516083149", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug322.dir/lib.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Flib.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Flib.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Flib.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug322.dir/lib.go"}, {"sha": "f403c7d32e2ac187a054100c679d97aa1c73a851", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug322.dir/main.go", "status": "renamed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.dir%2Fmain.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -38,10 +38,3 @@ func main() {\n \tvar pi2 PI = pt\n \tpi2.PM()\n }\n-\n-/*\n-These should not be errors anymore:\n-\n-bug322.dir/main.go:19: implicit assignment of unexported field 'x' of lib.T in method receiver\n-bug322.dir/main.go:32: implicit assignment of unexported field 'x' of lib.T in method receiver\n-*/", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug322.dir/main.go"}, {"sha": "ad0e62dc8c97c9046f1c877f0b8c9aece5b16ebc", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug322.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug322.go"}, {"sha": "3ab61f3eb5e87fecc23e7ffc92bd380f67ad5fc4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.dir/main.go", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fmain.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -14,7 +14,7 @@ type Exported interface {\n \n type Implementation struct{}\n \n-func (p *Implementation) private() { println(\"main.Implementation.private()\") }\n+func (p *Implementation) private() {}\n \n \n func main() {\n@@ -40,7 +40,12 @@ func main() {\n \t// x = px\n \n \t// this assignment unexpectedly compiles and then executes\n+\tdefer func() {\n+\t\trecover()\n+\t}()\n \tx = px.(Exported)\n+\t\n+\tprintln(\"should not get this far\")\n \n \t// this is a legitimate call, but because of the previous assignment,\n \t// it invokes the method private in p!", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug324.dir/main.go"}, {"sha": "d1e3b991aada1d9775328bde4054610fd2255681", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.dir/p.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fp.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug324.dir/p.go"}, {"sha": "3da75630acf28e68af7075b09e8f8c4639dfb0d0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ! ./$A.out || echo BUG: should fail\n+// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug324.go"}, {"sha": "4ba5f6072e8911abf48a5f47d25eb62894509bb1", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug327.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug327.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug327.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug327.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,24 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Conversion between identical interfaces.\n+// Issue 1647.\n+\n+// The compiler used to not realize this was a no-op,\n+// so it generated a call to the non-existent function runtime.convE2E.\n+\n+package main\n+\n+type (\n+\ta interface{}\n+\tb interface{}\n+)\n+\n+func main() {\n+\tx := a(1)\n+\tz := b(x)\n+\t_ = z\n+}"}, {"sha": "64041f41290732b9b4f3359197d046b8b7c29f01", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug328.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,14 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar p unsafe.Pointer\n+\tprintln(p)\n+}"}, {"sha": "0b7074d62bae9f99accfbf10a65249cf075009f4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug329.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug329.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug329.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug329.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,46 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type Value struct {\n+\tX interface{}\n+\tY int\n+}\n+\n+type Struct struct {\n+\tX complex128\n+}\n+\n+const magic = 1 + 2i\n+\n+func (Value) Complex(x complex128) {\n+\tif x != magic {\n+\t\tprintln(x)\n+\t\tpanic(\"bad complex magic\")\n+\t}\n+}\n+\n+func f(x *byte, y, z int) complex128 {\n+\treturn magic\n+}\n+\n+func (Value) Struct(x Struct) {\n+\tif x.X != magic {\n+\t\tprintln(x.X)\n+\t\tpanic(\"bad struct magic\")\n+\t}\n+}\n+\n+func f1(x *byte, y, z int) Struct {\n+\treturn Struct{magic}\n+}\n+\n+func main() {\n+\tvar v Value\n+\tv.Struct(f1(nil, 0, 0)) // ok\n+\tv.Complex(f(nil, 0, 0)) // used to fail\n+}"}, {"sha": "114492aff80ad182885bb951a4ff76fab813815a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug330.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug330.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug330.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug330.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tx := \"\"\n+\tx = +\"hello\"  // ERROR \"invalid operation.*string|expected numeric\"\n+\tx = +x  // ERROR \"invalid operation.*string|expected numeric\"\n+}"}, {"sha": "28aee1da07f572d295692e1d761cb490641ef78d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug331.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug331.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug331.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug331.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,36 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug331\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+\n+func f() (_ string, x float64, err os.Error) {\n+\treturn\n+}\n+\n+func g() (_ string, x float64, err os.Error) {\n+\treturn \"hello\", 3.14, os.EOF\n+}\n+\n+var _ func() (string, float64, os.Error) = f\n+var _ func() (string, float64, os.Error) = g\n+\n+func main() {\n+\tx, y, z := g()\n+\tif x != \"hello\" || y != 3.14 || z != os.EOF {\n+\t\tprintln(\"wrong\", x, len(x), y, z)\n+\t}\n+}\n+\n+/*\n+issue 1712\n+\n+bug331.go:12: cannot use \"hello\" (type string) as type float64 in assignment\n+bug331.go:12: cannot use 0 (type float64) as type os.Error in assignment:\n+\tfloat64 does not implement os.Error (missing String method)\n+bug331.go:12: error in shape across RETURN\n+*/"}, {"sha": "be79286b819ca827bdf612ea70872bfdecf2f629", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug332.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug332.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug332.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug332.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,17 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// type T int\n+\n+func main() {}\n+\n+// issue 1474\n+\n+// important: no newline on end of next line.\n+// 6g used to print <epoch> instead of bug332.go:111 \n+func (t *T) F() {} // ERROR \"bug332\"\n\\ No newline at end of file"}, {"sha": "515c1f3fabd0aa6285b9f61d753838c64a2979b3", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug333.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug333.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug333.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug333.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1709\n+\n+package main\n+\n+func main() {\n+       type Ts string\n+       var ts Ts\n+       _ = []byte(ts)\n+}\n+\n+/*\n+bug333.go:14: cannot use ts (type Ts) as type string in function argument\n+*/"}, {"sha": "870c9ae24fb43af7752e88daf8ca4c8754f32f1e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug334.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug334.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug334.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug334.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,31 @@\n+// $G $D/$F.go || echo BUG: bug334\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1716\n+\n+package main\n+\n+type (\n+\tcplx64  complex64\n+\tcplx128 complex128\n+)\n+\n+func (c cplx64) Foo()  {}\n+func (c cplx128) Foo() {}\n+\n+func main() {\n+\tvar c64 cplx128\n+\tvar c128 cplx64\n+\tc64.Foo()\n+\tc128.Foo()\n+}\n+\n+/*\n+bug334.go:16: invalid receiver type cplx64\n+bug334.go:17: invalid receiver type cplx128\n+bug334.go:22: c64.Foo undefined (type cplx128 has no field or method Foo)\n+bug334.go:23: c128.Foo undefined (type cplx64 has no field or method Foo)\n+*/"}, {"sha": "5a8112a9de33faf7a885a92856ed47024f6cbee2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug335.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fa.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+import \"./b\"\n+\n+var Bar = b.Foo"}, {"sha": "7428c2a918a4ccb62d5ad4379d3a10b2ca315cbb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug335.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.dir%2Fb.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+type T interface{}\n+\n+func f() T { return nil }\n+\n+var Foo T = f()"}, {"sha": "915b746578ccbe3ba7d895a49c16f6c6baab4cd5", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug335.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug335.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,10 @@\n+// $G $D/$F.dir/b.go && $G $D/$F.dir/a.go\n+// rm -f a.$A b.$A\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1705.\n+\n+unused (see script at top of file)"}, {"sha": "8de36898f8c5b92c213d470fbfe281817d85d3df", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug336.go", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug336.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug336.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug336.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,86 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T1 struct {\n+\tNext *T2\n+}\n+\n+type T2 T1\n+\n+type T3 struct {\n+\tNext *T4\n+}\n+\n+type T4 T5\n+type T5 T6\n+type T6 T7\n+type T7 T8\n+type T8 T9\n+type T9 T3\n+\n+type T10 struct {\n+\tx struct {\n+\t\ty ***struct {\n+\t\t\tz *struct {\n+\t\t\t\tNext *T11\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+type T11 T10\n+\n+type T12 struct {\n+\tF1 *T15\n+\tF2 *T13\n+\tF3 *T16\n+}\n+\n+type T13 T14\n+type T14 T15\n+type T15 T16\n+type T16 T17\n+type T17 T12\n+\n+// issue 1672\n+type T18 *[10]T19\n+type T19 T18\n+\n+func main() {\n+\t_ = &T1{&T2{}}\n+\t_ = &T2{&T2{}}\n+\t_ = &T3{&T4{}}\n+\t_ = &T4{&T4{}}\n+\t_ = &T5{&T4{}}\n+\t_ = &T6{&T4{}}\n+\t_ = &T7{&T4{}}\n+\t_ = &T8{&T4{}}\n+\t_ = &T9{&T4{}}\n+\t_ = &T12{&T15{}, &T13{}, &T16{}}\n+\n+\tvar (\n+\t\ttn    struct{ Next *T11 }\n+\t\ttz    struct{ z *struct{ Next *T11 } }\n+\t\ttpz   *struct{ z *struct{ Next *T11 } }\n+\t\ttppz  **struct{ z *struct{ Next *T11 } }\n+\t\ttpppz ***struct{ z *struct{ Next *T11 } }\n+\t\tty    struct {\n+\t\t\ty ***struct{ z *struct{ Next *T11 } }\n+\t\t}\n+\t)\n+\ttn.Next = &T11{}\n+\ttz.z = &tn\n+\ttpz = &tz\n+\ttppz = &tpz\n+\ttpppz = &tppz\n+\tty.y = tpppz\n+\t_ = &T10{ty}\n+\n+\tt19s := &[10]T19{}\n+\t_ = T18(t19s)\n+}"}, {"sha": "ca9b4b45369504dc4a4b35a5c94ab4ee1ceabe80", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug337.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug337.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug337.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug337.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,19 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1722.\n+\n+// Check that the error messages says \n+//\tbug337.go:16: len(\"foo\") not used\n+// and not\n+//\tbug337.go:16: 3 not used\n+\n+package main\n+\n+func main() {\n+\tlen(\"foo\")\t// ERROR \"len|value computed is not used\"\n+}\n+"}, {"sha": "c368a7fadc59c87a02f332ba30bd57125b75ac79", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug338.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug338.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug338.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug338.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,22 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1787.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+const x = unsafe.Sizeof([8]byte{})\n+\n+func main() {\n+\tvar b [x]int\n+\t_ = b\n+}\n+\n+/*\n+bug338.go:14: array bound must be non-negative\n+*/"}, {"sha": "eac7c5ee62363a97f5e463938e593659f6f61681", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug339.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug339.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug339.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug339.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,20 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1608.\n+// Size used to be -1000000000.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar a interface{} = 0\n+\tsize := unsafe.Sizeof(a)\n+\tif size != 2*unsafe.Sizeof((*int)(nil)) {\n+\t\tprintln(\"wrong size: \", size)\n+\t}\n+}"}, {"sha": "461cc6cd41107c9a7f29095d2fcf79bd894d46d9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug340.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,17 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1606.\n+\n+package main\n+\n+func main() {\n+\tvar x interface{}\n+\tswitch t := x.(type) { // ERROR \"0 is not a type\"\n+\tcase 0:\n+\t\tt.x = 1 // ERROR \"type interface \\{ \\}\"\n+\t}\n+}"}, {"sha": "8ee52e1ef05409c76396f7f4da23b00eea2050df", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug341.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug341.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug341.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug341.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,22 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug341\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to panic because 8g was generating incorrect\n+// code for converting a negative float to a uint64.\n+\n+package main\n+\n+func main() {\n+\tvar x float32 = -2.5\n+\n+\t_ = uint64(x)\n+\t_ = float32(0)\n+}\n+/*\n+panic: runtime error: floating point error\n+\n+[signal 0x8 code=0x6 addr=0x8048c64 pc=0x8048c64]\n+*/"}, {"sha": "0852cdd34832ee1eeb28ae276c6c2fe32c2dd0e9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug342.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,24 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1871.\n+\n+package p\n+\n+type a interface {\n+\tfoo(x int) (x int) // ERROR \"redeclared|redefinition\"\n+}\n+\n+var b interface {\n+\tbar(y int) (y int) // ERROR \"redeclared|redefinition\"\n+}\n+\n+/*\n+Previously:\n+\n+bug.go:1 x redclared in this block\n+    previous declaration at bug.go:1\n+*/"}, {"sha": "efc87e3d7a509ef6bc44e04f3d22dc7c6e4253b2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug343.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug343.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug343.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug343.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,33 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug343\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1900\n+\n+package main\n+\n+func getArgs(data map[string]interface{}, keys ...string) map[string]string {\n+       ret := map[string]string{}\n+       var ok bool\n+       for _, k := range keys {\n+               ret[k], ok = data[k].(string)\n+               if !ok {}\n+       }\n+       return ret\n+}\n+\n+func main() {\n+\tx := getArgs(map[string]interface{}{\"x\":\"y\"}, \"x\")\n+\tif x[\"x\"] != \"y\" {\n+\t\tprintln(\"BUG bug343\", x)\n+\t}\n+}\n+\t\n+\n+/*\n+typecheck [1008592b0]\n+.   INDREG a(1) l(15) x(24) tc(2) runtime.ret G0 string\n+bug343.go:15: internal compiler error: typecheck INDREG\n+*/"}, {"sha": "ce953f7f2f7e996ce399cab750861c8385680464", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug344.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug344.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug344.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug344.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,24 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\t// invalid use of goto.\n+\t// do whatever you like, just don't crash.\n+\ti := 42\n+\ta := []*int{&i, &i, &i, &i}\n+\tx := a[0]\n+\tgoto start  // ERROR \"jumps into block\"\n+\tz := 1\n+\t_ = z\n+\tfor _, x = range a {\t// GCCGO_ERROR \"block\"\n+\tstart:\n+\t\tfmt.Sprint(*x)\n+\t}\n+}"}, {"sha": "1d695c3045865191393e797349f4a7793b943900", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug345.dir/io.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fio.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package io\n+\n+type Writer interface {\n+\tWrongWrite()\n+}\n+\n+type SectionReader struct {\n+\tX int\n+}\n+\n+func SR(*SectionReader) {}"}, {"sha": "5bdc713f4e0b0e12c5e0b7b644502d7900b858f4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug345.dir/main.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.dir%2Fmain.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bufio\"\n+\t\"./io\"\n+\tgoio \"io\"\n+)\n+\n+func main() {\n+\t// The errors here complain that io.X != io.X\n+\t// for different values of io so they should be\n+\t// showing the full import path, which for the\n+\t// \"./io\" import is really ..../go/test/io.\n+\t// For example:\n+\t//\n+\t// main.go:25: cannot use w (type \"/Users/rsc/g/go/test/fixedbugs/bug345.dir/io\".Writer) as type \"io\".Writer in function argument:\n+\t//\tio.Writer does not implement io.Writer (missing Write method)\n+\t// main.go:27: cannot use &x (type *\"io\".SectionReader) as type *\"/Users/rsc/g/go/test/fixedbugs/bug345.dir/io\".SectionReader in function argument\n+\n+\tvar w io.Writer\n+\tbufio.NewWriter(w)  // ERROR \"test/io\"\n+\tvar x goio.SectionReader\n+\tio.SR(&x)  // ERROR \"test/io\"\n+}"}, {"sha": "874710ce88a57bf9ad822ce2daac64556dec409e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug345.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug345.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,7 @@\n+// $G $D/$F.dir/io.go && errchk $G -e $D/$F.dir/main.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "31284c31a1d8368a2ac45d3e6071c208efcbbc54", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug346.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug346.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug346.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug346.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: issue2056\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+\n+func main() {\n+\tx := 4\n+\ta, b, c, d := func(i int) (p int, q int, r int, s int) { return 1, i, 3, x }(2)\n+\n+\tif a != 1 || b != 2 || c != 3 || d != 4 {\n+\t\tprintln(\"abcd: expected 1 2 3 4 got\", a, b, c, d)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "5532cee83107c1cf944e9b6d46142f132b997d5b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug347.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug347.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug347.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug347.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,49 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+var t *struct {\n+\tc chan int\n+}\n+\n+var c chan int\n+\n+func f() {\n+\tselect {\n+\tcase <-t.c:  // THIS IS LINE 22\n+\t\tbreak\n+\tcase <-c:\n+\t\tbreak\n+\t}\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\trecover()\n+\t\tfor i := 0;; i++ {\n+\t\t\tpc, file, line, ok := runtime.Caller(i)\n+\t\t\tif !ok {\n+\t\t\t\tprint(\"BUG: bug347: cannot find caller\\n\")\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif !strings.Contains(file, \"bug347.go\") || runtime.FuncForPC(pc).Name() != \"main.f\" {\n+\t\t\t\t// walk past runtime frames\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif line != 22 {\n+\t\t\t\tprint(\"BUG: bug347: panic at \", file, \":\", line, \" in \", runtime.FuncForPC(pc).Name(), \"\\n\")\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "1a539aa3e471ee3ed0fd1c5cf17e2e0a86898d3c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug348.go", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug348.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug348.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug348.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,46 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+func f() {\n+\tvar x *string\n+\t\n+\tfor _, i := range *x {  // THIS IS LINE 17\n+\t\tprintln(i)\n+\t}\n+}\n+\n+func g() {\n+}\n+\n+func main() {\n+\tdefer func() {\n+\t\tfor i := 0;; i++ {\n+\t\t\tpc, file, line, ok := runtime.Caller(i)\n+\t\t\tif !ok {\n+\t\t\t\tprint(\"BUG: bug348: cannot find caller\\n\")\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif !strings.Contains(file, \"bug348.go\") || runtime.FuncForPC(pc).Name() != \"main.f\" {\n+\t\t\t\t// walk past runtime frames\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif line != 17 {\n+\t\t\t\tprint(\"BUG: bug348: panic at \", file, \":\", line, \" in \", runtime.FuncForPC(pc).Name(), \"\\n\")\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\trecover()\n+\t\t\treturn\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "e7612edb77e4f02b81d63ced2e48aebba91f4a6b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug349.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug349.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug349.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug349.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1192 - detail in error\n+\n+package main\n+\n+func foo() (a, b, c int) {\n+\treturn 0, 1 2.01  // ERROR \"unexpected literal 2.01|expected ';' or '}' or newline|not enough arguments to return\"\n+}"}, {"sha": "aac2949017a9cfb46003dde6075199c41a1bc122", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug350.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug350.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug350.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug350.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,15 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T int\n+\n+func (T) m() {}\n+func (T) m() {} // ERROR \"T[.]m redeclared\"\n+\n+func (*T) p() {}\n+func (*T) p() {} // ERROR \"[(][*]T[)][.]p redeclared\""}, {"sha": "2f631bbbbc5a98570d4ac31f297058891aca63d4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug351.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug351.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug351.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug351.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var x int\n+\n+func main() {\n+\t(x) := 0  // ERROR \"non-name [(]x[)]\"\n+}"}, {"sha": "62fd006c423e5797000bde0e3609bd7dff18839c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug352.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug352.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug352.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug352.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug352\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var x [10][0]byte\n+var y = make([]struct{}, 10)\n+\n+func main() {\n+\tif &x[1] != &x[2] {\n+\t\tprintln(\"BUG: bug352 [0]byte\")\n+\t}\n+\tif &y[1] != &y[2] {\n+\t\tprintln(\"BUG: bug352 struct{}\")\n+\t}\n+}"}, {"sha": "b59d97f33842d822b285c0469e491a18436a177e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug353.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug353.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug353.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug353.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,30 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 2089 - internal compiler error\n+\n+package main\n+\n+import (\n+\t\"io\"\n+\t\"os\"\n+)\n+\n+func echo(fd io.ReadWriterCloser) { // ERROR \"undefined.*io.ReadWriterCloser\"\n+\tvar buf [1024]byte\n+\tfor {\n+\t\tn, err := fd.Read(buf)\n+\t\tif err != nil {\n+\t\t\tbreak\n+\t\t}\n+\t\tfd.Write(buf[0:n])\n+\t}\n+}\n+\n+func main() {\n+\tfd, _ := os.Open(\"a.txt\")\n+\techo(fd)\n+}"}, {"sha": "1f6a6dc9f731a4cd51ad7ebf4149bbe3845fa10e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug354.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug354.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug354.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug354.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,26 @@\n+// $G $D/$F.go || echo BUG: bug354\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 2086\n+// was calling makeclosure twice on the closure\n+\n+package main\n+\n+import (\n+\t\"os\"\n+)\n+\n+type Inner struct {\n+\tF func() os.Error\n+}\n+\n+type Outer struct {\n+\tInners []Inner\n+}\n+\n+// calls makeclosure twice on same closure\n+\n+var Foo = Outer{[]Inner{Inner{func() os.Error{ return nil }}}}"}, {"sha": "a9cf0161b0d8fae6d4ffc9f7a75cf8c3b03b4a28", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug355.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug355.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug355.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug355.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,18 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var f = func() int {\n+\ttype S int\n+\treturn 42\n+}\n+\n+func main() {\n+\tif f() != 42 {\n+\t\tpanic(\"BUG: bug355\")\n+\t}\n+}"}, {"sha": "d21f0cfac61f95339b38470814462a6e27ef121e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug356.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug356.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug356.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug356.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,41 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug344\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1808\n+\n+package main\n+\n+func main() {\n+\tvar i uint64\n+\tvar x int = 12345\n+\n+\tif y := x << (i&5); y != 12345<<0 {\n+\t\tprintln(\"BUG bug344\", y)\n+\t\treturn\n+\t}\n+\t\n+\ti++\n+\tif y := x << (i&5); y != 12345<<1 {\n+\t\tprintln(\"BUG bug344a\", y)\n+\t}\n+\t\n+\ti = 70\n+\tif y := x << i; y != 0 {\n+\t\tprintln(\"BUG bug344b\", y)\n+\t}\n+\t\n+\ti = 1<<32\n+\tif y := x << i; y != 0 {\n+\t\tprintln(\"BUG bug344c\", y)\n+\t}\n+}\n+\t\n+\n+/*\n+typecheck [1008592b0]\n+.   INDREG a(1) l(15) x(24) tc(2) runtime.ret G0 string\n+bug343.go:15: internal compiler error: typecheck INDREG\n+*/"}, {"sha": "448d9826370618bdba84dc517c25a0bf57b4cb0c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug357.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,26 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1993.\n+// error used to have last line number in file\n+\n+package main\n+\n+func bla1() bool {\n+\treturn false\n+}\n+\n+func bla5() bool {\n+\t_ = 1\n+\tfalse  // ERROR \"false not used|value computed is not used\"\n+\t_ = 2\n+\treturn false\n+}\n+\n+func main() {\n+\tx := bla1()\n+\t_ = x\n+}"}, {"sha": "f43709b7e2567a4f84e58b00dbadb97351cddb9c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug358.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,26 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1979\n+// used to get internal compiler error too\n+\n+package main\n+\n+import (\n+\t\"http\"\n+\t\"io/ioutil\"\t// GCCGO_ERROR \"imported and not used\"\n+\t\"os\"\n+)\n+\n+func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {\n+\treturn func(w http.ResponseWriter, r *http.Request)  // ERROR \"syntax error|invalid use of type\"\n+}\n+\n+type Page struct {\n+\tTitle string\n+\tBody []byte\n+}\n+"}, {"sha": "3701499ed20276d98e8f0add47b76c2ff0e33a2e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug359.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug359.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug359.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug359.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,26 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1910\n+// error on wrong line\n+\n+package main\n+\n+import \"container/list\"\n+\n+type Painting struct {\n+\tfragments list.List // private\n+}\n+\n+func (p Painting) Foo() {\n+\tfor e := p.fragments; e.Front() != nil; {  // ERROR \"unexported field|hidden field\"\n+\t}\n+}\n+\n+// from comment 4 of issue 1910\n+type Foo interface {\n+\tRun(a int) (a int)  // ERROR \"a redeclared|redefinition|previous\"\n+}"}, {"sha": "d2a64bcef4744c479a24101b19e1c433e5d9138b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug361.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug361.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug361.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug361.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,15 @@\n+// $G $D/$F.go || echo BUG: bug360\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1908\n+// unreasonable width used to be internal fatal error\n+\n+package test\n+\n+func main() {\n+\tbuf := [1<<30]byte{}\n+\t_ = buf[:]\n+}"}, {"sha": "f38572c0d0f6050ccc17b6ad21436ce3844a5951", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug362.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug362.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug362.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug362.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,16 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1662\n+// iota inside var\n+\n+package main\n+\n+var (\n+\ta = iota  // ERROR \"undefined: iota|iota is only defined in const\"\n+\tb = iota  // ERROR \"undefined: iota|iota is only defined in const\"\n+\tc = iota  // ERROR \"undefined: iota|iota is only defined in const\"\n+)"}, {"sha": "04fcfe1a87524a89ed0f83ed804fbd45f2ed2e1e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug363.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,21 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1664\n+\n+package main\n+\n+func main() {\n+\tvar i uint = 33\n+\tvar a = (1<<i) + 4.5  // ERROR \"shift of type float64|invalid.*shift\"\n+\tprintln(a)\n+\t\n+\tvar b = (1<<i) + 4.0  // ERROR \"shift of type float64|invalid.*shift\"\n+\tprintln(b)\n+\n+\tvar c int64 = (1<<i) + 4.0  // ok - it's all int64\n+\tprintln(b)\n+}"}, {"sha": "a17453419417734b7a911449ed16bd99da52b183", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug364.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug364.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug364.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug364.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,25 @@\n+package main\n+\n+import \"fmt\"\n+\n+var s string\n+\n+func accum(args ...interface{}) {\n+\ts += fmt.Sprintln(args...)\n+}\n+\n+func f(){\n+\tv := 0.0\n+\tfor i := 0; i < 3; i++ {\n+\t\tv += 0.1\n+\t\tdefer accum(v)\n+\t}\n+}\n+\n+func main() {\n+\tf()\n+\tif s != \"0.30000000000000004\\n0.2\\n0.1\\n\" {\n+\t\tprintln(\"BUG: defer\")\n+\t\tprint(s)\n+\t}\n+}"}, {"sha": "ce69505044089a61e9655a52ea19a468c936a527", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug365.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,22 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// check that compiler doesn't stop reading struct def\n+// after first unknown type.\n+\n+// Fixes issue 2110.\n+\n+package main\n+\n+type S struct {\n+\terr os.Error  // ERROR \"undefined|expected package\"\n+\tNum int\n+}\n+\n+func main() {\n+\ts := S{}\n+\t_ = s.Num  // no error here please\n+}"}, {"sha": "1356b6aa8b809805b5d5af63531be07fe166759d", "filename": "gcc/testsuite/go.test/test/func6.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc6.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,14 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tif func() bool { return true }() {}  // 6g used to say this was a syntax error\n+\tif (func() bool { return true })() {}\n+\tif (func() bool { return true }()) {}\n+}\n+"}, {"sha": "e38b008cc097d2f946b863a68718fbbe32d1b0ea", "filename": "gcc/testsuite/go.test/test/func7.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,29 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var calledf = false\n+\n+func f() int {\n+\tcalledf = true\n+\treturn 1\n+}\n+\n+func g() int {\n+\tif !calledf {\n+\t\tprintln(\"BUG: func7 - called g before f\")\n+\t}\n+\treturn 0\n+}\n+\n+func main() {\n+\t// 6g, 8g, 5g all used to evaluate g() before f().\n+\tif f() < g() {\n+\t\tpanic(\"wrong answer\")\n+\t}\n+}\n+"}, {"sha": "c54d807df724ff0d0f254fd30568fff6b091b8fe", "filename": "gcc/testsuite/go.test/test/gc2.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgc2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgc2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgc2.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,42 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that buffered channels are garbage collected properly.\n+// An interesting case because they have finalizers and used to\n+// have self loops that kept them from being collected.\n+// (Cyclic data with finalizers is never finalized, nor collected.)\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\t\"runtime\"\n+)\n+\n+func main() {\n+\tconst N = 10000\n+\tst := runtime.MemStats\n+\tfor i := 0; i < N; i++ {\n+\t\tc := make(chan int, 10)\n+\t\t_ = c\n+\t\tif i%100 == 0 {\n+\t\t\tfor j := 0; j < 4; j++ {\n+\t\t\t\truntime.GC()\n+\t\t\t\truntime.Gosched()\n+\t\t\t\truntime.GC()\n+\t\t\t\truntime.Gosched()\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\truntime.UpdateMemStats()\n+\tobj := runtime.MemStats.HeapObjects - st.HeapObjects\n+\tif obj > N/5 {\n+\t\tfmt.Println(\"too many objects left:\", obj)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "655ceda5653d6e91adbfcd0938e8fea3e45dc5e8", "filename": "gcc/testsuite/go.test/test/golden.out", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -21,6 +21,9 @@ panic: runtime error: hash of unhashable type []int\n printing: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n 42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255\n \n+=========== ./goprint.go\n+42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255\n+\n =========== ./helloworld.go\n hello, world\n \n@@ -157,13 +160,7 @@ panic: interface conversion: interface is int, not int32\n panic: interface conversion: interface is main.T, not main.T\n \n \n-== bugs/\n+=========== fixedbugs/bug328.go\n+0x0\n \n-=========== bugs/bug322.go\n-bugs/bug322.dir/main.go:19: implicit assignment of unexported field 'x' of lib.T in method receiver\n-bugs/bug322.dir/main.go:22: implicit assignment of unexported field 'x' of lib.T in assignment\n-bugs/bug322.dir/main.go:31: implicit assignment of unexported field 'x' of lib.T in method receiver\n-BUG: fails incorrectly\n-\n-=========== bugs/bug324.go\n-BUG: errchk: command succeeded unexpectedly\n+== bugs/"}, {"sha": "c0e34c750e39971d41c30504b93b0493e2e594c1", "filename": "gcc/testsuite/go.test/test/goprint.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,14 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"time\"\n+\n+func main() {\n+\tgo println(42, true, false, true, 1.5, \"world\", (chan int)(nil), []int(nil), (map[string]int)(nil), (func())(nil), byte(255))\n+\ttime.Sleep(1e6)\n+}"}, {"sha": "1fccb314c87d916dfd7102cc90ddbf719367dd9e", "filename": "gcc/testsuite/go.test/test/goto.go", "status": "added", "additions": 535, "deletions": 0, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoto.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoto.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoto.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,535 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Each test is in a separate function just so that if the\n+// compiler stops processing after one error, we don't\n+// lose other ones.\n+\n+package main\n+\n+var (\n+\ti, n int\n+\tx    []int\n+\tc    chan int\n+\tm    map[int]int\n+\ts    string\n+)\n+\n+// goto after declaration okay\n+func _() {\n+\tx := 1\n+\tgoto L\n+L:\n+\t_ = x\n+}\n+\n+// goto before declaration okay\n+func _() {\n+\tgoto L\n+L:\n+\tx := 1\n+\t_ = x\n+}\n+\n+// goto across declaration not okay\n+func _() {\n+\tgoto L // ERROR \"goto L jumps over declaration of x at LINE+1|goto jumps over declaration\"\n+\tx := 1\t// GCCGO_ERROR \"defined here\"\n+\t_ = x\n+L:\n+}\n+\n+// goto across declaration in inner scope okay\n+func _() {\n+\tgoto L\n+\t{\n+\t\tx := 1\n+\t\t_ = x\n+\t}\n+L:\n+}\n+\n+// goto across declaration after inner scope not okay\n+func _() {\n+\tgoto L // ERROR \"goto L jumps over declaration of x at LINE+5|goto jumps over declaration\"\n+\t{\n+\t\tx := 1\n+\t\t_ = x\n+\t}\n+\tx := 1\t// GCCGO_ERROR \"defined here\"\n+\t_ = x\n+L:\n+}\n+\n+// goto across declaration in reverse okay\n+func _() {\n+L:\n+\tx := 1\n+\t_ = x\n+\tgoto L\n+}\n+\n+// error shows first offending variable\n+func _() {\n+\tgoto L // ERROR \"goto L jumps over declaration of x at LINE+1|goto jumps over declaration\"\n+\tx := 1\t// GCCGO_ERROR \"defined here\"\n+\t_ = x\n+\ty := 1\n+\t_ = y\n+L:\n+}\n+\n+// goto not okay even if code path is dead\n+func _() {\n+\tgoto L // ERROR \"goto L jumps over declaration of x at LINE+1|goto jumps over declaration\"\n+\tx := 1\t// GCCGO_ERROR \"defined here\"\n+\t_ = x\n+\ty := 1\n+\t_ = y\n+\treturn\n+L:\n+}\n+\n+// goto into outer block okay\n+func _() {\n+\t{\n+\t\tgoto L\n+\t}\n+L:\n+}\n+\n+// goto backward into outer block okay\n+func _() {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+}\n+\n+// goto into inner block not okay\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t{\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+// goto backward into inner block still not okay\n+func _() {\n+\t{\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+// error shows first (outermost) offending block\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t{\n+\t\t{\n+\t\t\t{\t// GCCGO_ERROR \"block starts here\"\n+\t\t\tL:\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+// error prefers block diagnostic over declaration diagnostic\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+3|goto jumps into block\"\n+\tx := 1\n+\t_ = x\n+\t{\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+// many kinds of blocks, all invalid to jump into or among,\n+// but valid to jump out of\n+\n+// if\n+\n+func _() {\n+L:\n+\tif true {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tif true {\n+\t\tgoto L\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tif false {\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tif true {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tif true {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tif true {\n+\t} else {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif false {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t} else {\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t} else {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t} else if false {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t} else if false {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+\t// This one is tricky.  There is an implicit scope\n+\t// starting at the second if statement, and it contains\n+\t// the final else, so the outermost offending scope\n+\t// really is LINE+1 (like in the previous test),\n+\t// even though it looks like it might be LINE+3 instead.\n+\tif true {\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\t} else if false {\n+\t} else {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+}\n+\n+/* Want to enable these tests but gofmt mangles them.  Issue 1972.\n+\n+func _() {\n+\t// This one is okay, because the else is in the\n+\t// implicit whole-if block and has no inner block\n+\t// (no { }) around it.\n+\tif true {\n+\t\tgoto L\n+\t} else\n+\t\tL:\n+}\n+\n+func _() {\n+\t// Still not okay.\n+\tif true {\t//// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t} else\n+\t\tgoto L //// ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+*/\n+\n+// for\n+\n+func _() {\n+\tfor {\n+\t\tgoto L\n+\t}\n+L:\n+}\n+\n+func _() {\n+\tfor {\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tfor {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor {\t// GCCGO_ERROR \"block starts here\"\n+\t\tgoto L\n+\tL1:\n+\t}\n+L:\n+\tgoto L1 // ERROR \"goto L1 jumps into block starting at LINE-5|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i < n {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i = 0; i < n; i++ {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i = range x {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i = range c {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i = range m {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+func _() {\n+\tfor i = range s {\t// GCCGO_ERROR \"block starts here\"\n+\tL:\n+\t}\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE-3|goto jumps into block\"\n+}\n+\n+// switch\n+\n+func _() {\n+L:\n+\tswitch i {\n+\tcase 0:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\tL:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\t\tgoto L\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tswitch i {\n+\tcase 0:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tswitch i {\n+\tcase 0:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tswitch i {\n+\tcase 0:\n+\tdefault:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tdefault:\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tcase 0:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t\t;\n+\tdefault:\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE-4|goto jumps into block\"\n+\t}\n+}\n+\n+// select\n+// different from switch.  the statement has no implicit block around it.\n+\n+func _() {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tselect {\n+\tcase c <- 1:\n+\n+\tdefault:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\n+\tdefault:\n+\tL:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase c <- 1:\n+\n+\tdefault:\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\t\tgoto L\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+2|goto jumps into block\"\n+\tselect {\n+\tcase c <- 1:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+2|goto jumps into block\"\n+\tselect {\n+\tcase c <- 1:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L // ERROR \"goto L jumps into block starting at LINE+3|goto jumps into block\"\n+\tselect {\n+\tcase <-c:\n+\tdefault:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tdefault:\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE+1|goto jumps into block\"\n+\tcase <-c:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\tL:\t// GCCGO_ERROR \"block starts here\"\n+\t\t;\n+\tdefault:\n+\t\tgoto L // ERROR \"goto L jumps into block starting at LINE-4|goto jumps into block\"\n+\t}\n+}"}, {"sha": "ebd704ef9959e21e690baa52f59bccf7936a5570", "filename": "gcc/testsuite/go.test/test/import1.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -9,9 +9,9 @@\n package main\n \n import \"bufio\"\t// GCCGO_ERROR \"previous|not used\"\n-import bufio \"os\"\t// ERROR \"redeclared|redefinition|incompatible\"\n+import bufio \"os\"\t// ERROR \"redeclared|redefinition|incompatible\" \"imported and not used\"\n \n import (\n \t\"fmt\"\t// GCCGO_ERROR \"previous|not used\"\n-\tfmt \"math\"\t// ERROR \"redeclared|redefinition|incompatible\"\n+\tfmt \"math\"\t// ERROR \"redeclared|redefinition|incompatible\" \"imported and not used\"\n )"}, {"sha": "e7f8b0e92fe30a83397f45129a2da036856fe600", "filename": "gcc/testsuite/go.test/test/initializerr.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -17,7 +17,7 @@ type T struct {\n var x = 1\n var a1 = S { 0, X: 1 }\t// ERROR \"mixture|undefined\"\n var a2 = S { Y: 3, Z: 2, Y: 3 } // ERROR \"duplicate\"\n-var a3 = T { 1, 2, 3, 4, 5, 6 }\t// ERROR \"convert|too many\"\n+var a3 = T { S{}, 2, 3, 4, 5, 6 }\t// ERROR \"convert|too many\"\n var a4 = [5]byte{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }\t// ERROR \"index|too many\"\n var a5 = []byte { x: 2 }\t// ERROR \"index\"\n "}, {"sha": "daae59b36182dafea0b136ad14539925b1024c4f", "filename": "gcc/testsuite/go.test/test/interface/explicit.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fexplicit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fexplicit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fexplicit.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -48,7 +48,7 @@ func main() {\n \ti2 = I2(i) // ERROR \"invalid|missing N method\"\n \n \te = E(t) // ok\n-\tt = T(e) // ERROR \"need explicit|need type assertion|incompatible\"\n+\tt = T(e) // ERROR \"need explicit|need type assertion|incompatible\" \"as type [*]T\"\n }\n \n type M interface {"}, {"sha": "f1e363cbff63be7f9f4ff9b2d41ccbf250a7d683", "filename": "gcc/testsuite/go.test/test/interface/pointer.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fpointer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fpointer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fpointer.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -33,4 +33,5 @@ func main() {\n \tprint(\"call addinst\\n\")\n \tvar x Inst = AddInst(new(Start)) // ERROR \"pointer to interface\"\n \tprint(\"return from  addinst\\n\")\n+\tvar y *Inst = new(Start)  // ERROR \"pointer to interface|incompatible type\"\n }"}, {"sha": "37890c923a51ef0a26c1ffa023d6c35f1c8bcbd8", "filename": "gcc/testsuite/go.test/test/interface/private.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,32 @@\n+// $G $D/${F}1.go && errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./private1\"\n+\n+type Exported interface {\n+\tprivate()\n+}\n+\n+type Implementation struct{}\n+\n+func (p *Implementation) private() {}\n+\n+func main() {\n+\tvar x Exported\n+\tx = new(Implementation)\n+\tx.private()\n+\n+\tvar px p.Exported\n+\tpx = p.X\n+\n+\tpx.private()\t\t\t// ERROR \"private\"\n+\n+\tpx = new(Implementation)\t// ERROR \"private\"\n+\n+\tx = px\t\t\t\t// ERROR \"private\"\n+}"}, {"sha": "3173fbef41ff75eda87aec56983ff329eedd5914", "filename": "gcc/testsuite/go.test/test/interface/private1.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,18 @@\n+// true  # used by private.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type Exported interface {\n+\tprivate()\n+}\n+\n+type Implementation struct{}\n+\n+func (p *Implementation) private() {}\n+\n+var X = new(Implementation)\n+"}, {"sha": "61f1797c75d43338c60ade64229959ec41099ce0", "filename": "gcc/testsuite/go.test/test/malloc1.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmalloc1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmalloc1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmalloc1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -18,6 +18,7 @@ var chatty = flag.Bool(\"v\", false, \"chatty\")\n \n func main() {\n \truntime.Free(runtime.Alloc(1))\n+\truntime.UpdateMemStats()\n \tif *chatty {\n \t\tfmt.Printf(\"%+v %v\\n\", runtime.MemStats, uint64(0))\n \t}"}, {"sha": "f014b441b2b66c85ada5b756c62069e0eb435350", "filename": "gcc/testsuite/go.test/test/mallocrand.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -21,6 +21,7 @@ var footprint uint64\n var allocated uint64\n \n func bigger() {\n+\truntime.UpdateMemStats()\n \tif f := runtime.MemStats.Sys; footprint < f {\n \t\tfootprint = f\n \t\tif *chatty {"}, {"sha": "039779efbe18cf015c39a9336ddac4ffbb53819d", "filename": "gcc/testsuite/go.test/test/method2.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -12,8 +12,14 @@ type T struct {\n type P *T\n type P1 *T\n \n-func (p P) val() int   { return 1 } // ERROR \"receiver\"\n-func (p *P1) val() int { return 1 } // ERROR \"receiver\"\n+func (p P) val() int   { return 1 } // ERROR \"receiver.* pointer|invalid pointer or interface receiver\"\n+func (p *P1) val() int { return 1 } // ERROR \"receiver.* pointer|invalid pointer or interface receiver\"\n+\n+type I interface{}\n+type I1 interface{}\n+\n+func (p I) val() int { return 1 } // ERROR \"receiver.*interface|invalid pointer or interface receiver\"\n+func (p *I1) val() int { return 1 } // ERROR \"receiver.*interface|invalid pointer or interface receiver\"\n \n type Val interface {\n \tval() int"}, {"sha": "30cc2705b03b11a34eeb349c5586ee35fa67d209", "filename": "gcc/testsuite/go.test/test/nil.go", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -6,6 +6,11 @@\n \n package main\n \n+import (\n+\t\"fmt\"\n+\t\"time\"\n+)\n+\n type T struct {\n \ti int\n }\n@@ -33,4 +38,141 @@ func main() {\n \tta[0] = nil\n \n \t_, _, _, _, _, _, _, _ = i, f, s, m, c, t, in, ta\n+\n+\tarraytest()\n+\tchantest()\n+\tmaptest()\n+\tslicetest()\n+}\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"not panicking\")\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n+func shouldBlock(f func()) {\n+\tgo func() {\n+\t\tf()\n+\t\tpanic(\"did not block\")\n+\t}()\n+\ttime.Sleep(1e7)\n+}\n+\n+// nil array pointer\n+\n+func arraytest() {\n+\tvar p *[10]int\n+\n+\t// Looping over indices is fine.\n+\ts := 0\n+\tfor i := range p {\n+\t\ts += i\n+\t}\n+\tif s != 45 {\n+\t\tpanic(s)\n+\t}\n+\n+\ts = 0\n+\tfor i := 0; i < len(p); i++ {\n+\t\ts += i\n+\t}\n+\tif s != 45 {\n+\t\tpanic(s)\n+\t}\n+\n+\t// Looping over values is not.\n+\tshouldPanic(func() {\n+\t\tfor i, v := range p {\n+\t\t\ts += i + v\n+\t\t}\n+\t})\n+\n+\tshouldPanic(func() {\n+\t\tfor i := 0; i < len(p); i++ {\n+\t\t\ts += p[i]\n+\t\t}\n+\t})\n+}\n+\n+// nil channel\n+// select tests already handle select on nil channel\n+\n+func chantest() {\n+\tvar ch chan int\n+\n+\t// nil channel is never ready\n+\tshouldBlock(func() {\n+\t\tch <- 1\n+\t})\n+\tshouldBlock(func() {\n+\t\t<-ch\n+\t})\n+\tshouldBlock(func() {\n+\t\tx, ok := <-ch\n+\t\tprintln(x, ok)\n+\t})\n+\n+\tif len(ch) != 0 {\n+\t\tpanic(len(ch))\n+\t}\n+\tif cap(ch) != 0 {\n+\t\tpanic(cap(ch))\n+\t}\n+}\n+\n+// nil map\n+\n+func maptest() {\n+\tvar m map[int]int\n+\n+\t// nil map appears empty\n+\tif len(m) != 0 {\n+\t\tpanic(len(m))\n+\t}\n+\tif m[1] != 0 {\n+\t\tpanic(m[1])\n+\t}\n+\tif x, ok := m[1]; x != 0 || ok {\n+\t\tpanic(fmt.Sprint(x, ok))\n+\t}\n+\n+\tfor k, v := range m {\n+\t\tpanic(k)\n+\t\tpanic(v)\n+\t}\n+\n+\t// but cannot be written to\n+\tshouldPanic(func() {\n+\t\tm[2] = 3\n+\t})\n+\tshouldPanic(func() {\n+\t\tm[2] = 0, false\n+\t})\n+}\n+\n+// nil slice\n+\n+func slicetest() {\n+\tvar x []int\n+\n+\t// nil slice is just a 0-element slice.\n+\tif len(x) != 0 {\n+\t\tpanic(len(x))\n+\t}\n+\tif cap(x) != 0 {\n+\t\tpanic(cap(x))\n+\t}\n+\n+\t// no 0-element slices can be read from or written to\n+\tvar s int\n+\tshouldPanic(func() {\n+\t\ts += x[1]\n+\t})\n+\tshouldPanic(func() {\n+\t\tx[2] = s\n+\t})\n }"}, {"sha": "142d4deb1f4d3e9bcc8bbf7000fb37689a60f9f3", "filename": "gcc/testsuite/go.test/test/nul1.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -39,7 +39,7 @@ var y = ` + \"`in raw string \\x00 foo`\" + `  // ERROR \"NUL\"\n \n /* in other comment ` + \"\\x00\" + ` */ // ERROR \"NUL\"\n \n-/* in source code */ ` + \"\\x00\" + `// ERROR \"NUL\"\n+/* in source code */ ` + \"\\x00\" + `// ERROR \"NUL\" \"illegal character\"\n \n var xx = \"in string ` + \"\\xc2\\xff\" + `\" // ERROR \"UTF-8\"\n \n@@ -50,9 +50,9 @@ var yy = ` + \"`in raw string \\xff foo`\" + `  // ERROR \"UTF-8\"\n /* in other comment ` + \"\\xe0\\x00\\x00\" + ` */ // ERROR \"UTF-8|NUL\"\n \n /* in variable name */\n-var z` + \"\\xc1\\x81\" + ` int // ERROR \"UTF-8\"\n+var z` + \"\\xc1\\x81\" + ` int // ERROR \"UTF-8\" \"invalid identifier character\"\n \n-/* in source code */ ` + \"\\xc2A\" + `// ERROR \"UTF-8\"\n+/* in source code */ ` + \"var \\xc2A int\" + `// ERROR \"UTF-8\" \"invalid identifier character\"\n \n `)\n }"}, {"sha": "3e78bfca0bc505bd70acf826295292c4a2ab41bc", "filename": "gcc/testsuite/go.test/test/rename1.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -10,7 +10,7 @@ func main() {\n \tvar n byte       // ERROR \"not a type|expected type\"\n \tvar y = float(0) // ERROR \"cannot call|expected function\"\n \tconst (\n-\t\ta = 1 + iota // ERROR \"string|incompatible types\"\n+\t\ta = 1 + iota // ERROR \"string|incompatible types\" \"convert iota\"\n \t)\n \n }"}, {"sha": "bc31d2f714099d41df4635e8948d81afd8669a14", "filename": "gcc/testsuite/go.test/test/run", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -5,6 +5,8 @@\n \n eval $(gomake --no-print-directory -f ../src/Make.inc go-env)\n \n+export E=\n+\n case X\"$GOARCH\" in\n Xamd64)\n \texport A=6\n@@ -21,11 +23,6 @@ Xarm)\n \texit 1\n esac\n \n-case X\"$GOOS\" in\n-Xnacl)\n-\texport E=${GORUN:-$GOROOT/misc/nacl/naclrun}\n-esac\n-\n export G=${A}g\n export L=${A}l\n export GOTRACEBACK=0\n@@ -36,9 +33,9 @@ failed=0\n \n PATH=/bin:/usr/bin:/usr/local/bin:${GOBIN:-$GOROOT/bin}:`pwd`\n \n-RUNFILE=/tmp/gorun-$$-$USER\n-TMP1FILE=/tmp/gotest1-$$-$USER\n-TMP2FILE=/tmp/gotest2-$$-$USER\n+RUNFILE=\"/tmp/gorun-$$-$USER\"\n+TMP1FILE=\"/tmp/gotest1-$$-$USER\"\n+TMP2FILE=\"/tmp/gotest2-$$-$USER\"\n \n # don't run the machine out of memory: limit individual processes to 4GB.\n # on thresher, 3GB suffices to run the tests; with 2GB, peano fails.\n@@ -67,20 +64,20 @@ do\n \t\tfi\n \t\texport F=$(basename $i .go)\n \t\texport D=$dir\n-\t\tsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g' >$RUNFILE\n-\t\tif ! { time -p bash -c \"bash $RUNFILE >$TMP1FILE 2>&1\" ; } 2>$TMP2FILE\n+\t\tsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g' >\"$RUNFILE\"\n+\t\tif ! { time -p bash -c \"bash '$RUNFILE' >'$TMP1FILE' 2>&1\" ; } 2>\"$TMP2FILE\"\n \t\tthen\n \t\t\techo\n \t\t\techo \"===========\" $i\n-\t\t\tcat $TMP1FILE\n+\t\t\tcat \"$TMP1FILE\"\n \t\t\techo >&2 fail: $i\n \t\t\techo \"# $i\t# fail\" >>pass.out\n-\t\telif test -s $TMP1FILE\n+\t\telif test -s \"$TMP1FILE\"\n \t\tthen\n \t\t\techo\n \t\t\techo \"===========\" $i\n-\t\t\tcat $TMP1FILE\n-\t\t\tif grep -q '^BUG' $TMP1FILE\n+\t\t\tcat \"$TMP1FILE\"\n+\t\t\tif grep -q '^BUG' \"$TMP1FILE\"\n \t\t\tthen\n \t\t\t\tif [ $dir != bugs ]\n \t\t\t\tthen\n@@ -96,24 +93,24 @@ do\n \t\telse\n \t\t\techo $i >>pass.out\n \t\tfi\n-\t\techo $(awk 'NR==1{print $2}' $TMP2FILE) $D/$F >>times.out\n+\t\techo $(awk 'NR==1{print $2}' \"$TMP2FILE\") $D/$F >>times.out\n+\t\trm -f $F.$A $A.out\n \t) done\n done | # clean up some stack noise\n \tegrep -v '^(r[0-9a-z]+|[cfg]s)  +0x'  |\n \tsed '/tmp.*Bus error/s/.*Bus/Bus/; /tmp.*Trace.BPT/s/.*Trace/Trace/\n-\t\ts!'$RUNFILE'!$RUNFILE!g\n+\t\ts!'\"$RUNFILE\"'!$RUNFILE!g\n \t\ts/^PC=0x[0-9a-f]*/pc: xxx/\n \t\ts/^pc: 0x[0-9a-f]*/pc: xxx/\n \t\ts/PC=0x[0-9a-f]*/PC=xxx/\n \t\t/^Trace\\/breakpoint trap/d\n \t\t/^Trace\\/BPT trap/d\n \t\t/RUNFILE/ s/line 1: *[0-9]*/line 1: PID/\n \t\t/^\\$RUNFILE: line 1: PID Trace\\/breakpoint trap/d\n-\t\t/Fault in NaCl untrusted code/d\n \t\t/Segmentation fault/d\n \t\t/^qemu: uncaught target signal 11 (Segmentation fault) - exiting/d' > run.out\n \n-rm -f $RUNFILE $TMP1FILE $TMP2FILE *.$A *.a $A.out\n+rm -f \"$RUNFILE\" \"$TMP1FILE\" \"$TMP2FILE\" *.$A *.a $A.out\n diffmsg=\"\"\n if ! diff $golden run.out\n then"}, {"sha": "c197eef66e58a8942b141289f9e29ed3629c00e5", "filename": "gcc/testsuite/go.test/test/shift1.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,36 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1708, illegal cases.\n+\n+package p\n+\n+func f(x int) int         { return 0 }\n+func g(x interface{}) int { return 0 }\n+func h(x float64) int     { return 0 }\n+\n+// from the spec\n+var (\n+\ts uint    = 33\n+\tu         = 1.0 << s // ERROR \"invalid operation|shift of non-integer operand\"\n+\tv float32 = 1 << s   // ERROR \"invalid\" \"as type float32\"\n+)\n+\n+// non-constant shift expressions\n+var (\n+\te1       = g(2.0 << s) // ERROR \"invalid\" \"as type interface\"\n+\tf1       = h(2 << s)   // ERROR \"invalid\" \"as type float64\"\n+\tg1 int64 = 1.1 << s    // ERROR \"truncated\"\n+)\n+\n+// constant shift expressions\n+const c uint = 65\n+\n+var (\n+\ta2 int = 1.0 << c    // ERROR \"overflow\"\n+\tb2     = 1.0 << c    // ERROR \"overflow\"\n+\td2     = f(1.0 << c) // ERROR \"overflow\"\n+)"}, {"sha": "ec4c7addc2d733764deebcac5f69d13045cb1b74", "filename": "gcc/testsuite/go.test/test/shift2.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift2.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,42 @@\n+// $G $D/$F.go || echo BUG: shift2\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1708, legal cases.\n+\n+package p\n+\n+func f(x int) int         { return 0 }\n+func g(x interface{}) int { return 0 }\n+func h(x float64) int     { return 0 }\n+\n+// from the spec\n+var (\n+\ts uint  = 33\n+\ti       = 1 << s         // 1 has type int\n+\tj int32 = 1 << s         // 1 has type int32; j == 0\n+\tk       = uint64(1 << s) // 1 has type uint64; k == 1<<33\n+\tm int   = 1.0 << s       // legal: 1.0 has type int\n+\tw int64 = 1.0 << 33      // legal: 1.0<<33 is a constant shift expression\n+)\n+\n+// non-constant shift expressions\n+var (\n+\ta1 int = 2.0 << s    // typeof(2.0) is int in this context => legal shift\n+\td1     = f(2.0 << s) // typeof(2.0) is int in this context => legal shift\n+)\n+\n+// constant shift expressions\n+const c uint = 5\n+\n+var (\n+\ta2 int     = 2.0 << c    // a2 == 64 (type int)\n+\tb2         = 2.0 << c    // b2 == 64 (untyped integer)\n+\t_          = f(b2)       // verify b2 has type int\n+\tc2 float64 = 2 << c      // c2 == 64.0 (type float64)\n+\td2         = f(2.0 << c) // == f(64)\n+\te2         = g(2.0 << c) // == g(int(64))\n+\tf2         = h(2 << c)   // == h(float64(64.0))\n+)"}, {"sha": "544e4c52c1bb87f63ade61569a8f7928e55b7370", "filename": "gcc/testsuite/go.test/test/sizeof.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsizeof.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fcc7074890e0be0a9ec7b2d17972ceea5aead4/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsizeof.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsizeof.go?ref=e9fcc7074890e0be0a9ec7b2d17972ceea5aead4", "patch": "@@ -0,0 +1,23 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+type T struct {\n+\tX int\n+}\n+\n+var t T\n+\n+func isUintptr(uintptr) {}\n+\n+func main() {\n+\tisUintptr(unsafe.Sizeof(t))\n+\tisUintptr(unsafe.Alignof(t))\n+\tisUintptr(unsafe.Offsetof(t.X))\n+}"}]}