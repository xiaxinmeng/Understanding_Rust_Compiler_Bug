{"sha": "ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3NTQxNGZmNzRlN2FmOGM5NWEzNDkwZmNjMDViNjVlM2JkZjRhNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-11-14T18:37:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-11-14T18:37:39Z"}, "message": "re PR c++/12762 (Much worse error message when using a typedef with a template arg)\n\n\tPR c++/12762\n\t* parser.c (cp_parser_enclosed_template_argument_list): New\n\tfunction.\n\t(cp_parser_template_id): Use it.\n\t(cp_parser_simple_type_specifier): Recognize invalid template\n\tsyntax.\n\n\tPR c++/12762\n\t* g++.dg/template/error3.C: New test.\n\nFrom-SVN: r73610", "tree": {"sha": "36e7ba862f69f85d49a24e25730b1af46c381145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e7ba862f69f85d49a24e25730b1af46c381145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/comments", "author": null, "committer": null, "parents": [{"sha": "f285d67bfe945cb4a02e3da0139aa4a171ba106a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f285d67bfe945cb4a02e3da0139aa4a171ba106a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f285d67bfe945cb4a02e3da0139aa4a171ba106a"}], "stats": {"total": 114, "additions": 83, "deletions": 31}, "files": [{"sha": "6540d4d28f31a21801b8f9a8a76e559c949dfa9e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "patch": "@@ -1,3 +1,12 @@\n+2003-11-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12762\n+\t* parser.c (cp_parser_enclosed_template_argument_list): New\n+\tfunction.\n+\t(cp_parser_template_id): Use it.\n+\t(cp_parser_simple_type_specifier): Recognize invalid template\n+\tsyntax.\n+\n 2003-11-14  Giovanni Bajo  <giovannibajo@libero.it>\n \n         PR c++/2094"}, {"sha": "dafb7d42160ab29d94517be566d608b7f4edc506", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 64, "deletions": 31, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "patch": "@@ -1631,6 +1631,8 @@ static tree cp_parser_single_declaration\n   (cp_parser *, bool, bool *);\n static tree cp_parser_functional_cast\n   (cp_parser *, tree);\n+static tree cp_parser_enclosed_template_argument_list\n+  (cp_parser *);\n static void cp_parser_save_default_args\n   (cp_parser *, tree);\n static void cp_parser_late_parsing_for_member\n@@ -7509,11 +7511,7 @@ cp_parser_template_id (cp_parser *parser,\n {\n   tree template;\n   tree arguments;\n-  tree saved_scope;\n-  tree saved_qualifying_scope;\n-  tree saved_object_scope;\n   tree template_id;\n-  bool saved_greater_than_is_operator_p;\n   ptrdiff_t start_of_id;\n   tree access_check = NULL_TREE;\n   cp_token *next_token;\n@@ -7576,33 +7574,8 @@ cp_parser_template_id (cp_parser *parser,\n       return error_mark_node;\n     }\n \n-  /* [temp.names]\n-\n-     When parsing a template-id, the first non-nested `>' is taken as\n-     the end of the template-argument-list rather than a greater-than\n-     operator.  */\n-  saved_greater_than_is_operator_p \n-    = parser->greater_than_is_operator_p;\n-  parser->greater_than_is_operator_p = false;\n-  /* Parsing the argument list may modify SCOPE, so we save it\n-     here.  */\n-  saved_scope = parser->scope;\n-  saved_qualifying_scope = parser->qualifying_scope;\n-  saved_object_scope = parser->object_scope;\n-  /* Parse the template-argument-list itself.  */\n-  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER))\n-    arguments = NULL_TREE;\n-  else\n-    arguments = cp_parser_template_argument_list (parser);\n-  /* Look for the `>' that ends the template-argument-list.  */\n-  cp_parser_require (parser, CPP_GREATER, \"`>'\");\n-  /* The `>' token might be a greater-than operator again now.  */\n-  parser->greater_than_is_operator_p \n-    = saved_greater_than_is_operator_p;\n-  /* Restore the SAVED_SCOPE.  */\n-  parser->scope = saved_scope;\n-  parser->qualifying_scope = saved_qualifying_scope;\n-  parser->object_scope = saved_object_scope;\n+  /* Parse the arguments.  */\n+  arguments = cp_parser_enclosed_template_argument_list (parser);\n \n   /* Build a representation of the specialization.  */\n   if (TREE_CODE (template) == IDENTIFIER_NODE)\n@@ -8430,6 +8403,21 @@ cp_parser_simple_type_specifier (cp_parser* parser, cp_parser_flags flags,\n       return error_mark_node;\n     }\n \n+  /* There is no valid C++ program where a non-template type can never\n+     be followed by a \"<\".  That usually indicates that the user\n+     thought that the type was a template.  */\n+  if (type && cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+    {\n+      error (\"`%T' is not a template\", TREE_TYPE (type));\n+      /* Consume the \"<\".  */\n+      cp_lexer_consume_token (parser->lexer);\n+      /* Parse the template arguments.  */\n+      cp_parser_enclosed_template_argument_list (parser);\n+      /* Attempt to recover by using the basic type, ignoring the\n+\t template arguments.  */\n+      return type;\n+    }\n+\n   return type;\n }\n \n@@ -13857,6 +13845,51 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n   return build_functional_cast (type, expression_list);\n }\n \n+/* Parse a template-argument-list, as well as the trailing \">\" (but\n+   not the opening \">\").  See cp_parser_template_argument_list for the\n+   return value.  */\n+\n+static tree\n+cp_parser_enclosed_template_argument_list (cp_parser* parser)\n+{\n+  tree arguments;\n+  tree saved_scope;\n+  tree saved_qualifying_scope;\n+  tree saved_object_scope;\n+  bool saved_greater_than_is_operator_p;\n+\n+  /* [temp.names]\n+\n+     When parsing a template-id, the first non-nested `>' is taken as\n+     the end of the template-argument-list rather than a greater-than\n+     operator.  */\n+  saved_greater_than_is_operator_p \n+    = parser->greater_than_is_operator_p;\n+  parser->greater_than_is_operator_p = false;\n+  /* Parsing the argument list may modify SCOPE, so we save it\n+     here.  */\n+  saved_scope = parser->scope;\n+  saved_qualifying_scope = parser->qualifying_scope;\n+  saved_object_scope = parser->object_scope;\n+  /* Parse the template-argument-list itself.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER))\n+    arguments = NULL_TREE;\n+  else\n+    arguments = cp_parser_template_argument_list (parser);\n+  /* Look for the `>' that ends the template-argument-list.  */\n+  cp_parser_require (parser, CPP_GREATER, \"`>'\");\n+  /* The `>' token might be a greater-than operator again now.  */\n+  parser->greater_than_is_operator_p \n+    = saved_greater_than_is_operator_p;\n+  /* Restore the SAVED_SCOPE.  */\n+  parser->scope = saved_scope;\n+  parser->qualifying_scope = saved_qualifying_scope;\n+  parser->object_scope = saved_object_scope;\n+\n+  return arguments;\n+}\n+\n+\n /* MEMBER_FUNCTION is a member function, or a friend.  If default\n    arguments, or the body of the function have not yet been parsed,\n    parse them now.  */"}, {"sha": "3e9f9fad01fde0eb4d0c66b43f0cecee076bf98f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "patch": "@@ -1,3 +1,8 @@\n+2003-11-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12762\n+\t* g++.dg/template/error3.C: New test.\n+\n 2003-11-14  Arnaud Charlet  <charlet@act-europe.fr>\n \n \tPR ada/13035"}, {"sha": "d3ee5990850756d4d2c74a1d8d6de819c232a7d5", "filename": "gcc/testsuite/g++.dg/template/error3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror3.C?ref=ec75414ff74e7af8c95a3490fcc05b65e3bdf4a6", "patch": "@@ -0,0 +1,5 @@\n+// PR 12762\n+\n+template <typename> struct A { A() {}};\n+typedef A<int> Ac;\n+Ac<double> a; // { dg-error \"template\" }"}]}