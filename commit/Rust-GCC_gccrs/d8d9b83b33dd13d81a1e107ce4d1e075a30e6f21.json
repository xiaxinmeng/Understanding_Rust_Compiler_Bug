{"sha": "d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkOWI4M2IzM2RkMTNkODFhMWUxMDdjZTRkMWUwNzVhMzBlNmYyMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-05T15:56:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-05T15:56:06Z"}, "message": "PR libstdc++/58265 implement LWG 2063 for COW strings\n\nFor COW strings the default constructor does not allocate when\n_GLIBCXX_FULLY_DYNAMIC_STRING == 0, so can be noexcept. The move\nconstructor and swap do not allocate when the allocators are equal, so\nadd conditional noexcept using allocator_traits::is_always_equal.\n\n\tPR libstdc++/58265\n\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n\t[_GLIBCXX_FULLY_DYNAMIC_STRING==0] (basic_string::basic_string()):\n\tAdd GLIBCXX_NOEXCEPT.\n\t(basic_string::operator=(basic_string&&)): Add _GLIBCXX_NOEXCEPT_IF\n\tto depend on the allocator's is_always_equal property (LWG 2063).\n\t(basic_string::swap(basic_string&)): Likewise.\n\t* include/bits/basic_string.tcc [!_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::swap(basic_string&)): Likewise.\n\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n\tCheck is_nothrow_move_assignable.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n\tCheck is_nothrow_move_assignable.\n\t* testsuite/21_strings/basic_string/cons/char/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/\n\tnoexcept_move_construct.cc: Likewise.\n\nFrom-SVN: r262443", "tree": {"sha": "0a88c59686cedaf90660aa6b1ff706abecd71692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a88c59686cedaf90660aa6b1ff706abecd71692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245471c67f3ad27a85dce999933cec1ff298be02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245471c67f3ad27a85dce999933cec1ff298be02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245471c67f3ad27a85dce999933cec1ff298be02"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "39b94917a2e722a9b40ba2f76f123e1cd0939289", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -1,3 +1,23 @@\n+2018-07-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/58265\n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n+\t[_GLIBCXX_FULLY_DYNAMIC_STRING==0] (basic_string::basic_string()):\n+\tAdd GLIBCXX_NOEXCEPT.\n+\t(basic_string::operator=(basic_string&&)): Add _GLIBCXX_NOEXCEPT_IF\n+\tto depend on the allocator's is_always_equal property (LWG 2063).\n+\t(basic_string::swap(basic_string&)): Likewise.\n+\t* include/bits/basic_string.tcc [!_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::swap(basic_string&)): Likewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n+\tCheck is_nothrow_move_assignable.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n+\tCheck is_nothrow_move_assignable.\n+\t* testsuite/21_strings/basic_string/cons/char/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/\n+\tnoexcept_move_construct.cc: Likewise.\n+\n 2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \tP0646R1 Improving the Return Value of Erase-Like Algorithms I"}, {"sha": "baad58682b6df9f0270eae7b2a793f79e44bf649", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -3486,6 +3486,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        */\n       basic_string()\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n+      _GLIBCXX_NOEXCEPT\n       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n #else\n       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }\n@@ -3642,7 +3643,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @param  __str  Source string.\n        */\n       basic_string&\n-      operator=(const basic_string& __str) \n+      operator=(const basic_string& __str)\n       { return this->assign(__str); }\n \n       /**\n@@ -3675,9 +3676,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  The contents of @a str are moved into this string (without copying).\n        *  @a str is a valid, but unspecified string.\n        **/\n-      // PR 58265, this should be noexcept.\n       basic_string&\n       operator=(basic_string&& __str)\n+      _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)\n       {\n \t// NB: DR 1204.\n \tthis->swap(__str);\n@@ -5111,9 +5112,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  Exchanges the contents of this string with that of @a __s in constant\n        *  time.\n       */\n-      // PR 58265, this should be noexcept.\n       void\n-      swap(basic_string& __s);\n+      swap(basic_string& __s)\n+      _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value);\n \n       // String operations:\n       /**"}, {"sha": "51bbb7bd6a0603d6ce529960674282648e0772d2", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -967,6 +967,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     swap(basic_string& __s)\n+    _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)\n     {\n       if (_M_rep()->_M_is_leaked())\n \t_M_rep()->_M_set_sharable();"}, {"sha": "b07078029717be498f4fe6807f65eb17ef16521c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/move_assign.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -34,6 +34,9 @@ void test01()\n   typedef propagating_allocator<C, false> alloc_type;\n   typedef std::basic_string<C, traits, alloc_type> test_type;\n \n+  static_assert(std::is_move_assignable<test_type>::value, \"\");\n+  static_assert(!std::is_nothrow_move_assignable<test_type>::value, \"\");\n+\n   test_type v1(alloc_type(1));\n   v1.assign(1, c);\n   test_type v2(alloc_type(2));"}, {"sha": "df9be1925ba7bfb9b39bc80ba284426ca10233d8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -34,6 +34,9 @@ void test01()\n   typedef propagating_allocator<C, false> alloc_type;\n   typedef std::basic_string<C, traits, alloc_type> test_type;\n \n+  static_assert(std::is_move_assignable<test_type>::value, \"\");\n+  static_assert(!std::is_nothrow_move_assignable<test_type>::value, \"\");\n+\n   test_type v1(alloc_type(1));\n   v1.assign(1, c);\n   test_type v2(alloc_type(2));"}, {"sha": "a068d5afe623583d8be9db157c328f3ac73ed9bf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/noexcept_move_construct.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -23,4 +23,8 @@\n \n typedef std::string stype;\n \n+// True except for COW strings with _GLIBCXX_FULLY_DYNAMIC_STRING:\n static_assert(std::is_nothrow_move_constructible<stype>::value, \"Error\");\n+\n+// True for std::allocator because is_always_equal, but not true in general:\n+static_assert(std::is_nothrow_move_assignable<stype>::value, \"lwg 2063\");"}, {"sha": "660ff7df57965cab10cfcdb26e62abaa2e3beabf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/noexcept_move_construct.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc?ref=d8d9b83b33dd13d81a1e107ce4d1e075a30e6f21", "patch": "@@ -23,4 +23,8 @@\n \n typedef std::wstring wstype;\n \n+// True except for COW strings with _GLIBCXX_FULLY_DYNAMIC_STRING:\n static_assert(std::is_nothrow_move_constructible<wstype>::value, \"Error\");\n+\n+// True for std::allocator because is_always_equal, but not true in general:\n+static_assert(std::is_nothrow_move_assignable<wstype>::value, \"lwg 2063\");"}]}