{"sha": "5e88a8f4fb8655049c84d0ba133511cd568e93d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4OGE4ZjRmYjg2NTUwNDljODRkMGJhMTMzNTExY2Q1NjhlOTNkMg==", "commit": {"author": {"name": "Igor Zamyatin", "email": "igor.zamyatin@intel.com", "date": "2014-06-30T08:14:39Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-06-30T08:14:39Z"}, "message": "re PR middle-end/57541 ([Cilkplus]: internal compiler error: in gimplify_expr, at gimplify.c:7809)\n\nPR middle-end/57541\ngcc/c/\n\t* c-array-notation.c (fix_builtin_array_notation_fn):\n\tCheck for 0 arguments in builtin call. Check that bultin argument is\n\tcorrect.\n\t* c-parser.c (c_parser_array_notation): Check for incorrect initial\n\tindex.\n\ngcc/cpp/\n\t* cp-array-notation.c (expand_sec_reduce_builtin):\n\tCheck that bultin argument is correct.\n\t* call.c (build_cxx_call): Check for 0 arguments in builtin call.\n\ngcc/testsuite/\n\t* c-c++-common/cilk-plus/AN/pr57541.c: New case added.\n\t* c-c++-common/cilk-plus/AN/pr57541-2.c: New test.\n\nFrom-SVN: r212138", "tree": {"sha": "2e4504fc8ce8686b549beea65a739e937e8ec9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4504fc8ce8686b549beea65a739e937e8ec9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e88a8f4fb8655049c84d0ba133511cd568e93d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e88a8f4fb8655049c84d0ba133511cd568e93d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e88a8f4fb8655049c84d0ba133511cd568e93d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e88a8f4fb8655049c84d0ba133511cd568e93d2/comments", "author": {"login": "Garra1980", "id": 25365940, "node_id": "MDQ6VXNlcjI1MzY1OTQw", "avatar_url": "https://avatars.githubusercontent.com/u/25365940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garra1980", "html_url": "https://github.com/Garra1980", "followers_url": "https://api.github.com/users/Garra1980/followers", "following_url": "https://api.github.com/users/Garra1980/following{/other_user}", "gists_url": "https://api.github.com/users/Garra1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garra1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garra1980/subscriptions", "organizations_url": "https://api.github.com/users/Garra1980/orgs", "repos_url": "https://api.github.com/users/Garra1980/repos", "events_url": "https://api.github.com/users/Garra1980/events{/privacy}", "received_events_url": "https://api.github.com/users/Garra1980/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21a7b5e1dbb59c6ff055aa3240e52916790ec305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a7b5e1dbb59c6ff055aa3240e52916790ec305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a7b5e1dbb59c6ff055aa3240e52916790ec305"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "02a0f2f676ac6828fc815619c5de2ff996a6c9b3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -1,3 +1,12 @@\n+2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR middle-end/57541\n+\t* c-array-notation.c (fix_builtin_array_notation_fn):\n+\tCheck for 0 arguments in builtin call. Check that bultin argument is\n+\tcorrect.\n+\t* c-parser.c (c_parser_array_notation): Check for incorrect initial\n+\tindex.\n+\n 2014-06-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* c-parser.c (c_parser_declaration_or_fndef): Discard all type"}, {"sha": "67a89315e9cf592ee4ff6975c24123646d7aa906", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -214,6 +214,13 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n   if (an_type == BUILT_IN_NONE)\n     return NULL_TREE;\n \n+  /* Builtin call should contain at least one argument.  */\n+  if (call_expr_nargs (an_builtin_fn) == 0)\n+    {\n+      error_at (EXPR_LOCATION (an_builtin_fn), \"Invalid builtin arguments\");\n+      return error_mark_node;\n+    }\n+\n   if (an_type == BUILT_IN_CILKPLUS_SEC_REDUCE\n       || an_type == BUILT_IN_CILKPLUS_SEC_REDUCE_MUTATING)\n     {\n@@ -238,7 +245,10 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n     return error_mark_node;\n  \n   if (rank == 0)\n-    return an_builtin_fn;\n+    {\n+      error_at (location, \"Invalid builtin arguments\");\n+      return error_mark_node;\n+    }\n   else if (rank > 1 \n \t   && (an_type == BUILT_IN_CILKPLUS_SEC_REDUCE_MAX_IND\n \t       || an_type == BUILT_IN_CILKPLUS_SEC_REDUCE_MIN_IND))"}, {"sha": "99e7fc8694c2afedc82e7e46c20e65c1125604c7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -14098,7 +14098,7 @@ c_parser_array_notation (location_t loc, c_parser *parser, tree initial_index,\n   tree value_tree = NULL_TREE, type = NULL_TREE, array_type = NULL_TREE;\n   tree array_type_domain = NULL_TREE; \n \n-  if (array_value == error_mark_node)\n+  if (array_value == error_mark_node || initial_index == error_mark_node)\n     {\n       /* No need to continue.  If either of these 2 were true, then an error\n \t must be emitted already.  Thus, no need to emit them twice.  */"}, {"sha": "edf79e7d526dddaf8a0e5b36796baa63fca8dffe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -1,3 +1,10 @@\n+2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR middle-end/57541\n+\t* cp-array-notation.c (expand_sec_reduce_builtin):\n+\tCheck that bultin argument is correct.\n+\t* call.c (build_cxx_call): Check for 0 arguments in builtin call.\n+\n 2014-06-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tDR 1579"}, {"sha": "e002d0180df91598e184bc0636f38bbbfd9b7958", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -7414,6 +7414,11 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n \t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE\n \t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE_MUTATING)\n \t{ \n+\t  if (call_expr_nargs (fn) == 0)\n+\t    {\n+\t      error_at (EXPR_LOCATION (fn), \"Invalid builtin arguments\");\n+\t      return error_mark_node;\n+\t    }\n \t  /* for bif == BUILT_IN_CILKPLUS_SEC_REDUCE_ALL_ZERO or\n \t     BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_ZERO or\n \t     BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_NONZERO or "}, {"sha": "b45449bc44df5998bd729d9844bb9d32157f2c8d", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -250,7 +250,10 @@ expand_sec_reduce_builtin (tree an_builtin_fn, tree *new_var)\n   if (!find_rank (location, an_builtin_fn, an_builtin_fn, true, &rank))\n       return error_mark_node;\n   if (rank == 0)\n-    return an_builtin_fn;\n+    {\n+      error_at (location, \"Invalid builtin arguments\");\n+      return error_mark_node;\n+    }\n   else if (rank > 1 \n \t   && (an_type == BUILT_IN_CILKPLUS_SEC_REDUCE_MAX_IND\n \t       || an_type == BUILT_IN_CILKPLUS_SEC_REDUCE_MIN_IND))"}, {"sha": "c2ed2736f152f603e9c1c761480ff02a846fe218", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -1,3 +1,9 @@\n+2014-06-30  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR middle-end/57541\n+\t* c-c++-common/cilk-plus/AN/pr57541.c: New case added.\n+\t* c-c++-common/cilk-plus/AN/pr57541-2.c: New test.\n+\n 2014-06-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* ira-loop-pressure.c: New test."}, {"sha": "83325a77501d9bed2a5e4c98c8931deb12c5315c", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57541-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541-2.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/57541 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+int foo1 ()\n+{\n+  int a;\n+  a = __sec_reduce_add (1); /* { dg-error \"Invalid builtin arguments\" } */\n+}\n+\n+int foo2 ()\n+{\n+  int a;\n+  a = __sec_reduce_add (); /* { dg-error \"Invalid builtin arguments\" } */\n+}"}, {"sha": "f379e461c5a8251f2f4db9e6903ee191722fa47c", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57541.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88a8f4fb8655049c84d0ba133511cd568e93d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c?ref=5e88a8f4fb8655049c84d0ba133511cd568e93d2", "patch": "@@ -1,9 +1,10 @@\n+/* PR middle-end/57541 */\n /* { dg-do compile } */\n /* { dg-options \"-fcilkplus\" } */\n \n int A[10];\n \n-int main () {\n+int foo () {\n \n   /* C compiler uses the term \"undeclared\" whereas C++ compiler uses\n     \"not declared\".  Thus, grepping for declared seem to be the easiest.  */\n@@ -13,5 +14,13 @@ int main () {\n   A[l:s:c];\n }\n \n-/* { dg-message \"note: each\" \"defined\" { target c }  10 } */\n+int foo1 (int N) {\n+\n+  char c = (char)N;\n+  short s = (short)N;\n+  A[l:s:c]; /* { dg-error \"declared\" } */\n+}\n+\n+\n+/* { dg-message \"note: each\" \"defined\" { target c }  11 } */\n "}]}