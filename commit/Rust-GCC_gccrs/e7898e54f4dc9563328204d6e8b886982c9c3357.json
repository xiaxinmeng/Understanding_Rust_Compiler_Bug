{"sha": "e7898e54f4dc9563328204d6e8b886982c9c3357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4OThlNTRmNGRjOTU2MzMyODIwNGQ2ZThiODg2OTgyYzljMzM1Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-08-29T09:05:11Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-08-29T09:05:11Z"}, "message": "re PR libfortran/50192 (Wrong character comparision with wide strings)\n\n2011-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/50192\n\t* intrinsics/string_intrinsics.c (memcmp_char4):  New function.\n\t* intrinsics/string_intrinsics_inc.c:  New macro MEMCMP, either\n\tset to memcmp or memcmp_char4.\n\t(compare_string):  Use MEMCMP, with correct size for it.\n\t* libgfortran.h:  Add prototype for memcmp_char4.\n\n2011-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/50192\n\t* gfortran.dg/widechar_compare_1.f90:  New test.\n\nFrom-SVN: r178173", "tree": {"sha": "1ab46c59fd14bef08ca5c2d0391ae644d39ae997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab46c59fd14bef08ca5c2d0391ae644d39ae997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7898e54f4dc9563328204d6e8b886982c9c3357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7898e54f4dc9563328204d6e8b886982c9c3357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7898e54f4dc9563328204d6e8b886982c9c3357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7898e54f4dc9563328204d6e8b886982c9c3357/comments", "author": null, "committer": null, "parents": [{"sha": "4d59a001d319fe67785ec13d54dd58e0737d12b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d59a001d319fe67785ec13d54dd58e0737d12b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d59a001d319fe67785ec13d54dd58e0737d12b6"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "7c6f93f4080601bcb3ab5df546513e03fc0a9d56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -1,3 +1,8 @@\n+2011-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/50192\n+\t* gfortran.dg/widechar_compare_1.f90:  New test.\n+\n 2011-08-26  Jason Merrill  <jason@redhat.com>\n \n \tCore DR 342"}, {"sha": "44101104cc113ec5cb33f96bd39b9f23410c3aa0", "filename": "gcc/testsuite/gfortran.dg/widechar_compare_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_compare_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_compare_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_compare_1.f90?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+! PR 50192 - on little-endian systems, this used to fail.\n+program main\n+  character(kind=4,len=2) :: c1, c2\n+  c1 = 4_' '\n+  c2 = 4_' '\n+  c1(1:1) = transfer(257, mold=c1(1:1))\n+  c2(1:1) = transfer(64, mold=c2(1:1))\n+  if (c1 < c2) call abort\n+end program main"}, {"sha": "6c57beb2a6dbba04b9e8cc404d1c945b0e8c38a5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -1,3 +1,12 @@\n+2011-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/50192\n+\t* intrinsics/string_intrinsics.c (memcmp_char4):  New function.\n+\t* intrinsics/string_intrinsics_inc.c:  New macro MEMCMP, either\n+\tset to memcmp or memcmp_char4.\n+\t(compare_string):  Use MEMCMP, with correct size for it.\n+\t* libgfortran.h:  Add prototype for memcmp_char4.\n+\n 2011-08-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/40866"}, {"sha": "a1d3b31abbbe976516e4ce7089a9af42d4a75fdf", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -51,6 +51,23 @@ memset_char4 (gfc_char4_t *b, gfc_char4_t c, size_t len)\n   return b;\n }\n \n+/* Compare wide character types, which are handled internally as\n+   unsigned 4-byte integers.  */\n+int\n+memcmp_char4 (const void *a, const void *b, size_t len)\n+{\n+  const GFC_UINTEGER_4 *pa = a;\n+  const GFC_UINTEGER_4 *pb = b;\n+  while (len-- > 0)\n+    {\n+      if (*pa != *pb)\n+\treturn *pa < *pb ? -1 : 1;\n+      pa ++;\n+      pb ++;\n+    }\n+  return 0;\n+}\n+\n \n /* All other functions are defined using a few generic macros in\n    string_intrinsics_inc.c, so we avoid code duplication between the\n@@ -64,6 +81,8 @@ memset_char4 (gfc_char4_t *b, gfc_char4_t c, size_t len)\n #define SUFFIX(x) x\n #undef  MEMSET\n #define MEMSET memset\n+#undef  MEMCMP\n+#define MEMCMP memcmp\n \n #include \"string_intrinsics_inc.c\"\n \n@@ -76,6 +95,8 @@ memset_char4 (gfc_char4_t *b, gfc_char4_t c, size_t len)\n #define SUFFIX(x) x ## _char4\n #undef  MEMSET\n #define MEMSET memset_char4\n+#undef  MEMCMP\n+#define MEMCMP memcmp_char4\n \n #include \"string_intrinsics_inc.c\"\n "}, {"sha": "8335a38d949143bfb61f1af123f7a6cbc27b494e", "filename": "libgfortran/intrinsics/string_intrinsics_inc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -90,7 +90,7 @@ compare_string (gfc_charlen_type len1, const CHARTYPE *s1,\n   gfc_charlen_type len;\n   int res;\n \n-  res = memcmp (s1, s2, ((len1 < len2) ? len1 : len2) * sizeof (CHARTYPE));\n+  res = MEMCMP (s1, s2, ((len1 < len2) ? len1 : len2));\n   if (res != 0)\n     return res;\n "}, {"sha": "148dcfb59a0edafa9ca0beee3a2d15cf3f042385", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7898e54f4dc9563328204d6e8b886982c9c3357/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=e7898e54f4dc9563328204d6e8b886982c9c3357", "patch": "@@ -1266,6 +1266,10 @@ extern int compare_string_char4 (gfc_charlen_type, const gfc_char4_t *,\n \t\t\t\t gfc_charlen_type, const gfc_char4_t *);\n iexport_proto(compare_string_char4);\n \n+extern int memcmp_char4 (const void *, const void *, size_t);\n+internal_proto(memcmp_char4);\n+\n+\n /* random.c */\n \n extern void random_seed_i4 (GFC_INTEGER_4 * size, gfc_array_i4 * put,"}]}