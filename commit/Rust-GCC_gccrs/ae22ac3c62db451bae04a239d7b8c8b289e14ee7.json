{"sha": "ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyMmFjM2M2MmRiNDUxYmFlMDRhMjM5ZDdiOGM4YjI4OWUxNGVlNw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-09-29T08:23:23Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-09-29T08:23:23Z"}, "message": "tree.c (truth_type_for): New function.\n\n2012-09-29  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* tree.c (truth_type_for): New function.\n\t* tree.h (truth_type_for): Declare.\n\t* gimple-fold.c (and_comparisons_1): Call it.\n\t(or_comparisons_1): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Don't use\n\tboolean_type_node for vectors.\n\nFrom-SVN: r191848", "tree": {"sha": "0b98a3c25fff30018c7011801207d5dbac884eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b98a3c25fff30018c7011801207d5dbac884eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1d6986c94998636277821cb24b9b310da5f23e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d6986c94998636277821cb24b9b310da5f23e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d6986c94998636277821cb24b9b310da5f23e3"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "e6a2cdbe28724c0afeb7ac22720f00c895bdc933", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "patch": "@@ -1,3 +1,12 @@\n+2012-09-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree.c (truth_type_for): New function.\n+\t* tree.h (truth_type_for): Declare.\n+\t* gimple-fold.c (and_comparisons_1): Call it.\n+\t(or_comparisons_1): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Don't use\n+\tboolean_type_node for vectors.\n+\n 2012-09-28  Jan Hubicka  <jh@suse.cz>\n \n \t* basic-block.h (RDIV): Define."}, {"sha": "66d076664cc3cadda3d2a7b67af77840c44733f5", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n #include \"gimple-fold.h\"\n-#include \"langhooks.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -1693,15 +1692,7 @@ static tree\n and_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n \t\t   enum tree_code code2, tree op2a, tree op2b)\n {\n-  tree truth_type = boolean_type_node;\n-  if (TREE_CODE (TREE_TYPE (op1a)) == VECTOR_TYPE)\n-    {\n-      tree vec_type = TREE_TYPE (op1a);\n-      tree elem = lang_hooks.types.type_for_size\n-\t(GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vec_type))), 0);\n-      truth_type = build_opaque_vector_type (elem,\n-\t\t\t\t\t     TYPE_VECTOR_SUBPARTS (vec_type));\n-    }\n+  tree truth_type = truth_type_for (TREE_TYPE (op1a));\n \n   /* First check for ((x CODE1 y) AND (x CODE2 y)).  */\n   if (operand_equal_p (op1a, op2a, 0)\n@@ -2165,15 +2156,7 @@ static tree\n or_comparisons_1 (enum tree_code code1, tree op1a, tree op1b,\n \t\t  enum tree_code code2, tree op2a, tree op2b)\n {\n-  tree truth_type = boolean_type_node;\n-  if (TREE_CODE (TREE_TYPE (op1a)) == VECTOR_TYPE)\n-    {\n-      tree vec_type = TREE_TYPE (op1a);\n-      tree elem = lang_hooks.types.type_for_size\n-\t(GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vec_type))), 0);\n-      truth_type = build_opaque_vector_type (elem,\n-\t\t\t\t\t     TYPE_VECTOR_SUBPARTS (vec_type));\n-    }\n+  tree truth_type = truth_type_for (TREE_TYPE (op1a));\n \n   /* First check for ((x CODE1 y) OR (x CODE2 y)).  */\n   if (operand_equal_p (op1a, op2a, 0)"}, {"sha": "b0e951a22f774d2391f2897f0b7e1f25dcbd7e7b", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "patch": "@@ -556,7 +556,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n   if (COMPARISON_CLASS_P (cond))\n     tmp = forward_propagate_into_comparison_1 (stmt, TREE_CODE (cond),\n-\t\t\t\t\t       boolean_type_node,\n+\t\t\t\t\t       TREE_TYPE (cond),\n \t\t\t\t\t       TREE_OPERAND (cond, 0),\n \t\t\t\t\t       TREE_OPERAND (cond, 1));\n   else if (TREE_CODE (cond) == SSA_NAME)"}, {"sha": "7f620e511be16bbc9161db27e451ff64fe14fd1b", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "patch": "@@ -10250,6 +10250,22 @@ signed_type_for (tree type)\n   return signed_or_unsigned_type_for (0, type);\n }\n \n+/* If TYPE is a vector type, return a signed integer vector type with the\n+   same width and number of subparts. Otherwise return boolean_type_node.  */\n+\n+tree\n+truth_type_for (tree type)\n+{\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      tree elem = lang_hooks.types.type_for_size\n+        (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (type))), 0);\n+      return build_opaque_vector_type (elem, TYPE_VECTOR_SUBPARTS (type));\n+    }\n+  else\n+    return boolean_type_node;\n+}\n+\n /* Returns the largest value obtainable by casting something in INNER type to\n    OUTER type.  */\n "}, {"sha": "0130ce464ee382dbe3d9891d5d5f7c976807e6e4", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22ac3c62db451bae04a239d7b8c8b289e14ee7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ae22ac3c62db451bae04a239d7b8c8b289e14ee7", "patch": "@@ -4769,6 +4769,7 @@ extern tree make_unsigned_type (int);\n extern tree signed_or_unsigned_type_for (int, tree);\n extern tree signed_type_for (tree);\n extern tree unsigned_type_for (tree);\n+extern tree truth_type_for (tree);\n extern void initialize_sizetypes (void);\n extern void fixup_unsigned_type (tree);\n extern tree build_pointer_type_for_mode (tree, enum machine_mode, bool);"}]}