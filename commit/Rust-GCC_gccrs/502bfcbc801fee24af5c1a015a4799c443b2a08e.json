{"sha": "502bfcbc801fee24af5c1a015a4799c443b2a08e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyYmZjYmM4MDFmZWUyNGFmNWMxYTAxNWE0Nzk5YzQ0M2IyYTA4ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-12-19T22:22:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-12-19T22:22:36Z"}, "message": "re PR c++/55724 ([C++11] Default type of a template value is not working)\n\n\tPR c++/55724\n\t* pt.c (type_unification_real): Re-combine post-deduction loops.\n\nFrom-SVN: r194620", "tree": {"sha": "e718fba75891708d652dfa395976e9ddea93652e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e718fba75891708d652dfa395976e9ddea93652e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/502bfcbc801fee24af5c1a015a4799c443b2a08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502bfcbc801fee24af5c1a015a4799c443b2a08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502bfcbc801fee24af5c1a015a4799c443b2a08e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502bfcbc801fee24af5c1a015a4799c443b2a08e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1906e8bbfa426ed1adfe751608bc74f1d4d2ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1906e8bbfa426ed1adfe751608bc74f1d4d2ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1906e8bbfa426ed1adfe751608bc74f1d4d2ab7"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "f6abef6368268a6bb137cc7f884d4ce25e8561ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=502bfcbc801fee24af5c1a015a4799c443b2a08e", "patch": "@@ -1,3 +1,8 @@\n+2012-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/55724\n+\t* pt.c (type_unification_real): Re-combine post-deduction loops.\n+\n 2012-12-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55685"}, {"sha": "1b3f039cc6d8144a5f1c4e98e677d647a1030966", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=502bfcbc801fee24af5c1a015a4799c443b2a08e", "patch": "@@ -15333,13 +15333,19 @@ type_unification_real (tree tparms,\n \t\t\t\t ? tf_warning_or_error\n \t\t\t\t : tf_none);\n \n-      /* Check to see if we need another pass before we start clearing\n-\t ARGUMENT_PACK_INCOMPLETE_P.  */\n       for (i = 0; i < ntparms; i++)\n \t{\n \t  tree targ = TREE_VEC_ELT (targs, i);\n \t  tree tparm = TREE_VEC_ELT (tparms, i);\n \n+\t  /* Clear the \"incomplete\" flags on all argument packs now so that\n+\t     substituting them into later default arguments works.  */\n+\t  if (targ && ARGUMENT_PACK_P (targ))\n+            {\n+              ARGUMENT_PACK_INCOMPLETE_P (targ) = 0;\n+              ARGUMENT_PACK_EXPLICIT_ARGS (targ) = NULL_TREE;\n+            }\n+\n \t  if (targ || tparm == error_mark_node)\n \t    continue;\n \t  tparm = TREE_VALUE (tparm);\n@@ -15352,24 +15358,6 @@ type_unification_real (tree tparms,\n \t      && uses_template_parms (TREE_TYPE (tparm))\n \t      && !saw_undeduced++)\n \t    goto again;\n-\t}\n-\n-      for (i = 0; i < ntparms; i++)\n-\t{\n-\t  tree targ = TREE_VEC_ELT (targs, i);\n-\t  tree tparm = TREE_VEC_ELT (tparms, i);\n-\n-\t  /* Clear the \"incomplete\" flags on all argument packs now so that\n-\t     substituting them into later default arguments works.  */\n-\t  if (targ && ARGUMENT_PACK_P (targ))\n-            {\n-              ARGUMENT_PACK_INCOMPLETE_P (targ) = 0;\n-              ARGUMENT_PACK_EXPLICIT_ARGS (targ) = NULL_TREE;\n-            }\n-\n-\t  if (targ || tparm == error_mark_node)\n-\t    continue;\n-\t  tparm = TREE_VALUE (tparm);\n \n \t  /* Core issue #226 (C++0x) [temp.deduct]:\n "}, {"sha": "0248b60599a1f098bb512617604dccbda8a02e82", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502bfcbc801fee24af5c1a015a4799c443b2a08e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg4.C?ref=502bfcbc801fee24af5c1a015a4799c443b2a08e", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/55724\n+// { dg-options -std=c++11 }\n+\n+template<int N> struct S {};\n+template<typename T = int, T N> void f(S<N>) {}\n+int main() { S<1> s; f(s); }"}]}