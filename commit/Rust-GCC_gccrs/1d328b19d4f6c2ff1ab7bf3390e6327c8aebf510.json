{"sha": "1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMjhiMTlkNGY2YzJmZjFhYjdiZjMzOTBlNjMyN2M4YWViZjUxMA==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-05-27T02:24:32Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-05-27T02:24:32Z"}, "message": "rs6000.md: Correct order of operands for DImode boolean patterns.\n\n* config/rs6000/rs6000.md: Correct order of operands for DImode\nboolean patterns.\n\n* config/rs6000/rs6000.c (boolean_or_operator): New function.\n* config/rs6000/rs6000-protos.h (boolean_or_operator): Prototype it.\n* config/rs6000/rs6000.h (PREDICATE_CODES): Add boolean_or_operator.\n* config/rs6000/rs6000.md: Use boolean_or_operator instead of\nboolean_operator for the boolean patterns without NOTs.\n\n* config/rs6000/rs6000.c (reg_or_logical_cint_operand): Rename\nfrom reg_or_u_cint_operand.  Change comment and behaviour.\n(logical_operand): Clean up, add assertion.\n(non_logical_cint_operand): Also check for\nreg_or_logical_cint_operand.\n* config/rs6000/rs6000.h (PREDICATE_CODES): Update.\n* config/rs6000/rs6000.md (iorsi3): Use reg_or_logical_cint_operand\nin the expander.\n(xorsi3): Likewise.\n(iordi3): Likewise.\n(xordi3): Likewise.\n\nFrom-SVN: r34200", "tree": {"sha": "6151d899016774fc23d5539fe43a6f352e03b4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6151d899016774fc23d5539fe43a6f352e03b4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/comments", "author": null, "committer": null, "parents": [{"sha": "defd0dea5225507ddcb79045af1f605b0b443ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defd0dea5225507ddcb79045af1f605b0b443ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defd0dea5225507ddcb79045af1f605b0b443ed6"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "69d9cfc8b40d17a1352269c93945f3a88b688ac7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "patch": "@@ -1,3 +1,26 @@\n+2000-05-26  Geoffrey Keating  <geoffk@cygnus.com>\n+\n+\t* config/rs6000/rs6000.md: Correct order of operands for DImode\n+\tboolean patterns.\n+\n+\t* config/rs6000/rs6000.c (boolean_or_operator): New function.\n+\t* config/rs6000/rs6000-protos.h (boolean_or_operator): Prototype it.\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add boolean_or_operator.\n+\t* config/rs6000/rs6000.md: Use boolean_or_operator instead of\n+\tboolean_operator for the boolean patterns without NOTs.\n+\n+\t* config/rs6000/rs6000.c (reg_or_logical_cint_operand): Rename\n+\tfrom reg_or_u_cint_operand.  Change comment and behaviour.\n+\t(logical_operand): Clean up, add assertion.\n+\t(non_logical_cint_operand): Also check for\n+\treg_or_logical_cint_operand.\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Update.\n+\t* config/rs6000/rs6000.md (iorsi3): Use reg_or_logical_cint_operand\n+\tin the expander.\n+\t(xorsi3): Likewise.\n+\t(iordi3): Likewise.\n+\t(xordi3): Likewise.\n+\n 2000-05-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (struct record_layout_info): Rename to (struct"}, {"sha": "24f6304207acb3f0df133496a9de432661b2875f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "patch": "@@ -41,7 +41,7 @@ extern int reg_or_short_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_neg_short_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_u_short_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_cint_operand PARAMS ((rtx, enum machine_mode));\n-extern int reg_or_u_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_logical_cint_operand PARAMS ((rtx, enum machine_mode));\n extern int got_operand PARAMS ((rtx, enum machine_mode));\n extern int got_no_const_operand PARAMS ((rtx, enum machine_mode));\n extern int num_insns_constant PARAMS ((rtx, enum machine_mode));\n@@ -52,9 +52,7 @@ extern int mem_or_easy_const_operand PARAMS ((rtx, enum machine_mode));\n extern int add_operand PARAMS ((rtx, enum machine_mode));\n extern int non_add_cint_operand PARAMS ((rtx, enum machine_mode));\n extern int non_logical_cint_operand PARAMS ((rtx, enum machine_mode));\n-extern int non_logical_u_cint_operand PARAMS ((rtx, enum machine_mode));\n extern int logical_operand PARAMS ((rtx, enum machine_mode));\n-extern int logical_u_operand PARAMS ((rtx, enum machine_mode));\n extern int mask_operand PARAMS ((rtx, enum machine_mode));\n extern int mask64_operand PARAMS ((rtx, enum machine_mode));\n extern int and64_operand PARAMS ((rtx, enum machine_mode));\n@@ -76,6 +74,7 @@ extern int branch_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int scc_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int trap_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int boolean_operator PARAMS ((rtx, enum machine_mode));\n+extern int boolean_or_operator PARAMS ((rtx, enum machine_mode));\n extern int includes_lshift_p PARAMS ((rtx, rtx));\n extern int includes_rshift_p PARAMS ((rtx, rtx));\n extern int registers_ok_for_quad_peep PARAMS ((rtx, rtx));"}, {"sha": "2ea0ae24af14ce49da62d27602d3402c08f9fdff", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "patch": "@@ -658,21 +658,34 @@ reg_or_cint_operand (op, mode)\n    32-bit unsigned constant integer.  */\n \n int\n-reg_or_u_cint_operand (op, mode)\n+reg_or_logical_cint_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-     return (gpc_reg_operand (op, mode)\n-\t     || (GET_CODE (op) == CONST_INT\n-#if HOST_BITS_PER_WIDE_INT != 32\n-\t\t && INTVAL (op) < ((HOST_WIDE_INT) 1 << 32)\n-#endif\n-\t\t && INTVAL (op) > 0)\n-#if HOST_BITS_PER_WIDE_INT == 32\n-\t     || (GET_CODE (op) == CONST_DOUBLE\n-\t\t && CONST_DOUBLE_HIGH (op) == 0)\n-#endif\n-\t );\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      if (GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT)\n+\t{\n+\t  if (GET_MODE_BITSIZE (mode) <= 32)\n+\t    abort();\n+\n+\t  if (INTVAL (op) < 0)\n+\t    return 0;\n+\t}\n+\n+      return ((INTVAL (op) & GET_MODE_MASK (mode)\n+\t       & (~ (unsigned HOST_WIDE_INT) 0xffffffffu)) == 0);\n+    }\n+  else if (GET_CODE (op) == CONST_DOUBLE)\n+    {\n+      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n+\t  || mode != DImode)\n+\tabort();\n+\n+      return CONST_DOUBLE_HIGH (op) == 0;\n+    }\n+  else \n+    return gpc_reg_operand (op, mode);\n }\n \n /* Return 1 if the operand is an operand that can be loaded via the GOT */\n@@ -949,34 +962,47 @@ logical_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n+  /* an unsigned representation of 'op'.  */\n+  unsigned HOST_WIDE_INT opl, oph;\n+\n   if (gpc_reg_operand (op, mode))\n     return 1;\n+\n   if (GET_CODE (op) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT cval = INTVAL (op) & GET_MODE_MASK (mode);\n-      return ((cval & (~ (HOST_WIDE_INT) 0xffff)) == 0\n-\t      || (cval & (~ (HOST_WIDE_INT) 0xffff0000u)) == 0);\n+      opl = INTVAL (op) & GET_MODE_MASK (mode);\n+      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\toph = 0;\n+      else\n+\toph = INTVAL (op) >> (HOST_BITS_PER_WIDE_INT - 1);\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      return (CONST_DOUBLE_HIGH (op) == 0\n-\t      && ((CONST_DOUBLE_LOW (op)\n-\t\t   & (~ (unsigned HOST_WIDE_INT) 0xffff0000u)) == 0));\n+      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\tabort();\n+\n+      opl = CONST_DOUBLE_LOW (op);\n+      oph = CONST_DOUBLE_HIGH (op);\n     }\n   else\n     return 0;\n+\n+  return (oph == 0\n+\t  && ((opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0\n+\t      || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000u) == 0));\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n-   above).  */\n+   above), but could be split into one.  */\n \n int\n non_logical_cint_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE)\n-\t  && ! logical_operand (op, mode));\n+\t  && ! logical_operand (op, mode)\n+\t  && reg_or_logical_cint_operand (op, mode));\n }\n \n /* Return 1 if C is a constant that can be encoded in a 32-bit mask on the\n@@ -2932,6 +2958,15 @@ boolean_operator (op, mode)\n   enum rtx_code code = GET_CODE (op);\n   return (code == AND || code == IOR || code == XOR);\n }\n+\n+int\n+boolean_or_operator (op, mode)\n+    rtx op;\n+    enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  enum rtx_code code = GET_CODE (op);\n+  return (code == IOR || code == XOR);\n+}\n \f\n /* Return 1 if ANDOP is a mask that has no bits on that are not in the\n    mask required to convert the result of a rotate insn into a shift"}, {"sha": "fe0668c2134b85d9552a1afd838d640b349f362b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "patch": "@@ -2713,7 +2713,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\\n   {\"reg_or_u_short_operand\", {SUBREG, REG, CONST_INT}}, \t\\\n   {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT}}, \t\t\\\n-  {\"reg_or_u_cint_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE}}, \\\n+  {\"reg_or_logical_cint_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE}}, \\\n   {\"got_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n   {\"got_no_const_operand\", {SYMBOL_REF, LABEL_REF}},\t\t\\\n   {\"easy_fp_constant\", {CONST_DOUBLE}},\t\t\t\t\\\n@@ -2747,7 +2747,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t       GT, LEU, LTU, GEU, GTU}},\t\\\n   {\"trap_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\\n \t\t\t\tGT, LEU, LTU, GEU, GTU}},\t\\\n-  {\"boolean_operator\", {AND, IOR, XOR}},\n+  {\"boolean_operator\", {AND, IOR, XOR}},\t\t\t\\\n+  {\"boolean_or_operator\", {IOR, XOR}},\n \n /* uncomment for disabling the corresponding default options */\n /* #define  MACHINE_no_sched_interblock */"}, {"sha": "e41bc280df272004249f00800abade519742da8f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1d328b19d4f6c2ff1ab7bf3390e6327c8aebf510", "patch": "@@ -2642,7 +2642,7 @@\n (define_expand \"iorsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:SI 2 \"reg_or_logical_cint_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2663,7 +2663,7 @@\n (define_expand \"xorsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:SI 2 \"reg_or_logical_cint_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2683,7 +2683,7 @@\n \n (define_insn \"*boolsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n-\t(match_operator:SI 3 \"boolean_operator\"\n+\t(match_operator:SI 3 \"boolean_or_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r\")\n \t  (match_operand:SI 2 \"logical_operand\" \"r,K,L\")]))]\n   \"\"\n@@ -2694,7 +2694,7 @@\n \n (define_insn \"*boolsi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n+\t(compare:CC (match_operator:SI 4 \"boolean_or_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n@@ -2755,7 +2755,7 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(match_operator:SI 3 \"boolean_operator\"\n+\t(match_operator:SI 3 \"boolean_or_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SI 2 \"non_logical_cint_operand\" \"\")]))]\n   \"\"\n@@ -7060,7 +7060,7 @@\n (define_expand \"iordi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(ior:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:DI 2 \"reg_or_logical_cint_operand\" \"\")))]\n   \"TARGET_POWERPC64\"\n   \"\n {\n@@ -7092,7 +7092,7 @@\n (define_expand \"xordi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(xor:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"\")))]\n+\t\t(match_operand:DI 2 \"reg_or_logical_cint_operand\" \"\")))]\n   \"TARGET_POWERPC64\"\n   \"\n {\n@@ -7123,7 +7123,7 @@\n \n (define_insn \"*booldi3_internal1\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r\")\n-\t(match_operator:DI 3 \"boolean_operator\"\n+\t(match_operator:DI 3 \"boolean_or_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r\")\n \t  (match_operand:DI 2 \"logical_operand\" \"r,K,JF\")]))]\n   \"TARGET_POWERPC64\"\n@@ -7134,7 +7134,7 @@\n \n (define_insn \"*booldi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n+\t(compare:CC (match_operator:DI 4 \"boolean_or_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n@@ -7195,7 +7195,7 @@\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(match_operator:DI 3 \"boolean_operator\"\n+\t(match_operator:DI 3 \"boolean_or_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DI 2 \"non_logical_cint_operand\" \"\")]))]\n   \"TARGET_POWERPC64\"\n@@ -7230,7 +7230,7 @@\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n \t  (match_operand:DI 2 \"logical_operand\" \"r\")]))]\n   \"TARGET_POWERPC64\"\n-  \"%q3 %0,%1,%2\")\n+  \"%q3 %0,%2,%1\")\n \n (define_insn \"*boolcdi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -7241,7 +7241,7 @@\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"@\n-   %q4. %3,%1,%2\n+   %q4. %3,%2,%1\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -7270,7 +7270,7 @@\n \t(match_dup 4))]\n   \"TARGET_POWERPC64\"\n   \"@\n-   %q4. %0,%1,%2\n+   %q4. %0,%2,%1\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])"}]}