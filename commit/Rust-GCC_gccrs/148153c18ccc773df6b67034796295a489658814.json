{"sha": "148153c18ccc773df6b67034796295a489658814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4MTUzYzE4Y2NjNzczZGY2YjY3MDM0Nzk2Mjk1YTQ4OTY1ODgxNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-11-24T16:55:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-24T16:55:49Z"}, "message": "re PR target/36793 (x86-64 does not get __sync_synchronize right)\n\n\t* config/i386/i386.md (UNSPECV_CMPXCHG): Rename from\n\tUNSPECV_CMPXCHG_[12].\n\t* config/i386/sync.md: Use UNSPECV_CMPXCHG instead of\n\tUNSPECV_CMPXCHG_[12].\n\n\tPR target/36793\n\t* config/i386/sync.md (memory_barrier): New expander.\n\nFrom-SVN: r142160", "tree": {"sha": "e40a0ae9bc586efd02ccf4fef83cb95e3bb08237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e40a0ae9bc586efd02ccf4fef83cb95e3bb08237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/148153c18ccc773df6b67034796295a489658814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148153c18ccc773df6b67034796295a489658814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148153c18ccc773df6b67034796295a489658814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148153c18ccc773df6b67034796295a489658814/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a03826d1d56e819d6e6d0bd2ce96d96a931dc370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03826d1d56e819d6e6d0bd2ce96d96a931dc370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03826d1d56e819d6e6d0bd2ce96d96a931dc370"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "5423742b661b3cf8939bf0891267d9878d890ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148153c18ccc773df6b67034796295a489658814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148153c18ccc773df6b67034796295a489658814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=148153c18ccc773df6b67034796295a489658814", "patch": "@@ -1,3 +1,13 @@\n+2008-11-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (UNSPECV_CMPXCHG): Rename from\n+\tUNSPECV_CMPXCHG_[12].\n+\t* config/i386/sync.md: Use UNSPECV_CMPXCHG instead of\n+\tUNSPECV_CMPXCHG_[12].\n+\n+\tPR target/36793\n+\t* config/i386/sync.md (memory_barrier): New expander.\n+\n 2008-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37135"}, {"sha": "068738d22965302ce0fb566b433370fcac4552df", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148153c18ccc773df6b67034796295a489658814/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148153c18ccc773df6b67034796295a489658814/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=148153c18ccc773df6b67034796295a489658814", "patch": "@@ -219,8 +219,7 @@\n    (UNSPECV_ALIGN\t\t7)\n    (UNSPECV_MONITOR\t\t8)\n    (UNSPECV_MWAIT\t\t9)\n-   (UNSPECV_CMPXCHG_1\t\t10)\n-   (UNSPECV_CMPXCHG_2\t\t11)\n+   (UNSPECV_CMPXCHG\t\t10)\n    (UNSPECV_XCHG\t\t12)\n    (UNSPECV_LOCK\t\t13)\n    (UNSPECV_PROLOGUE_USE\t14)"}, {"sha": "e090ea74da17c3846b62e84976b522860cb58cf4", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148153c18ccc773df6b67034796295a489658814/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148153c18ccc773df6b67034796295a489658814/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=148153c18ccc773df6b67034796295a489658814", "patch": "@@ -31,6 +31,24 @@\n (define_mode_attr doublemodesuffix [(DI \"8\") (TI \"16\")])\n (define_mode_attr DCASHMODE [(DI \"SI\") (TI \"DI\")])\n \n+(define_expand \"memory_barrier\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n+  \"\"\n+{\n+  if (!TARGET_SSE2)\n+    {\n+      /* Emit a locked no-operation when SSE2 is not available.  */\n+      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n+      rtx temp = assign_386_stack_local (QImode, slot);\n+      emit_insn (gen_sync_iorqi (temp, CONST0_RTX (QImode)));\n+      DONE;\n+    }\n+\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n ;; ??? It would be possible to use cmpxchg8b on pentium for DImode\n ;; changes.  It's complicated because the insn uses ecx:ebx as the\n ;; new value; note that the registers are reversed from the order\n@@ -46,7 +64,7 @@\n \t    [(match_dup 1)\n \t     (match_operand:CASMODE 2 \"register_operand\" \"\")\n \t     (match_operand:CASMODE 3 \"register_operand\" \"\")]\n-\t    UNSPECV_CMPXCHG_1))\n+\t    UNSPECV_CMPXCHG))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMPXCHG\"\n {\n@@ -78,10 +96,10 @@\n \t  [(match_dup 1)\n \t   (match_operand:IMODE 2 \"register_operand\" \"a\")\n \t   (match_operand:IMODE 3 \"register_operand\" \"<modeconstraint>\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMPXCHG\"\n-  \"lock{%;| } cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{%;| }cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -92,7 +110,7 @@\n \t   (match_operand:DCASMODE 2 \"register_operand\" \"A\")\n \t   (match_operand:<DCASHMODE> 3 \"register_operand\" \"b\")\n \t   (match_operand:<DCASHMODE> 4 \"register_operand\" \"c\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"lock{%;| }cmpxchg<doublemodesuffix>b\\t%1\")\n@@ -115,7 +133,7 @@\n \t   (match_operand:DI 2 \"register_operand\" \"A\")\n \t   (match_operand:SI 3 \"register_operand\" \"SD\")\n \t   (match_operand:SI 4 \"register_operand\" \"c\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n   \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n@@ -129,11 +147,11 @@\n \t    [(match_dup 1)\n \t     (match_operand:CASMODE 2 \"register_operand\" \"\")\n \t     (match_operand:CASMODE 3 \"register_operand\" \"\")]\n-\t    UNSPECV_CMPXCHG_1))\n+\t    UNSPECV_CMPXCHG))\n      (set (match_dup 4)\n \t  (compare:CCZ\n \t    (unspec_volatile:CASMODE\n-\t      [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG_2)\n+\t      [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG)\n \t    (match_dup 2)))])]\n   \"TARGET_CMPXCHG\"\n {\n@@ -169,11 +187,11 @@\n \t  [(match_dup 1)\n \t   (match_operand:IMODE 2 \"register_operand\" \"a\")\n \t   (match_operand:IMODE 3 \"register_operand\" \"<modeconstraint>\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (unspec_volatile:IMODE\n-\t    [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG_2)\n+\t    [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG)\n \t  (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n   \"lock{%;| }cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n@@ -187,12 +205,12 @@\n \t   (match_operand:DCASMODE 2 \"register_operand\" \"A\")\n \t   (match_operand:<DCASHMODE> 3 \"register_operand\" \"b\")\n \t   (match_operand:<DCASHMODE> 4 \"register_operand\" \"c\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (unspec_volatile:DCASMODE\n \t    [(match_dup 1) (match_dup 2) (match_dup 3) (match_dup 4)]\n-\t    UNSPECV_CMPXCHG_2)\n+\t    UNSPECV_CMPXCHG)\n \t  (match_dup 2)))]\n   \"\"\n   \"lock{%;| }cmpxchg<doublemodesuffix>b\\t%1\")\n@@ -208,12 +226,12 @@\n \t   (match_operand:DI 2 \"register_operand\" \"A\")\n \t   (match_operand:SI 3 \"register_operand\" \"SD\")\n \t   (match_operand:SI 4 \"register_operand\" \"c\")]\n-\t  UNSPECV_CMPXCHG_1))\n+\t  UNSPECV_CMPXCHG))\n    (set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (unspec_volatile:DI\n \t    [(match_dup 1) (match_dup 2) (match_dup 3) (match_dup 4)]\n-\t    UNSPECV_CMPXCHG_2)\n+\t    UNSPECV_CMPXCHG)\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n   \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")"}]}