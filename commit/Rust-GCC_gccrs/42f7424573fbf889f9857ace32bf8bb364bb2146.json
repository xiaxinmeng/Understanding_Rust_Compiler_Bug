{"sha": "42f7424573fbf889f9857ace32bf8bb364bb2146", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmNzQyNDU3M2ZiZjg4OWY5ODU3YWNlMzJiZjhiYjM2NGJiMjE0Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-27T14:35:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-27T14:35:13Z"}, "message": "gimple-fold.c (gimple_fold_builtin_memory_op): Remove dead code, refactor a bit.\n\n2017-11-27  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Remove dead code,\n\trefactor a bit.\n\nFrom-SVN: r255172", "tree": {"sha": "8f350968ea5027498dec9e029bc96a0bde69494c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f350968ea5027498dec9e029bc96a0bde69494c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42f7424573fbf889f9857ace32bf8bb364bb2146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f7424573fbf889f9857ace32bf8bb364bb2146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f7424573fbf889f9857ace32bf8bb364bb2146", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f7424573fbf889f9857ace32bf8bb364bb2146/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53d2b7cb8623bde9ad120e97cca1b36938cfb9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d2b7cb8623bde9ad120e97cca1b36938cfb9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d2b7cb8623bde9ad120e97cca1b36938cfb9e7"}], "stats": {"total": 66, "additions": 16, "deletions": 50}, "files": [{"sha": "b376ab8d5c68a1075ac3f79fee94983e1534487f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f7424573fbf889f9857ace32bf8bb364bb2146/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f7424573fbf889f9857ace32bf8bb364bb2146/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42f7424573fbf889f9857ace32bf8bb364bb2146", "patch": "@@ -1,3 +1,8 @@\n+2017-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Remove dead code,\n+\trefactor a bit.\n+\n 2017-11-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (wide_int_to_tree): Free discarded INTEGER_CST."}, {"sha": "353a46ed1b77490346dd48d0c54f76a890c5bbbc", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 11, "deletions": 50, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f7424573fbf889f9857ace32bf8bb364bb2146/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f7424573fbf889f9857ace32bf8bb364bb2146/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=42f7424573fbf889f9857ace32bf8bb364bb2146", "patch": "@@ -927,12 +927,6 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \n       if (!tree_fits_shwi_p (len))\n \treturn false;\n-      /* FIXME:\n-         This logic lose for arguments like (type *)malloc (sizeof (type)),\n-         since we strip the casts of up to VOID return value from malloc.\n-\t Perhaps we ought to inherit type from non-VOID argument here?  */\n-      STRIP_NOPS (src);\n-      STRIP_NOPS (dest);\n       if (!POINTER_TYPE_P (TREE_TYPE (src))\n \t  || !POINTER_TYPE_P (TREE_TYPE (dest)))\n \treturn false;\n@@ -942,37 +936,14 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t using that type.  In theory we could always use a char[len] type\n \t but that only gains us that the destination and source possibly\n \t no longer will have their address taken.  */\n-      /* As we fold (void *)(p + CST) to (void *)p + CST undo this here.  */\n-      if (TREE_CODE (src) == POINTER_PLUS_EXPR)\n-\t{\n-\t  tree tem = TREE_OPERAND (src, 0);\n-\t  STRIP_NOPS (tem);\n-\t  if (tem != TREE_OPERAND (src, 0))\n-\t    src = build1 (NOP_EXPR, TREE_TYPE (tem), src);\n-\t}\n-      if (TREE_CODE (dest) == POINTER_PLUS_EXPR)\n-\t{\n-\t  tree tem = TREE_OPERAND (dest, 0);\n-\t  STRIP_NOPS (tem);\n-\t  if (tem != TREE_OPERAND (dest, 0))\n-\t    dest = build1 (NOP_EXPR, TREE_TYPE (tem), dest);\n-\t}\n       srctype = TREE_TYPE (TREE_TYPE (src));\n       if (TREE_CODE (srctype) == ARRAY_TYPE\n \t  && !tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len))\n-\t{\n-\t  srctype = TREE_TYPE (srctype);\n-\t  STRIP_NOPS (src);\n-\t  src = build1 (NOP_EXPR, build_pointer_type (srctype), src);\n-\t}\n+\tsrctype = TREE_TYPE (srctype);\n       desttype = TREE_TYPE (TREE_TYPE (dest));\n       if (TREE_CODE (desttype) == ARRAY_TYPE\n \t  && !tree_int_cst_equal (TYPE_SIZE_UNIT (desttype), len))\n-\t{\n-\t  desttype = TREE_TYPE (desttype);\n-\t  STRIP_NOPS (dest);\n-\t  dest = build1 (NOP_EXPR, build_pointer_type (desttype), dest);\n-\t}\n+\tdesttype = TREE_TYPE (desttype);\n       if (TREE_ADDRESSABLE (srctype)\n \t  || TREE_ADDRESSABLE (desttype))\n \treturn false;\n@@ -1000,43 +971,34 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t  || src_align < TYPE_ALIGN (srctype))\n \treturn false;\n \n-      destvar = dest;\n-      STRIP_NOPS (destvar);\n-      if (TREE_CODE (destvar) == ADDR_EXPR\n-\t  && var_decl_component_p (TREE_OPERAND (destvar, 0))\n+      destvar = NULL_TREE;\n+      if (TREE_CODE (dest) == ADDR_EXPR\n+\t  && var_decl_component_p (TREE_OPERAND (dest, 0))\n \t  && tree_int_cst_equal (TYPE_SIZE_UNIT (desttype), len))\n-\tdestvar = fold_build2 (MEM_REF, desttype, destvar, off0);\n-      else\n-\tdestvar = NULL_TREE;\n+\tdestvar = fold_build2 (MEM_REF, desttype, dest, off0);\n \n-      srcvar = src;\n-      STRIP_NOPS (srcvar);\n-      if (TREE_CODE (srcvar) == ADDR_EXPR\n-\t  && var_decl_component_p (TREE_OPERAND (srcvar, 0))\n+      srcvar = NULL_TREE;\n+      if (TREE_CODE (src) == ADDR_EXPR\n+\t  && var_decl_component_p (TREE_OPERAND (src, 0))\n \t  && tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len))\n \t{\n \t  if (!destvar\n \t      || src_align >= TYPE_ALIGN (desttype))\n \t    srcvar = fold_build2 (MEM_REF, destvar ? desttype : srctype,\n-\t\t\t\t  srcvar, off0);\n+\t\t\t\t  src, off0);\n \t  else if (!STRICT_ALIGNMENT)\n \t    {\n \t      srctype = build_aligned_type (TYPE_MAIN_VARIANT (desttype),\n \t\t\t\t\t    src_align);\n-\t      srcvar = fold_build2 (MEM_REF, srctype, srcvar, off0);\n+\t      srcvar = fold_build2 (MEM_REF, srctype, src, off0);\n \t    }\n-\t  else\n-\t    srcvar = NULL_TREE;\n \t}\n-      else\n-\tsrcvar = NULL_TREE;\n \n       if (srcvar == NULL_TREE && destvar == NULL_TREE)\n \treturn false;\n \n       if (srcvar == NULL_TREE)\n \t{\n-\t  STRIP_NOPS (src);\n \t  if (src_align >= TYPE_ALIGN (desttype))\n \t    srcvar = fold_build2 (MEM_REF, desttype, src, off0);\n \t  else\n@@ -1050,7 +1012,6 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t}\n       else if (destvar == NULL_TREE)\n \t{\n-\t  STRIP_NOPS (dest);\n \t  if (dest_align >= TYPE_ALIGN (srctype))\n \t    destvar = fold_build2 (MEM_REF, srctype, dest, off0);\n \t  else"}]}