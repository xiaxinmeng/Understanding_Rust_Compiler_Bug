{"sha": "b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3ZTBkNzk3Y2JhY2ViMDM1MjllM2Y3MWVjNWFhODFhMjZiYTI1Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-21T18:24:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-21T18:24:18Z"}, "message": "i386.c (ix86_expand_sse_movcc): Use blendvps, blendvpd and pblendvb if possible.\n\n\t* config/i386/i386.c (ix86_expand_sse_movcc): Use\n\tblendvps, blendvpd and pblendvb if possible.\n\n\t* gcc.dg/vect/vect-cond-7.c: New test.\n\t* gcc.target/i386/sse4_1-cond-1.c: New test.\n\t* gcc.target/i386/avx-cond-1.c: New test.\n\nFrom-SVN: r179055", "tree": {"sha": "85528da9cde3c58f17d521fbe3f44c5a92d6621a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85528da9cde3c58f17d521fbe3f44c5a92d6621a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6f8e5901625f2c77ea317a3d770c52d966b5e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f8e5901625f2c77ea317a3d770c52d966b5e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f8e5901625f2c77ea317a3d770c52d966b5e77"}], "stats": {"total": 247, "additions": 235, "deletions": 12}, "files": [{"sha": "ed4c4fc8446911a657a0e2c8e435d42b6c806f8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -1,3 +1,8 @@\n+2011-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_sse_movcc): Use\n+\tblendvps, blendvpd and pblendvb if possible.\n+\n 2011-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50464"}, {"sha": "f952d2e758b539e9dcab5de9796b451ad64ae51a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -18909,24 +18909,80 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     }\n   else\n     {\n-      op_true = force_reg (mode, op_true);\n+      rtx (*gen) (rtx, rtx, rtx, rtx) = NULL;\n+\n       op_false = force_reg (mode, op_false);\n \n-      t2 = gen_reg_rtx (mode);\n-      if (optimize)\n-\tt3 = gen_reg_rtx (mode);\n+      switch (mode)\n+\t{\n+\tcase V4SFmode:\n+\t  if (TARGET_SSE4_1)\n+\t    gen = gen_sse4_1_blendvps;\n+\t  break;\n+\tcase V2DFmode:\n+\t  if (TARGET_SSE4_1)\n+\t    gen = gen_sse4_1_blendvpd;\n+\t  break;\n+\tcase V16QImode:\n+\tcase V8HImode:\n+\tcase V4SImode:\n+\tcase V2DImode:\n+\t  if (TARGET_SSE4_1)\n+\t    {\n+\t      gen = gen_sse4_1_pblendvb;\n+\t      dest = gen_lowpart (V16QImode, dest);\n+\t      op_false = gen_lowpart (V16QImode, op_false);\n+\t      op_true = gen_lowpart (V16QImode, op_true);\n+\t      cmp = gen_lowpart (V16QImode, cmp);\n+\t    }\n+\t  break;\n+\tcase V8SFmode:\n+\t  if (TARGET_AVX)\n+\t    gen = gen_avx_blendvps256;\n+\t  break;\n+\tcase V4DFmode:\n+\t  if (TARGET_AVX)\n+\t    gen = gen_avx_blendvpd256;\n+\t  break;\n+\tcase V32QImode:\n+\tcase V16HImode:\n+\tcase V8SImode:\n+\tcase V4DImode:\n+\t  if (TARGET_AVX2)\n+\t    {\n+\t      gen = gen_avx2_pblendvb;\n+\t      dest = gen_lowpart (V32QImode, dest);\n+\t      op_false = gen_lowpart (V32QImode, op_false);\n+\t      op_true = gen_lowpart (V32QImode, op_true);\n+\t      cmp = gen_lowpart (V32QImode, cmp);\n+\t    }\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      if (gen != NULL)\n+\temit_insn (gen (dest, op_false, op_true, cmp));\n       else\n-\tt3 = dest;\n+\t{\n+\t  op_true = force_reg (mode, op_true);\n \n-      x = gen_rtx_AND (mode, op_true, cmp);\n-      emit_insn (gen_rtx_SET (VOIDmode, t2, x));\n+\t  t2 = gen_reg_rtx (mode);\n+\t  if (optimize)\n+\t    t3 = gen_reg_rtx (mode);\n+\t  else\n+\t    t3 = dest;\n \n-      x = gen_rtx_NOT (mode, cmp);\n-      x = gen_rtx_AND (mode, x, op_false);\n-      emit_insn (gen_rtx_SET (VOIDmode, t3, x));\n+\t  x = gen_rtx_AND (mode, op_true, cmp);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, t2, x));\n \n-      x = gen_rtx_IOR (mode, t3, t2);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+\t  x = gen_rtx_NOT (mode, cmp);\n+\t  x = gen_rtx_AND (mode, x, op_false);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, t3, x));\n+\n+\t  x = gen_rtx_IOR (mode, t3, t2);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+\t}\n     }\n }\n "}, {"sha": "b5758819327b9c3f859603a9f61aa8766e90df96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -1,3 +1,9 @@\n+2011-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/vect-cond-7.c: New test.\n+\t* gcc.target/i386/sse4_1-cond-1.c: New test.\n+\t* gcc.target/i386/avx-cond-1.c: New test.\n+\n 2011-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50464"}, {"sha": "227192cf24c8d3036c9bdff1b947f3e9e4c70446", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-7.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-7.c?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -0,0 +1,68 @@\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+double ad[64], bd[64], cd[64], dd[64], ed[64];\n+float af[64], bf[64], cf[64], df[64], ef[64];\n+signed char ac[64], bc[64], cc[64], dc[64], ec[64];\n+short as[64], bs[64], cs[64], ds[64], es[64];\n+int ai[64], bi[64], ci[64], di[64], ei[64];\n+long long all[64], bll[64], cll[64], dll[64], ell[64];\n+unsigned char auc[64], buc[64], cuc[64], duc[64], euc[64];\n+unsigned short aus[64], bus[64], cus[64], dus[64], eus[64];\n+unsigned int au[64], bu[64], cu[64], du[64], eu[64];\n+unsigned long long aull[64], bull[64], cull[64], dull[64], eull[64];\n+\n+#define F(var) \\\n+__attribute__((noinline, noclone)) void \\\n+f##var (void) \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < 64; i++) \\\n+    { \\\n+      __typeof (a##var[0]) d = d##var[i], e = e##var[i]; \\\n+      a##var[i] = b##var[i] > c##var[i] ? d : e; \\\n+    } \\\n+}\n+\n+#define TESTS \\\n+F (d) F (f) F (c) F (s) F (i) F (ll) F (uc) F (us) F (u) F (ull)\n+\n+TESTS\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  check_vect ();\n+  for (i = 0; i < 64; i++)\n+    {\n+#undef F\n+#define F(var) \\\n+      b##var[i] = i + 64; \\\n+      switch (i % 3) \\\n+\t{ \\\n+\tcase 0: c##var[i] = i + 64; break; \\\n+\tcase 1: c##var[i] = 127 - i; break; \\\n+\tcase 2: c##var[i] = i; break; \\\n+\t} \\\n+      d##var[i] = i / 2; \\\n+      e##var[i] = i * 2;\n+      TESTS\n+    }\n+#undef F\n+#define F(var) f##var ();\n+  TESTS\n+  for (i = 0; i < 64; i++)\n+    {\n+      asm volatile (\"\" : : : \"memory\");\n+#undef F\n+#define F(var) \\\n+      if (a##var[i] != (b##var[i] > c##var[i] ? d##var[i] : e##var[i])) \\\n+\tabort ();\n+      TESTS\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e233ec9622c98cde3b47a93d9f0cd2e8ff6115e5", "filename": "gcc/testsuite/gcc.target/i386/avx-cond-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-cond-1.c?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mavx\" } */\n+/* { dg-require-effective-target avx_runtime } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include \"sse4_1-cond-1.c\""}, {"sha": "41e69e59f4938501638b811b7a98cb114bdb0f7c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-cond-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e0d797cbaceb03529e3f71ec5aa81a26ba253/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-cond-1.c?ref=b17e0d797cbaceb03529e3f71ec5aa81a26ba253", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O3 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+extern void abort (void);\n+double ad[64], bd[64], cd[64], dd[64], ed[64];\n+float af[64], bf[64], cf[64], df[64], ef[64];\n+signed char ac[64], bc[64], cc[64], dc[64], ec[64];\n+short as[64], bs[64], cs[64], ds[64], es[64];\n+int ai[64], bi[64], ci[64], di[64], ei[64];\n+long long all[64], bll[64], cll[64], dll[64], ell[64];\n+unsigned char auc[64], buc[64], cuc[64], duc[64], euc[64];\n+unsigned short aus[64], bus[64], cus[64], dus[64], eus[64];\n+unsigned int au[64], bu[64], cu[64], du[64], eu[64];\n+unsigned long long aull[64], bull[64], cull[64], dull[64], eull[64];\n+\n+#define F(var) \\\n+__attribute__((noinline, noclone)) void \\\n+f##var (void) \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < 64; i++) \\\n+    { \\\n+      __typeof (a##var[0]) d = d##var[i], e = e##var[i]; \\\n+      a##var[i] = b##var[i] > c##var[i] ? d : e; \\\n+    } \\\n+}\n+\n+#define TESTS \\\n+F (d) F (f) F (c) F (s) F (i) F (ll) F (uc) F (us) F (u) F (ull)\n+\n+TESTS\n+\n+void\n+TEST ()\n+{\n+  int i;\n+  for (i = 0; i < 64; i++)\n+    {\n+#undef F\n+#define F(var) \\\n+      b##var[i] = i + 64; \\\n+      switch (i % 3) \\\n+\t{ \\\n+\tcase 0: c##var[i] = i + 64; break; \\\n+\tcase 1: c##var[i] = 127 - i; break; \\\n+\tcase 2: c##var[i] = i; break; \\\n+\t} \\\n+      d##var[i] = i / 2; \\\n+      e##var[i] = i * 2;\n+      TESTS\n+    }\n+#undef F\n+#define F(var) f##var ();\n+  TESTS\n+  for (i = 0; i < 64; i++)\n+    {\n+      asm volatile (\"\" : : : \"memory\");\n+#undef F\n+#define F(var) \\\n+      if (a##var[i] != (b##var[i] > c##var[i] ? d##var[i] : e##var[i])) \\\n+\tabort ();\n+      TESTS\n+    }\n+}"}]}