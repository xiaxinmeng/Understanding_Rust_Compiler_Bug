{"sha": "dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "node_id": "C_kwDOANBUbNoAKGRjZmM3YWM5NGRiY2Y2Yzg2YzBjNThjZTZkYzFkOGJkODUzZTQwOTM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-06T18:26:57Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-06T18:26:57Z"}, "message": "analyzer: use __attribute__((nonnull)) at top level of analysis [PR106325]\n\nPR analyzer/106325 reports false postives from\n-Wanalyzer-null-dereference on code like this:\n\n__attribute__((nonnull))\nvoid foo_a (Foo *p)\n{\n  foo_b (p);\n\n  switch (p->type)\n    {\n      /* ... */\n    }\n}\n\nwhere foo_b (p) has a:\n\n  g_return_if_fail (p);\n\nthat expands to:\n\n  if (!p)\n    {\n      return;\n    }\n\nThe analyzer \"sees\" the comparison against NULL in foo_b, and splits the\nanalysis into the NULL and not-NULL cases; later, back in foo_a,  at\n  switch (p->type)\nit complains that p is NULL.\n\nPreviously we were only using __attribute__((nonnull)) as something to\ncomplain about when it was violated; we weren't using it as a source of\nknowledge.\n\nThis patch fixes things by making the analyzer respect\n__attribute__((nonnull)) at the top-level of the analysis: any such\nparams are now assumed to be non-NULL, so that the analyzer assumes the\ng_return_if_fail inside foo_b doesn't fail when called from foo_a\n\nDoing so fixes the false positives.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106325\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_null_ptr): New.\n\t* region-model-manager.h\n\t(region_model_manager::get_or_create_null_ptr): New decl.\n\t* region-model.cc (region_model::on_top_level_param): Add\n\t\"nonnull\" param and make use of it.\n\t(region_model::push_frame): When handling a top-level entrypoint\n\tto the analysis, determine which params __attribute__((nonnull))\n\tapplies to, and pass to on_top_level_param.\n\t* region-model.h (region_model::on_top_level_param): Add \"nonnull\"\n\tparam.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106325\n\t* gcc.dg/analyzer/attr-nonnull-pr106325.c: New test.\n\t* gcc.dg/analyzer/attribute-nonnull.c (test_6): New.\n\t(test_7): New.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "7b7ec97a683ffb661dae376e7436e21744c5fa30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7ec97a683ffb661dae376e7436e21744c5fa30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa19bfbb0a19950fcbce8c3ccb0a116faab477d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa19bfbb0a19950fcbce8c3ccb0a116faab477d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa19bfbb0a19950fcbce8c3ccb0a116faab477d0"}], "stats": {"total": 313, "additions": 308, "deletions": 5}, "files": [{"sha": "0fb96386f282bc259ad47254cb085117787203af", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -237,6 +237,17 @@ region_model_manager::get_or_create_int_cst (tree type, poly_int64 val)\n   return get_or_create_constant_svalue (tree_cst);\n }\n \n+/* Return the svalue * for the constant_svalue for the NULL pointer\n+   of POINTER_TYPE, creating it if necessary.  */\n+\n+const svalue *\n+region_model_manager::get_or_create_null_ptr (tree pointer_type)\n+{\n+  gcc_assert (pointer_type);\n+  gcc_assert (POINTER_TYPE_P (pointer_type));\n+  return get_or_create_int_cst (pointer_type, 0);\n+}\n+\n /* Return the svalue * for a unknown_svalue for TYPE (which can be NULL),\n    creating it if necessary.\n    The unknown_svalue instances are reused, based on pointer equality"}, {"sha": "13fbe483f6d84ca65fcd27c2e56ce3627c30c142", "filename": "gcc/analyzer/region-model-manager.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.h?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -43,6 +43,7 @@ class region_model_manager\n   /* svalue consolidation.  */\n   const svalue *get_or_create_constant_svalue (tree cst_expr);\n   const svalue *get_or_create_int_cst (tree type, poly_int64);\n+  const svalue *get_or_create_null_ptr (tree pointer_type);\n   const svalue *get_or_create_unknown_svalue (tree type);\n   const svalue *get_or_create_setjmp_svalue (const setjmp_record &r,\n \t\t\t\t\t     tree type);"}, {"sha": "430c0e9117542f123ce7b42e22b31272dbb3d11f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -4385,11 +4385,13 @@ region_model::apply_constraints_for_exception (const gimple *last_stmt,\n    PARAM has a defined but unknown initial value.\n    Anything it points to has escaped, since the calling context \"knows\"\n    the pointer, and thus calls to unknown functions could read/write into\n-   the region.  */\n+   the region.\n+   If NONNULL is true, then assume that PARAM must be non-NULL.  */\n \n void\n region_model::on_top_level_param (tree param,\n-\t\t\t\t   region_model_context *ctxt)\n+\t\t\t\t  bool nonnull,\n+\t\t\t\t  region_model_context *ctxt)\n {\n   if (POINTER_TYPE_P (TREE_TYPE (param)))\n     {\n@@ -4398,6 +4400,12 @@ region_model::on_top_level_param (tree param,\n \t= m_mgr->get_or_create_initial_value (param_reg);\n       const region *pointee_reg = m_mgr->get_symbolic_region (init_ptr_sval);\n       m_store.mark_as_escaped (pointee_reg);\n+      if (nonnull)\n+\t{\n+\t  const svalue *null_ptr_sval\n+\t    = m_mgr->get_or_create_null_ptr (TREE_TYPE (param));\n+\t  add_constraint (init_ptr_sval, NE_EXPR, null_ptr_sval, ctxt);\n+\t}\n     }\n }\n \n@@ -4453,14 +4461,27 @@ region_model::push_frame (function *fun, const vec<const svalue *> *arg_svals,\n \t have defined but unknown initial values.\n \t Anything they point to has escaped.  */\n       tree fndecl = fun->decl;\n+\n+      /* Handle \"__attribute__((nonnull))\".   */\n+      tree fntype = TREE_TYPE (fndecl);\n+      bitmap nonnull_args = get_nonnull_args (fntype);\n+\n+      unsigned parm_idx = 0;\n       for (tree iter_parm = DECL_ARGUMENTS (fndecl); iter_parm;\n \t   iter_parm = DECL_CHAIN (iter_parm))\n \t{\n+\t  bool non_null = (nonnull_args\n+\t\t\t   ? (bitmap_empty_p (nonnull_args)\n+\t\t\t      || bitmap_bit_p (nonnull_args, parm_idx))\n+\t\t\t   : false);\n \t  if (tree parm_default_ssa = ssa_default_def (fun, iter_parm))\n-\t    on_top_level_param (parm_default_ssa, ctxt);\n+\t    on_top_level_param (parm_default_ssa, non_null, ctxt);\n \t  else\n-\t    on_top_level_param (iter_parm, ctxt);\n+\t    on_top_level_param (iter_parm, non_null, ctxt);\n+\t  parm_idx++;\n \t}\n+\n+      BITMAP_FREE (nonnull_args);\n     }\n \n   return m_current_frame;"}, {"sha": "291bb2ff45ad753966e4d0e096cf7c07dd398401", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -530,7 +530,9 @@ class region_model\n   int poison_any_pointers_to_descendents (const region *reg,\n \t\t\t\t\t  enum poison_kind pkind);\n \n-  void on_top_level_param (tree param, region_model_context *ctxt);\n+  void on_top_level_param (tree param,\n+\t\t\t   bool nonnull,\n+\t\t\t   region_model_context *ctxt);\n \n   bool called_from_main_p () const;\n   const svalue *get_initial_value_for_global (const region *reg) const;"}, {"sha": "3b264719f6dd8d43179aaabf1d2fe76e52eace76", "filename": "gcc/testsuite/gcc.dg/analyzer/attr-nonnull-pr106325.c", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-nonnull-pr106325.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-nonnull-pr106325.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-nonnull-pr106325.c?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -0,0 +1,250 @@\n+typedef long int signed_frame_t;\n+\n+typedef struct Track Track;\n+typedef struct ZRegion ZRegion;\n+typedef struct AutomationTrack AutomationTrack;\n+typedef struct MidiNote MidiNote;\n+typedef struct ArrangerObject ArrangerObject;\n+typedef struct Project Project;\n+typedef struct ZRegion ZRegion;\n+typedef struct Position Position;\n+typedef struct Track Track;\n+typedef struct ClipEditor ClipEditor;\n+\n+typedef enum ArrangerObjectType\n+{\n+  /* .... */\n+  ARRANGER_OBJECT_TYPE_REGION,\n+  ARRANGER_OBJECT_TYPE_MIDI_NOTE,\n+  /* .... */\n+} ArrangerObjectType;\n+\n+typedef enum ArrangerObjectPositionType\n+{\n+  ARRANGER_OBJECT_POSITION_TYPE_START,\n+  ARRANGER_OBJECT_POSITION_TYPE_END,\n+  ARRANGER_OBJECT_POSITION_TYPE_CLIP_START,\n+  ARRANGER_OBJECT_POSITION_TYPE_LOOP_START,\n+  ARRANGER_OBJECT_POSITION_TYPE_LOOP_END,\n+  ARRANGER_OBJECT_POSITION_TYPE_FADE_IN,\n+  ARRANGER_OBJECT_POSITION_TYPE_FADE_OUT,\n+} ArrangerObjectPositionType;\n+\n+typedef struct Position\n+{\n+  /* .... */\n+  double ticks;\n+  /* .... */\n+} Position;\n+\n+typedef enum RegionType\n+{\n+  /* .... */\n+  REGION_TYPE_AUTOMATION = 1 << 2,\n+  /* .... */\n+} RegionType;\n+\n+typedef struct RegionIdentifier\n+{\n+  /* .... */\n+  RegionType type;\n+  /* .... */\n+  int lane_pos;\n+  /* .... */\n+} RegionIdentifier;\n+\n+typedef struct ArrangerObject\n+{\n+  /* .... */\n+\n+  ArrangerObjectType type;\n+  /* .... */\n+  Position pos;\n+  Position end_pos;\n+  Position clip_start_pos;\n+\n+  Position loop_start_pos;\n+  Position loop_end_pos;\n+\n+  Position fade_in_pos;\n+  Position fade_out_pos;\n+\n+  /* .... */\n+} ArrangerObject;\n+\n+typedef struct ZRegion\n+{\n+  /* .... */\n+  RegionIdentifier id;\n+  /* .... */\n+  int num_midi_notes;\n+  /* .... */\n+} ZRegion;\n+\n+typedef struct Zrythm\n+{\n+  /* ... */\n+  Project *project;\n+  /* ... */\n+} Zrythm;\n+\n+typedef struct Project\n+{\n+  /* ... */\n+\n+  ClipEditor *clip_editor;\n+\n+  /* ... */\n+} Project;\n+\n+extern Zrythm *zrythm;\n+\n+extern void g_return_if_fail_warning (const char *log_domain,\n+                                      const char *pretty_function,\n+                                      const char *expression);\n+extern void position_add_ticks (Position *self, double ticks);\n+extern _Bool\n+arranger_object_is_position_valid (const ArrangerObject *const self,\n+                                   const Position *pos,\n+                                   ArrangerObjectPositionType pos_type);\n+extern Track *arranger_object_get_track (const ArrangerObject *const self);\n+extern void midi_region_insert_midi_note (ZRegion *region, MidiNote *midi_note,\n+                                          int idx, int pub_events);\n+extern ZRegion *midi_note_get_region (MidiNote *self);\n+extern AutomationTrack *\n+region_get_automation_track (const ZRegion *const region);\n+extern void track_add_region (Track *track, ZRegion *region,\n+                              AutomationTrack *at, int lane_pos, int gen_name,\n+                              int fire_events);\n+extern void clip_editor_set_region (ClipEditor *self, ZRegion *region,\n+                                    _Bool fire_events);\n+extern ZRegion *clip_editor_get_region (ClipEditor *self);\n+\n+static Position *\n+get_position_ptr (ArrangerObject *self, ArrangerObjectPositionType pos_type)\n+{\n+  switch (pos_type)\n+    {\n+    case ARRANGER_OBJECT_POSITION_TYPE_START:\n+      return &self->pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_END:\n+      return &self->end_pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_CLIP_START:\n+      return &self->clip_start_pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_LOOP_START:\n+      return &self->loop_start_pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_LOOP_END:\n+      return &self->loop_end_pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_FADE_IN:\n+      return &self->fade_in_pos;\n+    case ARRANGER_OBJECT_POSITION_TYPE_FADE_OUT:\n+      return &self->fade_out_pos;\n+    }\n+  return (((void *)0));\n+}\n+\n+void\n+arranger_object_set_position (ArrangerObject *self, const Position *pos,\n+                              ArrangerObjectPositionType pos_type,\n+                              const int validate)\n+{\n+  if (!(self && pos))\n+    {\n+      g_return_if_fail_warning (\"zrythm\", ((const char *)(__func__)),\n+                                \"self && pos\");\n+      return;\n+    }\n+\n+  if (validate && !arranger_object_is_position_valid (self, pos, pos_type))\n+    return;\n+\n+  Position *pos_ptr;\n+  pos_ptr = get_position_ptr (self, pos_type);\n+  if (!pos_ptr)\n+    {\n+      g_return_if_fail_warning (\"zrythm\", ((const char *)(__func__)),\n+                                \"pos_ptr\");\n+      return;\n+    }\n+  *(pos_ptr) = *(pos);\n+}\n+\n+void\n+arranger_object_end_pos_setter (ArrangerObject *self, const Position *pos)\n+{\n+  arranger_object_set_position (self, pos, ARRANGER_OBJECT_POSITION_TYPE_END,\n+                                1);\n+}\n+\n+ArrangerObject *\n+arranger_object_clone (const ArrangerObject *self)\n+{\n+  if (!self)\n+    {\n+      g_return_if_fail_warning (\"zrythm\", ((const char *)(__func__)), \"self\");\n+      return (((void *)0));\n+    }\n+  /* .... */\n+  return (((void *)0));\n+}\n+\n+__attribute__((nonnull(1, 2)))\n+void\n+arranger_object_unsplit (ArrangerObject *r1, ArrangerObject *r2,\n+                         ArrangerObject **obj, _Bool fire_events)\n+{\n+  ZRegion *clip_editor_region\n+      = clip_editor_get_region (((zrythm)->project->clip_editor));\n+\n+  _Bool set_clip_editor_region = 0;\n+  if (clip_editor_region == (ZRegion *)r1\n+      || clip_editor_region == (ZRegion *)r2)\n+    {\n+      set_clip_editor_region = 1;\n+      clip_editor_set_region (((zrythm)->project->clip_editor), ((void *)0),\n+                              1);\n+    }\n+\n+  *obj = arranger_object_clone (r1);\n+\n+  arranger_object_end_pos_setter (*obj, &r2->end_pos);\n+  Position fade_out_pos;\n+  *(&fade_out_pos) = *(&r2->end_pos);\n+  position_add_ticks (&fade_out_pos, -r2->pos.ticks);\n+  arranger_object_set_position (*obj, &fade_out_pos,\n+                                ARRANGER_OBJECT_POSITION_TYPE_FADE_OUT, 0);\n+\n+  switch (r1->type) /* { dg-bogus \"dereference of NULL 'r1'\" } */\n+    {\n+    case ARRANGER_OBJECT_TYPE_REGION:\n+      {\n+        ZRegion *r1_region = (ZRegion *)r1;\n+        AutomationTrack *at = ((void *)0);\n+        if (r1_region->id.type == REGION_TYPE_AUTOMATION)\n+          {\n+            at = region_get_automation_track (r1_region);\n+          }\n+        track_add_region (arranger_object_get_track (r1), (ZRegion *)*obj, at,\n+                          ((ZRegion *)r1)->id.lane_pos, 1, fire_events);\n+      }\n+      break;\n+    case ARRANGER_OBJECT_TYPE_MIDI_NOTE:\n+      {\n+        ZRegion *parent_region = midi_note_get_region (((MidiNote *)r1));\n+        midi_region_insert_midi_note (\n+            parent_region, (MidiNote *)*obj,\n+            ((ZRegion *)(parent_region))->num_midi_notes, 1);\n+      }\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  switch (r1->type) /* { dg-bogus \"dereference of NULL 'r1'\" } */\n+    {\n+    /* .... */\n+    default:\n+      break;\n+    }\n+  /* .... */\n+}"}, {"sha": "7c71a71c9305a0d44dcf2bfccbd9e9dd65f206cc", "filename": "gcc/testsuite/gcc.dg/analyzer/attribute-nonnull.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c?ref=dcfc7ac94dbcf6c86c0c58ce6dc1d8bd853e4093", "patch": "@@ -1,3 +1,5 @@\n+#include \"analyzer-decls.h\"\n+\n #include <stdlib.h>\n \n extern void foo(void *ptrA, void *ptrB, void *ptrC) /* { dg-message \"argument 1 of 'foo' must be non-null\" } */\n@@ -81,3 +83,19 @@ void test_5 (void *q, void *r)\n \n   free(p);\n }\n+\n+__attribute__((nonnull(1, 3)))\n+void test_6 (void *p, void *q, void *r)\n+{\n+  __analyzer_eval (p != NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (q != NULL); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (r != NULL); /* { dg-warning \"TRUE\" } */\n+}\n+\n+__attribute__((nonnull))\n+void test_7 (void *p, void *q, void *r)\n+{\n+  __analyzer_eval (p != NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (q != NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (r != NULL); /* { dg-warning \"TRUE\" } */\n+}"}]}