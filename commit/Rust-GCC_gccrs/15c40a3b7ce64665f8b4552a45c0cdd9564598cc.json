{"sha": "15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjNDBhM2I3Y2U2NDY2NWY4YjQ1NTJhNDVjMGNkZDk1NjQ1OThjYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-12-19T15:22:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-12-19T15:22:27Z"}, "message": "C++: better locations for bogus initializations (PR c++/88375)\n\nPR c++/88375 reports that errors relating to invalid conversions in\ninitializations are reported at unhelpfully vague locations, as in\ne.g.:\n\nenum struct a : int {\n  one, two\n};\n\nstruct foo {\n  int e1, e2;\n  a e3;\n} arr[] = {\n  { 1, 2, a::one },\n  { 3, a::two },\n  { 4, 5, a::two }\n};\n\nfor which g++ trunk emits the vague:\n\npr88375.cc:12:1: error: cannot convert 'a' to 'int' in initialization\n   12 | };\n      | ^\n\nwith the error at the final closing brace.\n\nThis patch uses location information for the initializers, converting the\nabove to:\n\npr88375.cc:10:11: error: cannot convert 'a' to 'int' in initialization\n   10 |   { 3, a::two },\n      |        ~~~^~~\n      |           |\n      |           a\n\nhighlighting which subexpression is problematic, and its type.\n\nIdeally we'd also issue a note showing the field decl being initialized,\nbut that turned out to be more invasive.\n\ngcc/cp/ChangeLog:\n\tPR c++/88375\n\t* typeck.c (convert_for_assignment): Capture location of rhs\n\tbefore stripping, and if available.  Use the location when\n\tcomplaining about bad conversions, labelling it with the\n\trhstype if the location was present.\n\t* typeck2.c (digest_init_r): Capture location of init before\n\tstripping.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/88375\n\t* g++.dg/init/pr88375-2.C: New test.\n\t* g++.dg/init/pr88375.C: New test.\n\nFrom-SVN: r267276", "tree": {"sha": "19d7b2382480d268226940b03efa216e2a1a66a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d7b2382480d268226940b03efa216e2a1a66a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c187162fa29f40746b8794bcbc0c4c52a497f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c187162fa29f40746b8794bcbc0c4c52a497f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c187162fa29f40746b8794bcbc0c4c52a497f31"}], "stats": {"total": 136, "additions": 114, "deletions": 22}, "files": [{"sha": "7b794612c8be166ffb94f04872ff8d3dae0ec0b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -1,3 +1,13 @@\n+2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88375\n+\t* typeck.c (convert_for_assignment): Capture location of rhs\n+\tbefore stripping, and if available.  Use the location when\n+\tcomplaining about bad conversions, labelling it with the\n+\trhstype if the location was present.\n+\t* typeck2.c (digest_init_r): Capture location of init before\n+\tstripping.\n+\n 2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/87504"}, {"sha": "ef317f5cc7dce71bf1a70cd80cfceccd303575a8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -8852,6 +8852,7 @@ convert_for_assignment (tree type, tree rhs,\n   enum tree_code coder;\n \n   location_t rhs_loc = EXPR_LOC_OR_LOC (rhs, input_location);\n+  bool has_loc = EXPR_LOCATION (rhs) != UNKNOWN_LOCATION;\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue,\n      but preserve location wrappers.  */\n   if (TREE_CODE (rhs) == NON_LVALUE_EXPR\n@@ -8892,7 +8893,7 @@ convert_for_assignment (tree type, tree rhs,\n   if (coder == VOID_TYPE)\n     {\n       if (complain & tf_error)\n-\terror (\"void value not ignored as it ought to be\");\n+\terror_at (rhs_loc, \"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n \n@@ -8964,35 +8965,43 @@ convert_for_assignment (tree type, tree rhs,\n \t\t\t\t\t     rhstype, type,\n \t\t\t\t\t     fndecl, parmnum);\n \t      else\n-\t\tswitch (errtype)\n-\t\t  {\n+\t\t{\n+\t\t  range_label_for_type_mismatch label (rhstype, type);\n+\t\t  gcc_rich_location richloc (rhs_loc, has_loc ? &label : NULL);\n+\t\t  switch (errtype)\n+\t\t    {\n \t\t    case ICR_DEFAULT_ARGUMENT:\n-\t\t      error (\"cannot convert %qH to %qI in default argument\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc,\n+\t\t\t\t\"cannot convert %qH to %qI in default argument\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    case ICR_ARGPASS:\n-\t\t      error (\"cannot convert %qH to %qI in argument passing\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc,\n+\t\t\t\t\"cannot convert %qH to %qI in argument passing\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    case ICR_CONVERTING:\n-\t\t      error (\"cannot convert %qH to %qI\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc, \"cannot convert %qH to %qI\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    case ICR_INIT:\n-\t\t      error (\"cannot convert %qH to %qI in initialization\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc,\n+\t\t\t\t\"cannot convert %qH to %qI in initialization\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    case ICR_RETURN:\n-\t\t      error (\"cannot convert %qH to %qI in return\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc, \"cannot convert %qH to %qI in return\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    case ICR_ASSIGN:\n-\t\t      error (\"cannot convert %qH to %qI in assignment\",\n-\t\t\t     rhstype, type);\n+\t\t      error_at (&richloc,\n+\t\t\t\t\"cannot convert %qH to %qI in assignment\",\n+\t\t\t\trhstype, type);\n \t\t      break;\n \t\t    default:\n \t\t      gcc_unreachable();\n \t\t  }\n+\t\t}\n \t      if (TYPE_PTR_P (rhstype)\n \t\t  && TYPE_PTR_P (type)\n \t\t  && CLASS_TYPE_P (TREE_TYPE (rhstype))\n@@ -9059,9 +9068,7 @@ convert_for_assignment (tree type, tree rhs,\n       && TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE\n       && (complain & tf_warning))\n     {\n-      location_t loc = cp_expr_loc_or_loc (rhs, input_location);\n-\n-      warning_at (loc, OPT_Wparentheses,\n+      warning_at (rhs_loc, OPT_Wparentheses,\n \t\t  \"suggest parentheses around assignment used as truth value\");\n       TREE_NO_WARNING (rhs) = 1;\n     }"}, {"sha": "209832b19ea9eda4745d3edf461c39b09d2757d1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -1050,14 +1050,16 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \t\t\t\t\tcomplain))\n     return error_mark_node;\n \n+  location_t loc = cp_expr_loc_or_loc (init, input_location);\n+\n+  tree stripped_init = init;\n+\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue\n      (g++.old-deja/g++.law/casts2.C).  */\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n-    init = TREE_OPERAND (init, 0);\n-\n-  location_t loc = cp_expr_loc_or_loc (init, input_location);\n+    stripped_init = TREE_OPERAND (init, 0);\n \n-  tree stripped_init = tree_strip_any_location_wrapper (init);\n+  stripped_init = tree_strip_any_location_wrapper (stripped_init);\n \n   /* Initialization of an array of chars from a string constant. The initializer\n      can be optionally enclosed in braces, but reshape_init has already removed"}, {"sha": "b996242f00b07b6adaa1e3cfb3e963f874028e41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -1,3 +1,9 @@\n+2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88375\n+\t* g++.dg/init/pr88375-2.C: New test.\n+\t* g++.dg/init/pr88375.C: New test.\n+\n 2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-c++-common/Wtautological-compare-ranges.c: New test."}, {"sha": "97ed72e7a61de1c35d2b3f0563e645652842aab6", "filename": "gcc/testsuite/g++.dg/init/pr88375-2.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375-2.C?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+enum struct a : int {\n+  one, two\n+};\n+\n+constexpr int fn () { return 42; }\n+\n+struct foo {\n+  int e1, e2;\n+  a e3;\n+} arr[] = {\n+  { 3, a::two }, // { dg-error \"11: cannot convert 'a' to 'int' in initialization\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   { 3, a::two },\n+        ~~~^~~\n+           |\n+           a\n+     { dg-end-multiline-output \"\" } */\n+  { 6, 7, fn() }, // { dg-error \"13: cannot convert 'int' to 'a' in initialization\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   { 6, 7, fn() },\n+           ~~^~\n+             |\n+             int\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+struct bar {\n+  const char *f1;\n+  int f2;\n+} arr_2[] = {\n+  { 42 }, // { dg-error \"5: invalid conversion from 'int' to 'const char\\\\*'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   { 42 },\n+     ^~\n+     |\n+     int\n+     { dg-end-multiline-output \"\" } */\n+};"}, {"sha": "21dd6c1006fe746e6a8f09b0cdcc5d8c938120bc", "filename": "gcc/testsuite/g++.dg/init/pr88375.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c40a3b7ce64665f8b4552a45c0cdd9564598cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr88375.C?ref=15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target c++11 } }\n+\n+enum struct a : int {\n+  one, two\n+};\n+\n+constexpr int fn () { return 42; }\n+\n+struct foo {\n+  int e1, e2;\n+  a e3;\n+} arr[] = {\n+  { 1, 2, a::one },\n+  { 3, a::two }, // { dg-error \"11: cannot convert 'a' to 'int' in initialization\" }\n+  { 6, 7, 8 }, // { dg-error \"11: cannot convert 'int' to 'a' in initialization\" }\n+  { 6, 7, fn() }, // { dg-error \"13: cannot convert 'int' to 'a' in initialization\" }\n+};\n+\n+struct bar {\n+  const char *f1;\n+  int f2;\n+} arr_2[] = {\n+  { \"hello world\", 42 },\n+  { 42 }, // { dg-error \"5: invalid conversion from 'int' to 'const char\\\\*'\" }\n+  { \"hello\", \"world\" }, // { dg-error \"14: invalid conversion from 'const char\\\\*' to 'int'\" }\n+};"}]}