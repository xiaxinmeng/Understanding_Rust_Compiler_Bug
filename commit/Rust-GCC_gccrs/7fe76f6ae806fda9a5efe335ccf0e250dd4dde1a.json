{"sha": "7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlNzZmNmFlODA2ZmRhOWE1ZWZlMzM1Y2NmMGUyNTBkZDRkZGUxYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-09-06T14:13:21Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-09-06T14:13:21Z"}, "message": "Detect whether target can use -fprofile-update=atomic\n\n\tPR gcov-profile/77378\n\tPR gcov-profile/77466\n\t* libgcov-profiler.c: Use __GCC_HAVE_SYNC_COMPARE_AND_SWAP_{4,8} to\n\tconditionaly enable/disable *_atomic functions.\n\tPR gcov-profile/77378\n\tPR gcov-profile/77466\n\t* tree-profile.c (tree_profiling): Detect whether target can use\n\t-fprofile-update=atomic.\n\tPR gcov-profile/77378\n\tPR gcov-profile/77466\n\t* gcc.dg/profile-update-warning.c: New test.\n\nFrom-SVN: r240008", "tree": {"sha": "315ef19a1505b76db80cb9f8f37a31a21332de73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/315ef19a1505b76db80cb9f8f37a31a21332de73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "209b636eddd6602c55b4a65237578953b7d80225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209b636eddd6602c55b4a65237578953b7d80225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209b636eddd6602c55b4a65237578953b7d80225"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "e23891e51552fc76dd374f597fe5eb4d5c1ffe9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -1,3 +1,10 @@\n+2016-09-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/77378\n+\tPR gcov-profile/77466\n+\t* tree-profile.c (tree_profiling): Detect whether target can use\n+\t-fprofile-update=atomic.\n+\n 2016-09-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77479"}, {"sha": "80905adf31473fa47d4df18189e4622efd91bb0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -1,3 +1,9 @@\n+2016-09-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/77378\n+\tPR gcov-profile/77466\n+\t* gcc.dg/profile-update-warning.c: New test.\n+\n 2016-09-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77479"}, {"sha": "0614fad960f120b13f6ebed4c8703c034919feff", "filename": "gcc/testsuite/gcc.dg/profile-update-warning.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-update-warning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-update-warning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-update-warning.c?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-fprofile-update=atomic -fprofile-generate -march=i386 -m32\" } */\n+\n+int main(int argc, char *argv[])\n+{\n+  return 0;\n+} /* { dg-warning \"target does not support atomic profile update, single mode is selected\" } */"}, {"sha": "69b48e59be412a98c33699621432915b12b4c190", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -528,13 +528,48 @@ gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n+#ifndef HAVE_sync_compare_and_swapsi\n+#define HAVE_sync_compare_and_swapsi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapsi\n+#define HAVE_atomic_compare_and_swapsi 0\n+#endif\n+\n+#ifndef HAVE_sync_compare_and_swapdi\n+#define HAVE_sync_compare_and_swapdi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapdi\n+#define HAVE_atomic_compare_and_swapdi 0\n+#endif\n+\n /* Profile all functions in the callgraph.  */\n \n static unsigned int\n tree_profiling (void)\n {\n   struct cgraph_node *node;\n \n+  /* Verify whether we can utilize atomic update operations.  */\n+  if (flag_profile_update == PROFILE_UPDATE_ATOMIC)\n+    {\n+      bool can_support = false;\n+      unsigned HOST_WIDE_INT gcov_type_size\n+\t= tree_to_uhwi (TYPE_SIZE_UNIT (get_gcov_type ()));\n+      if (gcov_type_size == 4)\n+\tcan_support\n+\t  = HAVE_sync_compare_and_swapsi || HAVE_atomic_compare_and_swapsi;\n+      else if (gcov_type_size == 8)\n+\tcan_support\n+\t  = HAVE_sync_compare_and_swapdi || HAVE_atomic_compare_and_swapdi;\n+\n+      if (!can_support)\n+      {\n+\twarning (0, \"target does not support atomic profile update, \"\n+\t\t \"single mode is selected\");\n+\tflag_profile_update = PROFILE_UPDATE_SINGLE;\n+      }\n+    }\n+\n   /* This is a small-ipa pass that gets called only once, from\n      cgraphunit.c:ipa_passes().  */\n   gcc_assert (symtab->state == IPA_SSA);"}, {"sha": "8ad8ef5802db740f2a712995c392d537c11b7cc6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -1,3 +1,10 @@\n+2016-09-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/77378\n+\tPR gcov-profile/77466\n+\t* libgcov-profiler.c: Use __GCC_HAVE_SYNC_COMPARE_AND_SWAP_{4,8} to\n+\tconditionaly enable/disable *_atomic functions.\n+\n 2016-08-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.host (i[34567]86-*-* | x86_64-*-*): Enable TFmode soft-fp"}, {"sha": "d9217b9885b0854343df6a6baccac340df964e2d", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=7fe76f6ae806fda9a5efe335ccf0e250dd4dde1a", "patch": "@@ -26,6 +26,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"libgcov.h\"\n #if !defined(inhibit_libc)\n \n+/* Detect whether target can support atomic update of profilers.  */\n+#if __SIZEOF_LONG_LONG__ == 4 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+#define GCOV_SUPPORTS_ATOMIC 1\n+#else\n+#if __SIZEOF_LONG_LONG__ == 8 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\n+#define GCOV_SUPPORTS_ATOMIC 1\n+#else\n+#define GCOV_SUPPORTS_ATOMIC 0\n+#endif\n+#endif\n+\n #ifdef L_gcov_interval_profiler\n /* If VALUE is in interval <START, START + STEPS - 1>, then increases the\n    corresponding counter in COUNTERS.  If the VALUE is above or below\n@@ -46,7 +57,7 @@ __gcov_interval_profiler (gcov_type *counters, gcov_type value,\n }\n #endif\n \n-#ifdef L_gcov_interval_profiler_atomic\n+#if defined(L_gcov_interval_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n /* If VALUE is in interval <START, START + STEPS - 1>, then increases the\n    corresponding counter in COUNTERS.  If the VALUE is above or below\n    the interval, COUNTERS[STEPS] or COUNTERS[STEPS + 1] is increased\n@@ -80,7 +91,7 @@ __gcov_pow2_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n-#ifdef L_gcov_pow2_profiler_atomic\n+#if defined(L_gcov_pow2_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n /* If VALUE is a power of two, COUNTERS[1] is incremented.  Otherwise\n    COUNTERS[0] is incremented.  Function is thread-safe.  */\n \n@@ -134,7 +145,7 @@ __gcov_one_value_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n-#ifdef L_gcov_one_value_profiler_atomic\n+#if defined(L_gcov_one_value_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n \n /* Update one value profilers (COUNTERS) for a given VALUE.\n \n@@ -342,6 +353,7 @@ __gcov_time_profiler (gcov_type* counters)\n     counters[0] = ++function_counter;\n }\n \n+#if GCOV_SUPPORTS_ATOMIC\n /* Sets corresponding COUNTERS if there is no value.\n    Function is thread-safe.  */\n \n@@ -352,6 +364,7 @@ __gcov_time_profiler_atomic (gcov_type* counters)\n     counters[0] = __atomic_add_fetch (&function_counter, 1, MEMMODEL_RELAXED);\n }\n #endif\n+#endif\n \n \n #ifdef L_gcov_average_profiler\n@@ -366,7 +379,7 @@ __gcov_average_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n-#ifdef L_gcov_average_profiler_atomic\n+#if defined(L_gcov_average_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n /* Increase corresponding COUNTER by VALUE.  FIXME: Perhaps we want\n    to saturate up.  Function is thread-safe.  */\n \n@@ -388,7 +401,7 @@ __gcov_ior_profiler (gcov_type *counters, gcov_type value)\n }\n #endif\n \n-#ifdef L_gcov_ior_profiler_atomic\n+#if defined(L_gcov_ior_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n /* Bitwise-OR VALUE into COUNTER.  Function is thread-safe.  */\n \n void"}]}