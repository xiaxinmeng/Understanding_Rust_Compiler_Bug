{"sha": "cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyZjNiMWI2NzgzMzE3YmZhNTNiYzE1NGVhZWU1OWEwM2ZmNDdjNA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2013-03-01T10:23:21Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2013-03-01T10:23:21Z"}, "message": "re PR libstdc++/56475 (Incorrect result of configure test for /dev/random (_GLIBCXX_USE_RANDOM_TR1) for MinGW platform (and others?))\n\n\tPR libstdc++/56475\n\t* acinclude.m4 (GLIBCXX_CHECK_RANDOM_TR1): Disable check for\n\tmingw-targets.\n\t* configure: Regenerated.\n\nFrom-SVN: r196371", "tree": {"sha": "2939fecbb0a00729fd40bc8cf4aaffae5b5d3b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2939fecbb0a00729fd40bc8cf4aaffae5b5d3b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4/comments", "author": null, "committer": null, "parents": [{"sha": "63d4f19e06cc8abea84c294f8e58a87b75151a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d4f19e06cc8abea84c294f8e58a87b75151a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d4f19e06cc8abea84c294f8e58a87b75151a8a"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "0871a6a2883c407d063ea0952e0fd87e92f08c6e", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "patch": "@@ -1739,7 +1739,12 @@ AC_DEFUN([GLIBCXX_CHECK_RANDOM_TR1], [\n   AC_MSG_CHECKING([for \"/dev/random\" and \"/dev/urandom\" for TR1 random_device])\n   AC_CACHE_VAL(glibcxx_cv_random_tr1, [\n     if test -r /dev/random && test -r /dev/urandom; then\n-      glibcxx_cv_random_tr1=yes;\n+  ## For MSys environment the test above is detect as false-positive\n+  ## on mingw-targets.  So disable it explicit for them.\n+      case ${target_os} in\n+\t*mingw*) glibcxx_cv_random_tr1=no ;;\n+\t*) glibcxx_cv_random_tr1=yes ;;\n+      esac\n     else\n       glibcxx_cv_random_tr1=no;\n     fi"}, {"sha": "52b828905c2f4b454afe6be369bfd5f0f27c6bb4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2f3b1b6783317bfa53bc154eaee59a03ff47c4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cf2f3b1b6783317bfa53bc154eaee59a03ff47c4", "patch": "@@ -3530,11 +3530,11 @@ MAKEINFO=${MAKEINFO-\"${am_missing_run}makeinfo\"}\n \n # We need awk for the \"check\" target.  The system \"awk\" is bad on\n # some platforms.\n-# Always define AMTAR for backward compatibility.\n+# Always define AMTAR for backward compatibility.  Yes, it's still used\n+# in the wild :-(  We should find a proper way to deprecate it ...\n+AMTAR='$${TAR-tar}'\n \n-AMTAR=${AMTAR-\"${am_missing_run}tar\"}\n-\n-am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'\n+am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'\n \n \n \n@@ -26472,7 +26472,12 @@ $as_echo_n \"checking for \\\"/dev/random\\\" and \\\"/dev/urandom\\\" for TR1 random_dev\n else\n \n     if test -r /dev/random && test -r /dev/urandom; then\n-      glibcxx_cv_random_tr1=yes;\n+  ## For MSys environment the test above is detect as false-positive\n+  ## on mingw-targets.  So disable it explicit for them.\n+      case ${target_os} in\n+\t*mingw*) glibcxx_cv_random_tr1=no ;;\n+\t*) glibcxx_cv_random_tr1=yes ;;\n+      esac\n     else\n       glibcxx_cv_random_tr1=no;\n     fi"}]}