{"sha": "55953cea37e38f43343078f92e208fd3d1ad756d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5NTNjZWEzN2UzOGY0MzM0MzA3OGY5MmUyMDhmZDNkMWFkNzU2ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-09-05T14:50:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-09-05T14:50:25Z"}, "message": "i386.h (PREFERRED_RELOAD_CLASS): Standard fp constants load to TOS.\n\n        * i386.h (PREFERRED_RELOAD_CLASS): Standard fp constants load to TOS.\n        * i386.md (movsf, movdf, movxf): Validate memory address returned\n        from force_const_mem.  Kill useless REG_EQUAL setting code.\n\nFrom-SVN: r22269", "tree": {"sha": "e65d8d30522639992463a28b9295dfde7427ff23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e65d8d30522639992463a28b9295dfde7427ff23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55953cea37e38f43343078f92e208fd3d1ad756d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55953cea37e38f43343078f92e208fd3d1ad756d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55953cea37e38f43343078f92e208fd3d1ad756d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55953cea37e38f43343078f92e208fd3d1ad756d/comments", "author": null, "committer": null, "parents": [{"sha": "37834fc834858b246daa77fbdb3d66f458734037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37834fc834858b246daa77fbdb3d66f458734037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37834fc834858b246daa77fbdb3d66f458734037"}], "stats": {"total": 75, "additions": 23, "deletions": 52}, "files": [{"sha": "8b65a185f6049f2fea2048e9f0b7aa9db795b530", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55953cea37e38f43343078f92e208fd3d1ad756d", "patch": "@@ -1,3 +1,9 @@\n+Sat Sep  5 14:47:17 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i386.h (PREFERRED_RELOAD_CLASS): Standard fp constants load to TOS.\n+\t* i386.md (movsf, movdf, movxf): Validate memory address returned\n+\tfrom force_const_mem.  Kill useless REG_EQUAL setting code.\n+\n Sat Sep  5 14:23:31 1998  Torbjorn Granlund <tege@matematik.su.se>\n \n \t* m68k.md (zero_extendsidi2): Fix typo."}, {"sha": "7e3f72374baa91914694e9703bac6d3bc98df4fe", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=55953cea37e38f43343078f92e208fd3d1ad756d", "patch": "@@ -932,7 +932,8 @@ enum reg_class\n    movdf to do mem-to-mem moves through integer regs. */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\\\n-  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode ? NO_REGS\t\\\n+  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode \\\n+   ? (standard_80387_constant_p (X) ? FP_TOP_REG : NO_REGS) \\\n    : GET_MODE (X) == QImode && ! reg_class_subset_p (CLASS, Q_REGS) ? Q_REGS \\\n    : ((CLASS) == ALL_REGS\t\t\t\t\t\t\\\n       && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT) ? GENERAL_REGS\t\\"}, {"sha": "69134ddb96d344559e6f80c6ad971f0dfa5200b0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 51, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55953cea37e38f43343078f92e208fd3d1ad756d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=55953cea37e38f43343078f92e208fd3d1ad756d", "patch": "@@ -1234,27 +1234,14 @@\n     }\n \n   /* If we are loading a floating point constant that isn't 0 or 1\n-     into a register, indicate we need the pic register loaded.  This could\n-     be optimized into stores of constants if the target eventually moves\n-     to memory, but better safe than sorry.  */\n+     into a register, force the value to memory now, since we'll \n+     get better code out the back end.  */\n   else if ((reload_in_progress | reload_completed) == 0\n-      && GET_CODE (operands[0]) != MEM\n-      && GET_CODE (operands[1]) == CONST_DOUBLE\n-      && !standard_80387_constant_p (operands[1]))\n+\t   && GET_CODE (operands[0]) != MEM\n+\t   && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t   && !standard_80387_constant_p (operands[1]))\n     {\n-      rtx insn, note, fp_const;\n-\n-      fp_const = force_const_mem (SFmode, operands[1]);\n-      if (flag_pic)\n-\tcurrent_function_uses_pic_offset_table = 1;\n-\n-      insn = emit_insn (gen_rtx_SET (SFmode, operands[0], fp_const));\n-      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n-      if (note)\n-\tXEXP (note, 0) = operands[1];\n-      else\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n+      operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n     }\n }\")\n \n@@ -1330,6 +1317,7 @@\n     return AS1 (fxch,%0);\n }\")\n \n+\n (define_insn \"movdf_push\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:DF 1 \"general_operand\" \"*rfF,o\"))]\n@@ -1386,23 +1374,11 @@\n      optimized into stores of constants if the target eventually moves to\n      memory, but better safe than sorry.  */\n   else if ((reload_in_progress | reload_completed) == 0\n-      && GET_CODE (operands[0]) != MEM\n-      && GET_CODE (operands[1]) == CONST_DOUBLE\n-      && !standard_80387_constant_p (operands[1]))\n+\t   && GET_CODE (operands[0]) != MEM\n+\t   && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t   && !standard_80387_constant_p (operands[1]))\n     {\n-      rtx insn, note, fp_const;\n-\n-      fp_const = force_const_mem (DFmode, operands[1]);\n-      if (flag_pic)\n-\tcurrent_function_uses_pic_offset_table = 1;\n-\n-      insn = emit_insn (gen_rtx_SET (DFmode, operands[0], fp_const));\n-      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n-      if (note)\n-\tXEXP (note, 0) = operands[1];\n-      else\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n+      operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n     }\n }\")\n \n@@ -1535,23 +1511,11 @@\n      be optimized into stores of constants if the target eventually moves\n      to memory, but better safe than sorry.  */\n   else if ((reload_in_progress | reload_completed) == 0\n-      && GET_CODE (operands[0]) != MEM\n-      && GET_CODE (operands[1]) == CONST_DOUBLE\n-      && !standard_80387_constant_p (operands[1]))\n+\t   && GET_CODE (operands[0]) != MEM\n+\t   && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t   && !standard_80387_constant_p (operands[1]))\n     {\n-      rtx insn, note, fp_const;\n-\n-      fp_const = force_const_mem (XFmode, operands[1]);\n-      if (flag_pic)\n-\tcurrent_function_uses_pic_offset_table = 1;\n-\n-      insn = emit_insn (gen_rtx_SET (XFmode, operands[0], fp_const));\n-      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n-      if (note)\n-\tXEXP (note, 0) = operands[1];\n-      else\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n+      operands[1] = validize_mem (force_const_mem (XFmode, operands[1]));\n     }\n }\")\n "}]}