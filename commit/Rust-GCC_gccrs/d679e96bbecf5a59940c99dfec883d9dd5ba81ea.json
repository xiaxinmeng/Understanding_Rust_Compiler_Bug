{"sha": "d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3OWU5NmJiZWNmNWE1OTk0MGM5OWRmZWM4ODNkOWRkNWJhODFlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-01-15T08:41:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-01-15T08:41:08Z"}, "message": "re PR tree-optimization/64365 (Predictive commoning after loop vectorization produces incorrect code.)\n\n2015-01-15  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/64365\n\t* tree-data-ref.c (dr_analyze_indices): Make sure that accesses\n\tfor MEM_REF access functions with the same base can never partially\n\toverlap.\n\n\t* gcc.dg/torture/pr64365.c: New testcase.\n\nFrom-SVN: r219634", "tree": {"sha": "5587549503935cc2c2538ef2bf5ef2be384b58d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5587549503935cc2c2538ef2bf5ef2be384b58d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "2ab8dde144d9c549048e3faf0af80630b5e61d0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "patch": "@@ -1,3 +1,10 @@\n+2015-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64365\n+\t* tree-data-ref.c (dr_analyze_indices): Make sure that accesses\n+\tfor MEM_REF access functions with the same base can never partially\n+\toverlap.\n+\n 2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n \n \t* common.opt: New option -fstack-protector-explicit."}, {"sha": "c2c10c275dd6db5b49dd96f68b320ad7b35e0182", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "patch": "@@ -1,3 +1,8 @@\n+2015-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64365\n+\t* gcc.dg/torture/pr64365.c: New testcase.\n+\n 2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n \n \t* gcc.dg/stackprotectexplicit1.c: New test."}, {"sha": "169993e6df078e2ddd7c9655ccadf06c60bc9016", "filename": "gcc/testsuite/gcc.dg/torture/pr64365.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64365.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64365.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64365.c?ref=d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+extern void abort (void);\n+extern int memcmp (const void * , const void *, __SIZE_TYPE__);\n+\n+void __attribute__((noinline,noclone))\n+foo(int *in)\n+{\n+  int i;\n+  for (i = 62; i >= 10; i--)\n+    {\n+      in[i - 8] -= in[i];\n+      in[i - 5] += in[i] * 2;\n+      in[i - 4] += in[i];\n+    }\n+}\n+\n+int main()\n+{\n+  int x[64];\n+  int y[64] = { 0, 1, -2380134, -1065336, -1026376, 3264240, 3113534, 2328130, 3632054, 3839634, 2380136, 1065339, 1026380, 1496037, 1397286, 789976, 386408, 450984, 597112, 497464, 262008, 149184, 194768, 231519, 173984, 87753, 60712, 82042, 87502, 60014, 30050, 25550, 33570, 32386, 20464, 10675, 10868, 13329, 11794, 6892, 3988, 4564, 5148, 4228, 2284, 1568, 1848, 1943, 1472, 741, 628, 702, 714, 474, 230, 234, 238, 242, 120, 59, 60, 61, 62, 63 };\n+  int i;\n+\n+  for (i = 0; i < 64; ++i)\n+    {\n+      x[i] = i;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (x);\n+\n+  if (memcmp (x, y, sizeof (x)) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "20a31bb738f48d15f9d0d8748a034f59ec3b5131", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d679e96bbecf5a59940c99dfec883d9dd5ba81ea/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=d679e96bbecf5a59940c99dfec883d9dd5ba81ea", "patch": "@@ -992,6 +992,22 @@ dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n \t\t\t\tfold_convert (ssizetype, memoff));\n \t      memoff = build_int_cst (TREE_TYPE (memoff), 0);\n \t    }\n+\t  /* Adjust the offset so it is a multiple of the access type\n+\t     size and thus we separate bases that can possibly be used\n+\t     to produce partial overlaps (which the access_fn machinery\n+\t     cannot handle).  */\n+\t  wide_int rem;\n+\t  if (TYPE_SIZE_UNIT (TREE_TYPE (ref))\n+\t      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (ref))) == INTEGER_CST\n+\t      && !integer_zerop (TYPE_SIZE_UNIT (TREE_TYPE (ref))))\n+\t    rem = wi::mod_trunc (off, TYPE_SIZE_UNIT (TREE_TYPE (ref)), SIGNED);\n+\t  else\n+\t    /* If we can't compute the remainder simply force the initial\n+\t       condition to zero.  */\n+\t    rem = off;\n+\t  off = wide_int_to_tree (ssizetype, wi::sub (off, rem));\n+\t  memoff = wide_int_to_tree (TREE_TYPE (memoff), rem);\n+\t  /* And finally replace the initial condition.  */\n \t  access_fn = chrec_replace_initial_condition\n \t      (access_fn, fold_convert (orig_type, off));\n \t  /* ???  This is still not a suitable base object for"}]}