{"sha": "829931ec93ab7d5ab73f31be9da504abb6ae459e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5OTMxZWM5M2FiN2Q1YWI3M2YzMWJlOWRhNTA0YWJiNmFlNDU5ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-14T00:21:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-15T00:34:52Z"}, "message": "libgo: various fixes for Solaris support\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/342189", "tree": {"sha": "40c9a1476aeaddc88721cc6556d6c07ba133d483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40c9a1476aeaddc88721cc6556d6c07ba133d483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/829931ec93ab7d5ab73f31be9da504abb6ae459e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829931ec93ab7d5ab73f31be9da504abb6ae459e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829931ec93ab7d5ab73f31be9da504abb6ae459e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829931ec93ab7d5ab73f31be9da504abb6ae459e/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd8f1982c65866eba435112633db2a34d2814a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd8f1982c65866eba435112633db2a34d2814a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd8f1982c65866eba435112633db2a34d2814a7"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "950f1797b55959f9b90a0dd3a94d649905fa3320", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -1,4 +1,4 @@\n-f2b7a2ce94127ad444a772bd1631516c5c67fb73\n+77bc32767b61feb6499ca7921e96b356603517dc\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9d0f0944e183eea8558fe02f48f5844fcdb95669", "filename": "libgo/go/internal/syscall/unix/getrandom_solaris.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_solaris.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -7,12 +7,13 @@ package unix\n import (\n \t\"sync/atomic\"\n \t\"syscall\"\n-\t\"unsafe\"\n )\n \n //extern getrandom\n func libc_getrandom(*byte, uintptr, uint32) uintptr\n \n+var getrandomUnsupported int32 // atomic\n+\n // GetRandomFlag is a flag supported by the getrandom system call.\n type GetRandomFlag uintptr\n "}, {"sha": "43b6a044047a6fc809759c810c1e35562e70855f", "filename": "libgo/go/os/user/decls_solaris.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fos%2Fuser%2Fdecls_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fos%2Fuser%2Fdecls_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fuser%2Fdecls_solaris.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -2,8 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build solaris\n-// +build cgo\n+//go:build solaris && cgo\n+// +build solaris,cgo\n \n package user\n \n@@ -22,3 +22,6 @@ func libc_getgrnam_r(name *byte, grp *syscall.Group, buf *byte, buflen syscall.S\n \n //extern __posix_getgrgid_r\n func libc_getgrgid_r(gid syscall.Gid_t, grp *syscall.Group, buf *byte, buflen syscall.Size_t, result **syscall.Group) int\n+\n+//extern getgrouplist\n+func libc_getgrouplist(user *byte, group syscall.Gid_t, groups *syscall.Gid_t, ngroups *int32) int"}, {"sha": "e3633af7ccf77e880a1a0a09bd2bb92189906350", "filename": "libgo/go/runtime/crash_test.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fruntime%2Fcrash_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fruntime%2Fcrash_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fcrash_test.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -744,6 +744,10 @@ func TestTimePprof(t *testing.T) {\n \n // Test that runtime.abort does so.\n func TestAbort(t *testing.T) {\n+\tif runtime.Compiler == \"gccgo\" && runtime.GOOS == \"solaris\" {\n+\t\tt.Skip(\"not supported by gofrontend on Solaris\")\n+\t}\n+\n \t// Pass GOTRACEBACK to ensure we get runtime frames.\n \toutput := runTestProg(t, \"testprog\", \"Abort\", \"GOTRACEBACK=system\")\n \tif want := \"runtime.abort\"; !strings.Contains(output, want) {\n@@ -805,6 +809,10 @@ func TestRuntimePanic(t *testing.T) {\n \n // Test that g0 stack overflows are handled gracefully.\n func TestG0StackOverflow(t *testing.T) {\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tt.Skip(\"g0 stack overflow not supported by gofrontend\")\n+\t}\n+\n \ttestenv.MustHaveExec(t)\n \n \tswitch runtime.GOOS {"}, {"sha": "ad65f63c57b2ad54ed3e489e999cab07eb48c5a6", "filename": "libgo/go/syscall/exec_bsd.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -2,8 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-//go:build dragonfly || freebsd || hurd || netbsd || (openbsd && mips64)\n-// +build dragonfly freebsd hurd netbsd openbsd,mips64\n+//go:build aix || darwin || dragonfly || freebsd || hurd || netbsd || openbsd || solaris\n+// +build aix darwin dragonfly freebsd hurd netbsd openbsd solaris\n \n package syscall\n "}, {"sha": "3b78d20db99907aeba6b1a269525b2ba897452a5", "filename": "libgo/go/syscall/exec_unix_test.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -180,7 +180,7 @@ func TestForeground(t *testing.T) {\n \n \tfpgrp := syscall.Pid_t(0)\n \n-\terrno := syscall.Ioctl(tty.Fd(), syscall.TIOCGPGRP, uintptr(unsafe.Pointer(&fpgrp)))\n+\terrno := syscall.Ioctl(tty.Fd(), syscall.TIOCGPGRP, unsafe.Pointer(&fpgrp))\n \tif errno != 0 {\n \t\tt.Fatalf(\"TIOCGPGRP failed with error code: %s\", errno)\n \t}\n@@ -217,7 +217,7 @@ func TestForeground(t *testing.T) {\n \n \t// This call fails on darwin/arm64. The failure doesn't matter, though.\n \t// This is just best effort.\n-\tsyscall.Ioctl(tty.Fd(), syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&fpgrp)))\n+\tsyscall.Ioctl(tty.Fd(), syscall.TIOCSPGRP, unsafe.Pointer(&fpgrp))\n }\n \n func TestForegroundSignal(t *testing.T) {\n@@ -231,7 +231,7 @@ func TestForegroundSignal(t *testing.T) {\n \t// equivalent.\n \tfpgrp := int32(0)\n \n-\terrno := syscall.Ioctl(tty.Fd(), syscall.TIOCGPGRP, uintptr(unsafe.Pointer(&fpgrp)))\n+\terrno := syscall.Ioctl(tty.Fd(), syscall.TIOCGPGRP, unsafe.Pointer(&fpgrp))\n \tif errno != 0 {\n \t\tt.Fatalf(\"TIOCGPGRP failed with error code: %s\", errno)\n \t}\n@@ -242,7 +242,7 @@ func TestForegroundSignal(t *testing.T) {\n \n \tdefer func() {\n \t\tsignal.Ignore(syscall.SIGTTIN, syscall.SIGTTOU)\n-\t\tsyscall.Ioctl(tty.Fd(), syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&fpgrp)))\n+\t\tsyscall.Ioctl(tty.Fd(), syscall.TIOCSPGRP, unsafe.Pointer(&fpgrp))\n \t\tsignal.Reset()\n \t}()\n "}, {"sha": "7ea5864a66d06926415041b4ed9de014ea46e478", "filename": "libgo/go/syscall/export_aix_test.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexport_aix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexport_aix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexport_aix_test.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build aix\n // +build aix\n \n package syscall\n@@ -10,7 +11,7 @@ import (\n \t\"unsafe\"\n )\n \n-func Ioctl(fd, req, arg uintptr) (err Errno) {\n-\t_, err = raw_ioctl_ptr(int(fd), req, unsafe.Pointer(arg))\n+func Ioctl(fd, req uintptr, arg unsafe.Pointer) (err Errno) {\n+\t_, err = raw_ioctl_ptr(int(fd), req, arg)\n \treturn err\n }"}, {"sha": "f32118b519d74660be19c5ac4a560d07621974a6", "filename": "libgo/go/syscall/export_unix_test.go", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexport_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Fexport_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexport_unix_test.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -2,12 +2,14 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-//go:build dragonfly || freebsd || hurd || linux || netbsd || openbsd\n-// +build dragonfly freebsd hurd linux netbsd openbsd\n+//go:build dragonfly || freebsd || hurd || linux || netbsd || openbsd || solaris\n+// +build dragonfly freebsd hurd linux netbsd openbsd solaris\n \n package syscall\n \n-func Ioctl(fd, req, arg uintptr) (err Errno) {\n-\t_, _, err = Syscall(SYS_IOCTL, fd, req, arg)\n+import \"unsafe\"\n+\n+func Ioctl(fd, req uintptr, arg unsafe.Pointer) (err Errno) {\n+\t_, err = raw_ioctl_ptr(int(fd), req, arg)\n \treturn err\n }"}, {"sha": "582833812f6a31c2ee3b757dbc267feae5e2bac7", "filename": "libgo/go/syscall/libcall_linux_utimesnano.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_utimesnano.go?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -2,6 +2,9 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build linux\n+// +build linux\n+\n // GNU/Linux version of UtimesNano.\n \n package syscall"}, {"sha": "61d830af876edcd2c8cd15ba1ccdc1ebfc6a3b95", "filename": "libgo/mkruntimeinc.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fmkruntimeinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829931ec93ab7d5ab73f31be9da504abb6ae459e/libgo%2Fmkruntimeinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmkruntimeinc.sh?ref=829931ec93ab7d5ab73f31be9da504abb6ae459e", "patch": "@@ -19,7 +19,7 @@ rm -f runtime.inc.tmp2 runtime.inc.tmp3\n # boundsError has a field name that is a C keyword, and we don't need it.\n # mSpanInuse is both a constant and a field name, and we don't need it.\n \n-grep -v \"#define _\" ${IN} | grep -v \"#define [cm][01234] \" | grep -v \"#define empty \" | grep -v \"#define \\\\$\" | grep -v \"#define mSpanInUse \" > runtime.inc.tmp2\n+grep -v \"#define _\" ${IN} | grep -v \"#define [cm][012345] \" | grep -v \"#define empty \" | grep -v \"#define \\\\$\" | grep -v \"#define mSpanInUse \" > runtime.inc.tmp2\n for pattern in '_[GP][a-z]' _Max _Lock _Sig _Trace _MHeap _Num\n do\n   grep \"#define $pattern\" ${IN} >> runtime.inc.tmp2"}]}