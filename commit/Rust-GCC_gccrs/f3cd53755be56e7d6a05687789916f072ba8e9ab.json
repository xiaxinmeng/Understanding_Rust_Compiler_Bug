{"sha": "f3cd53755be56e7d6a05687789916f072ba8e9ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZDUzNzU1YmU1NmU3ZDZhMDU2ODc3ODk5MTZmMDcyYmE4ZTlhYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-04-09T22:44:46Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-04-09T22:44:46Z"}, "message": "(output_stack_adjust): Reorganize code for readability.\n\nIf size is negative, negate and subtract it instead of adding it.\n\nFrom-SVN: r13847", "tree": {"sha": "7bf85020896380ca67e9bc4f4bb99350727a926a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf85020896380ca67e9bc4f4bb99350727a926a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3cd53755be56e7d6a05687789916f072ba8e9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3cd53755be56e7d6a05687789916f072ba8e9ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3cd53755be56e7d6a05687789916f072ba8e9ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3cd53755be56e7d6a05687789916f072ba8e9ab/comments", "author": null, "committer": null, "parents": [{"sha": "20ec31d3056be8424863e84d4261d5d5d7945cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ec31d3056be8424863e84d4261d5d5d7945cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ec31d3056be8424863e84d4261d5d5d7945cc7"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "dd540b773107f90579439597041e6b421fab7d8c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3cd53755be56e7d6a05687789916f072ba8e9ab/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3cd53755be56e7d6a05687789916f072ba8e9ab/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f3cd53755be56e7d6a05687789916f072ba8e9ab", "patch": "@@ -2485,38 +2485,42 @@ output_stack_adjust (size, reg, temp)\n {\n   if (size)\n     {\n-      rtx val = GEN_INT (size);\n-      rtx insn;\n-\n-      if (! CONST_OK_FOR_I (size))\n+      if (CONST_OK_FOR_I (size))\n+\temit_insn (gen_addsi3 (reg, reg, GEN_INT (size)));\n+      /* Try to do it with two partial adjustments; however, we must make\n+\t sure that the stack is properly aligned at all times, in case\n+\t an interrupt occurs between the two partial adjustments. */\n+      else if (CONST_OK_FOR_I (size / 2 & -4)\n+\t       && CONST_OK_FOR_I (size - (size / 2 & -4)))\n+\t{\n+\t  emit_insn (gen_addsi3 (reg, reg, GEN_INT (size / 2 & -4)));\n+\t  emit_insn (gen_addsi3 (reg, reg, GEN_INT (size - (size / 2 & -4))));\n+\t}\n+      else\n \t{\n-\t  /* Try to do it with two partial adjustments; however, must make\n-\t     sure that the stack is properly aligned at all times, in case\n-\t     an interrupt occurs between the two partial adjustments. */\n-\t  if (CONST_OK_FOR_I (size / 2 & -4)\n-\t      && CONST_OK_FOR_I (size - (size / 2 & -4)))\n+\t  rtx const_reg;\n+\n+\t  /* If TEMP is invalid, we could temporarily save a general\n+\t     register to MACL.  However, there is currently no need\n+\t     to handle this case, so just abort when we see it.  */\n+\t  if (temp < 0)\n+\t    abort ();\n+\t  const_reg = gen_rtx (REG, SImode, temp);\n+\n+\t  /* If SIZE is negative, subtract the positive value.\n+\t     This sometimes allows a constant pool entry to be shared\n+\t     between prologue and epilogue code.  */\n+\t  if (size < 0)\n \t    {\n-\t      val = GEN_INT (size / 2 & -4);\n-\t      emit_insn (gen_addsi3 (reg, reg, val));\n-\t      val = GEN_INT (size - (size / 2 & -4));\n+\t      emit_insn (gen_movsi (const_reg, GEN_INT (-size)));\n+\t      emit_insn (gen_subsi3 (reg, reg, const_reg));\n \t    }\n \t  else\n \t    {\n-\t      rtx reg;\n-\n-\t      /* If TEMP is invalid, we could temporarily save a general\n-\t\t register to MACL.  However, there is currently no need\n-\t\t to handle this case, so just abort when we see it.  */\n-\t      if (temp < 0)\n-\t\tabort ();\n-\t      reg = gen_rtx (REG, SImode, temp);\n-\t      emit_insn (gen_movsi (reg, val));\n-\t      val = reg;\n+\t      emit_insn (gen_movsi (const_reg, GEN_INT (size)));\n+\t      emit_insn (gen_addsi3 (reg, reg, const_reg));\n \t    }\n \t}\n-\n-      insn = gen_addsi3 (reg, reg, val);\n-      emit_insn (insn);\n     }\n }\n "}]}