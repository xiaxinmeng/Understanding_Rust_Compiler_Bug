{"sha": "3f570621352970945db657455e0570208ea2d70e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1NzA2MjEzNTI5NzA5NDVkYjY1NzQ1NWUwNTcwMjA4ZWEyZDcwZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-22T20:23:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-03T12:01:23Z"}, "message": "GCC_CET_HOST_FLAGS: Check if host supports multi-byte NOPs\n\nCheck if host supports multi-byte NOPs before enabling CET on host.\n\ngcc/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.\n\nlibbacktrace/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.\n\nlibcc1/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.\n\nlibcpp/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.\n\nlibdecnumber/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.\n\nlto-plugin/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.", "tree": {"sha": "090f4242816e089bc91039b07c856bc78e47ecd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090f4242816e089bc91039b07c856bc78e47ecd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f570621352970945db657455e0570208ea2d70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f570621352970945db657455e0570208ea2d70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f570621352970945db657455e0570208ea2d70e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f570621352970945db657455e0570208ea2d70e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7eb4bc94cafa745eba75c64fa483a1689a5aad"}], "stats": {"total": 242, "additions": 210, "deletions": 32}, "files": [{"sha": "f03fe88838402f90497ddd213ff43fb2d229ce4a", "filename": "gcc/configure", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -911,6 +911,7 @@ infodir\n docdir\n oldincludedir\n includedir\n+runstatedir\n localstatedir\n sharedstatedir\n sysconfdir\n@@ -1085,6 +1086,7 @@ datadir='${datarootdir}'\n sysconfdir='${prefix}/etc'\n sharedstatedir='${prefix}/com'\n localstatedir='${prefix}/var'\n+runstatedir='${localstatedir}/run'\n includedir='${prefix}/include'\n oldincludedir='/usr/include'\n docdir='${datarootdir}/doc/${PACKAGE}'\n@@ -1337,6 +1339,15 @@ do\n   | -silent | --silent | --silen | --sile | --sil)\n     silent=yes ;;\n \n+  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n+  | --runstate | --runstat | --runsta | --runst | --runs \\\n+  | --run | --ru | --r)\n+    ac_prev=runstatedir ;;\n+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n+  | --run=* | --ru=* | --r=*)\n+    runstatedir=$ac_optarg ;;\n+\n   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n     ac_prev=sbindir ;;\n   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n@@ -1474,7 +1485,7 @@ fi\n for ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n \t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n \t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n-\t\tlibdir localedir mandir\n+\t\tlibdir localedir mandir runstatedir\n do\n   eval ac_val=\\$$ac_var\n   # Remove trailing slashes.\n@@ -1627,6 +1638,7 @@ Fine tuning of the installation directories:\n   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]\n   --libdir=DIR            object code libraries [EPREFIX/lib]\n   --includedir=DIR        C header files [PREFIX/include]\n   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n@@ -19435,7 +19447,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19438 \"configure\"\n+#line 19450 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19541,7 +19553,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19544 \"configure\"\n+#line 19556 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -32022,6 +32034,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_cxx_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -32058,6 +32098,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}, {"sha": "a2f33c0f35db474d91ddd8e219a6af3f15024b68", "filename": "libbacktrace/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -12517,6 +12517,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -12553,6 +12581,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}, {"sha": "b198b0b9074511a78a86ecf7ad3dc84ff3c2daf6", "filename": "libcc1/configure", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -10777,7 +10777,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10790 \"configure\"\n+#line 10780 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10883,7 +10883,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10896 \"configure\"\n+#line 10886 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14028,16 +14028,6 @@ freebsd* | dragonfly*)\n   esac\n   ;;\n \n-gnu*)\n-  version_type=linux\n-  need_lib_prefix=no\n-  need_version=no\n-  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n-  soname_spec='${libname}${release}${shared_ext}$major'\n-  shlibpath_var=LD_LIBRARY_PATH\n-  hardcode_into_libs=yes\n-  ;;\n-\n haiku*)\n   version_type=linux\n   need_lib_prefix=no\n@@ -14159,7 +14149,7 @@ linux*oldld* | linux*aout* | linux*coff*)\n # project, but have not yet been accepted: they are GCC-local changes\n # for the time being.  (See\n # https://lists.gnu.org/archive/html/libtool-patches/2018-05/msg00000.html)\n-linux* | k*bsd*-gnu | kopensolaris*-gnu | uclinuxfdpiceabi)\n+linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu* | uclinuxfdpiceabi)\n   version_type=linux\n   need_lib_prefix=no\n   need_version=no\n@@ -14663,6 +14653,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -14699,6 +14717,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}, {"sha": "9674cd9c7a7b97b6d8975ec55b99d3842810d688", "filename": "libcpp/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -7668,6 +7668,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -7704,6 +7732,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}, {"sha": "da5302f9315e55b2c82b514d8a0e8b3881e75034", "filename": "libdecnumber/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -5321,6 +5321,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -5357,6 +5385,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}, {"sha": "26aad9dd699033473740f7e8421937c1ce3a11af", "filename": "lto-plugin/configure", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f570621352970945db657455e0570208ea2d70e/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f570621352970945db657455e0570208ea2d70e/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=3f570621352970945db657455e0570208ea2d70e", "patch": "@@ -5791,6 +5791,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -5827,6 +5855,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi\n@@ -8429,23 +8458,25 @@ _LT_EOF\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n $as_echo \"$lt_cv_ld_force_load\" >&6; }\n-    case $host_os in\n-    rhapsody* | darwin1.[012])\n+    # Allow for Darwin 4-7 (macOS 10.0-10.3) although these are not expect to\n+    # build without first building modern cctools / linker.\n+    case $host_cpu-$host_os in\n+    *-rhapsody* | *-darwin1.[012])\n       _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n-    darwin1.*)\n+    *-darwin1.*)\n       _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-    darwin*) # darwin 5.x on\n-      # if running on 10.5 or later, the deployment target defaults\n-      # to the OS version, if on x86, and 10.4, the deployment\n-      # target defaults to 10.4. Don't you love it?\n-      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n-\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n+    *-darwin*)\n+      # darwin 5.x (macOS 10.1) onwards we only need to adjust when the\n+      # deployment target is forced to an earlier version.\n+      case ${MACOSX_DEPLOYMENT_TARGET-UNSET},$host in\n+\tUNSET,*-darwin[89]*|UNSET,*-darwin[12][0123456789]*)\n+\t  ;;\n \t10.[012][,.]*)\n-\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n-\t10.*)\n-\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n-      esac\n+\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n+\t  ;;\n+\t*)\n+\t  ;;\n+     esac\n     ;;\n   esac\n     if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n@@ -11950,7 +11981,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11963 \"configure\"\n+#line 11984 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12056,7 +12087,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12069 \"configure\"\n+#line 12090 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}