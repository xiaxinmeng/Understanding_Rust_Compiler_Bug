{"sha": "cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "node_id": "C_kwDOANBUbNoAKGNiOGYyNWM1ZGM5ZjZkNTIwN2M4MjZjMmRhZmUyNWY2ODQ1OGNlYWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-27T06:26:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-27T06:26:18Z"}, "message": "reassoc: Handle OFFSET_TYPE like POINTER_TYPE in optimize_range_tests_cmp_bitwise [PR107029[\n\nAs the testcase shows, OFFSET_TYPE needs the same treatment as\nPOINTER_TYPE/REFERENCE_TYPE, otherwise we fail the same during the\nnewly added verification.  OFFSET_TYPE is signed though, so unlike\nPOINTER_TYPE/REFERENCE_TYPE it can also trigger with the\nx < 0 && y < 0 && z < 0 to (x | y | z) < 0\noptimization.\n\n2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/107029\n\t* tree-ssa-reassoc.cc (optimize_range_tests_cmp_bitwise): Treat\n\tOFFSET_TYPE like POINTER_TYPE, except that OFFSET_TYPE may be\n\tsigned and so can trigger even the (b % 4) == 3 case.\n\n\t* g++.dg/torture/pr107029.C: New test.", "tree": {"sha": "c7ab87b57ebd3b25a66ca32d85a0661ad37020ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ab87b57ebd3b25a66ca32d85a0661ad37020ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4790fe99f236c7f1b617722403e682ba2f82485f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4790fe99f236c7f1b617722403e682ba2f82485f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4790fe99f236c7f1b617722403e682ba2f82485f"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "93c7f28fb4cd64504884cf3954512144d7dfb5c2", "filename": "gcc/testsuite/g++.dg/torture/pr107029.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr107029.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr107029.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr107029.C?ref=cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "patch": "@@ -0,0 +1,19 @@\n+// PR tree-optimization/107029\n+// { dg-do compile }\n+\n+struct S { long long a; int b; };\n+long long S::*a;\n+int S::*b;\n+struct A { void foo (bool, bool); void bar (); int c; };\n+\n+void\n+A::foo (bool a, bool b)\n+{\n+  c = a || b;\n+}\n+\n+void\n+A::bar()\n+{\n+  foo (a, b);\n+}"}, {"sha": "b39c3c882c4b65494f94cefbb6e46249d044b2c9", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=cb8f25c5dc9f6d5207c826c2dafe25f68458ceaf", "patch": "@@ -3608,13 +3608,13 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \ttree type2 = NULL_TREE;\n \tbool strict_overflow_p = false;\n \tcandidates.truncate (0);\n-\tif (POINTER_TYPE_P (type1))\n+\tif (POINTER_TYPE_P (type1) || TREE_CODE (type1) == OFFSET_TYPE)\n \t  type1 = pointer_sized_int_node;\n \tfor (j = i; j; j = chains[j - 1])\n \t  {\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    strict_overflow_p |= ranges[j - 1].strict_overflow_p;\n-\t    if (POINTER_TYPE_P (type))\n+\t    if (POINTER_TYPE_P (type) || TREE_CODE (type) == OFFSET_TYPE)\n \t      type = pointer_sized_int_node;\n \t    if ((b % 4) == 3)\n \t      {\n@@ -3646,7 +3646,7 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    if (j == k)\n \t      continue;\n-\t    if (POINTER_TYPE_P (type))\n+\t    if (POINTER_TYPE_P (type) || TREE_CODE (type) == OFFSET_TYPE)\n \t      type = pointer_sized_int_node;\n \t    if ((b % 4) == 3)\n \t      {\n@@ -3677,17 +3677,28 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t\top = r->exp;\n \t\tcontinue;\n \t      }\n-\t    if (id == l || POINTER_TYPE_P (TREE_TYPE (op)))\n+\t    if (id == l\n+\t\t|| POINTER_TYPE_P (TREE_TYPE (op))\n+\t\t|| TREE_CODE (TREE_TYPE (op)) == OFFSET_TYPE)\n \t      {\n \t\tcode = (b % 4) == 3 ? BIT_NOT_EXPR : NOP_EXPR;\n \t\ttree type3 = id >= l ? type1 : pointer_sized_int_node;\n+\t\tif (code == BIT_NOT_EXPR\n+\t\t    && TREE_CODE (TREE_TYPE (op)) == OFFSET_TYPE)\n+\t\t  {\n+\t\t    g = gimple_build_assign (make_ssa_name (type3),\n+\t\t\t\t\t     NOP_EXPR, op);\n+\t\t    gimple_seq_add_stmt_without_update (&seq, g);\n+\t\t    op = gimple_assign_lhs (g);\n+\t\t  }\n \t\tg = gimple_build_assign (make_ssa_name (type3), code, op);\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t\top = gimple_assign_lhs (g);\n \t      }\n \t    tree type = TREE_TYPE (r->exp);\n \t    tree exp = r->exp;\n \t    if (POINTER_TYPE_P (type)\n+\t\t|| TREE_CODE (type) == OFFSET_TYPE\n \t\t|| (id >= l && !useless_type_conversion_p (type1, type)))\n \t      {\n \t\ttree type3 = id >= l ? type1 : pointer_sized_int_node;\n@@ -3705,7 +3716,7 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    op = gimple_assign_lhs (g);\n \t  }\n \ttype1 = TREE_TYPE (ranges[k - 1].exp);\n-\tif (POINTER_TYPE_P (type1))\n+\tif (POINTER_TYPE_P (type1) || TREE_CODE (type1) == OFFSET_TYPE)\n \t  {\n \t    gimple *g\n \t      = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, op);"}]}