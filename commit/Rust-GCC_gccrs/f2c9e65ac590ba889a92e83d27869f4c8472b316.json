{"sha": "f2c9e65ac590ba889a92e83d27869f4c8472b316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjOWU2NWFjNTkwYmE4ODlhOTJlODNkMjc4NjlmNGM4NDcyYjMxNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-27T10:49:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-27T10:49:37Z"}, "message": "[multiple changes]\n\n2004-04-27  Ed Schonberg  <schonberg@gnat.com>\n\n\t* a-wtmoio.ads: Formal type must be a modular type, not a signed\n\tinteger type.\n\n2004-04-27  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* decl.c (gnat_to_gnu_entity, case object): Call\n\t__builtin_update_setjmp_buf.\n\n\t* gigi.h (update_setjmp_buf): Deleted.\n\t(ADT_update_setjmp_buf_decl, update_setjmp_buf_decl): New.\n\n\t* misc.c: (update_setjmp_buf): Deleted.\n\n\t* trans.c (gnat_to_gnu): Call do_pending_stack_adjust and emit_queue\n\taround block of RTL.\n\n\t* utils.c (init_gigi_decls): Initialize update_setjmp_buf.\n\nFrom-SVN: r81218", "tree": {"sha": "6e6eb891c379af7ef0a0d22a61df9c3c339df288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e6eb891c379af7ef0a0d22a61df9c3c339df288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c9e65ac590ba889a92e83d27869f4c8472b316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c9e65ac590ba889a92e83d27869f4c8472b316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c9e65ac590ba889a92e83d27869f4c8472b316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c9e65ac590ba889a92e83d27869f4c8472b316/comments", "author": null, "committer": null, "parents": [{"sha": "4b763d779cd3cc674a476fa5a9c21e7481c309fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b763d779cd3cc674a476fa5a9c21e7481c309fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b763d779cd3cc674a476fa5a9c21e7481c309fd"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "80e49c378ed199a77c5a91f9b56b2142dd1d5bee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -1,3 +1,23 @@\n+2004-04-27  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* a-wtmoio.ads: Formal type must be a modular type, not a signed\n+\tinteger type.\n+\n+2004-04-27  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* decl.c (gnat_to_gnu_entity, case object): Call\n+\t__builtin_update_setjmp_buf.\n+\n+\t* gigi.h (update_setjmp_buf): Deleted.\n+\t(ADT_update_setjmp_buf_decl, update_setjmp_buf_decl): New.\n+\n+\t* misc.c: (update_setjmp_buf): Deleted.\n+\n+\t* trans.c (gnat_to_gnu): Call do_pending_stack_adjust and emit_queue\n+\taround block of RTL.\n+\n+\t* utils.c (init_gigi_decls): Initialize update_setjmp_buf.\n+\n 2004-04-26  Thomas Quinot  <quinot@act-europe.fr>\n \n \t* sem_dist.adb, exp_dist.adb: When constructing a RAS value for a local"}, {"sha": "cec719317ba824593f5281786bacded2c0e3cca8", "filename": "gcc/ada/a-wtmoio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fa-wtmoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fa-wtmoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtmoio.ads?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -42,7 +42,7 @@\n --  difference in semantics so that it is invisible to the Ada programmer.\n \n private generic\n-   type Num is range <>;\n+   type Num is mod <>;\n \n package Ada.Wide_Text_IO.Modular_IO is\n "}, {"sha": "73c35c511dc3fdbd91c87f9c83f068dbd6be6290", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -1048,7 +1048,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t|| (flag_stack_check && ! STACK_CHECK_BUILTIN\n \t\t    && 0 < compare_tree_int (DECL_SIZE_UNIT (gnu_decl),\n \t\t\t\t\t     STACK_CHECK_MAX_VAR_SIZE))))\n-\t  update_setjmp_buf (TREE_VALUE (gnu_block_stack));\n+\t  expand_expr_stmt\n+\t    (build_call_1_expr (update_setjmp_buf_decl,\n+\t\t\t\tbuild_unary_op\n+\t\t\t\t(ADDR_EXPR, NULL_TREE,\n+\t\t\t\t TREE_VALUE (gnu_block_stack))));\n \n \t/* If this is a public constant or we're not optimizing and we're not\n \t   making a VAR_DECL for it, make one just for export or debugger"}, {"sha": "99b858b223e740d9c13a35e645c7afbcd8b5b769", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -58,10 +58,6 @@ extern tree emit_stack_check (tree);\n /* Make a TRANSFORM_EXPR to later expand GNAT_NODE into code.  */\n extern tree make_transform_expr (Node_Id);\n \n-/* Update the setjmp buffer BUF with the current stack pointer.  We assume\n-   here that a __builtin_setjmp was done to BUF.  */\n-extern void update_setjmp_buf (tree);\n-\n /* GNU_TYPE is a type. Determine if it should be passed by reference by\n    default.  */\n extern int default_pass_by_ref (tree);\n@@ -346,6 +342,7 @@ enum standard_datatypes\n   ADT_get_excptr_decl,\n   ADT_setjmp_decl,\n   ADT_longjmp_decl,\n+  ADT_update_setjmp_buf_decl,\n   ADT_raise_nodefer_decl,\n   ADT_begin_handler_decl,\n   ADT_end_handler_decl,\n@@ -369,6 +366,7 @@ extern GTY(()) tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n #define get_excptr_decl gnat_std_decls[(int) ADT_get_excptr_decl]\n #define setjmp_decl gnat_std_decls[(int) ADT_setjmp_decl]\n #define longjmp_decl gnat_std_decls[(int) ADT_longjmp_decl]\n+#define update_setjmp_buf_decl gnat_std_decls[(int) ADT_update_setjmp_buf_decl]\n #define raise_nodefer_decl gnat_std_decls[(int) ADT_raise_nodefer_decl]\n #define begin_handler_decl gnat_std_decls[(int) ADT_begin_handler_decl]\n #define end_handler_decl gnat_std_decls[(int) ADT_end_handler_decl]"}, {"sha": "f40d2728367121cd3c67bdb1d60d9ad26438f171", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -671,40 +671,6 @@ make_transform_expr (Node_Id gnat_node)\n   return gnu_result;\n }\n \f\n-/* Update the setjmp buffer BUF with the current stack pointer.  We assume\n-   here that a __builtin_setjmp was done to BUF.  */\n-\n-void\n-update_setjmp_buf (tree buf)\n-{\n-  enum machine_mode sa_mode = Pmode;\n-  rtx stack_save;\n-\n-#ifdef HAVE_save_stack_nonlocal\n-  if (HAVE_save_stack_nonlocal)\n-    sa_mode = insn_data[(int) CODE_FOR_save_stack_nonlocal].operand[0].mode;\n-#endif\n-#ifdef STACK_SAVEAREA_MODE\n-  sa_mode = STACK_SAVEAREA_MODE (SAVE_NONLOCAL);\n-#endif\n-\n-  stack_save\n-    = gen_rtx_MEM (sa_mode,\n-\t\t   memory_address\n-\t\t   (sa_mode,\n-\t\t    plus_constant (expand_expr\n-\t\t\t\t   (build_unary_op (ADDR_EXPR, NULL_TREE, buf),\n-\t\t\t\t    NULL_RTX, VOIDmode, 0),\n-\t\t\t\t   2 * GET_MODE_SIZE (Pmode))));\n-\n-#ifdef HAVE_setjmp\n-  if (HAVE_setjmp)\n-    emit_insn (gen_setjmp ());\n-#endif\n-\n-  emit_stack_save (SAVE_NONLOCAL, &stack_save, NULL_RTX);\n-}\n-\f\n /* These routines are used in conjunction with GCC exception handling.  */\n \n /* Map compile-time to run-time tree for GCC exception handling scheme.  */"}, {"sha": "841d5c8e629f783f986e0d327165fec8ed56a989", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -265,6 +265,8 @@ gnat_to_gnu (Node_Id gnat_node)\n      we do generates RTL and returns error_mark_node.  */\n   if (!global_bindings_p ())\n     {\n+      do_pending_stack_adjust ();\n+      emit_queue ();\n       start_sequence ();\n       emit_note (NOTE_INSN_DELETED);\n       made_sequence = true;\n@@ -285,14 +287,19 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    gigi_abort (303);\n \t}\n \n+      do_pending_stack_adjust ();\n+      emit_queue ();\n       gnu_root = make_expr_stmt_from_rtl (first_nondeleted_insn (get_insns ()),\n \t\t\t\t\t  gnat_node);\n       end_sequence ();\n     }\n   else if (made_sequence)\n     {\n-      rtx insns = first_nondeleted_insn (get_insns ());\n+      rtx insns;\n \n+      do_pending_stack_adjust ();\n+      emit_queue ();\n+      insns = first_nondeleted_insn (get_insns ());\n       end_sequence ();\n \n       if (insns)"}, {"sha": "01be1603930ffa86c7a95cf72de62c3221ae4f6e", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c9e65ac590ba889a92e83d27869f4c8472b316/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=f2c9e65ac590ba889a92e83d27869f4c8472b316", "patch": "@@ -688,6 +688,18 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n+  /* update_setjmp_buf updates a setjmp buffer from the current stack pointer\n+     address.  */\n+  update_setjmp_buf_decl\n+    = create_subprog_decl\n+      (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n+       build_function_type (void_type_node,\n+\t\t\t    tree_cons (NULL_TREE,  jmpbuf_ptr_type, endlink)),\n+       NULL_TREE, 0, 1, 1, 0);\n+\n+  DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n+  DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n+\n   main_identifier_node = get_identifier (\"main\");\n }\n \f"}]}