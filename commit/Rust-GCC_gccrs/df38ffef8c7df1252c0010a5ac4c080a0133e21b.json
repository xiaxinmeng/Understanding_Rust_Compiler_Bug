{"sha": "df38ffef8c7df1252c0010a5ac4c080a0133e21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzOGZmZWY4YzdkZjEyNTJjMDAxMGE1YWM0YzA4MGEwMTMzZTIxYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-08-08T19:22:44Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-08-08T19:22:44Z"}, "message": "common.opt: Add debug switches.\n\n\t* common.opt: Add debug switches.\n\t* flags.h (use_gnu_debug_info_extensions): Boolify.\n\t* opts.c (write_symbols, debug_info_level,\n\tuse_gnu_debug_info_extensions): Move from toplev.c.\n\t(set_debug_level): New.\n\t(common_handle_options): Handle debug switches.\n\t(print_help): Display target options directly.\n\t* toplev.c (debug_hooks): Don't initialize.\n\t(write_symbols, debug_info_level,\n\tuse_gnu_debug_info_extensions): Move to opts.c.\n\t(debug_args, display_help, decode_g_option): Remove.\n\t(process_options): Set no debug if level zero here,\n\tand no-debug-hooks.  Error here if impossible debug format selected.\n\t* toplev.h (display_help, decode_g_option): Remove.\ntestsuite:\n\t* lib/gcc-dg.exp: Update for diagnostic change.\n\nFrom-SVN: r70253", "tree": {"sha": "625f4fdac91fb1a18f970ba0155bb6111cf6e4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/625f4fdac91fb1a18f970ba0155bb6111cf6e4d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df38ffef8c7df1252c0010a5ac4c080a0133e21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df38ffef8c7df1252c0010a5ac4c080a0133e21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df38ffef8c7df1252c0010a5ac4c080a0133e21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df38ffef8c7df1252c0010a5ac4c080a0133e21b/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7daaf8fa80c9dd9f4dc650ecd4fec7c69cf63e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daaf8fa80c9dd9f4dc650ecd4fec7c69cf63e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daaf8fa80c9dd9f4dc650ecd4fec7c69cf63e32"}], "stats": {"total": 397, "additions": 192, "deletions": 205}, "files": [{"sha": "f2da4bbff3bb0a5402dd8970ead989efdab9baac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -1,3 +1,20 @@\n+2003-08-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* common.opt: Add debug switches.\n+\t* flags.h (use_gnu_debug_info_extensions): Boolify.\n+\t* opts.c (write_symbols, debug_info_level,\n+\tuse_gnu_debug_info_extensions): Move from toplev.c.\n+\t(set_debug_level): New.\n+\t(common_handle_options): Handle debug switches.\n+\t(print_help): Display target options directly.\n+\t* toplev.c (debug_hooks): Don't initialize.\n+\t(write_symbols, debug_info_level,\n+\tuse_gnu_debug_info_extensions): Move to opts.c.\n+\t(debug_args, display_help, decode_g_option): Remove.\n+\t(process_options): Set no debug if level zero here,\n+\tand no-debug-hooks.  Error here if impossible debug format selected.\n+\t* toplev.h (display_help, decode_g_option): Remove.\n+\n 2003-08-08  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* tree.c (get_file_function_name_long): Fix size of alloca() area."}, {"sha": "546e738850579af84a9d6936b2928a8b5fb8f5f3", "filename": "gcc/common.opt", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -709,6 +709,47 @@ Put zero initialized data in the bss section\n \n g\n Common JoinedOrMissing\n+Generate debug information in default format\n+\n+gcoff\n+Common JoinedOrMissing\n+Generate debug information in COFF format\n+\n+gdwarf\n+Common JoinedOrMissing\n+Generate debug information in DWARF v1 format\n+\n+gdwarf+\n+Common JoinedOrMissing\n+Generate debug information in extended DWARF v1 format\n+\n+gdwarf-2\n+Common JoinedOrMissing\n+Generate debug information in DWARF v2 format\n+\n+ggdb\n+Common JoinedOrMissing\n+Generate debug information in default extended format\n+\n+gstabs\n+Common JoinedOrMissing\n+Generate debug information in STABS format\n+\n+gstabs+\n+Common JoinedOrMissing\n+Generate debug information in extended STABS format\n+\n+gvms\n+Common JoinedOrMissing\n+Generate debug information in VMS format\n+\n+gxcoff\n+Common JoinedOrMissing\n+Generate debug information in XCOFF format\n+\n+gxcoff+\n+Common JoinedOrMissing\n+Generate debug information in extended XCOFF format\n \n m\n Common Joined"}, {"sha": "6195fee365d9e5b7b90c738237e288df27b9b5ef", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -55,7 +55,7 @@ extern enum debug_info_level debug_info_level;\n \n /* Nonzero means use GNU-only extensions in the generated symbolic\n    debugging information.  */\n-extern int use_gnu_debug_info_extensions;\n+extern bool use_gnu_debug_info_extensions;\n \n /* Nonzero means emit debugging information only for symbols which are used.  */\n extern int flag_debug_only_used_symbols;"}, {"sha": "c9f8c6a0e08487b49610728678904bc84c18f2ad", "filename": "gcc/opts.c", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -128,6 +128,20 @@ bool warn_unused_value;\n /* Hack for cooperation between set_Wunused and set_Wextra.  */\n static bool maybe_warn_unused_parameter;\n \n+/* Type(s) of debugging information we are producing (if any).  See\n+   flags.h for the definitions of the different possible types of\n+   debugging information.  */\n+enum debug_info_type write_symbols = NO_DEBUG;\n+\n+/* Level of debugging information we are producing.  See flags.h for\n+   the definitions of the different possible levels.  */\n+enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n+\n+/* Nonzero means use GNU-only extensions in the generated symbolic\n+   debugging information.  Currently, this only has an effect when\n+   write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n+bool use_gnu_debug_info_extensions;\n+\n /* Columns of --help display.  */\n static unsigned int columns = 80;\n \n@@ -152,6 +166,8 @@ static void print_help (void);\n static void print_param_help (void);\n static void print_filtered_help (unsigned int flag);\n static unsigned int print_switch (const char *text, unsigned int indent);\n+static void set_debug_level (enum debug_info_type type, int extended,\n+\t\t\t     const char *arg);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -1383,7 +1399,46 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_g:\n-      decode_g_option (arg);\n+      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg);\n+      break;\n+\n+    case OPT_gcoff:\n+      set_debug_level (SDB_DEBUG, false, arg);\n+      break;\n+\n+    case OPT_gdwarf:\n+      if (*arg)\n+\t{\n+\t  error (\"use -gdwarf -gN for DWARF v1 level N, \"\n+\t\t \"and -gdwarf-2 for DWARF v2\" );\n+\t  break;\n+\t}\n+\n+      /* Fall through.  */\n+    case OPT_gdwarf_:\n+      set_debug_level (DWARF_DEBUG, code == OPT_gdwarf_, arg);\n+      break;\n+\n+    case OPT_gdwarf_2:\n+      set_debug_level (DWARF2_DEBUG, false, arg);\n+      break;\n+\n+    case OPT_ggdb:\n+      set_debug_level (NO_DEBUG, 2, arg);\n+      break;\n+\n+    case OPT_gstabs:\n+    case OPT_gstabs_:\n+      set_debug_level (DBX_DEBUG, code == OPT_gstabs_, arg);\n+      break;\n+\n+    case OPT_gvms:\n+      set_debug_level (VMS_DEBUG, false, arg);\n+      break;\n+\n+    case OPT_gxcoff:\n+    case OPT_gxcoff_:\n+      set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg);\n       break;\n \n     case OPT_m:\n@@ -1505,6 +1560,60 @@ fast_math_flags_set_p (void)\n \t  && !flag_errno_math);\n }\n \n+/* Handle a debug output -g switch.  EXTENDED is true or false to support\n+   extended output (2 is special and means \"-ggdb\" was given).  */\n+static void\n+set_debug_level (enum debug_info_type type, int extended, const char *arg)\n+{\n+  static bool type_explicit;\n+\n+  use_gnu_debug_info_extensions = extended;\n+\n+  if (type == NO_DEBUG)\n+    {\n+      if (write_symbols == NO_DEBUG)\n+\t{\n+\t  write_symbols = PREFERRED_DEBUGGING_TYPE;\n+\n+\t  if (extended == 2)\n+\t    {\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t      write_symbols = DWARF2_DEBUG;\n+#elif defined DBX_DEBUGGING_INFO\n+\t      write_symbols = DBX_DEBUG;\n+#endif\n+\t    }\n+\n+\t  if (write_symbols == NO_DEBUG)\n+\t    warning (\"target system does not support debug output\");\n+\t}\n+    }\n+  else\n+    {\n+      /* Does it conflict with an already selected type?  */\n+      if (type_explicit && write_symbols != NO_DEBUG && type != write_symbols)\n+\terror (\"debug format \\\"%s\\\" conflicts with prior selection\",\n+\t       debug_type_names[type]);\n+      write_symbols = type;\n+      type_explicit = true;\n+    }\n+\n+  /* A debug flag without a level defaults to level 2.  */\n+  if (*arg == '\\0')\n+    {\n+      if (!debug_info_level)\n+\tdebug_info_level = 2;\n+    }\n+  else\n+    {\n+      debug_info_level = integral_argument (arg);\n+      if (debug_info_level == (unsigned int) -1)\n+\terror (\"unrecognised debug output level \\\"%s\\\"\", arg);\n+      else if (debug_info_level > 3)\n+\terror (\"debug output level %s is too high\", arg);\n+    }\n+}\n+\n /* Output --help text.  */\n static void\n print_help (void)\n@@ -1532,7 +1641,7 @@ print_help (void)\n       print_filtered_help (1U << i);\n     }\n \n-  display_help ();\n+  display_target_options ();\n }\n \n /* Print the help for --param.  */"}, {"sha": "d1ba048adbbaf4d8da1fcbabf9eece36ca6d8643", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -1,3 +1,7 @@\n+2003-08-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lib/gcc-dg.exp: Update for diagnostic change.\n+\n 2003-08-07  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/5767"}, {"sha": "ee1d4d84a64e217ce9d63fdf1f3e11efb0243e99", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -199,7 +199,7 @@ proc gcc-dg-debug-runtest { target_compile trivial opt_opts testcases } {\n \t    set comp_output [$target_compile \\\n \t\t    \"$srcdir/$subdir/$trivial\" \"trivial.S\" assembly \\\n \t\t    \"additional_flags=$type\"]\n-\t    if { ! [string match \"*: unknown or unsupported -g option*\" \\\n+\t    if { ! [string match \"*: target system does not support the * debug format*\" \\\n \t\t    $comp_output] } {\n \t\tforeach level {1 \"\" 3} {\n \t\t    lappend DEBUG_TORTURE_OPTIONS [list \"${type}${level}\"]"}, {"sha": "15c0062b054908d59331ac0920e3bdc3e3cf0409", "filename": "gcc/toplev.c", "status": "modified", "additions": 17, "deletions": 197, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -221,7 +221,7 @@ int target_flags_explicit;\n \n /* Debug hooks - dependent upon command line options.  */\n \n-const struct gcc_debug_hooks *debug_hooks = &do_nothing_debug_hooks;\n+const struct gcc_debug_hooks *debug_hooks;\n \n /* Describes a dump file.  */\n \n@@ -355,21 +355,6 @@ enum graph_dump_types graph_dump_format;\n \n const char *asm_file_name;\n \n-/* Type(s) of debugging information we are producing (if any).\n-   See flags.h for the definitions of the different possible\n-   types of debugging information.  */\n-enum debug_info_type write_symbols = NO_DEBUG;\n-\n-/* Level of debugging information we are producing.  See flags.h\n-   for the definitions of the different possible levels.  */\n-enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n-\n-/* Nonzero means use GNU-only extensions in the generated symbolic\n-   debugging information.  */\n-/* Currently, this only has an effect when write_symbols is set to\n-   DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n-int use_gnu_debug_info_extensions = 0;\n-\n /* Nonzero means do optimizations.  -O.\n    Particular numeric values stand for particular amounts of optimization;\n    thus, -O2 stores 2 here.  However, the optimizations beyond the basic\n@@ -984,46 +969,6 @@ int align_functions_log;\n    minimum function alignment.  Zero means no alignment is forced.  */\n int force_align_functions_log;\n \n-/* Table of supported debugging formats.  */\n-static const struct\n-{\n-  const char *const arg;\n-  /* Since PREFERRED_DEBUGGING_TYPE isn't necessarily a\n-     constant expression, we use NO_DEBUG in its place.  */\n-  const enum debug_info_type debug_type;\n-  const int use_extensions_p;\n-  const char *const description;\n-} *da,\n-debug_args[] =\n-{\n-  { \"\",       NO_DEBUG, DEFAULT_GDB_EXTENSIONS,\n-    N_(\"Generate debugging info in default format\") },\n-  { \"gdb\",    NO_DEBUG, 1, N_(\"Generate debugging info in default extended format\") },\n-#ifdef DBX_DEBUGGING_INFO\n-  { \"stabs\",  DBX_DEBUG, 0, N_(\"Generate STABS format debug info\") },\n-  { \"stabs+\", DBX_DEBUG, 1, N_(\"Generate extended STABS format debug info\") },\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-  { \"dwarf\",  DWARF_DEBUG, 0, N_(\"Generate DWARF-1 format debug info\") },\n-  { \"dwarf+\", DWARF_DEBUG, 1,\n-    N_(\"Generate extended DWARF-1 format debug info\") },\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-  { \"dwarf-2\", DWARF2_DEBUG, 0, N_(\"Generate DWARF-2 debug info\") },\n-#endif\n-#ifdef XCOFF_DEBUGGING_INFO\n-  { \"xcoff\",  XCOFF_DEBUG, 0, N_(\"Generate XCOFF format debug info\") },\n-  { \"xcoff+\", XCOFF_DEBUG, 1, N_(\"Generate extended XCOFF format debug info\") },\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  { \"coff\", SDB_DEBUG, 0, N_(\"Generate COFF format debug info\") },\n-#endif\n-#ifdef VMS_DEBUGGING_INFO\n-  { \"vms\", VMS_DEBUG, 0, N_(\"Generate VMS format debug info\") },\n-#endif\n-  { 0, 0, 0, 0 }\n-};\n-\n typedef struct\n {\n   const char *const string;\n@@ -3620,22 +3565,6 @@ rest_of_compilation (tree decl)\n   timevar_pop (TV_REST_OF_COMPILATION);\n }\n \n-/* Display help for generic options.  */\n-void\n-display_help (void)\n-{\n-  unsigned long i;\n-\n-  for (i = ARRAY_SIZE (debug_args); i--;)\n-    {\n-      if (debug_args[i].description != NULL)\n-\tprintf (\"  -g%-21s %s\\n\",\n-\t\tdebug_args[i].arg, _(debug_args[i].description));\n-    }\n-\n-  display_target_options ();\n-}\n-\n /* Display help for target options.  */\n void \n display_target_options (void)\n@@ -3769,124 +3698,6 @@ const char *const debug_type_names[] =\n   \"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\", \"vms\"\n };\n \n-/* Parse a -g... command line switch.  ARG is the value after the -g.\n-   It is safe to access 'ARG - 2' to generate the full switch name.\n-   Return the number of strings consumed.  */\n-\n-void\n-decode_g_option (const char *arg)\n-{\n-  static unsigned level = 0;\n-  /* A lot of code assumes write_symbols == NO_DEBUG if the\n-     debugging level is 0 (thus -gstabs1 -gstabs0 would lose track\n-     of what debugging type has been selected).  This records the\n-     selected type.  It is an error to specify more than one\n-     debugging type.  */\n-  static enum debug_info_type selected_debug_type = NO_DEBUG;\n-  /* Nonzero if debugging format has been explicitly set.\n-     -g and -ggdb don't explicitly set the debugging format so\n-     -gdwarf -g3 is equivalent to -gdwarf3.  */\n-  static int type_explicitly_set_p = 0;\n-\n-  /* The maximum admissible debug level value.  */\n-  static const unsigned max_debug_level = 3;\n-\n-  /* Look up ARG in the table.  */\n-  for (da = debug_args; da->arg; da++)\n-    {\n-      const int da_len = strlen (da->arg);\n-\n-      if (da_len == 0 || ! strncmp (arg, da->arg, da_len))\n-\t{\n-\t  enum debug_info_type type = da->debug_type;\n-\t  const char *p = arg + da_len;\n-\n-\t  if (*p && ! ISDIGIT (*p))\n-\t    continue;\n-\n-\t  /* A debug flag without a level defaults to level 2.\n-\t     Note we do not want to call read_integral_parameter\n-\t     for that case since it will call atoi which\n-\t     will return zero.\n-\n-\t     ??? We may want to generalize the interface to\n-\t     read_integral_parameter to better handle this case\n-\t     if this case shows up often.  */\n-\t  if (*p)\n-\t    level = read_integral_parameter (p, 0, max_debug_level + 1);\n-\t  else\n-\t    level = (level == 0) ? 2 : level;\n-\n-\t  if (da_len > 1 && *p && !strncmp (arg, \"dwarf\", da_len))\n-\t    {\n-\t      error (\"use -gdwarf -g%d for DWARF v1, level %d\",\n-\t\t     level, level);\n-\t      if (level == 2)\n-\t\terror (\"use -gdwarf-2   for DWARF v2\");\n-\t    }\n-\n-\t  if (level > max_debug_level)\n-\t    {\n-\t      warning (\"\\\n-ignoring option `%s' due to invalid debug level specification\",\n-\t\t       arg - 2);\n-\t      level = debug_info_level;\n-\t    }\n-\n-\t  if (type == NO_DEBUG)\n-\t    {\n-\t      type = PREFERRED_DEBUGGING_TYPE;\n-\n-\t      if (da_len > 1 && strncmp (arg, \"gdb\", da_len) == 0)\n-\t\t{\n-#ifdef DWARF2_DEBUGGING_INFO\n-\t\t  type = DWARF2_DEBUG;\n-#else\n-#ifdef DBX_DEBUGGING_INFO\n-\t\t  type = DBX_DEBUG;\n-#endif\n-#endif\n-\t\t}\n-\t    }\n-\n-\t  if (type == NO_DEBUG)\n-\t    warning (\"`%s': unknown or unsupported -g option\", arg - 2);\n-\n-\t  /* Does it conflict with an already selected type?  */\n-\t  if (type_explicitly_set_p\n-\t      /* -g/-ggdb don't conflict with anything.  */\n-\t      && da->debug_type != NO_DEBUG\n-\t      && type != selected_debug_type)\n-\t    warning (\"`%s' ignored, conflicts with `-g%s'\",\n-\t\t     arg - 2, debug_type_names[(int) selected_debug_type]);\n-\t  else\n-\t    {\n-\t      /* If the format has already been set, -g/-ggdb\n-\t\t only change the debug level.  */\n-\t      if (type_explicitly_set_p && da->debug_type == NO_DEBUG)\n-\t\t/* Don't change debugging type.  */\n-\t\t;\n-\t      else\n-\t\t{\n-\t\t  selected_debug_type = type;\n-\t\t  type_explicitly_set_p = da->debug_type != NO_DEBUG;\n-\t\t}\n-\n-\t      write_symbols = (level == 0\n-\t\t\t       ? NO_DEBUG\n-\t\t\t       : selected_debug_type);\n-\t      use_gnu_debug_info_extensions = da->use_extensions_p;\n-\t      debug_info_level = (enum debug_info_level) level;\n-\t    }\n-\n-\t  break;\n-\t}\n-    }\n-\n-  if (! da->arg)\n-    warning (\"`-g%s': unknown or unsupported -g option\", arg);\n-}\n-\n /* Decode -m switches.  */\n /* Decode the switch -mNAME.  */\n \n@@ -4336,32 +4147,42 @@ process_options (void)\n       profile_flag = 0;\n     }\n \n+  /* A lot of code assumes write_symbols == NO_DEBUG if the debugging\n+     level is 0.  */\n+  if (debug_info_level == DINFO_LEVEL_NONE)\n+    write_symbols = NO_DEBUG;\n+\n   /* Now we know write_symbols, set up the debug hooks based on it.\n      By default we do nothing for debug output.  */\n+  if (write_symbols == NO_DEBUG)\n+    debug_hooks = &do_nothing_debug_hooks;\n #if defined(DBX_DEBUGGING_INFO)\n-  if (write_symbols == DBX_DEBUG)\n+  else if (write_symbols == DBX_DEBUG)\n     debug_hooks = &dbx_debug_hooks;\n #endif\n #if defined(XCOFF_DEBUGGING_INFO)\n-  if (write_symbols == XCOFF_DEBUG)\n+  else if (write_symbols == XCOFF_DEBUG)\n     debug_hooks = &xcoff_debug_hooks;\n #endif\n #ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n+  else if (write_symbols == SDB_DEBUG)\n     debug_hooks = &sdb_debug_hooks;\n #endif\n #ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n+  else if (write_symbols == DWARF_DEBUG)\n     debug_hooks = &dwarf_debug_hooks;\n #endif\n #ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n+  else if (write_symbols == DWARF2_DEBUG)\n     debug_hooks = &dwarf2_debug_hooks;\n #endif\n #ifdef VMS_DEBUGGING_INFO\n-  if (write_symbols == VMS_DEBUG || write_symbols == VMS_AND_DWARF2_DEBUG)\n+  else if (write_symbols == VMS_DEBUG || write_symbols == VMS_AND_DWARF2_DEBUG)\n     debug_hooks = &vmsdbg_debug_hooks;\n #endif\n+  else\n+    error (\"target system does not support the \\\"%s\\\" debug format\",\n+\t   debug_type_names[write_symbols]);\n \n   /* If auxiliary info generation is desired, open the output file.\n      This goes in the same directory as the source file--unlike\n@@ -4603,7 +4424,6 @@ do_compile (void)\n }\n \n /* Entry point of cc1, cc1plus, jc1, f771, etc.\n-   Decode command args, then call compile_file.\n    Exit code is FATAL_EXIT_CODE if can't open files or if there were\n    any errors, or SUCCESS_EXIT_CODE if compilation succeeded.\n "}, {"sha": "5adab615f91bb55d491c5044d712c4e3bada3e79", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ffef8c7df1252c0010a5ac4c080a0133e21b/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=df38ffef8c7df1252c0010a5ac4c080a0133e21b", "patch": "@@ -123,7 +123,6 @@ extern int flag_ssa_dce;\n extern int time_report;\n extern int flag_new_regalloc;\n \n-extern void display_help (void);\n extern void display_target_options (void);\n extern void print_version (FILE *, const char *);\n extern void set_target_switch (const char *);\n@@ -139,9 +138,6 @@ extern void set_fast_math_flags         (int);\n /* Handle -d switch.  */\n extern void decode_d_option\t\t(const char *);\n \n-/* Handle -g switch.  */\n-extern void decode_g_option\t\t(const char *);\n-\n /* Return true iff flags are set as if -ffast-math.  */\n extern bool fast_math_flags_set_p\t(void);\n "}]}