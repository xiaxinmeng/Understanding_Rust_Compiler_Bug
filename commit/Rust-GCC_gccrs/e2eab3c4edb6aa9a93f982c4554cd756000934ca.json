{"sha": "e2eab3c4edb6aa9a93f982c4554cd756000934ca", "node_id": "C_kwDOANBUbNoAKGUyZWFiM2M0ZWRiNmFhOWE5M2Y5ODJjNDU1NGNkNzU2MDAwOTM0Y2E", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-05T11:35:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-05T16:28:43Z"}, "message": "libstdc++:\u00a0Reduce\u00a0size\u00a0of\u00a0std::bind_front(empty_type)\u00a0result [PR108290]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108290\n\t* include/std/functional (_Bind_front): Add no_unique_address\n\tattribute to data members.\n\t* testsuite/20_util/function_objects/bind_front/107784.cc: Check\n\tsize of call wrappers with empty types for targets and bound\n\targuments.", "tree": {"sha": "80d247af4cee8e45df2a26b902ac8859b0e98ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d247af4cee8e45df2a26b902ac8859b0e98ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2eab3c4edb6aa9a93f982c4554cd756000934ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2eab3c4edb6aa9a93f982c4554cd756000934ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2eab3c4edb6aa9a93f982c4554cd756000934ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2eab3c4edb6aa9a93f982c4554cd756000934ca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efce0caf2d75dff5a83812b8da2dd3725197ac7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efce0caf2d75dff5a83812b8da2dd3725197ac7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efce0caf2d75dff5a83812b8da2dd3725197ac7c"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "5dff5be089d4cbbd1d6a5b6c6acb7122d3e2364b", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2eab3c4edb6aa9a93f982c4554cd756000934ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2eab3c4edb6aa9a93f982c4554cd756000934ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=e2eab3c4edb6aa9a93f982c4554cd756000934ca", "patch": "@@ -991,8 +991,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      std::forward<_CallArgs>(__call_args)...);\n \t}\n \n-      _Fd _M_fd;\n-      std::tuple<_BoundArgs...> _M_bound_args;\n+      [[no_unique_address]] _Fd _M_fd;\n+      [[no_unique_address]] std::tuple<_BoundArgs...> _M_bound_args;\n     };\n \n   // Avoid the overhead of an empty tuple<> if there are no bound args.\n@@ -1051,7 +1051,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n     private:\n-      _Fd _M_fd;\n+      [[no_unique_address]] _Fd _M_fd;\n     };\n \n   template<typename _Fn, typename... _Args>"}, {"sha": "f1f8cee45094928b10eb798c34a55c0a950725ef", "filename": "libstdc++-v3/testsuite/20_util/function_objects/bind_front/107784.cc", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2eab3c4edb6aa9a93f982c4554cd756000934ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2F107784.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2eab3c4edb6aa9a93f982c4554cd756000934ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2F107784.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbind_front%2F107784.cc?ref=e2eab3c4edb6aa9a93f982c4554cd756000934ca", "patch": "@@ -10,6 +10,42 @@ struct Foo\n \n void bar() { }\n \n-// PR libstdc++/107784\n+// PR libstdc++/107784 - QOI: sizeof( bind_front( Member-Function ) ) too big\n static_assert( sizeof(std::bind_front(&Foo::func)) == sizeof(&Foo::func) );\n static_assert( sizeof(std::bind_front(&bar)) == sizeof(&bar) );\n+\n+// PR libstdc++/108290 - QoI: bind_front captureless lambda is too big\n+auto empty_lambda = [](auto, auto) { return 0; };\n+\n+struct {\n+  void operator()(int, int, int) { }\n+  template<typename T> void operator()(T, T) { }\n+} empty_class;\n+\n+static_assert(sizeof(std::bind_front(empty_lambda)) == 1);\n+static_assert(sizeof(std::bind_front(empty_lambda, 1)) == sizeof(int));\n+static_assert(sizeof(std::bind_front(empty_lambda, empty_lambda)) == 2);\n+static_assert(sizeof(std::bind_front(empty_lambda, empty_class)) == 1);\n+static_assert(sizeof(std::bind_front(empty_lambda, 1, 2)) == 2 * sizeof(int));\n+static_assert(sizeof(std::bind_front(empty_lambda, '1', empty_lambda)) == 2);\n+static_assert(sizeof(std::bind_front(empty_lambda, '1', empty_class)) == 1);\n+\n+static_assert(sizeof(std::bind_front(empty_class)) == 1);\n+static_assert(sizeof(std::bind_front(empty_class, 1)) == sizeof(int));\n+static_assert(sizeof(std::bind_front(empty_class, empty_lambda)) == 1);\n+static_assert(sizeof(std::bind_front(empty_class, empty_class)) == 2);\n+static_assert(sizeof(std::bind_front(empty_class, 1, 2)) == 2 * sizeof(int));\n+static_assert(sizeof(std::bind_front(empty_class, '1', empty_lambda)) == 1);\n+static_assert(sizeof(std::bind_front(empty_class, '1', empty_class)) == 2);\n+\n+struct derived1 : decltype(std::bind_front(empty_class))\n+{\n+  int i;\n+};\n+static_assert(sizeof(derived1) == sizeof(int));\n+\n+struct derived2 : decltype(std::bind_front(empty_class, empty_lambda))\n+{\n+  int i;\n+};\n+static_assert(sizeof(derived2) == sizeof(int));"}]}