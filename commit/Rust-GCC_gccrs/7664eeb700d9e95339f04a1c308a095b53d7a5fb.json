{"sha": "7664eeb700d9e95339f04a1c308a095b53d7a5fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2NGVlYjcwMGQ5ZTk1MzM5ZjA0YTFjMzA4YTA5NWI1M2Q3YTVmYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-07T12:15:45Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-07T12:15:45Z"}, "message": "Fix bitmap registration of overheads.\n\n2019-05-07  Martin Liska  <mliska@suse.cz>\n\n\t* bitmap.c (bitmap_register): Come up with\n\talloc_descriptor_max_uid and assign it for\n\ta new bitmap.\n\t(register_overhead): Use get_descriptor as\n\ta descriptor.\n\t(release_overhead): New.\n\t(bitmap_elem_to_freelist): Call it.\n\t(bitmap_elt_clear_from): Likewise.\n\t(bitmap_obstack_free): Likewise.\n\t(bitmap_move): Sensitively release memory.\n\t* bitmap.h (struct GTY): Add alloc_descriptor and padding.\n\t(bitmap_initialize): Initialize alloc_descriptor to zero.\n\t* tree-ssa-pre.c (do_hoist_insertion): Use bitmap_move.\n\nFrom-SVN: r270942", "tree": {"sha": "b468ae4fecfc6cb7be9e2510940a0f01564a2975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b468ae4fecfc6cb7be9e2510940a0f01564a2975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7664eeb700d9e95339f04a1c308a095b53d7a5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7664eeb700d9e95339f04a1c308a095b53d7a5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7664eeb700d9e95339f04a1c308a095b53d7a5fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7664eeb700d9e95339f04a1c308a095b53d7a5fb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f708a844853eb2fe87e696d27de14cbd68896f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f708a844853eb2fe87e696d27de14cbd68896f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f708a844853eb2fe87e696d27de14cbd68896f8"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "9f3e6f833211214024de6633f31344d971b861f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7664eeb700d9e95339f04a1c308a095b53d7a5fb", "patch": "@@ -1,3 +1,19 @@\n+2019-05-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* bitmap.c (bitmap_register): Come up with\n+\talloc_descriptor_max_uid and assign it for\n+\ta new bitmap.\n+\t(register_overhead): Use get_descriptor as\n+\ta descriptor.\n+\t(release_overhead): New.\n+\t(bitmap_elem_to_freelist): Call it.\n+\t(bitmap_elt_clear_from): Likewise.\n+\t(bitmap_obstack_free): Likewise.\n+\t(bitmap_move): Sensitively release memory.\n+\t* bitmap.h (struct GTY): Add alloc_descriptor and padding.\n+\t(bitmap_initialize): Initialize alloc_descriptor to zero.\n+\t* tree-ssa-pre.c (do_hoist_insertion): Use bitmap_move.\n+\n 2019-05-07  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_build_slp_tree_2): Bump size whenever"}, {"sha": "894aefa13de6bd04c3ead40dd9dae9ea23003527", "filename": "gcc/bitmap.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=7664eeb700d9e95339f04a1c308a095b53d7a5fb", "patch": "@@ -36,18 +36,33 @@ static bitmap_element *bitmap_tree_listify_from (bitmap, bitmap_element *);\n void\n bitmap_register (bitmap b MEM_STAT_DECL)\n {\n-  bitmap_mem_desc.register_descriptor (b, BITMAP_ORIGIN, false\n-\t\t\t\t       FINAL_PASS_MEM_STAT);\n+  static unsigned alloc_descriptor_max_uid = 1;\n+  gcc_assert (b->alloc_descriptor == 0);\n+  b->alloc_descriptor = alloc_descriptor_max_uid++;\n+\n+  bitmap_mem_desc.register_descriptor (b->get_descriptor (), BITMAP_ORIGIN,\n+\t\t\t\t       false FINAL_PASS_MEM_STAT);\n }\n \n /* Account the overhead.  */\n static void\n register_overhead (bitmap b, size_t amount)\n {\n-  if (bitmap_mem_desc.contains_descriptor_for_instance (b))\n-    bitmap_mem_desc.register_instance_overhead (amount, b);\n+  unsigned *d = b->get_descriptor ();\n+  if (bitmap_mem_desc.contains_descriptor_for_instance (d))\n+    bitmap_mem_desc.register_instance_overhead (amount, d);\n+}\n+\n+/* Release the overhead.  */\n+static void\n+release_overhead (bitmap b, size_t amount, bool remove_from_map)\n+{\n+  unsigned *d = b->get_descriptor ();\n+  if (bitmap_mem_desc.contains_descriptor_for_instance (d))\n+    bitmap_mem_desc.release_instance_overhead (d, amount, remove_from_map);\n }\n \n+\n /* Global data */\n bitmap_element bitmap_zero_bits;  /* An element of all zero bits.  */\n bitmap_obstack bitmap_default_obstack;    /* The default bitmap obstack.  */\n@@ -65,7 +80,7 @@ bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n   bitmap_obstack *bit_obstack = head->obstack;\n \n   if (GATHER_STATISTICS)\n-    register_overhead (head, -((int)sizeof (bitmap_element)));\n+    release_overhead (head, sizeof (bitmap_element), false);\n \n   elt->next = NULL;\n   elt->indx = -1;\n@@ -153,7 +168,7 @@ bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n       int n = 0;\n       for (prev = elt; prev; prev = prev->next)\n \tn++;\n-      register_overhead (head, -sizeof (bitmap_element) * n);\n+      release_overhead (head, sizeof (bitmap_element) * n, false);\n     }\n \n   prev = elt->prev;\n@@ -798,7 +813,7 @@ bitmap_obstack_free (bitmap map)\n       map->first = (bitmap_element *) map->obstack->heads;\n \n       if (GATHER_STATISTICS)\n-\tregister_overhead (map, -((int)sizeof (bitmap_head)));\n+\trelease_overhead (map, sizeof (bitmap_head), true);\n \n       map->obstack->heads = map;\n     }\n@@ -872,16 +887,18 @@ bitmap_move (bitmap to, bitmap from)\n \n   bitmap_clear (to);\n \n-  *to = *from;\n-\n+  size_t sz = 0;\n   if (GATHER_STATISTICS)\n     {\n-      size_t sz = 0;\n       for (bitmap_element *e = to->first; e; e = e->next)\n \tsz += sizeof (bitmap_element);\n       register_overhead (to, sz);\n-      register_overhead (from, -sz);\n     }\n+\n+  *to = *from;\n+\n+  if (GATHER_STATISTICS)\n+    release_overhead (from, sz, false);\n }\n \f\n /* Clear a single bit in a bitmap.  Return true if the bit changed.  */"}, {"sha": "39f509db611edc1708484b76043cc9ae30d39dc8", "filename": "gcc/bitmap.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=7664eeb700d9e95339f04a1c308a095b53d7a5fb", "patch": "@@ -325,22 +325,36 @@ struct GTY(()) bitmap_head {\n   static bitmap_obstack crashme;\n   /* Poison obstack to not make it not a valid initialized GC bitmap.  */\n   CONSTEXPR bitmap_head()\n-    : indx(0), tree_form(false), first(NULL), current(NULL),\n-      obstack (&crashme)\n+    : indx (0), tree_form (false), padding (0), alloc_descriptor (0), first (NULL),\n+      current (NULL), obstack (&crashme)\n   {}\n   /* Index of last element looked at.  */\n   unsigned int indx;\n   /* False if the bitmap is in list form; true if the bitmap is in tree form.\n      Bitmap iterators only work on bitmaps in list form.  */\n-  bool tree_form;\n+  unsigned tree_form: 1;\n+  /* Next integer is shifted, so padding is needed.  */\n+  unsigned padding: 2;\n+  /* Bitmap UID used for memory allocation statistics.  */\n+  unsigned alloc_descriptor: 29;\n   /* In list form, the first element in the linked list;\n      in tree form, the root of the tree.   */\n   bitmap_element *first;\n   /* Last element looked at.  */\n   bitmap_element * GTY((skip(\"\"))) current;\n   /* Obstack to allocate elements from.  If NULL, then use GGC allocation.  */\n   bitmap_obstack * GTY((skip(\"\"))) obstack;\n+\n+  /* Dump bitmap.  */\n   void dump ();\n+\n+  /* Get bitmap descriptor UID casted to an unsigned integer pointer.\n+     Shift the descriptor because pointer_hash<Type>::hash is\n+     doing >> 3 shift operation.  */\n+  unsigned *get_descriptor ()\n+  {\n+    return (unsigned *)(ptrdiff_t)(alloc_descriptor << 3);\n+  }\n };\n \n /* Global data */\n@@ -441,6 +455,8 @@ bitmap_initialize (bitmap head, bitmap_obstack *obstack CXX_MEM_STAT_INFO)\n {\n   head->first = head->current = NULL;\n   head->indx = head->tree_form = 0;\n+  head->padding = 0;\n+  head->alloc_descriptor = 0;\n   head->obstack = obstack;\n   if (GATHER_STATISTICS)\n     bitmap_register (head PASS_MEM_STAT);"}, {"sha": "802272397889e80266411ca3b33e3d48a487aa51", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7664eeb700d9e95339f04a1c308a095b53d7a5fb/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7664eeb700d9e95339f04a1c308a095b53d7a5fb", "patch": "@@ -3533,7 +3533,7 @@ do_hoist_insertion (basic_block block)\n     return false;\n \n   /* Hack hoitable_set in-place so we can use sorted_array_from_bitmap_set.  */\n-  hoistable_set.values = availout_in_some;\n+  bitmap_move (&hoistable_set.values, &availout_in_some);\n   hoistable_set.expressions = ANTIC_IN (block)->expressions;\n \n   /* Now finally construct the topological-ordered expression set.  */"}]}