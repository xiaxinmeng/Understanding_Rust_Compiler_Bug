{"sha": "2cc777fbf4b866db1477f25e06358b1de7fb3500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjNzc3ZmJmNGI4NjZkYjE0NzdmMjVlMDYzNThiMWRlN2ZiMzUwMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:42:45Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:42:45Z"}, "message": "Change use to type-based pool allocator in\n\n\t* tree-ssa-math-opts.c (occ_new): Use new type-based pool allocator.\n\t(free_bb): Likewise.\n\t(pass_cse_reciprocals::execute): Likewise.\n\nFrom-SVN: r223957", "tree": {"sha": "b3b5486389a415cf502df95435c675088e06c111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3b5486389a415cf502df95435c675088e06c111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc777fbf4b866db1477f25e06358b1de7fb3500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc777fbf4b866db1477f25e06358b1de7fb3500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc777fbf4b866db1477f25e06358b1de7fb3500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc777fbf4b866db1477f25e06358b1de7fb3500/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2c893bb4a4a7fc3506f83ca6c01837148aeadb"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "7f28f205fa49be37d7bc102588eba76284d0de6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc777fbf4b866db1477f25e06358b1de7fb3500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc777fbf4b866db1477f25e06358b1de7fb3500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cc777fbf4b866db1477f25e06358b1de7fb3500", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-math-opts.c (occ_new): Use new type-based pool allocator.\n+\t(free_bb): Likewise.\n+\t(pass_cse_reciprocals::execute): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* tree-sra.c (sra_initialize): Use new type-based pool allocator."}, {"sha": "0df755b8d179861e4606c0d0be794c0719342f62", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc777fbf4b866db1477f25e06358b1de7fb3500/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc777fbf4b866db1477f25e06358b1de7fb3500/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=2cc777fbf4b866db1477f25e06358b1de7fb3500", "patch": "@@ -229,7 +229,7 @@ static struct\n static struct occurrence *occ_head;\n \n /* Allocation pool for getting instances of \"struct occurrence\".  */\n-static alloc_pool occ_pool;\n+static pool_allocator<occurrence> *occ_pool;\n \n \n \n@@ -240,7 +240,7 @@ occ_new (basic_block bb, struct occurrence *children)\n {\n   struct occurrence *occ;\n \n-  bb->aux = occ = (struct occurrence *) pool_alloc (occ_pool);\n+  bb->aux = occ = occ_pool->allocate ();\n   memset (occ, 0, sizeof (struct occurrence));\n \n   occ->bb = bb;\n@@ -468,7 +468,7 @@ free_bb (struct occurrence *occ)\n   next = occ->next;\n   child = occ->children;\n   occ->bb->aux = NULL;\n-  pool_free (occ_pool, occ);\n+  occ_pool->remove (occ);\n \n   /* Now ensure that we don't recurse unless it is necessary.  */\n   if (!child)\n@@ -572,9 +572,8 @@ pass_cse_reciprocals::execute (function *fun)\n   basic_block bb;\n   tree arg;\n \n-  occ_pool = create_alloc_pool (\"dominators for recip\",\n-\t\t\t\tsizeof (struct occurrence),\n-\t\t\t\tn_basic_blocks_for_fn (fun) / 3 + 1);\n+  occ_pool = new pool_allocator<occurrence>\n+    (\"dominators for recip\", n_basic_blocks_for_fn (fun) / 3 + 1);\n \n   memset (&reciprocal_stats, 0, sizeof (reciprocal_stats));\n   calculate_dominance_info (CDI_DOMINATORS);\n@@ -704,7 +703,7 @@ pass_cse_reciprocals::execute (function *fun)\n \n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);\n-  free_alloc_pool (occ_pool);\n+  delete occ_pool;\n   return 0;\n }\n "}]}