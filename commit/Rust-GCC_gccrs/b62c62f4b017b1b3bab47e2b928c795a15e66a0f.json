{"sha": "b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyYzYyZjRiMDE3YjFiM2JhYjQ3ZTJiOTI4Yzc5NWExNWU2NmEwZg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-11-13T15:47:04Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-11-13T15:47:04Z"}, "message": "re PR libstdc++/59087 (Issues including complex.h in C++11/1y mode because of C's complex.h)\n\n2013-11-13  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/59087\n\t* include/ext/pod_char_traits.h: Uglify V, I and S.\n\nFrom-SVN: r204750", "tree": {"sha": "5e62659f929b99d621d1ba3a7cd09b9d4a839682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e62659f929b99d621d1ba3a7cd09b9d4a839682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62c62f4b017b1b3bab47e2b928c795a15e66a0f/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c1e70a6ae02af579f5f8003901fd124519bc570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1e70a6ae02af579f5f8003901fd124519bc570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1e70a6ae02af579f5f8003901fd124519bc570"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "5abe56ec6f8825743406e9ea44a7c742e34ef94a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62c62f4b017b1b3bab47e2b928c795a15e66a0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62c62f4b017b1b3bab47e2b928c795a15e66a0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "patch": "@@ -1,3 +1,8 @@\n+2013-11-13  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/59087\n+\t* include/ext/pod_char_traits.h: Uglify V, I and S.\n+\n 2013-11-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/54562"}, {"sha": "8e3ad9884d96f58aeb9de0bf7984aa4004768b38", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62c62f4b017b1b3bab47e2b928c795a15e66a0f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62c62f4b017b1b3bab47e2b928c795a15e66a0f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=b62c62f4b017b1b3bab47e2b928c795a15e66a0f", "patch": "@@ -45,13 +45,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // int_type to properly hold the full range of char_type values as\n   // well as EOF.\n   /// @brief A POD class that serves as a character abstraction class.\n-  template<typename V, typename I, typename S = std::mbstate_t>\n+  template<typename _Value, typename _Int, typename _St = std::mbstate_t>\n     struct character\n     {\n-      typedef V\t\t\t\tvalue_type;\n-      typedef I\t\t\t\tint_type;\n-      typedef S\t\t\t\tstate_type;\n-      typedef character<V, I, S>\tchar_type;\n+      typedef _Value\t\t\t\tvalue_type;\n+      typedef _Int\t\t\t\tint_type;\n+      typedef _St\t\t\t\tstate_type;\n+      typedef character<_Value, _Int, _St>\tchar_type;\n \n       value_type\tvalue;\n \n@@ -73,14 +73,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     };\n \n-  template<typename V, typename I, typename S>\n+  template<typename _Value, typename _Int, typename _St>\n     inline bool\n-    operator==(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n+    operator==(const character<_Value, _Int, _St>& lhs,\n+\t       const character<_Value, _Int, _St>& rhs)\n     { return lhs.value == rhs.value; }\n \n-  template<typename V, typename I, typename S>\n+  template<typename _Value, typename _Int, typename _St>\n     inline bool\n-    operator<(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n+    operator<(const character<_Value, _Int, _St>& lhs,\n+\t      const character<_Value, _Int, _St>& rhs)\n     { return lhs.value < rhs.value; }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n@@ -91,14 +93,14 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// char_traits<__gnu_cxx::character> specialization.\n-  template<typename V, typename I, typename S>\n-    struct char_traits<__gnu_cxx::character<V, I, S> >\n+  template<typename _Value, typename _Int, typename _St>\n+    struct char_traits<__gnu_cxx::character<_Value, _Int, _St> >\n     {\n-      typedef __gnu_cxx::character<V, I, S>\tchar_type;\n-      typedef typename char_type::int_type\tint_type;\n-      typedef typename char_type::state_type\tstate_type;\n-      typedef fpos<state_type>\t\t\tpos_type;\n-      typedef streamoff\t\t\t\toff_type;\n+      typedef __gnu_cxx::character<_Value, _Int, _St>\tchar_type;\n+      typedef typename char_type::int_type\t\tint_type;\n+      typedef typename char_type::state_type\t\tstate_type;\n+      typedef fpos<state_type>\t\t\t\tpos_type;\n+      typedef streamoff\t\t\t\t\toff_type;\n \n       static void\n       assign(char_type& __c1, const char_type& __c2)"}]}