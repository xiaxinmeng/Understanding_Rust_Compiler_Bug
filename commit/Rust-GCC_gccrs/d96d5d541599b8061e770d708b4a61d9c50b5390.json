{"sha": "d96d5d541599b8061e770d708b4a61d9c50b5390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2ZDVkNTQxNTk5YjgwNjFlNzcwZDcwOGI0YTYxZDljNTBiNTM5MA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-09-11T21:14:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-09-11T21:14:15Z"}, "message": "compat.exp, [...]: Use .exe extension for compat test executables.\n\n\t* lib/compat.exp, gcc.dg/compat/struct-layout-1.exp,\n\tg++.dg/compat/struct-layout-1.exp: Use .exe extension for compat\n\ttest executables.\n\t* gcc.dg/compat/struct-layout-1_generate.c,\n\tg++.dg/compat/struct-layout-1_generate.c: Convert backslash to\n\tslash in srcdir for dg-options string.\n\nFrom-SVN: r140299", "tree": {"sha": "d76d2237f2bcf0625c9ba1802ba744fcea8b8855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d76d2237f2bcf0625c9ba1802ba744fcea8b8855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96d5d541599b8061e770d708b4a61d9c50b5390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96d5d541599b8061e770d708b4a61d9c50b5390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96d5d541599b8061e770d708b4a61d9c50b5390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96d5d541599b8061e770d708b4a61d9c50b5390/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716588aa8e4cca3bdeef8785042828b5baa33b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716588aa8e4cca3bdeef8785042828b5baa33b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716588aa8e4cca3bdeef8785042828b5baa33b71"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "5407fdd1239d7b9336c08714c26b6d6fcde5b66d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -1,3 +1,12 @@\n+2008-09-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lib/compat.exp, gcc.dg/compat/struct-layout-1.exp,\n+\tg++.dg/compat/struct-layout-1.exp: Use .exe extension for compat\n+\ttest executables.\n+\t* gcc.dg/compat/struct-layout-1_generate.c,\n+\tg++.dg/compat/struct-layout-1_generate.c: Convert backslash to\n+\tslash in srcdir for dg-options string.\n+\n 2008-09-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/i386/sse5-haddX.c, gcc.target/i386/sse5-hsubX.c:"}, {"sha": "b928e563960d6348fee89bf5089eba5bd3c89979", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -121,7 +121,7 @@ if [info exists ALT_CXX_UNDER_TEST] then {\n }\n \n set tstobjdir \"$tmpdir/g++.dg-struct-layout-1\"\n-set generator \"$tmpdir/g++.dg-struct-layout-1_generate\"\n+set generator \"$tmpdir/g++.dg-struct-layout-1_generate.exe\"\n \n set generator_src \"$srcdir/$subdir/struct-layout-1_generate.c\"\n set generator_src \"$generator_src $srcdir/$subdir/../../gcc.dg/compat/generate-random.c\""}, {"sha": "8535022b7fc9e58411b46f3999a3eff14c0d60fa", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -495,6 +495,7 @@ static struct entry *hash_table[HASH_SIZE];\n static int idx, limidx, output_one, short_enums;\n static const char *destdir;\n static const char *srcdir;\n+static const char *srcdir_safe;\n FILE *outfile;\n \n void\n@@ -532,7 +533,7 @@ switchfiles (int fields)\n       exit (1);\n     }\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"\", srcdir);\n+    fprintf (outfile, dg_options[i], \"\", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1.h\\\"\\n\\\n \\n\\\n@@ -558,7 +559,7 @@ int main (void)\\n\\\n   if (outfile == NULL)\n     goto fail;\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"-w \", srcdir);\n+    fprintf (outfile, dg_options[i], \"-w \", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1_x1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n@@ -570,7 +571,7 @@ int main (void)\\n\\\n   if (outfile == NULL)\n     goto fail;\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"-w \", srcdir);\n+    fprintf (outfile, dg_options[i], \"-w \", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1_y1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n@@ -1589,6 +1590,22 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n   if (srcdir == NULL && !output_one)\n     goto usage;\n \n+  if (srcdir != NULL)\n+    {\n+      const char *s = srcdir;\n+      char *ss, *t;\n+      t = ss = malloc (strlen (srcdir) + 1);\n+      if (!ss)\n+\tabort ();\n+      do {\n+\tif (*s == '\\\\')\n+\t  *t++ = '/';\n+\telse\n+\t  *t++ = *s;\n+      } while (*s++);\n+      srcdir_safe = ss;\n+    }\n+\n   for (i = 0; i < NTYPES2; ++i)\n     if (base_types[i].bitfld)\n       bitfld_types[n_bitfld_types++] = base_types[i];"}, {"sha": "e003d9c80b914cd0fe8f6b61b2feaef2f9cd58f2", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -83,7 +83,7 @@ if { $compat_have_dfp == 0 } {\n }\n \n set tstobjdir \"$tmpdir/gcc.dg-struct-layout-1\"\n-set generator \"$tmpdir/gcc.dg-struct-layout-1_generate\"\n+set generator \"$tmpdir/gcc.dg-struct-layout-1_generate.exe\"\n \n set generator_src \"$srcdir/$subdir/struct-layout-1_generate.c\"\n set generator_src \"$generator_src $srcdir/$subdir/generate-random.c\""}, {"sha": "097ef5053a8312cc65ae2f099e06783325be5c56", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -739,6 +739,7 @@ static struct entry *hash_table[HASH_SIZE];\n static int idx, limidx, output_one, short_enums;\n static const char *destdir;\n static const char *srcdir;\n+static const char *srcdir_safe;\n FILE *outfile;\n \n void\n@@ -795,7 +796,7 @@ int main (void)\\n\\\n       abort ();\\n\\\n     }\\n\\\n   exit (0);\\n\\\n-}\\n\", srcdir, srcdir, srcdir, filecnt, filecnt);\n+}\\n\", srcdir_safe, srcdir_safe, srcdir_safe, filecnt, filecnt);\n   fclose (outfile);\n   sprintf (destptr, \"t%03d_x.c\", filecnt);\n   outfile = fopen (destbuf, \"w\");\n@@ -808,7 +809,7 @@ int main (void)\\n\\\n #include \\\"struct-layout-1_x1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n #include \\\"struct-layout-1_x2.h\\\"\\n\\\n-#include \\\"t%03d_test.h\\\"\\n\", srcdir, srcdir, srcdir, filecnt, filecnt);\n+#include \\\"t%03d_test.h\\\"\\n\", srcdir_safe, srcdir_safe, srcdir_safe, filecnt, filecnt);\n   fclose (outfile);\n   sprintf (destptr, \"t%03d_y.c\", filecnt);\n   outfile = fopen (destbuf, \"w\");\n@@ -821,7 +822,7 @@ int main (void)\\n\\\n #include \\\"struct-layout-1_y1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n #include \\\"struct-layout-1_y2.h\\\"\\n\\\n-#include \\\"t%03d_test.h\\\"\\n\", srcdir, srcdir, srcdir, filecnt, filecnt);\n+#include \\\"t%03d_test.h\\\"\\n\", srcdir_safe, srcdir_safe, srcdir_safe, filecnt, filecnt);\n   fclose (outfile);\n   sprintf (destptr, \"t%03d_test.h\", filecnt);\n   outfile = fopen (destbuf, \"w\");\n@@ -2000,6 +2001,22 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n   if (srcdir == NULL && !output_one)\n     goto usage;\n \n+  if (srcdir != NULL)\n+    {\n+      const char *s = srcdir;\n+      char *ss, *t;\n+      t = ss = malloc (strlen (srcdir) + 1);\n+      if (!ss)\n+\tabort ();\n+      do {\n+\tif (*s == '\\\\')\n+\t  *t++ = '/';\n+\telse\n+\t  *t++ = *s;\n+      } while (*s++);\n+      srcdir_safe = ss;\n+    }\n+\n   for (i = 0; i < NTYPES2; ++i)\n     if (base_types[i].bitfld)\n       bitfld_types[n_bitfld_types++] = base_types[i];"}, {"sha": "4e7d022643becebd4d8e50f966f67105705affd1", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96d5d541599b8061e770d708b4a61d9c50b5390/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=d96d5d541599b8061e770d708b4a61d9c50b5390", "patch": "@@ -339,10 +339,10 @@ proc compat-execute { src1 sid use_alt } {\n \n \t# There's a unique name for each executable we generate, based on\n \t# the set of options and how the pieces of the tests are compiled.\n-\tset execname1 \"${execbase}-${count}1\"\n-\tset execname2 \"${execbase}-${count}2\"\n-\tset execname3 \"${execbase}-${count}3\"\n-\tset execname4 \"${execbase}-${count}4\"\n+\tset execname1 \"${execbase}-${count}1.exe\"\n+\tset execname2 \"${execbase}-${count}2.exe\"\n+\tset execname3 \"${execbase}-${count}3.exe\"\n+\tset execname4 \"${execbase}-${count}4.exe\"\n \tincr count\n \n \tfile_on_host delete $execname1"}]}