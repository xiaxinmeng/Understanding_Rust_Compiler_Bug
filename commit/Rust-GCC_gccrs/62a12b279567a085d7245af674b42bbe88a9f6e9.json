{"sha": "62a12b279567a085d7245af674b42bbe88a9f6e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhMTJiMjc5NTY3YTA4NWQ3MjQ1YWY2NzRiNDJiYmU4OGE5ZjZlOQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2002-04-19T17:12:59Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-04-19T17:12:59Z"}, "message": "real.c: Allow sizeof (REAL_VALUE_TYPE) > 2*NE.\n\n2002-04-19  Andreas Schwab  <schwab@suse.de>\n\n        * real.c: Allow sizeof (REAL_VALUE_TYPE) > 2*NE.\n        (PUT_REAL): Restore old definition.\n\nFrom-SVN: r52527", "tree": {"sha": "2e85cc466cd945f5bebc7ff57a852289e1b8e2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e85cc466cd945f5bebc7ff57a852289e1b8e2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a12b279567a085d7245af674b42bbe88a9f6e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a12b279567a085d7245af674b42bbe88a9f6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a12b279567a085d7245af674b42bbe88a9f6e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a12b279567a085d7245af674b42bbe88a9f6e9/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1405141bc5d7d430de641f92dd8c2f3ebce27e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1405141bc5d7d430de641f92dd8c2f3ebce27e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1405141bc5d7d430de641f92dd8c2f3ebce27e3d"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "febb90a3e040157ed62267c44590e81ab85577aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a12b279567a085d7245af674b42bbe88a9f6e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a12b279567a085d7245af674b42bbe88a9f6e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62a12b279567a085d7245af674b42bbe88a9f6e9", "patch": "@@ -1,3 +1,8 @@\n+2002-04-19  Andreas Schwab  <schwab@suse.de>\n+\n+\t* real.c: Allow sizeof (REAL_VALUE_TYPE) > 2*NE.\n+\t(PUT_REAL): Restore old definition.\n+\n 2002-04-19  Dan Nicolaescu  <dann@godzilla.ics.uci.edu>\n \t    Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "ad3d4b32e1955b8e7b3eda1b28aae9116d0b1840", "filename": "gcc/real.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a12b279567a085d7245af674b42bbe88a9f6e9/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a12b279567a085d7245af674b42bbe88a9f6e9/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=62a12b279567a085d7245af674b42bbe88a9f6e9", "patch": "@@ -209,7 +209,7 @@ typedef unsigned int UHItype __attribute__ ((mode (HI)));\n #endif\n \n /* Calculate the size of the generic \"e\" type.  This always has\n-   identical in-memory size and representation to REAL_VALUE_TYPE.\n+   identical in-memory size to REAL_VALUE_TYPE.\n    There are only two supported sizes: ten and six 16-bit words (160\n    or 96 bits).  */\n \n@@ -224,19 +224,26 @@ typedef unsigned int UHItype __attribute__ ((mode (HI)));\n # define MINDECEXP -4956\n #endif\n \n-/* Fail compilation if 2*NE is not the appropriate size.  */\n-\n+/* Fail compilation if 2*NE is not the appropriate size. \n+   If HOST_BITS_PER_WIDE_INT is 64, we're going to have padding\n+   at the end of the array, because neither 96 nor 160 is\n+   evenly divisible by 64.  */\n struct compile_test_dummy {\n   char twice_NE_must_equal_sizeof_REAL_VALUE_TYPE\n-  [(sizeof (REAL_VALUE_TYPE) == 2*NE) ? 1 : -1];\n+  [(sizeof (REAL_VALUE_TYPE) >= 2*NE) ? 1 : -1];\n };\n \n /* Construct macros to translate between REAL_VALUE_TYPE and e type.\n    In GET_REAL and PUT_REAL, r and e are pointers.\n    A REAL_VALUE_TYPE is guaranteed to occupy contiguous locations\n    in memory, with no holes.  */\n #define GET_REAL(r, e)  memcpy ((e), (r), 2*NE)\n-#define PUT_REAL(e, r)  memcpy ((r), (e), 2*NE)\n+#define PUT_REAL(e, r)\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    memcpy (r, e, 2*NE);\t\t\t\t\t\\\n+    if (2*NE < sizeof (*r))\t\t\t\t\t\\\n+      memset ((char *) (r) + 2*NE, 0, sizeof (*r) - 2*NE);\t\\\n+  } while (0)\n \n /* Number of 16 bit words in internal format */\n #define NI (NE+3)"}]}