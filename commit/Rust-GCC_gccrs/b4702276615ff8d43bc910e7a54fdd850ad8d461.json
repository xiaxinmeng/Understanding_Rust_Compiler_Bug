{"sha": "b4702276615ff8d43bc910e7a54fdd850ad8d461", "node_id": "C_kwDOANBUbNoAKGI0NzAyMjc2NjE1ZmY4ZDQzYmM5MTBlN2E1NGZkZDg1MGFkOGQ0NjE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-14T12:57:18Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-21T13:20:09Z"}, "message": "options: Fix variable tracking option processing.\n\n\tPR debug/102585\n\tPR bootstrap/102766\n\ngcc/ChangeLog:\n\n\t* opts.c (finish_options): Process flag_var_tracking* options\n\there as they can be adjusted by optimize attribute.\n\tProcess also flag_syntax_only and flag_gtoggle.\n\t* toplev.c (process_options): Remove it here.\n\t* common.opt: Make debug_nonbind_markers_p as PerFunction\n\tattribute as it depends on optimization level.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr102585.c: New test.", "tree": {"sha": "755b63565fd478c74216b8af60e208ed96220740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/755b63565fd478c74216b8af60e208ed96220740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4702276615ff8d43bc910e7a54fdd850ad8d461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4702276615ff8d43bc910e7a54fdd850ad8d461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4702276615ff8d43bc910e7a54fdd850ad8d461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4702276615ff8d43bc910e7a54fdd850ad8d461/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701ee067807b80957c65bd7ff94b6099a27181de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701ee067807b80957c65bd7ff94b6099a27181de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701ee067807b80957c65bd7ff94b6099a27181de"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "c4a77f65aa22c6d72bffddebaafbce63cb2b575c", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b4702276615ff8d43bc910e7a54fdd850ad8d461", "patch": "@@ -3284,7 +3284,7 @@ Common Driver JoinedOrMissing Negative(gvms)\n Generate debug information in extended STABS format.\n \n gstatement-frontiers\n-Common Driver Var(debug_nonbind_markers_p)\n+Common Driver Var(debug_nonbind_markers_p) PerFunction\n Emit progressive recommended breakpoint locations.\n \n gstrict-dwarf"}, {"sha": "4472cec1b9871ef6b7a0a638cbc98ec72f2049ba", "filename": "gcc/opts.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b4702276615ff8d43bc910e7a54fdd850ad8d461", "patch": "@@ -1349,6 +1349,51 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n     SET_OPTION_IF_UNSET (opts, opts_set, flag_vect_cost_model,\n \t\t\t VECT_COST_MODEL_CHEAP);\n \n+  /* One could use EnabledBy, but it would lead to a circular dependency.  */\n+  if (!OPTION_SET_P (flag_var_tracking_uninit))\n+     flag_var_tracking_uninit = flag_var_tracking;\n+\n+  if (!OPTION_SET_P (flag_var_tracking_assignments))\n+    flag_var_tracking_assignments\n+      = (flag_var_tracking\n+\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n+\n+  if (flag_var_tracking_assignments_toggle)\n+    flag_var_tracking_assignments = !flag_var_tracking_assignments;\n+\n+  if (flag_var_tracking_assignments && !flag_var_tracking)\n+    flag_var_tracking = flag_var_tracking_assignments = -1;\n+\n+  if (flag_var_tracking_assignments\n+      && (flag_selective_scheduling || flag_selective_scheduling2))\n+    warning_at (loc, 0,\n+\t\t\"var-tracking-assignments changes selective scheduling\");\n+\n+  if (flag_syntax_only)\n+    {\n+      write_symbols = NO_DEBUG;\n+      profile_flag = 0;\n+    }\n+\n+  if (flag_gtoggle)\n+    {\n+      if (debug_info_level == DINFO_LEVEL_NONE)\n+\t{\n+\t  debug_info_level = DINFO_LEVEL_NORMAL;\n+\n+\t  if (write_symbols == NO_DEBUG)\n+\t    write_symbols = PREFERRED_DEBUGGING_TYPE;\n+\t}\n+      else\n+\tdebug_info_level = DINFO_LEVEL_NONE;\n+    }\n+\n+  if (!OPTION_SET_P (debug_nonbind_markers_p))\n+    debug_nonbind_markers_p\n+      = (optimize\n+\t && debug_info_level >= DINFO_LEVEL_NORMAL\n+\t && dwarf_debuginfo_p ()\n+\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n }\n \n #define LEFT_COLUMN\t27"}, {"sha": "efd066b4a4e4f40b9d96709a977676caa993e333", "filename": "gcc/testsuite/gcc.dg/pr102585.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102585.c?ref=b4702276615ff8d43bc910e7a54fdd850ad8d461", "patch": "@@ -0,0 +1,6 @@\n+/* PR debug/102585 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fvar-tracking-assignments -fno-var-tracking\" } */\n+\n+#pragma GCC optimize 0\n+void d_demangle_callback_Og() { int c = 0; }"}, {"sha": "e91f083f8ffa324079aea4048f42c66fa97cd245", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4702276615ff8d43bc910e7a54fdd850ad8d461/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b4702276615ff8d43bc910e7a54fdd850ad8d461", "patch": "@@ -1375,25 +1375,6 @@ process_options (bool no_backend)\n \t}\n     }\n \n-  if (flag_syntax_only)\n-    {\n-      write_symbols = NO_DEBUG;\n-      profile_flag = 0;\n-    }\n-\n-  if (flag_gtoggle)\n-    {\n-      if (debug_info_level == DINFO_LEVEL_NONE)\n-\t{\n-\t  debug_info_level = DINFO_LEVEL_NORMAL;\n-\n-\t  if (write_symbols == NO_DEBUG)\n-\t    write_symbols = PREFERRED_DEBUGGING_TYPE;\n-\t}\n-      else\n-\tdebug_info_level = DINFO_LEVEL_NONE;\n-    }\n-\n   /* CTF is supported for only C at this time.  */\n   if (!lang_GNU_C ()\n       && ctf_debug_info_level > CTFINFO_LEVEL_NONE)\n@@ -1496,6 +1477,7 @@ process_options (bool no_backend)\n \t}\n       flag_var_tracking = 0;\n       flag_var_tracking_uninit = 0;\n+      flag_var_tracking_assignments = 0;\n     }\n \n   /* The debug hooks are used to implement -fdump-go-spec because it\n@@ -1504,33 +1486,6 @@ process_options (bool no_backend)\n   if (flag_dump_go_spec != NULL)\n     debug_hooks = dump_go_spec_init (flag_dump_go_spec, debug_hooks);\n \n-  /* One could use EnabledBy, but it would lead to a circular dependency.  */\n-  if (!OPTION_SET_P (flag_var_tracking_uninit))\n-     flag_var_tracking_uninit = flag_var_tracking;\n-\n-  if (!OPTION_SET_P (flag_var_tracking_assignments))\n-    flag_var_tracking_assignments\n-      = (flag_var_tracking\n-\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n-\n-  if (flag_var_tracking_assignments_toggle)\n-    flag_var_tracking_assignments = !flag_var_tracking_assignments;\n-\n-  if (flag_var_tracking_assignments && !flag_var_tracking)\n-    flag_var_tracking = flag_var_tracking_assignments = -1;\n-\n-  if (flag_var_tracking_assignments\n-      && (flag_selective_scheduling || flag_selective_scheduling2))\n-    warning_at (UNKNOWN_LOCATION, 0,\n-\t\t\"var-tracking-assignments changes selective scheduling\");\n-\n-  if (!OPTION_SET_P (debug_nonbind_markers_p))\n-    debug_nonbind_markers_p\n-      = (optimize\n-\t && debug_info_level >= DINFO_LEVEL_NORMAL\n-\t && dwarf_debuginfo_p ()\n-\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n-\n   if (!OPTION_SET_P (dwarf2out_as_loc_support))\n     dwarf2out_as_loc_support = dwarf2out_default_as_loc_support ();\n   if (!OPTION_SET_P (dwarf2out_as_locview_support))"}]}