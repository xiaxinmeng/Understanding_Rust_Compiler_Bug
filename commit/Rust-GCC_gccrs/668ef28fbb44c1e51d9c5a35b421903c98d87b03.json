{"sha": "668ef28fbb44c1e51d9c5a35b421903c98d87b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4ZWYyOGZiYjQ0YzFlNTFkOWM1YTM1YjQyMTkwM2M5OGQ4N2IwMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-16T12:21:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-16T12:21:36Z"}, "message": "c++: Clean up previous change [PR41437]\n\nThe previous patch mostly avoided making any changes that had no\nfunctional impact, such as adjusting now-outdated comments and\nperforming renamings.  Such changes have been consolidated to this\nfollowup patch for easier review.\n\nThe main change here is that we now reuse struct deferred_access_check\nas the element type of the vector TI_TYPEDEFS_NEEDING_ACCESS_CHECKING\n(now renamed to TI_DEFERRED_ACCESS_CHECKS, since it may contain any kind\nof access check).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/41437\n\tPR c++/47346\n\t* cp-tree.h (qualified_typedef_usage_s): Delete.\n\t(qualified_typedef_usage_t): Delete.\n\t(deferred_access_check): Move up in file.\n\t(tree_template_info::typedefs_needing_access_checking): Delete.\n\t(tree_template_info::deferred_access_checks): New field.\n\t(TI_TYPEDEFS_NEEDING_ACCESS_CHECKING): Rename to ...\n\t(TI_DEFERRED_ACCESS_CHECKS): ... this, and adjust accordingly.\n\t* pt.c (perform_typedefs_access_check): Rename to ...\n\t(perform_instantiation_time_access_checks): ... this, and adjust\n\taccordingly.  Remove unnecessary tree tests.\n\t(instantiate_class_template_1): Adjust accordingly.\n\t(instantiate_decl): Likewise.\n\t* semantics.c (enforce_access): Likewise.", "tree": {"sha": "68056ecbe3d4103612be2d73a92a1442cfaa077c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68056ecbe3d4103612be2d73a92a1442cfaa077c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668ef28fbb44c1e51d9c5a35b421903c98d87b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668ef28fbb44c1e51d9c5a35b421903c98d87b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668ef28fbb44c1e51d9c5a35b421903c98d87b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668ef28fbb44c1e51d9c5a35b421903c98d87b03/comments", "author": null, "committer": null, "parents": [{"sha": "92bed036098928cd4659c8990e14cf7ad040e0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92bed036098928cd4659c8990e14cf7ad040e0c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92bed036098928cd4659c8990e14cf7ad040e0c2"}], "stats": {"total": 130, "additions": 47, "deletions": 83}, "files": [{"sha": "50d83add458e677188b1081b1d61322b8b887f99", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 39, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=668ef28fbb44c1e51d9c5a35b421903c98d87b03", "patch": "@@ -1449,27 +1449,6 @@ struct GTY (()) tree_lambda_expr\n   int discriminator;\n };\n \n-/* A (typedef,context,usage location) triplet.\n-   It represents a typedef used through a\n-   context at a given source location.\n-   e.g.\n-   struct foo {\n-     typedef int myint;\n-   };\n-\n-   struct bar {\n-    foo::myint v; // #1<-- this location.\n-   };\n-\n-   In bar, the triplet will be (myint, foo, #1).\n-   */\n-struct GTY(()) qualified_typedef_usage_s {\n-  tree typedef_decl;\n-  tree context;\n-  location_t locus;\n-};\n-typedef struct qualified_typedef_usage_s qualified_typedef_usage_t;\n-\n /* Non-zero if this template specialization has access violations that\n    should be rechecked when the function is instantiated outside argument\n    deduction.  */\n@@ -1489,11 +1468,24 @@ typedef struct qualified_typedef_usage_s qualified_typedef_usage_t;\n #define TINFO_VAR_DECLARED_CONSTINIT(NODE) \\\n   (TREE_LANG_FLAG_2 (TEMPLATE_INFO_CHECK (NODE)))\n \n+/* The representation of a deferred access check.  */\n+\n+struct GTY(()) deferred_access_check {\n+  /* The base class in which the declaration is referenced. */\n+  tree binfo;\n+  /* The declaration whose access must be checked.  */\n+  tree decl;\n+  /* The declaration that should be used in the error message.  */\n+  tree diag_decl;\n+  /* The location of this access.  */\n+  location_t loc;\n+};\n+\n struct GTY(()) tree_template_info {\n   struct tree_base base;\n   tree tmpl;\n   tree args;\n-  vec<qualified_typedef_usage_t, va_gc> *typedefs_needing_access_checking;\n+  vec<deferred_access_check, va_gc> *deferred_access_checks;\n };\n \n // Constraint information for a C++ declaration. Constraint information is\n@@ -3532,14 +3524,15 @@ struct GTY(()) lang_decl {\n   ? int_cst_value (NON_DEFAULT_TEMPLATE_ARGS_COUNT (NODE)) \\\n   : TREE_VEC_LENGTH (INNERMOST_TEMPLATE_ARGS (NODE))\n #endif\n-/* The list of typedefs - used in the template - that need\n-   access checking at template instantiation time.\n+\n+/* The list of access checks that were deferred during parsing\n+   which need to be performed at template instantiation time.\n \n    FIXME this should be associated with the TEMPLATE_DECL, not the\n    TEMPLATE_INFO.  */\n-#define TI_TYPEDEFS_NEEDING_ACCESS_CHECKING(NODE) \\\n+#define TI_DEFERRED_ACCESS_CHECKS(NODE) \\\n   ((struct tree_template_info*)TEMPLATE_INFO_CHECK \\\n-     (NODE))->typedefs_needing_access_checking\n+     (NODE))->deferred_access_checks\n \n /* We use TREE_VECs to hold template arguments.  If there is only one\n    level of template arguments, then the TREE_VEC contains the\n@@ -7090,19 +7083,6 @@ extern int shared_member_p\t\t\t(tree);\n extern bool any_dependent_bases_p (tree = current_nonlambda_class_type ());\n extern bool maybe_check_overriding_exception_spec (tree, tree);\n \n-/* The representation of a deferred access check.  */\n-\n-struct GTY(()) deferred_access_check {\n-  /* The base class in which the declaration is referenced. */\n-  tree binfo;\n-  /* The declaration whose access must be checked.  */\n-  tree decl;\n-  /* The declaration that should be used in the error message.  */\n-  tree diag_decl;\n-  /* The location of this access.  */\n-  location_t loc;\n-};\n-\n /* in semantics.c */\n extern void push_deferring_access_checks\t(deferring_kind);\n extern void resume_deferring_access_checks\t(void);"}, {"sha": "73f5935a4dc3530fd8a61d1ed8f671191692df33", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 38, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=668ef28fbb44c1e51d9c5a35b421903c98d87b03", "patch": "@@ -215,7 +215,7 @@ static bool any_template_arguments_need_structural_equality_p (tree);\n static bool dependent_type_p_r (tree);\n static tree tsubst_copy\t(tree, tree, tsubst_flags_t, tree);\n static tree tsubst_decl (tree, tree, tsubst_flags_t);\n-static void perform_typedefs_access_check (tree tmpl, tree targs);\n+static void perform_instantiation_time_access_checks (tree, tree);\n static tree listify (tree);\n static tree listify_autos (tree, tree);\n static tree tsubst_template_parm (tree, tree, tsubst_flags_t);\n@@ -11512,46 +11512,38 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n     }\n }\n \n-/* Perform (or defer) access check for typedefs that were referenced\n-   from within the template TMPL code.\n-   This is a subroutine of instantiate_decl and instantiate_class_template.\n-   TMPL is the template to consider and TARGS is the list of arguments of\n-   that template.  */\n+/* The template TMPL is being instantiated with the template arguments TARGS.\n+   Perform the access checks that we deferred when parsing the template.  */\n \n static void\n-perform_typedefs_access_check (tree tmpl, tree targs)\n+perform_instantiation_time_access_checks (tree tmpl, tree targs)\n {\n   unsigned i;\n-  qualified_typedef_usage_t *iter;\n+  deferred_access_check *chk;\n \n-  if (!tmpl\n-      || (!CLASS_TYPE_P (tmpl)\n-\t  && TREE_CODE (tmpl) != FUNCTION_DECL))\n+  if (!CLASS_TYPE_P (tmpl) && TREE_CODE (tmpl) != FUNCTION_DECL)\n     return;\n \n-  if (vec<qualified_typedef_usage_t, va_gc> *tdefs\n-      = TI_TYPEDEFS_NEEDING_ACCESS_CHECKING (get_template_info (tmpl)))\n-    FOR_EACH_VEC_ELT (*tdefs, i, iter)\n+  if (vec<deferred_access_check, va_gc> *access_checks\n+      = TI_DEFERRED_ACCESS_CHECKS (get_template_info (tmpl)))\n+    FOR_EACH_VEC_ELT (*access_checks, i, chk)\n       {\n-\ttree type_decl = iter->typedef_decl;\n-\ttree type_scope = iter->context;\n-\n-\tif (!type_decl || !type_scope || !CLASS_TYPE_P (type_scope))\n-\t  continue;\n-\n-\tif (uses_template_parms (type_decl)\n-\t    || (TREE_CODE (type_decl) == FIELD_DECL\n-\t\t&& uses_template_parms (DECL_CONTEXT (type_decl))))\n-\t  type_decl = tsubst_copy (type_decl, targs, tf_error, NULL_TREE);\n+\ttree decl = chk->decl;\n+\ttree diag_decl = chk->diag_decl;\n+\ttree type_scope = TREE_TYPE (chk->binfo);\n+\n+\tif (uses_template_parms (decl)\n+\t    || (TREE_CODE (decl) == FIELD_DECL\n+\t\t&& uses_template_parms (DECL_CONTEXT (decl))))\n+\t  decl = tsubst_copy (decl, targs, tf_error, NULL_TREE);\n \tif (uses_template_parms (type_scope))\n \t  type_scope = tsubst (type_scope, targs, tf_error, NULL_TREE);\n \n \t/* Make access check error messages point to the location\n \t   of the use of the typedef.  */\n-\tiloc_sentinel ils (iter->locus);\n+\tiloc_sentinel ils (chk->loc);\n \tperform_or_defer_access_check (TYPE_BINFO (type_scope),\n-\t\t\t\t       type_decl, type_decl,\n-\t\t\t\t       tf_warning_or_error);\n+\t\t\t\t       decl, diag_decl, tf_warning_or_error);\n       }\n }\n \n@@ -12080,11 +12072,7 @@ instantiate_class_template_1 (tree type)\n      definitions or default arguments, of the class member functions,\n      member classes, static data members and member templates....  */\n \n-  /* Some typedefs referenced from within the template code need to be access\n-     checked at template instantiation time, i.e now. These types were\n-     added to the template at parsing time. Let's get those and perform\n-     the access checks then.  */\n-  perform_typedefs_access_check (pattern, args);\n+  perform_instantiation_time_access_checks (pattern, args);\n   perform_deferred_access_checks (tf_warning_or_error);\n   pop_nested_class ();\n   maximum_field_alignment = saved_maximum_field_alignment;\n@@ -25631,12 +25619,8 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n       else\n \tstart_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n \n-      /* Some typedefs referenced from within the template code need to be\n-\t access checked at template instantiation time, i.e now. These\n-\t types were added to the template at parsing time. Let's get those\n-\t and perform the access checks then.  */\n-      perform_typedefs_access_check (DECL_TEMPLATE_RESULT (td),\n-\t\t\t\t     args);\n+      perform_instantiation_time_access_checks (DECL_TEMPLATE_RESULT (td),\n+\t\t\t\t\t\targs);\n \n       /* Create substitution entries for the parameters.  */\n       register_parameter_specializations (code_pattern, d);"}, {"sha": "a04b0aa1d9bfdd21be05bc0614638682caa5affd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668ef28fbb44c1e51d9c5a35b421903c98d87b03/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=668ef28fbb44c1e51d9c5a35b421903c98d87b03", "patch": "@@ -295,12 +295,12 @@ enforce_access (tree basetype_path, tree decl, tree diag_decl,\n \t  return true;\n \n \t/* Defer this access check until instantiation time.  */\n-\tqualified_typedef_usage_t typedef_usage;\n-\ttypedef_usage.typedef_decl = decl;\n-\ttypedef_usage.context = TREE_TYPE (basetype_path);\n-\ttypedef_usage.locus = input_location;\n-\tvec_safe_push (TI_TYPEDEFS_NEEDING_ACCESS_CHECKING (template_info),\n-\t\t       typedef_usage);\n+\tdeferred_access_check access_check;\n+\taccess_check.binfo = basetype_path;\n+\taccess_check.decl = decl;\n+\taccess_check.diag_decl = diag_decl;\n+\taccess_check.loc = input_location;\n+\tvec_safe_push (TI_DEFERRED_ACCESS_CHECKS (template_info), access_check);\n \treturn true;\n       }\n "}]}