{"sha": "ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "node_id": "C_kwDOANBUbNoAKGVmNWQ2NzFjZDgwYTRhZmE0Zjc0YzNkZmUyOTA0YzYzZjUxZmNmZGU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-12T21:15:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-13T11:11:30Z"}, "message": "libstdc++: Fix std::regex_replace for strings with embedded null [PR103664]\n\nThe overload of std::regex_replace that takes a std::basic_string as the\nfmt argument (for the replacement string) is implemented in terms of the\none taking a const C*, which uses std::char_traits to find the length.\nThat means it stops at a null character, even though the basic_string\nmight have additional characters beyond that.\n\nRather than duplicate the implementation of the const C* one for the\nstd::basic_string case, this moves that implementation to a new\n__regex_replace function which takes a const C* and a length. Then both\nthe std::basic_string and const C* overloads can call that (with the\nlatter using char_traits to find the length to pass to the new\nfunction).\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103664\n\t* include/bits/regex.h (__regex_replace): Declare.\n\t(regex_replace): Use it.\n\t* include/bits/regex.tcc (__regex_replace): Replace regex_replace\n\tdefinition with __regex_replace.\n\t* testsuite/28_regex/algorithms/regex_replace/char/103664.cc: New test.", "tree": {"sha": "350c53ee4f98c558ed8a750ed75985b897e69c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/350c53ee4f98c558ed8a750ed75985b897e69c70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3788c4ed2c774e36b2721ee2af454591a42afdeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3788c4ed2c774e36b2721ee2af454591a42afdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3788c4ed2c774e36b2721ee2af454591a42afdeb"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "91c63768581a31eddd64b09d256cee9468d5008d", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "patch": "@@ -2488,6 +2488,15 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t = regex_constants::match_default) = delete;\n \n   // std [28.11.4] Function template regex_replace\n+\n+  template<typename _Out_iter, typename _Bi_iter,\n+\t   typename _Rx_traits, typename _Ch_type>\n+    _Out_iter\n+    __regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n+\t\t    const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t    const _Ch_type* __fmt, size_t __len,\n+\t\t    regex_constants::match_flag_type __flags);\n+\n   /**\n    * @brief Search for a regular expression within a range for multiple times,\n    and replace the matched parts through filling a format string.\n@@ -2511,7 +2520,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t  regex_constants::match_flag_type __flags\n \t\t  = regex_constants::match_default)\n     {\n-      return regex_replace(__out, __first, __last, __e, __fmt.c_str(), __flags);\n+      return std::__regex_replace(__out, __first, __last, __e, __fmt.c_str(),\n+\t\t\t\t  __fmt.length(), __flags);\n     }\n \n   /**\n@@ -2534,7 +2544,13 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t  const basic_regex<_Ch_type, _Rx_traits>& __e,\n \t\t  const _Ch_type* __fmt,\n \t\t  regex_constants::match_flag_type __flags\n-\t\t  = regex_constants::match_default);\n+\t\t  = regex_constants::match_default)\n+    {\n+      return std::__regex_replace(__out, __first, __last, __e, __fmt,\n+\t\t\t\t  char_traits<_Ch_type>::length(__fmt),\n+\t\t\t\t  __flags);\n+    }\n+\n \n   /**\n    * @brief Search for a regular expression within a string for multiple times,"}, {"sha": "12ee9f0a98909710183ebc66952a68ff5fb5c81f", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "patch": "@@ -461,10 +461,10 @@ namespace __detail\n   template<typename _Out_iter, typename _Bi_iter,\n \t   typename _Rx_traits, typename _Ch_type>\n     _Out_iter\n-    regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n-\t\t  const basic_regex<_Ch_type, _Rx_traits>& __e,\n-\t\t  const _Ch_type* __fmt,\n-\t\t  regex_constants::match_flag_type __flags)\n+    __regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n+\t\t    const basic_regex<_Ch_type, _Rx_traits>& __e,\n+\t\t    const _Ch_type* __fmt, size_t __len,\n+\t\t    regex_constants::match_flag_type __flags)\n     {\n       typedef regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> _IterT;\n       _IterT __i(__first, __last, __e, __flags);\n@@ -477,7 +477,6 @@ namespace __detail\n       else\n \t{\n \t  sub_match<_Bi_iter> __last;\n-\t  auto __len = char_traits<_Ch_type>::length(__fmt);\n \t  for (; __i != __end; ++__i)\n \t    {\n \t      if (!(__flags & regex_constants::format_no_copy))"}, {"sha": "ca75e49ed3edc059996bfc30cfa9922536ce59a9", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_replace/char/103664.cc", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2F103664.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2F103664.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2F103664.cc?ref=ef5d671cd80a4afa4f74c3dfe2904c63f51fcfde", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  // PR libstdc++/103664\n+  std::string a = regex_replace(\"123\", std::regex(\"2\"), std::string(\"a\\0b\", 3));\n+  VERIFY( a == std::string(\"1a\\0b3\", 5) );\n+}"}]}