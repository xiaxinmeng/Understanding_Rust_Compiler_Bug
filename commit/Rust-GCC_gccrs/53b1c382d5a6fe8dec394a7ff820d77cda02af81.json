{"sha": "53b1c382d5a6fe8dec394a7ff820d77cda02af81", "node_id": "C_kwDOANBUbNoAKDUzYjFjMzgyZDVhNmZlOGRlYzM5NGE3ZmY4MjBkNzdjZGEwMmFmODE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-19T21:50:56Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-19T21:50:56Z"}, "message": "libstdc++: Implement LWG 3549 changes to ranges::enable_view\n\nThis patch also reverts r11-3504 since that workaround is now obsolete\nafter this resolution.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (view_interface): Forward declare.\n\t(__detail::__is_derived_from_view_interface_fn): Declare.\n\t(__detail::__is_derived_from_view_interface): Define as per LWG 3549.\n\t(enable_view): Adjust as per LWG 3549.\n\t* include/bits/ranges_util.h (view_interface): Don't derive from\n\tview_base.\n\t* include/std/ranges (filter_view): Revert r11-3504 change.\n\t(transform_view): Likewise.\n\t(take_view): Likewise.\n\t(take_while_view): Likewise.\n\t(drop_view): Likewise.\n\t(drop_while_view): Likewise.\n\t(join_view): Likewise.\n\t(lazy_split_view): Likewise.\n\t(split_view): Likewise.\n\t(reverse_view): Likewise.\n\t* testsuite/std/ranges/adaptors/sizeof.cc: Update expected sizes.\n\t* testsuite/std/ranges/view.cc (test_view::test_view): Remove\n\tthis default ctor since views no longer need to be default initable.\n\t(test01): New test.", "tree": {"sha": "0d83a7ef695c6a0518df1700e88ccae59ceddaed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d83a7ef695c6a0518df1700e88ccae59ceddaed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b1c382d5a6fe8dec394a7ff820d77cda02af81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b1c382d5a6fe8dec394a7ff820d77cda02af81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b1c382d5a6fe8dec394a7ff820d77cda02af81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b1c382d5a6fe8dec394a7ff820d77cda02af81/comments", "author": null, "committer": null, "parents": [{"sha": "c6a1fdd6dde3a95997731c8339d70970aca67594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a1fdd6dde3a95997731c8339d70970aca67594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a1fdd6dde3a95997731c8339d70970aca67594"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "7801b2fd0238ddaf69a55e076941af7638f413e8", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=53b1c382d5a6fe8dec394a7ff820d77cda02af81", "patch": "@@ -614,12 +614,31 @@ namespace ranges\n   template<sized_range _Range>\n     using range_size_t = decltype(ranges::size(std::declval<_Range&>()));\n \n+  template<typename _Derived>\n+    requires is_class_v<_Derived> && same_as<_Derived, remove_cv_t<_Derived>>\n+    class view_interface; // defined in <bits/ranges_util.h>\n+\n+  namespace __detail\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires (!same_as<_Tp, view_interface<_Up>>)\n+      void __is_derived_from_view_interface_fn(const _Tp&,\n+\t\t\t\t\t       const view_interface<_Up>&); // not defined\n+\n+    // Returns true iff _Tp has exactly one public base class that's a\n+    // specialization of view_interface.\n+    template<typename _Tp>\n+      concept __is_derived_from_view_interface\n+\t= requires (_Tp __t) { __is_derived_from_view_interface_fn(__t, __t); };\n+  }\n+\n   /// [range.view] The ranges::view_base type.\n   struct view_base { };\n \n   /// [range.view] The ranges::enable_view boolean.\n   template<typename _Tp>\n-    inline constexpr bool enable_view = derived_from<_Tp, view_base>;\n+    inline constexpr bool enable_view = derived_from<_Tp, view_base>\n+      || __detail::__is_derived_from_view_interface<_Tp>;\n \n   /// [range.view] The ranges::view concept.\n   template<typename _Tp>"}, {"sha": "aaa7e8c6a9b68ac08ed2a7a47701b5b1bdff391d", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=53b1c382d5a6fe8dec394a7ff820d77cda02af81", "patch": "@@ -61,7 +61,7 @@ namespace ranges\n   /// The ranges::view_interface class template\n   template<typename _Derived>\n     requires is_class_v<_Derived> && same_as<_Derived, remove_cv_t<_Derived>>\n-    class view_interface : public view_base\n+    class view_interface\n     {\n     private:\n       constexpr _Derived& _M_derived() noexcept"}, {"sha": "6c998925a81ae32e6c2175897b60fcc85fa9e9cd", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=53b1c382d5a6fe8dec394a7ff820d77cda02af81", "patch": "@@ -1483,9 +1483,9 @@ namespace views::__adaptor\n \t{ return __y.__equal(__x); }\n       };\n \n+      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n       [[no_unique_address]] __detail::_CachedPosition<_Vp> _M_cached_begin;\n-      _Vp _M_base = _Vp();\n \n     public:\n       filter_view() requires (default_initializable<_Vp>\n@@ -1494,7 +1494,7 @@ namespace views::__adaptor\n \n       constexpr\n       filter_view(_Vp __base, _Pred __pred)\n-\t: _M_pred(std::move(__pred)), _M_base(std::move(__base))\n+\t: _M_base(std::move(__base)), _M_pred(std::move(__pred))\n       { }\n \n       constexpr _Vp\n@@ -1850,8 +1850,8 @@ namespace views::__adaptor\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      [[no_unique_address]] __detail::__box<_Fp> _M_fun;\n       _Vp _M_base = _Vp();\n+      [[no_unique_address]] __detail::__box<_Fp> _M_fun;\n \n     public:\n       transform_view() requires (default_initializable<_Vp>\n@@ -1860,7 +1860,7 @@ namespace views::__adaptor\n \n       constexpr\n       transform_view(_Vp __base, _Fp __fun)\n-\t: _M_fun(std::move(__fun)), _M_base(std::move(__base))\n+\t: _M_base(std::move(__base)), _M_fun(std::move(__fun))\n       { }\n \n       constexpr _Vp\n@@ -1987,15 +1987,15 @@ namespace views::__adaptor\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      range_difference_t<_Vp> _M_count = 0;\n       _Vp _M_base = _Vp();\n+      range_difference_t<_Vp> _M_count = 0;\n \n     public:\n       take_view() requires default_initializable<_Vp> = default;\n \n       constexpr\n       take_view(_Vp base, range_difference_t<_Vp> __count)\n-\t: _M_count(std::move(__count)), _M_base(std::move(base))\n+\t: _M_base(std::move(base)), _M_count(std::move(__count))\n       { }\n \n       constexpr _Vp\n@@ -2171,8 +2171,8 @@ namespace views::__adaptor\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n       _Vp _M_base = _Vp();\n+      [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n \n     public:\n       take_while_view() requires (default_initializable<_Vp>\n@@ -2181,7 +2181,7 @@ namespace views::__adaptor\n \n       constexpr\n       take_while_view(_Vp base, _Pred __pred)\n-\t: _M_pred(std::move(__pred)), _M_base(std::move(base))\n+\t: _M_base(std::move(base)), _M_pred(std::move(__pred))\n       { }\n \n       constexpr _Vp\n@@ -2252,8 +2252,8 @@ namespace views::__adaptor\n     class drop_view : public view_interface<drop_view<_Vp>>\n     {\n     private:\n-      range_difference_t<_Vp> _M_count = 0;\n       _Vp _M_base = _Vp();\n+      range_difference_t<_Vp> _M_count = 0;\n \n       // ranges::next(begin(base), count, end(base)) is O(1) if _Vp satisfies\n       // both random_access_range and sized_range. Otherwise, cache its result.\n@@ -2269,7 +2269,7 @@ namespace views::__adaptor\n \n       constexpr\n       drop_view(_Vp __base, range_difference_t<_Vp> __count)\n-\t: _M_count(__count), _M_base(std::move(__base))\n+\t: _M_base(std::move(__base)), _M_count(__count)\n       { __glibcxx_assert(__count >= 0); }\n \n       constexpr _Vp\n@@ -2376,9 +2376,9 @@ namespace views::__adaptor\n     class drop_while_view : public view_interface<drop_while_view<_Vp, _Pred>>\n     {\n     private:\n+      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n       [[no_unique_address]] __detail::_CachedPosition<_Vp> _M_cached_begin;\n-      _Vp _M_base = _Vp();\n \n     public:\n       drop_while_view() requires (default_initializable<_Vp>\n@@ -2387,7 +2387,7 @@ namespace views::__adaptor\n \n       constexpr\n       drop_while_view(_Vp __base, _Pred __pred)\n-\t: _M_pred(std::move(__pred)), _M_base(std::move(__base))\n+\t: _M_base(std::move(__base)), _M_pred(std::move(__pred))\n       { }\n \n       constexpr _Vp\n@@ -2723,9 +2723,9 @@ namespace views::__adaptor\n \t  friend _Sentinel<!_Const>;\n \t};\n \n+      _Vp _M_base = _Vp();\n       [[no_unique_address]]\n \t__detail::__non_propagating_cache<remove_cv_t<_InnerRange>> _M_inner;\n-      _Vp _M_base = _Vp();\n \n     public:\n       join_view() requires default_initializable<_Vp> = default;\n@@ -3161,12 +3161,12 @@ namespace views::__adaptor\n \t  { ranges::iter_swap(__x._M_i_current(), __y._M_i_current()); }\n \t};\n \n+      _Vp _M_base = _Vp();\n       _Pattern _M_pattern = _Pattern();\n       // XXX: _M_current is \"present only if !forward_range<V>\"\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<!forward_range<_Vp>,\n \t  __detail::__non_propagating_cache<iterator_t<_Vp>>> _M_current;\n-      _Vp _M_base = _Vp();\n \n \n     public:\n@@ -3176,16 +3176,16 @@ namespace views::__adaptor\n \n       constexpr\n       lazy_split_view(_Vp __base, _Pattern __pattern)\n-\t: _M_pattern(std::move(__pattern)), _M_base(std::move(__base))\n+\t: _M_base(std::move(__base)), _M_pattern(std::move(__pattern))\n       { }\n \n       template<input_range _Range>\n \trequires constructible_from<_Vp, views::all_t<_Range>>\n \t  && constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n \tconstexpr\n \tlazy_split_view(_Range&& __r, range_value_t<_Range> __e)\n-\t  : _M_pattern(views::single(std::move(__e))),\n-\t    _M_base(views::all(std::forward<_Range>(__r)))\n+\t  : _M_base(views::all(std::forward<_Range>(__r))),\n+\t    _M_pattern(views::single(std::move(__e)))\n \t{ }\n \n       constexpr _Vp\n@@ -3283,9 +3283,9 @@ namespace views::__adaptor\n   class split_view : public view_interface<split_view<_Vp, _Pattern>>\n   {\n   private:\n+    _Vp _M_base = _Vp();\n     _Pattern _M_pattern = _Pattern();\n     __detail::__non_propagating_cache<subrange<iterator_t<_Vp>>> _M_cached_begin;\n-    _Vp _M_base = _Vp();\n \n     struct _Iterator;\n     struct _Sentinel;\n@@ -3297,17 +3297,16 @@ namespace views::__adaptor\n \n     constexpr\n     split_view(_Vp __base, _Pattern __pattern)\n-      : _M_pattern(std::move(__pattern)),\n-\t_M_base(std::move(__base))\n+      : _M_base(std::move(__base)), _M_pattern(std::move(__pattern))\n     { }\n \n     template<forward_range _Range>\n       requires constructible_from<_Vp, views::all_t<_Range>>\n \t&& constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n     constexpr\n     split_view(_Range&& __r, range_value_t<_Range> __e)\n-      : _M_pattern(views::single(std::move(__e))),\n-\t_M_base(views::all(std::forward<_Range>(__r)))\n+      : _M_base(views::all(std::forward<_Range>(__r))),\n+\t_M_pattern(views::single(std::move(__e)))\n     { }\n \n     constexpr _Vp\n@@ -3630,11 +3629,11 @@ namespace views::__adaptor\n \t\t\t\t  && sized_sentinel_for<sentinel_t<_Vp>,\n \t\t\t\t\t\t\titerator_t<_Vp>>);\n \n+      _Vp _M_base = _Vp();\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<_S_needs_cached_begin,\n \t\t\t\t    __detail::_CachedPosition<_Vp>>\n \t\t\t\t      _M_cached_begin;\n-      _Vp _M_base = _Vp();\n \n     public:\n       reverse_view() requires default_initializable<_Vp> = default;"}, {"sha": "61524d4c0ad3d079bf4271bcb0777752a5be2486", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/sizeof.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc?ref=53b1c382d5a6fe8dec394a7ff820d77cda02af81", "patch": "@@ -42,11 +42,11 @@ static_assert(sizeof(ranges::drop_while_view<V, decltype(&pred_f)>) == 4*ptr);\n static_assert(sizeof(ranges::transform_view<V, decltype(&func_f)>) == 3*ptr);\n \n static_assert(sizeof(ranges::filter_view<V, decltype(pred_l)>) == 3*ptr);\n-static_assert(sizeof(ranges::take_while_view<V, decltype(pred_l)>) == 3*ptr);\n+static_assert(sizeof(ranges::take_while_view<V, decltype(pred_l)>) == 2*ptr);\n static_assert(sizeof(ranges::drop_while_view<V, decltype(pred_l)>) == 3*ptr);\n-static_assert(sizeof(ranges::transform_view<V, decltype(func_l)>) == 3*ptr);\n+static_assert(sizeof(ranges::transform_view<V, decltype(func_l)>) == 2*ptr);\n \n static_assert(sizeof(ranges::lazy_split_view<V, std::string_view>) == 4*ptr);\n \n static_assert\n- (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 4*ptr);\n+ (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 3*ptr);"}, {"sha": "98a162ec8667d63f4832bae7d972fbb0286e4389", "filename": "libstdc++-v3/testsuite/std/ranges/view.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b1c382d5a6fe8dec394a7ff820d77cda02af81/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc?ref=53b1c382d5a6fe8dec394a7ff820d77cda02af81", "patch": "@@ -52,14 +52,34 @@ static_assert(!std::ranges::view<__gnu_test::test_random_access_range<int>>);\n template<typename T>\n struct test_view\n : __gnu_test::test_random_access_range<T>, std::ranges::view_base\n-{\n-  // views must be default-initializable:\n-  test_view() : __gnu_test::test_random_access_range<T>(nullptr, nullptr) { }\n-};\n+{ };\n \n static_assert(std::ranges::view<test_view<int>>);\n \n template<>\n constexpr bool std::ranges::enable_view<test_view<long>> = false;\n \n static_assert(!std::ranges::view<test_view<long>>);\n+\n+void\n+test01()\n+{\n+  // Verify LWG 3549 changes to ranges::enable_view.\n+  using std::ranges::view_interface;\n+\n+  struct v1\n+    : __gnu_test::test_random_access_range<int>, view_interface<v1> { };\n+  static_assert(!std::derived_from<v1, std::ranges::view_base>);\n+  static_assert(std::ranges::enable_view<v1>);\n+\n+  struct v2 : v1, view_interface<v2> { };\n+  static_assert(!std::derived_from<v2, std::ranges::view_base>);\n+  static_assert(!std::ranges::enable_view<v2>);\n+\n+  struct v3 : __gnu_test::test_random_access_range<int> { };\n+  static_assert(!std::derived_from<v3, std::ranges::view_base>);\n+  static_assert(!std::ranges::enable_view<v3>);\n+\n+  struct v4 { };\n+  static_assert(!std::ranges::enable_view<view_interface<v4>>);\n+}"}]}