{"sha": "16a2acea0aca10ade467f2e15bde2bc956d6528e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhMmFjZWEwYWNhMTBhZGU0NjdmMmUxNWJkZTJiYzk1NmQ2NTI4ZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2006-04-03T09:59:38Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2006-04-03T09:59:38Z"}, "message": "re PR tree-optimization/26992 (Internal Compiler Error in dwarf2out.c:7607 build_polynomial_chrec)\n\n\tPR bootstrap/26992\n\t* tree-scalar-evolution.c (compute_overall_effect_of_inner_loop,\n\tchrec_is_positive, set_nb_iterations_in_loop): Use a variable for\n\tthe type of nb_iter.\n\t(instantiate_parameters_1): Convert the operands before calling\n\tchrec_fold_minus, chrec_fold_plus, or chrec_fold_multiply.\n\t* tree-data-ref.c (can_use_analyze_subscript_affine_affine): Same.\n\nFrom-SVN: r112635", "tree": {"sha": "ab5d9744d365b3c1b20dc31edbcd78f31b409562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab5d9744d365b3c1b20dc31edbcd78f31b409562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a2acea0aca10ade467f2e15bde2bc956d6528e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a2acea0aca10ade467f2e15bde2bc956d6528e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a2acea0aca10ade467f2e15bde2bc956d6528e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a2acea0aca10ade467f2e15bde2bc956d6528e/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15e9be3a89ff6ca1efba612f9732d568e1ef3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15e9be3a89ff6ca1efba612f9732d568e1ef3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15e9be3a89ff6ca1efba612f9732d568e1ef3fc"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "97507f1f55ff576eee5376ea5c7c9ffee7eee43e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16a2acea0aca10ade467f2e15bde2bc956d6528e", "patch": "@@ -1,3 +1,13 @@\n+2006-04-02  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\tPR bootstrap/26992\n+\t* tree-scalar-evolution.c (compute_overall_effect_of_inner_loop,\n+\tchrec_is_positive, set_nb_iterations_in_loop): Use a variable for\n+\tthe type of nb_iter.\n+\t(instantiate_parameters_1): Convert the operands before calling\n+\tchrec_fold_minus, chrec_fold_plus, or chrec_fold_multiply.\n+\t* tree-data-ref.c (can_use_analyze_subscript_affine_affine): Same.\n+\n 2006-04-02  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (dummy_object): Use build_int_cst instead of convert."}, {"sha": "30b491b30f77419bb3c778e42a19a48221c799a1", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=16a2acea0aca10ade467f2e15bde2bc956d6528e", "patch": "@@ -3035,15 +3035,18 @@ analyze_subscript_affine_affine (tree chrec_a,\n static bool\n can_use_analyze_subscript_affine_affine (tree *chrec_a, tree *chrec_b)\n {\n-  tree diff;\n+  tree diff, type, left_a, left_b, right_b;\n \n   if (chrec_contains_symbols (CHREC_RIGHT (*chrec_a))\n       || chrec_contains_symbols (CHREC_RIGHT (*chrec_b)))\n     /* FIXME: For the moment not handled.  Might be refined later.  */\n     return false;\n \n-  diff = chrec_fold_minus (chrec_type (*chrec_a), CHREC_LEFT (*chrec_a), \n-\t\t\t   CHREC_LEFT (*chrec_b));\n+  type = chrec_type (*chrec_a);\n+  left_a = CHREC_LEFT (*chrec_a);\n+  left_b = chrec_convert (type, CHREC_LEFT (*chrec_b), NULL_TREE);\n+  diff = chrec_fold_minus (type, left_a, left_b);\n+\n   if (!evolution_function_is_constant_p (diff))\n     return false;\n \n@@ -3052,9 +3055,10 @@ can_use_analyze_subscript_affine_affine (tree *chrec_a, tree *chrec_b)\n \n   *chrec_a = build_polynomial_chrec (CHREC_VARIABLE (*chrec_a), \n \t\t\t\t     diff, CHREC_RIGHT (*chrec_a));\n+  right_b = chrec_convert (type, CHREC_RIGHT (*chrec_b), NULL_TREE);\n   *chrec_b = build_polynomial_chrec (CHREC_VARIABLE (*chrec_b),\n-\t\t\t\t     integer_zero_node, \n-\t\t\t\t     CHREC_RIGHT (*chrec_b));\n+\t\t\t\t     convert (type, integer_zero_node),\n+\t\t\t\t     right_b);\n   return true;\n }\n "}, {"sha": "f1a2efa9041d5464afae535ab71f4ed5b1957d9f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a2acea0aca10ade467f2e15bde2bc956d6528e/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=16a2acea0aca10ade467f2e15bde2bc956d6528e", "patch": "@@ -476,12 +476,12 @@ compute_overall_effect_of_inner_loop (struct loop *loop, tree evolution_fn)\n \t  else\n \t    {\n \t      tree res;\n+\t      tree type = chrec_type (nb_iter);\n \n \t      /* Number of iterations is off by one (the ssa name we\n \t\t analyze must be defined before the exit).  */\n-\t      nb_iter = chrec_fold_minus (chrec_type (nb_iter),\n-\t\t\t\tnb_iter,\n-\t\t\t\tbuild_int_cst_type (chrec_type (nb_iter), 1));\n+\t      nb_iter = chrec_fold_minus (type, nb_iter,\n+\t\t\t\t\t  build_int_cst_type (type, 1));\n \t      \n \t      /* evolution_fn is the evolution function in LOOP.  Get\n \t\t its value in the nb_iter-th iteration.  */\n@@ -510,10 +510,8 @@ compute_overall_effect_of_inner_loop (struct loop *loop, tree evolution_fn)\n bool\n chrec_is_positive (tree chrec, bool *value)\n {\n-  bool value0, value1;\n-  bool value2;\n-  tree end_value;\n-  tree nb_iter;\n+  bool value0, value1, value2;\n+  tree type, end_value, nb_iter;\n   \n   switch (TREE_CODE (chrec))\n     {\n@@ -542,17 +540,14 @@ chrec_is_positive (tree chrec, bool *value)\n       if (chrec_contains_undetermined (nb_iter))\n \treturn false;\n \n-      nb_iter = chrec_fold_minus \n-\t(chrec_type (nb_iter), nb_iter,\n-\t build_int_cst (chrec_type (nb_iter), 1));\n+      type = chrec_type (nb_iter);\n+      nb_iter = chrec_fold_minus (type, nb_iter, build_int_cst (type, 1));\n \n #if 0\n       /* TODO -- If the test is after the exit, we may decrease the number of\n \t iterations by one.  */\n       if (after_exit)\n-\tnb_iter = chrec_fold_minus \n-\t\t(chrec_type (nb_iter), nb_iter,\n-\t\t build_int_cst (chrec_type (nb_iter), 1));\n+\tnb_iter = chrec_fold_minus (type, nb_iter, build_int_cst (type, 1));\n #endif\n \n       end_value = chrec_apply (CHREC_VARIABLE (chrec), chrec, nb_iter);\n@@ -900,8 +895,9 @@ static inline tree\n set_nb_iterations_in_loop (struct loop *loop, \n \t\t\t   tree res)\n {\n-  res = chrec_fold_plus (chrec_type (res), res,\n-\t\t\t build_int_cst_type (chrec_type (res), 1));\n+  tree type = chrec_type (res);\n+\n+  res = chrec_fold_plus (type, res, build_int_cst_type (type, 1));\n \n   /* FIXME HWI: However we want to store one iteration less than the\n      count of the loop in order to be compatible with the other\n@@ -1958,6 +1954,7 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n   tree res, op0, op1, op2;\n   basic_block def_bb;\n   struct loop *def_loop;\n+  tree type = chrec_type (chrec);\n \n   /* Give up if the expression is larger than the MAX that we allow.  */\n   if (size_expr++ > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n@@ -2070,7 +2067,11 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n \n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n-      \tchrec = chrec_fold_plus (TREE_TYPE (chrec), op0, op1);\n+\t{\n+\t  op0 = chrec_convert (type, op0, NULL_TREE);\n+\t  op1 = chrec_convert (type, op1, NULL_TREE);\n+\t  chrec = chrec_fold_plus (type, op0, op1);\n+\t}\n       return chrec;\n \n     case MINUS_EXPR:\n@@ -2086,7 +2087,11 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n \n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n-        chrec = chrec_fold_minus (TREE_TYPE (chrec), op0, op1);\n+\t{\n+\t  op0 = chrec_convert (type, op0, NULL_TREE);\n+\t  op1 = chrec_convert (type, op1, NULL_TREE);\n+\t  chrec = chrec_fold_minus (type, op0, op1);\n+\t}\n       return chrec;\n \n     case MULT_EXPR:\n@@ -2102,7 +2107,11 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n \n       if (TREE_OPERAND (chrec, 0) != op0\n \t  || TREE_OPERAND (chrec, 1) != op1)\n-\tchrec = chrec_fold_multiply (TREE_TYPE (chrec), op0, op1);\n+\t{\n+\t  op0 = chrec_convert (type, op0, NULL_TREE);\n+\t  op1 = chrec_convert (type, op1, NULL_TREE);\n+\t  chrec = chrec_fold_multiply (type, op0, op1);\n+\t}\n       return chrec;\n \n     case NOP_EXPR:"}]}