{"sha": "e1d4359264585acc8210ba60abb6dfb15bf1fa57", "node_id": "C_kwDOANBUbNoAKGUxZDQzNTkyNjQ1ODVhY2M4MjEwYmE2MGFiYjZkZmIxNWJmMWZhNTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-24T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-24T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "cce91cf5980269194169daa0a5400bdfc6b2a47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce91cf5980269194169daa0a5400bdfc6b2a47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d4359264585acc8210ba60abb6dfb15bf1fa57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4359264585acc8210ba60abb6dfb15bf1fa57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d4359264585acc8210ba60abb6dfb15bf1fa57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4359264585acc8210ba60abb6dfb15bf1fa57/comments", "author": null, "committer": null, "parents": [{"sha": "2dd56aed3e4e1938a9020ab2fe6a410e1a1c2eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd56aed3e4e1938a9020ab2fe6a410e1a1c2eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd56aed3e4e1938a9020ab2fe6a410e1a1c2eb3"}], "stats": {"total": 319, "additions": 318, "deletions": 1}, "files": [{"sha": "1886061844eeed7dae8a53c732636b7f8dfbe5f7", "filename": "contrib/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,13 @@\n+2021-11-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* filter-clang-warnings.py: Filter -Wc++20-extensions as it does\n+\tnot respect proper attribute detection.\n+\n+2021-11-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* check-params-in-docs.py: Support @itemx in param documentation\n+\tand support multi-line documentation for parameters.\n+\n 2021-11-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* update-copyright.py (class BadYear): Derive from 'Exception'."}, {"sha": "10459dffcd7500479546f02cbbd0807e7c733b7f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,8 @@\n+2021-11-23  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR bootstrap/103306\n+\t* fixincl.c (process): Don't call abort().\n+\n 2021-11-13  Xi Ruoyao  <xry111@mengyan1223.wang>\n \n \tPR other/21823"}, {"sha": "0a9e75cece1506988ec3f69d05b71806b8a16fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,141 @@\n+2021-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/88232\n+\t* Makefile.in (OBJS): Add gimple-warn-recursion.o.\n+\t* common.opt: Add -Winfinite-recursion.\n+\t* doc/invoke.texi (-Winfinite-recursion): Document.\n+\t* passes.def (pass_warn_recursion): Schedule a new pass.\n+\t* tree-pass.h (make_pass_warn_recursion): Declare.\n+\t* gimple-warn-recursion.c: New file.\n+\n+2021-11-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_invalid_new_builtin): Change\n+\terror messages for ENB_P8V and ENB_P9V.\n+\n+2021-11-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: Add power6-64 stanza.  Move\n+\tCMPB to power6-64 stanza.\n+\t* config/rs6000/rs6000-call.c (rs6000_invalid_new_builtin): Handle\n+\tENB_P6_64 case.\n+\t(rs6000_new_builtin_is_supported): Likewise.\n+\t(rs6000_expand_new_builtin): Likewise.  Clean up formatting.\n+\t(rs6000_init_builtins): Handle ENB_P6_64 case.\n+\t* config/rs6000/rs6000-gen-builtins.c (bif_stanza): Add\tBSTZ_P6_64.\n+\t(stanza_map): Add entry mapping power6-64 to BSTZ_P6_64.\n+\t(enable_string): Add \"ENB_P6_64\".\n+\t(write_decls): Add ENB_P6_64 to bif_enable enum.\n+\n+2021-11-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref-tree.h (struct modref_tree): Remove max_bases, max_refs\n+\tand max_accesses.\n+\t(modref_tree::modref_tree): Remove parametr.\n+\t(modref_tree::insert_base): Add max_bases parameter.\n+\t(modref_tree::insert): Add max_bases, max_refs, max_accesses\n+\tparameters.\n+\t(modref_tree::insert): New member function.\n+\t(modref_tree::merge): Add max_bases, max_refs, max_accesses\n+\tparameters.\n+\t(modref_tree::insert): New member function.\n+\t* ipa-modref-tree.c (test_insert_search_collapse): Update.\n+\t(test_merge): Update.\n+\t* ipa-modref.c (dump_records): Don't dump max_refs and max_bases.\n+\t(dump_lto_records): Likewise.\n+\t(modref_summary::finalize): Fix whitespace.\n+\t(get_modref_function_summary): Likewise.\n+\t(modref_access_analysis::record_access): Update.\n+\t(modref_access_analysis::record_access_lto): Update.\n+\t(modref_access_analysis::process_fnspec): Update.\n+\t(analyze_function): Update.\n+\t(modref_summaries::duplicate): Update.\n+\t(modref_summaries_lto::duplicate): Update.\n+\t(write_modref_records): Update.\n+\t(read_modref_records): Update.\n+\t(read_section): Update.\n+\t(propagate_unknown_call): Update.\n+\t(modref_propagate_in_scc): Update.\n+\t(ipa_merge_modref_summary_after_inlining): Update.\n+\n+2021-11-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Remove 2 more duplicite param descriptions.\n+\n+2021-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103361\n+\t* gimple-loop-jam.c (adjust_unroll_factor): Use lambda_int\n+\tfor the dependence distance.\n+\t* tree-data-ref.c (print_lambda_vector): Properly print a lambda_int.\n+\n+2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-inline.h (struct copy_body_data): Remove\n+\ttransform_lang_insert_block member.\n+\t* tree-inline.c (remap_block): Don't call\n+\tid->transform_lang_insert_block.\n+\t(optimize_inline_calls, copy_gimple_seq_and_replace_locals,\n+\ttree_function_versioning, maybe_inline_call_in_expr,\n+\tcopy_fn): Don't initialize id.transform_lang_insert_block.\n+\t* gimplify.c (gimplify_omp_loop): Likewise.\n+\n+2021-11-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-optimization/103335\n+\t* tree-ssa-dse.c (valid_ao_ref_for_dse): Rename to ...\n+\t(valid_ao_ref_kill_for_dse): ... this; do not check that boundaries\n+\tare divisible by BITS_PER_UNIT.\n+\t(get_byte_aligned_range_containing_ref): New function.\n+\t(get_byte_aligned_range_contained_in_ref): New function.\n+\t(normalize_ref): Rename to ...\n+\t(get_byte_range): ... this one; handle accesses not aligned to byte\n+\tboundary; return range in bytes rater than updating ao_ref.\n+\t(clear_live_bytes_for_ref): Take write ref by reference; simplify using\n+\tget_byte_access.\n+\t(setup_live_bytes_from_ref): Likewise.\n+\t(clear_bytes_written_by): Update.\n+\t(live_bytes_read): Update.\n+\t(dse_classify_store): Simplify tech before live_bytes_read checks.\n+\n+2021-11-23  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/102216\n+\t* gimple-fold.c (fold_stmt_1): Add canonicalization\n+\tof \"&MEM[ssa_n, CST]\" to \"ssa_n p+ CST\", note this\n+\tcan only be done if !in_place.\n+\n+2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102431\n+\t* gimplify.c (replace_reduction_placeholders): Remove.\n+\t(note_no_context_vars): New function.\n+\t(gimplify_omp_loop): For OMP_PARALLEL's BIND_EXPR create a new\n+\tBLOCK.  Use copy_tree_body_r with walk_tree instead of unshare_expr\n+\tand replace_reduction_placeholders for duplication of\n+\tOMP_CLAUSE_REDUCTION_{INIT,MERGE} expressions.  Ensure all mentioned\n+\tautomatic vars have DECL_CONTEXT set to non-NULL before doing so\n+\tand reset it afterwards for those vars and their corresponding\n+\tvars.\n+\n+2021-11-23  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100868\n+\t* config/rs6000/altivec.md (altivec_vreve<mode>2 for VEC_K): Use\n+\txxbrq for v16qi, xxbrq + xxbrh for v8hi and xxbrq + xxbrw for v4si\n+\tor v4sf when p9_vector is set.\n+\t(altivec_vreve<mode>2 for VEC_64): Defined. Implemented by xxswapd.\n+\n+2021-11-23  Navid Rahimi  <navidrahimi@microsoft.com>\n+\n+\tPR tree-optimization/102232\n+\t* match.pd (x * (1 + y / x) - y) -> (x - y % x): New optimization.\n+\n+2021-11-23  Navid Rahimi  <navidrahimi@microsoft.com>\n+\n+\tPR tree-optimization/96779\n+\t* match.pd (-x == x) -> (x == 0): New optimization.\n+\n 2021-11-22  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR tree-optimization/98953"}, {"sha": "6a898735f7eafaf82ed6b02541ef09d9ac91734f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1 +1 @@\n-20211123\n+20211124"}, {"sha": "9cbba19fbd81e7b196a8f828818b1c8d48b29668", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,8 @@\n+2021-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/88232\n+\t* c.opt: Add -Winfinite-recursion.\n+\n 2021-11-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/33925"}, {"sha": "42e918ad518c50de7c88801dcf413a29c69e6045", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,8 @@\n+2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (c_clone_omp_udr): Don't initialize\n+\tid.transform_lang_insert_block.\n+\n 2021-11-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/33925"}, {"sha": "79cb9f9a7cf607de314cd557f7a77f31fa14d92f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,20 @@\n+2021-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96507\n+\t* typeck.c (warn_for_null_address): Handle reference members.\n+\n+2021-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/19808\n+\t* init.c (emit_mem_initializers): Don't add is_really_empty_class\n+\tmembers into uninitialized.\n+\n+2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* semantics.c (clone_omp_udr): Don't initialize\n+\tid.transform_lang_insert_block.\n+\t* optimize.c (clone_body): Likewise.\n+\n 2021-11-22  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (build_x_unary_op): Set address location."}, {"sha": "ab6584c4af2d36573dfab202738aeef62b21dc76", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,17 @@\n+2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103392\n+\t* simplify.c (simplify_bound): Do not try to simplify\n+\tLBOUND/UBOUND for arrays with POINTER or ALLOCATABLE attribute.\n+\n+2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/87711\n+\tPR fortran/87851\n+\t* trans-array.c (arg_evaluated_for_scalarization): Add LEN_TRIM to\n+\tlist of intrinsics for which an optional KIND argument needs to be\n+\tremoved before scalarization.\n+\n 2021-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/103315"}, {"sha": "deca255b77eed2ccfee192e757d71003b12d6bb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,88 @@\n+2021-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96507\n+\t* g++.dg/warn/Waddress-8.C: New test.\n+\n+2021-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/88232\n+\t* c-c++-common/attr-used-5.c: Suppress valid warning.\n+\t* c-c++-common/attr-used-6.c: Same.\n+\t* c-c++-common/attr-used-9.c: Same.\n+\t* g++.dg/warn/Winfinite-recursion-2.C: New test.\n+\t* g++.dg/warn/Winfinite-recursion-3.C: New test.\n+\t* g++.dg/warn/Winfinite-recursion.C: New test.\n+\t* gcc.dg/Winfinite-recursion-2.c: New test.\n+\t* gcc.dg/Winfinite-recursion.c: New test.\n+\n+2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103392\n+\t* gfortran.dg/bound_simplification_7.f90: New test.\n+\n+2021-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/19808\n+\t* g++.dg/warn/Wuninitialized-28.C: Make a class nonempty.\n+\t* g++.dg/warn/Wuninitialized-29.C: Likewise.\n+\t* g++.dg/warn/Wuninitialized-31.C: New test.\n+\n+2021-11-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/warn/Waddress-5.C: Make sf static.\n+\n+2021-11-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/test_mffsl.c: Change effective target to\n+\ta run-time check.  Fix a typo in a debug print statement.\n+\n+2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/87711\n+\tPR fortran/87851\n+\t* gfortran.dg/len_trim.f90: New test.\n+\n+2021-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103361\n+\t* g++.dg/torture/pr103361.C: New testcase.\n+\n+2021-11-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-dse-4.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-dse-5.c: Update template.\n+\n+2021-11-23  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/102216\n+\t* g++.dg/tree-ssa/pr102216-1.C: New test.\n+\t* g++.dg/tree-ssa/pr102216-2.C: New test.\n+\n+2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102431\n+\t* c-c++-common/gomp/pr102431.c: New test.\n+\t* g++.dg/gomp/pr102431.C: New test.\n+\t* gfortran.dg/gomp/pr102431.f90: New test.\n+\n+2021-11-23  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100868\n+\t* gcc.target/powerpc/vec_reve_1.c: New test.\n+\t* gcc.target/powerpc/vec_reve_2.c: Likewise.\n+\n+2021-11-23  Navid Rahimi  <navidrahimi@microsoft.com>\n+\n+\tPR tree-optimization/102232\n+\t* gcc.dg/tree-ssa/pr102232.c: Testcase for this optimization.\n+\n+2021-11-23  Navid Rahimi  <navidrahimi@microsoft.com>\n+\n+\tPR tree-optimization/96779\n+\t* gcc.dg/tree-ssa/pr96779.c: Testcase for this optimization.\n+\t* gcc.dg/tree-ssa/pr96779-disabled.c: Testcase for this optimization\n+\twhen -fwrapv passed.\n+\n 2021-11-22  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/crash106.C: Adjust."}, {"sha": "8d436553f771885df4b77b013255096824b7d868", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,15 @@\n+2021-11-23  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR preprocessor/103355\n+\t* system.h (ATTR_LIKELY): Fix definition.\n+\n+2021-11-23  Marek Polacek  <polacek@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR preprocessor/103355\n+\t* lex.c: Use ATTR_LIKELY instead of [[likely]].\n+\t* system.h (ATTR_LIKELY): Define.\n+\n 2021-11-22  Jakub Jelinek  <jakub@redhat.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "24dc9af87ce7859c825bedbec5f5d4011db8952b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4359264585acc8210ba60abb6dfb15bf1fa57/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4359264585acc8210ba60abb6dfb15bf1fa57/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e1d4359264585acc8210ba60abb6dfb15bf1fa57", "patch": "@@ -1,3 +1,29 @@\n+2021-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103086\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Check unique_ptr\n+\twith non-empty pointer and non-empty deleter.\n+\n+2021-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/50594.cc: Check effective target.\n+\t* testsuite/20_util/allocator/1.cc: Likewise.\n+\t* testsuite/20_util/allocator/overaligned.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/96088.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/96088.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/96088.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/96088.cc: Likewise.\n+\t* testsuite/ext/throw_allocator/check_delete.cc: Likewise.\n+\t* testsuite/ext/throw_allocator/check_new.cc: Likewise.\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_std_allocator_new):\n+\tDefine new proc.\n+\n+2021-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103381\n+\t* include/ext/bitmap_allocator.h: Include <bits/stl_function.h>\n+\tinstead of <functional>.\n+\n 2021-11-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/c++config (_GLIBCXX14_DEPRECATED): Fix condition"}]}