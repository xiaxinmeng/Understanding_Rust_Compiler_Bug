{"sha": "8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "node_id": "C_kwDOANBUbNoAKDhkMzZhMGQyODgwZGY3N2RjMDFhZDk0MDhhZWI3YTdhZTY3NGQ5YmE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-11T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-11T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "8bca1d60ca69fa23b68e61e591e3a499ebd72518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bca1d60ca69fa23b68e61e591e3a499ebd72518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/comments", "author": null, "committer": null, "parents": [{"sha": "e82c382971664d6fd138cc36020db4b1a91885c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82c382971664d6fd138cc36020db4b1a91885c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82c382971664d6fd138cc36020db4b1a91885c6"}], "stats": {"total": 705, "additions": 704, "deletions": 1}, "files": [{"sha": "d0a35a94c12556f68bd4a0c3594b2954680df0f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 362, "deletions": 0, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,365 @@\n+2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102906\n+\t* tree-ssa-loop-ch.c (entry_loop_condition_is_static): New.\n+\t(should_duplicate_loop_header_p): Call entry_loop_condition_is_static.\n+\t(class ch_base): Add m_ranger and m_query.\n+\t(ch_base::copy_headers): Pass m_query to\n+\tentry_loop_condition_is_static.\n+\t(pass_ch::execute): Allocate and deallocate m_ranger and\n+\tm_query.\n+\t(pass_ch_vect::execute): Same.\n+\n+2021-11-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/103170\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>):\n+\tUse vwcore iterator for the r constraint output string.\n+\n+2021-11-10  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* internal-fn.c (expand_DEFERRED_INIT): Apply pattern initialization\n+\tonly when have_insn_for return true for the mode. Fix a memory leak.\n+\n+2021-11-10  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* config/arm/arm.c (cortexa9_extra_costs, cortexa8_extra_costs,\n+\tcortexa5_extra_costs, cortexa7_extra_costs,\n+\tcortexa12_extra_costs, cortexa15_extra_costs, v7m_extra_costs):\n+\tInitialize movi, dup and extract costing fields.\n+\n+2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::path_range_query): Do\n+\tnot init m_path.\n+\t(path_range_query::dump): Change m_path uses to non-pointer.\n+\t(path_range_query::defined_outside_path):  Same.\n+\t(path_range_query::set_path): Same.\n+\t(path_range_query::add_copies_to_imports): Same.\n+\t(path_range_query::range_of_stmt): Same.\n+\t(path_range_query::compute_outgoing_relations): Same.\n+\t(path_range_query::compute_ranges): Imports are now optional.\n+\tImplement overload that takes an edge.\n+\t* gimple-range-path.h (class path_range_query): Make imports\n+\toptional for compute_ranges.  Add compute_ranges(edge) overload.\n+\tMake m_path an auto_vec instead of a pointer and adjust\n+\taccordingly.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vectorizer.h (struct scalar_cond_masked_key): Add inverted_p.\n+\t(default_hash_traits<scalar_conf_masked_key>): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_condition): Check if inverse of mask\n+\tis live.\n+\t* tree-vectorizer.c (scalar_cond_masked_key::get_cond_ops_from_tree):\n+\tRegister mask inverses.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vectorizer.c (vectorize_loops): Do local CSE through RPVN upon\n+\tsuccessful vectorization.\n+\n+2021-11-10  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (sbr_vector::grow): New.\n+\t(sbr_vector::set_bb_range): Call grow.\n+\t(sbr_vector::get_bb_range): Same.\n+\t(sbr_vector::bb_range_p): Remove assert.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_topbits_shuffle<mode>_le\n+\t,*aarch64_topbits_shuffle<mode>_be): Remove.\n+\n+2021-11-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c: Include tree-eh.h\n+\t(modref_summary::modref_summary): Initialize side_effects.\n+\t(struct modref_summary_lto): New bool field side_effects.\n+\t(modref_summary_lto::modref_summary_lto): Initialize side_effects.\n+\t(modref_summary::dump): Dump side_effects.\n+\t(modref_summary_lto::dump): Dump side_effects.\n+\t(merge_call_side_effects): Merge side effects.\n+\t(process_fnspec): Calls to non-const/pure or looping\n+\tfunction is a side effect.\n+\t(analyze_call): Self-recursion is a side-effect; handle\n+\tspecial builtins.\n+\t(analyze_load): Watch for volatile and throwing memory.\n+\t(analyze_store): Likewise.\n+\t(analyze_stmt): Watch for volatitle asm.\n+\t(analyze_function): Handle side_effects.\n+\t(modref_summaries::duplicate): Duplicate side_effects.\n+\t(modref_summaries_lto::duplicate): Likewise.\n+\t(modref_write): Stream side_effects.\n+\t(read_section): Likewise.\n+\t(update_signature): Update.\n+\t(propagate_unknown_call): Handle side_effects.\n+\t(modref_propagate_in_scc): Likewise.\n+\t* ipa-modref.h (struct modref_summary): Add side_effects.\n+\t* ipa-pure-const.c (special_builtin_state): Rename to ...\n+\t(builtin_safe_for_const_function_p): ... this one.\n+\t(check_call): Update.\n+\t(finite_function_p): Break out from ...\n+\t(propagate_pure_const): ... here\n+\t* ipa-utils.h (finite_function): Declare.\n+\n+2021-11-10  Lucas A. M. Magalh\u00e3es  <lamm@linux.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-*): Remove -rpath from\n+\t--with-advance-toolchain.\n+\n+2021-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101940\n+\t* attribs.c (struct scoped_attributes): Add a bool member.\n+\t(lookup_scoped_attribute_spec): Forward declare.\n+\t(register_scoped_attributes): New bool parameter, defaulted to\n+\tfalse.  Use it.\n+\t(handle_ignored_attributes_option): New function.\n+\t(free_attr_data): New function.\n+\t(init_attributes): Call handle_ignored_attributes_option.\n+\t(attr_namespace_ignored_p): New function.\n+\t(decl_attributes): Check attr_namespace_ignored_p before\n+\twarning.\n+\t* attribs.h (free_attr_data): Declare.\n+\t(register_scoped_attributes): Adjust declaration.\n+\t(handle_ignored_attributes_option): Declare.\n+\t(canonicalize_attr_name): New function template.\n+\t(canonicalize_attr_name): Use it.\n+\t* common.opt (Wattributes=): New option with a variable.\n+\t* doc/extend.texi: Document #pragma GCC diagnostic ignored_attributes.\n+\t* doc/invoke.texi: Document -Wno-attributes=.\n+\t* opts.c (common_handle_option) <case OPT_Wattributes_>: Handle.\n+\t* plugin.h (register_scoped_attributes): Adjust declaration.\n+\t* toplev.c (compile_file): Call free_attr_data.\n+\n+2021-11-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/arm/arm-cpus.in (cortex-a710): New CPU.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-11-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_general_gimple_fold_builtin): Mark argument as unused.\n+\n+2021-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c (merge_and_complain): Make the first argument\n+\ta reference type.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (optab): Use fmax_nan instead of\n+\tsmax_nan and fmin_nan instead of smin_nan.\n+\t(maxmin_uns): Rename to...\n+\t(fmaxmin): ...this and make the same changes.  Remove entries\n+\tunrelated to fmax* and fmin*.\n+\t* config/aarch64/aarch64.md (<maxmin_uns><mode>3): Rename to...\n+\t(<fmaxmin><mode>3): ...this.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<maxmin_uns>p<mode>):\n+\tRename to...\n+\t(aarch64_<optab>p<mode>): ...this.\n+\t(<maxmin_uns><mode>3): Rename to...\n+\t(<fmaxmin><mode>3): ...this.\n+\t(reduc_<maxmin_uns>_scal_<mode>): Rename to...\n+\t(reduc_<optab>_scal_<mode>): ...this and update gen* call.\n+\t(aarch64_reduc_<maxmin_uns>_internal<mode>): Rename to...\n+\t(aarch64_reduc_<optab>_internal<mode>): ...this.\n+\t(aarch64_reduc_<maxmin_uns>_internalv2si): Rename to...\n+\t(aarch64_reduc_<optab>_internalv2si): ...this.\n+\t* config/aarch64/aarch64-sve.md (<maxmin_uns><mode>3): Rename to...\n+\t(<fmaxmin><mode>3): ...this.\n+\t* config/aarch64/aarch64-simd-builtins.def (smax_nan, smin_nan)\n+\tRename to...\n+\t(fmax_nan, fmin_nan): ...this.\n+\t* config/aarch64/arm_neon.h (vmax_f32, vmax_f64, vmaxq_f32, vmaxq_f64)\n+\t(vmin_f32, vmin_f64, vminq_f32, vminq_f64, vmax_f16, vmaxq_f16)\n+\t(vmin_f16, vminq_f16): Update accordingly.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vector_costs::finish_cost): Take the\n+\tcorresponding scalar costs as a parameter.\n+\t(finish_cost): Likewise.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n+\t(vect_estimate_min_profitable_iters): Update accordingly.\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Likewise.\n+\t* tree-vectorizer.c (vector_costs::finish_cost): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs::finish_cost):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_cost_data::finish_cost): Likewise.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (_loop_vec_info::scalar_costs): New member\n+\tvariable.\n+\t(_loop_vec_info::single_scalar_iteration_cost): Delete.\n+\t(LOOP_VINFO_SINGLE_SCALAR_ITERATION_COST): Delete.\n+\t(vector_costs::total_cost): New function.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Update\n+\tafter above changes.\n+\t(_loop_vec_info::~_loop_vec_info): Delete scalar_costs.\n+\t(vect_compute_single_scalar_iteration_cost): Store the costs\n+\tin loop_vinfo->scalar_costs.\n+\t(vect_estimate_min_profitable_iters): Get the scalar cost from\n+\tloop_vinfo->scalar_costs.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vector_costs::better_main_loop_than_p)\n+\t(vector_costs::better_epilogue_loop_than_p)\n+\t(vector_costs::compare_inside_loop_cost)\n+\t(vector_costs::compare_outside_loop_cost): Likewise.\n+\t* tree-vectorizer.c (vector_costs::better_main_loop_than_p)\n+\t(vector_costs::better_epilogue_loop_than_p)\n+\t(vector_costs::compare_inside_loop_cost)\n+\t(vector_costs::compare_outside_loop_cost): New functions,\n+\tcontaining code moved from...\n+\t* tree-vect-loop.c (vect_better_loop_vinfo_p): ...here.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (_loop_vec_info): Remove vec_outside_cost\n+\tand vec_inside_cost.\n+\t(vector_costs::outside_cost): New function.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Update\n+\tafter above.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t(vect_better_loop_vinfo_p): Get the inside and outside costs\n+\tfrom the loop_vec_infos' vector_costs.\n+\n+2021-11-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vec_info::target_cost_data): Replace with...\n+\t(_loop_vec_info::vector_costs): ...this.\n+\t(LOOP_VINFO_TARGET_COST_DATA): Delete.\n+\t* tree-vectorizer.c (vec_info::vec_info): Remove target_cost_data\n+\tinitialization.\n+\t(vec_info::~vec_info): Remove corresponding delete.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize\n+\tvector_costs to null.\n+\t(_loop_vec_info::~_loop_vec_info): Delete vector_costs.\n+\t(vect_analyze_loop_operations): Update after above changes.\n+\t(vect_analyze_loop_2): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vect-slp.c (vect_slp_analyze_operations): Likewise.\n+\n+2021-11-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-core.h (EAF_DIRECT): Remove.\n+\t(EAF_NOCLOBBER): Remove.\n+\t(EAF_UNUSED): Remove.\n+\t(EAF_NOESCAPE): Remove.\n+\t(EAF_NO_DIRECT_CLOBBER): New.\n+\t(EAF_NO_INDIRECT_CLOBBER): New.\n+\t(EAF_NODIRECTESCAPE): Remove.\n+\t(EAF_NO_DIRECT_ESCAPE): New.\n+\t(EAF_NO_INDIRECT_ESCAPE): New.\n+\t(EAF_NOT_RETURNED): Remove.\n+\t(EAF_NOT_RETURNED_INDIRECTLY): New.\n+\t(EAF_NOREAD): Remove.\n+\t(EAF_NO_DIRECT_READ): New.\n+\t(EAF_NO_INDIRECT_READ): New.\n+\t* gimple.c (gimple_call_arg_flags): Update for new flags.\n+\t(gimple_call_retslot_flags): Update for new flags.\n+\t* ipa-modref.c (dump_eaf_flags): Likewise.\n+\t(remove_useless_eaf_flags): Likewise.\n+\t(deref_flags): Likewise.\n+\t(modref_lattice::init): Likewise.\n+\t(modref_lattice::merge): Likewise.\n+\t(modref_lattice::merge_direct_load): Likewise.\n+\t(modref_lattice::merge_direct_store): Likewise.\n+\t(modref_eaf_analysis::merge_call_lhs_flags): Likewise.\n+\t(callee_to_caller_flags): Likewise.\n+\t(modref_eaf_analysis::analyze_ssa_name): Likewise.\n+\t(modref_eaf_analysis::propagate): Likewise.\n+\t(modref_merge_call_site_flags): Likewise.\n+\t* ipa-modref.h (interposable_eaf_flags): Likewise.\n+\t* tree-ssa-alias.c: (ref_maybe_used_by_call_p_1) Likewise.\n+\t* tree-ssa-structalias.c (handle_call_arg): Likewise.\n+\t(handle_rhs_call): Likewise.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Likewise.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (complex_mul_pattern::matches): Remove l1node.\n+\n+2021-11-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_general_gimple_fold_builtin): Change pointer alignment and\n+\talias.\n+\n+2021-11-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref-tree.h (modref_tree::remap_params): Fix off-by-one error.\n+\n+2021-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/102566\n+\t* match.pd (nop_atomic_bit_test_and_p): New match.\n+\t* tree-ssa-ccp.c (convert_atomic_bit_not): New function.\n+\t(gimple_nop_atomic_bit_test_and_p): New prototype.\n+\t(optimize_atomic_bit_test_and): Transform equivalent, but slighly\n+\tdifferent cases to their canonical forms.\n+\n+2021-11-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/103126\n+\t* tree-vect-loop.c (neutral_op_for_reduction): Remove static.\n+\t* tree-vectorizer.h (neutral_op_for_reduction): Declare.\n+\t* tree-if-conv.c : Include tree-vectorizer.h.\n+\t(is_cond_scalar_reduction): Handle\n+\tBIT_XOR_EXPR/BIT_IOR_EXPR/BIT_AND_EXPR.\n+\t(convert_scalar_cond_reduction): Ditto.\n+\n+2021-11-10  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/sse.md (cmul<conj_op><mode>3): add new define_expand.\n+\t(cmla<conj_op><mode>4): Likewise\n+\n+2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadedge.c: Do not include\n+\tgimple-ssa-evrp-analyze.h.\n+\t* value-pointer-equiv.cc: Same.\n+\n+2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader::maybe_register_path_dump): Abstract path dumping...\n+\t(dump_path): ...here.\n+\t(back_threader::resolve_phi): Call dump_path.\n+\t(debug): Same.\n+\n+2021-11-10  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/sse.md (fma_<complexpairopname>_<mode>_pair):\n+\tAdd new define_insn.\n+\t(fma_<mode>_fmaddc_bcst): Add new define_insn_and_split.\n+\t(fma_<mode>_fcmaddc_bcst): Likewise\n+\n+2021-11-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* match.pd: Simplify (trunc)fmax/fmin((extend)a, (extend)b) to\n+\tMAX/MIN(a,b)\n+\n+2021-11-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101529\n+\t* config/aarch64/aarch64.c (aarch64_evpc_ins): Don't use target\n+\tas an input, use original one.\n+\n+2021-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2.c (nios2_can_inline_p): New.\n+\t(TARGET_CAN_INLINE_P): Define.\n+\n 2021-11-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_new_builtin):"}, {"sha": "b3ffa3e666f665ce696c43214a362d658d0d771f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1 +1 @@\n-20211110\n+20211111"}, {"sha": "f4413d8a7d27a5c4a1bfdbcabe113e1db7f1b493", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,155 @@\n+2021-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_STUBBED_P): Delete.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not set it.\n+\t* gcc-interface/trans.c (Call_to_gnu): Use GNAT_NAME local variable\n+\tand adjust accordingly.  Replace test on DECL_STUBBED_P with direct\n+\ttest on Convention and move it down in the processing.\n+\n+2021-11-10  Bob Duff  <duff@adacore.com>\n+\n+\t* scng.adb (Check_Bidi): New procedure to give warning. Note\n+\tthat this is called only for non-ASCII characters, so should not\n+\tbe an efficiency issue.\n+\t(Slit): Call Check_Bidi for wide characters in string_literals.\n+\t(Minus_Case): Call Check_Bidi for wide characters in comments.\n+\t(Char_Literal_Case): Call Check_Bidi for wide characters in\n+\tcharacter_literals.  Move Accumulate_Checksum down, because\n+\totherwise, if Err is True, the Code is uninitialized.\n+\t* errout.ads: Make the obsolete nature of \"Insertion character\n+\t?\" more prominent; one should not have to read several\n+\tparagraphs before finding out that it's obsolete.\n+\n+2021-11-10  Bob Duff  <duff@adacore.com>\n+\n+\t* repinfo.adb (List_Component_Layout): Initialize Sbit.\n+\n+2021-11-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Array_Equality): Fix inconsistent casing\n+\tin comment about the template for expansion of array equality;\n+\tnow we use lower case for true/false/boolean.\n+\t(Handle_One_Dimension): Fix comment about the template for\n+\texpansion of array equality.\n+\n+2021-11-10  Bob Duff  <duff@adacore.com>\n+\n+\t* repinfo.adb (List_Common_Type_Info, List_Object_Info): Add\n+\tcheck for In_Generic_Scope.\n+\t(List_Component_Layout): Check for known static values.\n+\t* sem_ch13.adb (Check_Record_Representation_Clause): Add check\n+\tfor In_Generic_Scope.\n+\n+2021-11-10  Etienne Servais  <servais@adacore.com>\n+\n+\t* aspects.adb, aspects.ads (Is_Aspect_Id): New function.\n+\t* namet-sp.ads, namet-sp.adb (Aspect_Spell_Check,\n+\tAttribute_Spell_Check): New Functions.\n+\t* par-ch13.adb (Possible_Misspelled_Aspect): Removed.\n+\t(With_Present): Use Aspect_Spell_Check, use Is_Aspect_Id.\n+\t(Get_Aspect_Specifications): Use Aspect_Spell_Check,\n+\tIs_Aspect_Id, Bad_Aspect.\n+\t* par-sync.adb (Resync_Past_Malformed_Aspect): Use Is_Aspect_Id.\n+\t* sem_ch13.adb (Check_One_Attr): Use Is_Aspect_Id.\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tIntroduce the Process_No_Specification_Of_Aspect, emit a warning\n+\tinstead of an error on unknown aspect, hint for typos.\n+\tIntroduce Process_No_Use_Of_Attribute to add spell check for\n+\tattributes too.\n+\t(Set_Error_Msg_To_Profile_Name): Use Is_Aspect_Id.\n+\t* sem_util.adb (Bad_Attribute): Use Attribute_Spell_Check.\n+\t(Bad_Aspect): New function.\n+\t* sem_util.ads (Bad_Aspect): New function.\n+\n+2021-11-10  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-taskin.adb (Initialize_ATCB): Initialize\n+\tT.Common.Current_Priority to Priority'First.\n+\t* libgnarl/s-taskin.ads (Unspecified_Priority): Redefined as -1.\n+\t* libgnat/system-rtems.ads: Start priority range from 1, as 0 is\n+\treserved by the operating system.\n+\n+2021-11-10  Pierre-Alexandre Bazin  <bazin@adacore.com>\n+\n+\t* libgnat/a-nbnbig.ads: Mark the unit as Pure.\n+\t* libgnat/s-aridou.adb: Add contracts and ghost code for proof.\n+\t(Scaled_Divide): Reorder operations and use of temporaries in\n+\ttwo places to facilitate proof.\n+\t* libgnat/s-aridou.ads: Add full functional contracts.\n+\t* libgnat/s-arit64.adb: Mark in SPARK.\n+\t* libgnat/s-arit64.ads: Add contracts similar to those from\n+\ts-aridou.ads.\n+\t* rtsfind.ads: Document the limitation that runtime units\n+\tloading does not work for private with-clauses.\n+\n+2021-11-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Eq_Body): Adapt call to\n+\tExpand_Record_Equality.\n+\t* exp_ch4.ads, exp_ch4.adb (Expand_Composite_Equality): Remove\n+\tBodies parameter; adapt comment; fix style in body; adapt calls\n+\tto Expand_Record_Equality.\n+\t(Expand_Array_Equality): Adapt calls to\n+\tExpand_Composite_Equality.\n+\t(Expand_Record_Equality): Remove Bodies parameter; adapt\n+\tcomment; adapt call to Expand_Composite_Equality.\n+\t* exp_ch8.adb (Build_Body_For_Renaming): Adapt call to\n+\tExpand_Record_Equality.\n+\n+2021-11-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Composite_Equality): Handle arrays inside\n+\trecords just like scalars; only records inside records need\n+\tdedicated handling.\n+\n+2021-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_type.ads (Has_Compatible_Type): Add For_Comparison parameter.\n+\t* sem_type.adb (Has_Compatible_Type): Put back the reversed calls\n+\tto Covers guarded with For_Comparison.\n+\t* sem_ch4.adb (Analyze_Membership_Op) <Try_One_Interp>: Remove new\n+\treversed call to Covers and set For_Comparison to true instead.\n+\t(Find_Comparison_Types) <Try_One_Interp>: Likewise\n+\t(Find_Equality_Types) <Try_One_Interp>: Likewise.\n+\n+2021-11-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* Makefile.rtl: Add unit.\n+\t* libgnat/a-nbnbin__ghost.adb: Move...\n+\t* libgnat/a-nbnbig.adb: ... here. Mark ghost as ignored.\n+\t* libgnat/a-nbnbin__ghost.ads: Move...\n+\t* libgnat/a-nbnbig.ads: ... here.  Add comment for purpose of\n+\tthis unit. Mark ghost as ignored.\n+\t* libgnat/s-widthu.adb: Use new unit.\n+\t* sem_aux.adb (First_Subtype): Adapt to the case of a ghost type\n+\twhose freeze node is rewritten to a null statement.\n+\n+2021-11-10  Etienne Servais  <servais@adacore.com>\n+\n+\t* libgnat/s-regexp.adb (Check_Well_Formed_Pattern): Fix\n+\tConstraint_Error on missing close bracket.\n+\n+2021-11-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Array_Equality): Remove check of the array\n+\tbound being an N_Range node; use Type_High_Bound/Type_Low_Bound,\n+\twhich handle all kinds of array bounds.\n+\n+2021-11-10  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch3.adb (Derived_Type_Declaration): Introduce a subprogram\n+\tfor tree transformation. If a tree transformation is performed,\n+\tthen warn that it would be better to reorder the interfaces.\n+\n+2021-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Non_Universal_Interpretations): Add guard.\n+\n+2021-11-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch4.adb (P_Primary): Adapt test for getting error message\n+\ton missing parentheses.\n+\n 2021-11-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n \n \t* freeze.adb (Check_Inherited_Conditions): Initialize"}, {"sha": "d1d2183c6983f12aeb2eefc005a0bdd665fae261", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,9 @@\n+2021-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101940\n+\t* c-pragma.c (handle_pragma_diagnostic): Handle #pragma GCC diagnostic\n+\tignored_attributes.\n+\n 2021-11-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-pragma.c (GCC_BAD_AT): New macro."}, {"sha": "ac493ec7d6f58350b2844f284f405d64a131a27a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,13 @@\n+2021-11-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103137\n+\tPR fortran/103138\n+\t* check.c (gfc_check_shape): Avoid NULL pointer dereference on\n+\tmissing ref.\n+\t* simplify.c (gfc_simplify_cshift): Avoid NULL pointer dereference\n+\twhen shape not set.\n+\t(gfc_simplify_transpose): Likewise.\n+\n 2021-11-09  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tPR fortran/68800"}, {"sha": "f6da9a25e139b9aa3a0f926a0b4a4e3017e30dae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,158 @@\n+2021-11-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr102906.c: New test.\n+\n+2021-11-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/103170\n+\t* gcc.c-torture/compile/vector-dup-1.c: New test.\n+\n+2021-11-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR tree-optimization/102892\n+\t* gcc.dg/pr102892-1.c: New file.\n+\t* gcc.dg/pr102892-2.c: Likewise.\n+\n+2021-11-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/103161\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-16.c: Avoid relying on\n+\targument evaluation order.  Cast width and precision to signed\n+\tto avoid undefined behavior.\n+\n+2021-11-10  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.target/i386/auto-init-6.c: _Complex long double is initialized\n+\tto zero now with -ftrivial-auto-var-init=pattern.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pred-not-gen-1.c: Update testcase.\n+\t* gcc.target/aarch64/sve/pred-not-gen-2.c: Update testcase.\n+\t* gcc.target/aarch64/sve/pred-not-gen-3.c: Update testcase.\n+\t* gcc.target/aarch64/sve/pred-not-gen-4.c: Update testcase.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/shrn-combine-8.c: Update.\n+\t* gcc.target/aarch64/shrn-combine-9.c: Update.\n+\n+2021-11-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-13.c: Fix typo.\n+\n+2021-11-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101940\n+\t* c-c++-common/Wno-attributes-1.c: New test.\n+\t* c-c++-common/Wno-attributes-2.c: New test.\n+\t* c-c++-common/Wno-attributes-3.c: New test.\n+\n+2021-11-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/ipa/modref-1.C: Update template.\n+\t* gcc.dg/ipa/modref-3.c: Update template.\n+\t* gcc.dg/lto/modref-3_0.c: Update template.\n+\t* gcc.dg/lto/modref-4_0.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-10.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-11.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-5.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-6.c: Update template.\n+\t* gcc.dg/tree-ssa/modref-13.c: New test.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/103042\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-long.c: Use\n+\tvect_long_long instead of vect_long.\n+\t* gcc.dg/vect/complex/bb-slp-complex-add-pattern-unsigned-long.c:\n+\tLikewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-long.c: Likewise.\n+\t* gcc.dg/vect/complex/vect-complex-add-pattern-unsigned-long.c:\n+\tLikewise.\n+\n+2021-11-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/signbit-2.c: Turn off masks.\n+\t* gcc.dg/signbit-5.c: Likewise.\n+\n+2021-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/102690\n+\t* g++.dg/warn/Warray-bounds-16.C: XFAIL diagnostic part\n+\tand optimization.\n+\n+2021-11-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/simd/lowering_tbaa.c: New test.\n+\n+2021-11-10  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/fmla_intrinsic_1.c: Fix big-endian testism.\n+\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/fmul_intrinsic_1.c: Likewise.\n+\n+2021-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/102566\n+\t* g++.target/i386/pr102566-1.C: New test.\n+\t* g++.target/i386/pr102566-2.C: Likewise.\n+\t* g++.target/i386/pr102566-3.C: Likewise.\n+\t* g++.target/i386/pr102566-4.C: Likewise.\n+\t* g++.target/i386/pr102566-5a.C: Likewise.\n+\t* g++.target/i386/pr102566-5b.C: Likewise.\n+\t* g++.target/i386/pr102566-6a.C: Likewise.\n+\t* g++.target/i386/pr102566-6b.C: Likewise.\n+\t* gcc.target/i386/pr102566-1a.c: Likewise.\n+\t* gcc.target/i386/pr102566-1b.c: Likewise.\n+\t* gcc.target/i386/pr102566-2.c: Likewise.\n+\t* gcc.target/i386/pr102566-3a.c: Likewise.\n+\t* gcc.target/i386/pr102566-3b.c: Likewise.\n+\t* gcc.target/i386/pr102566-4.c: Likewise.\n+\t* gcc.target/i386/pr102566-5.c: Likewise.\n+\t* gcc.target/i386/pr102566-6.c: Likewise.\n+\t* gcc.target/i386/pr102566-7.c: Likewise.\n+\t* gcc.target/i386/pr102566-8a.c: Likewise.\n+\t* gcc.target/i386/pr102566-8b.c: Likewise.\n+\t* gcc.target/i386/pr102566-9a.c: Likewise.\n+\t* gcc.target/i386/pr102566-9b.c: Likewise.\n+\t* gcc.target/i386/pr102566-10a.c: Likewise.\n+\t* gcc.target/i386/pr102566-10b.c: Likewise.\n+\t* gcc.target/i386/pr102566-11.c: Likewise.\n+\t* gcc.target/i386/pr102566-12.c: Likewise.\n+\t* gcc.target/i386/pr102566-13.c: New test.\n+\t* gcc.target/i386/pr102566-14.c: New test.\n+\n+2021-11-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/ifcvt-reduction-logic-op.c: New test.\n+\n+2021-11-10  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vector-complex-float.c: New test.\n+\n+2021-11-10  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16vl-complex-broadcast-1.c: New test.\n+\n+2021-11-10  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102464-maxmin.c: New test.\n+\n+2021-11-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101529\n+\t* c-c++-common/torture/builtin-convertvector-2.c: New test.\n+\t* c-c++-common/torture/builtin-shufflevector-2.c: New test.\n+\n+2021-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/nios2/custom-fp-inline-1.c: New.\n+\t* gcc.target/nios2/custom-fp-inline-2.c: New.\n+\t* gcc.target/nios2/custom-fp-inline-3.c: New.\n+\t* gcc.target/nios2/custom-fp-inline-4.c: New.\n+\n 2021-11-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/bad-pragma-locations.c: New test."}, {"sha": "7bf62de5b07fcbefcc5905c70827c07102cddaba", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,8 @@\n+2021-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/rs6000/linux-unwind.h (ppc_back_fallback): Make it static,\n+\tformatting fix.\n+\n 2021-11-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin10-unwind-find-enc-func.c: Include libgcc_tm.h."}, {"sha": "f281fcf71482be6fdde87886d54eedc99fad52a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d36a0d2880df77dc01ad9408aeb7a7ae674d9ba", "patch": "@@ -1,3 +1,16 @@\n+2021-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100117\n+\t* testsuite/17_intro/headers/c++1998/49745.cc: Explicitly list\n+\tall C++ headers instead of including <bits/stdc++.h>\n+\n+2021-11-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100748\n+\tPR libstdc++/103133\n+\t* config/os/gnu-linux/os_defines.h (_GLIBCXX_GTHREAD_USE_WEAK):\n+\tDefine for glibc 2.34 and later.\n+\n 2021-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h (__distance_fw): Replace class keyword with"}]}