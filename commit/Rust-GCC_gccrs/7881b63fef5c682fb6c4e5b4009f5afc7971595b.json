{"sha": "7881b63fef5c682fb6c4e5b4009f5afc7971595b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4MWI2M2ZlZjVjNjgyZmI2YzRlNWI0MDA5ZjVhZmM3OTcxNTk1Yg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2016-11-27T14:21:51Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2016-11-27T14:21:51Z"}, "message": "[Darwin, ld64] Make PIC indirections and constant labels linker-visible.\n\nIndirections:\n\n  If we have a situation like:\n\nglobal_weak_symbol:\n  ....\nLnon_weak_local:\n  ....\n\n  ld64 will be unable to split this into two atoms (because the \"L\" makes\n  the second symbol 'invisible').  This means that legitimate direct accesses\n  to the second symbol will appear to be non-allowed direct accesses to an\n  atom of type weak, global which are not allowed.\n\n  To avoid this, we make the indirections have a leading 'l' (lower-case L)\n  which has a special meaning: linker can see this and use it to determine\n  atoms, but it is not placed into the final symbol table.\n\n  The implementation here is somewhat heavy-handed in that it will also mark\n  indirections to the __IMPORT,__pointers section the same way which is\n  really unnecessary, since ld64 _can_ split those into atoms as they are\n  fixed size.  FIXME: determine if this is a penalty worth extra code to\n  fix.\n\nSimilarly, with:\n\n  .const\nweak_global_constant:\n  ....\n\nLCxx:\n  ...\n\n ld64 can't split the second, causing a warning when it's directly\naccessed.\n\ngcc/\n\n2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n\n\tPR target/71767\n\t* config/darwin.c (imachopic_indirection_name): Make data\n\tsection indirections linker-visible.\n\t* config/darwin.h (ASM_GENERATE_INTERNAL_LABEL): Make local\n\tconstant labels linker-visible.\n\nFrom-SVN: r242893", "tree": {"sha": "dcec7dd9de9a0aeda8a665c8efb45d584526bb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcec7dd9de9a0aeda8a665c8efb45d584526bb5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7881b63fef5c682fb6c4e5b4009f5afc7971595b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7881b63fef5c682fb6c4e5b4009f5afc7971595b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7881b63fef5c682fb6c4e5b4009f5afc7971595b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7881b63fef5c682fb6c4e5b4009f5afc7971595b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3203ed5f0182e7dbf1c74e6598e718641a3d4013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3203ed5f0182e7dbf1c74e6598e718641a3d4013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3203ed5f0182e7dbf1c74e6598e718641a3d4013"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "450086ec386c2e25c139cdc3ace2bbec47724896", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7881b63fef5c682fb6c4e5b4009f5afc7971595b", "patch": "@@ -1,3 +1,11 @@\n+2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/71767\n+\t* config/darwin.c (imachopic_indirection_name): Make data\n+\tsection indirections linker-visible.\n+\t* config/darwin.h (ASM_GENERATE_INTERNAL_LABEL): Make local\n+\tconstant labels linker-visible.\n+\n 2016-11-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* tree.c (build_common_tree_nodes): Initialize ptrdiff_type_node."}, {"sha": "1a67c4ce4e331536467cbcf3831fd5a21c593ab7", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=7881b63fef5c682fb6c4e5b4009f5afc7971595b", "patch": "@@ -474,7 +474,31 @@ indirection_hasher::equal (machopic_indirection *s, const char *k)\n }\n \n /* Return the name of the non-lazy pointer (if STUB_P is false) or\n-   stub (if STUB_B is true) corresponding to the given name.  */\n+   stub (if STUB_B is true) corresponding to the given name.\n+\n+  If we have a situation like:\n+\n+global_weak_symbol:\n+  ....\n+Lnon_weak_local:\n+  ....\n+\n+  ld64 will be unable to split this into two atoms (because the \"L\" makes\n+  the second symbol 'invisible').  This means that legitimate direct accesses\n+  to the second symbol will appear to be non-allowed direct accesses to an\n+  atom of type weak, global which are not allowed.\n+\n+  To avoid this, we make the indirections have a leading 'l' (lower-case L)\n+  which has a special meaning: linker can see this and use it to determine\n+  atoms, but it is not placed into the final symbol table.\n+\n+  The implementation here is somewhat heavy-handed in that it will also mark\n+  indirections to the __IMPORT,__pointers section the same way which is\n+  really unnecessary, since ld64 _can_ split those into atoms as they are\n+  fixed size.  FIXME: determine if this is a penalty worth extra code to\n+  fix.\n+\n+*/\n \n const char *\n machopic_indirection_name (rtx sym_ref, bool stub_p)\n@@ -485,6 +509,7 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n   machopic_indirection *p;\n   bool needs_quotes;\n   const char *suffix;\n+  char L_or_l = 'L';\n   const char *prefix = user_label_prefix;\n   const char *quote = \"\";\n   tree id;\n@@ -519,17 +544,21 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n   if (stub_p)\n     suffix = STUB_SUFFIX;\n   else\n-    suffix = NON_LAZY_POINTER_SUFFIX;\n+    {\n+      suffix = NON_LAZY_POINTER_SUFFIX;\n+      /* Let the linker see this.  */\n+      L_or_l = 'l';\n+    }\n \n-  buffer = XALLOCAVEC (char, strlen (\"&L\")\n+  buffer = XALLOCAVEC (char, 2  /* strlen (\"&L\") or (\"&l\") */\n \t\t   + strlen (prefix)\n \t\t   + namelen\n \t\t   + strlen (suffix)\n \t\t   + 2 * strlen (quote)\n \t\t   + 1 /* '\\0' */);\n \n   /* Construct the name of the non-lazy pointer or stub.  */\n-  sprintf (buffer, \"&%sL%s%s%s%s\", quote, prefix, name, suffix, quote);\n+  sprintf (buffer, \"&%s%c%s%s%s%s\", quote, L_or_l, prefix, name, suffix, quote);\n \n   if (!machopic_indirections)\n     machopic_indirections = hash_table<indirection_hasher>::create_ggc (37);"}, {"sha": "045f70b2abb30dd762fdea11d07c042d06ce6aee", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7881b63fef5c682fb6c4e5b4009f5afc7971595b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=7881b63fef5c682fb6c4e5b4009f5afc7971595b", "patch": "@@ -716,9 +716,16 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n   { \"weak_import\", 0, 0, true, false, false,\t\t\t\t     \\\n     darwin_handle_weak_import_attribute, false }\n \n+/* Make local constant labels linker-visible, so that if one follows a\n+   weak_global constant, ld64 will be able to separate the atoms.  */\n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%s%ld\", PREFIX, (long)(NUM))\n+  do {\t\t\t\t\t\t\t\\\n+    if (strcmp (\"LC\", PREFIX) == 0)\t\t\t\\\n+      sprintf (LABEL, \"*%s%ld\", \"lC\", (long)(NUM));\t\\\n+    else\t\t\t\t\t\t\\\n+      sprintf (LABEL, \"*%s%ld\", PREFIX, (long)(NUM));\t\\\n+  } while (0)\n \n #undef TARGET_ASM_MARK_DECL_PRESERVED\n #define TARGET_ASM_MARK_DECL_PRESERVED darwin_mark_decl_preserved"}]}