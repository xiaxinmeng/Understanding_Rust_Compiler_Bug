{"sha": "00d382a8ddfca7635f66bef566909f9f207e50df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMzgyYThkZGZjYTc2MzVmNjZiZWY1NjY5MDlmOWYyMDdlNTBkZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-30T19:05:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-30T19:05:12Z"}, "message": "re PR tree-optimization/21636 (Missed ccp optimization)\n\n2008-04-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/21636\n\t* tree-ssa-ccp.c (ccp_fold): Handle &p->x with p being a\n\tconstant address.\n\t(evaluate_stmt): Print the likely value.\n\t(ccp_visit_stmt): Avoid excessive vertical spacing.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-19.c: New testcase.\n\nFrom-SVN: r134834", "tree": {"sha": "b7a5b3945a52dec7a42195920ef45ab364051d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7a5b3945a52dec7a42195920ef45ab364051d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d382a8ddfca7635f66bef566909f9f207e50df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d382a8ddfca7635f66bef566909f9f207e50df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d382a8ddfca7635f66bef566909f9f207e50df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d382a8ddfca7635f66bef566909f9f207e50df/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45e184209dbf619aab2f777064891c97e6c4b185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e184209dbf619aab2f777064891c97e6c4b185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e184209dbf619aab2f777064891c97e6c4b185"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "9df335e62e6087739352d2130e87b5581025d0ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d382a8ddfca7635f66bef566909f9f207e50df", "patch": "@@ -1,3 +1,11 @@\n+2008-04-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/21636\n+\t* tree-ssa-ccp.c (ccp_fold): Handle &p->x with p being a\n+\tconstant address.\n+\t(evaluate_stmt): Print the likely value.\n+\t(ccp_visit_stmt): Avoid excessive vertical spacing.\n+\n 2008-04-30  Rafael Espindola  <espindola@google.com>\n \n \t* builtins.c (fold_call_expr): Return realret."}, {"sha": "410b7202cb84d91d365d31a0d3bf3fdb4ccfe31f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00d382a8ddfca7635f66bef566909f9f207e50df", "patch": "@@ -1,3 +1,8 @@\n+2008-04-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/21636\n+\t* gcc.dg/tree-ssa/ssa-ccp-19.c: New testcase.\n+\n 2008-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/35993"}, {"sha": "ab4182246a35473d0177afd15f31eed8ea263437", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-19.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c?ref=00d382a8ddfca7635f66bef566909f9f207e50df", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+struct f { int i; };\n+int g()\n+{\n+  struct f a, *a1;\n+  int *i;\n+  a.i = 1;\n+  a1 = &a;\n+  i = &a1->i;\n+  return *i;  /* This should be turned into a.i */\n+}\n+\n+/* { dg-final { scan-tree-dump \"= a.i;\" \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "c6c7a8885f506a88c0aee8626101b05a453af673", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d382a8ddfca7635f66bef566909f9f207e50df/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=00d382a8ddfca7635f66bef566909f9f207e50df", "patch": "@@ -975,6 +975,38 @@ ccp_fold (tree stmt)\n   else if (kind == tcc_reference)\n     return fold_const_aggregate_ref (rhs);\n \n+  /* Handle propagating invariant addresses into address operations.\n+     The folding we do here matches that in tree-ssa-forwprop.c.  */\n+  else if (code == ADDR_EXPR)\n+    {\n+      tree *base;\n+      base = &TREE_OPERAND (rhs, 0);\n+      while (handled_component_p (*base))\n+\tbase = &TREE_OPERAND (*base, 0);\n+      if (TREE_CODE (*base) == INDIRECT_REF\n+\t  && TREE_CODE (TREE_OPERAND (*base, 0)) == SSA_NAME)\n+\t{\n+\t  prop_value_t *val = get_value (TREE_OPERAND (*base, 0));\n+\t  if (val->lattice_val == CONSTANT\n+\t      && TREE_CODE (val->value) == ADDR_EXPR\n+\t      && useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (*base, 0)),\n+\t\t\t\t\t    TREE_TYPE (val->value))\n+\t      && useless_type_conversion_p (TREE_TYPE (*base),\n+\t\t\t\t\t    TREE_TYPE (TREE_OPERAND (val->value, 0))))\n+\t    {\n+\t      /* We need to return a new tree, not modify the IL or share\n+\t\t parts of it.  So play some tricks to avoid manually\n+\t\t building it.  */\n+\t      tree ret, save = *base;\n+\t      *base = TREE_OPERAND (val->value, 0);\n+\t      ret = unshare_expr (rhs);\n+\t      recompute_tree_invariant_for_addr_expr (ret);\n+\t      *base = save;\n+\t      return ret;\n+\t    }\n+\t}\n+    }\n+\n   /* We may be able to fold away calls to builtin functions if their\n      arguments are constants.  */\n   else if (code == CALL_EXPR\n@@ -1210,6 +1242,25 @@ evaluate_stmt (tree stmt)\n \n   fold_undefer_overflow_warnings (is_constant, stmt, 0);\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"which is likely \");\n+      switch (likelyvalue)\n+\t{\n+\tcase CONSTANT:\n+\t  fprintf (dump_file, \"CONSTANT\");\n+\t  break;\n+\tcase UNDEFINED:\n+\t  fprintf (dump_file, \"UNDEFINED\");\n+\t  break;\n+\tcase VARYING:\n+\t  fprintf (dump_file, \"VARYING\");\n+\t  break;\n+\tdefault:;\n+\t}\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n   if (is_constant)\n     {\n       /* The statement produced a constant value.  */\n@@ -1378,7 +1429,6 @@ ccp_visit_stmt (tree stmt, edge *taken_edge_p, tree *output_p)\n     {\n       fprintf (dump_file, \"\\nVisiting statement:\\n\");\n       print_generic_stmt (dump_file, stmt, dump_flags);\n-      fprintf (dump_file, \"\\n\");\n     }\n \n   if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT)"}]}