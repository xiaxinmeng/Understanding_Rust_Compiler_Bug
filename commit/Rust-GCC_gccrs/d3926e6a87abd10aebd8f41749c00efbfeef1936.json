{"sha": "d3926e6a87abd10aebd8f41749c00efbfeef1936", "node_id": "C_kwDOANBUbNoAKGQzOTI2ZTZhODdhYmQxMGFlYmQ4ZjQxNzQ5YzAwZWZiZmVlZjE5MzY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-20T13:07:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-20T13:08:51Z"}, "message": "macros: Rename APIs around metavars and repetitions to improve clarity", "tree": {"sha": "0bd73e8d3dcecde441893b2b035b8a8658d3e307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd73e8d3dcecde441893b2b035b8a8658d3e307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3926e6a87abd10aebd8f41749c00efbfeef1936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3926e6a87abd10aebd8f41749c00efbfeef1936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3926e6a87abd10aebd8f41749c00efbfeef1936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3926e6a87abd10aebd8f41749c00efbfeef1936/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "8c6a3e53dad722367e9d2d4c0452cfb8a6dcead3", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=d3926e6a87abd10aebd8f41749c00efbfeef1936", "patch": "@@ -83,15 +83,14 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n \n       if (did_match_rule)\n \t{\n-\t  // FIXME: ARTHUR: Comment\n-\t  // Debugging\n-\t  for (auto &kv : matched_fragments)\n-\t    rust_debug (\"[fragment]: %s (%ld - %s)\", kv.first.c_str (),\n-\t\t\tkv.second.get_fragments ().size (),\n-\t\t\tkv.second.get_kind ()\n-\t\t\t    == MatchedFragmentContainer::Kind::Repetition\n-\t\t\t  ? \"repetition\"\n-\t\t\t  : \"metavar\");\n+\t  //  // Debugging\n+\t  //  for (auto &kv : matched_fragments)\n+\t  //    rust_debug (\"[fragment]: %s (%ld - %s)\", kv.first.c_str (),\n+\t  //\t\tkv.second.get_fragments ().size (),\n+\t  //\t\tkv.second.get_kind ()\n+\t  //\t\t    == MatchedFragmentContainer::Kind::Repetition\n+\t  //\t\t  ? \"repetition\"\n+\t  //\t\t  : \"metavar\");\n \n \t  matched_rule = &rule;\n \t  break;\n@@ -521,7 +520,7 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n \n \t    // matched fragment get the offset in the token stream\n \t    size_t offs_end = source.get_offs ();\n-\t    sub_stack.insert_fragment (\n+\t    sub_stack.insert_metavar (\n \t      MatchedFragment (fragment->get_ident (), offs_begin, offs_end));\n \t  }\n \t  break;\n@@ -626,7 +625,13 @@ MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n \n \t\t// matched fragment get the offset in the token stream\n \t\tsize_t offs_end = source.get_offs ();\n-\t\t// FIXME: ARTHUR: Here we want to append?\n+\n+\t\t// The main difference with match_matcher happens here: Instead\n+\t\t// of inserting a new fragment, we append to one. If that\n+\t\t// fragment does not exist, then the operation is similar to\n+\t\t// `insert_fragment` with the difference that we are not\n+\t\t// creating a metavariable, but a repetition of one, which is\n+\t\t// really different.\n \t\tsub_stack.append_fragment (\n \t\t  MatchedFragment (fragment->get_ident (), offs_begin,\n \t\t\t\t   offs_end));"}, {"sha": "f6edbc8329f086ce11433e8e6371e8198dba945a", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=d3926e6a87abd10aebd8f41749c00efbfeef1936", "patch": "@@ -101,7 +101,7 @@ class MatchedFragmentContainer\n   /**\n    * Create a valid fragment matched one time\n    */\n-  static MatchedFragmentContainer one (MatchedFragment fragment)\n+  static MatchedFragmentContainer metavar (MatchedFragment fragment)\n   {\n     return MatchedFragmentContainer ({fragment}, Kind::MetaVar);\n   }\n@@ -111,9 +111,9 @@ class MatchedFragmentContainer\n    */\n   void add_fragment (MatchedFragment fragment)\n   {\n-    fragments.emplace_back (fragment);\n+    rust_assert (!is_single_fragment ());\n \n-    kind = Kind::Repetition;\n+    fragments.emplace_back (fragment);\n   }\n \n   size_t get_match_amount () const { return fragments.size (); }\n@@ -125,7 +125,6 @@ class MatchedFragmentContainer\n \n   bool is_single_fragment () const\n   {\n-    // FIXME: Is that valid?\n     return get_match_amount () == 1 && kind == Kind::MetaVar;\n   }\n \n@@ -167,16 +166,16 @@ class SubstitutionScope\n   }\n \n   /**\n-   * Insert a new matched fragment into the current substitution map\n+   * Insert a new matched metavar into the current substitution map\n    */\n-  void insert_fragment (MatchedFragment fragment)\n+  void insert_metavar (MatchedFragment fragment)\n   {\n     auto &current_map = stack.back ();\n     auto it = current_map.find (fragment.fragment_ident);\n \n     if (it == current_map.end ())\n-      current_map.insert (\n-\t{fragment.fragment_ident, MatchedFragmentContainer::one (fragment)});\n+      current_map.insert ({fragment.fragment_ident,\n+\t\t\t   MatchedFragmentContainer::metavar (fragment)});\n     else\n       gcc_unreachable ();\n   }"}, {"sha": "9592d2d2a9e178469949dacede177c539e854567", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3926e6a87abd10aebd8f41749c00efbfeef1936/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=d3926e6a87abd10aebd8f41749c00efbfeef1936", "patch": "@@ -155,7 +155,7 @@ SubstituteCtx::substitute_repetition (\n \t    sub_fragment = kv_match.second.get_fragments ()[i];\n \n \t  sub_map.insert (\n-\t    {kv_match.first, MatchedFragmentContainer::one (sub_fragment)});\n+\t    {kv_match.first, MatchedFragmentContainer::metavar (sub_fragment)});\n \t}\n \n       auto substitute_context = SubstituteCtx (input, new_macro, sub_map);"}]}