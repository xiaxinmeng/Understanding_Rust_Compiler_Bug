{"sha": "fe0cf571ecf5a92898cb5d55985c896e1eef4cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwY2Y1NzFlY2Y1YTkyODk4Y2I1ZDU1OTg1Yzg5NmUxZWVmNGNjMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T11:32:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-19T11:32:24Z"}, "message": "Correctly apply last change.\n\nFrom-SVN: r1895", "tree": {"sha": "2a11309f74a00734d349c515512d930d3c71a5dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a11309f74a00734d349c515512d930d3c71a5dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3/comments", "author": null, "committer": null, "parents": [{"sha": "a687e8971c51d7dfe8ba671126ccc52e197ffba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a687e8971c51d7dfe8ba671126ccc52e197ffba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a687e8971c51d7dfe8ba671126ccc52e197ffba9"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "7372e1663922a434bc2a3aed27a5a5b6f09d0cc1", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0cf571ecf5a92898cb5d55985c896e1eef4cc3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fe0cf571ecf5a92898cb5d55985c896e1eef4cc3", "patch": "@@ -7544,9 +7544,6 @@ simplify_comparison (code, pop0, pop1)\n \t  break;\n \n \tcase SUBREG:\n-\t  /* If the inner mode is narrower and we are extracting the low part,\n-\t     we can treat the SUBREG as if it were a ZERO_EXTEND.  */\n-\t  if (subreg_lowpart_p (op0)\n \t  /* Check for the case where we are comparing A - C1 with C2,\n \t     both constants are smaller than 1/2 the maxium positive\n \t     value in MODE, and the comparison is equality or unsigned.\n@@ -7576,6 +7573,9 @@ simplify_comparison (code, pop0, pop1)\n \t      continue;\n \t    }\n \n+\t  /* If the inner mode is narrower and we are extracting the low part,\n+\t     we can treat the SUBREG as if it were a ZERO_EXTEND.  */\n+\t  if (subreg_lowpart_p (op0)\n \t      && GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0))) < mode_width)\n \t    /* Fall through */ ;\n \t  else"}]}