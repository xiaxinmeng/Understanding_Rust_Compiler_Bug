{"sha": "c2457887ea0c4796b43625149a8d083266efba86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0NTc4ODdlYTBjNDc5NmI0MzYyNTE0OWE4ZDA4MzI2NmVmYmE4Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-04-04T20:52:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-04-04T20:52:16Z"}, "message": "re PR target/89399 (ICE: RTL check: expected code 'set', 'clobber' or 'clobber_high', have 'parallel' in combine_reaching_defs, at ree.c:783)\n\n\tPR rtl-optimization/89399\n\t* ree.c (combine_set_extension): Use single_set rather than\n\tdigging into PATTERN for items on the candidate list.\n\t(combine_reaching_defs): Likewise.\n\n\tPR rtl-optimization/89399\n\t* gcc.c-torture/compile/pr89399.c: New test.\n\nFrom-SVN: r270151", "tree": {"sha": "0382c4669bfe139a31ef8aa8ee13a09af1790a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0382c4669bfe139a31ef8aa8ee13a09af1790a28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2457887ea0c4796b43625149a8d083266efba86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2457887ea0c4796b43625149a8d083266efba86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2457887ea0c4796b43625149a8d083266efba86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2457887ea0c4796b43625149a8d083266efba86/comments", "author": null, "committer": null, "parents": [{"sha": "aace91e285d107abd3762c8d5b58e2be42b05512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aace91e285d107abd3762c8d5b58e2be42b05512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aace91e285d107abd3762c8d5b58e2be42b05512"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "f57c2f9c193fd361f7b3c7e8611c9de3f79bb70b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2457887ea0c4796b43625149a8d083266efba86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2457887ea0c4796b43625149a8d083266efba86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2457887ea0c4796b43625149a8d083266efba86", "patch": "@@ -1,3 +1,10 @@\n+2019-04-04  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/89399\n+\t* ree.c (combine_set_extension): Use single_set rather than\n+\tdigging into PATTERN for items on the candidate list.\n+\t(combine_reaching_defs): Likewise.\n+\n 2019-04-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/46590"}, {"sha": "104f8dbf4357fbdd09d0eecba6f349570fde61ad", "filename": "gcc/ree.c", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=c2457887ea0c4796b43625149a8d083266efba86", "patch": "@@ -320,7 +320,7 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n   rtx orig_src = SET_SRC (*orig_set);\n   machine_mode orig_mode = GET_MODE (SET_DEST (*orig_set));\n   rtx new_set;\n-  rtx cand_pat = PATTERN (cand->insn);\n+  rtx cand_pat = single_set (cand->insn);\n \n   /* If the extension's source/destination registers are not the same\n      then we need to change the original load to reference the destination\n@@ -778,10 +778,14 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n   /* If the destination operand of the extension is a different\n      register than the source operand, then additional restrictions\n      are needed.  Note we have to handle cases where we have nested\n-     extensions in the source operand.  */\n+     extensions in the source operand.\n+\n+     Candidate insns are known to be single_sets, via the test in\n+     find_removable_extensions.  So we continue to use single_set here\n+     rather than get_sub_rtx.  */\n+  rtx set = single_set (cand->insn);\n   bool copy_needed\n-    = (REGNO (SET_DEST (PATTERN (cand->insn)))\n-       != REGNO (get_extended_src_reg (SET_SRC (PATTERN (cand->insn)))));\n+    = (REGNO (SET_DEST (set)) != REGNO (get_extended_src_reg (SET_SRC (set))));\n   if (copy_needed)\n     {\n       /* Considering transformation of\n@@ -816,8 +820,8 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n       if (state->modified[INSN_UID (cand->insn)].kind != EXT_MODIFIED_NONE)\n \treturn false;\n \n-      machine_mode dst_mode = GET_MODE (SET_DEST (PATTERN (cand->insn)));\n-      rtx src_reg = get_extended_src_reg (SET_SRC (PATTERN (cand->insn)));\n+      machine_mode dst_mode = GET_MODE (SET_DEST (set));\n+      rtx src_reg = get_extended_src_reg (SET_SRC (set));\n \n       /* Ensure we can use the src_reg in dst_mode (needed for\n \t the (set (reg1) (reg2)) insn mentioned above).  */\n@@ -852,9 +856,9 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t  || !REG_P (SET_DEST (*dest_sub_rtx)))\n \treturn false;\n \n-      rtx tmp_reg = gen_rtx_REG (GET_MODE (SET_DEST (PATTERN (cand->insn))),\n+      rtx tmp_reg = gen_rtx_REG (GET_MODE (SET_DEST (set)),\n \t\t\t\t REGNO (SET_DEST (*dest_sub_rtx)));\n-      if (reg_overlap_mentioned_p (tmp_reg, SET_DEST (PATTERN (cand->insn))))\n+      if (reg_overlap_mentioned_p (tmp_reg, SET_DEST (set)))\n \treturn false;\n \n       /* On RISC machines we must make sure that changing the mode of SRC_REG\n@@ -877,10 +881,8 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \n       /* The destination register of the extension insn must not be\n \t used or set between the def_insn and cand->insn exclusive.  */\n-      if (reg_used_between_p (SET_DEST (PATTERN (cand->insn)),\n-\t\t\t      def_insn, cand->insn)\n-\t  || reg_set_between_p (SET_DEST (PATTERN (cand->insn)),\n-\t\t\t\tdef_insn, cand->insn))\n+      if (reg_used_between_p (SET_DEST (set), def_insn, cand->insn)\n+\t  || reg_set_between_p (SET_DEST (set), def_insn, cand->insn))\n \treturn false;\n \n       /* We must be able to copy between the two registers.   Generate,\n@@ -894,11 +896,10 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t is different than in the code to emit the copy as we have not\n \t modified the defining insn yet.  */\n       start_sequence ();\n-      rtx pat = PATTERN (cand->insn);\n-      rtx new_dst = gen_rtx_REG (GET_MODE (SET_DEST (pat)),\n-                                 REGNO (get_extended_src_reg (SET_SRC (pat))));\n-      rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (pat)),\n-                                 REGNO (SET_DEST (pat)));\n+      rtx new_dst = gen_rtx_REG (GET_MODE (SET_DEST (set)),\n+                                 REGNO (get_extended_src_reg (SET_SRC (set))));\n+      rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (set)),\n+                                 REGNO (SET_DEST (set)));\n       emit_move_insn (new_dst, new_src);\n \n       rtx_insn *insn = get_insns ();\n@@ -912,7 +913,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \treturn false;\n \n       while (REG_P (SET_SRC (*dest_sub_rtx))\n-\t     && (REGNO (SET_SRC (*dest_sub_rtx)) == REGNO (SET_DEST (pat))))\n+\t     && (REGNO (SET_SRC (*dest_sub_rtx)) == REGNO (SET_DEST (set))))\n \t{\n \t  /* Considering transformation of\n \t     (set (reg2) (expression))\n@@ -955,7 +956,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t     implicitly sets it in word mode.  */\n \t  if (WORD_REGISTER_OPERATIONS && known_lt (prec, BITS_PER_WORD))\n \t    {\n-\t      struct df_link *uses = get_uses (def_insn2, SET_DEST (pat));\n+\t      struct df_link *uses = get_uses (def_insn2, SET_DEST (set));\n \t      if (!uses)\n \t\tbreak;\n \n@@ -973,10 +974,8 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t     used or set between the def_insn2 and def_insn exclusive.\n \t     Likewise for the other reg, i.e. check both reg1 and reg2\n \t     in the above comment.  */\n-\t  if (reg_used_between_p (SET_DEST (PATTERN (cand->insn)),\n-\t\t\t\t  def_insn2, def_insn)\n-\t      || reg_set_between_p (SET_DEST (PATTERN (cand->insn)),\n-\t\t\t\t    def_insn2, def_insn)\n+\t  if (reg_used_between_p (SET_DEST (set), def_insn2, def_insn)\n+\t      || reg_set_between_p (SET_DEST (set), def_insn2, def_insn)\n \t      || reg_used_between_p (src_reg, def_insn2, def_insn)\n \t      || reg_set_between_p (src_reg, def_insn2, def_insn))\n \t    break;\n@@ -991,13 +990,12 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n   if (state->modified[INSN_UID (cand->insn)].kind != EXT_MODIFIED_NONE)\n     {\n       machine_mode mode;\n-      rtx set;\n \n       if (state->modified[INSN_UID (cand->insn)].kind\n \t  != (cand->code == ZERO_EXTEND\n \t      ? EXT_MODIFIED_ZEXT : EXT_MODIFIED_SEXT)\n \t  || state->modified[INSN_UID (cand->insn)].mode != cand->mode\n-\t  || (set = single_set (cand->insn)) == NULL_RTX)\n+\t  || (set == NULL_RTX))\n \treturn false;\n       mode = GET_MODE (SET_DEST (set));\n       gcc_assert (GET_MODE_UNIT_SIZE (mode)\n@@ -1320,9 +1318,9 @@ find_and_remove_re (void)\n \t     we do not allow the optimization of extensions where\n \t     the source and destination registers do not match.  Thus\n \t     checking REG_P here is correct.  */\n-\t  if (REG_P (XEXP (SET_SRC (PATTERN (curr_cand->insn)), 0))\n-\t      && (REGNO (SET_DEST (PATTERN (curr_cand->insn)))\n-\t\t  != REGNO (XEXP (SET_SRC (PATTERN (curr_cand->insn)), 0))))\n+\t  rtx set = single_set (curr_cand->insn);\n+\t  if (REG_P (XEXP (SET_SRC (set), 0))\n+\t      && (REGNO (SET_DEST (set)) != REGNO (XEXP (SET_SRC (set), 0))))\n \t    {\n               reinsn_copy_list.safe_push (curr_cand->insn);\n               reinsn_copy_list.safe_push (state.defs_list[0]);\n@@ -1356,13 +1354,13 @@ find_and_remove_re (void)\n \t defining insn was used to eliminate a second extension\n \t that was wider than the first.  */\n       rtx sub_rtx = *get_sub_rtx (def_insn);\n-      rtx pat = PATTERN (curr_insn);\n+      rtx set = single_set (curr_insn);\n       rtx new_dst = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n-\t\t\t\t REGNO (XEXP (SET_SRC (pat), 0)));\n+\t\t\t\t REGNO (XEXP (SET_SRC (set), 0)));\n       rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n-\t\t\t\t REGNO (SET_DEST (pat)));\n-      rtx set = gen_rtx_SET (new_dst, new_src);\n-      emit_insn_after (set, def_insn);\n+\t\t\t\t REGNO (SET_DEST (set)));\n+      rtx new_set = gen_rtx_SET (new_dst, new_src);\n+      emit_insn_after (new_set, def_insn);\n     }\n \n   /* Delete all useless extensions here in one sweep.  */"}, {"sha": "389ca037429e77e941139bfef12cba43dceca7b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2457887ea0c4796b43625149a8d083266efba86", "patch": "@@ -1,3 +1,8 @@\n+2019-04-04  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/89399\n+\t* gcc.c-torture/compile/pr89399.c: New test.\n+ \n 2019-04-04  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/89004"}, {"sha": "ce8fbfc4fb8a0a9b0cfc861bafb8fb9f833feb4e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89399.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89399.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2457887ea0c4796b43625149a8d083266efba86/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89399.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89399.c?ref=c2457887ea0c4796b43625149a8d083266efba86", "patch": "@@ -0,0 +1,10 @@\n+extern int bar(void);\n+\n+short s;\n+\n+int foo(void)\n+{\n+  s = bar();\n+  return s;\n+}\n+"}]}