{"sha": "50873cc588fcc20384212b6dddca74393023a0e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4NzNjYzU4OGZjYzIwMzg0MjEyYjZkZGRjYTc0MzkzMDIzYTBlMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-09T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-09T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "e3f17c1c3656a3863940548518fa14f9187d6702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f17c1c3656a3863940548518fa14f9187d6702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50873cc588fcc20384212b6dddca74393023a0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50873cc588fcc20384212b6dddca74393023a0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50873cc588fcc20384212b6dddca74393023a0e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50873cc588fcc20384212b6dddca74393023a0e3/comments", "author": null, "committer": null, "parents": [{"sha": "b541b871135cb8f261d079006c79698a82e3594d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b541b871135cb8f261d079006c79698a82e3594d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b541b871135cb8f261d079006c79698a82e3594d"}], "stats": {"total": 427, "additions": 426, "deletions": 1}, "files": [{"sha": "d51c124b7e05ce40e3058939671ea03f831c171c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,72 @@\n+2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Do not fold if\n+\teither type has reverse scalar storage order.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Do not propagate through\n+\ta memory copy if either type has reverse scalar storage order.\n+\n+2020-07-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.c (compile_native, main): Pass -fPIC/-fpic\n+\ton to the native compiler, if used.\n+\t* config/nvptx/mkoffload.c (compile_native, main): Likewise.\n+\n+2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_vmsumudm): New define.\n+\t* config/rs6000/altivec.md (UNSPEC_VMSUMUDM): New unspec.\n+\t  (altivec_vmsumudm): New define_insn.\n+\t* config/rs6000/rs6000-builtin.def (altivec_vmsumudm): New BU_ALTIVEC_3\n+\t  entry. (vmsumudm): New BU_ALTIVEC_OVERLOAD_3 entry.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Add entries for\n+\t  ALTIVEC_BUILTIN_VMSUMUDM variants of vec_msum.\n+\t* doc/extend.texi: Add document for vmsumudm behind vmsum.\n+\n+2020-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (get_group_load_store_type): Pass\n+\tin the SLP node and the alignment support scheme output.\n+\tSet that.\n+\t(get_load_store_type): Likewise.\n+\t(vectorizable_store): Adjust.\n+\t(vectorizable_load): Likewise.\n+\n+2020-07-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/95694\n+\t* expr.c (expand_expr_real_2): Get the mode from the type rather\n+\tthan the rtx, and assert that it is consistent with the mode of\n+\tthe rtx (where known).  Optimize all constant integers, not just\n+\tthose that can be represented in poly_int64.\n+\n+2020-07-08  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/vsx.md (len_load_v16qi): New define_expand.\n+\t(len_store_v16qi): Likewise.\n+\n+2020-07-08  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* doc/md.texi (len_load_@var{m}): Document.\n+\t(len_store_@var{m}): Likewise.\n+\t* internal-fn.c (len_load_direct): New macro.\n+\t(len_store_direct): Likewise.\n+\t(expand_len_load_optab_fn): Likewise.\n+\t(expand_len_store_optab_fn): Likewise.\n+\t(direct_len_load_optab_supported_p): Likewise.\n+\t(direct_len_store_optab_supported_p): Likewise.\n+\t(expand_mask_load_optab_fn): New macro.  Original renamed to ...\n+\t(expand_partial_load_optab_fn): ... here.  Add handlings for\n+\tlen_load_optab.\n+\t(expand_mask_store_optab_fn): New macro.  Original renamed to ...\n+\t(expand_partial_store_optab_fn): ... here. Add handlings for\n+\tlen_store_optab.\n+\t(internal_load_fn_p): Handle IFN_LEN_LOAD.\n+\t(internal_store_fn_p): Handle IFN_LEN_STORE.\n+\t(internal_fn_stored_value_index): Handle IFN_LEN_STORE.\n+\t* internal-fn.def (LEN_LOAD): New internal function.\n+\t(LEN_STORE): Likewise.\n+\t* optabs.def (len_load_optab, len_store_optab): New optab.\n+\n 2020-07-07  Anton Youdkevitch  <anton.youdkevitch@bell-sw.com>\n \n \t* config/aarch64/aarch64.c (thunderx2t99_regmove_cost,"}, {"sha": "7f5c70d7c31a382abbc7868110934bcf34e857a9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1 +1 @@\n-20200708\n+20200709"}, {"sha": "913d84c9cb2e9ab7f6788d6f5174d6da97e9c688", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,278 @@\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tracebak.c [generic implementation]: Add pragma GCC diagnostic\n+\tto disable warning about __builtin_frame_address.\n+\n+2020-07-08  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* socket.c [_WIN32] (__gnat_minus_500ms): Parentheses around &&\n+\toperations.  Remove notes about TN in comment.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* adaint.h (__gnat_expect_portable_execvp): Fix prototype.\n+\t(__gnat_expect_poll): Likewise.\n+\t* expect.c [_WIN32]: Include adaint.h file.\n+\t(__gnat_waitpid): Remove useless variable.\n+\t(__gnat_expect_portable_execvp): Add ATTRIBUTE_UNUSED on parameter.\n+\t* raise-gcc.c [SEH] (__gnat_personality_v0): Add ATTRIBUTE_UNUSED.\n+\t* socket.c [_WIN32] (__gnat_getservbyport): Add ATTRIBUTE_UNUSED on\n+\ta couple of parameters.\n+\t(__gnat_gethostbyname): Likewise.\n+\t(__gnat_gethostbyaddr): Likewise.\n+\t(__gnat_getservbyname): Likewise.\n+\t(__gnat_last_socket_in_set): Use variables local to loops.\n+\t(__gnat_socket_ioctl): Cast 3rd parameter to proper type if _WIN32.\n+\t(__gnat_inet_pton): Cast 2nd parameter to proper type if _WIN32.\n+\t* sysdep.c (__gnat_localtime_tzoff): Remove superfluous test.\n+\t* terminals.c [_WIN32]: Include io.h file.\n+\t(is_gui_app): Remove useless variables and fix unsigned comparison.\n+\t(nt_spawnve): Add ATTRIBUTE_UNUSED on first parameter.  Initialize a\n+\tlocal variable and remove others that are useless.  Add missing cast\n+\t(__gnat_setup_child_communication): Remove useless variable and call\n+\tUse proper formatting string in call to sprintf.\n+\t(__gnat_setup_parent_communication): Cast to proper type.\n+\t(find_child_console): Fix prototype and remove useless variable.\n+\t(find_process_handle): Likewise.\n+\t(_gnat_interrupt_process): Move to after __gnat_interrupt_pid.\n+\t(__gnat_reset_tty): Add ATTRIBUTE_UNUSED on parameter, remove return\n+\t(__gnat_setup_winsize): Add ATTRIBUTE_UNUSED on all parameters.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): In the subtype mark case, do\n+\tnot apply constraint checks if the No_Initialization flag is set.\n+\n+2020-07-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb\n+\t(Build_Class_Wide_Master): Insert the declaration of _Master\n+\tbefore its use; required to avoid assertion failure in the\n+\tbackend.\n+\n+2020-07-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/i-cexten.ads (long_long, unsigned_long_long): Now\n+\tsubtypes of Interfaces.C types.\n+\t* libgnat/a-calcon.ads, libgnat/a-calcon.adb\n+\t(To_Unix_Nano_Time): Use Interfaces.C.long_long instead of\n+\tInterfaces.C.Extensions.long_long.\n+\n+2020-07-08  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* debug.adb: Document new switch.\n+\t* exp_ch6.adb (Warn_BIP): New function that warns if the switch\n+\tis on.  Call it from Make_Build_In_Place_* functions.  Warn_BIP\n+\tis not needed in Make_Build_In_Place_Iface_*, because those call\n+\tMake_Build_In_Place_Call_In_Object_Declaration or similar.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* erroutc.adb (Matches): Fix comments.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Has_Decl_In_List): New predicate to check that an\n+\tentity is declared in a list of nodes.\n+\t(Freeze_Expression): Use it to deal with Expression_With_Actions,\n+\tshort-circuit expression, if- and case-expression and ensure that\n+\tthe freeze node is put onto their Actions list if the entity is\n+\tdeclared locally.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (In_Expanded_Body): Return true for the body of a\n+\tgenerated predicate function.\n+\n+2020-07-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_attr.adb: Remove hyphens in comments, plus minor code\n+\treformatting.\n+\t* sem_ch13.adb: Fix typo (that => than).\n+\t* sem_util.adb: Add hyphen in comment (\"class-wide\").\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Array_Type): Add comment on implementation\n+\tchoice for byte-packed array types.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Correct prefix of 'Result\n+\tthis prefix is a generic function but the enclosing aspect or\n+\tpragma is attached to its instance.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Analyze\n+\tgeneric subprogram formal parameters (including the implicit\n+\tresult of a generic function) and only then analyse its aspects,\n+\tbecause with Relaxed_Initialization the aspect expression might\n+\trefer to those formal parameters.\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Accept\n+\taspect on generic subprograms; install formal parameters of a\n+\tgeneric subprogram but not formal parameters of the generic unit\n+\titself (the previous code was inspired by aspects Post and\n+\tDepends, where both kinds of formals are allowed).\n+\t* sem_util.ads (Enter_Name): Fix name of a subprogram referenced\n+\tin comment.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Call\n+\tAnalyze_Aspect_Specifications after setting Ekind of the\n+\tanalyzed entity.\n+\t* sem_ch13.adb (Analyze_Aspect_Yield): Remove minimal decoration\n+\tof generic subprograms.\n+\n+2020-07-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Process_Inline): Check for duplicate\n+\tpragma+aspect Inline. Minor code cleanup.\n+\t(Check_Duplicate_Pragma): Add warning for duplicate\n+\tpragma [No_]Inline under -gnatwr.\n+\t* sinfo.ads, sinfo.adb (Next_Rep_Item): Allow N_Null_Statement\n+\twhich can appear when a pragma is rewritten.\n+\t* sem_util.ads, sem_util.adb, bindo-writers.adb: Fix bad\n+\tcopy/paste now flagged.\n+\t* libgnat/s-mmap.ads: Remove redundant pragma Inline.\n+\n+2020-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Build_Class_Wide_Clone_Body): Update entities to\n+\trefer to the right spec.\n+\n+2020-07-08  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Predicate_Failure): Check that the type has\n+\tpredicates.  Remove the setting of Has_Delayed_Aspects and\n+\tFreeze_Node, because (if the code is legal) it should have\n+\talready been done by the predicate aspect.\n+\n+2020-07-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Typo\n+\tcorrections.\n+\n+2020-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par.adb (P_Iterator_Specification): Make public for use in\n+\tother parser subprograms.\n+\t* par-ch4.adb (P_Iterated_Component_Association): In Ada_2020,\n+\trecognize use of Iterator_Specification in an element iterator.\n+\tTo simplify disambiguation between the two iterator forms, mark\n+\tthe component association as carrying an Iterator_Specification\n+\tonly when the element iterator (using \"OF\") is used.\n+\t* par-ch5.adb (P_Loop_Parameter_Specification): In Ada_2020,\n+\tparse iterator filter when present.\n+\t(P_Iterator_Specification): Ditto.  Remove declaration of\n+\tP_Iterator_Specification, now in parent unit.\n+\t* exp_ch5.adb (Expand_N_Loop_Statement): Apply Iterator filter\n+\twhen present.\n+\t(Expand_Iterator_Loop_Over_Array): Ditto.\n+\t(Expand_Iterator_Loop_Over_Container): Ditto.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Emit error nessage if\n+\tan iterated component association includes a iterator\n+\tspecificcation with an element iterator, i.e. one that uses the\n+\tOF keyword.\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Analyze Iterator\n+\tfilter when present.\n+\t(Analyze_Loop_Parameter_Specification): Ditto.\n+\t* sinfo.adb: Suprogram bodies for new syntactic element\n+\tIterator_Filter.\n+\t* sinfo.ads: Add Iterator_Filter to relevant nodes.  Structure\n+\tof Component_Association and Iteroted_Component_Association\n+\tnodes is modified to take into account the possible  presence of\n+\tan iterator specification in the latter.\n+\n+2020-07-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Attribute_Loop_Entry): New\n+\tfunction for GNATProve.\n+\n+2020-07-08  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Record_Representation_Clause,\n+\tCheck_Record_Representation_Clause): Add expected and actual\n+\tsize to error message.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Safe_To_Capture_Value): Return\n+\tTrue for in-parameters.\n+\n+2020-07-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute): Set\n+\tStores_Attribute_Old_Prefix to generated renamings of 'Old\n+\tconstants for later use in generating finalization routines.\n+\t* exp_ch7.adb (Build_Finalizer): Minor reformatting. Use \"or\n+\telse\" operators.\n+\n+2020-07-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove ugly code\n+\tthat was copying the return expression, resetting Analyzed\n+\tflags, etc. for the return expression of static expression\n+\tfunctions.\n+\t* inline.adb (Inline_Static_Expression_Function_Call): Set the\n+\tParent of the copied expression to that of the call. This avoids\n+\ta blowup in Insert_Actions when GNATprove_Mode is set and there\n+\tare nested SEF calls. Add ??? comment.\n+\t* sem_ch6.adb (Analyze_Expression_Function): In the case of a\n+\tstatic expression function, create a new copy of the expression\n+\tand replace the function's expression with the copy; the\n+\toriginal expression is used in the expression function's body\n+\tand will be analyzed and rewritten, and we need to save a clean\n+\tcopy for later use in processing static calls to the function.\n+\tThis allows removing the kludgy code that was in\n+\tExpand_Simple_Function_Return.\n+\t* sem_eval.adb (Eval_Qualified_Expression): Return immediately\n+\tif any errors have been posted on the qualified expression, to\n+\tavoid blowups when GNATprove_Mode is enabled (or with -gnatd.F),\n+\tsince illegal static expressions are handled differently in that\n+\tcase and attempting to fold such expressions would fail.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (Compute_Max_Length): Skip hidden discriminants.\n+\t(List_Record_Layout): Likewise.\n+\t(List_Structural_Record_Layout): Use First_Discriminant instead\n+\tof First_Stored_Discriminant and Next_Discriminant instead of\n+\tNext_Stored_Discriminant to walk the list of discriminants.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Analyze\n+\toptional boolean expressions.\n+\t* sem_util.ads, sem_util.adb (Has_Relaxed_Initialization): Adapt\n+\tquery; update comment.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.ads (Current_Value): Fix typo in comment.\n+\t* exp_ch2.adb (Expand_Current_Value): Remove unnecessary \"Start\n+\tof processing ...\" comment.\n+\t* exp_util.adb (Set_Entity_Current_Value): Fix unbalanced paren\n+\tin comment.\n+\t(Get_Current_Value_Condition): Fix layout in comment.\n+\t* sem_ch5.adb (Analyze_Cond_Then): Replace commented condition\n+\twith pragma Assert.\n+\n+2020-07-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_If_Statement): Detect True/False\n+\tprefixed with Standard.\n+\n+2020-07-08  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add freeze node\n+\tfor the Underlying_Full_View if it exists. The freeze node is\n+\twhat triggers the generation of the predicate function.\n+\t* freeze.adb: Minor reformatting.\n+\n+2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Narrow_Large_Operation): Use the base type instead\n+\tof the first subtype of standard integer types as narrower type.\n+\n 2020-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* freeze.adb (Freeze_Array_Type): Use Ctyp more consistently."}, {"sha": "89e7cd5a1d66ef633b4bcf78b6c6470c22176ffc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,7 @@\n+2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* c.opt (Wscalar-storage-order): Add explicit variable.\n+\n 2020-07-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-opts.c (c_common_post_options): Add 'injecting' arg to"}, {"sha": "7ff36994931d1f0d48bd65147f919367c617965d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,9 @@\n+2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* c-typeck.c (convert_for_assignment): If -Wscalar-storage-order is\n+\tset, warn for conversion between pointers that point to incompatible\n+\tscalar storage orders.\n+\n 2020-07-07  Kaipeng Zhou  <zhoukaipeng3@huawei.com>\n \n \t* c-parser.c (c_parser_statement_after_labels): Pass correct"}, {"sha": "cd21caad5047e31f32376add4a370c631064ac4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,16 @@\n+2020-07-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95497\n+\t* constexpr.c (potential_constant_expression_1) <case PARM_DECL>:\n+\tWhen processing_template_decl, check COMPLETE_TYPE_P before\n+\tcalling is_really_empty_class.  Don't check dependent_type_p.\n+\n+2020-07-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96103\n+\t* parser.c (cp_parser_decltype): Print error about using decltype(auto)\n+\tin C++11.  Check that the token following \"auto\" is \")\".\n+\n 2020-07-07  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95303"}, {"sha": "be08d9016798416a563b9247d354c32f76a1f572", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,9 @@\n+2020-07-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96085\n+\t* resolve.c (gfc_resolve_code): Check whether assign target is a\n+\tparameter.\n+\n 2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95980"}, {"sha": "ced640580f81823eb7d426d51284ffced6b39260", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,7 @@\n+2020-07-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2020-06-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "49f5b2b404d73a37d18fa24cc4ae10933ad6fd5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,34 @@\n+2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc.dg/sso-11.c: New test.\n+\t* gcc.dg/sso/sso.exp: Pass -Wno-scalar-storage-order.\n+\t* gcc.dg/sso/memcpy-1.c: New test.\n+\n+2020-07-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96085\n+\t* gfortran.dg/pr96085.f90: New file.\n+\n+2020-07-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95497\n+\t* g++.dg/cpp2a/concepts-pr95497.C: New test.\n+\n+2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-msum-runnable.c: New test.\n+\t* gcc.target/powerpc/vsx-builtin-msum.c: New test.\n+\n+2020-07-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/95694\n+\t* gcc.dg/pr95694.c: New test.\n+\n+2020-07-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96103\n+\t* g++.dg/cpp0x/decltype77.C: New test.\n+\n 2020-07-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92427"}, {"sha": "f02da9ed3fbc445d56fc0aebd8fdc8891d215377", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,8 @@\n+2020-07-08  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* configure.ac: Test linker support for DWARF5\n+\t* configure: Regenerate\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}, {"sha": "3adcd817edeb5e35d56a6f9f19c5d8f3c46895f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50873cc588fcc20384212b6dddca74393023a0e3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50873cc588fcc20384212b6dddca74393023a0e3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50873cc588fcc20384212b6dddca74393023a0e3", "patch": "@@ -1,3 +1,15 @@\n+2020-07-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree_impl(_Rb_tree_impl&&)): Add noexcept\n+\tqualification based only on _Compare one.\n+\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc: Add\n+\tstatic asserts.\n+\t* testsuite/23_containers/multimap/cons/noexcept_move_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/cons/noexcept_move_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/cons/noexcept_move_construct.cc: Likewise.\n+\n 2020-07-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/limits: Whitespace changes."}]}