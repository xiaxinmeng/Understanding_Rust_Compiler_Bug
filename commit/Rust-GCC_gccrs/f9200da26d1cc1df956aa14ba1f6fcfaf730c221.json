{"sha": "f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyMDBkYTI2ZDFjYzFkZjk1NmFhMTRiYTFmNmZjZmFmNzMwYzIyMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-04-06T07:22:01Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-04-06T07:22:01Z"}, "message": "configure.in: Add check for lstat.\n\n\t* configure.in: Add check for lstat.\n\t* configure, config.in: Regenerate.\n\t* cppinit.c (append_include_chain): Make empty path \".\".\n        * cpplib.c (do_line): Don't simplify #line paths.\n        * cppfiles.c (remove_component_p): New function.\n\t(find_or_create_entry): Acknowledge stat () errors during\n\tpath simplification.\n\t(handle_missing_header): Don't simplify paths.\n        (_cpp_simplify_pathname): Don't simplify VMS paths.  Return\n        the empty path untouched.  Don't leave a trailing '/'.\n\nFrom-SVN: r41148", "tree": {"sha": "c15a70516f598de133ec9104c90fc14238a59310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15a70516f598de133ec9104c90fc14238a59310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/comments", "author": null, "committer": null, "parents": [{"sha": "0bda3da7ab8eba3f5c5e3c91ebd191698ebbf288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bda3da7ab8eba3f5c5e3c91ebd191698ebbf288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bda3da7ab8eba3f5c5e3c91ebd191698ebbf288"}], "stats": {"total": 245, "additions": 140, "deletions": 105}, "files": [{"sha": "bb179c6733ae868b476cffa40e457c4272ce8e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -1,3 +1,16 @@\n+2001-04-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* configure.in: Add check for lstat.\n+\t* configure, config.in: Regenerate.\n+\t* cppinit.c (append_include_chain): Make empty path \".\".\n+        * cpplib.c (do_line): Don't simplify #line paths.\n+        * cppfiles.c (remove_component_p): New function.\n+\t(find_or_create_entry): Acknowledge stat () errors during\n+\tpath simplification.\n+\t(handle_missing_header): Don't simplify paths.\n+        (_cpp_simplify_pathname): Don't simplify VMS paths.  Return\n+        the empty path untouched.  Don't leave a trailing '/'.\n+\n 2001-04-06  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* cppdefault.c (GPLUSPLUS_BACKWARD_INCLUDE_DIR): Add."}, {"sha": "bc19ffe264282dabaeefd25a7f63bc5ef6fb1a3c", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -134,6 +134,9 @@\n /* Define if you have the kill function.  */\n #undef HAVE_KILL\n \n+/* Define if you have the lstat function.  */\n+#undef HAVE_LSTAT\n+\n /* Define if you have the munmap function.  */\n #undef HAVE_MUNMAP\n "}, {"sha": "20383fec2981e079f95b54d83496837b3dfe56c9", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -3102,7 +3102,7 @@ fi\n for ac_func in strtoul bsearch popen \\\n \tstrchr strrchr kill getrlimit setrlimit atoll atoq \\\n \tsysconf isascii gettimeofday strsignal putc_unlocked fputc_unlocked \\\n-\tfputs_unlocked getrusage iconv nl_langinfo\n+\tfputs_unlocked getrusage iconv nl_langinfo lstat\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:3109: checking for $ac_func\" >&5"}, {"sha": "1e5f408896445d925ee9d2dd38c6af1a39a00bbf", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -547,7 +547,7 @@ dnl gcc_AC_C_ENUM_BF_UNSIGNED\n AC_CHECK_FUNCS(strtoul bsearch popen \\\n \tstrchr strrchr kill getrlimit setrlimit atoll atoq \\\n \tsysconf isascii gettimeofday strsignal putc_unlocked fputc_unlocked \\\n-\tfputs_unlocked getrusage iconv nl_langinfo)\n+\tfputs_unlocked getrusage iconv nl_langinfo lstat)\n \n AC_CHECK_TYPE(ssize_t, int)\n "}, {"sha": "e242e920f22c50b2f5d5ec08c0ffd8d178cc46b3", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 118, "deletions": 96, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -101,6 +101,7 @@ static int report_missing_guard\t\tPARAMS ((splay_tree_node, void *));\n static splay_tree_node find_or_create_entry PARAMS ((cpp_reader *,\n \t\t\t\t\t\t     const char *));\n static void handle_missing_header PARAMS ((cpp_reader *, const char *, int));\n+static int remove_component_p\tPARAMS ((const char *));\n \n /* Set up the splay tree we use to store information about all the\n    file names seen in this compilation.  We also have entries for each\n@@ -155,7 +156,8 @@ _cpp_never_reread (file)\n }\n \n /* Lookup a filename, which is simplified after making a copy, and\n-   create an entry if none exists.  */\n+   create an entry if none exists.  errno is nonzero iff a (reported)\n+   stat() error occurred during simplification.  */\n static splay_tree_node\n find_or_create_entry (pfile, fname)\n      cpp_reader *pfile;\n@@ -208,6 +210,9 @@ open_file (pfile, filename)\n   splay_tree_node nd = find_or_create_entry (pfile, filename);\n   struct include_file *file = (struct include_file *) nd->value;\n \n+  if (errno)\n+    file->fd = -2;\n+\n   /* Don't retry opening if we failed previously.  */\n   if (file->fd == -2)\n     return 0;\n@@ -643,7 +648,6 @@ handle_missing_header (pfile, fname, angle_brackets)\n \t      p[len++] = '/';\n \t    }\n \t  memcpy (p + len, fname, fname_len + 1);\n-\t  _cpp_simplify_pathname (p);\n \t  deps_add_dep (pfile->deps, p);\n \t}\n     }\n@@ -1006,6 +1010,26 @@ remap_filename (pfile, name, loc)\n   return name;\n }\n \n+/* Returns true if it is safe to remove the final component of path,\n+   when it is followed by a \"..\" component.  We use lstat to avoid\n+   symlinks if we have it.  If not, we can still catch errors with\n+   stat ().  */\n+static int\n+remove_component_p (path)\n+     const char *path;\n+{\n+  struct stat s;\n+  int result;\n+\n+#ifdef HAVE_LSTAT\n+  result = lstat (path, &s);\n+#else\n+  result = stat (path, &s);\n+#endif\n+\n+  return result == 0 && S_ISDIR (s.st_mode);\n+}\n+\n /* Simplify a path name in place, deleting redundant components.  This\n    reduces OS overhead and guarantees that equivalent paths compare\n    the same (modulo symlinks).\n@@ -1017,124 +1041,122 @@ remap_filename (pfile, name, loc)\n    /../quux\t\t/quux\n    //quux\t\t//quux  (POSIX allows leading // as a namespace escape)\n \n-   Guarantees no trailing slashes. All transforms reduce the length\n-   of the string.  Returns PATH;\n- */\n+   Guarantees no trailing slashes.  All transforms reduce the length\n+   of the string.  Returns PATH.  errno is 0 if no error occurred;\n+   nonzero if an error occurred when using stat () or lstat ().  */\n+\n char *\n _cpp_simplify_pathname (path)\n     char *path;\n {\n-    char *from, *to;\n-    char *base;\n-    int absolute = 0;\n+#ifndef VMS\n+  char *from, *to;\n+  char *base, *orig_base;\n+  int absolute = 0;\n+\n+  errno = 0;\n+  /* Don't overflow the empty path by putting a '.' in it below.  */\n+  if (*path == '\\0')\n+    return path;\n \n #if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n-    /* Convert all backslashes to slashes. */\n-    for (from = path; *from; from++)\n-\tif (*from == '\\\\') *from = '/';\n+  /* Convert all backslashes to slashes. */\n+  for (from = path; *from; from++)\n+    if (*from == '\\\\') *from = '/';\n     \n-    /* Skip over leading drive letter if present. */\n-    if (ISALPHA (path[0]) && path[1] == ':')\n-\tfrom = to = &path[2];\n-    else\n-\tfrom = to = path;\n-#else\n+  /* Skip over leading drive letter if present. */\n+  if (ISALPHA (path[0]) && path[1] == ':')\n+    from = to = &path[2];\n+  else\n     from = to = path;\n+#else\n+  from = to = path;\n #endif\n     \n-    /* Remove redundant initial /s.  */\n-    if (*from == '/')\n+  /* Remove redundant leading /s.  */\n+  if (*from == '/')\n     {\n-\tabsolute = 1;\n-\tto++;\n-\tfrom++;\n-\tif (*from == '/')\n+      absolute = 1;\n+      to++;\n+      from++;\n+      if (*from == '/')\n \t{\n-\t    if (*++from == '/')\n-\t\t/* 3 or more initial /s are equivalent to 1 /.  */\n-\t\twhile (*++from == '/');\n-\t    else\n-\t\t/* On some hosts // differs from /; Posix allows this.  */\n-\t\tto++;\n+\t  if (*++from == '/')\n+\t    /* 3 or more initial /s are equivalent to 1 /.  */\n+\t    while (*++from == '/');\n+\t  else\n+\t    /* On some hosts // differs from /; Posix allows this.  */\n+\t    to++;\n \t}\n     }\n-    base = to;\n-    \n-    for (;;)\n+\n+  base = orig_base = to;\n+  for (;;)\n     {\n-\twhile (*from == '/')\n-\t    from++;\n-\n-\tif (from[0] == '.' && from[1] == '/')\n-\t    from += 2;\n-\telse if (from[0] == '.' && from[1] == '\\0')\n-\t    goto done;\n-\telse if (from[0] == '.' && from[1] == '.' && from[2] == '/')\n+      int move_base = 0;\n+\n+      while (*from == '/')\n+\tfrom++;\n+\n+      if (*from == '\\0')\n+\tbreak;\n+\n+      if (*from == '.')\n \t{\n-\t    if (base == to)\n-\t    {\n-\t\tif (absolute)\n-\t\t    from += 3;\n-\t\telse\n-\t\t{\n-\t\t    *to++ = *from++;\n-\t\t    *to++ = *from++;\n-\t\t    *to++ = *from++;\n-\t\t    base = to;\n-\t\t}\n-\t    }\n-\t    else\n+\t  if (from[1] == '\\0')\n+\t    break;\n+\t  if (from[1] == '/')\n \t    {\n-\t\tto -= 2;\n-\t\twhile (to > base && *to != '/') to--;\n-\t\tif (*to == '/')\n-\t\t    to++;\n-\t\tfrom += 3;\n+\t      from += 2;\n+\t      continue;\n \t    }\n-\t}\n-\telse if (from[0] == '.' && from[1] == '.' && from[2] == '\\0')\n-\t{\n-\t    if (base == to)\n+\t  else if (from[1] == '.' && (from[2] == '/' || from[2] == '\\0'))\n \t    {\n-\t\tif (!absolute)\n+\t      /* Don't simplify if there was no previous component.  */\n+\t      if (absolute && orig_base == to)\n \t\t{\n-\t\t    *to++ = *from++;\n-\t\t    *to++ = *from++;\n+\t\t  from += 2;\n+\t\t  continue;\n \t\t}\n-\t    }\n-\t    else\n-\t    {\n-\t\tto -= 2;\n-\t\twhile (to > base && *to != '/') to--;\n-\t\tif (*to == '/')\n-\t\t    to++;\n-\t    }\n-\t    goto done;\n-\t}\n-\telse\n-\t    /* Copy this component and trailing /, if any.  */\n-\t    while ((*to++ = *from++) != '/')\n-\t    {\n-\t\tif (!to[-1])\n+\t      /* Don't simplify if the previous component was \"../\",\n+\t\t or if an error has already occurred with (l)stat.  */\n+\t      if (base != to && errno == 0)\n \t\t{\n-\t\t    to--;\n-\t\t    goto done;\n+\t\t  /* We don't back up if it's a symlink.  */\n+\t\t  *to = '\\0';\n+\t\t  if (remove_component_p (path))\n+\t\t    {\n+\t\t      while (to > base && *to != '/')\n+\t\t\tto--;\n+\t\t      from += 2;\n+\t\t      continue;\n+\t\t    }\n \t\t}\n+\t      move_base = 1;\n \t    }\n-\t\n+\t}\n+\n+      /* Add the component separator.  */\n+      if (to > orig_base)\n+\t*to++ = '/';\n+\n+      /* Copy this component until the trailing null or '/'.  */\n+      while (*from != '\\0' && *from != '/')\n+\t*to++ = *from++;\n+\n+      if (move_base)\n+\tbase = to;\n     }\n     \n- done:\n-    /* Trim trailing slash */\n-    if (to[0] == '/' && (!absolute || to > path+1))\n-\tto--;\n-\n-    /* Change the empty string to \".\" so that stat() on the result\n-       will always work. */\n-    if (to == path)\n-      *to++ = '.';\n-    \n-    *to = '\\0';\n-\n-    return path;\n+  /* Change the empty string to \".\" so that it is not treated as stdin.\n+     Null terminate.  */\n+  if (to == path)\n+    *to++ = '.';\n+  *to = '\\0';\n+\n+  return path;\n+#else /* VMS  */\n+  errno = 0;\n+  return path;\n+#endif /* !VMS  */\n }"}, {"sha": "980cdb1df42e6b875c8d1c7b2aa665b04fd813e2", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -211,10 +211,12 @@ append_include_chain (pfile, dir, path, cxx_aware)\n   struct stat st;\n   unsigned int len;\n \n+  if (*dir == '\\0')\n+    dir = xstrdup (\".\");\n   _cpp_simplify_pathname (dir);\n   if (stat (dir, &st))\n     {\n-      /* Dirs that don't exist are silently ignored. */\n+      /* Dirs that don't exist are silently ignored.  */\n       if (errno != ENOENT)\n \tcpp_notice_from_errno (pfile, dir);\n       else if (CPP_OPTION (pfile, verbose))"}, {"sha": "56ffbb17bc739244d07d582f5a211450d617f2cd", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9200da26d1cc1df956aa14ba1f6fcfaf730c221/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=f9200da26d1cc1df956aa14ba1f6fcfaf730c221", "patch": "@@ -729,12 +729,7 @@ do_line (pfile)\n   cpp_get_token (pfile, &token);\n   if (token.type == CPP_STRING)\n     {\n-      char *fname;\n-      unsigned int len = token.val.str.len + 1;\n-\n-      fname = (char *) _cpp_pool_alloc (&pfile->ident_pool, len);\n-      memcpy (fname, token.val.str.text, len);\n-      _cpp_simplify_pathname (fname);\n+      const char *fname = (const char *) token.val.str.text;\n \n       /* Only accept flags for the # 55 form.  */\n       if (! pfile->state.line_extension)"}]}