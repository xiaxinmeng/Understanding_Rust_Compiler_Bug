{"sha": "51076f9604483f4f1b4dc16a90871384c1fd15cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwNzZmOTYwNDQ4M2Y0ZjFiNGRjMTZhOTA4NzEzODRjMWZkMTVjYw==", "commit": {"author": {"name": "Randolph Chung", "email": "tausq@debian.org", "date": "2005-07-06T02:18:21Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-07-06T02:18:21Z"}, "message": "configure.ac (hppa*-*-linux*): Check for a TLS capable gas.\n\n\t* configure.ac (hppa*-*-linux*: Check for a TLS capable gas.\n\t* configure: Regenerate.\n\t* config/pa/pa-protos.h (tls_symbolic_operand): Declare.\n\t(pa_tls_referenced_p): Declare.\n\t* config/pa/pa.c (legitimize_pic_address): Reject TLS operands.\n\t(gen_tls_tga, gen_tls_get_addr, hppa_tls_call): New.\n\t(legitimize_tls_address): New.\n\t(hppa_legitimize_address): Handle TLS addresses.\n\t(pa_tls_symbol_ref_1, pa_tls_referenced_p): New.\n\t(TARGET_CANNOT_FORCE_CONST_MEM): Define.\n\t(emit_move_sequence): Handle TLS addresses.\n\t(pa_encode_section_info): Call default handler to handle common\n\tsections.\n\t* config/pa/pa.h (PA_SYMBOL_REF_TLS_P): New.\n\t(CONSTANT_ADDRESS_P): Reject TLS operands.\n\t(TARGET_HAVE_TLS) [HAVE_AS_TLS]: Define.\n\t* config/pa/pa.md (UNSPEC_TP, UNSPEC_TLSGD, UNSPEC_TLSLDM)\n\t(UNSPEC_TLSLDO, UNSPEC_TLSLDBASE, UNSPEC_TLSIE)\n\t(UNSPEC_TLSLE): Define new constants.\n\t(tgd_load, tld_load, tld_offset_load, tp_load, tie_load, tle_load): New.\n\t* config/pa/predicates.md (symbolic_operand): Reject TLS operands.\n\t(tls_symbolic_operand, tgd_symbolic_operand, tld_symbolic_operand)\n\t(tie_symbolic_operand, tle_symbolic_operand): New\n\nFrom-SVN: r101648", "tree": {"sha": "b033984f316da7a67bfe1fa08ed4aedef89780e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b033984f316da7a67bfe1fa08ed4aedef89780e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51076f9604483f4f1b4dc16a90871384c1fd15cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51076f9604483f4f1b4dc16a90871384c1fd15cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51076f9604483f4f1b4dc16a90871384c1fd15cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51076f9604483f4f1b4dc16a90871384c1fd15cc/comments", "author": null, "committer": null, "parents": [{"sha": "f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb"}], "stats": {"total": 340, "additions": 335, "deletions": 5}, "files": [{"sha": "d398a7fdde4862d72c00eff7e6d3840dee365eb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -1,3 +1,29 @@\n+2005-07-05  Randolph Chung  <tausq@debian.org>\n+\n+\t* configure.ac (hppa*-*-linux*: Check for a TLS capable gas.\n+\t* configure: Regenerate.\n+\t* config/pa/pa-protos.h (tls_symbolic_operand): Declare.\n+\t(pa_tls_referenced_p): Declare.\n+\t* config/pa/pa.c (legitimize_pic_address): Reject TLS operands.\n+\t(gen_tls_tga, gen_tls_get_addr, hppa_tls_call): New.\n+\t(legitimize_tls_address): New.\n+\t(hppa_legitimize_address): Handle TLS addresses.\n+\t(pa_tls_symbol_ref_1, pa_tls_referenced_p): New.\n+\t(TARGET_CANNOT_FORCE_CONST_MEM): Define.\n+\t(emit_move_sequence): Handle TLS addresses.\n+\t(pa_encode_section_info): Call default handler to handle common \n+\tsections.\n+\t* config/pa/pa.h (PA_SYMBOL_REF_TLS_P): New.\n+\t(CONSTANT_ADDRESS_P): Reject TLS operands.\n+\t(TARGET_HAVE_TLS) [HAVE_AS_TLS]: Define.\n+\t* config/pa/pa.md (UNSPEC_TP, UNSPEC_TLSGD, UNSPEC_TLSLDM)\n+\t(UNSPEC_TLSLDO, UNSPEC_TLSLDBASE, UNSPEC_TLSIE)\n+\t(UNSPEC_TLSLE): Define new constants. \n+\t(tgd_load, tld_load, tld_offset_load, tp_load, tie_load, tle_load): New.\n+\t* config/pa/predicates.md (symbolic_operand): Reject TLS operands.\n+\t(tls_symbolic_operand, tgd_symbolic_operand, tld_symbolic_operand)\n+\t(tie_symbolic_operand, tle_symbolic_operand): New\n+\n 2005-07-06  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* aclocal.m4: Update macros for autoconf 2.59 style."}, {"sha": "3bc4c30958552aa10f85753740cac4aff1b5d9ef", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02110-1301, USA.  */\n #ifdef RTX_CODE\n /* Prototype function used in various macros.  */\n extern int symbolic_operand (rtx, enum machine_mode);\n+extern int tls_symbolic_operand (rtx);\n \n /* Used in insn-*.c.  */\n extern int following_call (rtx);\n@@ -67,6 +68,7 @@ extern int adddi3_operand (rtx, enum machine_mode);\n extern int indexed_memory_operand (rtx, enum machine_mode);\n extern int symbolic_expression_p (rtx);\n extern int symbolic_memory_operand (rtx, enum machine_mode);\n+extern bool pa_tls_referenced_p (rtx);\n extern int pa_adjust_insn_length (rtx, int);\n extern int int11_operand (rtx, enum machine_mode);\n extern int reg_or_cint_move_operand (rtx, enum machine_mode);"}, {"sha": "7eb19569055126623720e5c2533e91fcf79f77d2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 124, "deletions": 1, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -292,6 +292,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P pa_scalar_mode_supported_p\n \n+#undef TARGET_CANNOT_FORCE_CONST_MEM\n+#define TARGET_CANNOT_FORCE_CONST_MEM pa_tls_referenced_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -595,6 +598,9 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n {\n   rtx pic_ref = orig;\n \n+  if (PA_SYMBOL_REF_TLS_P (orig))\n+    abort();\n+\n   /* Labels need special handling.  */\n   if (pic_label_operand (orig, mode))\n     {\n@@ -671,6 +677,80 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n   return pic_ref;\n }\n \n+static GTY(()) rtx gen_tls_tga;\n+\n+static rtx\n+gen_tls_get_addr (void)\n+{\n+  if (!gen_tls_tga)\n+    gen_tls_tga = init_one_libfunc (\"__tls_get_addr\");\n+  return gen_tls_tga;\n+}\n+\n+static rtx\n+hppa_tls_call (rtx arg)\n+{\n+  rtx ret;\n+\n+  ret = gen_reg_rtx (Pmode);\n+  emit_library_call_value (gen_tls_get_addr (), ret,\n+\t\t  \t   LCT_CONST, Pmode, 1, arg, Pmode);\n+\n+  return ret;\n+}\n+\n+static rtx\n+legitimize_tls_address (rtx addr)\n+{\n+  rtx ret, insn, tmp, t1, t2, tp;\n+  enum tls_model model = SYMBOL_REF_TLS_MODEL (addr);\n+\n+  switch (model) \n+    {\n+      case TLS_MODEL_GLOBAL_DYNAMIC:\n+\ttmp = gen_reg_rtx (Pmode);\n+\temit_insn (gen_tgd_load (tmp, addr));\n+\tret = hppa_tls_call (tmp);\n+\tbreak;\n+\n+      case TLS_MODEL_LOCAL_DYNAMIC:\n+\tret = gen_reg_rtx (Pmode);\n+\ttmp = gen_reg_rtx (Pmode);\n+\tstart_sequence ();\n+\temit_insn (gen_tld_load (tmp, addr));\n+\tt1 = hppa_tls_call (tmp);\n+\tinsn = get_insns ();\n+\tend_sequence ();\n+\tt2 = gen_reg_rtx (Pmode);\n+\temit_libcall_block (insn, t2, t1, \n+\t\t\t    gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n+\t\t\t\t            UNSPEC_TLSLDBASE));\n+\temit_insn (gen_tld_offset_load (ret, addr, t2));\n+\tbreak;\n+\n+      case TLS_MODEL_INITIAL_EXEC:\n+\ttp = gen_reg_rtx (Pmode);\n+\ttmp = gen_reg_rtx (Pmode);\n+\tret = gen_reg_rtx (Pmode);\n+\temit_insn (gen_tp_load (tp));\n+\temit_insn (gen_tie_load (tmp, addr));\n+\temit_move_insn (ret, gen_rtx_PLUS (Pmode, tp, tmp));\n+\tbreak;\n+\n+      case TLS_MODEL_LOCAL_EXEC:\n+\ttp = gen_reg_rtx (Pmode);\n+\tret = gen_reg_rtx (Pmode);\n+\temit_insn (gen_tp_load (tp));\n+\temit_insn (gen_tle_load (ret, addr, tp));\n+\tbreak;\n+\n+      default:\n+\tabort();\n+    }\n+\n+  return ret;\n+}\n+\n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address.\n    This macro is used in only one place: `memory_address' in explow.c.\n@@ -740,7 +820,9 @@ hppa_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       && !REG_POINTER (XEXP (x, 1)))\n     return gen_rtx_PLUS (Pmode, XEXP (x, 1), XEXP (x, 0));\n \n-  if (flag_pic)\n+  if (PA_SYMBOL_REF_TLS_P (x))\n+    return legitimize_tls_address (x);\n+  else if (flag_pic)\n     return legitimize_pic_address (x, mode, gen_reg_rtx (Pmode));\n \n   /* Strip off CONST.  */\n@@ -1190,6 +1272,25 @@ force_mode (enum machine_mode mode, rtx orig)\n   return gen_rtx_REG (mode, REGNO (orig));\n }\n \n+/* Return 1 if *X is a thread-local symbol.  */\n+\n+static int\n+pa_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n+{\n+  return PA_SYMBOL_REF_TLS_P (*x);\n+}\n+\n+/* Return 1 if X contains a thread-local symbol.  */\n+\n+bool\n+pa_tls_referenced_p (rtx x)\n+{\n+  if (!TARGET_HAVE_TLS)\n+    return false;\n+\n+  return for_each_rtx (&x, &pa_tls_symbol_ref_1, 0);\n+}\n+\n /* Emit insns to move operands[1] into operands[0].\n \n    Return 1 if we have written out everything that needs to be done to\n@@ -1707,6 +1808,26 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t    }\n \t  return 1;\n \t}\n+      else if (pa_tls_referenced_p (operand1))\n+\t{\n+\t  rtx tmp = operand1;\n+\t  rtx addend = NULL;\n+\n+\t  if (GET_CODE (tmp) == CONST && GET_CODE (XEXP (tmp, 0)) == PLUS)\n+\t    {\n+\t      addend = XEXP (XEXP (tmp, 0), 1);\n+\t      tmp = XEXP (XEXP (tmp, 0), 0);\n+\t    }\n+\n+\t  gcc_assert (GET_CODE (tmp) == SYMBOL_REF);\n+\t  tmp = legitimize_tls_address (tmp);\n+\t  if (addend)\n+\t    {\n+\t      tmp = gen_rtx_PLUS (mode, tmp, addend);\n+\t      tmp = force_operand (tmp, operands[0]);\n+\t    }\n+\t  operands[1] = tmp;\n+\t}\n       else if (GET_CODE (operand1) != CONST_INT\n \t       || !cint_ok_for_move (INTVAL (operand1)))\n \t{\n@@ -7371,6 +7492,8 @@ hppa_encode_label (rtx sym)\n static void\n pa_encode_section_info (tree decl, rtx rtl, int first)\n {\n+  default_encode_section_info (decl, rtl, first);\n+\n   if (first && TEXT_SPACE_P (decl))\n     {\n       SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;"}, {"sha": "b9a5394af0f3429e4d07e4b562114ab9e2d9b42d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -1003,13 +1003,18 @@ extern int may_call_alloca;\n \n #define MAX_REGS_PER_ADDRESS 2\n \n+/* Non-TLS symbolic references.  */\n+#define PA_SYMBOL_REF_TLS_P(RTX) \\\n+  (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)\n+\n /* Recognize any constant value that is a valid address except\n    for symbolic addresses.  We get better CSE by rejecting them\n    here and allowing hppa_legitimize_address to break them up.  We\n    use most of the constants accepted by CONSTANT_P, except CONST_DOUBLE.  */\n \n #define CONSTANT_ADDRESS_P(X) \\\n-  ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+  ((GET_CODE (X) == LABEL_REF \t\t\t\t\t\t\\\n+   || (GET_CODE (X) == SYMBOL_REF && !SYMBOL_REF_TLS_MODEL (X))\t\t\\\n    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n    || GET_CODE (X) == HIGH) \t\t\t\t\t\t\\\n    && (reload_in_progress || reload_completed || ! symbolic_expression_p (X)))\n@@ -1919,3 +1924,8 @@ forget_section (void)\t\t\t\t\t\t\t\\\n /* We need a libcall to canonicalize function pointers on TARGET_ELF32.  */\n #define CANONICALIZE_FUNCPTR_FOR_COMPARE_LIBCALL \\\n   \"__canonicalize_funcptr_for_compare\"\n+\n+#ifdef HAVE_AS_TLS\n+#undef TARGET_HAVE_TLS\n+#define TARGET_HAVE_TLS true\n+#endif"}, {"sha": "83fdec6066a586bae6e145dfeeaed82814471192", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -32,6 +32,13 @@\n   [(UNSPEC_CFFC\t\t0)\t; canonicalize_funcptr_for_compare\n    (UNSPEC_GOTO\t\t1)\t; indirect_goto\n    (UNSPEC_DLTIND14R\t2)\t; \n+   (UNSPEC_TP\t\t3)\n+   (UNSPEC_TLSGD\t4)\n+   (UNSPEC_TLSLDM\t5)\n+   (UNSPEC_TLSLDO\t6)\n+   (UNSPEC_TLSLDBASE\t7)\n+   (UNSPEC_TLSIE\t8)\n+   (UNSPEC_TLSLE \t9)\n   ])\n \n ;; UNSPEC_VOLATILE:\n@@ -9347,3 +9354,83 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n }\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n+\n+\n+;; TLS Support\n+(define_insn \"tgd_load\"\n+ [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+       (unspec:SI [(match_operand 1 \"tgd_symbolic_operand\" \"\")] UNSPEC_TLSGD))\n+  (clobber (reg:SI 1))]\n+  \"\"\n+  \"*\n+{\n+  if (flag_pic)\n+    return \\\"addil LT'%1-$tls_gdidx$,%%r19\\;ldo RT'%1-$tls_gdidx$(%%r1),%0\\\";\n+  else\n+    return \\\"addil LR'%1-$tls_gdidx$,%%r27\\;ldo RR'%1-$tls_gdidx$(%%r1),%0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"tld_load\"\n+ [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+       (unspec:SI [(match_operand 1 \"tld_symbolic_operand\" \"\")] UNSPEC_TLSLDM))\n+  (clobber (reg:SI 1))]\n+  \"\"\n+  \"*\n+{\n+  if (flag_pic)\n+    return \\\"addil LT'%1-$tls_ldidx$,%%r19\\;ldo RT'%1-$tls_ldidx$(%%r1),%0\\\";\n+  else\n+    return \\\"addil LR'%1-$tls_ldidx$,%%r27\\;ldo RR'%1-$tls_ldidx$(%%r1),%0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"tld_offset_load\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (plus:SI (unspec:SI [(match_operand 1 \"tld_symbolic_operand\" \"\")] \n+\t\t \t    UNSPEC_TLSLDO)\n+\t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n+   (clobber (reg:SI 1))]\n+  \"\"\n+  \"*\n+{\n+  return \\\"addil LR'%1-$tls_dtpoff$,%2\\;ldo RR'%1-$tls_dtpoff$(%%r1),%0\\\"; \n+}\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"tp_load\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(const_int 0)] UNSPEC_TP))]\n+  \"\"\n+  \"{mfctl|mfctl,w} %%cr27,%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"tie_load\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand 1 \"tie_symbolic_operand\" \"\")] UNSPEC_TLSIE))\n+   (clobber (reg:SI 1))]\n+  \"\"\n+  \"*\n+{\n+  if (flag_pic)\n+    return \\\"addil LT'%1-$tls_ieoff$,%%r19\\;ldw RT'%1-$tls_ieoff$(%%r1),%0\\\";\n+  else\n+    return \\\"addil LR'%1-$tls_ieoff$,%%r27\\;ldw RR'%1-$tls_ieoff$(%%r1),%0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"tle_load\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (plus:SI (unspec:SI [(match_operand 1 \"tle_symbolic_operand\" \"\")] \n+\t\t \t    UNSPEC_TLSLE)\n+\t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n+   (clobber (reg:SI 1))]\n+  \"\"\n+  \"addil LR'%1-$tls_leoff$,%2\\;ldo RR'%1-$tls_leoff$(%%r1),%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])"}, {"sha": "b3835699a8e4747fcd0651af487cba5263cbd165", "filename": "gcc/config/pa/predicates.md", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfig%2Fpa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpredicates.md?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -68,11 +68,13 @@\n   switch (GET_CODE (op))\n     {\n     case SYMBOL_REF:\n+      return !SYMBOL_REF_TLS_MODEL (op);\n     case LABEL_REF:\n       return 1;\n     case CONST:\n       op = XEXP (op, 0);\n-      return ((GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n+      return (((GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n+                && !SYMBOL_REF_TLS_MODEL (XEXP (op, 0)))\n \t       || GET_CODE (XEXP (op, 0)) == LABEL_REF)\n \t      && GET_CODE (XEXP (op, 1)) == CONST_INT);\n     default:\n@@ -91,10 +93,32 @@\n   if (GET_CODE (op) != MEM)\n     return 0;\n   op = XEXP (op, 0);\n-  return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == CONST\n-\t  || GET_CODE (op) == HIGH || GET_CODE (op) == LABEL_REF);\n+  return ((GET_CODE (op) == SYMBOL_REF && !SYMBOL_REF_TLS_MODEL (op))\n+  \t || GET_CODE (op) == CONST || GET_CODE (op) == HIGH \n+\t || GET_CODE (op) == LABEL_REF);\n })\n \n+;; Return true if OP is a symbolic operand for the TLS Global Dynamic model.\n+(define_predicate \"tgd_symbolic_operand\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_GLOBAL_DYNAMIC\")))\n+\n+;; Return true if OP is a symbolic operand for the TLS Local Dynamic model.\n+(define_predicate \"tld_symbolic_operand\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_DYNAMIC\")))\n+\n+;; Return true if OP is a symbolic operand for the TLS Initial Exec model.\n+(define_predicate \"tie_symbolic_operand\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_INITIAL_EXEC\")))\n+\n+;; Return true if OP is a symbolic operand for the TLS Local Exec model.\n+(define_predicate \"tle_symbolic_operand\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_EXEC\")))\n+\n+\n ;; Return 1 if the operand is a register operand or a non-symbolic\n ;; memory operand after reload.  This predicate is used for branch\n ;; patterns that internally handle register reloading.  We need to"}, {"sha": "36112760c9b270f01e1890af10387fed0713917d", "filename": "gcc/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -14015,6 +14015,35 @@ x:      .long   25\n \ttls_first_major=2\n \ttls_first_minor=14\n \t;;\n+  hppa*-*-linux*)\n+    conftest_s='\n+t1:\t.reg\t%r20\n+t2:\t.reg\t%r21\n+gp:\t.reg\t%r19\n+\t.section \".tdata\",\"awT\",@progbits\n+foo:\t.long\t25\n+\t.text\n+\t.align\t4\n+\taddil LT%foo-$tls_gdidx$,gp\n+\tldo RT%foo-$tls_gdidx$(%r1),%arg0\n+\tb __tls_get_addr\n+\tnop\n+\taddil LT%foo-$tls_ldidx$,gp\n+\tb __tls_get_addr\n+\tldo RT%foo-$tls_ldidx$(%r1),%arg0\n+\taddil LR%foo-$tls_dtpoff$,%ret0\n+\tldo RR%foo-$tls_dtpoff$(%r1),%t1\n+\tmfctl %cr27,%t1\n+\taddil LT%foo-$tls_ieoff$,gp\n+\tldw RT%foo-$tls_ieoff$(%r1),%t2\n+\tadd %t1,%t2,%t3\n+\tmfctl %cr27,%t1\n+\taddil LR%foo-$tls_leoff$,%t1\n+\tldo RR%foo-$tls_leoff$(%r1),%t2'\n+\ttls_first_major=2\n+\ttls_first_minor=15\n+\ttls_as_opt=--fatal-warnings\n+\t;;\n   i[34567]86-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}, {"sha": "f2d631b4c7c177a88f8259352a13da87b60c7fec", "filename": "gcc/configure.ac", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51076f9604483f4f1b4dc16a90871384c1fd15cc/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=51076f9604483f4f1b4dc16a90871384c1fd15cc", "patch": "@@ -2189,6 +2189,35 @@ x:      .long   25\n \ttls_first_major=2\n \ttls_first_minor=14\n \t;;\n+  hppa*-*-linux*)\n+    conftest_s='\n+t1:\t.reg\t%r20\n+t2:\t.reg\t%r21\n+gp:\t.reg\t%r19\n+\t.section \".tdata\",\"awT\",@progbits\n+foo:\t.long\t25\n+\t.text\n+\t.align\t4\n+\taddil LT%foo-$tls_gdidx$,gp\n+\tldo RT%foo-$tls_gdidx$(%r1),%arg0\n+\tb __tls_get_addr\n+\tnop \t\t\n+\taddil LT%foo-$tls_ldidx$,gp\n+\tb __tls_get_addr\n+\tldo RT%foo-$tls_ldidx$(%r1),%arg0\n+\taddil LR%foo-$tls_dtpoff$,%ret0\n+\tldo RR%foo-$tls_dtpoff$(%r1),%t1\n+\tmfctl %cr27,%t1 \t\t\n+\taddil LT%foo-$tls_ieoff$,gp\n+\tldw RT%foo-$tls_ieoff$(%r1),%t2\n+\tadd %t1,%t2,%t3 \t\t\n+\tmfctl %cr27,%t1 \t\t\n+\taddil LR%foo-$tls_leoff$,%t1\n+\tldo RR%foo-$tls_leoff$(%r1),%t2'\n+\ttls_first_major=2\n+\ttls_first_minor=15\n+\ttls_as_opt=--fatal-warnings\n+\t;;\n   i[34567]86-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}]}