{"sha": "6b603eb999cdf19bb27cdaf7b3433582d1c04356", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2MDNlYjk5OWNkZjE5YmIyN2NkYWY3YjM0MzM1ODJkMWMwNDM1Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-13T15:12:36Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-13T15:12:36Z"}, "message": "2003-02-13  Michael  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileChannelImpl.java\n\t(lengthInternal): Must be native.\n\t(size): Check if channel is already closed.\n\t(implCloseChannel): Reformated.\n\t(read): w was unused, removed it.\n\t(read): Removed.\n\t(read): New method.\n\t(write): New method.\n\t(map): Check arguments.\n\t(force): Throws IOException, check if channel is closed.\n\t(transferTo): New method.\n\t(transferFrom): New method.\n\t(lock): New method.\n\t(tryLock): New method.\n\t(position): New method.\n\t(truncate): New method.\n\t(nio_mmap_file): Uncommented.\n\t(nio_munmap_file): Uncommented.\n\t(nio_msync): Uncommented.\n\t* gnu/java/nio/natFileChannelImpl.cc: New file.\n\nFrom-SVN: r62841", "tree": {"sha": "cf78c09f1e56f59310d3207edba02250289dbb99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf78c09f1e56f59310d3207edba02250289dbb99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b603eb999cdf19bb27cdaf7b3433582d1c04356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b603eb999cdf19bb27cdaf7b3433582d1c04356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b603eb999cdf19bb27cdaf7b3433582d1c04356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b603eb999cdf19bb27cdaf7b3433582d1c04356/comments", "author": null, "committer": null, "parents": [{"sha": "e0d9cc77707ce56f0661cc6ac95ab19ec96e2ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d9cc77707ce56f0661cc6ac95ab19ec96e2ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d9cc77707ce56f0661cc6ac95ab19ec96e2ecc"}], "stats": {"total": 257, "additions": 228, "deletions": 29}, "files": [{"sha": "15391fc68f3dd1f076ff14de60810397677912d4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6b603eb999cdf19bb27cdaf7b3433582d1c04356", "patch": "@@ -1,3 +1,26 @@\n+2003-02-13  Michael  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileChannelImpl.java\n+\t(lengthInternal): Must be native.\n+\t(size): Check if channel is already closed.\n+\t(implCloseChannel): Reformated.\n+\t(read): w was unused, removed it.\n+\t(read): Removed.\n+\t(read): New method.\n+\t(write): New method.\n+\t(map): Check arguments.\n+\t(force): Throws IOException, check if channel is closed.\n+\t(transferTo): New method.\n+\t(transferFrom): New method.\n+\t(lock): New method.\n+\t(tryLock): New method.\n+\t(position): New method.\n+\t(truncate): New method.\n+\t(nio_mmap_file): Uncommented.\n+\t(nio_munmap_file): Uncommented.\n+\t(nio_msync): Uncommented.\n+\t* gnu/java/nio/natFileChannelImpl.cc: New file.\n+\t\n 2003-02-13  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/ByteBuffer.java"}, {"sha": "31779bbc64e78ba3939be0cd7ed1becf116f0c7c", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 152, "deletions": 29, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=6b603eb999cdf19bb27cdaf7b3433582d1c04356", "patch": "@@ -44,7 +44,13 @@\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.nio.MappedByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.channels.NonReadableChannelException;\n+import java.nio.channels.NonWritableChannelException;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n \n /**\n  * This file is not user visible !\n@@ -66,11 +72,7 @@ public class FileChannelImpl extends FileChannel\n    * This method came from java.io.RandomAccessFile\n    * It is private there so we will repeat it here.\n    */\n-//   private native long lengthInternal (int native_fd) throws IOException;\n-  private long lengthInternal (int native_fd) throws IOException\n-  {\n-    return 0;\n-  };\n+  private native long lengthInternal (int native_fd) throws IOException;\n \n   public FileChannelImpl (int fd, Object obj)\n   {\n@@ -80,39 +82,42 @@ public FileChannelImpl (int fd, Object obj)\n \n   public long size () throws IOException\n   {\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n     return lengthInternal (fd);\n   }\n     \n-  protected void implCloseChannel()  throws IOException\n+  protected void implCloseChannel() throws IOException\n   {\n     if (address != 0)\n-\t    {\n+      {\n         nio_unmmap_file (fd, address, (int) length);\n-\t    }\n+        address = 0;\n+      }\n \n     // FIXME\n     fd = 0;\n \n     if (file_obj instanceof RandomAccessFile)\n-\t    {\n+      {\n         RandomAccessFile o = (RandomAccessFile) file_obj;\n         o.close();\n-\t    }\n+      }\n     else if (file_obj instanceof FileInputStream)\n-\t    {\n+      {\n         FileInputStream o = (FileInputStream) file_obj;\n         o.close();\n-\t    }\n+      }\n     else if (file_obj instanceof FileOutputStream)\n-\t    {\n+      {\n         FileOutputStream o = (FileOutputStream) file_obj;\n         o.close();\n-\t    }\n+      }\n   }\n \n   public int read (ByteBuffer dst) throws IOException\n   {\n-    int w = 0;\n     int s = (int)size();\n \n     if (buf == null)\n@@ -128,9 +133,18 @@ public int read (ByteBuffer dst) throws IOException\n     return s;\n   }\n \n-  public long read (ByteBuffer[] dsts) throws IOException\n+  public int read (ByteBuffer dst, long position)\n+    throws IOException\n   {\n-    return read (dsts, 0, dsts.length);\n+    if (position < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+    \n+    // FIXME: check for NonReadableChannelException\n+\n+    throw new Error (\"Not implemented\");\n   }\n \n   public long read (ByteBuffer[] dsts, int offset, int length)\n@@ -164,6 +178,20 @@ public int write (ByteBuffer src) throws IOException\n     return w;\n   }\n     \n+  public int write (ByteBuffer src, long position)\n+    throws IOException\n+  {\n+    if (position < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+    \n+    // FIXME: check for NonWritableChannelException\n+\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n   public long write(ByteBuffer[] srcs, int offset, int length)\n     throws IOException\n   {\n@@ -173,13 +201,22 @@ public long write(ByteBuffer[] srcs, int offset, int length)\n \t    {\n         res += write (srcs[i]);\n \t    }\n-\treturn res;\n-    }\n+    \n+    return res;\n+  }\n \t\t\t\t   \n   public MappedByteBuffer map (FileChannel.MapMode mode, long position,\n                                long size)\n     throws IOException\n   {\n+    if ((mode != MapMode.READ_ONLY\n+         && mode != MapMode.READ_WRITE\n+         && mode != MapMode.PRIVATE)\n+        || position < 0\n+        || size < 0\n+        || size > Integer.MAX_VALUE)\n+      throw new IllegalArgumentException ();\n+    \n //     int cmode = mode.m;\n //     address = nio_mmap_file (fd, position, size, cmode);\n //     length = size;\n@@ -208,27 +245,113 @@ public long write (ByteBuffer[] srcs)\n   /**\n    * msync with the disk\n    */\n-  public void force (boolean metaData)\n+  public void force (boolean metaData) throws IOException\n   {\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    // FIXME: What to do with metaData ?\n+    \n     nio_msync (fd, address, length);\n   }\n \n-//   static native long nio_mmap_file (int fd, long pos, int size, int mode);\n+  public long transferTo (long position, long count, WritableByteChannel target)\n+    throws IOException\n+  {\n+    if (position < 0\n+        || count < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    // FIXME: check for NonReadableChannelException\n+    // FIXME: check for NonWritableChannelException\n+    \n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public long transferFrom (ReadableByteChannel src, long position, long count)\n+    throws IOException\n+  {\n+    if (position < 0\n+        || count < 0)\n+      throw new IllegalArgumentException ();\n \n-//   static native void nio_unmmap_file (int fd, long address, int size);\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n \n-//   static native void nio_msync (int fd, long address, int length);\n+    // FIXME: check for NonReadableChannelException\n+    // FIXME: check for NonWritableChannelException\n+    \n+    throw new Error (\"Not implemented\");\n+  }\n \n-  static long nio_mmap_file (int fd, long pos, int size, int mode)\n+  public FileLock lock (long position, long size, boolean shared)\n+    throws IOException\n   {\n-    return 0;\n+    if (position < 0\n+        || size < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    // FIXME: check for NonReadableChannelException\n+    // FIXME: check for NonWritableChannelException\n+    \n+    throw new Error (\"Not implemented\");\n   }\n+  \n+  public FileLock tryLock (long position, long size, boolean shared)\n+    throws IOException\n+  {\n+    if (position < 0\n+        || size < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n \n-  static void nio_unmmap_file (int fd, long address, int size)\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public long position ()\n+    throws IOException\n+  {\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  public FileChannel position (long newPosition)\n+    throws IOException\n   {\n-  };\n+    if (newPosition < 0)\n+      throw new IllegalArgumentException ();\n \n-  static void nio_msync (int fd, long address, int length)\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  public FileChannel truncate (long size)\n+    throws IOException\n   {\n-  };\n+    if (size < 0)\n+      throw new IllegalArgumentException ();\n+\n+    if (!isOpen ())\n+      throw new ClosedChannelException ();\n+\n+    // FIXME: check for NonWritableChannelException\n+\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  private static native long nio_mmap_file (int fd, long pos, int size, int mode);\n+  private static native void nio_unmmap_file (int fd, long address, int size);\n+  private static native void nio_msync (int fd, long address, int length);\n }"}, {"sha": "87386305bc685be04208aecdd2254dc6ceb44c1b", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b603eb999cdf19bb27cdaf7b3433582d1c04356/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=6b603eb999cdf19bb27cdaf7b3433582d1c04356", "patch": "@@ -0,0 +1,53 @@\n+// natFileChannelImpl.cc\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <jvm.h>\n+\n+#include <errno.h>\n+#include <string.h>\n+#include <sys/types.h>\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_FCNTL_H\n+#include <fcntl.h>\n+#endif\n+\n+#include <gnu/java/nio/FileChannelImpl.h>\n+#include <java/io/IOException.h>\n+#include <java/nio/channels/FileChannel.h>\n+\n+jlong\n+gnu::java::nio::FileChannelImpl::lengthInternal (jint fd)\n+{\n+  throw new ::java::io::IOException (JvNewStringUTF (\"lengthInternal not implemented\"));\n+}\n+\n+jlong\n+gnu::java::nio::FileChannelImpl::nio_mmap_file (jint, jlong, jint, jint)\n+{\n+  throw new ::java::io::IOException (JvNewStringUTF (\"mmap not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::FileChannelImpl::nio_unmmap_file (jint, jlong, jint)\n+{\n+  throw new ::java::io::IOException (JvNewStringUTF (\"munmap not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::FileChannelImpl::nio_msync (jint, jlong, jint)\n+{\n+  throw new ::java::io::IOException (JvNewStringUTF (\"msync not implemented\"));\n+}"}]}