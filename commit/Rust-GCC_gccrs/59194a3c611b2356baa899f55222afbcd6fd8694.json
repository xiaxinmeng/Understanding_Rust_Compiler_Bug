{"sha": "59194a3c611b2356baa899f55222afbcd6fd8694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxOTRhM2M2MTFiMjM1NmJhYTg5OWY1NTIyMmFmYmNkNmZkODY5NA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-07-18T07:56:37Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-07-18T07:56:37Z"}, "message": "* doc/invoke.texi (ARM Options): Document -munaligned-access.\n\nFrom-SVN: r189604", "tree": {"sha": "9d8f0b28fcee69c10ba2238c30ae547be710e149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8f0b28fcee69c10ba2238c30ae547be710e149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59194a3c611b2356baa899f55222afbcd6fd8694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59194a3c611b2356baa899f55222afbcd6fd8694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59194a3c611b2356baa899f55222afbcd6fd8694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59194a3c611b2356baa899f55222afbcd6fd8694/comments", "author": null, "committer": null, "parents": [{"sha": "ee04b091074db255f327f2f48831383e05baa16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee04b091074db255f327f2f48831383e05baa16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee04b091074db255f327f2f48831383e05baa16d"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "cb7ea3db3c5579970589772510c2570af398bafe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59194a3c611b2356baa899f55222afbcd6fd8694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59194a3c611b2356baa899f55222afbcd6fd8694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59194a3c611b2356baa899f55222afbcd6fd8694", "patch": "@@ -1,3 +1,7 @@\n+2012-07-18  Nick Clifton  <nickc@redhat.com>\n+\n+\t* doc/invoke.texi (ARM Options): Document -munaligned-access.\n+\n 2012-07-18  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (mulsidi3, umulsidi3): Remove constraints in\n@@ -12,7 +16,7 @@\n \tPR target/33135\n \t* config/sh/sh.opt (mieee): Use Var instead of Mask.  Correct\n \tdescription.\n-\t* config/sh/sh.c (sh_option_override): Do not change \n+\t* config/sh/sh.c (sh_option_override): Do not change\n \tflag_finite_math_only.  Set TARGET_IEEE to complement of\n \tflag_finite_math_only.\n \t* doc/invoke.texi (SH options): Add mno-ieee.  Correct description"}, {"sha": "bbd99b7d4888edfab8429dae30d16856ceb877dd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59194a3c611b2356baa899f55222afbcd6fd8694/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59194a3c611b2356baa899f55222afbcd6fd8694/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=59194a3c611b2356baa899f55222afbcd6fd8694", "patch": "@@ -497,7 +497,8 @@ Objective-C and Objective-C++ Dialects}.\n -mcaller-super-interworking  -mcallee-super-interworking @gol\n -mtp=@var{name} -mtls-dialect=@var{dialect} @gol\n -mword-relocations @gol\n--mfix-cortex-m3-ldrd}\n+-mfix-cortex-m3-ldrd @gol\n+-munaligned-access}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n@@ -11049,6 +11050,23 @@ with overlapping destination and base registers are used.  This option avoids\n generating these instructions.  This option is enabled by default when\n @option{-mcpu=cortex-m3} is specified.\n \n+@item -munaligned-access\n+@itemx -mno-unaligned-access\n+@opindex munaligned-access\n+@opindex mno-unaligned-access\n+Enables (or disables) reading and writing of 16- and 32- bit values\n+from addresses that are not 16- or 32- bit aligned.  By default\n+unaligned access is disabled for all pre-ARMv6 and all ARMv6-M\n+architectures, and enabled for all other architectures.  If unaligned\n+access is not enabled then words in packed data structures will be\n+accessed a byte at a time.\n+\n+The ARM attribute @code{Tag_CPU_unaligned_access} will be set in the\n+generated object file to either true or false, depending upon the\n+setting of this option.  If unaligned access is enabled then the\n+preprocessor symbol @code{__ARM_FEATURE_UNALIGNED} will also be\n+defined.\n+\n @end table\n \n @node AVR Options"}]}