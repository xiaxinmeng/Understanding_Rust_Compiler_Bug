{"sha": "303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZjYzOTBkNmU2YmJkZmM2NzRhMjg4MjlmODhjOGY2YzJmYzgzMg==", "commit": {"author": {"name": "Mostafa Hagog", "email": "mustafa@il.ibm.com", "date": "2005-04-12T12:23:49Z"}, "committer": {"name": "Mostafa Hagog", "email": "hagog@gcc.gnu.org", "date": "2005-04-12T12:23:49Z"}, "message": "> 2005-04-12 Mostafa Hagog <mustafa@il.ibm.com> > > * postreload-gcse.c...\n\n> 2005-04-12 Mostafa Hagog <mustafa@il.ibm.com>\n>\n>       * postreload-gcse.c (eliminate_partially_redundant_load): Don't\n>       split critical edges when not possible/profitable.\n\nFrom-SVN: r98019", "tree": {"sha": "2bb05011b2f7bfaca692b1522cbe6ae864817197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb05011b2f7bfaca692b1522cbe6ae864817197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303f6390d6e6bbdfc674a28829f88c8f6c2fc832/comments", "author": null, "committer": null, "parents": [{"sha": "a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d1d98047f0fdc4beb0cedaf5f062db87a09782"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "3ab942eec92f3d35790030714188f86ca4698ad9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f6390d6e6bbdfc674a28829f88c8f6c2fc832/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f6390d6e6bbdfc674a28829f88c8f6c2fc832/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "patch": "@@ -1,3 +1,8 @@\n+2005-04-12 Mostafa Hagog <mustafa@il.ibm.com>\n+\n+\t* postreload-gcse.c (eliminate_partially_redundant_load): Don't\n+\tsplit critical edges when not possible/profitable.\n+\n 2005-04-12  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/ns32k/ns32k.h (target_flags, MASK_32081, MASK_RTD)"}, {"sha": "daacb538b62e90f34b5bef1f831b39ac5cc8e24c", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303f6390d6e6bbdfc674a28829f88c8f6c2fc832/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303f6390d6e6bbdfc674a28829f88c8f6c2fc832/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=303f6390d6e6bbdfc674a28829f88c8f6c2fc832", "patch": "@@ -1008,6 +1008,7 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n   gcov_type ok_count = 0; /* Redundant load execution count.  */\n   gcov_type critical_count = 0; /* Execution count of critical edges.  */\n   edge_iterator ei;\n+  bool critical_edge_split = false;\n \n   /* The execution count of the loads to be added to make the\n      load fully redundant.  */\n@@ -1028,6 +1029,7 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n       rtx next_pred_bb_end;\n \n       avail_insn = NULL_RTX;\n+      avail_reg = NULL_RTX;\n       pred_bb = pred->src;\n       next_pred_bb_end = NEXT_INSN (BB_END (pred_bb));\n       for (a_occr = get_bb_avail_insn (pred_bb, expr->avail_occr); a_occr;\n@@ -1064,6 +1066,15 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n \t{\n \t  npred_ok++;\n \t  ok_count += pred->count;\n+\t  if (! set_noop_p (PATTERN (gen_move_insn (copy_rtx (dest),\n+\t\t\t\t\t\t    copy_rtx (avail_reg)))))\n+\t    {\n+\t      /* Check if there is going to be a split.  */\n+\t      if (EDGE_CRITICAL_P (pred))\n+\t\tcritical_edge_split = true;\n+\t    }\n+\t  else /* Its a dead move no need to generate.  */\n+\t    continue;\n \t  occr = (struct unoccr *) obstack_alloc (&unoccr_obstack,\n \t\t\t\t\t\t  sizeof (struct occr));\n \t  occr->insn = avail_insn;\n@@ -1075,6 +1086,9 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n \t}\n       else\n \t{\n+\t  /* Adding a load on a critical edge will cuase a split.  */\n+\t  if (EDGE_CRITICAL_P (pred))\n+\t    critical_edge_split = true;\n \t  not_ok_count += pred->count;\n \t  unoccr = (struct unoccr *) obstack_alloc (&unoccr_obstack,\n \t\t\t\t\t\t    sizeof (struct unoccr));\n@@ -1090,7 +1104,12 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n   if (/* No load can be replaced by copy.  */\n       npred_ok == 0\n       /* Prevent exploding the code.  */ \n-      || (optimize_size && npred_ok > 1))\n+      || (optimize_size && npred_ok > 1)\n+      /* If we don't have profile information we cannot tell if splitting \n+         a critical edge is profitable or not so don't do it.  */\n+      || ((! profile_info || ! flag_branch_probabilities\n+\t   || targetm.cannot_modify_jumps_p ())\n+\t  && critical_edge_split))\n     goto cleanup;\n \n   /* Check if it's worth applying the partial redundancy elimination.  */\n@@ -1150,7 +1169,17 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n        a_occr = get_bb_avail_insn (bb, a_occr->next));\n \n   if (!a_occr)\n-    delete_insn (insn);\n+    {\n+      stats.insns_deleted++;\n+\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"deleting insn:\\n\");\n+          print_rtl_single (dump_file, insn);\n+          fprintf (dump_file, \"\\n\");\n+\t}\n+      delete_insn (insn);\n+    }\n   else\n     a_occr->deleted_p = 1;\n \n@@ -1276,9 +1305,6 @@ void\n gcse_after_reload_main (rtx f ATTRIBUTE_UNUSED)\n {\n \n-  if (targetm.cannot_modify_jumps_p ())\n-    return;\n-\n   memset (&stats, 0, sizeof (stats));\n \n   /* Allocate ememory for this pass."}]}