{"sha": "8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3M2U2MTQwZDg3NmM2YWU4ZTFkNjdiYjRkY2QyZTQ3Yzc5MTRlYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-07-31T16:47:39Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-07-31T16:47:39Z"}, "message": "PR tree-optimization/86741 - ICE in -Warray-bounds indexing into an object of incomplete type\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86741\n\t* tree-vrp.c (vrp_prop::check_mem_ref): Avoid incomplete types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86741\n\t* gcc.dg/Warray-bounds-33.c: New test.\n\nFrom-SVN: r263166", "tree": {"sha": "01608338e335ffb796c5c8b825b244aafb00c554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01608338e335ffb796c5c8b825b244aafb00c554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "bcaa74cfbd6462d6c1ccbb93c2344209fb43d04e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "patch": "@@ -1,3 +1,8 @@\n+2018-07-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86741\n+\t* tree-vrp.c (vrp_prop::check_mem_ref): Avoid incomplete types.\n+\n 2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_setmem): Make the unrolling to"}, {"sha": "a6a13b3cba9c68c21f8e9542c5aacd05bee5a75b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "patch": "@@ -1,3 +1,8 @@\n+2018-07-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86741\n+\t* gcc.dg/Warray-bounds-33.c: New test.\n+\n 2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/memset-1.c: Improve testcase."}, {"sha": "28f14b4722cb6a5dcf5e80c61860ea38f2653f5d", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-33.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-33.c?ref=8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/86741 - ICE in -Warray-bounds indexing into\n+   an object of incomplete type\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" }  */\n+\n+struct S\n+{\n+  int s;\n+};\n+\n+void f (void);\n+\n+void test_void (void)\n+{\n+  extern void v;\n+  struct S *b = (struct S*)&v;\n+  if (b->s)\n+    f ();\n+}\n+\n+void test_incomplete_enum (void)\n+{\n+  extern enum E e;\n+  struct S *b = (struct S*)&e;\n+  if (b->s)\n+    f ();\n+}\n+\n+void test_func (void)\n+{\n+  struct S *b = (struct S*)&f;\n+  if (b->s)\n+    f ();\n+}\n+\n+/* { dg-prune-output \"taking address of expression of type .void.\" } */"}, {"sha": "1944ae4f4db6b76c78035843b97f8757f8249082", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "patch": "@@ -5048,9 +5048,12 @@ vrp_prop::check_mem_ref (location_t location, tree ref, bool ignore_off_by_one)\n      a reference/subscript via a pointer to an object that is not\n      an element of an array.  References to members of structs and\n      unions are excluded because MEM_REF doesn't make it possible\n-     to identify the member where the reference originated.  */\n+     to identify the member where the reference originated.\n+     Incomplete types are excluded as well because their size is\n+     not known.  */\n   tree reftype = TREE_TYPE (arg);\n   if (POINTER_TYPE_P (reftype)\n+      || !COMPLETE_TYPE_P (reftype)\n       || RECORD_OR_UNION_TYPE_P (reftype))\n     return;\n "}]}