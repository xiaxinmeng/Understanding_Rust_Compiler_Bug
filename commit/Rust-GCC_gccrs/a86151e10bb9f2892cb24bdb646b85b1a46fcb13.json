{"sha": "a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2MTUxZTEwYmI5ZjI4OTJjYjI0YmRiNjQ2Yjg1YjFhNDZmY2IxMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-19T02:33:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-19T02:33:21Z"}, "message": "res_mng: Remove.\n\n2006-09-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/regression/res_mng: Remove.\n\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.cc: Merge..\n\t* testsuite/util/regression/res_mng/forced_exception.hpp: Merge...\n\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp: Merge..\n\t* testsuite/util/regression/res_mng/dbg_ex_allocator.hpp: Merge..\n\t* testsuite/util/testsuite_allocator.h (throw_allocator): Merge...\n\t* include/ext/throw_allocator.h (throw_allocator): ... into this.\n\t* src/throw_allocator.cc: ...and this.\n\t* include/Makefile.am (ext_headers): Add.\n\t* include/Makefile.in: Regenerate.\t\n\t* src/Makefile.am (sources): New.\n\t* src/Makefile.in: Regenerate.\n\t* testsuite/lib/libstdc++.exp: Subtract dbg_ex_allocator_base.cc.\n\n\t* include/ext/pb_ds/detail/map_debug_base.hpp: Adjust\n\tincludes, names, and namespaces.\n\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\terase_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\tinsert_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\tmodify_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\tsplit_join_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\toperator_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\tcontainer_rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/\n\tsubscript_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/\n\toperator_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/erase_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/\n\tconstructor_destructor_fn_imps.hpp\n\t* testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/\n\tsplit_join_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/\n\tcontainer_rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/priority_queue/common_type.hpp: Same.\n\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n\t* testsuite/util/regression/basic_type.hpp: Same.\n\t* testsuite/util/rng/twister_rand_gen.cc: Tweak.\n\nFrom-SVN: r117050", "tree": {"sha": "d057a23b933b7403658f92f0655cb0ce31fadbb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d057a23b933b7403658f92f0655cb0ce31fadbb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/comments", "author": null, "committer": null, "parents": [{"sha": "2fb31455672e34b697ca5b03622be6d59a7baa4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb31455672e34b697ca5b03622be6d59a7baa4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb31455672e34b697ca5b03622be6d59a7baa4a"}], "stats": {"total": 1268, "additions": 518, "deletions": 750}, "files": [{"sha": "d0c8d63a5b50883ecffc247595736c071b814f11", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -1,3 +1,53 @@\n+2006-09-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/regression/res_mng: Remove.\n+\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.cc: Merge..\n+\t* testsuite/util/regression/res_mng/forced_exception.hpp: Merge...\n+\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp: Merge..\n+\t* testsuite/util/regression/res_mng/dbg_ex_allocator.hpp: Merge..\n+\t* testsuite/util/testsuite_allocator.h (throw_allocator): Merge...\n+\t* include/ext/throw_allocator.h (throw_allocator): ... into this.\n+\t* src/throw_allocator.cc: ...and this.\n+\t* include/Makefile.am (ext_headers): Add.\n+\t* include/Makefile.in: Regenerate.\t\n+\t* src/Makefile.am (sources): New.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/lib/libstdc++.exp: Subtract dbg_ex_allocator_base.cc.\n+\n+\t* include/ext/pb_ds/detail/map_debug_base.hpp: Adjust\n+\tincludes, names, and namespaces.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\terase_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\tinsert_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\tmodify_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\toperator_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\tcontainer_rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\tsubscript_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\toperator_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/erase_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\tconstructor_destructor_fn_imps.hpp\n+\t* testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/\n+\tcontainer_rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/priority_queue/common_type.hpp: Same.\n+\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n+\t* testsuite/util/regression/basic_type.hpp: Same.\n+\t* testsuite/util/rng/twister_rand_gen.cc: Tweak.\n+\t\n 2006-09-18  Tom Tromey  <tromey@redhat.com>\n \n \t* configure: Rebuilt."}, {"sha": "7c941f7d923c0e1ac0f59a37c0e8bac6e1e91073", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -552,6 +552,7 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/throw_allocator.h \\\n \t${ext_srcdir}/typelist.h \\\n \t${ext_srcdir}/type_traits.h \\\n \t${ext_srcdir}/rc_string_base.h \\"}, {"sha": "eef91ddaa024e919a1c444aeedd66d1a9a679471", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -773,6 +773,7 @@ ext_headers = \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/throw_allocator.h \\\n \t${ext_srcdir}/typelist.h \\\n \t${ext_srcdir}/type_traits.h \\\n \t${ext_srcdir}/rc_string_base.h \\"}, {"sha": "d31a0c2699c0936829c71e8097639259bfea4557", "filename": "libstdc++-v3/include/ext/pb_ds/detail/map_debug_base.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -51,7 +51,7 @@\n \n #include <list>\n #include <utility>\n-#include <regression/res_mng/dbg_ex_allocator.hpp>\n+#include <ext/throw_allocator.h>\n #include <debug/debug.h>\n \n namespace pb_ds\n@@ -151,7 +151,7 @@ namespace pb_ds\n     insert_new(const_key_reference r_key)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      pb_ds::test::dbg_ex_allocator<char> alloc;\n+      __gnu_cxx::throw_allocator<char> alloc;\n       const double orig_throw_prob = alloc.get_throw_prob();\n       alloc.set_throw_prob(0);\n       if (find(r_key) != m_key_set.end())\n@@ -310,7 +310,7 @@ namespace pb_ds\n     PB_DS_CLASS_C_DEC::\n     split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n     {\n-      pb_ds::test::dbg_ex_allocator<char> alloc;\n+      __gnu_cxx::throw_allocator<char> alloc;\n       const double orig_throw_prob = alloc.get_throw_prob();\n       alloc.set_throw_prob(0);\n       other.clear();\n@@ -331,7 +331,7 @@ namespace pb_ds\n     PB_DS_CLASS_C_DEC::\n     join(PB_DS_CLASS_C_DEC& other)\n     {\n-      pb_ds::test::dbg_ex_allocator<char> alloc;\n+      __gnu_cxx::throw_allocator<char> alloc;\n       const double orig_throw_prob = alloc.get_throw_prob();\n       alloc.set_throw_prob(0);\n       key_set_iterator it = other.m_key_set.begin();"}, {"sha": "38f6afb33a8a2f96b32cd469ac4877b410314e83", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "added", "additions": 384, "deletions": 0, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -0,0 +1,384 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 2, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+// MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free\n+// software library without restriction.  Specifically, if other files\n+// instantiate templates or use macros or inline functions from this\n+// file, or you compile this file and link it with other files to\n+// produce an executable, this file does not by itself cause the\n+// resulting executable to be covered by the GNU General Public\n+// License.  This exception does not however invalidate any other\n+// reasons why the executable file might be covered by the GNU General\n+// Public License.\n+\n+// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n+\n+// Permission to use, copy, modify, sell, and distribute this software\n+// is hereby granted without fee, provided that the above copyright\n+// notice appears in all copies, and that both that copyright notice\n+// and this permission notice appear in supporting documentation. None\n+// of the above authors, nor IBM Haifa Research Laboratories, make any\n+// representation about the suitability of this software for any\n+// purpose. It is provided \"as is\" without express or implied\n+// warranty.\n+\n+/**\n+ * @file throw_allocator.h Contains an exception-throwing allocator\n+ * useful for testing exception safety. In addition, allocation\n+ * addresses are stored and sanity checked.\n+ */\n+\n+#ifndef _THROW_ALLOCATOR_H\n+#define _THROW_ALLOCATOR_H 1\n+\n+#include <cmath>\n+#include <map>\n+#include <set>\n+#include <string>\n+#include <ostream>\n+#include <stdexcept>\n+#include <utility>\n+#include <tr1/random>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  class twister_rand_gen\n+  {\n+  public:\n+    twister_rand_gen(unsigned int seed = \n+\t\t     static_cast<unsigned int>(std::time(0)));\n+    \n+    void\n+    init(unsigned int);\n+    \n+    double\n+    get_prob();\n+    \n+  private:\n+    std::tr1::mt19937 _M_generator;\n+  };\n+\n+\n+  struct forced_exception_error : public std::exception\n+  { };\n+\n+  class throw_allocator_base\n+  {\n+  public:\n+    void\n+    init(unsigned long seed);\n+\n+    static void\n+    set_throw_prob(double throw_prob);\n+\n+    static double\n+    get_throw_prob();\n+\n+    static void\n+    set_label(size_t l);\n+\n+    static bool\n+    empty();\n+\n+    struct group_throw_prob_adjustor\n+    {\n+      group_throw_prob_adjustor(size_t size) \n+      : _M_throw_prob_orig(_S_throw_prob)\n+      {\n+\t_S_throw_prob =\n+\t  1 - ::pow(double(1 - _S_throw_prob), double(0.5 / (size + 1)));\n+      }\n+\n+      ~group_throw_prob_adjustor()\n+      { _S_throw_prob = _M_throw_prob_orig; }\n+\n+    private:\n+      const double _M_throw_prob_orig;\n+    };\n+\n+    struct zero_throw_prob_adjustor\n+    {\n+      zero_throw_prob_adjustor() : _M_throw_prob_orig(_S_throw_prob)\n+      { _S_throw_prob = 0; }\n+\n+      ~zero_throw_prob_adjustor()\n+      { _S_throw_prob = _M_throw_prob_orig; }\n+\n+    private:\n+      const double _M_throw_prob_orig;\n+    };\n+\n+  protected:\n+    static void\n+    insert(void*, size_t);\n+\n+    static void\n+    erase(void*, size_t);\n+\n+    static void\n+    throw_conditionally();\n+\n+    static void\n+    assert_allocatod(const void*, size_t);\n+\n+    static void\n+    check_allocated(void*, size_t);\n+\n+  private:\n+    typedef std::pair<size_t, size_t> \t\talloc_data_type;\n+    typedef std::map<void*, alloc_data_type> \tmap_type;\n+    typedef map_type::value_type \t\tentry_type;\n+    typedef map_type::const_iterator \t\tconst_iterator;\n+    typedef map_type::const_reference \t\tconst_reference;\n+\n+    friend std::ostream& \n+    operator<<(std::ostream&, const throw_allocator_base&);\n+\n+    static entry_type\n+    make_entry(void*, size_t);\n+\n+    static void\n+    print_to_string(std::string&);\n+\n+    static void\n+    print_to_string(std::string&, const_reference);\n+\n+    static twister_rand_gen \t_S_g;\n+    static map_type \t\t_S_map;\n+    static double \t\t_S_throw_prob;\n+    static size_t \t\t_S_label;\n+  };\n+\n+\n+  template<typename T>\n+    class throw_allocator : public throw_allocator_base\n+    {\n+    public:\n+      typedef size_t \t\tsize_type;\n+      typedef ptrdiff_t \tdifference_type;\n+      typedef T* \t\tpointer;\n+      typedef const T* \t\tconst_pointer;\n+      typedef T& \t\treference;\n+      typedef const T& \t\tconst_reference;\n+      typedef T \t\tvalue_type;\n+\n+      template<typename U>\n+      struct rebind\n+      {\n+        typedef throw_allocator<U> other;\n+      };\n+\n+      throw_allocator() throw() { }\n+\n+      throw_allocator(const throw_allocator<T>&) throw() { }\n+\n+      template <class U>\n+      throw_allocator(const throw_allocator<U>&) throw() { }\n+\n+      ~throw_allocator() throw() { }\n+\n+      size_type\n+      max_size() const throw()\n+      { return std::allocator<T>().max_size(); }\n+\n+      pointer\n+      allocate(size_type num, std::allocator<void>::const_pointer hint = 0)\n+      {\n+\tthrow_conditionally();\n+\tT* const a = std::allocator<T>().allocate(num, hint);\n+\tinsert(a, sizeof(T) * num);\n+\treturn a;\n+      }\n+\n+      void\n+      construct(pointer p, const T& val)\n+      { return std::allocator<T>().construct(p, val); }\n+\n+      void\n+      destroy(pointer p)\n+      {\tstd::allocator<T>().destroy(p); }\n+\n+      void\n+      deallocate(pointer p, size_type num)\n+      {\n+\terase(p, sizeof(T) * num);\n+\tstd::allocator<T>().deallocate(p, num);\n+      }\n+\n+      void\n+      check_allocated(pointer p, size_type num)\n+      { throw_allocator_base::check_allocated(p, sizeof(T) * num); }\n+    };\n+\n+  template<typename T>\n+    inline bool\n+    operator==(const throw_allocator<T>&, const throw_allocator<T>&)\n+    { return true; }\n+\n+  template<typename T>\n+    inline bool\n+    operator!=(const throw_allocator<T>&, const throw_allocator<T>&)\n+    { return false; }\n+\n+  std::ostream& \n+  operator<<(std::ostream& os, const throw_allocator_base& alloc)\n+  {\n+    std::string error;\n+    throw_allocator_base::print_to_string(error);\n+    os << error;\n+    return os;\n+  }\n+\n+  // XXX Should be in .cc.\n+  twister_rand_gen::\n+  twister_rand_gen(unsigned int seed) : _M_generator(seed)  { }\n+\n+  void\n+  twister_rand_gen::\n+  init(unsigned int seed)\n+  { _M_generator.seed(seed); }\n+\n+  double\n+  twister_rand_gen::\n+  get_prob()\n+  {\n+    const double eng_min = _M_generator.min();\n+    const double eng_range =\n+      static_cast<const double>(_M_generator.max() - eng_min);\n+\n+    const double eng_res =\n+      static_cast<const double>(_M_generator() - eng_min);\n+\n+    const double ret = eng_res / eng_range;\n+    _GLIBCXX_DEBUG_ASSERT(ret >= 0 && ret <= 1);\n+    return ret;\n+  }\n+\n+  twister_rand_gen throw_allocator_base::_S_g;\n+\n+  throw_allocator_base::map_type\n+  throw_allocator_base::_S_map;\n+\n+  double throw_allocator_base::_S_throw_prob;\n+\n+  size_t throw_allocator_base::_S_label = 0;\n+\n+  throw_allocator_base::entry_type\n+  throw_allocator_base::make_entry(void* p, size_t size)\n+  { return std::make_pair(p, alloc_data_type(_S_label, size)); }\n+\n+  void\n+  throw_allocator_base::init(unsigned long seed)\n+  { _S_g.init(seed); }\n+\n+  void\n+  throw_allocator_base::set_throw_prob(double throw_prob)\n+  { _S_throw_prob = throw_prob; }\n+\n+  double\n+  throw_allocator_base::get_throw_prob()\n+  { return _S_throw_prob; }\n+\n+  void\n+  throw_allocator_base::set_label(size_t l)\n+  { _S_label = l; }\n+\n+  void\n+  throw_allocator_base::insert(void* p, size_t size)\n+  {\n+    const_iterator found_it = _S_map.find(p);\n+    if (found_it != _S_map.end())\n+      {\n+\tstd::string error(\"throw_allocator_base::insert\");\n+\terror += \"double insert!\";\n+\terror += '\\n';\n+\tprint_to_string(error, make_entry(p, size));\n+\tprint_to_string(error, *found_it);\n+\tthrow std::logic_error(error);\n+      }\n+    _S_map.insert(make_entry(p, size));\n+  }\n+\n+  bool\n+  throw_allocator_base::empty()\n+  { return _S_map.empty(); }\n+\n+  void\n+  throw_allocator_base::erase(void* p, size_t size)\n+  {\n+    check_allocated(p, size);\n+    _S_map.erase(p);\n+  }\n+\n+  void\n+  throw_allocator_base::check_allocated(void* p, size_t size)\n+  {\n+    const_iterator found_it = _S_map.find(p);\n+    if (found_it == _S_map.end())\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated\");\n+\terror += \"null erase!\";\n+\terror += '\\n';\n+\tprint_to_string(error, make_entry(p, size));\n+\tthrow std::logic_error(error);\n+      }\n+\n+    if (found_it->second.second != size)\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated\");\n+\terror += \"wrong-size erase!\";\n+\terror += '\\n';\n+\tprint_to_string(error, make_entry(p, size));\n+\tprint_to_string(error, *found_it);\n+\tthrow std::logic_error(error);\n+      }\n+  }\n+\n+  void\n+  throw_allocator_base::throw_conditionally()\n+  {\n+    if (_S_g.get_prob() < _S_throw_prob)\n+      throw forced_exception_error();\n+  }\n+\n+  void\n+  throw_allocator_base::print_to_string(std::string& s)\n+  {\n+    const_iterator it = throw_allocator_base::_S_map.begin();\n+    const_iterator end_it = throw_allocator_base::_S_map.end();\n+    for (; it != end_it; ++it)\n+      print_to_string(s, *it);\n+    s += '\\n';\n+  }\n+\n+  void\n+  throw_allocator_base::print_to_string(std::string& s, const_reference ref)\n+  {\n+    s += reinterpret_cast<const unsigned long>(ref.first);\n+    s += \": \";\n+    s += ref.second.first ;\n+    s += \", \";\n+    s += ref.second.second;\n+    s += '\\n';\n+  }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif "}, {"sha": "340f336846dc78238f8b16d6fb1348b3cf37362b", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.cc", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,31 +20,34 @@\n \n #include <list>\n #include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <ext/throw_allocator.h>\n \n // libstdc++/25288\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::throw_allocator<int> my_alloc;\n-  typedef std::list<int, my_alloc > my_list;\n+  typedef int value_type;\n+  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n \n   for (int j = 0; j < 10; ++j)\n     for (int i = 0; i < 10; ++i)\n       {\n-\tmy_alloc alloc1(j + i);\n-\tmy_list list1(alloc1);\n+\tallocator_type alloc1;\n+\tallocator_type::zero_throw_prob_adjustor adjust1;\n+\tlist_type list1(alloc1);\n \t\n \tfor (int k = 0; k < j; ++k)\n-\t  list1.push_back(-(k + 1));\n+\t  list1.push_back(value_type(-(k + 1)));\n       \n \ttry\n \t  {\n+\t    alloc1.set_throw_prob(1);\n \t    list1.insert(list1.begin(), 10, 99);\n \t    VERIFY( false );\n \t  }\n-\tcatch (std::bad_alloc&)\n+\tcatch (__gnu_cxx::forced_exception_error&)\n \t  {\n \t    VERIFY( true );\n \t  }\n@@ -53,12 +56,13 @@ void test01()\n \t    VERIFY( false );\n \t  }\n \t\n-\tVERIFY( list1.size() == my_list::size_type(j) );\n+\tVERIFY( list1.size() == list_type::size_type(j) );\n \tVERIFY( list1.size() == 0 || list1.back() == -j );\n \tVERIFY( list1.size() == 0 || list1.front() == -1 );\n \n-\tmy_alloc alloc2(j + i);\n-\tmy_list list2(alloc2);\n+\tallocator_type alloc2;\n+\tallocator_type::zero_throw_prob_adjustor adjust2;\n+\tlist_type list2(alloc2);\n \t\n \tconst int data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n \t\n@@ -67,10 +71,11 @@ void test01()\n \t\n \ttry\n \t  {\n+\t    alloc2.set_throw_prob(1);\n \t    list2.insert(list2.begin(), data, data + 10);\n \t    VERIFY( false );\n \t  }\n-\tcatch (std::bad_alloc&)\n+\tcatch (__gnu_cxx::forced_exception_error&)\n \t  {\n \t    VERIFY( true );\n \t  }\n@@ -79,7 +84,7 @@ void test01()\n \t    VERIFY( false );\n \t  }\n \n-\tVERIFY( list2.size() == my_list::size_type(j) );\n+\tVERIFY( list2.size() == list_type::size_type(j) );\n \tVERIFY( list2.size() == 0 || list2.back() == -j );\n \tVERIFY( list2.size() == 0 || list2.front() == -1 );\n       }"}, {"sha": "0d059cf1d767ceb326eb64a680e4433b63700ce7", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -411,8 +411,7 @@ proc v3-build_support { } {\n     set source_files [list testsuite_abi.cc testsuite_allocator.cc \\\n \t\t\t  testsuite_character.cc testsuite_hooks.cc \\\n \t       \t rng/twister_rand_gen.cc io/verified_cmd_line_input.cc \\\n-       \t io/prog_bar.cc regression/res_mng/dbg_ex_allocator_base.cc \\\n-\t     performance/time/elapsed_timer.cc ]\n+\t\t\t  io/prog_bar.cc performance/time/elapsed_timer.cc ]\n     foreach f $source_files {\n \tset obj [file rootname $f].o\n \tset object_file [file tail $obj]"}, {"sha": "7567c5f105eadb20485bb67049a1de975d50e3cb", "filename": "libstdc++-v3/testsuite/util/regression/assoc/common_type.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -54,7 +54,7 @@ namespace pb_ds\n {\n namespace test\n {\n-  typedef dbg_ex_allocator<basic_type> alloc_type;\n+  typedef __gnu_cxx::throw_allocator<basic_type> alloc_type;\n \n   struct hash\n   {"}, {"sha": "279c28809e47d66fba23a68898d91e21f03693cf", "filename": "libstdc++-v3/testsuite/util/regression/basic_type.hpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -48,14 +48,15 @@\n #define PB_DS_BASIC_TYPE_HPP\n \n #include <string>\n-#include <regression/res_mng/dbg_ex_allocator.hpp>\n+#include <ext/throw_allocator.h>\n \n namespace pb_ds\n {\n namespace test\n {\n #define PB_DS_BASE_C_DEC \\\n-  std::basic_string<char, std::char_traits<char>, dbg_ex_allocator<char> >\n+  std::basic_string<char, std::char_traits<char>, \\\n+\t\t    __gnu_cxx::throw_allocator<char> >\n \n   struct basic_type : public PB_DS_BASE_C_DEC\n   {"}, {"sha": "ce5a9e81a01e3d3418fc31547ab057ac0eed2965", "filename": "libstdc++-v3/testsuite/util/regression/priority_queue/common_type.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fpriority_queue%2Fcommon_type.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -54,7 +54,7 @@ namespace pb_ds\n {\n namespace test\n {\n-  typedef dbg_ex_allocator<basic_type> alloc_type;\n+  typedef __gnu_cxx::throw_allocator<basic_type> alloc_type;\n \n   typedef pq_common_types<basic_type, std::less<basic_type>, alloc_type>::regression_tl pq_tl_t;\n "}, {"sha": "d53ce348e6567386afdabd09078de24936cd8a48", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/container_rand_regression_test.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -156,7 +156,7 @@ namespace detail\n \tother_op\n       };\n \n-    typedef dbg_ex_allocator<char> alloc_t;\n+    typedef __gnu_cxx::throw_allocator<char> alloc_t;\n \n   private:\n "}, {"sha": "00f74bbb4a4a84533e4d138ccd1ce33b9e6b55e2", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -81,7 +81,7 @@ default_constructor()\n     {\n       m_p_c = new Cntnr;\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -136,7 +136,7 @@ copy_constructor()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -172,7 +172,7 @@ assignment_operator()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -270,7 +270,7 @@ it_constructor_imp(pb_ds::cc_hash_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -384,7 +384,7 @@ it_constructor_imp(pb_ds::gp_hash_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -429,7 +429,7 @@ it_constructor_imp(pb_ds::tree_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -462,7 +462,7 @@ it_constructor_imp(pb_ds::list_update_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -507,7 +507,7 @@ it_constructor_imp(pb_ds::pat_trie_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }"}, {"sha": "0622d9eeef9e95e11b74caea5832f3d49b88dae8", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/erase_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Ferase_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -89,7 +89,7 @@ erase()\n \t\t\t    m_p_c,\n \t\t\t    & m_native_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n \n@@ -141,7 +141,7 @@ erase_if()\n \t\t\t      m_p_c,\n \t\t\t      & m_native_c);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n \n@@ -229,7 +229,7 @@ erase_it_imp(pb_ds::detail::true_type)\n         if (range_guarantee)\n \t  PB_DS_THROW_IF_FAILED(                next_ers_it == next_it,  \"\",  m_p_c, & m_native_c);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n \n@@ -303,7 +303,7 @@ erase_rev_it_imp(pb_ds::detail::true_type)\n         if (native_it != m_native_c.end())\n \t  m_native_c.erase(native_it);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n "}, {"sha": "94e74ce1005dd626bf06dde2c7056db30a3bd84c", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -73,7 +73,7 @@ insert()\n \t  }\n         m_native_c.insert(test_traits::native_value(v));\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n       }"}, {"sha": "e6298a818df0fa56603e922b4217fde6b60dac31", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/operator_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -52,15 +52,12 @@ operator()()\n   xml_result_set_regression_formatter* p_fmt = NULL;\n \n   if (m_disp)\n-    p_fmt = new xml_result_set_regression_formatter(\n-\t\t\t\t\t\t    string_form<Cntnr>::name(),\n+    p_fmt = new xml_result_set_regression_formatter(string_form<Cntnr>::name(),\n \t\t\t\t\t\t    string_form<Cntnr>::desc());\n \n   m_g.init(m_seed);\n   m_alloc.init(m_seed);\n-\n   prog_bar pb(m_n, std::cout, m_disp);\n-\n   m_i = 0;\n \n   try\n@@ -107,7 +104,7 @@ operator()()\n \t\t      PB_DS_RUN_MTHD(subscript)\n                         break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(                            false,       \"\",       m_p_c,      & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                     }\n \t\t  break;\n                 case erase_op:\n@@ -126,7 +123,7 @@ operator()()\n \t\t      PB_DS_RUN_MTHD(erase_rev_it)\n                         break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(                            false,       \"\",       m_p_c,      & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                     }\n \t\t  break;\n                 case clear_op:\n@@ -160,11 +157,11 @@ operator()()\n \t\t      get_set_loads();\n \t\t      break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(                            false,       \"\",       m_p_c,      & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, & m_native_c);\n                     }\n \t\t  break;\n                 default:\n-\t\t  PB_DS_THROW_IF_FAILED(                        false,   \"\",   m_p_c,  & m_native_c);\n+\t\t  PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, & m_native_c);\n                 };\n             }\n \n@@ -173,29 +170,24 @@ operator()()\n     }\n   catch(...)\n     {\n-      std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) <<\n-\tstd::endl;\n-\n+      std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) \n+\t\t<< std::endl;\n       delete m_p_c;\n-\n       throw;\n     }\n \n   delete m_p_c;\n \n-  if (!m_alloc.dbg_ex_allocator<char>::empty())\n+  if (!m_alloc.throw_allocator<char>::empty())\n     {\n       std::cerr << \"detected leaks!\" << std::endl;\n-\n       std::cerr << m_alloc << std::endl;\n-\n-      PB_DS_THROW_IF_FAILED(            false, \"\", m_p_c, & m_native_c);\n+      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n     }\n \n   if (m_disp)\n     {\n       std::cout << std::endl;\n-\n       delete p_fmt;\n     }\n }\n@@ -216,7 +208,7 @@ get_next_op()\n   if (prob < m_ip + m_ep + m_cp)\n     return (clear_op);\n \n-  PB_DS_THROW_IF_FAILED(        prob <= 1, prob, m_p_c,    & m_native_c);\n+  PB_DS_THROW_IF_FAILED(prob <= 1, prob, m_p_c, &m_native_c);\n \n   return (other_op);\n }\n@@ -227,16 +219,12 @@ PB_DS_CLASS_C_DEC::\n get_next_sub_op(size_t max)\n {\n   const double p = m_g.get_prob();\n-\n   const double delta = 1 / static_cast<double>(max);\n-\n   size_t i = 0;\n-\n   while (true)\n     if (p <= (i + 1)*  delta)\n       {\n-\tPB_DS_THROW_IF_FAILED(\n-\t\t\t      i < max,\n+\tPB_DS_THROW_IF_FAILED(i < max,\n \t\t\t      static_cast<unsigned long>(i) << \" \" <<\n \t\t\t      static_cast<unsigned long>(max),\n \t\t\t      m_p_c,"}, {"sha": "073fda5666bcbe448e3dc06d3473e9d5d019218b", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/split_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsplit_join_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -134,7 +134,7 @@ split_join_imp(pb_ds::detail::true_type)\n \n         m_p_c->swap(lhs);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n "}, {"sha": "a2c59e125921fc92ab1fb5f7f292c894a752d59e", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/subscript_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsubscript_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsubscript_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fsubscript_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -82,7 +82,7 @@ subscript_imp(pb_ds::detail::false_type)\n         m_native_c[test_traits::native_value(v).first] =\n \t  test_traits::native_value(v).second;\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n       }\n@@ -114,7 +114,7 @@ subscript_imp(pb_ds::detail::true_type)\n \n         m_native_c.insert(test_traits::native_value(v));\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n       }"}, {"sha": "15ff02bba115630b109f2c708be62e6fd5eb363a", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/container_rand_regression_test.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -149,7 +149,7 @@ namespace pb_ds\n \n \ttypedef basic_type value_type;\n \n-\ttypedef native_priority_queue< std::string, true> native_type;\n+\ttypedef native_priority_queue<std::string, true> native_type;\n \n \tenum op\n \t  {\n@@ -160,9 +160,9 @@ namespace pb_ds\n \t    other_op\n \t  };\n \n-\ttypedef dbg_ex_allocator< char> alloc_t;\n+\ttypedef __gnu_cxx::throw_allocator<char> alloc_t;\n \n-\ttypedef regression_test_traits< Cntnr> test_traits;\n+\ttypedef regression_test_traits<Cntnr> test_traits;\n \n       private:\n "}, {"sha": "87282825f9c2c14ae1f52865da101c587989121a", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fconstructor_destructor_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -82,7 +82,7 @@ default_constructor()\n     {\n       m_p_c = new Cntnr;\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -137,7 +137,7 @@ copy_constructor()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -173,7 +173,7 @@ assignment_operator()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }\n@@ -222,7 +222,7 @@ it_constructor()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n     }"}, {"sha": "82b126a883a4042637b91778da759a91bc8cd2f7", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Ferase_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -66,7 +66,7 @@ pop()\n \t  m_native_c.pop();\n         }\n     }\n-  catch(forced_exception& )\n+  catch(__gnu_cxx::forced_exception_error& )\n     {\n       done = false;\n \n@@ -123,7 +123,7 @@ erase_if()\n \t\t\t      m_p_c,\n \t\t\t      & m_native_c);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n \n@@ -163,7 +163,7 @@ erase_it()\n             m_p_c->erase(it);\n \t  }\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n "}, {"sha": "24dc6499d8131d9c689f87921e0c0bf074ef631a", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Finsert_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -75,7 +75,7 @@ push()\n \n         m_native_c.push(test_traits::native_value(v));\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n       }"}, {"sha": "5e99e09628f3f830ea066a7caad70df7478e73c0", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/modify_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fmodify_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fmodify_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fmodify_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -80,7 +80,7 @@ modify()\n             m_native_c.modify(native_v, new_native_v);\n \t  }\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n "}, {"sha": "3041bda1a7fbd9e64ae80d3146b80def80342b50", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/operator_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -52,25 +52,20 @@ operator()()\n   xml_result_set_regression_formatter* p_fmt = NULL;\n \n   if (m_disp)\n-    p_fmt = new xml_result_set_regression_formatter(\n-\t\t\t\t\t\t    string_form<Cntnr>::name(),\n+    p_fmt = new xml_result_set_regression_formatter(string_form<Cntnr>::name(),\n \t\t\t\t\t\t    string_form<Cntnr>::desc());\n \n   m_g.init(m_seed);\n   m_alloc.init(m_seed);\n-\n   prog_bar pb(m_n, std::cout, m_disp);\n-\n   m_i = 0;\n \n   try\n     {\n       for (m_i = 0; m_i < m_n; ++m_i)\n         {\n \t  PB_DS_TRACE(\"Op #\" << static_cast<unsigned long>(m_i));\n-\n \t  allocator::set_label(m_i);\n-\n \t  switch(m_i)\n             {\n             case 0:\n@@ -110,7 +105,7 @@ operator()()\n \t\t      PB_DS_RUN_MTHD(erase_it)\n                         break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(                            false,       \"\",       m_p_c,      & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                     }\n \t\t  break;\n                 case clear_op:\n@@ -135,42 +130,35 @@ operator()()\n \t\t      PB_DS_RUN_MTHD(split_join)\n                         break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(                            false,       \"\",       m_p_c,      & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                     }\n \t\t  break;\n                 default:\n-\t\t  PB_DS_THROW_IF_FAILED(                        false,   \"\",   m_p_c,  & m_native_c);\n+\t\t  PB_DS_THROW_IF_FAILED(false, \"\", m_p_c,  &m_native_c);\n                 };\n             }\n-\n \t  pb.inc();\n         }\n     }\n   catch(...)\n     {\n-      std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) <<\n-\tstd::endl;\n-\n+      std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) \n+\t\t<< std::endl;\n       delete m_p_c;\n-\n       throw;\n     }\n-\n   delete m_p_c;\n \n-  if (!m_alloc.dbg_ex_allocator<char>::empty())\n+  if (!m_alloc.throw_allocator<char>::empty())\n     {\n       std::cerr << \"detected leaks!\" << std::endl;\n-\n       std::cerr << m_alloc << std::endl;\n-\n-      PB_DS_THROW_IF_FAILED(            false, \"\", m_p_c, & m_native_c);\n+      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n     }\n \n   if (m_disp)\n     {\n       std::cout << std::endl;\n-\n       delete p_fmt;\n     }\n }\n@@ -194,9 +182,8 @@ get_next_op()\n   if (prob < m_ip + m_dp + m_ep + m_cp)\n     return (clear_op);\n \n-  PB_DS_THROW_IF_FAILED(        prob <= 1, prob, m_p_c,    & m_native_c);\n-\n-  return (other_op);\n+  PB_DS_THROW_IF_FAILED(prob <= 1, prob, m_p_c, &m_native_c);\n+  return other_op;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -205,22 +192,17 @@ PB_DS_CLASS_C_DEC::\n get_next_sub_op(size_t max)\n {\n   const double p = m_g.get_prob();\n-\n   const double delta = 1 / static_cast<double>(max);\n-\n   size_t i = 0;\n-\n   while (true)\n     if (p <= (i + 1)*  delta)\n       {\n-\tPB_DS_THROW_IF_FAILED(\n-\t\t\t      i < max,\n+\tPB_DS_THROW_IF_FAILED(i < max,\n \t\t\t      static_cast<unsigned long>(i) << \" \" <<\n \t\t\t      static_cast<unsigned long>(max),\n \t\t\t      m_p_c,\n \t\t\t      & m_native_c);\n-\n-\treturn (i);\n+\treturn i;\n       }\n     else\n       ++i;"}, {"sha": "41c302718fec2ccc9eb7c83abbf43d5b4d1b654d", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/split_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Fsplit_join_fn_imps.hpp?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -105,7 +105,7 @@ split_join()\n \t\t\t      m_p_c,\n \t\t\t      & m_native_c);\n       }\n-    catch(forced_exception& )\n+    catch(__gnu_cxx::forced_exception_error& )\n       {\n         done = false;\n "}, {"sha": "53072db887b0b20163746728772d0617364b97a5", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/dbg_ex_allocator.hpp", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp?ref=2fb31455672e34b697ca5b03622be6d59a7baa4a", "patch": "@@ -1,129 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file dbg_ex_allocator.hpp\n- * Contains a debugging, exception throwing, allocator used for tests.\n- */\n-\n-#ifndef PB_DS_DBG_EX_ALLOCATOR_HPP\n-#define PB_DS_DBG_EX_ALLOCATOR_HPP\n-\n-#include <regression/res_mng/dbg_ex_allocator_base.hpp>\n-\n-namespace pb_ds\n-{\n-  namespace test\n-  {\n-    template<typename T>\n-    class dbg_ex_allocator : public detail::dbg_ex_allocator_base\n-    {\n-    public:\n-      typedef size_t size_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef T* pointer;\n-      typedef const T* const_pointer;\n-      typedef T& reference;\n-      typedef const T& const_reference;\n-      typedef T value_type;\n-\n-      template<typename U>\n-      struct rebind\n-      {\n-        typedef dbg_ex_allocator<U> other;\n-      };\n-\n-      dbg_ex_allocator() throw() { }\n-\n-      dbg_ex_allocator(const dbg_ex_allocator<T>& ) throw() { }\n-\n-      template <class U>\n-      dbg_ex_allocator(const dbg_ex_allocator<U>& ) throw() { }\n-\n-      ~dbg_ex_allocator() throw() { }\n-\n-      size_type\n-      max_size() const throw()\n-      { return std::allocator<T>().max_size(); }\n-\n-      pointer\n-      allocate(size_type num, std::allocator<void>::const_pointer hint = 0);\n-\n-      void\n-      construct(pointer p, const T& r_val)\n-      { return std::allocator<T>().construct(p, r_val); }\n-\n-      void\n-      destroy(pointer p)\n-      {\tstd::allocator<T>().destroy(p); }\n-\n-      void\n-      deallocate(pointer p, size_type num)\n-      {\n-\terase(p, sizeof(T) * num);\n-\tstd::allocator<T>().deallocate(p, num);\n-      }\n-\n-      void\n-      check_allocated(pointer p, size_type num)\n-      { detail::dbg_ex_allocator_base::check_allocated(p, sizeof(T) * num); }\n-    };\n-\n-    template<typename T>\n-    typename dbg_ex_allocator<T>::pointer\n-    dbg_ex_allocator<T>::\n-    allocate(size_type num, std::allocator<void>::const_pointer hint/*= 0*/)\n-    {\n-      cond_throw();\n-      T* const a_t = std::allocator<T>().allocate(num, hint);\n-      insert(a_t, sizeof(T) * num);\n-      return a_t;\n-    }\n-\n-    template<typename T>\n-    inline bool\n-    operator==(const dbg_ex_allocator<T>& , const dbg_ex_allocator<T>& )\n-    { return true; }\n-\n-  } // namespace test\n-} // namespace pb_ds\n-\n-#endif "}, {"sha": "6038ab0c0c9e5032333b2bbe2998363e9af9890b", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/dbg_ex_allocator_base.cc", "status": "removed", "additions": 0, "deletions": 210, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.cc?ref=2fb31455672e34b697ca5b03622be6d59a7baa4a", "patch": "@@ -1,210 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file dbg_ex_allocator_base.cpp\n- * Contains a debugging, exception throwing, allocator used for tests.\n- */\n-\n-#include <util/regression/res_mng/dbg_ex_allocator_base.hpp>\n-\n-namespace pb_ds\n-{\n-\n-  namespace test\n-  {\n-\n-    namespace detail\n-    {\n-\n-      twister_rand_gen dbg_ex_allocator_base::s_g;\n-\n-      dbg_ex_allocator_base::map_t\n-      dbg_ex_allocator_base::s_map;\n-\n-      double dbg_ex_allocator_base::s_throw_prob;\n-\n-      size_t dbg_ex_allocator_base::s_label = 0;\n-\n-      dbg_ex_allocator_base::entry_t\n-      dbg_ex_allocator_base::\n-      make_entry(void* p_r, size_t size)\n-      {\n-\treturn std::make_pair(\n-\t\t\t      p_r,\n-\t\t\t      alloc_data_t(s_label, size));\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      init(unsigned long seed)\n-      {\n-\ts_g.init(seed);\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      set_throw_prob(double throw_prob)\n-      {\n-\ts_throw_prob = throw_prob;\n-      }\n-\n-      double\n-      dbg_ex_allocator_base::\n-      get_throw_prob()\n-      {\n-\treturn (s_throw_prob);\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      set_label(size_t l)\n-      {\n-\ts_label = l;\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      insert(void* p_r, size_t size)\n-      {\n-\tconst_iterator found_it = s_map.find(p_r);\n-\n-\tif (found_it != s_map.end())\n-\t  {\n-\t    std::cerr << \"Double insert! \" << std::endl;\n-\t    print_to_ostream(std::cerr, make_entry(p_r, size));\n-\t    print_to_ostream(std::cerr, * found_it);\n-\n-\t    throw std::logic_error(\"double insert\");\n-\t  }\n-\n-\ts_map.insert(make_entry(p_r, size));\n-      }\n-\n-      bool\n-      dbg_ex_allocator_base::\n-      empty()\n-      {\n-\treturn (s_map.empty());\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      erase(void* p_r, size_t size)\n-      {\n-\tcheck_allocated(p_r, size);\n-\n-\ts_map.erase(p_r);\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      check_allocated(void* p_r, size_t size)\n-      {\n-\tconst_iterator found_it =\n-\t  s_map.find(p_r);\n-\n-\tif (found_it == s_map.end())\n-\t  {\n-\t    std::cerr << \"Null erase! \" << std::endl;\n-\t    print_to_ostream(std::cerr, make_entry(p_r, size));\n-\n-\t    throw std::logic_error(\"null erase\");\n-\t  }\n-\n-\tif (found_it->second.second != size)\n-\t  {\n-\t    std::cerr << \"Wrong-size erase! \" << std::endl;\n-\t    print_to_ostream(std::cerr, make_entry(p_r, size));\n-\t    print_to_ostream(std::cerr, * found_it);\n-\n-\t    throw std::logic_error(\"wrong-size erase\");\n-\t  }\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      cond_throw()\n-      {\n-\tif (s_g.get_prob() < s_throw_prob)\n-\t  throw forced_exception();\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      print_to_ostream(std::ostream& r_os)\n-      {\n-\tconst_iterator it =\n-\t  dbg_ex_allocator_base::s_map.begin();\n-\n-\tconst_iterator end_it =\n-\t  dbg_ex_allocator_base::s_map.end();\n-\n-\tfor (; it != end_it; ++it)\n-\t  print_to_ostream(r_os, * it);\n-\n-\tr_os << std::endl;\n-      }\n-\n-      void\n-      dbg_ex_allocator_base::\n-      print_to_ostream(std::ostream& r_os, const_reference r_entry)\n-      {\n-\tr_os << r_entry.first << \": \";\n-\tr_os << r_entry.second.first << \", \";\n-\tr_os << r_entry.second.second;\n-\n-\tr_os << std::endl;\n-      }\n-\n-      std::ostream& \n-      operator<<(std::ostream& r_os, const dbg_ex_allocator_base& /*r_dbg*/)\n-      {\n-\tdbg_ex_allocator_base::print_to_ostream(r_os);\n-\n-\treturn r_os;\n-      }\n-\n-    } // namespace detail\n-\n-  } // namespace test\n-\n-} // namespace pb_ds"}, {"sha": "9831281e3f113f23e38be6c7f031ad5fb4834739", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp?ref=2fb31455672e34b697ca5b03622be6d59a7baa4a", "patch": "@@ -1,163 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file dbg_ex_allocator_base.hpp\n- * Contains a debugging, exception throwing, allocator used for tests.\n- */\n-\n-#ifndef PB_DS_DBG_EX_ALLOCATOR_BASE_HPP\n-#define PB_DS_DBG_EX_ALLOCATOR_BASE_HPP\n-\n-#include <math.h>\n-#include <map>\n-#include <set>\n-#include <iostream>\n-#include <stdexcept>\n-#include <regression/res_mng/forced_exception.hpp>\n-#include <rng/twister_rand_gen.hpp>\n-\n-namespace pb_ds\n-{\n-  namespace test\n-  {\n-    namespace detail\n-    {\n-      class dbg_ex_allocator_base;\n-\n-      std::ostream& \n-      operator<<(std::ostream& r_os, const dbg_ex_allocator_base& r_dbg);\n-\n-      class dbg_ex_allocator_base\n-      {\n-      public:\n-\ttypedef size_t label;\n-\n-      public:\n-\tvoid\n-        init(unsigned long seed);\n-\n-\tstatic void\n-        set_throw_prob(double throw_prob);\n-\n-\tstatic double\n-        get_throw_prob();\n-\n-\tstatic void\n-        set_label(size_t l);\n-\n-\tstatic bool\n-        empty();\n-\n-\tclass group_throw_prob_adjustor\n-\t{\n-\tpublic:\n-\t  group_throw_prob_adjustor(size_t size) : m_orig_throw_prob(s_throw_prob)\n-\t  {\n-            s_throw_prob =\n-\t      1 - ::pow(double(1 - s_throw_prob), double(0.5 / (size + 1)));\n-\t  }\n-\n-\t  ~group_throw_prob_adjustor()\n-\t  { s_throw_prob = m_orig_throw_prob; }\n-\n-\tprivate:\n-\t  const double m_orig_throw_prob;\n-\t};\n-\n-\tclass zero_throw_prob_adjustor\n-\t{\n-\tpublic:\n-\t  zero_throw_prob_adjustor() : m_orig_throw_prob(s_throw_prob)\n-\t  { s_throw_prob = 0; }\n-\n-\t  ~zero_throw_prob_adjustor()\n-\t  { s_throw_prob = m_orig_throw_prob; }\n-\n-\tprivate:\n-\t  const double m_orig_throw_prob;\n-\t};\n-\n-      protected:\n-\tstatic void\n-        insert(void* p_r, size_t size);\n-\n-\tstatic void\n-        erase(void* p_r, size_t size);\n-\n-\tstatic void\n-        cond_throw();\n-\n-\tstatic void\n-        assert_allocatod(const void* p_r, size_t size);\n-\n-\tstatic void\n-        check_allocated(void* p_r, size_t size);\n-\n-      private:\n-\ttypedef std::pair<label, size_t> \talloc_data_t;\n-\ttypedef std::map<void*, alloc_data_t> \tmap_t;\n-\ttypedef map_t::value_type \t\tentry_t;\n-\ttypedef map_t::const_iterator \t\tconst_iterator;\n-\ttypedef map_t::const_reference \t\tconst_reference;\n-\n-\tstatic void\n-        print_to_ostream(std::ostream& r_os);\n-\n-\tstatic void\n-        print_to_ostream(std::ostream& r_os, const_reference r_entry);\n-\n-\tstatic entry_t\n-        make_entry(void* p_r, size_t size);\n-\n-\tstatic twister_rand_gen s_g;\n-\tstatic map_t \t\ts_map;\n-\tstatic double \t\ts_throw_prob;\n-\tstatic size_t \t\ts_label;\n-\n-\tfriend std::ostream& operator<<(std::ostream& r_os, \n-\t\t\t\t\tconst dbg_ex_allocator_base& r_dbg);\n-      };\n-    } // namespace detail\n-  } // namespace test\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_DBG_EX_ALLOCATOR_BASE_HPP"}, {"sha": "36942033139027848fb8ffbf85cee88366876532", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/forced_exception.hpp", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb31455672e34b697ca5b03622be6d59a7baa4a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp?ref=2fb31455672e34b697ca5b03622be6d59a7baa4a", "patch": "@@ -1,60 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file forced_exception.hpp\n- * Contains an exception thrown by the debugging allocator.\n- */\n-\n-#ifndef PB_DS_FORCED_EXCEPTION_HPP\n-#define PB_DS_FORCED_EXCEPTION_HPP\n-\n-namespace pb_ds\n-{\n-  namespace test\n-  {\n-    struct forced_exception\n-    { };\n-  } // namespace test\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_FORCED_EXCEPTION_HPP\n-"}, {"sha": "fbe7e8add955412d82fc1999e5dbe6ae37467ab8", "filename": "libstdc++-v3/testsuite/util/rng/twister_rand_gen.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -68,14 +68,11 @@ namespace pb_ds\n     get_unsigned_long(unsigned long min, unsigned long max)\n     {\n       _GLIBCXX_DEBUG_ASSERT(max >= min);\n-\n       const double prob = get_prob();\n-\n       const unsigned long rand_word = \n \t(unsigned long)((max - min + 1) * prob) + min;\n \n       _GLIBCXX_DEBUG_ASSERT(rand_word <= max);\n-\n       return rand_word;\n     }\n \n@@ -91,9 +88,7 @@ namespace pb_ds\n \tstatic_cast<const double>(m_base_generator() - eng_min);\n \n       const double ret = eng_res / eng_range;\n-\n-      _GLIBCXX_DEBUG_ASSERT(ret >=0 && ret <= 1);\n-\n+      _GLIBCXX_DEBUG_ASSERT(ret >= 0 && ret <= 1);\n       return ret;\n     }\n   } // namespace test"}, {"sha": "7c5f5723d1271fda3ded3eea89eafe4af54a0376", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86151e10bb9f2892cb24bdb646b85b1a46fcb13/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=a86151e10bb9f2892cb24bdb646b85b1a46fcb13", "patch": "@@ -362,82 +362,6 @@ namespace __gnu_test\n       \n       int personality;\n     };\n-\n-\n-  template<typename Tp>\n-    class throw_allocator\n-    {\n-    public:\n-      typedef std::size_t                         size_type;\n-      typedef std::ptrdiff_t                      difference_type;\n-      typedef Tp*                                 pointer;\n-      typedef const Tp*                           const_pointer;\n-      typedef Tp&                                 reference;\n-      typedef const Tp&                           const_reference;\n-      typedef Tp                                  value_type;\n-      \n-      template<typename Tp1>\n-        struct rebind\n-\t{ typedef throw_allocator<Tp1> other; };\n-\n-      throw_allocator() throw()\n-      : count(size_type(-1)) { }\n-\n-      throw_allocator(size_type c) throw()\n-      : count(c) { }\n-      \n-      template<typename Tp1>\n-        throw_allocator(const throw_allocator<Tp1>& b) throw()\n-\t: count(b.get_count()) { }\n-\n-      size_type get_count() const { return count; }\n-      \n-      pointer\n-      address(reference x) const { return &x; }\n-    \n-      const_pointer\n-      address(const_reference x) const { return &x; }\n-    \n-      pointer\n-      allocate(size_type n, const void* = 0)\n-      {\n-        if (count == 0)\n-\t  throw std::bad_alloc();\n-\t\n-\tif (count != size_type(-1))\n-\t  --count;\n-        \n-\treturn static_cast<Tp*>(::operator new(n * sizeof(Tp)));\n-      }\n-      \n-      void\n-      deallocate(pointer p, size_type)\n-      { ::operator delete(p); }\n-      \n-      size_type\n-      max_size() const throw() \n-      { return size_type(-1) / sizeof(Tp); }\n-      \n-      void \n-      construct(pointer p, const Tp& val) \n-      { ::new(p) Tp(val); }\n-    \n-      void \n-      destroy(pointer p) { p->~Tp(); }\n-\n-    private:\n-      template<typename Tp1>\n-        friend inline bool\n-        operator==(const throw_allocator&, const throw_allocator<Tp1>&)\n-        { return true; }\n-\n-      template<typename Tp1>\n-        friend inline bool\n-        operator!=(const throw_allocator&, const throw_allocator<Tp1>&)\n-        { return false; }\n-      \n-      size_type count;\n-    };\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}