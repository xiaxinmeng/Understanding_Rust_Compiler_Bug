{"sha": "0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1ZGNhZDFhNGI4ZTY4NTY3ZmRhMzFlYzY2YzlmMzFiOGQ2MGEwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-12-13T20:46:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-12-13T20:46:58Z"}, "message": "re PR c++/46873 ([C++0x] ICE: in build_data_member_initialization, at cp/semantics.c:5489)\n\n\tPR c++/46873\n\tPR c++/46877\n\t* semantics.c (build_data_member_initialization): Handle\n\tcv-qualified data member.\n\nFrom-SVN: r167770", "tree": {"sha": "7f03957e92cf5c6030a63a28e3871aa07a9ed1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f03957e92cf5c6030a63a28e3871aa07a9ed1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42aa5ada5f8cad29ee89c1d3766f45ded0f0a524"}], "stats": {"total": 117, "additions": 85, "deletions": 32}, "files": [{"sha": "3ca26973c87a774b8a0f0f0886ceb9b289b8c41f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "patch": "@@ -1,3 +1,10 @@\n+2010-12-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46873\n+\tPR c++/46877\n+\t* semantics.c (build_data_member_initialization): Handle\n+\tcv-qualified data member.\n+\n 2010-12-13  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/45388"}, {"sha": "27e2982a98c392fef3c3c7199f66ce53864f9dd5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "patch": "@@ -5483,49 +5483,43 @@ build_data_member_initialization (tree t, VEC(constructor_elt,gc) **vec)\n     {\n       member = TREE_OPERAND (t, 0);\n       init = unshare_expr (TREE_OPERAND (t, 1));\n-      if (TREE_CODE (member) == INDIRECT_REF)\n-\t{\n-\t  tree op = TREE_OPERAND (member, 0);\n-\t  STRIP_NOPS (op);\n-\t  gcc_assert (TREE_CODE (op) == ADDR_EXPR);\n-\t  op = TREE_OPERAND (op, 0);\n-\t  if (TREE_CODE (op) == COMPONENT_REF)\n-\t    /* Initializing a cv-qualified member; we just looked through\n-\t       the const_cast.  */\n-\t    member = op;\n-\t  else\n-\t    {\n-\t      /* Initializing an empty base; just skip it.  */\n-\t      gcc_assert (is_empty_class (TREE_TYPE (member)));\n-\t      return true;\n-\t    }\n-\t}\n     }\n   else\n     {\n-      tree memtype;\n       gcc_assert (TREE_CODE (t) == CALL_EXPR);\n       member = CALL_EXPR_ARG (t, 0);\n-      memtype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (member)));\n-      if (TREE_CODE (member) == NOP_EXPR)\n+      /* We don't use build_cplus_new here because it complains about\n+\t abstract bases.  Leaving the call unwrapped means that it has the\n+\t wrong type, but cxx_eval_constant_expression doesn't care.  */\n+      init = unshare_expr (t);\n+    }\n+  if (TREE_CODE (member) == INDIRECT_REF)\n+    member = TREE_OPERAND (member, 0);\n+  if (TREE_CODE (member) == NOP_EXPR)\n+    {\n+      tree op = member;\n+      STRIP_NOPS (op);\n+      if (TREE_CODE (op) == ADDR_EXPR)\n \t{\n-\t  /* We don't put out anything for an empty base.  */\n-\t  gcc_assert (is_empty_class (memtype));\n-\t  /* But if the constructor used isn't constexpr, leave in the call\n-\t     so we complain later.  */\n-\t  if (potential_constant_expression (t, tf_none))\n-\t    return true;\n+\t  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n+\t\t      (TREE_TYPE (TREE_TYPE (op)),\n+\t\t       TREE_TYPE (TREE_TYPE (member))));\n+\t  /* Initializing a cv-qualified member; we need to look through\n+\t     the const_cast.  */\n+\t  member = op;\n \t}\n       else\n \t{\n-\t  gcc_assert (TREE_CODE (member) == ADDR_EXPR);\n-\t  member = TREE_OPERAND (member, 0);\n+\t  /* We don't put out anything for an empty base.  */\n+\t  gcc_assert (is_empty_class (TREE_TYPE (TREE_TYPE (member))));\n+\t  /* But if the initializer isn't constexpr, leave it in so we\n+\t     complain later.  */\n+\t  if (potential_constant_expression (init, tf_none))\n+\t    return true;\n \t}\n-      /* We don't use build_cplus_new here because it complains about\n-\t abstract bases.  T has the wrong type, but\n-\t cxx_eval_constant_expression doesn't care.  */\n-      init = unshare_expr (t);\n     }\n+  if (TREE_CODE (member) == ADDR_EXPR)\n+    member = TREE_OPERAND (member, 0);\n   if (TREE_CODE (member) == COMPONENT_REF)\n     member = TREE_OPERAND (member, 1);\n   CONSTRUCTOR_APPEND_ELT (*vec, member, init);"}, {"sha": "a9ed2f84c7779c19b446e4bd5aa3909c5309c0e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "patch": "@@ -1,3 +1,10 @@\n+2010-12-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46873\n+\tPR c++/46877\n+\t* g++.dg/cpp0x/constexpr-ctor4.C: New.\n+\t* g++.dg/cpp0x/constexpr-ctor5.C: New.\n+\n 2010-12-13  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46201"}, {"sha": "397b4b054eff7d7550abdf1aea8c7a0935c9fc48", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor4.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor4.C?ref=0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/46873\n+// { dg-options -std=c++0x }\n+\n+struct S\n+{\n+  int i:1;\n+};\n+\n+struct T\n+{\n+  const S s;\n+  constexpr T (S a = S ()) : s (a) { }\n+};\n+\n+T t;"}, {"sha": "36b01785feec62256da9fe1476c2619e11e839c6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor5.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor5.C?ref=0e5dcad1a4b8e68567fda31ec66c9f31b8d60a0a", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/46877\n+// { dg-options -std=c++0x }\n+\n+struct new_allocator\n+{\n+  constexpr new_allocator ();\n+};\n+\n+struct string\n+{\n+  constexpr string ()\n+  {\n+  }\n+  new_allocator a;\n+};\n+\n+struct pair\n+{\n+  const string first;\n+  constexpr pair ()\n+  {\n+  }\n+};\n+\n+constexpr\n+new_allocator::new_allocator ()\n+{\n+}\n+\n+pair p;"}]}