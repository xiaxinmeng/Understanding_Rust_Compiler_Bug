{"sha": "a36556a837f4d9e7e6cffa080f1d70567197a316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2NTU2YTgzN2Y0ZDllN2U2Y2ZmYTA4MGYxZDcwNTY3MTk3YTMxNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-05T00:50:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-05T00:50:02Z"}, "message": "[multiple changes]\n\n2000-08-04  Andreas Schwab  <schwab@suse.de>\n\n\t* cppmain.c (cb_def_pragma): Skip the first two tokens from the\n\ttoken list, which are always `#' and `pragma'.\n\n2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* tree.c (tree_expr_nonnegative_p): Move to...\n\t* fold-const.c: ... here.  Also handle BIND_EXPR and RTL_EXPR.\n\t(rtl_expr_nonnegative_p): New.\n\t* tree.h: Add prototype for rtl_expr_nonnegative_p.\n\n\t* real.h (CONST_DOUBLE_LOW, CONST_DOUBLE_HIGH, CONST_DOUBLE_MEM,\n\tCONST_DOUBLE_CHAIN: Move to...\n\t* rtl.h: ...here.  Use XCINT/XCEXP.\n\n\t* Makefile.in: Remove toplev.o from OBJS.  Add rule to make\n\tlibbackend.a; add libbackend.a to STAGESTUFF.  Add BACKEND\n\tvariable.  Use BACKEND when linking cc1, not OBJS.  Add BACKEND\n\tto VOL_FILES.\n\n\t* objc/Make-lang.in (cc1obj): Link with $(BACKEND).\n\nch:\n\t* Make-lang.in (cc1chill): Depend on $(BACKEND), not stamp-objlist.\n\t* Makefile.in (cc1chill): Link with $(BACKEND).  Define BACKEND,\n\teliminate C_OBJS (was commented out), OBJS, OBJDEPS.\ncp:\n        * Make-lang.in (cc1plus): Depend on $(BACKEND), not stamp-objlist.\n        * Makefile.in: Add C_OBJS, BACKEND; delete OBJS, OBJDEPS.\n        (cc1plus): Link with $(BACKEND) and $(C_OBJS).\nf:\n\t* Make-lang.in (f771): Depend on $(BACKEND), not stamp-objlist.\n\t* Makefile.in: Add BACKEND; delete OBJS, OBJDEPS.\n\t(f771): Link with $(BACKEND).\njava:\n\t* Make-lang.in (jc1, jv-scan): Depend on $(BACKEND), not stamp-objlist.\n\t* Makefile.in: Add BACKEND; delete OBJS, OBJDEPS.\n\t(jc1): Link with $(BACKEND).\n\t(jv-scan): Depend on version.o, not all of $(OBJS) or $(BACKEND).\n\nFrom-SVN: r35501", "tree": {"sha": "18d113e290fbd64d849a1cab1dcb38ef98c1242a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18d113e290fbd64d849a1cab1dcb38ef98c1242a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a36556a837f4d9e7e6cffa080f1d70567197a316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36556a837f4d9e7e6cffa080f1d70567197a316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36556a837f4d9e7e6cffa080f1d70567197a316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36556a837f4d9e7e6cffa080f1d70567197a316/comments", "author": null, "committer": null, "parents": [{"sha": "2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c"}], "stats": {"total": 239, "additions": 160, "deletions": 79}, "files": [{"sha": "2f75308057f4543ec7f71bb4097787bcb6575821", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1,3 +1,26 @@\n+2000-08-04  Andreas Schwab  <schwab@suse.de>\n+\n+\t* cppmain.c (cb_def_pragma): Skip the first two tokens from the\n+\ttoken list, which are always `#' and `pragma'.\n+\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* tree.c (tree_expr_nonnegative_p): Move to...\n+\t* fold-const.c: ... here.  Also handle BIND_EXPR and RTL_EXPR.\n+\t(rtl_expr_nonnegative_p): New.                                \n+\t* tree.h: Add prototype for rtl_expr_nonnegative_p.\n+\n+\t* real.h (CONST_DOUBLE_LOW, CONST_DOUBLE_HIGH, CONST_DOUBLE_MEM,\n+\tCONST_DOUBLE_CHAIN: Move to...\n+\t* rtl.h: ...here.  Use XCINT/XCEXP.\n+\n+\t* Makefile.in: Remove toplev.o from OBJS.  Add rule to make\n+\tlibbackend.a; add libbackend.a to STAGESTUFF.  Add BACKEND\n+\tvariable.  Use BACKEND when linking cc1, not OBJS.  Add BACKEND\n+\tto VOL_FILES.\n+\n+\t* objc/Make-lang.in (cc1obj): Link with $(BACKEND).\n+\n 2000-08-05  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n         * config/c4x/c4x.md (return_indirect_internal): New."}, {"sha": "ef7d01a86b7165c9b6147070b2cd28b68a2366dc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -684,8 +684,8 @@ C_AND_OBJC_OBJS = c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n \n # Language-independent object files.\n-OBJS = diagnostic.o\t\t\t\t\t\t\t      \\\n- toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o\t      \\\n+\n+OBJS = diagnostic.o version.o tree.o print-tree.o stor-layout.o fold-const.o  \\\n  function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o real.o  \\\n  builtins.o intl.o varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o genrtl.o   \\\n  dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o alias.o gcse.o  \\\n@@ -698,6 +698,8 @@ OBJS = diagnostic.o\t\t\t\t\t\t\t      \\\n  lists.o ggc-common.o $(GGC) simplify-rtx.o ssa.o bb-reorder.o\t\t      \\\n  sibcall.o conflict.o timevar.o ifcvt.o dce.o\n \n+BACKEND = toplev.o libbackend.a\n+\n # GEN files are listed separately, so they can be built before doing parallel\n #  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load\n #  them before rtl.o is compiled.\n@@ -720,7 +722,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  enquire$(exeext) protoize$(exeext) unprotoize$(exeext) \\\n  specs collect2$(exeext) $(USE_COLLECT2) underscore.c tradcpp0$(exeext) \\\n- gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a libgcc libgcc.mk \\\n+ gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n # Members of libgcc1.a.\n@@ -894,12 +896,13 @@ libgcc1-test.o: libgcc1-test.c native xgcc$(exeext)\n \n # Recompile all the language-independent object files.\n # This is used only if the user explicitly asks for it.\n-compilations: ${OBJS}\n+compilations: $(BACKEND)\n \n-# Create a list of the language-independent object files so the language\n-# subdirectories needn't mention their names explicitly.\n-stamp-objlist: $(OBJS)\n-\techo \" $(OBJS)\" | sed -e 's, \\([a-z0-9]\\), ../\\1,g' -e 's/\\.o/$(objext)/g' >stamp-objlist\n+# Like libcpp.a, this archive is strictly for the host.\n+libbackend.a: $(OBJS)\n+\t-rm -rf libbackend.a\n+\t$(AR) $(AR_FLAGS) libbackend.a $(OBJS)\n+\tif $(RANLIB_TEST) ; then $(RANLIB) libbackend.a ; else true ; fi\n \n # We call this executable `xgcc' rather than `gcc'\n # to avoid confusion if the current directory is in the path\n@@ -928,8 +931,9 @@ specs: xgcc$(exeext)\n gcc-cross: xgcc$(exeext)\n \tcp xgcc$(exeext) gcc-cross$(exeext)\n \n-cc1$(exeext): $(P) $(OBJS) $(C_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(C_OBJS) $(LIBS)\n+cc1$(exeext): $(P) $(C_OBJS) $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1$(exeext) \\\n+\t\t$(C_OBJS) $(BACKEND) $(LIBS)\n \n # Build the version of limits.h that we will install.\n xlimits.h: glimits.h limitx.h limity.h\n@@ -1792,9 +1796,8 @@ LIBCPP_OBJS =\tcpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o \\\n \n LIBCPP_DEPS =\tcpplib.h cpphash.h intl.h system.h\n \n-# All the other archives built/used by this makefile are for targets.  This\n-# one is strictly for the host.\n-#\n+# Most of the other archives built/used by this makefile are for\n+# targets.  This one is strictly for the host.\n libcpp.a: $(LIBCPP_OBJS)\n \t-rm -rf libcpp.a\n \t$(AR) $(AR_FLAGS) libcpp.a $(LIBCPP_OBJS)\n@@ -2753,7 +2756,7 @@ diff:\n \t  gcc-$(oldversion) gcc-$(version) > gcc-$(oldversion)-$(version).diff\n \n # A list of files to be destroyed during \"lean\" builds.\n-VOL_FILES=`echo $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`\n+VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`\n \n bootstrap bootstrap-lean: force\n # Only build the C compiler for stage1, because that is the only one that"}, {"sha": "1a200bb2ebec237c8bb6c098309671e50f688c77", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1,3 +1,9 @@\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Make-lang.in (cc1chill): Depend on $(BACKEND), not stamp-objlist.\n+\t* Makefile.in (cc1chill): Link with $(BACKEND).  Define BACKEND,\n+\teliminate C_OBJS (was commented out), OBJS, OBJDEPS.\n+\n 2000-07-31  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0."}, {"sha": "b8ddb0d83c2aaa319078f7349d5c2a4bfec94423", "filename": "gcc/ch/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMake-lang.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -93,7 +93,7 @@ chill: $(srcdir)/ch/chill.in Makefile\n chill-cross: $(srcdir)/ch/chill.in\n \ttouch $@\n \n-cc1chill$(exeext): $(P) $(CHILL_SRCS) $(LIBDEPS) stamp-objlist \\\n+cc1chill$(exeext): $(P) $(CHILL_SRCS) $(LIBDEPS) $(BACKEND) \\\n \tinsn-config.h insn-flags.h insn-attr.h insn-codes.h \\\n \tc-typeck.o c-aux-info.o c-common.o c-iterate.o \\\n         ggc-callbacks.o"}, {"sha": "70f9071f6ffacfd1edc1692c405399ff0831f3b8", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -193,20 +193,16 @@ FLAGS_TO_PASS = \\\n \n # Language-specific object files for CHILL\n \n-#C_OBJS = ../cpplib.o ../cppexp.o ../cpphash.o ../cpperror.o\n-\n CHILL_OBJS = parse.o actions.o except.o grant.o lang.o \\\n    tree.o lex.o decl.o typeck.o convert.o expr.o loop.o \\\n    tasking.o timing.o inout.o satisfy.o ch-version.o \\\n    ../ggc-callbacks.o\n \n-# Language-independent object files.\n-OBJS = `cat ../stamp-objlist`\n-OBJDEPS = ../stamp-objlist\n+BACKEND = ../toplev.o ../libbackend.a\n \n-../cc1chill$(exeext): $(P) $(CHILL_OBJS) $(OBJDEPS) $(LIBDEPS)\n+../cc1chill$(exeext): $(P) $(CHILL_OBJS) $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(CHILL_OBJS) \\\n-\t      $(OBJS) $(C_OBJS) $(LIBS)\n+\t      $(BACKEND) $(LIBS)\n \n # This executable is used in the CHILL regression \n # test script"}, {"sha": "ad3341ac1eec0e4d12f8c80fc6719f0773fbbfc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1,3 +1,9 @@\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+        * Make-lang.in (cc1plus): Depend on $(BACKEND), not stamp-objlist.\n+        * Makefile.in: Add C_OBJS, BACKEND; delete OBJS, OBJDEPS.\n+        (cc1plus): Link with $(BACKEND) and $(C_OBJS).\n+\n 2000-08-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (add_method): Change prototype."}, {"sha": "1b915c937968b6250137f8cb87e5e6bff77a4c0c", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -125,7 +125,7 @@ CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/class.c $(srcdir)/cp/cp-tree.def \\\n  $(srcdir)/cp/semantics.c $(srcdir)/cp/spew.c $(srcdir)/cp/tree.c \\\n  $(srcdir)/cp/typeck.c $(srcdir)/cp/typeck2.c $(srcdir)/cp/xref.c\n \n-cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o \\\n+cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) $(BACKEND) c-common.o \\\n \tc-pragma.o c-semantics.o $(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def \\\n \t$(srcdir)/c-common.def $(srcdir)/cp/gxx.gperf $(srcdir)/cp/cfns.gperf hash.o \\\n \t$(srcdir)/cp/operators.def"}, {"sha": "ef99f4f6b066bf3f2ea00cc970648a56dbab86b9", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -171,6 +171,9 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config -I$(srcdir)\n #\f\n # Lists of files for various purposes.\n \n+# Shared with C front end:\n+C_OBJS = ../c-common.o ../c-pragma.o ../c-semantics.o\n+\n # Language-specific object files for g++\n \n CXX_OBJS = call.o decl.o errfn.o expr.o pt.o typeck2.o \\\n@@ -179,12 +182,12 @@ CXX_OBJS = call.o decl.o errfn.o expr.o pt.o typeck2.o \\\n  repo.o dump.o optimize.o mangle.o @extra_cxx_objs@\n \n # Language-independent object files.\n-OBJS = `cat ../stamp-objlist` ../c-common.o ../c-pragma.o ../c-semantics.o\n-OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o ../c-semantics.o\n+BACKEND = ../toplev.o ../libbackend.a\n \n compiler: ../cc1plus$(exeext)\n-../cc1plus$(exeext): $(P) $(OBJDEPS) $(CXX_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(CXX_OBJS) $(LIBS)\n+../cc1plus$(exeext): $(P) $(CXX_OBJS) $(C_OBJS) $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n+\t      $(CXX_OBJS) $(C_OBJS) $(BACKEND) $(LIBS)\n \n Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure\n \tcd ..; $(SHELL) config.status"}, {"sha": "8b6bbce90170d12b61500d9cfc03f90653e04169", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -214,7 +214,7 @@ cb_def_pragma (pfile)\n {\n   cpp_printf (pfile, &parse_out, \"#pragma \");\n   cpp_output_list (pfile, parse_out.outf, &pfile->token_list,\n-\t\t   pfile->first_directive_token);\n+\t\t   pfile->first_directive_token + 2);\n   putc ('\\n', parse_out.outf);\n }\n "}, {"sha": "7c44217099ec35e7b10df7e398c8d8a1d8906939", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1,3 +1,9 @@\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Make-lang.in (f771): Depend on $(BACKEND), not stamp-objlist.\n+\t* Makefile.in: Add BACKEND; delete OBJS, OBJDEPS.\n+\t(f771): Link with $(BACKEND).\n+\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* g77spec.c: Adjust type of second argument to"}, {"sha": "33df575d7d7021427916fb7f862aa47ade3aca14", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -186,7 +186,7 @@ F77_SRCS = \\\n  $(srcdir)/f/where.c \\\n  $(srcdir)/f/where.h\n \n-f771$(exeext): $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist\n+f771$(exeext): $(P) $(F77_SRCS) $(LIBDEPS) $(BACKEND)\n \ttouch lang-f77\n \tcd f; $(MAKE) $(LANG_FLAGS_TO_PASS) \\\n \t  HOST_CC=\"`case '$(HOST_CC)' in stage*) echo '$(HOST_CC)' | sed -e 's|stage|../stage|g';; *) echo '$(HOST_CC)';; esac`\" \\"}, {"sha": "a6f389911de347d77a7233540b35c9db48303aae", "filename": "gcc/f/Makefile.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ff%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMakefile.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -200,13 +200,12 @@ F77_OBJS = \\\n  where.o\n \n # Language-independent object files.\n-OBJS = `cat ../stamp-objlist`\n-OBJDEPS = ../stamp-objlist\n+BACKEND = ../toplev.o ../libbackend.a\n \n compiler: ../f771$(exeext)\n-../f771$(exeext): $(P) $(F77_OBJS) $(OBJDEPS) $(LIBDEPS)\n+../f771$(exeext): $(P) $(F77_OBJS) $(BACKEND) $(LIBDEPS)\n \trm -f f771$(exeext)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(F77_OBJS) $(OBJS) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(F77_OBJS) $(BACKEND) $(LIBS)\n \n Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure\n \tcd ..; $(SHELL) config.status"}, {"sha": "09bc75f545a6816dd0a335f1bbd6b0d33da8eb7b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -7260,3 +7260,54 @@ multiple_of_p (type, top, bottom)\n       return 0;\n     }\n }\n+\n+/* Return true if `t' is known to be non-negative.  */\n+\n+int\n+tree_expr_nonnegative_p (t)\n+     tree t;\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_CST:\n+      return tree_int_cst_sgn (t) >= 0;\n+    case COND_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1))\n+\t&& tree_expr_nonnegative_p (TREE_OPERAND (t, 2));\n+    case BIND_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case RTL_EXPR:\n+      return rtl_expr_nonnegative_p (RTL_EXPR_RTL (t));\n+      \n+    default:\n+      /* We don't know sign of `t', so be safe and return false.  */\n+      return 0;\n+    }\n+}\n+\n+/* Return true if `r' is known to be non-negative.\n+   Only handles constants at the moment.  */\n+\n+int\n+rtl_expr_nonnegative_p (r)\n+     rtx r;\n+{\n+  switch (GET_CODE (r))\n+    {\n+    case CONST_INT:\n+      return INTVAL (r) >= 0;\n+\n+    case CONST_DOUBLE:\n+      if (GET_MODE (r) == VOIDmode)\n+\treturn CONST_DOUBLE_HIGH (r) >= 0;\n+      return 0;\n+\n+    case SYMBOL_REF:\n+    case LABEL_REF:\n+      /* These are always nonnegative.  */\n+      return 1;\n+\n+    default:\n+      return 0;\n+    }\n+}"}, {"sha": "cee14ff6d560a00f91c1b02b6d8f191a80055ea8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1,3 +1,10 @@\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Make-lang.in (jc1, jv-scan): Depend on $(BACKEND), not stamp-objlist.\n+\t* Makefile.in: Add BACKEND; delete OBJS, OBJDEPS.\n+\t(jc1): Link with $(BACKEND).\n+\t(jv-scan): Depend on version.o, not all of $(OBJS) or $(BACKEND).\n+\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* jvspec.c: Adjust type of second argument to"}, {"sha": "b1a42e406cd6d6641ac28ba1c7df5390744f6158", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -77,7 +77,7 @@ JAVA_SRCS = $(srcdir)/java/parse.y $(srcdir)/java/class.c \\\n   $(srcdir)/java/check-init.c $(srcdir)/java/lex.c $(srcdir)/java/boehm.c \\\n   $(srcdir)/java/jcf-depend.c  $(srcdir)/java/jcf-path.c\n \n-jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) stamp-objlist ggc-callbacks.o\n+jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) $(BACKEND) ggc-callbacks.o\n \tcd java; $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)\n \n jvspec.o: $(srcdir)/java/jvspec.c system.h $(GCC_H)\n@@ -138,7 +138,7 @@ $(PARSE_SCAN_C):  $(srcdir)/java/parse-scan.y\n JV_SCAN_SOURCES = $(srcdir)/java/parse-scan.y $(srcdir)/java/lex.c \\\n        $(srcdir)/java/parse.h $(srcdir)/java/lex.h $(srcdir)/java/jv-scan.c\n \n-jv-scan$(exeext): $(JV_SCAN_SOURCES) stamp-objlist $(LIBDEPS)\n+jv-scan$(exeext): $(JV_SCAN_SOURCES) $(BACKEND) $(LIBDEPS)\n \tcd java && $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jv-scan$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in."}, {"sha": "2ddebb9b654c09625e5e42208b0d2c75d3dcd2d6", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -177,14 +177,13 @@ JAVA_OBJS = parse.o class.o decl.o expr.o constants.o lang.o typeck.o \\\n JAVA_OBJS_LITE = parse-scan.o jv-scan.o\n \n # Language-independent object files.\n-OBJS = `cat ../stamp-objlist` ../ggc-callbacks.o\n-OBJDEPS = ../stamp-objlist ../ggc-callbacks.o\n+BACKEND = ../toplev.o ../ggc-callbacks.o ../libbackend.a\n \n compiler: ../jc1$(exeext) ../jv-scan$(exeext)\n-../jc1$(exeext): $(P) $(JAVA_OBJS) $(OBJDEPS) $(LIBDEPS)\n+../jc1$(exeext): $(P) $(JAVA_OBJS) $(BACKEND) $(LIBDEPS)\n \trm -f ../jc1$(exeext)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS) $(OBJS) $(LIBS)\n-../jv-scan$(exeext): $(P) $(JAVA_OBJS_LITE) $(OBJDEPS) ../version.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS) $(BACKEND) $(LIBS)\n+../jv-scan$(exeext): $(P) $(JAVA_OBJS_LITE) ../version.o $(LIBDEPS)\n \trm -f ../jv-scan$(exeext)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS_LITE) ../version.o $(LIBS)\n "}, {"sha": "41a29efcd046730c693dcbefc4919aaa564395dc", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -59,8 +59,8 @@ OBJECTIVE-C objective-c: cc1obj$(exeext)\n # Language-specific object files for Objective C.\n OBJC_OBJS = objc-parse.o objc-act.o $(C_AND_OBJC_OBJS)\n \n-cc1obj$(exeext): $(P) $(OBJS) $(OBJC_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(OBJC_OBJS) $(LIBS)\n+cc1obj$(exeext): $(P) $(OBJC_OBJS) $(BACKEND) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(BACKEND) $(LIBS)\n \n # Objective C language specific files.\n "}, {"sha": "384f0f1fc3cee336202ec452f898dfd54af3f475", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -451,23 +451,6 @@ union real_extract\n   HOST_WIDE_INT i[sizeof (REAL_VALUE_TYPE) / sizeof (HOST_WIDE_INT)];\n };\n \n-/* For a CONST_DOUBLE:\n-   The usual two ints that hold the value.\n-   For a DImode, that is all there are;\n-    and CONST_DOUBLE_LOW is the low-order word and ..._HIGH the high-order.\n-   For a float, the number of ints varies,\n-    and CONST_DOUBLE_LOW is the one that should come first *in memory*.\n-    So use &CONST_DOUBLE_LOW(r) as the address of an array of ints.  */\n-#define CONST_DOUBLE_LOW(r) XWINT (r, 2)\n-#define CONST_DOUBLE_HIGH(r) XWINT (r, 3)\n-\n-/* Link for chain of all CONST_DOUBLEs in use in current function.  */\n-#define CONST_DOUBLE_CHAIN(r) X0EXP (r, 1)\n-/* The MEM which represents this CONST_DOUBLE's value in memory,\n-   or const0_rtx if no MEM has been made for it yet,\n-   or cc0_rtx if it is not on the chain.  */\n-#define CONST_DOUBLE_MEM(r) XEXP (r, 0)\n-\n /* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */"}, {"sha": "3802f25fe4c5a9037e3dc54e8e591339aa36fbef", "filename": "gcc/rtl.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -753,6 +753,23 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n \n #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)\n \n+/* For a CONST_DOUBLE:\n+   The usual two ints that hold the value.\n+   For a DImode, that is all there are;\n+    and CONST_DOUBLE_LOW is the low-order word and ..._HIGH the high-order.\n+   For a float, the number of ints varies,\n+    and CONST_DOUBLE_LOW is the one that should come first *in memory*.\n+    So use &CONST_DOUBLE_LOW(r) as the address of an array of ints.  */\n+#define CONST_DOUBLE_LOW(r) XCWINT (r, 2, CONST_DOUBLE)\n+#define CONST_DOUBLE_HIGH(r) XCWINT (r, 3, CONST_DOUBLE)\n+\n+/* Link for chain of all CONST_DOUBLEs in use in current function.  */\n+#define CONST_DOUBLE_CHAIN(r) XCEXP (r, 1, CONST_DOUBLE)\n+/* The MEM which represents this CONST_DOUBLE's value in memory,\n+   or const0_rtx if no MEM has been made for it yet,\n+   or cc0_rtx if it is not on the chain.  */\n+#define CONST_DOUBLE_MEM(r) XCEXP (r, 0, CONST_DOUBLE)\n+\n /* For a SUBREG rtx, SUBREG_REG extracts the value we want a subreg of.\n    SUBREG_WORD extracts the word-number.  */\n "}, {"sha": "6ef5dd30ff0f1e4449d99cccbf4bd29b2c0b6d4b", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -4361,25 +4361,6 @@ tree_int_cst_sgn (t)\n     return 1;\n }\n \n-/* Return true if `t' is known to be non-negative.  */\n-\n-int\n-tree_expr_nonnegative_p (t)\n-     tree t;\n-{\n-  switch (TREE_CODE (t))\n-    {\n-    case INTEGER_CST:\n-      return tree_int_cst_sgn (t) >= 0;\n-    case COND_EXPR:\n-      return tree_expr_nonnegative_p (TREE_OPERAND (t, 1))\n-\t&& tree_expr_nonnegative_p (TREE_OPERAND (t, 2));\n-    default:\n-      /* We don't know sign of `t', so be safe and return false.  */\n-      return 0;\n-    }\n-}\n-\n /* Compare two constructor-element-type constants.  Return 1 if the lists\n    are known to be equal; otherwise return 0.  */\n "}, {"sha": "781ef436fc0db460067645b75032a170e567d510", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36556a837f4d9e7e6cffa080f1d70567197a316/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a36556a837f4d9e7e6cffa080f1d70567197a316", "patch": "@@ -1925,7 +1925,8 @@ extern int host_integerp\t\tPARAMS ((tree, int));\n extern HOST_WIDE_INT tree_low_cst\tPARAMS ((tree, int));\n extern int tree_int_cst_msb\t\tPARAMS ((tree));\n extern int tree_int_cst_sgn\t\tPARAMS ((tree));\n-extern int tree_expr_nonnegative_p\t\tPARAMS ((tree));\n+extern int tree_expr_nonnegative_p\tPARAMS ((tree));\n+extern int rtl_expr_nonnegative_p\tPARAMS ((struct rtx_def *));\n extern int index_type_equal\t\tPARAMS ((tree, tree));\n extern tree get_inner_array_type\tPARAMS ((tree));\n "}]}