{"sha": "d76bc29c91f1807418195a4af051d0d1415837bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2YmMyOWM5MWYxODA3NDE4MTk1YTRhZjA1MWQwZDE0MTU4MzdiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-11-13T09:48:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-11-13T09:48:36Z"}, "message": "re PR rtl-optimization/12926 (Wrong value after assignment in initialize list using bit-fields)\n\n\tPR optimization/12926\n\t* expr.c (expand_assignment) [COMPONENT_REF]: Don't put\n\tthe UNCHANGING_RTX_P flag on memory references to read-only\n\tcomponents that are not addressable.\n\nFrom-SVN: r73542", "tree": {"sha": "e18cb1e9c8eac18b1da0b500eb5f4e9161f56dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e18cb1e9c8eac18b1da0b500eb5f4e9161f56dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76bc29c91f1807418195a4af051d0d1415837bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76bc29c91f1807418195a4af051d0d1415837bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76bc29c91f1807418195a4af051d0d1415837bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76bc29c91f1807418195a4af051d0d1415837bc/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "239ca41f81ff35e8c32fadd93ef2ef3c69d67a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239ca41f81ff35e8c32fadd93ef2ef3c69d67a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239ca41f81ff35e8c32fadd93ef2ef3c69d67a7e"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "8fcf0a15b6bcc2bbe58747e040bf0aea43486ed6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d76bc29c91f1807418195a4af051d0d1415837bc", "patch": "@@ -1,3 +1,10 @@\n+2003-11-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/12926\n+\t* expr.c (expand_assignment) [COMPONENT_REF]: Don't put\n+\tthe UNCHANGING_RTX_P flag on memory references to read-only\n+\tcomponents that are not addressable.\n+\n 2003-11-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/lib1funcs.asm (divmodsi4): Clear S0P in"}, {"sha": "0dc9c9cc99eb31a8b316307a83cbafbbdde8a7b1", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d76bc29c91f1807418195a4af051d0d1415837bc", "patch": "@@ -3826,7 +3826,11 @@ expand_assignment (tree to, tree from, int want_value)\n \t}\n \n       if (TREE_CODE (to) == COMPONENT_REF\n-\t  && TREE_READONLY (TREE_OPERAND (to, 1)))\n+\t  && TREE_READONLY (TREE_OPERAND (to, 1))\n+\t  /* We can't assert that a MEM won't be set more than once\n+\t     if the component is not addressable because another\n+\t     non-addressable component may be referenced by the same MEM.  */\n+\t  && ! (GET_CODE (to_rtx) == MEM && ! can_address_p (to)))\n \t{\n \t  if (to_rtx == orig_to_rtx)\n \t    to_rtx = copy_rtx (to_rtx);"}, {"sha": "ba653cbe109ddfe73e782882f381c4797f0174ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d76bc29c91f1807418195a4af051d0d1415837bc", "patch": "@@ -1,3 +1,7 @@\n+2003-11-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/const3.C: New test.\n+\n 2003-11-13  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/compile/20031112-1.c: New test."}, {"sha": "a3539ab15c8b452a72344186b2377af16a7053be", "filename": "gcc/testsuite/g++.dg/opt/const3.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76bc29c91f1807418195a4af051d0d1415837bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C?ref=d76bc29c91f1807418195a4af051d0d1415837bc", "patch": "@@ -0,0 +1,44 @@\n+// PR optimization/12926\n+// This failed on SPARC64 because the assignments to the bit-fields\n+// were wrongly swapped in the constructor.\n+\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern void abort(void);\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void *my_out;\n+\n+struct A\n+{\n+  enum Type {P, U, S};\n+\n+  int foo1(void *, const char *);\n+  int foo2(int, const Type);\n+\n+  A (const size_t size, const Type type): mSize(size), mType(type)\n+  {\n+      foo2(foo1(my_out, \"type = \"), type);\n+      foo2(foo1(my_out, \"mType = \"), mType);\n+  }\n+\n+  const size_t mSize : 8*sizeof(size_t) - 3;\n+  Type mType : 2;\n+};\n+\n+int i;\n+\n+int A::foo1(void *ios, const char *str) { }\n+int A::foo2(int v, const Type t) { i=0; }\n+\n+int main()\n+{\n+  A testa(2, A::S);\n+\n+  if (testa.mType != A::S)\n+     abort();\n+\n+  return 0;\n+}"}]}