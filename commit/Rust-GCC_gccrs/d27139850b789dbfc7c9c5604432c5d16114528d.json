{"sha": "d27139850b789dbfc7c9c5604432c5d16114528d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3MTM5ODUwYjc4OWRiZmM3YzljNTYwNDQzMmM1ZDE2MTE0NTI4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-12T07:34:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-12T07:34:07Z"}, "message": "tree-ssa-pre.c (eliminate_dom_walker::before_dom_children): Eliminate edges marked as not executable by SCCVN.\n\n2015-08-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n\tEliminate edges marked as not executable by SCCVN.\n\t* tree-ssa-sccvn.c: Include gimple-iterator.h.\n\t(cond_dom_walker): Rename to sccvn_dom_walker.\n\t(sccvn_dom_walker::before_dom_children): Value-number defs\n\tof all stmts.\n\t(run_scc_vn): Remove loop value-numbering all SSA names.\n\tDrop not visited SSA names to varying.\n\n\t* gcc.dg/tree-ssa/ssa-fre-43.c: Adjust.\n\nFrom-SVN: r226801", "tree": {"sha": "2e435f7b3b7059e73f19cbc53ede5d47ec750827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e435f7b3b7059e73f19cbc53ede5d47ec750827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27139850b789dbfc7c9c5604432c5d16114528d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27139850b789dbfc7c9c5604432c5d16114528d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27139850b789dbfc7c9c5604432c5d16114528d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27139850b789dbfc7c9c5604432c5d16114528d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51d3809e630ad4576cbf4cbcd7db9782152f9a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d3809e630ad4576cbf4cbcd7db9782152f9a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d3809e630ad4576cbf4cbcd7db9782152f9a41"}], "stats": {"total": 121, "additions": 87, "deletions": 34}, "files": [{"sha": "206dc3aa44df0d7890a41af26aefd71d17694f7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d27139850b789dbfc7c9c5604432c5d16114528d", "patch": "@@ -1,3 +1,14 @@\n+2015-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tEliminate edges marked as not executable by SCCVN.\n+\t* tree-ssa-sccvn.c: Include gimple-iterator.h.\n+\t(cond_dom_walker): Rename to sccvn_dom_walker.\n+\t(sccvn_dom_walker::before_dom_children): Value-number defs\n+\tof all stmts.\n+\t(run_scc_vn): Remove loop value-numbering all SSA names.\n+\tDrop not visited SSA names to varying.\n+\n 2015-08-11  Trevor Saunders  <tbsaunde@tbsaunde.org>\n \n \t* compare-elim.c, dce.c, dse.c, gimple-ssa-isolate-paths.c,"}, {"sha": "7bb63a5f4ac2aee7f7c770a2383cb54527ac4a31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d27139850b789dbfc7c9c5604432c5d16114528d", "patch": "@@ -1,3 +1,7 @@\n+2015-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-43.c: Adjust.\n+\n 2015-08-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/67175"}, {"sha": "1a837666c256c964d47d835f9355aeb0ba5a0667", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-43.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-43.c?ref=d27139850b789dbfc7c9c5604432c5d16114528d", "patch": "@@ -21,8 +21,8 @@ PA(double E[])\n   goto L10;\n }\n \n-/* We should remove 15 dead loads, fully propagating their replacements\n-   with exactly 4 loads and 4 stores from/to E remaining.  */\n+/* We should remove 15 dead loads and some related stmts, fully propagating\n+   their replacements with exactly 4 loads and 4 stores from/to E remaining.  */\n \n-/* { dg-final { scan-tree-dump-times \"Removing dead stmt\" 15 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing dead stmt\" 19 \"fre1\" } } */\n /* { dg-final { scan-tree-dump-not \"Not changing value number\" \"fre1\" } } */"}, {"sha": "697958def0c994fb1fef012de497827af89a3482", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d27139850b789dbfc7c9c5604432c5d16114528d", "patch": "@@ -4291,7 +4291,31 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n               el_to_remove.safe_push (stmt);\n \t      continue;\n             }\n-        }\n+\t}\n+\n+      /* If this is a control statement value numbering left edges\n+\t unexecuted on force the condition in a way consistent with\n+\t that.  */\n+      if (gcond *cond = dyn_cast <gcond *> (stmt))\n+\t{\n+\t  if ((EDGE_SUCC (b, 0)->flags & EDGE_EXECUTABLE)\n+\t      ^ (EDGE_SUCC (b, 1)->flags & EDGE_EXECUTABLE))\n+\t    {\n+              if (dump_file && (dump_flags & TDF_DETAILS))\n+                {\n+                  fprintf (dump_file, \"Removing unexecutable edge from \");\n+                  print_gimple_stmt (dump_file, stmt, 0, 0);\n+                }\n+\t      if (((EDGE_SUCC (b, 0)->flags & EDGE_TRUE_VALUE) != 0)\n+\t\t  == ((EDGE_SUCC (b, 0)->flags & EDGE_EXECUTABLE) != 0))\n+\t\tgimple_cond_make_true (cond);\n+\t      else\n+\t\tgimple_cond_make_false (cond);\n+\t      update_stmt (cond);\n+\t      el_todo |= TODO_cleanup_cfg;\n+\t      continue;\n+\t    }\n+\t}\n \n       bool can_make_abnormal_goto = stmt_can_make_abnormal_goto (stmt);\n       bool was_noreturn = (is_gimple_call (stmt)"}, {"sha": "eca0d44cdaf8a5915735ec130b4969f30c08af1b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27139850b789dbfc7c9c5604432c5d16114528d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d27139850b789dbfc7c9c5604432c5d16114528d", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"domwalk.h\"\n #include \"cgraph.h\"\n+#include \"gimple-iterator.h\"\n \n /* This algorithm is based on the SCC algorithm presented by Keith\n    Cooper and L. Taylor Simpson in \"SCC-Based Value numbering\"\n@@ -4277,18 +4278,20 @@ set_hashtable_value_ids (void)\n     set_value_id_for_result (vr->result, &vr->value_id);\n }\n \n-class cond_dom_walker : public dom_walker\n+class sccvn_dom_walker : public dom_walker\n {\n public:\n-  cond_dom_walker () : dom_walker (CDI_DOMINATORS), fail (false) {}\n+  sccvn_dom_walker () : dom_walker (CDI_DOMINATORS), fail (false) {}\n \n   virtual void before_dom_children (basic_block);\n \n   bool fail;\n };\n \n+/* Value number all statements in BB.  */\n+\n void\n-cond_dom_walker::before_dom_children (basic_block bb)\n+sccvn_dom_walker::before_dom_children (basic_block bb)\n {\n   edge e;\n   edge_iterator ei;\n@@ -4317,6 +4320,34 @@ cond_dom_walker::before_dom_children (basic_block bb)\n       return;\n     }\n \n+  /* Value-number all defs in the basic-block.  */\n+  for (gphi_iterator gsi = gsi_start_phis (bb);\n+       !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gphi *phi = gsi.phi ();\n+      tree res = PHI_RESULT (phi);\n+      if (!VN_INFO (res)->visited\n+\t  && !DFS (res))\n+\t{\n+\t  fail = true;\n+\t  return;\n+\t}\n+    }\n+  for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+       !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      ssa_op_iter i;\n+      tree op;\n+      FOR_EACH_SSA_TREE_OPERAND (op, gsi_stmt (gsi), i, SSA_OP_ALL_DEFS)\n+\tif (!VN_INFO (op)->visited\n+\t    && !DFS (op))\n+\t  {\n+\t    fail = true;\n+\t    return;\n+\t  }\n+    }\n+\n+  /* Finally look at the last stmt.  */\n   gimple stmt = last_stmt (bb);\n   if (!stmt)\n     return;\n@@ -4329,21 +4360,16 @@ cond_dom_walker::before_dom_children (basic_block bb)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"Value-numbering operands of stmt ending BB %d: \",\n-\t       bb->index);\n+      fprintf (dump_file, \"Visiting stmt ending BB %d: \", bb->index);\n       print_gimple_stmt (dump_file, stmt, 0, 0);\n     }\n \n   /* Value-number the last stmts SSA uses.  */\n   ssa_op_iter i;\n   tree op;\n   FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n-    if (VN_INFO (op)->visited == false\n-\t&& !DFS (op))\n-      {\n-\tfail = true;\n-\treturn;\n-      }\n+    gcc_assert (VN_INFO (op)->visited\n+\t\t|| SSA_NAME_IS_DEFAULT_DEF (op));\n \n   /* ???  We can even handle stmts with outgoing EH or ABNORMAL edges\n      if value-numbering can prove they are not reachable.  Handling\n@@ -4427,39 +4453,27 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n \te->flags |= EDGE_EXECUTABLE;\n     }\n \n-  /* Walk all blocks in dominator order, value-numbering the last stmts\n-     SSA uses and decide whether outgoing edges are not executable.  */\n-  cond_dom_walker walker;\n+  /* Walk all blocks in dominator order, value-numbering stmts\n+     SSA defs and decide whether outgoing edges are not executable.  */\n+  sccvn_dom_walker walker;\n   walker.walk (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   if (walker.fail)\n     {\n       free_scc_vn ();\n       return false;\n     }\n \n-  /* Value-number remaining SSA names.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n-    {\n-      tree name = ssa_name (i);\n-      if (name\n-\t  && VN_INFO (name)->visited == false\n-\t  && !has_zero_uses (name))\n-\tif (!DFS (name))\n-\t  {\n-\t    free_scc_vn ();\n-\t    return false;\n-\t  }\n-    }\n-\n-  /* Initialize the value ids.  */\n-\n+  /* Initialize the value ids and prune out remaining VN_TOPs\n+     from dead code.  */\n   for (i = 1; i < num_ssa_names; ++i)\n     {\n       tree name = ssa_name (i);\n       vn_ssa_aux_t info;\n       if (!name)\n \tcontinue;\n       info = VN_INFO (name);\n+      if (!info->visited)\n+\tinfo->valnum = name;\n       if (info->valnum == name\n \t  || info->valnum == VN_TOP)\n \tinfo->value_id = get_next_value_id ();"}]}