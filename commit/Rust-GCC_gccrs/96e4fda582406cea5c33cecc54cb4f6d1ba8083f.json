{"sha": "96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlNGZkYTU4MjQwNmNlYTVjMzNjZWNjNTRjYjRmNmQxYmE4MDgzZg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-16T14:12:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:12:33Z"}, "message": "[Ada] Missing error on hidden state in instantiation\n\nThis patch modifies the analysis of package contracts to split processing\nwhich is specific to package instantiations on its own. As a result, the\nlack of indicator Part_Of can now be properly assessed.\n\n------------\n-- Source --\n------------\n\n--  gen_pack.ads\n\ngeneric\npackage Gen_Pack is\n   Pack_Var : Integer := 1;\nend Gen_Pack;\n\n--  gen_wrap.ads\n\nwith Gen_Pack;\n\ngeneric\npackage Gen_Wrap is\n   Wrap_Var : Integer := 1;\n\n   package Inst is new Gen_Pack;\nend Gen_Wrap;\n\n--  pack.ads\n\nwith Gen_Pack;\nwith Gen_Wrap;\n\npackage Pack\n  with SPARK_Mode     => On,\n       Abstract_State => State\nis\n   procedure Force_Body;\n\nprivate\n   package OK_Inst_1 is new Gen_Pack                                 --  OK\n     with Part_Of => State;                                          --  OK\n\n   package OK_Inst_2 is new Gen_Pack;                                --  OK\n   pragma Part_Of (State);                                           --  OK\n\n   package OK_Inst_3 is new Gen_Wrap                                 --  OK\n     with Part_Of => State;                                          --  OK\n\n   package OK_Inst_4 is new Gen_Wrap;                                --  OK\n   pragma Part_Of (State);\n\n   package Error_Inst_1 is new Gen_Pack;                             --  Error\n   package Error_Inst_2 is new Gen_Wrap;                             --  Error\nend Pack;\n\n--  pack.adb\n\npackage body Pack\n  with SPARK_Mode    => On,\n       Refined_State =>\n         (State => (OK_Inst_1.Pack_Var, OK_Inst_2.Pack_Var,\n                    OK_Inst_3.Wrap_Var, OK_Inst_3.Inst.Pack_Var,\n                    OK_Inst_4.Wrap_Var, OK_Inst_4.Inst.Pack_Var))\nis\n   procedure Force_Body is null;\nend Pack;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c pack.adb\npack.ads:23:12: indicator Part_Of is required in this context (SPARK RM\n  7.2.6(2))\npack.ads:23:12: \"Error_Inst_1\" is declared in the private part of package\n  \"Pack\"\npack.ads:24:12: indicator Part_Of is required in this context (SPARK RM\n  7.2.6(2))\npack.ads:24:12: \"Error_Inst_2\" is declared in the private part of package\n  \"Pack\"\n\n2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* contracts.adb (Analyze_Contracts): Add specialized processing for\n\tpackage instantiation contracts.\n\t(Analyze_Package_Contract): Remove the verification of a missing\n\tPart_Of indicator.\n\t(Analyze_Package_Instantiation_Contract): New routine.\n\t* contracts.ads (Analyze_Package_Contract): Update the comment on\n\tusage.\n\t* sem_prag.adb (Check_Missing_Part_Of): Ensure that the entity of the\n\tinstance is being examined when trying to determine whether a package\n\tinstantiation needs a Part_Of indicator.\n\nFrom-SVN: r262731", "tree": {"sha": "72839e27dd0a55f6f9487796c5262996bec81190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72839e27dd0a55f6f9487796c5262996bec81190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "400ad4e950bcd8f0940990ea558b1227d8930285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400ad4e950bcd8f0940990ea558b1227d8930285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400ad4e950bcd8f0940990ea558b1227d8930285"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "a72e80fb438e2f62dfe905e8317bb1e2492dc38d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "patch": "@@ -1,3 +1,16 @@\n+2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Analyze_Contracts): Add specialized processing for\n+\tpackage instantiation contracts.\n+\t(Analyze_Package_Contract): Remove the verification of a missing\n+\tPart_Of indicator.\n+\t(Analyze_Package_Instantiation_Contract): New routine.\n+\t* contracts.ads (Analyze_Package_Contract): Update the comment on\n+\tusage.\n+\t* sem_prag.adb (Check_Missing_Part_Of): Ensure that the entity of the\n+\tinstance is being examined when trying to determine whether a package\n+\tinstantiation needs a Part_Of indicator.\n+\n 2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb, exp_ch7.adb, exp_ch9.adb, exp_unst.adb, inline.adb,"}, {"sha": "69cece95361865ec2f6cb8a72679ffb7085baba6", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "patch": "@@ -53,6 +53,13 @@ with Tbuild;   use Tbuild;\n \n package body Contracts is\n \n+   procedure Analyze_Package_Instantiation_Contract (Inst_Id : Entity_Id);\n+   --  Analyze all delayed pragmas chained on the contract of package\n+   --  instantiation Inst_Id as if they appear at the end of a declarative\n+   --  region. The pragmas in question are:\n+   --\n+   --    Part_Of\n+\n    procedure Build_And_Analyze_Contract_Only_Subprograms (L : List_Id);\n    --  (CodePeer): Subsidiary procedure to Analyze_Contracts which builds the\n    --  contract-only subprogram body of eligible subprograms found in L, adds\n@@ -386,6 +393,11 @@ package body Contracts is\n          elsif Nkind (Decl) = N_Object_Declaration then\n             Analyze_Object_Contract (Defining_Entity (Decl));\n \n+         --  Package instantiation\n+\n+         elsif Nkind (Decl) = N_Package_Instantiation then\n+            Analyze_Package_Instantiation_Contract (Defining_Entity (Decl));\n+\n          --  Protected units\n \n          elsif Nkind_In (Decl, N_Protected_Type_Declaration,\n@@ -1074,17 +1086,6 @@ package body Contracts is\n          end if;\n       end if;\n \n-      --  Check whether the lack of indicator Part_Of agrees with the placement\n-      --  of the package instantiation with respect to the state space.\n-\n-      if Is_Generic_Instance (Pack_Id) then\n-         Prag := Get_Pragma (Pack_Id, Pragma_Part_Of);\n-\n-         if No (Prag) then\n-            Check_Missing_Part_Of (Pack_Id);\n-         end if;\n-      end if;\n-\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n@@ -1100,6 +1101,62 @@ package body Contracts is\n       end if;\n    end Analyze_Package_Contract;\n \n+   --------------------------------------------\n+   -- Analyze_Package_Instantiation_Contract --\n+   --------------------------------------------\n+\n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n+   procedure Analyze_Package_Instantiation_Contract (Inst_Id : Entity_Id) is\n+      Inst_Spec : constant Node_Id :=\n+                    Instance_Spec (Unit_Declaration_Node (Inst_Id));\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n+      Pack_Id : Entity_Id;\n+      Prag    : Node_Id;\n+\n+   begin\n+      --  Nothing to do when the package instantiation is erroneous or left\n+      --  partially decorated.\n+\n+      if No (Inst_Spec) then\n+         return;\n+      end if;\n+\n+      Pack_Id := Defining_Entity (Inst_Spec);\n+      Prag    := Get_Pragma (Pack_Id, Pragma_Part_Of);\n+\n+      --  Due to the timing of contract analysis, delayed pragmas may be\n+      --  subject to the wrong SPARK_Mode, usually that of the enclosing\n+      --  context. To remedy this, restore the original SPARK_Mode of the\n+      --  related package.\n+\n+      Set_SPARK_Mode (Pack_Id);\n+\n+      --  Check whether the lack of indicator Part_Of agrees with the placement\n+      --  of the package instantiation with respect to the state space. Nested\n+      --  package instantiations do not need to be checked because they inherit\n+      --  Part_Of indicator of the outermost package instantiation (see routine\n+      --  Propagate_Part_Of in Sem_Prag).\n+\n+      if In_Instance then\n+         null;\n+\n+      elsif No (Prag) then\n+         Check_Missing_Part_Of (Pack_Id);\n+      end if;\n+\n+      --  Restore the SPARK_Mode of the enclosing context after all delayed\n+      --  pragmas have been analyzed.\n+\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+   end Analyze_Package_Instantiation_Contract;\n+\n    --------------------------------\n    -- Analyze_Protected_Contract --\n    --------------------------------"}, {"sha": "46f52d14bf550312c6da47c54116df9c12351087", "filename": "gcc/ada/contracts.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fcontracts.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fcontracts.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.ads?ref=96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "patch": "@@ -35,6 +35,7 @@ package Contracts is\n    --  [generic] package, package body, protected unit, [generic] subprogram,\n    --  subprogram body, variable or task unit denoted by Id. The following are\n    --  valid pragmas:\n+   --\n    --    Abstract_State\n    --    Async_Readers\n    --    Async_Writers\n@@ -66,6 +67,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of entry or\n    --  subprogram body Body_Id as if they appeared at the end of a declarative\n    --  region. Pragmas in question are:\n+   --\n    --    Contract_Cases   (stand alone subprogram body)\n    --    Depends          (stand alone subprogram body)\n    --    Global           (stand alone subprogram body)\n@@ -82,6 +84,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of entry or\n    --  subprogram Subp_Id as if they appeared at the end of a declarative\n    --  region. The pragmas in question are:\n+   --\n    --    Contract_Cases\n    --    Depends\n    --    Global\n@@ -98,6 +101,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of object Obj_Id as\n    --  if they appeared at the end of the declarative region. The pragmas to be\n    --  considered are:\n+   --\n    --    Async_Readers\n    --    Async_Writers\n    --    Depends           (single concurrent object)\n@@ -115,6 +119,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of package body\n    --  Body_Id as if they appeared at the end of a declarative region. The\n    --  pragmas that are considered are:\n+   --\n    --    Refined_State\n    --\n    --  Freeze_Id is the entity of a [generic] package body or a [generic]\n@@ -124,9 +129,9 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of package Pack_Id\n    --  as if they appeared at the end of a declarative region. The pragmas\n    --  that are considered are:\n+   --\n    --    Initial_Condition\n    --    Initializes\n-   --    Part_Of\n \n    procedure Analyze_Protected_Contract (Prot_Id : Entity_Id);\n    --  Analyze all delayed pragmas chained on the contract of protected unit\n@@ -137,6 +142,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of subprogram body\n    --  stub Stub_Id as if they appeared at the end of a declarative region. The\n    --  pragmas in question are:\n+   --\n    --    Contract_Cases\n    --    Depends\n    --    Global\n@@ -151,6 +157,7 @@ package Contracts is\n    --  Analyze all delayed pragmas chained on the contract of task unit Task_Id\n    --  as if they appeared at the end of a declarative region. The pragmas in\n    --  question are:\n+   --\n    --    Depends\n    --    Global\n "}, {"sha": "6bd5462d04d243d7eb489a7ba25db4536faf632b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e4fda582406cea5c33cecc54cb4f6d1ba8083f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "patch": "@@ -28897,9 +28897,9 @@ package body Sem_Prag is\n          --  A package instantiation does not need a Part_Of indicator when the\n          --  related generic template has no visible state.\n \n-         elsif Ekind (Pack_Id) = E_Package\n-           and then Is_Generic_Instance (Pack_Id)\n-           and then not Has_Visible_State (Pack_Id)\n+         elsif Ekind (Item_Id) = E_Package\n+           and then Is_Generic_Instance (Item_Id)\n+           and then not Has_Visible_State (Item_Id)\n          then\n             null;\n "}]}