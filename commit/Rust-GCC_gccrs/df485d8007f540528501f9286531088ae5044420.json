{"sha": "df485d8007f540528501f9286531088ae5044420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0ODVkODAwN2Y1NDA1Mjg1MDFmOTI4NjUzMTA4OGFlNTA0NDQyMA==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2004-09-23T15:47:59Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2004-09-23T15:47:59Z"}, "message": "re PR tree-optimization/17533 (cc1plus crashes on libmudflap test case, verify_dominators())\n\n2004-09-23  Frank Ch. Eigler <fche@redhat.com>\n\n\tPR tree-optimization/17533\n\t* dominance.c (verify_dominators): Tolerate even more incorrect\n\tdominance data during error message printing.\n\t* tree-mudflap.c (mf_build_check_statement_for): Build basic blocks\n\tand edges more correctly.\n\nFrom-SVN: r87954", "tree": {"sha": "8cb2d5d482a0f8a0cfd2788c5789fd9692386513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb2d5d482a0f8a0cfd2788c5789fd9692386513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df485d8007f540528501f9286531088ae5044420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df485d8007f540528501f9286531088ae5044420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df485d8007f540528501f9286531088ae5044420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df485d8007f540528501f9286531088ae5044420/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ccf35ed170c496d99d670986e96e7c1d779cee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ccf35ed170c496d99d670986e96e7c1d779cee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ccf35ed170c496d99d670986e96e7c1d779cee3"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "93ad667c95ec4d5ecba168efbd0a753c0c882d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df485d8007f540528501f9286531088ae5044420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df485d8007f540528501f9286531088ae5044420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df485d8007f540528501f9286531088ae5044420", "patch": "@@ -1,3 +1,11 @@\n+2004-09-23  Frank Ch. Eigler <fche@redhat.com>\n+\n+\tPR tree-optimization/17533\n+\t* dominance.c (verify_dominators): Tolerate even more incorrect\n+\tdominance data during error message printing.\n+\t* tree-mudflap.c (mf_build_check_statement_for): Build basic blocks\n+\tand edges more correctly.\n+\t\n 2004-09-23  Dorit Naishlos <dorit@il.ibm.com>\n \n         * tree.def (ALIGN_INDIRECT_REF, MISALIGNED_INDIRECT_REF):"}, {"sha": "bbb0b21484b0a5a61ad562adc8b709367426c991", "filename": "gcc/dominance.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df485d8007f540528501f9286531088ae5044420/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df485d8007f540528501f9286531088ae5044420/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=df485d8007f540528501f9286531088ae5044420", "patch": "@@ -829,16 +829,17 @@ verify_dominators (enum cdi_direction dir)\n   FOR_EACH_BB (bb)\n     {\n       basic_block dom_bb;\n+      basic_block imm_bb;\n \n       dom_bb = recount_dominator (dir, bb);\n-      if (dom_bb != get_immediate_dominator (dir, bb))\n+      imm_bb = get_immediate_dominator (dir, bb);\n+      if (dom_bb != imm_bb)\n \t{\n-\t  if (dom_bb == NULL)\n-\t    error (\"dominator of %d should be (unknown), not %d\",\n-\t\t   bb->index, get_immediate_dominator(dir, bb)->index);\n+\t  if ((dom_bb == NULL) || (imm_bb == NULL))\n+\t    error (\"dominator of %d status unknown\", bb->index);\n \t  else\n \t    error (\"dominator of %d should be %d, not %d\",\n-\t\t   bb->index, dom_bb->index, get_immediate_dominator(dir, bb)->index);\n+\t\t   bb->index, dom_bb->index, imm_bb->index);\n \t  err = 1;\n \t}\n     }"}, {"sha": "138dda88007b24b7b93993d3a9ae3901108f9b2f", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df485d8007f540528501f9286531088ae5044420/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df485d8007f540528501f9286531088ae5044420/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=df485d8007f540528501f9286531088ae5044420", "patch": "@@ -508,25 +508,42 @@ mf_build_check_statement_for (tree addr, tree size,\n   bsi_prev (&bsi);\n   if (! bsi_end_p (bsi))\n     {\n+      /* We're processing a statement in the middle of the block, so\n+         we need to split the block.  This creates a new block and a new\n+         fallthrough edge.  */\n       e = split_block (cond_bb, bsi_stmt (bsi));\n       cond_bb = e->src;\n       join_bb = e->dest;\n     }\n   else\n     {\n+      /* We're processing the first statement in the block, so we need\n+         to split the incoming edge.  This also creates a new block\n+         and a new fallthrough edge.  */\n       join_bb = cond_bb;\n-      cond_bb = create_empty_bb (join_bb->prev_bb);\n-      e = make_edge (cond_bb, join_bb, 0);\n+      cond_bb = split_edge (find_edge (join_bb->prev_bb, join_bb));\n     }\n-  e->flags = EDGE_FALSE_VALUE;\n+  \n+  /* A recap at this point: join_bb is the basic block at whose head\n+     is the gimple statement for which this check expression is being\n+     built.  cond_bb is the new synthetic basic block which will\n+     contain the cache-lookup code, and a conditional that jumps to\n+     the cache-miss code or, much more likely, over to join_bb.  */\n+\n+  /* Create the bb that contains the cache-miss fallback block (mf_check).  */\n   then_bb = create_empty_bb (cond_bb);\n   make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n-  make_edge (then_bb, join_bb, EDGE_FALLTHRU);\n+  make_single_succ_edge (then_bb, join_bb, EDGE_FALLTHRU);\n \n   /* We expect that the conditional jump we will construct will not\n      be taken very often as it basically is an exception condition.  */\n   predict_edge_def (then_bb->pred, PRED_MUDFLAP, NOT_TAKEN);\n \n+  /* Mark the pseudo-fallthrough edge from cond_bb to join_bb.  */\n+  e = find_edge (cond_bb, join_bb);\n+  e->flags = EDGE_FALSE_VALUE;\n+  predict_edge_def (e, PRED_MUDFLAP, TAKEN);\n+\n   /* Update dominance info.  Note that bb_join's data was\n      updated by split_block.  */\n   if (dom_computed[CDI_DOMINATORS] >= DOM_CONS_OK)"}]}