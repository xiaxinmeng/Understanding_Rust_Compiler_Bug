{"sha": "14f661f16c1aabf017bcd7b0fea29786366b502f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmNjYxZjE2YzFhYWJmMDE3YmNkN2IwZmVhMjk3ODYzNjZiNTAyZg==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-20T03:56:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-20T03:56:05Z"}, "message": "builtins.c (fold_builtin_unordered_cmp): Take an EXP argument instead of both an ARGLIST and a result TYPE.\n\n\n\t* builtins.c (fold_builtin_unordered_cmp): Take an EXP argument\n\tinstead of both an ARGLIST and a result TYPE.  Handle these C99\n\tcomparison functions as \"polymorphic\" builtins.  Also handle\n\tlowering of BUILT_IN_ISUNORDERED to an UNORDERED_EXPR tree node.\n\t(fold_builtin_1): Update calls to fold_builtin_unordered_cmp.\n\tMove handling of BUILT_IN_ISUNORDERED from here to there.\n\nFrom-SVN: r83404", "tree": {"sha": "27a281b7ba8329efc3f7abbd5c915f7822d468d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a281b7ba8329efc3f7abbd5c915f7822d468d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f661f16c1aabf017bcd7b0fea29786366b502f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f661f16c1aabf017bcd7b0fea29786366b502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f661f16c1aabf017bcd7b0fea29786366b502f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f661f16c1aabf017bcd7b0fea29786366b502f/comments", "author": null, "committer": null, "parents": [{"sha": "2ec5cdadd47eaa80ba29800a6136aa245c1f067c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec5cdadd47eaa80ba29800a6136aa245c1f067c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec5cdadd47eaa80ba29800a6136aa245c1f067c"}], "stats": {"total": 100, "additions": 78, "deletions": 22}, "files": [{"sha": "50cc6134356c3f568c7ef35c74d4881db2a82a30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f661f16c1aabf017bcd7b0fea29786366b502f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f661f16c1aabf017bcd7b0fea29786366b502f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14f661f16c1aabf017bcd7b0fea29786366b502f", "patch": "@@ -1,4 +1,13 @@\n-2004-04-19  Richard Henderson  <rth@redhat.com>\n+2004-06-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin_unordered_cmp): Take an EXP argument\n+\tinstead of both an ARGLIST and a result TYPE.  Handle these C99\n+\tcomparison functions as \"polymorphic\" builtins.  Also handle\n+\tlowering of BUILT_IN_ISUNORDERED to an UNORDERED_EXPR tree node.\n+\t(fold_builtin_1): Update calls to fold_builtin_unordered_cmp.\n+\tMove handling of BUILT_IN_ISUNORDERED from here to there.\n+\n+2004-06-19  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.c, c-common.h (lang_gimplify_stmt): Remove.\n \t* c-gimplify.c: Remove unnecessary prototypes."}, {"sha": "55619e1ced9ce729d1478e933cb64469dcce0b7a", "filename": "gcc/builtins.c", "status": "modified", "additions": 68, "deletions": 21, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f661f16c1aabf017bcd7b0fea29786366b502f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f661f16c1aabf017bcd7b0fea29786366b502f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=14f661f16c1aabf017bcd7b0fea29786366b502f", "patch": "@@ -169,8 +169,7 @@ static tree fold_builtin_toascii (tree);\n static tree fold_builtin_isdigit (tree);\n static tree fold_builtin_fabs (tree, tree);\n static tree fold_builtin_abs (tree, tree);\n-static tree fold_builtin_unordered_cmp (tree, tree, enum tree_code,\n-\t\t\t\t\tenum tree_code);\n+static tree fold_builtin_unordered_cmp (tree, enum tree_code, enum tree_code);\n \n static tree simplify_builtin_memcmp (tree);\n static tree simplify_builtin_strcmp (tree);\n@@ -7626,18 +7625,75 @@ fold_builtin_abs (tree arglist, tree type)\n    hold NaNs and ORDERED_CODE is used for the rest.  */\n \n static tree\n-fold_builtin_unordered_cmp (tree arglist, tree type,\n+fold_builtin_unordered_cmp (tree exp,\n \t\t\t    enum tree_code unordered_code,\n \t\t\t    enum tree_code ordered_code)\n {\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n   enum tree_code code;\n   tree arg0, arg1;\n \n   if (!validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n-    return 0;\n+    {\n+      enum tree_code code0, code1;\n+      tree type0, type1;\n+      tree cmp_type = 0;\n \n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      /* Check that we have exactly two arguments.  */\n+      if (arglist == 0 || TREE_CHAIN (arglist) == 0)\n+\t{\n+\t  error (\"too few arguments to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+      else if (TREE_CHAIN (TREE_CHAIN (arglist)) != 0)\n+\t{\n+\t  error (\"too many arguments to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+\n+      type0 = TREE_TYPE (arg0);\n+      type1 = TREE_TYPE (arg1);\n+\n+      code0 = TREE_CODE (type0);\n+      code1 = TREE_CODE (type1);\n+\n+      if (code0 == REAL_TYPE && code1 == REAL_TYPE)\n+\t/* Choose the wider of two real types.  */\n+        cmp_type = TYPE_PRECISION (type0) >= TYPE_PRECISION (type1)\n+\t\t   ? type0 : type1;\n+      else if (code0 == REAL_TYPE && code1 == INTEGER_TYPE)\n+\tcmp_type = type0;\n+      else if (code0 == INTEGER_TYPE && code1 == REAL_TYPE)\n+\tcmp_type = type1;\n+      else\n+\t{\n+\t  error (\"non-floating-point argument to function `%s'\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\t  return error_mark_node;\n+\t}\n+\n+      arg0 = fold_convert (cmp_type, arg0);\n+      arg1 = fold_convert (cmp_type, arg1);\n+    }\n+  else\n+    {\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+    }\n+\n+  if (unordered_code == UNORDERED_EXPR)\n+    {\n+      if (!MODE_HAS_NANS (TYPE_MODE (TREE_TYPE (arg0))))\n+\treturn omit_two_operands (type, integer_zero_node, arg0, arg1);\n+      return fold (build2 (UNORDERED_EXPR, type, arg0, arg1));\n+    }\n \n   code = MODE_HAS_NANS (TYPE_MODE (TREE_TYPE (arg0))) ? unordered_code\n \t\t\t\t\t\t      : ordered_code;\n@@ -8198,26 +8254,17 @@ fold_builtin_1 (tree exp)\n       return fold_builtin_copysign (arglist, type);\n \n     case BUILT_IN_ISGREATER:\n-      return fold_builtin_unordered_cmp (arglist, type, UNLE_EXPR, LE_EXPR);\n+      return fold_builtin_unordered_cmp (exp, UNLE_EXPR, LE_EXPR);\n     case BUILT_IN_ISGREATEREQUAL:\n-      return fold_builtin_unordered_cmp (arglist, type, UNLT_EXPR, LT_EXPR);\n+      return fold_builtin_unordered_cmp (exp, UNLT_EXPR, LT_EXPR);\n     case BUILT_IN_ISLESS:\n-      return fold_builtin_unordered_cmp (arglist, type, UNGE_EXPR, GE_EXPR);\n+      return fold_builtin_unordered_cmp (exp, UNGE_EXPR, GE_EXPR);\n     case BUILT_IN_ISLESSEQUAL:\n-      return fold_builtin_unordered_cmp (arglist, type, UNGT_EXPR, GT_EXPR);\n+      return fold_builtin_unordered_cmp (exp, UNGT_EXPR, GT_EXPR);\n     case BUILT_IN_ISLESSGREATER:\n-      return fold_builtin_unordered_cmp (arglist, type, UNEQ_EXPR, EQ_EXPR);\n-\n+      return fold_builtin_unordered_cmp (exp, UNEQ_EXPR, EQ_EXPR);\n     case BUILT_IN_ISUNORDERED:\n-      if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n-\t{\n-\t  tree arg0 = TREE_VALUE (arglist);\n-\t  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-\t  if (!MODE_HAS_NANS (TYPE_MODE (TREE_TYPE (arg0))))\n-\t    return omit_two_operands (type, integer_zero_node, arg0, arg1);\n-\t  return fold (build2 (UNORDERED_EXPR, type, arg0, arg1));\n-\t}\n-      break;\n+      return fold_builtin_unordered_cmp (exp, UNORDERED_EXPR, NOP_EXPR);\n \n     default:\n       break;"}]}