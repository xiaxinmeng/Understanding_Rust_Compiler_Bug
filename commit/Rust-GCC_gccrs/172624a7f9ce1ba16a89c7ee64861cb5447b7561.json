{"sha": "172624a7f9ce1ba16a89c7ee64861cb5447b7561", "node_id": "C_kwDOANBUbNoAKDE3MjYyNGE3ZjljZTFiYTE2YTg5YzdlZTY0ODYxY2I1NDQ3Yjc1NjE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-12T13:21:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-12T15:10:06Z"}, "message": "mappings: Store NodeIds for visibility_map", "tree": {"sha": "37d1e15a1104dd042ed0367d9409b4f4e4eaa3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d1e15a1104dd042ed0367d9409b4f4e4eaa3f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/172624a7f9ce1ba16a89c7ee64861cb5447b7561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172624a7f9ce1ba16a89c7ee64861cb5447b7561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172624a7f9ce1ba16a89c7ee64861cb5447b7561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172624a7f9ce1ba16a89c7ee64861cb5447b7561/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b4aa48df965191558e58dede5631e10faab2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b4aa48df965191558e58dede5631e10faab2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b4aa48df965191558e58dede5631e10faab2d5"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "764e31ae5d4d74967a39e5dd1ae2484ab6d909f2", "filename": "gcc/rust/privacy/rust-privacy-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -48,6 +48,11 @@ class ModuleVisibility\n     return ModuleVisibility (Type::Public, UNKNOWN_DEFID);\n   }\n \n+  static ModuleVisibility create_private ()\n+  {\n+    return ModuleVisibility (Type::Private, UNKNOWN_DEFID);\n+  }\n+\n   Type get_kind () const { return kind; }\n \n   const DefId &get_module_id () const { return module_id; }"}, {"sha": "09bddf0c169a4545ee4bba0266c74be0ff34ebba", "filename": "gcc/rust/privacy/rust-pub-restricted-visitor.cc", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -24,14 +24,14 @@ namespace Rust {\n namespace Privacy {\n \n bool\n-PubRestrictedVisitor::is_restriction_valid (DefId item_id,\n+PubRestrictedVisitor::is_restriction_valid (NodeId item_id,\n \t\t\t\t\t    const Location &locus)\n {\n   ModuleVisibility visibility;\n \n   // If there is no visibility in the mappings, then the item is private and\n   // does not contain any restriction\n-  if (!mappings.lookup_visibility (item_id, &visibility))\n+  if (!mappings.lookup_visibility (item_id, visibility))\n     return true;\n \n   for (auto mod = module_stack.rbegin (); mod != module_stack.rend (); mod++)\n@@ -72,7 +72,7 @@ PubRestrictedVisitor::visit (HIR::Module &mod)\n   // FIXME: We need to update `super` and `self` here\n   module_stack.push_back (mod.get_mappings ().get_defid ());\n \n-  is_restriction_valid (mod.get_mappings ().get_defid (), mod.get_locus ());\n+  is_restriction_valid (mod.get_mappings ().get_nodeid (), mod.get_locus ());\n \n   for (auto &item : mod.get_items ())\n     {\n@@ -89,89 +89,92 @@ PubRestrictedVisitor::visit (HIR::Module &mod)\n void\n PubRestrictedVisitor::visit (HIR::ExternCrate &crate)\n {\n-  is_restriction_valid (crate.get_mappings ().get_defid (), crate.get_locus ());\n+  is_restriction_valid (crate.get_mappings ().get_nodeid (),\n+\t\t\tcrate.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::UseDeclaration &use_decl)\n {\n-  is_restriction_valid (use_decl.get_mappings ().get_defid (),\n+  is_restriction_valid (use_decl.get_mappings ().get_nodeid (),\n \t\t\tuse_decl.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::Function &func)\n {\n-  is_restriction_valid (func.get_mappings ().get_defid (), func.get_locus ());\n+  is_restriction_valid (func.get_mappings ().get_nodeid (), func.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::TypeAlias &type_alias)\n {\n-  is_restriction_valid (type_alias.get_mappings ().get_defid (),\n+  is_restriction_valid (type_alias.get_mappings ().get_nodeid (),\n \t\t\ttype_alias.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::StructStruct &struct_item)\n {\n-  is_restriction_valid (struct_item.get_mappings ().get_defid (),\n+  is_restriction_valid (struct_item.get_mappings ().get_nodeid (),\n \t\t\tstruct_item.get_locus ());\n   // FIXME: Check fields here as well\n }\n \n void\n PubRestrictedVisitor::visit (HIR::TupleStruct &tuple_struct)\n {\n-  is_restriction_valid (tuple_struct.get_mappings ().get_defid (),\n+  is_restriction_valid (tuple_struct.get_mappings ().get_nodeid (),\n \t\t\ttuple_struct.get_locus ());\n   // FIXME: Check fields here as well\n }\n \n void\n PubRestrictedVisitor::visit (HIR::Enum &enum_item)\n {\n-  is_restriction_valid (enum_item.get_mappings ().get_defid (),\n+  is_restriction_valid (enum_item.get_mappings ().get_nodeid (),\n \t\t\tenum_item.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::Union &union_item)\n {\n-  is_restriction_valid (union_item.get_mappings ().get_defid (),\n+  is_restriction_valid (union_item.get_mappings ().get_nodeid (),\n \t\t\tunion_item.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::ConstantItem &const_item)\n {\n-  is_restriction_valid (const_item.get_mappings ().get_defid (),\n+  is_restriction_valid (const_item.get_mappings ().get_nodeid (),\n \t\t\tconst_item.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::StaticItem &static_item)\n {\n-  is_restriction_valid (static_item.get_mappings ().get_defid (),\n+  is_restriction_valid (static_item.get_mappings ().get_nodeid (),\n \t\t\tstatic_item.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::Trait &trait)\n {\n-  is_restriction_valid (trait.get_mappings ().get_defid (), trait.get_locus ());\n+  is_restriction_valid (trait.get_mappings ().get_nodeid (),\n+\t\t\ttrait.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::ImplBlock &impl)\n {\n-  is_restriction_valid (impl.get_mappings ().get_defid (), impl.get_locus ());\n+  is_restriction_valid (impl.get_mappings ().get_nodeid (), impl.get_locus ());\n }\n \n void\n PubRestrictedVisitor::visit (HIR::ExternBlock &block)\n {\n-  is_restriction_valid (block.get_mappings ().get_defid (), block.get_locus ());\n+  is_restriction_valid (block.get_mappings ().get_nodeid (),\n+\t\t\tblock.get_locus ());\n }\n \n } // namespace Privacy"}, {"sha": "2685f3d1488a421c8fdf6a2029b5c3d517adaddb", "filename": "gcc/rust/privacy/rust-pub-restricted-visitor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -82,12 +82,12 @@ class PubRestrictedVisitor : public HIR::HIRVisItemVisitor\n    *\n    * In case of error, this function will emit the errors and return.\n    *\n-   * @param item_id DefId of the item to check the restriction of\n+   * @param item_id NodeId of the item to check the restriction of\n    * @param locus Location of the item being checked\n    *\n    * @return true if the visibility restriction is valid, false otherwise.\n    */\n-  bool is_restriction_valid (DefId item_id, const Location &locus);\n+  bool is_restriction_valid (NodeId item_id, const Location &locus);\n \n   virtual void visit (HIR::Module &mod);\n   virtual void visit (HIR::ExternCrate &crate);"}, {"sha": "a02740be3e85594fbddb0759447d8fb94a2a75de", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -32,7 +32,7 @@ VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings,\n void\n VisibilityResolver::go (HIR::Crate &crate)\n {\n-  mappings.insert_visibility (crate.get_mappings ().get_defid (),\n+  mappings.insert_visibility (crate.get_mappings ().get_nodeid (),\n \t\t\t      ModuleVisibility::create_public ());\n \n   for (auto &item : crate.items)\n@@ -103,15 +103,18 @@ VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n   switch (visibility.get_vis_type ())\n     {\n     case HIR::Visibility::PRIVATE:\n+      to_resolve = ModuleVisibility::create_private ();\n       return true;\n     case HIR::Visibility::PUBLIC:\n       to_resolve = ModuleVisibility::create_public ();\n       return true;\n-    case HIR::Visibility::RESTRICTED:\n-      // FIXME: We also need to handle 2015 vs 2018 edition conflicts\n-      to_resolve = ModuleVisibility::create_public ();\n-      return resolve_module_path (visibility.get_path (),\n-\t\t\t\t  to_resolve.get_module_id ());\n+      case HIR::Visibility::RESTRICTED: {\n+\t// FIXME: We also need to handle 2015 vs 2018 edition conflicts\n+\tauto id = UNKNOWN_DEFID;\n+\tauto result = resolve_module_path (visibility.get_path (), id);\n+\tto_resolve = ModuleVisibility::create_restricted (id);\n+\treturn result;\n+      }\n     default:\n       gcc_unreachable ();\n       return false;\n@@ -125,7 +128,7 @@ VisibilityResolver::resolve_and_update (const HIR::VisItem *item)\n   if (!resolve_visibility (item->get_visibility (), module_vis))\n     return; // we will already have emitted errors\n \n-  mappings.insert_visibility (item->get_mappings ().get_defid (), module_vis);\n+  mappings.insert_visibility (item->get_mappings ().get_nodeid (), module_vis);\n }\n \n void\n@@ -180,9 +183,9 @@ VisibilityResolver::visit (HIR::Enum &enum_item)\n   if (!resolve_visibility (enum_item.get_visibility (), vis))\n     return;\n \n-  mappings.insert_visibility (enum_item.get_mappings ().get_defid (), vis);\n+  mappings.insert_visibility (enum_item.get_mappings ().get_nodeid (), vis);\n   for (auto &variant : enum_item.get_variants ())\n-    mappings.insert_visibility (variant->get_mappings ().get_defid (), vis);\n+    mappings.insert_visibility (variant->get_mappings ().get_nodeid (), vis);\n }\n \n void\n@@ -208,9 +211,9 @@ VisibilityResolver::visit (HIR::Trait &trait)\n   if (!resolve_visibility (trait.get_visibility (), vis))\n     return;\n \n-  mappings.insert_visibility (trait.get_mappings ().get_defid (), vis);\n+  mappings.insert_visibility (trait.get_mappings ().get_nodeid (), vis);\n   for (auto &item : trait.get_trait_items ())\n-    mappings.insert_visibility (item->get_mappings ().get_defid (), vis);\n+    mappings.insert_visibility (item->get_mappings ().get_nodeid (), vis);\n }\n \n void"}, {"sha": "934331bd7aa71523fdbd8988f05daec4dd1c3b26", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -832,19 +832,19 @@ Mappings::lookup_macro_def (NodeId id, AST::MacroRulesDefinition **def)\n }\n \n void\n-Mappings::insert_visibility (DefId id, Privacy::ModuleVisibility visibility)\n+Mappings::insert_visibility (NodeId id, Privacy::ModuleVisibility visibility)\n {\n   visibility_map.insert ({id, visibility});\n }\n \n bool\n-Mappings::lookup_visibility (DefId id, Privacy::ModuleVisibility *def)\n+Mappings::lookup_visibility (NodeId id, Privacy::ModuleVisibility &def)\n {\n   auto it = visibility_map.find (id);\n   if (it == visibility_map.end ())\n     return false;\n \n-  *def = it->second;\n+  def = it->second;\n   return true;\n }\n "}, {"sha": "03bfd5f1a72739aa88c6bdc9937150685c35c40a", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/172624a7f9ce1ba16a89c7ee64861cb5447b7561/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=172624a7f9ce1ba16a89c7ee64861cb5447b7561", "patch": "@@ -319,8 +319,8 @@ class Mappings\n \n   bool lookup_macro_def (NodeId id, AST::MacroRulesDefinition **def);\n \n-  void insert_visibility (DefId id, Privacy::ModuleVisibility visibility);\n-  bool lookup_visibility (DefId id, Privacy::ModuleVisibility *def);\n+  void insert_visibility (NodeId id, Privacy::ModuleVisibility visibility);\n+  bool lookup_visibility (NodeId id, Privacy::ModuleVisibility &def);\n \n   void insert_module_child (NodeId module, NodeId child);\n   Optional<std::vector<NodeId> &> lookup_module_children (NodeId module);\n@@ -389,7 +389,7 @@ class Mappings\n   std::map<CrateNum, std::string> crate_names;\n \n   // Low level visibility map for each DefId\n-  std::map<DefId, Privacy::ModuleVisibility> visibility_map;\n+  std::map<NodeId, Privacy::ModuleVisibility> visibility_map;\n \n   // Module tree maps\n "}]}