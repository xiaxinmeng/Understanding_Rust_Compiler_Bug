{"sha": "1e66a9170071aded59dda09ac437757de4223346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2NmE5MTcwMDcxYWRlZDU5ZGRhMDlhYzQzNzc1N2RlNDIyMzM0Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-21T08:40:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-21T08:41:35Z"}, "message": "Fix segfault at run time on strict-alignment platforms\n\nThis fixes a regression present on the mainline and 11 branch by\nrestricting the problematic change dealing with bitfields whose\nnomimal subtype is self-referential to the cases where the size\nis really lower.\n\ngcc/ada/\n\t* gcc-interface/trans.c (Call_to_gnu): Restrict previous change\n\tto bitfields whose size is not equal to the type size.\n\t(gnat_to_gnu): Likewise.", "tree": {"sha": "ac2134904482b8c750c41ae164382aaad5c37a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2134904482b8c750c41ae164382aaad5c37a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e66a9170071aded59dda09ac437757de4223346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e66a9170071aded59dda09ac437757de4223346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e66a9170071aded59dda09ac437757de4223346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e66a9170071aded59dda09ac437757de4223346/comments", "author": null, "committer": null, "parents": [{"sha": "f1c777f40aa0b6941efc7440495a8d7e0cc2a1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c777f40aa0b6941efc7440495a8d7e0cc2a1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c777f40aa0b6941efc7440495a8d7e0cc2a1bb"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "adbbbb11aea7060f26305df27eed476f4867527e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e66a9170071aded59dda09ac437757de4223346/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e66a9170071aded59dda09ac437757de4223346/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1e66a9170071aded59dda09ac437757de4223346", "patch": "@@ -4611,6 +4611,8 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  || (gnu_target\n \t      && TREE_CODE (gnu_target) == COMPONENT_REF\n \t      && DECL_BIT_FIELD (TREE_OPERAND (gnu_target, 1))\n+\t      && DECL_SIZE (TREE_OPERAND (gnu_target, 1))\n+\t\t != TYPE_SIZE (TREE_TYPE (gnu_target))\n \t      && type_is_padding_self_referential (gnu_result_type))))\n     {\n       gnu_retval = create_temporary (\"R\", gnu_result_type);\n@@ -8370,7 +8372,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t much data.  But do not remove it if it is already too small.  */\n       if (type_is_padding_self_referential (TREE_TYPE (gnu_result))\n \t  && !(TREE_CODE (gnu_result) == COMPONENT_REF\n-\t       && DECL_BIT_FIELD (TREE_OPERAND (gnu_result, 1))))\n+\t       && DECL_BIT_FIELD (TREE_OPERAND (gnu_result, 1))\n+\t       && DECL_SIZE (TREE_OPERAND (gnu_result, 1))\n+\t\t  != TYPE_SIZE (TREE_TYPE (gnu_result))))\n \tgnu_result = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_result))),\n \t\t\t      gnu_result);\n     }"}]}