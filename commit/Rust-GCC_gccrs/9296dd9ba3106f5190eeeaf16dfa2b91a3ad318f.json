{"sha": "9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5NmRkOWJhMzEwNmY1MTkwZWVlYWYxNmRmYTJiOTFhM2FkMzE4Zg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-07-06T14:37:28Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-07-06T14:37:28Z"}, "message": "Add support for ARMv8-R architecture\n\n2017-07-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm-cpus.in (armv8-r): Add new entry.\n    * config/arm/arm-isa.h (ISA_ARMv8r): Define macro.\n    * config/arm/arm-tables.opt: Regenerate.\n    * config/arm/arm.h (enum base_architecture): Add BASE_ARCH_8R\n    enumerator.\n    * doc/invoke.texi: Mention -march=armv8-r and its extensions.\n\n    gcc/testsuite/\n    * lib/target-supports.exp: Generate\n    check_effective_target_arm_arch_v8r_ok, add_options_for_arm_arch_v8r\n    and check_effective_target_arm_arch_v8r_multilib.\n\n    libgcc/\n    * config/arm/lib1funcs.S: Defined __ARM_ARCH__ to 8 for ARMv8-R.\n\nFrom-SVN: r250025", "tree": {"sha": "d8bad12359e620dab86bd7db84a80946579cda92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bad12359e620dab86bd7db84a80946579cda92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/comments", "author": null, "committer": null, "parents": [{"sha": "d87f00baa2444a85a43c3a532eba40b3b3fa4918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87f00baa2444a85a43c3a532eba40b3b3fa4918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87f00baa2444a85a43c3a532eba40b3b3fa4918"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "9324ce17fdc0f1caacd38fd6af447ea4f4db689a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -1,6 +1,15 @@\n+2017-07-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv8-r): Add new entry.\n+\t* config/arm/arm-isa.h (ISA_ARMv8r): Define macro.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm.h (enum base_architecture): Add BASE_ARCH_8R\n+\tenumerator.\n+\t* doc/invoke.texi: Mention -march=armv8-r and its extensions.\n+\n 2017-07-06  Carl Love  <cel@us.ibm.com>\n \n- \t* ChangeLog: Clean up from mid air collision\n+\t* ChangeLog: Clean up from mid air collision\n \n 2017-07-06  Carl Love  <cel@us.ibm.com>\n "}, {"sha": "f35128acb7d68c6a0592355b9d3d56ee8f826aca", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -380,6 +380,22 @@ begin arch armv8-m.main\n  option nodsp remove bit_ARMv7em\n end arch armv8-m.main\n \n+begin arch armv8-r\n+ tune for cortex-r4\n+ tune flags CO_PROC\n+ base 8R\n+ profile R\n+ isa ARMv8r\n+ option crc add bit_crc32\n+# fp.sp => fp-armv8 (d16); simd => simd + fp-armv8 + d32 + double precision\n+# note: no fp option for fp-armv8 (d16) + double precision at the moment\n+ option fp.sp add FP_ARMv8\n+ option simd add FP_ARMv8 NEON\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n+end arch armv8-r\n+\n begin arch iwmmxt\n  tune for iwmmxt\n  tune flags LDSCHED STRONG XSCALE"}, {"sha": "0d66a0400c517668db023fc66ff43e26d43add51", "filename": "gcc/config/arm/arm-isa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-isa.h?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -127,6 +127,7 @@ enum isa_feature\n #define ISA_ARMv8_2a\tISA_ARMv8_1a, isa_bit_ARMv8_2\n #define ISA_ARMv8m_base ISA_ARMv6m, isa_bit_ARMv8, isa_bit_cmse, isa_bit_tdiv\n #define ISA_ARMv8m_main ISA_ARMv7m, isa_bit_ARMv8, isa_bit_cmse\n+#define ISA_ARMv8r\tISA_ARMv8a\n \n /* List of all cryptographic extensions to stripout if crypto is\n    disabled.  Currently, that's trivial, but we define it anyway for"}, {"sha": "51678c2566e841894c5c0e9c613c8c0f832e9988", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -455,10 +455,13 @@ EnumValue\n Enum(arm_arch) String(armv8-m.main) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(31)\n+Enum(arm_arch) String(armv8-r) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(32)\n+Enum(arm_arch) String(iwmmxt) Value(32)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(33)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "315622212a5ce10d0c771535fe31f63c3be16444", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -384,7 +384,8 @@ enum base_architecture\n   BASE_ARCH_7EM = 7,\n   BASE_ARCH_8A = 8,\n   BASE_ARCH_8M_BASE = 8,\n-  BASE_ARCH_8M_MAIN = 8\n+  BASE_ARCH_8M_MAIN = 8,\n+  BASE_ARCH_8R = 8\n };\n \n /* The major revision number of the ARM Architecture implemented by the target.  */"}, {"sha": "d0b90503cedaae32bc83c7fd1fdd78b2a4d7184b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -15218,6 +15218,7 @@ Permissible names are:\n @samp{armv7}, @samp{armv7-a}, @samp{armv7ve}, \n @samp{armv8-a}, @samp{armv8.1-a}, @samp{armv8.2-a},\n @samp{armv7-r},\n+@samp{armv8-r},\n @samp{armv6-m}, @samp{armv6s-m},\n @samp{armv7-m}, @samp{armv7e-m},\n @samp{armv8-m.base}, @samp{armv8-m.main},\n@@ -15484,7 +15485,20 @@ The single- and double-precision floating-point instructions.\n \n @item +nofp\n Disable the floating-point extension.\n+@end table\n \n+@item armv8-r\n+@table @samp\n+@item +crc\n+The Cyclic Redundancy Check (CRC) instructions.\n+@item +simd\n+The ARMv8 Advanced SIMD and floating-point instructions.\n+@item +crypto\n+The cryptographic instructions.\n+@item +nocrypto\n+Disable the cryptographic isntructions.\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n @end table\n \n @end table"}, {"sha": "1a838952269744052ccfd4fa1ab218116fee6929", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -1,6 +1,12 @@\n+2017-07-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp: Generate\n+\tcheck_effective_target_arm_arch_v8r_ok, add_options_for_arm_arch_v8r\n+\tand check_effective_target_arm_arch_v8r_multilib.\n+\n 2017-07-06  Carl Love  <cel@us.ibm.com>\n \n- \t* ChangeLog: Clean up from mid air collision\n+\t* ChangeLog: Clean up from mid air collision\n \n 2017-07-06  Carl Love  <cel@us.ibm.com>\n "}, {"sha": "7fb51ccb3e2d5ac2f5f807bbc05697d01a1a69de", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -3901,7 +3901,8 @@ foreach { armfunc armflag armdefs } {\n \tv8_2a \"-march=armv8.2a\" __ARM_ARCH_8A__\n \tv8m_base \"-march=armv8-m.base -mthumb -mfloat-abi=soft\"\n \t\t__ARM_ARCH_8M_BASE__\n-\tv8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n+\tv8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__\n+\tv8r \"-march=armv8-r\" __ARM_ARCH_8R__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEFS $armdefs ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&"}, {"sha": "6aee40e4b30633e2cd78701df89c72e500dbd79d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -1,3 +1,7 @@\n+2017-07-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/lib1funcs.S: Defined __ARM_ARCH__ to 8 for ARMv8-R.\n+\n 2017-07-03  Olivier Hainque  <hainque@adacore.com>\n \n         * config/t-vxworks7: New file, really."}, {"sha": "8d8c3cead5f77f6dfeb2887e68483119ee3a400a", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=9296dd9ba3106f5190eeeaf16dfa2b91a3ad318f", "patch": "@@ -109,7 +109,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n #if defined(__ARM_ARCH_8A__) || defined(__ARM_ARCH_8M_BASE__) \\\n-\t|| defined(__ARM_ARCH_8M_MAIN__)\n+\t|| defined(__ARM_ARCH_8M_MAIN__) || defined(__ARM_ARCH_8R__)\n # define __ARM_ARCH__ 8\n #endif\n "}]}