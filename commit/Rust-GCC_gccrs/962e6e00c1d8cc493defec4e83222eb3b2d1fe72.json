{"sha": "962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyZTZlMDBjMWQ4Y2M0OTNkZWZlYzRlODMyMjJlYjNiMmQxZmU3Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-02T23:57:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-02T23:57:12Z"}, "message": "bugreport.texi, [...]: Avoid some first-person references and patronizing comments.\n\n\t* doc/bugreport.texi, doc/configterms.texi, doc/contrib.texi,\n\tdoc/contribute.texi, doc/cpp.texi, doc/cppinternals.texi,\n\tdoc/extend.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n\tdoc/portability.texi, doc/tree-ssa.texi, doc/trouble.texi: Avoid\n\tsome first-person references and patronizing comments.  Based on\n\tprinted manual.\n\t* doc/invoke.texi: Don't reference fortran@gnu.org.\n\t* doc/trouble.texi (Warning when a non-void function value is\n\tignored): Rewrite.  From Russ Allbery and Chris Devers.\n\nFrom-SVN: r84034", "tree": {"sha": "958b578b1dceccdb7246fb9f76df3bb9c636e4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958b578b1dceccdb7246fb9f76df3bb9c636e4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9634d537130407bc8ea2ada9508e2386e1b714b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9634d537130407bc8ea2ada9508e2386e1b714b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9634d537130407bc8ea2ada9508e2386e1b714b"}], "stats": {"total": 160, "additions": 89, "deletions": 71}, "files": [{"sha": "479cec5166e089b72839dc9caa50021421129dc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1,3 +1,15 @@\n+2004-07-03  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/bugreport.texi, doc/configterms.texi, doc/contrib.texi,\n+\tdoc/contribute.texi, doc/cpp.texi, doc/cppinternals.texi,\n+\tdoc/extend.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n+\tdoc/portability.texi, doc/tree-ssa.texi, doc/trouble.texi: Avoid\n+\tsome first-person references and patronizing comments.  Based on\n+\tprinted manual.\n+\t* doc/invoke.texi: Don't reference fortran@gnu.org.\n+\t* doc/trouble.texi (Warning when a non-void function value is\n+\tignored): Rewrite.  From Russ Allbery and Chris Devers.\n+\n 2004-07-02  Daniel Berlin  <dberlin@dberlin.org)\n \n \t* tree-ssa-pre.c (bitmap_set_t): New."}, {"sha": "9e10af910dc3deb751374790b1dd6b3d87cdbf88", "filename": "gcc/doc/bugreport.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -76,8 +76,8 @@ compiler bug.\n @item\n If the compiler does not produce an error message for invalid input,\n that is a compiler bug.  However, you should note that your idea of\n-``invalid input'' might be my idea of ``an extension'' or ``support\n-for traditional practice''.\n+``invalid input'' might be someone else's idea of ``an extension'' or\n+``support for traditional practice''.\n \n @item\n If you are an experienced user of one of the languages GCC supports, your\n@@ -88,7 +88,7 @@ suggestions for improvement of GCC are welcome in any case.\n @section How and where to Report Bugs\n @cindex compiler bugs, reporting\n \n-Bugs should be reported to our bug database.  Please refer to\n+Bugs should be reported to the GCC bug database.  Please refer to\n @uref{http://gcc.gnu.org/bugs.html} for up-to-date instructions how to\n submit bug reports.  Copies of this file in HTML (@file{bugs.html}) and\n plain text (@file{BUGS}) are also part of GCC releases."}, {"sha": "f97de5bd0966f3c12e2baa101e5762f84bab99a5", "filename": "gcc/doc/configterms.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fconfigterms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fconfigterms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigterms.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+@c Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -34,8 +34,8 @@ different system.  Some people call this a @dfn{host-x-host},\n @dfn{crossed native}, or @dfn{cross-built native}.  If build and target\n are the same, but host is different, you are using a cross compiler to\n build a cross compiler that produces code for the machine you're\n-building on.  This is rare, so there is no common way of describing it\n-(although I propose calling it a @dfn{crossback}).\n+building on.  This is rare, so there is no common way of describing it.\n+There is a proposal to call this a @dfn{crossback}.\n \n If build and host are the same, the GCC you are building will also be\n used to build the target libraries (like @code{libstdc++}).  If build and host"}, {"sha": "c43d6fbdfe3d476208fc7deb5bf506c05a5c3ca3", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -59,7 +59,7 @@ Jon Beniston for his Microsoft Windows port of Java.\n \n @item\n Daniel Berlin for better DWARF2 support, faster/better optimizations,\n-improved alias analysis, plus migrating us to Bugzilla.\n+improved alias analysis, plus migrating GCC to Bugzilla.\n \n @item\n Geoff Berry for his Java object serialization work and various patches.\n@@ -84,7 +84,7 @@ Eric Botcazou for fixing middle- and backend bugs left and right.\n \n @item\n Per Bothner for his direction via the steering committee and various\n-improvements to our infrastructure for supporting new languages.  Chill\n+improvements to the infrastructure for supporting new languages.  Chill\n front end implementation.  Initial implementations of\n cpplib, fix-header, config.guess, libio, and past C++ library (libg++)\n maintainer.  Dreaming up, designing and implementing much of GCJ.\n@@ -289,7 +289,7 @@ via the steering committee.\n Anthony Green for his @option{-Os} contributions and Java front end work.\n \n @item\n-Stu Grossman for gdb hacking, allowing GCJ developers to debug our code.\n+Stu Grossman for gdb hacking, allowing GCJ developers to debug Java code.\n \n @item\n Michael K. Gschwind contributed the port to the PDP-11.\n@@ -340,7 +340,7 @@ Kazu Hirata for caring and feeding the Renesas H8/300 port and various fixes.\n \n @item\n Manfred Hollstein for his ongoing work to keep the m88k alive, lots\n-of testing and bug fixing, particularly of our configury code.\n+of testing and bug fixing, particularly of GCC configury code.\n \n @item\n Steve Holmgren for MachTen patches.\n@@ -630,7 +630,7 @@ Stefan Olsson for work on mt_alloc.\n Melissa O'Neill for various NeXT fixes.\n \n @item\n-Rainer Orth for random MIPS work, including improvements to our o32\n+Rainer Orth for random MIPS work, including improvements to GCC's o32\n ABI support, improvements to dejagnu's MIPS support, Java configuration\n clean-ups and porting work, etc.\n \n@@ -701,7 +701,7 @@ documentation in texinfo format by contributing a first pass at a\n translation of the old @file{g77-0.5.16/f/DOC} file.\n \n @item\n-Ken Rose for fixes to our delay slot filling code.\n+Ken Rose for fixes to GCC's delay slot filling code.\n \n @item\n Paul Rubin wrote most of the preprocessor.\n@@ -763,7 +763,7 @@ folding and help with the original VAX & m68k ports.\n \n @item\n Kenny Simpson for prompting libstdc++ fixes due to defect reports from\n-the LWG (thereby keeping us in line with updates from the ISO).\n+the LWG (thereby keeping GCC in line with updates from the ISO).\n \n @item\n Franz Sirl for his ongoing work with making the PPC port stable"}, {"sha": "a90c048326dec322362fbe7aa262b6eb22a0f854", "filename": "gcc/doc/contribute.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcontribute.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcontribute.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontribute.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1,13 +1,13 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n @node Contributing\n @chapter Contributing to GCC Development\n \n If you would like to help pretest GCC releases to assure they work well,\n-our current development sources are available by CVS (see\n+current development sources are available by CVS (see\n @uref{http://gcc.gnu.org/cvs.html}).  Source and binary snapshots are\n also available for FTP; see @uref{http://gcc.gnu.org/snapshots.html}.\n "}, {"sha": "62151645c688879d88dd0ec9f422a5d0cc9a92f0", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1898,7 +1898,8 @@ or a C++ compiler.  This macro is similar to @code{__STDC_VERSION__}, in\n that it expands to a version number.  A fully conforming implementation\n of the 1998 C++ standard will define this macro to @code{199711L}.  The\n GNU C++ compiler is not yet fully conforming, so it uses @code{1}\n-instead.  We hope to complete our implementation in the near future.\n+instead.  It is hoped to complete the implementation of standard C++\n+in the near future.\n \n @item __OBJC__\n This macro is defined, with value 1, when the Objective-C compiler is in\n@@ -2542,7 +2543,7 @@ definition.  Recall that all macro definitions are rescanned for more\n macros to replace.  If the self-reference were considered a use of the\n macro, it would produce an infinitely large expansion.  To prevent this,\n the self-reference is not considered a macro call.  It is passed into\n-the preprocessor output unchanged.  Let's consider an example:\n+the preprocessor output unchanged.  Consider an example:\n \n @smallexample\n #define foo (4 + foo)\n@@ -3836,10 +3837,10 @@ pragmas.\n \n CPP has a small number of internal limits.  This section lists the\n limits which the C standard requires to be no lower than some minimum,\n-and all the others we are aware of.  We intend there to be as few limits\n+and all the others known.  It is intended that there should be as few limits\n as possible.  If you encounter an undocumented or inconvenient limit,\n-please report that to us as a bug.  (See the section on reporting bugs in\n-the GCC manual.)\n+please report that as a bug.  @xref{Bugs, , Reporting Bugs, gcc, Using\n+the GNU Compiler Collection (GCC)}.\n \n Where we say something is limited @dfn{only by available memory}, that\n means that internal data structures impose no intrinsic limit, and space"}, {"sha": "9f5863c3b702fa03dcec572e1f0b528cc341441f", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -16,7 +16,7 @@\n @ifinfo\n This file documents the internals of the GNU C Preprocessor.\n \n-Copyright 2000, 2001, 2002 Free Software Foundation, Inc.\n+Copyright 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice\n@@ -47,7 +47,7 @@ into another language, under the above conditions for modified versions.\n @page\n @vskip 0pt plus 1filll\n @c man begin COPYRIGHT\n-Copyright @copyright{} 2000, 2001, 2002\n+Copyright @copyright{} 2000, 2001, 2002, 2004\n Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n@@ -368,8 +368,8 @@ chaining a new token run on to the end of the existing one.\n \n The tokens forming a macro's replacement list are collected by the\n @code{#define} handler, and placed in storage that is only freed by\n-@code{cpp_destroy}.  So if a macro is expanded in our line of tokens,\n-the pointers to the tokens of its expansion that we return will always\n+@code{cpp_destroy}.  So if a macro is expanded in the line of tokens,\n+the pointers to the tokens of its expansion that are returned will always\n remain valid.  However, macros are a little trickier than that, since\n they give rise to three sources of fresh tokens.  They are the built-in\n macros like @code{__LINE__}, and the @samp{#} and @samp{##} operators\n@@ -640,8 +640,8 @@ is safe.\n @cindex spacing\n @cindex token spacing\n \n-First, let's look at an issue that only concerns the stand-alone\n-preprocessor: we want to guarantee that re-reading its preprocessed\n+First, consider an issue that only concerns the stand-alone\n+preprocessor: there needs to be a guarantee that re-reading its preprocessed\n output results in an identical token stream.  Without taking special\n measures, this might not be the case because of macro substitution.\n For example:\n@@ -670,7 +670,7 @@ expansion, but accidental pasting can occur in many places: both before\n and after each macro replacement, each argument replacement, and\n additionally each token created by the @samp{#} and @samp{##} operators.\n \n-Let's look at how the preprocessor gets whitespace output correct\n+Look at how the preprocessor gets whitespace output correct\n normally.  The @code{cpp_token} structure contains a flags byte, and one\n of those flags is @code{PREV_WHITE}.  This is flagged by the lexer, and\n indicates that the token was preceded by whitespace of some form other\n@@ -719,11 +719,11 @@ a macro's first replacement token expands straight into another macro.\n \n Here, two padding tokens are generated with sources the @samp{foo} token\n between the brackets, and the @samp{bar} token from foo's replacement\n-list, respectively.  Clearly the first padding token is the one we\n-should use, so our output code should contain a rule that the first\n+list, respectively.  Clearly the first padding token is the one to\n+use, so the output code should contain a rule that the first\n padding token in a sequence is the one that matters.\n \n-But what if we happen to leave a macro expansion?  Adjusting the above\n+But what if a macro expansion is left?  Adjusting the above\n example slightly:\n \n @smallexample"}, {"sha": "0d2798f2a1ee3473522568da826984c687418856", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -524,7 +524,7 @@ follows:\n @cindex side effects, macro argument\n But this definition computes either @var{a} or @var{b} twice, with bad\n results if the operand has side effects.  In GNU C, if you know the\n-type of the operands (here let's assume @code{int}), you can define\n+type of the operands (here taken as @code{int}), you can define\n the macro safely as follows:\n \n @smallexample\n@@ -1021,7 +1021,7 @@ char *y[4];\n @end smallexample\n \n To see the meaning of the declaration using @code{typeof}, and why it\n-might be a useful way to write, let's rewrite it with these macros:\n+might be a useful way to write, rewrite it with these macros:\n \n @smallexample\n #define pointer(T)  typeof(T *)\n@@ -8063,7 +8063,7 @@ intelligence from the environment than one usually finds on a UNIX\n system.  Somehow the compiler and linker have to make sure that each\n template instance occurs exactly once in the executable if it is needed,\n and not at all otherwise.  There are two basic approaches to this\n-problem, which I will refer to as the Borland model and the Cfront model.\n+problem, which are referred to as the Borland model and the Cfront model.\n \n @table @asis\n @item Borland model"}, {"sha": "71070532e25aa035c1c974ee42676fd0526a71a2", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -431,7 +431,7 @@ tarballs compressed with @command{gzip} or\n @command{bzip2}.  It is possible to download a full distribution or specific\n components.\n \n-Please refer to our @uref{http://gcc.gnu.org/releases.html,,releases web page}\n+Please refer to the @uref{http://gcc.gnu.org/releases.html,,releases web page}\n for information on how to obtain GCC@.\n \n The full distribution includes the C, C++, Objective-C, Fortran 77, Fortran\n@@ -1688,7 +1688,7 @@ might emit some harmless messages resembling\n @samp{WARNING: Couldn't find the global config file.} or\n @samp{WARNING: Couldn't find tool init file} that can be ignored.\n \n-@section How can I run the testsuite on selected tests?\n+@section How can you run the testsuite on selected tests?\n \n In order to run sets of tests selectively, there are targets\n @samp{make check-gcc} and @samp{make check-g++}\n@@ -1831,9 +1831,9 @@ WARNING: the testsuite detected a possible problem\n @end itemize\n \n It is normal for some tests to report unexpected failures.  At the\n-current time our testing harness does not allow fine grained control\n-over whether or not a test is expected to fail.  We expect to fix this\n-problem in future releases.\n+current time the testing harness does not allow fine grained control\n+over whether or not a test is expected to fail.  This problem should\n+be fixed in future releases.\n \n \n @section Submitting test results\n@@ -1932,7 +1932,7 @@ Include the following information:\n \n @itemize @bullet\n @item\n-Output from running @file{@var{srcdir}/config.guess}.  Do not send us\n+Output from running @file{@var{srcdir}/config.guess}.  Do not send\n that file itself, just the one-line output from running it.\n \n @item\n@@ -1981,9 +1981,9 @@ We'd also like to know if the\n @end ifhtml\n didn't include your host/target information or if that information is\n incomplete or out of date.  Send a note to\n-@email{gcc@@gcc.gnu.org} telling us how the information should be changed.\n+@email{gcc@@gcc.gnu.org} detailing how the information should be changed.\n \n-If you find a bug, please report it following our\n+If you find a bug, please report it following the\n @uref{../bugs.html,,bug reporting guidelines}.\n \n If you want to print the GCC manuals, do @samp{cd @var{objdir}; make\n@@ -2529,7 +2529,7 @@ information about this platform is available at\n @end html\n @heading @anchor{dos}DOS\n \n-Please have a look at our @uref{binaries.html,,binaries page}.\n+Please have a look at the @uref{binaries.html,,binaries page}.\n \n You cannot install GCC by itself on MSDOS; it will not compile under\n any MSDOS compiler except itself.  You need to get the complete\n@@ -2590,7 +2590,7 @@ Shared @file{libgcc_s.so} is now built and installed by default.\n @heading @anchor{h8300-hms}h8300-hms\n Renesas H8/300 series of processors.\n \n-Please have a look at our @uref{binaries.html,,binaries page}.\n+Please have a look at the @uref{binaries.html,,binaries page}.\n \n The calling convention and structure layout has changed in release 2.6.\n All code must be recompiled.  The calling convention now passes the\n@@ -3392,7 +3392,7 @@ supported as cross-compilation target only.\n @heading @anchor{*-*-solaris2*}*-*-solaris2*\n \n Sun does not ship a C compiler with Solaris 2.  To bootstrap and install\n-GCC you first have to install a pre-built compiler, see our\n+GCC you first have to install a pre-built compiler, see the\n @uref{binaries.html,,binaries page} for details.\n \n The Solaris 2 @command{/bin/sh} will often fail to configure"}, {"sha": "13f9c0873569201850f7d5adfab83325bbd2a556", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -2332,7 +2332,7 @@ future implementation may also work for C++ programs.\n The C standard is worded confusingly, therefore there is some debate\n over the precise meaning of the sequence point rules in subtle cases.\n Links to discussions of the problem, including proposed formal\n-definitions, may be found on our readings page, at\n+definitions, may be found on the GCC readings page, at\n @w{@uref{http://gcc.gnu.org/readings.html}}.\n \n @item -Wreturn-type\n@@ -4473,11 +4473,10 @@ These two options are intended to be removed someday, once\n they have helped determine the efficacy of various\n approaches to improving loop optimizations.\n \n-Please let us (@w{@email{gcc@@gcc.gnu.org}} and @w{@email{fortran@@gnu.org}})\n-know how use of these options affects\n-the performance of your production code.\n-We're very interested in code that runs @emph{slower}\n-when these options are @emph{enabled}.\n+Please contact @w{@email{gcc@@gcc.gnu.org}}, and describe how use of\n+these options affects the performance of your production code.\n+Examples of code that runs @emph{slower} when these options are\n+@emph{enabled} are very valuable.\n \n @item -fno-peephole\n @itemx -fno-peephole2\n@@ -4690,7 +4689,7 @@ Enabled at levels @option{-O2}, @option{-O3}.\n @item -fweb\n @opindex fweb\n Constructs webs as commonly used for register allocation purposes and assign\n-each web individual pseudo register.  This allows our register allocation pass\n+each web individual pseudo register.  This allows the register allocation pass\n to operate on pseudos directly, but also strengthens several other optimization\n passes, such as CSE, loop optimizer and trivial dead code remover.  It can,\n however, make debugging impossible, since variables will no longer stay in a"}, {"sha": "08c7d7ce2c2f2f51f5ac7aeb732645a44965a6bb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -5678,13 +5678,14 @@ single or double precision, but not both, the following could be specified:\n \n @strong{Note:} The scheduler attempts to avoid function unit conflicts\n and uses all the specifications in the @code{define_function_unit}\n-expression.  It has recently come to our attention that these\n+expression.  It has recently been discovered that these\n specifications may not allow modeling of some of the newer\n ``superscalar'' processors that have insns using multiple pipelined\n units.  These insns will cause a potential conflict for the second unit\n used during their execution and there is no way of representing that\n-conflict.  We welcome any examples of how function unit conflicts work\n-in such processors and suggestions for their representation.\n+conflict.  Any examples of how function unit conflicts work\n+in such processors and suggestions for their representation would be\n+welcomed.\n \n @end ifset\n @ifset INTERNALS"}, {"sha": "e65e979fccabafd7d6694ac00194b657a1e8aedf", "filename": "gcc/doc/portability.texi", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fportability.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Fportability.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fportability.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -18,9 +18,9 @@ GCC gets most of the information about the target machine from a machine\n description which gives an algebraic formula for each of the machine's\n instructions.  This is a very clean way to describe the target.  But when\n the compiler needs information that is difficult to express in this\n-fashion, I have not hesitated to define an ad-hoc parameter to the machine\n-description.  The purpose of portability is to reduce the total work needed\n-on the compiler; it was not of interest for its own sake.\n+fashion, ad-hoc parameters have been defined for machine descriptions.\n+The purpose of portability is to reduce the total work needed on the\n+compiler; it was not of interest for its own sake.\n \n @cindex endianness\n @cindex autoincrement addressing, availability\n@@ -31,9 +31,10 @@ significant byte has the highest or lowest address of the bytes in a word)\n and the availability of autoincrement addressing.  In the RTL-generation\n pass, it is often necessary to have multiple strategies for generating code\n for a particular kind of syntax tree, strategies that are usable for different\n-combinations of parameters.  Often I have not tried to address all possible\n-cases, but only the common ones or only the ones that I have encountered.\n-As a result, a new target may require additional strategies.  You will know\n+combinations of parameters.  Often, not all possible cases have been\n+addressed, but only the common ones or only the ones that have been\n+encountered.  As a result, a new target may require additional\n+strategies.  You will know\n if this happens because the compiler will call @code{abort}.  Fortunately,\n the new strategies can be added in a machine-independent fashion, and will\n affect only the target machines that need them."}, {"sha": "4b5e61684ac209caa5359e29d93822e8b6fffa2d", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -408,7 +408,7 @@ block exits, the cleanup is run.\n \n @code{TRY_FINALLY_EXPR} complicates the flow graph, since the cleanup\n needs to appear on every edge out of the controlled block; this\n-reduces our freedom to move code across these edges.  Therefore, the\n+reduces the freedom to move code across these edges.  Therefore, the\n EH lowering pass which runs before most of the optimization passes\n eliminates these expressions by explicitly adding the cleanup to each\n edge."}, {"sha": "39273c33e02c22411f10ae94b33a34847fbdf263", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962e6e00c1d8cc493defec4e83222eb3b2d1fe72/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=962e6e00c1d8cc493defec4e83222eb3b2d1fe72", "patch": "@@ -129,7 +129,7 @@ Older GDB versions sometimes fail to read the output of GCC version\n DBX rejects some files produced by GCC, though it accepts similar\n constructs in output from PCC@.  Until someone can supply a coherent\n description of what is valid DBX input and what is not, there is\n-nothing I can do about these problems.  You are on your own.\n+nothing that can be done about these problems.\n \n @item\n The GNU assembler (GAS) does not support PIC@.  To generate PIC code, you\n@@ -509,8 +509,7 @@ ISO C does not permit such a construct.\n \n @item\n K&R compilers allow comments to cross over an inclusion boundary\n-(i.e.@: started in an include file and ended in the including file).  I think\n-this would be quite ugly and can't imagine it could be needed.\n+(i.e.@: started in an include file and ended in the including file).\n \n @cindex external declaration scope\n @cindex scope of external declarations\n@@ -1242,11 +1241,16 @@ more annoyance than good.\n @item\n Warning when a non-void function value is ignored.\n \n-Coming as I do from a Lisp background, I balk at the idea that there is\n-something dangerous about discarding a value.  There are functions that\n-return values which some callers may find useful; it makes no sense to\n-clutter the program with a cast to @code{void} whenever the value isn't\n-useful.\n+C contains many standard functions that return a value that most\n+programs choose to ignore.  One obvious example is @code{printf}.\n+Warning about this practice only leads the defensive programmer to\n+clutter programs with dozens of casts to @code{void}.  Such casts are\n+required so frequently that they become visual noise.  Writing those\n+casts becomes so automatic that they no longer convey useful\n+information about the intentions of the programmer.  For functions\n+where the return value should never be ignored, use the\n+@code{warn_unused_result} function attribute (@pxref{Function\n+Attributes}).\n \n @item\n @opindex fshort-enums"}]}