{"sha": "4f5afe7d1af4339a5a420fe15b40c74f328daa86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1YWZlN2QxYWY0MzM5YTVhNDIwZmUxNWI0MGM3NGYzMjhkYWE4Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-07-18T00:29:20Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-18T00:29:20Z"}, "message": "gmon-sol2.c: Silence compilation warnings by partially synchronizing code with...\n\n\n\t* config/i386/gmon-sol2.c: Silence compilation warnings by partially\n\tsynchronizing code with config/sparc/gmon-sol2.c.  Remove #if 0\n\tblocks.  #include \"tconfig.h\" and \"tsystem.h\" to prototype system\n\tfunctions such as sbrk, write, etc..  Add function prototypes.\n\tConvert function declarations from K&R to ISO C.  Cast pointers\n\tto \"long\" and \"unsigned long\" instead of \"int\" and \"unsigned int\".\n\tConvert tokens following #endif into comments.\n\n\nCo-Authored-By: Rainer Orth <ro@TechFak.Uni-Bielefeld.DE>\n\nFrom-SVN: r115540", "tree": {"sha": "821d26eb0c7bf5f7f2ac2b8603e0a490fc58b56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821d26eb0c7bf5f7f2ac2b8603e0a490fc58b56c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f5afe7d1af4339a5a420fe15b40c74f328daa86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5afe7d1af4339a5a420fe15b40c74f328daa86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5afe7d1af4339a5a420fe15b40c74f328daa86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5afe7d1af4339a5a420fe15b40c74f328daa86/comments", "author": null, "committer": null, "parents": [{"sha": "d4bc44eadf50f3d2ee682775e75f185ef664458d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4bc44eadf50f3d2ee682775e75f185ef664458d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4bc44eadf50f3d2ee682775e75f185ef664458d"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "ffc72e0ceab9c475393cbc78dca54ad97736040e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5afe7d1af4339a5a420fe15b40c74f328daa86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5afe7d1af4339a5a420fe15b40c74f328daa86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f5afe7d1af4339a5a420fe15b40c74f328daa86", "patch": "@@ -1,3 +1,14 @@\n+2006-07-17  Roger Sayle  <roger@eyesopen.com>\n+\t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config/i386/gmon-sol2.c: Silence compilation warnings by partially\n+\tsynchronizing code with config/sparc/gmon-sol2.c.  Remove #if 0\n+\tblocks.  #include \"tconfig.h\" and \"tsystem.h\" to prototype system\n+\tfunctions such as sbrk, write, etc..  Add function prototypes.\n+\tConvert function declarations from K&R to ISO C.  Cast pointers\n+\tto \"long\" and \"unsigned long\" instead of \"int\" and \"unsigned int\".\n+\tConvert tokens following #endif into comments.\n+\n 2006-07-17  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* invoke.texi: Remove mention of f77; Reformat table for"}, {"sha": "fc5a2cf61034a1153d5bc51bde7e14a7e28d1678", "filename": "gcc/config/i386/gmon-sol2.c", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5afe7d1af4339a5a420fe15b40c74f328daa86/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5afe7d1af4339a5a420fe15b40c74f328daa86/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c?ref=4f5afe7d1af4339a5a420fe15b40c74f328daa86", "patch": "@@ -53,22 +53,19 @@\n  * This code could easily be integrated with the original gmon.c and perhaps\n  * should be.\n  */\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include <fcntl.h> /* for creat() */\n \n-#ifndef lint\n-static char sccsid[] = \"@(#)gmon.c\t5.3 (Berkeley) 5/22/91\";\n-#endif /* not lint */\n-\n-#if 0\n-#include <unistd.h>\n-\n-#endif\n #ifdef DEBUG\n #include <stdio.h>\n #endif\n \n-#if 0\n-#include \"i386/gmon.h\"\n-#else\n+static void moncontrol (int);\n+extern void monstartup (char *, char *);\n+extern void _mcleanup (void);\n+extern void internal_mcount (void);\n+\n \n struct phdr {\n                 char    *lpc;\n@@ -90,21 +87,17 @@ struct tostruct {\n   long count;\n   unsigned short link;\n };\n+\n struct rawarc {\n     unsigned long       raw_frompc;\n     unsigned long       raw_selfpc;\n     long                raw_count;\n };\n #define ROUNDDOWN(x,y)  (((x)/(y))*(y))\n #define ROUNDUP(x,y)    ((((x)+(y)-1)/(y))*(y))\n-#endif\n \n /* char *minbrk; */\n \n-#ifdef __alpha\n-extern char *sbrk ();\n-#endif\n-\n     /*\n      *\tfroms is actually a bunch of unsigned shorts indexing tos\n      */\n@@ -126,9 +119,8 @@ static int\ts_scale;\n \n extern int errno;\n \n-monstartup(lowpc, highpc)\n-    char\t*lowpc;\n-    char\t*highpc;\n+void\n+monstartup(char *lowpc, char *highpc)\n {\n     int\t\t\tmonsize;\n     char\t\t*buffer;\n@@ -139,10 +131,10 @@ monstartup(lowpc, highpc)\n \t *\tso the rest of the scaling (here and in gprof) stays in ints.\n \t */\n     lowpc = (char *)\n-\t    ROUNDDOWN((unsigned)lowpc, HISTFRACTION*sizeof(HISTCOUNTER));\n+\t    ROUNDDOWN((unsigned long)lowpc, HISTFRACTION*sizeof(HISTCOUNTER));\n     s_lowpc = lowpc;\n     highpc = (char *)\n-\t    ROUNDUP((unsigned)highpc, HISTFRACTION*sizeof(HISTCOUNTER));\n+\t    ROUNDUP((unsigned long)highpc, HISTFRACTION*sizeof(HISTCOUNTER));\n     s_highpc = highpc;\n     s_textsize = highpc - lowpc;\n     monsize = (s_textsize / HISTFRACTION) + sizeof(struct phdr);\n@@ -203,7 +195,8 @@ monstartup(lowpc, highpc)\n     moncontrol(1);\n }\n \n-_mcleanup()\n+void\n+_mcleanup (void)\n {\n     int\t\t\tfd;\n     int\t\t\tfromindex;\n@@ -220,7 +213,7 @@ _mcleanup()\n     }\n #   ifdef DEBUG\n \tfprintf( stderr , \"[mcleanup] sbuf 0x%x ssiz %d\\n\" , sbuf , ssiz );\n-#   endif DEBUG\n+#   endif /* DEBUG */\n \n     write( fd , sbuf , ssiz );\n     endfrom = s_textsize / (HASHFRACTION * sizeof(*froms));\n@@ -234,7 +227,7 @@ _mcleanup()\n \t\tfprintf( stderr ,\n \t\t\t\"[mcleanup] frompc 0x%x selfpc 0x%x count %d\\n\" ,\n \t\t\tfrompc , tos[toindex].selfpc , tos[toindex].count );\n-#\t    endif DEBUG\n+#\t    endif /* DEBUG */\n \t    rawarc.raw_frompc = (unsigned long) frompc;\n \t    rawarc.raw_selfpc = (unsigned long) tos[toindex].selfpc;\n \t    rawarc.raw_count = tos[toindex].count;\n@@ -249,7 +242,8 @@ asm(\".globl _mcount; _mcount: jmp internal_mcount\");\n /* This is for compatibility with old versions of gcc which used mcount.  */\n asm(\".globl mcount; mcount: jmp internal_mcount\");\n \n-internal_mcount()\n+void\n+internal_mcount (void)\n {\n \tregister char\t\t\t*selfpc;\n \tregister unsigned short\t\t*frompcindex;\n@@ -271,10 +265,10 @@ internal_mcount()\n \tfrompcindex = (void *) __builtin_return_address (1);\n \n \tif(!already_setup) {\n-          extern etext();\n+          extern char etext[];\n \t  already_setup = 1;\n /*\t  monstartup(0, etext); */\n-\t  monstartup(0x08040000, etext);\n+\t  monstartup((char*)0x08040000, etext);\n #ifdef USE_ONEXIT\n \t  on_exit(_mcleanup, 0);\n #else\n@@ -387,15 +381,15 @@ internal_mcount()\n  *\tprofiling is what mcount checks to see if\n  *\tall the data structures are ready.\n  */\n-moncontrol(mode)\n-    int mode;\n+static void\n+moncontrol(int mode)\n {\n     if (mode)\n     {\n       /* start */\n       profil((unsigned short *)(sbuf + sizeof(struct phdr)),\n \t     ssiz - sizeof(struct phdr),\n-\t     (int)s_lowpc, s_scale);\n+\t     (long)s_lowpc, s_scale);\n       \n       profiling = 0;\n     } else {"}]}