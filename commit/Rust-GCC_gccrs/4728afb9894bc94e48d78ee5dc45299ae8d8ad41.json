{"sha": "4728afb9894bc94e48d78ee5dc45299ae8d8ad41", "node_id": "C_kwDOANBUbNoAKDQ3MjhhZmI5ODk0YmM5NGU0OGQ3OGVlNWRjNDUyOTlhZThkOGFkNDE", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-14T00:57:32Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-14T00:57:32Z"}, "message": "Fix TARGET_SOFT_FLOAT patterns in pa.md\n\n2021-10-13  John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog:\n\n\t* config/pa/pa.md (cbranchsf4): Disable if TARGET_SOFT_FLOAT.\n\t(cbranchdf4): Likewise.\n\tAdd missing move patterns for TARGET_SOFT_FLOAT.", "tree": {"sha": "e9155b065b8d69d659f260f6fd4bffad8225c2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9155b065b8d69d659f260f6fd4bffad8225c2b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4728afb9894bc94e48d78ee5dc45299ae8d8ad41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4728afb9894bc94e48d78ee5dc45299ae8d8ad41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4728afb9894bc94e48d78ee5dc45299ae8d8ad41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4728afb9894bc94e48d78ee5dc45299ae8d8ad41/comments", "author": null, "committer": null, "parents": [{"sha": "9eb28a0f19b290094a76889e90bd7fefa5da6d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb28a0f19b290094a76889e90bd7fefa5da6d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb28a0f19b290094a76889e90bd7fefa5da6d11"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "13a25381b6d680146a9b9fd111d07db58f9480cf", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 83, "deletions": 2, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4728afb9894bc94e48d78ee5dc45299ae8d8ad41/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4728afb9894bc94e48d78ee5dc45299ae8d8ad41/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=4728afb9894bc94e48d78ee5dc45299ae8d8ad41", "patch": "@@ -1383,7 +1383,7 @@\n                         (match_operand:SF 2 \"reg_or_0_operand\" \"\")])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n-  \"\"\n+  \"! TARGET_SOFT_FLOAT\"\n   \"\n {\n   pa_emit_bcond_fp (operands);\n@@ -1398,7 +1398,7 @@\n                         (match_operand:DF 2 \"reg_or_0_operand\" \"\")])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n-  \"\"\n+  \"! TARGET_SOFT_FLOAT\"\n   \"\n {\n   pa_emit_bcond_fp (operands);\n@@ -2236,6 +2236,29 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"move_dest_operand\"\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r\")\n+\t(match_operand:SI 1 \"move_src_operand\"\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q\"))]\n+  \"(register_operand (operands[0], SImode)\n+    || reg_or_0_operand (operands[1], SImode))\n+   && TARGET_SOFT_FLOAT\n+   && TARGET_64BIT\"\n+  \"@\n+   ldw RT'%A1,%0\n+   copy %1,%0\n+   ldi %1,%0\n+   ldil L'%1,%0\n+   {zdepi|depwi,z} %Z1,%0\n+   ldw%M1 %1,%0\n+   stw%M0 %r1,%0\n+   mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\"\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move\")\n+   (set_attr \"pa_combine_type\" \"addmove\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"indexed_memory_operand\" \"=R\")\n \t(match_operand:SI 1 \"register_operand\" \"f\"))]\n@@ -4042,6 +4065,25 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"move_dest_operand\"\n+\t\t\t  \"=!*r,*r,*r,*r,*r,Q\")\n+\t(match_operand:DF 1 \"move_src_operand\"\n+\t\t\t  \"!*r,J,N,K,RQ,*rG\"))]\n+  \"(register_operand (operands[0], DFmode)\n+    || reg_or_0_operand (operands[1], DFmode))\n+   && TARGET_SOFT_FLOAT && TARGET_64BIT\"\n+  \"@\n+   copy %1,%0\n+   ldi %1,%0\n+   ldil L'%1,%0\n+   depdi,z %z1,%0\n+   ldd%M1 %1,%0\n+   std%M0 %r1,%0\"\n+  [(set_attr \"type\" \"move,move,move,shift,load,store\")\n+   (set_attr \"pa_combine_type\" \"addmove\")\n+   (set_attr \"length\" \"4,4,4,4,4,4\")])\n+\n \f\n (define_expand \"movdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n@@ -4200,6 +4242,28 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"move_dest_operand\"\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r\")\n+\t(match_operand:DI 1 \"move_src_operand\"\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q\"))]\n+  \"(register_operand (operands[0], DImode)\n+    || reg_or_0_operand (operands[1], DImode))\n+   && TARGET_SOFT_FLOAT && TARGET_64BIT\"\n+  \"@\n+   ldd RT'%A1,%0\n+   copy %1,%0\n+   ldi %1,%0\n+   ldil L'%1,%0\n+   depdi,z %z1,%0\n+   ldd%M1 %1,%0\n+   std%M0 %r1,%0\n+   mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\"\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move\")\n+   (set_attr \"pa_combine_type\" \"addmove\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"indexed_memory_operand\" \"=R\")\n \t(match_operand:DI 1 \"register_operand\" \"f\"))]\n@@ -4405,6 +4469,23 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4,4,4,4,4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"move_dest_operand\"\n+\t\t\t  \"=!*r,*r,Q\")\n+\t(match_operand:SF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n+\t\t\t  \"!*rG,RQ,*rG\"))]\n+  \"(register_operand (operands[0], SFmode)\n+    || reg_or_0_operand (operands[1], SFmode))\n+   && TARGET_SOFT_FLOAT\n+   && TARGET_64BIT\"\n+  \"@\n+   copy %r1,%0\n+   ldw%M1 %1,%0\n+   stw%M0 %r1,%0\"\n+  [(set_attr \"type\" \"move,load,store\")\n+   (set_attr \"pa_combine_type\" \"addmove\")\n+   (set_attr \"length\" \"4,4,4\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"indexed_memory_operand\" \"=R\")\n \t(match_operand:SF 1 \"register_operand\" \"f\"))]"}]}