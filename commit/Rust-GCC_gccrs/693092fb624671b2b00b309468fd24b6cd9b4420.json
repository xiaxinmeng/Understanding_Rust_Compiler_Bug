{"sha": "693092fb624671b2b00b309468fd24b6cd9b4420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzMDkyZmI2MjQ2NzFiMmIwMGIzMDk0NjhmZDI0YjZjZDliNDQyMA==", "commit": {"author": {"name": "Bjoern Haase", "email": "bjoern.m.haase@web.de", "date": "2008-03-15T12:23:45Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-03-15T12:23:45Z"}, "message": "avr.c (avr_arch_types): Add avr6 entry.\n\n\t* gcc/gcc/config/avr/avr.c (avr_arch_types): Add avr6 entry.\n\t(avr_arch): Add ARCH_AVR6.\n\t(avr_mcu_types): Add 'atmega2560' and 'atmega2561' entry.\n \t(initial_elimination_offset): Initialize and use 'avr_pc_size' \n\tinstead of fixed value 2.\n\t(print_operand_address): Use gs() asm specifier instead of pm().\n\t(avr_assemble_integer): (Ditto.).\n\t(avr_output_addr_vec_elt): (Ditto.).\n\t(print_operand): Handle \"!\" code.\n\t* gcc/gcc/config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): Add \n\t__AVR_3_BYTE_PC__, __AVR_2_BYTE_PC__ and __AVR_HAVE_JMP_CALL__.\n\t(AVR_HAVE_EIJMP_EICALL): Define.\n\t(AVR_3_BYTE_PC): Redefine.\n\t(AVR_2_BYTE_PC): (Ditto.).\n\t(PRINT_OPERAND_PUNCT_VALID_P): Add '!' code.\n\t(LINK_SPEC): Add atmega2560 and atmega2561.\n\t(CRT_BINUTILS_SPEC): Add atmega2560 (crtm2560.o) and atmega2561 \n\t(crtm2561.o).\n\t* gcc/gcc/config/avr/avr.md (call_insn): Use eicall instead of icall \n\tfor 3 byte PC devices.\n\t(call_value_insn): (Ditto.).\n\t(*tablejump_enh): Use eijmp instead of ijmp for 3 byte PC devices.\n\t(indirect_jump): Use only for for 2 byte PC devices.\n\t(*tablejump): (Ditto.).\n\t(*indirect_jump_avr6): Add insn.\n\t(*tablejump_rjmp): Don't use for 3 byte PC devices.\n\t* gcc/gcc/config/avr/libgcc.S (__prologue_saves__): Use eijmp \n\tinstead of ijmp for 3 byte PC devices.\n\t(__tablejump2__): (Ditto.).\n\t* gcc/gcc/config/avr/t-avr (MULITLIB_OPTIONS): Add avr6 architecture.\n\t(MULITLIB_DIRNAMES): (Ditto.). \n\t(MULTILIB_MATCHES): Add atmega2560 and atmega2561 to list.\n\nCo-Authored-By: Anatoly Sokolov <aesok@post.ru>\n\nFrom-SVN: r133248", "tree": {"sha": "1b9871aa4a89ec4d866fa44fdfc9cf5cd008ed08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9871aa4a89ec4d866fa44fdfc9cf5cd008ed08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693092fb624671b2b00b309468fd24b6cd9b4420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693092fb624671b2b00b309468fd24b6cd9b4420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693092fb624671b2b00b309468fd24b6cd9b4420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693092fb624671b2b00b309468fd24b6cd9b4420/comments", "author": {"login": "BjoernMHaase", "id": 14183424, "node_id": "MDQ6VXNlcjE0MTgzNDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14183424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BjoernMHaase", "html_url": "https://github.com/BjoernMHaase", "followers_url": "https://api.github.com/users/BjoernMHaase/followers", "following_url": "https://api.github.com/users/BjoernMHaase/following{/other_user}", "gists_url": "https://api.github.com/users/BjoernMHaase/gists{/gist_id}", "starred_url": "https://api.github.com/users/BjoernMHaase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BjoernMHaase/subscriptions", "organizations_url": "https://api.github.com/users/BjoernMHaase/orgs", "repos_url": "https://api.github.com/users/BjoernMHaase/repos", "events_url": "https://api.github.com/users/BjoernMHaase/events{/privacy}", "received_events_url": "https://api.github.com/users/BjoernMHaase/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce4d86ac50c3f2444fbc9c6ed3706d7c8fe52795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4d86ac50c3f2444fbc9c6ed3706d7c8fe52795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4d86ac50c3f2444fbc9c6ed3706d7c8fe52795"}], "stats": {"total": 139, "additions": 113, "deletions": 26}, "files": [{"sha": "c97c1a394a68763ab0056fb7c157f001e14b1429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -1,3 +1,39 @@\n+2008-03-15  Bjoern Haase  <bjoern.m.haase@web.de>\n+            Anatoly Sokolov <aesok@post.ru>\n+\n+\t* gcc/gcc/config/avr/avr.c (avr_arch_types): Add avr6 entry.\n+\t(avr_arch): Add ARCH_AVR6.\n+\t(avr_mcu_types): Add 'atmega2560' and 'atmega2561' entry.\n+ \t(initial_elimination_offset): Initialize and use 'avr_pc_size' \n+\tinstead of fixed value 2.\n+\t(print_operand_address): Use gs() asm specifier instead of pm().\n+\t(avr_assemble_integer): (Ditto.).\n+\t(avr_output_addr_vec_elt): (Ditto.).\n+\t(print_operand): Handle \"!\" code.\n+\t* gcc/gcc/config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): Add \n+\t__AVR_3_BYTE_PC__, __AVR_2_BYTE_PC__ and __AVR_HAVE_JMP_CALL__.\n+\t(AVR_HAVE_EIJMP_EICALL): Define.\n+\t(AVR_3_BYTE_PC): Redefine.\n+\t(AVR_2_BYTE_PC): (Ditto.).\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Add '!' code.\n+\t(LINK_SPEC): Add atmega2560 and atmega2561.\n+\t(CRT_BINUTILS_SPEC): Add atmega2560 (crtm2560.o) and atmega2561 \n+\t(crtm2561.o).\n+\t* gcc/gcc/config/avr/avr.md (call_insn): Use eicall instead of icall \n+\tfor 3 byte PC devices.\n+\t(call_value_insn): (Ditto.).\n+\t(*tablejump_enh): Use eijmp instead of ijmp for 3 byte PC devices.\n+\t(indirect_jump): Use only for for 2 byte PC devices.\n+\t(*tablejump): (Ditto.).\n+\t(*indirect_jump_avr6): Add insn.\n+\t(*tablejump_rjmp): Don't use for 3 byte PC devices.\n+\t* gcc/gcc/config/avr/libgcc.S (__prologue_saves__): Use eijmp \n+\tinstead of ijmp for 3 byte PC devices.\n+\t(__tablejump2__): (Ditto.).\n+\t* gcc/gcc/config/avr/t-avr (MULITLIB_OPTIONS): Add avr6 architecture.\n+\t(MULITLIB_DIRNAMES): (Ditto.). \n+\t(MULTILIB_MATCHES): Add atmega2560 and atmega2561 to list.\n+\n 2008-03-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (\"sse2_umulv1siv2di3\"): Rename from"}, {"sha": "8d9b00dde24406bf12b1e312d3f45798f760975a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -127,7 +127,8 @@ static const struct base_arch_s avr_arch_types[] = {\n   { 0, 0, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=35\"  },\n   { 0, 1, 0, 1, 0, 0, 0, 0, \"__AVR_ARCH__=4\"   },\n   { 0, 1, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=5\"   },\n-  { 0, 1, 1, 1, 1, 1, 0, 0, \"__AVR_ARCH__=51\"  }\n+  { 0, 1, 1, 1, 1, 1, 0, 0, \"__AVR_ARCH__=51\"  },\n+  { 0, 1, 1, 1, 1, 1, 1, 0, \"__AVR_ARCH__=6\"   }\n };\n \n /* These names are used as the index into the avr_arch_types[] table \n@@ -144,7 +145,8 @@ enum avr_arch\n   ARCH_AVR35,\n   ARCH_AVR4,\n   ARCH_AVR5,\n-  ARCH_AVR51\n+  ARCH_AVR51,\n+  ARCH_AVR6\n };\n \n struct mcu_type_s {\n@@ -273,6 +275,10 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"at90can128\",   ARCH_AVR51, \"__AVR_AT90CAN128__\" },\n   { \"at90usb1286\",  ARCH_AVR51, \"__AVR_AT90USB1286__\" },\n   { \"at90usb1287\",  ARCH_AVR51, \"__AVR_AT90USB1287__\" },\n+    /* 3-Byte PC.  */\n+  { \"avr6\",         ARCH_AVR6, NULL },\n+  { \"atmega2560\",   ARCH_AVR6, \"__AVR_ATmega2560__\" },\n+  { \"atmega2561\",   ARCH_AVR6, \"__AVR_ATmega2561__\" },\n     /* Assembler only.  */\n   { \"avr1\",         ARCH_AVR1, NULL },\n   { \"at90s1200\",    ARCH_AVR1, \"__AVR_AT90S1200__\" },\n@@ -511,9 +517,10 @@ initial_elimination_offset (int from, int to)\n   else\n     {\n       int offset = frame_pointer_needed ? 2 : 0;\n+      int avr_pc_size = AVR_HAVE_EIJMP_EICALL ? 3 : 2;\n \n       offset += avr_regs_to_save (NULL);\n-      return get_frame_size () + 2 + 1 + offset;\n+      return get_frame_size () + (avr_pc_size) + 1 + offset;\n     }\n }\n \n@@ -1119,7 +1126,7 @@ print_operand_address (FILE *file, rtx addr)\n \t  && ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (addr))\n \t      || GET_CODE (addr) == LABEL_REF))\n \t{\n-\t  fprintf (file, \"pm(\");\n+\t  fprintf (file, \"gs(\");\n \t  output_addr_const (file,addr);\n \t  fprintf (file ,\")\");\n \t}\n@@ -1144,6 +1151,11 @@ print_operand (FILE *file, rtx x, int code)\n       if (!AVR_MEGA)\n \tfputc ('r', file);\n     }\n+  else if (code == '!')\n+    {\n+      if (AVR_HAVE_EIJMP_EICALL)\n+\tfputc ('e', file);\n+    }\n   else if (REG_P (x))\n     {\n       if (x == zero_reg_rtx)\n@@ -4468,7 +4480,7 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n       && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (x))\n \t  || GET_CODE (x) == LABEL_REF))\n     {\n-      fputs (\"\\t.word\\tpm(\", asm_out_file);\n+      fputs (\"\\t.word\\tgs(\", asm_out_file);\n       output_addr_const (asm_out_file, x);\n       fputs (\")\\n\", asm_out_file);\n       return true;\n@@ -5814,8 +5826,8 @@ void\n avr_output_addr_vec_elt (FILE *stream, int value)\n {\n   switch_to_section (progmem_section);\n-  if (AVR_MEGA)\n-    fprintf (stream, \"\\t.word pm(.L%d)\\n\", value);\n+  if (AVR_HAVE_JMP_CALL)\n+    fprintf (stream, \"\\t.word gs(.L%d)\\n\", value);\n   else\n     fprintf (stream, \"\\trjmp .L%d\\n\", value);\n }"}, {"sha": "72d08812e2c0aba67642ecfb874c8e214ec7591a", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -80,6 +80,15 @@ extern const struct base_arch_s *avr_current_arch;\n \tbuiltin_define (\"__AVR_MEGA__\");\t\\\n       if (avr_current_arch->have_jmp_call)\t\\\n \tbuiltin_define (\"__AVR_HAVE_JMP_CALL__\"); \\\n+      if (avr_current_arch->have_eijmp_eicall)\t\\\n+        {\t\t\t\t\t\\\n+\t  builtin_define (\"__AVR_HAVE_JMP_CALL__\");\t\\\n+\t  builtin_define (\"__AVR_3_BYTE_PC__\");\t\\\n+\t}\t\t\t\t\t\\\n+      else\t\t\t\t\t\\\n+        {\t\t\t\t\t\\\n+\t  builtin_define (\"__AVR_2_BYTE_PC__\");\t\\\n+\t}\t\t\t\t\t\\\n       if (TARGET_NO_INTERRUPTS)\t\t\t\\\n \tbuiltin_define (\"__NO_INTERRUPTS__\");\t\\\n     }\t\t\t\t\t\t\\\n@@ -96,13 +105,15 @@ extern GTY(()) section *progmem_section;\n #endif\n \n #define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n+#define AVR_HAVE_JMP_CALL (avr_current_arch->have_jmp_call && !TARGET_SHORT_CALLS)\n #define AVR_HAVE_MUL (avr_have_mul_p)\n #define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)\n #define AVR_HAVE_LPMX (avr_have_movw_lpmx_p)\n #define AVR_HAVE_RAMPZ (avr_current_arch->have_elpm)\n+#define AVR_HAVE_EIJMP_EICALL (avr_current_arch->have_eijmp_eicall)\n \n-#define AVR_2_BYTE_PC 1\n-#define AVR_3_BYTE_PC 0\n+#define AVR_2_BYTE_PC (!AVR_HAVE_EIJMP_EICALL)\n+#define AVR_3_BYTE_PC (AVR_HAVE_EIJMP_EICALL)\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n \n@@ -671,7 +682,7 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n \n #define PRINT_OPERAND(STREAM, X, CODE) print_operand (STREAM, X, CODE)\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '~')\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '~' || (CODE) == '!')\n \n #define PRINT_OPERAND_ADDRESS(STREAM, X) print_operand_address(STREAM, X)\n \n@@ -828,6 +839,7 @@ mmcu=*:-mmcu=%*}\"\n   mmcu=at90usb64*|\\\n   mmcu=at90usb128*|\\\n   mmcu=at94k: -m avr5}\\\n+%{mmcu=atmega256*:-m avr6}\\\n %{mmcu=atmega324*|\\\n   mmcu=atmega325*|\\\n   mmcu=atmega328p|\\\n@@ -856,7 +868,8 @@ mmcu=*:-mmcu=%*}\"\n   mmcu=at90usb*: -Tdata 0x800100}\\\n %{mmcu=atmega640|\\\n   mmcu=atmega1280|\\\n-  mmcu=atmega1281: -Tdata 0x800200} \"\n+  mmcu=atmega1281|\\\n+  mmcu=atmega256*: -Tdata 0x800200} \"\n \n #define LIB_SPEC \\\n   \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lc }}}}}\"\n@@ -968,6 +981,8 @@ mmcu=*:-mmcu=%*}\"\n %{mmcu=atmega1280:crtm1280.o%s} \\\n %{mmcu=atmega1281:crtm1281.o%s} \\\n %{mmcu=atmega1284p:crtm1284p.o%s} \\\n+%{mmcu=atmega2560:crtm2560.o%s} \\\n+%{mmcu=atmega2561:crtm2561.o%s} \\\n %{mmcu=at90can128:crtcan128.o%s} \\\n %{mmcu=at90usb1286:crtusb1286.o%s} \\\n %{mmcu=at90usb1287:crtusb1287.o%s}\""}, {"sha": "b8a8f0ec0eb57b66dd5e34f4cef89c9ed811e682", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -32,6 +32,7 @@\n ;;  p  POST_INC or PRE_DEC address as a pointer (X, Y, Z)\n ;;  r  POST_INC or PRE_DEC address as a register (r26, r28, r30)\n ;;  ~  Output 'r' if not AVR_MEGA.\n+;;  !  Output 'e' if AVR_HAVE_EIJMP_EICALL.\n \n ;; UNSPEC usage:\n ;;  0  Length of a string, see \"strlenhi\".\n@@ -2301,22 +2302,22 @@\n   \"(register_operand (operands[0], HImode) || CONSTANT_P (operands[0]))\"\n   \"*{\n   if (which_alternative==0)\n-     return \\\"icall\\\";\n+     return \\\"%!icall\\\";\n   else if (which_alternative==1)\n     {\n       if (AVR_HAVE_MOVW)\n \treturn (AS2 (movw, r30, %0) CR_TAB\n-\t\t\\\"icall\\\");\n+               \\\"%!icall\\\");\n       else\n \treturn (AS2 (mov, r30, %A0) CR_TAB\n \t\tAS2 (mov, r31, %B0) CR_TAB\n-\t\t\\\"icall\\\");\n+\t\t\\\"%!icall\\\");\n     }\n   else if (which_alternative==2)\n     return AS1(%~call,%c0);\n   return (AS2 (ldi,r30,lo8(%0)) CR_TAB\n           AS2 (ldi,r31,hi8(%0)) CR_TAB\n-          \\\"icall\\\");\n+          \\\"%!icall\\\");\n }\"\n   [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n@@ -2338,22 +2339,22 @@\n   \"(register_operand (operands[0], VOIDmode) || CONSTANT_P (operands[0]))\"\n   \"*{\n   if (which_alternative==0)\n-     return \\\"icall\\\";\n+     return \\\"%!icall\\\";\n   else if (which_alternative==1)\n     {\n       if (AVR_HAVE_MOVW)\n \treturn (AS2 (movw, r30, %1) CR_TAB\n-\t\t\\\"icall\\\");\n+\t\t\\\"%!icall\\\");\n       else\n \treturn (AS2 (mov, r30, %A1) CR_TAB\n \t\tAS2 (mov, r31, %B1) CR_TAB\n-\t\t\\\"icall\\\");\n+\t\t\\\"%!icall\\\");\n     }\n   else if (which_alternative==2)\n     return AS1(%~call,%c1);\n   return (AS2 (ldi, r30, lo8(%1)) CR_TAB\n           AS2 (ldi, r31, hi8(%1)) CR_TAB\n-          \\\"icall\\\");\n+          \\\"%!icall\\\");\n }\"\n   [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n@@ -2376,13 +2377,20 @@\n ; indirect jump\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:HI 0 \"register_operand\" \"!z,*r\"))]\n-  \"\"\n+  \"!AVR_HAVE_EIJMP_EICALL\"\n   \"@\n \tijmp\n \tpush %A0\\;push %B0\\;ret\"\n   [(set_attr \"length\" \"1,3\")\n    (set_attr \"cc\" \"none,none\")])\n \n+(define_insn \"*indirect_jump_avr6\"\n+  [(set (pc) (match_operand:HI 0 \"register_operand\" \"z\"))]\n+  \"AVR_HAVE_EIJMP_EICALL\"\n+  \"eijmp\"\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"cc\" \"none\")])\n+\n ;; table jump\n \n ;; Table made from \"rjmp\" instructions for <=8K devices.\n@@ -2391,7 +2399,7 @@\n \t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"!AVR_MEGA\"\n+  \"(!AVR_HAVE_JMP_CALL) && (!AVR_HAVE_EIJMP_EICALL)\"\n   \"@\n \tijmp\n \tpush %A0\\;push %B0\\;ret\"\n@@ -2420,7 +2428,7 @@\n \tlpm __tmp_reg__,Z+\n \tlpm r31,Z\n \tmov r30,__tmp_reg__\n-\tijmp\"\n+\t%!ijmp\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2429,7 +2437,7 @@\n \t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"AVR_MEGA\"\n+  \"AVR_HAVE_JMP_CALL && !AVR_HAVE_EIJMP_EICALL\"\n   \"lsl r30\n \trol r31\n \tlpm"}, {"sha": "7879b18ea57345254c024b2dff3692ad8246a03b", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -595,7 +595,12 @@ __prologue_saves__:\n \tout\t__SP_H__,r29\n \tout\t__SREG__,__tmp_reg__\n \tout\t__SP_L__,r28\n+#if defined (__AVR_HAVE_EIJMP_EICALL__)\n+\teijmp\n+#else\n \tijmp\n+#endif\n+\n .endfunc\n #endif /* defined (L_prologue) */\n \n@@ -675,13 +680,22 @@ __tablejump__:\n \tlpm\t__tmp_reg__, Z+\n \tlpm\tr31, Z\n \tmov\tr30, __tmp_reg__\n+\n+#if defined (__AVR_HAVE_EIJMP_EICALL__)\n+\teijmp\n+#else\n \tijmp\n+#endif\n+\n #else\n \tlpm\n \tadiw\tr30, 1\n \tpush\tr0\n \tlpm\n \tpush\tr0\n+#if defined (__AVR_HAVE_EIJMP_EICALL__)\n+        push    __zero_reg__\n+#endif\n \tret\n #endif\n \t.endfunc"}, {"sha": "5804400540a04da73795c49d810b9c304320088b", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693092fb624671b2b00b309468fd24b6cd9b4420/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=693092fb624671b2b00b309468fd24b6cd9b4420", "patch": "@@ -37,8 +37,8 @@ fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/avr/t-avr\n \n FPBIT = fp-bit.c\n \n-MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr31/mmcu=avr35/mmcu=avr4/mmcu=avr5/mmcu=avr51\n-MULTILIB_DIRNAMES = avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51\n+MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr31/mmcu=avr35/mmcu=avr4/mmcu=avr5/mmcu=avr51/mmcu=avr6\n+MULTILIB_DIRNAMES = avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51 avr6\n \n # The many avr2 matches are not listed here - this is the default.\n MULTILIB_MATCHES = \\\n@@ -123,7 +123,9 @@ MULTILIB_MATCHES = \\\n \tmmcu?avr51=mmcu?atmega1284p \\\n \tmmcu?avr51=mmcu?at90can128 \\\n \tmmcu?avr51=mmcu?at90usb1286 \\\n-\tmmcu?avr51=mmcu?at90usb1287\n+\tmmcu?avr51=mmcu?at90usb1287 \\\n+ \tmmcu?avr6=mmcu?atmega2560 \\\n+ \tmmcu?avr6=mmcu?atmega2561\n \n MULTILIB_EXCEPTIONS =\n "}]}