{"sha": "e032c2a16e87f7e1a3d00be8c0f962104038b088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzMmMyYTE2ZTg3ZjdlMWEzZDAwYmU4YzBmOTYyMTA0MDM4YjA4OA==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-08-07T00:27:25Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-08-07T00:27:25Z"}, "message": "re PR fortran/32732 ([Bind C] Character scalars are passed as arrays)\n\n2007-08-06  Christopher D. Rickett  <crickett@lanl.gov>\n\n        PR fortran/32732\n        * trans-expr.c (gfc_conv_scalar_char_value): Convert the tree and\n        actual arg expressions for scalar characters passed by-value to\n        bind(c) routines.\n        (gfc_conv_function_call): Call gfc_conv_scalar_char_value.\n        * trans.h: Add prototype for gfc_conv_scalar_char_value.\n        * trans-decl.c (generate_local_decl): Convert by-value character\n        dummy args of bind(c) procedures using\n        gfc_conv_scalar_char_value.\n\nFrom-SVN: r127265", "tree": {"sha": "9c712a82e188eac02acefd1674eeebba1a691c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c712a82e188eac02acefd1674eeebba1a691c46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e032c2a16e87f7e1a3d00be8c0f962104038b088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e032c2a16e87f7e1a3d00be8c0f962104038b088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e032c2a16e87f7e1a3d00be8c0f962104038b088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e032c2a16e87f7e1a3d00be8c0f962104038b088/comments", "author": null, "committer": null, "parents": [{"sha": "55eece47212d1846d59de07dfeb762692614265a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55eece47212d1846d59de07dfeb762692614265a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55eece47212d1846d59de07dfeb762692614265a"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "438fde0fd774c0fe9038a5bb46a5dffd858ba03a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e032c2a16e87f7e1a3d00be8c0f962104038b088", "patch": "@@ -1,3 +1,15 @@\n+2007-08-06  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32732\n+\t* trans-expr.c (gfc_conv_scalar_char_value): Convert the tree and\n+\tactual arg expressions for scalar characters passed by-value to\n+\tbind(c) routines.\n+\t(gfc_conv_function_call): Call gfc_conv_scalar_char_value.\n+\t* trans.h: Add prototype for gfc_conv_scalar_char_value.\n+\t* trans-decl.c (generate_local_decl): Convert by-value character\n+\tdummy args of bind(c) procedures using\n+\tgfc_conv_scalar_char_value.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/30947"}, {"sha": "845bbf1b3ed7bf0df8593d504acf264a2606fbd9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e032c2a16e87f7e1a3d00be8c0f962104038b088", "patch": "@@ -3055,7 +3055,7 @@ generate_local_decl (gfc_symbol * sym)\n       if (sym->attr.value == 1 && sym->backend_decl != NULL\n \t  && sym->ts.type == BT_CHARACTER && sym->ts.is_c_interop\n \t  && sym->ns->proc_name != NULL && sym->ns->proc_name->attr.is_bind_c)\n-\tTREE_TYPE (sym->backend_decl) = unsigned_char_type_node;\n+\tgfc_conv_scalar_char_value (sym, NULL, NULL);\n     }\n \n   /* Make sure we convert the types of the derived types from iso_c_binding"}, {"sha": "674448b7a448ebb2abf18dea22c425c22abb0c45", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e032c2a16e87f7e1a3d00be8c0f962104038b088", "patch": "@@ -1209,6 +1209,64 @@ gfc_to_single_character (tree len, tree str)\n   return NULL_TREE;\n }\n \n+\n+void\n+gfc_conv_scalar_char_value (gfc_symbol *sym, gfc_se *se, gfc_expr **expr)\n+{\n+\n+  if (sym->backend_decl)\n+    {\n+      /* This becomes the nominal_type in\n+\t function.c:assign_parm_find_data_types.  */\n+      TREE_TYPE (sym->backend_decl) = unsigned_char_type_node;\n+      /* This becomes the passed_type in\n+\t function.c:assign_parm_find_data_types.  C promotes char to\n+\t integer for argument passing.  */\n+      DECL_ARG_TYPE (sym->backend_decl) = unsigned_type_node;\n+\n+      DECL_BY_REFERENCE (sym->backend_decl) = 0;\n+    }\n+\n+  if (expr != NULL)\n+    {\n+      /* If we have a constant character expression, make it into an\n+\t integer.  */\n+      if ((*expr)->expr_type == EXPR_CONSTANT)\n+        {\n+\t  gfc_typespec ts;\n+\n+\t  *expr = gfc_int_expr ((int)(*expr)->value.character.string[0]);\n+\t  if ((*expr)->ts.kind != gfc_c_int_kind)\n+\t    {\n+  \t      /* The expr needs to be compatible with a C int.  If the \n+\t\t conversion fails, then the 2 causes an ICE.  */\n+\t      ts.type = BT_INTEGER;\n+\t      ts.kind = gfc_c_int_kind;\n+\t      gfc_convert_type (*expr, &ts, 2);\n+\t    }\n+\t}\n+      else if (se != NULL && (*expr)->expr_type == EXPR_VARIABLE)\n+        {\n+\t  if ((*expr)->ref == NULL)\n+\t    {\n+\t      se->expr = gfc_to_single_character\n+\t\t(build_int_cst (integer_type_node, 1),\n+\t\t gfc_build_addr_expr (pchar_type_node,\n+\t\t\t\t      gfc_get_symbol_decl\n+\t\t\t\t      ((*expr)->symtree->n.sym)));\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_conv_variable (se, *expr);\n+\t      se->expr = gfc_to_single_character\n+\t\t(build_int_cst (integer_type_node, 1),\n+\t\t gfc_build_addr_expr (pchar_type_node, se->expr));\n+\t    }\n+\t}\n+    }\n+}\n+\n+\n /* Compare two strings. If they are all single characters, the result is the\n    subtraction of them. Otherwise, we build a library call.  */\n \n@@ -2166,7 +2224,18 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n             {\n \t      if (fsym && fsym->attr.value)\n \t\t{\n-\t\t  gfc_conv_expr (&parmse, e);\n+\t\t  if (fsym->ts.type == BT_CHARACTER\n+\t\t      && fsym->ts.is_c_interop\n+\t\t      && fsym->ns->proc_name != NULL\n+\t\t      && fsym->ns->proc_name->attr.is_bind_c)\n+\t\t    {\n+\t\t      parmse.expr = NULL;\n+\t\t      gfc_conv_scalar_char_value (fsym, &parmse, &e);\n+\t\t      if (parmse.expr == NULL)\n+\t\t\tgfc_conv_expr (&parmse, e);\n+\t\t    }\n+\t\t  else\n+\t\t    gfc_conv_expr (&parmse, e);\n \t\t}\n \t      else if (arg->name && arg->name[0] == '%')\n \t\t/* Argument list functions %VAL, %LOC and %REF are signalled"}, {"sha": "645f9a3d78d26db6fe0830e67d66ec160f9d16df", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e032c2a16e87f7e1a3d00be8c0f962104038b088/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=e032c2a16e87f7e1a3d00be8c0f962104038b088", "patch": "@@ -295,6 +295,9 @@ void gfc_conv_expr_lhs (gfc_se * se, gfc_expr * expr);\n void gfc_conv_expr_reference (gfc_se * se, gfc_expr *);\n void gfc_conv_expr_type (gfc_se * se, gfc_expr *, tree);\n \n+/* trans-expr.c */\n+void gfc_conv_scalar_char_value (gfc_symbol *sym, gfc_se *se, gfc_expr **expr);\n+\n /* Find the decl containing the auxiliary variables for assigned variables.  */\n void gfc_conv_label_variable (gfc_se * se, gfc_expr * expr);\n /* If the value is not constant, Create a temporary and copy the value.  */"}]}