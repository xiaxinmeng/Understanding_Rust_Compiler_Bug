{"sha": "e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "node_id": "C_kwDOANBUbNoAKGU4MWY1YmU2MGQxZmY1MDRmOWIxYjJjNWNmYWQwYTgwOGJlYzRmZjc", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-03T15:19:32Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:23Z"}, "message": "gccrs: Simplify WildcardPattern let statement handling\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-pattern.cc\n\t(CompilePatternLet::visit): Simplify WildcardPattern compilation for let statements.\n\t* backend/rust-compile-var-decl.h:\n\t(CompileVarDecl::visit): Remove variable declaration for WildcardPattern.\n\t* resolve/rust-ast-resolve-pattern.h:\n\t(PatternDeclaration::visit): Remove name resolution for WildcardPattern.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "378ed85accda32828a04e91241f00e232fa0b91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/378ed85accda32828a04e91241f00e232fa0b91b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9886a85ea36788c329bba05eeeb00fca5f9a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9886a85ea36788c329bba05eeeb00fca5f9a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9886a85ea36788c329bba05eeeb00fca5f9a13"}], "stats": {"total": 51, "additions": 7, "deletions": 44}, "files": [{"sha": "d98f7beb0e8a6b507fac21d3c5ab2d0fd5712e5d", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "patch": "@@ -361,30 +361,14 @@ CompilePatternLet::visit (HIR::IdentifierPattern &pattern)\n void\n CompilePatternLet::visit (HIR::WildcardPattern &pattern)\n {\n-  Bvariable *var = nullptr;\n-  rust_assert (\n-    ctx->lookup_var_decl (pattern.get_pattern_mappings ().get_hirid (), &var));\n-\n-  auto fnctx = ctx->peek_fn ();\n-  if (ty->is_unit ())\n-    {\n-      ctx->add_statement (init_expr);\n+  tree init_stmt = NULL;\n+  tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n \n-      tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n+  ctx->get_backend ()->temporary_variable (ctx->peek_fn ().fndecl, NULL_TREE,\n+\t\t\t\t\t   stmt_type, init_expr, false,\n+\t\t\t\t\t   pattern.get_locus (), &init_stmt);\n \n-      auto unit_type_init_expr\n-\t= ctx->get_backend ()->constructor_expression (stmt_type, false, {}, -1,\n-\t\t\t\t\t\t       rval_locus);\n-      auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var,\n-\t\t\t\t\t\t    unit_type_init_expr);\n-      ctx->add_statement (s);\n-    }\n-  else\n-    {\n-      auto s\n-\t= ctx->get_backend ()->init_statement (fnctx.fndecl, var, init_expr);\n-      ctx->add_statement (s);\n-    }\n+  ctx->add_statement (init_stmt);\n }\n \n void"}, {"sha": "13b429d41e1207a603599a9377b8a86b1096b270", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "patch": "@@ -53,21 +53,6 @@ class CompileVarDecl : public HIRCompileBase, public HIR::HIRPatternVisitor\n     locals.push_back (var);\n   }\n \n-  void visit (HIR::WildcardPattern &pattern) override\n-  {\n-    translated_type = ctx->get_backend ()->immutable_type (translated_type);\n-\n-    Bvariable *var\n-      = ctx->get_backend ()->local_variable (fndecl, \"_\", translated_type,\n-\t\t\t\t\t     NULL /*decl_var*/,\n-\t\t\t\t\t     pattern.get_locus ());\n-\n-    HirId stmt_id = pattern.get_pattern_mappings ().get_hirid ();\n-    ctx->insert_var_decl (stmt_id, var);\n-\n-    locals.push_back (var);\n-  }\n-\n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::LiteralPattern &) override {}\n   void visit (HIR::PathInExpression &) override {}\n@@ -78,6 +63,7 @@ class CompileVarDecl : public HIRCompileBase, public HIR::HIRPatternVisitor\n   void visit (HIR::StructPattern &) override {}\n   void visit (HIR::TuplePattern &) override {}\n   void visit (HIR::TupleStructPattern &) override {}\n+  void visit (HIR::WildcardPattern &) override {}\n \n private:\n   CompileVarDecl (Context *ctx, tree fndecl, tree translated_type,"}, {"sha": "4c7d13a16d06a9df2f6034551151a40b8c856e29", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=e81f5be60d1ff504f9b1b2c5cfad0a808bec4ff7", "patch": "@@ -70,13 +70,6 @@ class PatternDeclaration : public ResolverBase\n       pattern.get_node_id (), pattern.get_locus (), type);\n   }\n \n-  void visit (AST::WildcardPattern &pattern) override\n-  {\n-    resolver->get_name_scope ().insert (\n-      CanonicalPath::new_seg (pattern.get_node_id (), \"_\"),\n-      pattern.get_node_id (), pattern.get_locus (), type);\n-  }\n-\n   void visit (AST::GroupedPattern &pattern) override\n   {\n     pattern.get_pattern_in_parens ()->accept_vis (*this);"}]}