{"sha": "3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmNDJhMGM0ZjU5MGE5ZDY3YjQ2YzVhZWNmYTVmZWE0NTQ2YjE3NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-18T13:40:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-18T13:40:36Z"}, "message": "bitmap.h: Fix comment formatting.\n\n\t* bitmap.h: Fix comment formatting.\n\t* combine.c: Likewise.\n\t* cppfiles.c: Likewise.\n\t* c-pragma.h: Likewise.\n\t* c-typeck.c: Likewise.\n\t* df.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* function.c: Likewise.\n\t* gcc.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* gthr-win32.h: Likewise.\n\t* haifa-sched.c: Likewise.\n\t* predict.c: Likewise.\n\t* rtlanal.c: Likewise.\n\t* rtl.h: Likewise.\n\t* unwind-dw2-fde.h: Likewise.\n\t* unwind-pe.h: Likewise.\n\t* vmsdbgout.c: Likewise.\n\nFrom-SVN: r48987", "tree": {"sha": "5c9fe756812fe0ac947a0d1762e2cb3c3e7adaf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9fe756812fe0ac947a0d1762e2cb3c3e7adaf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/comments", "author": null, "committer": null, "parents": [{"sha": "72f02bb9dc9b7ddd0462af34f44009f699ecaf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f02bb9dc9b7ddd0462af34f44009f699ecaf8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f02bb9dc9b7ddd0462af34f44009f699ecaf8a"}], "stats": {"total": 90, "additions": 57, "deletions": 33}, "files": [{"sha": "f8dc5510003b60adc30ac5c34b9eca546152fcf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,3 +1,24 @@\n+2002-01-18  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* bitmap.h: Fix comment formatting.\n+\t* combine.c: Likewise.\n+\t* cppfiles.c: Likewise.\n+\t* c-pragma.h: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* df.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* gthr-win32.h: Likewise.\n+\t* haifa-sched.c: Likewise.\n+\t* predict.c: Likewise.\n+\t* rtlanal.c: Likewise.\n+\t* rtl.h: Likewise.\n+\t* unwind-dw2-fde.h: Likewise.\n+\t* unwind-pe.h: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\n Thu Jan 17 15:28:26 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* attribs.c (decl_attributes): Clear ATTR_FLAG_TYPE_IN_PLACE"}, {"sha": "8925d86b210093386d6a7e95c259cf338350ccb2", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,6 @@\n /* Functions to support general ended bitmaps.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -311,7 +312,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (ptr2_ == 0)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  /* If there are no more elements in BITMAP2, exit loop now.*/\t\\\n+\t  /* If there are no more elements in BITMAP2, exit loop now.  */ \\\n \t  ptr1_ = (bitmap_element *)0;\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\"}, {"sha": "ff00f3250f8710cabdd973f9db3e5d6e793defaa", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,6 @@\n /* Pragma related interfaces.\n-   Copyright (C) 1995, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -44,7 +45,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n extern void init_pragma PARAMS ((void));\n \n /* Duplicate prototypes for the register_pragma stuff and the typedef for\n-   cpp_reader, to avoid dragging cpplib.h in almost everywhere... */\n+   cpp_reader, to avoid dragging cpplib.h in almost everywhere...  */\n #ifndef GCC_CPPLIB_H\n typedef struct cpp_reader cpp_reader;\n "}, {"sha": "756832d44022cc3801a2530696fdff0a9296cafb", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -4404,7 +4404,7 @@ warn_for_assignment (msgid, opname, function, argnum)\n \t}\n       else\n \t{\n-\t  /* Function name unknown (call through ptr); just give arg number.*/\n+\t  /* Function name unknown (call through ptr); just give arg number.  */\n \t  const char *const argnofun = _(\"passing arg %d of pointer to function\");\n \t  new_opname = (char *) alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n \t  sprintf (new_opname, argnofun, argnum);"}, {"sha": "a5c29f04c3cfd550f79e727b8828fb2dab9516ea", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -7057,7 +7057,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n \n     case NEG:\n       /* If we just want the low-order bit, the NEG isn't needed since it\n-\t won't change the low-order bit.    */\n+\t won't change the low-order bit.  */\n       if (mask == 1)\n \treturn force_to_mode (XEXP (x, 0), mode, mask, reg, just_select);\n "}, {"sha": "4c595a857055d48e5d41ece898662774282f9c2c", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -94,7 +94,7 @@ struct include_file\n };\n \n /* Variable length record files on VMS will have a stat size that includes\n-   record control characters that won't be included in the read size. */\n+   record control characters that won't be included in the read size.  */\n #ifdef VMS\n # define FAB_C_VAR 2 /* variable length records (see Starlet fabdef.h) */\n # define STAT_SIZE_TOO_BIG(ST) ((ST).st_fab_rfm == FAB_C_VAR)"}, {"sha": "1051c0fdbb47b6680efe9ebb18fe0beaafa5e2a9", "filename": "gcc/df.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,5 @@\n /* Dataflow support routines.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz,\n                                     mhayes@redhat.com)\n \n@@ -1088,7 +1088,7 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t\t\t\t  insn, DF_REF_READ_WRITE);\n \t\t  break;\n \t\t}\n-\t      /* ... FALLTHRU ... */\n+\t      /* ... FALLTHRU ...  */\n \t    case REG:\n \t    case PC:\n \t      break;"}, {"sha": "a5073214e1d05e565001405937de670cfc2d9f24", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -2106,7 +2106,7 @@ dwarf2out_end_epilogue ()\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n   /* Output a label to mark the endpoint of the code generated for this\n-     function.        */\n+     function.  */\n   ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL, current_funcdef_number);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n   fde = &fde_table[fde_table_in_use - 1];\n@@ -8193,7 +8193,7 @@ loc_descriptor_from_tree (loc, addressp)\n \t\t\t  TREE_OPERAND (loc, 0), TREE_OPERAND (loc, 1)),\n \t\t   TREE_OPERAND (loc, 1), TREE_OPERAND (loc, 0));\n \n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     case COND_EXPR:\n       {\n@@ -8971,7 +8971,7 @@ add_bound_info (subrange_die, bound_attr, bound)\n     case ERROR_MARK:\n       return;\n \n-    /* All fixed-bounds are represented by INTEGER_CST nodes.        */\n+    /* All fixed-bounds are represented by INTEGER_CST nodes.  */\n     case INTEGER_CST:\n       if (! host_integerp (bound, 0)\n \t  || (bound_attr == DW_AT_lower_bound"}, {"sha": "4cff6bb7e7760942c45ab3c8d9818db229f48160", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -5139,7 +5139,7 @@ promoted_input_arg (regno, pmode, punsignedp)\n /*  offset_ptr will be negative for ARGS_GROW_DOWNWARD case;\n     initial_offset_ptr is positive because locate_and_pad_parm's\n     callers pass in the total size of args so far as\n-    initial_offset_ptr. arg_size_ptr is always positive.*/\n+    initial_offset_ptr. arg_size_ptr is always positive.  */\n \n void\n locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n@@ -7164,7 +7164,7 @@ struct epi_info\n {\n   rtx sp_equiv_reg;\t\t/* REG that SP is set from, perhaps SP.  */\n   HOST_WIDE_INT sp_offset;\t/* Offset from SP_EQUIV_REG of present SP.  */\n-  rtx new_sp_equiv_reg;\t\t/* REG to be used at end of insn.   */\n+  rtx new_sp_equiv_reg;\t\t/* REG to be used at end of insn.  */\n   HOST_WIDE_INT new_sp_offset;\t/* Offset to be used at end of insn.  */\n   rtx equiv_reg_src;\t\t/* If nonzero, the value that SP_EQUIV_REG\n \t\t\t\t   should be set to once we no longer need\n@@ -7184,7 +7184,7 @@ keep_stack_depressed (seq)\n   int i, j;\n   struct epi_info info;\n \n-  /* If the epilogue is just a single instruction, it ust be OK as is.   */\n+  /* If the epilogue is just a single instruction, it ust be OK as is.  */\n \n   if (GET_CODE (seq) != SEQUENCE)\n     return seq;"}, {"sha": "62202058949100f0a459594fca8a4e06acc3eb28", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -6019,7 +6019,7 @@ main (argc, argv)\n \n   if (target_help_flag)\n    {\n-      /* Print if any target specific options.*/\n+      /* Print if any target specific options.  */\n \n       /* We do not exit here. Instead we have created a fake input file\n          called 'target-dummy' which needs to be compiled, and we pass this"}, {"sha": "1c916b34bf2b8c1c123ba355511c811b44e39cae", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to compute values of attributes.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GCC.\n@@ -231,7 +231,7 @@ struct function_unit\n   struct function_unit_op *ops;\t/* Pointer to first operation type.  */\n   int needs_conflict_function;\t/* Nonzero if a conflict function required.  */\n   int needs_blockage_function;\t/* Nonzero if a blockage function required.  */\n-  int needs_range_function;\t/* Nonzero if blockage range function needed.*/\n+  int needs_range_function;\t/* Nonzero if blockage range function needed.  */\n   rtx default_cost;\t\t/* Conflict cost, if constant.  */\n   struct range issue_delay;\t/* Range of issue delay values.  */\n   int max_blockage;\t\t/* Maximum time an insn blocks the unit.  */"}, {"sha": "31da7a152bc68338100926492a40b0163b08a0aa", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,6 +1,6 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+/* Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Mumit Khan <khan@xraylith.wisc.edu>.\n \n This file is part of GCC.\n@@ -213,7 +213,7 @@ __gthread_objc_thread_get_data(void)\n \n   lasterror = GetLastError();\n \n-  ptr = TlsGetValue(__gthread_objc_data_tls);          /* Return thread data.      */\n+  ptr = TlsGetValue(__gthread_objc_data_tls);          /* Return thread data.  */\n \n   SetLastError( lasterror );\n "}, {"sha": "150cb093e1c121d32463d08a9ce48c437b5c8352", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -1197,7 +1197,7 @@ rm_line_notes (head, tail)\n }\n \n /* Save line number notes for each insn in block B.  HEAD and TAIL are\n-   the boundaries of the block in which notes should be processed.*/\n+   the boundaries of the block in which notes should be processed.  */\n \n void\n save_line_notes (b, head, tail)\n@@ -1225,7 +1225,7 @@ save_line_notes (b, head, tail)\n \n /* After a block was scheduled, insert line notes into the insns list.\n    HEAD and TAIL are the boundaries of the block in which notes should\n-   be processed.*/\n+   be processed.  */\n \n void\n restore_line_notes (head, tail)"}, {"sha": "9c14dbca2267ffc554f3c0ce7c45cfa8ce73ede2", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,5 @@\n /* Branch prediction routines for the GNU compiler.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -25,7 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    [2] \"Static Branch Frequency and Program Profile Analysis\"\n        Wu and Larus; MICRO-27.\n    [3] \"Corpus-based Static Branch Prediction\"\n-       Calder, Grunwald, Lindsay, Martin, Mozer, and Zorn; PLDI '95.   */\n+       Calder, Grunwald, Lindsay, Martin, Mozer, and Zorn; PLDI '95.  */\n \n \n #include \"config.h\""}, {"sha": "3147926fc6042c13c27a5518cae347265542e418", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -875,7 +875,7 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n #define MEM_IN_STRUCT_P(RTX) ((RTX)->in_struct)\n \n /* For a MEM rtx, 1 if it refers to a scalar.  If zero, RTX may or may\n-   not refer to a scalar.*/\n+   not refer to a scalar.  */\n #define MEM_SCALAR_P(RTX) ((RTX)->frame_related)\n \n /* If VAL is non-zero, set MEM_IN_STRUCT_P and clear MEM_SCALAR_P in"}, {"sha": "578412361e665f2885e7172a6c04f64b9e9856a8", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -301,7 +301,7 @@ rtx_addr_varies_p (x, for_alias)\n /* Return the value of the integer term in X, if one is apparent;\n    otherwise return 0.\n    Only obvious integer terms are detected.\n-   This is used in cse.c with the `related_value' field.*/\n+   This is used in cse.c with the `related_value' field.  */\n \n HOST_WIDE_INT\n get_integer_term (x)"}, {"sha": "14552684381bb1b96552d4107eeff550af4eac1a", "filename": "gcc/unwind-dw2-fde.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,6 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n-/* Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GCC.\n@@ -54,7 +55,7 @@ struct object\n       unsigned long mixed_encoding : 1;\n       unsigned long encoding : 8;\n       /* ??? Wish there was an easy way to detect a 64-bit host here;\n-\t we've got 32 bits left to play with... */\n+\t we've got 32 bits left to play with...  */\n       unsigned long count : 21;\n     } b;\n     size_t i;"}, {"sha": "fe0632432d2ed30e4f2009c934253b604171528a", "filename": "gcc/unwind-pe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-pe.h?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -1,5 +1,5 @@\n /* Exception handling and frame unwind runtime interface routines.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -22,7 +22,7 @@\n    compatibility problems with the base ABI.  This is slightly better\n    than duplicating code, however.  */\n \n-/* If using C++, references to abort have to be qualified with std::. */\n+/* If using C++, references to abort have to be qualified with std::.  */\n #if __cplusplus\n #define __gxx_abort std::abort\n #else"}, {"sha": "8b19775ddd0e6a0ba8a8040a43d0092ddf497480", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef42a0c4f590a9d67b46c5aecfa5fea4546b174/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=3ef42a0c4f590a9d67b46c5aecfa5fea4546b174", "patch": "@@ -72,7 +72,7 @@ dst_file_info_entry;\n #define ASM_COMMENT_START \";#\"\n #endif\n \n-/* Maximum size (in bytes) of an artificially generated label.   */\n+/* Maximum size (in bytes) of an artificially generated label.  */\n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n \n /* Make sure we know the sizes of the various types debug can describe. These\n@@ -1331,7 +1331,7 @@ vmsdbgout_end_epilogue ()\n   if (debug_info_level > DINFO_LEVEL_NONE)\n     {\n       /* Output a label to mark the endpoint of the code generated for this\n-         function.        */\n+         function.  */\n       ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL,\n \t\t\t\t   current_funcdef_number);\n       ASM_OUTPUT_LABEL (asm_out_file, label);"}]}