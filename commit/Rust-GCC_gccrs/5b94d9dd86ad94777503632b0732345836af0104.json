{"sha": "5b94d9dd86ad94777503632b0732345836af0104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5NGQ5ZGQ4NmFkOTQ3Nzc1MDM2MzJiMDczMjM0NTgzNmFmMDEwNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-10-12T16:04:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-10-12T16:04:24Z"}, "message": "class.c (dfs_modify_vtables): Simplify condition.\n\n\t* class.c (dfs_modify_vtables): Simplify condition. Return\n\tdfs_skip_bases as appropriate.\n\t(modify_all_vtables): Walk in pre-order.\n\t* search.c (dfs_walk_all, dfs_walk_once_r,\n\tdfs_walk_once_accessible_r): Assert post order function never\n\treturns dfs_skip_bases.\n\nFrom-SVN: r88939", "tree": {"sha": "b6d1d3d25dcd57406ee545bea62de48c980d04e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d1d3d25dcd57406ee545bea62de48c980d04e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b94d9dd86ad94777503632b0732345836af0104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b94d9dd86ad94777503632b0732345836af0104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b94d9dd86ad94777503632b0732345836af0104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b94d9dd86ad94777503632b0732345836af0104/comments", "author": null, "committer": null, "parents": [{"sha": "fa91adc640e8ace532fac4077085a9904518b530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa91adc640e8ace532fac4077085a9904518b530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa91adc640e8ace532fac4077085a9904518b530"}], "stats": {"total": 90, "additions": 57, "deletions": 33}, "files": [{"sha": "835f41413303c7d3cb7e018c33474021096c48a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b94d9dd86ad94777503632b0732345836af0104", "patch": "@@ -1,5 +1,12 @@\n 2004-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* class.c (dfs_modify_vtables): Simplify condition. Return\n+\tdfs_skip_bases as appropriate.\n+\t(modify_all_vtables): Walk in pre-order.\n+\t* search.c (dfs_walk_all, dfs_walk_once_r,\n+\tdfs_walk_once_accessible_r): Assert post order function never\n+\treturns dfs_skip_bases.\n+\n \t* search.c (struct lookup_base_data_s): New.\n \t(lookup_base_r): Replace with ...\n \t(dfs_lookup_base): ... this."}, {"sha": "b1eec83b6077ebb3f64ef038455981cf39a6f81a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5b94d9dd86ad94777503632b0732345836af0104", "patch": "@@ -2144,37 +2144,41 @@ static tree\n dfs_modify_vtables (tree binfo, void* data)\n {\n   tree t = (tree) data;\n+  tree virtuals;\n+  tree old_virtuals;\n+  unsigned ix;\n+\n+  if (!TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo)))\n+    /* A base without a vtable needs no modification, and its bases\n+       are uninteresting.  */\n+    return dfs_skip_bases;\n   \n-  if (/* There's no need to modify the vtable for a non-virtual\n-         primary base; we're not going to use that vtable anyhow.\n-\t We do still need to do this for virtual primary bases, as they\n-\t could become non-primary in a construction vtable.  */\n-      (!BINFO_PRIMARY_P (binfo) || BINFO_VIRTUAL_P (binfo))\n-      /* Similarly, a base without a vtable needs no modification.  */\n-      && TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo))\n-      /* Don't do the primary vtable, if it's new.  */\n-      && (!SAME_BINFO_TYPE_P (BINFO_TYPE (binfo), t)\n-\t  || CLASSTYPE_HAS_PRIMARY_BASE_P (t)))\n-    {\n-      tree virtuals;\n-      tree old_virtuals;\n-      unsigned ix;\n-      \n-      make_new_vtable (t, binfo);\n+  if (SAME_BINFO_TYPE_P (BINFO_TYPE (binfo), t)\n+      && !CLASSTYPE_HAS_PRIMARY_BASE_P (t))\n+    /* Don't do the primary vtable, if it's new.  */\n+    return NULL_TREE;\n+\n+  if (BINFO_PRIMARY_P (binfo) && !BINFO_VIRTUAL_P (binfo))\n+    /* There's no need to modify the vtable for a non-virtual primary\n+       base; we're not going to use that vtable anyhow.  We do still\n+       need to do this for virtual primary bases, as they could become\n+       non-primary in a construction vtable.  */\n+    return NULL_TREE;\n+\n+  make_new_vtable (t, binfo);\n       \n-      /* Now, go through each of the virtual functions in the virtual\n-\t function table for BINFO.  Find the final overrider, and\n-\t update the BINFO_VIRTUALS list appropriately.  */\n-      for (ix = 0, virtuals = BINFO_VIRTUALS (binfo),\n-\t     old_virtuals = BINFO_VIRTUALS (TYPE_BINFO (BINFO_TYPE (binfo)));\n-\t   virtuals;\n-\t   ix++, virtuals = TREE_CHAIN (virtuals),\n-\t     old_virtuals = TREE_CHAIN (old_virtuals))\n-\tupdate_vtable_entry_for_fn (t, \n-\t\t\t\t    binfo, \n-\t\t\t\t    BV_FN (old_virtuals),\n-\t\t\t\t    &virtuals, ix);\n-    }\n+  /* Now, go through each of the virtual functions in the virtual\n+     function table for BINFO.  Find the final overrider, and update\n+     the BINFO_VIRTUALS list appropriately.  */\n+  for (ix = 0, virtuals = BINFO_VIRTUALS (binfo),\n+\t old_virtuals = BINFO_VIRTUALS (TYPE_BINFO (BINFO_TYPE (binfo)));\n+       virtuals;\n+       ix++, virtuals = TREE_CHAIN (virtuals),\n+\t old_virtuals = TREE_CHAIN (old_virtuals))\n+    update_vtable_entry_for_fn (t, \n+\t\t\t\tbinfo, \n+\t\t\t\tBV_FN (old_virtuals),\n+\t\t\t\t&virtuals, ix);\n \n   return NULL_TREE;\n }\n@@ -2195,7 +2199,7 @@ modify_all_vtables (tree t, tree virtuals)\n   tree *fnsp;\n \n   /* Update all of the vtables.  */\n-  dfs_walk_once (binfo, NULL, dfs_modify_vtables, t);\n+  dfs_walk_once (binfo, dfs_modify_vtables, NULL, t);\n \n   /* Add virtual functions not already in our primary vtable. These\n      will be both those introduced by this class, and those overridden"}, {"sha": "b90f1921ac2b97eec657b238ec5b20e691267714", "filename": "gcc/cp/search.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b94d9dd86ad94777503632b0732345836af0104/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5b94d9dd86ad94777503632b0732345836af0104", "patch": "@@ -1542,7 +1542,12 @@ dfs_walk_all (tree binfo, tree (*pre_fn) (tree, void *),\n  skip_bases:\n   /* Call the post-order walking function.  */\n   if (post_fn)\n-    return post_fn (binfo, data);\n+    {\n+      rval = post_fn (binfo, data);\n+      gcc_assert (rval != dfs_skip_bases);\n+      return rval;\n+    }\n+  \n   return NULL_TREE;\n }\n \n@@ -1588,7 +1593,11 @@ dfs_walk_once_r (tree binfo, tree (*pre_fn) (tree, void *),\n  skip_bases:\n   /* Call the post-order walking function.  */\n   if (post_fn)\n-    return post_fn (binfo, data);\n+    {\n+      rval = post_fn (binfo, data);\n+      gcc_assert (rval != dfs_skip_bases);\n+      return rval;\n+    }\n   \n   return NULL_TREE;\n }\n@@ -1710,7 +1719,11 @@ dfs_walk_once_accessible_r (tree binfo, bool friends_p, bool once,\n  skip_bases:\n   /* Call the post-order walking function.  */\n   if (post_fn)\n-    return post_fn (binfo, data);\n+    {\n+      rval = post_fn (binfo, data);\n+      gcc_assert (rval != dfs_skip_bases);\n+      return rval;\n+    }\n   \n   return NULL_TREE;\n }"}]}