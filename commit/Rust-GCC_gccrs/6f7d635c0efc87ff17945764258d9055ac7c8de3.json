{"sha": "6f7d635c0efc87ff17945764258d9055ac7c8de3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3ZDYzNWMwZWZjODdmZjE3OTQ1NzY0MjU4ZDkwNTVhYzdjOGRlMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-20T23:05:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-20T23:05:25Z"}, "message": "rtl.h (rtx_format): Constify a char*.\n\n\t* rtl.h (rtx_format): Constify a char*.\n\n\t* rtl.c (rtx_format): Likewise.\n\t(copy_rtx, copy_most_rtx, read_rtx): Likewise.\n\t(init_rtl): Use accessor macro, not `rtx_format'.\n\n\t* alias.c (rtx_equal_for_memref_p, find_symbolic_term): Constify a\n\tchar*.\n\n\t* caller-save.c (mark_referenced_regs): Likewise.\n\n\t* combine.c (subst, make_compound_operation, known_cond,\n\tgen_rtx_combine, update_table_tick, get_last_value_validate,\n\tuse_crosses_set_p, mark_used_regs_combine, move_deaths): Likewise.\n\n\t* cse.c (rtx_cost, mention_regs, canon_hash, exp_equiv_p,\n\trefers_to_p, canon_reg, fold_rtx, cse_process_notes,\n\tcount_reg_usage): Likewise.\n\n\t* emit-rtl.c (gen_rtx, copy_rtx_if_shared, reset_used_flags):\n\tLikewise.\n\n\t* final.c (leaf_renumber_regs_insn): Likewise.\n\n\t* flow.c (mark_used_regs, find_use_as_address, dump_flow_info,\n\tdump_edge_info, count_reg_references): Likewise.\n\n\t* function.c (fixup_var_refs_1, walk_fixup_memory_subreg,\n\tfixup_stack_1, purge_addressof_1, instantiate_virtual_regs_1):\n\tLikewise.\n\n\t* gcse.c (oprs_unchanged_p, hash_expr_1, expr_equiv_p,\n\toprs_not_set_p, expr_killed_p, compute_transp, find_used_regs,\n\tadd_label_notes): Likewise.\n\n\t* genattrtab.c (attr_rtx, attr_copy_rtx, encode_units_mask,\n\tclear_struct_flag, count_sub_rtxs, count_alternatives,\n\tcompares_alternatives_p, contained_in_p, walk_attr_value,\n\twrite_expr_attr_cache): Likewise.\n\n\t* genconfig.c (walk_insn_part): Likewise.\n\n\t* genemit.c (max_operand_1, gen_exp): Likewise.\n\n\t* genextract.c (walk_rtx): Likewise.\n\n\t* genflags.c (num_operands): Likewise.\n\n\t* genoutput.c (scan_operands): Likewise.\n\n\t* genpeep.c (match_rtx): Likewise.\n\n\t* genrecog.c (add_to_sequence): Likewise.\n\n\t* haifa-sched.c (may_trap_exp, sched_analyze_2, attach_deaths):\n\tLikewise.\n\n\t* integrate.c (save_constants, copy_for_inline,\n\tcopy_rtx_and_substitute, subst_constants, restore_constants):\n\tLikewise.\n\n\t* jump.c  (mark_jump_label, invert_exp, redirect_exp,\n\trtx_renumbered_equal_p, rtx_equal_for_thread_p): Likewise.\n\n\t* local-alloc.c (contains_replace_regs, memref_referenced_p):\n\tLikewise.\n\n\t* loop.c (record_excess_regs, rtx_equal_for_loop_p,\n\tadd_label_notes, replace_call_address, count_nonfixed_reads,\n\tinvariant_p, find_single_use_in_loop, find_mem_givs,\n\tfind_life_end, maybe_eliminate_biv_1, update_reg_last_use):\n\tLikewise.\n\n\t* print-rtl.c (reg_names, print_rtx): Likewise.\n\n\t* recog.c (validate_replace_rtx_1, find_single_use_1): Likewise.\n\n\t* reg-stack.c (stack_regs_mentioned_p, record_label_references,\n\trecord_reg_life_pat, swap_rtx_condition, goto_block_pat,\n\tprint_blocks): Likewise.\n\n\t* regclass.c (fix_register, record_address_regs,\n\treg_scan_mark_refs): Likewise.\n\n\t* regmove.c (stable_but_for_p): Likewise.\n\n\t* reload.c (loc_mentioned_in_p, operands_match_p,\n\tfind_reloads_toplevsubst_reg_equivs, find_reloads_address_1,\n\tcopy_replacements, refers_to_regno_for_reload_p,\n\trefers_to_mem_for_reload_p, find_inc_amount, regno_clobbered_p,\n\treload_when_needed_name, reg_class_names, debug_reload_to_stream):\n\tLikewise.\n\n\t* reload1.c (eliminate_regs, scan_paradoxical_subregs,\n\tdelete_address_reloads_1, count_occurrences,\n\treload_cse_mem_conflict_p, reload_combine_note_use,\n\tadd_auto_inc_notes): Likewise.\n\n\t* resource.c (mark_referenced_resources, mark_set_resources):\n\tLikewise.\n\n\t* rtlanal.c (rtx_unstable_p, rtx_varies_p, rtx_addr_varies_p,\n\treg_mentioned_p, regs_set_between_p, modified_between_p,\n\tmodified_in_p, refers_to_regno_p, reg_overlap_mentioned_p,\n\trtx_equal_p, volatile_insn_p, volatile_refs_p, side_effects_p,\n\tmay_trap_p, inequality_comparisons_p, replace_rtx, replace_regs,\n\tjmp_uses_reg_or_mem, for_each_rtx, regno_use_in): Likewise.\n\n\t* sched.c (sched_analyze_2, attach_deaths): Likewise.\n\n\t* stupid.c (stupid_mark_refs): Likewise.\n\n\t* unroll.c (remap_split_bivs): Likewise.\n\n\t* varasm.c (mark_constants): Likewise.\n\n\t* a29k/a29k.c (uses_local_reg_p): Likewise.\n\n\t* alpha/alpha.c (summarize_insn): Likewise.\n\n\t* arm/arm.c (symbol_mentioned_p, label_mentioned_p,\n\teliminate_lr2ip): Likewise.\n\n\t* arm/thumb.c (symbol_mentioned_p, label_mentioned_p): Likewise.\n\n\t* i386/i386.c (symbolic_reference_mentioned_p, copy_all_rtx,\n\treg_mentioned_in_mem): Likewise.\n\n\t* ns32k/ns32k.c (global_symbolic_reference_mentioned_p,\n\tsymbolic_reference_mentioned_p): Likewise.\n\n\t* romp/romp.c (unsigned_comparisons_p, hash_rtx): Likewise.\n\n\t* sh/sh.c (regs_used, mark_use): Likewise.\n\n\t* vax/vax.c (vax_rtx_cost): Likewise.\n\nFrom-SVN: r28784", "tree": {"sha": "0bbb6e017c32f0ea70c9793d9a1f58e5cd6c1f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bbb6e017c32f0ea70c9793d9a1f58e5cd6c1f41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7d635c0efc87ff17945764258d9055ac7c8de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7d635c0efc87ff17945764258d9055ac7c8de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7d635c0efc87ff17945764258d9055ac7c8de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7d635c0efc87ff17945764258d9055ac7c8de3/comments", "author": null, "committer": null, "parents": [{"sha": "a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ec8d12f167413d2824ec4cb4423927ac8b9f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ec8d12f167413d2824ec4cb4423927ac8b9f65"}], "stats": {"total": 481, "additions": 310, "deletions": 171}, "files": [{"sha": "50fe87cc66c618058cda2d0451368a7922a45c68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1,3 +1,142 @@\n+Fri Aug 20 18:53:43 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* rtl.h (rtx_format): Constify a char*.\n+\n+\t* rtl.c (rtx_format): Likewise.\n+\t(copy_rtx, copy_most_rtx, read_rtx): Likewise.\n+\t(init_rtl): Use accessor macro, not `rtx_format'.\n+\n+\t* alias.c (rtx_equal_for_memref_p, find_symbolic_term): Constify a\n+\tchar*.\n+\n+\t* caller-save.c (mark_referenced_regs): Likewise.\n+\n+\t* combine.c (subst, make_compound_operation, known_cond,\n+\tgen_rtx_combine, update_table_tick, get_last_value_validate,\n+\tuse_crosses_set_p, mark_used_regs_combine, move_deaths): Likewise.\n+\n+\t* cse.c (rtx_cost, mention_regs, canon_hash, exp_equiv_p,\n+\trefers_to_p, canon_reg, fold_rtx, cse_process_notes,\n+\tcount_reg_usage): Likewise.\n+\n+\t* emit-rtl.c (gen_rtx, copy_rtx_if_shared, reset_used_flags):\n+\tLikewise.\n+\n+\t* final.c (leaf_renumber_regs_insn): Likewise.\n+\n+\t* flow.c (mark_used_regs, find_use_as_address, dump_flow_info,\n+\tdump_edge_info, count_reg_references): Likewise.\n+\n+\t* function.c (fixup_var_refs_1, walk_fixup_memory_subreg,\n+\tfixup_stack_1, purge_addressof_1, instantiate_virtual_regs_1):\n+\tLikewise.\n+\n+\t* gcse.c (oprs_unchanged_p, hash_expr_1, expr_equiv_p,\n+\toprs_not_set_p, expr_killed_p, compute_transp, find_used_regs,\n+\tadd_label_notes): Likewise.\n+\n+\t* genattrtab.c (attr_rtx, attr_copy_rtx, encode_units_mask,\n+\tclear_struct_flag, count_sub_rtxs, count_alternatives,\n+\tcompares_alternatives_p, contained_in_p, walk_attr_value,\n+\twrite_expr_attr_cache): Likewise.\n+\n+\t* genconfig.c (walk_insn_part): Likewise.\n+\n+\t* genemit.c (max_operand_1, gen_exp): Likewise.\n+\n+\t* genextract.c (walk_rtx): Likewise.\n+\n+\t* genflags.c (num_operands): Likewise.\n+\n+\t* genoutput.c (scan_operands): Likewise.\n+\n+\t* genpeep.c (match_rtx): Likewise.\n+\n+\t* genrecog.c (add_to_sequence): Likewise.\n+\n+\t* haifa-sched.c (may_trap_exp, sched_analyze_2, attach_deaths):\n+\tLikewise.\n+\n+\t* integrate.c (save_constants, copy_for_inline,\n+\tcopy_rtx_and_substitute, subst_constants, restore_constants):\n+\tLikewise.\n+\n+\t* jump.c  (mark_jump_label, invert_exp, redirect_exp,\n+\trtx_renumbered_equal_p, rtx_equal_for_thread_p): Likewise.\n+\n+\t* local-alloc.c (contains_replace_regs, memref_referenced_p):\n+\tLikewise.\n+\n+\t* loop.c (record_excess_regs, rtx_equal_for_loop_p,\n+\tadd_label_notes, replace_call_address, count_nonfixed_reads,\n+\tinvariant_p, find_single_use_in_loop, find_mem_givs,\n+\tfind_life_end, maybe_eliminate_biv_1, update_reg_last_use):\n+\tLikewise.\n+\n+\t* print-rtl.c (reg_names, print_rtx): Likewise.\n+\n+\t* recog.c (validate_replace_rtx_1, find_single_use_1): Likewise.\n+\n+\t* reg-stack.c (stack_regs_mentioned_p, record_label_references,\n+\trecord_reg_life_pat, swap_rtx_condition, goto_block_pat,\n+\tprint_blocks): Likewise.\n+\n+\t* regclass.c (fix_register, record_address_regs,\n+\treg_scan_mark_refs): Likewise.\n+\n+\t* regmove.c (stable_but_for_p): Likewise.\n+\n+\t* reload.c (loc_mentioned_in_p, operands_match_p,\n+\tfind_reloads_toplevsubst_reg_equivs, find_reloads_address_1,\n+\tcopy_replacements, refers_to_regno_for_reload_p,\n+\trefers_to_mem_for_reload_p, find_inc_amount, regno_clobbered_p,\n+\treload_when_needed_name, reg_class_names, debug_reload_to_stream):\n+\tLikewise.\n+\n+\t* reload1.c (eliminate_regs, scan_paradoxical_subregs,\n+\tdelete_address_reloads_1, count_occurrences,\n+\treload_cse_mem_conflict_p, reload_combine_note_use,\n+\tadd_auto_inc_notes): Likewise.\n+\n+\t* resource.c (mark_referenced_resources, mark_set_resources):\n+\tLikewise.\n+\n+\t* rtlanal.c (rtx_unstable_p, rtx_varies_p, rtx_addr_varies_p,\n+\treg_mentioned_p, regs_set_between_p, modified_between_p,\n+\tmodified_in_p, refers_to_regno_p, reg_overlap_mentioned_p,\n+\trtx_equal_p, volatile_insn_p, volatile_refs_p, side_effects_p,\n+\tmay_trap_p, inequality_comparisons_p, replace_rtx, replace_regs,\n+\tjmp_uses_reg_or_mem, for_each_rtx, regno_use_in): Likewise.\n+\n+\t* sched.c (sched_analyze_2, attach_deaths): Likewise.\n+\n+\t* stupid.c (stupid_mark_refs): Likewise.\n+\n+\t* unroll.c (remap_split_bivs): Likewise.\n+\n+\t* varasm.c (mark_constants): Likewise.\n+\n+\t* a29k/a29k.c (uses_local_reg_p): Likewise.\n+\n+\t* alpha/alpha.c (summarize_insn): Likewise.\n+\n+\t* arm/arm.c (symbol_mentioned_p, label_mentioned_p,\n+\teliminate_lr2ip): Likewise.\n+\n+\t* arm/thumb.c (symbol_mentioned_p, label_mentioned_p): Likewise.\n+\n+\t* i386/i386.c (symbolic_reference_mentioned_p, copy_all_rtx,\n+\treg_mentioned_in_mem): Likewise.\n+\n+\t* ns32k/ns32k.c (global_symbolic_reference_mentioned_p,\n+\tsymbolic_reference_mentioned_p): Likewise.\n+\n+\t* romp/romp.c (unsigned_comparisons_p, hash_rtx): Likewise.\n+\n+\t* sh/sh.c (regs_used, mark_use): Likewise.\n+\n+\t* vax/vax.c (vax_rtx_cost): Likewise.\n+\n Fri Aug 20 18:38:43 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* machmode.h (mode_name): Constify a char*."}, {"sha": "9de034a9f1374265536cbfca9cb969bebfebe2f0", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -593,7 +593,7 @@ rtx_equal_for_memref_p (x, y)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0 && y == 0)\n     return 1;\n@@ -696,7 +696,7 @@ find_symbolic_term (x)\n {\n   register int i;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   code = GET_CODE (x);\n   if (code == SYMBOL_REF || code == LABEL_REF)"}, {"sha": "761dd924b15b6a8037fcd4b674db864b256a99b0", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -495,7 +495,7 @@ mark_referenced_regs (x)\n      rtx x;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   if (code == SET)"}, {"sha": "6c7f0d2eeb0f120978f88fecc82f2a4f559325c9", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -3007,7 +3007,7 @@ subst (x, from, to, in_dest, unique_copy)\n {\n   register enum rtx_code code = GET_CODE (x);\n   enum machine_mode op0_mode = VOIDmode;\n-  register char *fmt;\n+  register const char *fmt;\n   register int len, i;\n   rtx new;\n \n@@ -5924,7 +5924,7 @@ make_compound_operation (x, in_code)\n   int i;\n   rtx new = 0;\n   rtx tem;\n-  char *fmt;\n+  const char *fmt;\n \n   /* Select the code to be used in recursive calls.  Once we are inside an\n      address, we stay there.  If we have a comparison, set to COMPARE,\n@@ -6951,7 +6951,7 @@ known_cond (x, cond, reg, val)\n {\n   enum rtx_code code = GET_CODE (x);\n   rtx temp;\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   if (side_effects_p (x))\n@@ -9276,7 +9276,7 @@ gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n   int n_args;\n   rtx args[3];\n   int j;\n-  char *fmt;\n+  const char *fmt;\n   rtx rt;\n   struct undo *undo;\n \n@@ -10499,7 +10499,7 @@ update_table_tick (x)\n      rtx x;\n {\n   register enum rtx_code code = GET_CODE (x);\n-  register char *fmt = GET_RTX_FORMAT (code);\n+  register const char *fmt = GET_RTX_FORMAT (code);\n   register int i;\n \n   if (code == REG)\n@@ -10723,7 +10723,7 @@ get_last_value_validate (loc, insn, tick, replace)\n      int replace;\n {\n   rtx x = *loc;\n-  char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n+  const char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n   int len = GET_RTX_LENGTH (GET_CODE (x));\n   int i;\n \n@@ -10881,7 +10881,7 @@ use_crosses_set_p (x, from_cuid)\n      register rtx x;\n      int from_cuid;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n   register enum rtx_code code = GET_CODE (x);\n \n@@ -11104,7 +11104,7 @@ mark_used_regs_combine (x)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n       {\n@@ -11160,7 +11160,7 @@ move_deaths (x, maybe_kill_insn, from_cuid, to_insn, pnotes)\n      rtx to_insn;\n      rtx *pnotes;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int len, i;\n   register enum rtx_code code = GET_CODE (x);\n "}, {"sha": "ce41b34d91e70bf03e71383c4db7ff62651567ee", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -896,7 +896,7 @@ int\n uses_local_reg_p (x)\n      rtx x;\n {\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   switch (GET_CODE (x))"}, {"sha": "ca097f6121dcdc4cf420968e9c367c21946a6de5", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -4246,7 +4246,7 @@ summarize_insn (x, sum, set)\n      struct shadow_summary *sum;\n      int set;\n {\n-  char *format_ptr;\n+  const char *format_ptr;\n   int i, j;\n \n   if (x == 0)"}, {"sha": "c2d9768a7e50e5a8d34d5d887257f49ce1cef248", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -2425,7 +2425,7 @@ int\n symbol_mentioned_p (x)\n      rtx x;\n {\n-  register char * fmt;\n+  register const char * fmt;\n   register int i;\n \n   if (GET_CODE (x) == SYMBOL_REF)\n@@ -2454,7 +2454,7 @@ int\n label_mentioned_p (x)\n      rtx x;\n {\n-  register char * fmt;\n+  register const char * fmt;\n   register int i;\n \n   if (GET_CODE (x) == LABEL_REF)\n@@ -4512,7 +4512,7 @@ eliminate_lr2ip (x)\n   rtx x0 = * x;\n   int code = GET_CODE (x0);\n   register int i, j;\n-  register char * fmt;\n+  register const char * fmt;\n   \n   switch (code)\n     {"}, {"sha": "3dea3e957cff69fdc40bfb8123278d70addd38ba", "filename": "gcc/config/arm/thumb.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Farm%2Fthumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Farm%2Fthumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -121,7 +121,7 @@ int\n symbol_mentioned_p (x)\n      rtx x;\n {\n-  register char * fmt;\n+  register const char * fmt;\n   register int i;\n \n   if (GET_CODE (x) == SYMBOL_REF)\n@@ -150,7 +150,7 @@ int\n label_mentioned_p (x)\n      rtx x;\n {\n-  register char * fmt;\n+  register const char * fmt;\n   register int i;\n \n   if (GET_CODE (x) == LABEL_REF)"}, {"sha": "ef1ba47f5ba83503040f049f8dc421b36d5a7dd1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1454,7 +1454,7 @@ int\n symbolic_reference_mentioned_p (op)\n      rtx op;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)\n@@ -4513,7 +4513,7 @@ copy_all_rtx (orig)\n   register rtx copy;\n   register int i, j;\n   register RTX_CODE code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   code = GET_CODE (orig);\n \n@@ -5074,7 +5074,7 @@ int\n reg_mentioned_in_mem (reg, rtl)\n      rtx reg, rtl;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i, j;\n   register enum rtx_code code;\n "}, {"sha": "a0011f103aba4e3f1ce442623f6dd122aa7ed6a3", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -571,7 +571,7 @@ global_symbolic_reference_mentioned_p (op, f)\n      rtx op;\n      int f;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (GET_CODE (op) == SYMBOL_REF)\n@@ -610,7 +610,7 @@ int\n symbolic_reference_mentioned_p (op)\n      rtx op;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)"}, {"sha": "a29d95447b3722802ef919e6f30db9fcc100ad45", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -75,7 +75,7 @@ static int\n unsigned_comparisons_p (x)\n      rtx x;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int len, i;\n   register enum rtx_code code = GET_CODE (x);\n \n@@ -1438,7 +1438,7 @@ hash_rtx (x)\n   register unsigned int hash = (((int) GET_CODE (x) << 10)\n \t\t\t\t+ ((int) GET_MODE (x) << 20));\n   register int i;\n-  register char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n+  register const char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n \n   for (i = 0; i < GET_RTX_LENGTH (GET_CODE (x)); i++)\n     if (fmt[i] == 'e')"}, {"sha": "d9d39c1a8cb70fdc88162fe51a411a7aa27ac257", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -2385,7 +2385,7 @@ regs_used (x, is_dest)\n      rtx x; int is_dest;\n {\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n   int i, used = 0;\n \n   if (! x)\n@@ -4731,7 +4731,7 @@ mark_use (x, reg_set_block)\n       break;\n     default:\n       {\n-\tchar *fmt = GET_RTX_FORMAT (code);\n+\tconst char *fmt = GET_RTX_FORMAT (code);\n \tint i, j;\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  {"}, {"sha": "4a9f06d80e77c612aef5e22ad7048061c7cc3ce6", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -403,7 +403,7 @@ vax_rtx_cost (x)\n   enum machine_mode mode = GET_MODE (x);\n   register int c;\n   int i = 0;\t\t\t\t/* may be modified in switch */\n-  char *fmt = GET_RTX_FORMAT (code);\t/* may be modified in switch */\n+  const char *fmt = GET_RTX_FORMAT (code); /* may be modified in switch */\n \n   switch (code)\n     {"}, {"sha": "b6b80350139951d2ef2ffc96f0715d50efc31a49", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -755,7 +755,7 @@ rtx_cost (x, outer_code)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n   register int total;\n \n   if (x == 0)\n@@ -1059,7 +1059,7 @@ mention_regs (x)\n {\n   register enum rtx_code code;\n   register int i, j;\n-  register char *fmt;\n+  register const char *fmt;\n   register int changed = 0;\n \n   if (x == 0)\n@@ -2099,7 +2099,7 @@ canon_hash (x, mode)\n   register int i, j;\n   register unsigned hash = 0;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -2309,7 +2309,7 @@ exp_equiv_p (x, y, validate, equal_values)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   /* Note: it is incorrect to assume an expression is equivalent to itself\n      if VALIDATE is nonzero.  */\n@@ -2465,7 +2465,7 @@ refers_to_p (x, y)\n {\n   register int i;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n  repeat:\n   if (x == y)\n@@ -2725,7 +2725,7 @@ canon_reg (x, insn)\n {\n   register int i;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return x;\n@@ -5000,7 +5000,7 @@ fold_rtx (x, insn)\n {\n   register enum rtx_code code;\n   register enum machine_mode mode;\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n   rtx new = 0;\n   int copied = 0;\n@@ -8053,7 +8053,7 @@ cse_process_notes (x, object)\n      rtx object;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt = GET_RTX_FORMAT (code);\n+  const char *fmt = GET_RTX_FORMAT (code);\n   int i;\n \n   switch (code)\n@@ -9019,7 +9019,7 @@ count_reg_usage (x, counts, dest, incr)\n      int incr;\n {\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   if (x == 0)"}, {"sha": "cee784d580bdaf2772f44abebe7254d1ceabe3db", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -321,7 +321,7 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n #endif\n   va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n-  register char *fmt;\t\t/* Current rtx's format...\t\t*/\n+  register const char *fmt;\t/* Current rtx's format...\t\t*/\n   register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n \n   VA_START (p, mode);\n@@ -1638,7 +1638,7 @@ copy_rtx_if_shared (orig)\n   register rtx x = orig;\n   register int i;\n   register enum rtx_code code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   int copied = 0;\n \n   if (x == 0)\n@@ -1762,7 +1762,7 @@ reset_used_flags (x)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (x == 0)\n     return;"}, {"sha": "6b0966a320bbd0c38bdc81b3f94a14cadcde5bc5", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -4103,7 +4103,7 @@ leaf_renumber_regs_insn (in_rtx)\n      register rtx in_rtx;\n {\n   register int i, j;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (in_rtx == 0)\n     return;"}, {"sha": "6b2be37a13b1c4ae6bea3dbdc2db9f84893a37b8", "filename": "gcc/flow.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -4012,7 +4012,7 @@ mark_used_regs (needed, live, x, final, insn)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n     \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -4170,7 +4170,7 @@ find_use_as_address (x, reg, plusconst)\n      HOST_WIDE_INT plusconst;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt = GET_RTX_FORMAT (code);\n+  const char *fmt = GET_RTX_FORMAT (code);\n   register int i;\n   register rtx value = 0;\n   register rtx tem;\n@@ -4230,7 +4230,7 @@ dump_flow_info (file)\n      FILE *file;\n {\n   register int i;\n-  static char *reg_class_names[] = REG_CLASS_NAMES;\n+  static const char * const reg_class_names[] = REG_CLASS_NAMES;\n \n   fprintf (file, \"%d registers.\\n\", max_regno);\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n@@ -4333,7 +4333,7 @@ dump_edge_info (file, e, do_succ)\n \n   if (e->flags)\n     {\n-      static char * bitnames[] = {\n+      static const char * const bitnames[] = {\n \t\"fallthru\", \"crit\", \"ab\", \"abcall\", \"eh\", \"fake\"\n       };\n       int comma = 0;\n@@ -4885,7 +4885,7 @@ count_reg_references (x)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n     \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)"}, {"sha": "6c5792a81a5ed421830c7b17c0865ee185858ad3", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1698,7 +1698,7 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n   register int i;\n   register rtx x = *loc;\n   RTX_CODE code = GET_CODE (x);\n-  register char *fmt;\n+  register const char *fmt;\n   register rtx tem, tem1;\n   struct fixup_replacement *replacement;\n \n@@ -2310,7 +2310,7 @@ walk_fixup_memory_subreg (x, insn, uncritical)\n      int uncritical;\n {\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (x == 0)\n@@ -2352,7 +2352,7 @@ fixup_stack_1 (x, insn)\n {\n   register int i;\n   register RTX_CODE code = GET_CODE (x);\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (code == MEM)\n     {\n@@ -2708,7 +2708,7 @@ purge_addressof_1 (loc, insn, force, store, ht)\n   rtx x;\n   RTX_CODE code;\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   /* Re-start here to avoid recursion in common cases.  */\n  restart:\n@@ -3333,7 +3333,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n   rtx temp;\n   rtx seq;\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   /* Re-start here to avoid recursion in common cases.  */\n  restart:"}, {"sha": "6a248bc51e1018167bd0d09208a5ecd7ecfe8e97", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1180,7 +1180,7 @@ oprs_unchanged_p (x, insn, avail_p)\n {\n   int i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -1323,7 +1323,7 @@ hash_expr_1 (x, mode, do_not_record_p)\n   int i, j;\n   unsigned hash = 0;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -1491,7 +1491,7 @@ expr_equiv_p (x, y)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == y)\n     return 1;\n@@ -2325,7 +2325,7 @@ oprs_not_set_p (x, insn)\n {\n   int i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n repeat:\n@@ -2709,7 +2709,7 @@ expr_killed_p (x, bb)\n {\n   int i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -3374,7 +3374,7 @@ compute_transp (x, indx, bmap, set_p)\n {\n   int bb,i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -3560,7 +3560,7 @@ find_used_regs (x)\n {\n   int i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   /* repeat is used to turn tail-recursion into iteration.  */\n  repeat:\n@@ -4617,7 +4617,7 @@ add_label_notes (x, insn)\n {\n   enum rtx_code code = GET_CODE (x);\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   if (code == LABEL_REF && !LABEL_REF_NONLOCAL_P (x))\n     {"}, {"sha": "ef050af440105ee41a0a13772dae1c44d5e6229b", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -543,7 +543,7 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n #endif\n   va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n-  register char *fmt;\t\t/* Current rtx's format...\t\t*/\n+  register const char *fmt;\t\t/* Current rtx's format...\t\t*/\n   register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n   int hashcode;\n   register struct attr_hash *h;\n@@ -830,7 +830,7 @@ attr_copy_rtx (orig)\n   register rtx copy;\n   register int i, j;\n   register RTX_CODE code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   /* No need to copy a permanent object.  */\n   if (RTX_INTEGRATED_P (orig))\n@@ -2238,7 +2238,7 @@ encode_units_mask (x)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   code = GET_CODE (x);\n \n@@ -4024,7 +4024,7 @@ clear_struct_flag (x)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   MEM_IN_STRUCT_P (x) = 0;\n   if (RTX_UNCHANGING_P (x))\n@@ -4082,7 +4082,7 @@ count_sub_rtxs (x, max)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n   int total = 0;\n \n   code = GET_CODE (x);\n@@ -4191,7 +4191,7 @@ count_alternatives (exp)\n      rtx exp;\n {\n   int i, j, n;\n-  char *fmt;\n+  const char *fmt;\n   \n   if (GET_CODE (exp) == MATCH_OPERAND)\n     return n_comma_elts (XSTR (exp, 2));\n@@ -4229,7 +4229,7 @@ compares_alternatives_p (exp)\n      rtx exp;\n {\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   if (GET_CODE (exp) == EQ_ATTR && XSTR (exp, 0) == alternative_name)\n     return 1;\n@@ -4262,7 +4262,7 @@ contained_in_p (inner, exp)\n      rtx exp;\n {\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   if (rtx_equal_p (inner, exp))\n     return 1;\n@@ -4790,7 +4790,7 @@ walk_attr_value (exp)\n      rtx exp;\n {\n   register int i, j;\n-  register char *fmt;\n+  register const char *fmt;\n   RTX_CODE code;\n \n   if (exp == NULL)\n@@ -5139,7 +5139,7 @@ write_expr_attr_cache (p, attr)\n      rtx p;\n      struct attr_desc *attr;\n {\n-  char *fmt;\n+  const char *fmt;\n   int i, ie, j, je;\n \n   if (GET_CODE (p) == EQ_ATTR)"}, {"sha": "d5e6f9b1d637befb945b9017342bfa17097b3807", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -73,7 +73,7 @@ walk_insn_part (part, recog_p, non_pc_set_src)\n {\n   register int i, j;\n   register RTX_CODE code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (part == 0)\n     return;"}, {"sha": "17f1d5db7fd830d7d9fb2851c465ea163e77595b", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -81,7 +81,7 @@ max_operand_1 (x)\n   register RTX_CODE code;\n   register int i;\n   register int len;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;\n@@ -154,7 +154,7 @@ gen_exp (x)\n   register RTX_CODE code;\n   register int i;\n   register int len;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     {"}, {"sha": "18909580c112592ee3c2bf2568115bb52f3be6ac", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -190,7 +190,7 @@ walk_rtx (x, path)\n   register RTX_CODE code;\n   register int i;\n   register int len;\n-  register char *fmt;\n+  register const char *fmt;\n   int depth = strlen (path);\n   char *newpath;\n "}, {"sha": "5f1dc349b55a480881eb825c860b03c44654caee", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -61,7 +61,7 @@ num_operands (x)\n   int count = 0;\n   int i, j;\n   enum rtx_code code = GET_CODE (x);\n-  char *format_ptr = GET_RTX_FORMAT (code);\n+  const char *format_ptr = GET_RTX_FORMAT (code);\n \n   if (code == MATCH_OPERAND)\n     return 1;"}, {"sha": "d369f312b9bb9b0bddc010d0ce57cacaa86f03d3", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -451,7 +451,7 @@ scan_operands (part, this_address_p, this_strict_low)\n      int this_strict_low;\n {\n   register int i, j;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   int opno;\n \n   if (part == 0)"}, {"sha": "ff0cc5c9a4f598c142d4dc5e1f0858a74c3bf67a", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -159,7 +159,7 @@ match_rtx (x, path, fail_label)\n   register RTX_CODE code;\n   register int i;\n   register int len;\n-  register char *fmt;\n+  register const char *fmt;\n   struct link link;\n \n   if (x == 0)"}, {"sha": "ebe5d30a61c3f33792299d4006f5eaac5fa096ac", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -332,7 +332,7 @@ add_to_sequence (pattern, last, position)\n     = (struct decision *) xmalloc (sizeof (struct decision));\n   struct decision *this;\n   char *newpos;\n-  register char *fmt;\n+  register const char *fmt;\n   register size_t i;\n   int depth = strlen (position);\n   int len;"}, {"sha": "3a5a64ab8f8bc855be91f264a8e32a4019e40c9e", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -2582,7 +2582,7 @@ may_trap_exp (x, is_store)\n     }\n   else\n     {\n-      char *fmt;\n+      const char *fmt;\n       int i, insn_class = TRAP_FREE;\n \n       /* neither store nor load, check if it may cause a trap */\n@@ -3487,7 +3487,7 @@ sched_analyze_2 (x, insn)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;\n@@ -4563,7 +4563,7 @@ attach_deaths (x, insn, set_p)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;"}, {"sha": "594858a92e18945a89fc076e969b35a122b2a749", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -954,7 +954,7 @@ save_constants (px)\n \n   else\n     {\n-      char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n+      const char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n       int len = GET_RTX_LENGTH (GET_CODE (x));\n \n       for (i = len-1; i >= 0; i--)\n@@ -1017,7 +1017,7 @@ copy_for_inline (orig)\n   register rtx new;\n   register int i;\n   register enum rtx_code code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (x == 0)\n     return x;\n@@ -2274,7 +2274,7 @@ copy_rtx_and_substitute (orig, map)\n   register int i, j;\n   register RTX_CODE code;\n   register enum machine_mode mode;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   int regno;\n \n   if (orig == 0)\n@@ -2819,7 +2819,7 @@ subst_constants (loc, insn, map)\n   rtx x = *loc;\n   register int i;\n   register enum rtx_code code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   int num_changes = num_validated_changes ();\n   rtx new = 0;\n   enum machine_mode op0_mode = MAX_MACHINE_MODE;\n@@ -3129,7 +3129,7 @@ restore_constants (px)\n {\n   rtx x = *px;\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   if (x == 0)\n     return;"}, {"sha": "d6f987b0938523ecd20fa47209344812e6e002e9", "filename": "gcc/jump.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -3693,7 +3693,7 @@ mark_jump_label (x, insn, cross_jump)\n {\n   register RTX_CODE code = GET_CODE (x);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   switch (code)\n     {\n@@ -4345,7 +4345,7 @@ invert_exp (x, insn)\n {\n   register RTX_CODE code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   code = GET_CODE (x);\n \n@@ -4495,7 +4495,7 @@ redirect_exp (loc, olabel, nlabel, insn)\n   register rtx x = *loc;\n   register RTX_CODE code = GET_CODE (x);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (code == LABEL_REF)\n     {\n@@ -4630,7 +4630,7 @@ rtx_renumbered_equal_p (x, y)\n {\n   register int i;\n   register RTX_CODE code = GET_CODE (x);\n-  register char *fmt;\n+  register const char *fmt;\n       \n   if (x == y)\n     return 1;\n@@ -5096,7 +5096,7 @@ rtx_equal_for_thread_p (x, y, yinsn)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   code = GET_CODE (x);\n   /* Rtx's of different codes cannot be equal.  */"}, {"sha": "89e3f495d26ff679d83f078d87b412bffa099f6d", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -508,7 +508,7 @@ contains_replace_regs (x, reg_equiv_replace)\n      char *reg_equiv_replace;\n {\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n   enum rtx_code code = GET_CODE (x);\n \n   switch (code)\n@@ -558,7 +558,7 @@ memref_referenced_p (memref, x)\n      rtx memref;\n {\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n   enum rtx_code code = GET_CODE (x);\n \n   switch (code)"}, {"sha": "db4664ce192599bfa2afe1fee946b90cfef360c9", "filename": "gcc/loop.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1189,7 +1189,7 @@ record_excess_regs (in_this, not_in_this, output)\n      rtx *output;\n {\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n   int i;\n \n   code = GET_CODE (in_this);\n@@ -1588,7 +1588,7 @@ rtx_equal_for_loop_p (x, y, movables)\n   register int j;\n   register struct movable *m;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == y)\n     return 1;\n@@ -1701,7 +1701,7 @@ add_label_notes (x, insns)\n {\n   enum rtx_code code = GET_CODE (x);\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n   rtx insn;\n \n   if (code == LABEL_REF && !LABEL_REF_NONLOCAL_P (x))\n@@ -2246,7 +2246,7 @@ replace_call_address (x, reg, addr)\n {\n   register enum rtx_code code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;\n@@ -2309,7 +2309,7 @@ count_nonfixed_reads (x)\n {\n   register enum rtx_code code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n   int value;\n \n   if (x == 0)\n@@ -3163,7 +3163,7 @@ invariant_p (x)\n {\n   register int i;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n   int conditional = 0;\n   rtx mem_list_entry;\n \n@@ -3408,7 +3408,7 @@ find_single_use_in_loop (insn, x, usage)\n      varray_type usage;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt = GET_RTX_FORMAT (code);\n+  const char *fmt = GET_RTX_FORMAT (code);\n   int i, j;\n \n   if (code == REG)\n@@ -5207,7 +5207,7 @@ find_mem_givs (x, insn, not_every_iteration, loop_start, loop_end)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;\n@@ -7102,7 +7102,7 @@ find_life_end (x, stats, insn, biv)\n      struct recombine_givs_stats *stats;\n {\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n   int retval;\n \n@@ -8351,7 +8351,7 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n   rtx new;\n #endif\n   int arg_operand;\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   switch (code)\n@@ -8744,7 +8744,7 @@ update_reg_last_use (x, insn)\n   else\n     {\n       register int i, j;\n-      register char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n+      register const char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n       for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n \t{\n \t  if (fmt[i] == 'e')"}, {"sha": "0d23a5104e982a4b362514ed4b7644e8ed9498aa", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -38,9 +38,9 @@ Boston, MA 02111-1307, USA.  */\n /* Array containing all of the register names */\n \n #ifdef DEBUG_REGISTER_NAMES\n-static char *reg_names[] = DEBUG_REGISTER_NAMES;\n+static const char * const reg_names[] = DEBUG_REGISTER_NAMES;\n #else\n-static char *reg_names[] = REGISTER_NAMES;\n+static const char * const reg_names[] = REGISTER_NAMES;\n #endif\n \n static FILE *outfile;\n@@ -73,7 +73,7 @@ print_rtx (in_rtx)\n {\n   register int i = 0;\n   register int j;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   register int is_insn;\n \n   if (sawclose)"}, {"sha": "9e06fb5a976f44a94b57f4d51ccf93bdd4fc0bc5", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -441,7 +441,7 @@ validate_replace_rtx_1 (loc, from, to, object)\n      rtx from, to, object;\n {\n   register int i, j;\n-  register char *fmt;\n+  register const char *fmt;\n   register rtx x = *loc;\n   enum rtx_code code = GET_CODE (x);\n \n@@ -744,7 +744,7 @@ find_single_use_1 (dest, loc)\n   rtx *result = 0;\n   rtx *this_result;\n   int i;\n-  char *fmt;\n+  const char *fmt;\n \n   switch (code)\n     {"}, {"sha": "4da5a7a85dd3552a0080ef12c721f9efe2f0bbeb", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -409,7 +409,7 @@ int\n stack_regs_mentioned_p (pat)\n      rtx pat;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (STACK_REG_P (pat))\n@@ -595,7 +595,7 @@ record_label_references (insn, pat)\n {\n   register enum rtx_code code = GET_CODE (pat);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (code == LABEL_REF)\n     {\n@@ -910,7 +910,7 @@ record_reg_life_pat (pat, src, dest, douse)\n      HARD_REG_SET *src, *dest;\n      int douse;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (STACK_REG_P (pat)\n@@ -1736,7 +1736,7 @@ static void\n swap_rtx_condition (pat)\n      rtx pat;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (GET_RTX_CLASS (GET_CODE (pat)) == '<')\n@@ -2719,7 +2719,7 @@ goto_block_pat (insn, regstack, pat)\n      default:\n      {\n       int i, j;\n-      char *fmt = GET_RTX_FORMAT (GET_CODE (pat));\n+      const char *fmt = GET_RTX_FORMAT (GET_CODE (pat));\n \n       for (i = GET_RTX_LENGTH (GET_CODE (pat)) - 1; i >= 0; i--)\n \t{\n@@ -2929,7 +2929,7 @@ print_blocks (file, insn, pat)\n {\n   register RTX_CODE code = GET_CODE (pat);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (code == LABEL_REF)\n     {"}, {"sha": "6aa18576856e9540c4ff3d6f839f8789a84b8988", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -587,7 +587,7 @@ fix_register (name, fixed, call_used)\n \t   )\n \t  && (fixed == 0 || call_used == 0))\n \t{\n-\t  static char* what_option[2][2] = {\n+\t  static const char * const what_option[2][2] = {\n \t    { \"call-saved\", \"call-used\" },\n \t    { \"no-such-option\", \"fixed\" }};\n \t  \n@@ -1777,7 +1777,7 @@ record_address_regs (x, class, scale)\n \n     default:\n       {\n-\tregister char *fmt = GET_RTX_FORMAT (code);\n+\tregister const char *fmt = GET_RTX_FORMAT (code);\n \tregister int i;\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  if (fmt[i] == 'e')\n@@ -2160,7 +2160,7 @@ reg_scan_mark_refs (x, insn, note_flag, min_regno)\n \n     default:\n       {\n-\tregister char *fmt = GET_RTX_FORMAT (code);\n+\tregister const char *fmt = GET_RTX_FORMAT (code);\n \tregister int i;\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  {"}, {"sha": "bff689e60cb8382f2fddaf02b4158dc72771027e", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -2102,7 +2102,7 @@ stable_but_for_p (x, src, dst)\n     case '<': case '1': case 'c': case '2': case 'b': case '3':\n       {\n \tint i;\n-\tchar *fmt = GET_RTX_FORMAT (code);\n+\tconst char *fmt = GET_RTX_FORMAT (code);\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  if (fmt[i] == 'e' && ! stable_but_for_p (XEXP (x, i), src, dst))\n \t      return 0;"}, {"sha": "6655a18a8f6c3613d4fff294526c11cfe3cd9e11", "filename": "gcc/reload.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1626,7 +1626,7 @@ loc_mentioned_in_p (loc, in)\n      rtx *loc, in;\n {\n   enum rtx_code code = GET_CODE (in);\n-  char *fmt = GET_RTX_FORMAT (code);\n+  const char *fmt = GET_RTX_FORMAT (code);\n   int i, j;\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -2075,7 +2075,7 @@ operands_match_p (x, y)\n {\n   register int i;\n   register RTX_CODE code = GET_CODE (x);\n-  register char *fmt;\n+  register const char *fmt;\n   int success_2;\n       \n   if (x == y)\n@@ -4381,7 +4381,7 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest, insn)\n {\n   register RTX_CODE code = GET_CODE (x);\n \n-  register char *fmt = GET_RTX_FORMAT (code);\n+  register const char *fmt = GET_RTX_FORMAT (code);\n   register int i;\n   int copied;\n \n@@ -4961,7 +4961,7 @@ subst_reg_equivs (ad, insn)\n {\n   register RTX_CODE code = GET_CODE (ad);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   switch (code)\n     {\n@@ -5554,7 +5554,7 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels, insn)\n     }\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -5777,7 +5777,7 @@ copy_replacements (x, y)\n {\n   int i, j;\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt = GET_RTX_FORMAT (code);\n+  const char *fmt = GET_RTX_FORMAT (code);\n   struct replacement *r;\n \n   /* We can't support X being a SUBREG because we might then need to know its\n@@ -5897,7 +5897,7 @@ refers_to_regno_for_reload_p (regno, endregno, x, loc)\n {\n   register int i;\n   register RTX_CODE code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return 0;\n@@ -6070,7 +6070,7 @@ int\n refers_to_mem_for_reload_p (x)\n      rtx x;\n {\n-  char *fmt;\n+  const char *fmt;\n   int i;\n \n   if (GET_CODE (x) == MEM)\n@@ -6573,7 +6573,7 @@ find_inc_amount (x, inced)\n      rtx x, inced;\n {\n   register enum rtx_code code = GET_CODE (x);\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n \n   if (code == MEM)\n@@ -6638,7 +6638,7 @@ regno_clobbered_p (regno, insn)\n   return 0;\n }\n \n-static char *reload_when_needed_name[] =\n+static const char *reload_when_needed_name[] =\n {\n   \"RELOAD_FOR_INPUT\", \n   \"RELOAD_FOR_OUTPUT\", \n@@ -6653,7 +6653,7 @@ static char *reload_when_needed_name[] =\n   \"RELOAD_FOR_OTHER_ADDRESS\"\n };\n \n-static char *reg_class_names[] = REG_CLASS_NAMES;\n+static const char * const reg_class_names[] = REG_CLASS_NAMES;\n \n /* These functions are used to print the variables set by 'find_reloads' */\n \n@@ -6662,7 +6662,7 @@ debug_reload_to_stream (f)\n      FILE *f;\n {\n   int r;\n-  char *prefix;\n+  const char *prefix;\n \n   if (! f)\n     f = stderr;"}, {"sha": "26e4309f2df0cc0311bd058c03c4902282763575", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -2706,7 +2706,7 @@ eliminate_regs (x, mem_mode, insn)\n   int regno;\n   rtx new;\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n   int copied = 0;\n \n   if (! current_function_decl)\n@@ -3987,7 +3987,7 @@ scan_paradoxical_subregs (x)\n      register rtx x;\n {\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n   register enum rtx_code code = GET_CODE (x);\n \n   switch (code)\n@@ -8134,7 +8134,7 @@ delete_address_reloads_1 (dead_insn, x, current_insn)\n \n   if (code != REG)\n     {\n-      char *fmt= GET_RTX_FORMAT (code);\n+      const char *fmt= GET_RTX_FORMAT (code);\n       for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t{\n \t  if (fmt[i] == 'e')\n@@ -8393,7 +8393,7 @@ count_occurrences (x, find)\n {\n   register int i, j;\n   register enum rtx_code code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   int count;\n \n   if (x == find)\n@@ -8568,7 +8568,7 @@ reload_cse_mem_conflict_p (mem_base, val)\n      rtx val;\n {\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n   int i;\n \n   code = GET_CODE (val);\n@@ -9859,7 +9859,7 @@ reload_combine_note_use (xp, insn)\n {\n   rtx x = *xp;\n   enum rtx_code code = x->code;\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n   rtx offset = const0_rtx; /* For the REG case below.  */\n \n@@ -10234,7 +10234,7 @@ add_auto_inc_notes (insn, x)\n      rtx x;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   if (code == MEM && auto_inc_p (XEXP (x, 0)))"}, {"sha": "f49777ec9ff4038f70c31f83357e6151c2b88a8b", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -184,7 +184,7 @@ mark_referenced_resources (x, res, include_delayed_effects)\n {\n   register enum rtx_code code = GET_CODE (x);\n   register int i, j;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   /* Handle leaf items for which we set resource flags.  Also, special-case\n      CALL, SET and CLOBBER operators.  */\n@@ -591,7 +591,7 @@ mark_set_resources (x, res, in_dest, include_delayed_effects)\n {\n   register enum rtx_code code;\n   register int i, j;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n  restart:\n "}, {"sha": "49f60353810292337f98f8798eaa4f41b3227e28", "filename": "gcc/rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -134,7 +134,7 @@ enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS];\n    rtx's of that code.  The sequence is a C string in which\n    each character describes one operand.  */\n \n-char *rtx_format[] = {\n+const char *rtx_format[] = {\n   /* \"*\" undefined.\n          can cause a warning message\n      \"0\" field is unused (or used in a phase-dependent manner)\n@@ -282,7 +282,7 @@ copy_rtx (orig)\n   register rtx copy;\n   register int i, j;\n   register RTX_CODE code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   code = GET_CODE (orig);\n \n@@ -410,7 +410,7 @@ copy_most_rtx (orig, may_share)\n   register rtx copy;\n   register int i, j;\n   register RTX_CODE code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (orig == may_share)\n     return orig;\n@@ -665,7 +665,7 @@ read_rtx (infile)\n {\n   register int i, j, list_counter;\n   RTX_CODE tmp_code;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n   /* tmp_char is a buffer used for reading decimal integers\n      and names of rtx types and machine modes.\n      Therefore, 256 must be enough.  */\n@@ -910,7 +910,7 @@ init_rtl ()\n   int i;\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n-    rtx_length[i] = strlen (rtx_format[i]);\n+    rtx_length[i] = strlen (GET_RTX_FORMAT(i));\n \n   /* Make CONST_DOUBLE bigger, if real values are bigger than\n      it normally expects to have room for."}, {"sha": "a5cb3870ec80b624a5a81bc004753f6321ba869f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -54,7 +54,7 @@ extern int rtx_length[];\n extern const char * const rtx_name[];\n #define GET_RTX_NAME(CODE)\t\t(rtx_name[(int) (CODE)])\n \n-extern char *rtx_format[];\n+extern const char *rtx_format[];\n #define GET_RTX_FORMAT(CODE)\t\t(rtx_format[(int) (CODE)])\n \n extern char rtx_class[];"}, {"sha": "8403afe83c4a024220d0eecf8a9639ba9f670337", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -48,7 +48,7 @@ rtx_unstable_p (x)\n {\n   register RTX_CODE code = GET_CODE (x);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (code == MEM)\n     return ! RTX_UNCHANGING_P (x);\n@@ -84,7 +84,7 @@ rtx_varies_p (x)\n {\n   register RTX_CODE code = GET_CODE (x);\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   switch (code)\n     {\n@@ -177,7 +177,7 @@ rtx_addr_varies_p (x)\n {\n   register enum rtx_code code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return 0;\n@@ -252,7 +252,7 @@ int\n reg_mentioned_p (reg, in)\n      register rtx reg, in;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int i;\n   register enum rtx_code code;\n \n@@ -528,7 +528,7 @@ regs_set_between_p (x, start, end)\n      rtx start, end;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   switch (code)\n@@ -574,7 +574,7 @@ modified_between_p (x, start, end)\n      rtx start, end;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   switch (code)\n@@ -629,7 +629,7 @@ modified_in_p (x, insn)\n      rtx insn;\n {\n   enum rtx_code code = GET_CODE (x);\n-  char *fmt;\n+  const char *fmt;\n   int i, j;\n \n   switch (code)\n@@ -805,7 +805,7 @@ refers_to_regno_p (regno, endregno, x, loc)\n {\n   register int i;\n   register RTX_CODE code;\n-  register char *fmt;\n+  register const char *fmt;\n \n  repeat:\n   /* The contents of a REG_NONNEG note is always zero, so we must come here\n@@ -933,7 +933,7 @@ reg_overlap_mentioned_p (x, in)\n     regno = REGNO (x);\n   else if (GET_CODE (x) == MEM)\n     {\n-      char *fmt;\n+      const char *fmt;\n       int i;\n \n       if (GET_CODE (in) == MEM)\n@@ -1079,7 +1079,7 @@ rtx_equal_p (x, y)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == y)\n     return 1;\n@@ -1612,7 +1612,7 @@ volatile_insn_p (x)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n     \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -1678,7 +1678,7 @@ volatile_refs_p (x)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n     \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -1753,7 +1753,7 @@ side_effects_p (x)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register char *fmt = GET_RTX_FORMAT (code);\n+    register const char *fmt = GET_RTX_FORMAT (code);\n     register int i;\n     \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -1783,7 +1783,7 @@ may_trap_p (x)\n {\n   int i;\n   enum rtx_code code;\n-  char *fmt;\n+  const char *fmt;\n \n   if (x == 0)\n     return 0;\n@@ -1862,7 +1862,7 @@ int\n inequality_comparisons_p (x)\n      rtx x;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   register int len, i;\n   register enum rtx_code code = GET_CODE (x);\n \n@@ -1926,7 +1926,7 @@ replace_rtx (x, from, to)\n      rtx x, from, to;\n {\n   register int i, j;\n-  register char *fmt;\n+  register const char *fmt;\n \n   /* The following prevents loops occurrence when we change MEM in\n      CONST_DOUBLE onto the same CONST_DOUBLE. */\n@@ -1974,7 +1974,7 @@ replace_regs (x, reg_map, nregs, replace_dest)\n {\n   register enum rtx_code code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return x;\n@@ -2082,7 +2082,7 @@ jmp_uses_reg_or_mem (x)\n {\n   enum rtx_code code = GET_CODE (x);\n   int i, j;\n-  char *fmt;\n+  const char *fmt;\n \n   switch (code)\n     {\n@@ -2187,7 +2187,7 @@ for_each_rtx (x, f, data)\n {\n   int result;\n   int length;\n-  char* format;\n+  const char* format;\n   int i;\n \n   /* Call F on X.  */\n@@ -2248,7 +2248,7 @@ regno_use_in (regno, x)\n      int regno;\n      rtx x;\n {\n-  register char *fmt;\n+  register const char *fmt;\n   int i, j;\n   rtx tem;\n "}, {"sha": "c438c02075e536cd52deeb058073e1a76c53154a", "filename": "gcc/sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -1274,7 +1274,7 @@ sched_analyze_2 (x, insn)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;\n@@ -2245,7 +2245,7 @@ attach_deaths (x, insn, set_p)\n   register int i;\n   register int j;\n   register enum rtx_code code;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return;"}, {"sha": "b95e1353fea3cbc55da40edc3143a4b54e3617a3", "filename": "gcc/stupid.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -600,7 +600,7 @@ stupid_mark_refs (x, chain)\n      struct insn_chain *chain;\n {\n   register RTX_CODE code;\n-  register char *fmt;\n+  register const char *fmt;\n   register int regno, i;\n   rtx insn = chain->insn;\n "}, {"sha": "d1d4688fb128897e529feb8be20d3d35bfef5852", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -4006,7 +4006,7 @@ remap_split_bivs (x)\n {\n   register enum rtx_code code;\n   register int i;\n-  register char *fmt;\n+  register const char *fmt;\n \n   if (x == 0)\n     return x;"}, {"sha": "e4754dc37d8de10cfea1c0de5ce6298b964bb795", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7d635c0efc87ff17945764258d9055ac7c8de3/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6f7d635c0efc87ff17945764258d9055ac7c8de3", "patch": "@@ -3760,7 +3760,7 @@ mark_constants (x)\n      register rtx x;\n {\n   register int i;\n-  register char *format_ptr;\n+  register const char *format_ptr;\n \n   if (x == 0)\n     return;"}]}