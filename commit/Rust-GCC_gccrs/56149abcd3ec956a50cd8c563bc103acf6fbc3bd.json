{"sha": "56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxNDlhYmNkM2VjOTU2YTUwY2Q4YzU2M2JjMTAzYWNmNmZiYzNiZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-15T12:03:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T12:03:42Z"}, "message": "cypress.md: Replace Sparc with SPARC.\n\n\t* config/sparc/cypress.md: Replace Sparc with SPARC.\n\t* config/sparc/freebsd.h: Likewise.\n\t* config/sparc/gmon-sol2.c: Likewise.\n\t* config/sparc/hypersparc.md: Likewise.\n\t* config/sparc/lb1spc.asm: Likewise.\n\t* config/sparc/lb1spl.asm: Likewise.\n\t* config/sparc/linux.h: Likewise.\n\t* config/sparc/linux64.h: Likewise.\n\t* config/sparc/lynx.h: Likewise.\n\t* config/sparc/sol2.h: Likewise.\n\t* config/sparc/sparc-modes.def: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\t* config/sparc/sparclet.md: Likewise.\n\t* config/sparc/supersparc.md: Likewise.\n\t* config/sparc/sysv4.h: Likewise.\n\t* config/sparc/vxsim.h: Likewise.\n\t* config/sparc/vxsparc64.h: Likewise.\n\nFrom-SVN: r57160", "tree": {"sha": "684c6f6493404bbf596aa204adb2868b722e86f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684c6f6493404bbf596aa204adb2868b722e86f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/comments", "author": null, "committer": null, "parents": [{"sha": "7df3fea2625d2e6d8fe7e75116d1e406d0107c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df3fea2625d2e6d8fe7e75116d1e406d0107c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df3fea2625d2e6d8fe7e75116d1e406d0107c96"}], "stats": {"total": 126, "additions": 74, "deletions": 52}, "files": [{"sha": "bf3c533fe4ba26f4fd9eeb59255c182b9caed1ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,3 +1,25 @@\n+2002-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/sparc/cypress.md: Replace Sparc with SPARC.\n+\t* config/sparc/freebsd.h: Likewise.\n+\t* config/sparc/gmon-sol2.c: Likewise.\n+\t* config/sparc/hypersparc.md: Likewise.\n+\t* config/sparc/lb1spc.asm: Likewise.\n+\t* config/sparc/lb1spl.asm: Likewise.\n+\t* config/sparc/linux.h: Likewise.\n+\t* config/sparc/linux64.h: Likewise.\n+\t* config/sparc/lynx.h: Likewise.\n+\t* config/sparc/sol2.h: Likewise.\n+\t* config/sparc/sparc-modes.def: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/sparc/sparc.md: Likewise.\n+\t* config/sparc/sparclet.md: Likewise.\n+\t* config/sparc/supersparc.md: Likewise.\n+\t* config/sparc/sysv4.h: Likewise.\n+\t* config/sparc/vxsim.h: Likewise.\n+\t* config/sparc/vxsparc64.h: Likewise.\n+\n 2002-09-14  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* config/avr/avr.c (output.h): Move after inclusion of tree.h."}, {"sha": "e9bff6d77a7d3c033c90b193ce518f975097a163", "filename": "gcc/config/sparc/cypress.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fcypress.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fcypress.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fcypress.md?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-;; Scheduling description for Sparc Cypress.\n+;; Scheduling description for SPARC Cypress.\n ;;   Copyright (C) 2002 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GNU CC."}, {"sha": "8149923a3f32f74d536a5db4c0d91a5f103819dc", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions for Sun Sparc64 running FreeBSD using the ELF format\n+/* Definitions for Sun SPARC64 running FreeBSD using the ELF format\n    Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n    Contributed by David E. O'Brien <obrien@FreeBSD.org> and BSDi.\n \n@@ -54,7 +54,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define WCHAR_TYPE_SIZE 32\n \n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #undef  LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n "}, {"sha": "c5776661eea25b064429493f68469879fb91290a", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -28,7 +28,7 @@\n  * SUCH DAMAGE.\n  */\n \n-/* Mangled into a form that works on Sparc Solaris 2 by Mark Eichin\n+/* Mangled into a form that works on SPARC Solaris 2 by Mark Eichin\n  * for Cygnus Support, July 1992.\n  */\n \n@@ -232,7 +232,7 @@ _mcleanup()\n }\n \n /*\n- * The Sparc stack frame is only held together by the frame pointers\n+ * The SPARC stack frame is only held together by the frame pointers\n  * in the register windows. According to the SVR4 SPARC ABI\n  * Supplement, Low Level System Information/Operating System\n  * Interface/Software Trap Types, a type 3 trap will flush all of the"}, {"sha": "d80e51e9848c3c1f460abbff20bdf3bc05eda3e5", "filename": "gcc/config/sparc/hypersparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fhypersparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fhypersparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fhypersparc.md?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-;; Scheduling description for HyperSparc.\n+;; Scheduling description for HyperSPARC.\n ;;   Copyright (C) 2002 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GNU CC.\n@@ -18,7 +18,7 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n-;; The HyperSparc is a dual-issue processor.  It is not all that fancy.\n+;; The HyperSPARC is a dual-issue processor.  It is not all that fancy.\n \n ;; ??? There are some things not modelled.  For example, sethi+or\n ;; ??? coming right after each other are specifically identified and"}, {"sha": "b60bd5740e76bce5e8bfc2187b4ba2523a3500b9", "filename": "gcc/config/sparc/lb1spc.asm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spc.asm?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,7 +1,7 @@\n /* This is an assembly language implementation of mulsi3, divsi3, and modsi3\n    for the sparc processor.\n \n-   These routines are derived from the Sparc Architecture Manual, version 8,\n+   These routines are derived from the SPARC Architecture Manual, version 8,\n    slightly edited to match the desired calling convention, and also to\n    optimize them for our purposes.  */\n \n@@ -81,7 +81,7 @@ mul_shortway:\n \n #ifdef L_divsi3\n /*\n- * Division and remainder, from Appendix E of the Sparc Version 8\n+ * Division and remainder, from Appendix E of the SPARC Version 8\n  * Architecture Manual, with fixes from Gordon Irlam.\n  */\n \n@@ -197,7 +197,7 @@ ready_to_divide:\n \t\tnop\n \t\tbe\tdo_single_div\n \t\tnop\n-\t/* NB: these are commented out in the V8-Sparc manual as well */\n+\t/* NB: these are commented out in the V8-SPARC manual as well */\n \t/* (I do not understand this) */\n \t! %o5 > %o3: went too far: back up 1 step\n \t!\tsrl\t%o5, 1, %o5\n@@ -544,7 +544,7 @@ divide:\n \t\tnop\n \t\tbe\tdo_single_div\n \t\tnop\n-\t/* NB: these are commented out in the V8-Sparc manual as well */\n+\t/* NB: these are commented out in the V8-SPARC manual as well */\n \t/* (I do not understand this) */\n \t! %o5 > %o3: went too far: back up 1 step\n \t!\tsrl\t%o5, 1, %o5"}, {"sha": "973401f801826421c4fd01641722348edabbf653", "filename": "gcc/config/sparc/lb1spl.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spl.asm?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,7 +1,7 @@\n /* This is an assembly language implementation of mulsi3, divsi3, and modsi3\n    for the sparclite processor.\n \n-   These routines are all from the Sparclite User's Guide, slightly edited\n+   These routines are all from the SPARClite User's Guide, slightly edited\n    to match the desired calling convention, and also to optimize them.  */\n \n #ifdef L_udivsi3"}, {"sha": "dcf79e858bbb43ac56ba339cb057eed98888d385", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -231,7 +231,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n \f\n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n /* Constant which presents upper bound of the above value.  */"}, {"sha": "51eca1661ae38e6688c41488be12ecb250bf162e", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -149,7 +149,7 @@ ENDFILE_SPEC_COMMON\n #define WCHAR_TYPE_SIZE 32\n \n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n@@ -378,7 +378,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Handle multilib correctly.  */\n #if defined(__arch64__)\n-/* 64-bit Sparc version */\n+/* 64-bit SPARC version */\n #define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned int *pc_ = (CONTEXT)->ra;\t\t\t\t\t\\\n@@ -429,7 +429,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     goto SUCCESS;\t\t\t\t\t\t\t\\\n   } while (0)\n #else\n-/* 32-bit Sparc version */\n+/* 32-bit SPARC version */\n #define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned int *pc_ = (CONTEXT)->ra;\t\t\t\t\t\\"}, {"sha": "805f65f34e3d280f747bf666d104af47519ef306", "filename": "gcc/config/sparc/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flynx.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef LINK_SPEC\n \n-/* Sparc version of libc.a has references to libm.a (printf calls pow for\n+/* SPARC version of libc.a has references to libm.a (printf calls pow for\n    instance), so we must always link both.  */\n \n #undef LIB_SPEC"}, {"sha": "3026e405f61cacb0feeca8fca4c06db694ab72b5", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -112,7 +112,7 @@ Boston, MA 02111-1307, USA.  */\n /* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.\n    Instead, it is enabled here, because it does work under Solaris.  */\n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE 128\n \n /* But indicate that it isn't supported by the hardware.  */"}, {"sha": "3ebf9c8660ddb69f51d3e015450e3a0d9a9fc8c6", "filename": "gcc/config/sparc/sparc-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -23,7 +23,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Add any extra modes needed to represent the condition code.\n \n-   On the Sparc, we have a \"no-overflow\" mode which is used when an add or\n+   On the SPARC, we have a \"no-overflow\" mode which is used when an add or\n    subtract insn is used to set the condition code.  Different branches are\n    used in this case for some operations.\n "}, {"sha": "0730ffd610fdebfce8add67925ee51210658d0c4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1410,7 +1410,7 @@ sparc_emit_set_const32 (op0, op1)\n }\n \n \f\n-/* Sparc-v9 code-model support.  */\n+/* SPARC-v9 code-model support.  */\n void\n sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n      rtx op0;\n@@ -4757,7 +4757,7 @@ function_arg_record_value_2 (type, startbitpos, parms)\n }\n \n /* Used by function_arg and function_value to implement the complex\n-   Sparc64 structure calling conventions.  */\n+   SPARC64 structure calling conventions.  */\n \n static rtx\n function_arg_record_value (type, mode, slotno, named, regbase)"}, {"sha": "d294a07910b0c383faa1faddd64feb041d10d0c9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -434,7 +434,7 @@ extern int target_flags;\n #define MASK_FLAT 0x200\n #define TARGET_FLAT (target_flags & MASK_FLAT)\n \n-/* Nonzero means use the registers that the Sparc ABI reserves for\n+/* Nonzero means use the registers that the SPARC ABI reserves for\n    application software.  This must be the default to coincide with the\n    setting in FIXED_REGISTERS.  */\n #define MASK_APP_REGS 0x400\n@@ -560,15 +560,15 @@ extern int target_flags;\n     {\"cypress\", 0,\t\t\t\t\t\t\t\\\n      N_(\"Optimize for Cypress processors\") }, \t\t\t\t\\\n     {\"sparclite\", 0,\t\t\t\t\t\t\t\\\n-     N_(\"Optimize for SparcLite processors\") }, \t\t\t\\\n+     N_(\"Optimize for SPARCLite processors\") }, \t\t\t\\\n     {\"f930\", 0,\t\t\t\t\t\t\t\t\\\n      N_(\"Optimize for F930 processors\") }, \t\t\t\t\\\n     {\"f934\", 0,\t\t\t\t\t\t\t\t\\\n      N_(\"Optimize for F934 processors\") }, \t\t\t\t\\\n     {\"v8\", 0,\t\t\t\t\t\t\t\t\\\n-     N_(\"Use V8 Sparc ISA\") }, \t\t\t\t\t\t\\\n+     N_(\"Use V8 SPARC ISA\") }, \t\t\t\t\t\t\\\n     {\"supersparc\", 0,\t\t\t\t\t\t\t\\\n-     N_(\"Optimize for SuperSparc processors\") }, \t\t\t\\\n+     N_(\"Optimize for SuperSPARC processors\") }, \t\t\t\\\n     /* End of deprecated options.  */\t\t\t\t\t\\\n     {\"ptr64\", MASK_PTR64,\t\t\t\t\t\t\\\n      N_(\"Pointers are 64-bit\") }, \t\t\t\t\t\\\n@@ -634,7 +634,7 @@ extern enum processor_type sparc_cpu;\n   { \"tune=\", &sparc_select[2].string,\t\t\t\t\\\n     N_(\"Schedule code for given CPU\") },\t\t\t\\\n   { \"cmodel=\", &sparc_cmodel_string,\t\t\t\t\\\n-    N_(\"Use given Sparc code model\") },\t\t\t\t\\\n+    N_(\"Use given SPARC code model\") },\t\t\t\t\\\n   SUBTARGET_OPTIONS \t\t\t\t\t\t\\\n }\n \n@@ -700,7 +700,7 @@ extern struct sparc_cpu_select sparc_select[];\n /* ??? This does not work in SunOS 4.x, so it is not enabled here.\n    Instead, it is enabled in sol2.h, because it does work under Solaris.  */\n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE 128\n #endif\n \n@@ -1118,7 +1118,7 @@ extern int sparc_mode_class[];\n \n #define DEFAULT_PCC_STRUCT_RETURN -1\n \n-/* Sparc ABI says that quad-precision floats and all structures are returned\n+/* SPARC ABI says that quad-precision floats and all structures are returned\n    in memory.\n    For v9: unions <= 32 bytes in size are returned in int regs,\n    structures up to 32 bytes are returned in int and fp regs.  */\n@@ -1817,7 +1817,7 @@ extern GTY(()) rtx sparc_compare_op1;\n /* Generate the special assembly code needed to tell the assembler whatever\n    it might need to know about the return value of a function.\n \n-   For Sparc assemblers, we need to output a .proc pseudo-op which conveys\n+   For SPARC assemblers, we need to output a .proc pseudo-op which conveys\n    information to the assembler relating to peephole optimization (done in\n    the assembler).  */\n \n@@ -2373,7 +2373,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    operand.  If we find one, push the reload and jump to WIN.  This\n    macro is used in only one place: `find_reloads_address' in reload.c.\n \n-   For Sparc 32, we wish to handle addresses by splitting them into\n+   For SPARC 32, we wish to handle addresses by splitting them into\n    HIGH+LO_SUM pairs, retaining the LO_SUM in the memory reference. \n    This cuts the number of extra insns by one.\n \n@@ -2494,7 +2494,7 @@ do {                                                                    \\\n #define SELECT_CC_MODE(OP,X,Y)  select_cc_mode ((OP), (X), (Y))\n \n /* Return non-zero if MODE implies a floating point inequality can be\n-   reversed.  For Sparc this is always true because we have a full\n+   reversed.  For SPARC this is always true because we have a full\n    compliment of ordered and unordered comparisons, but until generic\n    code knows how to reverse it correctly we keep the old definition.  */\n #define REVERSIBLE_CC_MODE(MODE) ((MODE) != CCFPEmode && (MODE) != CCFPmode)"}, {"sha": "b4394131326019fd3086337af183cc2bf8c0d77f", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1602,7 +1602,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"fcc\")])\n \n-;; Sparc V9-specific jump insns.  None of these are guaranteed to be\n+;; SPARC V9-specific jump insns.  None of these are guaranteed to be\n ;; in the architecture.\n \n ;; There are no 32 bit brreg insns.\n@@ -2202,7 +2202,7 @@\n   \"TARGET_ARCH64 && flag_pic\"\n   \"or\\t%1, %%lo(%a3-(%a2-.)), %0\")\n \n-;; Sparc-v9 code model support insns.  See sparc_emit_set_symbolic_const64\n+;; SPARC-v9 code model support insns.  See sparc_emit_set_symbolic_const64\n ;; in sparc.c to see what is going on here... PIC stuff comes first.\n \n (define_insn \"movdi_lo_sum_pic\"\n@@ -3459,7 +3459,7 @@\n   DONE;\n })\n \f\n-;; Sparc V9 conditional move instructions.\n+;; SPARC V9 conditional move instructions.\n \n ;; We can handle larger constants here for some flavors, but for now we keep\n ;; it simple and only allow those constants supported by all flavours.\n@@ -7216,14 +7216,14 @@\n   [(set_attr \"type\" \"shift\")])\n \f\n ;; Unconditional and other jump instructions\n-;; On the Sparc, by setting the annul bit on an unconditional branch, the\n+;; On the SPARC, by setting the annul bit on an unconditional branch, the\n ;; following insn is never executed.  This saves us a nop.  Dbx does not\n ;; handle such branches though, so we only use them when optimizing.\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n {\n-  /* TurboSparc is reported to have problems with\n+  /* TurboSPARC is reported to have problems with\n      with\n \tfoo: b,a foo\n      i.e. an empty loop with the annul bit set.  The workaround is to use \n@@ -7909,7 +7909,7 @@\n ;; ??? This should be a define expand, so that the extra instruction have\n ;; a chance of being optimized away.\n \n-;; Disabled because none of the UltraSparcs implement popc.  The HAL R1\n+;; Disabled because none of the UltraSPARCs implement popc.  The HAL R1\n ;; does, but no one uses that and we don't have a switch for it.\n ;\n ;(define_insn \"ffsdi2\""}, {"sha": "080090c3eadf580fadac784ecffef072d29a4971", "filename": "gcc/config/sparc/sparclet.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparclet.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsparclet.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparclet.md?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-;; Scheduling description for Sparclet.\n+;; Scheduling description for SPARClet.\n ;;   Copyright (C) 2002 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GNU CC.\n@@ -18,7 +18,7 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n-;; The Sparclet is a single-issue processor.\n+;; The SPARClet is a single-issue processor.\n \n (define_automaton \"sparclet\")\n "}, {"sha": "ea328868e6073d4aca751e1c004bb4a11f3c0908", "filename": "gcc/config/sparc/supersparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsupersparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsupersparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsupersparc.md?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-;; Scheduling description for SuperSparc.\n+;; Scheduling description for SuperSPARC.\n ;;   Copyright (C) 2002 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GNU CC.\n@@ -18,7 +18,7 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n-;; The SuperSparc is a tri-issue, which was considered quite parallel\n+;; The SuperSPARC is a tri-issue, which was considered quite parallel\n ;; at the time it was released.  Much like UltraSPARC-I and UltraSPARC-II\n ;; there are two integer units but only one of them may take shifts.\n ;;"}, {"sha": "f304d6b5497bfcc2149004a6d616133e8a87fe02", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,4 +1,4 @@\n-/* Target definitions for GNU compiler for Sparc running System V.4\n+/* Target definitions for GNU compiler for SPARC running System V.4\n    Copyright (C) 1991, 1992, 1995, 1996, 1997, 1998, 2000, 2002\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Undefined some symbols which are defined in \"svr4.h\" but which are\n    appropriate only for typical svr4 systems, but not for the specific\n-   case of svr4 running on a Sparc.  */\n+   case of svr4 running on a SPARC.  */\n \n #undef INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP\n@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n #undef SET_ASM_OP\t/* Has no equivalent.  See ASM_OUTPUT_DEF below.  */\n \n /* Provide a set of pre-definitions and pre-assertions appropriate for\n-   the Sparc running svr4.  __svr4__ is our extension.  */\n+   the SPARC running svr4.  __svr4__ is our extension.  */\n \n #undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n@@ -68,10 +68,10 @@ Boston, MA 02111-1307, USA.  */\n   \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n    %{fpic:-K PIC} %{fPIC:-K PIC} %(asm_cpu)\"\n \n-/* Define the names of various pseudo-op used by the Sparc/svr4 assembler.\n+/* Define the names of various pseudo-op used by the SPARC/svr4 assembler.\n    Note that many of these are different from the typical pseudo-ops used\n    by most svr4 assemblers.  That is probably due to a (misguided?) attempt\n-   to keep the Sparc/svr4 assembler somewhat compatible with the Sparc/SunOS\n+   to keep the SPARC/svr4 assembler somewhat compatible with the SPARC/SunOS\n    assembler.  */\n \n #define STRING_ASM_OP\t\t\"\\t.asciz\\t\"\n@@ -81,12 +81,12 @@ Boston, MA 02111-1307, USA.  */\n #define POPSECTION_ASM_OP\t\"\\t.popsection\"\n \n /* This is the format used to print the second operand of a .type pseudo-op\n-   for the Sparc/svr4 assembler.  */\n+   for the SPARC/svr4 assembler.  */\n \n #define TYPE_OPERAND_FMT      \"#%s\"\n \n /* This is the format used to print a .pushsection pseudo-op (and its operand)\n-   for the Sparc/svr4 assembler.  */\n+   for the SPARC/svr4 assembler.  */\n \n #define PUSHSECTION_FORMAT\t\"%s\\\"%s\\\"\\n\"\n \n@@ -108,9 +108,9 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n \tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n \n-/* Define how the Sparc registers should be numbered for Dwarf output.\n+/* Define how the SPARC registers should be numbered for Dwarf output.\n    The numbering provided here should be compatible with the native\n-   svr4 SDB debugger in the Sparc/svr4 reference port.  The numbering\n+   svr4 SDB debugger in the SPARC/svr4 reference port.  The numbering\n    is as follows:\n \n    Assembly name\tgcc internal regno\tDwarf regno"}, {"sha": "c9c356991185c104fabc3bcd62fcaf8632a4331d", "filename": "gcc/config/sparc/vxsim.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -132,5 +132,5 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.\n    Instead, it is enabled here, because it does work under Solaris.  */\n /* Define for support of TFmode long double.\n-   Sparc ABI says that long double is 4 words.  */\n+   SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE 64"}, {"sha": "d37bd54f860e3ed0d83fa6ee751cc0285cd2d7ad", "filename": "gcc/config/sparc/vxsparc64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56149abcd3ec956a50cd8c563bc103acf6fbc3bd/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h?ref=56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   64-bit VxWorks Sparc version.\n+   64-bit VxWorks SPARC version.\n    Copyright (C) 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC."}]}