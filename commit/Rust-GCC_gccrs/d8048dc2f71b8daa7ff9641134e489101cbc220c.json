{"sha": "d8048dc2f71b8daa7ff9641134e489101cbc220c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwNDhkYzJmNzFiOGRhYTdmZjk2NDExMzRlNDg5MTAxY2JjMjIwYw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-09T07:10:58Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-09T07:10:58Z"}, "message": "2003-05-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/DataOutputStream.java\n\t(writeShort): Made it synchronized.\n\t(writeChar): Likewise.\n\t(writeInt): Likewise.\n\t(writeLong): Liekwise.\n\t(writeUTF): Made it synchronized, renamed argument to match classpath.\n\t* java/io/InputStreamReader.java\n\t(converter): Added documentation.\n\t(read): Merged documentation from classpath.\n\t* java/io/OutputStreamWriter.java\n\t(OutputStreamWriter): Merged documentation from classpath.\n\t(close): Reformatted.\n\t(getEncoding): Likewise.\n\t(flush): Likewise.\n\t(write): Merged documentation from classpath, reformatted.\n\nFrom-SVN: r66624", "tree": {"sha": "a797ca5335f924837358099e840e7ae02cb75506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a797ca5335f924837358099e840e7ae02cb75506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8048dc2f71b8daa7ff9641134e489101cbc220c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8048dc2f71b8daa7ff9641134e489101cbc220c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8048dc2f71b8daa7ff9641134e489101cbc220c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8048dc2f71b8daa7ff9641134e489101cbc220c/comments", "author": null, "committer": null, "parents": [{"sha": "c6b97fac181cd452623b4208eb0c8209b6c47c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b97fac181cd452623b4208eb0c8209b6c47c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b97fac181cd452623b4208eb0c8209b6c47c71"}], "stats": {"total": 154, "additions": 128, "deletions": 26}, "files": [{"sha": "9f47624e39b08666bacfc0955ce652793906156e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d8048dc2f71b8daa7ff9641134e489101cbc220c", "patch": "@@ -1,3 +1,21 @@\n+2003-05-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/DataOutputStream.java\n+\t(writeShort): Made it synchronized.\n+\t(writeChar): Likewise.\n+\t(writeInt): Likewise.\n+\t(writeLong): Liekwise.\n+\t(writeUTF): Made it synchronized, renamed argument to match classpath.\n+\t* java/io/InputStreamReader.java\n+\t(converter): Added documentation.\n+\t(read): Merged documentation from classpath.\n+\t* java/io/OutputStreamWriter.java\n+\t(OutputStreamWriter): Merged documentation from classpath.\n+\t(close): Reformatted.\n+\t(getEncoding): Likewise.\n+\t(flush): Likewise.\n+\t(write): Merged documentation from classpath, reformatted.\n+\n 2003-05-08  Tom Tromey  <tromey@redhat.com>\n \n \t* configure.host <powerpc64*-*>: Set with_libffi_default and"}, {"sha": "9232b7ad73d8c074c8443373b5bf78e26da87934", "filename": "libjava/java/io/DataOutputStream.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FDataOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FDataOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutputStream.java?ref=d8048dc2f71b8daa7ff9641134e489101cbc220c", "patch": "@@ -191,7 +191,7 @@ public final void writeByte (int value) throws IOException\n    * @see DataInput#readShort\n    * @see DataInput#readUnsignedShort\n    */\n-  public final void writeShort (int value) throws IOException\n+  public final synchronized void writeShort (int value) throws IOException\n   {\n     write ((byte) (0xff & (value >> 8)));\n     write ((byte) (0xff & value));\n@@ -217,7 +217,7 @@ public final void writeShort (int value) throws IOException\n    *\n    * @see DataInput#readChar\n    */\n-  public final void writeChar (int value) throws IOException\n+  public final synchronized void writeChar (int value) throws IOException\n   {\n     write ((byte) (0xff & (value >> 8)));\n     write ((byte) (0xff & value));\n@@ -243,7 +243,7 @@ public final void writeChar (int value) throws IOException\n    *\n    * @see DataInput#readInt\n    */\n-  public final void writeInt (int value) throws IOException\n+  public final synchronized void writeInt (int value) throws IOException\n   {\n     write ((byte) (0xff & (value >> 24)));\n     write ((byte) (0xff & (value >> 16)));\n@@ -275,7 +275,7 @@ public final void writeInt (int value) throws IOException\n    *\n    * @see DataInput#readLong\n    */\n-  public final void writeLong (long value) throws IOException\n+  public final synchronized void writeLong (long value) throws IOException\n   {\n     write ((byte) (0xff & (value >> 56)));\n     write ((byte) (0xff & (value>> 48)));\n@@ -404,14 +404,14 @@ public final void writeChars (String value) throws IOException\n    *\n    * @see DataInput#readUTF\n    */\n-  public final void writeUTF (String s) throws IOException\n+  public synchronized final void writeUTF (String value) throws IOException\n   {\n-    int len = s.length();\n+    int len = value.length();\n     int sum = 0;\n \n     for (int i = 0; i < len && sum <= 65535; ++i)\n       {\n-\tchar c = s.charAt(i);\n+\tchar c = value.charAt(i);\n \tif (c >= '\\u0001' && c <= '\\u007f')\n \t  sum += 1;\n \telse if (c == '\\u0000' || (c >= '\\u0080' && c <= '\\u07ff'))\n@@ -427,7 +427,7 @@ else if (c == '\\u0000' || (c >= '\\u0080' && c <= '\\u07ff'))\n \n     for (int i = 0; i < len; ++i)\n       {\n-\tchar c = s.charAt(i);\n+\tchar c = value.charAt(i);\n \tif (c >= '\\u0001' && c <= '\\u007f')\n \t  write (c);\n \telse if (c == '\\u0000' || (c >= '\\u0080' && c <= '\\u07ff'))"}, {"sha": "05ed5fe22879ae6afe4401150301171f76c7e5d6", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=d8048dc2f71b8daa7ff9641134e489101cbc220c", "patch": "@@ -96,6 +96,10 @@ public class InputStreamReader extends Reader\n   // Last available character (in work buffer) to read.\n   int wcount;\n \n+  /*\n+   * This is the byte-character decoder class that does the reading and\n+   * translation of bytes from the underlying stream.\n+   */\n   BytesToUnicode converter;\n \n   /**\n@@ -201,7 +205,20 @@ public boolean ready() throws IOException\n       }\n   }\n \n-  public int read(char buf[], int offset, int length) throws IOException\n+  /**\n+   * This method reads up to <code>length</code> characters from the stream into\n+   * the specified array starting at index <code>offset</code> into the\n+   * array.\n+   *\n+   * @param buf The character array to recieve the data read\n+   * @param offset The offset into the array to start storing characters\n+   * @param length The requested number of characters to read.\n+   *\n+   * @return The actual number of characters read, or -1 if end of stream.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public int read (char[] buf, int offset, int length) throws IOException\n   {\n     synchronized (lock)\n       {"}, {"sha": "e4ecbdbab8fe5dbbf2d1e67eedd5dad0dcb3416c", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 84, "deletions": 17, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8048dc2f71b8daa7ff9641134e489101cbc220c/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=d8048dc2f71b8daa7ff9641134e489101cbc220c", "patch": "@@ -37,20 +37,51 @@\n \n \n package java.io;\n+\n import gnu.gcj.convert.UnicodeToBytes;\n \n /**\n+ * This class writes characters to an output stream that is byte oriented\n+ * It converts the chars that are written to bytes using an encoding layer,\n+ * which is specific to a particular encoding standard.  The desired\n+ * encoding can either be specified by name, or if no encoding is specified,\n+ * the system default encoding will be used.  The system default encoding\n+ * name is determined from the system property <code>file.encoding</code>.\n+ * The only encodings that are guaranteed to be available are \"8859_1\"\n+ * (the Latin-1 character set) and \"UTF8\".  Unfortunately, Java does not\n+ * provide a mechanism for listing the encodings that are supported in\n+ * a given implementation.\n+ * <p>\n+ * Here is a list of standard encoding names that may be available:\n+ * <p>\n+ * <ul>\n+ * <li>8859_1 (ISO-8859-1/Latin-1)\n+ * <li>8859_2 (ISO-8859-2/Latin-2)\n+ * <li>8859_3 (ISO-8859-3/Latin-3)\n+ * <li>8859_4 (ISO-8859-4/Latin-4)\n+ * <li>8859_5 (ISO-8859-5/Latin-5)\n+ * <li>8859_6 (ISO-8859-6/Latin-6)\n+ * <li>8859_7 (ISO-8859-7/Latin-7)\n+ * <li>8859_8 (ISO-8859-8/Latin-8)\n+ * <li>8859_9 (ISO-8859-9/Latin-9)\n+ * <li>ASCII (7-bit ASCII)\n+ * <li>UTF8 (UCS Transformation Format-8)\n+ * <li>More Later\n+ * </ul>\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Per Bothner <bothner@cygnus.com>\n  * @date April 17, 1998.  \n  */\n-/* Written using \"Java Class Libraries\", 2nd edition, plus online\n- * API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct, but only supports 8859_1.\n- */\n public class OutputStreamWriter extends Writer\n {\n   BufferedOutputStream out;\n \n+  /**\n+   * This is the byte-character encoder class that does the writing and\n+   * translation of characters to bytes before writing to the underlying\n+   * class.\n+   */\n   UnicodeToBytes converter;\n \n   /* Temporary buffer. */\n@@ -67,8 +98,21 @@ private OutputStreamWriter(OutputStream out, UnicodeToBytes encoder)\n     this.converter = encoder;\n   }\n \n-  public OutputStreamWriter(OutputStream out, String encoding_scheme)\n-   throws UnsupportedEncodingException\n+  /**\n+   * This method initializes a new instance of <code>OutputStreamWriter</code>\n+   * to write to the specified stream using a caller supplied character\n+   * encoding scheme.  Note that due to a deficiency in the Java language\n+   * design, there is no way to determine which encodings are supported.\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   * @param encoding_scheme The name of the encoding scheme to use for \n+   * character to byte translation\n+   *\n+   * @exception UnsupportedEncodingException If the named encoding is \n+   * not available.\n+   */\n+  public OutputStreamWriter (OutputStream out, String encoding_scheme) \n+    throws UnsupportedEncodingException\n   {\n     this(out, UnicodeToBytes.getEncoder(encoding_scheme));\n   }\n@@ -79,7 +123,7 @@ public OutputStreamWriter(OutputStream out, String encoding_scheme)\n    *\n    * @param out The <code>OutputStream</code> to write to\n    */\n-  public OutputStreamWriter(OutputStream out)\n+  public OutputStreamWriter (OutputStream out)\n   {\n     this(out, UnicodeToBytes.getDefaultEncoder());\n   }\n@@ -90,7 +134,7 @@ public OutputStreamWriter(OutputStream out)\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void close() throws IOException\n+  public void close () throws IOException\n   {\n     synchronized (lock)\n       {\n@@ -111,7 +155,7 @@ public void close() throws IOException\n    *\n    * @return The encoding scheme name\n    */\n-  public String getEncoding()\n+  public String getEncoding ()\n   {\n     return out != null ? converter.getName() : null;\n   }\n@@ -121,7 +165,7 @@ public String getEncoding()\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void flush() throws IOException\n+  public void flush () throws IOException\n   {\n     synchronized (lock)\n       {\n@@ -137,8 +181,18 @@ public void flush() throws IOException\n       }\n   }\n \n-  public void write(char[] buf, int offset, int count)\n-     throws IOException\n+  /**\n+   * This method writes <code>count</code> characters from the specified\n+   * array to the output stream starting at position <code>offset</code>\n+   * into the array.\n+   *\n+   * @param buf The array of character to write from\n+   * @param offset The offset into the array to start writing chars from\n+   * @param count The number of chars to write.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public void write (char[] buf, int offset, int count) throws IOException\n   {\n     synchronized (lock)\n       {\n@@ -154,8 +208,10 @@ public void write(char[] buf, int offset, int count)\n       }\n   }\n \n-  /** Writes characters through to the inferior BufferedOutputStream.\n-   * Ignores wcount and the work buffer. */\n+  /*\n+   * Writes characters through to the inferior BufferedOutputStream.\n+   * Ignores wcount and the work buffer.\n+   */\n   private void writeChars(char[] buf, int offset, int count)\n     throws IOException\n   {\n@@ -178,8 +234,19 @@ private void writeChars(char[] buf, int offset, int count)\n       }\n   }\n \n-  public void write(String str, int offset, int count)\n-     throws IOException\n+  /**\n+   * This method writes <code>count</code> bytes from the specified \n+   * <code>String</code> starting at position <code>offset</code> into the\n+   * <code>String</code>.\n+   *\n+   * @param str The <code>String</code> to write chars from\n+   * @param offset The position in the <code>String</code> to start \n+   * writing chars from\n+   * @param count The number of chars to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public void write (String str, int offset, int count) throws IOException\n   {\n     synchronized (lock)\n       {\n@@ -217,7 +284,7 @@ public void write(String str, int offset, int count)\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void write(int ch) throws IOException\n+  public void write (int ch) throws IOException\n   {\n     synchronized (lock)\n       {"}]}