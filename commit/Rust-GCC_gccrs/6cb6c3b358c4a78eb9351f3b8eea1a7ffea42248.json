{"sha": "6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiNmMzYjM1OGM0YTc4ZWI5MzUxZjNiOGVlYTFhN2ZmZWE0MjI0OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-22T16:20:16Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-22T16:20:16Z"}, "message": "Fix varardic function returning a structure or union.\n\nFrom-SVN: r2205", "tree": {"sha": "26eb0c42e0640649850324429692c3e05b79dc02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26eb0c42e0640649850324429692c3e05b79dc02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248/comments", "author": null, "committer": null, "parents": [{"sha": "372e033b8f9c7b7f5f38313a8638570908b90b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372e033b8f9c7b7f5f38313a8638570908b90b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372e033b8f9c7b7f5f38313a8638570908b90b1f"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "7936bc28efa7468d77f92599c4df546ae67e6818", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "patch": "@@ -2400,7 +2400,19 @@ init_cumulative_args (cum, fntype, libname)\n   tree param, next_param;\n \n   if (TARGET_DEBUG_E_MODE)\n-    fprintf (stderr, \"\\ninit_cumulative_args\\n\");\n+    {\n+      fprintf (stderr, \"\\ninit_cumulative_args, fntype = 0x%.8lx\", (long)fntype);\n+      if (!fntype)\n+\tfputc ('\\n', stderr);\n+\n+      else\n+\t{\n+\t  tree ret_type = TREE_TYPE (fntype);\n+\t  fprintf (stderr, \", fntype code = %s, ret code = %s\\n\",\n+\t\t   tree_code_name[ (int)TREE_CODE (fntype) ],\n+\t\t   tree_code_name[ (int)TREE_CODE (ret_type) ]);\n+\t}\n+    }\n \n   cum->gp_reg_found = 0;\n   cum->arg_number = 0;"}, {"sha": "12f581cbf18eb3e8fccf94d84d4f742d7d33180c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=6cb6c3b358c4a78eb9351f3b8eea1a7ffea42248", "patch": "@@ -473,7 +473,7 @@ while (0)\n \f\n /* Print subsidiary information on the compiler version in use.  */\n \n-#define MIPS_VERSION \"[AL 1.1, MM 25]\"\n+#define MIPS_VERSION \"[AL 1.1, MM 26]\"\n \n #ifndef MACHINE_TYPE\n #define MACHINE_TYPE \"BSD Mips\"\n@@ -1623,16 +1623,19 @@ extern struct mips_frame_info current_frame_info;\n    `ACCUMULATE_OUTGOING_ARGS'.  */\n #define ACCUMULATE_OUTGOING_ARGS\n \n-/* Offset of first parameter from the argument pointer register value.  */\n-#define FIRST_PARM_OFFSET(FNDECL) 0\n+/* Offset from the argument pointer register to the first argument's\n+   address.  On some machines it may depend on the data type of the\n+   function.\n \n-/* Offset from top-of-stack address to location to store the\n-   function parameter if it can't go in a register.\n-   Addresses for following parameters are computed relative to this one.\n+   If `ARGS_GROW_DOWNWARD', this is the offset to the location above\n+   the first argument's address.  */\n \n-   It also has the effect of counting register arguments in the total\n-   argument size. */\n-#define FIRST_PARM_CALLER_OFFSET(FNDECL) 0\n+#define FIRST_PARM_OFFSET(FNDECL)\t\t\t\t\t\\\n+  (FNDECL != 0\t\t\t\t\t\t\t\t\\\n+   && TREE_TYPE (FNDECL) != 0\t\t\t\t\t\t\\\n+   && TREE_TYPE (TREE_TYPE (FNDECL)) != 0\t\t\t\t\\\n+   && (TREE_CODE (TREE_TYPE (TREE_TYPE (FNDECL))) == RECORD_TYPE\t\\\n+       || TREE_CODE (TREE_TYPE (TREE_TYPE (FNDECL))) == UNION_TYPE) ? 4 : 0)\n \n /* When a parameter is passed in a register, stack space is still\n    allocated for it.  For the MIPS, stack space must be allocated, cf"}]}