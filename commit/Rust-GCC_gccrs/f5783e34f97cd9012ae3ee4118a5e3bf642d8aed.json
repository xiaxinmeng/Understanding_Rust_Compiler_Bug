{"sha": "f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3ODNlMzRmOTdjZDkwMTJhZTNlZTQxMThhNWUzYmY2NDJkOGFlZA==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2007-10-03T17:27:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-03T17:27:18Z"}, "message": "moveable.cc: New.\n\n2007-10-03  Chris Jefferson  <chris@bubblescope.net>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/20_util/pair/moveable.cc: New. Merge from \n\tlibstdcxx_so_7-branch.\n\t* testsuite/23_containers/deque/capacity/moveable.cc: Same.\n\t* testsuite/23_containers/deque/cons/moveable.cc: Same.\n\t* testsuite/23_containers/deque/modifiers/moveable.cc: Same.\n\t* testsuite/23_containers/deque/moveable.cc: Same.\n\t* testsuite/23_containers/list/moveable.cc: Same.\n\t* testsuite/23_containers/map/moveable.cc: Same.\n\t* testsuite/23_containers/multimap/moveable.cc: Same.\n\t* testsuite/23_containers/multiset/moveable.cc: Same.\n\t* testsuite/23_containers/set/moveable.cc: Same.\n\t* testsuite/23_containers/vector/cons/moveable.cc: Same.\n\t* testsuite/23_containers/vector/modifiers/moveable.cc: Same.\n\t* testsuite/23_containers/vector/moveable.cc: Same.\n\t* testsuite/23_containers/vector/resize/moveable.cc: Same.\n\t* testsuite/25_algorithms/heap/moveable.cc: Same.\n\t* testsuite/25_algorithms/nth_element/moveable.cc: Same.\n\t* testsuite/25_algorithms/partial_sort/moveable.cc: Same.\n\t* testsuite/25_algorithms/partition/moveable.cc: Same.\n\t* testsuite/25_algorithms/remove_if/moveable.cc: Same.\n\t* testsuite/25_algorithms/remove/moveable.cc: Same.\n\t* testsuite/25_algorithms/reverse/moveable.cc: Same.\n\t* testsuite/25_algorithms/rotate/moveable.cc: Same.\n\t* testsuite/25_algorithms/sort/moveable.cc: Same.\n\t* testsuite/25_algorithms/swap_ranges/moveable.cc: Same.\n\t* testsuite/25_algorithms/unique/moveable.cc: Same.\n\t* testsuite/util/testsuite_rvalref.h: New.\n\n\t* testsuite/25_algorithms/equal/equal.cc: Move to...\n\t* testsuite/25_algorithms/equal/no_operator_ne.cc: ...this.\n\t* testsuite/25_algorithms/heap/heap.cc: Move to...\n\t* testsuite/25_algorithms/heap/1.cc: ...this.\n\t* testsuite/25_algorithms/lower_bound/lower_bound.cc: Move to...\n\t* testsuite/25_algorithms/lower_bound/no_operator_ne.cc: ...this.\n\t* testsuite/25_algorithms/partition/partition.cc: Move to...\n\t* testsuite/25_algorithms/partition/1.cc: ...this.\n\t* testsuite/25_algorithms/stable_partition/1.cc: ... and this.\n\t\n\t* testsuite/25_algorithms/search/1.cc: Update from merge.\n\t* testsuite/25_algorithms/search/check_type.cc: Same.\n\n\t* testsuite/lib/dg-options.exp (dg-require-rvalref): New.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_rvalref): New.\n\t\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r128990", "tree": {"sha": "46cc3fffe09f0d59f370c379911fdc297f83f02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cc3fffe09f0d59f370c379911fdc297f83f02b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53f8671f979fce37896147392d9602559afe1f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f8671f979fce37896147392d9602559afe1f58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f8671f979fce37896147392d9602559afe1f58"}], "stats": {"total": 2317, "additions": 2296, "deletions": 21}, "files": [{"sha": "09c73d6e12f357ce075333fb4eb65db9542d1853", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -1,3 +1,50 @@\n+2007-10-03  Chris Jefferson  <chris@bubblescope.net>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/20_util/pair/moveable.cc: New. Merge from \n+\tlibstdcxx_so_7-branch.\n+\t* testsuite/23_containers/deque/capacity/moveable.cc: Same.\n+\t* testsuite/23_containers/deque/cons/moveable.cc: Same.\n+\t* testsuite/23_containers/deque/modifiers/moveable.cc: Same.\n+\t* testsuite/23_containers/deque/moveable.cc: Same.\n+\t* testsuite/23_containers/list/moveable.cc: Same.\n+\t* testsuite/23_containers/map/moveable.cc: Same.\n+\t* testsuite/23_containers/multimap/moveable.cc: Same.\n+\t* testsuite/23_containers/multiset/moveable.cc: Same.\n+\t* testsuite/23_containers/set/moveable.cc: Same.\n+\t* testsuite/23_containers/vector/cons/moveable.cc: Same.\n+\t* testsuite/23_containers/vector/modifiers/moveable.cc: Same.\n+\t* testsuite/23_containers/vector/moveable.cc: Same.\n+\t* testsuite/23_containers/vector/resize/moveable.cc: Same.\n+\t* testsuite/25_algorithms/heap/moveable.cc: Same.\n+\t* testsuite/25_algorithms/nth_element/moveable.cc: Same.\n+\t* testsuite/25_algorithms/partial_sort/moveable.cc: Same.\n+\t* testsuite/25_algorithms/partition/moveable.cc: Same.\n+\t* testsuite/25_algorithms/remove_if/moveable.cc: Same.\n+\t* testsuite/25_algorithms/remove/moveable.cc: Same.\n+\t* testsuite/25_algorithms/reverse/moveable.cc: Same.\n+\t* testsuite/25_algorithms/rotate/moveable.cc: Same.\n+\t* testsuite/25_algorithms/sort/moveable.cc: Same.\n+\t* testsuite/25_algorithms/swap_ranges/moveable.cc: Same.\n+\t* testsuite/25_algorithms/unique/moveable.cc: Same.\n+\t* testsuite/util/testsuite_rvalref.h: New.\n+\n+\t* testsuite/25_algorithms/equal/equal.cc: Move to...\n+\t* testsuite/25_algorithms/equal/no_operator_ne.cc: ...this.\n+\t* testsuite/25_algorithms/heap/heap.cc: Move to...\n+\t* testsuite/25_algorithms/heap/1.cc: ...this.\n+\t* testsuite/25_algorithms/lower_bound/lower_bound.cc: Move to...\n+\t* testsuite/25_algorithms/lower_bound/no_operator_ne.cc: ...this.\n+\t* testsuite/25_algorithms/partition/partition.cc: Move to...\n+\t* testsuite/25_algorithms/partition/1.cc: ...this.\n+\t* testsuite/25_algorithms/stable_partition/1.cc: ... and this.\n+\t\n+\t* testsuite/25_algorithms/search/1.cc: Update from merge.\n+\t* testsuite/25_algorithms/search/check_type.cc: Same.\n+\n+\t* testsuite/lib/dg-options.exp (dg-require-rvalref): New.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_rvalref): New.\n+\t\n 2007-10-03  Richard Sandiford  <richard@codesourcery.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_C99): Temporarily add\n@@ -46,8 +93,13 @@\n \t* testsuite/25_algorithms/upper_bound/2.cc: ... this.\n \t* testsuite/25_algorithms/lower_bound/2.cc: ... this.\n \t* testsuite/25_algorithms/equal_range/2.cc: ... and this.\n-\t* testsuite/25_algorithms/sort/vectorbool.cc: Add from\n+\n+2007-10-02  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/25_algorithms/search/1.cc: Merge from \n \tlibstdcxx_so_7-branch.\n+\t* testsuite/25_algorithms/search/check_type.cc: Same.\n+\t* testsuite/25_algorithms/sort/vectorbool.cc: Same.\n \n 2007-09-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "8a0e593932ea9b54110b7a47c040b6703466fe3e", "filename": "libstdc++-v3/testsuite/20_util/pair/moveable.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,73 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on pair, and also vector. If the implementation \n+// changes this test may begin to fail.\n+\n+#include <vector>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void\n+test1()\n+{\n+  std::pair<int,int> a(1,1),b(2,2);\n+  a=std::move(b);\n+  VERIFY(a.first == 2 && a.second == 2 && b.first == 2 && b.second == 2);\n+  std::pair<int,int> c(std::move(a));\n+  VERIFY(c.first == 2 && c.second == 2 && a.first == 2 && a.second == 2);\n+}\n+\n+void\n+test2()\n+{\n+  std::vector<int> v,w;\n+  v.push_back(1);\n+  w.push_back(2);\n+  w.push_back(2);\n+  std::pair<int, std::vector<int> > p = make_pair(1,v);\n+  std::pair<int, std::vector<int> > q = make_pair(2,w);\n+  p = std::move(q);\n+  VERIFY(p.first == 2 && q.first == 2 &&\n+\t p.second.size() == 2 && q.second.size() == 1);\n+  std::pair<int, std::vector<int> > r(std::move(p));\n+  VERIFY(r.first == 2 && p.first == 2 &&\n+         r.second.size() == 2 && p.second.size() == 0);\n+}\n+\n+int \n+main() \n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "109ab99eb9fe92599b2fd35f3b2d50a99889d0fd", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/moveable.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,82 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+\n+// According to n1771, there should be two resizes, with and without\n+// parameter. We only have one at present, whose second parameter defaults\n+// to a default-constructed object.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<copycounter> a;\n+  copycounter::copycount = 0;\n+  a.resize(10);\n+  a.resize(98);\n+  a.resize(99);\n+  a.resize(100);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 100 );\n+#else\n+  VERIFY( copycounter::copycount == 100 + 4 );\n+#endif\n+  a.resize(99);\n+  a.resize(0);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 100 );\n+#else\n+  VERIFY( copycounter::copycount == 100 + 6 );\n+#endif\n+  a.resize(100);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 200 );\n+#else\n+  VERIFY( copycounter::copycount == 200 + 7 );\n+#endif\n+  a.clear();\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 200 );\n+#else\n+  VERIFY( copycounter::copycount == 200 + 7 );\n+#endif\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1d93aeb6f791759258a9b04c4f907a5e108de157", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/moveable.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile }\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <deque>\n+#include <iterator>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+typedef std::deque<rvalstruct> test_type;\n+\n+// Empty constructor doesn't require a copy constructor\n+void\n+test01()\n+{ test_type d; }\n+\n+// Constructing from a range that returns rvalue references doesn't\n+// require a copy constructor.\n+void\n+test02(rvalstruct* begin, rvalstruct* end)\n+{ \n+  test_type d(std::make_move_iterator(begin), std::make_move_iterator(end));\n+}\n+\n+// Constructing from a input iterator range that returns rvalue\n+// references doesn't require a copy constructor either.\n+void\n+test03(input_iterator_wrapper<rvalstruct> begin,\n+       input_iterator_wrapper<rvalstruct> end)\n+{ \n+  test_type d(std::make_move_iterator(begin), std::make_move_iterator(end));\n+}\n+\n+// Neither does destroying one.\n+void\n+test04(test_type* d)\n+{ delete d; }"}, {"sha": "605067611d766c14ef232580279badbe43a61b86", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/moveable.cc", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,144 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+\n+// Test deque::push_back makes no unneeded copies.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<copycounter> a;\n+  copycounter c(1);\n+  copycounter::copycount = 0;\n+  for(int i = 0; i < 1000; ++i)\n+    a.push_back(c);\n+  VERIFY(copycounter::copycount == 1000);\n+}\n+\n+// Test deque::push_front makes no unneeded copies.\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<copycounter> a;\n+  copycounter c(1);\n+  copycounter::copycount = 0;\n+  for(int i = 0; i < 1000; ++i)\n+    a.push_front(c);\n+  VERIFY(copycounter::copycount == 1000);\n+}\n+\n+// Test deque::insert makes no unneeded copies.\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<copycounter> a(1000);\n+  copycounter c(1);\n+  copycounter::copycount = 0;\n+  a.insert(a.begin(),c);\n+  a.insert(a.end(),c);\n+  for(int i = 0; i < 500; ++i)\n+    a.insert(a.begin() + i, c);\n+  VERIFY(copycounter::copycount == 502);\n+}\n+\n+// Test deque::insert(iterator, count, value) makes no unneeded copies\n+// when it has to also reallocate the deque's internal buffer.\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copycounter c(1);\n+  std::deque<copycounter> a(10, c);\n+  copycounter::copycount = 0;\n+  a.insert(a.begin(), 20, c);\n+  VERIFY(copycounter::copycount == 20);\n+  a.insert(a.end(), 50, c);\n+  VERIFY(copycounter::copycount == 70);\n+  // NOTE : These values are each one higher than might be expected, as\n+  // deque::insert(iterator, count, value) copies the value it is given\n+  // when it has to move elements in the deque in case that value is\n+  // in the deque.\n+  \n+  // Near the start\n+  a.insert(a.begin() + 10, 100, c);\n+  VERIFY(copycounter::copycount == 170 + 1);\n+  // Near the end\n+  a.insert(a.end() - 10, 1000, c);\n+  VERIFY(copycounter::copycount == 1170 + 2);\n+}\n+\n+// Test deque::insert(iterator, count, value) makes no unneeded copies\n+// when it doesn't have to reallocate the deque's internal buffer.\n+void\n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  copycounter c(1);\n+  std::deque<copycounter> a(10, c);\n+  copycounter::copycount = 0;\n+  //a.reserve(1000);\n+  a.insert(a.begin(), 20, c);\n+  VERIFY(copycounter::copycount == 20 );\n+  a.insert(a.end(), 50, c);\n+  VERIFY(copycounter::copycount == 70 );\n+  \n+  // NOTE : These values are each one higher than might be expected, as\n+  // deque::insert(iterator, count, value) copies the value it is given\n+  // when it has to move elements in the deque in case that value is\n+  // in the deque.\n+  // Near the start\n+  a.insert(a.begin() + 10, 100, c);\n+  VERIFY(copycounter::copycount == 170 + 1);\n+  // Near the end\n+  a.insert(a.end() - 10, 200, c);\n+  VERIFY(copycounter::copycount == 370 + 2);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "e1fe8aea6acaf63d558daae50129c2df845f0a3c", "filename": "libstdc++-v3/testsuite/23_containers/deque/moveable.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,52 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on deque (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <deque>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<int> a,b;\n+  a.push_back(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == 1 && a.size() == 0 );\n+\n+  std::deque<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == 1 );\n+  VERIFY( b.size() == 0 );\n+  return 0;\n+}"}, {"sha": "19b5ea111cef0f59ba470686b1ac7be85e175e58", "filename": "libstdc++-v3/testsuite/23_containers/list/moveable.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,52 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on list (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <list>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<int> a,b;\n+  a.push_back(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && *b.begin() == 1 && a.size() == 0 );\n+\n+  std::list<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && *c.begin() == 1 );\n+  VERIFY( b.size() == 0 );\n+  return 0;\n+}"}, {"sha": "ca2a2f305bfb7fd3baf08f71859287a567e250ac", "filename": "libstdc++-v3/testsuite/23_containers/map/moveable.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,53 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on map (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <map>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::map<int, int> a,b;\n+  a[2]=0;\n+  b[1]=0;\n+  b = std::move(a);\n+  VERIFY(b.find(2) != b.end() && a.find(1) != a.end());\n+\n+  std::map<int, int> c(std::move(b));\n+  VERIFY( c.find(2) != c.end());\n+  VERIFY( b.find(2) == b.end());\n+  return 0;\n+}"}, {"sha": "75bfd433ce3fe18b8e2e78fad90b6cc3bf12391c", "filename": "libstdc++-v3/testsuite/23_containers/multimap/moveable.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,52 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on multimap (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::multimap<int, int> a,b;\n+  a.insert(std::make_pair(2,0));\n+  b.insert(std::make_pair(1,0));\n+  b = std::move(a);\n+  VERIFY(b.find(2) != b.end() && a.find(1) != a.end());\n+\n+  std::multimap<int, int> c(std::move(b));\n+  VERIFY( c.find(2) != c.end());\n+  VERIFY( b.find(2) == b.end());\n+  return 0;\n+}"}, {"sha": "5cd4f3244e11d47268aa9008311f31eab13a462e", "filename": "libstdc++-v3/testsuite/23_containers/multiset/moveable.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,53 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on multiset (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <set>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::multiset<int> a,b;\n+  a.insert(2);\n+  b.insert(1);\n+  b = std::move(a);\n+  VERIFY(b.find(2) != b.end() && a.find(1) != a.end());\n+\n+  std::multiset<int> c(std::move(b));\n+  VERIFY( c.find(2) != c.end());\n+  VERIFY( b.find(2) == b.end());\n+  return 0;\n+}"}, {"sha": "81ca041f6be5084418b4d49149b6d88eaf61b3be", "filename": "libstdc++-v3/testsuite/23_containers/set/moveable.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,53 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on set (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <set>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::set<int> a,b;\n+  a.insert(2);\n+  b.insert(1);\n+  b = std::move(a);\n+  VERIFY(b.find(2) != b.end() && a.find(1) != a.end());\n+\n+  std::set<int> c(std::move(b));\n+  VERIFY( c.find(2) != c.end());\n+  VERIFY( b.find(2) == b.end());\n+  return 0;\n+}"}, {"sha": "7184a256f94ea37a12bbb5ab8e889ca645a7a2ef", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/moveable.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile } \n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <iterator>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+typedef std::vector<rvalstruct> test_type;\n+\n+// Empty constructor doesn't require a copy constructor\n+void\n+test01()\n+{ test_type d; }\n+\n+// Constructing from a range that returns rvalue references doesn't\n+// require a copy constructor.\n+void\n+test02(rvalstruct* begin, rvalstruct* end)\n+{ \n+  test_type d(std::make_move_iterator(begin), std::make_move_iterator(end));\n+}\n+\n+// Constructing from a input iterator range that returns rvalue\n+// references doesn't require a copy constructor either.\n+void\n+test03(input_iterator_wrapper<rvalstruct> begin,\n+       input_iterator_wrapper<rvalstruct> end)\n+{ \n+  test_type d(std::make_move_iterator(begin), std::make_move_iterator(end));\n+}\n+\n+// Neither does destroying one.\n+void\n+test04(test_type* d)\n+{ delete d; }"}, {"sha": "ef4410a92b29bf2b1f37f3db1ca3b9ac02c83b95", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/moveable.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,147 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+\n+// Test vector::push_back makes no unneeded copies.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<copycounter> a;\n+  copycounter c(1);\n+  copycounter::copycount = 0;\n+  for(int i = 0; i < 10; ++i)\n+    a.push_back(c);\n+  VERIFY(copycounter::copycount == 10);\n+\n+  for(int i = 0; i < 100; ++i)\n+    a.insert(a.begin() + i, c);\n+  VERIFY(copycounter::copycount == 110);\n+\n+  for(int i = 0; i < 1000; ++i)\n+    a.insert(a.end(), c);\n+  VERIFY(copycounter::copycount == 1110);\n+}\n+\n+// Test vector::insert(iterator, iterator, iterator) makes no unneeded copies\n+// when it has to also reallocate the vector's internal buffer.\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copycounter c(1);\n+  std::vector<copycounter> a(10, c), b(100, c);\n+  copycounter::copycount = 0;\n+  a.insert(a.begin(), b.begin(), b.begin() + 20);\n+  VERIFY(copycounter::copycount == 20);\n+  a.insert(a.end(), b.begin(), b.begin() + 50);\n+  VERIFY(copycounter::copycount == 70);\n+  a.insert(a.begin() + 50, b.begin(), b.end());\n+  VERIFY(copycounter::copycount == 170);\n+}\n+\n+// Test vector::insert(iterator, iterator, iterator) makes no unneeded copies\n+// when it doesn't have to reallocate the vector's internal buffer.\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  copycounter c(1);\n+  std::vector<copycounter> a(10, c), b(100, c);\n+  copycounter::copycount = 0;\n+  a.reserve(1000);\n+  VERIFY(copycounter::copycount == 0);\n+  a.insert(a.begin(), b.begin(), b.begin() + 20);\n+  VERIFY(copycounter::copycount == 20);\n+  a.insert(a.end(), b.begin(), b.begin() + 50);\n+  VERIFY(copycounter::copycount == 70);\n+  a.insert(a.begin() + 50, b.begin(), b.end());\n+  VERIFY(copycounter::copycount == 170);\n+}  \n+\n+// Test vector::insert(iterator, count, value) makes no unneeded copies\n+// when it has to also reallocate the vector's internal buffer.\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copycounter c(1);\n+  std::vector<copycounter> a(10, c);\n+  copycounter::copycount = 0;\n+  a.insert(a.begin(), 20, c);\n+  VERIFY(copycounter::copycount == 20 + 1);\n+  a.insert(a.end(), 50, c);\n+  VERIFY(copycounter::copycount == 70 + 2);\n+  a.insert(a.begin() + 50, 100, c);\n+  VERIFY(copycounter::copycount == 170 + 3);\n+}\n+\n+// Test vector::insert(iterator, count, value) makes no unneeded copies\n+// when it doesn't have to reallocate the vector's internal buffer.\n+void\n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copycounter c(1);\n+  std::vector<copycounter> a(10, c);\n+  copycounter::copycount = 0;\n+  a.reserve(1000);\n+  a.insert(a.begin(), 20, c);\n+  // NOTE : These values are each one higher than might be expected, as\n+  // vector::insert(iterator, count, value) copies the value it is given\n+  // when it doesn't reallocate the buffer.\n+  VERIFY(copycounter::copycount == 20 + 1);\n+  a.insert(a.end(), 50, c);\n+  VERIFY(copycounter::copycount == 70 + 2);\n+  a.insert(a.begin() + 50, 100, c);\n+  VERIFY(copycounter::copycount == 170 + 3);\n+}\n+\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "289a4333f129a0cdd5ecea86809f2e302c733f29", "filename": "libstdc++-v3/testsuite/23_containers/vector/moveable.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,72 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on vector (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <vector>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<int> a,b;\n+  a.push_back(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == 1 && a.size() == 0 );\n+\n+  std::vector<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == 1 );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::vector<bool> a,b;\n+  a.push_back(1);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == 1 && a.size() == 0 );\n+\n+  std::vector<bool> c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == 1 );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "84136f4e04d720339c32dd8af099becb2324a20f", "filename": "libstdc++-v3/testsuite/23_containers/vector/resize/moveable.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,85 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+using namespace __gnu_test;\n+\n+// According to n1771, there should be two resizes, with and without\n+// parameter. We only have one at present, whose second parameter defaults\n+// to a default-constructed object.\n+// Also, the values are one higher than might be expected because internally\n+// resize calls fill, which copies its input value in case it is already in\n+// the vector when the vector isn't moved.\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<copycounter> a;\n+  copycounter::copycount = 0;\n+  a.resize(10);\n+  a.resize(98);\n+  a.resize(99);\n+  a.resize(100);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 100 + 4 );\n+#else\n+  VERIFY( copycounter::copycount == 100 + 4 + 4 );\n+#endif\n+  a.resize(99);\n+  a.resize(0);\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 100 + 4 );\n+#else\n+  VERIFY( copycounter::copycount == 100 + 4 + 6 );\n+#endif\n+  a.resize(100);\n+#ifndef _GLIBCXX_DEBUG  \n+  VERIFY( copycounter::copycount == 200 + 5 );\n+#else\n+  VERIFY( copycounter::copycount == 200 + 5 + 7 );\n+#endif\n+  a.clear();\n+#ifndef _GLIBCXX_DEBUG\n+  VERIFY( copycounter::copycount == 200 + 5 );\n+#else\n+  VERIFY( copycounter::copycount == 200 + 5 + 7 );\n+#endif\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "285baa6e2110452f9ee0b0a2e4ac0f2e2bd579a8", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/no_operator_ne.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fno_operator_ne.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fno_operator_ne.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fno_operator_ne.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/equal/equal.cc"}, {"sha": "571a2936ed2cdd2871b16e3d52d386b0239573ba", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/heap/heap.cc"}, {"sha": "2477902b55b96ccd45723dcbf67cd64d23680f60", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,120 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> container;\n+\n+bool test __attribute__((unused)) = true;\n+\n+\n+void \n+check_make(int* array, int length)\n+{\n+  rvalstruct makeheap[9];\n+  std::copy(array, array + length, makeheap);\n+  container makecon(makeheap, makeheap + length);\n+  std::make_heap(makecon.begin(), makecon.end());\n+  VERIFY(std::__is_heap(makecon.begin(), makecon.end()));\n+  for(int z = 0; z < length; ++z)\n+    VERIFY(makeheap[z].valid);\n+}\n+\n+void\n+check_pop(int* array, int length)\n+{\n+  rvalstruct popheap[9];\n+  std::copy(array, array + length, popheap);   \n+  container popcon(popheap, popheap + length);\n+  std::pop_heap(popcon.begin(), popcon.end());\n+  VERIFY(std::__is_heap(popheap, popheap + length - 1));\n+  for(int z = 0; z < length; ++z)\n+    VERIFY(popheap[z].val <= popheap[length-1].val && popheap[z].valid);\n+}\n+\n+void\n+check_sort(int* array, int length)\n+{\n+  rvalstruct sortheap[9];\n+  std::copy(array, array + length, sortheap);   \n+  container sortcon(sortheap, sortheap + length);\n+  std::sort_heap(sortcon.begin(), sortcon.end());\n+  for(int z = 0; z < length - 1; ++z)\n+    VERIFY(sortheap[z].val <= sortheap[z + 1].val && sortheap[z].valid);\n+  VERIFY(sortheap[length - 1].valid);\n+}\n+\n+void\n+check_push(int* array, int pushval, int length)\n+{\n+  rvalstruct pushheap[10];\n+  std::copy(array, array + length, pushheap);\n+  pushheap[length] = pushval;\n+  container pushcon(pushheap, pushheap + length);\n+  std::push_heap(pushcon.begin(), pushcon.end());\n+  VERIFY(std::__is_heap(pushheap, pushheap + length));\n+  for(int z = 0; z < length ; ++z)\n+    VERIFY(pushheap[z].valid);\n+}\n+\n+\n+void\n+test01()\n+{\n+  int array[9];\n+  for(int i = 1; i < 9; ++i)\n+  {\n+    for(int z = 0; z < i; ++z)\n+      array[i] = i;\n+    while(std::next_permutation(array, array + i))\n+    {\n+      check_make(array, i);\n+      if(std::__is_heap(array, array + i))\n+      {\n+        check_pop(array, i);\n+        check_sort(array, i);\n+        for(int pushval = -1; pushval <= i; ++pushval)\n+        {\n+          check_push(array, pushval, i);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b132cddfe76551128ac3eebba506f7fd6e555388", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/no_operator_ne.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fno_operator_ne.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/lower_bound.cc"}, {"sha": "c521d382b2f603e6765dbc30276854021c7f281d", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/moveable.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,76 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.2 [lib.alg.nth.element]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using std::nth_element;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array, array + 7);\n+  nth_element(con.begin(), con.it(3), con.end());\n+  for(int i = 0; i < 3; ++i)\n+    VERIFY(array[i].val < 3);\n+  for(int i = 4; i < 7; ++i)\n+    VERIFY(array[i].val > 3);\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY(array[i].valid);\n+}\n+\n+void \n+test2()\n+{\n+  int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array,array + 7);\n+  nth_element(con.begin(), con.it(3), con.end());\n+  for(int i = 0; i < 3; ++i)\n+    VERIFY(array[i].val < 3);\n+  for(int i = 4; i < 7; ++i)\n+    VERIFY(array[i].val > 3);\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY(array[i].valid);  \n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  return 0;\n+}"}, {"sha": "990da41f094a8972c2cb481f64efcdd9ebc57296", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/moveable.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,70 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.3 [lib.partial.sort]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::partial_sort;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array, array + 7);\n+  partial_sort(con.begin(), con.it(3), con.end());\n+  VERIFY(array[0].val == 0 && array[1].val == 1 && array[2].val == 2);\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY(array[i].valid);\n+}\n+\n+void \n+test2()\n+{\n+  int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array,array + 7);\n+  partial_sort(con.begin(), con.it(3), con.end());\n+  VERIFY(array[0].val == 0 && array[1].val == 1 && array[2].val == 2);\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY(array[i].valid);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "b71ec23fbf047568729256844348226a48c6b382", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/1.cc", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -50,24 +50,9 @@ test01()\n     for (const int* i = m; i < s1 + N; ++i) VERIFY(!pred(*i));\n }\n \n-// 25.2.12 stable_partition()\n-void\n-test02()\n-{\n-    using std::stable_partition;\n-\n-    int s1[N];\n-    std::copy(A, A + N, s1);\n-\n-    stable_partition(s1, s1 + N, Pred());\n-    VERIFY(std::equal(s1, s1 + N, B));\n-}\n-\n int\n main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/partition/partition.cc"}, {"sha": "49a20d72cb4243c5b31ef1595c08c71141cad5e1", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/moveable.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,90 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.12 [lib.alg.partitions] Partitions.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, forward_iterator_wrapper> Fcontainer;\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Bcontainer;\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n+const int N = sizeof(A) / sizeof(int);\n+\n+struct Pred\n+{\n+    bool\n+    operator()(const rvalstruct& x) const\n+    { return (x.val % 2) == 0; }\n+};\n+\n+// 25.2.12 partition()\n+void\n+test01()\n+{\n+  using std::partition;\n+\n+  rvalstruct farray[N];   \n+  rvalstruct barray[N];\n+\n+  std::copy(A, A + N, farray);\n+  std::copy(A, A + N, barray);\n+\n+  Fcontainer fcon(farray, farray + N);\n+  Bcontainer bcon(barray, barray + N);  \n+\n+  Pred pred;\n+\n+  VERIFY(partition(fcon.begin(), fcon.end(), pred).ptr - farray == N/2); \n+  for (const rvalstruct* i = farray; i < farray+N/2; ++i) \n+    VERIFY(pred(*i));\n+\n+  for (const rvalstruct* i = farray+N/2; i < farray + N; ++i) \n+    VERIFY(!pred(*i));\n+\n+  VERIFY(partition(bcon.begin(), bcon.end(), pred).ptr - barray == N/2); \n+\n+  for (const rvalstruct* i = barray; i < barray+N/2; ++i) \n+    VERIFY(pred(*i));\n+  for (const rvalstruct* i = barray+N/2; i < barray + N; ++i) \n+    VERIFY(!pred(*i));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "122d503be05f6b63aade5d5d96a76862139922ef", "filename": "libstdc++-v3/testsuite/25_algorithms/remove/moveable.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,68 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 remove\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, forward_iterator_wrapper> Container; \n+\n+void\n+test1()\n+{\n+  int intarray[] = {1};\n+  rvalstruct array[1];\n+  std::copy(intarray, intarray + 1, array);\n+  Container con(array, array + 1);\n+  rvalstruct remove_val0(0);\n+  rvalstruct remove_val1(1);\n+  VERIFY(std::remove(con.begin(), con.end(), remove_val0).ptr == array + 1);\n+  VERIFY(std::remove(con.begin(), con.end(), remove_val1).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int intarray[] = {0, 1, 0, 1, 0, 0, 1, 1};\n+  rvalstruct array[8];\n+  std::copy(intarray, intarray + 8, array);\n+  Container con(array, array + 8);\n+  rvalstruct remove_val(1);\n+  VERIFY(std::remove(con.begin(), con.end(), remove_val).ptr == array + 4);\n+  VERIFY(array[0].val == 0 && array[1].val == 0 && array[2].val == 0 && \n+\t array[3].val == 0);\n+}\n+\n+int\n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "15b9ab679d81d8ecd7f25152dcac899d75e99161", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/moveable.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,68 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 remove\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, forward_iterator_wrapper> Container; \n+\n+bool equal1(rvalstruct& in) { return in.val == 1; }\n+bool equal0(rvalstruct& in) { return in.val == 0; }\n+\n+void\n+test1()\n+{\n+  int intarray[] = {1};\n+  rvalstruct array[1];\n+  std::copy(intarray, intarray + 1, array);\n+  Container con(array, array + 1);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal0).ptr == array + 1);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal1).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int intarray[] = {0, 1, 0, 1, 0, 0, 1, 1};\n+  rvalstruct array[8];\n+  std::copy(intarray, intarray + 8, array);\n+  Container con(array, array + 8);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal1).ptr == array + 4);\n+  VERIFY(array[0] == 0 && array[1] == 0 && array[2] == 0 &&\n+         array[3] == 0);\n+}\n+\n+int\n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "10577fc631b8615a7b87365903063c80c0195707", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse/moveable.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.9 Reverse\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::bidirectional_iterator_wrapper;\n+\n+class X \n+{ \n+  X();\n+  X(const X&);\n+  void operator=(const X&);\n+};\n+\n+void\n+swap(X&, X&) { }\n+\n+void\n+test1(bidirectional_iterator_wrapper<X>& begin, \n+      bidirectional_iterator_wrapper<X>& end)\n+{ std::reverse(begin, end); }"}, {"sha": "febf758f146f887fceeaf7eb50db4184f3ad0aa2", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/moveable.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,79 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.10 rotate\n+\n+// Tests rotate when an moveable class is used\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, forward_iterator_wrapper> Fcontainer; \n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Bcontainer; \n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Rcontainer; \n+\n+\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int data[] = {1, 2, 3, 4, 5};\n+  rvalstruct array[5];\n+  std::copy(data, data + 5, array); \n+  Fcontainer fcon(array, array + 5);\n+  Bcontainer bcon(array, array + 5);\n+  Rcontainer rcon(array, array + 5);\n+  \n+  std::rotate(fcon.begin(), fcon.it(2), fcon.end());\n+  VERIFY(array[0].val == 3 && array[1].val == 4 && array[2].val == 5 && \n+\t array[3].val == 1 && array[4].val == 2);\n+  for(int i=0;i<5;i++)\n+    VERIFY(array[i].valid == true);\n+\n+  std::rotate(bcon.begin(), bcon.it(2), bcon.end());\n+  VERIFY(array[0].val == 5 && array[1].val == 1 && array[2].val == 2 && \n+\t array[3].val == 3 && array[4].val == 4);\n+  for(int i=0;i<5;i++)\n+    VERIFY(array[i].valid);\n+\n+  std::rotate(rcon.begin(), rcon.it(2), rcon.end());\n+  VERIFY(array[0].val == 2 && array[1].val == 3 && array[2].val == 4 && \n+\t array[3].val == 5 && array[4].val == 1);\n+  for(int i=0;i<5;i++)\n+    VERIFY(array[i].valid); \n+}\n+\n+int\n+main()\n+{\n+  test1();\n+}"}, {"sha": "ef00b58d010501e88642ca17479dc0d27059a4a5", "filename": "libstdc++-v3/testsuite/25_algorithms/search/1.cc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -24,9 +24,11 @@\n \n using __gnu_test::test_container;\n using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n using std::search;\n \n typedef test_container<int, forward_iterator_wrapper> Container;\n+typedef test_container<int, random_access_iterator_wrapper> RAcontainer;\n int array1[] = {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1};\n int array2[] = {0, 0, 0};\n \n@@ -101,6 +103,53 @@ test6()\n \t == array3 + 6);\n }\n \n+bool\n+lexstep(int* start, int length) \n+{\n+  int i = 0;\n+  int carry = 1;\n+  while(i < length && carry) \n+    {\n+      if(start[i] == 1)\n+        start[i] = 0;\n+      else \n+        {\n+          start[i] = 1;\n+          carry = 0;\n+        }\n+      i++;\n+    }\n+  return !carry;\n+}\n+\n+void test7()\n+{\n+  int array1[6];\n+  int array2[6];\n+  for(int length1 = 0; length1 < 6; length1++)\n+  {\n+    for(int length2 = 0; length2 < 6; length2++)\n+    {\n+      std::fill_n(array1, length1, 0);\n+      while(lexstep(array1, length1))\n+      {\n+ \tstd::fill_n(array2, length2, 0);\n+ \twhile(lexstep(array2, length2))\n+        {\n+          Container con1(array1, array1 + length1);\n+          Container con2(array2, array2 + length2);\n+          RAcontainer rcon1(array1, array1 + length1);\n+          RAcontainer rcon2(array2, array2 + length2);\n+          VERIFY(search(con1.begin(), con1.end(), con2.begin(), \n+ \t\t\tcon2.end()).ptr ==\n+                 search(rcon1.begin(), rcon1.end(), rcon2.begin(),\n+                 rcon2.end()).ptr);\n+        }\n+      } \n+    }\n+  }\n+}\n+\n int \n main()\n {\n@@ -110,4 +159,5 @@ main()\n   test4();\n   test5();\n   test6();\n+  test7();\n }"}, {"sha": "4762abdb0e392ff43e76e3b62f1059786b493ea1", "filename": "libstdc++-v3/testsuite/25_algorithms/search/check_type.cc", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -25,14 +25,33 @@\n \n using __gnu_test::forward_iterator_wrapper;\n \n-struct S1 { };\n-struct S2 { };\n+struct T1 { };\n+struct T2 { };\n+\n+struct S1 \n+{\n+  S1(T1) { }\n+};\n+\n+struct S2 {\n+  S2(T2) { }\n+};\n \n bool \n operator==(const S1&, const S2&) {return true;}\n \n-struct X1 { };\n-struct X2 { };\n+struct V1 { };\n+struct V2 { };\n+\n+struct X1 \n+{\n+  X1(V1) { };\n+};\n+\n+struct X2\n+{\n+  X2(V2) { };\n+};\n \n bool \n predicate(const X1&, const X2&) {return true;}\n@@ -41,6 +60,14 @@ forward_iterator_wrapper<S1>\n test1(forward_iterator_wrapper<S1>& s1, forward_iterator_wrapper<S2>& s2)\n { return std::search(s1, s1, s2, s2); }\n \n+forward_iterator_wrapper<T1>\n+test2(forward_iterator_wrapper<T1>& s1, forward_iterator_wrapper<T2>& s2)\n+{ return std::search(s1, s1, s2, s2); }\n+\n forward_iterator_wrapper<X1>\n-test2(forward_iterator_wrapper<X1>& x1, forward_iterator_wrapper<X2>& x2)\n+test3(forward_iterator_wrapper<X1>& x1, forward_iterator_wrapper<X2>& x2)\n+{ return std::search(x1, x1, x2, x2, predicate); }\n+\n+forward_iterator_wrapper<V1>\n+test4(forward_iterator_wrapper<V1>& x1, forward_iterator_wrapper<V2>& x2)\n { return std::search(x1, x1, x2, x2, predicate); }"}, {"sha": "168374fa658da81ea0cfe075b179dc8adce4121e", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/moveable.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,64 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::partial_sort;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+\n+const int A[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n+\t\t\t17, 8, 18, 9, 19};\n+const int N = sizeof(A) / sizeof(int);\n+\n+// 25.3.1.1 sort()\n+void\n+test01()\n+{\n+    rvalstruct s1[N];\n+    std::copy(A, A + N, s1);\n+    Container con(s1, s1 + N);\n+    std::sort(con.begin(), con.end());\n+    VERIFY(s1[0].valid);\n+    for(int i = 1; i < N; ++i)\n+      VERIFY(s1[i].val>s1[i-1].val && s1[i].valid);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "29188f882ed2fa851277479d4606945f6390b1d2", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.2.12 [lib.alg.partitions] Partitions.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n+const int N = sizeof(A) / sizeof(int);\n+\n+struct Pred\n+{\n+    bool\n+    operator()(const int& x) const\n+    { return (x % 2) == 0; }\n+};\n+\n+// 25.2.12 stable_partition()\n+void\n+test02()\n+{\n+    using std::stable_partition;\n+\n+    int s1[N];\n+    std::copy(A, A + N, s1);\n+\n+    stable_partition(s1, s1 + N, Pred());\n+    VERIFY(std::equal(s1, s1 + N, B));\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "57876d8edfc6e82cd01893166b746d889a8308f7", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/moveable.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 Swap Ranges\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+class X \n+{ \n+  X();\n+  X(const X&);\n+  void operator=(const X&);\n+};\n+\n+void\n+swap(X&, X&) { }\n+\n+void\n+test1(forward_iterator_wrapper<X>& begin, forward_iterator_wrapper<X>& end, \n+      forward_iterator_wrapper<X>& begin2)\n+{ std::swap_ranges(begin, end, begin2); }"}, {"sha": "839d6e4c039a3618f5335a0e0c0731ee34cf8d9e", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/moveable.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,74 @@\n+// { dg-require-rvalref \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.8 [lib.alg.unique] Unique\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <vector>\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, forward_iterator_wrapper> Container;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int intarray1[] = {1, 4, 4, 6, 1, 2, 2, 3, 1, 6, 6, 6, 5, 7, 5, 4, 4};\n+  int intarray2[] = {1, 1, 1, 2, 2, 1, 1, 7, 6, 6, 7, 8, 8, 8, 8, 9, 9};\n+\n+  const int N = sizeof(intarray1) / sizeof(int);\n+\n+  rvalstruct T1[N];\n+  rvalstruct T2[N];\n+  \n+  std::copy(intarray1,intarray1 + N, T1);\n+  std::copy(intarray2,intarray2 + N, T2);\n+  \n+  const int A1[] = {1, 4, 6, 1, 2, 3, 1, 6, 5, 7, 5, 4};\n+  const int B1[] = {1, 2, 1, 7, 6, 7, 8, 9};\n+\n+  Container con(T1, T1 + N);\n+\n+  VERIFY(std::unique(con.begin(), con.end()).ptr - T1 == 12);\n+  for(int i = 0; i < 12; ++i)\n+    VERIFY(T1[i].val == A1[i]);\n+\n+  Container con2(T2, T2 + N);\n+  VERIFY(std::unique(con2.begin(), con2.end()).ptr - T2 == 8);\n+  for(int i = 0; i < 8; ++i)\n+    VERIFY(T2[i].val == B1[i]);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "327b691fc0f600c549c2333334c5f31bd5299493", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -79,3 +79,12 @@ proc dg-require-time { args } {\n     }\n     return\n }\n+\n+proc dg-require-rvalref { args } {\n+    if { ![ check_v3_target_rvalref ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}"}, {"sha": "b48fda128627aaaefb95ef284ec504f6e20cc482", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -762,6 +762,61 @@ proc check_v3_target_time { } {\n     return $et_time_saved\n }\n \n+proc check_v3_target_rvalref { } {\n+    global et_rvalref_saved\n+    global et_rvalref_target_name\n+    global tool\t\n+\n+    if { ![info exists et_rvalref_target_name] } {\n+\tset et_rvalref_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_rvalref_target_name } {\n+\tverbose \"check_v3_target_rvalref: `$et_rvalref_target_name'\" 2\n+\tset et_rvalref_target_name $current_target\n+\tif [info exists et_rvalref_saved] {\n+\t    verbose \"check_v3_target_rvalref: removing cached result\" 2\n+\t    unset et_rvalref_saved\n+\t}\n+    }\n+\n+    if [info exists et_rvalref_saved] {\n+\tverbose \"check_v3_target_rvalref: using cached result\" 2\n+    } else {\n+\tset et_rvalref_saved 0\n+\n+\t# Set up and compile a C++ test program that tries to use\n+\t# the library components of rval references\n+\tset src rvalref[pid].cc\n+\tset exe rvalref[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <iterator>\"\n+\tputs $f \"#include <utility>\"\n+\tputs $f \"using std::move;\"\n+\tputs $f \"using std::identity;\"\n+\tputs $f \"using std::forward;\"\n+\tputs $f \"using std::move_iterator;\"\n+\tputs $f \"using std::make_move_iterator;\"\n+\tclose $f\n+\n+\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, compilation succeeded.\n+\t    verbose \"check_v3_target_rvalref: compilation succeeded\" 2\n+\t    remote_file build delete $exe\n+\t    set et_rvalref_saved 1\n+\t} else {\n+\t    verbose \"check_v3_target_rvalref: compilation failed\" 2\n+\t}\n+    }\n+    return $et_rvalref_saved\n+}\n+\n proc check_v3_target_namedlocale { } {\n     global et_namedlocale_saved\n     global et_namedlocale_target_name"}, {"sha": "ca947166d129fa3534686c52f9bc5502606784ce", "filename": "libstdc++-v3/testsuite/util/testsuite_rvalref.h", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5783e34f97cd9012ae3ee4118a5e3bf642d8aed/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h?ref=f5783e34f97cd9012ae3ee4118a5e3bf642d8aed", "patch": "@@ -0,0 +1,194 @@\n+// -*- C++ -*-\n+// Testing utilities for the rvalue reference.\n+//\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_TESTSUITE_RVALREF_H\n+#define _GLIBCXX_TESTSUITE_RVALREF_H 1\n+\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+\n+  //  This class is designed to test libstdc++'s template-based rvalue\n+  //  reference support. It should fail at compile-time if there is an attempt\n+  //  to copy it (although see note just below).\n+  class rvalstruct\n+  {\n+    bool\n+    operator=(const rvalstruct&);\n+\n+// Normally we don't define a copy constructor, as any use of it would\n+// show an inefficency. In some cases we know it will be aliased away\n+// by the compiler, but it still insists it is defined, so we provide\n+// a way of making it public but not giving a body, so any usage would\n+// instead fail at link-time.\n+#ifdef _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+  public:\n+    rvalstruct(const rvalstruct&);\n+#else\n+    rvalstruct(const rvalstruct&);\n+\n+  public:\n+#endif\n+    int val;\n+    bool valid;\n+\n+    rvalstruct() : valid(false)\n+    { }\n+\n+    rvalstruct(int inval) : val(inval), valid(true)\n+    { }\n+    \n+    rvalstruct&\n+    operator=(int newval)\n+    { \n+      VERIFY(valid == false);\n+      val = newval; \n+      valid = true;\n+    }\n+\n+    rvalstruct(rvalstruct&& in)\n+    { \n+      VERIFY(in.valid == true);\n+      val = in.val;\n+      in.valid = false;\n+      valid = true;\n+    }\n+\n+    rvalstruct&\n+    operator=(rvalstruct&& in)\n+    { \n+      VERIFY(in.valid == true);\n+      val = in.val;\n+      in.valid = false;\n+      valid = true;\n+      return *this;\n+    }\n+  };\n+\n+  bool \n+  operator==(const rvalstruct& lhs, const rvalstruct& rhs)\n+  { return lhs.val == rhs.val; }\n+\n+  bool\n+  operator<(const rvalstruct& lhs, const rvalstruct& rhs)\n+  { return lhs.val < rhs.val; }\n+\n+  void\n+  swap(rvalstruct& lhs, rvalstruct& rhs)\n+  {  \n+    VERIFY(lhs.valid && rhs.valid);\n+    int temp = lhs.val;\n+    lhs.val = rhs.val;\n+    rhs.val = temp;\n+  }\n+\n+  // This is a moveable class which copies how many times it is copied.\n+  // This is mainly of use in the containers, where the an element inserted\n+  // into a container has to be copied once to get there, but we want to check\n+  // nothing else is copied.\n+  struct copycounter\n+  {\n+    static int copycount;\n+    int val;\n+    bool valid;\n+    \n+    copycounter() : val(0), valid(true)\n+    { }\n+\n+    copycounter(int inval) : val(inval), valid(true)\n+    { }\n+\n+    copycounter(const copycounter& in) : val(in.val), valid(true)\n+    { \n+      VERIFY(in.valid == true);\n+      ++copycount;\n+    }\n+\n+    copycounter(copycounter&& in)\n+    { \n+      VERIFY(in.valid == true);\n+      val = in.val;\n+      in.valid = false;\n+      valid = true;\n+    }\n+    \n+    copycounter&\n+    operator=(int newval)\n+    { \n+      val = newval;\n+      valid = true;\n+    }\n+\n+    bool\n+    operator=(const copycounter& in) \n+    { \n+      VERIFY(in.valid == true);\n+      ++copycount;\n+      val = in.val;\n+      valid = true;\n+    }\n+\n+    copycounter&\n+    operator=(copycounter&& in)\n+    { \n+      VERIFY(in.valid == true);\n+      val = in.val;\n+      in.valid = false;\n+      valid = true;\n+      return *this;\n+    }\n+    \n+    ~copycounter()\n+    { valid = false; }\n+  };\n+\n+  int copycounter::copycount = 0;\n+  \n+  bool \n+  operator==(const copycounter& lhs, const copycounter& rhs)\n+  { return lhs.val == rhs.val; }\n+\n+  bool\n+  operator<(const copycounter& lhs, const copycounter& rhs)\n+  { return lhs.val < rhs.val; }\n+\n+  void\n+  swap(copycounter& lhs, copycounter& rhs)\n+  {  \n+    VERIFY(lhs.valid && rhs.valid);\n+    int temp = lhs.val;\n+    lhs.val = rhs.val;\n+    rhs.val = temp;\n+  }\n+  \n+}; // namespace __gnu_test\n+\n+#endif // _GLIBCXX_TESTSUITE_TR1_H"}]}