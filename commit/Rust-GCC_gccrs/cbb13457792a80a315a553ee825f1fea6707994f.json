{"sha": "cbb13457792a80a315a553ee825f1fea6707994f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiMTM0NTc3OTJhODBhMzE1YTU1M2VlODI1ZjFmZWE2NzA3OTk0Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-05-12T12:20:18Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-05-12T12:20:18Z"}, "message": "Use HAIFA_INLINE for inlining functions instead of __inline directly\n\nFrom-SVN: r19700", "tree": {"sha": "5cd4cf3d8d498614bec8caa0e607cb3fa14fe327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cd4cf3d8d498614bec8caa0e607cb3fa14fe327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbb13457792a80a315a553ee825f1fea6707994f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb13457792a80a315a553ee825f1fea6707994f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb13457792a80a315a553ee825f1fea6707994f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb13457792a80a315a553ee825f1fea6707994f/comments", "author": null, "committer": null, "parents": [{"sha": "1478d88a8c82dcb57eddf528cfb9d6edd887e253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1478d88a8c82dcb57eddf528cfb9d6edd887e253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1478d88a8c82dcb57eddf528cfb9d6edd887e253"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "1895a0b2acd9ea743fb62ea756da79867bf3b394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb13457792a80a315a553ee825f1fea6707994f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb13457792a80a315a553ee825f1fea6707994f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbb13457792a80a315a553ee825f1fea6707994f", "patch": "@@ -1,3 +1,21 @@\n+Tue May 12 15:16:02 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* haifa-sched.c (HAIFA_INLINE): Define to be __inline unless\n+\talready defined.\n+\t(find_insn_{,mem_}list): Use HAIFA_INLINE, not __inline.\n+\t(insn_{unit,issue_delay}): Ditto.\n+\t(blockage_range): Ditto.\n+\t(actual_hazard{,_this_instance}): Ditto.\n+\t(schedule_unit): Ditto.\n+\t(potential_hazard): Ditto.\n+\t(insn_cost): Ditto.\n+\t(swap_sort): Ditto.\n+\t(queue_insn): Ditto.\n+\t(birthing_insn_p): Ditto.\n+\t(adjust_priority): Ditto.\n+\t(get_block_head_tail): Ditto.\n+\t(init_rgn_data_dependences): Ditto.\n+\n Tue May 12 10:27:54 1998  Klaus Kaempf  <kkaempf@progis.de>\n \n \t* alpha/vms.h (COMMON_ASM_OP, ASM_OUTPUT_ALIGNED_COMMON): Define."}, {"sha": "6093486ebbbb9abbedbadce3dfa6f436763ce37e", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb13457792a80a315a553ee825f1fea6707994f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb13457792a80a315a553ee825f1fea6707994f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=cbb13457792a80a315a553ee825f1fea6707994f", "patch": "@@ -971,6 +971,10 @@ schedule_insns (dump_file)\n #define __inline\n #endif\n \n+#ifndef HAIFA_INLINE\n+#define HAIFA_INLINE __inline\n+#endif\n+\n /* Computation of memory dependencies.  */\n \n /* The *_insns and *_mems are paired lists.  Each pending memory operation\n@@ -2740,7 +2744,7 @@ is_exception_free (insn, bb_src, bb_trg)\n /* Return the INSN_LIST containing INSN in LIST, or NULL\n    if LIST does not contain INSN.  */\n \n-__inline static rtx\n+HAIFA_INLINE static rtx\n find_insn_list (insn, list)\n      rtx insn;\n      rtx list;\n@@ -2757,7 +2761,7 @@ find_insn_list (insn, list)\n \n /* Return 1 if the pair (insn, x) is found in (LIST, LIST1), or 0 otherwise.  */\n \n-__inline static char\n+HAIFA_INLINE static char\n find_insn_mem_list (insn, x, list, list1)\n      rtx insn, x;\n      rtx list, list1;\n@@ -2780,7 +2784,7 @@ find_insn_mem_list (insn, x, list, list1)\n    mask if the value is negative.  A function unit index is the\n    non-negative encoding.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n insn_unit (insn)\n      rtx insn;\n {\n@@ -2817,7 +2821,7 @@ insn_unit (insn)\n    These values are encoded in an int where the upper half gives the\n    minimum value and the lower half gives the maximum value.  */\n \n-__inline static unsigned int\n+HAIFA_INLINE static unsigned int\n blockage_range (unit, insn)\n      int unit;\n      rtx insn;\n@@ -2864,7 +2868,7 @@ clear_units ()\n \n /* Return the issue-delay of an insn */\n \n-__inline static int\n+HAIFA_INLINE static int\n insn_issue_delay (insn)\n      rtx insn;\n {\n@@ -2894,7 +2898,7 @@ insn_issue_delay (insn)\n    instance INSTANCE at time CLOCK if the previous actual hazard cost\n    was COST.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n actual_hazard_this_instance (unit, instance, insn, clock, cost)\n      int unit, instance, clock, cost;\n      rtx insn;\n@@ -2931,7 +2935,7 @@ actual_hazard_this_instance (unit, instance, insn, clock, cost)\n /* Record INSN as having begun execution on the units encoded by UNIT at\n    time CLOCK.  */\n \n-__inline static void\n+HAIFA_INLINE static void\n schedule_unit (unit, insn, clock)\n      int unit, clock;\n      rtx insn;\n@@ -2963,7 +2967,7 @@ schedule_unit (unit, insn, clock)\n /* Return the actual hazard cost of executing INSN on the units encoded by\n    UNIT at time CLOCK if the previous actual hazard cost was COST.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n actual_hazard (unit, insn, clock, cost)\n      int unit, clock, cost;\n      rtx insn;\n@@ -3012,7 +3016,7 @@ actual_hazard (unit, insn, clock, cost)\n    to be used is chosen in preference to one with a unit that is less\n    used.  We are trying to minimize a subsequent actual hazard.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n potential_hazard (unit, insn, cost)\n      int unit, cost;\n      rtx insn;\n@@ -3057,7 +3061,7 @@ potential_hazard (unit, insn, cost)\n    This is the number of cycles between instruction issue and\n    instruction results.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n insn_cost (insn, link, used)\n      rtx insn, link, used;\n {\n@@ -4091,7 +4095,7 @@ rank_for_schedule (x, y)\n \n /* Resort the array A in which only element at index N may be out of order.  */\n \n-__inline static void\n+HAIFA_INLINE static void\n swap_sort (a, n)\n      rtx *a;\n      int n;\n@@ -4113,7 +4117,7 @@ static int max_priority;\n    N_CYCLES after the currently executing insn.  Preserve insns\n    chain for debugging purposes.  */\n \n-__inline static void\n+HAIFA_INLINE static void\n queue_insn (insn, n_cycles)\n      rtx insn;\n      int n_cycles;\n@@ -4138,7 +4142,7 @@ queue_insn (insn, n_cycles)\n /* Return nonzero if PAT is the pattern of an insn which makes a\n    register live.  */\n \n-__inline static int\n+HAIFA_INLINE static int\n birthing_insn_p (pat)\n      rtx pat;\n {\n@@ -4174,7 +4178,7 @@ birthing_insn_p (pat)\n /* PREV is an insn that is ready to execute.  Adjust its priority if that\n    will help shorten register lifetimes.  */\n \n-__inline static void\n+HAIFA_INLINE static void\n adjust_priority (prev)\n      rtx prev;\n {\n@@ -4701,7 +4705,7 @@ unlink_line_notes (insn, tail)\n \n /* Return the head and tail pointers of BB.  */\n \n-__inline static void\n+HAIFA_INLINE static void\n get_block_head_tail (bb, headp, tailp)\n      int bb;\n      rtx *headp;\n@@ -6969,7 +6973,7 @@ compute_block_forward_dependences (bb)\n /* Initialize variables for region data dependence analysis.\n    n_bbs is the number of region blocks */\n \n-__inline static void\n+HAIFA_INLINE static void\n init_rgn_data_dependences (n_bbs)\n      int n_bbs;\n {"}]}