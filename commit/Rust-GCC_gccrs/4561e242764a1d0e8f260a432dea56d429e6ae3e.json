{"sha": "4561e242764a1d0e8f260a432dea56d429e6ae3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2MWUyNDI3NjRhMWQwZThmMjYwYTQzMmRlYTU2ZDQyOWU2YWUzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-04-26T18:45:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-04-26T18:45:41Z"}, "message": "dwarf2out.c (loc_descr_plus_const): New function.\n\n\t* dwarf2out.c (loc_descr_plus_const): New function.\n\t(build_cfa_aligned_loc, tls_mem_loc_descriptor,\n\tmem_loc_descriptor, loc_descriptor_from_tree_1,\n\tdescr_info_loc, gen_variable_die): Use it.\n\nFrom-SVN: r146809", "tree": {"sha": "57a07b64dc5b0409cfaa26fa711ba29c8603c506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a07b64dc5b0409cfaa26fa711ba29c8603c506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4561e242764a1d0e8f260a432dea56d429e6ae3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561e242764a1d0e8f260a432dea56d429e6ae3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4561e242764a1d0e8f260a432dea56d429e6ae3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561e242764a1d0e8f260a432dea56d429e6ae3e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9548ddfe584e4253d3afcf07b5a2cbb5b68a896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9548ddfe584e4253d3afcf07b5a2cbb5b68a896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9548ddfe584e4253d3afcf07b5a2cbb5b68a896"}], "stats": {"total": 101, "additions": 56, "deletions": 45}, "files": [{"sha": "251d78f0d786bc34e2c95571f2ed18d9a48c4d5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561e242764a1d0e8f260a432dea56d429e6ae3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561e242764a1d0e8f260a432dea56d429e6ae3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4561e242764a1d0e8f260a432dea56d429e6ae3e", "patch": "@@ -1,5 +1,10 @@\n 2009-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (loc_descr_plus_const): New function.\n+\t(build_cfa_aligned_loc, tls_mem_loc_descriptor,\n+\tmem_loc_descriptor, loc_descriptor_from_tree_1,\n+\tdescr_info_loc, gen_variable_die): Use it.\n+\n \t* tree.h (DECL_BY_REFERENCE): Note that it is also valid for\n \t!TREE_STATIC VAR_DECLs.\n \t* dwarf2out.c (loc_by_reference, gen_decl_die): Handle"}, {"sha": "3c72dc69ffd34a6d31a95dc853f51d52be68c0b8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 51, "deletions": 45, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561e242764a1d0e8f260a432dea56d429e6ae3e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561e242764a1d0e8f260a432dea56d429e6ae3e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4561e242764a1d0e8f260a432dea56d429e6ae3e", "patch": "@@ -3879,6 +3879,47 @@ add_loc_descr (dw_loc_descr_ref *list_head, dw_loc_descr_ref descr)\n   *d = descr;\n }\n \n+/* Add a constant OFFSET to a location expression.  */\n+\n+static void\n+loc_descr_plus_const (dw_loc_descr_ref *list_head, HOST_WIDE_INT offset)\n+{\n+  dw_loc_descr_ref loc;\n+  HOST_WIDE_INT *p;\n+\n+  gcc_assert (*list_head != NULL);\n+\n+  if (!offset)\n+    return;\n+\n+  /* Find the end of the chain.  */\n+  for (loc = *list_head; loc->dw_loc_next != NULL; loc = loc->dw_loc_next)\n+    ;\n+\n+  p = NULL;\n+  if (loc->dw_loc_opc == DW_OP_fbreg\n+      || (loc->dw_loc_opc >= DW_OP_breg0 && loc->dw_loc_opc <= DW_OP_breg31))\n+    p = &loc->dw_loc_oprnd1.v.val_int;\n+  else if (loc->dw_loc_opc == DW_OP_bregx)\n+    p = &loc->dw_loc_oprnd2.v.val_int;\n+\n+  /* If the last operation is fbreg, breg{0..31,x}, optimize by adjusting its\n+     offset.  Don't optimize if an signed integer overflow would happen.  */\n+  if (p != NULL\n+      && ((offset > 0 && *p <= INTTYPE_MAXIMUM (HOST_WIDE_INT) - offset)\n+\t  || (offset < 0 && *p >= INTTYPE_MINIMUM (HOST_WIDE_INT) - offset)))\n+    *p += offset;\n+\n+  else if (offset > 0)\n+    loc->dw_loc_next = new_loc_descr (DW_OP_plus_uconst, offset, 0);\n+\n+  else\n+    {\n+      loc->dw_loc_next = int_loc_descriptor (offset);\n+      add_loc_descr (&loc->dw_loc_next, new_loc_descr (DW_OP_plus, 0, 0));\n+    }\n+}\n+\n /* Return the size of a location descriptor.  */\n \n static unsigned long\n@@ -4398,9 +4439,7 @@ build_cfa_aligned_loc (HOST_WIDE_INT offset, HOST_WIDE_INT alignment)\n       head = new_reg_loc_descr (dwarf_fp, 0);\n       add_loc_descr (&head, int_loc_descriptor (alignment));\n       add_loc_descr (&head, new_loc_descr (DW_OP_and, 0, 0));\n-\n-      add_loc_descr (&head, int_loc_descriptor (offset));\n-      add_loc_descr (&head, new_loc_descr (DW_OP_plus, 0, 0));\n+      loc_descr_plus_const (&head, offset);\n     }\n   else\n     head = new_reg_loc_descr (dwarf_fp, offset);\n@@ -9904,7 +9943,7 @@ static dw_loc_descr_ref\n tls_mem_loc_descriptor (rtx mem)\n {\n   tree base;\n-  dw_loc_descr_ref loc_result, loc_result2;\n+  dw_loc_descr_ref loc_result;\n \n   if (MEM_EXPR (mem) == NULL_TREE || MEM_OFFSET (mem) == NULL_RTX)\n     return NULL;\n@@ -9920,21 +9959,7 @@ tls_mem_loc_descriptor (rtx mem)\n     return NULL;\n \n   if (INTVAL (MEM_OFFSET (mem)))\n-    {\n-      if (INTVAL (MEM_OFFSET (mem)) >= 0)\n-\tadd_loc_descr (&loc_result,\n-\t\t       new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t      INTVAL (MEM_OFFSET (mem)), 0));\n-      else\n-\t{\n-\t  loc_result2 = mem_loc_descriptor (MEM_OFFSET (mem), GET_MODE (mem),\n-\t\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n-\t  if (loc_result2 == 0)\n-\t    return NULL;\n-\t  add_loc_descr (&loc_result, loc_result2);\n-\t  add_loc_descr (&loc_result, new_loc_descr (DW_OP_plus, 0, 0));\n-\t}\n-    }\n+    loc_descr_plus_const (&loc_result, INTVAL (MEM_OFFSET (mem)));\n \n   return loc_result;\n }\n@@ -10099,11 +10124,8 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  if (mem_loc_result == 0)\n \t    break;\n \n-\t  if (GET_CODE (XEXP (rtl, 1)) == CONST_INT\n-\t      && INTVAL (XEXP (rtl, 1)) >= 0)\n-\t    add_loc_descr (&mem_loc_result,\n-\t\t\t   new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t\t  INTVAL (XEXP (rtl, 1)), 0));\n+\t  if (GET_CODE (XEXP (rtl, 1)) == CONST_INT)\n+\t    loc_descr_plus_const (&mem_loc_result, INTVAL (XEXP (rtl, 1)));\n \t  else\n \t    {\n \t      dw_loc_descr_ref mem_loc_result2\n@@ -10517,13 +10539,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \t  }\n \n \tbytepos = bitpos / BITS_PER_UNIT;\n-\tif (bytepos > 0)\n-\t  add_loc_descr (&ret, new_loc_descr (DW_OP_plus_uconst, bytepos, 0));\n-\telse if (bytepos < 0)\n-\t  {\n-\t    add_loc_descr (&ret, int_loc_descriptor (bytepos));\n-\t    add_loc_descr (&ret, new_loc_descr (DW_OP_plus, 0, 0));\n-\t  }\n+\tloc_descr_plus_const (&ret, bytepos);\n \n \thave_address = 1;\n \tbreak;\n@@ -10607,11 +10623,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \t  if (ret == 0)\n \t    return 0;\n \n-\t  add_loc_descr (&ret,\n-\t\t\t new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t\ttree_low_cst (TREE_OPERAND (loc, 1),\n-\t\t\t\t\t\t      0),\n-\t\t\t\t\t0));\n+\t  loc_descr_plus_const (&ret, tree_low_cst (TREE_OPERAND (loc, 1), 0));\n \t  break;\n \t}\n \n@@ -12994,10 +13006,7 @@ descr_info_loc (tree val, tree base_decl)\n \t  loc = descr_info_loc (TREE_OPERAND (val, 0), base_decl);\n \t  if (!loc)\n \t    break;\n-\t  add_loc_descr (&loc,\n-\t\t\t new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t\ttree_low_cst (TREE_OPERAND (val, 1),\n-\t\t\t\t\t\t      1), 0));\n+\t  loc_descr_plus_const (&loc, tree_low_cst (TREE_OPERAND (val, 1), 0));\n \t}\n       else\n \t{\n@@ -13913,9 +13922,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t\t\tloc->dw_loc_oprnd1.v.val_addr\n \t\t\t  = plus_constant (loc->dw_loc_oprnd1.v.val_addr, off);\n \t\t\telse\n-\t\t\t  add_loc_descr (&loc,\n-\t\t\t\t\t new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t\t\t\toff, 0));\n+\t\t\t  loc_descr_plus_const (&loc, off);\n \t\t    }\n \t\t  add_AT_loc (var_die, DW_AT_location, loc);\n \t\t  remove_AT (var_die, DW_AT_declaration);\n@@ -13978,8 +13985,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t\tloc->dw_loc_oprnd1.v.val_addr\n \t\t  = plus_constant (loc->dw_loc_oprnd1.v.val_addr, off);\n \t      else\n-\t\tadd_loc_descr (&loc, new_loc_descr (DW_OP_plus_uconst,\n-\t\t\t\t\t\t    off, 0));\n+\t\tloc_descr_plus_const (&loc, off);\n \t    }\n \t  add_AT_loc (var_die, DW_AT_location, loc);\n \t}"}]}