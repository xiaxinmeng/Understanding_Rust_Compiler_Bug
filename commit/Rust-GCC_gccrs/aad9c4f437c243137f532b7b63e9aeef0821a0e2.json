{"sha": "aad9c4f437c243137f532b7b63e9aeef0821a0e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkOWM0ZjQzN2MyNDMxMzdmNTMyYjdiNjNlOWFlZWYwODIxYTBlMg==", "commit": {"author": {"name": "Arjen Markus", "email": "arjen.markus@wldelft.nl", "date": "2008-12-21T18:45:17Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-12-21T18:45:17Z"}, "message": "re PR fortran/37605 (Remarks on user manual for Gfortran)\n\n2008-12-21  Arjen Markus  <arjen.markus@wldelft.nl>\n\t    Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37605\n\t* gfortran.texi: Fixed some typos and some minor style improvements.\n\t* intrinsic.texi: Some clarifications and typo-fixes.\n\t* invoke.texi: Better documenation of the behaviour of the\n\t-fdefault-*-8 options and some other fixes.\n\nCo-Authored-By: Daniel Kraft <d@domob.eu>\n\nFrom-SVN: r142866", "tree": {"sha": "2b5dc44772db8547919e94872d63f3089cc97951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5dc44772db8547919e94872d63f3089cc97951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad9c4f437c243137f532b7b63e9aeef0821a0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad9c4f437c243137f532b7b63e9aeef0821a0e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad9c4f437c243137f532b7b63e9aeef0821a0e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad9c4f437c243137f532b7b63e9aeef0821a0e2/comments", "author": null, "committer": null, "parents": [{"sha": "b72bcb52250f696bd66949e0a84903fdbb1dd20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bcb52250f696bd66949e0a84903fdbb1dd20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72bcb52250f696bd66949e0a84903fdbb1dd20d"}], "stats": {"total": 144, "additions": 90, "deletions": 54}, "files": [{"sha": "eaa496da8681e18d2ed1ebe94c3326a3b202990b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aad9c4f437c243137f532b7b63e9aeef0821a0e2", "patch": "@@ -1,3 +1,12 @@\n+2008-12-21  Arjen Markus  <arjen.markus@wldelft.nl>\n+\t    Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37605\n+\t* gfortran.texi: Fixed some typos and some minor style improvements.\n+\t* intrinsic.texi: Some clarifications and typo-fixes.\n+\t* invoke.texi: Better documenation of the behaviour of the\n+\t-fdefault-*-8 options and some other fixes.\n+\n 2008-12-18  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/31822"}, {"sha": "e5b46ce6c16b0b424c6db09025e793b542b8193f", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=aad9c4f437c243137f532b7b63e9aeef0821a0e2", "patch": "@@ -263,14 +263,13 @@ code designed to be efficiently translated and processed\n by a machine such as your computer.\n Humans usually aren't as good writing machine code\n as they are at writing Fortran (or C++, Ada, or Java),\n-because is easy to make tiny mistakes writing machine code.\n+because it is easy to make tiny mistakes writing machine code.\n \n @item\n Provide the user with information about the reasons why\n the compiler is unable to create a binary from the source code.\n Usually this will be the case if the source code is flawed.\n-When writing Fortran, it is easy to make big mistakes.\n-The Fortran 90 requires that the compiler can point out\n+The Fortran 90 standard requires that the compiler can point out\n mistakes to the user.\n An incorrect usage of the language causes an @dfn{error message}.\n \n@@ -986,8 +985,14 @@ equivalent to the standard-conforming declaration\n       TYPESPEC(k) x,y,z\n @end smallexample\n @noindent\n-where @code{k} is equal to @code{size} for most types, but is equal to\n-@code{size/2} for the @code{COMPLEX} type.\n+where @code{k} is the kind parameter suitable for the intended precision.  As\n+kind parameters are implementation-dependent, use the @code{KIND},\n+@code{SELECTED_INT_KIND} and @code{SELECTED_REAL_KIND} intrinsics to retrieve\n+the correct value, for instance @code{REAL*8 x} can be replaced by:\n+@smallexample\n+INTEGER, PARAMETER :: dbl = KIND(1.0d0)\n+REAL(KIND=dbl) :: x\n+@end smallexample\n \n @node Old-style variable initialization\n @subsection Old-style variable initialization\n@@ -1561,9 +1566,9 @@ worth a look.\n The long history of the Fortran language, its wide use and broad\n userbase, the large number of different compiler vendors and the lack of\n some features crucial to users in the first standards have lead to the\n-existence of an important number of extensions to the language. While\n+existence of a number of important extensions to the language.  While\n some of the most useful or popular extensions are supported by the GNU\n-Fortran compiler, not all existing extensions are supported. This section\n+Fortran compiler, not all existing extensions are supported.  This section\n aims at listing these extensions and offering advice on how best make\n code that uses them running with the GNU Fortran compiler.\n \n@@ -1617,7 +1622,7 @@ store_catalog(7).id = 7831\n store_catalog(7).description = \"milk bottle\"\n store_catalog(7).price = 1.2\n \n-! We can also manipulates the whole structure\n+! We can also manipulate the whole structure\n store_catalog(12) = pear\n print *, store_catalog(12)\n @end example"}, {"sha": "8db47e9ba8818fbd417cf42b37d87b673ae286a5", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=aad9c4f437c243137f532b7b63e9aeef0821a0e2", "patch": "@@ -318,8 +318,10 @@ the applicable standard for each intrinsic procedure is noted.\n @table @asis\n @item @emph{Description}:\n @code{ABORT} causes immediate termination of the program.  On operating\n-systems that support a core dump, @code{ABORT} will produce a core dump,\n-which is suitable for debugging purposes.\n+systems that support a core dump, @code{ABORT} will produce a core dump even if\n+the option @option{-fno-dump-core} is in effect, which is suitable for debugging\n+purposes.\n+@c TODO: Check if this (with -fno-dump-core) is correct.\n \n @item @emph{Standard}:\n GNU extension\n@@ -540,7 +542,7 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL} with a magnitude that is\n-less than one.\n+less than or equal to one.\n @end multitable\n \n @item @emph{Return value}:\n@@ -632,7 +634,7 @@ Inverse function: @ref{COSH}\n Spaces are inserted at the end of the string as needed.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -973,7 +975,7 @@ is @code{.TRUE.}; otherwise, it returns @code{.FALSE.}\n program test_allocated\n   integer :: i = 4\n   real(4), allocatable :: x(:)\n-  if (allocated(x) .eqv. .false.) allocate(x(i))\n+  if (.not. allocated(x)) allocate(x(i))\n end program test_allocated\n @end smallexample\n @end table\n@@ -1179,7 +1181,7 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL}, and a magnitude that is\n-less than one.\n+less than or equal to one.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1797,7 +1799,8 @@ end program test_besyn\n @table @asis\n @item @emph{Description}:\n @code{BIT_SIZE(I)} returns the number of bits (integer precision plus sign bit)\n-represented by the type of @var{I}.\n+represented by the type of @var{I}.  The result of @code{BIT_SIZE(I)} is\n+independent of the actual value of @var{I}.\n \n @item @emph{Standard}:\n Fortran 95 and later\n@@ -1837,7 +1840,7 @@ end program test_bit_size\n @table @asis\n @item @emph{Description}:\n @code{BTEST(I,POS)} returns logical @code{.TRUE.} if the bit at @var{POS}\n-in @var{I} is set.\n+in @var{I} is set.  The counting of the bits starts at 0.\n \n @item @emph{Standard}:\n Fortran 95 and later\n@@ -2688,8 +2691,9 @@ Elemental function\n \n @item @emph{Return value}:\n The return value is of type @code{REAL} and it is positive\n-(@math{ \\cosh (x) \\geq 0 }. The return value is of the same\n-kind as @var{X}.\n+(@math{ \\cosh (x) \\geq 0 }).  For a @code{REAL} argument @var{X},\n+@math{ \\cosh (x) \\geq 1 }.\n+The return value is of the same kind as @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -2724,7 +2728,7 @@ Inverse function: @ref{ACOSH}\n \n @code{COUNT(MASK [, DIM [, KIND]])} counts the number of @code{.TRUE.}\n elements of @var{MASK} along the dimension of @var{DIM}.  If @var{DIM} is\n-omitted it is taken to be @code{1}.  @var{DIM} is a scaler of type\n+omitted it is taken to be @code{1}.  @var{DIM} is a scalar of type\n @code{INTEGER} in the range of @math{1 /leq DIM /leq n)} where @math{n}\n is the rank of @var{MASK}.\n \n@@ -2844,7 +2848,7 @@ end program test_cpu_time\n @item @emph{Description}:\n @code{CSHIFT(ARRAY, SHIFT [, DIM])} performs a circular shift on elements of\n @var{ARRAY} along the dimension of @var{DIM}.  If @var{DIM} is omitted it is\n-taken to be @code{1}.  @var{DIM} is a scaler of type @code{INTEGER} in the\n+taken to be @code{1}.  @var{DIM} is a scalar of type @code{INTEGER} in the\n range of @math{1 /leq DIM /leq n)} where @math{n} is the rank of @var{ARRAY}.\n If the rank of @var{ARRAY} is one, then all elements of @var{ARRAY} are shifted\n by @var{SHIFT} places.  If rank is greater than one, then all complete rank one\n@@ -3155,14 +3159,14 @@ end program test_dfloat\n \n \n @node DIGITS\n-@section @code{DIGITS} --- Significant digits function\n+@section @code{DIGITS} --- Significant binary digits function\n @fnindex DIGITS\n @cindex model representation, significant digits\n \n @table @asis\n @item @emph{Description}:\n-@code{DIGITS(X)} returns the number of significant digits of the internal model\n-representation of @var{X}.  For example, on a system using a 32-bit\n+@code{DIGITS(X)} returns the number of significant binary digits of the internal\n+model representation of @var{X}.  For example, on a system using a 32-bit\n floating point representation, a default real number would likely return 24.\n \n @item @emph{Standard}:\n@@ -3282,7 +3286,7 @@ Transformational function\n @end multitable\n \n @item @emph{Return value}:\n-If the arguments are numeric, the return value is a scaler of numeric type,\n+If the arguments are numeric, the return value is a scalar of numeric type,\n @code{INTEGER}, @code{REAL}, or @code{COMPLEX}.  If the arguments are\n @code{LOGICAL}, the return value is @code{.TRUE.} or @code{.FALSE.}.\n \n@@ -3483,7 +3487,7 @@ end program test_dtime\n @item @emph{Description}:\n @code{EOSHIFT(ARRAY, SHIFT[, BOUNDARY, DIM])} performs an end-off shift on\n elements of @var{ARRAY} along the dimension of @var{DIM}.  If @var{DIM} is\n-omitted it is taken to be @code{1}.  @var{DIM} is a scaler of type\n+omitted it is taken to be @code{1}.  @var{DIM} is a scalar of type\n @code{INTEGER} in the range of @math{1 /leq DIM /leq n)} where @math{n} is the\n rank of @var{ARRAY}.  If the rank of @var{ARRAY} is one, then all elements of\n @var{ARRAY} are shifted by @var{SHIFT} places.  If rank is greater than one,\n@@ -3511,7 +3515,7 @@ Transformational function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{ARRAY}  @tab May be any type, not scaler.\n+@item @var{ARRAY}  @tab May be any type, not scalar.\n @item @var{SHIFT}  @tab The type shall be @code{INTEGER}.\n @item @var{BOUNDARY} @tab Same type as @var{ARRAY}. \n @item @var{DIM}    @tab The type shall be @code{INTEGER}.\n@@ -3546,7 +3550,8 @@ end program test_eoshift\n \n @table @asis\n @item @emph{Description}:\n-@code{EPSILON(X)} returns a nearly negligible number relative to @code{1}.\n+@code{EPSILON(X)} returns the smallest number @var{E} of the same kind\n+as @var{X} such that @math{1 + E > 1}.\n \n @item @emph{Standard}:\n Fortran 95 and later\n@@ -4875,11 +4880,12 @@ After @code{GET_COMMAND_ARGUMENT} returns, the @var{VALUE} argument holds the\n @var{NUMBER}-th command line argument. If @var{VALUE} can not hold the argument, it is \n truncated to fit the length of @var{VALUE}. If there are less than @var{NUMBER}\n arguments specified at the command line, @var{VALUE} will be filled with blanks. \n-If @math{@var{NUMBER} = 0}, @var{VALUE} is set to the name of the program (on systems\n-that support this feature). The @var{LENGTH} argument contains the length of the\n-@var{NUMBER}-th command line argument. If the argument retrival fails, @var{STATUS}\n-is a positiv number; if @var{VALUE} contains a truncated command line argument,\n-@var{STATUS} is -1; and otherwise the @var{STATUS} is zero.\n+If @math{@var{NUMBER} = 0}, @var{VALUE} is set to the name of the program (on\n+systems that support this feature). The @var{LENGTH} argument contains the\n+length of the @var{NUMBER}-th command line argument. If the argument retrieval\n+fails, @var{STATUS} is a positive number; if @var{VALUE} contains a truncated\n+command line argument, @var{STATUS} is -1; and otherwise the @var{STATUS} is\n+zero.\n \n @item @emph{Example}:\n @smallexample\n@@ -5722,7 +5728,7 @@ the kind shall be the default integer kind.\n @end multitable\n \n @item @emph{Return value}:\n-Does not return.\n+Does not return anything.\n \n @item @emph{Example}:\n @smallexample\n@@ -6368,7 +6374,7 @@ and the kind shall be the default integer kind.\n @end multitable\n \n @item @emph{Return value}:\n-Does not return.\n+Does not return anything.\n \n \n @item @emph{Example}:\n@@ -6957,6 +6963,8 @@ Elemental function\n @item @emph{Return value}:\n The return value is of type @code{REAL} or @code{COMPLEX}.\n The kind type parameter is the same as @var{X}.\n+If @var{X} is @code{COMPLEX}, the imaginary part @math{\\omega} is in the range\n+@math{-\\pi \\leq \\omega \\leq \\pi}.\n \n @item @emph{Example}:\n @smallexample\n@@ -7563,9 +7571,9 @@ the @var{DIM} argument is supplied, determines the maximum value along\n each row of the array in the @var{DIM} direction.  If @var{MASK} is\n present, only the elements for which @var{MASK} is @code{.TRUE.} are\n considered.  If the array has zero size, or all of the elements of\n-@var{MASK} are @code{.FALSE.}, then the result is the most negative\n-number of the type and kind of @var{ARRAY} if @var{ARRAY} is numeric, or\n-a string of nulls if @var{ARRAY} is of character type.\n+@var{MASK} are @code{.FALSE.}, then the result is @code{-HUGE(ARRAY)}\n+if @var{ARRAY} is numeric, or a string of nulls if @var{ARRAY} is of character\n+type.\n \n @item @emph{Standard}:\n Fortran 95 and later\n@@ -9472,8 +9480,8 @@ end program large_integers\n \n @table @asis\n @item @emph{Description}:\n-@code{SELECTED_REAL_KIND(P,R)} return the kind value of a real data type\n-with decimal precision greater of at least @code{P} digits and exponent\n+@code{SELECTED_REAL_KIND(P,R)} returns the kind value of a real data type\n+with decimal precision of at least @code{P} digits and exponent\n range greater at least @code{R}. \n \n @item @emph{Standard}:\n@@ -9709,6 +9717,7 @@ Subroutine, function\n @item @var{STATUS} @tab (Optional) @var{STATUS} shall be a scalar\n integer. It has @code{INTENT(OUT)}.\n @end multitable\n+@c TODO: What should the interface of the handler be?  Does it take arguments?\n \n @item @emph{Return value}:\n The @code{SIGNAL} function returns the value returned by @code{signal(2)}.\n@@ -10173,7 +10182,7 @@ Subroutine\n @end multitable\n \n @item @emph{Return value}:\n-Does not return.\n+Does not return anything.\n \n @item @emph{Example}:\n See @code{RAND} and @code{IRAND} for examples.\n@@ -11242,6 +11251,8 @@ manual.\n @item @code{C_FUNLOC}\n @item @code{C_LOC}\n @end table\n+@c TODO: Vertical spacing between C_FUNLOC and C_LOC wrong in PDF,\n+@c don't really know why.\n \n The @code{ISO_C_BINDING} module provides the following named constants of the\n type integer, which can be used as KIND type parameter. Note that GNU\n@@ -11290,7 +11301,7 @@ C_INT_LEAST128_T, C_INT_FAST128_T}.\n @item @code{CHARACTER}@tab @code{C_CHAR}        @tab @code{char}\n @end multitable\n \n-Additionally, the following @code{(CHARACTER(KIND=C_CHAR)} are\n+Additionally, the following @code{(CHARACTER(KIND=C_CHAR))} are\n defined.\n \n @multitable @columnfractions .20 .45 .15"}, {"sha": "8e18dd2342cb05539adbe163ca637b219a3f4501", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad9c4f437c243137f532b7b63e9aeef0821a0e2/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=aad9c4f437c243137f532b7b63e9aeef0821a0e2", "patch": "@@ -210,12 +210,12 @@ form is determined by the file extension.\n \n @item -fall-intrinsics\n @opindex @code{fall-intrinsics}\n-Accept all of the intrinsic procedures provided in libgfortran \n-without regard to the setting of @option{-std}.  In particular, \n-this option can be quite useful with @option{-std=f95}.  Additionally,\n-@command{gfortran} will ignore @option{-Wintrinsics-std} and will never try\n-to link to an @code{EXTERNAL} version if the intrinsic is not included in the\n-selected standard.\n+This option causes all intrinsic procedures (including the GNU-specific\n+extensions) to be accepted.  This can be useful with @option{-std=f95} to\n+force standard-compliance but get access to the full range of intrinsics\n+available with @command{gfortran}.  As a consequence, @option{-Wintrinsics-std}\n+will be ignored and no user-defined procedure with the same name as any\n+intrinsic will be called except when it is explicitly declared @code{EXTERNAL}.\n \n @item -fd-lines-as-code\n @item -fd-lines-as-comments\n@@ -229,17 +229,26 @@ comment lines.\n \n @item -fdefault-double-8\n @opindex @code{fdefault-double-8}\n-Set the @code{DOUBLE PRECISION} type to an 8 byte wide type.\n+Set the @code{DOUBLE PRECISION} type to an 8 byte wide type.  If\n+@option{-fdefault-real-8} is given, @code{DOUBLE PRECISION} would\n+instead be promoted to 16 bytes if possible, and @option{-fdefault-double-8}\n+can be used to prevent this.  The kind of real constants like @code{1.d0} will\n+not be changed by @option{-fdefault-real-8} though, so also\n+@option{-fdefault-double-8} does not affect it.\n \n @item -fdefault-integer-8\n @opindex @code{fdefault-integer-8}\n Set the default integer and logical types to an 8 byte wide type.\n-Do nothing if this is already the default.\n+Do nothing if this is already the default.  This option also affects\n+the kind of integer constants like @code{42}.\n \n @item -fdefault-real-8\n @opindex @code{fdefault-real-8}\n Set the default real type to an 8 byte wide type.\n-Do nothing if this is already the default.\n+Do nothing if this is already the default.  This option also affects\n+the kind of non-double real constants like @code{1.0}, and does promote\n+the default width of @code{DOUBLE PRECISION} to 16 bytes if possible, unless\n+@code{-fdefault-double-8} is given, too.\n \n @item -fdollar-ok\n @opindex @code{fdollar-ok}\n@@ -861,7 +870,7 @@ zero), @samp{overflow} (overflow in a floating point operation),\n (operation produced a denormal value).\n \n Some of the routines in the Fortran runtime library, like\n-@samp{CPU_TIME}, are likely to to trigger floating point exceptions when\n+@samp{CPU_TIME}, are likely to trigger floating point exceptions when\n @code{ffpe-trap=precision} is used. For this reason, the use of \n @code{ffpe-trap=precision} is not recommended.\n \n@@ -1183,13 +1192,15 @@ by use of the @option{-ff2c} option.\n Enable generation of run-time checks for array subscripts\n and against the declared minimum and maximum values.  It also\n checks array indices for assumed and deferred\n-shape arrays against the actual allocated bounds.\n+shape arrays against the actual allocated bounds and ensures that all string\n+lengths are equal for character array constructors without an explicit\n+typespec.\n \n Some checks require that @option{-fbounds-check} is set for\n the compilation of the main program.\n \n-In the future this may also include other forms of checking, e.g., checking\n-substring references.\n+Note: In the future this may also include other forms of checking, e.g.,\n+checking substring references.\n \n \n @item fcheck-array-temporaries"}]}