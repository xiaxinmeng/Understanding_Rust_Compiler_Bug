{"sha": "03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiOWU4ZTQ4ZGZiMDJjNDM2NjExMDJjZTI1ZDk2OGRkNGIyZTA5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-13T19:16:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-13T19:16:30Z"}, "message": "re PR tree-optimization/59617 ([vectorizer] ICE in vectorizable_mask_load_store with AVX-512F's gathers enabled.)\n\n\tPR target/59617\n\t* config/i386/i386.c (ix86_vectorize_builtin_gather): Uncomment\n\tAVX512F gather builtins.\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): For now punt\n\ton gather decls with INTEGER_TYPE masktype.\n\t(vectorizable_load): For INTEGER_TYPE masktype, put the INTEGER_CST\n\tdirectly into the builtin rather than hoisting it before loop.\n\nFrom-SVN: r206585", "tree": {"sha": "a8935188d8ee76dd4822fa129af1cf77d3e9e945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8935188d8ee76dd4822fa129af1cf77d3e9e945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19e51b409e89cb13f388bf2442e3d00b904dddde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e51b409e89cb13f388bf2442e3d00b904dddde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e51b409e89cb13f388bf2442e3d00b904dddde"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "15697e5a9c7438e85653a86275ba627a9bce91a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "patch": "@@ -1,5 +1,13 @@\n 2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/59617\n+\t* config/i386/i386.c (ix86_vectorize_builtin_gather): Uncomment\n+\tAVX512F gather builtins.\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): For now punt\n+\ton gather decls with INTEGER_TYPE masktype.\n+\t(vectorizable_load): For INTEGER_TYPE masktype, put the INTEGER_CST\n+\tdirectly into the builtin rather than hoisting it before loop.\n+\n \tPR tree-optimization/59387\n \t* tree-scalar-evolution.c: Include gimple-fold.h and gimplify-me.h.\n \t(scev_const_prop): If folded_casts and type has undefined overflow,"}, {"sha": "ad48fc8c1b45da7135f9e0d4a7ad8689d296d315", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "patch": "@@ -36565,9 +36565,6 @@ ix86_vectorize_builtin_gather (const_tree mem_vectype,\n     case V8SImode:\n       code = si ? IX86_BUILTIN_GATHERSIV8SI : IX86_BUILTIN_GATHERALTDIV8SI;\n       break;\n-#if 0\n-    /*  FIXME: Commented until vectorizer can work with (mask_type != src_type)\n-\tPR59617.   */\n     case V8DFmode:\n       if (TARGET_AVX512F)\n \tcode = si ? IX86_BUILTIN_GATHER3ALTSIV8DF : IX86_BUILTIN_GATHER3DIV8DF;\n@@ -36592,7 +36589,6 @@ ix86_vectorize_builtin_gather (const_tree mem_vectype,\n       else\n \treturn NULL_TREE;\n       break;\n-#endif\n     default:\n       return NULL_TREE;\n     }"}, {"sha": "cdeb4578abe0f5b5108848030f826af985e5d23b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b9e8e48dfb02c43661102ce25d968dd4b2e09d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "patch": "@@ -1813,6 +1813,17 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t\t     \"gather index use not simple.\");\n \t  return false;\n \t}\n+\n+      tree arglist = TYPE_ARG_TYPES (TREE_TYPE (gather_decl));\n+      tree masktype\n+\t= TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n+      if (TREE_CODE (masktype) == INTEGER_TYPE)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"masked gather with integer mask not supported.\");\n+\t  return false;\n+\t}\n     }\n   else if (tree_int_cst_compare (nested_in_vect_loop\n \t\t\t\t ? STMT_VINFO_DR_STEP (stmt_info)\n@@ -5761,6 +5772,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t{\n \t  mask = build_int_cst (TREE_TYPE (masktype), -1);\n \t  mask = build_vector_from_val (masktype, mask);\n+\t  mask = vect_init_vector (stmt, mask, masktype, NULL);\n \t}\n       else if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (masktype)))\n \t{\n@@ -5771,10 +5783,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  real_from_target (&r, tmp, TYPE_MODE (TREE_TYPE (masktype)));\n \t  mask = build_real (TREE_TYPE (masktype), r);\n \t  mask = build_vector_from_val (masktype, mask);\n+\t  mask = vect_init_vector (stmt, mask, masktype, NULL);\n \t}\n       else\n \tgcc_unreachable ();\n-      mask = vect_init_vector (stmt, mask, masktype, NULL);\n \n       scale = build_int_cst (scaletype, gather_scale);\n "}]}