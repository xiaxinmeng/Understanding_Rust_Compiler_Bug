{"sha": "ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1YWVhYWU0MTMzNDFhZGM1NzkyNmU4YWI0M2ZkMWUzZWM5ZjdjMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-03-11T13:30:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-03-11T13:30:35Z"}, "message": "S/390: Fix immediate vector operands for some builtins.\n\nThis fixes a problem with vec_add/sub_u128 builtins.  The\ns390_expand_builtin backend function is supposed to convert the\noperand to TImode *AND* load it into a vector register.  The current\nimplementation did only the conversion and gave up then.\n\ngcc/ChangeLog:\n\n2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_builtin): Do the copy_to_reg not\n\tonly on the else branch.\n\ngcc/testsuite/ChangeLog:\n\n2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-addc-u128.c: New test.\n\nFrom-SVN: r269583", "tree": {"sha": "5b6a114eb45b1da41ba0090001479c5206b6e9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6a114eb45b1da41ba0090001479c5206b6e9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b9482b2d77da5b8db979845b49b3b91bcf898e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9482b2d77da5b8db979845b49b3b91bcf898e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9482b2d77da5b8db979845b49b3b91bcf898e9"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "83f5a837bfd4f17078d875a0853824cf706f26b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "patch": "@@ -1,3 +1,8 @@\n+2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_builtin): Do the copy_to_reg not\n+\tonly on the else branch.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* gcov.c (output_intermediate_json_line): Print function"}, {"sha": "b80d5e828d594423b04ac76d684275504348e592", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "patch": "@@ -928,6 +928,8 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t  continue;\n \t}\n \n+      /* A memory operand is rejected by the memory_operand predicate.\n+\t Try making the address legal by copying it into a register.  */\n       if (MEM_P (op[arity])\n \t  && insn_op->predicate == memory_operand\n \t  && (GET_MODE (XEXP (op[arity], 0)) == Pmode\n@@ -951,10 +953,14 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t{\n \t  op[arity] = tmp_rtx;\n \t}\n-      else if (GET_MODE (op[arity]) == insn_op->mode\n-\t       || GET_MODE (op[arity]) == VOIDmode\n-\t       || (insn_op->predicate == address_operand\n-\t\t   && GET_MODE (op[arity]) == Pmode))\n+\n+      /* The predicate rejects the operand although the mode is fine.\n+\t Copy the operand to register.  */\n+      if (!insn_op->predicate (op[arity], insn_op->mode)\n+\t  && (GET_MODE (op[arity]) == insn_op->mode\n+\t      || GET_MODE (op[arity]) == VOIDmode\n+\t      || (insn_op->predicate == address_operand\n+\t\t  && GET_MODE (op[arity]) == Pmode)))\n \t{\n \t  /* An address_operand usually has VOIDmode in the expander\n \t     so we cannot use this.  */"}, {"sha": "5d091664a2373eda291f55f6cf738d13e7b0268b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "patch": "@@ -1,3 +1,7 @@\n+2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-addc-u128.c: New test.\n+\n 2019-03-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-c++-common/unroll-6.c: New test."}, {"sha": "3ab0c71e3b2f065b4e3cbdf470192d0ce72f12a8", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-addc-u128.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-addc-u128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-addc-u128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-addc-u128.c?ref=ac5aeaae413341adc57926e8ab43fd1e3ec9f7c2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -mzvector -fno-asynchronous-unwind-tables\" } */\n+\n+#include <vecintrin.h>\n+\n+vector unsigned char test(void)\n+{\n+   vector unsigned char a = { 0 };\n+   return __builtin_s390_vec_addc_u128 (a, a);\n+}"}]}