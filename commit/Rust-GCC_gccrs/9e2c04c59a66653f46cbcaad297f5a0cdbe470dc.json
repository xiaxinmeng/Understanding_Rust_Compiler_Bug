{"sha": "9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyYzA0YzU5YTY2NjUzZjQ2Y2JjYWFkMjk3ZjVhMGNkYmU0NzBkYw==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-01-13T20:58:33Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-01-13T20:58:33Z"}, "message": "GtkTextAreaPeer.java, [...] (native\tcreate): Add width and height parameters.\n\n2004-01-13  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkTextAreaPeer.java,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c\n\t(native\tcreate): Add width and height parameters.  Set text\n\tview's size request according to new parameters.\n\t(create): Calculate text view size based on current font's\n\tmetrics and number of rows and columns.  Set TextArea's font if\n\tnot already set.  Call native create.\n\t(getMinimumSize): Call minimumSize.\n\t(getPreferredSize): Call preferredSize.\n\t(getHScrollbarHeight): New method.\n\t(getVScrollbarWidth): New method.\n\t(minimumSize): Calculate minimum size based on scrollbar\n\tvisibility, scrollbar sizes, font metrics and number of rows and\n\tcolumns.\n\t(preferredSize): Likewise for preferred size.\n\t(gtkTextGetSize): Remove method.\n\nFrom-SVN: r75817", "tree": {"sha": "b7d513f8624f5a1b1705ce57bce0883838a7052c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d513f8624f5a1b1705ce57bce0883838a7052c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/comments", "author": null, "committer": null, "parents": [{"sha": "db19e39b823e3f3ad9695c03366cbb644bb80265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db19e39b823e3f3ad9695c03366cbb644bb80265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db19e39b823e3f3ad9695c03366cbb644bb80265"}], "stats": {"total": 211, "additions": 162, "deletions": 49}, "files": [{"sha": "ea7d4adef8e270dbafa73619e37861a5e8a9e33d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "patch": "@@ -1,3 +1,22 @@\n+2004-01-13  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkTextAreaPeer.java,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c\n+\t(native\tcreate): Add width and height parameters.  Set text\n+\tview's size request according to new parameters.\n+\t(create): Calculate text view size based on current font's\n+\tmetrics and number of rows and columns.  Set TextArea's font if\n+\tnot already set.  Call native create.\n+\t(getMinimumSize): Call minimumSize.\n+\t(getPreferredSize): Call preferredSize.\n+\t(getHScrollbarHeight): New method.\n+\t(getVScrollbarWidth): New method.\n+\t(minimumSize): Calculate minimum size based on scrollbar\n+\tvisibility, scrollbar sizes, font metrics and number of rows and\n+\tcolumns.\n+\t(preferredSize): Likewise for preferred size.\n+\t(gtkTextGetSize): Remove method.\n+\n 2004-01-13  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkComponentPeer.java"}, {"sha": "e31a481537fd4bf6ac4167b5e343dd7418d36b3c", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextAreaPeer.java", "status": "modified", "additions": 91, "deletions": 19, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java?ref=9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "patch": "@@ -40,23 +40,46 @@\n \n import java.awt.Dimension;\n import java.awt.Font;\n+import java.awt.FontMetrics;\n import java.awt.TextArea;\n import java.awt.peer.TextAreaPeer;\n \n public class GtkTextAreaPeer extends GtkTextComponentPeer\n   implements TextAreaPeer\n {\n-  native void create (int scrollbarVisibility);\n+  native void create (int width, int height, int scrollbarVisibility);\n \n-  native void gtkSetFont(String name, int style, int size);\n+  native void gtkSetFont (String name, int style, int size);\n \n   void create ()\n   {\n-    create (((TextArea)awtComponent).getScrollbarVisibility ());\n+    Font f = awtComponent.getFont ();\n+\n+    // By default, Sun sets a TextArea's font when its peer is\n+    // created.  If f != null then the peer's font is set by\n+    // GtkComponent.create.\n+    if (f == null)\n+      {\n+\tf = new Font (\"Fixed\", Font.PLAIN, 12);\n+\tawtComponent.setFont (f);\n+      }\n+\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n+\n+    TextArea ta = ((TextArea) awtComponent);\n+    int rows = ta.getRows ();\n+    int cols = ta.getColumns ();\n+\n+    int width = cols * fm.getMaxAdvance ();\n+    int height = rows * (fm.getMaxDescent () + fm.getMaxAscent ());\n+\n+    create (width, height, ta.getScrollbarVisibility ());\n   }\n \n-  native void gtkTextGetSize (int dims[]);\n-\n   public GtkTextAreaPeer (TextArea ta)\n   {\n     super (ta);\n@@ -67,31 +90,80 @@ public GtkTextAreaPeer (TextArea ta)\n \n   public Dimension getMinimumSize (int rows, int cols)\n   {\n-    int dims[] = new int[2];\n-\n-    gtkTextGetSize (dims);\n-\n-    return (new Dimension (dims[0], dims[1]));\n+    return minimumSize (rows, cols);\n   }\n \n   public Dimension getPreferredSize (int rows, int cols)\n   {\n-    int dims[] = new int[2];\n-\n-    gtkTextGetSize (dims);\n-\n-    return (new Dimension (dims[0], dims[1]));\n+    return preferredSize (rows, cols);\n   }\n \n-  /* Deprecated */\n+  native int getHScrollbarHeight ();\n+  native int getVScrollbarWidth ();\n+\n+  // Deprecated\n   public Dimension minimumSize (int rows, int cols)\n   {\n-    return getMinimumSize (rows, cols);\n+    TextArea ta = ((TextArea) awtComponent);\n+    int hScrollbarHeight = 0;\n+    int vScrollbarWidth = 0;\n+    int height = 0;\n+    int width = 0;\n+\n+    if (ta.getScrollbarVisibility () == TextArea.SCROLLBARS_BOTH\n+\t|| ta.getScrollbarVisibility () == TextArea.SCROLLBARS_HORIZONTAL_ONLY)\n+      height = getHScrollbarHeight ();\n+\n+    if (ta.getScrollbarVisibility () == TextArea.SCROLLBARS_BOTH\n+\t|| ta.getScrollbarVisibility () == TextArea.SCROLLBARS_VERTICAL_ONLY)\n+      width = getVScrollbarWidth ();\n+\n+    Font f = awtComponent.getFont ();\n+    if (f == null)\n+      return new Dimension (width, height);\n+\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n+\n+    width += cols * fm.getMaxAdvance ();\n+    height += rows * (fm.getMaxDescent () + fm.getMaxAscent ());\n+\n+    return new Dimension (width, height);\n   }\n \n   public Dimension preferredSize (int rows, int cols)\n   {\n-    return getPreferredSize (rows, cols);\n+    TextArea ta = ((TextArea) awtComponent);\n+    int hScrollbarHeight = 0;\n+    int vScrollbarWidth = 0;\n+    int height = 0;\n+    int width = 0;\n+\n+    if (ta.getScrollbarVisibility () == TextArea.SCROLLBARS_BOTH\n+\t|| ta.getScrollbarVisibility () == TextArea.SCROLLBARS_HORIZONTAL_ONLY)\n+      height = getHScrollbarHeight ();\n+\n+    if (ta.getScrollbarVisibility () == TextArea.SCROLLBARS_BOTH\n+\t|| ta.getScrollbarVisibility () == TextArea.SCROLLBARS_VERTICAL_ONLY)\n+      width = getVScrollbarWidth ();\n+\n+    Font f = awtComponent.getFont ();\n+    if (f == null)\n+      return new Dimension (width, height);\n+\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n+\n+    width += cols * fm.getMaxAdvance ();\n+    height += rows * (fm.getMaxDescent () + fm.getMaxAscent ());\n+\n+    return new Dimension (width, height);\n   }\n \n   public void replaceText (String str, int start, int end)\n@@ -106,6 +178,6 @@ public void insertText (String str, int pos)\n \n   public void setFont (Font f)\n   {\n-    gtkSetFont(f.getName(), f.getStyle(), f.getSize());\n+    gtkSetFont (f.getName (), f.getStyle (), f.getSize ());\n   }\n }"}, {"sha": "ed9ced653da80546e2857354dc21f55840c62e9b", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "status": "modified", "additions": 52, "deletions": 30, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2c04c59a66653f46cbcaad297f5a0cdbe470dc/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c?ref=9e2c04c59a66653f46cbcaad297f5a0cdbe470dc", "patch": "@@ -42,16 +42,18 @@ exception statement from your version. */\n #define TEXT_FROM_SW(obj) (GTK_TEXT_VIEW(GTK_SCROLLED_WINDOW (obj)->container.child))\n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create\n-  (JNIEnv *env, jobject obj, jint scroll)\n+  (JNIEnv *env, jobject obj,\n+   jint textview_width, jint textview_height,  jint scroll)\n {\n   GtkWidget *text, *sw;\n \n   /* Create global reference and save it for future use */\n   NSA_SET_GLOBAL_REF (env, obj);\n \n   gdk_threads_enter ();\n-  \n+\n   text = gtk_text_view_new ();\n+  gtk_widget_set_size_request (text, textview_width, textview_height);\n   gtk_widget_show (text);\n \n   sw = gtk_scrolled_window_new (NULL, NULL);\n@@ -77,34 +79,6 @@ Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create\n   NSA_SET_PTR (env, obj, sw);\n }\n \n-JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_gtkTextGetSize\n-  (JNIEnv *env, jobject obj, jintArray jdims)\n-{\n-  void *ptr;\n-  jint *dims;\n-  GtkWidget *text;\n-  GtkRequisition requisition;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n-\n-  dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n-  dims[0] = dims[1] = 0;\n-\n-  gdk_threads_enter ();\n-\n-  text = GTK_WIDGET (TEXT_FROM_SW (ptr));\n-\n-  gtk_widget_size_request(GTK_WIDGET (text), &requisition);\n-  dims[0] = requisition.width;\n-  dims[1] = requisition.height;\n-\n-  gdk_threads_leave ();\n-  \n-  (*env)->ReleaseIntArrayElements (env, jdims, dims, 0);\n-}\n-\n-\n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_insert\n   (JNIEnv *env, jobject obj, jstring contents, jint position)\n@@ -198,3 +172,51 @@ Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_gtkSetFont\n \n   (*env)->ReleaseStringUTFChars (env, name, font_name);\n }\n+\n+JNIEXPORT jint JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_getHScrollbarHeight\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkScrolledWindow *sw;\n+  GtkRequisition requisition;\n+  jint height = 0;\n+  jint spacing = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+\n+  gtk_widget_size_request (sw->hscrollbar, &requisition);\n+  gtk_widget_style_get (GTK_WIDGET (sw), \"scrollbar_spacing\", &spacing, NULL);\n+  height = requisition.height + spacing;\n+\n+  gdk_threads_leave ();\n+\n+  return height;\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_getVScrollbarWidth\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkScrolledWindow *sw;\n+  GtkRequisition requisition;\n+  jint width = 0;\n+  jint spacing = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+\n+  gtk_widget_size_request (sw->vscrollbar, &requisition);\n+  gtk_widget_style_get (GTK_WIDGET (sw), \"scrollbar_spacing\", &spacing, NULL);\n+  width = requisition.width + spacing;\n+\n+  gdk_threads_leave ();\n+\n+  return width;\n+}"}]}