{"sha": "8ddf681af74e5404974fb47b0b9874de49a3b07d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkZjY4MWFmNzRlNTQwNDk3NGZiNDdiMGI5ODc0ZGU0OWEzYjA3ZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-07-07T11:48:15Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-07-07T11:48:15Z"}, "message": "hooks.c (hook_bool_rtx_int_false): New function.\n\n\t* hooks.c (hook_bool_rtx_int_false): New function.\n\t* hooks.h (hook_bool_rtx_int_false): Declare.\n\t* target-def.h (TARGET_COMMUTATIVE_P): Define.\n\t(TARGET_INITIALIZER): Add TARGET_COMMUTATIVE_P.\n\t* target.h (struct gcc_target): Add commutative_p member.\n\t* targhooks.c (hook_bool_rtx_commutative_p): New function.\n\t* targhooks.h (hook_bool_rtx_commutative_p): Declare.\n\t* pa.c (TARGET_COMMUTATIVE_P): Redefine.\n\t(pa_commutative_p): New function.\n\t* jump.c (target.h): Include.\n\t(rtx_renumbered_equal_p): Use targetm.commutative_p.\n\t* doc/tm.texi: Document TARGET_COMMUTATIVE_P.\n\nFrom-SVN: r101706", "tree": {"sha": "e7a18c9a6876b4eaa648b82269a93800d9c41279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a18c9a6876b4eaa648b82269a93800d9c41279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ddf681af74e5404974fb47b0b9874de49a3b07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddf681af74e5404974fb47b0b9874de49a3b07d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddf681af74e5404974fb47b0b9874de49a3b07d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddf681af74e5404974fb47b0b9874de49a3b07d/comments", "author": null, "committer": null, "parents": [{"sha": "6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d057022743cd9dd0e46c494f0d9449cb7e5aad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d057022743cd9dd0e46c494f0d9449cb7e5aad0"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "93e9f334a1b0759f855c550f73e5f6899dc1f33f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -1,3 +1,18 @@\n+2005-07-07  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* hooks.c (hook_bool_rtx_int_false): New function.\n+\t* hooks.h (hook_bool_rtx_int_false): Declare.\n+\t* target-def.h (TARGET_COMMUTATIVE_P): Define.\n+\t(TARGET_INITIALIZER): Add TARGET_COMMUTATIVE_P.\n+\t* target.h (struct gcc_target): Add commutative_p member.\n+\t* targhooks.c (hook_bool_rtx_commutative_p): New function.\n+\t* targhooks.h (hook_bool_rtx_commutative_p): Declare.\n+\t* pa.c (TARGET_COMMUTATIVE_P): Redefine.\n+\t(pa_commutative_p): New function.\n+\t* jump.c (target.h): Include.\n+\t(rtx_renumbered_equal_p): Use targetm.commutative_p.\n+\t* doc/tm.texi: Document TARGET_COMMUTATIVE_P.\n+\n 2005-07-07  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_expand_clrmem): Delete."}, {"sha": "d0c2f93b49570e4bac5cdb514c0cc0e9f6e392ac", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -124,6 +124,7 @@ static void pa_init_builtins (void);\n static rtx hppa_builtin_saveregs (void);\n static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool pa_scalar_mode_supported_p (enum machine_mode);\n+static bool pa_commutative_p (rtx x, int outer_code);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel (rtx) ATTRIBUTE_UNUSED;\n@@ -226,6 +227,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL pa_function_ok_for_sibcall\n \n+#undef TARGET_COMMUTATIVE_P\n+#define TARGET_COMMUTATIVE_P pa_commutative_p\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK pa_asm_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n@@ -7820,6 +7824,17 @@ pa_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n   return (decl && !TREE_PUBLIC (decl));\n }\n \n+/* ??? Addition is not commutative on the PA due to the weird implicit\n+   space register selection rules for memory addresses.  Therefore, we\n+   don't consider a + b == b + a, as this might be inside a MEM.  */\n+static bool\n+pa_commutative_p (rtx x, int outer_code)\n+{\n+  return (COMMUTATIVE_P (x)\n+\t  && ((outer_code != UNKNOWN && outer_code != MEM)\n+\t      || GET_CODE (x) != PLUS));\n+}\n+\n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for\n    use in fmpyadd instructions.  */\n int"}, {"sha": "8768b74c1025894603d1ba657191acbd1d1ccafb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -9445,6 +9445,13 @@ filling of delay slots can result in branches being redirected, and this\n may in turn cause a branch offset to overflow.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_COMMUTATIVE_P (rtx @var{x}, @var{outer_code})\n+This target hook returns @code{true} if @var{x} is considered to be commutative.\n+Usually, this is just COMMUTATIVE_P (@var{x}), but the HP PA doesn't consider\n+PLUS to be commutative inside a MEM.  @var{outer_code} is the rtx code\n+of the enclosing rtl, if known, otherwise it is UNKNOWN.\n+@end deftypefn\n+\n @deftypefn {Target Hook} rtx TARGET_ALLOCATE_INITIAL_VALUE (rtx @var{hard_reg})\n \n When the initial value of a hard register has been copied in a pseudo"}, {"sha": "2ebd0718618828196cc5407bc4114ab3fd072c66", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -191,6 +191,12 @@ hook_bool_rtx_false (rtx a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_rtx_int_false (rtx a ATTRIBUTE_UNUSED, int code ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n bool\n hook_bool_uintp_uintp_false (unsigned int *a ATTRIBUTE_UNUSED,\n \t\t\t     unsigned int *b ATTRIBUTE_UNUSED)"}, {"sha": "1ca909ae2fd1b22bb02b6ac4331ef9f36592d279", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -35,6 +35,7 @@ extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_IN\n extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       tree);\n extern bool hook_bool_rtx_false (rtx);\n+extern bool hook_bool_rtx_int_false (rtx, int);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);"}, {"sha": "e3e2cdaa501b9efcfa439a0915946365269725ae", "filename": "gcc/jump.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -57,6 +57,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"predict.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n+#include \"target.h\"\n \n /* Optimize jump y; x: ... y: jumpif... x?\n    Don't know if it is worth bothering with.  */\n@@ -1794,15 +1795,7 @@ invert_jump (rtx jump, rtx nlabel, int delete_unused)\n /* Like rtx_equal_p except that it considers two REGs as equal\n    if they renumber to the same value and considers two commutative\n    operations to be the same if the order of the operands has been\n-   reversed.\n-\n-   ??? Addition is not commutative on the PA due to the weird implicit\n-   space register selection rules for memory addresses.  Therefore, we\n-   don't consider a + b == b + a.\n-\n-   We could/should make this test a little tighter.  Possibly only\n-   disabling it on the PA via some backend macro or only disabling this\n-   case when the PLUS is inside a MEM.  */\n+   reversed.  */\n \n int\n rtx_renumbered_equal_p (rtx x, rtx y)\n@@ -1915,10 +1908,8 @@ rtx_renumbered_equal_p (rtx x, rtx y)\n     return 0;\n \n   /* For commutative operations, the RTX match if the operand match in any\n-     order.  Also handle the simple binary and unary cases without a loop.\n-\n-     ??? Don't consider PLUS a commutative operator; see comments above.  */\n-  if (COMMUTATIVE_P (x) && code != PLUS)\n+     order.  Also handle the simple binary and unary cases without a loop.  */\n+  if (targetm.commutative_p (x, UNKNOWN))\n     return ((rtx_renumbered_equal_p (XEXP (x, 0), XEXP (y, 0))\n \t     && rtx_renumbered_equal_p (XEXP (x, 1), XEXP (y, 1)))\n \t    || (rtx_renumbered_equal_p (XEXP (x, 0), XEXP (y, 1))"}, {"sha": "6f8470e4aec52b9b21a4b6e681cdcbd0cb7ddcef", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -352,6 +352,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED hook_bool_bool_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n #define TARGET_CANNOT_COPY_INSN_P NULL\n+#define TARGET_COMMUTATIVE_P hook_bool_rtx_commutative_p\n #define TARGET_DELEGITIMIZE_ADDRESS hook_rtx_rtx_identity\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n #define TARGET_COMP_TYPE_ATTRIBUTES hook_int_tree_tree_1\n@@ -554,6 +555,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED,\t\\\n   TARGET_CANNOT_FORCE_CONST_MEM,\t\t\\\n   TARGET_CANNOT_COPY_INSN_P,\t\t\t\\\n+  TARGET_COMMUTATIVE_P,\t\t\t\t\\\n   TARGET_DELEGITIMIZE_ADDRESS,\t\t\t\\\n   TARGET_FUNCTION_OK_FOR_SIBCALL,\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\"}, {"sha": "1b3aaf0cfc0ed9fdb967a5f029be5601440e274b", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -393,6 +393,9 @@ struct gcc_target\n   /* True if the insn X cannot be duplicated.  */\n   bool (* cannot_copy_insn_p) (rtx);\n \n+  /* True if X is considered to be commutative.  */\n+  bool (* commutative_p) (rtx, int);\n+\n   /* Given an address RTX, undo the effects of LEGITIMIZE_ADDRESS.  */\n   rtx (* delegitimize_address) (rtx);\n "}, {"sha": "4fc6e10a30b38c86369d566f2b083d5fff9a33df", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -411,4 +411,10 @@ default_hidden_stack_protect_fail (void)\n #endif\n }\n \n+bool\n+hook_bool_rtx_commutative_p (rtx x, int outer_code ATTRIBUTE_UNUSED)\n+{\n+  return COMMUTATIVE_P (x);\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "ad526482ff2f5c113d3b4536ca1c58b03a0afa9e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddf681af74e5404974fb47b0b9874de49a3b07d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8ddf681af74e5404974fb47b0b9874de49a3b07d", "patch": "@@ -66,3 +66,4 @@ extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n extern const char *hook_invalid_arg_for_unprototyped_fn\n   (tree, tree, tree);\n+extern bool hook_bool_rtx_commutative_p (rtx, int);"}]}