{"sha": "8851a51161fa471eaaa87c4d950b250178703008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1MWE1MTE2MWZhNDcxZWFhYTg3YzRkOTUwYjI1MDE3ODcwMzAwOA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2018-05-23T14:44:10Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2018-05-23T14:44:10Z"}, "message": "extend.texi: update Global Register Variables section\n\n\t* extend.texi (Global Register Variables): Rewrite the bullet list.\n\tNote that the register is available for allocation. Note that access\n\tvia inline asm must use constraints. Add note about async-signal\n\thandlers. Remove paragraph about automagic register selection.\n\nFrom-SVN: r260610", "tree": {"sha": "86cad335a955cce8ab40d70e8d9fa32794998dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86cad335a955cce8ab40d70e8d9fa32794998dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8851a51161fa471eaaa87c4d950b250178703008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8851a51161fa471eaaa87c4d950b250178703008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8851a51161fa471eaaa87c4d950b250178703008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8851a51161fa471eaaa87c4d950b250178703008/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52388096c29387af5c2ac70f0a86e76bfbae2f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52388096c29387af5c2ac70f0a86e76bfbae2f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52388096c29387af5c2ac70f0a86e76bfbae2f8d"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "5eb348067917d3c37f113820681c7c036a3f1477", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851a51161fa471eaaa87c4d950b250178703008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851a51161fa471eaaa87c4d950b250178703008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8851a51161fa471eaaa87c4d950b250178703008", "patch": "@@ -1,3 +1,10 @@\n+2018-05-23  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* extend.texi (Global Register Variables): Rewrite the bullet list.\n+\tNote that the register is available for allocation. Note that access\n+\tvia inline asm must use constraints. Add note about async-signal\n+\thandlers. Remove paragraph about automagic register selection.\n+\n 2018-05-23  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Remove restriction"}, {"sha": "942548f8bc48a89a42b53d8fbf0724dbf7647b81", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851a51161fa471eaaa87c4d950b250178703008/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851a51161fa471eaaa87c4d950b250178703008/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8851a51161fa471eaaa87c4d950b250178703008", "patch": "@@ -9554,11 +9554,21 @@ After defining a global register variable, for the current compilation\n unit:\n \n @itemize @bullet\n-@item The register is reserved entirely for this use, and will not be \n-allocated for any other purpose.\n-@item The register is not saved and restored by any functions.\n-@item Stores into this register are never deleted even if they appear to be \n-dead, but references may be deleted, moved or simplified.\n+@item If the register is a call-saved register, call ABI is affected:\n+the register will not be restored in function epilogue sequences after\n+the variable has been assigned.  Therefore, functions cannot safely\n+return to callers that assume standard ABI.\n+@item Conversely, if the register is a call-clobbered register, making\n+calls to functions that use standard ABI may lose contents of the variable.\n+Such calls may be created by the compiler even if none are evident in\n+the original program, for example when libgcc functions are used to\n+make up for unavailable instructions.\n+@item Accesses to the variable may be optimized as usual and the register\n+remains available for allocation and use in any computations, provided that\n+observable values of the variable are not affected.\n+@item If the variable is referenced in inline assembly, the type of access\n+must be provided to the compiler via constraints (@pxref{Constraints}).\n+Accesses from basic asms are not supported.\n @end itemize\n \n Note that these points @emph{only} apply to code that is compiled with the\n@@ -9600,7 +9610,10 @@ the comparison function unless the @code{qsort} function itself is rebuilt.\n Similarly, it is not safe to access the global register variables from signal\n handlers or from more than one thread of control. Unless you recompile \n them specially for the task at hand, the system library routines may \n-temporarily use the register for other things.\n+temporarily use the register for other things.  Furthermore, since the register\n+is not reserved exclusively for the variable, accessing it from handlers of\n+asynchronous signals may observe unrelated temporary values residing in the\n+register.\n \n @cindex register variable after @code{longjmp}\n @cindex global register after @code{longjmp}\n@@ -9615,10 +9628,6 @@ should make other arrangements to save the values of the global register\n variables, and to restore them in a @code{longjmp}. This way, the same\n thing happens regardless of what @code{longjmp} does.\n \n-Eventually there may be a way of asking the compiler to choose a register \n-automatically, but first we need to figure out how it should choose and \n-how to enable you to guide the choice.  No solution is evident.\n-\n @node Local Register Variables\n @subsubsection Specifying Registers for Local Variables\n @anchor{Local Reg Vars}"}]}