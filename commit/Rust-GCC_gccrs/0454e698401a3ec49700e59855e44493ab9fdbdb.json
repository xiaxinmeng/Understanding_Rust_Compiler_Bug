{"sha": "0454e698401a3ec49700e59855e44493ab9fdbdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1NGU2OTg0MDFhM2VjNDk3MDBlNTk4NTVlNDQ0OTNhYjlmZGJkYg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2015-05-18T14:38:41Z"}, "committer": {"name": "Alex Velenko", "email": "avelenko@gcc.gnu.org", "date": "2015-05-18T14:38:41Z"}, "message": "arm.md (andsi_not_shiftsi_si_scc): New pattern.\n\ngcc/config\n\n2015-05-18  Alex Velenko  <Alex.Velenko@arm.com>\n\n  \t* arm/arm.md (andsi_not_shiftsi_si_scc): New pattern.\n  \t(andsi_not_shiftsi_si_scc_no_reuse): New pattern.\n\ngcc/testsuite\n\n2015-05-18  Alex Velenko <Alex.Velenko@arm.com>\n\n  \t* gcc.target/arm/bics_1.c : New testcase.\n  \t* gcc.target/arm/bics_2.c : New testcase.\n  \t* gcc.target/arm/bics_3.c : New testcase.\n  \t* gcc.target/arm/bics_4.c : New testcase.\n\nFrom-SVN: r223295", "tree": {"sha": "215a5650df3111f0512228a840f449d017333e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215a5650df3111f0512228a840f449d017333e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0454e698401a3ec49700e59855e44493ab9fdbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0454e698401a3ec49700e59855e44493ab9fdbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0454e698401a3ec49700e59855e44493ab9fdbdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0454e698401a3ec49700e59855e44493ab9fdbdb/comments", "author": null, "committer": null, "parents": [{"sha": "fb05f2e4ddc9ae051cf205eb7eaa0e0e63cecf6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb05f2e4ddc9ae051cf205eb7eaa0e0e63cecf6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb05f2e4ddc9ae051cf205eb7eaa0e0e63cecf6c"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "e82485baa5bf964f52bc971d51ddd864ea324c7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -1,3 +1,8 @@\n+2015-05-18  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/arm/arm.md (andsi_not_shiftsi_si_scc): New pattern.\n+\t(andsi_not_shiftsi_si_scc_no_reuse): New pattern.\n+\n 2015-05-18  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips.c (micromips_globals): New variable."}, {"sha": "191f5e768276f104970c88c8ea9dc15aa026f99c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -2783,6 +2783,55 @@\n \t\t      (const_string \"logic_shift_reg\")))]\n )\n \n+;; Shifted bics pattern used to set up CC status register and not reusing\n+;; bics output.  Pattern restricts Thumb2 shift operand as bics for Thumb2\n+;; does not support shift by register.\n+(define_insn \"andsi_not_shiftsi_si_scc_no_reuse\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n+\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t\t(const_int 0)))\n+   (clobber (match_scratch:SI 4 \"=r\"))]\n+  \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n+  \"bic%.%?\\\\t%4, %3, %1%S0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"shift\" \"1\")\n+   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+\t\t      (const_string \"logic_shift_imm\")\n+\t\t      (const_string \"logic_shift_reg\")))]\n+)\n+\n+;; Same as andsi_not_shiftsi_si_scc_no_reuse, but the bics result is also\n+;; getting reused later.\n+(define_insn \"andsi_not_shiftsi_si_scc\"\n+  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n+\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t\t(const_int 0)))\n+\t(set (match_operand:SI 4 \"s_register_operand\" \"=r\")\n+\t     (and:SI (not:SI (match_op_dup 0\n+\t\t     [(match_dup 1)\n+\t\t      (match_dup 2)]))\n+\t\t     (match_dup 3)))])]\n+  \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n+  \"bic%.%?\\\\t%4, %3, %1%S0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"shift\" \"1\")\n+   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+\t\t      (const_string \"logic_shift_imm\")\n+\t\t      (const_string \"logic_shift_reg\")))]\n+)\n+\n (define_insn \"*andsi_notsi_si_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV"}, {"sha": "8a29d995a4f5a5c742c9c0884cd265aa64fc125b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -1,3 +1,10 @@\n+2015-05-18  Alex Velenko <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/arm/bics_1.c : New testcase.\n+\t* gcc.target/arm/bics_2.c : New testcase.\n+\t* gcc.target/arm/bics_3.c : New testcase.\n+\t* gcc.target/arm/bics_4.c : New testcase.\n+\n 2015-05-18  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* gcc.target/mips/umips-attr.c: New test."}, {"sha": "173eb891d3a4262921c5d240603ddc9028105280", "filename": "gcc/testsuite/gcc.target/arm/bics_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_1.c?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target arm32 } */\n+\n+extern void abort (void);\n+\n+int\n+bics_si_test1 (int a, int b, int c)\n+{\n+  int d = a & ~b;\n+\n+  /* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" 2 } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+bics_si_test2 (int a, int b, int c)\n+{\n+  int d = a & ~(b << 3);\n+\n+  /* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+, .sl \\#3\" 1 } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+\n+  x = bics_si_test1 (29, ~4, 5);\n+  if (x != ((29 & 4) + ~4 + 5))\n+    abort ();\n+\n+  x = bics_si_test1 (5, ~2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+    x = bics_si_test2 (35, ~4, 5);\n+  if (x != ((35 & ~(~4 << 3)) + ~4 + 5))\n+    abort ();\n+\n+  x = bics_si_test2 (96, ~2, 20);\n+  if (x != 116)\n+  abort ();\n+\n+  return 0;\n+}\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "740d7c913f0fe5d5da906c0cb735f18979855f79", "filename": "gcc/testsuite/gcc.target/arm/bics_2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_2.c?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target arm32 } */\n+\n+extern void abort (void);\n+\n+int\n+bics_si_test1 (int a, int b, int c)\n+{\n+  int d = a & ~b;\n+\n+  /* { dg-final { scan-assembler-not \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" } } */\n+  /* { dg-final { scan-assembler-times \"bic\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" 2 } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+bics_si_test2 (int a, int b, int c)\n+{\n+  int d = a & ~(b << 3);\n+\n+  /* { dg-final { scan-assembler-not \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+, .sl \\#3\" } } */\n+  /* { dg-final { scan-assembler \"bic\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+, .sl \\#3\" } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+\n+  x = bics_si_test1 (29, ~4, 5);\n+  if (x != ((29 & 4) + ~4 + 5))\n+    abort ();\n+\n+  x = bics_si_test1 (5, ~2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+  x = bics_si_test2 (35, ~4, 5);\n+  if (x != ((35 & ~(~4 << 3)) + ~4 + 5))\n+    abort ();\n+\n+  x = bics_si_test2 (96, ~2, 20);\n+  if (x != 116)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e2b1c72cfdedb563a02b5c29e212d773f371197a", "filename": "gcc/testsuite/gcc.target/arm/bics_3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_3.c?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target arm32 } */\n+\n+extern void abort (void);\n+\n+int\n+bics_si_test (int a, int b)\n+{\n+  if (a & ~b)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int\n+bics_si_test2 (int a, int b)\n+{\n+  if (a & ~ (b << 2))\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  int a = 5;\n+  int b = 5;\n+  int c = 20;\n+  if (bics_si_test (a, b))\n+    abort ();\n+  if (bics_si_test2 (c, b))\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+, .sl #2\" 1 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8f2faf01a0d9c9a90c091ee8ca69621e8fed3556", "filename": "gcc/testsuite/gcc.target/arm/bics_4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0454e698401a3ec49700e59855e44493ab9fdbdb/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbics_4.c?ref=0454e698401a3ec49700e59855e44493ab9fdbdb", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target arm32 } */\n+\n+extern void abort (void);\n+\n+int\n+bics_si_test1 (int a, int b, int c)\n+{\n+  if ((a & b) == a)\n+    return a;\n+  else\n+    return c;\n+}\n+\n+int\n+bics_si_test2 (int a, int b, int c)\n+{\n+  if ((a & b) == b)\n+    return b;\n+  else\n+    return c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+  x = bics_si_test1 (0xf00d, 0xf11f, 0);\n+  if (x != 0xf00d)\n+    abort ();\n+\n+  x = bics_si_test1 (0xf11f, 0xf00d, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf00d, 0xf11f, 0);\n+  if (x != 0)\n+    abort ();\n+\n+  x = bics_si_test2 (0xf11f, 0xf00d, 0);\n+  if (x != 0xf00d)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bics\\tr\\[0-9\\]+, r\\[0-9\\]+, r\\[0-9\\]+\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}