{"sha": "388fbbd895e72669909173c3003ae65c6483a3c2", "node_id": "C_kwDOANBUbNoAKDM4OGZiYmQ4OTVlNzI2Njk5MDkxNzNjMzAwM2FlNjVjNjQ4M2EzYzI", "commit": {"author": {"name": "Sam Feifer", "email": "sfeifer@redhat.com", "date": "2022-07-29T13:44:48Z"}, "committer": {"name": "Sam Feifer", "email": "sfeifer@redhat.com", "date": "2022-08-01T13:01:53Z"}, "message": "match.pd: Add new division pattern [PR104992]\n\nThis patch fixes a missed optimization in match.pd. It takes the pattern,\nx / y * y == x, and optimizes it to x % y == 0. This produces fewer\ninstructions. This simplification does not happen for complex types.\n\nThis patch also adds tests for the optimization rule.\n\nBootstrapped/regtested on x86_64-pc-linux-gnu.\n\n\tPR tree-optimization/104992\n\ngcc/ChangeLog:\n\n\t* match.pd (x / y * y == x): New simplification.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/pr104992-1.C: New test.\n\t* gcc.dg/pr104992.c: New test.", "tree": {"sha": "6f06ba7584c2bfc8a744d1fd3fddb270e450e66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f06ba7584c2bfc8a744d1fd3fddb270e450e66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/388fbbd895e72669909173c3003ae65c6483a3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388fbbd895e72669909173c3003ae65c6483a3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/388fbbd895e72669909173c3003ae65c6483a3c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388fbbd895e72669909173c3003ae65c6483a3c2/comments", "author": {"login": "sfeifer", "id": 64805811, "node_id": "MDQ6VXNlcjY0ODA1ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/64805811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfeifer", "html_url": "https://github.com/sfeifer", "followers_url": "https://api.github.com/users/sfeifer/followers", "following_url": "https://api.github.com/users/sfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/sfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfeifer/subscriptions", "organizations_url": "https://api.github.com/users/sfeifer/orgs", "repos_url": "https://api.github.com/users/sfeifer/repos", "events_url": "https://api.github.com/users/sfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/sfeifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfeifer", "id": 64805811, "node_id": "MDQ6VXNlcjY0ODA1ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/64805811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfeifer", "html_url": "https://github.com/sfeifer", "followers_url": "https://api.github.com/users/sfeifer/followers", "following_url": "https://api.github.com/users/sfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/sfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfeifer/subscriptions", "organizations_url": "https://api.github.com/users/sfeifer/orgs", "repos_url": "https://api.github.com/users/sfeifer/repos", "events_url": "https://api.github.com/users/sfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/sfeifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f068a9b3332a2179dfc807cf9138f691d77461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f068a9b3332a2179dfc807cf9138f691d77461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f068a9b3332a2179dfc807cf9138f691d77461"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "562138a8034bffddd3b4feae8b10874eaba89ff2", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=388fbbd895e72669909173c3003ae65c6483a3c2", "patch": "@@ -3982,6 +3982,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (plus:c (mult:c (div @0 @1) @1) (mod @0 @1))\n    @0))\n \n+/* x / y * y == x -> x % y == 0.  */\n+(simplify\n+  (eq:c (mult:c (trunc_div:s @0 @1) @1) @0)\n+  (if (TREE_CODE (TREE_TYPE (@0)) != COMPLEX_TYPE)\n+    (eq (trunc_mod @0 @1) { build_zero_cst (TREE_TYPE (@0)); })))\n+\n /* ((X /[ex] A) +- B) * A  -->  X +- A * B.  */\n (for op (plus minus)\n  (simplify"}, {"sha": "f5696b245ac8db757bcb68e44a8bd6337c19be9c", "filename": "gcc/testsuite/g++.dg/pr104992-1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104992-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104992-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104992-1.C?ref=388fbbd895e72669909173c3003ae65c6483a3c2", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/104992 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\"} */\n+\n+#include \"../gcc.dg/pr104992.c\"\n+\n+int main () {\n+\n+    /* Should be true.  */\n+    if (!foo(6, 3)\n+        || !bar(12, 2)\n+        || !baz(34, 17)\n+        || !qux(50, 10)\n+        || !fred(16, 8)\n+        || !baz(-9, 3)\n+        || !baz(9, -3)\n+        || !baz(-9, -3)\n+        ) {\n+            __builtin_abort();\n+         }\n+    \n+    /* Should be false.  */\n+    if (foo(5, 30)\n+        || bar(72, 27)\n+        || baz(42, 15)) {\n+            __builtin_abort();\n+        }\n+    \n+    return 0;\n+}"}, {"sha": "b9d91a13ad8bf168595666159b2016dfc7aedf62", "filename": "gcc/testsuite/gcc.dg/pr104992.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104992.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388fbbd895e72669909173c3003ae65c6483a3c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104992.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104992.c?ref=388fbbd895e72669909173c3003ae65c6483a3c2", "patch": "@@ -0,0 +1,57 @@\n+/* PR tree-optimization/104992 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(int))))\n+\n+/* Form from PR.  */\n+__attribute__((noipa)) unsigned foo(unsigned x, unsigned y)\n+{\n+    return x / y * y == x;\n+}\n+\n+__attribute__((noipa)) unsigned bar(unsigned x, unsigned y) {\n+    return x == x / y * y;\n+}\n+\n+/* Signed test case.  */\n+__attribute__((noipa)) unsigned baz (int x, int y) {\n+    return x / y * y == x;\n+}\n+\n+/* Changed order.  */\n+__attribute__((noipa)) unsigned qux (unsigned x, unsigned y) {\n+    return y * (x / y) == x;\n+}\n+\n+/* Test for forward propogation.  */\n+__attribute__((noipa)) unsigned corge(unsigned x, unsigned y) {\n+    int z = x / y;\n+    int q = z * y;\n+    return q == x; \n+}\n+\n+/* Test vector case.  */\n+__attribute__((noipa)) vector int thud(vector int x, vector int y) {\n+    return x / y * y == x;\n+}\n+\n+/* Complex type should not simplify because mod is different.  */\n+__attribute__((noipa)) int goo(_Complex int x, _Complex int y)\n+{\n+    _Complex int z = x / y;\n+    _Complex int q = z * y;\n+    return q == x; \n+}\n+\n+/* Wrong order.  */\n+__attribute__((noipa)) unsigned fred (unsigned x, unsigned y) {\n+    return y * x / y == x;\n+}\n+\n+/* Wrong pattern.  */\n+__attribute__((noipa)) unsigned waldo (unsigned x, unsigned y, unsigned z) {\n+    return x / y * z == x;\n+}\n+\n+/* { dg-final {scan-tree-dump-times \" % \" 9 \"optimized\" } } */"}]}