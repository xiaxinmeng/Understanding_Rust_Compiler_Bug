{"sha": "ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjZDBiNTdmYThkMWJhNzJkMzlhOTE2Mjk0MDFiMmRkNDU2NGJmMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-12T13:56:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-12T13:56:19Z"}, "message": "calls.c (expand_call): Do NO_DEFER_POP unconditionally once stack is propertly aligned...\n\n\t* calls.c (expand_call): Do NO_DEFER_POP unconditionally once\n\tstack is propertly aligned; add sanity checking for aligned\n\tstack pointer.\n\t(expand_library_call_value_1): Add sanity checking for aligned\n\tstack pointer.\n\nFrom-SVN: r33106", "tree": {"sha": "3bc4dc8d8437c72809b666d7fdfd18eaa0c86299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bc4dc8d8437c72809b666d7fdfd18eaa0c86299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1/comments", "author": null, "committer": null, "parents": [{"sha": "a4d5044f41a63f010da507a32e16e2a4f8456a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d5044f41a63f010da507a32e16e2a4f8456a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d5044f41a63f010da507a32e16e2a4f8456a90"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "c36a8d31f37bc71ee26fd278e9e0cc0b84530f96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "patch": "@@ -1,3 +1,11 @@\n+Wed Apr 12 15:54:11 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* calls.c (expand_call): Do NO_DEFER_POP unconditionally once\n+\tstack is propertly aligned; add sanity checking for aligned\n+\tstack pointer.\n+\t(expand_library_call_value_1): Add sanity checking for aligned\n+\tstack pointer.\n+\n Wed Apr 12 07:51:54 2000  Catherine Moore  <clm@cygnus.com>\n  \n         * calls.c (emit_library_call_value_1): Change 3rd arg to"}, {"sha": "611eff0695536db9ecfc325c98f58f7195a79f2f", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ebcd0b57fa8d1ba72d39a91629401b2dd4564bf1", "patch": "@@ -2671,10 +2671,10 @@ expand_call (exp, target, ignore)\n \t  else if (argblock == 0)\n \t    anti_adjust_stack (GEN_INT (args_size.constant\n \t\t\t\t\t- unadjusted_args_size));\n-\t  /* Now that the stack is properly aligned, pops can't safely\n-\t     be deferred during the evaluation of the arguments.  */\n-\t  NO_DEFER_POP;\n \t}\n+      /* Now that the stack is properly aligned, pops can't safely\n+\t be deferred during the evaluation of the arguments.  */\n+      NO_DEFER_POP;\n #endif\n \n       /* Don't try to defer pops if preallocating, not even from the first arg,\n@@ -2800,6 +2800,12 @@ expand_call (exp, target, ignore)\n       /* All arguments and registers used for the call must be set up by\n \t now!  */\n \n+#ifdef PREFERRED_STACK_BOUNDARY\n+      /* Stack must to be properly aligned now.  */\n+      if (stack_pointer_delta & (preferred_stack_boundary / BITS_PER_UNIT - 1))\n+\tabort();\n+#endif\n+\n       /* Generate the actual call instruction.  */\n       emit_call_1 (funexp, fndecl, funtype, unadjusted_args_size,\n \t\t   args_size.constant, struct_value_size,\n@@ -3692,6 +3698,12 @@ emit_library_call_value_1 (retval, orgfun, value, no_queue, outmode, nargs, p)\n      cse'ing of library calls could delete a call and leave the pop.  */\n   NO_DEFER_POP;\n \n+#ifdef PREFERRED_STACK_BOUNDARY\n+  /* Stack must to be properly aligned now.  */\n+  if (stack_pointer_delta & (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT - 1))\n+    abort();\n+#endif\n+\n   /* We pass the old value of inhibit_defer_pop + 1 to emit_call_1, which\n      will set inhibit_defer_pop to that value.  */\n   /* The return type is needed to decide how many bytes the function pops."}]}