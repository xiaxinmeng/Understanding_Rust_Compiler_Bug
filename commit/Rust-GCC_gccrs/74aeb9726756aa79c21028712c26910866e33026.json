{"sha": "74aeb9726756aa79c21028712c26910866e33026", "node_id": "C_kwDOANBUbNoAKDc0YWViOTcyNjc1NmFhNzljMjEwMjg3MTJjMjY5MTA4NjZlMzMwMjY", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-14T16:09:06Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-14T17:20:11Z"}, "message": "rs6000: Some builtins require IBM-128 long double format (PR103623)\n\n2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\tPR target/103623\n\t* config/rs6000/rs6000-builtin-new.def (__builtin_pack_longdouble): Add\n\tibmld attribute.\n\t(__builtin_unpack_longdouble): Likewise.\n\t* config/rs6000/rs6000-call.c (rs6000_expand_new_builtin): Add special\n\thandling for ibmld attribute.\n\t* config/rs6000/rs6000-gen-builtins.c (attrinfo): Add isibmld.\n\t(parse_bif_attrs): Handle ibmld.\n\t(write_decls): Likewise.\n\t(write_bif_static_init): Likewise.", "tree": {"sha": "404713a5185c5a9a177a21a137887572c1b75406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/404713a5185c5a9a177a21a137887572c1b75406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74aeb9726756aa79c21028712c26910866e33026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aeb9726756aa79c21028712c26910866e33026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74aeb9726756aa79c21028712c26910866e33026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aeb9726756aa79c21028712c26910866e33026/comments", "author": null, "committer": null, "parents": [{"sha": "3736837806fdb26daa51300bee1554bef89db9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3736837806fdb26daa51300bee1554bef89db9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3736837806fdb26daa51300bee1554bef89db9fe"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "f7f5d2c32a41fa12bcadefae19f0681662b31e2a", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=74aeb9726756aa79c21028712c26910866e33026", "patch": "@@ -137,6 +137,7 @@\n ;   lxvrse   Needs special handling for load-rightmost, sign-extended\n ;   lxvrze   Needs special handling for load-rightmost, zero-extended\n ;   endian   Needs special handling for endianness\n+;   ibmld    Restrict usage to the case when TFmode is IBM-128\n ;\n ; Each attribute corresponds to extra processing required when\n ; the built-in is expanded.  All such special processing should\n@@ -215,13 +216,10 @@\n   double __builtin_mffsl ();\n     MFFSL rs6000_mffsl {}\n \n-; This thing really assumes long double == __ibm128, and I'm told it has\n-; been used as such within libgcc.  Given that __builtin_pack_ibm128\n-; exists for the same purpose, this should really not be used at all.\n-; TODO: Consider adding special handling for this to warn whenever\n-; long double is not __ibm128.\n+; This is redundant with __builtin_pack_ibm128, as it requires long\n+; double to be __ibm128.  Should probably be deprecated.\n   const long double __builtin_pack_longdouble (double, double);\n-    PACK_TF packtf {}\n+    PACK_TF packtf {ibmld}\n \n   unsigned long __builtin_ppc_mftb ();\n     MFTB rs6000_mftb_di {32bit}\n@@ -244,9 +242,10 @@\n   const double __builtin_unpack_ibm128 (__ibm128, const int<1>);\n     UNPACK_IF unpackif {}\n \n-; See above comments for __builtin_pack_longdouble.\n+; This is redundant with __builtin_unpack_ibm128, as it requires long\n+; double to be __ibm128.  Should probably be deprecated.\n   const double __builtin_unpack_longdouble (long double, const int<1>);\n-    UNPACK_TF unpacktf {}\n+    UNPACK_TF unpacktf {ibmld}\n \n \n ; Builtins that have been around just about forever, but not quite."}, {"sha": "3a43a768c5c92f8c5e074fd5a08ca392e06111a5", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=74aeb9726756aa79c21028712c26910866e33026", "patch": "@@ -15741,6 +15741,13 @@ rs6000_expand_new_builtin (tree exp, rtx target,\n       return const0_rtx;\n     }\n \n+  if (bif_is_ibmld (*bifaddr) && !FLOAT128_2REG_P (TFmode))\n+    {\n+      error (\"%<%s%> requires %<long double%> to be IBM 128-bit format\",\n+\t     bifaddr->bifname);\n+      return const0_rtx;\n+    }\n+\n   if (bif_is_cpu (*bifaddr))\n     return new_cpu_expand_builtin (fcode, exp, target);\n "}, {"sha": "856770c1659775cc88da65f6c2f66365d46431d9", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aeb9726756aa79c21028712c26910866e33026/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=74aeb9726756aa79c21028712c26910866e33026", "patch": "@@ -92,6 +92,7 @@ along with GCC; see the file COPYING3.  If not see\n      lxvrse   Needs special handling for load-rightmost, sign-extended\n      lxvrze   Needs special handling for load-rightmost, zero-extended\n      endian   Needs special handling for endianness\n+     ibmld    Restrict usage to the case when TFmode is IBM-128\n \n    An example stanza might look like this:\n \n@@ -390,6 +391,7 @@ struct attrinfo\n   bool islxvrse;\n   bool islxvrze;\n   bool isendian;\n+  bool isibmld;\n };\n \n /* Fields associated with a function prototype (bif or overload).  */\n@@ -1435,6 +1437,8 @@ parse_bif_attrs (attrinfo *attrptr)\n \t  attrptr->islxvrze = 1;\n \telse if (!strcmp (attrname, \"endian\"))\n \t  attrptr->isendian = 1;\n+\telse if (!strcmp (attrname, \"ibmld\"))\n+\t  attrptr->isibmld = 1;\n \telse\n \t  {\n \t    diag (oldpos, \"unknown attribute.\\n\");\n@@ -1468,14 +1472,14 @@ parse_bif_attrs (attrinfo *attrptr)\n \t\"ldvec = %d, stvec = %d, reve = %d, pred = %d, htm = %d, \"\n \t\"htmspr = %d, htmcr = %d, mma = %d, quad = %d, pair = %d, \"\n \t\"mmaint = %d, no32bit = %d, 32bit = %d, cpu = %d, ldstmask = %d, \"\n-\t\"lxvrse = %d, lxvrze = %d, endian = %d.\\n\",\n+\t\"lxvrse = %d, lxvrze = %d, endian = %d, ibmdld= %d.\\n\",\n \tattrptr->isinit, attrptr->isset, attrptr->isextract,\n \tattrptr->isnosoft, attrptr->isldvec, attrptr->isstvec,\n \tattrptr->isreve, attrptr->ispred, attrptr->ishtm, attrptr->ishtmspr,\n \tattrptr->ishtmcr, attrptr->ismma, attrptr->isquad, attrptr->ispair,\n \tattrptr->ismmaint, attrptr->isno32bit, attrptr->is32bit,\n \tattrptr->iscpu, attrptr->isldstmask, attrptr->islxvrse,\n-\tattrptr->islxvrze, attrptr->isendian);\n+\tattrptr->islxvrze, attrptr->isendian, attrptr->isibmld);\n #endif\n \n   return PC_OK;\n@@ -2289,6 +2293,7 @@ write_decls (void)\n   fprintf (header_file, \"#define bif_lxvrse_bit\\t\\t(0x00080000)\\n\");\n   fprintf (header_file, \"#define bif_lxvrze_bit\\t\\t(0x00100000)\\n\");\n   fprintf (header_file, \"#define bif_endian_bit\\t\\t(0x00200000)\\n\");\n+  fprintf (header_file, \"#define bif_ibmld_bit\\t\\t(0x00400000)\\n\");\n   fprintf (header_file, \"\\n\");\n   fprintf (header_file,\n \t   \"#define bif_is_init(x)\\t\\t((x).bifattrs & bif_init_bit)\\n\");\n@@ -2334,6 +2339,8 @@ write_decls (void)\n \t   \"#define bif_is_lxvrze(x)\\t((x).bifattrs & bif_lxvrze_bit)\\n\");\n   fprintf (header_file,\n \t   \"#define bif_is_endian(x)\\t((x).bifattrs & bif_endian_bit)\\n\");\n+  fprintf (header_file,\n+\t   \"#define bif_is_ibmld(x)\\t((x).bifattrs & bif_ibmld_bit)\\n\");\n   fprintf (header_file, \"\\n\");\n \n   /* #### Note that the _x is added for now to avoid conflict with\n@@ -2568,6 +2575,8 @@ write_bif_static_init (void)\n \tfprintf (init_file, \" | bif_lxvrze_bit\");\n       if (bifp->attrs.isendian)\n \tfprintf (init_file, \" | bif_endian_bit\");\n+      if (bifp->attrs.isibmld)\n+\tfprintf (init_file, \" | bif_ibmld_bit\");\n       fprintf (init_file, \",\\n\");\n       fprintf (init_file, \"      /* restr_opnd */\\t{%d, %d, %d},\\n\",\n \t       bifp->proto.restr_opnd[0], bifp->proto.restr_opnd[1],"}]}