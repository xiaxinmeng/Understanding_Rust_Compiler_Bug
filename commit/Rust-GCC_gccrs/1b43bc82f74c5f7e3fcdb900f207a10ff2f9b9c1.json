{"sha": "1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0M2JjODJmNzRjNWY3ZTNmY2RiOTAwZjIwN2ExMGZmMmY5YjljMQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-24T21:53:38Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-24T21:53:38Z"}, "message": "Consolidate some sparc insn patterns using \"enabled\".\n\n\t* config/sparc/sparc.md (cpu_feature, enabled): New attributes.\n\t(*movsi_insn_novis3, *movsi_insn_vis3): Consolidate into one pattern\n\tcalled *movsi_insn.\n\t(*movdi_insn_sp32_v9_novis3, *movdi_insn_sp32_v9_vis3): Consolidate\n\tinto *movdi_insn_sp32.\n\t(*movdi_insn_sp64_novis3, *movdi_insn_sp64_vis3): Consolidate into\n\tone pattern called *movdi_insn_sp64.\n\t(*movsf_insn_novis3, *movsf_insn_vis3, *movsf_insn_no_fpu):\n\tConsolidate into one pattern called *movsf_insn.\n\t(*movdf_insn_sp32_no_fpu, *movdf_insn_sp32_v9_novis3,\n\t*movdf_insn_sp32_v9_vis3, *movdf_insn_sp32_v9_no_fpu): Consolidate\n\tinto *movdf_insn_sp32.\n\t(*movdf_insn_sp64_novis3, *movdf_insn_sp64_vis3,\n\t*movdf_insn_sp64_no_fpu): Consolidate into one pattern called\n\t*movdf_insn_sp64.\n\t(*zero_extendsidi2_insn_sp64_novis3,\n\t*zero_extendsidi2_insn_sp64_vis3): Consolidate into one pattern\n\tcalled *zero_extendsidi2_insn_sp64.\n\t(*sign_extendsidi2_insn_novis3, *sign_extendsidi2_insn_vis3):\n\tConsolidate into one pattern named *sign_extendsidi2_insn.\n\t(*mov<VM32:mode>_insn_novis3, *mov<VM32:mode>_insn_vis3):\n\tConsolidate into one pattern named *mov<VM32:mode>_insn.\n\t(*mov<VM64:mode>_insn_sp64_novis3,\n\t*mov<VM64:mode>_insn_sp64_novis3): Consolidate into one pattern\n\tnamed *mov<VM64:mode>_insn_sp64.\n\t(*mov<VM64:mode>_insn_sp32_novis3,\n\t*mov<VM64:mode>_insn_sp32_vis3): Consolidate into one pattern\n\tnamed *mov<VM64:mode>_insn_sp32.\n\nFrom-SVN: r180407", "tree": {"sha": "aae42d85169f2730bc23c315e4d34c7f5702e3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae42d85169f2730bc23c315e4d34c7f5702e3e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c5bc77d7fc8ff4a9155bd2e1864ffd820e5c46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5bc77d7fc8ff4a9155bd2e1864ffd820e5c46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5bc77d7fc8ff4a9155bd2e1864ffd820e5c46c"}], "stats": {"total": 519, "additions": 89, "deletions": 430}, "files": [{"sha": "1ccb1893b26ae621ca3227d5a590a96943acae9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "patch": "@@ -1,3 +1,34 @@\n+2011-10-24  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (cpu_feature, enabled): New attributes.\n+\t(*movsi_insn_novis3, *movsi_insn_vis3): Consolidate into one pattern\n+\tcalled *movsi_insn.\n+\t(*movdi_insn_sp32_v9_novis3, *movdi_insn_sp32_v9_vis3): Consolidate\n+\tinto *movdi_insn_sp32.\n+\t(*movdi_insn_sp64_novis3, *movdi_insn_sp64_vis3): Consolidate into\n+\tone pattern called *movdi_insn_sp64.\n+\t(*movsf_insn_novis3, *movsf_insn_vis3, *movsf_insn_no_fpu):\n+\tConsolidate into one pattern called *movsf_insn.\n+\t(*movdf_insn_sp32_no_fpu, *movdf_insn_sp32_v9_novis3,\n+\t*movdf_insn_sp32_v9_vis3, *movdf_insn_sp32_v9_no_fpu): Consolidate\n+\tinto *movdf_insn_sp32.\n+\t(*movdf_insn_sp64_novis3, *movdf_insn_sp64_vis3,\n+\t*movdf_insn_sp64_no_fpu): Consolidate into one pattern called\n+\t*movdf_insn_sp64.\n+\t(*zero_extendsidi2_insn_sp64_novis3,\n+\t*zero_extendsidi2_insn_sp64_vis3): Consolidate into one pattern\n+\tcalled *zero_extendsidi2_insn_sp64.\n+\t(*sign_extendsidi2_insn_novis3, *sign_extendsidi2_insn_vis3):\n+\tConsolidate into one pattern named *sign_extendsidi2_insn.\n+\t(*mov<VM32:mode>_insn_novis3, *mov<VM32:mode>_insn_vis3):\n+\tConsolidate into one pattern named *mov<VM32:mode>_insn.\n+\t(*mov<VM64:mode>_insn_sp64_novis3,\n+\t*mov<VM64:mode>_insn_sp64_novis3): Consolidate into one pattern\n+\tnamed *mov<VM64:mode>_insn_sp64.\n+\t(*mov<VM64:mode>_insn_sp32_novis3,\n+\t*mov<VM64:mode>_insn_sp32_vis3): Consolidate into one pattern\n+\tnamed *mov<VM64:mode>_insn_sp32.\n+\n 2011-10-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* tree-ssa-strlen.c (get_string_length): Change assertion to STPCPY."}, {"sha": "a2a49df942c65d439231273a2bba96610172ed2b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 58, "deletions": 430, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1b43bc82f74c5f7e3fcdb900f207a10ff2f9b9c1", "patch": "@@ -240,6 +240,17 @@\n \t (symbol_ref \"TARGET_SPARCLET\") (const_string \"sparclet\")]\n \t(const_string \"v7\"))))\n \n+(define_attr \"cpu_feature\" \"none,fpu,fpunotv9,v9,vis,vis3\" (const_string \"none\"))\n+\n+(define_attr \"enabled\" \"\"\n+  (cond [(eq_attr \"cpu_feature\" \"none\") (const_int 1)\n+         (eq_attr \"cpu_feature\" \"fpu\") (symbol_ref \"TARGET_FPU\")\n+\t (eq_attr \"cpu_feature\" \"fpunotv9\") (symbol_ref \"TARGET_FPU && ! TARGET_V9\")\n+         (eq_attr \"cpu_feature\" \"v9\") (symbol_ref \"TARGET_V9\")\n+         (eq_attr \"cpu_feature\" \"vis\") (symbol_ref \"TARGET_VIS\")\n+         (eq_attr \"cpu_feature\" \"vis3\") (symbol_ref \"TARGET_VIS3\")]\n+        (const_int 0)))\n+\n ;; Insn type.\n (define_attr \"type\"\n   \"ialu,compare,shift,\n@@ -1312,30 +1323,11 @@\n     DONE;\n })\n \n-(define_insn \"*movsi_insn_novis3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,!f,!f,!m,d,d\")\n-\t(match_operand:SI 1 \"input_operand\"   \"rI,K,m,rJ,f,m,f,J,P\"))]\n-  \"(! TARGET_VIS3\n-    && (register_operand (operands[0], SImode)\n-        || register_or_zero_or_all_ones_operand (operands[1], SImode)))\"\n-  \"@\n-   mov\\t%1, %0\n-   sethi\\t%%hi(%a1), %0\n-   ld\\t%1, %0\n-   st\\t%r1, %0\n-   fmovs\\t%1, %0\n-   ld\\t%1, %0\n-   st\\t%1, %0\n-   fzeros\\t%0\n-   fones\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga,fga\")])\n-\n-(define_insn \"*movsi_insn_vis3\"\n+(define_insn \"*movsi_insn\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*f,*f,*f, m,d,d\")\n \t(match_operand:SI 1 \"input_operand\"        \"rI,K,m,rJ,*f, r, f, m,*f,J,P\"))]\n-  \"(TARGET_VIS3\n-    && (register_operand (operands[0], SImode)\n-        || register_or_zero_or_all_ones_operand (operands[1], SImode)))\"\n+  \"register_operand (operands[0], SImode)\n+   || register_or_zero_or_all_ones_operand (operands[1], SImode)\"\n   \"@\n    mov\\t%1, %0\n    sethi\\t%%hi(%a1), %0\n@@ -1348,7 +1340,8 @@\n    st\\t%1, %0\n    fzeros\\t%0\n    fones\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,*,*,fpmove,fpload,fpstore,fga,fga\")])\n+  [(set_attr \"type\" \"*,*,load,store,*,*,fpmove,fpload,fpstore,fga,fga\")\n+   (set_attr \"cpu_feature\" \"*,*,*,*,vis3,vis3,*,*,*,vis,vis\")])\n \n (define_insn \"*movsi_lo_sum\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1485,68 +1478,10 @@\n \n (define_insn \"*movdi_insn_sp32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=o,T,U,o,r,r,r,?T,?f,?f,?o,?f\")\n+\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?*f,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,b,b\")\n         (match_operand:DI 1 \"input_operand\"\n-\t\t\t\t\" J,U,T,r,o,i,r, f, T, o, f, f\"))]\n-  \"! TARGET_V9\n-   && (register_operand (operands[0], DImode)\n-       || register_or_zero_operand (operands[1], DImode))\"\n-  \"@\n-   #\n-   std\\t%1, %0\n-   ldd\\t%1, %0\n-   #\n-   #\n-   #\n-   #\n-   std\\t%1, %0\n-   ldd\\t%1, %0\n-   #\n-   #\n-   #\"\n-  [(set_attr \"type\" \"store,store,load,*,*,*,*,fpstore,fpload,*,*,*\")\n-   (set_attr \"length\" \"2,*,*,2,2,2,2,*,*,2,2,2\")])\n-\n-(define_insn \"*movdi_insn_sp32_v9_novis3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?f,?f,?o,?e,?e,?W,b,b\")\n-        (match_operand:DI 1 \"input_operand\"\n-\t\t\t\t\t\" J,J,U,T,r,o,i,r, f, T, o, f, e, W, e,J,P\"))]\n+\t\t\t\t\t\" J,J,U,T,r,o,i,r,*f,  T,  o,*f, *e, *e,?*f,  r,  W,*e,J,P\"))]\n   \"! TARGET_ARCH64\n-   && TARGET_V9\n-   && ! TARGET_VIS3\n-   && (register_operand (operands[0], DImode)\n-       || register_or_zero_operand (operands[1], DImode))\"\n-  \"@\n-   stx\\t%%g0, %0\n-   #\n-   std\\t%1, %0\n-   ldd\\t%1, %0\n-   #\n-   #\n-   #\n-   #\n-   std\\t%1, %0\n-   ldd\\t%1, %0\n-   #\n-   #\n-   fmovd\\\\t%1, %0\n-   ldd\\\\t%1, %0\n-   std\\\\t%1, %0\n-   fzero\\t%0\n-   fone\\t%0\"\n-  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,fpmove,fpload,fpstore,fga,fga\")\n-   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,*,*,*,*,*\")\n-   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,double,double\")])\n-\n-(define_insn \"*movdi_insn_sp32_v9_vis3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?*f,?*f,?o,?*e,  r,?*f,?*e,?W,b,b\")\n-        (match_operand:DI 1 \"input_operand\"\n-\t\t\t\t\t\" J,J,U,T,r,o,i,r,*f,  T,  o,*f, *e,?*f,  r,  W,*e,J,P\"))]\n-  \"! TARGET_ARCH64\n-   && TARGET_V9\n-   && TARGET_VIS3\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_operand (operands[1], DImode))\"\n   \"@\n@@ -1565,39 +1500,20 @@\n    fmovd\\t%1, %0\n    #\n    #\n+   #\n    ldd\\t%1, %0\n    std\\t%1, %0\n    fzero\\t%0\n    fone\\t%0\"\n-  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,*,*,fpmove,fpload,fpstore,fga,fga\")\n-   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,*,2,2,*,*,*,*\")\n-   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,*,*,double,double\")])\n-\n-(define_insn \"*movdi_insn_sp64_novis3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,?e,?e,?W,b,b\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,N,m,rJ,e,W,e,J,P\"))]\n-  \"TARGET_ARCH64\n-   && ! TARGET_VIS3\n-   && (register_operand (operands[0], DImode)\n-       || register_or_zero_or_all_ones_operand (operands[1], DImode))\"\n-  \"@\n-   mov\\t%1, %0\n-   sethi\\t%%hi(%a1), %0\n-   ldx\\t%1, %0\n-   stx\\t%r1, %0\n-   fmovd\\t%1, %0\n-   ldd\\t%1, %0\n-   std\\t%1, %0\n-   fzero\\t%0\n-   fone\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga,fga\")\n-   (set_attr \"fptype\" \"*,*,*,*,double,*,*,double,double\")])\n+  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,fpmove,*,*,*,fpload,fpstore,fga,fga\")\n+   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,*,2,2,2,*,*,*,*\")\n+   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,*,*,*,double,double\")\n+   (set_attr \"cpu_feature\" \"v9,*,*,*,*,*,*,*,fpu,fpu,fpu,fpu,v9,fpunotv9,vis3,vis3,fpu,fpu,vis,vis\")])\n \n-(define_insn \"*movdi_insn_sp64_vis3\"\n+(define_insn \"*movdi_insn_sp64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*e,?*e,?*e,?W,b,b\")\n         (match_operand:DI 1 \"input_operand\"        \"rI,N,m,rJ,*e, r, *e,  W,*e,J,P\"))]\n   \"TARGET_ARCH64\n-   && TARGET_VIS3\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_or_all_ones_operand (operands[1], DImode))\"\n   \"@\n@@ -1613,7 +1529,8 @@\n    fzero\\t%0\n    fone\\t%0\"\n   [(set_attr \"type\" \"*,*,load,store,*,*,fpmove,fpload,fpstore,fga,fga\")\n-   (set_attr \"fptype\" \"*,*,*,*,*,*,double,*,*,double,double\")])\n+   (set_attr \"fptype\" \"*,*,*,*,*,*,double,*,*,double,double\")\n+   (set_attr \"cpu_feature\" \"*,*,*,*,vis3,vis3,*,*,*,vis,vis\")])\n \n (define_expand \"movdi_pic_label_ref\"\n   [(set (match_dup 3) (high:DI\n@@ -2012,60 +1929,11 @@\n     DONE;\n })\n \n-(define_insn \"*movsf_insn_novis3\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=d, d,f,  *r,*r,*r,f,*r,m,   m\")\n-\t(match_operand:SF 1 \"input_operand\"        \"GY,ZC,f,*rRY, Q, S,m, m,f,*rGY\"))]\n-  \"TARGET_FPU\n-   && ! TARGET_VIS3\n-   && (register_operand (operands[0], SFmode)\n-       || register_or_zero_or_all_ones_operand (operands[1], SFmode))\"\n-{\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (which_alternative == 3\n-          || which_alternative == 4\n-          || which_alternative == 5))\n-    {\n-      REAL_VALUE_TYPE r;\n-      long i;\n-\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n-      operands[1] = GEN_INT (i);\n-    }\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"fzeros\\t%0\";\n-    case 1:\n-      return \"fones\\t%0\";\n-    case 2:\n-      return \"fmovs\\t%1, %0\";\n-    case 3:\n-      return \"mov\\t%1, %0\";\n-    case 4:\n-      return \"sethi\\t%%hi(%a1), %0\";\n-    case 5:\n-      return \"#\";\n-    case 6:\n-    case 7:\n-      return \"ld\\t%1, %0\";\n-    case 8:\n-    case 9:\n-      return \"st\\t%r1, %0\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,fpload,load,fpstore,store\")])\n-\n-(define_insn \"*movsf_insn_vis3\"\n+(define_insn \"*movsf_insn\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=d, d,f,  *r,*r,*r,*r, f, f,*r, m,   m\")\n \t(match_operand:SF 1 \"input_operand\"        \"GY,ZC,f,*rRY, Q, S, f,*r, m, m, f,*rGY\"))]\n-  \"TARGET_FPU\n-   && TARGET_VIS3\n-   && (register_operand (operands[0], SFmode)\n-       || register_or_zero_or_all_ones_operand (operands[1], SFmode))\"\n+  \"(register_operand (operands[0], SFmode)\n+    || register_or_zero_or_all_ones_operand (operands[1], SFmode))\"\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && (which_alternative == 3\n@@ -2108,49 +1976,8 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,*,*,fpload,load,fpstore,store\")])\n-\n-;; Exactly the same as above, except that all `f' cases are deleted.\n-;; This is necessary to prevent reload from ever trying to use a `f' reg\n-;; when -mno-fpu.\n-\n-(define_insn \"*movsf_insn_no_fpu\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r,r,m\")\n-\t(match_operand:SF 1 \"input_operand\"    \"rR,Q,S,m,rG\"))]\n-  \"! TARGET_FPU\n-   && (register_operand (operands[0], SFmode)\n-       || register_or_zero_operand (operands[1], SFmode))\"\n-{\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (which_alternative == 0\n-          || which_alternative == 1\n-          || which_alternative == 2))\n-    {\n-      REAL_VALUE_TYPE r;\n-      long i;\n-\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n-      operands[1] = GEN_INT (i);\n-    }\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"mov\\t%1, %0\";\n-    case 1:\n-      return \"sethi\\t%%hi(%a1), %0\";\n-    case 2:\n-      return \"#\";\n-    case 3:\n-      return \"ld\\t%1, %0\";\n-    case 4:\n-      return \"st\\t%r1, %0\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"*,*,*,load,store\")])\n+  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,*,*,fpload,load,fpstore,store\")\n+   (set_attr \"cpu_feature\" \"vis,vis,fpu,*,*,*,vis3,vis3,fpu,*,fpu,*\")])\n \n ;; The following 3 patterns build SFmode constants in integer registers.\n \n@@ -2199,84 +2026,18 @@\n     DONE;\n })\n \n-;; Be careful, fmovd does not exist when !v9.\n (define_insn \"*movdf_insn_sp32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,W,U,T,o,e,  *r, o,  e,o\")\n-\t(match_operand:DF 1 \"input_operand\"       \"W#F,e,T,U,G,e,*rFo,*r,o#F,e\"))]\n-  \"TARGET_FPU\n-   && ! TARGET_V9\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_operand (operands[1], DFmode))\"\n-  \"@\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  #\n-  #\n-  #\n-  #\n-  #\n-  #\"\n- [(set_attr \"type\" \"fpload,fpstore,load,store,*,*,*,*,*,*\")\n-  (set_attr \"length\" \"*,*,*,*,2,2,2,2,2,2\")])\n-\n-(define_insn \"*movdf_insn_sp32_no_fpu\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=U,T,o,r,o\")\n-\t(match_operand:DF 1 \"input_operand\"    \"T,U,G,ro,r\"))]\n-  \"! TARGET_FPU\n-   && ! TARGET_V9\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_operand (operands[1], DFmode))\"\n-  \"@\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  #\n-  #\n-  #\"\n-  [(set_attr \"type\" \"load,store,*,*,*\")\n-   (set_attr \"length\" \"*,*,2,2,2\")])\n-\n-;; We have available v9 double floats but not 64-bit integer registers.\n-(define_insn \"*movdf_insn_sp32_v9_novis3\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b, b,e,  e, T,W,U,T,  f,     *r,    o\")\n-        (match_operand:DF 1 \"input_operand\"        \"GY,ZC,e,W#F,GY,e,T,U,o#F,*roGYDF,*rGYf\"))]\n-  \"TARGET_FPU\n-   && TARGET_V9\n-   && ! TARGET_VIS3\n-   && ! TARGET_ARCH64\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b, b,e,e,*r, f,  e, T,W,U,T,  f,     *r,   o,o\")\n+        (match_operand:DF 1 \"input_operand\"        \"GY,ZC,e,e, f,*r,W#F,GY,e,T,U,o#F,*roGYDF,*rGY,f\"))]\n+  \"! TARGET_ARCH64\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n   \"@\n   fzero\\t%0\n   fone\\t%0\n   fmovd\\t%1, %0\n-  ldd\\t%1, %0\n-  stx\\t%r1, %0\n-  std\\t%1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n   #\n   #\n-  #\"\n-  [(set_attr \"type\" \"fga,fga,fpmove,load,store,store,load,store,*,*,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,2,2,2\")\n-   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*\")])\n-\n-(define_insn \"*movdf_insn_sp32_v9_vis3\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b, b,e,*r, f,  e, T,W,U,T,  f,     *r,    o\")\n-        (match_operand:DF 1 \"input_operand\"        \"GY,ZC,e, f,*r,W#F,GY,e,T,U,o#F,*roGYDF,*rGYf\"))]\n-  \"TARGET_FPU\n-   && TARGET_V9\n-   && TARGET_VIS3\n-   && ! TARGET_ARCH64\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n-  \"@\n-  fzero\\t%0\n-  fone\\t%0\n-  fmovd\\t%1, %0\n-  #\n   #\n   ldd\\t%1, %0\n   stx\\t%r1, %0\n@@ -2285,57 +2046,17 @@\n   std\\t%1, %0\n   #\n   #\n-  #\"\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,load,store,store,load,store,*,*,*\")\n-   (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,2,2,2\")\n-   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*,*,*\")])\n-\n-(define_insn \"*movdf_insn_sp32_v9_no_fpu\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=U,T,T,r,o\")\n-\t(match_operand:DF 1 \"input_operand\"    \"T,U,G,ro,rG\"))]\n-  \"! TARGET_FPU\n-   && TARGET_V9\n-   && ! TARGET_ARCH64\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_operand (operands[1], DFmode))\"\n-  \"@\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  stx\\t%r1, %0\n   #\n   #\"\n-  [(set_attr \"type\" \"load,store,store,*,*\")\n-   (set_attr \"length\" \"*,*,*,2,2\")])\n-\n-;; We have available both v9 double floats and 64-bit integer registers.\n-(define_insn \"*movdf_insn_sp64_novis3\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b, b,e,  e,W,  *r,*r,   m,*r\")\n-        (match_operand:DF 1 \"input_operand\"        \"GY,ZC,e,W#F,e,*rGY, m,*rGY,DF\"))]\n-  \"TARGET_FPU\n-   && ! TARGET_VIS3\n-   && TARGET_ARCH64\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n-  \"@\n-  fzero\\t%0\n-  fone\\t%0\n-  fmovd\\t%1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  mov\\t%r1, %0\n-  ldx\\t%1, %0\n-  stx\\t%r1, %0\n-  #\"\n-  [(set_attr \"type\" \"fga,fga,fpmove,load,store,*,load,store,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,2\")\n-   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,fpload,store,fpstore,load,store,*,*,*,*\")\n+   (set_attr \"length\" \"*,*,*,2,2,2,*,*,*,*,*,2,2,2,2\")\n+   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"cpu_feature\" \"vis,vis,v9,fpunotv9,vis3,vis3,fpu,v9,fpu,*,*,fpu,*,*,fpu\")])\n \n-(define_insn \"*movdf_insn_sp64_vis3\"\n+(define_insn \"*movdf_insn_sp64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b, b,e,*r, e,  e,W,  *r,*r,   m,*r\")\n         (match_operand:DF 1 \"input_operand\"        \"GY,ZC,e, e,*r,W#F,e,*rGY, m,*rGY,DF\"))]\n-  \"TARGET_FPU\n-   && TARGET_ARCH64\n-   && TARGET_VIS3\n+  \"TARGET_ARCH64\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n   \"@\n@@ -2352,20 +2073,8 @@\n   #\"\n   [(set_attr \"type\" \"fga,fga,fpmove,*,*,load,store,*,load,store,*\")\n    (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,2\")\n-   (set_attr \"fptype\" \"double,double,double,double,double,*,*,*,*,*,*\")])\n-\n-(define_insn \"*movdf_insn_sp64_no_fpu\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m\")\n-        (match_operand:DF 1 \"input_operand\"    \"r,m,rG\"))]\n-  \"! TARGET_FPU\n-   && TARGET_ARCH64\n-   && (register_operand (operands[0], DFmode)\n-       || register_or_zero_operand (operands[1], DFmode))\"\n-  \"@\n-  mov\\t%1, %0\n-  ldx\\t%1, %0\n-  stx\\t%r1, %0\"\n-  [(set_attr \"type\" \"*,load,store\")])\n+   (set_attr \"fptype\" \"double,double,double,double,double,*,*,*,*,*,*\")\n+   (set_attr \"cpu_feature\" \"vis,vis,fpu,vis3,vis3,fpu,fpu,*,*,*,*\")])\n \n ;; This pattern builds DFmode constants in integer registers.\n (define_split\n@@ -3129,28 +2838,17 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*zero_extendsidi2_insn_sp64_novis3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:SI 1 \"input_operand\" \"r,m\")))]\n-  \"TARGET_ARCH64\n-   && ! TARGET_VIS3\n-   && GET_CODE (operands[1]) != CONST_INT\"\n-  \"@\n-   srl\\t%1, 0, %0\n-   lduw\\t%1, %0\"\n-  [(set_attr \"type\" \"shift,load\")])\n-\n-(define_insn \"*zero_extendsidi2_insn_sp64_vis3\"\n+(define_insn \"*zero_extendsidi2_insn_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(zero_extend:DI (match_operand:SI 1 \"input_operand\" \"r,m,*f\")))]\n   \"TARGET_ARCH64\n-   && TARGET_VIS3\n    && GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    srl\\t%1, 0, %0\n    lduw\\t%1, %0\n    movstouw\\t%1, %0\"\n-  [(set_attr \"type\" \"shift,load,*\")])\n+  [(set_attr \"type\" \"shift,load,*\")\n+   (set_attr \"cpu_feature\" \"*,*,vis3\")])\n \n (define_insn_and_split \"*zero_extendsidi2_insn_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -3475,26 +3173,17 @@\n   \"TARGET_ARCH64\"\n   \"\")\n \n-(define_insn \"*sign_extendsidi2_insn_novis3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:SI 1 \"input_operand\" \"r,m\")))]\n-  \"TARGET_ARCH64 && ! TARGET_VIS3\"\n-  \"@\n-  sra\\t%1, 0, %0\n-  ldsw\\t%1, %0\"\n-  [(set_attr \"type\" \"shift,sload\")\n-   (set_attr \"us3load_type\" \"*,3cycle\")])\n-\n-(define_insn \"*sign_extendsidi2_insn_vis3\"\n+(define_insn \"*sign_extendsidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(sign_extend:DI (match_operand:SI 1 \"input_operand\" \"r,m,*f\")))]\n-  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"TARGET_ARCH64\"\n   \"@\n   sra\\t%1, 0, %0\n   ldsw\\t%1, %0\n   movstosw\\t%1, %0\"\n   [(set_attr \"type\" \"shift,sload,*\")\n-   (set_attr \"us3load_type\" \"*,3cycle,*\")])\n+   (set_attr \"us3load_type\" \"*,3cycle,*\")\n+   (set_attr \"cpu_feature\" \"*,*,vis3\")])\n \n \n ;; Special pattern for optimizing bit-field compares.  This is needed\n@@ -7979,30 +7668,10 @@\n     DONE;\n })\n \n-(define_insn \"*mov<VM32:mode>_insn_novis3\"\n-  [(set (match_operand:VM32 0 \"nonimmediate_operand\" \"=f, f,f,f,m, m,r,m,*r\")\n-\t(match_operand:VM32 1 \"input_operand\"        \"GY,ZC,f,m,f,GY,m,r,*r\"))]\n-  \"TARGET_VIS\n-   && ! TARGET_VIS3\n-   && (register_operand (operands[0], <VM32:MODE>mode)\n-       || register_or_zero_or_all_ones_operand (operands[1], <VM32:MODE>mode))\"\n-  \"@\n-  fzeros\\t%0\n-  fones\\t%0\n-  fsrc1s\\t%1, %0\n-  ld\\t%1, %0\n-  st\\t%1, %0\n-  st\\t%r1, %0\n-  ld\\t%1, %0\n-  st\\t%1, %0\n-  mov\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*\")])\n-\n-(define_insn \"*mov<VM32:mode>_insn_vis3\"\n+(define_insn \"*mov<VM32:mode>_insn\"\n   [(set (match_operand:VM32 0 \"nonimmediate_operand\" \"=f, f,f,f,m, m,*r, m,*r,*r, f\")\n \t(match_operand:VM32 1 \"input_operand\"        \"GY,ZC,f,m,f,GY, m,*r,*r, f,*r\"))]\n   \"TARGET_VIS\n-   && TARGET_VIS3\n    && (register_operand (operands[0], <VM32:MODE>mode)\n        || register_or_zero_or_all_ones_operand (operands[1], <VM32:MODE>mode))\"\n   \"@\n@@ -8017,33 +7686,13 @@\n   mov\\t%1, %0\n   movstouw\\t%1, %0\n   movwtos\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")])\n-\n-(define_insn \"*mov<VM64:mode>_insn_sp64_novis3\"\n-  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e, e,e,e,m, m,r,m,*r\")\n-\t(match_operand:VM64 1 \"input_operand\"        \"GY,ZC,e,m,e,GY,m,r,*r\"))]\n-  \"TARGET_VIS\n-   && ! TARGET_VIS3\n-   && TARGET_ARCH64\n-   && (register_operand (operands[0], <VM64:MODE>mode)\n-       || register_or_zero_or_all_ones_operand (operands[1], <VM64:MODE>mode))\"\n-  \"@\n-  fzero\\t%0\n-  fone\\t%0\n-  fsrc1\\t%1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  stx\\t%r1, %0\n-  ldx\\t%1, %0\n-  stx\\t%1, %0\n-  mov\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*\")])\n+  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")\n+   (set_attr \"cpu_feature\" \"vis,vis,vis,*,*,*,*,*,*,vis3,vis3\")])\n \n-(define_insn \"*mov<VM64:mode>_insn_sp64_vis3\"\n+(define_insn \"*mov<VM64:mode>_insn_sp64\"\n   [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e, e,e,e,m, m,*r, m,*r, f,*r\")\n \t(match_operand:VM64 1 \"input_operand\"        \"GY,ZC,e,m,e,GY, m,*r, f,*r,*r\"))]\n   \"TARGET_VIS\n-   && TARGET_VIS3\n    && TARGET_ARCH64\n    && (register_operand (operands[0], <VM64:MODE>mode)\n        || register_or_zero_or_all_ones_operand (operands[1], <VM64:MODE>mode))\"\n@@ -8059,35 +7708,13 @@\n   movdtox\\t%1, %0\n   movxtod\\t%1, %0\n   mov\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")])\n-\n-(define_insn \"*mov<VM64:mode>_insn_sp32_novis3\"\n-  [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e, e,e,e,m, m,U,T,o,*r\")\n-\t(match_operand:VM64 1 \"input_operand\"        \"GY,ZC,e,m,e,GY,T,U,r,*r\"))]\n-  \"TARGET_VIS\n-   && ! TARGET_VIS3\n-   && ! TARGET_ARCH64\n-   && (register_operand (operands[0], <VM64:MODE>mode)\n-       || register_or_zero_or_all_ones_operand (operands[1], <VM64:MODE>mode))\"\n-  \"@\n-  fzero\\t%0\n-  fone\\t%0\n-  fsrc1\\t%1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  stx\\t%r1, %0\n-  ldd\\t%1, %0\n-  std\\t%1, %0\n-  #\n-  #\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,2,2\")])\n+  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")\n+   (set_attr \"cpu_feature\" \"vis,vis,vis,*,*,*,*,*,vis3,vis3,*\")])\n \n-(define_insn \"*mov<VM64:mode>_insn_sp32_vis3\"\n+(define_insn \"*mov<VM64:mode>_insn_sp32\"\n   [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e, e,e,*r, f,e,m, m,U,T, o,*r\")\n \t(match_operand:VM64 1 \"input_operand\"        \"GY,ZC,e, f,*r,m,e,GY,T,U,*r,*r\"))]\n   \"TARGET_VIS\n-   && TARGET_VIS3\n    && ! TARGET_ARCH64\n    && (register_operand (operands[0], <VM64:MODE>mode)\n        || register_or_zero_or_all_ones_operand (operands[1], <VM64:MODE>mode))\"\n@@ -8105,7 +7732,8 @@\n   #\n   #\"\n   [(set_attr \"type\" \"fga,fga,fga,*,*,fpload,fpstore,store,load,store,*,*\")\n-   (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,2,2\")])\n+   (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,2,2\")\n+   (set_attr \"cpu_feature\" \"vis,vis,vis,vis3,vis3,*,*,*,*,*,*,*\")])\n \n (define_split\n   [(set (match_operand:VM64 0 \"memory_operand\" \"\")"}]}