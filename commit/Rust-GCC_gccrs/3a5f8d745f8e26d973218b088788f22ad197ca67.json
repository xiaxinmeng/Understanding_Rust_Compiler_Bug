{"sha": "3a5f8d745f8e26d973218b088788f22ad197ca67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1ZjhkNzQ1ZjhlMjZkOTczMjE4YjA4ODc4OGYyMmFkMTk3Y2E2Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-09T15:19:07Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-09T19:39:36Z"}, "message": "c++: Fix -Wvexing-parse ICE with omitted int [PR97762]\n\nFor declarations like\n\n  long f();\n\ndecl_specifiers->type will be NULL, but I neglected to handle this case,\ntherefore we ICE.  So handle this case by pretending we've seen 'int',\nwhich is good enough for -Wvexing-parse's purposes.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97762\n\t* parser.c (warn_about_ambiguous_parse): Handle the case when\n\tthere is no type in the decl-specifiers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97762\n\t* g++.dg/warn/Wvexing-parse8.C: New test.", "tree": {"sha": "b6db6efcdffa3c475dbc13854f1e5f6a7e586917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6db6efcdffa3c475dbc13854f1e5f6a7e586917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5f8d745f8e26d973218b088788f22ad197ca67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5f8d745f8e26d973218b088788f22ad197ca67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5f8d745f8e26d973218b088788f22ad197ca67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5f8d745f8e26d973218b088788f22ad197ca67/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6624075e7e996d61143bf5fc106fa2cb61c614f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6624075e7e996d61143bf5fc106fa2cb61c614f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6624075e7e996d61143bf5fc106fa2cb61c614f6"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "b14b4c90c9211a630a3d420e0f63277c51e3cede", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5f8d745f8e26d973218b088788f22ad197ca67/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5f8d745f8e26d973218b088788f22ad197ca67/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3a5f8d745f8e26d973218b088788f22ad197ca67", "patch": "@@ -20652,13 +20652,24 @@ warn_about_ambiguous_parse (const cp_decl_specifier_seq *decl_specifiers,\n   if (declarator->parenthesized != UNKNOWN_LOCATION)\n     return;\n \n-  tree type = decl_specifiers->type;\n-  if (TREE_CODE (type) == TYPE_DECL)\n-   type = TREE_TYPE (type);\n+  tree type;\n+  if (decl_specifiers->type)\n+    {\n+      type = decl_specifiers->type;\n+      if (TREE_CODE (type) == TYPE_DECL)\n+\ttype = TREE_TYPE (type);\n \n-  /* If the return type is void there is no ambiguity.  */\n-  if (same_type_p (type, void_type_node))\n-    return;\n+      /* If the return type is void there is no ambiguity.  */\n+      if (same_type_p (type, void_type_node))\n+\treturn;\n+    }\n+  else\n+    {\n+      /* Code like long f(); will have null ->type.  If we have any\n+\t type-specifiers, pretend we've seen int.  */\n+      gcc_checking_assert (decl_specifiers->any_type_specifiers_p);\n+      type = integer_type_node;\n+    }\n \n   auto_diagnostic_group d;\n   location_t loc = declarator->u.function.parens_loc;"}, {"sha": "2d26d22fc4b5a8ddcee515489234fe0f625c1f45", "filename": "gcc/testsuite/g++.dg/warn/Wvexing-parse8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5f8d745f8e26d973218b088788f22ad197ca67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5f8d745f8e26d973218b088788f22ad197ca67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvexing-parse8.C?ref=3a5f8d745f8e26d973218b088788f22ad197ca67", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/97762\n+// { dg-do compile }\n+\n+void\n+g ()\n+{\n+  long a(); // { dg-warning \"empty parentheses\" }\n+  signed b(); // { dg-warning \"empty parentheses\" }\n+  unsigned c(); // { dg-warning \"empty parentheses\" }\n+  short d(); // { dg-warning \"empty parentheses\" }\n+}"}]}