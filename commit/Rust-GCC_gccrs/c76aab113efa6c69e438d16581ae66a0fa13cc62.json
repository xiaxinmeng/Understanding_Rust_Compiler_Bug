{"sha": "c76aab113efa6c69e438d16581ae66a0fa13cc62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2YWFiMTEzZWZhNmM2OWU0MzhkMTY1ODFhZTY2YTBmYTEzY2M2Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-14T10:34:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-14T10:34:05Z"}, "message": "i386.h (SPECIAL_MODE_PREDICATES): New.\n\n        * i386.h (SPECIAL_MODE_PREDICATES): New.\n        * i386.md (movstricthi_1): Use nonimmediate_operand for op 0.\n        (movqi_1, movdi_1, movdi_2, some splits): Likewise.\n        (addsi_lea_3): Add missing mode for op 3.\n        (prologue_set_got, prologue_get_pc): Add missing modes.\n        (*) Add missing output reload constraints.\n\nFrom-SVN: r29972", "tree": {"sha": "f8e28180495186a433952e22e51e67ed216c2663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e28180495186a433952e22e51e67ed216c2663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76aab113efa6c69e438d16581ae66a0fa13cc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76aab113efa6c69e438d16581ae66a0fa13cc62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76aab113efa6c69e438d16581ae66a0fa13cc62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76aab113efa6c69e438d16581ae66a0fa13cc62/comments", "author": null, "committer": null, "parents": [{"sha": "d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41395a53cbb0f5f0f2a2c430ce0ba3ad2aabdd4"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "5914e7a9db7270394aa0479d1638ea6d1305026d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c76aab113efa6c69e438d16581ae66a0fa13cc62", "patch": "@@ -4,6 +4,13 @@ Thu Oct 14 03:23:08 1999  Richard Henderson  <rth@cygnus.com>\n \t(*): Add missing output reload constraints.  Remove constraints\n \tfrom define_splits.\n \n+\t* i386.h (SPECIAL_MODE_PREDICATES): New.\n+\t* i386.md (movstricthi_1): Use nonimmediate_operand for op 0.\n+\t(movqi_1, movdi_1, movdi_2, some splits): Likewise.\n+\t(addsi_lea_3): Add missing mode for op 3.\n+\t(prologue_set_got, prologue_get_pc): Add missing modes.\n+\t(*) Add missing output reload constraints.\n+\n Thu Oct 14 03:59:57 1999  Stephane Carrez  <stcarrez@worldnet.fr>\n \n \t* stor-layout.c (layout_union): Use HOST_WIDE_INT for const_size;"}, {"sha": "579b132468b235af8c0cb0f9614d70669559964f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c76aab113efa6c69e438d16581ae66a0fa13cc62", "patch": "@@ -2397,6 +2397,12 @@ do { long l;\t\t\t\t\t\t\\\n   {\"cmpsi_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n \t\t     LABEL_REF, SUBREG, REG, MEM, AND}},\t\t\\\n   {\"long_memory_operand\", {MEM}},\n+\n+/* A list of predicates that do special things with modes, and so\n+   should not elicit warnings for VOIDmode match_operand.  */\n+\n+#define SPECIAL_MODE_PREDICATES \\\n+  \"ext_register_operand\",\n \f\n /* Variables in i386.c */\n extern const char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */"}, {"sha": "1feb05d6735fe8e4475dc385eee60015993aa7b8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76aab113efa6c69e438d16581ae66a0fa13cc62/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c76aab113efa6c69e438d16581ae66a0fa13cc62", "patch": "@@ -1365,7 +1365,7 @@\n }\")\n \n (define_insn \"*movstricthi_1\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+g,r\"))\n+  [(set (strict_low_part (match_operand:HI 0 \"nonimmediate_operand\" \"+m,r\"))\n \t(match_operand:HI 1 \"general_operand\" \"rn,m\"))]\n   \"! TARGET_PARTIAL_REG_STALL\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n@@ -1408,7 +1408,7 @@\n    (set_attr \"length_prefix\" \"1\")])\n \n (define_insn \"*movqi_1\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=q,q,*r,*r,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,q,*r,*r,m\")\n \t(match_operand:QI 1 \"general_operand\" \"qn,qm,*rn,qm,qn\"))\n    (clobber (reg:CC 17))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n@@ -1650,14 +1650,14 @@\n   \"#\")\n \n (define_insn \"*movdi_1\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,o\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o\")\n \t(match_operand:DI 1 \"general_operand\" \"riFo,riF\"))\n    (clobber (reg:CC 17))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"#\")\n \n (define_insn \"*movdi_2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,o\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o\")\n \t(match_operand:DI 1 \"general_operand\" \"riFo,riF\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"#\")\n@@ -1679,7 +1679,7 @@\n \n ;; %%% This multiword shite has got to go.\n (define_split\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:DI 1 \"general_operand\" \"\"))\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n@@ -1690,7 +1690,7 @@\n   \"if (ix86_split_movdi (operands)) DONE;\")\n   \n (define_split\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 4))\n@@ -2525,7 +2525,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"m,m\"))]\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -2588,7 +2588,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"m,m\"))]\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -2651,7 +2651,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"m,m\"))]\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -2741,10 +2741,10 @@\n    operands[3] = assign_386_stack_local (DImode, 1);\")\n \n (define_insn \"*fix_truncdi_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"m,?r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(fix:DI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"o,o\"))\n-   (clobber (match_operand:DI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"=o,o\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"=m,m\"))\n    (clobber (match_scratch:SI 4 \"=&r,=&r\"))\n    (clobber (match_scratch:XF 5 \"=f,f\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\"\n@@ -2800,10 +2800,10 @@\n    operands[3] = assign_386_stack_local (SImode, 1);\")\n \n (define_insn \"*fix_truncsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"m,?r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,?r\")\n \t(fix:SI (match_operand 1 \"register_operand\" \"f,f\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"o,o\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m,m\"))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"=o,o\"))\n+   (clobber (match_operand:SI 3 \"memory_operand\" \"=m,m\"))\n    (clobber (match_scratch:SI 4 \"=&r,r\"))]\n   \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"* return output_fix_trunc (insn, operands);\"\n@@ -2825,16 +2825,16 @@\n \n ;; %% Not used yet.\n (define_insn \"x86_fnstcw_1\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"m\")\n-\t(unspec [(reg:HI 18)] 11))]\n+  [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n+\t(unspec:HI [(reg:HI 18)] 11))]\n   \"TARGET_80387\"\n   \"fnstcw\\\\t%0\"\n   [(set_attr \"length_opcode\" \"2\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n (define_insn \"x86_fldcw_1\"\n   [(set (reg:HI 18)\n-\t(unspec [(match_operand:HI 0 \"memory_operand\" \"m\")] 12))]\n+\t(unspec:HI [(match_operand:HI 0 \"memory_operand\" \"m\")] 12))]\n   \"TARGET_80387\"\n   \"fldcw\\\\t%0\"\n   [(set_attr \"length_opcode\" \"2\")\n@@ -3151,7 +3151,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_no_sp_operand\" \"r\")\n \t\t\t\t   (match_operand:SI 2 \"const248_operand\" \"I\"))\n-\t\t\t  (match_operand 3 \"register_operand\" \"%r\"))\n+\t\t\t  (match_operand:SI 3 \"register_operand\" \"%r\"))\n \t\t (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"*\n@@ -3380,7 +3380,7 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*addqi_low_1\"\n-  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"q\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+q\"))\n \t(plus:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"qmn\")))\n    (clobber (reg:CC 17))]\n@@ -6716,7 +6716,7 @@\n \n (define_insn \"prologue_set_got\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-\t(unspec_volatile\n+\t(unspec_volatile:SI\n \t [(plus:SI (match_dup 0)\n \t\t   (plus:SI (match_operand:SI 1 \"symbolic_operand\" \"\")\n \t\t\t    (minus:SI (pc) (match_operand 2 \"\" \"\"))))] 1))\n@@ -6735,7 +6735,7 @@\n \n (define_insn \"prologue_get_pc\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-    (unspec_volatile [(plus:SI (pc) (match_operand 1 \"\" \"\"))] 2))]\n+    (unspec_volatile:SI [(plus:SI (pc) (match_operand 1 \"\" \"\"))] 2))]\n   \"\"\n   \"*\n {\n@@ -7743,7 +7743,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"r\")\n+   (set (match_operand:SI 3 \"register_operand\" \"=r\")\n \t(match_dup 3))\n    (clobber (reg:CC 17))]\n   \"\"\n@@ -7762,8 +7762,8 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"epilogue_deallocate_stack\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-\t(match_operand:SI 1 \"register_operand\" \"r\"))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operand:SI 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1) (match_dup 1))]\n   \"\"\n   \"mov{l}\\\\t{%1, %0|%0, %1}\""}]}