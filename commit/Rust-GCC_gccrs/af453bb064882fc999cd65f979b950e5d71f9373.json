{"sha": "af453bb064882fc999cd65f979b950e5d71f9373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY0NTNiYjA2NDg4MmZjOTk5Y2Q2NWY5NzliOTUwZTVkNzFmOTM3Mw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-05T23:24:48Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-05T23:24:48Z"}, "message": "cpplib.h, cpplib.c: Remove support for !STATIC_BUFFERS.\n\n* cpplib.h, cpplib.c:  Remove support for !STATIC_BUFFERS.\n* cpplib.h:  Use unsigned char rather than U_CHAR.\n* cpplib.h (cpp_reader):  Add destructor #ifdef __cplusplus.\n(cpp_cleanup):  New prototype.\n\nFrom-SVN: r12169", "tree": {"sha": "26e7bae77034fcbc204fb43474c77e1c848127f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e7bae77034fcbc204fb43474c77e1c848127f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af453bb064882fc999cd65f979b950e5d71f9373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af453bb064882fc999cd65f979b950e5d71f9373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af453bb064882fc999cd65f979b950e5d71f9373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af453bb064882fc999cd65f979b950e5d71f9373/comments", "author": null, "committer": null, "parents": [{"sha": "c003becadac8ce151cfcca944bc317b51007ede1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c003becadac8ce151cfcca944bc317b51007ede1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c003becadac8ce151cfcca944bc317b51007ede1"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "26171a3048522a9918e67353f54e429140e5c20d", "filename": "gcc/cpplib.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af453bb064882fc999cd65f979b950e5d71f9373/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af453bb064882fc999cd65f979b950e5d71f9373/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=af453bb064882fc999cd65f979b950e5d71f9373", "patch": "@@ -27,8 +27,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n extern \"C\" {\n #endif\n \n-#define STATIC_BUFFERS\n-\n typedef unsigned char U_CHAR;\n \n struct parse_file;\n@@ -101,6 +99,8 @@ extern enum cpp_token cpp_get_token PARAMS ((struct parse_marker*));\n extern void cpp_skip_hspace PARAMS((cpp_reader*));\n extern enum cpp_token cpp_get_non_space_token PARAMS ((cpp_reader *));\n \n+/* This frees resources used by PFILE. */\n+extern void cpp_cleanup PARAMS ((cpp_reader* PFILE));\n \n /* Maintain and search list of included files, for #import.  */\n \n@@ -134,9 +134,6 @@ struct cpp_buffer {\n   long line_base;\n   long lineno; /* Line number at CPP_LINE_BASE. */\n   long colno; /* Column number at CPP_LINE_BASE. */\n-#ifndef STATIC_BUFFERS\n-  cpp_buffer *chain;\n-#endif\n   parse_underflow_t underflow;\n   parse_cleanup_t cleanup;\n   void *data;\n@@ -150,7 +147,7 @@ struct cpp_buffer {\n   char seen_eof;\n \n   /* True if buffer contains escape sequences.\n-     Currently there are are only two kind:\n+     Currently there are three kinds:\n      \"@-\" means following identifier should not be macro-expanded.\n      \"@ \" means a token-separator.  This turns into \" \" in final output\n           if not stringizing and needed to separate tokens; otherwise nothing.\n@@ -165,25 +162,28 @@ struct file_name_map_list;\n typedef struct assertion_hashnode ASSERTION_HASHNODE;\n #define ASSERTION_HASHSIZE 37\n \n-#ifdef STATIC_BUFFERS\n /* Maximum nesting of cpp_buffers.  We use a static limit, partly for\n    efficiency, and partly to limit runaway recursion.  */\n #define CPP_STACK_MAX 200\n-#endif\n+\n+/* A cpp_reader encapsulates the \"state\" of a pre-processor run.\n+   Applying cpp_get_token repeatedly yields a stream of pre-processor\n+   tokens.  Usually, there is only one cpp_reader object active. */\n \n struct cpp_reader {\n-  unsigned char *limit;\n   parse_underflow_t get_token;\n   cpp_buffer *buffer;\n-#ifdef STATIC_BUFFERS\n   cpp_buffer buffer_stack[CPP_STACK_MAX];\n-#endif\n \n   int errors;\t\t\t/* Error counter for exit code */\n   void *data;\n \n-  U_CHAR *token_buffer;\n+  /* A buffer used for both for cpp_get_token's output, and also internally. */\n+  unsigned char *token_buffer;\n+  /* Alocated size of token_buffer.  CPP_RESERVE allocates space.  */\n   int token_buffer_size;\n+  /* End of the written part of token_buffer. */\n+  unsigned char *limit;\n \n   /* Line where a newline was first seen in a string constant.  */\n   int multiline_string_line;\n@@ -260,6 +260,10 @@ struct cpp_reader {\n \n   /* Number of bytes since the last newline.  */\n   int deps_column;\n+\n+#ifdef __cplusplus\n+  ~cpp_reader () { cpp_cleanup (this); }\n+#endif\n };\n \n #define CPP_BUF_PEEK(BUFFER) \\\n@@ -295,15 +299,10 @@ struct cpp_reader {\n \n #define CPP_OPTIONS(PFILE) ((cpp_options*)(PFILE)->data)\n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n-#ifdef STATIC_BUFFERS\n #define CPP_PREV_BUFFER(BUFFER) ((BUFFER)+1)\n #define CPP_NULL_BUFFER(PFILE) (&(PFILE)->buffer_stack[CPP_STACK_MAX])\n-#else\n-#define CPP_PREV_BUFFER(BUFFER) ((BUFFER)->chain)\n-#define CPP_NULL_BUFFER(PFILE) ((cpp_buffer*)0)\n-#endif\n \n-/* Pointed to by parse_file::data. */\n+/* Pointed to by cpp_reader::data. */\n struct cpp_options {\n   char *in_fname;\n \n@@ -551,7 +550,7 @@ typedef struct macrodef MACRODEF;\n struct macrodef\n {\n   struct definition *defn;\n-  U_CHAR *symnam;\n+  unsigned char *symnam;\n   int symlen;\n };\n \n@@ -582,7 +581,7 @@ struct definition {\n   int length;\t\t\t/* length of expansion string */\n   int predefined;\t\t/* True if the macro was builtin or */\n \t\t\t\t/* came from the command line */\n-  U_CHAR *expansion;\n+  unsigned char *expansion;\n   int line;\t\t\t/* Line number of definition */\n   char *file;\t\t\t/* File of definition */\n   char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n@@ -602,11 +601,11 @@ struct definition {\n        with comma-space between them.\n        The only use of this is that we warn on redefinition\n        if this differs between the old and new definitions.  */\n-    U_CHAR *argnames;\n+    unsigned char *argnames;\n   } args;\n };\n \n-extern U_CHAR is_idchar[256];\n+extern unsigned char is_idchar[256];\n \n /* Stack of conditionals currently in progress\n    (including both successful and failing conditionals).  */\n@@ -617,15 +616,15 @@ struct if_stack {\n   int lineno;\t\t\t/* similarly */\n   int if_succeeded;\t\t/* true if a leg of this if-group\n \t\t\t\t    has been passed through rescan */\n-  U_CHAR *control_macro;\t/* For #ifndef at start of file,\n+  unsigned char *control_macro;\t/* For #ifndef at start of file,\n \t\t\t\t   this is the macro name tested.  */\n   enum node_type type;\t\t/* type of last directive seen in this group */\n };\n typedef struct if_stack IF_STACK_FRAME;\n \n extern void cpp_buf_line_and_col PARAMS((cpp_buffer*, long*, long*));\n extern cpp_buffer* cpp_file_buffer PARAMS((cpp_reader*));\n-extern void cpp_define PARAMS ((cpp_reader*, U_CHAR*));\n+extern void cpp_define PARAMS ((cpp_reader*, unsigned char*));\n \n extern void cpp_error ();\n extern void cpp_warning ();\n@@ -640,10 +639,11 @@ extern void cpp_pfatal_with_name ();\n \n extern void cpp_grow_buffer PARAMS ((cpp_reader*, long));\n extern int cpp_parse_escape PARAMS ((cpp_reader*, char**));\n-extern cpp_buffer* cpp_push_buffer PARAMS ((cpp_reader *, U_CHAR*, long));\n+extern cpp_buffer* cpp_push_buffer PARAMS ((cpp_reader *,\n+\t\t\t\t\t    unsigned char*, long));\n extern cpp_buffer* cpp_pop_buffer PARAMS ((cpp_reader *));\n \n-extern cpp_hashnode* cpp_lookup PARAMS ((cpp_reader*, const U_CHAR*,\n+extern cpp_hashnode* cpp_lookup PARAMS ((cpp_reader*, const unsigned char*,\n \t\t\t\t\t int, int));\n \n #ifdef __cplusplus"}]}