{"sha": "e52b6b63daa2f2467e2a615534071bd050f97f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyYjZiNjNkYWEyZjI0NjdlMmE2MTU1MzQwNzFiZDA1MGY5N2Y0OA==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@amelek.gda.pl", "date": "2002-06-08T17:25:43Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-06-08T17:25:43Z"}, "message": "avr.c (avr_regs_to_save): No need to save any registers in a noreturn function.\n\n\n\t* config/avr/avr.c (avr_regs_to_save): No need to save any registers\n\tin a noreturn function.\n\t(avr_output_function_prologue, avr_output_function_epilogue):\n\tCorrect function size calculation.  Do not crash on empty function.\n\t(avr_output_function_epilogue): No need for epilogue after a BARRIER.\n\nFrom-SVN: r54386", "tree": {"sha": "a26651fcf497b750618bc37c8f67153a3421fb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a26651fcf497b750618bc37c8f67153a3421fb0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52b6b63daa2f2467e2a615534071bd050f97f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52b6b63daa2f2467e2a615534071bd050f97f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52b6b63daa2f2467e2a615534071bd050f97f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52b6b63daa2f2467e2a615534071bd050f97f48/comments", "author": null, "committer": null, "parents": [{"sha": "1569d6700c4616964e7514228207664c04ea24c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1569d6700c4616964e7514228207664c04ea24c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1569d6700c4616964e7514228207664c04ea24c3"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "79f4ae56e09af1121e91baae7a6e8feac3416b13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52b6b63daa2f2467e2a615534071bd050f97f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52b6b63daa2f2467e2a615534071bd050f97f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e52b6b63daa2f2467e2a615534071bd050f97f48", "patch": "@@ -1,3 +1,11 @@\n+2002-06-08  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\t* config/avr/avr.c (avr_regs_to_save): No need to save any registers\n+\tin a noreturn function.\n+\t(avr_output_function_prologue, avr_output_function_epilogue):\n+\tCorrect function size calculation.  Do not crash on empty function.\n+\t(avr_output_function_epilogue): No need for epilogue after a BARRIER.\n+\n 2002-06-08  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/mips/netbsd.h (SUBTARGET_EXTRA_SPECS): Add"}, {"sha": "41dcfbc74bbc8160091b81c400583f1728535386", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52b6b63daa2f2467e2a615534071bd050f97f48/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52b6b63daa2f2467e2a615534071bd050f97f48/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e52b6b63daa2f2467e2a615534071bd050f97f48", "patch": "@@ -395,6 +395,11 @@ avr_regs_to_save (set)\n   if (set)\n     CLEAR_HARD_REG_SET (*set);\n   count = 0;\n+\n+  /* No need to save any registers if the function never returns.  */\n+  if (TREE_THIS_VOLATILE (current_function_decl))\n+    return 0;\n+\n   for (reg = 0; reg < 32; reg++)\n     {\n       /* Do not push/pop __tmp_reg__, __zero_reg__, as well as\n@@ -609,11 +614,16 @@ avr_output_function_prologue (file, size)\n   int main_p;\n   int live_seq;\n   int minimize;\n-  \n+\n+  last_insn_address = 0;\n+  jump_tables_size = 0;\n+  prologue_size = 0;\n+  fprintf (file, \"/* prologue: frame size=%d */\\n\", size);\n+\n   if (avr_naked_function_p (current_function_decl))\n     {\n-      fprintf (file, \"/* prologue: naked */\\n\");\n-      return;\n+      fputs (\"/* prologue: naked */\\n\", file);\n+      goto out;\n     }\n \n   interrupt_func_p = interrupt_function_p (current_function_decl);\n@@ -623,11 +633,6 @@ avr_output_function_prologue (file, size)\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n \n-  last_insn_address = 0;\n-  jump_tables_size = 0;\n-  prologue_size = 0;\n-  fprintf (file, \"/* prologue: frame size=%d */\\n\", size);\n-  \n   if (interrupt_func_p)\n     {\n       fprintf (file,\"\\tsei\\n\");\n@@ -722,6 +727,8 @@ avr_output_function_prologue (file, size)\n \t  }\n \t}\n     }\n+\n+ out:\n   fprintf (file, \"/* prologue end (size=%d) */\\n\", prologue_size);\n }\n \n@@ -739,25 +746,39 @@ avr_output_function_epilogue (file, size)\n   int function_size;\n   int live_seq;\n   int minimize;\n+  rtx last = get_last_nonnote_insn ();\n+\n+  function_size = jump_tables_size;\n+  if (last)\n+    {\n+      rtx first = get_first_nonnote_insn ();\n+      function_size += (INSN_ADDRESSES (INSN_UID (last)) -\n+\t\t\tINSN_ADDRESSES (INSN_UID (first)));\n+      function_size += get_attr_length (last);\n+    }\n+\n+  fprintf (file, \"/* epilogue: frame size=%d */\\n\", size);\n+  epilogue_size = 0;\n \n   if (avr_naked_function_p (current_function_decl))\n     {\n-      fprintf (file, \"/* epilogue: naked */\\n\");\n-      return;\n+      fputs (\"/* epilogue: naked */\\n\", file);\n+      goto out;\n+    }\n+\n+  if (last && GET_CODE (last) == BARRIER)\n+    {\n+      fputs (\"/* epilogue: noreturn */\\n\", file);\n+      goto out;\n     }\n \n   interrupt_func_p = interrupt_function_p (current_function_decl);\n   signal_func_p = signal_function_p (current_function_decl);\n   main_p = MAIN_NAME_P (DECL_NAME (current_function_decl));\n-  function_size = (INSN_ADDRESSES (INSN_UID (get_last_nonnote_insn ()))\n-\t\t   - INSN_ADDRESSES (INSN_UID (get_first_nonnote_insn ())));\n-  function_size += jump_tables_size;\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n   \n-  epilogue_size = 0;\n-  fprintf (file, \"/* epilogue: frame size=%d */\\n\", size);\n   if (main_p)\n     {\n       /* Return value from main() is already in the correct registers\n@@ -850,7 +871,8 @@ avr_output_function_epilogue (file, size)\n \tfprintf (file, \"\\tret\\n\");\n       ++epilogue_size;\n     }\n-  \n+\n+ out:\n   fprintf (file, \"/* epilogue end (size=%d) */\\n\", epilogue_size);\n   fprintf (file, \"/* function %s size %d (%d) */\\n\", current_function_name,\n \t   prologue_size + function_size + epilogue_size, function_size);"}]}