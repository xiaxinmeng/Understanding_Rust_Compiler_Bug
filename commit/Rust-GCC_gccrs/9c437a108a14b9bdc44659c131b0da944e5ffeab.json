{"sha": "9c437a108a14b9bdc44659c131b0da944e5ffeab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0MzdhMTA4YTE0YjliZGM0NDY1OWMxMzFiMGRhOTQ0ZTVmZmVhYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T15:31:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T15:31:25Z"}, "message": "Vectorise conversions between differently-sized integer vectors\n\nThis patch adds AArch64 patterns for converting between 64-bit and\n128-bit integer vectors, and makes the vectoriser and expand pass\nuse them.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-cfg.c (verify_gimple_assign_unary): Handle conversions\n\tbetween vector types.\n\t* tree-vect-stmts.c (vectorizable_conversion): Extend the\n\tnon-widening and non-narrowing path to handle standard\n\tconversion codes, if the target supports them.\n\t* expr.c (convert_move): Try using the extend and truncate optabs\n\tfor vectors.\n\t* optabs-tree.c (supportable_convert_operation): Likewise.\n\t* config/aarch64/iterators.md (Vnarroqw): New iterator.\n\t* config/aarch64/aarch64-simd.md (<optab><Vnarrowq><mode>2)\n\t(trunc<mode><Vnarrowq>2): New patterns.\n\ngcc/testsuite/\n\t* gcc.dg/vect/bb-slp-pr69907.c: Do not expect BB vectorization\n\tto fail for aarch64 targets.\n\t* gcc.dg/vect/no-scevccp-outer-12.c: Expect the test to pass\n\ton aarch64 targets.\n\t* gcc.dg/vect/vect-double-reduc-5.c: Likewise.\n\t* gcc.dg/vect/vect-outer-4e.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_5.c: New test.\n\t* gcc.target/aarch64/vect_mixed_sizes_6.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_7.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_8.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_9.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_10.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_11.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_12.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_13.c: Likewise.\n\nFrom-SVN: r278245", "tree": {"sha": "e28c10ce8b60ec8052a44093e947d44c2db4e240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e28c10ce8b60ec8052a44093e947d44c2db4e240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c437a108a14b9bdc44659c131b0da944e5ffeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c437a108a14b9bdc44659c131b0da944e5ffeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c437a108a14b9bdc44659c131b0da944e5ffeab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c437a108a14b9bdc44659c131b0da944e5ffeab/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05101d1b575a57ca26e4275e971da85a0dd1d52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05101d1b575a57ca26e4275e971da85a0dd1d52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05101d1b575a57ca26e4275e971da85a0dd1d52a"}], "stats": {"total": 286, "additions": 280, "deletions": 6}, "files": [{"sha": "2798f159cc0c2997b0db359fde6836a0651c3702", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -1,3 +1,17 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-cfg.c (verify_gimple_assign_unary): Handle conversions\n+\tbetween vector types.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Extend the\n+\tnon-widening and non-narrowing path to handle standard\n+\tconversion codes, if the target supports them.\n+\t* expr.c (convert_move): Try using the extend and truncate optabs\n+\tfor vectors.\n+\t* optabs-tree.c (supportable_convert_operation): Likewise.\n+\t* config/aarch64/iterators.md (Vnarroqw): New iterator.\n+\t* config/aarch64/aarch64-simd.md (<optab><Vnarrowq><mode>2)\n+\t(trunc<mode><Vnarrowq>2): New patterns.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vect_get_vector_types_for_stmt): Don't"}, {"sha": "ad4676bc167f08951e693916c7ef796e3501762a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -7007,3 +7007,21 @@\n   \"pmull2\\\\t%0.1q, %1.2d, %2.2d\"\n   [(set_attr \"type\" \"crypto_pmull\")]\n )\n+\n+;; Sign- or zero-extend a 64-bit integer vector to a 128-bit vector.\n+(define_insn \"<optab><Vnarrowq><mode>2\"\n+  [(set (match_operand:VQN 0 \"register_operand\" \"=w\")\n+\t(ANY_EXTEND:VQN (match_operand:<VNARROWQ> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>xtl\\t%0.<Vtype>, %1.<Vntype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_long\")]\n+)\n+\n+;; Truncate a 128-bit integer vector to a 64-bit vector.\n+(define_insn \"trunc<mode><Vnarrowq>2\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n+\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"xtn\\t%0.<Vntype>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)"}, {"sha": "3e37f80081df9899e103e19b8e2bc96454efd199", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -927,6 +927,8 @@\n \t\t\t    (V2DI \"V2SI\")\n \t\t\t    (DI\t  \"SI\")\t  (SI\t\"HI\")\n \t\t\t    (HI\t  \"QI\")])\n+(define_mode_attr Vnarrowq [(V8HI \"v8qi\") (V4SI \"v4hi\")\n+\t\t\t    (V2DI \"v2si\")])\n \n ;; Narrowed quad-modes for VQN (Used for XTN2).\n (define_mode_attr VNARROWQ2 [(V8HI \"V16QI\") (V4SI \"V8HI\")"}, {"sha": "ed50586971f711552060be678c408709dbaf5154", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -250,6 +250,31 @@ convert_move (rtx to, rtx from, int unsignedp)\n \n   if (VECTOR_MODE_P (to_mode) || VECTOR_MODE_P (from_mode))\n     {\n+      if (GET_MODE_UNIT_PRECISION (to_mode)\n+\t  > GET_MODE_UNIT_PRECISION (from_mode))\n+\t{\n+\t  optab op = unsignedp ? zext_optab : sext_optab;\n+\t  insn_code icode = convert_optab_handler (op, to_mode, from_mode);\n+\t  if (icode != CODE_FOR_nothing)\n+\t    {\n+\t      emit_unop_insn (icode, to, from,\n+\t\t\t      unsignedp ? ZERO_EXTEND : SIGN_EXTEND);\n+\t      return;\n+\t    }\n+\t}\n+\n+      if (GET_MODE_UNIT_PRECISION (to_mode)\n+\t  < GET_MODE_UNIT_PRECISION (from_mode))\n+\t{\n+\t  insn_code icode = convert_optab_handler (trunc_optab,\n+\t\t\t\t\t\t   to_mode, from_mode);\n+\t  if (icode != CODE_FOR_nothing)\n+\t    {\n+\t      emit_unop_insn (icode, to, from, TRUNCATE);\n+\t      return;\n+\t    }\n+\t}\n+\n       gcc_assert (known_eq (GET_MODE_BITSIZE (from_mode),\n \t\t\t    GET_MODE_BITSIZE (to_mode)));\n "}, {"sha": "97cc59255e081eded31c53280e5ac308d3d71fd3", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -303,6 +303,20 @@ supportable_convert_operation (enum tree_code code,\n       return true;\n     }\n \n+  if (GET_MODE_UNIT_PRECISION (m1) > GET_MODE_UNIT_PRECISION (m2)\n+      && can_extend_p (m1, m2, TYPE_UNSIGNED (vectype_in)))\n+    {\n+      *code1 = code;\n+      return true;\n+    }\n+\n+  if (GET_MODE_UNIT_PRECISION (m1) < GET_MODE_UNIT_PRECISION (m2)\n+      && convert_optab_handler (trunc_optab, m1, m2) != CODE_FOR_nothing)\n+    {\n+      *code1 = code;\n+      return true;\n+    }\n+\n   /* Now check for builtin.  */\n   if (targetm.vectorize.builtin_conversion\n       && targetm.vectorize.builtin_conversion (code, vectype_out, vectype_in))"}, {"sha": "29da1f347bd9869adf069f00657b2307e2181022", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -1,3 +1,21 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-pr69907.c: Do not expect BB vectorization\n+\tto fail for aarch64 targets.\n+\t* gcc.dg/vect/no-scevccp-outer-12.c: Expect the test to pass\n+\ton aarch64 targets.\n+\t* gcc.dg/vect/vect-double-reduc-5.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-4e.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_5.c: New test.\n+\t* gcc.target/aarch64/vect_mixed_sizes_6.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_7.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_8.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_9.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_10.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_11.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_12.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_13.c: Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-outer-4f.c: Expect the test to pass on aarch64"}, {"sha": "813b1af089a81e941663a7219f95d3d5a61c236b", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr69907.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -18,5 +18,6 @@ void foo(unsigned *p1, unsigned short *p2)\n }\n \n /* Disable for SVE because for long or variable-length vectors we don't\n-   get an unrolled epilogue loop.  */\n-/* { dg-final { scan-tree-dump \"BB vectorization with gaps at the end of a load is not supported\" \"slp1\" { target { ! aarch64_sve } } } } */\n+   get an unrolled epilogue loop.  Also disable for AArch64 Advanced SIMD,\n+   because there we can vectorize the epilogue using mixed vector sizes.  */\n+/* { dg-final { scan-tree-dump \"BB vectorization with gaps at the end of a load is not supported\" \"slp1\" { target { ! aarch64*-*-* } } } } */"}, {"sha": "b5f8c3c88e4d0a6562ba867ae83c1ab120077111", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-12.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -46,4 +46,4 @@ int main (void)\n }\n \n /* Until we support multiple types in the inner loop  */\n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED.\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */"}, {"sha": "079704cee81cc17b882b476c42cbeee0280369cf", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-5.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -52,5 +52,5 @@ int main ()\n \n /* Vectorization of loops with multiple types and double reduction is not \n    supported yet.  */       \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */\n       "}, {"sha": "e65a092f5bfdcf86ac6bfb97aa4fb65c48920548", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4e.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4e.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -23,4 +23,4 @@ foo (){\n   return;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */"}, {"sha": "81e77a8bb048aece91d79d824347fc60837f660f", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_10.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int16_t *x, int16_t *y, uint8_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 8];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuxtl\\tv[0-9]+\\.8h, v[0-9]+\\.8b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8h,} 1 } } */"}, {"sha": "d9da6c1f12a45baae4aed3c5c7e7c0a037437e61", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_11.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_11.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int32_t *x, int64_t *y, int64_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\txtn\\tv[0-9]+\\.2s, v[0-9]+\\.2d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2d,} 1 } } */"}, {"sha": "80dab8bf55f38138aad96814851ae04c5b7345df", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_12.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_12.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int16_t *x, int32_t *y, int32_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 4];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\txtn\\tv[0-9]+\\.4h, v[0-9]+\\.4s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.4s,} 1 } } */"}, {"sha": "655fa7d4bf10d8e5fcfa271122d094b734579c14", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_13.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int8_t *x, int16_t *y, int16_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 8];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\txtn\\tv[0-9]+\\.8b, v[0-9]+\\.8h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8h,} 1 } } */"}, {"sha": "ca8a65a16e79ed0fe27924bbb403cde5eb706917", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_5.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int64_t *x, int64_t *y, int32_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsxtl\\tv[0-9]+\\.2d, v[0-9]+\\.2s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2d,} 1 } } */"}, {"sha": "6c09b5b146bf79c14a5621078d9fce57c5a6bf71", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_6.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int32_t *x, int32_t *y, int16_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 4];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsxtl\\tv[0-9]+\\.4s, v[0-9]+\\.4h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.4s,} 1 } } */"}, {"sha": "94a66c545efeeaa662af975070c635959a485f87", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_7.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int16_t *x, int16_t *y, int8_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 8];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsxtl\\tv[0-9]+\\.8h, v[0-9]+\\.8b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8h,} 1 } } */"}, {"sha": "9531966c2945c1365a71dd36b1fb34cb1c0c021d", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_8.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int64_t *x, int64_t *y, uint32_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuxtl\\tv[0-9]+\\.2d, v[0-9]+\\.2s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2d,} 1 } } */"}, {"sha": "de8f69886852c0531bfb1d006648ce3c4202717a", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_9.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int32_t *x, int32_t *y, uint16_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] = z[i];\n+      y[i] += y[i - 4];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuxtl\\tv[0-9]+\\.4s, v[0-9]+\\.4h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.4s,} 1 } } */"}, {"sha": "eb268e32b2ddb605d1aa24f827db601758374429", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -3553,6 +3553,24 @@ verify_gimple_assign_unary (gassign *stmt)\n     {\n     CASE_CONVERT:\n       {\n+\t/* Allow conversions between vectors with the same number of elements,\n+\t   provided that the conversion is OK for the element types too.  */\n+\tif (VECTOR_TYPE_P (lhs_type)\n+\t    && VECTOR_TYPE_P (rhs1_type)\n+\t    && known_eq (TYPE_VECTOR_SUBPARTS (lhs_type),\n+\t\t\t TYPE_VECTOR_SUBPARTS (rhs1_type)))\n+\t  {\n+\t    lhs_type = TREE_TYPE (lhs_type);\n+\t    rhs1_type = TREE_TYPE (rhs1_type);\n+\t  }\n+\telse if (VECTOR_TYPE_P (lhs_type) || VECTOR_TYPE_P (rhs1_type))\n+\t  {\n+\t    error (\"invalid vector types in nop conversion\");\n+\t    debug_generic_expr (lhs_type);\n+\t    debug_generic_expr (rhs1_type);\n+\t    return true;\n+\t  }\n+\n \t/* Allow conversions from pointer type to integral type only if\n \t   there is no sign or zero extension involved.\n \t   For targets were the precision of ptrofftype doesn't match that"}, {"sha": "a65b4cb6c1a16deefaf3ab1a8ee984bf7e73e446", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c437a108a14b9bdc44659c131b0da944e5ffeab/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9c437a108a14b9bdc44659c131b0da944e5ffeab", "patch": "@@ -4861,7 +4861,9 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   switch (modifier)\n     {\n     case NONE:\n-      if (code != FIX_TRUNC_EXPR && code != FLOAT_EXPR)\n+      if (code != FIX_TRUNC_EXPR\n+\t  && code != FLOAT_EXPR\n+\t  && !CONVERT_EXPR_CODE_P (code))\n \treturn false;\n       if (supportable_convert_operation (code, vectype_out, vectype_in,\n \t\t\t\t\t &decl1, &code1))"}]}