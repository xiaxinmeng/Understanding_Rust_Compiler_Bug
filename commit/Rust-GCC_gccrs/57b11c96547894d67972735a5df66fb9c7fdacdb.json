{"sha": "57b11c96547894d67972735a5df66fb9c7fdacdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiMTFjOTY1NDc4OTRkNjc5NzI3MzVhNWRmNjZmYjljN2ZkYWNkYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-04-15T04:07:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-04-15T04:07:45Z"}, "message": "2005-04-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * include/ext/bitmap_allocator.h\n        (__gnu_cxx::free_list::_M_get_mutex): New.\n        (__gnu_cxx::free_list::_M_get_free_list): New.\n        (__gnu_cxx::free_list::_S_bfl_mutex): Remove.\n        (__gnu_cxx::free_list::_S_free_list): Remove.\n        * src/bitmap_allocator.cc: Same.\n        * config/linker-map.gnu: Remove free_list and mutex export.\n\nFrom-SVN: r98173", "tree": {"sha": "e814221dcdb3e6d318e0d5fc623dde07c2085b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e814221dcdb3e6d318e0d5fc623dde07c2085b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b11c96547894d67972735a5df66fb9c7fdacdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b11c96547894d67972735a5df66fb9c7fdacdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b11c96547894d67972735a5df66fb9c7fdacdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b11c96547894d67972735a5df66fb9c7fdacdb/comments", "author": null, "committer": null, "parents": [{"sha": "25cd19de2f36ed2fce8aa2e9b8903591352b77a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25cd19de2f36ed2fce8aa2e9b8903591352b77a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25cd19de2f36ed2fce8aa2e9b8903591352b77a3"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "222727963718855790a32b9f67a6b411f7366366", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57b11c96547894d67972735a5df66fb9c7fdacdb", "patch": "@@ -1,3 +1,13 @@\n+2005-04-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * include/ext/bitmap_allocator.h\n+        (__gnu_cxx::free_list::_M_get_mutex): New.\n+        (__gnu_cxx::free_list::_M_get_free_list): New.\n+        (__gnu_cxx::free_list::_S_bfl_mutex): Remove.\n+        (__gnu_cxx::free_list::_S_free_list): Remove.\n+        * src/bitmap_allocator.cc: Same.\n+        * config/linker-map.gnu: Remove free_list and mutex export.\n+\n 2005-04-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t*  include/ext/pod_char_traits.h (__gnu_cxx::character): Add char_type."}, {"sha": "a6f631a8d97aeb6bccbaf03510bac7935c5000e6", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=57b11c96547894d67972735a5df66fb9c7fdacdb", "patch": "@@ -299,8 +299,6 @@ GLIBCXX_3.4.4 {\n     _ZN9__gnu_cxx6__poolILb[01]EE16_M_reclaim_blockEPc[jm];\n     _ZN9__gnu_cxx6__poolILb[01]EE10_M_destroyEv;\n \n-    _ZN9__gnu_cxx9free_list12_S_free_listE;\n-    _ZN9__gnu_cxx9free_list12_S_bfl_mutexE;\n     _ZN9__gnu_cxx9free_list6_M_getE*;\n     _ZN9__gnu_cxx9free_list8_M_clearEv;\n "}, {"sha": "f607709e8f9cb714710fce4d2c669ef22262c746", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=57b11c96547894d67972735a5df66fb9c7fdacdb", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -717,10 +717,21 @@ namespace __gnu_cxx\n       { return *__pui < __cui; }\n     };\n \n-#if defined __GTHREADS \n-    static _Mutex _S_bfl_mutex;\n+#if defined __GTHREADS\n+    _Mutex*\n+    _M_get_mutex()\n+    {\n+      static _Mutex _S_mutex;\n+      return &_S_mutex;\n+    }\n #endif\n-    static vector_type _S_free_list;\n+\n+    vector_type&\n+    _M_get_free_list()\n+    {\n+      static vector_type _S_free_list;\n+      return _S_free_list;\n+    }\n \n     /** @brief  Performs validation of memory based on their size.\n      *\n@@ -735,12 +746,13 @@ namespace __gnu_cxx\n     void\n     _M_validate(size_t* __addr) throw()\n     {\n+      vector_type& __free_list = _M_get_free_list();\n       const vector_type::size_type __max_size = 64;\n-      if (_S_free_list.size() >= __max_size)\n+      if (__free_list.size() >= __max_size)\n \t{\n \t  // Ok, the threshold value has been reached.  We determine\n \t  // which block to remove from the list of free blocks.\n-\t  if (*__addr >= *_S_free_list.back())\n+\t  if (*__addr >= *__free_list.back())\n \t    {\n \t      // Ok, the new block is greater than or equal to the\n \t      // last block in the list of free blocks. We just free\n@@ -752,18 +764,18 @@ namespace __gnu_cxx\n \t    {\n \t      // Deallocate the last block in the list of free lists,\n \t      // and insert the new one in it's correct position.\n-\t      ::operator delete(static_cast<void*>(_S_free_list.back()));\n-\t      _S_free_list.pop_back();\n+\t      ::operator delete(static_cast<void*>(__free_list.back()));\n+\t      __free_list.pop_back();\n \t    }\n \t}\n \t  \n       // Just add the block to the list of free lists unconditionally.\n       iterator __temp = __gnu_cxx::balloc::__lower_bound\n-\t(_S_free_list.begin(), _S_free_list.end(), \n+\t(__free_list.begin(), __free_list.end(), \n \t *__addr, _LT_pointer_compare());\n \n       // We may insert the new free list before _temp;\n-      _S_free_list.insert(__temp, __addr);\n+      __free_list.insert(__temp, __addr);\n     }\n \n     /** @brief  Decides whether the wastage of memory is acceptable for\n@@ -801,7 +813,7 @@ namespace __gnu_cxx\n     _M_insert(size_t* __addr) throw()\n     {\n #if defined __GTHREADS\n-      _Auto_Lock __bfl_lock(&_S_bfl_mutex);\n+      _Auto_Lock __bfl_lock(_M_get_mutex());\n #endif\n       // Call _M_validate to decide what should be done with\n       // this particular free list."}, {"sha": "c8d94af21579177ae33749845765be6e251d43b5", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b11c96547894d67972735a5df66fb9c7fdacdb/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=57b11c96547894d67972735a5df66fb9c7fdacdb", "patch": "@@ -48,25 +48,20 @@ namespace __gnu_cxx\n      size_t const&, free_list::_LT_pointer_compare);\n   }\n \n-#if defined __GTHREADS\n-  _Mutex free_list::_S_bfl_mutex;\n-#endif\n-  free_list::vector_type free_list::_S_free_list;\n-\n   size_t*\n   free_list::\n   _M_get(size_t __sz) throw(std::bad_alloc)\n   {\n #if defined __GTHREADS\n-    _Lock __bfl_lock(&_S_bfl_mutex);\n+    _Lock __bfl_lock(_M_get_mutex());\n     __bfl_lock._M_lock();\n #endif\n     iterator __temp = \n       __gnu_cxx::balloc::__lower_bound\n-      (_S_free_list.begin(), _S_free_list.end(), \n+      (_M_get_free_list().begin(), _M_get_free_list().end(), \n        __sz, _LT_pointer_compare());\n \n-    if (__temp == _S_free_list.end() || !_M_should_i_give(**__temp, __sz))\n+    if (__temp == _M_get_free_list().end() || !_M_should_i_give(**__temp, __sz))\n       {\n \t// We release the lock here, because operator new is\n \t// guaranteed to be thread-safe by the underlying\n@@ -101,7 +96,7 @@ namespace __gnu_cxx\n     else\n       {\n \tsize_t* __ret = *__temp;\n-\t_S_free_list.erase(__temp);\n+\t_M_get_free_list().erase(__temp);\n #if defined __GTHREADS\n \t__bfl_lock._M_unlock();\n #endif\n@@ -114,15 +109,16 @@ namespace __gnu_cxx\n   _M_clear()\n   {\n #if defined __GTHREADS\n-    _Auto_Lock __bfl_lock(&_S_bfl_mutex);\n+    _Auto_Lock __bfl_lock(_M_get_mutex());\n #endif\n-    iterator __iter = _S_free_list.begin();\n-    while (__iter != _S_free_list.end())\n+    vector_type& __free_list = _M_get_free_list();\n+    iterator __iter = __free_list.begin();\n+    while (__iter != __free_list.end())\n       {\n \t::operator delete((void*)*__iter);\n \t++__iter;\n       }\n-    _S_free_list.clear();\n+    __free_list.clear();\n   }\n \n   // Instantiations."}]}