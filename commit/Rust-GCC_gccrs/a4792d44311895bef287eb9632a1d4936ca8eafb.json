{"sha": "a4792d44311895bef287eb9632a1d4936ca8eafb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3OTJkNDQzMTE4OTViZWYyODdlYjk2MzJhMWQ0OTM2Y2E4ZWFmYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-10-07T11:43:58Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-10-07T11:43:58Z"}, "message": "gfortran.h (async_io_dt): Add external reference.\n\n2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* gfortran.h (async_io_dt): Add external reference.\n\t* io.c (async_io_dt): Add variable.\n\t(compare_to_allowed_values): Add prototyte. Add optional argument\n\tnum. If present, set it to the number of the entry that was\n\tmatched.\n\t(check_io_constraints): If this is for an asynchronous I/O\n\tstatement, set async_io_dt and set the asynchronous flag for\n\ta SIZE tag.\n\t* resolve.c (resolve_transfer): If async_io_dt is set, set\n\tthe asynchronous flag on the variable.\n\t(resolve_fl_namelist): If async_io_dt is set, set the asynchronous\n\tflag on all elements of the namelist.\n\nFrom-SVN: r253508", "tree": {"sha": "1e150f3f71f1ff5c5c477a2e6ec7772f6630b939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e150f3f71f1ff5c5c477a2e6ec7772f6630b939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4792d44311895bef287eb9632a1d4936ca8eafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4792d44311895bef287eb9632a1d4936ca8eafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4792d44311895bef287eb9632a1d4936ca8eafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4792d44311895bef287eb9632a1d4936ca8eafb/comments", "author": null, "committer": null, "parents": [{"sha": "e923330e1bc5401844a5969f1fd0dab3cd985095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e923330e1bc5401844a5969f1fd0dab3cd985095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e923330e1bc5401844a5969f1fd0dab3cd985095"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "8d3e35f0e7d5785563b9cf311c878b98436654da", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a4792d44311895bef287eb9632a1d4936ca8eafb", "patch": "@@ -1,3 +1,18 @@\n+2017-10-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.h (async_io_dt): Add external reference.\n+\t* io.c (async_io_dt): Add variable.\n+\t(compare_to_allowed_values): Add prototyte. Add optional argument\n+\tnum. If present, set it to the number of the entry that was\n+\tmatched.\n+\t(check_io_constraints): If this is for an asynchronous I/O\n+\tstatement, set async_io_dt and set the asynchronous flag for\n+\ta SIZE tag.\n+\t* resolve.c (resolve_transfer): If async_io_dt is set, set\n+\tthe asynchronous flag on the variable.\n+\t(resolve_fl_namelist): If async_io_dt is set, set the asynchronous\n+\tflag on all elements of the namelist.\n+\n 2017-10-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/60458"}, {"sha": "b5fc1452747bcb3781de438e68c2d338d71e6f82", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a4792d44311895bef287eb9632a1d4936ca8eafb", "patch": "@@ -3311,6 +3311,7 @@ void gfc_free_dt (gfc_dt *);\n bool gfc_resolve_dt (gfc_dt *, locus *);\n void gfc_free_wait (gfc_wait *);\n bool gfc_resolve_wait (gfc_wait *);\n+extern bool async_io_dt;\n \n /* module.c */\n void gfc_module_init_2 (void);"}, {"sha": "463c00c2b2924fc90662690776ef672ca9cf7ddd", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=a4792d44311895bef287eb9632a1d4936ca8eafb", "patch": "@@ -111,6 +111,9 @@ static gfc_dt *current_dt;\n \n #define RESOLVE_TAG(x, y) if (!resolve_tag (x, y)) return false;\n \n+/* Are we currently processing an asynchronous I/O statement? */\n+\n+bool async_io_dt;\n \n /**************** Fortran 95 FORMAT parser  *****************/\n \n@@ -1944,7 +1947,15 @@ static int\n compare_to_allowed_values (const char *specifier, const char *allowed[],\n \t\t\t   const char *allowed_f2003[], \n \t\t\t   const char *allowed_gnu[], gfc_char_t *value,\n-\t\t\t   const char *statement, bool warn)\n+\t\t\t   const char *statement, bool warn,\n+\t\t\t   int *num = NULL);\n+\n+\n+static int\n+compare_to_allowed_values (const char *specifier, const char *allowed[],\n+\t\t\t   const char *allowed_f2003[], \n+\t\t\t   const char *allowed_gnu[], gfc_char_t *value,\n+\t\t\t   const char *statement, bool warn, int *num)\n {\n   int i;\n   unsigned int len;\n@@ -1961,7 +1972,11 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n   for (i = 0; allowed[i]; i++)\n     if (len == strlen (allowed[i])\n \t&& gfc_wide_strncasecmp (value, allowed[i], strlen (allowed[i])) == 0)\n+      {\n+\tif (num)\n+\t  *num = i;\n       return 1;\n+      }\n \n   for (i = 0; allowed_f2003 && allowed_f2003[i]; i++)\n     if (len == strlen (allowed_f2003[i])\n@@ -3611,7 +3626,8 @@ terminate_io (gfc_code *io_code)\n \n /* Check the constraints for a data transfer statement.  The majority of the\n    constraints appearing in 9.4 of the standard appear here.  Some are handled\n-   in resolve_tag and others in gfc_resolve_dt.  */\n+   in resolve_tag and others in gfc_resolve_dt.  Also set the async_io_dt flag\n+   and, if necessary, the asynchronous flag on the SIZE argument.  */\n \n static match\n check_io_constraints (io_kind k, gfc_dt *dt, gfc_code *io_code,\n@@ -3719,6 +3735,7 @@ if (condition) \\\n \n   if (dt->asynchronous) \n     {\n+      int num;\n       static const char * asynchronous[] = { \"YES\", \"NO\", NULL };\n \n       if (!gfc_reduce_init_expr (dt->asynchronous))\n@@ -3734,9 +3751,16 @@ if (condition) \\\n       if (!compare_to_allowed_values\n \t\t(\"ASYNCHRONOUS\", asynchronous, NULL, NULL,\n \t\t dt->asynchronous->value.character.string,\n-\t\t io_kind_name (k), warn))\n+\t\t io_kind_name (k), warn, &num))\n \treturn MATCH_ERROR;\n+\n+      /* Best to put this here because the yes/no info is still around.  */\n+      async_io_dt = num == 0;\n+      if (async_io_dt && dt->size)\n+\tdt->size->symtree->n.sym->attr.asynchronous = 1;\n     }\n+  else\n+    async_io_dt = false;\n \n   if (dt->id)\n     {"}, {"sha": "fab7c230c1a858d96f7817fe8014b9e76035a7b6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4792d44311895bef287eb9632a1d4936ca8eafb/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a4792d44311895bef287eb9632a1d4936ca8eafb", "patch": "@@ -9196,6 +9196,9 @@ resolve_transfer (gfc_code *code)\n \t\t \"an assumed-size array\", &code->loc);\n       return;\n     }\n+\n+  if (async_io_dt && exp->expr_type == EXPR_VARIABLE)\n+    exp->symtree->n.sym->attr.asynchronous = 1;\n }\n \n \n@@ -14079,6 +14082,11 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t}\n     }\n \n+  if (async_io_dt)\n+    {\n+      for (nl = sym->namelist; nl; nl = nl->next)\n+\tnl->sym->attr.asynchronous = 1;\n+    }\n   return true;\n }\n "}]}