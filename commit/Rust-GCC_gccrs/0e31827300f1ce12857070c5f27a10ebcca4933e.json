{"sha": "0e31827300f1ce12857070c5f27a10ebcca4933e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzMTgyNzMwMGYxY2UxMjg1NzA3MGM1ZjI3YTEwZWJjY2E0OTMzZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-04T12:21:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-04T12:21:06Z"}, "message": "Implement polymorphic_allocator<byte> for C++20 (P0339R6)\n\n\t* include/std/memory_resource (polymorphic_allocator): Add default\n\ttemplate argument for C++20.\n\t(polymorphic_allocator::allocate_bytes)\n\t(polymorphic_allocator::deallocate_bytes)\n\t(polymorphic_allocator::allocate_object)\n\t(polymorphic_allocator::deallocate_object)\n\t(polymorphic_allocator::new_object)\n\t(polymorphic_allocator::delete_object): New member functions for\n\tC++20.\n\t* testsuite/20_util/polymorphic_allocator/allocate_object.cc: New\n\ttest.\n\nFrom-SVN: r269362", "tree": {"sha": "2e95c301a67b9672266bce31c42a09af94659cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e95c301a67b9672266bce31c42a09af94659cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e31827300f1ce12857070c5f27a10ebcca4933e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e31827300f1ce12857070c5f27a10ebcca4933e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e31827300f1ce12857070c5f27a10ebcca4933e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e31827300f1ce12857070c5f27a10ebcca4933e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4450491148133f3825470a6c69d90c745986fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4450491148133f3825470a6c69d90c745986fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4450491148133f3825470a6c69d90c745986fe8"}], "stats": {"total": 157, "additions": 155, "deletions": 2}, "files": [{"sha": "334cd1f84329e78fc36b865676b169e1d23bb670", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e31827300f1ce12857070c5f27a10ebcca4933e", "patch": "@@ -1,3 +1,17 @@\n+2019-03-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (polymorphic_allocator): Add default\n+\ttemplate argument for C++20.\n+\t(polymorphic_allocator::allocate_bytes)\n+\t(polymorphic_allocator::deallocate_bytes)\n+\t(polymorphic_allocator::allocate_object)\n+\t(polymorphic_allocator::deallocate_object)\n+\t(polymorphic_allocator::new_object)\n+\t(polymorphic_allocator::delete_object): New member functions for\n+\tC++20.\n+\t* testsuite/20_util/polymorphic_allocator/allocate_object.cc: New\n+\ttest.\n+\n 2019-03-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/89562"}, {"sha": "7f1f0ca5e916e9fddebab71c130d299efaa9e16c", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=0e31827300f1ce12857070c5f27a10ebcca4933e", "patch": "@@ -33,11 +33,13 @@\n \n #if __cplusplus >= 201703L\n \n+#include <limits>\t\t\t// numeric_limits\n #include <memory>\t\t\t// align, allocator_arg_t, __uses_alloc\n #include <utility>\t\t\t// pair, index_sequence\n #include <vector>\t\t\t// vector\n-#include <cstddef>\t\t\t// size_t, max_align_t\n+#include <cstddef>\t\t\t// size_t, max_align_t, byte\n #include <shared_mutex>\t\t\t// shared_mutex\n+#include <bits/functexcept.h>\n #include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -55,8 +57,13 @@ namespace pmr\n \n   class memory_resource;\n \n+#if __cplusplus == 201703L\n   template<typename _Tp>\n     class polymorphic_allocator;\n+#else // C++20\n+  template<typename _Tp = std::byte>\n+    class polymorphic_allocator;\n+#endif\n \n   // Global memory resources\n   memory_resource* new_delete_resource() noexcept;\n@@ -170,7 +177,59 @@ namespace pmr\n       __attribute__((__nonnull__))\n       { _M_resource->deallocate(__p, __n * sizeof(_Tp), alignof(_Tp)); }\n \n-#if __cplusplus <= 201703L\n+#if __cplusplus > 201703L\n+      void*\n+      allocate_bytes(size_t __nbytes,\n+\t\t     size_t __alignment = alignof(max_align_t))\n+      { return _M_resource->allocate(__nbytes, __alignment); }\n+\n+      void\n+      deallocate_bytes(void* __p, size_t __nbytes,\n+\t\t       size_t __alignment = alignof(max_align_t))\n+      { _M_resource->deallocate(__p, __nbytes, __alignment); }\n+\n+      template<typename _Up>\n+\t_Up*\n+\tallocate_object(size_t __n = 1)\n+\t{\n+\t  if ((std::numeric_limits<size_t>::max() / sizeof(_Up)) < __n)\n+\t    __throw_length_error(\"polymorphic_allocator::allocate_object\");\n+\t  return static_cast<_Up*>(allocate_bytes(__n * sizeof(_Up),\n+\t\t\t\t\t\t  alignof(_Up)));\n+\t}\n+\n+      template<typename _Up>\n+\tvoid\n+\tdeallocate_object(_Up* __p, size_t __n = 1)\n+\t{ deallocate_bytes(__p, __n * sizeof(_Up), alignof(_Up)); }\n+\n+      template<typename _Up, typename... _CtorArgs>\n+\t_Up*\n+\tnew_object(_CtorArgs&&... __ctor_args)\n+\t{\n+\t  _Up* __p = allocate_object<_Up>();\n+\t  __try\n+\t    {\n+\t      construct(__p, std::forward<_CtorArgs>(__ctor_args)...);\n+\t    }\n+\t  __catch (...)\n+\t    {\n+\t      deallocate_object(__p);\n+\t      __throw_exception_again;\n+\t    }\n+\t  return __p;\n+\t}\n+\n+      template<typename _Up>\n+\tvoid\n+\tdelete_object(_Up* __p)\n+\t{\n+\t  destroy(__p);\n+\t  deallocate_object(__p);\n+\t}\n+#endif // C++2a\n+\n+#if __cplusplus == 201703L\n       template<typename _Tp1, typename... _Args>\n \t__attribute__((__nonnull__))\n \ttypename __not_pair<_Tp1>::type"}, {"sha": "cbaccf6f5b02abc78810e14b24165beb9c662c57", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/allocate_object.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fallocate_object.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e31827300f1ce12857070c5f27a10ebcca4933e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fallocate_object.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fallocate_object.cc?ref=0e31827300f1ce12857070c5f27a10ebcca4933e", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory_resource>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void\n+test01()\n+{\n+  __gnu_test::memory_resource res;\n+  std::pmr::polymorphic_allocator<> alloc(&res);\n+  static_assert( std::is_same_v<decltype(alloc)::value_type, std::byte> );\n+\n+  void* p = alloc.allocate_bytes(100);\n+  VERIFY( res.number_of_active_allocations() == 1 );\n+  alloc.deallocate_bytes(p, 100);\n+  VERIFY( res.number_of_active_allocations() == 0 );\n+  p = alloc.allocate_bytes(100, 64);\n+  VERIFY( res.number_of_active_allocations() == 1 );\n+  alloc.deallocate_bytes(p, 100, 64);\n+  VERIFY( res.number_of_active_allocations() == 0 );\n+\n+  int* p1 = alloc.allocate_object<int>();\n+  int* p2 = alloc.allocate_object<int>(2);\n+  struct X { double d[10]; };\n+  X* px = alloc.allocate_object<X>(20);\n+  VERIFY( res.number_of_active_allocations() == 3 );\n+\n+  alloc.deallocate_object(p1);\n+  alloc.deallocate_object(p2, 2);\n+  alloc.deallocate_object(px, 20);\n+  VERIFY( res.number_of_active_allocations() == 0 );\n+\n+  struct Y {\n+    Y(int i, const char* s, bool* alive)\n+    : i(i), s(s), alive(alive)\n+    { *alive = true; }\n+\n+    ~Y() { *alive = false; }\n+\n+    int i;\n+    const char* s;\n+    bool* alive;\n+  };\n+\n+  bool alive = false;\n+  Y* py = alloc.new_object<Y>(1, \"two\", &alive);\n+  VERIFY( alive );\n+  VERIFY( py->i == 1 );\n+  VERIFY( std::strcmp(py->s, \"two\") == 0 );\n+  VERIFY( res.number_of_active_allocations() == 1 );\n+\n+  alloc.delete_object(py);\n+  VERIFY( alive == false );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}