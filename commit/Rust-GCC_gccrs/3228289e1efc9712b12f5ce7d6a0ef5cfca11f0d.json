{"sha": "3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyODI4OWUxZWZjOTcxMmIxMmY1Y2U3ZDZhMGVmNWNmY2ExMWYwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-31T10:35:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-31T10:35:11Z"}, "message": "PR libstdc++/90682 allow set_terminate(0) and set_unexpected(0)\n\nMake these functions restore the default handlers when passed a null\npointer. This is consistent with std::pmr::set_default_resource(0), and\nalso matches the current behaviour of libc++.\n\nIn order to avoid duplicating the preprocessor condition from\neh_term_handler.cc more that into a new eh_term_handler.h header and\ndefine a macro that can be used in both eh_term_handler.cc and\neh_terminate.cc.\n\n\tPR libstdc++/90682\n\t* libsupc++/eh_term_handler.cc: Include eh_term_handler.h to get\n\tdefinition of _GLIBCXX_DEFAULT_TERM_HANDLER.\n\t* libsupc++/eh_term_handler.h: New header defining\n\t_GLIBCXX_DEFAULT_TERM_HANDLER.\n\t* libsupc++/eh_terminate.cc: Include eh_term_handler.h.\n\t(set_terminate): Restore default handler when argument is null.\n\t(set_unexpected): Likewise.\n\t* testsuite/18_support/set_terminate.cc: New test.\n\t* testsuite/18_support/set_unexpected.cc: New test.\n\nFrom-SVN: r271808", "tree": {"sha": "904ea855a043d873ca2e0eb6ba020f869fb4e4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904ea855a043d873ca2e0eb6ba020f869fb4e4bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3"}], "stats": {"total": 186, "additions": 171, "deletions": 15}, "files": [{"sha": "ac97f0e8d764c243828d8c720dcf6f4ba6e7292f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -1,5 +1,16 @@\n 2019-05-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90682\n+\t* libsupc++/eh_term_handler.cc: Include eh_term_handler.h to get\n+\tdefinition of _GLIBCXX_DEFAULT_TERM_HANDLER.\n+\t* libsupc++/eh_term_handler.h: New header defining\n+\t_GLIBCXX_DEFAULT_TERM_HANDLER.\n+\t* libsupc++/eh_terminate.cc: Include eh_term_handler.h.\n+\t(set_terminate): Restore default handler when argument is null.\n+\t(set_unexpected): Likewise.\n+\t* testsuite/18_support/set_terminate.cc: New test.\n+\t* testsuite/18_support/set_unexpected.cc: New test.\n+\n \t* include/backward/hashtable.h (size_t, ptrdiff_t)\n \t(forward_iterator_tag, input_iterator_tag, _Construct, _Destroy)\n \t(distance, vector, pair, __iterator_category): Remove"}, {"sha": "4b330bc91776e49456e3eae3e1127f3b9023c7f4", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -24,21 +24,8 @@\n \n #include <bits/c++config.h>\n #include \"unwind-cxx.h\"\n+#include \"eh_term_handler.h\"\n \n-/* We default to the talkative, informative handler in a normal hosted\n-   library.  This pulls in the demangler, the dyn-string utilities, and\n-   elements of the I/O library.  For a low-memory environment, you can return\n-   to the earlier \"silent death\" handler by configuring GCC with\n-   --disable-libstdcxx-verbose and rebuilding the library.\n-   In a freestanding environment, we default to this latter approach.  */\n-\n-#if _GLIBCXX_HOSTED && _GLIBCXX_VERBOSE && __cpp_exceptions\n /* The current installed user handler.  */\n std::terminate_handler __cxxabiv1::__terminate_handler =\n-\t__gnu_cxx::__verbose_terminate_handler;\n-#else\n-# include <cstdlib>\n-/* The current installed user handler.  */\n-std::terminate_handler __cxxabiv1::__terminate_handler = std::abort;\n-#endif\n-\n+\t_GLIBCXX_DEFAULT_TERM_HANDLER;"}, {"sha": "e4774bdf9c55cce94e451f926cf4e4b905974b0a", "filename": "libstdc++-v3/libsupc++/eh_term_handler.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.h?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- default std::terminate handler\n+// Copyright (C) 2002-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/c++config.h>\n+\n+/* We default to the talkative, informative handler in a normal hosted\n+   library.  This pulls in the demangler, the dyn-string utilities, and\n+   elements of the I/O library.  For a low-memory environment, you can return\n+   to the earlier \"silent death\" handler by configuring GCC with\n+   --disable-libstdcxx-verbose and rebuilding the library.\n+   In a freestanding environment, we default to this latter approach.  */\n+\n+#if _GLIBCXX_HOSTED && _GLIBCXX_VERBOSE && __cpp_exceptions\n+# define _GLIBCXX_DEFAULT_TERM_HANDLER __gnu_cxx::__verbose_terminate_handler\n+#else\n+# include <cstdlib>\n+# define _GLIBCXX_DEFAULT_TERM_HANDLER std::abort\n+#endif"}, {"sha": "d5f24ea10000a4113ff12c432f7e155ea5af6c61", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -26,6 +26,7 @@\n #include \"exception\"\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n+#include \"eh_term_handler.h\"\n #include <bits/exception_defines.h>\n #include <bits/atomic_lockfree_defines.h>\n \n@@ -73,6 +74,9 @@ std::unexpected ()\n std::terminate_handler\n std::set_terminate (std::terminate_handler func) throw()\n {\n+  if (!func)\n+    func = _GLIBCXX_DEFAULT_TERM_HANDLER;\n+\n   std::terminate_handler old;\n #if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_exchange (&__terminate_handler, &func, &old, __ATOMIC_ACQ_REL);\n@@ -100,6 +104,9 @@ std::get_terminate () noexcept\n std::unexpected_handler\n std::set_unexpected (std::unexpected_handler func) throw()\n {\n+  if (!func)\n+    func = std::terminate;\n+\n   std::unexpected_handler old;\n #if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_exchange (&__unexpected_handler, &func, &old, __ATOMIC_ACQ_REL);"}, {"sha": "632b9f1974a9becf7922076e5865ef210e194db5", "filename": "libstdc++-v3/testsuite/18_support/set_terminate.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+void term_handler() { __builtin_abort(); }\n+\n+void\n+test01()\n+{\n+  const std::terminate_handler orig = std::get_terminate();\n+  VERIFY( orig != 0 ); // GNU-specific behaviour\n+\n+  std::terminate_handler prev = std::set_terminate(term_handler);\n+  VERIFY( std::get_terminate() == term_handler );\n+  VERIFY( prev == orig );\n+\n+  prev = std::set_terminate(orig);\n+  VERIFY( std::get_terminate() == orig );\n+  VERIFY( prev == term_handler );\n+}\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/90682\n+  std::set_terminate(0); // Undefined in C++98, unspecified in C++11 and later\n+  const std::terminate_handler dfault = std::get_terminate();\n+  VERIFY( dfault != 0 ); // GNU-specific behaviour\n+  const std::terminate_handler prev = std::set_terminate(0);\n+  VERIFY( prev == dfault );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "dac44e616cd29e4a22d7496c3c9f67af3f12f34f", "filename": "libstdc++-v3/testsuite/18_support/set_unexpected.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc?ref=3228289e1efc9712b12f5ce7d6a0ef5cfca11f0d", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target { c++98_only || { c++11_only || c++14_only } } } }\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+void unex_handler() { __builtin_abort(); }\n+\n+void\n+test01()\n+{\n+  const std::unexpected_handler orig = std::get_unexpected();\n+  VERIFY( orig == std::terminate ); // GNU-specific behaviour\n+\n+  std::unexpected_handler prev = std::set_unexpected(unex_handler);\n+  VERIFY( std::get_unexpected() == unex_handler );\n+  VERIFY( prev == orig );\n+\n+  prev = std::set_unexpected(orig);\n+  VERIFY( std::get_unexpected() == orig );\n+  VERIFY( prev == unex_handler );\n+}\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/90682\n+  std::set_unexpected(0); // Undefined in C++98, unspecified in C++11 and C++14\n+  const std::unexpected_handler dfault = std::get_unexpected();\n+  VERIFY( dfault == std::terminate ); // GNU-specific behaviour\n+  const std::unexpected_handler prev = std::set_unexpected(0);\n+  VERIFY( prev == dfault );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}