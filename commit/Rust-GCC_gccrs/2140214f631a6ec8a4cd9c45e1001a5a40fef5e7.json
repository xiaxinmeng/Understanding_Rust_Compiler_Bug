{"sha": "2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0MDIxNGY2MzFhNmVjOGE0Y2Q5YzQ1ZTEwMDFhNWE0MGZlZjVlNw==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2004-05-27T02:08:34Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-05-27T02:08:34Z"}, "message": "re PR libgcj/8321 (SimpleTimeZone doesn't work properly for daylight saving time.)\n\n2004-05-26  Jerry Quinn  <jlquinn@optonline.net>\n\n\tPR libgcj/8321\n\t* java/util/SimpleTimeZone.java (serialVersionOnStream): Bump to 2.\n\t(setStartRule,setEndRule): Don't take abs of day number.\n\t(getOffset): Clarify docs.  Add argument checks.\n\t(isBefore): Take abs of day number in DOW_LE_DOM_MODE.\n\t(equals,hasSameRules,toString,readObject): Use startTimeMode and\n\tendTimeMode.\n\t* testsuite/libjava.mauve/xfails\n\t(gnu.testlet.java.util.SimpleTimeZone.check12): XFAIL test 22.\n\nFrom-SVN: r82310", "tree": {"sha": "afe68cde8d22e87e41478522efdd88c28e5c4f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afe68cde8d22e87e41478522efdd88c28e5c4f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67d060c4edc01f4a2a92b05fba4fb07ba43b216a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d060c4edc01f4a2a92b05fba4fb07ba43b216a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67d060c4edc01f4a2a92b05fba4fb07ba43b216a"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "0ad3633277a1941023e04bd3d25c0273bb6531c1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "patch": "@@ -1,3 +1,15 @@\n+2004-05-26  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\tPR libgcj/8321\n+\t* java/util/SimpleTimeZone.java (serialVersionOnStream): Bump to 2.\n+\t(setStartRule,setEndRule): Don't take abs of day number.\n+\t(getOffset): Clarify docs.  Add argument checks.\n+\t(isBefore): Take abs of day number in DOW_LE_DOM_MODE.\n+\t(equals,hasSameRules,toString,readObject): Use startTimeMode and\n+\tendTimeMode.\n+\t* testsuite/libjava.mauve/xfails\n+\t(gnu.testlet.java.util.SimpleTimeZone.check12): XFAIL test 22.\n+\n 2004-05-21  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tLayout interfaces during preparation, not initialization. "}, {"sha": "2d92e31b57609e96bb95553db71f76fb0b66c5e3", "filename": "libjava/java/util/SimpleTimeZone.java", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSimpleTimeZone.java?ref=2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "patch": "@@ -234,7 +234,7 @@ public class SimpleTimeZone extends TimeZone\n    * @serial\n    * @since JDK1.1.4 \n    */\n-  private int serialVersionOnStream = 1;\n+  private int serialVersionOnStream = 2;\n \n   private static final long serialVersionUID = -403250971215465050L;\n \n@@ -477,9 +477,7 @@ public void setStartRule(int month, int day, int dayOfWeek, int time)\n   {\n     this.startMode = checkRule(month, day, dayOfWeek);\n     this.startMonth = month;\n-    // FIXME: XXX: JDK 1.2 allows negative values and has 2 new variations\n-    // of this method.\n-    this.startDay = Math.abs(day);\n+    this.startDay = day;\n     this.startDayOfWeek = Math.abs(dayOfWeek);\n     if (this.startTimeMode == WALL_TIME || this.startTimeMode == STANDARD_TIME)\n       this.startTime = time;\n@@ -570,9 +568,7 @@ public void setEndRule(int month, int day, int dayOfWeek, int time)\n   {\n     this.endMode = checkRule(month, day, dayOfWeek);\n     this.endMonth = month;\n-    // FIXME: XXX: JDK 1.2 allows negative values and has 2 new variations\n-    // of this method.\n-    this.endDay = Math.abs(day);\n+    this.endDay = day;\n     this.endDayOfWeek = Math.abs(dayOfWeek);\n     if (this.endTimeMode == WALL_TIME)\n       this.endTime = time;\n@@ -660,21 +656,33 @@ public void setEndRule(int month, int day, int time)\n    * <code>offset = cal.get(Calendar.ZONE_OFFSET)\n    * + cal.get(Calendar.DST_OFFSET);</code>\n    *\n-   * You could also use in\n-   *\n    * This version doesn't suffer this inaccuracy.\n    *\n+   * The arguments don't follow the approach for setting start and end rules.\n+   * The day must be a positive number and dayOfWeek must be a positive value\n+   * from Calendar.  dayOfWeek is redundant, but must match the other values\n+   * or an inaccurate result may be returned.\n+   *\n    * @param era the era of the given date\n    * @param year the year of the given date\n    * @param month the month of the given date, 0 for January.\n    * @param day the day of month\n-   * @param dayOfWeek the day of week; this must be matching the\n-   * other fields.\n+   * @param dayOfWeek the day of week; this must match the other fields.\n    * @param millis the millis in the day (in local standard time)\n-   * @return the time zone offset in milliseconds.  */\n+   * @return the time zone offset in milliseconds.\n+   * @throws IllegalArgumentException if arguments are incorrect.\n+   */\n   public int getOffset(int era, int year, int month,\n \t\t       int day, int dayOfWeek, int millis)\n   {\n+    int daysInMonth = getDaysInMonth(month, 1);\n+    if (day < 1 || day > daysInMonth)\n+      throw new IllegalArgumentException(\"day out of range\");\n+    if (dayOfWeek < Calendar.SUNDAY || dayOfWeek > Calendar.SATURDAY)\n+      throw new IllegalArgumentException(\"dayOfWeek out of range\");\n+    if (month < Calendar.JANUARY || month > Calendar.DECEMBER)\n+      throw new IllegalArgumentException(\"month out of range\");\n+\n     // This method is called by Calendar, so we mustn't use that class.\n     int daylightSavings = 0;\n     if (useDaylight && era == GregorianCalendar.AD && year >= startYear)\n@@ -785,7 +793,7 @@ else if (month < Calendar.AUGUST)\n   /**\n    * Checks if the date given in calXXXX, is before the change between\n    * dst and standard time.\n-   * @param calYear the year of the date to check (for leap day cheking).\n+   * @param calYear the year of the date to check (for leap day checking).\n    * @param calMonth the month of the date to check.\n    * @param calDay the day of month of the date to check.\n    * @param calDayOfWeek the day of week of the date to check.\n@@ -870,7 +878,7 @@ private boolean isBefore(int calYear,\n       case DOW_LE_DOM_MODE:\n \t// The greatest sunday before or equal December, 12\n \t// is the same as smallest sunday after or equal December, 6.\n-\tday -= 6;\n+\tday = Math.abs(day) - 6;\n \n       case DOW_GE_DOM_MODE:\n \n@@ -931,10 +939,12 @@ public synchronized boolean equals(Object o)\n \t    && startDay == zone.startDay\n \t    && startDayOfWeek == zone.startDayOfWeek\n \t    && startTime == zone.startTime\n+\t    && startTimeMode == zone.startTimeMode\n \t    && endMonth == zone.endMonth\n \t    && endDay == zone.endDay\n \t    && endDayOfWeek == zone.endDayOfWeek\n-\t    && endTime == zone.endTime);\n+\t    && endTime == zone.endTime\n+\t    && endTimeMode == zone.endTimeMode);\n   }\n \n   /**\n@@ -962,9 +972,12 @@ public boolean hasSameRules(TimeZone other)\n \t    && startDay == zone.startDay\n \t    && startDayOfWeek == zone.startDayOfWeek\n \t    && startTime == zone.startTime\n+\t    && startTimeMode == zone.startTimeMode\n \t    && endMonth == zone.endMonth\n \t    && endDay == zone.endDay\n-\t    && endDayOfWeek == zone.endDayOfWeek && endTime == zone.endTime);\n+\t    && endDayOfWeek == zone.endDayOfWeek\n+\t    && endTime == zone.endTime\n+\t    && endTimeMode == zone.endTimeMode);\n   }\n \n   /**\n@@ -987,11 +1000,14 @@ public String toString()\n \t + \",startDay=\" + startDay\n \t + \",startDayOfWeek=\" + startDayOfWeek\n \t + \",startTime=\" + startTime\n+\t + \",startTimeMode=\" + startTimeMode\n \t + \",endMode=\" + endMode\n \t + \",endMonth=\" + endMonth\n \t + \",endDay=\" + endDay\n \t + \",endDayOfWeek=\" + endDayOfWeek\n-\t + \",endTime=\" + endTime : \"\") + \"]\";\n+\t + \",endTime=\" + endTime\n+\t + \",endTimeMode=\" + endTimeMode\n+\t : \"\") + \"]\";\n   }\n \n   /**\n@@ -1008,7 +1024,9 @@ private void readObject(java.io.ObjectInputStream input)\n \tdstSavings = 60 * 60 * 1000;\n \tendMode = DOW_IN_MONTH_MODE;\n \tstartMode = DOW_IN_MONTH_MODE;\n-\tserialVersionOnStream = 1;\n+\tstartTimeMode = WALL_TIME;\n+\tendTimeMode = WALL_TIME;\n+\tserialVersionOnStream = 2;\n       }\n     else\n       {"}, {"sha": "5f2f34a9ba79f828874d68009b9dc555d2edf4bc", "filename": "libjava/testsuite/libjava.mauve/xfails", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2Ftestsuite%2Flibjava.mauve%2Fxfails", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2140214f631a6ec8a4cd9c45e1001a5a40fef5e7/libjava%2Ftestsuite%2Flibjava.mauve%2Fxfails", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fxfails?ref=2140214f631a6ec8a4cd9c45e1001a5a40fef5e7", "patch": "@@ -140,3 +140,4 @@ FAIL: gnu.testlet.java.net.URLConnection.URLConnectionTest: Error in test_getHea\n FAIL: gnu.testlet.java.net.URL.URLTest: openStream (number 1)\n FAIL: gnu.testlet.java.net.URL.URLTest:  Error in test_toString  - 5  exception should not be thrown here (number 1)\n FAIL: gnu.testlet.java.net.MulticastSocket.MulticastSocketTest: joinGroup() twice. (number 1)\n+FAIL: gnu.testlet.java.util.SimpleTimeZone.check12 (number 22)"}]}