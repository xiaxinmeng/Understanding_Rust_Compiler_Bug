{"sha": "82f10dee344bf0807cab9f32745b35af3f2139d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmMTBkZWUzNDRiZjA4MDdjYWI5ZjMyNzQ1YjM1YWYzZjIxMzlkOA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-05-27T03:44:50Z"}, "committer": {"name": "Carl Love", "email": "carll@us.ibm.com", "date": "2020-08-05T04:12:43Z"}, "message": "rs6000, Add vector shift double builtin support\n\nGCC maintainers:\n\nThe following patch adds support for the vector shift double builtins.\n\nThe patch has been compiled and tested on\n\n  powerpc64le-unknown-linux-gnu (Power 8 LE)\n  powerpc64le-unknown-linux-gnu (Power 9 LE)\n\nand Mambo with no regression errors.\n\nPlease let me know if this patch is acceptable for the mainline branch.\n\nThanks.\n\n                         Carl Love\n\n-------------------------------------------------------\n\ngcc/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_sldb, vec_srdb): New defines.\n\t* config/rs6000/altivec.md (UNSPEC_SLDB, UNSPEC_SRDB): New.\n\t(SLDB_lr): New attribute.\n\t(VSHIFT_DBL_LR): New iterator.\n\t(vs<SLDB_lr>db_<mode>): New define_insn.\n\t* config/rs6000/rs6000-builtin.def (VSLDB_V16QI, VSLDB_V8HI,\n\tVSLDB_V4SI, VSLDB_V2DI, VSRDB_V16QI, VSRDB_V8HI, VSRDB_V4SI,\n\tVSRDB_V2DI): New BU_P10V_3 definitions.\n\t(SLDB, SRDB): New BU_P10_OVERLOAD_3 definitions.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_SLDB,\n\tP10_BUILTIN_VEC_SRDB): New definitions.\n\t(rs6000_expand_ternop_builtin) [CODE_FOR_vsldb_v16qi,\n\tCODE_FOR_vsldb_v8hi, CODE_FOR_vsldb_v4si, CODE_FOR_vsldb_v2di,\n\tCODE_FOR_vsrdb_v16qi, CODE_FOR_vsrdb_v8hi, CODE_FOR_vsrdb_v4si,\n\tCODE_FOR_vsrdb_v2di]: Add clauses.\n\t* doc/extend.texi: Add description for vec_sldb and vec_srdb.\n\ngcc/testsuite/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/vec-shift-double-runnable.c:  New test file.", "tree": {"sha": "e25d1489b98335599f579a606919e0cf3c104819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e25d1489b98335599f579a606919e0cf3c104819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f10dee344bf0807cab9f32745b35af3f2139d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f10dee344bf0807cab9f32745b35af3f2139d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f10dee344bf0807cab9f32745b35af3f2139d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f10dee344bf0807cab9f32745b35af3f2139d8/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f029aea51a9b48b03a0671e445339a5ab1607eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f029aea51a9b48b03a0671e445339a5ab1607eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f029aea51a9b48b03a0671e445339a5ab1607eb"}], "stats": {"total": 539, "additions": 539, "deletions": 0}, "files": [{"sha": "1a5c216ce6cf82ad2f354bff787b6e435033f92c", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -707,6 +707,8 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_inserth(a, b, c)   __builtin_vec_inserth (a, b, c)\n #define vec_replace_elt(a, b, c)       __builtin_vec_replace_elt (a, b, c)\n #define vec_replace_unaligned(a, b, c) __builtin_vec_replace_un (a, b, c)\n+#define vec_sldb(a, b, c)      __builtin_vec_sldb (a, b, c)\n+#define vec_srdb(a, b, c)      __builtin_vec_srdb (a, b, c)\n \n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)"}, {"sha": "9d9734114acce665aed0e118e82bedf0a39edd2e", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -173,6 +173,8 @@\n    UNSPEC_XXEVAL\n    UNSPEC_VSTRIR\n    UNSPEC_VSTRIL\n+   UNSPEC_SLDB\n+   UNSPEC_SRDB\n ])\n \n (define_c_enum \"unspecv\"\n@@ -783,6 +785,22 @@\n   DONE;\n })\n \n+;; Map UNSPEC_SLDB to \"l\" and  UNSPEC_SRDB to \"r\".\n+(define_int_attr SLDB_lr [(UNSPEC_SLDB \"l\")\n+\t\t\t  (UNSPEC_SRDB \"r\")])\n+\n+(define_int_iterator VSHIFT_DBL_LR [UNSPEC_SLDB UNSPEC_SRDB])\n+\n+(define_insn \"vs<SLDB_lr>db_<mode>\"\n+ [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+  (unspec:VI2 [(match_operand:VI2 1 \"register_operand\" \"v\")\n+\t       (match_operand:VI2 2 \"register_operand\" \"v\")\n+\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n+\t      VSHIFT_DBL_LR))]\n+  \"TARGET_POWER10\"\n+  \"vs<SLDB_lr>dbi %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]"}, {"sha": "bfb3376e97ef57cf80e6eda06e2e20cb5e47295d", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -2764,6 +2764,16 @@ BU_P10V_3 (VREPLACE_UN_V2DI, \"vreplace_un_v2di\", CONST, vreplace_un_v2di)\n BU_P10V_3 (VREPLACE_UN_UV2DI, \"vreplace_un_uv2di\", CONST, vreplace_un_v2di)\n BU_P10V_3 (VREPLACE_UN_V2DF, \"vreplace_un_v2df\", CONST, vreplace_un_v2df)\n \n+BU_P10V_3 (VSLDB_V16QI, \"vsldb_v16qi\", CONST, vsldb_v16qi)\n+BU_P10V_3 (VSLDB_V8HI, \"vsldb_v8hi\", CONST, vsldb_v8hi)\n+BU_P10V_3 (VSLDB_V4SI, \"vsldb_v4si\", CONST, vsldb_v4si)\n+BU_P10V_3 (VSLDB_V2DI, \"vsldb_v2di\", CONST, vsldb_v2di)\n+\n+BU_P10V_3 (VSRDB_V16QI, \"vsrdb_v16qi\", CONST, vsrdb_v16qi)\n+BU_P10V_3 (VSRDB_V8HI, \"vsrdb_v8hi\", CONST, vsrdb_v8hi)\n+BU_P10V_3 (VSRDB_V4SI, \"vsrdb_v4si\", CONST, vsrdb_v4si)\n+BU_P10V_3 (VSRDB_V2DI, \"vsrdb_v2di\", CONST, vsrdb_v2di)\n+\n BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2810,6 +2820,8 @@ BU_P10_OVERLOAD_3 (INSERTL, \"insertl\")\n BU_P10_OVERLOAD_3 (INSERTH, \"inserth\")\n BU_P10_OVERLOAD_3 (REPLACE_ELT, \"replace_elt\")\n BU_P10_OVERLOAD_3 (REPLACE_UN, \"replace_un\")\n+BU_P10_OVERLOAD_3 (SLDB, \"sldb\")\n+BU_P10_OVERLOAD_3 (SRDB, \"srdb\")\n \n BU_P10_OVERLOAD_1 (VSTRIR, \"strir\")\n BU_P10_OVERLOAD_1 (VSTRIL, \"stril\")"}, {"sha": "2955399a578b4986e988cfd4213a753af61b445f", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -5669,6 +5669,56 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P10_BUILTIN_VEC_REPLACE_UN, P10_BUILTIN_VREPLACE_UN_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_double, RS6000_BTI_INTQI },\n \n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SLDB, P10_BUILTIN_VSLDB_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n+\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n+\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n@@ -10124,6 +10174,26 @@ rs6000_expand_quaternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t}\n    }\n \n+  else if (icode == CODE_FOR_vsldb_v16qi\n+\t   || icode == CODE_FOR_vsldb_v8hi\n+\t   || icode == CODE_FOR_vsldb_v4si\n+\t   || icode == CODE_FOR_vsldb_v2di\n+\t   || icode == CODE_FOR_vsrdb_v16qi\n+\t   || icode == CODE_FOR_vsrdb_v8hi\n+\t   || icode == CODE_FOR_vsrdb_v4si\n+\t   || icode == CODE_FOR_vsrdb_v2di)\n+   {\n+     /* Check whether the 3rd argument is an integer constant in the range\n+\t0 to 7 inclusive.  */\n+     STRIP_NOPS (arg2);\n+     if (TREE_CODE (arg2) != INTEGER_CST\n+\t || !IN_RANGE (TREE_INT_CST_LOW (arg2), 0, 7))\n+\t{\n+\t  error (\"argument 3 must be a constant in the range 0 to 7\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+   }\n+\n   if (target == 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))"}, {"sha": "d74f3a62329fcc2ac24c35045c0a58b5668c09ef", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -21140,6 +21140,59 @@ The programmer is responsible for understanding the endianness issues involved\n with the first argument and the result.\n @findex vec_replace_unaligned\n \n+Vector Shift Left Double Bit Immediate\n+@smallexample\n+@exdent vector signed char vec_sldb (vector signed char, vector signed char,\n+const unsigned int);\n+@exdent vector unsigned char vec_sldb (vector unsigned char,\n+vector unsigned char, const unsigned int);\n+@exdent vector signed short vec_sldb (vector signed short, vector signed short,\n+const unsigned int);\n+@exdent vector unsigned short vec_sldb (vector unsigned short,\n+vector unsigned short, const unsigned int);\n+@exdent vector signed int vec_sldb (vector signed int, vector signed int,\n+const unsigned int);\n+@exdent vector unsigned int vec_sldb (vector unsigned int, vector unsigned int,\n+const unsigned int);\n+@exdent vector signed long long vec_sldb (vector signed long long,\n+vector signed long long, const unsigned int);\n+@exdent vector unsigned long long vec_sldb (vector unsigned long long,\n+vector unsigned long long, const unsigned int);\n+@end smallexample\n+\n+Shift the combined input vectors left by the amount specified by the low-order\n+three bits of the third argument, and return the leftmost remaining 128 bits.\n+Code using this instruction must be endian-aware.\n+\n+@findex vec_sldb\n+\n+Vector Shift Right Double Bit Immediate\n+\n+@smallexample\n+@exdent vector signed char vec_srdb (vector signed char, vector signed char,\n+const unsigned int);\n+@exdent vector unsigned char vec_srdb (vector unsigned char, vector unsigned char,\n+const unsigned int);\n+@exdent vector signed short vec_srdb (vector signed short, vector signed short,\n+const unsigned int);\n+@exdent vector unsigned short vec_srdb (vector unsigned short, vector unsigned short,\n+const unsigned int);\n+@exdent vector signed int vec_srdb (vector signed int, vector signed int,\n+const unsigned int);\n+@exdent vector unsigned int vec_srdb (vector unsigned int, vector unsigned int,\n+const unsigned int);\n+@exdent vector signed long long vec_srdb (vector signed long long,\n+vector signed long long, const unsigned int);\n+@exdent vector unsigned long long vec_srdb (vector unsigned long long,\n+vector unsigned long long, const unsigned int);\n+@end smallexample\n+\n+Shift the combined input vectors right by the amount specified by the low-order\n+three bits of the third argument, and return the remaining 128 bits.  Code\n+using this built-in must be endian-aware.\n+\n+@findex vec_srdb\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "13213bd22eef6ae5c5bfbe5a8f58ac52174c1505", "filename": "gcc/testsuite/gcc.target/powerpc/vec-shift-double-runnable.c", "status": "added", "additions": 384, "deletions": 0, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shift-double-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f10dee344bf0807cab9f32745b35af3f2139d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shift-double-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shift-double-runnable.c?ref=82f10dee344bf0807cab9f32745b35af3f2139d8", "patch": "@@ -0,0 +1,384 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+\n+  vector signed char vresult_char;\n+  vector signed char expected_vresult_char;\n+  vector signed char src_va_char;\n+  vector signed char src_vb_char;\n+\n+  vector unsigned char vresult_uchar;\n+  vector unsigned char expected_vresult_uchar;\n+  vector unsigned char src_va_uchar;\n+  vector unsigned char src_vb_uchar;\n+\n+  vector short int vresult_sh;\n+  vector short int expected_vresult_sh;\n+  vector short int src_va_sh;\n+  vector short int src_vb_sh;\n+\n+  vector short unsigned int vresult_ush;\n+  vector short unsigned int expected_vresult_ush;\n+  vector short unsigned int src_va_ush;\n+  vector short unsigned int src_vb_ush;\n+\n+  vector int vresult_int;\n+  vector int expected_vresult_int;\n+  vector int src_va_int;\n+  vector int src_vb_int;\n+  int src_a_int;\n+\n+  vector unsigned int vresult_uint;\n+  vector unsigned int expected_vresult_uint;\n+  vector unsigned int src_va_uint;\n+  vector unsigned int src_vb_uint;\n+  unsigned int src_a_uint;\n+\n+  vector long long int vresult_llint;\n+  vector long long int expected_vresult_llint;\n+  vector long long int src_va_llint;\n+  vector long long int src_vb_llint;\n+  long long int src_a_llint;\n+\n+  vector unsigned long long int vresult_ullint;\n+  vector unsigned long long int expected_vresult_ullint;\n+  vector unsigned long long int src_va_ullint;\n+  vector unsigned long long int src_vb_ullint;\n+  unsigned int long long src_a_ullint;\n+\n+  /* Vector shift double left */\n+  src_va_char = (vector signed char) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t       16, 18, 20, 22, 24, 26, 28, 30 }; \n+  src_vb_char = (vector signed char) { 10, 20, 30, 40, 50, 60, 70, 80, 90,\n+\t\t\t\t\t100, 110, 120, 130, 140, 150, 160 };\n+  vresult_char = (vector signed char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_char = (vector signed char) { 80, 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t\t 8, 9, 10, 11, 12, 13, 14 }; \n+\t\t\t\t\t\t \n+  vresult_char = vec_sldb (src_va_char, src_vb_char, 7);\n+\n+  if (!vec_all_eq (vresult_char,  expected_vresult_char)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_char_, src_vb_char, 7)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_char[%d] = %d, expected_vresult_char[%d] = %d\\n\",\n+\t     i, vresult_char[i], i, expected_vresult_char[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_uchar = (vector unsigned char) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30 }; \n+  src_vb_uchar = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 };\n+  vresult_uchar = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_uchar = (vector unsigned char) { 0, 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t\t    8, 9, 10, 11, 12, 13, 14 };\n+\t\t\t\t\t\t \n+  vresult_uchar = vec_sldb (src_va_uchar, src_vb_uchar, 7);\n+\n+  if (!vec_all_eq (vresult_uchar,  expected_vresult_uchar)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_uchar_, src_vb_uchar, 7)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_uchar[%d] = %d, expected_vresult_uchar[%d] = %d\\n\",\n+\t     i, vresult_uchar[i], i, expected_vresult_uchar[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_sh = (vector short int) { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  src_vb_sh = (vector short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  vresult_sh = (vector short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector short int) { 0, 2*128, 4*128, 6*128,\n+\t\t\t\t\t     8*128, 10*128, 12*128, 14*128 }; \n+\t\t\t\t\t\t \n+  vresult_sh = vec_sldb (src_va_sh, src_vb_sh, 7);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_sh_, src_vb_sh, 7)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_ush = (vector short unsigned int) { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  src_vb_ush = (vector short unsigned int) { 10, 20, 30, 40, 50, 60, 70, 80 };\n+  vresult_ush = (vector short unsigned int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ush = (vector short unsigned int) { 0, 2*128, 4*128, 6*128,\n+\t\t\t\t\t\t       8*128, 10*128, 12*128,\n+\t\t\t\t\t\t       14*128 }; \n+\t\t\t\t\t\t \n+  vresult_ush = vec_sldb (src_va_ush, src_vb_ush, 7);\n+\n+  if (!vec_all_eq (vresult_ush,  expected_vresult_ush)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_ush_, src_vb_ush, 7)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_ush[%d] = %d, expected_vresult_ush[%d] = %d\\n\",\n+\t     i, vresult_ush[i], i, expected_vresult_ush[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_int = (vector signed int) { 0, 2, 3, 1 };\n+  src_vb_int = (vector signed int) { 0, 0, 0, 0 };\n+  vresult_int = (vector signed int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector signed int) { 0, 2*128, 3*128, 1*128 }; \n+\t\t\t\t\t\t \n+  vresult_int = vec_sldb (src_va_int, src_vb_int, 7);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_int_, src_vb_int, 7)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_uint = (vector unsigned int) { 0, 2, 4, 6 };\n+  src_vb_uint = (vector unsigned int) { 10, 20, 30, 40 };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_uint = (vector unsigned int) { 0, 2*128, 4*128, 6*128 }; \n+\t\t\t\t\t\t \n+  vresult_uint = vec_sldb (src_va_uint, src_vb_uint, 7);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_uint_, src_vb_uint, 7)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_llint = (vector signed long long int) { 5, 6 };\n+  src_vb_llint = (vector signed long long int) { 0, 0 };\n+  vresult_llint = (vector signed long long int) { 0, 0 };\n+  expected_vresult_llint = (vector signed long long int) { 5*128, 6*128 }; \n+\t\t\t\t\t\t \n+  vresult_llint = vec_sldb (src_va_llint, src_vb_llint, 7);\n+\n+  if (!vec_all_eq (vresult_llint,  expected_vresult_llint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_llint_, src_vb_llint, 7)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_llint[%d] = %d, expected_vresult_llint[%d] = %d\\n\",\n+\t     i, vresult_llint[i], i, expected_vresult_llint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_ullint = (vector unsigned long long int) { 54, 26 };\n+  src_vb_ullint = (vector unsigned long long int) { 10, 20 };\n+  vresult_ullint = (vector unsigned long long int) { 0, 0 };\n+  expected_vresult_ullint = (vector unsigned long long int) { 54*128,\n+\t\t\t\t\t\t\t      26*128 }; \n+\t\t\t\t\t\t \n+  vresult_ullint = vec_sldb (src_va_ullint, src_vb_ullint, 7);\n+\n+  if (!vec_all_eq (vresult_ullint,  expected_vresult_ullint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_sldb (src_va_ullint_, src_vb_ullint, 7)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ullint[%d] = %d, expected_vresult_ullint[%d] = %d\\n\",\n+\t     i, vresult_ullint[i], i, expected_vresult_ullint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector shift double right */\n+  src_va_char = (vector signed char) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t       16, 18, 20, 22, 24, 26, 28, 30 }; \n+  src_vb_char = (vector signed char) { 10, 12, 14, 16, 18, 20, 22, 24, 26,\n+\t\t\t\t\t28, 30, 32, 34, 36, 38, 40 };\n+  vresult_char = (vector signed char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_char = (vector signed char) { 24, 28, 32, 36, 40, 44, 48,\n+\t\t\t\t\t\t 52, 56, 60, 64, 68, 72, 76,\n+\t\t\t\t\t\t 80, 0 }; \n+\t\t\t\t\t\t \n+  vresult_char = vec_srdb (src_va_char, src_vb_char, 7);\n+\n+  if (!vec_all_eq (vresult_char,  expected_vresult_char)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_char_, src_vb_char, 7)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_char[%d] = %d, expected_vresult_char[%d] = %d\\n\",\n+\t     i, vresult_char[i], i, expected_vresult_char[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_uchar = (vector unsigned char) { 100, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 };\n+  src_vb_uchar = (vector unsigned char) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30 }; \n+  vresult_uchar = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_uchar = (vector unsigned char) { 4, 8, 12, 16, 20, 24, 28,\n+\t\t\t\t\t\t    32, 36, 40, 44, 48, 52,\n+\t\t\t\t\t\t    56, 60, 200 };\n+\t\t\t\t\t\t \n+  vresult_uchar = vec_srdb (src_va_uchar, src_vb_uchar, 7);\n+\n+  if (!vec_all_eq (vresult_uchar,  expected_vresult_uchar)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_uchar_, src_vb_uchar, 7)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_uchar[%d] = %d, expected_vresult_uchar[%d] = %d\\n\",\n+\t     i, vresult_uchar[i], i, expected_vresult_uchar[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_sh = (vector short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  src_vb_sh = (vector short int) { 0, 2*128, 4*128, 6*128,\n+\t\t\t\t\t     8*128, 10*128, 12*128, 14*128 };\n+  vresult_sh = (vector short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector short int) { 0, 2, 4, 6, 8, 10, 12, 14 }; \n+\t\t\t\t\t\t \n+  vresult_sh = vec_srdb (src_va_sh, src_vb_sh, 7);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_sh_, src_vb_sh, 7)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_ush = (vector short unsigned int) { 0, 20, 30, 40, 50, 60, 70, 80 };\n+  src_vb_ush = (vector short unsigned int) { 0, 2*128, 4*128, 6*128,\n+\t\t\t\t\t     8*128, 10*128, 12*128, 14*128 };\n+  vresult_ush = (vector short unsigned int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ush = (vector short unsigned int) { 0, 2, 4, 6, 8, 10,\n+\t\t\t\t\t\t       12, 14 }; \n+\t\t\t\t\t\t \n+  vresult_ush = vec_srdb (src_va_ush, src_vb_ush, 7);\n+\n+  if (!vec_all_eq (vresult_ush,  expected_vresult_ush)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_ush_, src_vb_ush, 7)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_ush[%d] = %d, expected_vresult_ush[%d] = %d\\n\",\n+\t     i, vresult_ush[i], i, expected_vresult_ush[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_int = (vector signed int) { 0, 0, 0, 0 };\n+  src_vb_int = (vector signed int) { 0, 2*128, 3*128, 1*128 };\n+  vresult_int = (vector signed int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector signed int) { 0, 2, 3, 1  }; \n+\t\t\t\t\t\t \n+  vresult_int = vec_srdb (src_va_int, src_vb_int, 7);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_int_, src_vb_int, 7)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_uint = (vector unsigned int) { 0, 20, 30, 40 };\n+  src_vb_uint = (vector unsigned int) { 128, 2*128, 4*128, 6*128 };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_uint = (vector unsigned int) { 1, 2, 4, 6 }; \n+\t\t\t\t\t\t \n+  vresult_uint = vec_srdb (src_va_uint, src_vb_uint, 7);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_uint_, src_vb_uint, 7)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_llint = (vector signed long long int) { 0, 0 };\n+  src_vb_llint = (vector signed long long int) { 5*128, 6*128 };\n+  vresult_llint = (vector signed long long int) { 0, 0 };\n+  expected_vresult_llint = (vector signed long long int) { 5, 6 }; \n+\t\t\t\t\t\t \n+  vresult_llint = vec_srdb (src_va_llint, src_vb_llint, 7);\n+\n+  if (!vec_all_eq (vresult_llint,  expected_vresult_llint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_llint_, src_vb_llint, 7)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_llint[%d] = %d, expected_vresult_llint[%d] = %d\\n\",\n+\t     i, vresult_llint[i], i, expected_vresult_llint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_va_ullint = (vector unsigned long long int) { 0, 0 };\n+  src_vb_ullint = (vector unsigned long long int) { 54*128, 26*128 };\n+  vresult_ullint = (vector unsigned long long int) { 0, 0 };\n+  expected_vresult_ullint = (vector unsigned long long int) { 54, 26 }; \n+\n+  vresult_ullint = vec_srdb (src_va_ullint, src_vb_ullint, 7);\n+\n+  if (!vec_all_eq (vresult_ullint,  expected_vresult_ullint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_srdb (src_va_ullint_, src_vb_ullint, 7)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ullint[%d] = %d, expected_vresult_ullint[%d] = %d\\n\",\n+\t     i, vresult_ullint[i], i, expected_vresult_ullint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\msldbi\\M} 6 } } */\n+/* { dg-final { scan-assembler-times {\\msrdbi\\M} 6 } } */\n+\n+"}]}