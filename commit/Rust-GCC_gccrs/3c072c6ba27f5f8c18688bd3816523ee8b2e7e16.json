{"sha": "3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNzJjNmJhMjdmNWY4YzE4Njg4YmQzODE2NTIzZWU4YjJlN2UxNg==", "commit": {"author": {"name": "Jing Yu", "email": "jingyu@google.com", "date": "2009-03-17T20:18:21Z"}, "committer": {"name": "Doug Kwan", "email": "dougkwan@gcc.gnu.org", "date": "2009-03-17T20:18:21Z"}, "message": "re PR middle-end/39378 (Multiple inheritence thunk not working with -mthumb)\n\n2009-03-12  Jing Yu  <jingyu@google.com>\n\n\tPR middle-end/39378\n\t* function.h: Move is_thunk from rtl_data structure to function\n\tstructure.\n\t* cp/method.c (use_thunk): Change is_thunk from crtl to cfun.\n\t* varasm.c (assemble_start_function): Change is_thunk from crtl to\n\tcfun.\n\t* config/alpha/alpha.c: Change is_thunk from crtl to cfun.\n\t* config/rs6000/rs6000.c: Change is_thunk from crtl to cfun.\n\t* config/arm/arm.h: Change is_thunk from crtl to cfun.\n\t* testsuite/g++.dg/inherit/thunk10.C: New file.\n\n\tPatch submitted by Doug Kwan <dougkwan@google.com>\n\nFrom-SVN: r144918", "tree": {"sha": "71b7bedfc8e8e84e9cc8bc7754c2684db939a9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b7bedfc8e8e84e9cc8bc7754c2684db939a9fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/comments", "author": null, "committer": null, "parents": [{"sha": "9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ade279bf6d2c79adaf3ffbcafeeed2712eed7d8"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "7875277f45e434c321b9cce3ac09414fa15ef79e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -1,3 +1,15 @@\n+2009-03-17  Jing Yu  <jingyu@google.com>\n+\n+\tPR middle-end/39378\n+\t* function.h: Move is_thunk from rtl_data structure to function\n+\tstructure.\n+\t* cp/method.c (use_thunk): Change is_thunk from crtl to cfun.\n+\t* varasm.c (assemble_start_function): Change is_thunk from crtl to\n+\tcfun.\n+\t* config/alpha/alpha.c: Change is_thunk from crtl to cfun.\n+\t* config/rs6000/rs6000.c: Change is_thunk from crtl to cfun.\n+\t* config/arm/arm.h: Change is_thunk from crtl to cfun.\n+\n 2009-03-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39482"}, {"sha": "5ffb8f967ff536a4240c2046117cbcff55699569", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -7135,7 +7135,7 @@ alpha_sa_mask (unsigned long *imaskP, unsigned long *fmaskP)\n   /* When outputting a thunk, we don't have valid register life info,\n      but assemble_start_function wants to output .frame and .mask\n      directives.  */\n-  if (crtl->is_thunk)\n+  if (cfun->is_thunk)\n     {\n       *imaskP = 0;\n       *fmaskP = 0;\n@@ -7365,7 +7365,7 @@ alpha_does_function_need_gp (void)\n     return 1;\n \n   /* The code emitted by alpha_output_mi_thunk_osf uses the gp.  */\n-  if (crtl->is_thunk)\n+  if (cfun->is_thunk)\n     return 1;\n \n   /* The nonlocal receiver pattern assumes that the gp is valid for\n@@ -7888,7 +7888,7 @@ alpha_start_function (FILE *file, const char *fnname,\n \t Otherwise, do it here.  */\n       if (TARGET_ABI_OSF\n           && ! alpha_function_needs_gp\n-\t  && ! crtl->is_thunk)\n+\t  && ! cfun->is_thunk)\n \t{\n \t  putc ('$', file);\n \t  assemble_name (file, fnname);\n@@ -7999,7 +7999,7 @@ alpha_output_function_end_prologue (FILE *file)\n     fputs (\"\\t.prologue 0\\n\", file);\n   else if (!flag_inhibit_size_directive)\n     fprintf (file, \"\\t.prologue %d\\n\",\n-\t     alpha_function_needs_gp || crtl->is_thunk);\n+\t     alpha_function_needs_gp || cfun->is_thunk);\n }\n \n /* Write function epilogue.  */\n@@ -8283,7 +8283,7 @@ alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n     output_asm_insn (get_insn_template (CODE_FOR_nop, NULL), NULL);\n \n #if TARGET_ABI_OSF\n-  if (crtl->is_thunk)\n+  if (cfun->is_thunk)\n     free_after_compilation (cfun);\n #endif\n \n@@ -8326,7 +8326,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   HOST_WIDE_INT hi, lo;\n   rtx this_rtx, insn, funexp;\n \n-  gcc_assert (crtl->is_thunk);\n+  gcc_assert (cfun->is_thunk);\n \n   /* We always require a valid GP.  */\n   emit_insn (gen_prologue_ldgp ());"}, {"sha": "f5ec9e7166e400f329e782907809009820278b62", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -2448,7 +2448,7 @@ extern int making_const_table;\n         {\t\t\t\t\t\t\\\n           if (is_called_in_ARM_mode (DECL)\t\t\\\n \t      || (TARGET_THUMB1 && !TARGET_THUMB1_ONLY\t\\\n-\t\t  && crtl->is_thunk))\t\\\n+\t\t  && cfun->is_thunk))\t\\\n             fprintf (STREAM, \"\\t.code 32\\n\") ;\t\t\\\n           else if (TARGET_THUMB1)\t\t\t\\\n            fprintf (STREAM, \"\\t.code\\t16\\n\\t.thumb_func\\n\") ;\t\\"}, {"sha": "17622c26f00666b4218cad2fb8e47f75ad852cc9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -15254,7 +15254,7 @@ rs6000_ra_ever_killed (void)\n   rtx reg;\n   rtx insn;\n \n-  if (crtl->is_thunk)\n+  if (cfun->is_thunk)\n     return 0;\n \n   /* regs_ever_live has LR marked as used if any sibcalls are present,\n@@ -17556,7 +17556,7 @@ rs6000_output_function_epilogue (FILE *file,\n      System V.4 Powerpc's (and the embedded ABI derived from it) use a\n      different traceback table.  */\n   if (DEFAULT_ABI == ABI_AIX && ! flag_inhibit_size_directive\n-      && rs6000_traceback != traceback_none && !crtl->is_thunk)\n+      && rs6000_traceback != traceback_none && !cfun->is_thunk)\n     {\n       const char *fname = NULL;\n       const char *language_string = lang_hooks.name;"}, {"sha": "e632fe0c9e6b41722f8475064cdff94e871ff55c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -436,7 +436,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       BLOCK_VARS (fn_block) = a;\n       DECL_INITIAL (thunk_fndecl) = fn_block;\n       init_function_start (thunk_fndecl);\n-      crtl->is_thunk = 1;\n+      cfun->is_thunk = 1;\n       assemble_start_function (thunk_fndecl, fnname);\n \n       targetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl,"}, {"sha": "f9bdda8594d50c0618ae9452b4150f429f17bd11", "filename": "gcc/function.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -378,12 +378,6 @@ struct rtl_data GTY(())\n   /* Nonzero if function being compiled has an asm statement.  */\n   bool has_asm_statement;\n \n-  /* Nonzero if the current function is a thunk, i.e., a lightweight\n-     function implemented by the output_mi_thunk hook) that just\n-     adjusts one of its arguments and forwards to another\n-     function.  */\n-  bool is_thunk;\n-\n   /* This bit is used by the exception handling logic.  It is set if all\n      calls (if any) are sibling calls.  Such functions do not have to\n      have EH tables generated, as they cannot throw.  A call to such a\n@@ -600,6 +594,12 @@ struct function GTY(())\n   /* Nonzero if this function has local DECL_HARD_REGISTER variables.\n      In this case code motion has to be done more carefully.  */\n   unsigned int has_local_explicit_reg_vars : 1;\n+\n+  /* Nonzero if the current function is a thunk, i.e., a lightweight\n+     function implemented by the output_mi_thunk hook) that just\n+     adjusts one of its arguments and forwards to another\n+     function.  */\n+  unsigned int is_thunk : 1;\n };\n \n /* If va_list_[gf]pr_size is set to this, it means we don't know how"}, {"sha": "51bd91512ab82d26182374872f817b44529c11e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -1,3 +1,8 @@\n+2009-03-17  Jing Yu  <jingyu@google.com>\n+\n+\tPR middle-end/39378\n+\t* g++.dg/inherit/thunk10.C: New test.\n+\n 2009-03-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39482"}, {"sha": "e5b9f35fee9ae9916c984574e1e6a51b385bcc9d", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c072c6ba27f5f8c18688bd3816523ee8b2e7e16/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3c072c6ba27f5f8c18688bd3816523ee8b2e7e16", "patch": "@@ -1677,7 +1677,7 @@ assemble_start_function (tree decl, const char *fnname)\n       /* When the function starts with a cold section, we need to explicitly\n \t align the hot section and write out the hot section label.\n \t But if the current function is a thunk, we do not have a CFG.  */\n-      if (!crtl->is_thunk\n+      if (!cfun->is_thunk\n \t  && BB_PARTITION (ENTRY_BLOCK_PTR->next_bb) == BB_COLD_PARTITION)\n \t{\n \t  switch_to_section (text_section);"}]}