{"sha": "010403d180a49644c9786a55d51d677aafa86402", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwNDAzZDE4MGE0OTY0NGM5Nzg2YTU1ZDUxZDY3N2FhZmE4NjQwMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-06T08:38:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-06T08:38:46Z"}, "message": "re PR lto/50494 (gcc.dg/vect/vect-reduc-2char.c fails spuriously on ppc with -flto)\n\n2013-03-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/50494\n\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p):\n\tDo not adjust alignment of DECL_IN_CONSTANT_POOL decls.\n\n\tRevert\n\t2013-02-13  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/50494\n\t* varasm.c (output_constant_def_1): Get the decl representing\n\tthe constant as argument.\n\t(output_constant_def): Wrap output_constant_def_1.\n\t(make_decl_rtl): Use output_constant_def_1 with the decl\n\trepresenting the constant.\n\t(build_constant_desc): Optionally re-use a decl already\n\trepresenting the constant.\n\t(tree_output_constant_def): Adjust.\n\nFrom-SVN: r196487", "tree": {"sha": "0c0d6fed824666c1b5d24f35a6c17f5c48e0c057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c0d6fed824666c1b5d24f35a6c17f5c48e0c057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/010403d180a49644c9786a55d51d677aafa86402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010403d180a49644c9786a55d51d677aafa86402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010403d180a49644c9786a55d51d677aafa86402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010403d180a49644c9786a55d51d677aafa86402/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34d3a672a85c8ef6ee773b311381154533d54310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d3a672a85c8ef6ee773b311381154533d54310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d3a672a85c8ef6ee773b311381154533d54310"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "3bb0520f00f13ad0ede5b9e4a7ebdd5af22683fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010403d180a49644c9786a55d51d677aafa86402/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010403d180a49644c9786a55d51d677aafa86402/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=010403d180a49644c9786a55d51d677aafa86402", "patch": "@@ -1,3 +1,22 @@\n+2013-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/50494\n+\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p):\n+\tDo not adjust alignment of DECL_IN_CONSTANT_POOL decls.\n+\n+\tRevert\n+\t2013-02-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/50494\n+\t* varasm.c (output_constant_def_1): Get the decl representing\n+\tthe constant as argument.\n+\t(output_constant_def): Wrap output_constant_def_1.\n+\t(make_decl_rtl): Use output_constant_def_1 with the decl\n+\trepresenting the constant.\n+\t(build_constant_desc): Optionally re-use a decl already\n+\trepresenting the constant.\n+\t(tree_output_constant_def): Adjust.\n+\n 2013-03-06  Joey Ye  <joey.ye@arm.com>\n \n \tPR lto/50293"}, {"sha": "fdb73c3212b038b53303009ffb59fb63fe870101", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010403d180a49644c9786a55d51d677aafa86402/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010403d180a49644c9786a55d51d677aafa86402/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=010403d180a49644c9786a55d51d677aafa86402", "patch": "@@ -4829,9 +4829,12 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n   /* We cannot change alignment of common or external symbols as another\n      translation unit may contain a definition with lower alignment.  \n      The rules of common symbol linking mean that the definition\n-     will override the common symbol.  */\n+     will override the common symbol.  The same is true for constant\n+     pool entries which may be shared and are not properly merged\n+     by LTO.  */\n   if (DECL_EXTERNAL (decl)\n-      || DECL_COMMON (decl))\n+      || DECL_COMMON (decl)\n+      || DECL_IN_CONSTANT_POOL (decl))\n     return false;\n \n   if (TREE_ASM_WRITTEN (decl))"}, {"sha": "66481031022c48635db28d05f17d4b70439a112d", "filename": "gcc/varasm.c", "status": "modified", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/010403d180a49644c9786a55d51d677aafa86402/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/010403d180a49644c9786a55d51d677aafa86402/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=010403d180a49644c9786a55d51d677aafa86402", "patch": "@@ -126,7 +126,6 @@ static void asm_output_aligned_bss (FILE *, tree, const char *,\n #endif /* BSS_SECTION_ASM_OP */\n static void mark_weak (tree);\n static void output_constant_pool (const char *, tree);\n-static rtx output_constant_def_1 (tree, tree, int);\n \f\n /* Well-known sections, each one associated with some sort of *_ASM_OP.  */\n section *text_section;\n@@ -1187,8 +1186,7 @@ make_decl_rtl (tree decl)\n      pre-computed RTL or recompute it in LTO mode.  */\n   if (TREE_CODE (decl) == VAR_DECL && DECL_IN_CONSTANT_POOL (decl))\n     {\n-      SET_DECL_RTL (decl, output_constant_def_1 (DECL_INITIAL (decl),\n-\t\t\t\t\t\t decl, 1));\n+      SET_DECL_RTL (decl, output_constant_def (DECL_INITIAL (decl), 1));\n       return;\n     }\n \n@@ -3075,16 +3073,16 @@ get_constant_size (tree exp)\n    Make a constant descriptor to enter EXP in the hash table.\n    Assign the label number and construct RTL to refer to the\n    constant's location in memory.\n-   If DECL is non-NULL use it as VAR_DECL associated with the constant.\n    Caller is responsible for updating the hash table.  */\n \n static struct constant_descriptor_tree *\n-build_constant_desc (tree exp, tree decl)\n+build_constant_desc (tree exp)\n {\n   struct constant_descriptor_tree *desc;\n   rtx symbol, rtl;\n   char label[256];\n   int labelno;\n+  tree decl;\n \n   desc = ggc_alloc_constant_descriptor_tree ();\n   desc->value = copy_constant (exp);\n@@ -3098,32 +3096,28 @@ build_constant_desc (tree exp, tree decl)\n   ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", labelno);\n \n   /* Construct the VAR_DECL associated with the constant.  */\n-  if (decl == NULL_TREE)\n-    {\n-      decl = build_decl (UNKNOWN_LOCATION, VAR_DECL, get_identifier (label),\n-\t\t\t TREE_TYPE (exp));\n-      DECL_ARTIFICIAL (decl) = 1;\n-      DECL_IGNORED_P (decl) = 1;\n-      TREE_READONLY (decl) = 1;\n-      TREE_STATIC (decl) = 1;\n-      TREE_ADDRESSABLE (decl) = 1;\n-      /* We don't set the RTL yet as this would cause varpool to assume that\n-\t the variable is referenced.  Moreover, it would just be dropped in\n-\t LTO mode.  Instead we set the flag that will be recognized in\n-\t make_decl_rtl.  */\n-      DECL_IN_CONSTANT_POOL (decl) = 1;\n-      DECL_INITIAL (decl) = desc->value;\n-      /* ??? CONSTANT_ALIGNMENT hasn't been updated for vector types on most\n-\t architectures so use DATA_ALIGNMENT as well, except for strings.  */\n-      if (TREE_CODE (exp) == STRING_CST)\n-\t{\n+  decl = build_decl (UNKNOWN_LOCATION, VAR_DECL, get_identifier (label),\n+\t\t     TREE_TYPE (exp));\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n+  TREE_ADDRESSABLE (decl) = 1;\n+  /* We don't set the RTL yet as this would cause varpool to assume that the\n+     variable is referenced.  Moreover, it would just be dropped in LTO mode.\n+     Instead we set the flag that will be recognized in make_decl_rtl.  */\n+  DECL_IN_CONSTANT_POOL (decl) = 1;\n+  DECL_INITIAL (decl) = desc->value;\n+  /* ??? CONSTANT_ALIGNMENT hasn't been updated for vector types on most\n+     architectures so use DATA_ALIGNMENT as well, except for strings.  */\n+  if (TREE_CODE (exp) == STRING_CST)\n+    {\n #ifdef CONSTANT_ALIGNMENT\n-\t  DECL_ALIGN (decl) = CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl));\n+      DECL_ALIGN (decl) = CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl));\n #endif\n-\t}\n-      else\n-\talign_variable (decl, 0);\n     }\n+  else\n+    align_variable (decl, 0);\n \n   /* Now construct the SYMBOL_REF and the MEM.  */\n   if (use_object_blocks_p ())\n@@ -3160,7 +3154,7 @@ build_constant_desc (tree exp, tree decl)\n }\n \n /* Return an rtx representing a reference to constant data in memory\n-   for the constant expression EXP with the associated DECL.\n+   for the constant expression EXP.\n \n    If assembler code for such a constant has already been output,\n    return an rtx to refer to it.\n@@ -3172,8 +3166,8 @@ build_constant_desc (tree exp, tree decl)\n \n    `const_desc_table' records which constants already have label strings.  */\n \n-static rtx\n-output_constant_def_1 (tree exp, tree decl, int defer)\n+rtx\n+output_constant_def (tree exp, int defer)\n {\n   struct constant_descriptor_tree *desc;\n   struct constant_descriptor_tree key;\n@@ -3188,7 +3182,7 @@ output_constant_def_1 (tree exp, tree decl, int defer)\n   desc = (struct constant_descriptor_tree *) *loc;\n   if (desc == 0)\n     {\n-      desc = build_constant_desc (exp, decl);\n+      desc = build_constant_desc (exp);\n       desc->hash = key.hash;\n       *loc = desc;\n     }\n@@ -3197,15 +3191,6 @@ output_constant_def_1 (tree exp, tree decl, int defer)\n   return desc->rtl;\n }\n \n-/* Like output_constant_def but create a new decl representing the\n-   constant if necessary.  */\n-\n-rtx\n-output_constant_def (tree exp, int defer)\n-{\n-  return output_constant_def_1 (exp, NULL_TREE, defer);\n-}\n-\n /* Subroutine of output_constant_def: Decide whether or not we need to\n    output the constant DESC now, and if so, do it.  */\n static void\n@@ -3342,7 +3327,7 @@ tree_output_constant_def (tree exp)\n   desc = (struct constant_descriptor_tree *) *loc;\n   if (desc == 0)\n     {\n-      desc = build_constant_desc (exp, NULL_TREE);\n+      desc = build_constant_desc (exp);\n       desc->hash = key.hash;\n       *loc = desc;\n     }"}]}