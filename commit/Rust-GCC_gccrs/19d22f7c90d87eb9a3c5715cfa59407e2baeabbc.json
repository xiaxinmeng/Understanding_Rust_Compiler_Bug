{"sha": "19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkMjJmN2M5MGQ4N2ViOWEzYzU3MTVjZmE1OTQwN2UyYmFlYWJiYw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-01-09T20:58:04Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-01-09T20:58:04Z"}, "message": "altivec.md (p8_vmrgow): Add support for V2DI, V2DF, V4SI, V4SF types.\n\ngcc/ChangeLog:\n\n2018-01-09  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6002/altivec.md (p8_vmrgow): Add support for V2DI, V2DF,\n\tV4SI, V4SF types.\n\t(p8_vmrgew): Add support for V2DI, V2DF, V4SF types.\n\t* config/rs6000/rs6000-builtin.def: Add definitions for FLOAT2_V2DF,\n\tVMRGEW_V2DI, VMRGEW_V2DF, VMRGEW_V4SF, VMRGOW_V4SI, VMRGOW_V4SF,\n\tVMRGOW_V2DI, VMRGOW_V2DF.  Remove definition for VMRGOW.\n\t* config/rs6000/rs6000-c.c (VSX_BUILTIN_VEC_FLOAT2,\n\tP8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VEC_VMRGOW):  Add definitions.\n\t* config/rs6000/rs6000-protos.h: Add extern defition for\n\trs6000_generate_float2_double_code.\n\t* config/rs6000/rs6000.c (rs6000_generate_float2_double_code): Add\n\tfunction.\n\t* config/rs6000/vsx.md (vsx_xvcdpsp): Add define_insn.\n\t(float2_v2df): Add define_expand.\n\ngcc/testsuite/ChangeLog:\n\n2017-01-09 Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-1.c (main): Add tests for vec_mergee and\n\tvec_mergeo builtins with float, double, long long, unsigned long long,\n\tbool long long  arguments.\n\t* gcc.target/powerpc/builtins-3-runnable.c (main): Add test for\n\tvec_float2 with double arguments.\n\t* gcc.target/powerpc/builtins-mergew-mergow.c: New runable test for the\n\tvec_mergew and vec_mergow builtins.\n\nFrom-SVN: r256395", "tree": {"sha": "ce715a7b39620209a51131685e0ba1ff3f724932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce715a7b39620209a51131685e0ba1ff3f724932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "594d0e51b75c83cec9be74a304217e3f0c49da6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594d0e51b75c83cec9be74a304217e3f0c49da6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594d0e51b75c83cec9be74a304217e3f0c49da6c"}], "stats": {"total": 467, "additions": 453, "deletions": 14}, "files": [{"sha": "fee06da31664749f8dea990d7883226d61711b58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1,3 +1,20 @@\n+2018-01-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6002/altivec.md (p8_vmrgow): Add support for V2DI, V2DF,\n+\tV4SI, V4SF types.\n+\t(p8_vmrgew): Add support for V2DI, V2DF, V4SF types.\n+\t* config/rs6000/rs6000-builtin.def: Add definitions for FLOAT2_V2DF,\n+\tVMRGEW_V2DI, VMRGEW_V2DF, VMRGEW_V4SF, VMRGOW_V4SI, VMRGOW_V4SF,\n+\tVMRGOW_V2DI, VMRGOW_V2DF.  Remove definition for VMRGOW.\n+\t* config/rs6000/rs6000-c.c (VSX_BUILTIN_VEC_FLOAT2,\n+\tP8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VEC_VMRGOW):  Add definitions.\n+\t* config/rs6000/rs6000-protos.h: Add extern defition for\n+\trs6000_generate_float2_double_code.\n+\t* config/rs6000/rs6000.c (rs6000_generate_float2_double_code): Add\n+\tfunction.\n+\t* config/rs6000/vsx.md (vsx_xvcdpsp): Add define_insn.\n+\t(float2_v2df): Add define_expand.\n+\n 2018-01-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/83628"}, {"sha": "733d920af6ded1a4cc899edea8e8d7a01ea1ebd5", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1318,6 +1318,24 @@\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n+;; Power8 vector merge two V2DF/V2DI even words to V2DF\n+(define_expand \"p8_vmrgew_<mode>\"\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n+  x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n+\n+  x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n+  DONE;\n+})\n+\n ;; Power8 vector merge two V4SF/V4SI even words to V4SF\n (define_insn \"p8_vmrgew_<mode>\"\n   [(set (match_operand:VSX_W 0 \"register_operand\" \"=v\")\n@@ -1336,12 +1354,12 @@\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"p8_vmrgow\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+(define_insn \"p8_vmrgow_<mode>\"\n+  [(set (match_operand:VSX_W 0 \"register_operand\" \"=v\")\n+\t(vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"register_operand\" \"v\")\n+\t    (match_operand:VSX_W 2 \"register_operand\" \"v\"))\n \t  (parallel [(const_int 1) (const_int 5)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"TARGET_P8_VECTOR\"\n@@ -1353,6 +1371,23 @@\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_expand \"p8_vmrgow_<mode>\"\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n+  x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n+\n+  x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n+  DONE;\n+})\n+\n (define_insn \"p8_vmrgew_<mode>_direct\"\n   [(set (match_operand:VSX_W 0 \"register_operand\" \"=v\")\n \t(unspec:VSX_W [(match_operand:VSX_W 1 \"register_operand\" \"v\")"}, {"sha": "06c0c114feefe7d94fb657c9cc097395dc370cc2", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1650,6 +1650,7 @@ BU_VSX_2 (CMPLE_U16QI,        \"cmple_u16qi\",    CONST,  vector_ngtuv16qi)\n BU_VSX_2 (CMPLE_U8HI,         \"cmple_u8hi\",     CONST,  vector_ngtuv8hi)\n BU_VSX_2 (CMPLE_U4SI,         \"cmple_u4si\",     CONST,  vector_ngtuv4si)\n BU_VSX_2 (CMPLE_U2DI,         \"cmple_u2di\",     CONST,  vector_ngtuv2di)\n+BU_VSX_2 (FLOAT2_V2DF,        \"float2_v2df\",    CONST,  float2_v2df)\n BU_VSX_2 (FLOAT2_V2DI,        \"float2_v2di\",    CONST,  float2_v2di)\n BU_VSX_2 (UNS_FLOAT2_V2DI,    \"uns_float2_v2di\",    CONST,  uns_float2_v2di)\n \n@@ -1924,8 +1925,14 @@ BU_P8V_AV_2 (VMINSD,\t\t\"vminsd\",\tCONST,\tsminv2di3)\n BU_P8V_AV_2 (VMAXSD,\t\t\"vmaxsd\",\tCONST,\tsmaxv2di3)\n BU_P8V_AV_2 (VMINUD,\t\t\"vminud\",\tCONST,\tuminv2di3)\n BU_P8V_AV_2 (VMAXUD,\t\t\"vmaxud\",\tCONST,\tumaxv2di3)\n+BU_P8V_AV_2 (VMRGEW_V2DI,\t\"vmrgew_v2di\",\tCONST,\tp8_vmrgew_v2di)\n+BU_P8V_AV_2 (VMRGEW_V2DF,\t\"vmrgew_v2df\",\tCONST,\tp8_vmrgew_v2df)\n BU_P8V_AV_2 (VMRGEW_V4SI,\t\"vmrgew_v4si\",\tCONST,\tp8_vmrgew_v4si)\n-BU_P8V_AV_2 (VMRGOW,\t\t\"vmrgow\",\tCONST,\tp8_vmrgow)\n+BU_P8V_AV_2 (VMRGEW_V4SF,\t\"vmrgew_v4sf\",\tCONST,\tp8_vmrgew_v4sf)\n+BU_P8V_AV_2 (VMRGOW_V4SI,\t\"vmrgow_v4si\",\tCONST,\tp8_vmrgow_v4si)\n+BU_P8V_AV_2 (VMRGOW_V4SF,\t\"vmrgow_v4sf\",\tCONST,\tp8_vmrgow_v4sf)\n+BU_P8V_AV_2 (VMRGOW_V2DI,\t\"vmrgow_v2di\",\tCONST,\tp8_vmrgow_v2di)\n+BU_P8V_AV_2 (VMRGOW_V2DF,\t\"vmrgow_v2df\",\tCONST,\tp8_vmrgow_v2df)\n BU_P8V_AV_2 (VBPERMQ,\t\t\"vbpermq\",\tCONST,\taltivec_vbpermq)\n BU_P8V_AV_2 (VBPERMQ2,\t\t\"vbpermq2\",\tCONST,\taltivec_vbpermq2)\n BU_P8V_AV_2 (VPKUDUM,\t\t\"vpkudum\",\tCONST,\taltivec_vpkudum)"}, {"sha": "7a6954a02c7f32d5d4d6d2ad8cc51e7995f1bf3b", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1531,6 +1531,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_V4SI, 0, 0 },\n   { VSX_BUILTIN_VEC_FLOAT, VSX_BUILTIN_XVCVUXWSP_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOAT2, VSX_BUILTIN_FLOAT2_V2DF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n   { VSX_BUILTIN_VEC_FLOAT2, VSX_BUILTIN_FLOAT2_V2DI,\n     RS6000_BTI_V4SF, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { VSX_BUILTIN_VEC_FLOAT2, VSX_BUILTIN_UNS_FLOAT2_V2DI,\n@@ -5520,6 +5522,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, 0 },\n \n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n   { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n@@ -5528,13 +5541,26 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n \n-  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n-  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n-  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n \n   { P8V_BUILTIN_VEC_VPMSUM, P8V_BUILTIN_VPMSUMB,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V16QI,"}, {"sha": "a6c9db92d9513a641a164801c5a543c6ccb4eee4", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -71,6 +71,7 @@ extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void rs6000_scale_v2df (rtx, rtx, int);\n extern void rs6000_generate_float2_code (bool, rtx, rtx, rtx);\n+extern void rs6000_generate_float2_double_code (rtx, rtx, rtx);\n extern void rs6000_generate_vsigned2_code (bool, rtx, rtx, rtx);\n extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);"}, {"sha": "a6f3e4e0d0a5ab0ae95ba11b4f9c442ccd147216", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -39439,6 +39439,43 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   *update = build2 (COMPOUND_EXPR, void_type_node, update_mffs, update_mtfsf);\n }\n \n+void\n+rs6000_generate_float2_double_code (rtx dst, rtx src1, rtx src2)\n+{\n+  rtx rtx_tmp0, rtx_tmp1, rtx_tmp2, rtx_tmp3;\n+\n+  rtx_tmp0 = gen_reg_rtx (V2DFmode);\n+  rtx_tmp1 = gen_reg_rtx (V2DFmode);\n+\n+  /* The destination of the vmrgew instruction layout is:\n+     rtx_tmp2[0] rtx_tmp3[0] rtx_tmp2[1] rtx_tmp3[0].\n+     Setup rtx_tmp0 and rtx_tmp1 to ensure the order of the elements after the\n+     vmrgew instruction will be correct.  */\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+       emit_insn (gen_vsx_xxpermdi_v2df_be (rtx_tmp0, src1, src2,\n+\t\t\t\t\t    GEN_INT (0)));\n+       emit_insn (gen_vsx_xxpermdi_v2df_be (rtx_tmp1, src1, src2,\n+\t\t\t\t\t    GEN_INT (3)));\n+    }\n+  else\n+    {\n+       emit_insn (gen_vsx_xxpermdi_v2df (rtx_tmp0, src1, src2, GEN_INT (3)));\n+       emit_insn (gen_vsx_xxpermdi_v2df (rtx_tmp1, src1, src2, GEN_INT (0)));\n+    }\n+\n+  rtx_tmp2 = gen_reg_rtx (V4SFmode);\n+  rtx_tmp3 = gen_reg_rtx (V4SFmode);\n+\n+  emit_insn (gen_vsx_xvcdpsp (rtx_tmp2, rtx_tmp0));\n+  emit_insn (gen_vsx_xvcdpsp (rtx_tmp3, rtx_tmp1));\n+\n+  if (VECTOR_ELT_ORDER_BIG)\n+    emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp2, rtx_tmp3));\n+  else\n+    emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp3, rtx_tmp2));\n+}\n+\n void\n rs6000_generate_float2_code (bool signed_convert, rtx dst, rtx src1, rtx src2)\n {"}, {"sha": "effa6c1103ea2ff6934d16696e66a7d6dba052d3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -372,6 +372,7 @@\n    UNSPEC_VSX_XVCVSXDDP\n    UNSPEC_VSX_XVCVUXDDP\n    UNSPEC_VSX_XVCVDPSXDS\n+   UNSPEC_VSX_XVCDPSP\n    UNSPEC_VSX_XVCVDPUXDS\n    UNSPEC_VSX_SIGN_EXTEND\n    UNSPEC_VSX_XVCVSPSXWS\n@@ -2171,6 +2172,14 @@\n   \"xvcvuxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+(define_insn \"vsx_xvcdpsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+\t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"wf,wa\")]\n+\t\t     UNSPEC_VSX_XVCDPSP))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvdpsp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n ;; Convert from 32-bit to 64-bit types\n ;; Provide both vector and scalar targets\n (define_insn \"vsx_xvcvsxwdp\"\n@@ -2237,6 +2246,24 @@\n   \"xvcvuxwsp %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n+;; Generate float2 double\n+;; convert two double to float\n+(define_expand \"float2_v2df\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:V2DF 1 \"register_operand\" \"wa\"))\n+   (use (match_operand:V2DF 2 \"register_operand\" \"wa\"))]\n+ \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  rtx rtx_src1, rtx_src2, rtx_dst;\n+\n+  rtx_dst = operands[0];\n+  rtx_src1 = operands[1];\n+  rtx_src2 = operands[2];\n+\n+  rs6000_generate_float2_double_code (rtx_dst, rtx_src1, rtx_src2);\n+  DONE;\n+})\n+\n ;; Generate float2\n ;; convert two long long signed ints to float\n (define_expand \"float2_v2di\""}, {"sha": "4515cfa1f896a8473aae937dcac639e63f2b038b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1,3 +1,13 @@\n+2017-01-09 Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c (main): Add tests for vec_mergee and\n+\tvec_mergeo builtins with float, double, long long, unsigned long long,\n+\tbool long long  arguments.\n+\t* gcc.target/powerpc/builtins-3-runnable.c (main): Add test for\n+\tvec_float2 with double arguments.\n+\t* gcc.target/powerpc/builtins-mergew-mergow.c: New runable test for the\n+\tvec_mergew and vec_mergow builtins.\n+\n 2018-01-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/83742"}, {"sha": "b7d8c63ecd70bd1b99338b1e3d468ad26a4a6d1d", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -1,6 +1,6 @@\n /* This test is included into builtins-1-be.c and builtins-1-le.c to test on\n    Big Endian and Little Endian machines.  */\n-   \n+\n #include <altivec.h>\n \n vector double y = { 2.0, 4.0 };\n@@ -14,7 +14,7 @@ int main ()\n   vector float fc = vec_cpsgn (fa, fb);\n   vector float fe = vec_mergeh (fa, fb);\n   vector float ff = vec_mergel (fa, fb);\n-\t  \n+\n   vector double da = {1.0, 2.0};\n   vector double db = {-2.0, -3.0};\n   vector double dz = vec_and (da, db);\n@@ -36,7 +36,7 @@ int main ()\n   vector long long lg = vec_andc (la, lb);\n   vector long long lh = vec_andc (la, ld);\n   vector long long li = vec_andc (ld, lb);\n-  \n+\n   vector unsigned long long ug = vec_andc (ua, ub);\n   vector unsigned long long uh = vec_andc (ua, ud);\n   vector unsigned long long ui = vec_andc (ud, ub);\n@@ -176,7 +176,7 @@ int main ()\n   vector unsigned short usc = vec_cntlz (usa);\n   vector unsigned short uscd = vec_mergeh (usa, usb);\n   vector unsigned short usce = vec_mergel (usa, usb);\n-  \n+\n   vector signed char sca = {-4, 3, -9, 15, -31, 31, 0, 0,\n \t\t            1, 117, -36, 99, 98, 97, 96, 95};\n   vector signed char scb = vec_cntlz (sca);\n@@ -199,9 +199,15 @@ int main ()\n   vector unsigned long long u4 = vec_splat (u2, 1);\n   vector bool long long l5 = vec_splat (ld, 0);\n   vector bool long long l6 = vec_splat (ld, 1);\n+  vector bool long long l10 = vec_mergee (ld, ld);\n+  vector bool long long l11 = vec_mergeo (ld, ld);\n \n   vector long long l7 = vec_div (l3, l4);\n   vector unsigned long long u5 = vec_div (u3, u4);\n+  vector long long l12 = vec_mergee (la, lb);\n+  vector long long l13 = vec_mergeo (la, lb);\n+  vector unsigned long long u8 = vec_mergee (u3, u4);\n+  vector unsigned long long u9 = vec_mergeo (u3, u4);\n \n   vector long long l8 = vec_mul (l3, l4);\n   vector unsigned long long u6 = vec_mul (u3, u4);\n@@ -213,5 +219,11 @@ int main ()\n   vector unsigned long long u7 = vec_ctu (di, 2);\n   vector unsigned int usz = vec_ctu (fa, 0x1F);\n \n+  vector float f1 = vec_mergee (fa, fb);\n+  vector float f2 = vec_mergeo (fa, fb);\n+\n+  vector double d1 = vec_mergee (da, db);\n+  vector double d2 = vec_mergeo (da, db);\n+\n   return 0;\n }"}, {"sha": "15498173a3437cbc2edeef276d6a11c793cfc96f", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-runnable.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -266,6 +266,10 @@ int main()\n \tvec_flt_result = vec_float2 (vec_ll_uns_int0, vec_ll_uns_int1);\n \ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n \n+\tvec_flt_expected = (vector float){34.0, 97.0, 214.0, -5.5};\n+\tvec_flt_result = vec_float2 (vec_dble0, vec_dble1);\n+\ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n+\n \t/* conversion of even words in double precision vector to single precision vector */\n \tvec_flt_expected = (vector float){-12.00, 00.00, -12345678901234.00, 0.00};\n \tvec_flt_result = vec_floate (vec_ll_int0);"}, {"sha": "24df2cf0b0b9086a72f5ba11395f1c8ecb62388e", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-mergew-mergow.c", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-mergew-mergow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d22f7c90d87eb9a3c5715cfa59407e2baeabbc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-mergew-mergow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-mergew-mergow.c?ref=19d22f7c90d87eb9a3c5715cfa59407e2baeabbc", "patch": "@@ -0,0 +1,263 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-maltivec -mvsx\" } */\n+\n+#include <altivec.h> // vector\n+#include <stdlib.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int main() {\n+  vector signed int vec_si_arg1, vec_si_arg2;\n+  vector signed int vec_si_expected, vec_si_result;\n+  vector unsigned int vec_ui_arg1, vec_ui_arg2;\n+  vector unsigned int vec_ui_expected, vec_ui_result;\n+  vector signed long long vec_sll_arg1, vec_sll_arg2;\n+  vector signed long long vec_sll_expected, vec_sll_result;\n+  vector unsigned long long vec_ull_arg1, vec_ull_arg2;\n+  vector unsigned long long vec_ull_expected, vec_ull_result;\n+  vector bool long long vec_bll_arg1, vec_bll_arg2;\n+  vector bool long long vec_bll_expected, vec_bll_result;\n+  vector float vec_f_arg1, vec_f_arg2;\n+  vector float vec_f_expected, vec_f_result;\n+  vector double vec_d_arg1, vec_d_arg2;\n+  vector double vec_d_expected, vec_d_result;\n+  int i;\n+  unsigned long long int value;\n+\n+  /* Tests for vec_mergeo, Merges the odd-numbered halves of two vectors.  */\n+  vec_si_arg1 = (vector int){-100, -101, 102, 103};\n+  vec_si_arg2 = (vector int){200, 201, 202, 203};\n+\n+  vec_si_result = vec_mergeo (vec_si_arg1, vec_si_arg2);\n+\n+  vec_si_expected = (vector int){-101, 201, 103, 203};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_si_result[i] != vec_si_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_si_result[%d] = %d, vec_si_expected[%d] = %d\\n\",\n+\t     i, vec_si_result[i], i, vec_si_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_ui_arg1 = (vector unsigned int){100, 101, 102, 103};\n+  vec_ui_arg2 = (vector unsigned int){200, 201, 202, 203};\n+\n+  vec_ui_result = vec_mergeo (vec_ui_arg1, vec_ui_arg2);\n+\n+  vec_ui_expected = (vector unsigned int){101, 201, 103, 203};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_ui_result[i] != vec_ui_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_ui_result[%d] = %d, vec_ui_expected[%d] = %d\\n\",\n+\t     i, vec_ui_result[i], i, vec_ui_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_sll_arg1 = (vector long long int){-300, -301};\n+  vec_sll_arg2 = (vector long long int){400, 401};\n+\n+  vec_sll_result = vec_mergeo (vec_sll_arg1, vec_sll_arg2);\n+\n+  vec_sll_expected = (vector long long int){-301, 401};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_sll_result[i] != vec_sll_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_sll_result[%d] = %lld, vec_sll_expected[%d] = %lld\\n\",\n+\t     i, (long long int)vec_sll_result[i],\n+\t     i, (long long int)vec_sll_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_ull_arg1 = (vector unsigned long long int){500, 501};\n+  vec_ull_arg2 = (vector unsigned long long int){600, 601};\n+\n+  vec_ull_result = vec_mergeo (vec_ull_arg1, vec_ull_arg2);\n+\n+  vec_ull_expected = (vector unsigned long long int){501, 601};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_ull_result[i] != vec_ull_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_ull_result[%d] = %lld, vec_ull_expected[%d] = %lld\\n\",\n+\t     i, (unsigned long long int)vec_ull_result[i],\n+\t     i, (unsigned long long int)vec_ull_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_bll_arg1 = (vector bool long long){0, 0};\n+  vec_bll_arg2 = (vector bool long long){1, 1};\n+\n+  vec_bll_result = vec_mergeo (vec_bll_arg1, vec_bll_arg2);\n+\n+  vec_bll_expected = (vector bool long long){0, 1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_bll_result[i] != vec_bll_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_bll_result[%d] = %lld, vec_bll_expected[%d] = %lld\\n\",\n+\t     i, vec_ull_result[i],\n+\t     i, vec_ull_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_f_arg1 = (vector float){100.0, 101.1, 102.2, 103.3};\n+  vec_f_arg2 = (vector float){200.0, 201.1, 202.2, 203.3};\n+\n+  vec_f_result = vec_mergeo (vec_f_arg1, vec_f_arg2);\n+\n+  vec_f_expected = (vector float){101.1, 201.1, 103.3, 203.3};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_f_result[i] != vec_f_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_f_result[%d] = %f, vec_f_expected[%d] = %f\\n\",\n+\t     i, vec_f_result[i], i, vec_f_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_d_arg1 = (vector double){300.0, 301.1};\n+  vec_d_arg2 = (vector double){400.0, 401.1};\n+\n+  vec_d_result = vec_mergeo (vec_d_arg1, vec_d_arg2);\n+\n+  vec_d_expected = (vector double){301.1, 401.1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_d_result[i] != vec_d_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergeo(): vec_d_result[%d] = %f, vec_d_expected[%d] = %f\\n\",\n+\t     i, vec_d_result[i], i, vec_d_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  /* Tests for vec_mergee, Merges the even-numbered halves of two vectors.  */\n+  vec_si_arg1 = (vector int){-100, -101, 102, 103};\n+  vec_si_arg2 = (vector int){200, 201, 202, 203};\n+\n+  vec_si_result = vec_mergee (vec_si_arg1, vec_si_arg2);\n+\n+  vec_si_expected = (vector int){-100, 200, 102, 202};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_si_result[i] != vec_si_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergee(): vec_si_result[%d] = %d, vec_si_expected[%d] = %d\\n\",\n+\t     i, vec_si_result[i], i, vec_si_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_ui_arg1 = (vector unsigned int){100, 101, 102, 103};\n+  vec_ui_arg2 = (vector unsigned int){200, 201, 202, 203};\n+\n+  vec_ui_result = vec_mergee (vec_ui_arg1, vec_ui_arg2);\n+\n+  vec_ui_expected = (vector unsigned int){100, 200, 102, 202};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_ui_result[i] != vec_ui_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergee(): vec_ui_result[%d] = %d, vec_ui_expected[%d] = %d\\n\",\n+\t     i, vec_ui_result[i], i, vec_ui_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_sll_arg1 = (vector signed long long int){-300, -301};\n+  vec_sll_arg2 = (vector signed long long int){400, 401};\n+\n+  vec_sll_result = vec_mergee (vec_sll_arg1, vec_sll_arg2);\n+\n+  vec_sll_expected = (vector signed long long int){-300, 400};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_sll_result[i] != vec_sll_expected[i])\n+#ifdef DEBUG\n+\tprintf(\"ERROR vec_mergee(): vec_sll_result[%d] = %lld, vec_sll_expected[%d] = %lld\\n\",\n+\t\ti, (signed long long int)vec_sll_result[i],\n+\t\ti, (signed long long int)vec_sll_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_ull_arg1 = (vector unsigned long long int){500, 501};\n+  vec_ull_arg2 = (vector unsigned long long int){600, 601};\n+\n+  vec_ull_result = vec_mergee (vec_ull_arg1, vec_ull_arg2);\n+\n+  vec_ull_expected = (vector unsigned long long int){500, 600};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_ull_result[i] != vec_ull_expected[i])\n+#ifdef DEBUG\n+\tprintf(\"ERROR vec_mergee(): vec_ull_result[%d] = %lld, vec_ull_expected[%d] = %lld\\n\",\n+\t       i, (unsigned long long int)vec_ull_result[i],\n+\t       i, (unsigned long long int)vec_ull_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_bll_arg1 = (vector bool long long){0, 0};\n+  vec_bll_arg2 = (vector bool long long){1, 1};\n+\n+  vec_bll_result = vec_mergee (vec_bll_arg1, vec_bll_arg2);\n+\n+  vec_bll_expected = (vector bool long long){0, 1};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_bll_result[i] != vec_bll_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergee(): vec_bll_result[%d] = %lld, vec_bll_expected[%d] = %lld\\n\",\n+\t     i, vec_ull_result[i],\n+\t     i, vec_ull_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_f_arg1 = (vector float){100.0, 101.1, 102.2, 103.3};\n+  vec_f_arg2 = (vector float){200.0, 201.1, 202.2, 203.3};\n+\n+  vec_f_result = vec_mergee (vec_f_arg1, vec_f_arg2);\n+\n+  vec_f_expected = (vector float){100.0, 200.0, 102.2, 202.2};\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_f_result[i] != vec_f_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergee(): vec_f_result[%d] = %f, vec_f_expected[%d] = %f\\n\",\n+\t     i, vec_f_result[i], i, vec_f_expected[i]);\n+#else\n+      abort();\n+#endif\n+\n+  vec_d_arg1 = (vector double){300.0, 301.1};\n+  vec_d_arg2 = (vector double){400.0, 401.1};\n+\n+  vec_d_result = vec_mergee (vec_d_arg1, vec_d_arg2);\n+\n+  vec_d_expected = (vector double){300.0, 400.0};\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_d_result[i] != vec_d_expected[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_mergee(): vec_d_result[%d] = %f, vec_d_expected[%d] = %f\\n\",\n+\t     i, vec_d_result[i], i, vec_d_expected[i]);\n+#else\n+      abort();\n+#endif\n+}"}]}