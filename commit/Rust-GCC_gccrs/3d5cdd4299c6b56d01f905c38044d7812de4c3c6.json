{"sha": "3d5cdd4299c6b56d01f905c38044d7812de4c3c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1Y2RkNDI5OWM2YjU2ZDAxZjkwNWMzODA0NGQ3ODEyZGU0YzNjNg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-05-17T16:36:13Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-05-17T16:36:13Z"}, "message": "toplev.c (print_version): New function.\n\n\t* toplev.c (print_version): New function.\n\t(print_single_switch): New arguments pos, max, indent, sep, term.\n\t(print_switch_values): New arguments pos, max, indent, sep, term.\n\tUpdate call to print_single_switch.  Output options passed and\n\toptions enabled.\n\t(MAX_LINE): New macro.\n\t(flag_debug_asm): Define.\n\t(compile_file): Output options to assembler file.\n\t(main): Recognize -dA.  Call print_version.  Update call to\n\tprint_switch_values.\n\t(line_position): Deleted.\n\nFrom-SVN: r12006", "tree": {"sha": "27f25e833c0fabdb3ef9feeac9b6914b1d229ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27f25e833c0fabdb3ef9feeac9b6914b1d229ff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d5cdd4299c6b56d01f905c38044d7812de4c3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5cdd4299c6b56d01f905c38044d7812de4c3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5cdd4299c6b56d01f905c38044d7812de4c3c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5cdd4299c6b56d01f905c38044d7812de4c3c6/comments", "author": null, "committer": null, "parents": [{"sha": "32b592fb5d4d1e9d4fa7a3696379913120ce8113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b592fb5d4d1e9d4fa7a3696379913120ce8113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b592fb5d4d1e9d4fa7a3696379913120ce8113"}], "stats": {"total": 176, "additions": 134, "deletions": 42}, "files": [{"sha": "7a7a19b5fe10fe4eea92d5d77139994374fa4853", "filename": "gcc/toplev.c", "status": "modified", "additions": 134, "deletions": 42, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5cdd4299c6b56d01f905c38044d7812de4c3c6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5cdd4299c6b56d01f905c38044d7812de4c3c6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3d5cdd4299c6b56d01f905c38044d7812de4c3c6", "patch": "@@ -138,9 +138,14 @@ void fancy_abort ();\n void abort ();\n #endif\n void set_target_switch ();\n-static void print_switch_values ();\n static char *decl_name ();\n \n+void print_version ();\n+int print_single_switch ();\n+void print_switch_values ();\n+/* Length of line when printing switch values.  */\n+#define MAX_LINE 75\n+\n #ifdef __alpha\n extern char *sbrk ();\n #endif\n@@ -515,9 +520,20 @@ int flag_inhibit_size_directive = 0;\n /* -fverbose-asm causes extra commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n-   generated assembly code (perhaps while debugging the compiler itself).  */\n+   generated assembly code (perhaps while debugging the compiler itself).\n+   -fverbose-asm is the default.  -fno-verbose-asm causes the extra information\n+   to be omitted and is useful when comparing two assembler files.  */\n+\n+int flag_verbose_asm = 1;\n \n-int flag_verbose_asm = 0;\n+/* -dA causes debug commentary information to be produced in\n+   the generated assembly code (to make it more readable).  This option\n+   is generally only of use to those who actually need to read the\n+   generated assembly code (perhaps while debugging the compiler itself).\n+   Currently, this switch is only used by dwarfout.c; however, it is intended\n+   to be a catchall for printing debug information in the assembler file.  */\n+\n+int flag_debug_asm = 0;\n \n /* -fgnu-linker specifies use of the GNU linker for initializations.\n    (Or, more generally, a linker that handles initializations.)\n@@ -2178,6 +2194,20 @@ compile_file (name)\n   if (!output_bytecode)\n     {\n       ASM_FILE_START (asm_out_file);\n+\n+#ifdef ASM_COMMENT_START\n+      if (flag_verbose_asm)\n+\t{\n+\t  /* Print the list of options in effect.  */\n+\t  /* ??? May want to only do this if -fverbose-asm or somesuch.  */\n+\t  print_version (asm_out_file, ASM_COMMENT_START);\n+\t  print_switch_values (asm_out_file, 0, MAX_LINE,\n+\t\t\t       ASM_COMMENT_START, \" \", \"\\n\");\n+\t  /* Add a blank line here so it appears in assembler output but not\n+\t     screen output.  */\n+\t  fprintf (asm_out_file, \"\\n\");\n+\t}\n+#endif\n     }\n \n   /* Output something to inform GDB that this compilation was by GCC.  Also\n@@ -3571,10 +3601,12 @@ main (argc, argv, envp)\n \t\t  case 'y':\n \t\t    set_yydebug (1);\n \t\t    break;\n-\n \t\t  case 'x':\n \t\t    rtl_dump_and_exit = 1;\n \t\t    break;\n+\t\t  case 'A':\n+\t\t    flag_debug_asm = 1;\n+\t\t    break;\n \t\t  }\n \t    }\n \t  else if (str[0] == 'f')\n@@ -3960,20 +3992,9 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n      option flags in use.  */\n   if (version_flag)\n     {\n-      fprintf (stderr, \"%s version %s\", language_string, version_string);\n-#ifdef TARGET_VERSION\n-      TARGET_VERSION;\n-#endif\n-#ifdef __GNUC__\n-#ifndef __VERSION__\n-#define __VERSION__ \"[unknown]\"\n-#endif\n-      fprintf (stderr, \" compiled by GNU C version %s.\\n\", __VERSION__);\n-#else\n-      fprintf (stderr, \" compiled by CC.\\n\");\n-#endif\n+      print_version (stderr, \"\");\n       if (! quiet_flag)\n-\tprint_switch_values ();\n+\tprint_switch_values (stderr, 0, MAX_LINE, \"\", \" \", \"\\n\");\n     }\n \n   compile_file (filename);\n@@ -4057,51 +4078,122 @@ set_target_switch (name)\n     error (\"Invalid option `%s'\", name);\n }\n \f\n-/* Variable used for communication between the following two routines.  */\n-\n-static int line_position;\n+/* Print version information to FILE.\n+   Each line begins with INDENT (for the case where FILE is the\n+   assembler output file).  */\n \n-/* Print an option value and adjust the position in the line.  */\n-\n-static void\n-print_single_switch (type, name)\n-     char *type, *name;\n+void\n+print_version (file, indent)\n+     FILE *file;\n+     char *indent;\n {\n-  fprintf (stderr, \" %s%s\", type, name);\n+  fprintf (file, \"%s%s%s version %s\", indent, *indent != 0 ? \" \" : \"\",\n+\t   language_string, version_string);\n+  fprintf (file, \" (%s)\", TARGET_NAME);\n+#ifdef __GNUC__\n+#ifndef __VERSION__\n+#define __VERSION__ \"[unknown]\"\n+#endif\n+  fprintf (file, \" compiled by GNU C version %s.\\n\", __VERSION__);\n+#else\n+  fprintf (file, \" compiled by CC.\\n\");\n+#endif\n+}\n \n-  line_position += strlen (type) + strlen (name) + 1;\n+/* Print an option value and return the adjusted position in the line.\n+   ??? We don't handle error returns from fprintf (disk full).  */\n \n-  if (line_position > 65)\n+int\n+print_single_switch (file, pos, max, indent, sep, term, type, name)\n+     FILE *file;\n+     int pos, max;\n+     char *indent, *sep, *term, *type, *name;\n+{\n+  if (pos != 0\n+      && pos + strlen (sep) + strlen (type) + strlen (name) > max)\n     {\n-      fprintf (stderr, \"\\n\\t\");\n-      line_position = 8;\n+      fprintf (file, \"%s\", term);\n+      pos = 0;\n     }\n+  if (pos == 0)\n+    {\n+      pos = fprintf (file, \"%s\", indent);\n+    }\n+  pos += fprintf (file, \"%s%s%s\", sep, type, name);\n+  return pos;\n }\n      \n-/* Print default target switches for -version.  */\n+/* Print active target switches to FILE.\n+   POS is the current cursor position and MAX is the size of a \"line\".\n+   Each line begins with INDENT and ends with TERM.\n+   Each switch is separated from the next by SEP.  */\n \n-static void\n-print_switch_values ()\n+void\n+print_switch_values (file, pos, max, indent, sep, term)\n+     FILE *file;\n+     int pos, max;\n+     char *indent, *sep, *term;\n {\n-  register int j;\n+  int j, flags;\n+  char **p;\n+\n+  /* Print the options as passed.  */\n \n-  fprintf (stderr, \"enabled:\");\n-  line_position = 8;\n+  pos = print_single_switch (file, pos, max, indent, *indent ? \" \" : \"\", term,\n+\t\t\t     \"options passed: \", \"\");\n+\n+  for (p = &save_argv[1]; *p != (char *)0; p++)\n+    if (**p == '-')\n+      {\n+\t/* Ignore these.  */\n+\tif (strcmp (*p, \"-quiet\") == 0)\n+\t  continue;\n+\tif (strcmp (*p, \"-version\") == 0)\n+\t  continue;\n+\tif ((*p)[1] == 'd')\n+\t  continue;\n+\n+\tpos = print_single_switch (file, pos, max, indent, sep, term, *p, \"\");\n+      }\n+  if (pos > 0)\n+    fprintf (file, \"%s\", term);\n+\n+  /* Print the -f and -m options that have been enabled.\n+     We don't handle language specific options but printing argv\n+     should suffice.  */\n+\n+  pos = print_single_switch (file, 0, max, indent, *indent ? \" \" : \"\", term,\n+\t\t\t     \"options enabled: \", \"\");\n \n   for (j = 0; j < sizeof f_options / sizeof f_options[0]; j++)\n     if (*f_options[j].variable == f_options[j].on_value)\n-      print_single_switch (\"-f\", f_options[j].string);\n+      pos = print_single_switch (file, pos, max, indent, sep, term,\n+\t\t\t\t \"-f\", f_options[j].string);\n \n-  for (j = 0; j < sizeof W_options / sizeof W_options[0]; j++)\n-    if (*W_options[j].variable == W_options[j].on_value)\n-      print_single_switch (\"-W\", W_options[j].string);\n+  /* Print target specific options.  */\n \n+  flags = target_flags;\n   for (j = 0; j < sizeof target_switches / sizeof target_switches[0]; j++)\n     if (target_switches[j].name[0] != '\\0'\n \t&& target_switches[j].value > 0\n \t&& ((target_switches[j].value & target_flags)\n \t    == target_switches[j].value))\n-      print_single_switch (\"-m\", target_switches[j].name);\n+      {\n+\tpos = print_single_switch (file, pos, max, indent, sep, term,\n+\t\t\t\t   \"-m\", target_switches[j].name);\n+\tflags &= ~ target_switches[j].value;\n+      }\n+\n+#ifdef TARGET_OPTIONS\n+  for (j = 0; j < sizeof target_options / sizeof target_options[0]; j++)\n+    if (*target_options[j].variable != NULL)\n+      {\n+\tchar prefix[256];\n+\tsprintf (prefix, \"-m%s\", target_options[j].prefix);\n+\tpos = print_single_switch (file, pos, max, indent, sep, term,\n+\t\t\t\t   prefix, *target_options[j].variable);\n+      }\n+#endif\n \n-  fprintf (stderr, \"\\n\");\n+  fprintf (file, \"%s\", term);\n }"}]}