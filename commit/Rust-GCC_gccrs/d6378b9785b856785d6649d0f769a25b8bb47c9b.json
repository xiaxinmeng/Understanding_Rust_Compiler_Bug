{"sha": "d6378b9785b856785d6649d0f769a25b8bb47c9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNzhiOTc4NWI4NTY3ODVkNjY0OWQwZjc2OWEyNWI4YmI0N2M5Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-02T12:38:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-02T12:38:13Z"}, "message": "c++: Avoid building garbage trees from tsubst_requires_expr\n\nSince we no longer partially instantiate REQUIRES_EXPRs, we don't need\nto rebuild its requirements during tsubst_requires_expr.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (tsubst_simple_requirement): Just return\n\tboolean_true_node on success.\n\t(tsubst_type_requirement): Likewise.\n\t(tsubst_compound_requirement): Likewise.\n\t(tsubst_nested_requirement): Likewise.\n\t(tsubst_requirement_body): Remove.\n\t(check_constaint_variables): Rename to ...\n\t(check_constraint_variables): ... this.\n\t(tsubst_constraint_variables): Adjust.\n\t(tsubst_requires_expr): Fold tsubst_requirement_body into here.", "tree": {"sha": "ea7753650e50263a8cae4437f6899da144f5c240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea7753650e50263a8cae4437f6899da144f5c240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6378b9785b856785d6649d0f769a25b8bb47c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6378b9785b856785d6649d0f769a25b8bb47c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6378b9785b856785d6649d0f769a25b8bb47c9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6378b9785b856785d6649d0f769a25b8bb47c9b/comments", "author": null, "committer": null, "parents": [{"sha": "2bd58910b04ea785adda683cf0d494ebe11be477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd58910b04ea785adda683cf0d494ebe11be477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd58910b04ea785adda683cf0d494ebe11be477"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "3e599fe8c47576f2921dc8341f1aee41a9964c07", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6378b9785b856785d6649d0f769a25b8bb47c9b/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6378b9785b856785d6649d0f769a25b8bb47c9b/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=d6378b9785b856785d6649d0f769a25b8bb47c9b", "patch": "@@ -1962,7 +1962,7 @@ tsubst_simple_requirement (tree t, tree args, subst_info info)\n   tree expr = tsubst_valid_expression_requirement (t0, args, info);\n   if (expr == error_mark_node)\n     return error_mark_node;\n-  return finish_simple_requirement (EXPR_LOCATION (t), expr);\n+  return boolean_true_node;\n }\n \n /* Substitute through the type requirement.  */\n@@ -1974,7 +1974,7 @@ tsubst_type_requirement (tree t, tree args, subst_info info)\n   tree type = tsubst (t0, args, info.complain, info.in_decl);\n   if (type == error_mark_node)\n     return error_mark_node;\n-  return finish_type_requirement (EXPR_LOCATION (t), type);\n+  return boolean_true_node;\n }\n \n /* True if TYPE can be deduced from EXPR.  */\n@@ -2080,8 +2080,7 @@ tsubst_compound_requirement (tree t, tree args, subst_info info)\n \treturn error_mark_node;\n     }\n \n-  return finish_compound_requirement (EXPR_LOCATION (t),\n-\t\t\t\t      expr, type, noexcept_p);\n+  return boolean_true_node;\n }\n \n static tree\n@@ -2100,7 +2099,7 @@ tsubst_nested_requirement (tree t, tree args, subst_info info)\n     }\n   if (result != boolean_true_node)\n     return error_mark_node;\n-  return result;\n+  return boolean_true_node;\n }\n \n /* Substitute ARGS into the requirement T.  */\n@@ -2125,24 +2124,6 @@ tsubst_requirement (tree t, tree args, subst_info info)\n   gcc_unreachable ();\n }\n \n-/* Substitute ARGS into the list of requirements T. Note that\n-   substitution failures here result in ill-formed programs. */\n-\n-static tree\n-tsubst_requirement_body (tree t, tree args, subst_info info)\n-{\n-  tree result = NULL_TREE;\n-  while (t)\n-    {\n-      tree req = tsubst_requirement (TREE_VALUE (t), args, info);\n-      if (req == error_mark_node)\n-\treturn error_mark_node;\n-      result = tree_cons (NULL_TREE, req, result);\n-      t = TREE_CHAIN (t);\n-    }\n-  return nreverse (result);\n-}\n-\n static tree\n declare_constraint_vars (tree parms, tree vars)\n {\n@@ -2168,7 +2149,7 @@ declare_constraint_vars (tree parms, tree vars)\n    if an error occurred.  */\n \n static tree\n-check_constaint_variables (tree t, tree args, subst_info info)\n+check_constraint_variables (tree t, tree args, subst_info info)\n {\n   tree types = NULL_TREE;\n   tree p = t;\n@@ -2193,7 +2174,7 @@ static tree\n tsubst_constraint_variables (tree t, tree args, subst_info info)\n {\n   /* Perform a trial substitution to check for type errors.  */\n-  tree parms = check_constaint_variables (t, args, info);\n+  tree parms = check_constraint_variables (t, args, info);\n   if (parms == error_mark_node)\n     return error_mark_node;\n \n@@ -2253,19 +2234,20 @@ tsubst_requires_expr (tree t, tree args,\n       return t;\n     }\n \n-  tree parms = REQUIRES_EXPR_PARMS (t);\n-  if (parms)\n+  if (tree parms = REQUIRES_EXPR_PARMS (t))\n     {\n       parms = tsubst_constraint_variables (parms, args, info);\n       if (parms == error_mark_node)\n \treturn boolean_false_node;\n     }\n \n-  tree reqs = REQUIRES_EXPR_REQS (t);\n-  reqs = tsubst_requirement_body (reqs, args, info);\n-  if (reqs == error_mark_node)\n-    return boolean_false_node;\n-\n+  for (tree reqs = REQUIRES_EXPR_REQS (t); reqs; reqs = TREE_CHAIN (reqs))\n+    {\n+      tree req = TREE_VALUE (reqs);\n+      tree result = tsubst_requirement (req, args, info);\n+      if (result == error_mark_node)\n+\treturn boolean_false_node;\n+    }\n   return boolean_true_node;\n }\n "}]}