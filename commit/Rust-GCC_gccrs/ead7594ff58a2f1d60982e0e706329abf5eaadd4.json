{"sha": "ead7594ff58a2f1d60982e0e706329abf5eaadd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkNzU5NGZmNThhMmYxZDYwOTgyZTBlNzA2MzI5YWJmNWVhYWRkNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-05-13T08:41:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-07T09:26:59Z"}, "message": "[Ada] ACATS 4.1K - C452003\n\ngcc/ada/\n\n\t* exp_ch4.adb (Tagged_Membership): Generate a call to\n\tCW_Membership instead of using Build_CW_Membership.\n\t(Expand_N_In): Remove wrong handling of null access types and\n\tcorresponding comment.\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Generate a\n\tcall to CW_Membership instead of using Build_CW_Membership.\n\t* rtsfind.ads: Add CW_Membership.\n\t* exp_atag.ads, exp_atag.adb (Build_CW_Membership): Removed.\n\t* einfo.ads: Fix typo.\n\t* libgnat/a-tags.ads, libgnat/a-tags.adb (CW_Membership): Moved\n\tback to spec.", "tree": {"sha": "7f4e6c7fe021d0df122c3ee8a4a6fc8256dbcb1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4e6c7fe021d0df122c3ee8a4a6fc8256dbcb1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead7594ff58a2f1d60982e0e706329abf5eaadd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead7594ff58a2f1d60982e0e706329abf5eaadd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead7594ff58a2f1d60982e0e706329abf5eaadd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead7594ff58a2f1d60982e0e706329abf5eaadd4/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b501e59d1d5c2aa28574fd188db04f7e762f4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b501e59d1d5c2aa28574fd188db04f7e762f4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b501e59d1d5c2aa28574fd188db04f7e762f4cd"}], "stats": {"total": 267, "additions": 75, "deletions": 192}, "files": [{"sha": "7138b9d59de4e5172f53d4eb5b24924e717f9511", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -591,7 +591,7 @@ package Einfo is\n --       never have a null value. Set for constant access values initialized to\n --       a non-null value. This is also set for all access parameters in Ada 83\n --       and Ada 95 modes, and for access parameters that explicitly exclude\n---       exclude null in Ada 2005 mode.\n+--       null in Ada 2005 mode.\n --\n --       This is used to avoid unnecessary resetting of the Is_Known_Non_Null\n --       flag for such entities. In Ada 2005 mode, this is also used when"}, {"sha": "dc1d1386852e8e15ff563ce167a15eb8670e41ce", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -27,7 +27,6 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Exp_Disp; use Exp_Disp;\n-with Exp_Util; use Exp_Util;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -159,118 +158,6 @@ package body Exp_Atag is\n               Make_Simple_Return_Statement (Loc))));\n    end Build_Common_Dispatching_Select_Statements;\n \n-   -------------------------\n-   -- Build_CW_Membership --\n-   -------------------------\n-\n-   procedure Build_CW_Membership\n-     (Loc          : Source_Ptr;\n-      Obj_Tag_Node : in out Node_Id;\n-      Typ_Tag_Node : Node_Id;\n-      Related_Nod  : Node_Id;\n-      New_Node     : out Node_Id)\n-   is\n-      Tag_Addr : constant Entity_Id := Make_Temporary (Loc, 'D', Obj_Tag_Node);\n-      Obj_TSD  : constant Entity_Id := Make_Temporary (Loc, 'D');\n-      Typ_TSD  : constant Entity_Id := Make_Temporary (Loc, 'D');\n-      Index    : constant Entity_Id := Make_Temporary (Loc, 'D');\n-\n-   begin\n-      --  Generate:\n-\n-      --    Tag_Addr : constant Tag := Address!(Obj_Tag);\n-      --    Obj_TSD  : constant Type_Specific_Data_Ptr\n-      --                          := Build_TSD (Tag_Addr);\n-      --    Typ_TSD  : constant Type_Specific_Data_Ptr\n-      --                          := Build_TSD (Address!(Typ_Tag));\n-      --    Index    : constant Integer := Obj_TSD.Idepth - Typ_TSD.Idepth\n-      --    Index >= 0 and then Obj_TSD.Tags_Table (Index) = Typ'Tag\n-\n-      Insert_Action (Related_Nod,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Tag_Addr,\n-          Constant_Present    => True,\n-          Object_Definition   => New_Occurrence_Of (RTE (RE_Address), Loc),\n-          Expression          => Unchecked_Convert_To\n-                                   (RTE (RE_Address), Obj_Tag_Node)));\n-\n-      --  Unchecked_Convert_To relocates Obj_Tag_Node and therefore we must\n-      --  update it.\n-\n-      Obj_Tag_Node := Expression (Expression (Parent (Tag_Addr)));\n-\n-      Insert_Action (Related_Nod,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Obj_TSD,\n-          Constant_Present    => True,\n-          Object_Definition   =>\n-            New_Occurrence_Of (RTE (RE_Type_Specific_Data_Ptr), Loc),\n-          Expression          =>\n-            Build_TSD (Loc, New_Occurrence_Of (Tag_Addr, Loc))),\n-        Suppress => All_Checks);\n-\n-      Insert_Action (Related_Nod,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Typ_TSD,\n-          Constant_Present    => True,\n-          Object_Definition   =>\n-            New_Occurrence_Of (RTE (RE_Type_Specific_Data_Ptr), Loc),\n-          Expression          =>\n-            Build_TSD (Loc,\n-              Unchecked_Convert_To (RTE (RE_Address), Typ_Tag_Node))),\n-        Suppress => All_Checks);\n-\n-      Insert_Action (Related_Nod,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Index,\n-          Constant_Present    => True,\n-          Object_Definition   => New_Occurrence_Of (Standard_Integer, Loc),\n-          Expression =>\n-            Make_Op_Subtract (Loc,\n-              Left_Opnd =>\n-                Make_Selected_Component (Loc,\n-                  Prefix        =>\n-                    Make_Explicit_Dereference (Loc,\n-                      New_Occurrence_Of (Obj_TSD, Loc)),\n-                  Selector_Name =>\n-                     New_Occurrence_Of\n-                       (RTE_Record_Component (RE_Idepth), Loc)),\n-\n-               Right_Opnd =>\n-                 Make_Selected_Component (Loc,\n-                   Prefix        =>\n-                     Make_Explicit_Dereference (Loc,\n-                       New_Occurrence_Of (Typ_TSD, Loc)),\n-                   Selector_Name =>\n-                     New_Occurrence_Of\n-                       (RTE_Record_Component (RE_Idepth), Loc)))),\n-        Suppress => All_Checks);\n-\n-      New_Node :=\n-        Make_And_Then (Loc,\n-          Left_Opnd =>\n-            Make_Op_Ge (Loc,\n-              Left_Opnd  => New_Occurrence_Of (Index, Loc),\n-              Right_Opnd => Build_Val (Loc, Uint_0)),\n-\n-          Right_Opnd =>\n-            Make_Op_Eq (Loc,\n-              Left_Opnd =>\n-                Make_Indexed_Component (Loc,\n-                  Prefix      =>\n-                    Make_Selected_Component (Loc,\n-                      Prefix        =>\n-                        Make_Explicit_Dereference (Loc,\n-                          New_Occurrence_Of (Obj_TSD, Loc)),\n-                      Selector_Name =>\n-                        New_Occurrence_Of\n-                          (RTE_Record_Component (RE_Tags_Table), Loc)),\n-                  Expressions =>\n-                    New_List (New_Occurrence_Of (Index, Loc))),\n-\n-              Right_Opnd => Typ_Tag_Node));\n-   end Build_CW_Membership;\n-\n    --------------\n    -- Build_DT --\n    --------------"}, {"sha": "05e2f8e89a9e1ce045beffec63c1b31ede5db904", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -41,24 +41,6 @@ package Exp_Atag is\n    --  timed, asynchronous, and conditional select and append them to Stmts.\n    --  Typ is the tagged type used for dispatching calls.\n \n-   procedure Build_CW_Membership\n-     (Loc          : Source_Ptr;\n-      Obj_Tag_Node : in out Node_Id;\n-      Typ_Tag_Node : Node_Id;\n-      Related_Nod  : Node_Id;\n-      New_Node     : out Node_Id);\n-   --  Build code that returns true if Obj_Tag is in Typ_Tag'Class. Each DT\n-   --  has a table of ancestors and its inheritance level (Idepth). Obj is in\n-   --  Typ'Class if Typ'Tag is found in the table of ancestors referenced by\n-   --  Obj'Tag. Knowing the level of inheritance of both types, this can be\n-   --  computed in constant time by the formula:\n-   --\n-   --   Index := TSD (Obj'Tag).Idepth - TSD (Typ'Tag).Idepth;\n-   --   Index >= 0 and then TSD (Obj'Tag).Tags_Table (Index) = Typ'Tag\n-   --\n-   --  Related_Nod is the node where the implicit declaration of variable Index\n-   --  is inserted. Obj_Tag_Node is relocated.\n-\n    function Build_Get_Access_Level\n      (Loc      : Source_Ptr;\n       Tag_Node : Node_Id) return Node_Id;"}, {"sha": "6a0b1ce763e7b0fa7f920d36ebd89e2f3162a72c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 53, "deletions": 33, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -6827,18 +6827,7 @@ package body Exp_Ch4 is\n                      --  If the designated type is tagged, do tagged membership\n                      --  operation.\n \n-                     --  *** NOTE: we have to check not null before doing the\n-                     --  tagged membership test (but maybe that can be done\n-                     --  inside Tagged_Membership?).\n-\n                      if Is_Tagged_Type (Typ) then\n-                        Rewrite (N,\n-                          Make_And_Then (Loc,\n-                            Left_Opnd  => Relocate_Node (N),\n-                            Right_Opnd =>\n-                              Make_Op_Ne (Loc,\n-                                Left_Opnd  => Obj,\n-                                Right_Opnd => Make_Null (Loc))));\n \n                         --  No expansion will be performed for VM targets, as\n                         --  the VM back ends will handle the membership tests\n@@ -14969,6 +14958,9 @@ package body Exp_Ch4 is\n    --  usually implemented by looking in the ancestor tables contained in the\n    --  dispatch table pointed by Left_Expr.Tag for Typ'Tag\n \n+   --  In both cases if Left_Expr is an access type, we first check whether it\n+   --  is null.\n+\n    --  Ada 2005 (AI-251): If it is a class-wide interface type we use the RT\n    --  function IW_Membership which is usually implemented by looking in the\n    --  table of abstract interface types plus the ancestor table contained in\n@@ -14983,19 +14975,17 @@ package body Exp_Ch4 is\n       Right : constant Node_Id    := Right_Opnd (N);\n       Loc   : constant Source_Ptr := Sloc (N);\n \n-      Full_R_Typ : Entity_Id;\n-      Left_Type  : Entity_Id;\n-      New_Node   : Node_Id;\n-      Right_Type : Entity_Id;\n-      Obj_Tag    : Node_Id;\n+      --  Handle entities from the limited view\n \n-   begin\n-      SCIL_Node := Empty;\n+      Orig_Right_Type : constant Entity_Id := Available_View (Etype (Right));\n \n-      --  Handle entities from the limited view\n+      Full_R_Typ   : Entity_Id;\n+      Left_Type    : Entity_Id := Available_View (Etype (Left));\n+      Right_Type   : Entity_Id := Orig_Right_Type;\n+      Obj_Tag      : Node_Id;\n \n-      Left_Type  := Available_View (Etype (Left));\n-      Right_Type := Available_View (Etype (Right));\n+   begin\n+      SCIL_Node := Empty;\n \n       --  In the case where the type is an access type, the test is applied\n       --  using the designated types (needed in Ada 2012 for implicit anonymous\n@@ -15069,7 +15059,7 @@ package body Exp_Ch4 is\n            or else Is_Interface (Left_Type)\n          then\n             --  Issue error if IW_Membership operation not available in a\n-            --  configurable run time setting.\n+            --  configurable run-time setting.\n \n             if not RTE_Available (RE_IW_Membership) then\n                Error_Msg_CRT\n@@ -15092,25 +15082,32 @@ package body Exp_Ch4 is\n          --  Ada 95: Normal case\n \n          else\n-            Build_CW_Membership (Loc,\n-              Obj_Tag_Node => Obj_Tag,\n-              Typ_Tag_Node =>\n-                 New_Occurrence_Of (\n-                   Node (First_Elmt (Access_Disp_Table (Full_R_Typ))),  Loc),\n-              Related_Nod => N,\n-              New_Node    => New_Node);\n+            --  Issue error if CW_Membership operation not available in a\n+            --  configurable run-time setting.\n+\n+            if not RTE_Available (RE_CW_Membership) then\n+               Error_Msg_CRT\n+                 (\"dynamic membership test on tagged types\", N);\n+               Result := Empty;\n+               return;\n+            end if;\n+\n+            Result :=\n+              Make_Function_Call (Loc,\n+                 Name => New_Occurrence_Of (RTE (RE_CW_Membership), Loc),\n+                 Parameter_Associations => New_List (\n+                   Obj_Tag,\n+                   New_Occurrence_Of (\n+                     Node (First_Elmt (Access_Disp_Table (Full_R_Typ))),\n+                     Loc)));\n \n             --  Generate the SCIL node for this class-wide membership test.\n-            --  Done here because the previous call to Build_CW_Membership\n-            --  relocates Obj_Tag.\n \n             if Generate_SCIL then\n                SCIL_Node := Make_SCIL_Membership_Test (Sloc (N));\n                Set_SCIL_Entity (SCIL_Node, Etype (Right_Type));\n                Set_SCIL_Tag_Value (SCIL_Node, Obj_Tag);\n             end if;\n-\n-            Result := New_Node;\n          end if;\n \n       --  Right_Type is not a class-wide type\n@@ -15130,6 +15127,29 @@ package body Exp_Ch4 is\n                     (Node (First_Elmt (Access_Disp_Table (Full_R_Typ))), Loc));\n          end if;\n       end if;\n+\n+      --  if Left is an access object then generate test of the form:\n+      --    * if Right_Type excludes null: Left /= null and then ...\n+      --    * if Right_Type includes null: Left = null or else ...\n+\n+      if Is_Access_Type (Orig_Right_Type) then\n+         if Can_Never_Be_Null (Orig_Right_Type) then\n+            Result := Make_And_Then (Loc,\n+              Left_Opnd  =>\n+                Make_Op_Ne (Loc,\n+                  Left_Opnd  => Left,\n+                  Right_Opnd => Make_Null (Loc)),\n+              Right_Opnd => Result);\n+\n+         else\n+            Result := Make_Or_Else (Loc,\n+              Left_Opnd  =>\n+                Make_Op_Eq (Loc,\n+                  Left_Opnd  => Left,\n+                  Right_Opnd => Make_Null (Loc)),\n+              Right_Opnd => Result);\n+         end if;\n+      end if;\n    end Tagged_Membership;\n \n    ------------------------------"}, {"sha": "12dcbae5fe8d191f3372822de054c855d976c31c", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -430,28 +430,21 @@ package body Exp_Intr is\n       --  the tag in the table of ancestor tags.\n \n       elsif not Is_Interface (Result_Typ) then\n-         declare\n-            Obj_Tag_Node : Node_Id := New_Copy_Tree (Tag_Arg);\n-            CW_Test_Node : Node_Id;\n-\n-         begin\n-            Build_CW_Membership (Loc,\n-              Obj_Tag_Node => Obj_Tag_Node,\n-              Typ_Tag_Node =>\n-                New_Occurrence_Of (\n-                   Node (First_Elmt (Access_Disp_Table (\n-                                       Root_Type (Result_Typ)))), Loc),\n-              Related_Nod => N,\n-              New_Node    => CW_Test_Node);\n-\n-            Insert_Action (N,\n-              Make_Implicit_If_Statement (N,\n-                Condition =>\n-                  Make_Op_Not (Loc, CW_Test_Node),\n-                Then_Statements =>\n-                  New_List (Make_Raise_Statement (Loc,\n-                              New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n-         end;\n+         Insert_Action (N,\n+           Make_Implicit_If_Statement (N,\n+             Condition =>\n+               Make_Op_Not (Loc,\n+                 Make_Function_Call (Loc,\n+                    Name => New_Occurrence_Of (RTE (RE_CW_Membership), Loc),\n+                    Parameter_Associations => New_List (\n+                      New_Copy_Tree (Tag_Arg),\n+                      New_Occurrence_Of (\n+                        Node (First_Elmt (Access_Disp_Table (\n+                                            Root_Type (Result_Typ)))), Loc)))),\n+             Then_Statements =>\n+               New_List (\n+                 Make_Raise_Statement (Loc,\n+                   Name => New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n \n       --  Call IW_Membership test if the Result_Type is an abstract interface\n       --  to look for the tag in the table of interface tags."}, {"sha": "798780a4c1a19c166792de53b13f1b50009cc554", "filename": "gcc/ada/libgnat/a-tags.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tags.adb?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -49,10 +49,6 @@ package body Ada.Tags is\n    -- Local Subprograms --\n    -----------------------\n \n-   function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean;\n-   --  Given the tag of an object and the tag associated to a type, return\n-   --  true if Obj is in Typ'Class.\n-\n    function Get_External_Tag (T : Tag) return System.Address;\n    --  Returns address of a null terminated string containing the external name\n \n@@ -82,7 +78,6 @@ package body Ada.Tags is\n    --  Ada 2005 (AI-251): Given a pointer T to a dispatch Table, retrieves the\n    --  address of the record containing the Select Specific Data in T's TSD.\n \n-   pragma Inline_Always (CW_Membership);\n    pragma Inline_Always (Get_External_Tag);\n    pragma Inline_Always (Is_Primary_DT);\n    pragma Inline_Always (OSD);"}, {"sha": "fb386c373f07fdc1e568a6a656f2e0a4b0a5302a", "filename": "gcc/ada/libgnat/a-tags.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Flibgnat%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Flibgnat%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tags.ads?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -501,6 +501,10 @@ private\n    --  dispatch table, return the tagged kind of a type in the context of\n    --  concurrency and limitedness.\n \n+   function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean;\n+   --  Given the tag of an object and the tag associated to a type, return\n+   --  true if Obj is in Typ'Class.\n+\n    function IW_Membership (This : System.Address; T : Tag) return Boolean;\n    --  Ada 2005 (AI-251): General routine that checks if a given object\n    --  implements a tagged type. Its common usage is to check if Obj is in"}, {"sha": "6a1738b635c06f1225974d1b49eda6bc18050683", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead7594ff58a2f1d60982e0e706329abf5eaadd4/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=ead7594ff58a2f1d60982e0e706329abf5eaadd4", "patch": "@@ -512,6 +512,7 @@ package Rtsfind is\n      RE_Check_Interface_Conversion,      -- Ada.Tags\n      RE_Check_TSD,                       -- Ada.Tags\n      RE_Cstring_Ptr,                     -- Ada.Tags\n+     RE_CW_Membership,                   -- Ada.Tags\n      RE_Descendant_Tag,                  -- Ada.Tags\n      RE_Dispatch_Table,                  -- Ada.Tags\n      RE_Dispatch_Table_Wrapper,          -- Ada.Tags\n@@ -1798,6 +1799,7 @@ package Rtsfind is\n      RE_Check_Interface_Conversion       => Ada_Tags,\n      RE_Check_TSD                        => Ada_Tags,\n      RE_Cstring_Ptr                      => Ada_Tags,\n+     RE_CW_Membership                    => Ada_Tags,\n      RE_Descendant_Tag                   => Ada_Tags,\n      RE_Dispatch_Table                   => Ada_Tags,\n      RE_Dispatch_Table_Wrapper           => Ada_Tags,"}]}