{"sha": "02307675eec294e5f6ff1fb235e32276743e0751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzMDc2NzVlZWMyOTRlNWY2ZmYxZmIyMzVlMzIyNzY3NDNlMDc1MQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-01-27T19:54:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-01-27T19:54:42Z"}, "message": "coverage.c (get_coverage_counts): Give a different message if flag_guess_branch_prob is set.\n\n\t* coverage.c (get_coverage_counts): Give a different message\n\tif flag_guess_branch_prob is set.\n\t* predict.c (counts_to_freqs): Return an int.\n\t(estimate_bb_frequencies): If counts_to_freqs returns zero,\n\tcalculate estimates.\n\nFrom-SVN: r76741", "tree": {"sha": "815da728ec01e62f4a77f8c3af52f31fbe745bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815da728ec01e62f4a77f8c3af52f31fbe745bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02307675eec294e5f6ff1fb235e32276743e0751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02307675eec294e5f6ff1fb235e32276743e0751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02307675eec294e5f6ff1fb235e32276743e0751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02307675eec294e5f6ff1fb235e32276743e0751/comments", "author": null, "committer": null, "parents": [{"sha": "e300e74f17fecbb6c2e81857e76ad73b90c4e0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e300e74f17fecbb6c2e81857e76ad73b90c4e0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e300e74f17fecbb6c2e81857e76ad73b90c4e0eb"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "fa552966ec913c326ab47850edcac9c4aa94b6b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02307675eec294e5f6ff1fb235e32276743e0751", "patch": "@@ -1,3 +1,11 @@\n+2004-01-27  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* coverage.c (get_coverage_counts): Give a different message\n+\tif flag_guess_branch_prob is set.\n+\t* predict.c (counts_to_freqs): Return an int.\n+\t(estimate_bb_frequencies): If counts_to_freqs returns zero,\n+\tcalculate estimates.\n+\n 2004-01-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/iq2000/iq2000-protos.h: Remove the prototype for"}, {"sha": "6d6f3b8b36fa7ebcaf7293fb0ef05ecc3931ef2d", "filename": "gcc/coverage.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=02307675eec294e5f6ff1fb235e32276743e0751", "patch": "@@ -316,7 +316,9 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       static int warned = 0;\n \n       if (!warned++)\n-\tinform (\"file %s not found, execution counts assumed to be zero\",\n+\tinform ((flag_guess_branch_prob\n+\t\t ? \"file %s not found, execution counts estimated\"\n+\t\t : \"file %s not found, execution counts assumed to be zero\"),\n \t\tda_file_name);\n       return NULL;\n     }"}, {"sha": "50580bd08ecdaeb26bb975d411156f30df0106bd", "filename": "gcc/predict.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02307675eec294e5f6ff1fb235e32276743e0751/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=02307675eec294e5f6ff1fb235e32276743e0751", "patch": "@@ -71,7 +71,7 @@ static void dump_prediction (enum br_predictor, int, basic_block, int);\n static void estimate_loops_at_level (struct loop *loop);\n static void propagate_freq (struct loop *);\n static void estimate_bb_frequencies (struct loops *);\n-static void counts_to_freqs (void);\n+static int counts_to_freqs (void);\n static void process_note_predictions (basic_block, int *);\n static void process_note_prediction (basic_block, int *, int, int);\n static bool last_basic_block_p (basic_block);\n@@ -1048,19 +1048,22 @@ estimate_loops_at_level (struct loop *first_loop)\n     }\n }\n \n-/* Convert counts measured by profile driven feedback to frequencies.  */\n+/* Convert counts measured by profile driven feedback to frequencies.\n+   Return nonzero iff there was any nonzero execution count.  */\n \n-static void\n+static int\n counts_to_freqs (void)\n {\n-  gcov_type count_max = 1;\n+  gcov_type count_max, true_count_max = 0;\n   basic_block bb;\n \n   FOR_EACH_BB (bb)\n-    count_max = MAX (bb->count, count_max);\n+    true_count_max = MAX (bb->count, true_count_max);\n \n+  count_max = MAX (true_count_max, 1);\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     bb->frequency = (bb->count * BB_FREQ_MAX + count_max / 2) / count_max;\n+  return true_count_max;\n }\n \n /* Return true if function is likely to be expensive, so there is no point to\n@@ -1113,9 +1116,7 @@ estimate_bb_frequencies (struct loops *loops)\n   basic_block bb;\n   sreal freq_max;\n \n-  if (flag_branch_probabilities)\n-    counts_to_freqs ();\n-  else\n+  if (!flag_branch_probabilities || !counts_to_freqs ())\n     {\n       static int real_values_initialized = 0;\n "}]}