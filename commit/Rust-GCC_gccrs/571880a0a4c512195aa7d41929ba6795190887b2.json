{"sha": "571880a0a4c512195aa7d41929ba6795190887b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxODgwYTBhNGM1MTIxOTVhYTdkNDE5MjliYTY3OTUxOTA4ODdiMg==", "commit": {"author": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2013-11-14T08:38:54Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2013-11-14T08:38:54Z"}, "message": "[multiple changes]\n\n2013-11-14  Julian Brown  <julian@codesourcery.com>\n        Joey Ye  <joey.ye@arm.com>\n\n        * config/arm/arm.c (arm_cortex_m_branch_cost): New.\n        (arm_v7m_tune): New.\n        (arm_slowmul_tune, arm_fastmul_tune,\n        arm_strongarm_tune, arm_9e_tune, arm_v6t2_tune,\n        arm_cortex_tune, arm_cortex_a15_tune,\n        arm_cortex_a5_tune, arm_v6m_tune): Add comments\n        for Sched adj cost.\n        * config/arm/arm-cores.def (cortex-m4, cortex-m3):\n        Use arm_v7m_tune.\n\ntestsuite:\n2013-11-14  Joey Ye  <joey.ye@arm.com>\n\n        * gcc.dg/tree-ssa/forwprop-28.c: Disable for cortex_m.\n        * gcc.dg/tree-ssa/vrp47.c: Likewise.\n        * gcc.dg/tree-ssa/vrp87.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-dom-thread-4.c: Ingore for cortex_m.\n        * gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Likewise.\n\nFrom-SVN: r204778", "tree": {"sha": "f49725ebe89f668e21e577c309ce2d7ad36ddbc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49725ebe89f668e21e577c309ce2d7ad36ddbc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/571880a0a4c512195aa7d41929ba6795190887b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571880a0a4c512195aa7d41929ba6795190887b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571880a0a4c512195aa7d41929ba6795190887b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571880a0a4c512195aa7d41929ba6795190887b2/comments", "author": null, "committer": null, "parents": [{"sha": "2430d1e2638aa4ae7576460ed87c2441009c8600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2430d1e2638aa4ae7576460ed87c2441009c8600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2430d1e2638aa4ae7576460ed87c2441009c8600"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "636cdbad92b825e03eb799fe3b2a02178ab96137", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -1,3 +1,16 @@\n+2013-11-14  Julian Brown  <julian@codesourcery.com>\n+\tJoey Ye  <joey.ye@arm.com>\n+\n+\t* config/arm/arm.c (arm_cortex_m_branch_cost): New.\n+\t(arm_v7m_tune): New.\n+\t(arm_slowmul_tune, arm_fastmul_tune,\n+\tarm_strongarm_tune, arm_9e_tune, arm_v6t2_tune,\n+\tarm_cortex_tune, arm_cortex_a15_tune,\n+\tarm_cortex_a5_tune, arm_v6m_tune): Add comments\n+\tfor Sched adj cost.\n+\t* config/arm/arm-cores.def (cortex-m4, cortex-m3):\n+\tUse arm_v7m_tune.\n+\n 2013-11-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/57491"}, {"sha": "d664e7364241afdc86b660bd710cf66c38f71f75", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -134,8 +134,8 @@ ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r5\",\t  cortexr5,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)\n ARM_CORE(\"cortex-r7\",\t  cortexr7,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-m4\",\t  cortexm4,\t7EM,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-m4\",\t  cortexm4,\t7EM,\t\t\t\t FL_LDSCHED, v7m)\n+ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, v7m)\n ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n ARM_CORE(\"cortex-m0\",\t  cortexm0,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n ARM_CORE(\"cortex-m0plus\", cortexm0plus,\t6M,\t\t\t\t FL_LDSCHED, v6m)"}, {"sha": "64c6b4965ffcd9ae0f468b9b668d793d5449295b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -266,6 +266,7 @@ static reg_class_t arm_preferred_rename_class (reg_class_t rclass);\n static unsigned int arm_autovectorize_vector_sizes (void);\n static int arm_default_branch_cost (bool, bool);\n static int arm_cortex_a5_branch_cost (bool, bool);\n+static int arm_cortex_m_branch_cost (bool, bool);\n \n static bool arm_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n \t\t\t\t\t     const unsigned char *sel);\n@@ -1260,7 +1261,7 @@ const struct tune_params arm_slowmul_tune =\n {\n   arm_slowmul_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   3,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1276,7 +1277,7 @@ const struct tune_params arm_fastmul_tune =\n {\n   arm_fastmul_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1295,7 +1296,7 @@ const struct tune_params arm_strongarm_tune =\n {\n   arm_fastmul_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   3,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1327,7 +1328,7 @@ const struct tune_params arm_9e_tune =\n {\n   arm_9e_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1343,7 +1344,7 @@ const struct tune_params arm_v6t2_tune =\n {\n   arm_9e_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1360,7 +1361,7 @@ const struct tune_params arm_cortex_tune =\n {\n   arm_9e_rtx_costs,\n   &generic_extra_costs,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1392,7 +1393,7 @@ const struct tune_params arm_cortex_a15_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa15_extra_costs,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   2,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1411,7 +1412,7 @@ const struct tune_params arm_cortex_a5_tune =\n {\n   arm_9e_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   1,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -1439,13 +1440,36 @@ const struct tune_params arm_cortex_a9_tune =\n   false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n+/* armv7m tuning.  On Cortex-M4 cores for example, MOVW/MOVT take a single\n+   cycle to execute each.  An LDR from the constant pool also takes two cycles\n+   to execute, but mildly increases pipelining opportunity (consecutive\n+   loads/stores can be pipelined together, saving one cycle), and may also\n+   improve icache utilisation.  Hence we prefer the constant pool for such\n+   processors.  */\n+\n+const struct tune_params arm_v7m_tune =\n+{\n+  arm_9e_rtx_costs,\n+  &generic_extra_costs,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n+  arm_cortex_m_branch_cost,\n+  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n+  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n+  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n+};\n+\n /* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n    arm_v6t2_tune. It is used for cortex-m0, cortex-m1 and cortex-m0plus.  */\n const struct tune_params arm_v6m_tune =\n {\n   arm_9e_rtx_costs,\n   NULL,\n-  NULL,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n@@ -11241,6 +11265,20 @@ arm_cortex_a5_branch_cost (bool speed_p, bool predictable_p)\n   return speed_p ? 0 : arm_default_branch_cost (speed_p, predictable_p);\n }\n \n+/* Thumb-2 branches are relatively cheap on Cortex-M processors (\"1 + P cycles\"\n+   on Cortex-M4, where P varies from 1 to 3 according to some criteria), since\n+   sequences of non-executed instructions in IT blocks probably take the same\n+   amount of time as executed instructions (and the IT instruction itself takes\n+   space in icache).  This function was experimentally determined to give good\n+   results on a popular embedded benchmark.  */\n+\n+static int\n+arm_cortex_m_branch_cost (bool speed_p, bool predictable_p)\n+{\n+  return (TARGET_32BIT && speed_p) ? 1\n+         : arm_default_branch_cost (speed_p, predictable_p);\n+}\n+\n static bool fp_consts_inited = false;\n \n static REAL_VALUE_TYPE value_fp0;"}, {"sha": "6d8e43a09eec064fa5612eb7c50419364c512b18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -1,3 +1,11 @@\n+2013-11-14  Joey Ye  <joey.ye@arm.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-28.c: Disable for cortex_m.\n+\t* gcc.dg/tree-ssa/vrp47.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Ingore for cortex_m.\n+\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Likewise.\n+\n 2013-11-14  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/58533"}, {"sha": "1a4bf4a4444f1c426a3c191423c4c49fd00bf763", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-28.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -1,5 +1,9 @@\n /* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-*\"} } } */\n /* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n+   leading to two conditional jumps when evaluating an && condition.  Forwprop1\n+   is not able to optimize this.  */\n+/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n extern char *frob (void);\n extern _Bool testit (void);"}, {"sha": "0e4797cbd9f1faabf0f323f4ba0723bd3c59d1fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -59,9 +59,9 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  */\n-/* ARM Cortex-M0 defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n+/* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n    so skip below test.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! { { mips*-*-* avr-*-* arc*-*-* } || { arm_cortex_m && arm_thumb1 } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! { { mips*-*-* avr-*-* arc*-*-* } || { arm_cortex_m } } } } } } */\n /* MIPS defines LOGICAL_OP_NON_SHORT_CIRCUIT to 0, so we split both\n    \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n    rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,"}, {"sha": "b498d8bd89854ecbca675c93e890f5b4d71557ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -26,6 +26,8 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n   oof ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp1\" }  } */\n+/* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n+   so skip below test.  */\n+/* { dg-final { { scan-tree-dump-times \"Threaded\" 1 \"vrp1\" } || { arm_cortex_m } }  } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n "}, {"sha": "5a09fa0f49d56f5684b86db8825038d403429c25", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -6,10 +6,10 @@\n /* { dg-do compile { target { ! \"mips*-*-* arc*-*-* s390*-*-*  avr-*-* mn10300-*-*\" } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom1 -fdump-tree-vrp2\" } */\n /* { dg-additional-options \"-march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n-/* Skip on ARM Cortex-M0, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n+/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n    leading to two conditional jumps when evaluating an && condition.  VRP is\n    not able to optimize this.  */\n-/* { dg-skip-if \"\" { arm_cortex_m && arm_thumb1} } */\n+/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n int h(int x, int y)\n {"}, {"sha": "9aff0a6c46f83360f8bf318132e35a3fd8b087c5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp87.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571880a0a4c512195aa7d41929ba6795190887b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c?ref=571880a0a4c512195aa7d41929ba6795190887b2", "patch": "@@ -2,6 +2,10 @@\n \n /* { dg-options \"-O2 -fdump-tree-vrp2-details -fdump-tree-cddce2-details\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n+   leading to two conditional jumps when evaluating an && condition.  VRP is\n+   not able to optimize this.  */\n+/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;"}]}