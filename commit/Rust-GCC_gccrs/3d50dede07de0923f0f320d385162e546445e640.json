{"sha": "3d50dede07de0923f0f320d385162e546445e640", "node_id": "C_kwDOANBUbNoAKDNkNTBkZWRlMDdkZTA5MjNmMGYzMjBkMzg1MTYyZTU0NjQ0NWU2NDA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-14T16:46:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-14T17:19:08Z"}, "message": "libstdc++: Fix stream extraction of IEEE128 long double [PR100912]\n\nThe std::__convert_from_v helper that formats double and long double\nvalues into a char buffer was not being duplicated for the two long\ndouble ABIs. This resulted in an ODR violation inside the library, where\nsome callers needed it to use snprintf to format __ibm128 values and\nother callers needed it to use __snprintfieee128 to format __ieee128\nvalues. The linker discarded one of the definitions, leaving one set of\ncallers using the wrong code.\n\nThis puts __convert_from_v in the __gnu_cxx_ieee128 inline namespace\nwhen long double is __ieee128, so that there are two different\ndefinitions of the function.\n\nThe std::money_put::__do_put overload for __ibm128 values needs a\ndifferent fix, because that is defined when long double is __ieee128 and\nso would call the one in the inline namespace. That can be fixed by just\ninlining the code directly into the function and using an asm alias to\ncall the right version of snprintf for the __ibm128 format. The code to\ndo that can be simpler than __convert_from_v because if we're defining\nthe ALT128_COMPAT symbols we know that we have a recent glibc and so we\ncan assume that uselocale and snprintf are supported.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100912\n\t* config/locale/gnu/c_locale.h (__convert_from_v): Use inline\n\tnamespace for IEEE128 long double mode.\n\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: Add new symbol\n\tversion and export __gnu_cxx_ieee128::__convert_from_v.\n\t* include/bits/locale_facets_nonio.tcc (money_put::__do_put):\n\tMake __ibm128 overload use snprintf directly\n\t* testsuite/util/testsuite_abi.cc: Add new symbol version.\n\tRemove stable IEEE128/LDBL versions.", "tree": {"sha": "16cc21ce2695ca23db1045a731d1ab9ee36f9850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16cc21ce2695ca23db1045a731d1ab9ee36f9850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d50dede07de0923f0f320d385162e546445e640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d50dede07de0923f0f320d385162e546445e640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d50dede07de0923f0f320d385162e546445e640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d50dede07de0923f0f320d385162e546445e640/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a981a8e512934a990d1427d14e8e884409fade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a981a8e512934a990d1427d14e8e884409fade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a981a8e512934a990d1427d14e8e884409fade"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "526b62215e120b7c1e4317402d2eff1d03c2e876", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=3d50dede07de0923f0f320d385162e546445e640", "patch": "@@ -61,6 +61,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   typedef __locale_t\t\t__c_locale;\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+  && defined __LONG_DOUBLE_IEEE128__\n+namespace __gnu_cxx_ieee128 {\n+#endif\n+\n   // Convert numeric value of type double and long double to string and\n   // return length of string.  If vsnprintf is available use it, otherwise\n   // fall back to the unsafe vsprintf which, in general, can be dangerous\n@@ -108,6 +113,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __ret;\n   }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+  && defined __LONG_DOUBLE_IEEE128__\n+} // namespace __gnu_cxx_ieee128\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "830cb8c40f41bc83b6de95a80bc4818d5cbfb1ec", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-ieee128-extra.ver", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver?ref=3d50dede07de0923f0f320d385162e546445e640", "patch": "@@ -2,7 +2,8 @@\n \n GLIBCXX_IEEE128_3.4.29 {\n \n-  *__gnu_cxx_ieee128*;\n+  _Z*St17__gnu_cxx_ieee1287num_get*;\n+  _Z*St17__gnu_cxx_ieee1287num_put*;\n \n   _ZNSt14numeric_limitsIu9__ieee128E*;\n   _ZNSirsERu9__ieee128;\n@@ -45,6 +46,10 @@ GLIBCXX_IEEE128_3.4.29 {\n \n } GLIBCXX_3.4.29;\n \n+GLIBCXX_IEEE128_3.4.30 {\n+  _ZNSt17__gnu_cxx_ieee12816__convert_from_vERKP15__locale_structPciPKcz;\n+} GLIBCXX_3.4.30;\n+\n CXXABI_IEEE128_1.3.13 {\n \n   _ZT[IS]u9__ieee128;"}, {"sha": "98442418f51e07de02454da5f220daf9fa506565", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=3d50dede07de0923f0f320d385162e546445e640", "patch": "@@ -635,6 +635,9 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n \n #if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n       && defined __LONG_DOUBLE_IEEE128__\n+extern \"C\"\n+__typeof__(__builtin_snprintf) __glibcxx_snprintfibm128 __asm__(\"snprintf\");\n+\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n@@ -643,30 +646,24 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n     {\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-#if _GLIBCXX_USE_C99_STDIO\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+      const __c_locale __old = __gnu_cxx::__uselocale(_S_get_c_locale());\n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 328. Bad sprintf format modifier in money_put<>::do_put()\n-      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n-\t\t\t\t\t\"%.*Lf\", 0, __units);\n+      int __len = __glibcxx_snprintfibm128(__cs, __cs_size, \"%.*Lf\", 0,\n+\t\t\t\t\t     __units);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n-\t\t\t\t\t\"%.*Lf\", 0, __units);\n+\t  __len = __glibcxx_snprintfibm128(__cs, __cs_size, \"%.*Lf\", 0,\n+\t\t\t\t\t     __units);\n \t}\n-#else\n-      // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n-      const int __cs_size =\n-\t__gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 3;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, \"%.*Lf\", \n-\t\t\t\t\t0, __units);\n-#endif\n+      __gnu_cxx::__uselocale(__old);\n       string_type __digits(__len, char_type());\n       __ctype.widen(__cs, __cs + __len, &__digits[0]);\n       return __intl ? _M_insert<true>(__s, __io, __fill, __digits)"}, {"sha": "3dee737b2e5ca8210924c7a07323bf284abda464", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d50dede07de0923f0f320d385162e546445e640/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=3d50dede07de0923f0f320d385162e546445e640", "patch": "@@ -213,6 +213,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.30\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.29\");\n       known_versions.push_back(\"GLIBCXX_IEEE128_3.4.29\");\n+      known_versions.push_back(\"GLIBCXX_IEEE128_3.4.30\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n@@ -247,11 +248,8 @@ check_version(symbol& test, bool added)\n \n       // Check that added symbols are added in the latest pre-release version.\n       bool latestp = (test.version_name == \"GLIBCXX_3.4.30\"\n-\t  // XXX remove next 3 lines when baselines have been regenerated\n-\t  // to include {IEEE128,LDBL} symbols:\n-\t\t     || test.version_name == \"GLIBCXX_LDBL_3.4.29\"\n-\t\t     || test.version_name == \"GLIBCXX_IEEE128_3.4.29\"\n-\t\t     || test.version_name == \"CXXABI_IEEE128_1.3.13\"\n+\t  // XXX remove next line when baselines have been regenerated.\n+\t\t     || test.version_name == \"GLIBCXX_IEEE128_3.4.30\"\n \t\t     || test.version_name == \"CXXABI_1.3.13\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");"}]}