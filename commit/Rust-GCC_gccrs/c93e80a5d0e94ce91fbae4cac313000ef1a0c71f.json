{"sha": "c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzZTgwYTVkMGU5NGNlOTFmYmFlNGNhYzMxMzAwMGVmMWEwYzcxZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-12-18T15:41:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-12-18T15:41:30Z"}, "message": "att.h (ASM_FILE_START): Use asm_dialect.\n\n\t* att.h (ASM_FILE_START): Use asm_dialect.\n\t* linux.h (ASM_FILE_START): Likewise.\n\t* gas.h (ASM_FILE_START): Likewise.\n\t* i386.c (ix86_debug_arg_string, ix86_debug_addr_string,\n\tix86_asm_string, ix86_asm_dialect): New.\n\t(override_options): Set asm_dialect.\n\t* i386.h (MASK_MIX_SSE_I387, MASK_INTEL_SYNTAX, MASK_DEBUG_ARG,\n\tMASK_DEBUG_ADDR): Kill.\n\t(MASK_64BIT, MASK_NO_RED_ZONE): renumber.\n\t(TARGET_DEBUG_ADDR, TARGET_DEBUG_ARG): Use string.\n\t(ASSEMBLER_DIALECT): Use asm_dialect.\n\t(TARGET_SWITCHES): Undocument deprecated items; deprecate intel-syntax;\n\tremove debug-addr and debug-arg.\n\t(TARGET_OPTIONS): Add debug-arg, debug-addr, asm.\n\t(asm_dialect): New enum.\n\t(ix86_debug_arg_string, ix86_debug_addr_string,\n\tix86_asm_string, ix86_asm_dialect): Declare.\n\t* invoke.texi (-mintel-syntax): Remove.\n\t(-masm): Document.\n\nFrom-SVN: r48160", "tree": {"sha": "611fbcb9c6a85228a73fc135998f2604838dd1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/611fbcb9c6a85228a73fc135998f2604838dd1a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/comments", "author": null, "committer": null, "parents": [{"sha": "114e78f8f0fe99574e974cb843ae0ab98ba21c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114e78f8f0fe99574e974cb843ae0ab98ba21c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114e78f8f0fe99574e974cb843ae0ab98ba21c4d"}], "stats": {"total": 105, "additions": 75, "deletions": 30}, "files": [{"sha": "b38f75fdaf7009c4ba708d21ff40fadeb025162c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -1,3 +1,25 @@\n+Tue Dec 18 16:39:46 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* att.h (ASM_FILE_START): Use asm_dialect.\n+\t* linux.h (ASM_FILE_START): Likewise.\n+\t* gas.h (ASM_FILE_START): Likewise.\n+\t* i386.c (ix86_debug_arg_string, ix86_debug_addr_string,\n+\tix86_asm_string, ix86_asm_dialect): New.\n+\t(override_options): Set asm_dialect.\n+\t* i386.h (MASK_MIX_SSE_I387, MASK_INTEL_SYNTAX, MASK_DEBUG_ARG,\n+\tMASK_DEBUG_ADDR): Kill.\n+\t(MASK_64BIT, MASK_NO_RED_ZONE): renumber.\n+\t(TARGET_DEBUG_ADDR, TARGET_DEBUG_ARG): Use string.\n+\t(ASSEMBLER_DIALECT): Use asm_dialect.\n+\t(TARGET_SWITCHES): Undocument deprecated items; deprecate intel-syntax;\n+\tremove debug-addr and debug-arg.\n+\t(TARGET_OPTIONS): Add debug-arg, debug-addr, asm.\n+\t(asm_dialect): New enum.\n+\t(ix86_debug_arg_string, ix86_debug_addr_string,\n+\tix86_asm_string, ix86_asm_dialect): Declare.\n+\t* invoke.texi (-mintel-syntax): Remove.\n+\t(-masm): Document.\n+\n Tue Dec 18 16:37:42 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* libgcc2.c (__bb_exit_func): Kill -ax dumping code."}, {"sha": "f16a5ea62335d59230945fcb3e557c5737a17377", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -53,7 +53,7 @@ do\t\t\t\t\t\t\t\t\\\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n+\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n   } while (0)\n "}, {"sha": "6c01b0737ac6d88d8adbf0e9438e3bb65282c9a9", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -166,7 +166,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-\tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n+\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n         output_file_directive (FILE, main_input_filename);\t\t\\\n   } while (0)"}, {"sha": "8bb7536ad9869396125eb89d1faefe316230a06d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -586,8 +586,13 @@ struct ix86_frame\n   HOST_WIDE_INT stack_pointer_offset;\n };\n \n+/* Used to enable/disable debugging features.  */\n+const char *ix86_debug_arg_string, *ix86_debug_addr_string;\n /* Code model option as passed by user.  */\n const char *ix86_cmodel_string;\n+/* Asm dialect.  */\n+const char *ix86_asm_string;\n+enum cmodel ix86_asm_dialect = ASM_ATT;\n /* Parsed value.  */\n enum cmodel ix86_cmodel;\n \n@@ -931,6 +936,15 @@ override_options ()\n       if (TARGET_64BIT)\n \tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n     }\n+  if (ix86_asm_string != 0)\n+    {\n+      if (!strcmp (ix86_asm_string, \"intel\"))\n+\tix86_asm_dialect = ASM_INTEL;\n+      else if (!strcmp (ix86_asm_string, \"att\"))\n+\tix86_asm_dialect = ASM_ATT;\n+      else\n+\terror (\"bad value (%s) for -masm= switch\", ix86_asm_string);\n+    }\n   if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n     error (\"code model `%s' not supported in the %s bit mode\",\n \t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");"}, {"sha": "7b4056df58bfa70ea7fd207629adf300ba151ff2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -131,14 +131,9 @@ extern int target_flags;\n #define MASK_3DNOW_A\t\t0x00400000\t/* Support Athlon 3Dnow builtins */\n #define MASK_3DNOW_A_SET\t0x00800000\n #define MASK_128BIT_LONG_DOUBLE 0x01000000\t/* long double size is 128bit */\n-#define MASK_MIX_SSE_I387\t0x02000000\t/* Mix SSE and i387 instructions */\n-#define MASK_64BIT\t\t0x04000000\t/* Produce 64bit code */\n-#define MASK_NO_RED_ZONE\t0x08000000\t/* Do not use red zone */\n-\n-/* Temporary codegen switches */\n-#define MASK_INTEL_SYNTAX\t0x10000000\n-#define MASK_DEBUG_ARG\t\t0x20000000\t/* function_arg */   \n-#define MASK_DEBUG_ADDR\t\t0x40000000\t/* GO_IF_LEGITIMATE_ADDRESS */\n+#define MASK_64BIT\t\t0x02000000\t/* Produce 64bit code */\n+/* ... overlap with subtarget options starts by 0x04000000.  */\n+#define MASK_NO_RED_ZONE\t0x04000000\t/* Do not use red zone */\n \n /* Use the floating point instructions */\n #define TARGET_80387 (target_flags & MASK_80387)\n@@ -188,10 +183,10 @@ extern int target_flags;\n   (target_flags & MASK_OMIT_LEAF_FRAME_POINTER)\n \n /* Debug GO_IF_LEGITIMATE_ADDRESS */\n-#define TARGET_DEBUG_ADDR (target_flags & MASK_DEBUG_ADDR)\n+#define TARGET_DEBUG_ADDR (ix86_debug_addr_string != 0)\n \n /* Debug FUNCTION_ARG macros */\n-#define TARGET_DEBUG_ARG (target_flags & MASK_DEBUG_ARG)\n+#define TARGET_DEBUG_ARG (ix86_debug_arg_string != 0)\n \n /* 64bit Sledgehammer mode */\n #ifdef TARGET_BI_ARCH\n@@ -273,7 +268,7 @@ extern int x86_prefetch_sse;\n #define TARGET_ALIGN_STRINGOPS (!(target_flags & MASK_NO_ALIGN_STROPS))\n #define TARGET_INLINE_ALL_STRINGOPS (target_flags & MASK_INLINE_ALL_STROPS)\n \n-#define ASSEMBLER_DIALECT ((target_flags & MASK_INTEL_SYNTAX) != 0)\n+#define ASSEMBLER_DIALECT (ix86_asm_dialect)\n \n #define TARGET_SSE ((target_flags & (MASK_SSE | MASK_SSE2)) != 0)\n #define TARGET_SSE2 ((target_flags & MASK_SSE2) != 0)\n@@ -292,10 +287,12 @@ extern int x86_prefetch_sse;\n   { \"hard-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n   { \"soft-float\",\t\t-MASK_80387, N_(\"Do not use hardware fp\") },  \\\n   { \"no-soft-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n-  { \"386\",\t\t\t 0, N_(\"Same as -mcpu=i386\") },\t\t      \\\n-  { \"486\",\t\t\t 0, N_(\"Same as -mcpu=i486\") },\t\t      \\\n-  { \"pentium\",\t\t\t 0, N_(\"Same as -mcpu=pentium\") },\t      \\\n-  { \"pentiumpro\",\t\t 0, N_(\"Same as -mcpu=pentiumpro\") },\t      \\\n+  { \"386\",\t\t\t 0, N_(\"\") /*Deprecated.*/},\t\t      \\\n+  { \"486\",\t\t\t 0, N_(\"\") /*Deprecated.*/},\t\t      \\\n+  { \"pentium\",\t\t\t 0, N_(\"\") /*Deprecated.*/},\t\t      \\\n+  { \"pentiumpro\",\t\t 0, N_(\"\") /*Deprecated.*/},\t\t      \\\n+  { \"intel-syntax\",\t\t 0, N_(\"\") /*Deprecated.*/},\t \t      \\\n+  { \"no-intel-syntax\",\t\t 0, N_(\"\") /*Deprecated.*/},\t \t      \\\n   { \"rtd\",\t\t\t MASK_RTD,\t\t\t\t      \\\n     N_(\"Alternate calling convention\") },\t\t\t\t      \\\n   { \"no-rtd\",\t\t\t-MASK_RTD,\t\t\t\t      \\\n@@ -323,18 +320,11 @@ extern int x86_prefetch_sse;\n   { \"omit-leaf-frame-pointer\",\t MASK_OMIT_LEAF_FRAME_POINTER,\t\t      \\\n     N_(\"Omit the frame pointer in leaf functions\") },\t\t\t      \\\n   { \"no-omit-leaf-frame-pointer\",-MASK_OMIT_LEAF_FRAME_POINTER, \"\" },\t      \\\n-  { \"debug-addr\",\t\t MASK_DEBUG_ADDR, 0 /* undocumented */ },     \\\n-  { \"no-debug-addr\",\t\t-MASK_DEBUG_ADDR, 0 /* undocumented */ },     \\\n-  { \"debug-arg\",\t\t MASK_DEBUG_ARG, 0 /* undocumented */ },      \\\n-  { \"no-debug-arg\",\t\t-MASK_DEBUG_ARG, 0 /* undocumented */ },      \\\n   { \"stack-arg-probe\",\t\t MASK_STACK_PROBE,\t\t\t      \\\n     N_(\"Enable stack probing\") },\t\t\t\t\t      \\\n   { \"no-stack-arg-probe\",\t-MASK_STACK_PROBE, \"\" },\t\t      \\\n   { \"windows\",\t\t\t0, 0 /* undocumented */ },\t\t      \\\n   { \"dll\",\t\t\t0,  0 /* undocumented */ },\t\t      \\\n-  { \"intel-syntax\",\t\tMASK_INTEL_SYNTAX,\t\t\t      \\\n-    N_(\"Emit Intel syntax assembler opcodes\") },\t\t\t      \\\n-  { \"no-intel-syntax\",\t\t-MASK_INTEL_SYNTAX, \"\" },\t\t      \\\n   { \"align-stringops\",\t\t-MASK_NO_ALIGN_STROPS,\t\t\t      \\\n     N_(\"Align destination of the string operations\") },\t\t\t      \\\n   { \"no-align-stringops\",\t MASK_NO_ALIGN_STROPS,\t\t\t      \\\n@@ -449,6 +439,12 @@ extern int ix86_arch;\n     N_(\"Branches are this expensive (1-5, arbitrary units)\") },\t\\\n   { \"cmodel=\", &ix86_cmodel_string,\t\t\t\t\\\n     N_(\"Use given x86-64 code model\") },\t\t\t\\\n+  { \"debug-arg\", &ix86_debug_arg_string,\t\t\t\\\n+    N_(\"\" /* Undocumented. */) },\t\t\t\t\\\n+  { \"debug-addr\", &ix86_debug_addr_string,\t\t\t\\\n+    N_(\"\" /* Undocumented. */) },\t\t\t\t\\\n+  { \"asm=\", &ix86_asm_string,\t\t\t\t\t\\\n+    N_(\"Use given assembler dialect\") },\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n }\n \n@@ -482,7 +478,11 @@ extern int ix86_arch;\n %{mpentium:-mcpu=pentium \\\n %n`-mpentium' is deprecated. Use `-march=pentium' or `-mcpu=pentium' instead.\\n} \\\n %{mpentiumpro:-mcpu=pentiumpro \\\n-%n`-mpentiumpro' is deprecated. Use `-march=pentiumpro' or `-mcpu=pentiumpro' instead.\\n}}\"\n+%n`-mpentiumpro' is deprecated. Use `-march=pentiumpro' or `-mcpu=pentiumpro' instead.\\n}} \\\n+%{mintel-syntax:-masm=intel \\\n+%n`-mintel-syntax' is deprecated. Use `-masm=intel' instead.\\n} \\\n+%{mno-intel-syntax:-masm=att \\\n+%n`-mno-intel-syntax' is deprecated. Use `-masm=att' instead.\\n}\"\n #endif\n \f\n #define TARGET_CPU_DEFAULT_i386 0\n@@ -3138,6 +3138,14 @@ enum cmodel {\n #define RED_ZONE_SIZE 128\n /* Reserved area of the red zone for temporaries.  */\n #define RED_ZONE_RESERVE 8\n+extern const char *ix86_debug_arg_string, *ix86_debug_addr_string;\n+\n+enum asm_dialect {\n+  ASM_ATT,\n+  ASM_INTEL\n+};\n+extern const char *ix86_asm_string;\n+extern enum cmodel ix86_asm_dialect;\n /* Valud of -mcmodel specified by user.  */\n extern const char *ix86_cmodel_string;\n extern enum cmodel ix86_cmodel;"}, {"sha": "63006b371864e04b21e0272ca46081ca2e51f4f0", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tif (target_flags & MASK_INTEL_SYNTAX)\t\t\t\t\\\n+\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n \t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n   } while (0)\n "}, {"sha": "d42df33f46e58072db745dec017913409da05551", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93e80a5d0e94ce91fbae4cac313000ef1a0c71f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c93e80a5d0e94ce91fbae4cac313000ef1a0c71f", "patch": "@@ -474,7 +474,7 @@ in the following sections.\n @emph{i386 and x86-64 Options}\n @gccoptlist{\n -mcpu=@var{cpu-type}  -march=@var{cpu-type} -mfpmath=@var{unit} @gol\n--mintel-syntax -mieee-fp  -mno-fancy-math-387 @gol\n+-masm=@var{dialect}  -mno-fancy-math-387 @gol\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n@@ -7534,9 +7534,10 @@ still experimental, because gcc register allocator does not model separate\n functional units well resulting in instable performance.\n @end table\n \n-@item -mintel-syntax\n-@opindex mintel-syntax\n-Emit assembly using Intel syntax opcodes instead of AT&T syntax.\n+@item -masm=@var{dialect}\n+@opindex masm=@var{dialect}\n+Output asm instructions using selected @var{dialect}. Supported choices are\n+@samp{intel} or @samp{att} (the default one).\n \n @item -mieee-fp\n @itemx -mno-ieee-fp"}]}