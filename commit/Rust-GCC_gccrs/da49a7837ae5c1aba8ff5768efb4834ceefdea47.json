{"sha": "da49a7837ae5c1aba8ff5768efb4834ceefdea47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0OWE3ODM3YWU1YzFhYmE4ZmY1NzY4ZWZiNDgzNGNlZWZkZWE0Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-26T17:46:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-26T17:46:16Z"}, "message": "trans.c (gnat_to_gnu): Set the source location of the operator on both branches of the test in the...\n\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_In>: Set the source location\n\tof the operator on both branches of the test in the generic case.\n\nFrom-SVN: r154677", "tree": {"sha": "fdade0ce2d88d2a9ed125999e9a7e9ed65a71175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdade0ce2d88d2a9ed125999e9a7e9ed65a71175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da49a7837ae5c1aba8ff5768efb4834ceefdea47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da49a7837ae5c1aba8ff5768efb4834ceefdea47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da49a7837ae5c1aba8ff5768efb4834ceefdea47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da49a7837ae5c1aba8ff5768efb4834ceefdea47/comments", "author": null, "committer": null, "parents": [{"sha": "a61f9cc067a63d8311cfbc941d1bdd6bbcc0cfb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61f9cc067a63d8311cfbc941d1bdd6bbcc0cfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61f9cc067a63d8311cfbc941d1bdd6bbcc0cfb1"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "67f80114e5120aee61d8d17f0bf4bd62ce570566", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da49a7837ae5c1aba8ff5768efb4834ceefdea47/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da49a7837ae5c1aba8ff5768efb4834ceefdea47/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=da49a7837ae5c1aba8ff5768efb4834ceefdea47", "patch": "@@ -1,3 +1,8 @@\n+2009-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_In>: Set the source location\n+\tof the operator on both branches of the test in the generic case.\n+\n 2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (unchecked_conversion_lhs_nop): Rename into..."}, {"sha": "d14305e42f06ec0eb7d8a6ee02246980b660bdc2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da49a7837ae5c1aba8ff5768efb4834ceefdea47/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da49a7837ae5c1aba8ff5768efb4834ceefdea47/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=da49a7837ae5c1aba8ff5768efb4834ceefdea47", "patch": "@@ -4196,13 +4196,12 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_In:\n     case N_Not_In:\n       {\n-\ttree gnu_object = gnat_to_gnu (Left_Opnd (gnat_node));\n+\ttree gnu_obj = gnat_to_gnu (Left_Opnd (gnat_node));\n \tNode_Id gnat_range = Right_Opnd (gnat_node);\n-\ttree gnu_low;\n-\ttree gnu_high;\n+\ttree gnu_low, gnu_high;\n \n-\t/* GNAT_RANGE is either an N_Range node or an identifier\n-\t   denoting a subtype.  */\n+\t/* GNAT_RANGE is either an N_Range node or an identifier denoting a\n+\t   subtype.  */\n \tif (Nkind (gnat_range) == N_Range)\n \t  {\n \t    gnu_low = gnat_to_gnu (Low_Bound (gnat_range));\n@@ -4221,21 +4220,24 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n-\t/* If LOW and HIGH are identical, perform an equality test.\n-\t   Otherwise, ensure that GNU_OBJECT is only evaluated once\n-\t   and perform a full range test.  */\n+\t/* If LOW and HIGH are identical, perform an equality test.  Otherwise,\n+\t   ensure that GNU_OBJ is evaluated only once and perform a full range\n+\t   test.  */\n \tif (operand_equal_p (gnu_low, gnu_high, 0))\n-\t  gnu_result = build_binary_op (EQ_EXPR, gnu_result_type,\n-\t\t\t\t\tgnu_object, gnu_low);\n+\t  gnu_result\n+\t    = build_binary_op (EQ_EXPR, gnu_result_type, gnu_obj, gnu_low);\n \telse\n \t  {\n-\t    gnu_object = protect_multiple_eval (gnu_object);\n+\t    tree t1, t2;\n+\t    gnu_obj = protect_multiple_eval (gnu_obj);\n+\t    t1 = build_binary_op (GE_EXPR, gnu_result_type, gnu_obj, gnu_low);\n+\t    if (EXPR_P (t1))\n+\t      set_expr_location_from_node (t1, gnat_node);\n+\t    t2 = build_binary_op (LE_EXPR, gnu_result_type, gnu_obj, gnu_high);\n+\t    if (EXPR_P (t2))\n+\t      set_expr_location_from_node (t2, gnat_node);\n \t    gnu_result\n-\t      = build_binary_op (TRUTH_ANDIF_EXPR, gnu_result_type,\n-\t\t\t\t build_binary_op (GE_EXPR, gnu_result_type,\n-\t\t\t\t\t\t  gnu_object, gnu_low),\n-\t\t\t\t build_binary_op (LE_EXPR, gnu_result_type,\n-\t\t\t\t\t\t  gnu_object, gnu_high));\n+\t      = build_binary_op (TRUTH_ANDIF_EXPR, gnu_result_type, t1, t2);\n \t  }\n \n \tif (kind == N_Not_In)"}]}