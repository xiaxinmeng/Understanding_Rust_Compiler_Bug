{"sha": "4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwMmFhNjRjZTgwM2NmODliODNlMjAwMWVkOTRhYjM2ODhmYzFkMw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-04-05T19:27:58Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-04-05T19:27:58Z"}, "message": "re PR target/56843 (PowerPC Newton-Raphson reciprocal estimates can be improved)\n\ngcc:\n\n2013-04-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/56843\n\t* config/rs6000/rs6000.c (rs6000_emit_swdiv_high_precision): Remove.\n\t(rs6000_emit_swdiv_low_precision): Remove.\n\t(rs6000_emit_swdiv): Rewrite to handle between one and four\n\titerations of Newton-Raphson generally; modify required number of\n\titerations for some cases.\n\t* config/rs6000/rs6000.h (RS6000_RECIP_HIGH_PRECISION_P): Remove.\n\ngcc/testsuite:\n\n2013-04-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/56843\n\t* gcc.target/powerpc/recip-1.c: Modify expected output.\n\t* gcc.target/powerpc/recip-3.c: Likewise.\n\t* gcc.target/powerpc/recip-4.c: Likewise.\n\t* gcc.target/powerpc/recip-5.c: Add expected output for iterations.\n\nFrom-SVN: r197534", "tree": {"sha": "6b685e8923927e286bd22f0c4d9ac54af07e9b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b685e8923927e286bd22f0c4d9ac54af07e9b15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bca81dc6a2606caeb675fb74afdad5f2a86d44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bca81dc6a2606caeb675fb74afdad5f2a86d44a"}], "stats": {"total": 170, "additions": 86, "deletions": 84}, "files": [{"sha": "a753113d88ee87a0ba19fc03e7eb39e757074d3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -1,3 +1,13 @@\n+2013-04-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/56843\n+\t* config/rs6000/rs6000.c (rs6000_emit_swdiv_high_precision): Remove.\n+\t(rs6000_emit_swdiv_low_precision): Remove.\n+\t(rs6000_emit_swdiv): Rewrite to handle between one and four\n+\titerations of Newton-Raphson generally; modify required number of\n+\titerations for some cases.\n+\t* config/rs6000/rs6000.h (RS6000_RECIP_HIGH_PRECISION_P): Remove.\n+\n 2013-04-05  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* bb-reorder.c (fix_crossing_unconditional_branches): Remove a"}, {"sha": "4b6aaa12413b62173e13386221d8858d0fd34e65", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 54, "deletions": 75, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -26913,54 +26913,26 @@ rs6000_emit_nmsub (rtx dst, rtx m1, rtx m2, rtx a)\n   emit_insn (gen_rtx_SET (VOIDmode, dst, r));\n }\n \n-/* Newton-Raphson approximation of floating point divide with just 2 passes\n-   (either single precision floating point, or newer machines with higher\n-   accuracy estimates).  Support both scalar and vector divide.  Assumes no\n-   trapping math and finite arguments.  */\n+/* Newton-Raphson approximation of floating point divide DST = N/D.  If NOTE_P,\n+   add a reg_note saying that this was a division.  Support both scalar and\n+   vector divide.  Assumes no trapping math and finite arguments.  */\n \n-static void\n-rs6000_emit_swdiv_high_precision (rtx dst, rtx n, rtx d)\n+void\n+rs6000_emit_swdiv (rtx dst, rtx n, rtx d, bool note_p)\n {\n   enum machine_mode mode = GET_MODE (dst);\n-  rtx x0, e0, e1, y1, u0, v0;\n-  enum insn_code code = optab_handler (smul_optab, mode);\n-  gen_2arg_fn_t gen_mul = (gen_2arg_fn_t) GEN_FCN (code);\n-  rtx one = rs6000_load_constant_and_splat (mode, dconst1);\n-\n-  gcc_assert (code != CODE_FOR_nothing);\n-\n-  /* x0 = 1./d estimate */\n-  x0 = gen_reg_rtx (mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, d),\n-\t\t\t\t\t  UNSPEC_FRES)));\n-\n-  e0 = gen_reg_rtx (mode);\n-  rs6000_emit_nmsub (e0, d, x0, one);\t\t/* e0 = 1. - (d * x0) */\n-\n-  e1 = gen_reg_rtx (mode);\n-  rs6000_emit_madd (e1, e0, e0, e0);\t\t/* e1 = (e0 * e0) + e0 */\n-\n-  y1 = gen_reg_rtx (mode);\n-  rs6000_emit_madd (y1, e1, x0, x0);\t\t/* y1 = (e1 * x0) + x0 */\n-\n-  u0 = gen_reg_rtx (mode);\n-  emit_insn (gen_mul (u0, n, y1));\t\t/* u0 = n * y1 */\n-\n-  v0 = gen_reg_rtx (mode);\n-  rs6000_emit_nmsub (v0, d, u0, n);\t\t/* v0 = n - (d * u0) */\n-\n-  rs6000_emit_madd (dst, v0, y1, u0);\t\t/* dst = (v0 * y1) + u0 */\n-}\n+  rtx one, x0, e0, x1, xprev, eprev, xnext, enext, u, v;\n+  int i;\n \n-/* Newton-Raphson approximation of floating point divide that has a low\n-   precision estimate.  Assumes no trapping math and finite arguments.  */\n+  /* Low precision estimates guarantee 5 bits of accuracy.  High\n+     precision estimates guarantee 14 bits of accuracy.  SFmode\n+     requires 23 bits of accuracy.  DFmode requires 52 bits of\n+     accuracy.  Each pass at least doubles the accuracy, leading\n+     to the following.  */\n+  int passes = (TARGET_RECIP_PRECISION) ? 1 : 3;\n+  if (mode == DFmode || mode == V2DFmode)\n+    passes++;\n \n-static void\n-rs6000_emit_swdiv_low_precision (rtx dst, rtx n, rtx d)\n-{\n-  enum machine_mode mode = GET_MODE (dst);\n-  rtx x0, e0, e1, e2, y1, y2, y3, u0, v0, one;\n   enum insn_code code = optab_handler (smul_optab, mode);\n   gen_2arg_fn_t gen_mul = (gen_2arg_fn_t) GEN_FCN (code);\n \n@@ -26974,46 +26946,44 @@ rs6000_emit_swdiv_low_precision (rtx dst, rtx n, rtx d)\n \t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, d),\n \t\t\t\t\t  UNSPEC_FRES)));\n \n-  e0 = gen_reg_rtx (mode);\n-  rs6000_emit_nmsub (e0, d, x0, one);\t\t/* e0 = 1. - d * x0 */\n+  /* Each iteration but the last calculates x_(i+1) = x_i * (2 - d * x_i).  */\n+  if (passes > 1) {\n \n-  y1 = gen_reg_rtx (mode);\n-  rs6000_emit_madd (y1, e0, x0, x0);\t\t/* y1 = x0 + e0 * x0 */\n+    /* e0 = 1. - d * x0  */\n+    e0 = gen_reg_rtx (mode);\n+    rs6000_emit_nmsub (e0, d, x0, one);\n \n-  e1 = gen_reg_rtx (mode);\n-  emit_insn (gen_mul (e1, e0, e0));\t\t/* e1 = e0 * e0 */\n+    /* x1 = x0 + e0 * x0  */\n+    x1 = gen_reg_rtx (mode);\n+    rs6000_emit_madd (x1, e0, x0, x0);\n \n-  y2 = gen_reg_rtx (mode);\n-  rs6000_emit_madd (y2, e1, y1, y1);\t\t/* y2 = y1 + e1 * y1 */\n+    for (i = 0, xprev = x1, eprev = e0; i < passes - 2;\n+\t ++i, xprev = xnext, eprev = enext) {\n+      \n+      /* enext = eprev * eprev  */\n+      enext = gen_reg_rtx (mode);\n+      emit_insn (gen_mul (enext, eprev, eprev));\n \n-  e2 = gen_reg_rtx (mode);\n-  emit_insn (gen_mul (e2, e1, e1));\t\t/* e2 = e1 * e1 */\n+      /* xnext = xprev + enext * xprev  */\n+      xnext = gen_reg_rtx (mode);\n+      rs6000_emit_madd (xnext, enext, xprev, xprev);\n+    }\n \n-  y3 = gen_reg_rtx (mode);\n-  rs6000_emit_madd (y3, e2, y2, y2);\t\t/* y3 = y2 + e2 * y2 */\n+  } else\n+    xprev = x0;\n \n-  u0 = gen_reg_rtx (mode);\n-  emit_insn (gen_mul (u0, n, y3));\t\t/* u0 = n * y3 */\n+  /* The last iteration calculates x_(i+1) = n * x_i * (2 - d * x_i).  */\n \n-  v0 = gen_reg_rtx (mode);\n-  rs6000_emit_nmsub (v0, d, u0, n);\t\t/* v0 = n - d * u0 */\n+  /* u = n * xprev  */\n+  u = gen_reg_rtx (mode);\n+  emit_insn (gen_mul (u, n, xprev));\n \n-  rs6000_emit_madd (dst, v0, y3, u0);\t\t/* dst = u0 + v0 * y3 */\n-}\n+  /* v = n - (d * u)  */\n+  v = gen_reg_rtx (mode);\n+  rs6000_emit_nmsub (v, d, u, n);\n \n-/* Newton-Raphson approximation of floating point divide DST = N/D.  If NOTE_P,\n-   add a reg_note saying that this was a division.  Support both scalar and\n-   vector divide.  Assumes no trapping math and finite arguments.  */\n-\n-void\n-rs6000_emit_swdiv (rtx dst, rtx n, rtx d, bool note_p)\n-{\n-  enum machine_mode mode = GET_MODE (dst);\n-\n-  if (RS6000_RECIP_HIGH_PRECISION_P (mode))\n-    rs6000_emit_swdiv_high_precision (dst, n, d);\n-  else\n-    rs6000_emit_swdiv_low_precision (dst, n, d);\n+  /* dst = (v * xprev) + u  */\n+  rs6000_emit_madd (dst, v, xprev, u);\n \n   if (note_p)\n     add_reg_note (get_last_insn (), REG_EQUAL, gen_rtx_DIV (mode, n, d));\n@@ -27028,7 +26998,16 @@ rs6000_emit_swrsqrt (rtx dst, rtx src)\n   enum machine_mode mode = GET_MODE (src);\n   rtx x0 = gen_reg_rtx (mode);\n   rtx y = gen_reg_rtx (mode);\n-  int passes = (TARGET_RECIP_PRECISION) ? 2 : 3;\n+\n+  /* Low precision estimates guarantee 5 bits of accuracy.  High\n+     precision estimates guarantee 14 bits of accuracy.  SFmode\n+     requires 23 bits of accuracy.  DFmode requires 52 bits of\n+     accuracy.  Each pass at least doubles the accuracy, leading\n+     to the following.  */\n+  int passes = (TARGET_RECIP_PRECISION) ? 1 : 3;\n+  if (mode == DFmode || mode == V2DFmode)\n+    passes++;\n+\n   REAL_VALUE_TYPE dconst3_2;\n   int i;\n   rtx halfthree;"}, {"sha": "2040db95b7f101a07864bd71143d80d9bf9fb139", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -601,9 +601,6 @@ extern unsigned char rs6000_recip_bits[];\n #define RS6000_RECIP_AUTO_RSQRTE_P(MODE) \\\n   (rs6000_recip_bits[(int)(MODE)] & RS6000_RECIP_MASK_AUTO_RSQRTE)\n \n-#define RS6000_RECIP_HIGH_PRECISION_P(MODE) \\\n-  ((MODE) == SFmode || (MODE) == V4SFmode || TARGET_RECIP_PRECISION)\n-\n /* The default CPU for TARGET_OPTION_OVERRIDE.  */\n #define OPTION_TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT\n "}, {"sha": "4bea9b659df51d22ae371f76ecf893bfdc5804a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -1,3 +1,11 @@\n+2013-04-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/56843\n+\t* gcc.target/powerpc/recip-1.c: Modify expected output.\n+\t* gcc.target/powerpc/recip-3.c: Likewise.\n+\t* gcc.target/powerpc/recip-4.c: Likewise.\n+\t* gcc.target/powerpc/recip-5.c: Add expected output for iterations.\n+\n 2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* gcc.target/arm/peep-ldrd-1.c: New test."}, {"sha": "59660e35bd532fb496e39f135ef84d1b8bab1bb4", "filename": "gcc/testsuite/gcc.target/powerpc/recip-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-1.c?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -3,8 +3,8 @@\n /* { dg-options \"-O2 -mrecip -ffast-math -mcpu=power6\" } */\n /* { dg-final { scan-assembler-times \"frsqrte\" 2 } } */\n /* { dg-final { scan-assembler-times \"fmsub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fmul\" 8 } } */\n-/* { dg-final { scan-assembler-times \"fnmsub\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fmul\" 6 } } */\n+/* { dg-final { scan-assembler-times \"fnmsub\" 3 } } */\n \n double\n rsqrt_d (double a)"}, {"sha": "56ab371985bab682072f62c8a5e8e34fa8483a40", "filename": "gcc/testsuite/gcc.target/powerpc/recip-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-3.c?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -7,8 +7,8 @@\n /* { dg-final { scan-assembler-times \"xsnmsub.dp\\|fnmsub\\ \" 2 } } */\n /* { dg-final { scan-assembler-times \"frsqrtes\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmsubs\" 1 } } */\n-/* { dg-final { scan-assembler-times \"fmuls\" 4 } } */\n-/* { dg-final { scan-assembler-times \"fnmsubs\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmuls\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fnmsubs\" 1 } } */\n \n double\n rsqrt_d (double a)"}, {"sha": "a62b60db20155070775a516c79c5776b14e00d18", "filename": "gcc/testsuite/gcc.target/powerpc/recip-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-4.c?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -7,8 +7,8 @@\n /* { dg-final { scan-assembler-times \"xvnmsub.dp\" 2 } } */\n /* { dg-final { scan-assembler-times \"xvrsqrtesp\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvmsub.sp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmulsp\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xvnmsub.sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvmulsp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvnmsub.sp\" 1 } } */\n \n #define SIZE 1024\n "}, {"sha": "0e89075bbe9862bd96ea3101168c32fe4e845b03", "filename": "gcc/testsuite/gcc.target/powerpc/recip-5.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4902aa64ce803cf89b83e2001ed94ab3688fc1d3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frecip-5.c?ref=4902aa64ce803cf89b83e2001ed94ab3688fc1d3", "patch": "@@ -6,6 +6,14 @@\n /* { dg-final { scan-assembler-times \"xvresp\" 5 } } */\n /* { dg-final { scan-assembler-times \"xsredp\" 2 } } */\n /* { dg-final { scan-assembler-times \"fres\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fmuls\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fnmsubs\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xsmuldp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xsnmsub.dp\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xvmulsp\" 7 } } */\n+/* { dg-final { scan-assembler-times \"xvnmsub.sp\" 5 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvnmsub.dp\" 8 } } */\n \n #include <altivec.h>\n "}]}