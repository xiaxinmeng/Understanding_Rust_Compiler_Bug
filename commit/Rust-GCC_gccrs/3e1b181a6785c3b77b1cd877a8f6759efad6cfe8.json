{"sha": "3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxYjE4MWE2Nzg1YzNiNzdiMWNkODc3YThmNjc1OWVmYWQ2Y2ZlOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-15T19:45:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-15T19:45:34Z"}, "message": "AbstractMethodError.java: Re-merged with Classpath.\n\n\t* java/lang/AbstractMethodError.java: Re-merged with Classpath.\n\t* java/lang/ArithmeticException.java: Likewise.\n\t* java/lang/ArrayIndexOutOfBoundsException.java: Likewise.\n\t* java/lang/ArrayStoreException.java: Likewise.\n\t* java/lang/Byte.java: Likewise.\n\t* java/lang/CharSequence.java: Likewise.\n\t* java/lang/ClassCastException.java: Likewise.\n\t* java/lang/ClassCircularityError.java: Likewise.\n\t* java/lang/ClassFormatError.java: Likewise.\n\t* java/lang/CloneNotSupportedException.java: Likewise.\n\t* java/lang/Cloneable.java: Likewise.\n\t* java/lang/Comparable.java: Likewise.\n\t* java/lang/Compiler.java: Likewise.\n\t* java/lang/Error.java: Likewise.\n\t* java/lang/ExceptionInInitializerError.java: Likewise.\n\t* java/lang/IllegalAccessError.java: Likewise.\n\t* java/lang/IllegalAccessException.java: Likewise.\n\t* java/lang/IllegalArgumentException.java: Likewise.\n\t* java/lang/IllegalMonitorStateException.java: Likewise.\n\t* java/lang/IllegalStateException.java: Likewise.\n\t* java/lang/IllegalThreadStateException.java: Likewise.\n\t* java/lang/IncompatibleClassChangeError.java: Likewise.\n\t* java/lang/IndexOutOfBoundsException.java: Likewise.\n\t* java/lang/InheritableThreadLocal.java: Likewise.\n\t* java/lang/InstantiationError.java: Likewise.\n\t* java/lang/InstantiationException.java: Likewise.\n\t* java/lang/InternalError.java: Likewise.\n\t* java/lang/InterruptedException.java: Likewise.\n\t* java/lang/LinkageError.java: Likewise.\n\t* java/lang/NegativeArraySizeException.java: Likewise.\n\t* java/lang/NoClassDefFoundError.java: Likewise.\n\t* java/lang/NoSuchFieldError.java: Likewise.\n\t* java/lang/NoSuchFieldException.java: Likewise.\n\t* java/lang/NoSuchMethodError.java: Likewise.\n\t* java/lang/NoSuchMethodException.java: Likewise.\n\t* java/lang/NullPointerException.java: Likewise.\n\t* java/lang/NumberFormatException.java: Likewise.\n\t* java/lang/OutOfMemoryError.java: Likewise.\n\t* java/lang/Process.java: Likewise.\n\t* java/lang/Runnable.java: Likewise.\n\t* java/lang/RuntimePermission.java: Likewise.\n\t* java/lang/SecurityException.java: Likewise.\n\t* java/lang/Short.java: Likewise.\n\t* java/lang/StackOverflowError.java: Likewise.\n\t* java/lang/StringIndexOutOfBoundsException.java: Likewise.\n\t* java/lang/ThreadDeath.java: Likewise.\n\t* java/lang/ThreadLocal.java: Likewise.\n\t* java/lang/UnknownError.java: Likewise.\n\t* java/lang/UnsatisfiedLinkError.java: Likewise.\n\t* java/lang/UnsupportedClassVersionError.java: Likewise.\n\t* java/lang/UnsupportedOperationException.java: Likewise.\n\t* java/lang/VerifyError.java: Likewise.\n\t* java/lang/VirtualMachineError.java: Likewise.\n\t* java/lang/reflect/InvocationTargetException.java: Likewise.\n\t* java/net/BindException.java: Likewise.\n\t* java/net/ConnectException.java: Likewise.\n\t* java/net/MalformedURLException.java: Likewise.\n\t* java/net/NoRouteToHostException.java: Likewise.\n\t* java/net/ProtocolException.java: Likewise.\n\t* java/net/SocketException.java: Likewise.\n\t* java/net/UnknownHostException.java: Likewise.\n\t* java/net/UnknownServiceException.java: Likewise.\n\nFrom-SVN: r54656", "tree": {"sha": "6325e924516b02fb0d87553b0923dd855f975914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6325e924516b02fb0d87553b0923dd855f975914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/comments", "author": null, "committer": null, "parents": [{"sha": "34442f32a2407deff70df24c62713044748caf84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34442f32a2407deff70df24c62713044748caf84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34442f32a2407deff70df24c62713044748caf84"}], "stats": {"total": 4350, "additions": 2151, "deletions": 2199}, "files": [{"sha": "3878c34dcc7a5d3a66d76c3a2caa926b57bea5c5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,5 +1,68 @@\n 2002-06-15  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/lang/AbstractMethodError.java: Re-merged with Classpath.\n+\t* java/lang/ArithmeticException.java: Likewise.\n+\t* java/lang/ArrayIndexOutOfBoundsException.java: Likewise.\n+\t* java/lang/ArrayStoreException.java: Likewise.\n+\t* java/lang/Byte.java: Likewise.\n+\t* java/lang/CharSequence.java: Likewise.\n+\t* java/lang/ClassCastException.java: Likewise.\n+\t* java/lang/ClassCircularityError.java: Likewise.\n+\t* java/lang/ClassFormatError.java: Likewise.\n+\t* java/lang/CloneNotSupportedException.java: Likewise.\n+\t* java/lang/Cloneable.java: Likewise.\n+\t* java/lang/Comparable.java: Likewise.\n+\t* java/lang/Compiler.java: Likewise.\n+\t* java/lang/Error.java: Likewise.\n+\t* java/lang/ExceptionInInitializerError.java: Likewise.\n+\t* java/lang/IllegalAccessError.java: Likewise.\n+\t* java/lang/IllegalAccessException.java: Likewise.\n+\t* java/lang/IllegalArgumentException.java: Likewise.\n+\t* java/lang/IllegalMonitorStateException.java: Likewise.\n+\t* java/lang/IllegalStateException.java: Likewise.\n+\t* java/lang/IllegalThreadStateException.java: Likewise.\n+\t* java/lang/IncompatibleClassChangeError.java: Likewise.\n+\t* java/lang/IndexOutOfBoundsException.java: Likewise.\n+\t* java/lang/InheritableThreadLocal.java: Likewise.\n+\t* java/lang/InstantiationError.java: Likewise.\n+\t* java/lang/InstantiationException.java: Likewise.\n+\t* java/lang/InternalError.java: Likewise.\n+\t* java/lang/InterruptedException.java: Likewise.\n+\t* java/lang/LinkageError.java: Likewise.\n+\t* java/lang/NegativeArraySizeException.java: Likewise.\n+\t* java/lang/NoClassDefFoundError.java: Likewise.\n+\t* java/lang/NoSuchFieldError.java: Likewise.\n+\t* java/lang/NoSuchFieldException.java: Likewise.\n+\t* java/lang/NoSuchMethodError.java: Likewise.\n+\t* java/lang/NoSuchMethodException.java: Likewise.\n+\t* java/lang/NullPointerException.java: Likewise.\n+\t* java/lang/NumberFormatException.java: Likewise.\n+\t* java/lang/OutOfMemoryError.java: Likewise.\n+\t* java/lang/Process.java: Likewise.\n+\t* java/lang/Runnable.java: Likewise.\n+\t* java/lang/RuntimePermission.java: Likewise.\n+\t* java/lang/SecurityException.java: Likewise.\n+\t* java/lang/Short.java: Likewise.\n+\t* java/lang/StackOverflowError.java: Likewise.\n+\t* java/lang/StringIndexOutOfBoundsException.java: Likewise.\n+\t* java/lang/ThreadDeath.java: Likewise.\n+\t* java/lang/ThreadLocal.java: Likewise.\n+\t* java/lang/UnknownError.java: Likewise.\n+\t* java/lang/UnsatisfiedLinkError.java: Likewise.\n+\t* java/lang/UnsupportedClassVersionError.java: Likewise.\n+\t* java/lang/UnsupportedOperationException.java: Likewise.\n+\t* java/lang/VerifyError.java: Likewise.\n+\t* java/lang/VirtualMachineError.java: Likewise.\n+\t* java/lang/reflect/InvocationTargetException.java: Likewise.\n+\t* java/net/BindException.java: Likewise.\n+\t* java/net/ConnectException.java: Likewise.\n+\t* java/net/MalformedURLException.java: Likewise.\n+\t* java/net/NoRouteToHostException.java: Likewise.\n+\t* java/net/ProtocolException.java: Likewise.\n+\t* java/net/SocketException.java: Likewise.\n+\t* java/net/UnknownHostException.java: Likewise.\n+\t* java/net/UnknownServiceException.java: Likewise.\n+\n \t* java/io/BufferedOutputStream.java: Re-merged with Classpath.\n \t* java/io/CharConversionException.java: Likewise.\n \t* java/io/EOFException.java: Likewise."}, {"sha": "df961864a6755726d3e7d3521da93c7a6232bae8", "filename": "libjava/java/lang/AbstractMethodError.java", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FAbstractMethodError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FAbstractMethodError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FAbstractMethodError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* AbstractMethodError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* AbstractMethodError.java -- thrown if an abstract method is invoked\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,41 +38,38 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * An <code>AbstractMethodError</code> is thrown when an application\n- * attempts to access an abstract method.  Compilers typically detect\n- * this error, but it can be thrown at run time if the definition of a \n- * class has changed since the application was last compiled.\n+ * An <code>AbstractMethodError</code> is thrown when an application attempts\n+ * to access an abstract method.  Compilers typically detect this error, but\n+ * it can be thrown at run time if the definition of a class has changed\n+ * since the application was last compiled. This can also occur when\n+ * reflecting on methods.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class AbstractMethodError extends IncompatibleClassChangeError\n {\n-  static final long serialVersionUID = -1654391082989018462L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -1654391082989018462L;\n \n   /**\n    * Create an error without a message.\n    */\n   public AbstractMethodError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public AbstractMethodError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "de79b096ab31affef131c6379a0bd3ad76a2f726", "filename": "libjava/java/lang/ArithmeticException.java", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArithmeticException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArithmeticException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArithmeticException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n /* ArithmeticException.java -- exception thrown to indicate conditions\n    like divide by zero.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +39,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional circumstances.\n- * In this case an ArithmeticException is thrown when things like trying\n- * to divide a number by zero.\n- *\n- * @since JDK 1.0\n+ * Thrown when a math error has occured, such as trying to divide an\n+ * integer by zero. For example:<br>\n+ * <pre>\n+ * int i = 0;\n+ * int j = 2 / i;\n+ * </pre>\n  *\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class ArithmeticException extends RuntimeException\n {\n-  static final long serialVersionUID = 2256477558314496007L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 2256477558314496007L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public ArithmeticException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public ArithmeticException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "1a6db8daf04fa7696790e032720f75516b4d771f", "filename": "libjava/java/lang/ArrayIndexOutOfBoundsException.java", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n /* ArrayIndexOutOfBoundsException.java -- exception thrown when accessing\n    an illegal index.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,49 +39,49 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions, in this case\n- * when trying to access an illegal index.  This exception is thrown when\n- * accessing an index which is either negative or greater than the size of\n- * the array minus one.\n- *\n- * @since JDK 1.0\n+ * Thrown when attempting to access a position outside the valid range of\n+ * an array. For example:<br>\n+ * <pre>\n+ * int[] i = { 1 };\n+ * i[1] = 2;\n+ * </pre>\n  *\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException\n {\n-  static final long serialVersionUID = -5116101128118950844L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -5116101128118950844L;\n \n   /**\n    * Create an exception without a message.\n    */\n-  public ArrayIndexOutOfBoundsException() {\n-    super();\n+  public ArrayIndexOutOfBoundsException()\n+  {\n   }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n-  public ArrayIndexOutOfBoundsException(String s) {\n+  public ArrayIndexOutOfBoundsException(String s)\n+  {\n     super(s);\n   }\n \n   /**\n    * Create an exception indicating the illegal index.\n+   *\n+   * @param index the invalid index\n    */\n-  public ArrayIndexOutOfBoundsException(int index) {\n+  public ArrayIndexOutOfBoundsException(int index)\n+  {\n     super(\"Array index out of range: \" + index);\n   }\n-\n }"}, {"sha": "3fa714d2ef4baac2810bcfdaa76377cd1ff404f8", "filename": "libjava/java/lang/ArrayStoreException.java", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArrayStoreException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FArrayStoreException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArrayStoreException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n /* ArrayStoreException.java -- exception thrown to when trying to store an\n    object into an array of a different type.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,40 +39,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions, in this case\n- * when trying to store an object into an array of a different type.\n- *\n- * @since JDK 1.0\n+ * Thrown when trying to store an object of the wrong runtime type in an\n+ * array. For example:<br>\n+ * <pre>\n+ * Object[] o = new Integer[1];\n+ * o[0] = \"oops\";\n+ * </pre>\n  *\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class ArrayStoreException extends RuntimeException\n {\n-  static final long serialVersionUID = -4522193890499838241L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4522193890499838241L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public ArrayStoreException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public ArrayStoreException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "7605ad70ef448102b47de19ab7019b9eab04ce70", "filename": "libjava/java/lang/Byte.java", "status": "modified", "additions": 193, "deletions": 150, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FByte.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FByte.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FByte.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* Byte.java -- object wrapper for byte\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -48,267 +48,310 @@\n  * @author Paul Fisher\n  * @author John Keiser\n  * @author Per Bothner\n- * @since JDK 1.0\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-public final class Byte extends Number implements Comparable \n+public final class Byte extends Number implements Comparable\n {\n-  static final long serialVersionUID = -7183698231559129828L;\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -7183698231559129828L;\n \n   /**\n-   * The minimum value a <code>byte</code> can represent is -128.\n+   * The minimum value a <code>byte</code> can represent is -128 (or\n+   * -2<sup>7</sup>).\n    */\n   public static final byte MIN_VALUE = -128;\n \n   /**\n-   * The maximum value a <code>byte</code> can represent is 127.\n+   * The maximum value a <code>byte</code> can represent is 127 (or\n+   * 2<sup>7</sup> - 1).\n    */\n   public static final byte MAX_VALUE = 127;\n \n   /**\n-   * The primitive type <code>byte</code> is represented by this \n+   * The primitive type <code>byte</code> is represented by this\n    * <code>Class</code> object.\n    */\n   public static final Class TYPE = VMClassLoader.getPrimitiveClass('B');\n \n   /**\n    * The immutable value of this Byte.\n+   *\n+   * @serial the wrapped byte\n    */\n   private final byte value;\n \n   /**\n-   * Create a <code>Byte</code> object representing the value of the \n+   * Create a <code>Byte</code> object representing the value of the\n    * <code>byte</code> argument.\n    *\n    * @param value the value to use\n-   */     \n-  public Byte(byte value) \n+   */\n+  public Byte(byte value)\n   {\n     this.value = value;\n   }\n \n   /**\n-   * Create a <code>Byte</code> object representing the value specified \n-   * by the <code>String</code> argument.\n+   * Create a <code>Byte</code> object representing the value specified\n+   * by the <code>String</code> argument\n    *\n-   * @param s the string to convert.\n+   * @param s the string to convert\n+   * @throws NumberFormatException if the String does not contain a byte\n+   * @see #valueOf(String)\n    */\n-  public Byte(String s) throws NumberFormatException \n+  public Byte(String s)\n   {\n     value = parseByte(s, 10);\n   }\n \n   /**\n-   * Return a hashcode representing this Object.\n-   *\n-   * <code>Byte</code>'s hash code is calculated by simply returning its\n-   * value.\n+   * Converts the <code>byte</code> to a <code>String</code> and assumes\n+   * a radix of 10.\n    *\n-   * @return this Object's hash code.\n+   * @param b the <code>byte</code> to convert to <code>String</code>\n+   * @return the <code>String</code> representation of the argument\n    */\n-  public int hashCode() \n+  public static String toString(byte b)\n   {\n-    return value;\n+    return String.valueOf(b);\n   }\n \n   /**\n-   * Returns <code>true</code> if <code>obj</code> is an instance of\n-   * <code>Byte</code> and represents the same byte value.\n-   * @return whether these Objects are semantically equal.\n-   */    \n-  public boolean equals(Object obj) \n-  {\n-    return ((obj instanceof Byte) && (value == ((Byte)obj).byteValue()));\n-  }\n-\n-  /**\n-   * Converts the <code>byte</code> to a <code>String</code> and assumes\n-   * a radix of 10.\n-   * @param i the <code>byte</code> to convert to <code>String</code>\n-   * @return the <code>String</code> representation of the argument.\n-   */    \n-  public static String toString(byte i) \n+   * Converts the specified <code>String</code> into a <code>byte</code>.\n+   * This function assumes a radix of 10.\n+   *\n+   * @param s the <code>String</code> to convert\n+   * @return the <code>byte</code> value of <code>s</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>byte</code>\n+   * @see #parseByte(String)\n+   */\n+  public static byte parseByte(String s)\n   {\n-    return Integer.toString ((int) i);\n+    return parseByte(s, 10);\n   }\n \n   /**\n-   * Converts the <code>Byte</code> value to a <code>String</code> and\n-   * assumes a radix of 10.\n-   * @return the <code>String</code> representation of this <code>Byte</code>.\n-   */    \n-  public String toString() \n-  {\n-    return Integer.toString ((int) value);\n-  }\n-    \n-  /**\n-   * Creates a new <code>Byte</code> object using the <code>String</code>,\n-   * assuming a radix of 10.\n-   * @param s the <code>String</code> to convert.\n-   * @return the new <code>Byte</code>.\n-   * @see #Byte(java.lang.String)\n-   * @see #parseByte(java.lang.String)\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>byte</code>.\n+   * Converts the specified <code>String</code> into an <code>int</code>\n+   * using the specified radix (base). The string must not be <code>null</code>\n+   * or empty. It may begin with an optional '-', which will negate the answer,\n+   * provided that there are also valid digits. Each digit is parsed as if by\n+   * <code>Character.digit(d, radix)</code>, and must be in the range\n+   * <code>0</code> to <code>radix - 1</code>. Finally, the result must be\n+   * within <code>MIN_VALUE</code> to <code>MAX_VALUE</code>, inclusive.\n+   * Unlike Double.parseDouble, you may not have a leading '+'.\n+   *\n+   * @param s the <code>String</code> to convert\n+   * @param radix the radix (base) to use in the conversion\n+   * @return the <code>String</code> argument converted to </code>byte</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>byte</code>\n    */\n-  public static Byte valueOf(String s) throws NumberFormatException \n+  public static byte parseByte(String s, int radix)\n   {\n-    return new Byte(parseByte(s));\n+    int i = Integer.parseInt(s, radix, false);\n+    if ((byte) i != i)\n+      throw new NumberFormatException();\n+    return (byte) i;\n   }\n \n   /**\n    * Creates a new <code>Byte</code> object using the <code>String</code>\n    * and specified radix (base).\n-   * @param s the <code>String</code> to convert.\n-   * @param radix the radix (base) to convert with.\n-   * @return the new <code>Byte</code>.\n-   * @see #parseByte(java.lang.String,int)\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>byte</code>.\n-   */\n-  public static Byte valueOf(String s, int radix) \n-    throws NumberFormatException \n-  {\n-    return new Byte(parseByte(s, radix));\n-  }\n-\n-  /**\n-   * Converts the specified <code>String</code> into a <code>byte</code>.\n-   * This function assumes a radix of 10.\n    *\n    * @param s the <code>String</code> to convert\n-   * @return the <code>byte</code> value of the <code>String</code>\n-   *         argument.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>byte</code>.\n+   * @param radix the radix (base) to convert with\n+   * @return the new <code>Byte</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>byte</code>\n+   * @see #parseByte(String, int)\n    */\n-  public static byte parseByte(String s) throws NumberFormatException \n+  public static Byte valueOf(String s, int radix)\n   {\n-    return parseByte(s, 10);\n+    return new Byte(parseByte(s, radix));\n   }\n \n   /**\n-   * Converts the specified <code>String</code> into a <code>byte</code>\n-   * using the specified radix (base).\n+   * Creates a new <code>Byte</code> object using the <code>String</code>,\n+   * assuming a radix of 10.\n    *\n-   * @param str the <code>String</code> to convert\n-   * @param radix the radix (base) to use in the conversion\n-   * @return the <code>String</code> argument converted to </code>byte</code>.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>byte</code>.    \n+   * @param s the <code>String</code> to convert\n+   * @return the new <code>Byte</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>byte</code>\n+   * @see #Byte(String)\n+   * @see #parseByte(String)\n    */\n-  public static byte parseByte(String str, int radix) \n-    throws NumberFormatException \n+  public static Byte valueOf(String s)\n   {\n-    int i = Integer.parseInt(str, radix);\n-    if (i < MIN_VALUE || i > MAX_VALUE)\n-      throw new NumberFormatException();\n-    return (byte) i;\n+    return new Byte(parseByte(s, 10));\n   }\n \n   /**\n    * Convert the specified <code>String</code> into a <code>Byte</code>.\n-   * The <code>String</code> may represent decimal, hexadecimal, or \n+   * The <code>String</code> may represent decimal, hexadecimal, or\n    * octal numbers.\n    *\n-   * The <code>String</code> argument is interpreted based on the leading\n-   * characters.  Depending on what the String begins with, the base will be\n-   * interpreted differently:\n+   * <p>The extended BNF grammar is as follows:<br>\n+   * <pre>\n+   * <em>DecodableString</em>:\n+   *      ( [ <code>-</code> ] <em>DecimalNumber</em> )\n+   *    | ( [ <code>-</code> ] ( <code>0x</code> | <code>0X</code>\n+   *              | <code>#</code> ) { <em>HexDigit</em> }+ )\n+   *    | ( [ <code>-</code> ] <code>0</code> { <em>OctalDigit</em> } )\n+   * <em>DecimalNumber</em>:\n+   *        <em>DecimalDigit except '0'</em> { <em>DecimalDigit</em> }\n+   * <em>DecimalDigit</em>:\n+   *        <em>Character.digit(d, 10) has value 0 to 9</em>\n+   * <em>OctalDigit</em>:\n+   *        <em>Character.digit(d, 8) has value 0 to 7</em>\n+   * <em>DecimalDigit</em>:\n+   *        <em>Character.digit(d, 16) has value 0 to 15</em>\n+   * </pre>\n+   * Finally, the value must be in the range <code>MIN_VALUE</code> to\n+   * <code>MAX_VALUE</code>, or an exception is thrown.\n    *\n-   * <table>\n-   * <tr><th>Leading<br>Characters</th><th>Base</th></tr>\n-   * <tr><td>#</td><td>16</td></tr>\n-   * <tr><td>0x</td><td>16</td></tr>\n-   * <tr><td>0X</td><td>16</td></tr>\n-   * <tr><td>0</td><td>8</td></tr>\n-   * <tr><td>Anything<br>Else</td><td>10</td></tr>\n-   * </table>\n-   *\n-   * @param str the <code>String</code> to interpret.\n-   * @return the value of the String as a <code>Byte</code>.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>byte</code>.    \n+   * @param s the <code>String</code> to interpret\n+   * @return the value of the String as a <code>Byte</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>byte</code>\n+   * @throws NullPointerException if <code>s</code> is null\n+   * @see Integer#decode(String)\n    */\n-  public static Byte decode(String str) throws NumberFormatException \n+  public static Byte decode(String s)\n   {\n-    int i = (Integer.decode(str)).intValue();\n-    if (i < MIN_VALUE || i > MAX_VALUE)\n+    int i = Integer.parseInt(s, 10, true);\n+    if ((byte) i != i)\n       throw new NumberFormatException();\n     return new Byte((byte) i);\n   }\n-    \n-  /** Return the value of this <code>Byte</code> as an <code>short</code>.\n-   ** @return the value of this <code>Byte</code> as an <code>short</code>.\n-   **/\n+\n+  /**\n+   * Return the value of this <code>Byte</code>.\n+   *\n+   * @return the byte value\n+   */\n   public byte byteValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Byte</code> as an <code>short</code>.\n-   ** @return the value of this <code>Byte</code> as an <code>short</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Byte</code> as a <code>short</code>.\n+   *\n+   * @return the short value\n+   */\n   public short shortValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Byte</code> as an <code>int</code>.\n-   ** @return the value of this <code>Byte</code> as an <code>int</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Byte</code> as an <code>int</code>.\n+   *\n+   * @return the int value\n+   */\n   public int intValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Byte</code> as a <code>long</code>.\n-   ** @return the value of this <code>Byte</code> as a <code>long</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Byte</code> as a <code>long</code>.\n+   *\n+   * @return the long value\n+   */\n   public long longValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Byte</code> as a <code>float</code>.\n-   ** @return the value of this <code>Byte</code> as a <code>float</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Byte</code> as a <code>float</code>.\n+   *\n+   * @return the float value\n+   */\n   public float floatValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Byte</code> as a <code>double</code>.\n-   ** @return the value of this <code>Byte</code> as a <code>double</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Byte</code> as a <code>double</code>.\n+   *\n+   * @return the double value\n+   */\n   public double doubleValue()\n   {\n     return value;\n   }\n-    \n+\n   /**\n-   * Compare two Bytes numerically by comparing their\n-   * <code>byte</code> values.\n-   * @return a positive value if this <code>Byte</code> is greater\n-   * in value than the argument <code>Byte</code>; a negative value\n-   * if this <code>Byte</code> is smaller in value than the argument\n-   * <code>Byte</code>; and <code>0</code>, zero, if this\n-   * <code>Byte</code> is equal in value to the argument\n-   * <code>Byte</code>.  \n+   * Converts the <code>Byte</code> value to a <code>String</code> and\n+   * assumes a radix of 10.\n+   *\n+   * @return the <code>String</code> representation of this <code>Byte</code>\n+   * @see Integer#toString()\n+   */\n+  public String toString()\n+  {\n+    return String.valueOf(value);\n+  }\n+\n+  /**\n+   * Return a hashcode representing this Object. <code>Byte</code>'s hash\n+   * code is simply its value.\n+   *\n+   * @return this Object's hash code\n+   */\n+  public int hashCode()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns <code>true</code> if <code>obj</code> is an instance of\n+   * <code>Byte</code> and represents the same byte value.\n+   *\n+   * @param obj the object to compare\n+   * @return whether these Objects are semantically equal\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    return obj instanceof Byte && value == ((Byte) obj).value;\n+  }\n+\n+  /**\n+   * Compare two Bytes numerically by comparing their <code>byte</code> values.\n+   * The result is positive if the first is greater, negative if the second\n+   * is greater, and 0 if the two are equal.\n+   *\n+   * @param b the Byte to compare\n+   * @return the comparison\n+   * @since 1.2\n    */\n   public int compareTo(Byte b)\n   {\n-    return (int)(value - b.byteValue());\n+    return value - b.value;\n   }\n-    \n+\n   /**\n-   * Behaves like <code>compareTo(java.lang.Byte)</code> unless the Object\n-   * is not a <code>Byte</code>.  Then it throws a \n-   * <code>ClassCastException</code>.\n-   * @exception ClassCastException if the argument is not a\n-   * <code>Byte</code>.  \n+   * Behaves like <code>compareTo(Byte)</code> unless the Object\n+   * is not a <code>Byte</code>.\n+   *\n+   * @param o the object to compare\n+   * @return the comparison\n+   * @throws ClassCastException if the argument is not a <code>Byte</code>\n+   * @see #compareTo(Byte)\n+   * @see Comparable\n+   * @since 1.2\n    */\n   public int compareTo(Object o)\n   {\n-    return compareTo((Byte)o);\n+    return compareTo((Byte) o);\n   }\n }"}, {"sha": "d46bd9d381347c1705e153901cdb5ae097110949", "filename": "libjava/java/lang/CharSequence.java", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCharSequence.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCharSequence.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharSequence.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.CharSequence -- Anything that has an indexed sequence of chars\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+/* CharSequence.java -- Anything that has an indexed sequence of chars\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -44,8 +44,8 @@\n  * <code>CharBuffer</code> to give a uniform way to get chars at a certain\n  * index, the number of characters in the sequence and a subrange of the\n  * chars. Indexes start at 0 and the last index is <code>length()-1</code>.\n- * <p>\n- * Even when classes implement this interface they are not always\n+ *\n+ * <p>Even when classes implement this interface they are not always\n  * exchangeble because they might implement their compare, equals or hash\n  * function differently. This means that in general one should not use a\n  * <code>CharSequence</code> as keys in collections since two sequences\n@@ -54,38 +54,46 @@\n  * represented by different classes.\n  *\n  * @author Mark Wielaard (mark@klomp.org)\n- *\n  * @since 1.4\n+ * @status updated to 1.4\n  */\n+public interface CharSequence\n+{\n+  /**\n+   * Returns the character at the given index.\n+   *\n+   * @param i the index to retrieve from\n+   * @return the character at that location\n+   * @throws IndexOutOfBoundsException if i &lt; 0 || i &gt;= length() - 1\n+   */\n+  char charAt(int i);\n \n-public interface CharSequence {\n-\n-    /**\n-     * Returns the character at the given index.\n-     *\n-     * @exception IndexOutOfBoundsException when <code>i &lt; 0</code> or\n-     * <code>i &gt; length()-1</code>.\n-     */\n-    char charAt(int i);\n-\n-    /**\n-     * Returns the length of the sequence.\n-     */\n-    int length();\n+  /**\n+   * Returns the length of the sequence. This is the number of 16-bit\n+   * characters in the sequence, which may differ from the length of the\n+   * underlying encoding.\n+   *\n+   * @return the sequence length\n+   */\n+  int length();\n \n-    /**\n-     * Returns a new <code>CharSequence</char> of the indicated range.\n-     *\n-     * @exception IndexOutOfBoundsException when <code>begin &lt; 0</code>,\n-     *         <code>end &lt; 0</code>, <code>end &gt; length()</code> or\n-     *         <code>begin &gt; end</code>\n-     */\n-    CharSequence subSequence(int begin, int end);\n+  /**\n+   * Returns a new <code>CharSequence</char> of the indicated range.\n+   *\n+   * @param begin the start index (inclusive)\n+   * @param end the end index (exclusive)\n+   * @return a subsequence of this\n+   * @throws IndexOutOfBoundsException if begin &gt; end || begin &lt; 0 ||\n+   *         end &gt; length()\n+   */\n+  CharSequence subSequence(int begin, int end);\n \n-    /**\n-     * Returns the complete <code>CharSequence</code> as a <code>String</code>.\n-     * Classes that implement this interface should return a <code>String</code>\n-     * which contains only the characters in the sequence in the correct order.\n-     */\n-    String toString();\n+  /**\n+   * Returns the complete <code>CharSequence</code> as a <code>String</code>.\n+   * Classes that implement this interface should return a <code>String</code>\n+   * which contains only the characters in the sequence in the correct order.\n+   *\n+   * @return the character sequence as a String\n+   */\n+  String toString();\n }"}, {"sha": "b552b23fbdb7931d7b7cf5d8ceb59ec796d89ec3", "filename": "libjava/java/lang/ClassCastException.java", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassCastException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassCastException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassCastException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* ClassCastException.java -- exception thrown when incorrectly trying to \n-   cast an object to a subclass it does not belong to.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* ClassCastException.java -- exception thrown on bad cast\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,45 +38,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  In this case\n- * when incorrectly trying to cast an object to a subclass it does not \n- * belong to.  The following code generates a <code>ClassCastException</code>.\n+ * Thrown when an attempt is made to cast an object which is not of the\n+ * appropriate runtime type. For example:<br>\n  * <pre>\n  * Object o = new Vector();\n- * String s = (String)o;\n+ * String s = (String) o;\n  * </pre>\n  *\n- * @since JDK 1.0\n- *\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class ClassCastException extends RuntimeException\n {\n-  static final long serialVersionUID = -9223365651070458532L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -9223365651070458532L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public ClassCastException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public ClassCastException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "8016eadb86895c9bf13ef214eab461ea404b82fb", "filename": "libjava/java/lang/ClassCircularityError.java", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassCircularityError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassCircularityError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassCircularityError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* ClassCircularityError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* ClassCircularityError.java -- thrown when linking circular classes\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,39 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * A <code>ClassCircularityError</code> is thrown when a circular dependency\n- * has been detected while initializing a class.\n+ * has been detected while initializing a class. This signals binary\n+ * incompatible versions of class files, as the compiler normally catches this.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class ClassCircularityError extends LinkageError\n {\n-  static final long serialVersionUID = 1054362542914539689L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 1054362542914539689L;\n \n   /**\n    * Create an error without a message.\n    */\n   public ClassCircularityError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public ClassCircularityError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "d28cacdf785e6b387bf62c4dd78ec381a683a15e", "filename": "libjava/java/lang/ClassFormatError.java", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassFormatError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FClassFormatError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassFormatError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* ClassFormatError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* ClassFormatError.java -- thrown if a class file is invalid\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,38 +38,35 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * A <code>ClassFormatError</code> is thrown when a Java Virtual Machine \n+ * A <code>ClassFormatError</code> is thrown when a Java Virtual Machine\n  * unable to read a class file because the file is corrupted or cannot be\n  * interpreted as a class file.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n+ * @status updated to 1.4\n  */\n public class ClassFormatError extends LinkageError\n {\n-  static final long serialVersionUID = -8420114879011949195L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -8420114879011949195L;\n \n   /**\n    * Create an error without a message.\n    */\n   public ClassFormatError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public ClassFormatError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "e13112ac35037f0743cb2ce2cd70ba7e1e67e80f", "filename": "libjava/java/lang/CloneNotSupportedException.java", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,15 +1,13 @@\n-/* CloneNotSupportedException.java -- exception thrown to indicate that \n-   the object calling the clone method of Object does not implement the \n-   Cloneable interface.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* CloneNotSupportedException.java -- thrown when an object cannot be cloned\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -40,33 +38,38 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * Thrown to indicate an object should not or could not be cloned. This\n  * includes the case when {@link Object#clone()} is called on an object\n- * which does not implement the {@link Cloneable} interface.\n- * <p>\n+ * which does not implement the {@link Cloneable} interface. For example:<br>\n+ * <pre>\n+ * void m() throws CloneNotSupportedException\n+ * {\n+ *   clone();\n+ * }\n+ * </pre>\n  *\n- * Notice that calling <code>clone()</code> on an array will never produce\n+ * <p>Notice that calling <code>clone()</code> on an array will never produce\n  * this exception, as the VM will always succeed in copying the array, or\n- * cause an OutOfMemoryError first.\n+ * cause an OutOfMemoryError first. For example:<br>\n+ * <pre>\n+ * void m(int[] array)\n+ * {\n+ *   int[] copy = (int[]) array.clone();\n+ * }\n+ * </pre>\n  *\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n  * @author Eric Blake <ebb9@email.byu.edu>\n- * @since 1.0\n  * @see Cloneable\n  * @see Object#clone()\n+ * @status updated to 1.4\n  */\n public class CloneNotSupportedException extends Exception\n {\n   /**\n-   * compatible with JDK 1.0+\n+   * Compatible with JDK 1.0+.\n    */\n   private static final long serialVersionUID = 5195511250079656443L;\n \n@@ -79,6 +82,7 @@ public CloneNotSupportedException()\n \n   /**\n    * Create an exception with a message.\n+   *\n    * @param s the error message\n    */\n   public CloneNotSupportedException(String s)"}, {"sha": "64c7faf486329903dff8556aea6bf957803dba33", "filename": "libjava/java/lang/Cloneable.java", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCloneable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCloneable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCloneable.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* Cloneable.java -- Interface for marking objects cloneable by Object.clone()\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,12 +38,6 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * This interface should be implemented by classes wishing to\n  * support of override <code>Object.clone()</code>.  The default\n@@ -53,33 +47,30 @@\n  * If <code>clone()</code> is called on an object which does not\n  * implement this interface, a <code>CloneNotSupportedException</code>\n  * will be thrown.\n- * <p>\n  *\n- * This interface is simply a tagging interface; it carries no\n+ * <p>This interface is simply a tagging interface; it carries no\n  * requirements on methods to implement.  However, it is typical for\n  * a Cloneable class to implement at least <code>equals</code>,\n  * <code>hashCode</code>, and <code>clone</code>, sometimes\n  * increasing the accessibility of clone to be public. The typical\n  * implementation of <code>clone</code> invokes <code>super.clone()</code>\n  * rather than a constructor, but this is not a requirement.\n- * <p>\n  *\n- * If an object that implement Cloneable should not be cloned,\n+ * <p>If an object that implement Cloneable should not be cloned,\n  * simply override the <code>clone</code> method to throw a\n  * <code>CloneNotSupportedException</code>.\n- * <p>\n  *\n- * All array types implement Cloneable, and have a public\n+ * <p>All array types implement Cloneable, and have a public\n  * <code>clone</code> method that will never fail with a\n  * <code>CloneNotSupportedException</code>.\n  *\n- * @since 1.0\n  * @author Paul Fisher\n  * @author Eric Blake <ebb9@email.byu.edu>\n  * @author Warren Levy <warrenl@cygnus.com>\n- *\n  * @see Object#clone()\n  * @see CloneNotSupportedException\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public interface Cloneable\n {"}, {"sha": "96d4d6ac57a264c0cf02e386d881167b4b312d60", "filename": "libjava/java/lang/Comparable.java", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FComparable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FComparable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FComparable.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* Comparable.java -- Interface for comparaing objects to obtain an ordering\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,32 +38,60 @@\n \n package java.lang;\n \n-/* Written using online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n-/** \n- * Interface for objects that can be ordering among other\n- * objects. The ordering can be <EM>total</EM>, such that two objects\n- * only compare equal if they are equal by the equals method, or\n- * <EM>partial</EM> such that this is not necessarily true. For\n- * example, a case-sensitive dictionary order comparison of Strings\n- * is total, but if it is case-insensitive it is partial, because\n- * \"abc\" and \"ABC\" compare as equal even though \"abc\".equals(\"ABC\")\n- * returns false.\n+/**\n+ * Interface for objects that can be ordering among other objects. The\n+ * ordering can be <em>total</em>, such that two objects only compare equal\n+ * if they are also equal by the equals method, or <em>partial</em> such\n+ * that this is not necessarily true. For example, a case-sensitive\n+ * dictionary order comparison of Strings is total, but if it is\n+ * case-insensitive it is partial, because \"abc\" and \"ABC\" compare as\n+ * equal even though \"abc\".equals(\"ABC\") returns false. However, if you use\n+ * a partial ordering, it is a good idea to document your class as\n+ * \"inconsistent with equals\", because the behavior of your class in a\n+ * SortedMap will be different than in a HashMap.\n+ *\n+ * <p>Lists, arrays, and sets of objects that implement this interface can\n+ * be sorted automatically, without the need for an explicit\n+ * {@link Comparator}. Note that <code>e1.compareTo(null)</code> should\n+ * throw an Exception; as should comparison between incompatible classes.\n  *\n  * @author Geoff Berry\n  * @author Warren Levy <warrenl@cygnus.com>\n- *\n- * @since JDK1.2\n- * @see java.util.Comparator\n+ * @see Comparator\n+ * @see Collections#sort(List)\n+ * @see Arrays#sort(Object[])\n+ * @see SortedSet\n+ * @see SortedMap\n+ * @see TreeSet\n+ * @see TreeMap\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public interface Comparable\n {\n   /**\n-   * @return a negative integer if this object is less than\n-   * <code>o<code>, zero if this object is equal to <code>o</code>, or\n-   * a positive integer if this object is greater than <code>o</code>\n+   * Compares this object with another, and returns a numerical result based\n+   * on the comparison.  If the result is negative, this object sorts less\n+   * than the other; if 0, the two are equal, and if positive, this object\n+   * sorts greater than the other.  To translate this into boolean, simply\n+   * perform <code>o1.compareTo(o2) <em>&lt;op&gt;</em> 0</code>, where op\n+   * is one of &lt;, &lt;=, =, !=, &gt;, or &gt;=.\n+   *\n+   * <p>You must make sure that the comparison is mutual, ie.\n+   * <code>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</code> (where sgn() is\n+   * defined as -1, 0, or 1 based on the sign).  This includes throwing an\n+   * exception in either direction if the two are not comparable; hence,\n+   * <code>compareTo(null)</code> should always throw an Exception.\n+   *\n+   * <p>You should also ensure transitivity, in two forms:\n+   * <code>x.compareTo(y) &gt; 0 && y.compareTo(z) &gt; 0</code> implies\n+   * <code>x.compareTo(z) &gt; 0</code>; and <code>x.compareTo(y) == 0</code>\n+   * implies <code>x.compareTo(z) == y.compareTo(z)</code>.\n+   *\n+   * @param o the object to be compared\n+   * @return an integer describing the comparison\n+   * @throws NullPointerException if o is null\n+   * @throws ClassCastException if o cannot be compared\n    */\n-  int compareTo( Object o );\n+  int compareTo(Object o);\n }"}, {"sha": "2d98811d1f4c98ae23ef316c334cafa1dcf16b15", "filename": "libjava/java/lang/Compiler.java", "status": "modified", "additions": 77, "deletions": 71, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCompiler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FCompiler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCompiler.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* Compiler.java -- Interface for implementing a method to override \n-   Object.clone()comparaing objects to obtain an ordering\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* Compiler.java -- placeholder for Java-to-native runtime compilers\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,84 +38,91 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- */\n-\n /**\n- * The <code>Compiler</code> class is a place holder for a JIT\n- * compiler implementation does nothing unless there is such a \n- * compiler by default.\n- * <p>\n- * The system property <code>java.compiler</code> may contain the name\n+ * The <code>Compiler</code> class is a placeholder for a JIT compiler\n+ * implementation, and does nothing unless there is such a compiler.\n+ *\n+ * <p>The system property <code>java.compiler</code> may contain the name\n  * of a library to load with <code>System.loadLibrary</code> when the\n- * virtual machine first starts.  If so and loading the library succeeds,\n- * then a function by the name of <code>java_lang_Compiler_start()</code> \n+ * virtual machine first starts.  If so, and loading the library succeeds,\n+ * then a function by the name of <code>java_lang_Compiler_start()</code>\n  * in that library is called.\n  *\n- * Note that a VM might not have implemented any of this.\n+ * <p>Note that a VM might not have implemented any of this.\n  *\n  * @author Tom Tromey <tromey@cygnus.com>\n- *\n+ * @see System#getProperty(String)\n+ * @see System#getProperty(String, String)\n+ * @see System#loadLibrary(String)\n  * @since JDK 1.0\n- * @see System#getProperty(java.lang.String)\n- * @see System#getProperty(java.lang.String,java.lang.String)\n- * @see System#loadLibrary(java.lang.String)\n+ * @status updated to 1.4\n  */\n-public final class Compiler \n+public final class Compiler\n {\n-    /**\n-     * Don't allow new `Compiler's to be made.\n-     */\n-    private Compiler ()\n-    {\n-    }\n+  /**\n+   * Don't allow new `Compiler's to be made.\n+   */\n+  private Compiler()\n+  {\n+  }\n+\n+  /**\n+   * Compile the class named by <code>oneClass</code>.\n+   *\n+   * @param oneClass the class to compile\n+   * @return <code>false</code> if no compiler is available or\n+   *         compilation failed, <code>true</code> if compilation succeeded\n+   * @throws NullPointerException if oneClass is null\n+   */\n+  public static boolean compileClass(Class oneClass)\n+  {\n+    // Never succeed.\n+    return false;\n+  }\n \n-    /**\n-     * Compile the class named by <code>oneClass</code>.\n-     * \n-     * @param oneClass the class to compile\n-     * @return <code>false</code> if no compiler is available or \n-     * compilation failed and <code>true</code> if compilation succeeded.\n-     */\n-    public static boolean compileClass (Class oneClass) \n-    {\n- \t// Never succeed.\n-\treturn false;\n-    }\n-    \n-    /**\n-     * Compile the classes whose name matches <code>classNames/code>.\n-     *\n-     * @param classNames the name of classes to compile\n-     * @return <code>false</code> if no compiler is available or \n-     * compilation failed and <code>true</code> if compilation succeeded.\n-     */\n-    public static boolean compileClasses (String classNames) \n-    {\n-\t// Note the incredibly lame interface.  Always fail.\n-\treturn false;\n-    }\n+  /**\n+   * Compile the classes whose name matches <code>classNames/code>.\n+   *\n+   * @param classNames the name of classes to compile\n+   * @return <code>false</code> if no compiler is available or\n+   *         compilation failed, <code>true</code> if compilation succeeded\n+   * @throws NullPointerException if classNames is null\n+   */\n+  public static boolean compileClasses(String classNames)\n+  {\n+    // Note the incredibly lame interface.  Always fail.\n+    return false;\n+  }\n \n-    /**\n-     * This method examines the argument and performs an operation \n-     * according to the compilers documentation.  No specific operation\n-     * is required.\n-     */\n-    public static Object command (Object arg) \n-    {\n-\t// Our implementation defines this to a no-op.\n-\treturn null;\n-    }\n+  /**\n+   * This method examines the argument and performs an operation\n+   * according to the compilers documentation.  No specific operation\n+   * is required.\n+   *\n+   * @param arg a compiler-specific argument\n+   * @return a compiler-specific value, including null\n+   * @throws NullPointerException if the compiler doesn't like a null arg\n+   */\n+  public static Object command(Object arg)\n+  {\n+    // Our implementation defines this to a no-op.\n+    return null;\n+  }\n \n-    /**\n-     * Calling <code>Compiler.enable()</code> will cause the compiler\n-     * to resume operation if it was previously disabled.  \n-     */\n-    public static void enable () { }\n+  /**\n+   * Calling <code>Compiler.enable()</code> will cause the compiler\n+   * to resume operation if it was previously disabled; provided that a\n+   * compiler even exists.\n+   */\n+  public static void enable()\n+  {\n+  }\n \n-    /**\n-     * Calling <code>Compiler.disable()</code> will cause the compiler\n-     * to be suspended.\n-     */\n-    public static void disable () { }\n+  /**\n+   * Calling <code>Compiler.disable()</code> will cause the compiler\n+   * to be suspended; provided that a compiler even exists.\n+   */\n+  public static void disable()\n+  {\n+  }\n }"}, {"sha": "8bb42dc887c5c81e216fd77748e57f77141b8575", "filename": "libjava/java/lang/Error.java", "status": "modified", "additions": 52, "deletions": 27, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* Error.java - Indication of fatal abnormal conditions\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* Error.java -- Indication of fatal abnormal conditions\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,45 +38,70 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Applications should not try to catch errors since they indicate \n+ * Applications should not try to catch errors since they indicate\n  * abnormal conditions.  An abnormal condition is something which should not\n- * occur.  A few errors, like <code>ThreadDeath</code> error do normally\n- * occur, but most applications should not catch it.  \n- * <p>\n- * A method is not required to declare any subclass of <code>Error</code> in \n+ * occur, or which should not be recovered from.  This latter category\n+ * includes <code>ThreadDeath</code> and <code>AssertionError</code>.\n+ *\n+ * <p>A method is not required to declare any subclass of <code>Error</code> in\n  * its <code>throws</code> clause which might be thrown but not caught while\n- * executing the method..\n+ * executing the method.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public class Error extends Throwable\n {\n-  static final long serialVersionUID = 4980196508277280342L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 4980196508277280342L;\n \n   /**\n-   * Create an error without a message.\n+   * Create an error without a message. The cause remains uninitialized.\n+   *\n+   * @see #initCause(Throwable)\n    */\n   public Error()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n-   * Create an error with a message.\n+   * Create an error with a message. The cause remains uninitialized.\n+   *\n+   * @param s the message string\n+   * @see #initCause(Throwable)\n    */\n   public Error(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n+\n+  /**\n+   * Create an error with a message and a cause.\n+   *\n+   * @param s the message string\n+   * @param cause the cause of this error\n+   * @since 1.4\n+   */\n+  public Error(String s, Throwable cause)\n+  {\n+    super(s, cause);\n+  }\n+\n+  /**\n+   * Create an error with a given cause, and a message of\n+   * <code>cause == null ? null : cause.toString()</code>.\n+   *\n+   * @param cause the cause of this error\n+   * @since 1.4\n+   */\n+  public Error(Throwable cause)\n+  {\n+    super(cause);\n+  }\n }"}, {"sha": "d04bdc010d713a368baf433794002508aeea29ac", "filename": "libjava/java/lang/ExceptionInInitializerError.java", "status": "modified", "additions": 55, "deletions": 87, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,14 @@\n-/* ExceptionInInitializerError.java \n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* ExceptionInInitializerError.java -- thrown when class initialization fails\n+   with an uncaught exception\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,118 +39,85 @@\n \n package java.lang;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * An <code>ExceptionInInitializerError</code> is thrown when an \n- * unexpected exception has occurred in a static initializer or the\n- * initializer for a static variable.\n+ * An <code>ExceptionInInitializerError</code> is thrown when an uncaught\n+ * exception has occurred in a static initializer or the initializer for a\n+ * static variable. In general, this wraps only RuntimeExceptions, since the\n+ * compiler does not allow a checked exception to be uncaught in an\n+ * initializer. This exception only occurs during reflection, when a class\n+ * is initialized as part of another action.\n  *\n- * @since JDK 1.1\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class ExceptionInInitializerError extends LinkageError\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n   static final long serialVersionUID = 1521711792217232256L;\n \n-  private Throwable exception = null;\n+  /**\n+   * The cause of this exception (duplicates the one stored in Throwable).\n+   *\n+   * @serial the exception cause\n+   */\n+  private final Throwable exception;\n \n   /**\n-   * Create an error without a message.\n+   * Create an error without a message. The cause is initialized as null.\n    */\n   public ExceptionInInitializerError()\n-    {\n-      super();\n-    }\n+  {\n+    this((String) null);\n+  }\n \n   /**\n-   * Create an error with a message.\n+   * Create an error with a message. The cause is initialized as null.\n+   *\n+   * @param s the message\n    */\n   public ExceptionInInitializerError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+    exception = null;\n+  }\n \n   /**\n    * Creates an error an saves a reference to the <code>Throwable</code>\n-   * object.\n+   * object. The message string is null.\n    *\n    * @param t the exception thrown\n    */\n   public ExceptionInInitializerError(Throwable t)\n-    {\n-      super(t.toString());\n-      exception = t;\n-    }\n-\n-  /** \n-   * Return the exception that caused this error to be created.\n-   * @return the stored <code>Throwable</code> object or <code>null</code>\n-   * if this <code>ExceptionInInitializerError</code> has no stored\n-   * <code>Throwable</code> object.\n-   */\n-  public Throwable getException()\n-    {\n-      return exception;\n-    }\n+  {\n+    super(null);\n+    initCause(t);\n+    exception = t;\n+  }\n \n   /**\n-   * Print a stack trace of the exception that occurred.\n-   */\n-  public void printStackTrace()\n-    {\n-      if (exception == null)\n-\t{\n-\t  super.printStackTrace();\n-\t}\n-      else\n-\t{\n-\t  System.err.print(this.getClass() + \": \");\n-\t  exception.printStackTrace();\n-\t}\n-    }\n-\n-  /**\n-   * Print a stack trace of the exception that occurred to \n-   * the specified <code>PrintStream</code>.\n+   * Return the exception that caused this error to be created. This is a\n+   * legacy method; the preferred choice now is {@link Throwable#getCause()}.\n+   *\n+   * @return the cause, or null if unknown\n    */\n-  public void printStackTrace(PrintStream ps)\n-    {\n-      if (exception == null)\n-\t{\n-\t  super.printStackTrace(ps);\n-\t}\n-      else\n-\t{\n-\t  ps.print(this.getClass() + \": \");\n-\t  exception.printStackTrace(ps);\n-\t}\n-    }\n+  public Throwable getException()\n+  {\n+    return exception;\n+  }\n \n   /**\n-   * Print a stack trace of the exception that occurred to \n-   * the specified <code>PrintWriter</code>.\n+   * Return the exception that cause this error to be created.\n+   *\n+   * @return the cause, or null if unknown\n+   * @since 1.4\n    */\n-  public void printStackTrace(PrintWriter pw)\n-    {\n-      if (exception == null)\n-\t{\n-\t  super.printStackTrace(pw);\n-\t}\n-      else\n-\t{\n-\t  pw.print(this.getClass() + \": \");\n-\t  exception.printStackTrace(pw);\n-\t}\n-    }\n+  public Throwable getCause()\n+  {\n+    return exception;\n+  }\n }"}, {"sha": "a5c384e77fe984396166d7da6ace8b4b9dbfe10d", "filename": "libjava/java/lang/IllegalAccessError.java", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalAccessError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalAccessError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalAccessError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* IllegalAccessError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalAccessError.java -- thrown when linking to an inaccessible member\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,43 +38,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * An <code>IllegalAccessError</code> is thrown when an attempt is made to \n+ * An <code>IllegalAccessError</code> is thrown when an attempt is made to\n  * call a method, or access or modify a field that the application does not\n- * have access to.  Because this error is usually caught by a compiler, \n+ * have access to.  Because this error is usually caught by a compiler,\n  * the error only occurs at runtime when the definition of a class has\n- * changed in a way that is incompatible with the previously compiled \n+ * changed in a way that is incompatible with the previously compiled\n  * application.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class IllegalAccessError extends IncompatibleClassChangeError\n {\n-  static final long serialVersionUID = -8988904074992417891L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -8988904074992417891L;\n \n   /**\n    * Create an error without a message.\n    */\n   public IllegalAccessError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalAccessError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "f6fc8f67e915a37d6cf2edcd8b5e95daa7c3a015", "filename": "libjava/java/lang/IllegalAccessException.java", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalAccessException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalAccessException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalAccessException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* IllegalAccessException.java -- exception thrown when trying to load a \n-   class that is not public and in another package.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalAccessException.java -- thrown on attempt to reflect on\n+   inaccessible data\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,45 +39,57 @@ class that is not public and in another package.\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * Thrown in two cases.  The first is when try to load a class that is\n- * not public and in another package using specific methods from \n- * <code>ClassLoader</code> and <code>Class</code>.  The second case is\n- * when trying to create a new instance of a class to which you do not have\n- * access to the zero argument constructor as in using the \n- * <code>newsInstance</code> method of class <code>Class</code>.\n+ * Thrown whenever a reflective method tries to do something that the\n+ * compiler would not allow.  For example, using reflection to set a private\n+ * variable that belongs to a class in another package is bad.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @see Class#newInstance()\n+ * @see Field#set(Object, Object)\n+ * @see Field#setBoolean(Object, boolean)\n+ * @see Field#setByte(Object, byte)\n+ * @see Field#setShort(Object, short)\n+ * @see Field#setChar(Object, char)\n+ * @see Field#setInt(Object, int)\n+ * @see Field#setLong(Object, long)\n+ * @see Field#setFloat(Object, float)\n+ * @see Field#setDouble(Object, double)\n+ * @see Field#get(Object)\n+ * @see Field#getBoolean(Object)\n+ * @see Field#getByte(Object)\n+ * @see Field#getShort(Object)\n+ * @see Field#getChar(Object)\n+ * @see Field#getInt(Object)\n+ * @see Field#getLong(Object)\n+ * @see Field#getFloat(Object)\n+ * @see Field#getDouble(Object)\n+ * @see Method#invoke(Object, Object[])\n+ * @see Constructor#newInstance(Object[])\n+ * @status updated to 1.4\n  */\n public class IllegalAccessException extends Exception\n {\n-  static final long serialVersionUID = 6616958222490762034L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 6616958222490762034L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public IllegalAccessException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalAccessException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "deb6735c8996b076754d433ddbaba3239f60809c", "filename": "libjava/java/lang/IllegalArgumentException.java", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalArgumentException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalArgumentException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalArgumentException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* IllegalArgumentException.java -- exception may be thrown when a method\n-   is passed an illegal or inappropriate argument.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalArgumentException.java -- thrown when a method is passed an\n+   illegal or inappropriate argument\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,41 +38,38 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * When a method is passed an illegal or inappropriate argument \n- * this exception may be thrown.\n+ * Thrown when a method is passed an illegal or inappropriate argument. For\n+ * example:<br>\n+ * <pre>\n+ * wait(-1);\n+ * </pre>\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class IllegalArgumentException extends RuntimeException\n {\n-  static final long serialVersionUID = -5365630128856068164L;\n-  \n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -5365630128856068164L;\n+\n   /**\n    * Create an exception without a message.\n    */\n   public IllegalArgumentException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalArgumentException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "08e1ba7a1ea2173bcbb2cecc314f373e219be400", "filename": "libjava/java/lang/IllegalMonitorStateException.java", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* IllegalMonitorStateException.java -- exception thrown when a thread \n-   attempts to wait on an object's monitor.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalMonitorStateException.java -- thrown when trying to wait or\n+   notify a monitor that is not owned\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,43 +39,40 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * If a thread attempts to wait on an object's monitor then\n- * <code>IllegalMonitorStateException</code> can be thrown.  This\n- * exception is also thrown to give a message to other threads also waiting\n- * on an object's monitor without owning the monitor.\n+ * Thrown when a thread attempts to wait or notify on a monitor that it\n+ * does not own (ie. it has not synchronized on the object). For example:<br>\n+ * <pre>\n+ * void m() {\n+ *   notify();\n+ * }\n+ * </pre>\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class IllegalMonitorStateException extends RuntimeException\n {\n-  static final long serialVersionUID = 3713306369498869069L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 3713306369498869069L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public IllegalMonitorStateException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalMonitorStateException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "16dcf1a80c84cded801cff86321cda710b425066", "filename": "libjava/java/lang/IllegalStateException.java", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalStateException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* IllegalStateException.java -- exception thrown when invoking a method at\n-   an illegal or inappropriate time.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalStateException.java -- thrown when invoking a method at\n+   an illegal or inappropriate time\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +39,42 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * Invoking a method at an illegal or inappropriate time can result\n- * in an <code>IllegalStateException</code>.\n+ * Thrown when a method is invoked at an illegal or inappropriate time. For\n+ * example:<br>\n+ * <pre>\n+ * void m(Collecion c)\n+ * {\n+ *   c.iterator().remove();\n+ * }\n+ * </pre>\n  *\n- * @since JDK 1.1\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class IllegalStateException extends RuntimeException\n {\n-  static final long serialVersionUID = -1848914673093119416L;\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -1848914673093119416L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public IllegalStateException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalStateException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "bcc188e1a6616de9c733aeac7b6f104eeb2c25c8", "filename": "libjava/java/lang/IllegalThreadStateException.java", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,15 +1,14 @@\n-/* IllegalThreadStateException.java -- exception thrown when trying to\n-   suspend or resume a Thread when it is not in an appropriate state\n-   for the operation.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IllegalThreadStateException.java -- thrown when trying to manipulate a\n+   Thread when it is not in an appropriate state\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -40,41 +39,37 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * When trying to <code>suspend</code> or <code>resume</code> an object\n- * of class <code>Thread</code> when it is not in an appropriate state\n- * for the operation.\n+ * Thrown When trying to manipulate a Thread which is in an inappropriate\n+ * state. Since the documentation suggests that this can happen with\n+ * <code>Thread.suspend</code> or <code>Thread.resume</code>, but these\n+ * two methods are deprecated, this exception is likely very rare.\n  *\n- * @since JDK 1.0\n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class IllegalThreadStateException extends IllegalArgumentException\n {\n-  static final long serialVersionUID = -7626246362397460174L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -7626246362397460174L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public IllegalThreadStateException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IllegalThreadStateException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "7f569fdc36d8401ab6a6f1e0601d1c0d3e692af3", "filename": "libjava/java/lang/IncompatibleClassChangeError.java", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* IncompatibleClassChangeError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IncompatibleClassChangeError.java -- thrown for binary incompatible classes\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * An <code>IncompatibleClassChangeError</code> is thrown when the \n- * definition of a class used by the currently executing method has\n- * changed in an incompatible way.\n+ * An <code>IncompatibleClassChangeError</code> is thrown when the definition\n+ * of a class used by the currently executing method has changed in an\n+ * incompatible way.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class IncompatibleClassChangeError extends LinkageError\n {\n-  static final long serialVersionUID = -4914975503642802119L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4914975503642802119L;\n \n   /**\n    * Create an error without a message.\n    */\n   public IncompatibleClassChangeError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public IncompatibleClassChangeError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "336f87219a3989eddee7d66308c559027c0e79fb", "filename": "libjava/java/lang/IndexOutOfBoundsException.java", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,15 +1,13 @@\n-/* IndexOutOfBoundsException.java -- exception thrown when attempting to \n-   access an index which is out of bounds on objects like String, Array,\n-   or Vector.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* IndexOutOfBoundsException.java -- thrown for an invalid index\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -40,44 +38,38 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n  * This exception can be thrown to indicate an attempt to access an\n  * index which is out of bounds on objects like String, Array, or Vector.\n  * Usually any negative integer less than or equal to -1 and positive \n  * integer greater than or equal to the size of the object is an index\n  * which would be out of bounds.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class IndexOutOfBoundsException extends RuntimeException\n {\n-  static final long serialVersionUID = 234122996006267687L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 234122996006267687L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public IndexOutOfBoundsException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public IndexOutOfBoundsException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "31b64f5479802cbc11556899627e717c75ad6359", "filename": "libjava/java/lang/InheritableThreadLocal.java", "status": "modified", "additions": 95, "deletions": 134, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.InheritableThreadLocal\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+/* InheritableThreadLocal -- a ThreadLocal which inherits values across threads\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,141 +38,102 @@\n package java.lang;\n \n import java.util.Iterator;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n import java.util.WeakHashMap;\n \n /**\n- * ThreadLocal whose value is inherited by child Threads.\n- * The value of the InheritableThreadLocal associated with the (parent) Thread\n- * on the moment that it creates a new (child) Thread is set as the value that\n- * is associated with the new (child) Thread.\n- * <p>\n- * It is possible to make the value associated with the child Thread a function\n- * of the value that is associated with the parent Thread by overriding the\n- * <code>childValue()</code> method.\n+ * A ThreadLocal whose value is inherited by child Threads. The value of the\n+ * InheritableThreadLocal associated with the (parent) Thread is copied to\n+ * the new (child) Thread at the moment of creation.\n+ *\n+ * <p>It is possible to make the value associated with the child Thread a\n+ * function of the value that is associated with the parent Thread by\n+ * overriding the <code>childValue()</code> method. The utility of this class\n+ * is in transferring items like User ID or Transaction ID across threads\n+ * automatically.\n  *\n+ * @author Mark Wielaard <mark@klomp.org>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see ThreadLocal\n  * @since 1.2\n- * @author Mark Wielaard (mark@klomp.org)\n+ * @status updated to 1.4\n  */\n-public class InheritableThreadLocal extends ThreadLocal {\n-\t\n-\t/**\n-\t * Maps Threads to a Set of InheritableThreadLocals\n-\t * (the heritage of that Thread).\n-\t * Uses a WeakHashMap so if the Thread is garbage collected the reference\n-\t * to that Set disappears.\n-\t * Both <code>AddToHeritage</code> access and modify it so they have to\n-\t * synchronize on the threadMap when they do.\n-\t */\n-\tprivate static Map threadMap = new WeakHashMap();\n-\t\n-\t/**\n-\t * Creates a new InheritableThreadLocal that has no values associated\n-\t * with it yet.\n-\t */\n-\tpublic InheritableThreadLocal() {\n-\t\tsuper();\n-\t}\n-\t\n-\t/**\n-\t * Determines the value associated with a newly created child Thread\n-\t * as a function of the value associated with the currently executing\n-\t * (parent) Thread.\n-\t * <p>\n-\t * The default implementation just returns the parentValue.\n-\t */\n-\tprotected Object childValue(Object parentValue) {\n-\t\treturn parentValue;\n-\t}\n-\t\n-\t/**\n-\t * Adds this <code>InheritableThreadLocal</code> to the heritage of the\n-\t * current Thread and returns the value of the <code>ThreadLocal</code>\n-\t * for the Thread. The value will be either the last value that the\n-\t * current Thread has set, or the childValue of the last value that the\n-\t * parent Thread set before the current Thread was created, or the\n-\t * initialValue of the <code>ThreadLocal</code>.\n-\t *\n-\t * @see ThreadLocal#get()\n-\t */\n-\tpublic Object get() {\n-\t\taddToHeritage(); \n-\t\treturn super.get();\n-\t}\n-\t\n-\t/**\n-\t * Adds this <code>InheritableThreadLocal</code> to the heritage of the\n-\t * current Thread and sets the value of the <code>ThreadLocal</code>\n-\t * for the Thread.\n-\t *\n-\t * @see ThreadLocal#set(Object)\n-\t */\n-\tpublic void set(Object value) {\n-\t\taddToHeritage();\n-\t\tsuper.set(value);\n-\t}\n-\t\n-\t/**\n-\t * Adds this <code>InheritableThreadLocal</code> to the heritage\n-\t * of the current Thread.\n-\t */\n-\tprivate void addToHeritage() {\n-\t\tThread currentThread = Thread.currentThread();\n-\t\tSet heritage;\n-\t\tsynchronized(threadMap) {\n-\t\t\theritage = (Set)threadMap.get(currentThread);\n-\t\t}\n-\t\t// Note that we don't have to synchronize on the heritage Set\n-\t\t// since only this Thread (or the parent Thread when creating\n-\t\t// the heritage) ever modifies it.\n-\t\tif (heritage == null) {\n-\t\t\theritage = new HashSet();\n-\t\t\tsynchronized(threadMap) {\n-\t\t\t\tthreadMap.put(currentThread, heritage);\n-\t\t\t}\n-\t\t}\n-\t\tif (!heritage.contains(this)) {\n-\t\t\theritage.add(this);\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Generates the childValues of all <code>InheritableThreadLocal</code>s\n-\t * that are in the heritage of the current Thread for the newly created\n-\t * childThread.\n-\t * Should be called from the contructor of java.lang.Thread.\n-\t */\n-\tstatic void newChildThread(Thread childThread) {\n-\t\t// The currentThread is the parent of the new thread\n-\t\tThread parentThread = Thread.currentThread();\n-\t\t\n-\t\t// Inherit all the InheritableThreadLocals of the parent thread\n-\t\tSet heritage;\n-\t\tsynchronized(threadMap) {\n-\t\t\theritage = (Set)threadMap.get(parentThread);\n-\t\t}\n-\t\t// Note that we don't have to synchronize on the heritage Set\n-\t\t// since only this Thread (or the parent Thread when creating\n-\t\t// the heritage) ever modifies it.\n-\t\tif (heritage != null) {\n-\t\t\tsynchronized(threadMap) {\n-\t\t\t\tthreadMap.put(childThread, new HashSet(heritage));\n-\t\t\t}\n-\t\t\t// And constructs all the new child values\n-\t\t\t// (has to be done now that we are executing in the parentThread)\n-\t\t\tIterator it = heritage.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tInheritableThreadLocal local =\n-\t\t\t\t\t(InheritableThreadLocal) it.next();\n-\t\t\t\t// Note that the parentValue cannot be null\n-\t\t\t\t// If it was it would not be in the heritage\n-\t\t\t\tObject parentValue = local.get(parentThread).getValue();\n-\t\t\t\tObject childValue = local.childValue(parentValue);\n-\t\t\t\tThreadLocal.Value v = new ThreadLocal.Value(childValue);\n-\t\t\t\tlocal.set(childThread, v);\n-\t\t\t}\n-\t\t}\n-\t}\n+public class InheritableThreadLocal extends ThreadLocal\n+{\n+  /**\n+   * Maps Threads to a List of InheritableThreadLocals (the heritage of that\n+   * Thread). Uses a WeakHashMap so if the Thread is garbage collected the\n+   * List can be collected, too. Maps to a list in case the user overrides\n+   * equals.\n+   */\n+  private static final WeakHashMap threadMap = new WeakHashMap();\n+\n+  /**\n+   * Creates a new InheritableThreadLocal that has no values associated\n+   * with it yet.\n+   */\n+  public InheritableThreadLocal()\n+  {\n+    Thread currentThread = Thread.currentThread();\n+    // Note that we don't have to synchronize, as only this thread will\n+    // ever modify the returned heritage.\n+    List heritage = (List) threadMap.get(currentThread);\n+    if (heritage == null)\n+      {\n+        heritage = new ArrayList();\n+        threadMap.put(currentThread, heritage);\n+      }\n+    heritage.add(this);\n+  }\n+\n+  /**\n+   * Determines the value associated with a newly created child Thread as a\n+   * function of the value associated with the currently executing (parent)\n+   * Thread. The default implementation just returns the parentValue.\n+   *\n+   * @param parentValue the value of this object in the parent thread at\n+   *        the moment of creation of the child\n+   * @return the initial value for the child thread\n+   */\n+  protected Object childValue(Object parentValue)\n+  {\n+    return parentValue;\n+  }\n+\n+  /**\n+   * Generates the childValues of all <code>InheritableThreadLocal</code>s\n+   * that are in the heritage of the current Thread for the newly created\n+   * childThread. Should be called from the contructor Thread.\n+   *\n+   * @param childThread the newly created thread, to inherit from this thread\n+   * @see Thread#Thread(ThreadGroup, Runnable, String)\n+   */\n+  static void newChildThread(Thread childThread)\n+  {\n+    // The currentThread is the parent of the new thread.\n+    Thread parentThread = Thread.currentThread();\n+    // Note that we don't have to synchronize, as only this thread will\n+    // ever modify the returned heritage.\n+    ArrayList heritage = (ArrayList) threadMap.get(parentThread);\n+    if (heritage != null)\n+      {\n+        threadMap.put(childThread, heritage.clone());\n+        // Perform the inheritance.\n+        Iterator it = heritage.iterator();\n+        int i = heritage.size();\n+        while (--i >= 0)\n+          {\n+            InheritableThreadLocal local = (InheritableThreadLocal) it.next();\n+            Object parentValue = local.valueMap.get(parentThread);\n+            if (parentValue != null)\n+              {\n+                Object childValue = local.childValue(parentValue == NULL\n+                                                     ? null : parentValue);\n+                local.valueMap.put(childThread, (childValue == null\n+                                                 ? NULL : parentValue));\n+              }\n+          }\n+      }\n+  }\n }"}, {"sha": "54aa7b36609715a1ce1a586baa339a2ef5fdd9e3", "filename": "libjava/java/lang/InstantiationError.java", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInstantiationError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInstantiationError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInstantiationError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* InstantiationError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* InstantiationError.java -- thrown when the linker cannot create an instance\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,43 +38,38 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * An <code>InstantiationError</code> is thrown when an attempt is made to \n- * create an instance of an abstract class or an interface.  Because this \n- * error is usually caught by a compiler, \n- * the error only occurs at runtime when the definition of a class has\n- * changed in a way that is incompatible with the previously compiled \n- * application.\n+ * An <code>InstantiationError</code> is thrown when an attempt is made to\n+ * create an instance of an abstract class or an interface.  Because this\n+ * error is usually caught by a compiler, the error only occurs at runtime\n+ * when the definition of a class has changed in a way that is incompatible\n+ * with the previously compiled application.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class InstantiationError extends IncompatibleClassChangeError\n {\n-  static final long serialVersionUID = -4885810657349421204L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4885810657349421204L;\n \n   /**\n    * Create an error without a message.\n    */\n   public InstantiationError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public InstantiationError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "511481418c4571f45a98944213682661f0b47a4d", "filename": "libjava/java/lang/InstantiationException.java", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInstantiationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInstantiationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInstantiationException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* InstantiationException.java -- exception thrown when trying to instantiate\n-   interfaces and abstract classes using Class.newInstance.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* InstantiationException.java -- thrown when reflection cannot create an\n+   instance\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,42 +39,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.\n- * Interfaces and abstract classes cannot be instantiated using the \n- * <code>newInstance</code> method of class <code>Class</code>.  Trying\n- * to do so results in this exception being thrown.\n+ * Thrown when an attempt is made to use reflection to build a\n+ * non-instantiable class (an interface or abstract class).\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @see Class#newInstance()\n+ * @status updated to 1.4\n  */\n public class InstantiationException extends Exception\n {\n-  static final long serialVersionUID = -8441929162975509110L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -8441929162975509110L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public InstantiationException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public InstantiationException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "d85aed1181730760ee904e93880342cec6c15c35", "filename": "libjava/java/lang/InternalError.java", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInternalError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInternalError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInternalError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* InternalError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* InternalError.java -- thrown when the VM encounters an internal error\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,39 +38,35 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n  * An <code>InternalError</code> is thrown when a mystical error has\n  * occurred in the Java Virtual Machine.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class InternalError extends VirtualMachineError\n {\n-  static final long serialVersionUID = -9062593416125562365L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -9062593416125562365L;\n \n   /**\n    * Create an error without a message.\n    */\n   public InternalError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public InternalError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "2ee7867f6108e7f64c550617c7244762bccde40e", "filename": "libjava/java/lang/InterruptedException.java", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInterruptedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FInterruptedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInterruptedException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,15 +1,13 @@\n-/* InterruptedException.java -- exception thrown when a thread interrupts \n-   another thread which was previously sleeping, waiting, or paused in some \n-   other way.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* InterruptedException.java -- thrown when a thread is interrupted\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -40,42 +38,43 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.\n- * Thrown when a thread interrupts another thread which was previously \n- * sleeping, waiting, or paused in some other way.  See the \n+ * Thrown when a thread interrupts another thread which was previously\n+ * sleeping, waiting, or paused in some other way.  See the\n  * <code>interrupt</code> method of class <code>Thread</code>.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @see Object#wait()\n+ * @see Object#wait(long)\n+ * @see Object#wait(long, int)\n+ * @see Thread#sleep(long)\n+ * @see Thread#interrupt()\n+ * @see Thread#interrupted()\n+ * @status updated to 1.4\n  */\n public class InterruptedException extends Exception\n {\n-  static final long serialVersionUID = 6700697376100628473L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 6700697376100628473L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public InterruptedException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   *\n+   * @param s the message\n    */\n   public InterruptedException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "020fe0a9a7c4d740b9a9c9ab2e53a8a96ea978ce", "filename": "libjava/java/lang/LinkageError.java", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FLinkageError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FLinkageError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLinkageError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,14 @@\n-/* LinkageError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* LinkageError.java -- thrown when classes valid at separate compile times\n+   cannot be linked to each other\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +39,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * Subclasses of <code>LinkageError</code> are thrown to indicate \n- * a class which is depended upon by another class has incompatibly \n- * changed after the compilation of the latter class.\n+ * Subclasses of <code>LinkageError</code> are thrown to indicate that two\n+ * classes which were compatible at separate compilation times cannot be\n+ * linked to one another.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class LinkageError extends Error\n {\n-  static final long serialVersionUID = 3579600108157160122L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 3579600108157160122L;\n \n   /**\n    * Create an error without a message.\n    */\n   public LinkageError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public LinkageError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "ee73a97d5aa7b0756485f762124787b47bff8e91", "filename": "libjava/java/lang/NegativeArraySizeException.java", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* NegativeArraySizeException.java -- exception thrown when an attempt is \n-   made to create an array with a negative size.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NegativeArraySizeException.java -- thrown on attempt to create array\n+   with a negative size\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +39,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n  * Thrown when an attempt is made to create an array with a negative\n- * size.\n+ * size. For example:<br>\n+ * <pre>\n+ * int i = -1;\n+ * int[] array = new int[i];\n+ * </pre>\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class NegativeArraySizeException extends RuntimeException\n {\n-  static final long serialVersionUID = -8960118058596991861L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -8960118058596991861L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public NegativeArraySizeException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public NegativeArraySizeException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "5ca69bcaaa2d2d4f1b9940830cc783375eadd58f", "filename": "libjava/java/lang/NoClassDefFoundError.java", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* NoClassDefFoundError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NoClassDefFoundError.java -- thrown when a ClassLoader cannot find a class\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,43 +38,39 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n  * A <code>NoClassDefFoundError</code> is thrown when a classloader or the\n  * Java Virtual Machine tries to load a class and no definition of the class\n  * can be found.  This could happen when using the <code>new</code> expression\n- * or during a normal method call.  The reason this would occur at runtime is \n+ * or during a normal method call.  The reason this would occur at runtime is\n  * because the missing class definition existed when the currently executing \n  * class was compiled, but now that definition cannot be found.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class NoClassDefFoundError extends LinkageError\n {\n-  static final long serialVersionUID = 9095859863287012458L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 9095859863287012458L;\n \n   /**\n    * Create an error without a message.\n    */\n   public NoClassDefFoundError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public NoClassDefFoundError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "0a197b0c4bdc6786cf880bd1d812c2d5a799a019", "filename": "libjava/java/lang/NoSuchFieldError.java", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchFieldError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchFieldError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchFieldError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* NoSuchFieldError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NoSuchFieldError.java -- thrown when the linker does not find a field\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,37 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n  * A <code>NoSuchFieldError</code> is thrown if an application attempts\n- * to access the field of an object and that object no longer has that \n- * field.  \n+ * to access a field of a class, and that class no longer has that field.\n+ * This is normally detected by the compiler, so it signals that you are\n+ * using binary incompatible class versions.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class NoSuchFieldError extends IncompatibleClassChangeError\n {\n-  static final long serialVersionUID = -3456430195886129035L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -3456430195886129035L;\n \n   /**\n    * Create an error without a message.\n    */\n   public NoSuchFieldError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public NoSuchFieldError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "ee721ebef211c920961f93624187eb9f9affa83d", "filename": "libjava/java/lang/NoSuchFieldException.java", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchFieldException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchFieldException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchFieldException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* NoSuchFieldException.java -- exception thrown to indicate the class does\n-   not have the specified field.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NoSuchFieldException.java -- thrown when reflecting a non-existant field\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,40 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * Thrown to indicate the class does not have the specified field.\n+ * Thrown to indicate the class does not have the specified field. This is\n+ * caused by a variety of reflection methods, when looking up a field by name.\n  *\n- * @since JDK 1.1\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public class NoSuchFieldException extends Exception\n {\n-  static final long serialVersionUID = -6143714805279938260L;\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -6143714805279938260L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public NoSuchFieldException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public NoSuchFieldException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "dced018cfe356eecbb369dba9b9a10aa8137a355", "filename": "libjava/java/lang/NoSuchMethodError.java", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchMethodError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchMethodError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchMethodError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* NoSuchMethodError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NoSuchMethodError.java -- thrown when the linker does not find a method\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,37 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n  * A <code>NoSuchMethodError</code> is thrown if an application attempts\n- * to access a method of a class, and that class no longer has that \n- * method.  \n+ * to access a method of a class, and that class no longer has that method.\n+ * This is normally detected by the compiler, so it signals that you are\n+ * using binary incompatible class versions.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class NoSuchMethodError extends IncompatibleClassChangeError\n {\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n   static final long serialVersionUID = -3765521442372831335L;\n \n   /**\n    * Create an error without a message.\n    */\n   public NoSuchMethodError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public NoSuchMethodError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "cba69203f7b6dfbf6e4763fb1e5d254f33da4bda", "filename": "libjava/java/lang/NoSuchMethodException.java", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchMethodException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNoSuchMethodException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchMethodException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* NoSuchMethodException.java -- exception thrown to indicate the class\n-   does not have the specified method.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NoSuchMethodException.java -- thrown when reflecting a non-existant method\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,40 +38,35 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * Thrown to indicate the class does not have the specified method.\n+ * Thrown to indicate the class does not have the specified method. This is\n+ * caused by a variety of reflection methods, when looking up a method by name.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class NoSuchMethodException extends Exception\n {\n-  static final long serialVersionUID = 5034388446362600923L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 5034388446362600923L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public NoSuchMethodException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public NoSuchMethodException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "bab2071937341eef61823bfc19f9d8dffd4bda69", "filename": "libjava/java/lang/NullPointerException.java", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNullPointerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNullPointerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNullPointerException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* NullPointerException.java -- exception thrown when attempting to use null\n-   where an object is required.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NullPointerException.java -- thrown when using null instead of an object\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +38,45 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n  * Thrown when attempting to use <code>null</code> where an object\n- * is required, such as when accessing an instance method of a null object.\n+ * is required. The Virtual Machine automatically throws this exception\n+ * for the following:<br><ul>\n+ * <li>Calling an instance method on a null object</li>\n+ * <li>Accessing or modifying a field of a null object</li>\n+ * <li>Taking the array length of a null array</li>\n+ * <li>Accessing or modifying the slots of a null array</li>\n+ * <li>Throwing a null Throwable</li>\n+ * <li>Synchronizing on a null object</li>\n+ * </ul>\n+ * <p>Applications should also throw NullPointerExceptions whenever\n+ * <code>null</code> is an inappropriate parameter to a method.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class NullPointerException extends RuntimeException\n {\n-  static final long serialVersionUID = 5162710183389028792L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 5162710183389028792L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public NullPointerException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public NullPointerException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "d076cc83da9e5376844acc972a66f45c237521f8", "filename": "libjava/java/lang/NumberFormatException.java", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNumberFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FNumberFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNumberFormatException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* NumberFormatException.java -- exception may be thrown when attempting to\n-   convert a String to one of the numeric types, but the operation fails.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* NumberFormatException.java -- thrown when parsing a bad string as a number\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,42 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * Can be thrown when attempting to convert a <code>String</code> to \n+ * Can be thrown when attempting to convert a <code>String</code> to\n  * one of the numeric types, but the operation fails because the string\n  * has the wrong format.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class NumberFormatException extends IllegalArgumentException\n {\n-  static final long serialVersionUID = -2848938806368998894L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -2848938806368998894L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public NumberFormatException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public NumberFormatException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "b56b8f4242ec5f7ef806b77d328e642f3619d75c", "filename": "libjava/java/lang/OutOfMemoryError.java", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FOutOfMemoryError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FOutOfMemoryError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FOutOfMemoryError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* OutOfMemoryError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* OutOfMemoryError.java -- thrown when a memory allocation fails\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * When the Java Virtual Machine is unable to allocate an object because it \n- * is out of memory and no more memory could be made available by the \n- * garbage collector an <code>OutOfMemoryError</code> is thrown.\n+ * Thrown when the Java Virtual Machine is unable to allocate an object\n+ * because it is out of memory and no more memory could be made available\n+ * by the garbage collector.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class OutOfMemoryError extends VirtualMachineError\n {\n-  static final long serialVersionUID = 8228564086184010517L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 8228564086184010517L;\n \n   /**\n    * Create an error without a message.\n    */\n   public OutOfMemoryError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public OutOfMemoryError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "e5df4173292c5d67c7638fffa7a5ef0190e053b4", "filename": "libjava/java/lang/Process.java", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FProcess.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* Process.java - Represent spawned system process.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* Process.java - Represent spawned system process\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -41,77 +41,88 @@\n import java.io.OutputStream;\n import java.io.InputStream;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- */\n-\n /**\n  * An instance of a subclass of <code>Process</code> is created by the\n  * <code>Runtime.exec</code> methods.  Methods in <code>Process</code>\n- * provide a means to send input to a process, obtain the output from a \n- * subprocess, destroy a subprocess, obtain the exit value from a \n+ * provide a means to send input to a process, obtain the output from a\n+ * subprocess, destroy a subprocess, obtain the exit value from a\n  * subprocess, and wait for a subprocess to complete.\n- * \n- * @since JDK 1.0\n- * \n+ *\n+ * <p>This is dependent on the platform, and some processes (like native\n+ * windowing processes, 16-bit processes in Windows, or shell scripts) may\n+ * be limited in functionality. Because some platforms have limited buffers\n+ * between processes, you may need to provide input and read output to prevent\n+ * the process from blocking, or even deadlocking.\n+ *\n+ * <p>Even if all references to this object disapper, the process continues\n+ * to execute to completion. There are no guarantees that the\n+ * subprocess execute asynchronously or concurrently with the process which\n+ * owns this object.\n+ *\n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n+ * @see Runtime#exec(String[], String[], File)\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public abstract class Process\n {\n   /**\n    * Empty constructor does nothing.\n    */\n-  public Process() { }\n+  public Process()\n+  {\n+  }\n \n   /**\n-   * Obtain the output stream of the subprocess.  It may help to \n-   * associate this stream as the redirected STDIN file descriptor of\n-   * the subprocess.\n+   * Obtain the output stream that sends data to the subprocess. This is\n+   * the STDIN of the subprocess. When implementing, you should probably\n+   * use a buffered stream.\n+   *\n+   * @return the output stream that pipes to the process input\n    */\n   public abstract OutputStream getOutputStream();\n \n   /**\n-   * Obtain the input stream of the subprocess.  It may help to \n-   * associate this stream as the redirected STDOUT file descriptor of\n-   * the subprocess.\n+   * Obtain the input stream that receives data from the subprocess. This is\n+   * the STDOUT of the subprocess. When implementing, you should probably\n+   * use a buffered stream.\n+   *\n+   * @return the input stream that pipes data from the process output\n    */\n   public abstract InputStream getInputStream();\n \n   /**\n-   * Obtain the error input stream of the subprocess.  It may help to \n-   * associate this stream as the redirected STDERR file descriptor of\n-   * the subprocess.\n+   * Obtain the input stream that receives data from the subprocess. This is\n+   * the STDERR of the subprocess. When implementing, you should probably\n+   * use a buffered stream.\n+   *\n+   * @return the input stream that pipes data from the process error output\n    */\n   public abstract InputStream getErrorStream();\n \n   /**\n    * The thread calling <code>waitFor</code> will block until the subprocess\n-   * has terminated.  If the process has already terminated then the method\n+   * has terminated. If the process has already terminated then the method\n    * immediately returns with the exit value of the subprocess.\n-   * \n-   * @returns the exit value of the subprocess.  A return of <code>0</code> \n-   * denotes normal process termination by convention.\n    *\n-   * @throws InterruptedException is thrown if another thread interrupts \n-   * the waiting thread.  The waiting thread stops waiting.\n+   * @return the subprocess exit value; 0 conventionally denotes success\n+   * @throws InterruptedException if another thread interrups the blocked one\n    */\n-  public abstract int waitFor()\n-    throws InterruptedException;\n+  public abstract int waitFor() throws InterruptedException;\n \n   /**\n    * When a process terminates there is associated with that termination\n-   * an exit value for the process to indicate why it terminated.  A return\n+   * an exit value for the process to indicate why it terminated. A return\n    * of <code>0</code> denotes normal process termination by convention.\n    *\n-   * @returns the exit value of the subprocess.\n-   * @throws IllegalThreadStateException is thrown if the subprocess \n-   * represented by the subclass of this class has not yet terminated.\n+   * @return the exit value of the subprocess\n+   * @throws IllegalThreadStateException if the subprocess has not terminated\n    */\n   public abstract int exitValue();\n \n   /**\n    * Kills the subprocess and all of its children forcibly.\n    */\n   public abstract void destroy();\n-\n-}\n+} // class Process"}, {"sha": "fd817b0e4a1d01bed800e49ab54a375c271f19d9", "filename": "libjava/java/lang/Runnable.java", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FRunnable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FRunnable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRunnable.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.Runnable\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* Runnable -- interface for a method tied to an Object; often for Threads\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,12 +38,6 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Complete.\n- */\n-\n /**\n  * Runnable is an interface you implement to indicate that your class can be\n  * executed as the main part of a Thread, among other places.  When you want\n@@ -52,14 +46,17 @@\n  *\n  * @author Paul Fisher\n  * @author Tom Tromey <tromey@cygnus.com>\n+ * @see Thread\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n-\n public interface Runnable\n {\n   /**\n    * This method will be called by whoever wishes to run your class\n-   * implementing Runnable.\n-   * @since JDK1.0\n+   * implementing Runnable. Note that there are no restrictions on what\n+   * you are allowed to do in the run method, except that you cannot\n+   * throw a checked exception.\n    */\n   void run();\n }"}, {"sha": "0b5b5f87842d93d1413115f2b768738a111b1692", "filename": "libjava/java/lang/RuntimePermission.java", "status": "modified", "additions": 100, "deletions": 56, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FRuntimePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FRuntimePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntimePermission.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* RuntimePermission.java\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+/* RuntimePermission.java -- permission for a secure runtime action\n+   Copyright (C) 1998, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,127 +38,171 @@\n \n package java.lang;\n \n-import java.security.*;\n+import java.security.BasicPermission;\n \n /**\n  * A <code>RuntimePermission</code> contains a permission name, but no\n  * actions list.  This means you either have the permission or you don't.\n  *\n  * Permission names have the follow the hierarchial property naming\n- * convention.  In addition, an asterisk may appear at the end of a \n+ * convention.  In addition, an asterisk may appear at the end of a\n  * name if following a period or by itself.\n  *\n  * <table border=1>\n  * <tr><th>Valid names</th><th>Invalid names</th></tr>\n  * <tr><td>\"accessClassInPackage.*\",\"*\"</td>\n  * <td>\"**\", \"*x\", \"*.a\"</td></tr>\n  * </table>\n- * <br> \n- * \n- * The following table provides a list of all the possible RuntimePermission\n- * permission names with a description of what that permission allows.\n  * <br>\n+ *\n+ * The following table provides a list of all the possible RuntimePermission\n+ * permission names with a description of what that permission allows.<br>\n  * <table border=1>\n- * <tr><th>Permission Name</th><th>Permission Allows</th></tr>\n+ * <tr><th>Permission Name</th><th>Permission Allows</th><th>Risks</th</tr>\n  * <tr>\n  *   <td><code>createClassLoader</code></td>\n- *   <td>creation of a class loader</td></tr>\n+ *   <td>creation of a class loader</td>\n+ *   <td>a class loader can load rogue classes which bypass all security\n+ *       permissions</td></tr>\n  * <tr>\n  *   <td><code>getClassLoader</code></td>\n- *   <td>retrieval of the class loader for the calling class</td></tr>\n+ *   <td>retrieval of the class loader for the calling class</td>\n+ *   <td>rogue code could load classes not otherwise available</td></tr>\n  * <tr>\n  *   <td><code>setContextClassLoader</code></td>\n- *   <td>allows the setting of the context class loader used by a \n- *       thread including system threads</td></tr>\n+ *   <td>allows the setting of the context class loader used by a thread</td>\n+ *   <td>rogue code could change the context class loader needed by system\n+ *       threads</td></tr>\n  * <tr>\n  *   <td><code>setSecurityManager</code></td>\n- *   <td>allows the application to replace the security manager with\n- *       another, possibly less restrictive one.</td></tr>\n+ *   <td>allows the application to replace the security manager</td>\n+ *   <td>the new manager may be less restrictive, so that rogue code can\n+ *       bypass existing security checks</td></tr>\n  * <tr>\n  *   <td><code>createSecurityManager</code></td>\n- *   <td>allows the application to create a new security manager</td></tr>\n+ *   <td>allows the application to create a new security manager</td>\n+ *   <td>rogue code can use the new security manager to discover information\n+ *       about the execution stack</td></tr>\n  * <tr>\n  *   <td><code>exitVM</code></td>\n- *   <td>allows the application to halt the virtual machine</td></tr>\n+ *   <td>allows the application to halt the virtual machine</td>\n+ *   <td>rogue code can mount a denial-of-service attack by killing the\n+ *       virtual machine</td></tr>\n+ * <tr>\n+ *   <td><code>shutdownHooks</code></td>\n+ *   <td>allows registration and modification of shutdown hooks</td>\n+ *   <td>rogue code can add a hook that interferes with clean\n+ *       virtual machine shutdown</td></tr>\n  * <tr>\n  *   <td><code>setFactory</code></td>\n- *   <td>allows the application to set the socket factory for socket, \n- *       server socket, stream handler, or RMI socket factory.</td></tr>\n+ *   <td>allows the application to set the socket factory for socket,\n+ *       server socket, stream handler, or RMI socket factory.</td>\n+ *   <td>rogue code can create a rogue network object which mangles or\n+ *       intercepts data</td></tr>\n  * <tr>\n  *   <td><code>setIO</code></td>\n- *   <td>allows the application to set System.out, System.in, and \n- *       System.err</td></tr>\n+ *   <td>allows the application to set System.out, System.in, and\n+ *       System.err</td>\n+ *   <td>rogue code could sniff user input and intercept or mangle\n+ *       output</td></tr>\n  * <tr>\n  *   <td><code>modifyThread</code></td>\n  *   <td>allows the application to modify any thread in the virtual machine\n  *       using any of the methods <code>stop</code>, <code>resume</code>,\n- *       <code>suspend</code>, <code>setPriority</code>, and \n- *       <code>setName</code> of classs <code>Thread</code></td></tr>\n+ *       <code>suspend</code>, <code>setPriority</code>, and\n+ *       <code>setName</code> of classs <code>Thread</code></td>\n+ *   <td>rogue code could adversely modify system or user threads</td></tr>\n  * <tr>\n  *   <td><code>stopThread</code></td>\n  *   <td>allows the application to <code>stop</code> any thread it has\n- *       access to in the system</td></tr>\n+ *       access to in the system</td>\n+ *   <td>rogue code can stop arbitrary threads</td></tr>\n  * <tr>\n  *   <td><code>modifyThreadGroup</td>\n  *   <td>allows the application to modify thread groups using any of the\n- *       methods <code>destroy</code>, <code>resume</code>, \n- *       <code>setDaemon</code>, <code>setMaxPriority</code>, \n+ *       methods <code>destroy</code>, <code>resume</code>,\n+ *       <code>setDaemon</code>, <code>setMaxPriority</code>,\n  *       <code>stop</code>, and <code>suspend</code> of the class\n- *       <code>ThreadGroup</code></td></tr>\n+ *       <code>ThreadGroup</code></td>\n+ *   <td>rogue code can mount a denial-of-service attack by changing run\n+ *       priorities</td></tr>\n  * <tr>\n  *   <td><code>getProtectionDomain</code></td>\n- *   <td></td></tr>\n+ *   <td>retrieve a class's ProtectionDomain</td>\n+ *   <td>rogue code can gain information about the security policy, to\n+ *       prepare a better attack</td></tr>\n  * <tr>\n  *   <td><code>readFileDescriptor</code></td>\n- *   <td></td></tr>\n+ *   <td>read a file descriptor</td>\n+ *   <td>rogue code can read sensitive information</td></tr>\n  * <tr>\n- *   <td><code>writeFileDescriptor</code</td>\n- *   <td></td></tr>\n+ *   <td><code>writeFileDescriptor</code></td>\n+ *   <td>write a file descriptor</td>\n+ *   <td>rogue code can write files, including viruses, and can modify the\n+ *       virtual machine binary; if not just fill up the disk</td></tr>\n  * <tr>\n- *   <td><code>loadLibrary.{library name}</code></td>\n- *   <td></td></tr>\n+ *   <td><code>loadLibrary.<code><em>library name</em></td>\n+ *   <td>dynamic linking of the named library</td>\n+ *   <td>native code can bypass many security checks of pure Java</td></tr>\n  * <tr>\n- *   <td><code>accessClassInPackage.{package name}</code></td>\n- *   <td></td></tr>\n+ *   <td><code>accessClassInPackage.</code><em>package name</em></td>\n+ *   <td>access to a package via a ClassLoader</td>\n+ *   <td>rogue code can access classes not normally available</td></tr>\n  * <tr>\n- *   <td><code>defineClassInPackage.{package name}</code></td>\n- *   <td></td></tr>\n+ *   <td><code>defineClassInPackage.</code><em>package name</em></td>\n+ *   <td>define a class inside a given package</td>\n+ *   <td>rogue code can install rogue classes, including in trusted packages\n+ *       like java.security or java.lang</td></tr>\n  * <tr>\n  *   <td><code>accessDeclaredMembers</code></td>\n- *   <td></td></tr>\n+ *   <td>access declared class members via reflection</td>\n+ *   <td>rogue code can discover information, invoke methods, or modify fields\n+ *       that are not otherwise available</td></tr>\n  * <tr>\n  *   <td><code>queuePrintJob</code></td>\n- *   <td></td></tr>\n+ *   <td>initiate a print job</td>\n+ *   <td>rogue code could make a hard copy of sensitive information, or\n+ *       simply waste paper</td></tr>\n  * </table>\n- * \n- * @since JDK 1.2\n- * \n+ *\n  * @author Brian Jones\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see BasicPermission\n+ * @see Permission\n+ * @see SecurityManager\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n-public final class RuntimePermission extends java.security.BasicPermission\n+public final class RuntimePermission extends BasicPermission\n {\n   /**\n-   * \n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 7399184964622342223L;\n+\n+  /**\n+   * Create a new permission with the specified name.\n+   *\n    * @param permissionName the name of the granted permission\n-   * \n-   * @throws IllegalArgumentException thrown if the name contains an invalid \n-   * wildcard character\n+   * @throws NullPointerException if name is null\n+   * @throws IllegalArgumentException thrown if name is empty or invalid\n    */\n   public RuntimePermission(String permissionName)\n     {\n-      this(permissionName, null);\n+      super(permissionName);\n     }\n \n   /**\n+   * Create a new permission with the specified name. The actions argument\n+   * is ignored, as runtime permissions have no actions.\n    *\n    * @param permissionName the name of the granted permission\n-   * @param actions this should always be null\n-   * \n-   * @throws IllegalArgumentException throw if the name contains an invalid\n-   * wildcard character\n+   * @param actions ignored\n+   * @throws NullPointerException if name is null\n+   * @throws IllegalArgumentException thrown if name is empty or invalid\n    */\n   public RuntimePermission(String permissionName, String actions)\n-    {\n-      super(permissionName, actions);\n-    }\n+  {\n+    super(permissionName);\n+  }\n }"}, {"sha": "5fbdb4ae22212e0ecebc66d83218fcb551af7bce", "filename": "libjava/java/lang/SecurityException.java", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,13 @@\n-/* SecurityException.java -- exception thrown to indicate a security \n-   violation.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* SecurityException.java -- thrown to indicate a security violation\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +38,37 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n  * The security manager will throw this exception to indicate a security\n- * violation.\n+ * violation.  This can occur any time an operation is attempted which is\n+ * deemed unsafe by the current security policies.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @see SecurityManager\n+ * @status updated to 1.4\n  */\n public class SecurityException extends RuntimeException\n {\n-  static final long serialVersionUID = 6878364983674394167L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 6878364983674394167L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public SecurityException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public SecurityException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "54e36a5f65cc7d09acc8a78485958767dc894e5f", "filename": "libjava/java/lang/Short.java", "status": "modified", "additions": 178, "deletions": 143, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FShort.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FShort.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FShort.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.Short\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+/* Short.java -- object wrapper for short\n+   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -47,35 +47,44 @@\n  *\n  * @author Paul Fisher\n  * @author John Keiser\n- * @since JDK 1.0\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n public final class Short extends Number implements Comparable\n {\n-  static final long serialVersionUID = 7515723908773894738L;\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 7515723908773894738L;\n \n   /**\n-   * The minimum value a <code>short</code> can represent is -32768.\n+   * The minimum value a <code>short</code> can represent is -32768 (or\n+   * -2<sup>15</sup).\n    */\n   public static final short MIN_VALUE = -32768;\n \n   /**\n-   * The minimum value a <code>short</code> can represent is 32767.\n+   * The minimum value a <code>short</code> can represent is 32767 (or\n+   * 2<sup>15</sup).\n    */\n-  public static final short MAX_VALUE =  32767;\n+  public static final short MAX_VALUE = 32767;\n \n   /**\n-   * The primitive type <code>short</code> is represented by this \n+   * The primitive type <code>short</code> is represented by this\n    * <code>Class</code> object.\n    */\n   public static final Class TYPE = VMClassLoader.getPrimitiveClass('S');\n \n   /**\n    * The immutable value of this Short.\n+   *\n+   * @serial the wrapped short\n    */\n   private final short value;\n \n   /**\n-   * Create a <code>Short</code> object representing the value of the \n+   * Create a <code>Short</code> object representing the value of the\n    * <code>short</code> argument.\n    *\n    * @param value the value to use\n@@ -86,229 +95,255 @@ public Short(short value)\n   }\n \n   /**\n-   * Create a <code>Short</code> object representing the value of the \n+   * Create a <code>Short</code> object representing the value of the\n    * argument after conversion to a <code>short</code>.\n    *\n-   * @param s the string to convert.\n+   * @param s the string to convert\n+   * @throws NumberFormatException if the String cannot be parsed\n    */\n-  public Short(String s) throws NumberFormatException\n+  public Short(String s)\n   {\n     value = parseShort(s, 10);\n   }\n \n   /**\n-   * Return a hashcode representing this Object.\n-   *\n-   * <code>Short</code>'s hash code is calculated by simply returning its\n-   * value.\n+   * Converts the <code>short</code> to a <code>String</code> and assumes\n+   * a radix of 10.\n    *\n-   * @return this Object's hash code.\n+   * @param s the <code>short</code> to convert to <code>String</code>\n+   * @return the <code>String</code> representation of the argument\n    */\n-  public int hashCode()\n+  public static String toString(short s)\n   {\n-    return value;\n+    return String.valueOf(s);\n   }\n \n   /**\n-   * If the <code>Object</code> is not <code>null</code>, is an\n-   * <code>instanceof</code> <code>Short</code>, and represents\n-   * the same primitive <code>short</code> value return \n-   * <code>true</code>.  Otherwise <code>false</code> is returned.\n+   * Converts the specified <code>String</code> into a <code>short</code>.\n+   * This function assumes a radix of 10.\n+   *\n+   * @param s the <code>String</code> to convert\n+   * @return the <code>short</code> value of <code>s</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>short</code>\n    */\n-  public boolean equals(Object obj)\n-  {\n-    return obj instanceof Short && ((Short)obj).value == value;\n-  }\n-\n-  /**\n-   * Converts the <code>short</code> to a <code>String</code> and assumes\n-   * a radix of 10.\n-   * @param i the <code>short</code> to convert to <code>String</code>\n-   * @return the <code>String</code> representation of the argument.\n-   */    \n-  public static String toString(short i)\n+  public static short parseShort(String s)\n   {\n-    return Integer.toString((int) i);\n-  }\n-\n-  /**\n-   * Converts the <code>Short</code> value to a <code>String</code> and\n-   * assumes a radix of 10.\n-   * @return the <code>String</code> representation of this <code>Short</code>.\n-   */    \n-  public String toString()\n-  {\n-    return Integer.toString ((int) value);\n+    return parseShort(s, 10);\n   }\n \n   /**\n-   * Creates a new <code>Short</code> object using the <code>String</code>,\n-   * assuming a radix of 10.\n-   * @param s the <code>String</code> to convert.\n-   * @return the new <code>Short</code>.\n-   * @see #Short(java.lang.String)\n-   * @see #parseShort(java.lang.String)\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>short</code>.\n+   * Converts the specified <code>String</code> into a <code>short</code>\n+   * using the specified radix (base). The string must not be <code>null</code>\n+   * or empty. It may begin with an optional '-', which will negate the answer,\n+   * provided that there are also valid digits. Each digit is parsed as if by\n+   * <code>Character.digit(d, radix)</code>, and must be in the range\n+   * <code>0</code> to <code>radix - 1</code>. Finally, the result must be\n+   * within <code>MIN_VALUE</code> to <code>MAX_VALUE</code>, inclusive.\n+   * Unlike Double.parseDouble, you may not have a leading '+'.\n+   *\n+   * @param s the <code>String</code> to convert\n+   * @param radix the radix (base) to use in the conversion\n+   * @return the <code>String</code> argument converted to </code>short</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>short</code>\n    */\n-  public static Short valueOf(String s) throws NumberFormatException\n+  public static short parseShort(String s, int radix)\n   {\n-    return new Short(parseShort(s));\n+    int i = Integer.parseInt(s, radix, false);\n+    if ((short) i != i)\n+      throw new NumberFormatException();\n+    return (short) i;\n   }\n \n   /**\n    * Creates a new <code>Short</code> object using the <code>String</code>\n    * and specified radix (base).\n-   * @param s the <code>String</code> to convert.\n-   * @param radix the radix (base) to convert with.\n-   * @return the new <code>Short</code>.\n-   * @see #parseShort(java.lang.String,int)\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>short</code>.\n-   */\n-  public static Short valueOf(String s, int radix)\n-    throws NumberFormatException\n-  {\n-    return new Short(parseShort(s, radix));\n-  }\n-\n-  /**\n-   * Converts the specified <code>String</code> into a <code>short</code>.\n-   * This function assumes a radix of 10.\n    *\n    * @param s the <code>String</code> to convert\n-   * @return the <code>short</code> value of the <code>String</code>\n-   *         argument.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>short</code>.\n+   * @param radix the radix (base) to convert with\n+   * @return the new <code>Short</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>short</code>\n+   * @see #parseShort(String, int)\n    */\n-  public static short parseShort(String s) throws NumberFormatException\n+  public static Short valueOf(String s, int radix)\n   {\n-    return parseShort(s, 10);\n+    return new Short(parseShort(s, radix));\n   }\n \n   /**\n-   * Converts the specified <code>String</code> into a <code>short</code>\n-   * using the specified radix (base).\n+   * Creates a new <code>Short</code> object using the <code>String</code>,\n+   * assuming a radix of 10.\n    *\n    * @param s the <code>String</code> to convert\n-   * @param radix the radix (base) to use in the conversion\n-   * @return the <code>String</code> argument converted to </code>short</code>.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>short</code>.\n+   * @return the new <code>Short</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>short</code>\n+   * @see #Short(String)\n+   * @see #parseShort(String)\n    */\n-  public static short parseShort(String s, int radix) \n-    throws NumberFormatException\n+  public static Short valueOf(String s)\n   {\n-    int i = Integer.parseInt(s, radix);\n-    if (i < MIN_VALUE || i > MAX_VALUE)\n-      throw new NumberFormatException();\n-    return (short) i;\n+    return new Short(parseShort(s, 10));\n   }\n \n   /**\n    * Convert the specified <code>String</code> into a <code>Short</code>.\n-   * The <code>String</code> may represent decimal, hexadecimal, or \n+   * The <code>String</code> may represent decimal, hexadecimal, or\n    * octal numbers.\n    *\n-   * The <code>String</code> argument is interpreted based on the leading\n-   * characters.  Depending on what the String begins with, the base will be\n-   * interpreted differently:\n-   *\n-   * <table>\n-   * <tr><th>Leading<br>Characters</th><th>Base</th></tr>\n-   * <tr><td>#</td><td>16</td></tr>\n-   * <tr><td>0x</td><td>16</td></tr>\n-   * <tr><td>0X</td><td>16</td></tr>\n-   * <tr><td>0</td><td>8</td></tr>\n-   * <tr><td>Anything<br>Else</td><td>10</td></tr>\n-   * </table>\n+   * <p>The extended BNF grammar is as follows:<br>\n+   * <pre>\n+   * <em>DecodableString</em>:\n+   *      ( [ <code>-</code> ] <em>DecimalNumber</em> )\n+   *    | ( [ <code>-</code> ] ( <code>0x</code> | <code>0X</code>\n+   *              | <code>#</code> ) <em>HexDigit</em> { <em>HexDigit</em> } )\n+   *    | ( [ <code>-</code> ] <code>0</code> { <em>OctalDigit</em> } )\n+   * <em>DecimalNumber</em>:\n+   *        <em>DecimalDigit except '0'</em> { <em>DecimalDigit</em> }\n+   * <em>DecimalDigit</em>:\n+   *        <em>Character.digit(d, 10) has value 0 to 9</em>\n+   * <em>OctalDigit</em>:\n+   *        <em>Character.digit(d, 8) has value 0 to 7</em>\n+   * <em>DecimalDigit</em>:\n+   *        <em>Character.digit(d, 16) has value 0 to 15</em>\n+   * </pre>\n+   * Finally, the value must be in the range <code>MIN_VALUE</code> to\n+   * <code>MAX_VALUE</code>, or an exception is thrown.\n    *\n-   * @param s the <code>String</code> to interpret.\n-   * @return the value of the String as a <code>Short</code>.\n-   * @exception NumberFormatException thrown if the <code>String</code> \n-   * cannot be parsed as a <code>short</code>.    \n+   * @param s the <code>String</code> to interpret\n+   * @return the value of the String as a <code>Short</code>\n+   * @throws NumberFormatException if <code>s</code> cannot be parsed as a\n+   *         <code>short</code>\n+   * @throws NullPointerException if <code>s</code> is null\n+   * @see Integer#decode(String)\n    */\n-  public static Short decode(String s) throws NumberFormatException\n+  public static Short decode(String s)\n   {\n-    int i = (Integer.decode(s)).intValue();\n-    if (i < MIN_VALUE || i > MAX_VALUE)\n+    int i = Integer.parseInt(s, 10, true);\n+    if ((short) i != i)\n       throw new NumberFormatException();\n     return new Short((short) i);\n   }\n \n-  /** Return the value of this <code>Short</code> as an <code>short</code>.\n-   ** @return the value of this <code>Short</code> as an <code>short</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code> as a <code>byte</code>.\n+   *\n+   * @return the byte value\n+   */\n   public byte byteValue()\n   {\n     return (byte) value;\n   }\n \n-  /** Return the value of this <code>Short</code> as an <code>short</code>.\n-   ** @return the value of this <code>Short</code> as an <code>short</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code>.\n+   *\n+   * @return the short value\n+   */\n   public short shortValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Short</code> as an <code>int</code>.\n-   ** @return the value of this <code>Short</code> as an <code>int</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code> as an <code>int</code>.\n+   *\n+   * @return the int value\n+   */\n   public int intValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Short</code> as a <code>long</code>.\n-   ** @return the value of this <code>Short</code> as a <code>long</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code> as a <code>long</code>.\n+   *\n+   * @return the long value\n+   */\n   public long longValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Short</code> as a <code>float</code>.\n-   ** @return the value of this <code>Short</code> as a <code>float</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code> as a <code>float</code>.\n+   *\n+   * @return the float value\n+   */\n   public float floatValue()\n   {\n     return value;\n   }\n \n-  /** Return the value of this <code>Short</code> as a <code>double</code>.\n-   ** @return the value of this <code>Short</code> as a <code>double</code>.\n-   **/\n+  /**\n+   * Return the value of this <code>Short</code> as a <code>double</code>.\n+   *\n+   * @return the double value\n+   */\n   public double doubleValue()\n   {\n     return value;\n   }\n \n   /**\n-   * Compare two Shorts numerically by comparing their\n-   * <code>short</code> values.\n-   * @return a positive value if this <code>Short</code> is greater\n-   * in value than the argument <code>Short</code>; a negative value\n-   * if this <code>Short</code> is smaller in value than the argument\n-   * <code>Short</code>; and <code>0</code>, zero, if this\n-   * <code>Short</code> is equal in value to the argument\n-   * <code>Short</code>.  \n+   * Converts the <code>Short</code> value to a <code>String</code> and\n+   * assumes a radix of 10.\n+   *\n+   * @return the <code>String</code> representation of this <code>Short</code>\n+   */\n+  public String toString()\n+  {\n+    return String.valueOf(value);\n+  }\n+\n+  /**\n+   * Return a hashcode representing this Object. <code>Short</code>'s hash\n+   * code is simply its value.\n+   *\n+   * @return this Object's hash code\n+   */\n+  public int hashCode()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns <code>true</code> if <code>obj</code> is an instance of\n+   * <code>Short</code> and represents the same short value.\n+   *\n+   * @param obj the object to compare\n+   * @return whether these Objects are semantically equal\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    return obj instanceof Short && value == ((Short) obj).value;\n+  }\n+\n+  /**\n+   * Compare two Shorts numerically by comparing their <code>short</code>\n+   * values. The result is positive if the first is greater, negative if the\n+   * second is greater, and 0 if the two are equal.\n    *\n+   * @param s the Short to compare\n+   * @return the comparison\n    * @since 1.2\n    */\n   public int compareTo(Short s)\n   {\n     return value - s.value;\n   }\n-    \n+\n   /**\n-   * Behaves like <code>compareTo(java.lang.Short)</code> unless the Object\n-   * is not a <code>Short</code>.  Then it throws a \n-   * <code>ClassCastException</code>.\n-   * @exception ClassCastException if the argument is not a\n-   * <code>Short</code>.\n+   * Behaves like <code>compareTo(Short)</code> unless the Object\n+   * is not a <code>Short</code>.\n    *\n+   * @param o the object to compare\n+   * @return the comparison\n+   * @throws ClassCastException if the argument is not a <code>Short</code>\n+   * @see #compareTo(Short)\n+   * @see Comparable\n    * @since 1.2\n    */\n   public int compareTo(Object o)"}, {"sha": "8e8ed8d92b076edc712c95232c043abd9857bb02", "filename": "libjava/java/lang/StackOverflowError.java", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FStackOverflowError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FStackOverflowError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStackOverflowError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* StackOverflowError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* StackOverflowError.java -- thrown when the stack depth is exceeded\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,39 +38,35 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * A <code>StackOverflowError</code> is thrown when a stack overflow occurs.\n- * This can occur because an application recurses too deeply.\n+ * A <code>StackOverflowError</code> is thrown when the execution stack\n+ * overflow occurs. This often occurs when a method enters infinit recursion.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class StackOverflowError extends VirtualMachineError\n {\n-  static final long serialVersionUID = 8609175038441759607L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 8609175038441759607L;\n \n   /**\n    * Create an error without a message.\n    */\n   public StackOverflowError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public StackOverflowError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "9a935ee8c44ae22489e7c526eec8610f87b57cdc", "filename": "libjava/java/lang/StringIndexOutOfBoundsException.java", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* StringIndexOutOfBoundsException.java -- exception thrown to indicate \n-   an attempt to access an index which is out of bounds.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* StringIndexOutOfBoundsException.java -- thrown to indicate attempt to\n+   exceed string bounds\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,52 +39,47 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Exceptions may be thrown by one part of a Java program and caught\n- * by another in order to deal with exceptional conditions.  \n- * This exception can be thrown to indicate an attempt to access an\n- * index which is out of bounds.\n- * Any negative integer less than or equal to -1 and positive \n- * integer greater than or equal to the size of the string is an index\n+ * This exception can be thrown to indicate an attempt to access an index\n+ * which is out of bounds of a String. Any negative integer, and a positive\n+ * integer greater than or equal to the size of the string, is an index\n  * which would be out of bounds.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @status updated to 1.4\n  */\n public class StringIndexOutOfBoundsException extends IndexOutOfBoundsException\n {\n-  static final long serialVersionUID = -6762910422159637258L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -6762910422159637258L;\n \n   /**\n    * Create an exception without a message.\n    */\n   public StringIndexOutOfBoundsException()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n   public StringIndexOutOfBoundsException(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n \n   /**\n    * Create an exception noting the illegal index.\n+   *\n+   * @param index the invalid index\n    */\n   public StringIndexOutOfBoundsException(int index)\n-    {\n-      super(\"String index out of range: \" + index);\n-    }\n+  {\n+    super(\"String index out of range: \" + index);\n+  }\n }"}, {"sha": "3ba4cf899ec32368c27885922d59284dcc44d4cd", "filename": "libjava/java/lang/ThreadDeath.java", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FThreadDeath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FThreadDeath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadDeath.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.ThreadDeath - Special exception registering Thread death.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* ThreadDeath.java - special exception registering Thread death\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,23 +38,31 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Complete to version 1.1\n+/**\n+ * ThreadDeath is thrown in a thread when someone calls <code>stop()</code>\n+ * on that thread. <b>Important:</b> Make sure you rethrow this exception\n+ * if you catch it.  If you don't, the thread will not die.\n+ *\n+ * <p>This is an Error rather than an exception, so that normal code will\n+ * not catch it. It is intended for asynchronous cleanup when using the\n+ * deprecated Thread.stop() method.\n+ *\n+ * @author John Keiser\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @see Thread#stop()\n+ * @status updated to 1.4\n  */\n+public class ThreadDeath extends Error\n+{\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4417128565033088268L;\n \n-/**\n- ** ThreadDeath is thrown in a thread when someone calls <CODE>stop()</CODE> on that thread.\n- **\n- ** <B>Important:</B> Make sure you rethrow this exception if you catch it.  If you don't, the thread will not die.\n- **\n- ** @author John Keiser\n- ** @author Tom Tromey <tromey@cygnus.com>\n- ** @version 1.1.0, 5 Feb 1998, August 26 1998\n- ** @since JDK1.0\n- ** @see java.lang.Thread#stop()\n- **/\n-\n-public class ThreadDeath extends Error {\n+  /**\n+   * Create an error without a message.\n+   */\n+  public ThreadDeath()\n+  {\n+  }\n }"}, {"sha": "b5877f51b6ac1614076fe156be9199cd422251d1", "filename": "libjava/java/lang/ThreadLocal.java", "status": "modified", "additions": 100, "deletions": 114, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FThreadLocal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FThreadLocal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadLocal.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* java.lang.ThreadLocal\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+/* ThreadLocal -- a variable with a unique value per thread\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -46,131 +46,117 @@\n  * (through the <code>get()</code> and <code>set()</code> methods)\n  * only affects the state of the object as seen by the currently\n  * executing Thread.\n- * <p>\n- * The first time a ThreadLocal object is accessed on a particular\n- * Thread (and no state is associated with that Thread yet)\n- * the state for that Thread is set by executing the method\n- * <code>initialValue()</code>.\n- * <p>\n- * An example how you can use this:\n+ *\n+ * <p>The first time a ThreadLocal object is accessed on a particular\n+ * Thread, the state for that Thread's copy of the local variable is set by\n+ * executing the method <code>initialValue()</code>.\n+ *\n+ * <p>An example how you can use this:\n  * <pre>\n- * class Connection {\n- *     private static ThreadLocal owner = new ThreadLocal() {\n- *        public Object initialValue() {\n- *            return(\"nobody\");\n- *        }\n+ * class Connection\n+ * {\n+ *   private static ThreadLocal owner = new ThreadLocal()\n+ *     {\n+ *       public Object initialValue()\n+ *       {\n+ *         return(\"nobody\");\n+ *       }\n  *     };\n  * ...\n  * }\n- * </pre>\n+ * </pre></br>\n+ *\n  * Now all instances of connection can see who the owner of the currently\n  * executing Thread is by calling <code>owner.get()</code>. By default any\n  * Thread would be associated with 'nobody'. But the Connection object could\n  * offer a method that changes the owner associated with the Thread on\n  * which the method was called by calling <code>owner.put(\"somebody\")</code>.\n  * (Such an owner changing method should then be guarded by security checks.)\n- * <p>\n- * When a Thread is garbage collected all references to values of\n+ *\n+ * <p>When a Thread is garbage collected all references to values of\n  * the ThreadLocal objects associated with that Thread are removed.\n  *\n+ * @author Mark Wielaard <mark@klomp.org>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @since 1.2\n- * @author Mark Wielaard (mark@klomp.org)\n+ * @status updated to 1.4\n  */\n-public class ThreadLocal {\n-\t\n-\t/**\n-\t * Trivial container to wrap the stored values.\n-\t * Needed to see if the value is null or not yet set.\n-\t * If it is not yet set we must call intialValue() once.\n-\t * Package local so InheritableThreadLocal can see it.\n-\t */\n-\tfinal static class Value {\n-\t\tfinal Object value;\n-\t\t\n-\t\tValue(Object value) {\n-\t\t\tthis.value = value;\n-\t\t}\n-\t\t\n-\t\tObject getValue() {\n-\t\t\treturn value;\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Maps Threads to Values. Uses a WeakHashMap so if a Thread is garbage\n-\t * collected the reference to the Value will disappear. Only the\n-\t * <code>set(Thread, Value)</code> and <code>get(Thread)</code> methods\n-\t * access it. Since this can happen from multiple Threads simultaniously\n-\t * those methods are synchronized.\n-\t */\n-\tprivate final Map valueMap = new WeakHashMap();\n-\t\n-\t/**\n-\t * Creates a ThreadLocal object without associating any value to it\n-\t * yet.\n-\t */\n-\tpublic ThreadLocal() {\n-\t}\n-\t\n-\t/**\n-\t * Gets the value associated with the ThreadLocal object for the\n-\t * currently executing Thread. If there is no value is associated\n-\t * with this Thread yet then the valued returned by the\n-\t * <code>initialValue()</code> method is assosiated with this Thread\n-\t * and returned.\n-\t */\n-\tpublic Object get() {\n-\t\tThread currentThread = Thread.currentThread();\n-\t\tValue v = get(currentThread);\n-\t\tif (v == null) {\n-\t\t\tv = new Value(initialValue());\n-\t\t\tset(currentThread, v);\n-\t\t}\n-\t\treturn v.getValue();\n-\t}\n-\t\n-\t/**\n-\t * Gets the Value of this ThreadLocal for a particular Thread.\n-\t * It is synchronized so the <code>set(Thread, Value)</code> method cannot\n-\t * simultaniously modify the </code>valueMap</code> from another thread.\n-\t * Package local so InheritableThreadLocal can access it when a new child\n-\t * Thread inherits values from its parent Thread.\n-\t */\n-\tsynchronized final Value get(Thread thread) {\n-\t\treturn (Value)valueMap.get(thread);\n-\t}\n-\t\n-\t/**\n-\t * Sets the value associated with the ThreadLocal object for the\n-\t * currently executing Thread. This overrides any existing value\n-\t * associated with the current Thread and does not call the\n-\t * <code>initialValue()</code> method, even if this is the first\n-\t * time this Thread accesses this ThreadLocal.\n-\t */\n-\tpublic void set(Object value) {\n-\t\tThread currentThread = Thread.currentThread();\n-\t\tValue v = new Value(value);\n-\t\tset(currentThread, v);\n-\t}\n+public class ThreadLocal\n+{\n+  /**\n+   * Placeholder to distinguish between uninitialized and null set by the\n+   * user. Do not expose this to the public. Package visible for use by\n+   * InheritableThreadLocal\n+   */\n+  static final Object NULL = new Object();\n+\n+  /**\n+   * The stored value. Package visible for use by InheritableThreadLocal. */\n+  Object value;\n \t\n-\t/**\n-\t * Sets the Value for this ThreadLocal for a particular Thread.\n-\t * It is synchronized so the <code>get(Thread)</code> method cannot\n-\t * simultaniously read the </code>valueMap</code> from another thread.\n-\t * Package local so InheritableThreadLocal can access it when a new child\n-\t * Thread inherits values from its parent Thread.\n-\t */\n-\tsynchronized final void set(Thread thread, Value value) {\n-\t\tvalueMap.put(thread, value);\n-\t}\n+  /**\n+   * Maps Threads to values. Uses a WeakHashMap so if a Thread is garbage\n+   * collected the reference to the Value will disappear. A null value means\n+   * uninitialized, while NULL means a user-specified null. Only the\n+   * <code>set(Thread, Object)</code> and <code>get(Thread)</code> methods\n+   * access it. Package visible for use by InheritableThreadLocal.\n+   */\n+  final Map valueMap = new WeakHashMap();\n \t\n-\t/**\n-\t * Called when <code>get()</code> is called and no state is associated\n-\t * with the currently executing Thread yet.\n-\t * <p>\n-\t * The default implementation returns <code>null</code>.\n-\t */\n-\tprotected Object initialValue() {\n-\t\treturn null;\n-\t}\n+  /**\n+   * Creates a ThreadLocal object without associating any value to it yet.\n+   */\n+  public ThreadLocal()\n+  {\n+  }\n+\n+  /**\n+   * Called once per thread on the first invocation of get(), if set() was\n+   * not already called. The default implementation returns <code>null</code>.\n+   * Often, this method is overridden to create the appropriate initial object\n+   * for the current thread's view of the ThreadLocal.\n+   *\n+   * @return the initial value of the variable in this thread\n+   */\n+  protected Object initialValue()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Gets the value associated with the ThreadLocal object for the currently\n+   * executing Thread. If this is the first time the current thread has called\n+   * get(), and it has not already called set(), the value is obtained by\n+   * <code>initialValue()</code>.\n+   *\n+   * @return the value of the variable in this thread\n+   */\n+  public Object get()\n+  {\n+    Thread currentThread = Thread.currentThread();\n+    // Note that we don't have to synchronize, as only this thread will\n+    // ever modify the returned value.\n+    Object value = valueMap.get(currentThread);\n+    if (value == null)\n+      {\n+        value = initialValue();\n+        valueMap.put(currentThread, value == null ? NULL : value);\n+      }\n+    return value == NULL ? null : value;\n+  }\n+\n+  /**\n+   * Sets the value associated with the ThreadLocal object for the currently\n+   * executing Thread. This overrides any existing value associated with the\n+   * current Thread and prevents <code>initialValue()</code> from being\n+   * called if this is the first access to this ThreadLocal in this Thread.\n+   *\n+   * @param value the value to set this thread's view of the variable to\n+   */\n+  public void set(Object value)\n+  {\n+    // Note that we don't have to synchronize, as only this thread will\n+    // ever modify the returned value.\n+    valueMap.put(Thread.currentThread(), value == null ? NULL : value);\n+  }\n }"}, {"sha": "c200689c979295016f9870c7465514c509a499b5", "filename": "libjava/java/lang/UnknownError.java", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnknownError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnknownError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnknownError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,14 @@\n-/* UnknownError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* UnknownError.java -- thrown when the VM cannot provide more information\n+   about a catastrophic error\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,37 +39,34 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n- * An <code>UnknownError</code> is thrown when a serious but unknown \n+ * An <code>UnknownError</code> is thrown when a serious but unknown\n  * problem has occurred in the Java Virtual Machine.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n+ * @status updated to 1.4\n  */\n public class UnknownError extends VirtualMachineError\n {\n-  static final long serialVersionUID = 2524784860676771849L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 2524784860676771849L;\n \n   /**\n    * Create an error without a message.\n    */\n   public UnknownError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public UnknownError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "95c0b5333a40f2c2b18ee0189c6b7b4527fba9ef", "filename": "libjava/java/lang/UnsatisfiedLinkError.java", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* UnsatisfiedLinkError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* UnsatisfiedLinkError.java -- thrown when a native method cannot be loaded\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,37 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct. \n- */\n-\n /**\n  * A <code>UnsatisfiedLinkError</code> is thrown if an appropriate\n  * native language definition of a method declared <code>native</code>\n  * cannot be found by the Java Virtual Machine.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @see Runtime\n+ * @status updated to 1.4\n  */\n public class UnsatisfiedLinkError extends LinkageError\n {\n-  static final long serialVersionUID = -4019343241616879428L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4019343241616879428L;\n \n   /**\n    * Create an error without a message.\n    */\n   public UnsatisfiedLinkError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public UnsatisfiedLinkError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "7250949c9f6ed59f321f96052379dd10902eada7", "filename": "libjava/java/lang/UnsupportedClassVersionError.java", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,14 @@\n-/* UnsupportedClassVersionError.java \n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* UnsupportedClassVersionError.java -- thrown when a class file version\n+   exceeds the capability of the virtual machine\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -43,27 +44,31 @@\n  * Java Virtual Machine determines it does not support the major and minor\n  * version numbers in the class file it is attempting to read.\n  *\n- * @since JDK 1.2\n- * \n  * @author Brian Jones\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public class UnsupportedClassVersionError extends ClassFormatError\n {\n-  static final long serialVersionUID = -7123279212883497373L;\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -7123279212883497373L;\n \n   /**\n    * Create an error without a message.\n    */\n   public UnsupportedClassVersionError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public UnsupportedClassVersionError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "6c00bef4342db7a3ab580ddd5da83d59f2f683a3", "filename": "libjava/java/lang/UnsupportedOperationException.java", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,14 +1,14 @@\n-/* UnsupportedOperationException.java -- Exception thrown when an\n-   unsupported operation is attempted on an object\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* UnsupportedOperationException.java -- thrown when an operation is not\n+   supported\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,37 +39,34 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n-/** \n+/**\n  * This exception is thrown by an object when an operation is\n  * requested of it that it does not support.\n  *\n- * @since JDK 1.2\n- *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n public class UnsupportedOperationException extends RuntimeException\n {\n-  static final long serialVersionUID = -1242599979055084673L;\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -1242599979055084673L;\n \n   /**\n    * Create an exception without a message.\n    */\n-  public UnsupportedOperationException() \n+  public UnsupportedOperationException()\n   {\n-    super();\n   }\n \n   /**\n    * Create an exception with a message.\n+   *\n+   * @param s the message\n    */\n-  public UnsupportedOperationException( String s )\n+  public UnsupportedOperationException(String s)\n   {\n     super(s);\n   }"}, {"sha": "3926530f9f36710818a22eea9e3b9c2326defddc", "filename": "libjava/java/lang/VerifyError.java", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FVerifyError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FVerifyError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVerifyError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* VerifyError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* VerifyError.java -- thrown when a class fails verification\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,39 +38,35 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n  * A <code>VerifyError</code> is thrown if there is a security problem or\n- * internal inconsistency in a class file as deteced by the \"verifier.\"\n+ * internal inconsistency in a class file as detected by the \"verifier.\"\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public class VerifyError extends LinkageError\n {\n-  static final long serialVersionUID = 7001962396098498785L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 7001962396098498785L;\n \n   /**\n    * Create an error without a message.\n    */\n   public VerifyError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public VerifyError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "b6f0758e86281d067daf300be4c70ae05dc5d8cf", "filename": "libjava/java/lang/VirtualMachineError.java", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FVirtualMachineError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2FVirtualMachineError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVirtualMachineError.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* VirtualMachineError.java \n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* VirtualMachineError.java -- thrown when the Virtual Machine has a problem\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,40 +38,36 @@\n \n package java.lang;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * A <code>VirtualMachineError</code> or its subclasses are thrown to \n+ * A <code>VirtualMachineError</code> or its subclasses are thrown to\n  * indicate there is something wrong with the Java Virtual Machine or that\n  * it does not have the resources needed for it to continue execution.\n  *\n- * @since JDK 1.0\n- * \n  * @author Brian Jones\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n+ * @status updated to 1.4\n  */\n public abstract class VirtualMachineError extends Error\n {\n-  static final long serialVersionUID = 4161983926571568670L;\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 4161983926571568670L;\n \n   /**\n    * Create an error without a message.\n    */\n   public VirtualMachineError()\n-    {\n-      super();\n-    }\n+  {\n+  }\n \n   /**\n    * Create an error with a message.\n+   *\n+   * @param s the message\n    */\n   public VirtualMachineError(String s)\n-    {\n-      super(s);\n-    }\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "904cc6313248fcdccab99afdf6558bd7517e947b", "filename": "libjava/java/lang/reflect/InvocationTargetException.java", "status": "modified", "additions": 63, "deletions": 79, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* InvocationTargetException.java - Wrapper exception for reflection\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* InvocationTargetException.java -- Wrapper exception for reflection\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,102 +38,86 @@\n \n package java.lang.reflect;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * InvocationTargetException is sort of a way to \"wrap\" whatever exception \n- * comes up when a method or constructor is called via Reflection.\n+ * InvocationTargetException is sort of a way to \"wrap\" whatever exception\n+ * comes up when a method or constructor is called via Reflection. As of\n+ * JDK 1.4, it was retrofitted to match the exception chaining of all other\n+ * exceptions, but <code>getTargetException()</code> still works.\n  *\n  * @author John Keiser\n- * @version 1.1.0, 31 May 1998\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date December 12, 1998\n- *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @see Method#invoke(Object,Object[])\n  * @see Constructor#newInstance(Object[])\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-public class InvocationTargetException extends Exception \n+public class InvocationTargetException extends Exception\n {\n-  static final long serialVersionUID = 4085088731926701167L;\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 4085088731926701167L;\n+\n+  /**\n+   * The chained exception. This field is only around for serial compatibility.\n+   *\n+   * @serial the chained exception\n+   */\n+  private final Throwable target;\n \n-  private Throwable target = null;\n-  \n-  protected InvocationTargetException() \n-    {\n-      super();\n-    }\n-  \n   /**\n-   * Create an <code>InvocationTargetException</code> using another \n+   * Construct an exception with null as the cause. The cause is initialized\n+   * to null.\n+   */\n+  protected InvocationTargetException()\n+  {\n+    this(null, null);\n+  }\n+\n+  /**\n+   * Create an <code>InvocationTargetException</code> using another\n    * exception.\n+   *\n    * @param targetException the exception to wrap\n    */\n-  public InvocationTargetException(Throwable targetException) \n-    {\n-      super(targetException.toString());\n-      target = targetException;\n-    }\n-  \n-  /** \n-   * Create an <code>InvocationTargetException</code> using another \n+  public InvocationTargetException(Throwable targetException)\n+  {\n+    this(targetException, null);\n+  }\n+\n+  /**\n+   * Create an <code>InvocationTargetException</code> using another\n    * exception and an error message.\n    *\n    * @param targetException the exception to wrap\n    * @param err an extra reason for the exception-throwing\n    */\n-  public InvocationTargetException(Throwable targetException, String err) \n-    {\n-      super(err);\n-      target = targetException;\n-    }\n-  \n+  public InvocationTargetException(Throwable targetException, String err)\n+  {\n+    super(err, targetException);\n+    target = targetException;\n+  }\n+\n   /**\n    * Get the wrapped (targeted) exception.\n-   * \n-   * @return the targeted exception.\n+   *\n+   * @return the targeted exception\n+   * @see #getCause()\n    */\n-  public Throwable getTargetException() \n-    {\n-      return target;\n-    }\n-\n-  public void printStackTrace()\n-    {\n-      if (target == null)\n-\tsuper.printStackTrace();\n-      else\n-      {\n-\tSystem.err.print(this.getClass() + \": \");\n-\ttarget.printStackTrace();\n-      }\n-    }\n-\n-  public void printStackTrace(PrintStream ps)\n-    {\n-      if (target == null)\n-\tsuper.printStackTrace(ps);\n-      else\n-      {\n-\tps.print(this.getClass() + \": \");\n-\ttarget.printStackTrace(ps);\n-      }\n-    }\n+  public Throwable getTargetException()\n+  {\n+    return target;\n+  }\n \n-  public void printStackTrace(PrintWriter pw)\n-    {\n-      if (target == null)\n-\tsuper.printStackTrace(pw);\n-      else\n-      {\n-\tpw.print(this.getClass() + \": \");\n-\ttarget.printStackTrace(pw);\n-      }\n-    }\n+  /**\n+   * Returns the cause of this exception (which may be null).\n+   *\n+   * @return the cause\n+   * @since 1.4\n+   */\n+  public Throwable getCause()\n+  {\n+    return target;\n+  }\n }"}, {"sha": "3d11c4a4b04e25ae762a1a8499a6776f49bb99d7", "filename": "libjava/java/net/BindException.java", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FBindException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FBindException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FBindException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* BindException.java -- An exception occurred while binding to a socket\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,35 @@\n package java.net;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n+ * This exception indicates that an error occurred while attempting to bind\n+ * socket to a particular port.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * This exception indicates that an error occurred while attempting to bind\n-  * socket to a particular port.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n-  */\n public class BindException extends SocketException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -5945005768251722951L;\n \n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Initializes a new instance of <code>BindException</code> without\n-  * a descriptive error message.\n-  */\n-public\n-BindException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>BindException</code> with\n-  * a descriptive error message, such as the text from strerror(3).\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-BindException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public BindException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message, such as the\n+   * text from strerror(3).\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public BindException(String message)\n+  {\n+    super(message);\n+  }\n } // class BindException\n-"}, {"sha": "e731858ca19d01dcc7ef9e37a9ab095bafffaf17", "filename": "libjava/java/net/ConnectException.java", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FConnectException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* ConnectException.java -- An exception occurred while connecting to a host\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,50 +39,37 @@\n package java.net;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n+ * This exception indicates that an error occurred while attempting to\n+ * connect to a remote host.  Often this indicates that the remote host\n+ * refused the connection (ie, is not listening on the target socket).\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * This exception indicates that an error occurred while attempting to\n-  * connect to a remote host.  Often this indicates that the remote host\n-  * refused the connection (ie, is not listening on the target socket).\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n-  */\n public class ConnectException extends SocketException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 3831404271622369215L;\n \n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Initializes a new instance of <code>ConnectException</code> without\n-  * a descriptive error message.\n-  */\n-public\n-ConnectException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>ConnectException</code> with\n-  * a descriptive error message, such as the text from strerror(3).\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-ConnectException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public ConnectException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message, such as the\n+   * text from strerror(3).\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public ConnectException(String message)\n+  {\n+    super(message);\n+  }\n } // class ConnectException\n-"}, {"sha": "9cfae9aa5e5ca50a1a18b0c9d72505388c041aa6", "filename": "libjava/java/net/MalformedURLException.java", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMalformedURLException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* MalformedURLException.java -- A URL was not in a valid format\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,50 +37,37 @@\n \n package java.net;\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n-  * This exception indicates that a URL passed to an object was not in a\n-  * valid format.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n-  */\n-public class MalformedURLException extends java.io.IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception indicates that a URL passed to an object was not in a\n+ * valid format.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Initializes a new instance of <code>MalformedURLException</code> without\n-  * a descriptive error message.\n-  */\n-public\n-MalformedURLException()\n+public class MalformedURLException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -182787522200415866L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>MalformedURLException</code> without\n-  * a descriptive error message.\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-MalformedURLException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public MalformedURLException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message.\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public MalformedURLException(String message)\n+  {\n+    super(message);\n+  }\n } // class MalformedURLException\n-"}, {"sha": "2f7fb7276d712bbf34003ab8e6b2d6b7bbd1909b", "filename": "libjava/java/net/NoRouteToHostException.java", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* NoRouteToHostException.java -- Cannot connect to a host\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,50 +38,37 @@\n \n package java.net;\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n   * This exception indicates that there is no TCP/IP route to the requested\n   * host.  This is often due to a misconfigured routing table.\n   *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Aaron M. Renn <arenn@urbanophile.com>\n   * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n+  * @since 1.1\n+  * @status updated to 1.4\n   */\n public class NoRouteToHostException extends SocketException\n {\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -1897550894873493790L;\n \n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Initializes an instance of <code>NoRouteToHostException</code>\n-  * without a descriptive error message.\n-  */\n-public\n-NoRouteToHostException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Initializes an instance of <code>NoRouteToHostException</code>\n-  * witha descriptive error message, such as the text from strerror(3).\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-NoRouteToHostException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an instance without a descriptive error message.\n+   */\n+  public NoRouteToHostException()\n+  {\n+  }\n \n+  /**\n+   * Create an instance with a descriptive error message, such as the text\n+   * from strerror(3).\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public NoRouteToHostException(String message)\n+  {\n+    super(message);\n+  }\n } // class NoRouteToHostException\n-"}, {"sha": "c50bbcf6e8f3dc1dd24e81c8b339bf4aa781390b", "filename": "libjava/java/net/ProtocolException.java", "status": "modified", "additions": 31, "deletions": 44, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FProtocolException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FProtocolException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FProtocolException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* ProtocolException.java -- A low level protocol error occurred\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* ProtocolException.java -- a low level protocol error occurred\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,51 +37,38 @@\n \n package java.net;\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n-  * This exception indicates that some sort of low level protocol\n-  * exception occurred.  Look in the descriptive message (if any) for\n-  * details on what went wrong\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n-  */\n-public class ProtocolException extends java.io.IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception indicates that some sort of low level protocol\n+ * exception occurred.  Look in the descriptive message (if any) for\n+ * details on what went wrong.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Initializes a new instance of <code>ProtocolException</code>\n-  * without a descriptive error message.\n-  */\n-public\n-ProtocolException()\n+public class ProtocolException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -6098449442062388080L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>ProtocolException</code>\n-  * with a descriptive error message.\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-ProtocolException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public ProtocolException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message.\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public ProtocolException(String message)\n+  {\n+    super(message);\n+  }\n } // class ProtocolException\n-"}, {"sha": "6494cae9d3ee5629efa61c960705eef5fcba8f4d", "filename": "libjava/java/net/SocketException.java", "status": "modified", "additions": 30, "deletions": 41, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FSocketException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FSocketException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* SocketException.java -- An exception occurred while performing a socket op\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,49 +37,38 @@\n \n package java.net;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n-  * This exception indicates that a generic error occurred related to an\n-  * operation on a socket.  Check the descriptive message (if any) for\n-  * details on the nature of this error\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Per Bothner \n-  * @date January 6, 1999.\n-  */\n-public class SocketException extends java.io.IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception indicates that a generic error occurred related to an\n+ * operation on a socket.  Check the descriptive message (if any) for\n+ * details on the nature of this error\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Per Bothner\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Initializes a new instance of <code>SocketException</code> without\n-  * a descriptive error message.\n-  */\n-public\n-SocketException()\n+public class SocketException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -5935874303556886934L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>SocketException</code> without\n-  * a descriptive error message.\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-SocketException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public SocketException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message.\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public SocketException(String message)\n+  {\n+    super(message);\n+  }\n } // class SocketException\n-"}, {"sha": "46b70401f601adef8d21b896fa2dd75d81513f9e", "filename": "libjava/java/net/UnknownHostException.java", "status": "modified", "additions": 33, "deletions": 45, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownHostException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n-/* UnknownHostException.java -- The hostname is not unknown\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* UnknownHostException.java -- The hostname is unknown\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,52 +37,40 @@\n \n package java.net;\n \n-/*\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n-  * This exception indicates that an attempt was made to reference a hostname\n-  * or IP address that is not valid.  This could possibly indicate that a\n-  * DNS problem has occurred, but most often means that the host was not\n-  * correctly specified.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Per Bothner \n-  * @date January 6, 1999.\n-  */\n-public class UnknownHostException extends java.io.IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception indicates that an attempt was made to reference a hostname\n+ * or IP address that is not valid.  This could possibly indicate that a\n+ * DNS problem has occurred, but most often means that the host was not\n+ * correctly specified.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Per Bothner\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Initializes a new instance of <code>UnknownHostException</code>\n-  * without a descriptive error message.\n-  */\n-public\n-UnknownHostException()\n+public class UnknownHostException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4639126076052875403L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>UnknownHostException</code>\n-  * with a descriptive error message, such as the name of the host\n-  * that could not be resolved.\n-  *\n-  * @param message A message describing the error that occurrred.\n-  */\n-public\n-UnknownHostException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public UnknownHostException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message, such as the\n+   * name of the host that could not be resolved.\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public UnknownHostException(String message)\n+  {\n+    super(message);\n+  }\n } // class UnknownHostException\n-"}, {"sha": "dfb7a44aa8eadd3ac2655d630edc845aa45864bf", "filename": "libjava/java/net/UnknownServiceException.java", "status": "modified", "additions": 31, "deletions": 44, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1b181a6785c3b77b1cd877a8f6759efad6cfe8/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownServiceException.java?ref=3e1b181a6785c3b77b1cd877a8f6759efad6cfe8", "patch": "@@ -1,13 +1,13 @@\n /* UnknownServiceException.java -- A service error occurred\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,52 +37,39 @@\n \n package java.net;\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Believed complete and correct.\n- */\n+import java.io.IOException;\n \n /**\n-  * Contrary to what you might think, this does not indicate that the\n-  * TCP/IP service name specified was invalid.  Instead it indicates that\n-  * the MIME type returned from a URL could not be determined or that an\n-  * attempt was made to write to a read-only URL.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date March 5, 1999.\n-  */\n-public class UnknownServiceException extends java.io.IOException\n-{\n-\n-/*\n- * Constructors\n+ * Contrary to what you might think, this does not indicate that the\n+ * TCP/IP service name specified was invalid.  Instead it indicates that\n+ * the MIME type returned from a URL could not be determined or that an\n+ * attempt was made to write to a read-only URL.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Initializes a new instance of <code>UnknownServiceException</code>\n-  * without a descriptive error message.\n-  */\n-public\n-UnknownServiceException()\n+public class UnknownServiceException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -4169033248853639508L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>UnknownServiceException</code>\n-  * without a descriptive error message.\n-  *\n-  * @param message A message describing the error that occurred.\n-  */\n-public\n-UnknownServiceException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new instance without a descriptive error message.\n+   */\n+  public UnknownServiceException()\n+  {\n+  }\n \n+  /**\n+   * Create a new instance with a descriptive error message.\n+   *\n+   * @param message a message describing the error that occurred\n+   */\n+  public UnknownServiceException(String message)\n+  {\n+    super(message);\n+  }\n } // class UnknownServiceException\n-"}]}