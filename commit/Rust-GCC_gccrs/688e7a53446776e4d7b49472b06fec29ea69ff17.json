{"sha": "688e7a53446776e4d7b49472b06fec29ea69ff17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4ZTdhNTM0NDY3NzZlNGQ3YjQ5NDcyYjA2ZmVjMjllYTY5ZmYxNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-04-21T14:02:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-04-21T14:02:00Z"}, "message": "re PR preprocessor/33415 (Can't compile .cpp file with UTF-8 BOM.)\n\nlibcpp\n\tPR libcpp/33415:\n\t* charset.c (_cpp_convert_input): Add buffer_start argument.\n\tIgnore UTF-8 BOM if seen.\n\t* internal.h (_cpp_convert_input): Add argument.\n\t* files.c (struct _cpp_file) <buffer_start>: New field.\n\t(destroy_cpp_file): Free buffer_start, not buffer.\n\t(_cpp_pop_file_buffer): Likewise.\n\t(read_file_guts): Update.\ngcc/testsuite\n\tPR libcpp/33415:\n\t* gcc.dg/cpp/pr33415.c: New file.\n\nFrom-SVN: r134507", "tree": {"sha": "95c70d6534e91125519d9a8f2e7c2cf84de0c82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c70d6534e91125519d9a8f2e7c2cf84de0c82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688e7a53446776e4d7b49472b06fec29ea69ff17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e7a53446776e4d7b49472b06fec29ea69ff17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688e7a53446776e4d7b49472b06fec29ea69ff17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e7a53446776e4d7b49472b06fec29ea69ff17/comments", "author": null, "committer": null, "parents": [{"sha": "009890be6c6e3f34630be0f086303d42c6aa867b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009890be6c6e3f34630be0f086303d42c6aa867b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009890be6c6e3f34630be0f086303d42c6aa867b"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "02e190f23b078509122864c75424c7c810aec046", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -1,3 +1,8 @@\n+2008-04-21  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libcpp/33415:\n+\t* gcc.dg/cpp/pr33415.c: New file.\n+\n 2008-04-21  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/bltins.adb: New testcase."}, {"sha": "28ffe2372e43e7d4741694081b5be53038a16804", "filename": "gcc/testsuite/gcc.dg/cpp/pr33415.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33415.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33415.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr33415.c?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -0,0 +1,6 @@\n+\ufeff /* Test case for PR 33415.  Note that the first bytes of this file\n+     are a UTF-8 BOM.  */\n+\n+/* { dg-do compile } */\n+\n+int f(void) { return 5; }"}, {"sha": "b80afd2550bb00fb9411268aef107df3a48bbfd6", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -1,3 +1,14 @@\n+2008-04-21  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libcpp/33415:\n+\t* charset.c (_cpp_convert_input): Add buffer_start argument.\n+\tIgnore UTF-8 BOM if seen.\n+\t* internal.h (_cpp_convert_input): Add argument.\n+\t* files.c (struct _cpp_file) <buffer_start>: New field.\n+\t(destroy_cpp_file): Free buffer_start, not buffer.\n+\t(_cpp_pop_file_buffer): Likewise.\n+\t(read_file_guts): Update.\n+\n 2008-04-18  Kris Van Hees <kris.van.hees@oracle.com>\n \n \t* include/cpp-id-data.h (UC): Was U, conflicts with U\"...\" literal."}, {"sha": "d70d05cc0205435247e25ca66dd7bf46c79e163f", "filename": "libcpp/charset.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library - charsets\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006, 2008\n    Free Software Foundation, Inc.\n \n    Broken out of c-lex.c Apr 2003, adding valid C99 UCN ranges.\n@@ -1637,18 +1637,24 @@ _cpp_interpret_identifier (cpp_reader *pfile, const uchar *id, size_t len)\n    source file) from INPUT_CHARSET to the source character set.  INPUT\n    points to the input buffer, SIZE is its allocated size, and LEN is\n    the length of the meaningful data within the buffer.  The\n-   translated buffer is returned, and *ST_SIZE is set to the length of\n-   the meaningful data within the translated buffer.\n-\n-   INPUT is expected to have been allocated with xmalloc.  This function\n-   will either return INPUT, or free it and return a pointer to another\n-   xmalloc-allocated block of memory.  */\n+   translated buffer is returned, *ST_SIZE is set to the length of\n+   the meaningful data within the translated buffer, and *BUFFER_START\n+   is set to the start of the returned buffer.  *BUFFER_START may\n+   differ from the return value in the case of a BOM or other ignored\n+   marker information.\n+\n+   INPUT is expected to have been allocated with xmalloc.  This\n+   function will either set *BUFFER_START to INPUT, or free it and set\n+   *BUFFER_START to a pointer to another xmalloc-allocated block of\n+   memory.  */\n uchar * \n _cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n-\t\t    uchar *input, size_t size, size_t len, off_t *st_size)\n+\t\t    uchar *input, size_t size, size_t len,\n+\t\t    const unsigned char **buffer_start, off_t *st_size)\n {\n   struct cset_converter input_cset;\n   struct _cpp_strbuf to;\n+  unsigned char *buffer;\n \n   input_cset = init_iconv_desc (pfile, SOURCE_CHARSET, input_charset);\n   if (input_cset.func == convert_no_conversion)\n@@ -1689,8 +1695,24 @@ _cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n   else\n     to.text[to.len] = '\\n';\n \n+  buffer = to.text;\n   *st_size = to.len;\n-  return to.text;\n+#if HOST_CHARSET == HOST_CHARSET_ASCII\n+  /* The HOST_CHARSET test just above ensures that the source charset\n+     is UTF-8.  So, ignore a UTF-8 BOM if we see one.  Note that\n+     glib'c UTF-8 iconv() provider (as of glibc 2.7) does not ignore a\n+     BOM -- however, even if it did, we would still need this code due\n+     to the 'convert_no_conversion' case.  */\n+  if (to.len >= 3 && to.text[0] == 0xef && to.text[1] == 0xbb\n+      && to.text[2] == 0xbf)\n+    {\n+      *st_size -= 3;\n+      buffer += 3;\n+    }\n+#endif\n+\n+  *buffer_start = to.text;\n+  return buffer;\n }\n \n /* Decide on the default encoding to assume for input files.  */"}, {"sha": "1adc58d88a8594290df88657b101bce491089a0c", "filename": "libcpp/files.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -74,6 +74,10 @@ struct _cpp_file\n   /* The contents of NAME after calling read_file().  */\n   const uchar *buffer;\n \n+  /* Pointer to the real start of BUFFER.  read_file() might increment\n+     BUFFER; when freeing, this this pointer must be used instead.  */\n+  const uchar *buffer_start;\n+\n   /* The macro, if any, preventing re-inclusion.  */\n   const cpp_hashnode *cmacro;\n \n@@ -635,8 +639,11 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"%s is shorter than expected\", file->path);\n \n-  file->buffer = _cpp_convert_input (pfile, CPP_OPTION (pfile, input_charset),\n-\t\t\t\t     buf, size, total, &file->st.st_size);\n+  file->buffer = _cpp_convert_input (pfile,\n+\t\t\t\t     CPP_OPTION (pfile, input_charset),\n+\t\t\t\t     buf, size, total,\n+\t\t\t\t     &file->buffer_start,\n+\t\t\t\t     &file->st.st_size);\n   file->buffer_valid = true;\n \n   return true;\n@@ -969,8 +976,8 @@ make_cpp_file (cpp_reader *pfile, cpp_dir *dir, const char *fname)\n static void\n destroy_cpp_file (_cpp_file *file)\n {\n-  if (file->buffer)\n-    free ((void *) file->buffer);\n+  if (file->buffer_start)\n+    free ((void *) file->buffer_start);\n   free ((void *) file->name);\n   free (file);\n }\n@@ -1302,9 +1309,10 @@ _cpp_pop_file_buffer (cpp_reader *pfile, _cpp_file *file)\n   /* Invalidate control macros in the #including file.  */\n   pfile->mi_valid = false;\n \n-  if (file->buffer)\n+  if (file->buffer_start)\n     {\n-      free ((void *) file->buffer);\n+      free ((void *) file->buffer_start);\n+      file->buffer_start = NULL;\n       file->buffer = NULL;\n       file->buffer_valid = false;\n     }"}, {"sha": "860fe2e53a278be987c444a45bd66cb83418c857", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e7a53446776e4d7b49472b06fec29ea69ff17/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=688e7a53446776e4d7b49472b06fec29ea69ff17", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -644,7 +644,7 @@ extern cppchar_t _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n extern void _cpp_destroy_iconv (cpp_reader *);\n extern unsigned char *_cpp_convert_input (cpp_reader *, const char *,\n \t\t\t\t\t  unsigned char *, size_t, size_t,\n-\t\t\t\t\t  off_t *);\n+\t\t\t\t\t  const unsigned char **, off_t *);\n extern const char *_cpp_default_encoding (void);\n extern cpp_hashnode * _cpp_interpret_identifier (cpp_reader *pfile,\n \t\t\t\t\t\t const unsigned char *id,"}]}