{"sha": "78048b1c66c31b87770b8a29fa44fc291213fd9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwNDhiMWM2NmMzMWI4Nzc3MGI4YTI5ZmE0NGZjMjkxMjEzZmQ5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-10T08:29:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-10T08:29:52Z"}, "message": "re PR tree-optimization/51000 (ICE: in vect_get_store_cost, at tree-vect-stmts.c:923 on powerpc-apple-darwin9)\n\n\tPR tree-optimization/51000\n\t* tree-vect-patterns.c (vect_recog_bool_pattern): If adding\n\ta pattern stmt for a bool store, adjust DR_STMT too.\n\tDon't handle bool conversions to single bit precision lhs.\n\t* tree-vect-stmts.c (vect_remove_stores): If next is a pattern\n\tstmt, remove its related stmt and free its stmt_vinfo.\n\t(free_stmt_vec_info): Free also pattern stmt's vinfo and\n\tpattern def stmt's vinfo.\n\t* tree-vect-loop.c (destroy_loop_vec_info): Don't try to\n\tfree pattern stmt's vinfo here.\n\t(vect_transform_loop): When calling vect_remove_stores,\n\tdo gsi_next first and don't call gsi_remove.  If not strided\n\tstore, free stmt vinfo for gsi_stmt (si) rather than stmt.\n\n\t* gcc.dg/vect/pr51000.c: New test.\n\nFrom-SVN: r181250", "tree": {"sha": "17a0e0e6943fabe7f2cd14633582a9f31eb0a0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17a0e0e6943fabe7f2cd14633582a9f31eb0a0ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78048b1c66c31b87770b8a29fa44fc291213fd9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78048b1c66c31b87770b8a29fa44fc291213fd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78048b1c66c31b87770b8a29fa44fc291213fd9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78048b1c66c31b87770b8a29fa44fc291213fd9b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "136a1c15d70712b65429ca8028fb2fe2d38df501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136a1c15d70712b65429ca8028fb2fe2d38df501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/136a1c15d70712b65429ca8028fb2fe2d38df501"}], "stats": {"total": 87, "additions": 68, "deletions": 19}, "files": [{"sha": "e3a268fd31a2557d7a515927572eb9ab1d35646f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -1,3 +1,19 @@\n+2011-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51000\n+\t* tree-vect-patterns.c (vect_recog_bool_pattern): If adding\n+\ta pattern stmt for a bool store, adjust DR_STMT too.\n+\tDon't handle bool conversions to single bit precision lhs.\n+\t* tree-vect-stmts.c (vect_remove_stores): If next is a pattern\n+\tstmt, remove its related stmt and free its stmt_vinfo.\n+\t(free_stmt_vec_info): Free also pattern stmt's vinfo and\n+\tpattern def stmt's vinfo.\n+\t* tree-vect-loop.c (destroy_loop_vec_info): Don't try to\n+\tfree pattern stmt's vinfo here.\n+\t(vect_transform_loop): When calling vect_remove_stores,\n+\tdo gsi_next first and don't call gsi_remove.  If not strided\n+\tstore, free stmt vinfo for gsi_stmt (si) rather than stmt.\n+\n 2011-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/50911"}, {"sha": "31f53066f0a0286ea653569d034bcdbf2ecd8656", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -1,3 +1,8 @@\n+2011-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51000\n+\t* gcc.dg/vect/pr51000.c: New test.\n+\n 2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50837"}, {"sha": "75af2d8a2983ac7171d269810f16d7dc55ad735b", "filename": "gcc/testsuite/gcc.dg/vect/pr51000.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51000.c?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+_Bool a[2048];\n+int b[2048];\n+\n+void\n+foo ()\n+{\n+  int i;\n+  for (i = 0; i < 2048; i += 4)\n+    {\n+      a[i] = b[i] <= 10;\n+      a[i + 3] = b[i + 1] <= 10;\n+      a[i + 2] = b[i + 2] <= 10;\n+      a[i + 1] = b[i + 3] <= 10;\n+    }\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fb15d6e3d03ded602c4cd655a2fbdc67c493b459", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -872,21 +872,8 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n       for (si = gsi_start_bb (bb); !gsi_end_p (si); )\n         {\n           gimple stmt = gsi_stmt (si);\n-          stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\n-          if (stmt_info)\n-            {\n-              /* Check if this statement has a related \"pattern stmt\"\n-                 (introduced by the vectorizer during the pattern recognition\n-                 pass).  Free pattern's stmt_vec_info.  */\n-              if (STMT_VINFO_IN_PATTERN_P (stmt_info)\n-                  && vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info)))\n-                free_stmt_vec_info (STMT_VINFO_RELATED_STMT (stmt_info));\n-\n-              /* Free stmt_vec_info.  */\n-              free_stmt_vec_info (stmt);\n-            }\n-\n+\t  /* Free stmt_vec_info.  */\n+\t  free_stmt_vec_info (stmt);\n           gsi_next (&si);\n         }\n     }\n@@ -5349,14 +5336,14 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t\t  /* Interleaving. If IS_STORE is TRUE, the vectorization of the\n \t\t     interleaving chain was completed - free all the stores in\n \t\t     the chain.  */\n+\t\t  gsi_next (&si);\n \t\t  vect_remove_stores (GROUP_FIRST_ELEMENT (stmt_info));\n-\t\t  gsi_remove (&si, true);\n  \t\t  continue;\n \t\t}\n \t      else\n \t\t{\n \t\t  /* Free the attached stmt_vec_info and remove the stmt.  */\n-\t\t  free_stmt_vec_info (stmt);\n+\t\t  free_stmt_vec_info (gsi_stmt (si));\n \t\t  gsi_remove (&si, true);\n \t\t  continue;\n \t\t}"}, {"sha": "d260e801bca55d71aa734be871d30e78073756ef", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -2041,7 +2041,8 @@ vect_recog_bool_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n   rhs_code = gimple_assign_rhs_code (last_stmt);\n   if (CONVERT_EXPR_CODE_P (rhs_code))\n     {\n-      if (TREE_CODE (TREE_TYPE (lhs)) != INTEGER_TYPE)\n+      if (TREE_CODE (TREE_TYPE (lhs)) != INTEGER_TYPE\n+\t  || TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n \treturn NULL;\n       vectype = get_vectype_for_scalar_type (TREE_TYPE (lhs));\n       if (vectype == NULL_TREE)\n@@ -2096,6 +2097,7 @@ vect_recog_bool_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n       STMT_VINFO_DR_STEP (pattern_stmt_info) = STMT_VINFO_DR_STEP (stmt_vinfo);\n       STMT_VINFO_DR_ALIGNED_TO (pattern_stmt_info)\n \t= STMT_VINFO_DR_ALIGNED_TO (stmt_vinfo);\n+      DR_STMT (STMT_VINFO_DATA_REF (stmt_vinfo)) = pattern_stmt;\n       *type_out = vectype;\n       *type_in = vectype;\n       VEC_safe_push (gimple, heap, *stmts, last_stmt);"}, {"sha": "abccd923b44f540359ea31c8bb4bc4e11b11a9ab", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78048b1c66c31b87770b8a29fa44fc291213fd9b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=78048b1c66c31b87770b8a29fa44fc291213fd9b", "patch": "@@ -5567,10 +5567,14 @@ vect_remove_stores (gimple first_stmt)\n \n   while (next)\n     {\n+      stmt_vec_info stmt_info = vinfo_for_stmt (next);\n+\n+      tmp = GROUP_NEXT_ELEMENT (stmt_info);\n+      if (is_pattern_stmt_p (stmt_info))\n+\tnext = STMT_VINFO_RELATED_STMT (stmt_info);\n       /* Free the attached stmt_vec_info and remove the stmt.  */\n       next_si = gsi_for_stmt (next);\n       gsi_remove (&next_si, true);\n-      tmp = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next));\n       free_stmt_vec_info (next);\n       next = tmp;\n     }\n@@ -5660,6 +5664,22 @@ free_stmt_vec_info (gimple stmt)\n   if (!stmt_info)\n     return;\n \n+  /* Check if this statement has a related \"pattern stmt\"\n+     (introduced by the vectorizer during the pattern recognition\n+     pass).  Free pattern's stmt_vec_info and def stmt's stmt_vec_info\n+     too.  */\n+  if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n+    {\n+      stmt_vec_info patt_info\n+\t= vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n+      if (patt_info)\n+\t{\n+\t  if (STMT_VINFO_PATTERN_DEF_STMT (patt_info))\n+\t    free_stmt_vec_info (STMT_VINFO_PATTERN_DEF_STMT (patt_info));\n+\t  free_stmt_vec_info (STMT_VINFO_RELATED_STMT (stmt_info));\n+\t}\n+    }\n+\n   VEC_free (dr_p, heap, STMT_VINFO_SAME_ALIGN_REFS (stmt_info));\n   set_vinfo_for_stmt (stmt, NULL);\n   free (stmt_info);"}]}