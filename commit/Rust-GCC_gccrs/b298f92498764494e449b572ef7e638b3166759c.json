{"sha": "b298f92498764494e449b572ef7e638b3166759c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5OGY5MjQ5ODc2NDQ5NGU0NDliNTcyZWY3ZTYzOGIzMTY2NzU5Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-08T14:50:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-08T14:50:16Z"}, "message": "dwarf2out.c (mem_loc_descriptor): Use DW_OP_const[48]u instead of DW_OP_addr for DW_OP_GNU_push_tls_address operand.\n\n\t* dwarf2out.c (mem_loc_descriptor): Use DW_OP_const[48]u\n\tinstead of DW_OP_addr for DW_OP_GNU_push_tls_address operand.\n\t(loc_list_from_tree): Likewise.\n\t(output_loc_operands): Handle outputting DW_OP_const[48]u\n\twith loc->dtprel set.\n\t(resolve_addr_in_expr): Handle loc->dtprel like DW_OP_addr.\n\nFrom-SVN: r161958", "tree": {"sha": "14466025a3d452eb729d9ef4821d853bf0a5d6da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14466025a3d452eb729d9ef4821d853bf0a5d6da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b298f92498764494e449b572ef7e638b3166759c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b298f92498764494e449b572ef7e638b3166759c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b298f92498764494e449b572ef7e638b3166759c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b298f92498764494e449b572ef7e638b3166759c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dde3b0174313d39691008d01204b59223a54496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dde3b0174313d39691008d01204b59223a54496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dde3b0174313d39691008d01204b59223a54496"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "e2339f6dc01ec0bdecf04428ee4f3569e78f3002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298f92498764494e449b572ef7e638b3166759c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298f92498764494e449b572ef7e638b3166759c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b298f92498764494e449b572ef7e638b3166759c", "patch": "@@ -1,3 +1,12 @@\n+2010-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor): Use DW_OP_const[48]u\n+\tinstead of DW_OP_addr for DW_OP_GNU_push_tls_address operand.\n+\t(loc_list_from_tree): Likewise.\n+\t(output_loc_operands): Handle outputting DW_OP_const[48]u\n+\twith loc->dtprel set.\n+\t(resolve_addr_in_expr): Handle loc->dtprel like DW_OP_addr.\n+\n 2010-07-08  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c: Include pointer-set.h"}, {"sha": "d17787138d14578751b77a83c093084c6b6c38a3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b298f92498764494e449b572ef7e638b3166759c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b298f92498764494e449b572ef7e638b3166759c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b298f92498764494e449b572ef7e638b3166759c", "patch": "@@ -4928,10 +4928,28 @@ output_loc_operands (dw_loc_descr_ref loc)\n       dw2_asm_output_data (2, val1->v.val_int, NULL);\n       break;\n     case DW_OP_const4u:\n+      if (loc->dtprel)\n+\t{\n+\t  gcc_assert (targetm.asm_out.output_dwarf_dtprel);\n+\t  targetm.asm_out.output_dwarf_dtprel (asm_out_file, 4,\n+\t\t\t\t\t       val1->v.val_addr);\n+\t  fputc ('\\n', asm_out_file);\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n     case DW_OP_const4s:\n       dw2_asm_output_data (4, val1->v.val_int, NULL);\n       break;\n     case DW_OP_const8u:\n+      if (loc->dtprel)\n+\t{\n+\t  gcc_assert (targetm.asm_out.output_dwarf_dtprel);\n+\t  targetm.asm_out.output_dwarf_dtprel (asm_out_file, 8,\n+\t\t\t\t\t       val1->v.val_addr);\n+\t  fputc ('\\n', asm_out_file);\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n     case DW_OP_const8s:\n       gcc_assert (HOST_BITS_PER_WIDE_INT >= 64);\n       dw2_asm_output_data (8, val1->v.val_int, NULL);\n@@ -13586,7 +13604,11 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  if (!targetm.have_tls || !targetm.asm_out.output_dwarf_dtprel)\n \t    break;\n \n-\t  temp = new_loc_descr (DW_OP_addr, 0, 0);\n+\t  /* We used to emit DW_OP_addr here, but that's wrong, since\n+\t     DW_OP_addr should be relocated by the debug info consumer,\n+\t     while DW_OP_GNU_push_tls_address operand should not.  */\n+\t  temp = new_loc_descr (DWARF2_ADDR_SIZE == 4\n+\t\t\t\t? DW_OP_const4u : DW_OP_const8u, 0, 0);\n \t  temp->dw_loc_oprnd1.val_class = dw_val_class_addr;\n \t  temp->dw_loc_oprnd1.v.val_addr = rtl;\n \t  temp->dtprel = true;\n@@ -15071,10 +15093,13 @@ loc_list_from_tree (tree loc, int want_address)\n \n \t       /* The way DW_OP_GNU_push_tls_address is specified, we\n \t     \t  can only look up addresses of objects in the current\n-\t     \t  module.  */\n+\t     \t  module.  We used DW_OP_addr as first op, but that's\n+\t\t  wrong, because DW_OP_addr is relocated by the debug\n+\t\t  info consumer, while DW_OP_GNU_push_tls_address\n+\t\t  operand shouldn't be.  */\n \t      if (DECL_EXTERNAL (loc) && !targetm.binds_local_p (loc))\n \t\treturn 0;\n-\t      first_op = DW_OP_addr;\n+\t      first_op = DWARF2_ADDR_SIZE == 4 ? DW_OP_const4u : DW_OP_const8u;\n \t      dtprel = true;\n \t      second_op = DW_OP_GNU_push_tls_address;\n \t    }\n@@ -22093,7 +22118,7 @@ static bool\n resolve_addr_in_expr (dw_loc_descr_ref loc)\n {\n   for (; loc; loc = loc->dw_loc_next)\n-    if ((loc->dw_loc_opc == DW_OP_addr\n+    if (((loc->dw_loc_opc == DW_OP_addr || loc->dtprel)\n \t && resolve_one_addr (&loc->dw_loc_oprnd1.v.val_addr, NULL))\n \t|| (loc->dw_loc_opc == DW_OP_implicit_value\n \t    && loc->dw_loc_oprnd2.val_class == dw_val_class_addr"}]}