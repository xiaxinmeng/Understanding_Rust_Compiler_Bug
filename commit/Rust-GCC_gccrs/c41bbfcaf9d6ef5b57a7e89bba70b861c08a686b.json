{"sha": "c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "node_id": "C_kwDOANBUbNoAKGM0MWJiZmNhZjlkNmVmNWI1N2E3ZTg5YmJhNzBiODYxYzA4YTY4NmI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-11T10:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-14T22:51:38Z"}, "message": "c++: only declare satisfied friends\n\nA friend declaration can only have constraints if it is defined.  If\nmultiple instantiations of a class template define the same friend function\nsignature, it's an error, but that shouldn't happen if it's constrained to\nonly be declared in one instantiation.\n\nCurrently we don't mangle requirements, so the foos all mangle the same and\nactually instantiating #1 will break, but for now we can test that they're\nconsidered distinct.\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_friend_function): Check satisfaction.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-friend11.C: New test.", "tree": {"sha": "23c3fbf034db9747bc4e05a833d1b096e9e29ee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23c3fbf034db9747bc4e05a833d1b096e9e29ee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c12a921525b2aa27ca4814c42c63d61a6d954e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c12a921525b2aa27ca4814c42c63d61a6d954e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c12a921525b2aa27ca4814c42c63d61a6d954e"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "af96c5ca25f727c76ecfb9239f417852757b226f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "patch": "@@ -11284,6 +11284,9 @@ tsubst_friend_function (tree decl, tree args)\n \t  not_tmpl = DECL_TEMPLATE_RESULT (new_friend);\n \t  new_friend_result_template_info = DECL_TEMPLATE_INFO (not_tmpl);\n \t}\n+      else if (!constraints_satisfied_p (new_friend))\n+\t/* Only define a constrained hidden friend when satisfied.  */\n+\treturn error_mark_node;\n \n       /* Inside pushdecl_namespace_level, we will push into the\n \t current namespace. However, the friend function should go"}, {"sha": "0350ac3553e1bf48ed0347169a79d530686ad9cf", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend11.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend11.C?ref=c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "patch": "@@ -0,0 +1,21 @@\n+// CWG2596\n+// { dg-do compile { target c++20 } }\n+\n+struct Base {};\n+\n+int foo(Base&) { return 0; } // #0\n+\n+template<int N>\n+struct S : Base {\n+  friend int foo(Base&) requires (N == 1) { return 1; }  // #1\n+  // friend int foo(Base&) requires (N == 2) { return 3; }  // #2\n+};\n+\n+S<1> s1;\n+S<2> s2;          // OK, no conflict between #1 and #0\n+int x = foo(s1);  // { dg-error \"ambiguous\" }\n+int y = foo(s2);  // OK, selects #0\n+\n+// ??? currently the foos all mangle the same, so comment out #2\n+// and only test that #1 isn't multiply defined and overloads with #0.\n+// The 2596 example does not include #0 and expects both calls to work."}]}