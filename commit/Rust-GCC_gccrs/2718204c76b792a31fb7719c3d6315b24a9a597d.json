{"sha": "2718204c76b792a31fb7719c3d6315b24a9a597d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxODIwNGM3NmI3OTJhMzFmYjc3MTljM2Q2MzE1YjI0YTlhNTk3ZA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-02-08T14:00:37Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-02-08T14:00:37Z"}, "message": "c4x.c (c4x_legitimize_address): Don't generate a LO_SUM address for HImode or HFmode but instead force address...\n\n\t* config/c4x/c4x.c (c4x_legitimize_address): Don't generate a\n \tLO_SUM address for HImode or HFmode but instead force address into\n \ta register so that it is offsettable.\n\t(c4x_emit_move_sequence): Handle LO_SUM immediate address.\n\nFrom-SVN: r25087", "tree": {"sha": "9be4c9674b82e6d05ebb4bf340eff7603406d2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be4c9674b82e6d05ebb4bf340eff7603406d2ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2718204c76b792a31fb7719c3d6315b24a9a597d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2718204c76b792a31fb7719c3d6315b24a9a597d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2718204c76b792a31fb7719c3d6315b24a9a597d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2718204c76b792a31fb7719c3d6315b24a9a597d/comments", "author": null, "committer": null, "parents": [{"sha": "de67f00e393bc5d623ed70a4ca45d8be271edba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67f00e393bc5d623ed70a4ca45d8be271edba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de67f00e393bc5d623ed70a4ca45d8be271edba1"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "49d3227556a045fe7a65333340f15b9acac3106d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2718204c76b792a31fb7719c3d6315b24a9a597d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2718204c76b792a31fb7719c3d6315b24a9a597d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2718204c76b792a31fb7719c3d6315b24a9a597d", "patch": "@@ -1,3 +1,10 @@\n+Tue Feb  9 10:52:27 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (c4x_legitimize_address): Don't generate a\n+ \tLO_SUM address for HImode or HFmode but instead force address into\n+ \ta register so that it is offsettable.\n+\t(c4x_emit_move_sequence): Handle LO_SUM immediate address.\n+\n Tue Feb  9 10:46:42 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_address_cost): Return cost of 1 for"}, {"sha": "e4ee65fccae7378ec057116bf14d2905b533bce7", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2718204c76b792a31fb7719c3d6315b24a9a597d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2718204c76b792a31fb7719c3d6315b24a9a597d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=2718204c76b792a31fb7719c3d6315b24a9a597d", "patch": "@@ -1015,7 +1015,6 @@ c4x_null_epilogue_p ()\n   return 0;\n }\n \n-\n int\n c4x_emit_move_sequence (operands, mode)\n      rtx *operands;\n@@ -1030,7 +1029,15 @@ c4x_emit_move_sequence (operands, mode)\n       && ! (stik_const_operand (op1, mode) && ! push_operand (op0, mode)))\n     op1 = force_reg (mode, op1);\n \n-  if (symbolic_operand (op1, mode))\n+  if (GET_CODE (op1) == LO_SUM\n+      && GET_MODE (op1) == Pmode\n+      && dp_reg_operand (XEXP (op1, 0), mode))\n+    {\n+      /* expand_increment will sometimes create a LO_SUM immediate\n+\t address.  */\n+      op1 = XEXP (op1, 1);\n+    }\n+  else if (symbolic_operand (op1, mode))\n     {\n       if (TARGET_LOAD_ADDRESS)\n \t{\n@@ -1426,12 +1433,23 @@ c4x_legitimize_address (orig, mode)\n {\n   if (GET_CODE (orig) == SYMBOL_REF)\n     {\n-      rtx dp_reg = gen_rtx_REG (Pmode, DP_REGNO);\n-\n-      if (! TARGET_SMALL)\n-\temit_insn (gen_set_ldp (dp_reg, orig));\n-      \n-      return gen_rtx_LO_SUM (Pmode, dp_reg, orig);\n+      if (mode == HImode || mode == HFmode)\n+\t{\n+\t  /* We need to force the address into\n+\t     a register so that it is offsettable.  */\n+\t  rtx addr_reg = gen_reg_rtx (Pmode);\n+\t  emit_move_insn (addr_reg, orig);\n+\t  return addr_reg;\n+\t}\n+      else\n+\t{\n+\t  rtx dp_reg = gen_rtx_REG (Pmode, DP_REGNO);\n+\t  \n+\t  if (! TARGET_SMALL)\n+\t    emit_insn (gen_set_ldp (dp_reg, orig));\n+\t  \n+\t  return gen_rtx_LO_SUM (Pmode, dp_reg, orig);\n+\t}\n     }\n \n   return NULL_RTX;"}]}