{"sha": "84be603271fc03e8b251ebb930b8cf86b9d00767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiZTYwMzI3MWZjMDNlOGIyNTFlYmI5MzBiOGNmODZiOWQwMDc2Nw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-12-19T17:59:23Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-12-19T17:59:23Z"}, "message": "[AArch64 3/3] Fix XOR_one_cmpl pattern; add SIMD-reg variants for BIC,ORN,EON\n\ngcc/:\n\n\t* config/aarch64/aarch64.c (<LOGICAL:optab>_one_cmpl<mode>3):\n\tReparameterize to...\n\t(<NLOGICAL:optab>_one_cmpl<mode>3): with extra SIMD-register variant.\n\t(xor_one_cmpl<mode>3): New define_insn_and_split.\n\n\t* config/aarch64/iterators.md (NLOGICAL): New define_code_iterator.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/eon_1.c: New test.\n\nFrom-SVN: r218961", "tree": {"sha": "48396ab8945ec53078dc059cc1b369816f8be403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48396ab8945ec53078dc059cc1b369816f8be403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84be603271fc03e8b251ebb930b8cf86b9d00767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84be603271fc03e8b251ebb930b8cf86b9d00767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84be603271fc03e8b251ebb930b8cf86b9d00767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84be603271fc03e8b251ebb930b8cf86b9d00767/comments", "author": null, "committer": null, "parents": [{"sha": "fe82d1f27edc59a5c5cdb705235bd341cab2dbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe82d1f27edc59a5c5cdb705235bd341cab2dbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe82d1f27edc59a5c5cdb705235bd341cab2dbb9"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "e5733ae9c8813c8f16eaac5429177ca926ba77e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84be603271fc03e8b251ebb930b8cf86b9d00767", "patch": "@@ -1,3 +1,12 @@\n+2014-12-19  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (<LOGICAL:optab>_one_cmpl<mode>3):\n+\tReparameterize to...\n+\t(<NLOGICAL:optab>_one_cmpl<mode>3): with extra SIMD-register variant.\n+\t(xor_one_cmpl<mode>3): New define_insn_and_split.\n+\n+\t* config/aarch64/iterators.md (NLOGICAL): New define_code_iterator.\n+\n 2014-12-19  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64.md (<optab><mode>3, one_cmpl<mode>2):"}, {"sha": "7b05359ef6c8de50f97e2b28a9ca3ead8b723d83", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=84be603271fc03e8b251ebb930b8cf86b9d00767", "patch": "@@ -3015,14 +3015,36 @@\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n-(define_insn \"*<LOGICAL:optab>_one_cmpl<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(LOGICAL:GPI (not:GPI\n-\t\t      (match_operand:GPI 1 \"register_operand\" \"r\"))\n-\t\t     (match_operand:GPI 2 \"register_operand\" \"r\")))]\n+;; Binary logical operators negating one operand, i.e. (a & !b), (a | !b).\n+\n+(define_insn \"*<NLOGICAL:optab>_one_cmpl<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w\")\n+\t(NLOGICAL:GPI (not:GPI (match_operand:GPI 1 \"register_operand\" \"r,w\"))\n+\t\t     (match_operand:GPI 2 \"register_operand\" \"r,w\")))]\n+  \"\"\n+  \"@\n+  <NLOGICAL:nlogical>\\\\t%<w>0, %<w>2, %<w>1\n+  <NLOGICAL:nlogical>\\\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\"\n+  [(set_attr \"type\" \"logic_reg,neon_logic\")\n+   (set_attr \"simd\" \"*,yes\")]\n+)\n+\n+;; (xor (not a) b) is simplify_rtx-ed down to (not (xor a b)).\n+;; eon does not operate on SIMD registers so the vector variant must be split.\n+(define_insn_and_split \"*xor_one_cmpl<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w\")\n+        (not:GPI (xor:GPI (match_operand:GPI 1 \"register_operand\" \"r,?w\")\n+                          (match_operand:GPI 2 \"register_operand\" \"r,w\"))))]\n+  \"\"\n+  \"eon\\\\t%<w>0, %<w>1, %<w>2\" ;; For GPR registers (only).\n+  \"reload_completed && (which_alternative == 1)\" ;; For SIMD registers.\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w\")\n+        (xor:GPI (match_operand:GPI 1 \"register_operand\" \"w\")\n+                 (match_operand:GPI 2 \"register_operand\" \"w\")))\n+   (set (match_dup 0) (not:GPI (match_dup 0)))]\n   \"\"\n-  \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>2, %<w>1\"\n-  [(set_attr \"type\" \"logic_reg\")]\n+  [(set_attr \"type\" \"logic_reg,multiple\")\n+   (set_attr \"simd\" \"*,yes\")]\n )\n \n (define_insn \"*and_one_cmpl<mode>3_compare0\""}, {"sha": "fe9fa97b998965d2c55081e6256296aa251be059", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=84be603271fc03e8b251ebb930b8cf86b9d00767", "patch": "@@ -665,6 +665,9 @@\n ;; Code iterator for logical operations\n (define_code_iterator LOGICAL [and ior xor])\n \n+;; Code iterator for logical operations whose :nlogical works on SIMD registers.\n+(define_code_iterator NLOGICAL [and ior])\n+\n ;; Code iterator for sign/zero extension\n (define_code_iterator ANY_EXTEND [sign_extend zero_extend])\n "}, {"sha": "291de7744a404f51c31837ae740e362403346980", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84be603271fc03e8b251ebb930b8cf86b9d00767", "patch": "@@ -1,3 +1,7 @@\n+2014-12-19  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/eon_1.c: New test.\n+\n 2014-12-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60493"}, {"sha": "dcdf3b4d052e034e0475028b238bdff0105d4c44", "filename": "gcc/testsuite/gcc.target/aarch64/eon_1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Feon_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84be603271fc03e8b251ebb930b8cf86b9d00767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Feon_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Feon_1.c?ref=84be603271fc03e8b251ebb930b8cf86b9d00767", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"\\tf?mov\\t\" } } */\n+\n+typedef long long int64_t;\n+typedef int64_t int64x1_t __attribute__ ((__vector_size__ (8)));\n+\n+/* { dg-final { scan-assembler-times \"\\\\teon\\\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 1 } } */\n+\n+int64_t\n+test_eon (int64_t a, int64_t b)\n+{\n+  return a ^ ~b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tmvn\\\\tx\\[0-9\\]+, x\\[0-9\\]+\" 1 } } */\n+int64_t\n+test_not (int64_t a)\n+{\n+  return ~a;\n+}\n+\n+/* There is no eon for SIMD regs; we prefer eor+mvn to mov+mov+eon+mov.  */\n+\n+/* { dg-final { scan-assembler-times \"\\\\teor\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tmvn\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 2 } } */\n+int64x1_t\n+test_vec_eon (int64x1_t a, int64x1_t b)\n+{\n+  return a ^ ~b;\n+}\n+\n+int64x1_t\n+test_vec_not (int64x1_t a)\n+{\n+  return ~a;\n+}\n+"}]}