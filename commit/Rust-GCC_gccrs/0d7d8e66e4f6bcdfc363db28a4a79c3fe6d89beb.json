{"sha": "0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3ZDhlNjZlNGY2YmNkZmMzNjNkYjI4YTRhNzljM2ZlNmQ4OWJlYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-02-07T17:55:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-02-07T17:55:54Z"}, "message": "C++: avoid most reserved words as misspelling suggestions (PR c++/81610 and PR c++/80567)\n\nlookup_name_fuzzy can offer some reserved words as suggestions for\nmisspelled words, helping with \"singed\"/\"signed\" typos.\n\nPR c++/81610 and PR c++/80567 report problems where the C++ frontend\nsuggested \"if\", \"for\" and \"else\" as corrections for misspelled variable\nnames.\n\nThe root cause is that in r247233\n  (\"Fix spelling suggestions for reserved words (PR c++/80177)\")\nI loosened the conditions on these reserved words, adding this condition:\n   if (kind == FUZZY_LOOKUP_TYPENAME)\nto the logic for rejecting words that don't start decl-specifiers, to\nallow for \"static_assert\" to be offered.\n\nThis is too loose a condition: we don't want to suggest *any* reserved word\nwhen we're in a context where we don't know we expect a typename.\n\nFor the kinds of error-recover situations where we're suggesting\nspelling corrections we don't have much contextual information, so it\nseems prudent to be stricter about which reserved words we offer\nas spelling suggestions; I don't think it makes sense for us to\nsuggest e.g. \"for\".\n\nThis patch implements that by effectively reinstating the old logic,\nbut special-casing RID_STATIC_ASSERT, moving the logic to a new\nsubroutine (in case we want to allow for other special-cases).\n\nI attempted to add suggestions for the various RID_*CAST, to cope\nwith e.g. \"reinterptet_cast\" (I can never type that correctly on the\nfirst try), but the following '<' token confuses the error-recovery\nenough that the suggestion code isn't triggered.\n\ngcc/cp/ChangeLog:\n\tPR c++/81610\n\tPR c++/80567\n\t* name-lookup.c (suggest_rid_p): New function.\n\t(lookup_name_fuzzy): Replace enum-rid-filtering logic with call to\n\tsuggest_rid_p.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/81610\n\tPR c++/80567\n\t* g++.dg/spellcheck-reswords.C: New test case.\n\t* g++.dg/spellcheck-stdlib.C: Remove xfail from dg-bogus\n\tsuggestion of \"if\".\n\nFrom-SVN: r257456", "tree": {"sha": "acf80cb00db639a9d1bb07ecfc76a71a183fe04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acf80cb00db639a9d1bb07ecfc76a71a183fe04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "085e82463714a665bc0236fb753dd5a216a0507e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085e82463714a665bc0236fb753dd5a216a0507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085e82463714a665bc0236fb753dd5a216a0507e"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "42c3cbf4b3cbb35cc66b2ccf9c4703ea89c77cbc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "patch": "@@ -1,3 +1,11 @@\n+2018-02-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/81610\n+\tPR c++/80567\n+\t* name-lookup.c (suggest_rid_p): New function.\n+\t(lookup_name_fuzzy): Replace enum-rid-filtering logic with call to\n+\tsuggest_rid_p.\n+\n 2018-02-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84182 - ICE with captured lambda"}, {"sha": "e5a340037020c128befb88bafad1ca8c1dd8facb", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "patch": "@@ -5705,6 +5705,32 @@ class macro_use_before_def : public deferred_diagnostic\n   cpp_hashnode *m_macro;\n };\n \n+/* Determine if it can ever make sense to offer RID as a suggestion for\n+   a misspelling.\n+\n+   Subroutine of lookup_name_fuzzy.  */\n+\n+static bool\n+suggest_rid_p  (enum rid rid)\n+{\n+  switch (rid)\n+    {\n+    /* Support suggesting function-like keywords.  */\n+    case RID_STATIC_ASSERT:\n+      return true;\n+\n+    default:\n+      /* Support suggesting the various decl-specifier words, to handle\n+\t e.g. \"singed\" vs \"signed\" typos.  */\n+      if (cp_keyword_starts_decl_specifier_p (rid))\n+\treturn true;\n+\n+      /* Otherwise, don't offer it.  This avoids suggesting e.g. \"if\"\n+\t and \"do\" for short misspellings, which are likely to lead to\n+\t nonsensical results.  */\n+      return false;\n+    }\n+}\n \n /* Search for near-matches for NAME within the current bindings, and within\n    macro names, returning the best match as a const char *, or NULL if\n@@ -5769,9 +5795,8 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n     {\n       const c_common_resword *resword = &c_common_reswords[i];\n \n-      if (kind == FUZZY_LOOKUP_TYPENAME)\n-\tif (!cp_keyword_starts_decl_specifier_p (resword->rid))\n-\t  continue;\n+      if (!suggest_rid_p (resword->rid))\n+\tcontinue;\n \n       tree resword_identifier = ridpointers [resword->rid];\n       if (!resword_identifier)"}, {"sha": "ec17df111c8c136a04572c0afff25325d0a281ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "patch": "@@ -1,3 +1,11 @@\n+2018-02-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/81610\n+\tPR c++/80567\n+\t* g++.dg/spellcheck-reswords.C: New test case.\n+\t* g++.dg/spellcheck-stdlib.C: Remove xfail from dg-bogus\n+\tsuggestion of \"if\".\n+\n 2018-02-07  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/84059."}, {"sha": "db6104b0671dc165b378430e592e458595c06839", "filename": "gcc/testsuite/g++.dg/spellcheck-reswords.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-reswords.C?ref=0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "patch": "@@ -0,0 +1,11 @@\n+void pr81610 (void *p)\n+{  \n+  forget (p); // { dg-error \"not declared\" }\n+  // { dg-bogus \"'for'\" \"\" { target *-*-*} .-1 }\n+}\n+\n+void pr80567 (void *p)\n+{\n+  memset (p, 0, 4); // { dg-error \"not declared\" }\n+  // { dg-bogus \"'else'\" \"\" { target *-*-*} .-1 }\n+}"}, {"sha": "c7a662624796fc981e780fa4ad8475cf3db56595", "filename": "gcc/testsuite/g++.dg/spellcheck-stdlib.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C?ref=0d7d8e66e4f6bcdfc363db28a4a79c3fe6d89beb", "patch": "@@ -16,7 +16,7 @@ void test_cstdio (void)\n   FILE *f; // { dg-error \"'FILE' was not declared in this scope\" }\n   // { dg-message \"'FILE' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n   // { dg-error \"'f' was not declared in this scope\" \"\" { target *-*-* } .-2 }\n-  // { dg-bogus \"suggested alternative: 'if'\" \"PR c++/80567\" { xfail *-*-* } .-3 }\n+  // { dg-bogus \"suggested alternative: 'if'\" \"PR c++/80567\" { target *-*-* } .-3 }\n \n   char buf[BUFSIZ]; // { dg-error \"'BUFSIZ' was not declared\" }\n   // { dg-message \"'BUFSIZ' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }"}]}