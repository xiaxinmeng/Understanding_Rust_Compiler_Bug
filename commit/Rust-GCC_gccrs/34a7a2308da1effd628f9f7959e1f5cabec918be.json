{"sha": "34a7a2308da1effd628f9f7959e1f5cabec918be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhN2EyMzA4ZGExZWZmZDYyOGY5Zjc5NTllMWY1Y2FiZWM5MThiZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-13T19:39:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-13T19:39:36Z"}, "message": "PR c++/86094 - wrong code with defaulted move ctor.\n\ngcc/c-family/\n\t* c-opts.c (c_common_post_options): Bump the current ABI version to\n\t13.  Set warn_abi_version and flag_abi_compat_version to the current\n\tversion rather than 0.  Fix defaulting flag_abi_compat_version from\n\twarn_abi_version.\ngcc/cp/\n\t* class.c (classtype_has_non_deleted_move_ctor): New.\n\t* tree.c (maybe_warn_parm_abi, type_has_nontrivial_copy_init):\n\tHandle v12 breakage.\n\nFrom-SVN: r261562", "tree": {"sha": "7e4dadbab05c5400b398730714c7858cd3f9950a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4dadbab05c5400b398730714c7858cd3f9950a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a7a2308da1effd628f9f7959e1f5cabec918be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a7a2308da1effd628f9f7959e1f5cabec918be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a7a2308da1effd628f9f7959e1f5cabec918be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a7a2308da1effd628f9f7959e1f5cabec918be/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "010b9a3ec010d3cf5c76ba98e9a6438ad5bf7a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010b9a3ec010d3cf5c76ba98e9a6438ad5bf7a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010b9a3ec010d3cf5c76ba98e9a6438ad5bf7a76"}], "stats": {"total": 145, "additions": 113, "deletions": 32}, "files": [{"sha": "72f24fdb772018d36d58e8dc1669a274e9517a66", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -1,3 +1,11 @@\n+2018-06-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86094 - wrong code with defaulted move ctor.\n+\t* c-opts.c (c_common_post_options): Bump the current ABI version to\n+\t13.  Set warn_abi_version and flag_abi_compat_version to the current\n+\tversion rather than 0.  Fix defaulting flag_abi_compat_version from\n+\twarn_abi_version.\n+\n 2018-06-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/85931"}, {"sha": "107359ec20dd70efe087944830e0042c1b7201c8", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -915,31 +915,38 @@ c_common_post_options (const char **pfilename)\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;\n \n-  if (warn_abi_version == -1)\n-    {\n-      if (flag_abi_compat_version != -1)\n-\twarn_abi_version = flag_abi_compat_version;\n-      else\n-\twarn_abi_version = 0;\n-    }\n-\n   if (flag_abi_compat_version == 1)\n     {\n       warning (0, \"%<-fabi-compat-version=1%> is not supported, using =2\");\n       flag_abi_compat_version = 2;\n     }\n-  else if (flag_abi_compat_version == -1)\n+\n+  /* Change flag_abi_version to be the actual current ABI level, for the\n+     benefit of c_cpp_builtins, and to make comparison simpler.  */\n+  const int latest_abi_version = 13;\n+  /* Generate compatibility aliases for ABI v11 (7.1) by default.  */\n+  const int abi_compat_default = 11;\n+\n+#define clamp(X) if (X == 0 || X > latest_abi_version) X = latest_abi_version\n+  clamp (flag_abi_version);\n+  clamp (warn_abi_version);\n+  clamp (flag_abi_compat_version);\n+#undef clamp\n+\n+  /* Default -Wabi= or -fabi-compat-version= from each other.  */\n+  if (warn_abi_version == -1 && flag_abi_compat_version != -1)\n+    warn_abi_version = flag_abi_compat_version;\n+  else if (flag_abi_compat_version == -1 && warn_abi_version != -1)\n+    flag_abi_compat_version = warn_abi_version;\n+  else if (warn_abi_version == -1 && flag_abi_compat_version == -1)\n     {\n-      /* Generate compatibility aliases for ABI v11 (7.1) by default. */\n-      flag_abi_compat_version\n-\t= (flag_abi_version == 0 ? 11 : 0);\n+      warn_abi_version = latest_abi_version;\n+      if (flag_abi_version == latest_abi_version)\n+\tflag_abi_compat_version = abi_compat_default;\n+      else\n+\tflag_abi_compat_version = latest_abi_version;\n     }\n \n-  /* Change flag_abi_version to be the actual current ABI level for the\n-     benefit of c_cpp_builtins.  */\n-  if (flag_abi_version == 0)\n-    flag_abi_version = 12;\n-\n   /* By default, enable the new inheriting constructor semantics along with ABI\n      11.  New and old should coexist fine, but it is a change in what\n      artificial symbols are generated.  */"}, {"sha": "efbeba338193eab1804ef321745aecfd943fb0a1", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -938,7 +938,11 @@ Driver Undocumented\n ;\n ; 12: Corrects the calling convention for classes with only deleted copy/move\n ;     constructors and changes passing/returning of empty records.\n-;     Default in G++ 8.\n+;     Default in G++ 8.1.\n+;\n+; 13: Fixes the accidental change in 12 to the calling convention for classes\n+;     with deleted copy constructor and trivial move constructor.\n+;     Default in G++ 8.2.\n ;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI."}, {"sha": "abdccbc12cf88ecc5d7e9b0ba405ae5803824479", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -1,3 +1,10 @@\n+2018-06-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86094 - wrong code with defaulted move ctor.\n+\t* class.c (classtype_has_non_deleted_move_ctor): New.\n+\t* tree.c (maybe_warn_parm_abi, type_has_nontrivial_copy_init):\n+\tHandle v12 breakage.\n+\n 2018-06-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86098 - ICE with template placeholder for TTP."}, {"sha": "9a397e3856c1afc28a8e308c8f60a0d3c2cd24b7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -5175,6 +5175,19 @@ classtype_has_move_assign_or_move_ctor_p (tree t, bool user_p)\n   return false;\n }\n \n+/* True iff T has a move constructor that is not deleted.  */\n+\n+bool\n+classtype_has_non_deleted_move_ctor (tree t)\n+{\n+  if (CLASSTYPE_LAZY_MOVE_CTOR (t))\n+    lazily_declare_fn (sfk_move_constructor, t);\n+  for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n+    if (move_fn_p (*iter) && !DECL_DELETED_FN (*iter))\n+      return true;\n+  return false;\n+}\n+\n /* If T, a class, has a user-provided copy constructor, copy assignment\n    operator, or destructor, returns that function.  Otherwise, null.  */\n "}, {"sha": "9a50d666cad8cbd43170b6c0e8f79ab7ad955931", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -6163,6 +6163,7 @@ extern bool trivial_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool classtype_has_move_assign_or_move_ctor_p (tree, bool user_declared);\n+extern bool classtype_has_non_deleted_move_ctor (tree);\n extern tree classtype_has_user_copy_or_dtor\t(tree);\n extern bool type_build_ctor_call\t\t(tree);\n extern bool type_build_dtor_call\t\t(tree);"}, {"sha": "48a0ff373720c3cde57d2acef95228e880f7e9eb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -4071,8 +4071,21 @@ maybe_warn_parm_abi (tree t, location_t loc)\n       || !deleted_copy_types->contains (t))\n     return;\n \n+  if ((flag_abi_version == 12 || warn_abi_version == 12)\n+      && classtype_has_non_deleted_move_ctor (t))\n+    {\n+      if (flag_abi_version > 12)\n+\twarning_at (loc, OPT_Wabi, \"-fabi-version=13 (GCC 8.2) fixes the \"\n+\t\t    \"calling convention for %qT, which was accidentally \"\n+\t\t    \"changed in 8.1\", t);\n+      else\n+\twarning_at (loc, OPT_Wabi, \"-fabi-version=12 (GCC 8.1) accidentally \"\n+\t\t    \"changes the calling convention for %qT\", t);\n+      return;\n+    }\n+\n   warning_at (loc, OPT_Wabi, \"the calling convention for %qT changes in \"\n-\t      \"-fabi-version=12 (GCC 8)\", t);\n+\t      \"-fabi-version=13 (GCC 8.2)\", t);\n   static bool explained = false;\n   if (!explained)\n     {\n@@ -4114,6 +4127,7 @@ type_has_nontrivial_copy_init (const_tree type)\n \n       bool saw_copy = false;\n       bool saw_non_deleted = false;\n+      bool saw_non_deleted_move = false;\n \n       if (CLASSTYPE_LAZY_MOVE_CTOR (t))\n \tsaw_copy = saw_non_deleted = true;\n@@ -4135,7 +4149,7 @@ type_has_nontrivial_copy_init (const_tree type)\n \tfor (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n \t  {\n \t    tree fn = *iter;\n-\t    if (copy_fn_p (fn) || move_fn_p (fn))\n+\t    if (copy_fn_p (fn))\n \t      {\n \t\tsaw_copy = true;\n \t\tif (!DECL_DELETED_FN (fn))\n@@ -4145,19 +4159,27 @@ type_has_nontrivial_copy_init (const_tree type)\n \t\t    break;\n \t\t  }\n \t      }\n+\t    else if (move_fn_p (fn))\n+\t      if (!DECL_DELETED_FN (fn))\n+\t\tsaw_non_deleted_move = true;\n \t  }\n \n       gcc_assert (saw_copy);\n \n-      if (saw_copy && !saw_non_deleted)\n-\t{\n-\t  if (warn_abi && abi_version_crosses (12))\n-\t    remember_deleted_copy (t);\n-\t  if (abi_version_at_least (12))\n-\t    return true;\n-\t}\n-\n-      return false;\n+      /* ABI v12 buggily ignored move constructors.  */\n+      bool v11nontriv = false;\n+      bool v12nontriv = !saw_non_deleted;\n+      bool v13nontriv = !saw_non_deleted && !saw_non_deleted_move;\n+      bool nontriv = (abi_version_at_least (13) ? v13nontriv\n+\t\t      : flag_abi_version == 12 ? v12nontriv\n+\t\t      : v11nontriv);\n+      bool warn_nontriv = (warn_abi_version >= 13 ? v13nontriv\n+\t\t\t   : warn_abi_version == 12 ? v12nontriv\n+\t\t\t   : v11nontriv);\n+      if (nontriv != warn_nontriv)\n+\tremember_deleted_copy (t);\n+\n+      return nontriv;\n     }\n   else\n     return 0;"}, {"sha": "eb33b569b8b1a46a7b79f9ed6f25a394b7016f1b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -2348,7 +2348,12 @@ implies @option{-fnew-inheriting-ctors}.\n \n Version 12, which first appeared in G++ 8, corrects the calling\n conventions for empty classes on the x86_64 target and for classes\n-with only deleted copy/move constructors.\n+with only deleted copy/move constructors.  It accidentally changes the\n+calling convention for classes with a deleted copy constructor and a\n+trivial move constructor.\n+\n+Version 13, which first appeared in G++ 8.2, fixes the accidental\n+change in version 12.\n \n See also @option{-Wabi}.\n \n@@ -2359,7 +2364,7 @@ works around mangling changes by creating an alias with the correct\n mangled name when defining a symbol with an incorrect mangled name.\n This switch specifies which ABI version to use for the alias.\n \n-With @option{-fabi-version=0} (the default), this defaults to 8 (GCC 5\n+With @option{-fabi-version=0} (the default), this defaults to 11 (GCC 7\n compatibility).  If another ABI version is explicitly selected, this\n defaults to 0.  For compatibility with GCC versions 3.2 through 4.9,\n use @option{-fabi-compat-version=2}."}, {"sha": "0533055328779ca32da0f398ed9cf35bf2a42e30", "filename": "gcc/testsuite/g++.dg/abi/invisiref2a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Finvisiref2a.C?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/86094\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fabi-version=12 -Wabi -fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump \"struct S &\" \"gimple\" } }\n+\n+struct S {\n+  S(S&&) = default;\n+  int i;\n+};\n+\n+S foo(S s)\t\t\t// { dg-warning \"calling convention\" }\n+{\n+  return s;\n+}"}, {"sha": "01a3541aa7d2db3ee25f919301900f266266451a", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a7a2308da1effd628f9f7959e1f5cabec918be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=34a7a2308da1effd628f9f7959e1f5cabec918be", "patch": "@@ -1,6 +1,6 @@\n // This testcase will need to be kept in sync with c_common_post_options.\n // { dg-options \"-fabi-version=0\" }\n \n-#if __GXX_ABI_VERSION != 1012\n+#if __GXX_ABI_VERSION != 1013\n #error \"Incorrect value of __GXX_ABI_VERSION\"\n #endif"}]}