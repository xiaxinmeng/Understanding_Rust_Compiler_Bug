{"sha": "72fbc381feb3f20f12ddaed9538fb1b719ffc164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJmYmMzODFmZWIzZjIwZjEyZGRhZWQ5NTM4ZmIxYjcxOWZmYzE2NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-13T15:54:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-13T15:54:15Z"}, "message": "Support ptr_mode != Pmode in x86_output_mi_thunk.\n\n2011-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (x86_output_mi_thunk): Support ptr_mode\n\t!= Pmode.\n\n\t* config/i386/i386.md (*addsi_1_zext): Renamed to ...\n\t(addsi_1_zext): This.\n\nFrom-SVN: r176238", "tree": {"sha": "560438f61d7d459c686608149f83818948f6748b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/560438f61d7d459c686608149f83818948f6748b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72fbc381feb3f20f12ddaed9538fb1b719ffc164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fbc381feb3f20f12ddaed9538fb1b719ffc164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72fbc381feb3f20f12ddaed9538fb1b719ffc164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fbc381feb3f20f12ddaed9538fb1b719ffc164/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbf32ca5be8629b07348051cb86811c022449349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf32ca5be8629b07348051cb86811c022449349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf32ca5be8629b07348051cb86811c022449349"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "ed493138eebf7330a54821f0035437e179e36620", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72fbc381feb3f20f12ddaed9538fb1b719ffc164", "patch": "@@ -1,3 +1,11 @@\n+2011-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (x86_output_mi_thunk): Support ptr_mode\n+\t!= Pmode.\n+\n+\t* config/i386/i386.md (*addsi_1_zext): Renamed to ...\n+\t(addsi_1_zext): This.\n+\n 2011-07-13  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* doc/tm.texi.in (TARGET_ASM_MERGEABLE_RODATA_PREFIX): Add hook."}, {"sha": "f643efcd58f30e92dbfed33b9ee69ae2004bfa0e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72fbc381feb3f20f12ddaed9538fb1b719ffc164", "patch": "@@ -29442,7 +29442,7 @@ x86_output_mi_thunk (FILE *file,\n   /* Adjust the this parameter by a value stored in the vtable.  */\n   if (vcall_offset)\n     {\n-      rtx vcall_addr, vcall_mem;\n+      rtx vcall_addr, vcall_mem, this_mem;\n       unsigned int tmp_regno;\n \n       if (TARGET_64BIT)\n@@ -29457,7 +29457,10 @@ x86_output_mi_thunk (FILE *file,\n \t}\n       tmp = gen_rtx_REG (Pmode, tmp_regno);\n \n-      emit_move_insn (tmp, gen_rtx_MEM (ptr_mode, this_reg));\n+      this_mem = gen_rtx_MEM (ptr_mode, this_reg);\n+      if (Pmode != ptr_mode)\n+\tthis_mem = gen_rtx_ZERO_EXTEND (Pmode, this_mem);\n+      emit_move_insn (tmp, this_mem);\n \n       /* Adjust the this parameter.  */\n       vcall_addr = plus_constant (tmp, vcall_offset);\n@@ -29469,8 +29472,14 @@ x86_output_mi_thunk (FILE *file,\n \t  vcall_addr = gen_rtx_PLUS (Pmode, tmp, tmp2);\n \t}\n \n-      vcall_mem = gen_rtx_MEM (Pmode, vcall_addr);\n-      emit_insn (ix86_gen_add3 (this_reg, this_reg, vcall_mem));\n+      vcall_mem = gen_rtx_MEM (ptr_mode, vcall_addr);\n+      if (Pmode != ptr_mode)\n+\temit_insn (gen_addsi_1_zext (this_reg,\n+\t\t\t\t     gen_rtx_REG (ptr_mode,\n+\t\t\t\t\t\t  REGNO (this_reg)),\n+\t\t\t\t     vcall_mem));\n+      else\n+\temit_insn (ix86_gen_add3 (this_reg, this_reg, vcall_mem));\n     }\n \n   /* If necessary, drop THIS back to its stack slot.  */"}, {"sha": "cf0fdf4fa211c688dbaccac1c854f8431f82c177", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72fbc381feb3f20f12ddaed9538fb1b719ffc164/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=72fbc381feb3f20f12ddaed9538fb1b719ffc164", "patch": "@@ -5508,7 +5508,7 @@\n ;; operands so proper swapping will be done in reload.  This allow\n ;; patterns constructed from addsi_1 to match.\n \n-(define_insn \"*addsi_1_zext\"\n+(define_insn \"addsi_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(zero_extend:DI\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r,r\")"}]}