{"sha": "a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "node_id": "C_kwDOANBUbNoAKGEyNjJmOTY5ZDZmZDkzNmY0ZmI1ZDllMWQ1NzU2YjBkY2JjOTI1YjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-07T10:50:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-07T11:51:19Z"}, "message": "tree-optimization/106866 - avoid dead abnormal edges from DCE\n\nWhen DCE clears cfun->calls_setjmp then suddenly we don't need\nany abnormal call edges anymore.  The following makes sure to\nprune them which otherwise can confuse other passes.\n\n\tPR tree-optimization/106866\n\t* tree-ssa-dce.cc (eliminate_unnecessary_stmts): When\n\twe changed cfun->calls_setjmp make sure to purge all\n\tabnormal call edges.\n\n\t* gcc.dg/uninit-pr106866.c: New testcase.", "tree": {"sha": "3d107e3e9889c1f142b00d5d509deee804858243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d107e3e9889c1f142b00d5d509deee804858243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04bb15e48ef8dd3d6a5ff30723c603cef3e0a3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bb15e48ef8dd3d6a5ff30723c603cef3e0a3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04bb15e48ef8dd3d6a5ff30723c603cef3e0a3c6"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "530e274118ca7bdda7739187c5cb59426d6a2789", "filename": "gcc/testsuite/gcc.dg/uninit-pr106866.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr106866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr106866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr106866.c?ref=a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-ipa-pure-const -Wuninitialized\" } */\n+\n+int n;\n+\n+void\n+empty (int)\n+{\n+}\n+\n+int\n+bar (int x)\n+{\n+  return n + x + 1;\n+}\n+\n+__attribute__ ((pure, returns_twice)) int\n+foo (void)\n+{\n+  int uninitialized;\n+\n+  if (n)\n+    {\n+      if (bar (0))\n+        return 0;\n+\n+      __builtin_unreachable ();\n+    }\n+\n+  while (uninitialized < 1) /* { dg-warning \"uninitialized\" } */\n+    {\n+      foo ();\n+      empty (bar (0) == foo ());\n+      ++uninitialized;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "54e5d8c2923ae2b93ad4041bfc5eadaf8d8936ad", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "patch": "@@ -1313,6 +1313,7 @@ eliminate_unnecessary_stmts (bool aggressive)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"\\nEliminating unnecessary statements:\\n\");\n \n+  bool had_setjmp = cfun->calls_setjmp;\n   clear_special_calls ();\n \n   /* Walking basic blocks and statements in reverse order avoids\n@@ -1496,19 +1497,48 @@ eliminate_unnecessary_stmts (bool aggressive)\n       something_changed |= remove_dead_phis (bb);\n     }\n \n-\n-  /* Since we don't track liveness of virtual PHI nodes, it is possible that we\n-     rendered some PHI nodes unreachable while they are still in use.\n-     Mark them for renaming.  */\n+  /* First remove queued edges.  */\n   if (!to_remove_edges.is_empty ())\n     {\n-      basic_block prev_bb;\n-\n       /* Remove edges.  We've delayed this to not get bogus debug stmts\n          during PHI node removal.  */\n       for (unsigned i = 0; i < to_remove_edges.length (); ++i)\n \tremove_edge (to_remove_edges[i]);\n       cfg_altered = true;\n+    }\n+  /* When we cleared calls_setjmp we can purge all abnormal edges.  Do so.  */\n+  if (cfun->calls_setjmp != had_setjmp)\n+    {\n+      gcc_assert (!cfun->calls_setjmp);\n+      /* Make sure we only remove the edges, not dominated blocks.  Using\n+\t gimple_purge_dead_abnormal_call_edges would do that and we\n+\t cannot free dominators yet.  */\n+      FOR_EACH_BB_FN (bb, cfun)\n+\tif (gcall *stmt = safe_dyn_cast <gcall *> (last_stmt (bb)))\n+\t  if (!stmt_can_make_abnormal_goto (stmt))\n+\t    {\n+\t      edge_iterator ei;\n+\t      edge e;\n+\t      for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n+\t\t{\n+\t\t  if (e->flags & EDGE_ABNORMAL)\n+\t\t    {\n+\t\t      if (e->flags & EDGE_FALLTHRU)\n+\t\t\te->flags &= ~EDGE_ABNORMAL;\n+\t\t      else\n+\t\t\tremove_edge (e);\n+\t\t      cfg_altered = true;\n+\t\t    }\n+\t\t  else\n+\t\t    ei_next (&ei);\n+\t\t}\n+\t    }\n+    }\n+\n+  /* Now remove the unreachable blocks.  */\n+  if (cfg_altered)\n+    {\n+      basic_block prev_bb;\n \n       find_unreachable_blocks ();\n \n@@ -1518,9 +1548,13 @@ eliminate_unnecessary_stmts (bool aggressive)\n \t{\n \t  prev_bb = bb->prev_bb;\n \n-\t  if (!bitmap_bit_p (bb_contains_live_stmts, bb->index)\n+\t  if ((bb_contains_live_stmts\n+\t       && !bitmap_bit_p (bb_contains_live_stmts, bb->index))\n \t      || !(bb->flags & BB_REACHABLE))\n \t    {\n+\t      /* Since we don't track liveness of virtual PHI nodes, it is\n+\t\t possible that we rendered some PHI nodes unreachable while\n+\t\t they are still in use.  Mark them for renaming.  */\n \t      for (gphi_iterator gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n \t\t   gsi_next (&gsi))\n \t\tif (virtual_operand_p (gimple_phi_result (gsi.phi ())))"}]}