{"sha": "589fe865e0e273a6694757ddd4bae1df884e6a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg5ZmU4NjVlMGUyNzNhNjY5NDc1N2RkZDRiYWUxZGY4ODRlNmE2ZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2004-01-17T22:11:58Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-01-17T22:11:58Z"}, "message": "final.c (SEEN_BB, [...]): Define.\n\n\t* final.c (SEEN_BB, SEEN_NOTE, SEEN_EMITTED): Define.\n\t(final_scan_insn): Update to take an additional SEEN argument.  Emit\n\ta line note after the prologue.  Make static.\n\t(line_note_exists): Remove.\n\t(final): Don't initialize line_note_exists.  Update call to\n\tfinal_scan_insn.\n\t* output.h (final_scan_insn): Remove prologue.\n\t* function.c (set_insn_locators): Update comment.\n\t(thread_prologue_and_epilogue_insns): Add a comment.\n\nFrom-SVN: r76060", "tree": {"sha": "7de4afefa966b929d0319fac40149b2d67c66d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de4afefa966b929d0319fac40149b2d67c66d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/589fe865e0e273a6694757ddd4bae1df884e6a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589fe865e0e273a6694757ddd4bae1df884e6a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589fe865e0e273a6694757ddd4bae1df884e6a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589fe865e0e273a6694757ddd4bae1df884e6a6d/comments", "author": null, "committer": null, "parents": [{"sha": "59415997a39850db94ecb3b67ebda2390be45632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59415997a39850db94ecb3b67ebda2390be45632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59415997a39850db94ecb3b67ebda2390be45632"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "a40dc42d511bb5eb299a732ddb4b1541d5f1953e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=589fe865e0e273a6694757ddd4bae1df884e6a6d", "patch": "@@ -1,3 +1,15 @@\n+2004-01-17  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* final.c (SEEN_BB, SEEN_NOTE, SEEN_EMITTED): Define.\n+\t(final_scan_insn): Update to take an additional SEEN argument.  Emit\n+\ta line note after the prologue.  Make static.\n+\t(line_note_exists): Remove.\n+\t(final): Don't initialize line_note_exists.  Update call to\n+\tfinal_scan_insn.\n+\t* output.h (final_scan_insn): Remove prologue.\n+\t* function.c (set_insn_locators): Update comment.\n+\t(thread_prologue_and_epilogue_insns): Add a comment.\n+\n 2004-01-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/10781"}, {"sha": "c146f189419b4627672fe5bb25bd199a9f16f107", "filename": "gcc/final.c", "status": "modified", "additions": 53, "deletions": 33, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=589fe865e0e273a6694757ddd4bae1df884e6a6d", "patch": "@@ -111,6 +111,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define HAVE_READONLY_DATA_SECTION 0\n #endif\n \n+/* Bitflags used by final_scan_insn.  */\n+#define SEEN_BB\t\t1\n+#define SEEN_NOTE\t2\n+#define SEEN_EMITTED\t4\n+\n /* Last insn processed by final_scan_insn.  */\n static rtx debug_insn;\n rtx current_output_insn;\n@@ -201,10 +206,6 @@ rtx final_sequence;\n static int dialect_number;\n #endif\n \n-/* Indexed by line number, nonzero if there is a note for that line.  */\n-\n-static char *line_note_exists;\n-\n #ifdef HAVE_conditional_execution\n /* Nonnull if the insn currently being emitted was a COND_EXEC pattern.  */\n rtx current_insn_predicate;\n@@ -234,6 +235,7 @@ static int final_addr_vec_align (rtx);\n #ifdef HAVE_ATTR_length\n static int align_fuzz (rtx, rtx, int, unsigned);\n #endif\n+static rtx final_scan_insn (rtx, FILE *, int, int, int, int *);\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -1500,16 +1502,15 @@ void\n final (rtx first, FILE *file, int optimize, int prescan)\n {\n   rtx insn;\n-  int max_line = 0;\n   int max_uid = 0;\n+  int seen = 0;\n \n   last_ignored_compare = 0;\n \n-  /* Make a map indicating which line numbers appear in this function.\n-     When producing SDB debugging info, delete troublesome line number\n+#ifdef SDB_DEBUGGING_INFO\n+  /* When producing SDB debugging info, delete troublesome line number\n      notes from inlined functions in other files as well as duplicate\n      line number notes.  */\n-#ifdef SDB_DEBUGGING_INFO\n   if (write_symbols == SDB_DEBUG)\n     {\n       rtx last = 0;\n@@ -1518,34 +1519,22 @@ final (rtx first, FILE *file, int optimize, int prescan)\n \t  {\n \t    if ((RTX_INTEGRATED_P (insn)\n \t\t && strcmp (NOTE_SOURCE_FILE (insn), main_input_filename) != 0)\n-\t\t || (last != 0\n-\t\t     && NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last)\n-\t\t     && NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last)))\n+\t\t|| (last != 0\n+\t\t    && NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last)\n+\t\t    && NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last)))\n \t      {\n \t\tdelete_insn (insn);\t/* Use delete_note.  */\n \t\tcontinue;\n \t      }\n \t    last = insn;\n-\t    if (NOTE_LINE_NUMBER (insn) > max_line)\n-\t      max_line = NOTE_LINE_NUMBER (insn);\n \t  }\n     }\n-  else\n #endif\n-    {\n-      for (insn = first; insn; insn = NEXT_INSN (insn))\n-\tif (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > max_line)\n-\t  max_line = NOTE_LINE_NUMBER (insn);\n-    }\n-\n-  line_note_exists = xcalloc (max_line + 1, sizeof (char));\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n       if (INSN_UID (insn) > max_uid)       /* Find largest UID.  */\n \tmax_uid = INSN_UID (insn);\n-      if (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > 0)\n-\tline_note_exists[NOTE_LINE_NUMBER (insn)] = 1;\n #ifdef HAVE_cc0\n       /* If CC tracking across branches is enabled, record the insn which\n \t jumps to each branch only reached from one place.  */\n@@ -1581,11 +1570,8 @@ final (rtx first, FILE *file, int optimize, int prescan)\n \tinsn_current_address = INSN_ADDRESSES (INSN_UID (insn));\n #endif /* HAVE_ATTR_length */\n \n-      insn = final_scan_insn (insn, file, optimize, prescan, 0);\n+      insn = final_scan_insn (insn, file, optimize, prescan, 0, &seen);\n     }\n-\n-  free (line_note_exists);\n-  line_note_exists = NULL;\n }\n \f\n const char *\n@@ -1644,11 +1630,18 @@ output_alternate_entry_point (FILE *file, rtx insn)\n    Value returned is the next insn to be scanned.\n \n    NOPEEPHOLES is the flag to disallow peephole processing (currently\n-   used for within delayed branch sequence output).  */\n+   used for within delayed branch sequence output).\n \n-rtx\n+   SEEN is used to track the end of the prologue, for emitting\n+   debug information.  We force the emission of a line note after\n+   both NOTE_INSN_PROLOGUE_END and NOTE_INSN_FUNCTION_BEG, or\n+   at the beginning of the second basic block, whichever comes\n+   first.  */\n+\n+static rtx\n final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n-\t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED)\n+\t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED,\n+\t\t int *seen)\n {\n #ifdef HAVE_cc0\n   rtx set;\n@@ -1687,6 +1680,15 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s basic block %d\\n\",\n \t\t     ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);\n+\n+\t  if ((*seen & (SEEN_EMITTED | SEEN_BB)) == SEEN_BB)\n+\t    {\n+\t      *seen |= SEEN_EMITTED;\n+\t      last_filename = NULL;\n+\t    }\n+\t  else\n+\t    *seen |= SEEN_BB;\n+\n \t  break;\n \n \tcase NOTE_INSN_EH_REGION_BEG:\n@@ -1702,6 +1704,15 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \tcase NOTE_INSN_PROLOGUE_END:\n \t  (*targetm.asm_out.function_end_prologue) (file);\n \t  profile_after_prologue (file);\n+\n+\t  if ((*seen & (SEEN_EMITTED | SEEN_NOTE)) == SEEN_NOTE)\n+\t    {\n+\t      *seen |= SEEN_EMITTED;\n+\t      last_filename = NULL;\n+\t    }\n+\t  else\n+\t    *seen |= SEEN_NOTE;\n+\n \t  break;\n \n \tcase NOTE_INSN_EPILOGUE_BEG:\n@@ -1711,6 +1722,15 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \tcase NOTE_INSN_FUNCTION_BEG:\n \t  app_disable ();\n \t  (*debug_hooks->end_prologue) (last_linenum, last_filename);\n+\n+\t  if ((*seen & (SEEN_EMITTED | SEEN_NOTE)) == SEEN_NOTE)\n+\t    {\n+\t      *seen |= SEEN_EMITTED;\n+\t      last_filename = NULL;\n+\t    }\n+\t  else\n+\t    *seen |= SEEN_NOTE;\n+\n \t  break;\n \n \tcase NOTE_INSN_BLOCK_BEG:\n@@ -2084,7 +2104,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t       thought unnecessary.  If that happens, cancel this sequence\n \t       and cause that insn to be restored.  */\n \n-\t    next = final_scan_insn (XVECEXP (body, 0, 0), file, 0, prescan, 1);\n+\t    next = final_scan_insn (XVECEXP (body, 0, 0), file, 0, prescan, 1, seen);\n \t    if (next != XVECEXP (body, 0, 1))\n \t      {\n \t\tfinal_sequence = 0;\n@@ -2098,7 +2118,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t/* We loop in case any instruction in a delay slot gets\n \t\t   split.  */\n \t\tdo\n-\t\t  insn = final_scan_insn (insn, file, 0, prescan, 1);\n+\t\t  insn = final_scan_insn (insn, file, 0, prescan, 1, seen);\n \t\twhile (insn != next);\n \t      }\n #ifdef DBR_OUTPUT_SEQEND\n@@ -2302,7 +2322,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t\tfor (note = NEXT_INSN (insn); note != next;\n \t\t     note = NEXT_INSN (note))\n-\t\t  final_scan_insn (note, file, optimize, prescan, nopeepholes);\n+\t\t  final_scan_insn (note, file, optimize, prescan, nopeepholes, seen);\n \n \t\t/* In case this is prescan, put the notes\n \t\t   in proper position for later rescan.  */"}, {"sha": "2b710b42aba86495dd8f570efdcd7879f6252117", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=589fe865e0e273a6694757ddd4bae1df884e6a6d", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GCC.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -7254,7 +7254,7 @@ record_insns (rtx insns, varray_type *vecp)\n     }\n }\n \n-/* Set the specified locator to the insn chain.  */\n+/* Set the locator of the insn chain starting at INSN to LOC.  */\n static void\n set_insn_locators (rtx insn, int loc)\n {\n@@ -7895,6 +7895,7 @@ thread_prologue_and_epilogue_insns (rtx f ATTRIBUTE_UNUSED)\n #endif\n \n #ifdef HAVE_prologue\n+  /* This is probably all useless now that we use locators.  */\n   if (prologue_end)\n     {\n       rtx insn, prev;"}, {"sha": "5c9497a3dff63de18f2d0345a14a08280bdfce0a", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589fe865e0e273a6694757ddd4bae1df884e6a6d/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=589fe865e0e273a6694757ddd4bae1df884e6a6d", "patch": "@@ -1,7 +1,7 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -68,11 +68,6 @@ extern void final_end_function (void);\n /* Output assembler code for some insns: all or part of a function.  */\n extern void final (rtx, FILE *, int, int);\n \n-/* The final scan for one insn, INSN.  Args are same as in `final', except\n-   that INSN is the insn being scanned.  Value returned is the next insn to\n-   be scanned.  */\n-extern rtx final_scan_insn (rtx, FILE *, int, int, int);\n-\n /* Replace a SUBREG with a REG or a MEM, based on the thing it is a\n    subreg of.  */\n extern rtx alter_subreg (rtx *);"}]}