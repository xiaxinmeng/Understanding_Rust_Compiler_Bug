{"sha": "580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwZDQwZThkYTQ1ZDRhNTBlZGI1ZDMxZDdiZTliNWRkYmMzODU5MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:14:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:14:28Z"}, "message": "[multiple changes]\n\n2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.ads, checks.ads: Minor comment reformatting.\n\n2014-10-23  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_eval (Test_In_Range): Disable removal of range_check for\n\tVM targets.\n\n2014-10-23  Robert Dewar  <dewar@adacore.com>\n\n\t* erroutc.adb (Validate_Specific_Warnings): Fix test for -W\n\tmessages, which got disabled when we unconditionally added an\n\tasterisk at the start of the string.\n\n2014-10-23  Vincent Celier  <celier@adacore.com>\n\n\t* gnatls.adb: Ensure that \"gnatls -l\" works even when there is\n\tno default runtime.\n\n2014-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): When the parent is\n\tuntagged and has discriminants, build the implicit full view after\n\tbuilding the derived type. Capture original declaration and type\n\there instead of...\n\t(Copy_And_Build): ...here.\n\t* sem_type.adb (Full_View_Covers): Handle the Underlying_Full_View.\n\nFrom-SVN: r216582", "tree": {"sha": "1fd29aed49407abbf68eb7dfa1d1fe5a10d88d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd29aed49407abbf68eb7dfa1d1fe5a10d88d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/comments", "author": null, "committer": null, "parents": [{"sha": "2934b84ad8624e08f1390f9bf2cf95a0093f4f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2934b84ad8624e08f1390f9bf2cf95a0093f4f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2934b84ad8624e08f1390f9bf2cf95a0093f4f1b"}], "stats": {"total": 106, "additions": 74, "deletions": 32}, "files": [{"sha": "32777f6617e29bd0ff069b2b5d9cf670cf830f00", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -1,3 +1,32 @@\n+2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.ads, checks.ads: Minor comment reformatting.\n+\n+2014-10-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_eval (Test_In_Range): Disable removal of range_check for\n+\tVM targets.\n+\n+2014-10-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* erroutc.adb (Validate_Specific_Warnings): Fix test for -W\n+\tmessages, which got disabled when we unconditionally added an\n+\tasterisk at the start of the string.\n+\n+2014-10-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatls.adb: Ensure that \"gnatls -l\" works even when there is\n+\tno default runtime.\n+\n+2014-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): When the parent is\n+\tuntagged and has discriminants, build the implicit full view after\n+\tbuilding the derived type. Capture original declaration and type\n+\there instead of...\n+\t(Copy_And_Build): ...here.\n+\t* sem_type.adb (Full_View_Covers): Handle the Underlying_Full_View.\n+\n 2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* checks.adb (Ensure_Valid): Update the subprogram"}, {"sha": "d3e002cf18aeff601f3491d482067511c9e74b0a", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -875,7 +875,8 @@ package Checks is\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n    --  is the low or the high bound of a range. These three optional arguments\n    --  signal Remove_Side_Effects to create an external symbol of the form\n-   --  Chars (Related_Id)_FIRST/_LAST.\n+   --  Chars (Related_Id)_FIRST/_LAST. For suggested use of these parameters\n+   --  see the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    function Expr_Known_Valid (Expr : Node_Id) return Boolean;\n    --  This function tests it the value of Expr is known to be valid in the\n@@ -900,7 +901,8 @@ package Checks is\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n    --  is the low or the high bound of a range. These three optional arguments\n    --  signal Remove_Side_Effects to create an external symbol of the form\n-   --  Chars (Related_Id)_FIRST/_LAST.\n+   --  Chars (Related_Id)_FIRST/_LAST. For suggested use of these parameters\n+   --  see the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    procedure Null_Exclusion_Static_Checks (N : Node_Id);\n    --  Ada 2005 (AI-231): Check bad usages of the null-exclusion issue"}, {"sha": "f4f1dfd1c8d4d1f0c4cd324b552d4597b5afb695", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -1537,10 +1537,11 @@ package body Erroutc is\n                elsif not SWE.Used\n \n                  --  Do not issue this warning for -Wxxx messages since the\n-                 --  back-end doesn't report the information.\n+                 --  back-end doesn't report the information. Note that there\n+                 --  is always an asterisk at the start of every message.\n \n                  and then not\n-                   (SWE.Msg'Length > 2 and then SWE.Msg (1 .. 2) = \"-W\")\n+                   (SWE.Msg'Length > 3 and then SWE.Msg (2 .. 3) = \"-W\")\n                then\n                   Eproc.all\n                     (\"?W?no warning suppressed by this pragma\", SWE.Start);"}, {"sha": "770b23c2c03ad6b808ba8fc92ae0958df926ddf2", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -388,7 +388,8 @@ package Exp_Util is\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n    --  is the low or the high bound of a range. These three optional arguments\n    --  signal Remove_Side_Effects to create an external symbol of the form\n-   --  Chars (Related_Id)_FIRST/_LAST.\n+   --  Chars (Related_Id)_FIRST/_LAST. For suggested use of these parameters\n+   --  see the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    function Duplicate_Subexpr_Move_Checks\n      (Exp          : Node_Id;\n@@ -858,7 +859,8 @@ package Exp_Util is\n    --  is the low or the high bound of a range. These three optional arguments\n    --  signal Remove_Side_Effects to create an external symbol of the form\n    --  Chars (Related_Id)_FIRST/_LAST. If Related_Id is set, the exactly one\n-   --  of the Is_xxx_Bound flags must be set.\n+   --  of the Is_xxx_Bound flags must be set. For use of these parameters see\n+   --  the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    function Represented_As_Scalar (T : Entity_Id) return Boolean;\n    --  Returns True iff the implementation of this type in code generation"}, {"sha": "05ff3aee886cc23c433caa25f04f0e0ba965a4c7", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -1595,12 +1595,18 @@ begin\n \n    --  If -l (output license information) is given, it must be the only switch\n \n-   if License and then Arg_Count /= 2 then\n-      Set_Standard_Error;\n-      Write_Str (\"Can't use -l with another switch\");\n-      Write_Eol;\n-      Try_Help;\n-      Exit_Program (E_Fatal);\n+   if License then\n+      if Arg_Count = 2 then\n+         Output_License_Information;\n+         Exit_Program (E_Success);\n+\n+      else\n+         Set_Standard_Error;\n+         Write_Str (\"Can't use -l with another switch\");\n+         Write_Eol;\n+         Try_Help;\n+         Exit_Program (E_Fatal);\n+      end if;\n    end if;\n \n    --  Handle --RTS switch\n@@ -1739,13 +1745,6 @@ begin\n       Usage;\n    end if;\n \n-   --  Output license information when requested\n-\n-   if License then\n-      Output_License_Information;\n-      Exit_Program (E_Success);\n-   end if;\n-\n    if not More_Lib_Files then\n       if not Print_Usage and then not Verbose_Mode then\n          if Argument_Count = 0 then"}, {"sha": "aab006c478e5eb1530041b9465788dad9d5bc687", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -6671,7 +6671,8 @@ package body Sem_Ch3 is\n       Loc       : constant Source_Ptr := Sloc (N);\n       Par_Base  : constant Entity_Id  := Base_Type (Parent_Type);\n       Par_Scope : constant Entity_Id  := Scope (Par_Base);\n-      Full_Der  : Entity_Id           := Empty;\n+      Full_N    : constant Node_Id    := New_Copy_Tree (N);\n+      Full_Der  : Entity_Id           := New_Copy (Derived_Type);\n       Full_P    : Entity_Id;\n \n       procedure Build_Full_Derivation;\n@@ -6718,7 +6719,6 @@ package body Sem_Ch3 is\n       --------------------\n \n       procedure Copy_And_Build is\n-         Full_N      : Node_Id;\n          Full_Parent : Entity_Id := Parent_Type;\n \n       begin\n@@ -6755,8 +6755,6 @@ package body Sem_Ch3 is\n             --  is originally a private declaration. Indicate that full view\n             --  is internally generated.\n \n-            Full_N := New_Copy_Tree (N);\n-            Full_Der := New_Copy (Derived_Type);\n             Set_Comes_From_Source (Full_N, False);\n             Set_Comes_From_Source (Full_Der, False);\n             Set_Parent (Full_Der, Full_N);\n@@ -6944,6 +6942,15 @@ package body Sem_Ch3 is\n          return;\n \n       elsif Has_Discriminants (Parent_Type) then\n+         --  Build partial view of derived type from partial view of parent.\n+         --  This must be done before building the full derivation because the\n+         --  second derivation will modify the discriminants of the first and\n+         --  the discriminants are chained with the rest of the components in\n+         --  the full derivation.\n+\n+         Build_Derived_Record_Type\n+           (N, Parent_Type, Derived_Type, Derive_Subps);\n+\n          --  Build the full derivation if this is not the anonymous derived\n          --  base type created by Build_Derived_Record_Type in the constrained\n          --  case (see point 5. of its head comment) since we build it for the\n@@ -6954,15 +6961,6 @@ package body Sem_Ch3 is\n            and then not Is_Itype (Derived_Type)\n            and then not (Ekind (Full_View (Parent_Type)) in Protected_Kind)\n          then\n-            Build_Full_Derivation;\n-         end if;\n-\n-         --  Build partial view of derived type from partial view of parent\n-\n-         Build_Derived_Record_Type\n-           (N, Parent_Type, Derived_Type, Derive_Subps);\n-\n-         if Present (Full_Der) then\n             declare\n                Der_Base   : constant Entity_Id := Base_Type (Derived_Type);\n                Discr      : Entity_Id;\n@@ -6975,6 +6973,8 @@ package body Sem_Ch3 is\n                --  being built is a full view and the full derivation can\n                --  only be its underlying full view.\n \n+               Build_Full_Derivation;\n+\n                if not Is_Completion then\n                   Set_Full_View (Derived_Type, Full_Der);\n                else"}, {"sha": "43db1c74cf18f04efae4500a2102257f0560b6f3", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -52,6 +52,7 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n+with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n \n package body Sem_Eval is\n@@ -6197,6 +6198,12 @@ package body Sem_Eval is\n         and then Is_Known_Valid (Typ)\n         and then Esize (Etype (N)) <= Esize (Typ)\n         and then not Has_Biased_Representation (Etype (N))\n+\n+        --  This check cannot be disabled under VM targets because in some\n+        --  unusual cases the backend of the native compiler raises a run-time\n+        --  exception but the virtual machines do not raise any exception.\n+\n+        and then VM_Target = No_VM\n       then\n          return In_Range;\n "}, {"sha": "4f83aaed4038bafd66c86e9bf70c3a7d25293e60", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/580d40e8da45d4a50edb5d31d7be9b5ddbc38590/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "patch": "@@ -766,6 +766,8 @@ package body Sem_Type is\n              and then\n               ((Present (Full_View (Typ1))\n                   and then Covers (Full_View (Typ1), Typ2))\n+                or else (Present (Underlying_Full_View (Typ1))\n+                           and then Covers (Underlying_Full_View (Typ1), Typ2))\n                 or else Base_Type (Typ1) = Typ2\n                 or else Base_Type (Typ2) = Typ1);\n       end Full_View_Covers;"}]}