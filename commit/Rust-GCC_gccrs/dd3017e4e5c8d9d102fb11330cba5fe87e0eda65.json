{"sha": "dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzMDE3ZTRlNWM4ZDlkMTAyZmIxMTMzMGNiYTVmZTg3ZTBlZGE2NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-24T21:38:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-24T21:38:08Z"}, "message": "objc-act.c: Change annotate_with_locus to SET_EXPR_LOCATION throughout.\n\nobjc:\n\t* objc-act.c: Change annotate_with_locus to SET_EXPR_LOCATION\n\tthroughout.\n\t(objc_init): Only set input_line to 0 #ifndef USE_MAPPED_LOCATION.\n\t(build_selector_translation_table): Use %J in diagnostic\n\tinstead of diddling input_line.  Fix spelling.\ntestsuite:\n\t* objc.dg/proto-lossage-4.m: Use long instead of int to avoid\n\textra diagnostics on targets with 64-bit pointers.\n\t* objc.dg/selector-1.m: Adjust dg-warning regexp.\n\nFrom-SVN: r88072", "tree": {"sha": "781ebf2315847f7b39e8ba9bdf4681e8afcaefe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781ebf2315847f7b39e8ba9bdf4681e8afcaefe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/comments", "author": null, "committer": null, "parents": [{"sha": "2fbebc713bf06661a0181a47a096b8d2f5770453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbebc713bf06661a0181a47a096b8d2f5770453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbebc713bf06661a0181a47a096b8d2f5770453"}], "stats": {"total": 81, "additions": 45, "deletions": 36}, "files": [{"sha": "a7c2c65e281d510df20eae3da9bd043bc90c824c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "patch": "@@ -1,3 +1,11 @@\n+2004-09-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* objc-act.c: Change annotate_with_locus to SET_EXPR_LOCATION\n+\tthroughout.\n+\t(objc_init): Only set input_line to 0 #ifndef USE_MAPPED_LOCATION.\n+\t(build_selector_translation_table): Use %J in diagnostic\n+\tinstead of diddling input_line.  Fix spelling.\n+\n 2004-09-21  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (objc_fold_objc_type_ref): New function.\n@@ -225,7 +233,7 @@\n \t(gen_type_name, gen_type_name_0): New functions.\n \t(gen_method_decl): Remove second parameter; call gen_type_name()\n \tinstead of gen_declaration_1().\n-\t(dump_interface): Adjust calls to gen_declaration() and \n+\t(dump_interface): Adjust calls to gen_declaration() and\n \tgen_method_decl(); do not allocate a separate string buffer.\n \t(init_objc): Allocate a larger string buffer to accommodate\n \tdump_interface(); adjust call to build_module_descriptor();\n@@ -263,7 +271,7 @@\n \tobjc_check_decl, build_encode_expr): Remove prototypes.\n \t(imp_count, cat_count): Make GGC-aware.\n \t(OBJC_SET_TYPE_NAME): New macro.\n-\t\n+\n 2004-09-03  Ziemowit Laski  <zlaski@apple.com>\n \n \t* config-lang.in: Update copyright notice.\n@@ -292,15 +300,15 @@\n \t(build_protocol_expr): Rename prototype to objc_build_prototype_expr().\n \t(build_objc_string_object): Rename prototype to\n \tobjc_build_string_object().\n-\t\n+\n 2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (lookup_interface): Make function 'static' and add a\n \tlocal prototype.\n \t(objc_check_decl, get_class_reference, objc_declare_alias,\n \tobjc_declare_class, objc_is_object_ptr): Call objc_is_class_name()\n \tinstead of is_class_name().\n-\t(get_super_receiver, objc_clear_super_receiver): Call \n+\t(get_super_receiver, objc_clear_super_receiver): Call\n \tobjc_get_current_scope() instead of get_current_scope().\n \t(is_class_name): Rename to objc_is_class_name.\n \t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n@@ -324,11 +332,11 @@\n \t(LANG_HOOKS_FINISH, LANG_HOOKS_INIT_OPTIONS,\n \tLANG_HOOKS_INITIALIZE_DIAGNOSTICS, LANG_HOOKS_HANDLE_OPTION,\n \tLANG_HOOKS_MISSING_ARGUMENT, LANG_HOOKS_POST_OPTIONS,\n-\tLANG_HOOKS_GET_ALIAS_SET, LANG_HOOKS_SAFE_FROM_P, \n-\tLANG_HOOKS_EXPAND_EXPR, LANG_HOOKS_MARK_ADDRESSABLE, \n+\tLANG_HOOKS_GET_ALIAS_SET, LANG_HOOKS_SAFE_FROM_P,\n+\tLANG_HOOKS_EXPAND_EXPR, LANG_HOOKS_MARK_ADDRESSABLE,\n \tLANG_HOOKS_PARSE_FILE, LANG_HOOKS_TRUTHVALUE_CONVERSION,\n \tLANG_HOOKS_FINISH_INCOMPLETE_DECL, LANG_HOOKS_UNSAFE_FOR_REEVAL,\n-\tLANG_HOOKS_STATICP, LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \n+\tLANG_HOOKS_STATICP, LANG_HOOKS_SET_DECL_ASSEMBLER_NAME,\n \tLANG_HOOKS_NO_BODY_BLOCKS, LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL,\n \tLANG_HOOKS_PRINT_IDENTIFIER, LANG_HOOKS_FUNCTION_ENTER_NESTED,\n \tLANG_HOOKS_FUNCTION_LEAVE_NESTED, LANG_HOOKS_DUP_LANG_SPECIFIC_DECL,"}, {"sha": "2743688c641f1d18ef199c2375e0d8790e1e8c98", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "patch": "@@ -534,10 +534,12 @@ objc_init (void)\n #endif\n     return false;\n \n+#ifndef USE_MAPPED_LOCATION\n   /* Force the line number back to 0; check_newline will have\n      raised it to 1, which will make the builtin functions appear\n      not to be built in.  */\n   input_line = 0;\n+#endif\n \n   /* If gen_declaration desired, open the output file.  */\n   if (flag_gen_declaration)\n@@ -2305,15 +2307,8 @@ build_selector_translation_table (void)\n               }\n           }\n         if (!found)\n-          {\n-            /* Adjust line number for warning message.  */\n-            int save_lineno = input_line;\n-            if (flag_next_runtime && TREE_PURPOSE (chain))\n-              input_line = DECL_SOURCE_LINE (TREE_PURPOSE (chain));\n-            warning (\"creating selector for non existant method %s\",\n-                     IDENTIFIER_POINTER (TREE_VALUE (chain)));\n-            input_line = save_lineno;\n-          }\n+\t  warning (\"%Jcreating selector for nonexistent method %qE\",\n+\t\t   TREE_PURPOSE (chain), TREE_VALUE (chain));\n       }\n \n       expr = build_selector (TREE_VALUE (chain));\n@@ -3031,11 +3026,11 @@ next_sjlj_build_catch_list (void)\n     {\n       t = build (MODIFY_EXPR, void_type_node, cur_try_context->rethrow_decl,\n \t\t cur_try_context->caught_decl);\n-      annotate_with_locus (t, cur_try_context->end_catch_locus);\n+      SET_EXPR_LOCATION (t, cur_try_context->end_catch_locus);\n       append_to_statement_list (t, last);\n \n       t = next_sjlj_build_try_exit ();\n-      annotate_with_locus (t, cur_try_context->end_catch_locus);\n+      SET_EXPR_LOCATION (t, cur_try_context->end_catch_locus);\n       append_to_statement_list (t, last);\n     }\n \n@@ -3096,18 +3091,18 @@ next_sjlj_build_try_catch_finally (void)\n \n   /* Build the outermost varible binding level.  */\n   bind = build (BIND_EXPR, void_type_node, rethrow_decl, NULL, NULL);\n-  annotate_with_locus (bind, cur_try_context->try_locus);\n+  SET_EXPR_LOCATION (bind, cur_try_context->try_locus);\n   TREE_SIDE_EFFECTS (bind) = 1;\n \n   /* Initialize rethrow_decl.  */\n   t = build (MODIFY_EXPR, void_type_node, rethrow_decl,\n \t     convert (objc_object_type, null_pointer_node));\n-  annotate_with_locus (t, cur_try_context->try_locus);\n+  SET_EXPR_LOCATION (t, cur_try_context->try_locus);\n   append_to_statement_list (t, &BIND_EXPR_BODY (bind));\n \n   /* Build the outermost TRY_FINALLY_EXPR.  */\n   try_fin = build (TRY_FINALLY_EXPR, void_type_node, NULL, NULL);\n-  annotate_with_locus (try_fin, cur_try_context->try_locus);\n+  SET_EXPR_LOCATION (try_fin, cur_try_context->try_locus);\n   TREE_SIDE_EFFECTS (try_fin) = 1;\n   append_to_statement_list (try_fin, &BIND_EXPR_BODY (bind));\n \n@@ -3127,11 +3122,11 @@ next_sjlj_build_try_catch_finally (void)\n     }\n   else\n     catch_seq = next_sjlj_build_exc_extract (rethrow_decl);\n-  annotate_with_locus (catch_seq, cur_try_context->end_try_locus);\n+  SET_EXPR_LOCATION (catch_seq, cur_try_context->end_try_locus);\n \n   /* Build the main register-and-try if statement.  */\n   t = next_sjlj_build_enter_and_setjmp ();\n-  annotate_with_locus (t, cur_try_context->try_locus);\n+  SET_EXPR_LOCATION (t, cur_try_context->try_locus);\n   COND_EXPR_THEN (t) = catch_seq;\n   COND_EXPR_ELSE (t) = cur_try_context->try_body;\n   TREE_OPERAND (try_fin, 0) = t;\n@@ -3141,7 +3136,7 @@ next_sjlj_build_try_catch_finally (void)\n   t = build_stmt (COND_EXPR,\n \t\t  lang_hooks.truthvalue_conversion (rethrow_decl),\n \t\t  NULL, t);\n-  annotate_with_locus (t, cur_try_context->finally_locus);\n+  SET_EXPR_LOCATION (t, cur_try_context->finally_locus);\n   append_to_statement_list (t, &TREE_OPERAND (try_fin, 1));\n \n   append_to_statement_list (cur_try_context->finally_body,\n@@ -3152,7 +3147,7 @@ next_sjlj_build_try_catch_finally (void)\n   t = build_stmt (COND_EXPR,\n \t\t  lang_hooks.truthvalue_conversion (rethrow_decl),\n \t\t  t, NULL);\n-  annotate_with_locus (t, cur_try_context->end_finally_locus);\n+  SET_EXPR_LOCATION (t, cur_try_context->end_finally_locus);\n   append_to_statement_list (t, &TREE_OPERAND (try_fin, 1));\n \n   return bind;\n@@ -3293,12 +3288,12 @@ objc_finish_try_stmt (void)\n       if (c->catch_list)\n \t{\n           stmt = build_stmt (TRY_CATCH_EXPR, stmt, c->catch_list);\n-\t  annotate_with_locus (stmt, cur_try_context->try_locus);\n+\t  SET_EXPR_LOCATION (stmt, cur_try_context->try_locus);\n \t}\n       if (c->finally_body)\n \t{\n \t  stmt = build_stmt (TRY_FINALLY_EXPR, stmt, c->finally_body);\n-\t  annotate_with_locus (stmt, cur_try_context->try_locus);\n+\t  SET_EXPR_LOCATION (stmt, cur_try_context->try_locus);\n \t}\n     }\n   add_stmt (stmt);\n@@ -3345,13 +3340,13 @@ objc_build_synchronized (location_t start_locus, tree mutex, tree body)\n   mutex = save_expr (mutex);\n   args = tree_cons (NULL, mutex, NULL);\n   call = build_function_call (objc_sync_enter_decl, args);\n-  annotate_with_locus (call, start_locus);\n+  SET_EXPR_LOCATION (call, start_locus);\n   add_stmt (call);\n \n   /* Build the mutex unlock.  */\n   args = tree_cons (NULL, mutex, NULL);\n   call = build_function_call (objc_sync_exit_decl, args);\n-  annotate_with_locus (call, input_location);\n+  SET_EXPR_LOCATION (call, input_location);\n \n   /* Put the that and the body in a TRY_FINALLY.  */\n   objc_begin_try_stmt (start_locus, body);"}, {"sha": "fbf0a5addb5c118e11c3eb65a9c5c3c47b4c9a09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* objc.dg/proto-lossage-4.m: Use long instead of int to avoid\n+\textra diagnostics on targets with 64-bit pointers.\n+\t* objc.dg/selector-1.m: Adjust dg-warning regexp.\n+\n 2004-09-24  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/17188"}, {"sha": "447e67e12e65d82638931fe811b8a4cacdf51f1e", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "patch": "@@ -7,25 +7,25 @@\n typedef struct objc_object { struct objc_class *class_pointer; } *id;\n \n @protocol Proto\n-- (int)someValue;\n+- (long)someValue;\n @end\n \n @interface Obj\n-- (int)anotherValue;\n+- (long)anotherValue;\n @end\n \n-int foo(void) {\n-  int receiver = 2;\n+long foo(void) {\n+  long receiver = 2;\n   Obj *objrcvr;\n   Obj <Proto> *objrcvr2;\n \n-  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .int( )?.\" } */\n+  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 22 } */\n /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 22 } */\n /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 22 } */\n /* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 22 } */\n \n-  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .int( )?.\" } */\n+  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n /* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 28 } */\n   \n   receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */"}, {"sha": "b9cc5e0807d7147b1bf54c9aa0f0d10e59b9d0bf", "filename": "gcc/testsuite/objc.dg/selector-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3017e4e5c8d9d102fb11330cba5fe87e0eda65/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-1.m?ref=dd3017e4e5c8d9d102fb11330cba5fe87e0eda65", "patch": "@@ -19,7 +19,7 @@ - (void) bar\n - (void) foo\n {\n   SEL a,b,c;\n-  a = @selector(b1ar); /* { dg-warning \"creating selector for non existant method b1ar\" } */\n+  a = @selector(b1ar); /* { dg-warning \"creating selector for nonexistent method .b1ar.\" } */\n   b = @selector(bar);\n }\n @end"}]}