{"sha": "795fe3d2c663337d8a1ae1347db172d54fd96c12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1ZmUzZDJjNjYzMzM3ZDhhMWFlMTM0N2RiMTcyZDU0ZmQ5NmMxMg==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-10-07T21:04:07Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-10-07T21:04:07Z"}, "message": "msp430.md: Group zero_extend* insns together.\n\n2019-10-07  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.md: Group zero_extend* insns together.\n\nFrom-SVN: r276679", "tree": {"sha": "3a94259c3bda6d46d633d65e792d9e0161d03062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a94259c3bda6d46d633d65e792d9e0161d03062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/795fe3d2c663337d8a1ae1347db172d54fd96c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795fe3d2c663337d8a1ae1347db172d54fd96c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795fe3d2c663337d8a1ae1347db172d54fd96c12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795fe3d2c663337d8a1ae1347db172d54fd96c12/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b393e5ede4064d6c2da289ed0b66b8e80e033c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b393e5ede4064d6c2da289ed0b66b8e80e033c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b393e5ede4064d6c2da289ed0b66b8e80e033c54"}], "stats": {"total": 121, "additions": 62, "deletions": 59}, "files": [{"sha": "36debb6385bb8dd9bf6866229b4e724e0c27ef83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795fe3d2c663337d8a1ae1347db172d54fd96c12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795fe3d2c663337d8a1ae1347db172d54fd96c12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=795fe3d2c663337d8a1ae1347db172d54fd96c12", "patch": "@@ -1,3 +1,7 @@\n+2019-10-07  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.md: Group zero_extend* insns together.\n+\n 2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.c (machopic_output_indirection): Don't put"}, {"sha": "5bca727c53eff1f78446c758c65ca6acb452adc8", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 58, "deletions": 59, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795fe3d2c663337d8a1ae1347db172d54fd96c12/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795fe3d2c663337d8a1ae1347db172d54fd96c12/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=795fe3d2c663337d8a1ae1347db172d54fd96c12", "patch": "@@ -559,15 +559,11 @@\n    AND%X0\\t#0xff, %0\"\n )\n \n-;; Eliminate extraneous zero-extends mysteriously created by gcc.\n-(define_peephole2\n-  [(set (match_operand:HI 0 \"register_operand\")\n-\t(zero_extend:HI (match_operand:QI 1 \"general_operand\")))\n-   (set (match_operand:HI 2 \"register_operand\")\n-\t(zero_extend:HI (match_operand:QI 3 \"register_operand\")))]\n-  \"REGNO (operands[0]) == REGNO (operands[2]) && REGNO (operands[2]) == REGNO (operands[3])\"\n-  [(set (match_dup 0)\n-\t(zero_extend:HI (match_dup 1)))]\n+(define_insn \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"\"\n+  \"MOV%X1.B\\t%1,%L0 { CLR\\t%H0\"\n )\n \n (define_insn \"zero_extendhipsi2\"\n@@ -578,40 +574,6 @@\n   MOVX\\t%1, %0\n   MOVX.A\\t%1, %0\"\n )\n-\n-(define_insn \"truncpsihi2\"\n-  [(set (match_operand:HI\t\t0 \"msp430_nonimmediate_operand\" \"=rm\")\n-\t(truncate:HI (match_operand:PSI 1 \"register_operand\"      \"r\")))]\n-  \"\"\n-  \"MOVX\\t%1, %0\"\n-)\n-\n-(define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r\")))]\n-  \"\"\n-  { return msp430x_extendhisi (operands); }\n-)\n-\n-(define_insn \"extendhipsi2\"\n-  [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\")\n-\t(subreg:PSI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")) 0))]\n-  \"msp430x\"\n-  \"RLAM.A #4, %0 { RRAM.A #4, %0\"\n-)\n-\n-;; Look for cases where integer/pointer conversions are suboptimal due\n-;; to missing patterns, despite us not having opcodes for these\n-;; patterns.  Doing these manually allows for alternate optimization\n-;; paths.\n-\n-(define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n-  \"\"\n-  \"MOV%X1.B\\t%1,%L0 { CLR\\t%H0\"\n-)\n-\n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")))]\n@@ -630,22 +592,6 @@\n    MOV.W\\t%1,%0\"\n )\n \n-(define_insn \"extend_and_shift1_hipsi2\"\n-  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n-\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t   (const_int 1)))]\n-  \"msp430x\"\n-  \"RLAM.A #4, %0 { RRAM.A #3, %0\"\n-)\n-\n-(define_insn \"extend_and_shift2_hipsi2\"\n-  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n-\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t   (const_int 2)))]\n-  \"msp430x\"\n-  \"RLAM.A #4, %0 { RRAM.A #2, %0\"\n-)\n-\n ; Nasty - we are sign-extending a 20-bit PSI value in one register into\n ; two adjacent 16-bit registers to make an SI value.  There is no MSP430X\n ; instruction that will do this, so we push the 20-bit value onto the stack\n@@ -680,6 +626,59 @@\n   \"\n )\n \n+;; Eliminate extraneous zero-extends mysteriously created by gcc.\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\")\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand\")))\n+   (set (match_operand:HI 2 \"register_operand\")\n+\t(zero_extend:HI (match_operand:QI 3 \"register_operand\")))]\n+  \"REGNO (operands[0]) == REGNO (operands[2]) && REGNO (operands[2]) == REGNO (operands[3])\"\n+  [(set (match_dup 0)\n+\t(zero_extend:HI (match_dup 1)))]\n+)\n+\n+(define_insn \"truncpsihi2\"\n+  [(set (match_operand:HI\t\t0 \"msp430_nonimmediate_operand\" \"=rm\")\n+\t(truncate:HI (match_operand:PSI 1 \"register_operand\"      \"r\")))]\n+  \"\"\n+  \"MOVX\\t%1, %0\"\n+)\n+\n+(define_insn \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r\")))]\n+  \"\"\n+  { return msp430x_extendhisi (operands); }\n+)\n+\n+(define_insn \"extendhipsi2\"\n+  [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\")\n+\t(subreg:PSI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")) 0))]\n+  \"msp430x\"\n+  \"RLAM.A #4, %0 { RRAM.A #4, %0\"\n+)\n+\n+;; Look for cases where integer/pointer conversions are suboptimal due\n+;; to missing patterns, despite us not having opcodes for these\n+;; patterns.  Doing these manually allows for alternate optimization\n+;; paths.\n+\n+(define_insn \"extend_and_shift1_hipsi2\"\n+  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n+\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (const_int 1)))]\n+  \"msp430x\"\n+  \"RLAM.A #4, %0 { RRAM.A #3, %0\"\n+)\n+\n+(define_insn \"extend_and_shift2_hipsi2\"\n+  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n+\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (const_int 2)))]\n+  \"msp430x\"\n+  \"RLAM.A #4, %0 { RRAM.A #2, %0\"\n+)\n+\n ;; We also need to be able to sign-extend pointer types (eg ptrdiff_t).\n ;; Since (we assume) pushing a 20-bit value onto the stack zero-extends\n ;; it, we use a different method here."}]}