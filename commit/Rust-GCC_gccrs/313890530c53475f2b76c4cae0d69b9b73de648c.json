{"sha": "313890530c53475f2b76c4cae0d69b9b73de648c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzODkwNTMwYzUzNDc1ZjJiNzZjNGNhZTBkNjliOWI3M2RlNjQ4Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-22T19:04:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-22T22:42:22Z"}, "message": "runtime: eliminate scase.kind field\n\nThis is the gofrontend version of https://golang.org/cl/245125.\n\nOriginal CL description:\n\n    Currently, we include a \"kind\" field on scase to distinguish the three\n    kinds of cases in a select statement: sends, receives, and defaults.\n\n    This commit removes by kind field by instead arranging for the\n    compiler to always place sends before receives, and to provide their\n    counts separately. It also passes an explicit \"block bool\" parameter\n    to avoid needing to include a default case in the array.\n\n    It's safe to shuffle cases like this because the runtime will\n    randomize the order they're polled in anyway.\n\n    For golang/go#40410.\n\nThis is being brought over to gofrontend as a step toward upgrading to\nGo1.16beta1.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/279735", "tree": {"sha": "a8c5993ce3f5d7c25bd54cf3b5522c2ddf1cbe06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8c5993ce3f5d7c25bd54cf3b5522c2ddf1cbe06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/313890530c53475f2b76c4cae0d69b9b73de648c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313890530c53475f2b76c4cae0d69b9b73de648c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313890530c53475f2b76c4cae0d69b9b73de648c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313890530c53475f2b76c4cae0d69b9b73de648c/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aff491f7b1d3a8373310cf596f5079cc4e37076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aff491f7b1d3a8373310cf596f5079cc4e37076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aff491f7b1d3a8373310cf596f5079cc4e37076"}], "stats": {"total": 285, "additions": 182, "deletions": 103}, "files": [{"sha": "c70b60c657fc393c7f0468fc30cccde74baf1f3f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -1,4 +1,4 @@\n-eca96e39cb895805b617e0e1f184f893ed3e46bb\n+d091cd25a5894ac751fe1868197648fc486cf322\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7ab94a3ffbca9c9346fa1a5d5809bc9de98825d0", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -195,8 +195,8 @@ DEF_GO_RUNTIME(CHANRECV2, \"runtime.chanrecv2\", P2(CHAN, POINTER), R1(BOOL))\n \n // Run a select, returning the index of the selected clause and\n // whether that channel received a value.\n-DEF_GO_RUNTIME(SELECTGO, \"runtime.selectgo\", P3(POINTER, POINTER, INT),\n-\t       R2(INT, BOOL))\n+DEF_GO_RUNTIME(SELECTGO, \"runtime.selectgo\",\n+\t       P5(POINTER, POINTER, INT, INT, BOOL), R2(INT, BOOL))\n \n // Non-blocking send a value on a channel, used for two-case select\n // statement with a default case."}, {"sha": "da0e0843a735eab5272a8b6155cdf6ece44eec84", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 92, "deletions": 39, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -5291,22 +5291,23 @@ Select_clauses::Select_clause::traverse(Traverse* traverse)\n void\n Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n \t\t\t\t     Block* b, Temporary_statement* scases,\n-\t\t\t\t     size_t index, Temporary_statement* recvok)\n+\t\t\t\t     int index, Temporary_statement* recvok)\n {\n   Location loc = this->location_;\n \n-  Expression* scase = Expression::make_temporary_reference(scases, loc);\n-  Expression* index_expr = Expression::make_integer_ul(index, NULL, loc);\n-  scase = Expression::make_array_index(scase, index_expr, NULL, NULL, loc);\n+  this->set_case_index(index);\n \n   if (this->is_default_)\n     {\n       go_assert(this->channel_ == NULL && this->val_ == NULL);\n-      this->lower_default(b, scase);\n       this->is_lowered_ = true;\n       return;\n     }\n \n+  Expression* scase = Expression::make_temporary_reference(scases, loc);\n+  Expression* index_expr = Expression::make_integer_sl(index, NULL, loc);\n+  scase = Expression::make_array_index(scase, index_expr, NULL, NULL, loc);\n+\n   // Evaluate the channel before the select statement.\n   Temporary_statement* channel_temp = Statement::make_temporary(NULL,\n \t\t\t\t\t\t\t\tthis->channel_,\n@@ -5326,15 +5327,6 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n   this->val_ = NULL;\n }\n \n-// Lower a default clause in a select statement.\n-\n-void\n-Select_clauses::Select_clause::lower_default(Block* b, Expression* scase)\n-{\n-  Location loc = this->location_;\n-  this->set_case(b, scase, Expression::make_nil(loc), NULL, caseDefault);\n-}\n-\n // Lower a send clause in a select statement.\n \n void\n@@ -5366,7 +5358,7 @@ Select_clauses::Select_clause::lower_send(Block* b, Expression* scase,\n   Type* unsafe_pointer_type = Type::make_pointer_type(Type::make_void_type());\n   valaddr = Expression::make_cast(unsafe_pointer_type, valaddr, loc);\n \n-  this->set_case(b, scase, chanref, valaddr, caseSend);\n+  this->set_case(b, scase, chanref, valaddr);\n }\n \n // Lower a receive clause in a select statement.\n@@ -5392,7 +5384,7 @@ Select_clauses::Select_clause::lower_recv(Gogo* gogo, Named_object* function,\n   Type* unsafe_pointer_type = Type::make_pointer_type(Type::make_void_type());\n   valaddr = Expression::make_cast(unsafe_pointer_type, valaddr, loc);\n \n-  this->set_case(b, scase, chanref, valaddr, caseRecv);\n+  this->set_case(b, scase, chanref, valaddr);\n \n   // If the block of statements is executed, arrange for the received\n   // value to move from VAL to the place where the statements expect\n@@ -5447,8 +5439,7 @@ void\n Select_clauses::Select_clause::set_case(Block* b,\n \t\t\t\t\tExpression* scase,\n \t\t\t\t\tExpression* chanref,\n-\t\t\t\t\tExpression* elem,\n-\t\t\t\t\tint kind)\n+\t\t\t\t\tExpression* elem)\n {\n   Location loc = this->location_;\n   Struct_type* scase_type = scase->type()->struct_type();\n@@ -5469,14 +5460,6 @@ Select_clauses::Select_clause::set_case(Block* b,\n       s = Statement::make_assignment(ref, elem, loc);\n       b->add_statement(s);\n     }\n-\n-  field_index = 2;\n-  go_assert(scase_type->field(field_index)->is_field_name(\"kind\"));\n-  Type* uint16_type = Type::lookup_integer_type(\"uint16\");\n-  Expression* k = Expression::make_integer_ul(kind, uint16_type, loc);\n-  ref = Expression::make_field_reference(scase->copy(), field_index, loc);\n-  s = Statement::make_assignment(ref, k, loc);\n-  b->add_statement(s);\n }\n \n // Determine types.\n@@ -5577,6 +5560,19 @@ Select_clauses::Select_clause::dump_clause(\n \n // Class Select_clauses.\n \n+// Whether there is a default case.\n+\n+bool\n+Select_clauses::has_default() const\n+{\n+  for (Clauses::const_iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)\n+    if (p->is_default())\n+      return true;\n+  return false;\n+}\n+\n // Traversal.\n \n int\n@@ -5594,17 +5590,60 @@ Select_clauses::traverse(Traverse* traverse)\n \n // Lowering.  Here we pull out the channel and the send values, to\n // enforce the order of evaluation.  We also add explicit send and\n-// receive statements to the clauses.\n+// receive statements to the clauses.  This builds the entries in the\n+// local array of scase values.  It sets *P_SEND_COUNT and\n+// *P_RECV_COUNT.\n \n void\n Select_clauses::lower(Gogo* gogo, Named_object* function, Block* b,\n-\t\t      Temporary_statement* scases, Temporary_statement* recvok)\n+\t\t      Temporary_statement* scases, Temporary_statement* recvok,\n+\t\t      int *p_send_count, int *p_recv_count)\n {\n-  size_t i = 0;\n+  int send_count = 0;\n+  int recv_count = 0;\n+  bool has_default = false;\n   for (Clauses::iterator p = this->clauses_.begin();\n        p != this->clauses_.end();\n-       ++p, ++i)\n-    p->lower(gogo, function, b, scases, i, recvok);\n+       ++p)\n+    {\n+      if (p->is_default())\n+\thas_default = true;\n+      else if (p->is_send())\n+\t++send_count;\n+      else\n+\t++recv_count;\n+    }\n+\n+  *p_send_count = send_count;\n+  *p_recv_count = recv_count;\n+\n+  int send_index = 0;\n+  int recv_index = send_count;\n+  for (Clauses::iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)\n+    {\n+      int index;\n+      if (p->is_default())\n+\tindex = -1;\n+      else if (p->is_send())\n+\t{\n+\t  index = send_index;\n+\t  ++send_index;\n+\t}\n+      else\n+\t{\n+\t  index = recv_index;\n+\t  ++recv_index;\n+\t}\n+\n+      p->lower(gogo, function, b, scases, index, recvok);\n+    }\n+\n+  go_assert(send_index == send_count);\n+  go_assert(recv_index == send_count + recv_count);\n+  go_assert(static_cast<size_t>(recv_index + (has_default ? 1 : 0))\n+\t    == this->size());\n }\n \n // Determine types.\n@@ -5664,7 +5703,8 @@ Select_clauses::get_backend(Translate_context* context,\n        p != this->clauses_.end();\n        ++p, ++i)\n     {\n-      Expression* index_expr = Expression::make_integer_ul(i, int_type,\n+      Expression* index_expr = Expression::make_integer_sl(p->case_index(),\n+\t\t\t\t\t\t\t   int_type,\n \t\t\t\t\t\t\t   location);\n       cases[i].push_back(index_expr->get_backend(context));\n \n@@ -5749,6 +5789,7 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n   Block* b = new Block(enclosing, loc);\n \n   int ncases = this->clauses_->size();\n+  bool has_default = this->clauses_->has_default();\n \n   // Zero-case select.  Just block the execution.\n   if (ncases == 0)\n@@ -5766,11 +5807,13 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n \n   // Two-case select with one default case.  It is a non-blocking\n   // send/receive.\n-  if (ncases == 2\n-      && (this->clauses_->at(0).is_default()\n-          || this->clauses_->at(1).is_default()))\n+  if (ncases == 2 && has_default)\n     return this->lower_two_case(b);\n \n+  // We don't allocate an entry in scases for the default case.\n+  if (has_default)\n+    --ncases;\n+\n   Type* scase_type = Channel_type::select_case_type();\n   Expression* ncases_expr =\n     Expression::make_integer_ul(ncases, NULL,\n@@ -5803,7 +5846,10 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n   b->add_statement(recvok);\n \n   // Initialize the scases array.\n-  this->clauses_->lower(gogo, function, b, scases, recvok);\n+  int send_count;\n+  int recv_count;\n+  this->clauses_->lower(gogo, function, b, scases, recvok, &send_count,\n+\t\t\t&recv_count);\n \n   // Build the call to selectgo.  Later, in do_get_backend, we will\n   // build a switch on the result that branches to the various cases.\n@@ -5817,11 +5863,18 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n   order_ref = Expression::make_unary(OPERATOR_AND, order_ref, loc);\n   order_ref = Expression::make_cast(unsafe_pointer_type, order_ref, loc);\n \n-  Expression* count_expr = Expression::make_integer_ul(ncases, int_type, loc);\n+  Expression* send_count_expr = Expression::make_integer_sl(send_count,\n+\t\t\t\t\t\t\t    int_type,\n+\t\t\t\t\t\t\t    loc);\n+  Expression* recv_count_expr = Expression::make_integer_sl(recv_count,\n+\t\t\t\t\t\t\t    int_type,\n+\t\t\t\t\t\t\t    loc);\n+  Expression* block_expr = Expression::make_boolean(!has_default, loc);\n \n-  Call_expression* call = Runtime::make_call(Runtime::SELECTGO, loc, 3,\n+  Call_expression* call = Runtime::make_call(Runtime::SELECTGO, loc, 5,\n \t\t\t\t\t     scases_ref, order_ref,\n-\t\t\t\t\t     count_expr);\n+\t\t\t\t\t     send_count_expr, recv_count_expr,\n+\t\t\t\t\t     block_expr);\n \n   Expression* result = Expression::make_call_result(call, 0);\n   Expression* ref = Expression::make_temporary_reference(this->index_, loc);"}, {"sha": "c08b493e6c96d49df2f849e17e3cc54b62e164ee", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -1092,14 +1092,17 @@ class Select_clauses\n   size() const\n   { return this->clauses_.size(); }\n \n+  bool\n+  has_default() const;\n+\n   // Traverse the select clauses.\n   int\n   traverse(Traverse*);\n \n   // Lower statements.\n   void\n   lower(Gogo*, Named_object*, Block*, Temporary_statement*,\n-\tTemporary_statement*);\n+\tTemporary_statement*, int* send_count, int* recv_count);\n \n   // Determine types.\n   void\n@@ -1138,8 +1141,9 @@ class Select_clauses\n \t\t  Named_object* closedvar, bool is_default, Block* statements,\n \t\t  Location location)\n       : channel_(channel), val_(val), closed_(closed), var_(var),\n-\tclosedvar_(closedvar), statements_(statements), location_(location),\n-\tis_send_(is_send), is_default_(is_default), is_lowered_(false)\n+\tclosedvar_(closedvar), statements_(statements), case_index_(0),\n+\tlocation_(location), is_send_(is_send), is_default_(is_default),\n+\tis_lowered_(false), is_case_index_set_(false)\n     { go_assert(is_default ? channel == NULL : channel != NULL); }\n \n     // Traverse the select clause.\n@@ -1148,7 +1152,7 @@ class Select_clauses\n \n     // Lower statements.\n     void\n-    lower(Gogo*, Named_object*, Block*, Temporary_statement*, size_t,\n+    lower(Gogo*, Named_object*, Block*, Temporary_statement*, int,\n \t  Temporary_statement*);\n \n     // Determine types.\n@@ -1210,6 +1214,23 @@ class Select_clauses\n     location() const\n     { return this->location_; }\n \n+    // Return the case index for this clause.\n+    int\n+    case_index() const\n+    {\n+      go_assert(this->is_case_index_set_);\n+      return this->case_index_;\n+    }\n+\n+    // Set the case index.\n+    void\n+    set_case_index(int i)\n+    {\n+      go_assert(!this->is_case_index_set_);\n+      this->case_index_ = i;\n+      this->is_case_index_set_ = true;\n+    }\n+\n     // Whether this clause may fall through to the statement which\n     // follows the overall select statement.\n     bool\n@@ -1224,17 +1245,6 @@ class Select_clauses\n     dump_clause(Ast_dump_context*) const;\n \n    private:\n-    // These values must match the values in libgo/go/runtime/select.go.\n-    enum\n-    {\n-      caseRecv = 1,\n-      caseSend = 2,\n-      caseDefault = 3,\n-    };\n-\n-    void\n-    lower_default(Block*, Expression*);\n-\n     void\n     lower_send(Block*, Expression*, Expression*);\n \n@@ -1243,7 +1253,7 @@ class Select_clauses\n \t       Temporary_statement*);\n \n     void\n-    set_case(Block*, Expression*, Expression*, Expression*, int);\n+    set_case(Block*, Expression*, Expression*, Expression*);\n \n     // The channel.\n     Expression* channel_;\n@@ -1259,6 +1269,10 @@ class Select_clauses\n     Named_object* closedvar_;\n     // The statements to execute.\n     Block* statements_;\n+    // The index of this clause in the switch statement.  If\n+    // runtime.selectgo returns this index, this clause has been\n+    // chosen.\n+    int case_index_;\n     // The location of this clause.\n     Location location_;\n     // Whether this is a send or a receive.\n@@ -1267,6 +1281,8 @@ class Select_clauses\n     bool is_default_;\n     // Whether this has been lowered.\n     bool is_lowered_;\n+    // Whether the case index has been set.\n+    bool is_case_index_set_;\n   };\n \n   Select_clause&"}, {"sha": "16f0eb59a503a540bfe6cf1e8bfa4e62398e5f57", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -8905,13 +8905,10 @@ Channel_type::select_case_type()\n     {\n       Type* unsafe_pointer_type =\n \tType::make_pointer_type(Type::make_void_type());\n-      Type* uint16_type = Type::lookup_integer_type(\"uint16\");\n-      Type* int64_type = Type::lookup_integer_type(\"int64\");\n       scase_type =\n-\tType::make_builtin_struct_type(3,\n+\tType::make_builtin_struct_type(2,\n \t\t\t\t       \"c\", unsafe_pointer_type,\n-\t\t\t\t       \"elem\", unsafe_pointer_type,\n-\t\t\t\t       \"kind\", uint16_type);\n+\t\t\t\t       \"elem\", unsafe_pointer_type);\n       scase_type->set_is_struct_incomparable();\n     }\n   return scase_type;"}, {"sha": "45cc28479459963fdc8e8a1e9e5c02b979787847", "filename": "libgo/go/runtime/select.go", "status": "modified", "additions": 53, "deletions": 40, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313890530c53475f2b76c4cae0d69b9b73de648c/libgo%2Fgo%2Fruntime%2Fselect.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313890530c53475f2b76c4cae0d69b9b73de648c/libgo%2Fgo%2Fruntime%2Fselect.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fselect.go?ref=313890530c53475f2b76c4cae0d69b9b73de648c", "patch": "@@ -18,23 +18,12 @@ import (\n \n const debugSelect = false\n \n-// scase.kind values.\n-// Known to compiler.\n-// Changes here must also be made in src/cmd/compile/internal/gc/select.go's walkselectcases.\n-const (\n-\tcaseNil = iota\n-\tcaseRecv\n-\tcaseSend\n-\tcaseDefault\n-)\n-\n // Select case descriptor.\n // Known to compiler.\n // Changes here must also be made in src/cmd/internal/gc/select.go's scasetype.\n type scase struct {\n \tc    *hchan         // chan\n \telem unsafe.Pointer // data element\n-\tkind uint16\n }\n \n func sellock(scases []scase, lockorder []uint16) {\n@@ -121,7 +110,7 @@ func block() {\n // ordinal position of its respective select{recv,send,default} call.\n // Also, if the chosen scase was a receive operation, it reports whether\n // a value was received.\n-func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n+func selectgo(cas0 *scase, order0 *uint16, nsends, nrecvs int, block bool) (int, bool) {\n \tif debugSelect {\n \t\tprint(\"select: cas0=\", cas0, \"\\n\")\n \t}\n@@ -131,6 +120,7 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \tcas1 := (*[1 << 16]scase)(unsafe.Pointer(cas0))\n \torder1 := (*[1 << 17]uint16)(unsafe.Pointer(order0))\n \n+\tncases := nsends + nrecvs\n \tscases := cas1[:ncases:ncases]\n \tpollorder := order1[:ncases:ncases]\n \tlockorder := order1[ncases:][:ncases:ncases]\n@@ -154,16 +144,12 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t}\n \n \t// generate permuted order\n-\tdfli := -1\n \tnorder := 0\n \tfor i := range scases {\n \t\tcas := &scases[i]\n \n \t\t// Omit cases without channels from the poll and lock orders.\n \t\tif cas.c == nil {\n-\t\t\tif cas.kind == caseDefault {\n-\t\t\t\tdfli = i\n-\t\t\t}\n \t\t\tcas.elem = nil // allow GC\n \t\t\tcontinue\n \t\t}\n@@ -246,8 +232,7 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t\tcas = &scases[casi]\n \t\tc = cas.c\n \n-\t\tswitch cas.kind {\n-\t\tcase caseRecv:\n+\t\tif casi >= nsends {\n \t\t\tsg = c.sendq.dequeue()\n \t\t\tif sg != nil {\n \t\t\t\tgoto recv\n@@ -258,8 +243,7 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t\t\tif c.closed != 0 {\n \t\t\t\tgoto rclose\n \t\t\t}\n-\n-\t\tcase caseSend:\n+\t\t} else {\n \t\t\tif c.closed != 0 {\n \t\t\t\tgoto sclose\n \t\t\t}\n@@ -273,9 +257,9 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t\t}\n \t}\n \n-\tif dfli >= 0 {\n+\tif !block {\n \t\tselunlock(scases, lockorder)\n-\t\tcasi = dfli\n+\t\tcasi = -1\n \t\tgoto retc\n \t}\n \n@@ -304,12 +288,10 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t\t*nextp = sg\n \t\tnextp = &sg.waitlink\n \n-\t\tswitch cas.kind {\n-\t\tcase caseRecv:\n-\t\t\tc.recvq.enqueue(sg)\n-\n-\t\tcase caseSend:\n+\t\tif casi < nsends {\n \t\t\tc.sendq.enqueue(sg)\n+\t\t} else {\n+\t\t\tc.recvq.enqueue(sg)\n \t\t}\n \t}\n \n@@ -357,7 +339,7 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \t\t\t}\n \t\t} else {\n \t\t\tc = k.c\n-\t\t\tif k.kind == caseSend {\n+\t\t\tif int(casei) < nsends {\n \t\t\t\tc.sendq.dequeueSudoG(sglist)\n \t\t\t} else {\n \t\t\t\tc.recvq.dequeueSudoG(sglist)\n@@ -376,13 +358,15 @@ func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool) {\n \tc = cas.c\n \n \tif debugSelect {\n-\t\tprint(\"wait-return: cas0=\", cas0, \" c=\", c, \" cas=\", cas, \" kind=\", cas.kind, \"\\n\")\n+\t\tprint(\"wait-return: cas0=\", cas0, \" c=\", c, \" cas=\", cas, \" send=\", casi < nsends, \"\\n\")\n \t}\n \n-\tif cas.kind == caseRecv {\n+\tif casi < nsends {\n+\t\tif !caseSuccess {\n+\t\t\tgoto sclose\n+\t\t}\n+\t} else {\n \t\trecvOK = caseSuccess\n-\t} else if cas.kind == caseSend && !caseSuccess {\n-\t\tgoto sclose\n \t}\n \n \tselunlock(scases, lockorder)\n@@ -451,7 +435,7 @@ retc:\n \n \t// Check preemption, since unlike gc we don't check on every call.\n \t// A test case for this one is BenchmarkPingPongHog in proc_test.go.\n-\tif dfli >= 0 && getg().preempt {\n+\tif block && getg().preempt {\n \t\tcheckPreempt()\n \t}\n \n@@ -492,20 +476,49 @@ func reflect_rselect(cases []runtimeSelect) (int, bool) {\n \t\tblock()\n \t}\n \tsel := make([]scase, len(cases))\n-\torder := make([]uint16, 2*len(cases))\n-\tfor i := range cases {\n-\t\trc := &cases[i]\n+\torig := make([]int, len(cases))\n+\tnsends, nrecvs := 0, 0\n+\tdflt := -1\n+\tfor i, rc := range cases {\n+\t\tvar j int\n \t\tswitch rc.dir {\n \t\tcase selectDefault:\n-\t\t\tsel[i] = scase{kind: caseDefault}\n+\t\t\tdflt = i\n+\t\t\tcontinue\n \t\tcase selectSend:\n-\t\t\tsel[i] = scase{kind: caseSend, c: rc.ch, elem: rc.val}\n+\t\t\tj = nsends\n+\t\t\tnsends++\n \t\tcase selectRecv:\n-\t\t\tsel[i] = scase{kind: caseRecv, c: rc.ch, elem: rc.val}\n+\t\t\tnrecvs++\n+\t\t\tj = len(cases) - nrecvs\n \t\t}\n+\n+\t\tsel[j] = scase{c: rc.ch, elem: rc.val}\n+\t\torig[j] = i\n+\t}\n+\n+\t// Only a default case.\n+\tif nsends+nrecvs == 0 {\n+\t\treturn dflt, false\n \t}\n \n-\treturn selectgo(&sel[0], &order[0], len(cases))\n+\t// Compact sel and orig if necessary.\n+\tif nsends+nrecvs < len(cases) {\n+\t\tcopy(sel[nsends:], sel[len(cases)-nrecvs:])\n+\t\tcopy(orig[nsends:], orig[len(cases)-nrecvs:])\n+\t}\n+\n+\torder := make([]uint16, 2*(nsends+nrecvs))\n+\n+\tchosen, recvOK := selectgo(&sel[0], &order[0], nsends, nrecvs, dflt == -1)\n+\n+\t// Translate chosen back to caller's ordering.\n+\tif chosen < 0 {\n+\t\tchosen = dflt\n+\t} else {\n+\t\tchosen = orig[chosen]\n+\t}\n+\treturn chosen, recvOK\n }\n \n func (q *waitq) dequeueSudoG(sgp *sudog) {"}]}