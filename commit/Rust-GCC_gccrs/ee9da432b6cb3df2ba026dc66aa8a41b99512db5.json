{"sha": "ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5ZGE0MzJiNmNiM2RmMmJhMDI2ZGM2NmFhOGE0MWI5OTUxMmRiNQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-04-29T10:13:36Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-04-29T10:13:36Z"}, "message": "[ARM]Remove vec_shr and vec_shr optabs\n\n        * config/arm/neon.md (vec_shl<mode>, vec_shr<mode>): Remove.\n\nFrom-SVN: r222568", "tree": {"sha": "c390e55f20b39a2e86f12d2eb6e36ed3b0a58660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c390e55f20b39a2e86f12d2eb6e36ed3b0a58660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9da432b6cb3df2ba026dc66aa8a41b99512db5/comments", "author": null, "committer": null, "parents": [{"sha": "32966af8aaa84384baa4c1eb66b5efdd52055201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32966af8aaa84384baa4c1eb66b5efdd52055201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32966af8aaa84384baa4c1eb66b5efdd52055201"}], "stats": {"total": 69, "additions": 4, "deletions": 65}, "files": [{"sha": "9afd56eed7bd0d9a02a8db4ef962788d7cfa3518", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9da432b6cb3df2ba026dc66aa8a41b99512db5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9da432b6cb3df2ba026dc66aa8a41b99512db5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "patch": "@@ -1,3 +1,7 @@\n+2015-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/arm/neon.md (vec_shl<mode>, vec_shr<mode>): Remove.\n+\n 2015-04-29  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65893"}, {"sha": "654d9d5c1aa1be1bac0c9d5b981b7fc377c4a1c1", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9da432b6cb3df2ba026dc66aa8a41b99512db5/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9da432b6cb3df2ba026dc66aa8a41b99512db5/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=ee9da432b6cb3df2ba026dc66aa8a41b99512db5", "patch": "@@ -1194,71 +1194,6 @@\n   [(set_attr \"type\" \"neon_add_widen\")]\n )\n \n-;; VEXT can be used to synthesize coarse whole-vector shifts with 8-bit\n-;; shift-count granularity. That's good enough for the middle-end's current\n-;; needs.\n-\n-;; Note that it's not safe to perform such an operation in big-endian mode,\n-;; due to element-ordering issues.\n-\n-(define_expand \"vec_shr_<mode>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQ 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"const_multiple_of_8_operand\" \"\")]\n-  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n-{\n-  rtx zero_reg;\n-  HOST_WIDE_INT num_bits = INTVAL (operands[2]);\n-  const int width = GET_MODE_BITSIZE (<MODE>mode);\n-  const machine_mode bvecmode = (width == 128) ? V16QImode : V8QImode;\n-  rtx (*gen_ext) (rtx, rtx, rtx, rtx) =\n-    (width == 128) ? gen_neon_vextv16qi : gen_neon_vextv8qi;\n-\n-  if (num_bits == width)\n-    {\n-      emit_move_insn (operands[0], operands[1]);\n-      DONE;\n-    }\n-\n-  zero_reg = force_reg (bvecmode, CONST0_RTX (bvecmode));\n-  operands[0] = gen_lowpart (bvecmode, operands[0]);\n-  operands[1] = gen_lowpart (bvecmode, operands[1]);\n-\n-  emit_insn (gen_ext (operands[0], operands[1], zero_reg,\n-\t\t      GEN_INT (num_bits / BITS_PER_UNIT)));\n-  DONE;\n-})\n-\n-(define_expand \"vec_shl_<mode>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQ 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"const_multiple_of_8_operand\" \"\")]\n-  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n-{\n-  rtx zero_reg;\n-  HOST_WIDE_INT num_bits = INTVAL (operands[2]);\n-  const int width = GET_MODE_BITSIZE (<MODE>mode);\n-  const machine_mode bvecmode = (width == 128) ? V16QImode : V8QImode;\n-  rtx (*gen_ext) (rtx, rtx, rtx, rtx) =\n-    (width == 128) ? gen_neon_vextv16qi : gen_neon_vextv8qi;\n-\n-  if (num_bits == 0)\n-    {\n-      emit_move_insn (operands[0], CONST0_RTX (<MODE>mode));\n-      DONE;\n-    }\n-\n-  num_bits = width - num_bits;\n-\n-  zero_reg = force_reg (bvecmode, CONST0_RTX (bvecmode));\n-  operands[0] = gen_lowpart (bvecmode, operands[0]);\n-  operands[1] = gen_lowpart (bvecmode, operands[1]);\n-\n-  emit_insn (gen_ext (operands[0], zero_reg, operands[1],\n-\t\t      GEN_INT (num_bits / BITS_PER_UNIT)));\n-  DONE;\n-})\n-\n ;; Helpers for quad-word reduction operations\n \n ; Add (or smin, smax...) the low N/2 elements of the N-element vector"}]}