{"sha": "61fcb9fb0c6d18cb89d163b2228124af7173d54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmY2I5ZmIwYzZkMThjYjg5ZDE2M2IyMjI4MTI0YWY3MTczZDU0Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-27T00:41:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-27T00:41:21Z"}, "message": "throw_allocator.h (throw_allocator<>:: construct<>(pointer, _Args&&...)): Add.\n\n2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/throw_allocator.h (throw_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t* include/ext/pool_allocator.h (__pool_alloc<>::\n\tconstruct<>(pointer, _Args&&...)): Likewise.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*. \n\t* include/ext/bitmap_allocator.h (bitmap_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* include/ext/new_allocator.h (new_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* include/ext/malloc_allocator.h (malloc_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* include/ext/array_allocator.h (array_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* include/ext/mt_allocator.h (__mt_alloc<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* testsuite/util/testsuite_allocator.h (tracker_allocator<>::\n\tconstruct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n \t(uneq_allocator<>::construct<>(pointer, _Args&&...)): Add.\n\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n\t* testsuite/ext/mt_allocator/variadic_construct.cc: New.\n\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/throw_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/pool_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/bitmap_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/array_allocator/variadic_construct.cc: Likewise.\n\nFrom-SVN: r129672", "tree": {"sha": "90a7feb935d3646f760bb5642127bacfc9aab08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a7feb935d3646f760bb5642127bacfc9aab08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fcb9fb0c6d18cb89d163b2228124af7173d54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fcb9fb0c6d18cb89d163b2228124af7173d54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fcb9fb0c6d18cb89d163b2228124af7173d54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fcb9fb0c6d18cb89d163b2228124af7173d54f/comments", "author": null, "committer": null, "parents": [{"sha": "00e65cfa892d1a2ed1e3f499df47acf7b797251b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e65cfa892d1a2ed1e3f499df47acf7b797251b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e65cfa892d1a2ed1e3f499df47acf7b797251b"}], "stats": {"total": 465, "additions": 451, "deletions": 14}, "files": [{"sha": "820e03bef9138815b7cdc24ce79feda4bbcbe842", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -1,3 +1,38 @@\n+2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/throw_allocator.h (throw_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t* include/ext/pool_allocator.h (__pool_alloc<>::\n+\tconstruct<>(pointer, _Args&&...)): Likewise.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*. \n+\t* include/ext/bitmap_allocator.h (bitmap_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* include/ext/new_allocator.h (new_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* include/ext/malloc_allocator.h (malloc_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* include/ext/array_allocator.h (array_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* include/ext/mt_allocator.h (__mt_alloc<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* testsuite/util/testsuite_allocator.h (tracker_allocator<>::\n+\tconstruct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+ \t(uneq_allocator<>::construct<>(pointer, _Args&&...)): Add.\n+\t(construct(pointer, const _Tp&)): Cast pointer to void*.\n+\t* testsuite/ext/mt_allocator/variadic_construct.cc: New.\n+\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/throw_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/pool_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/bitmap_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/array_allocator/variadic_construct.cc: Likewise.\n+\n 2007-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/unordered_map: Fix for parallel mode."}, {"sha": "d5f7092374300a49e21fb6e5068e24deef5ff149", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -1,6 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,6 +38,7 @@\n #include <new>\n #include <bits/functexcept.h>\n #include <tr1/array>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -77,7 +78,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { ::new(__p) value_type(__val); }\n+      { ::new((void *)__p) value_type(__val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "91f5b149cd8b762a2fc37627d4a600c089947daf", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@\n #include <new> // For operator new.\n #include <debug/debug.h> // _GLIBCXX_DEBUG_ASSERT\n #include <ext/concurrence.h>\n-\n+#include <bits/stl_move.h>\n \n /** @brief The constant in the expression below is the alignment\n  * required in bytes.\n@@ -1089,7 +1089,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       void \n       construct(pointer __p, const_reference __data)\n-      { ::new(__p) value_type(__data); }\n+      { ::new((void *)__p) value_type(__data); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p)"}, {"sha": "a5d31684e8e72763cab334c9a32c64e09026b72b", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,6 +38,7 @@\n #include <cstdlib>\n #include <new>\n #include <bits/functexcept.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -109,7 +110,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { ::new(__p) value_type(__val); }\n+      { ::new((void *)__p) value_type(__val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args) \n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "425a485d5471417d130fa1e93506b6af27d34df3", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -1,6 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,6 +38,7 @@\n #include <cstdlib>\n #include <bits/functexcept.h>\n #include <ext/atomicity.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -593,7 +594,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { ::new(__p) _Tp(__val); }\n+      { ::new((void *)__p) _Tp(__val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "14f1de91b0f92307e6ce03d21f2f6e71e374960e", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -36,6 +36,7 @@\n \n #include <new>\n #include <bits/functexcept.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -104,7 +105,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { ::new(__p) _Tp(__val); }\n+      { ::new((void *)__p) _Tp(__val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "3259d983adc49d1b7b6e6f86dce587db04be18ea", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -54,6 +54,7 @@\n #include <bits/functexcept.h>\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -164,7 +165,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { ::new(__p) _Tp(__val); }\n+      { ::new((void *)__p) _Tp(__val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }\n+#endif\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}, {"sha": "f6d0b29428ea805c68cf8f49a62249b94dc035e5", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -60,6 +60,7 @@\n #include <utility>\n #include <tr1/random>\n #include <bits/functexcept.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -232,6 +233,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       construct(pointer __p, const T& val)\n       { return std::allocator<value_type>().construct(__p, val); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ \n+\t  return std::allocator<value_type>().\n+\t    construct(__p, std::forward<_Args>(__args)...);\n+\t}\n+#endif\n+\n       void\n       destroy(pointer __p)\n       { std::allocator<value_type>().destroy(__p); }"}, {"sha": "5c3f9a57bb031b9de81bc17f59bb57619c3ef3fb", "filename": "libstdc++-v3/testsuite/ext/array_allocator/variadic_construct.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/array_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  typedef std::tr1::array<pair_type, 3> array_type;\n+  array_type store;\n+\n+  __gnu_cxx::array_allocator<pair_type, array_type> alloc1(&store);\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4e911e1ca1fec2cec276090c563e1de49dfd5d8e", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/bitmap_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::bitmap_allocator<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "39163c8e888d1f6bcbd5210a26362d9461fede1c", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/malloc_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::malloc_allocator<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8416c688e52a510e4e1b57eaab6c9865878eebac", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/mt_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::__mt_alloc<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "575e23792a5e7dcb9b0a9f5792b0db5de631d98f", "filename": "libstdc++-v3/testsuite/ext/new_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/new_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::new_allocator<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7d453b66844ad7665f098312fc3a927552ceaf5a", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/pool_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::__pool_alloc<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "66766d0772c6f9cfe309a0a4f169e766f7f5e5fa", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/variadic_construct.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/throw_allocator.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::pair<int, char> pair_type;\n+  __gnu_cxx::throw_allocator<pair_type> alloc1;\n+\n+  pair_type* ptp1 = alloc1.allocate(1);\n+  alloc1.construct(ptp1, 3, 'a');\n+\n+  VERIFY( ptp1->first == 3 );\n+  VERIFY( ptp1->second == 'a' );\n+\n+  alloc1.deallocate(ptp1, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d162e21919c1a96a509d0f908b903e19875dedfb", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fcb9fb0c6d18cb89d163b2228124af7173d54f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=61fcb9fb0c6d18cb89d163b2228124af7173d54f", "patch": "@@ -39,6 +39,7 @@\n #include <cstddef>\n #include <tr1/unordered_map>\n #include <cassert>\n+#include <bits/stl_move.h>\n \n namespace \n {\n@@ -153,10 +154,20 @@ namespace __gnu_test\n     void\n     construct(pointer p, const T& value)\n     {\n-      new (p) T(value);\n+      ::new ((void *)p) T(value);\n       counter_type::construct();\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... Args>\n+        void\n+        construct(pointer p, Args&&... args) \n+\t{\n+\t  ::new((void *)p) T(std::forward<Args>(args)...);\n+\t  counter_type::construct();\n+\t}\n+#endif\n+\n     void\n     destroy(pointer p)\n     {\n@@ -338,8 +349,15 @@ namespace __gnu_test\n       \n       void \n       construct(pointer p, const Tp& val) \n-      { ::new(p) Tp(val); }\n-    \n+      { ::new((void *)p) Tp(val); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... Args>\n+        void\n+        construct(pointer p, Args&&... args) \n+\t{ ::new((void *)p) Tp(std::forward<Args>(args)...); }\n+#endif\n+\n       void \n       destroy(pointer p) { p->~Tp(); }\n "}]}