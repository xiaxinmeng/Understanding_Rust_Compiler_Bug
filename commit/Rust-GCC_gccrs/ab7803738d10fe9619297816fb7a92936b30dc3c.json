{"sha": "ab7803738d10fe9619297816fb7a92936b30dc3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3ODAzNzM4ZDEwZmU5NjE5Mjk3ODE2ZmI3YTkyOTM2YjMwZGMzYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-02T20:50:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-02T20:50:32Z"}, "message": "alias.c: Include target.h.\n\n        * alias.c: Include target.h.\n        (mark_constant_function): Use targetm.binds_local_p instead\n        of checking TREE_PUBLIC ourselves.\n        * Makefile.in (alias.o): Add TARGET_H.\n\n        * gcc.c-torture/execute/pure-1.c: Don't mark any of the\n        test functions static.\n\nFrom-SVN: r54186", "tree": {"sha": "a4b763cf2a0c406f961159b6a014874c2fe760a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4b763cf2a0c406f961159b6a014874c2fe760a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab7803738d10fe9619297816fb7a92936b30dc3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7803738d10fe9619297816fb7a92936b30dc3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7803738d10fe9619297816fb7a92936b30dc3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7803738d10fe9619297816fb7a92936b30dc3c/comments", "author": null, "committer": null, "parents": [{"sha": "b9305c66c295ed669ae1926a66ce0efee15ecf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9305c66c295ed669ae1926a66ce0efee15ecf9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9305c66c295ed669ae1926a66ce0efee15ecf9f"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "54cc7a4eef08f17a6a3b9067aa8f10343d29b41f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab7803738d10fe9619297816fb7a92936b30dc3c", "patch": "@@ -1,3 +1,10 @@\n+2002-06-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* alias.c: Include target.h.\n+\t(mark_constant_function): Use targetm.binds_local_p instead\n+\tof checking TREE_PUBLIC ourselves.\n+\t* Makefile.in (alias.o): Add TARGET_H.\n+\n 2002-06-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c: Update copyright and file description."}, {"sha": "791bcaeb11cea28cd38c28a4c6e186fe0f2c86a9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ab7803738d10fe9619297816fb7a92936b30dc3c", "patch": "@@ -1560,7 +1560,7 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) conditions.h hard-reg-set.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) \\\n-   $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h\n+   $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h $(TARGET_H)\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h"}, {"sha": "60213d215113027973fd01c600d73ee8a95511c2", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=ab7803738d10fe9619297816fb7a92936b30dc3c", "patch": "@@ -36,6 +36,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"splay-tree.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n+#include \"target.h\"\n \n /* The alias sets assigned to MEMs assist the back-end in determining\n    which MEMs can alias which other MEMs.  In general, two MEMs in\n@@ -2572,12 +2573,12 @@ mark_constant_function ()\n   rtx insn;\n   int nonlocal_memory_referenced;\n \n-  if (TREE_PUBLIC (current_function_decl)\n-      || TREE_READONLY (current_function_decl)\n+  if (TREE_READONLY (current_function_decl)\n       || DECL_IS_PURE (current_function_decl)\n       || TREE_THIS_VOLATILE (current_function_decl)\n       || TYPE_MODE (TREE_TYPE (current_function_decl)) == VOIDmode\n-      || current_function_has_nonlocal_goto)\n+      || current_function_has_nonlocal_goto\n+      || !(*targetm.binds_local_p) (current_function_decl))\n     return;\n \n   /* A loop might not return which counts as a side effect.  */"}, {"sha": "be89ca3adc129756b8adc509bd39d383bab7c844", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab7803738d10fe9619297816fb7a92936b30dc3c", "patch": "@@ -1,3 +1,8 @@\n+2002-06-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/pure-1.c: Don't mark any of the \n+\ttest functions static.\n+\n 2002-06-02  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.c-torture/execute/loop-3c.x: Remove, the test should pass"}, {"sha": "96435c174263e17ed2f262a227b983000df4b580", "filename": "gcc/testsuite/gcc.c-torture/execute/pure-1.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpure-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7803738d10fe9619297816fb7a92936b30dc3c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpure-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpure-1.c?ref=ab7803738d10fe9619297816fb7a92936b30dc3c", "patch": "@@ -15,15 +15,22 @@ extern int i;\n \n extern int func0 (int) __attribute__ ((__pure__));\n extern int func1 (int) __attribute__ ((__const__));\n+\n /* GCC should automatically detect attributes for these functions.\n    Don't allow -O3 to inline them.  */\n #define ANI __attribute__ ((__noinline__))\n-static int ANI func2 (int a) { return i + a; } /* pure */\n-static int ANI func3 (int a) { return a * 3; } /* const */\n-static int ANI func4 (int a) { return func0(a) + a; } /* pure */\n-static int ANI func5 (int a) { return a + func1(a); } /* const */\n-static int ANI func6 (int a) { return func2(a) + a; } /* pure */\n-static int ANI func7 (int a) { return a + func3(a); } /* const */\n+\n+/* ??? If we mark these static, then -O3 will defer them to the end of\n+   compilation, and we won't have detected anything about them at the\n+   point main is compiled.  Leaving them public works until someone runs\n+   the testsuite with -fpic, or has an OS for which targetm.binds_local_p\n+   returns false for some reason.  */\n+int ANI func2 (int a) { return i + a; } /* pure */\n+int ANI func3 (int a) { return a * 3; } /* const */\n+int ANI func4 (int a) { return func0(a) + a; } /* pure */\n+int ANI func5 (int a) { return a + func1(a); } /* const */\n+int ANI func6 (int a) { return func2(a) + a; } /* pure */\n+int ANI func7 (int a) { return a + func3(a); } /* const */\n \n int main ()\n {"}]}