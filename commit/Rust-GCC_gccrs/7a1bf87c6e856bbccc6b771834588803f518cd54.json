{"sha": "7a1bf87c6e856bbccc6b771834588803f518cd54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExYmY4N2M2ZTg1NmJiY2NjNmI3NzE4MzQ1ODg4MDNmNTE4Y2Q1NA==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-02-16T00:05:39Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-02-16T00:05:39Z"}, "message": "interpret.cc (_Jv_InterpMethod::check_handler): New method.\n\n2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n\t\n\t* interpret.cc (_Jv_InterpMethod::check_handler): New method.\n    * interpret-run.cc: Change the catch section to report exception\n    events and to use the new check_handler method.\n    * include/java-interp.h (_Jv_InterpMethod): Add check_handler.\n    * gnu/gcj/jvmti/ExceptionEvent.java: New file.\n    * gnu/gcj/jvmti/ExceptionEvent.h: New file.\n    * gnu/gcj/jvmti/natExceptionEvent.cc: New file.\n    * libjava/classpath/lib/gnu/gcj/jvmti/ExceptionEvent.class: New\n    file.\n    * sources.am: Added ExceptionEvent.java.\n    * Makefile.am: Added natExceptionEvent.cc\n    * Makefile.in: Regenerated.\n    * include/Makefile.in: Regenerated.\n    * gcj/Makefile.in: Regenerated.\n\nFrom-SVN: r122019", "tree": {"sha": "7b7a9e88310e312e8a488c89edfc65e8dd555cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7a9e88310e312e8a488c89edfc65e8dd555cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1bf87c6e856bbccc6b771834588803f518cd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1bf87c6e856bbccc6b771834588803f518cd54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1bf87c6e856bbccc6b771834588803f518cd54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1bf87c6e856bbccc6b771834588803f518cd54/comments", "author": null, "committer": null, "parents": [{"sha": "5039610b9630459799b24f64fb9ffdd810b8eee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5039610b9630459799b24f64fb9ffdd810b8eee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5039610b9630459799b24f64fb9ffdd810b8eee9"}], "stats": {"total": 405, "additions": 345, "deletions": 60}, "files": [{"sha": "bd312d0322fd81cb3e59be65559855f68798459a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -1,3 +1,20 @@\n+2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n+\t\n+\t* interpret.cc (_Jv_InterpMethod::check_handler): New method.\n+    * interpret-run.cc: Change the catch section to report exception\n+    events and to use the new check_handler method.\n+    * include/java-interp.h (_Jv_InterpMethod): Add check_handler.\n+    * gnu/gcj/jvmti/ExceptionEvent.java: New file.\n+    * gnu/gcj/jvmti/ExceptionEvent.h: New file.\n+    * gnu/gcj/jvmti/natExceptionEvent.cc: New file.\n+    * libjava/classpath/lib/gnu/gcj/jvmti/ExceptionEvent.class: New\n+    file.\n+    * sources.am: Added ExceptionEvent.java.\n+    * Makefile.am: Added natExceptionEvent.cc\n+    * Makefile.in: Regenerated.\n+    * include/Makefile.in: Regenerated.\n+    * gcj/Makefile.in: Regenerated.\n+\n 2007-02-15  Johannes Schmidt  <jschmidt@avtrex.com>\n \tDavid Daney  <ddaney@avtrex.com>\n "}, {"sha": "93b03e41a4e137fcca11911029568974b81d246d", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -840,6 +840,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/jvmti/natBreakpoint.cc \\\n+gnu/gcj/jvmti/natExceptionEvent.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\"}, {"sha": "3be95319233799508d2df29b23075e46de4418ed", "filename": "libjava/Makefile.in", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -301,6 +301,7 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tgnu/gcj/convert/natOutput_SJIS.cc \\\n \tgnu/gcj/io/natSimpleSHSStream.cc gnu/gcj/io/shs.cc \\\n \tgnu/gcj/jvmti/natBreakpoint.cc \\\n+\tgnu/gcj/jvmti/natExceptionEvent.cc \\\n \tgnu/gcj/runtime/natFinalizerThread.cc \\\n \tgnu/gcj/runtime/natSharedLibLoader.cc \\\n \tgnu/gcj/runtime/natSystemClassLoader.cc \\\n@@ -364,6 +365,7 @@ am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n \tgnu/gcj/convert/natOutput_SJIS.lo \\\n \tgnu/gcj/io/natSimpleSHSStream.lo gnu/gcj/io/shs.lo \\\n \tgnu/gcj/jvmti/natBreakpoint.lo \\\n+\tgnu/gcj/jvmti/natExceptionEvent.lo \\\n \tgnu/gcj/runtime/natFinalizerThread.lo \\\n \tgnu/gcj/runtime/natSharedLibLoader.lo \\\n \tgnu/gcj/runtime/natSystemClassLoader.lo \\\n@@ -600,6 +602,7 @@ GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n GLIB_CFLAGS = @GLIB_CFLAGS@\n GLIB_LIBS = @GLIB_LIBS@\n+GREP = @GREP@\n GTK_CFLAGS = @GTK_CFLAGS@\n GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n@@ -703,6 +706,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -714,14 +718,8 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n-ac_ct_GCJ = @ac_ct_GCJ@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -742,7 +740,10 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n extra_ldflags_libjava = @extra_ldflags_libjava@ $(am__append_5)\n gxx_include_dir = @gxx_include_dir@\n@@ -754,20 +755,24 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@\n@@ -1324,6 +1329,7 @@ gnu_gcj_io_header_files = $(patsubst %.java,%.h,$(gnu_gcj_io_source_files))\n gnu_gcj_jvmti_source_files = \\\n gnu/gcj/jvmti/Breakpoint.java \\\n gnu/gcj/jvmti/BreakpointManager.java \\\n+gnu/gcj/jvmti/ExceptionEvent.java \\\n gnu/gcj/jvmti/Location.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))\n@@ -7953,6 +7959,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/jvmti/natBreakpoint.cc \\\n+gnu/gcj/jvmti/natExceptionEvent.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\\n@@ -8347,6 +8354,8 @@ gnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp):\n \t@: > gnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/jvmti/natBreakpoint.lo: gnu/gcj/jvmti/$(am__dirstamp) \\\n \tgnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n+gnu/gcj/jvmti/natExceptionEvent.lo: gnu/gcj/jvmti/$(am__dirstamp) \\\n+\tgnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/$(am__dirstamp):\n \t@$(mkdir_p) gnu/gcj/runtime\n \t@: > gnu/gcj/runtime/$(am__dirstamp)\n@@ -8830,6 +8839,8 @@ mostlyclean-compile:\n \t-rm -f gnu/gcj/io/shs.lo\n \t-rm -f gnu/gcj/jvmti/natBreakpoint.$(OBJEXT)\n \t-rm -f gnu/gcj/jvmti/natBreakpoint.lo\n+\t-rm -f gnu/gcj/jvmti/natExceptionEvent.$(OBJEXT)\n+\t-rm -f gnu/gcj/jvmti/natExceptionEvent.lo\n \t-rm -f gnu/gcj/natCore.$(OBJEXT)\n \t-rm -f gnu/gcj/natCore.lo\n \t-rm -f gnu/gcj/runtime/natFinalizerThread.$(OBJEXT)\n@@ -9048,6 +9059,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/natSimpleSHSStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/shs.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/jvmti/$(DEPDIR)/natBreakpoint.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/jvmti/$(DEPDIR)/natExceptionEvent.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natFinalizerThread.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natSharedLibLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natStringBuffer.Plo@am__quote@"}, {"sha": "bfdedd08155ab3bcff6f939f20d7337c8be87c84", "filename": "libjava/classpath/lib/gnu/gcj/jvmti/ExceptionEvent.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.class?ref=7a1bf87c6e856bbccc6b771834588803f518cd54"}, {"sha": "f950be75208cba9b5d03d9ee1e27c2ea4a743418", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -135,6 +135,7 @@ GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n GLIB_CFLAGS = @GLIB_CFLAGS@\n GLIB_LIBS = @GLIB_LIBS@\n+GREP = @GREP@\n GTK_CFLAGS = @GTK_CFLAGS@\n GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n@@ -238,6 +239,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -249,14 +251,8 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n-ac_ct_GCJ = @ac_ct_GCJ@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -277,7 +273,10 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n@@ -289,20 +288,24 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}, {"sha": "825c33951d73ed2594055f9d5d242bb1f810dfdf", "filename": "libjava/gnu/gcj/jvmti/ExceptionEvent.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.h?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -0,0 +1,44 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_gcj_jvmti_ExceptionEvent__\n+#define __gnu_gcj_jvmti_ExceptionEvent__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace gcj\n+    {\n+      namespace jvmti\n+      {\n+          class ExceptionEvent;\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::gcj::jvmti::ExceptionEvent : public ::java::lang::Object\n+{\n+\n+  ExceptionEvent(::java::lang::Thread *, jlong, jlong, ::java::lang::Throwable *, jlong, jlong);\n+public:\n+  static void postExceptionEvent(::java::lang::Thread *, jlong, jlong, ::java::lang::Throwable *, jlong, jlong);\n+  virtual void sendEvent();\n+  virtual void checkCatch();\n+private:\n+  jlong __attribute__((aligned(__alignof__( ::java::lang::Object)))) _throwMeth;\n+  jlong _throwLoc;\n+  jlong _catchMeth;\n+  jlong _catchLoc;\n+  ::java::lang::Thread * _thread;\n+  ::java::lang::Throwable * _ex;\n+  static ::java::util::WeakHashMap * _exMap;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_gcj_jvmti_ExceptionEvent__"}, {"sha": "26ddec213f9b0299c2e1ca5a1dfbc3cd4b318358", "filename": "libjava/gnu/gcj/jvmti/ExceptionEvent.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FExceptionEvent.java?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -0,0 +1,96 @@\n+// ExceptionEvent - an exception event for JVMTI\n+\n+/* Copyright (C) 2007  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.jvmti;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Class to create and send JVMTI Exception events\n+ *\n+ * @author Kyle Galloway (kgallowa@redhat.com)\n+ */\n+public class ExceptionEvent\n+{\n+  // Information about where the exception was thrown\n+  private long _throwMeth, _throwLoc;\n+  \n+  // Information about where the exception was or can be caught\n+  private long _catchMeth, _catchLoc;\n+  \n+  // Thread where the exception occurred\n+  private Thread _thread;\n+  \n+  // The exception\n+  private Throwable _ex;\n+  \n+  // A hash map of the exceptions we've already seen in a thread's call stack\n+  private static WeakHashMap<Thread, Throwable> _exMap = new WeakHashMap<Thread, Throwable>();\n+  \n+  /**\n+   * Constructs a new ExceptionEvent and sends it.  If it is not caught\n+   * within the frame where it was thrown (catchMeth and catchLoc are null),\n+   * check_catch will check for a possible catch further up the call stack \n+   * before marking it uncaught.\n+   * \n+   * @param thr the thread where the exception occurred\n+   * @param throwMeth the method of the throw (a jmethodID)\n+   * @param throwLoc the location of the throw (a jlocation)\n+   * @param ex the exception\n+   * @param catchMeth the method of the catch (a jmethodID), null indicates\n+   * that the exception was not caught in the frame where it was thrown\n+   * @param catchLoc the location of the catch (a jlocation), null indicates\n+   * that the exception was not caught in the frame where it was thrown\n+   */\n+  private ExceptionEvent(Thread thr, long throwMeth, long throwLoc,\n+\t\t                 Throwable ex, long catchMeth, long catchLoc)\n+  {\n+    this._thread = thr;\n+    this._ex = ex;\n+    this._throwMeth = throwMeth;\n+    this._throwLoc = throwLoc;\n+    this._catchMeth = catchMeth;\n+    this._catchLoc = catchLoc;\n+  }\n+  \n+  public static void postExceptionEvent(Thread thr, long throwMeth,\n+\t\t                                long throwLoc, Throwable ex,\n+\t\t                                long catchMeth, long catchLoc)\n+  {\n+    // Check to see if there is an entry for this Thread thr in the has map.\n+\t// If not, add the thread to the hash map and send an ExceptionEvent.\n+\tif (_exMap.containsKey(thr))\n+\t  {\n+\t\t// Check to see if we are receiving events for the same exception, or a\n+\t\t// new one.  If it is not the same exception beign rethrown, send a new\n+\t\t// event.\n+\t    if (!(_exMap.get(thr) == ex))\n+\t      {\n+            _exMap.put(thr, ex);\n+            ExceptionEvent event = new ExceptionEvent(thr, throwMeth,\n+            \t\t                                  throwLoc, ex, catchMeth,\n+            \t\t                                  catchLoc);  \n+            event.sendEvent ();\n+          }\n+\t  }\n+\telse\n+\t  {\n+\t    _exMap.put(thr, ex);\n+\t    ExceptionEvent event = new ExceptionEvent(thr, throwMeth,\n+                                                  throwLoc, ex, catchMeth,\n+                                                  catchLoc);\n+\t    event.sendEvent();\n+\t  }\n+  }\n+  \n+  public native void sendEvent();\n+  \n+  public native void checkCatch();\n+}"}, {"sha": "dfc8e669dd89204c7f338090bb29d6346ee796d3", "filename": "libjava/gnu/gcj/jvmti/natExceptionEvent.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatExceptionEvent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatExceptionEvent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatExceptionEvent.cc?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -0,0 +1,59 @@\n+// natExceptionEvent.cc - C++ code for JVMTI Exception events\n+\n+/* Copyright (C) 2007  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+#include <gcj/method.h>\n+#include <java-interp.h>\n+#include <java-insns.h>\n+#include <java-assert.h>\n+#include <jvmti.h>\n+#include <jvmti-int.h>\n+\n+#include <gnu/gcj/jvmti/ExceptionEvent.h>\n+\n+void\n+gnu::gcj::jvmti::ExceptionEvent::sendEvent ()\n+{\n+  // Check if the exception is caught somewhere in the interpreted call stack\n+  if (_catchMeth == 0 || _catchLoc == 0)\n+    checkCatch ();\n+    \n+  JNIEnv *jni = _Jv_GetCurrentJNIEnv ();\n+\n+  _Jv_JVMTI_PostEvent (JVMTI_EVENT_EXCEPTION, _thread, jni,\n+                       reinterpret_cast<jmethodID> (_throwMeth),\n+                       static_cast<jlocation> (_throwLoc), _ex,\n+                       reinterpret_cast<jmethodID> (_catchMeth),\n+                       static_cast<jlocation> (_catchLoc)); \n+}\n+\n+// This method looks up the interpreted call stack to see if the exception will\n+// eventually be caught by some java method.\n+void\n+gnu::gcj::jvmti::ExceptionEvent::checkCatch ()\n+{\n+  _Jv_InterpFrame *frame \n+    = reinterpret_cast<_Jv_InterpFrame *> (_thread->interp_frame);\n+  \n+  while ((frame = frame->next_interp))\n+    {\n+\t  _Jv_InterpMethod *meth \n+\t    = reinterpret_cast<_Jv_InterpMethod *> (frame->self);\n+\t  pc_t pc = frame->pc;\n+\t\t\n+\t  if (meth->check_handler (&pc, meth, _ex))\n+\t    {\n+\t      _catchMeth = reinterpret_cast<jlong> (meth->get_method ());\n+\t      _catchLoc = meth->insn_index (pc);\n+          break;\n+\t    }\n+    }\n+}"}, {"sha": "95c9ae4c03e3a1cdaa0496be8fc4621ab4f63c54", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -134,6 +134,7 @@ GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n GLIB_CFLAGS = @GLIB_CFLAGS@\n GLIB_LIBS = @GLIB_LIBS@\n+GREP = @GREP@\n GTK_CFLAGS = @GTK_CFLAGS@\n GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n@@ -237,6 +238,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -248,14 +250,8 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n-ac_ct_GCJ = @ac_ct_GCJ@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -276,7 +272,10 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n@@ -288,20 +287,24 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}, {"sha": "e23baab9bb2adbec01889079e8ace0b3262f085b", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -229,6 +229,11 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   // Convenience function for indexing bytecode PC/insn slots in\n   // line tables for JDWP\n   jlong insn_index (pc_t pc);\n+  \n+  // Helper function used to check if there is a handler for an exception\n+  // present at this code index\n+  jboolean check_handler (pc_t *pc, _Jv_InterpMethod *meth,\n+                     java::lang::Throwable *ex);\n    \n   /* Get the line table for this method.\n    * start  is the lowest index in the method"}, {"sha": "b98092efb1aaf9ef89f1593b91317b533a11595f", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 31, "deletions": 36, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -2540,43 +2540,38 @@ details.  */\n     }\n   catch (java::lang::Throwable *ex)\n     {\n-#ifdef DIRECT_THREADED\n-      void *logical_pc = (void *) ((insn_slot *) pc - 1);\n-#else\n-      int logical_pc = pc - 1 - meth->bytecode ();\n+#ifdef DEBUG\n+       // This needs to be done before the pc is changed.\n+       jlong throw_loc = meth->insn_index (pc);\n+#endif\n+      // Check if the exception is handled and, if so, set the pc to the start\n+      // of the appropriate catch block.\n+      if (meth->check_handler (&pc, meth, ex))\n+        {\n+          sp = stack;\n+          sp++->o = ex; // Push exception.\n+#ifdef DEBUG\n+          if (JVMTI_REQUESTED_EVENT (Exception))\n+            {\n+              using namespace gnu::gcj::jvmti;\n+              jlong throw_meth = reinterpret_cast<jlong> (meth->get_method ());\n+              jlong catch_loc = meth->insn_index (pc);\n+              ExceptionEvent::postExceptionEvent (thread, throw_meth,\n+                                                  throw_loc, ex, throw_meth,\n+                                                  catch_loc);\n+            }\n+#endif\n+          NEXT_INSN;\n+        }\n+#ifdef DEBUG\n+      if (JVMTI_REQUESTED_EVENT (Exception))\n+        {\n+          using namespace gnu::gcj::jvmti;\n+          jlong throw_meth = reinterpret_cast<jlong> (meth->get_method ());\n+          ExceptionEvent::postExceptionEvent (thread, throw_meth, throw_loc,\n+                                              ex, NULL, NULL);\n+        }\n #endif\n-      _Jv_InterpException *exc = meth->exceptions ();\n-      jclass exc_class = ex->getClass ();\n-\n-      for (int i = 0; i < meth->exc_count; i++)\n-\t{\n-\t  if (PCVAL (exc[i].start_pc) <= logical_pc\n-\t      && logical_pc < PCVAL (exc[i].end_pc))\n-\t    {\n-#ifdef DIRECT_THREADED\n-\t      jclass handler = (jclass) exc[i].handler_type.p;\n-#else\n-\t      jclass handler = NULL;\n-\t      if (exc[i].handler_type.i != 0)\n-\t\thandler = (_Jv_Linker::resolve_pool_entry (meth->defining_class,\n-\t\t\t\t\t\t\t   exc[i].handler_type.i)).clazz;\n-#endif /* DIRECT_THREADED */\n-\n-\t      if (handler == NULL || handler->isAssignableFrom (exc_class))\n-\t\t{\n-\n-#ifdef DIRECT_THREADED\n-\t\t  pc = (insn_slot *) exc[i].handler_pc.p;\n-#else\n-\t\t  pc = meth->bytecode () + exc[i].handler_pc.i;\n-#endif /* DIRECT_THREADED */\n-\t\t  sp = stack;\n-\t\t  sp++->o = ex; // Push exception.\n-\t\t  NEXT_INSN;\n-\t\t}\n-\t    }\n-\t}\n-\n       // No handler, so re-throw.\n       throw ex;\n     }"}, {"sha": "dbd5323a04b3655833b7222901e8db21e36257c2", "filename": "libjava/interpret.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -43,6 +43,7 @@ details.  */\n #include <gnu/classpath/jdwp/Jdwp.h>\n #include <gnu/gcj/jvmti/Breakpoint.h>\n #include <gnu/gcj/jvmti/BreakpointManager.h>\n+#include <gnu/gcj/jvmti/ExceptionEvent.h>\n \n #ifdef INTERPRETER\n \n@@ -1366,6 +1367,51 @@ _Jv_InterpMethod::insn_index (pc_t pc)\n   return -1;\n }\n \n+// Method to check if an exception is caught at some location in a method\n+// (meth).  Returns true if this method (meth) contains a catch block for the\n+// exception (ex). False otherwise.  If there is a catch block, it sets the pc\n+// to the location of the beginning of the catch block.\n+jboolean\n+_Jv_InterpMethod::check_handler (pc_t *pc, _Jv_InterpMethod *meth,\n+                                java::lang::Throwable *ex)\n+{\n+#ifdef DIRECT_THREADED\n+  void *logical_pc = (void *) ((insn_slot *) (*pc) - 1);\n+#else\n+  int logical_pc = (*pc) - 1 - meth->bytecode ();\n+#endif\n+  _Jv_InterpException *exc = meth->exceptions ();\n+  jclass exc_class = ex->getClass ();\n+\n+  for (int i = 0; i < meth->exc_count; i++)\n+    {\n+      if (PCVAL (exc[i].start_pc) <= logical_pc\n+          && logical_pc < PCVAL (exc[i].end_pc))\n+        {\n+#ifdef DIRECT_THREADED\n+              jclass handler = (jclass) exc[i].handler_type.p;\n+#else\n+              jclass handler = NULL;\n+              if (exc[i].handler_type.i != 0)\n+                    handler\n+                      = (_Jv_Linker::resolve_pool_entry (meth->defining_class,\n+                                                                             ex$\n+#endif /* DIRECT_THREADED */\n+              if (handler == NULL || handler->isAssignableFrom (exc_class))\n+                {\n+#ifdef DIRECT_THREADED\n+                  (*pc) = (insn_slot *) exc[i].handler_pc.p;\n+#else\n+                  (*pc) = meth->bytecode () + exc[i].handler_pc.i;\n+#endif /* DIRECT_THREADED */\n+                  return true;\n+                }\n+          }\n+      }\n+  return false;\n+}\n+\n+\n void\n _Jv_InterpMethod::get_line_table (jlong& start, jlong& end,\n \t\t\t\t  jintArray& line_numbers,"}, {"sha": "cce44e11198c200731e2bc5459eabd08f77d0ba9", "filename": "libjava/sources.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -509,6 +509,7 @@ gnu/gcj/io.list: $(gnu_gcj_io_source_files)\n gnu_gcj_jvmti_source_files = \\\n gnu/gcj/jvmti/Breakpoint.java \\\n gnu/gcj/jvmti/BreakpointManager.java \\\n+gnu/gcj/jvmti/ExceptionEvent.java \\\n gnu/gcj/jvmti/Location.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))"}, {"sha": "e4316cbe1503b433c08870ced5c1dd00431b5e34", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1bf87c6e856bbccc6b771834588803f518cd54/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=7a1bf87c6e856bbccc6b771834588803f518cd54", "patch": "@@ -123,6 +123,7 @@ GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n GLIB_CFLAGS = @GLIB_CFLAGS@\n GLIB_LIBS = @GLIB_LIBS@\n+GREP = @GREP@\n GTK_CFLAGS = @GTK_CFLAGS@\n GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n@@ -226,6 +227,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -237,14 +239,8 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n-ac_ct_GCJ = @ac_ct_GCJ@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -265,7 +261,10 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n@@ -277,20 +276,24 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}]}