{"sha": "8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkNjVjMzdlNTgwZGUzNTMzOGIwZjVjZDY0NmYzZDQzNmUzZTNhMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:14:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:14:54Z"}, "message": "pdp11.c (pdp11_trampoline_init): New.\n\n        * config/pdp11/pdp11.c (pdp11_trampoline_init): New.\n        (TARGET_TRAMPOLINE_INIT): New.\n        * config/pdp11/pdp11.h (TRAMPOLINE_TEMPLATE): Remove.\n        (INITIALIZE_TRAMPOLINE): Move code to pdp11_trampoline_init.\n\nFrom-SVN: r152006", "tree": {"sha": "4be42ebe14e66e5dab4abfc6676cc4be90800b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be42ebe14e66e5dab4abfc6676cc4be90800b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/comments", "author": null, "committer": null, "parents": [{"sha": "859c146ca052061e4aba946a4bf5c292e3983c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859c146ca052061e4aba946a4bf5c292e3983c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859c146ca052061e4aba946a4bf5c292e3983c26"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "1c1b45e3a6f5de33c98b641d49b82ebc312af041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "patch": "@@ -204,6 +204,11 @@\n \tadjust for hook parameters.\n \t(TRAMPOLINE_ADJUST_ADDRESS): Move code to pa_trampoline_adjust_address.\n \n+\t* config/pdp11/pdp11.c (pdp11_trampoline_init): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t* config/pdp11/pdp11.h (TRAMPOLINE_TEMPLATE): Remove.\n+\t(INITIALIZE_TRAMPOLINE): Move code to pdp11_trampoline_init.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "f95d03cee48a4a35b1e16f830eb86137d6afbefc", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "patch": "@@ -152,6 +152,7 @@ static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void pdp11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static bool pdp11_rtx_costs (rtx, int, int, int *, bool);\n static bool pdp11_return_in_memory (const_tree, const_tree);\n+static void pdp11_trampoline_init (rtx, tree, rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -185,6 +186,9 @@ static bool pdp11_return_in_memory (const_tree, const_tree);\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY pdp11_return_in_memory\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT pdp11_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -1740,3 +1744,31 @@ pdp11_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return (TYPE_MODE (type) == DImode\n \t  || (TYPE_MODE (type) == DFmode && ! TARGET_AC0));\n }\n+\n+/* Worker function for TARGET_TRAMPOLINE_INIT.\n+\n+   trampoline - how should i do it in separate i+d ? \n+   have some allocate_trampoline magic??? \n+\n+   the following should work for shared I/D:\n+\n+   MV\t#STATIC, $4\t0x940Y\t0x0000 <- STATIC; Y = STATIC_CHAIN_REGNUM\n+   JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n+*/\n+\n+static void\n+pdp11_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  gcc_assert (!TARGET_SPLIT);\n+\n+  mem = adjust_address (m_tramp, HImode, 0);\n+  emit_move_insn (mem, GEN_INT (0x9400+STATIC_CHAIN_REGNUM));\n+  mem = adjust_address (m_tramp, HImode, 2);\n+  emit_move_insn (mem, chain_value);\n+  mem = adjust_address (m_tramp, HImode, 4);\n+  emit_move_insn (mem, GEN_INT (0x0058));\n+  emit_move_insn (mem, fnaddr);\n+}"}, {"sha": "8997612ba5af87c1c325b7befd53a56af2a2dcbf", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd65c37e580de35338b0f5cd646f3d436e3e3a0/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=8dd65c37e580de35338b0f5cd646f3d436e3e3a0", "patch": "@@ -983,42 +983,9 @@ extern struct rtx_def *cc0_reg_rtx;\n   fprintf (FILE, \"\\tmov (sp)+, %s\\n\", reg_names[REGNO])     \t\\\n )\n \n-/* trampoline - how should i do it in separate i+d ? \n-   have some allocate_trampoline magic??? \n-\n-   the following should work for shared I/D: */\n-\n-/* lets see whether this works as trampoline:\n-MV\t#STATIC, $4\t0x940Y\t0x0000 <- STATIC; Y = STATIC_CHAIN_REGNUM\n-JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n-*/\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\\\n-{\t\t\t\t\t\\\n-  gcc_assert (!TARGET_SPLIT);\t\t\\\n-\t\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x9400+STATIC_CHAIN_REGNUM));\t\\\n-  assemble_aligned_integer (2, const0_rtx);\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT(0x0058));\t\t\t\\\n-  assemble_aligned_integer (2, const0_rtx);\t\t\t\t\\\n-}\n-\n #define TRAMPOLINE_SIZE 8\n #define TRAMPOLINE_ALIGNMENT 16\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP,FNADDR,CXT)\t\\\n-{\t\t\t\t\t\\\n-  gcc_assert (!TARGET_SPLIT);\t\t\\\n-\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 2)), CXT); \\\n-  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 6)), FNADDR); \\\n-}\n-\n-\n /* Some machines may desire to change what optimizations are\n    performed for various optimization levels.   This macro, if\n    defined, is executed once just after the optimization level is"}]}