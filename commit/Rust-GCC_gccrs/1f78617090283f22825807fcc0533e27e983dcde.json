{"sha": "1f78617090283f22825807fcc0533e27e983dcde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3ODYxNzA5MDI4M2YyMjgyNTgwN2ZjYzA1MzNlMjdlOTgzZGNkZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-06-20T08:08:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-20T08:08:21Z"}, "message": "[5/n] PR85694: Remove dead WIDEN_SUM handling\n\nvect_recog_dot_prod_pattern and vect_recog_sad_pattern both checked\nwhether the statement passed in had already been recognised as a\nWIDEN_SUM_EXPR pattern.  That isn't possible (any more?), since the\nfirst recognised pattern wins, and since vect_recog_widen_sum_pattern\nnever matches a later statement than the one it's given.\n\n2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Remove\n\tredundant WIDEN_SUM_EXPR handling.\n\t(vect_recog_sad_pattern): Likewise.\n\nFrom-SVN: r261788", "tree": {"sha": "48e8724f13b0e0b6cd85144671a09044ac4a7a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48e8724f13b0e0b6cd85144671a09044ac4a7a0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f78617090283f22825807fcc0533e27e983dcde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f78617090283f22825807fcc0533e27e983dcde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f78617090283f22825807fcc0533e27e983dcde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f78617090283f22825807fcc0533e27e983dcde/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44ae7a002c23ff0ab884350b5f05876ece985387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ae7a002c23ff0ab884350b5f05876ece985387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ae7a002c23ff0ab884350b5f05876ece985387"}], "stats": {"total": 89, "additions": 35, "deletions": 54}, "files": [{"sha": "aaf80f20bbb9ce608f9459292a667c52a6314a11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f78617090283f22825807fcc0533e27e983dcde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f78617090283f22825807fcc0533e27e983dcde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f78617090283f22825807fcc0533e27e983dcde", "patch": "@@ -1,3 +1,9 @@\n+2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Remove\n+\tredundant WIDEN_SUM_EXPR handling.\n+\t(vect_recog_sad_pattern): Likewise.\n+\n 2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Remove"}, {"sha": "b6cb6e30a1759b7e6a7903d78ab2ad8aedd4c98e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 29, "deletions": 54, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f78617090283f22825807fcc0533e27e983dcde/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f78617090283f22825807fcc0533e27e983dcde/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=1f78617090283f22825807fcc0533e27e983dcde", "patch": "@@ -339,37 +339,25 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n     return NULL;\n \n   if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n-    {\n-      /* Has been detected as widening-summation?  */\n+    return NULL;\n \n-      stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n-      type = gimple_expr_type (stmt);\n-      if (gimple_assign_rhs_code (stmt) != WIDEN_SUM_EXPR)\n-        return NULL;\n-      oprnd0 = gimple_assign_rhs1 (stmt);\n-      oprnd1 = gimple_assign_rhs2 (stmt);\n-      half_type = TREE_TYPE (oprnd0);\n-    }\n-  else\n-    {\n-      gimple *def_stmt;\n+  if (!vect_reassociating_reduction_p (stmt_vinfo))\n+    return NULL;\n \n-      if (!vect_reassociating_reduction_p (stmt_vinfo))\n-\treturn NULL;\n-      oprnd0 = gimple_assign_rhs1 (last_stmt);\n-      oprnd1 = gimple_assign_rhs2 (last_stmt);\n-      stmt = last_stmt;\n+  oprnd0 = gimple_assign_rhs1 (last_stmt);\n+  oprnd1 = gimple_assign_rhs2 (last_stmt);\n+  stmt = last_stmt;\n \n-      if (type_conversion_p (oprnd0, stmt, true, &half_type, &def_stmt,\n-\t\t\t     &promotion)\n-\t  && promotion)\n-        {\n-          stmt = def_stmt;\n-          oprnd0 = gimple_assign_rhs1 (stmt);\n-        }\n-      else\n-        half_type = type;\n+  gimple *def_stmt;\n+  if (type_conversion_p (oprnd0, stmt, true, &half_type, &def_stmt,\n+\t\t\t &promotion)\n+      && promotion)\n+    {\n+      stmt = def_stmt;\n+      oprnd0 = gimple_assign_rhs1 (stmt);\n     }\n+  else\n+    half_type = type;\n \n   /* So far so good.  Since last_stmt was detected as a (summation) reduction,\n      we know that oprnd1 is the reduction variable (defined by a loop-header\n@@ -553,34 +541,22 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n   tree plus_oprnd0, plus_oprnd1;\n \n   if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n-    {\n-      /* Has been detected as widening-summation?  */\n+    return NULL;\n \n-      gimple *stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n-      sum_type = gimple_expr_type (stmt);\n-      if (gimple_assign_rhs_code (stmt) != WIDEN_SUM_EXPR)\n-        return NULL;\n-      plus_oprnd0 = gimple_assign_rhs1 (stmt);\n-      plus_oprnd1 = gimple_assign_rhs2 (stmt);\n-      half_type = TREE_TYPE (plus_oprnd0);\n-    }\n-  else\n-    {\n-      gimple *def_stmt;\n+  if (!vect_reassociating_reduction_p (stmt_vinfo))\n+    return NULL;\n \n-      if (!vect_reassociating_reduction_p (stmt_vinfo))\n-\treturn NULL;\n-      plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n-      plus_oprnd1 = gimple_assign_rhs2 (last_stmt);\n-\n-      /* The type conversion could be promotion, demotion,\n-         or just signed -> unsigned.  */\n-      if (type_conversion_p (plus_oprnd0, last_stmt, false,\n-                             &half_type, &def_stmt, &promotion))\n-        plus_oprnd0 = gimple_assign_rhs1 (def_stmt);\n-      else\n-        half_type = sum_type;\n-    }\n+  plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n+  plus_oprnd1 = gimple_assign_rhs2 (last_stmt);\n+\n+  /* The type conversion could be promotion, demotion,\n+     or just signed -> unsigned.  */\n+  gimple *def_stmt;\n+  if (type_conversion_p (plus_oprnd0, last_stmt, false,\n+\t\t\t &half_type, &def_stmt, &promotion))\n+    plus_oprnd0 = gimple_assign_rhs1 (def_stmt);\n+  else\n+    half_type = sum_type;\n \n   /* So far so good.  Since last_stmt was detected as a (summation) reduction,\n      we know that plus_oprnd1 is the reduction variable (defined by a loop-header\n@@ -639,7 +615,6 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n     return NULL;\n \n   tree half_type0, half_type1;\n-  gimple *def_stmt;\n \n   tree minus_oprnd0 = gimple_assign_rhs1 (diff_stmt);\n   tree minus_oprnd1 = gimple_assign_rhs2 (diff_stmt);"}]}