{"sha": "c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwYTBmMjYxYmRhNTdmM2MzZmJiZTRlYmI4NzZmMDgxYWQyMWExYQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-01-17T08:46:19Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-01-17T08:46:19Z"}, "message": "bb-reorder.c (fix_edges_for_rarely_executed_code): Remove last parameter to reg_scan.\n\n2005-01-15  Paolo Bonzini <bonzini@gnu.org>\n\n\t* bb-reorder.c (fix_edges_for_rarely_executed_code): Remove\n\tlast parameter to reg_scan.\n\t* loop.c (loop_optimize): Likewise.\n\t* passes.c (rest_of_handle_tracer, rest_of_handle_if_conversion,\n\trest_of_handle_web, rest_of_handle_cfg, rest_of_handle_jump_bypass,\n\trest_of_handle_life, rest_of_handle_cse, rest_of_handle_cse2,\n\trest_of_handle_gcse, rest_of_handle_loop_optimize,\n\trest_of_handle_loop2, rest_of_handle_jump2): Likewise.\n\t* regclass.c (reg_scan): Likewise, for the declaration.\n\t* rtl.h (reg_scan): Likewise, for the prototype.\n\nFrom-SVN: r93758", "tree": {"sha": "2c6472f8ec139069ce40dade8e67840b5c726ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6472f8ec139069ce40dade8e67840b5c726ed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf53020b5a62deb6f105aaca0b62906b8fe49ea"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "dc9197e9f6972b481cc635f178bd7cfc282e7015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -1,3 +1,16 @@\n+2005-01-15  Paolo Bonzini <bonzini@gnu.org>\n+\n+\t* bb-reorder.c (fix_edges_for_rarely_executed_code): Remove\n+\tlast parameter to reg_scan.\n+\t* loop.c (loop_optimize): Likewise.\n+\t* passes.c (rest_of_handle_tracer, rest_of_handle_if_conversion,\n+\trest_of_handle_web, rest_of_handle_cfg, rest_of_handle_jump_bypass,\n+\trest_of_handle_life, rest_of_handle_cse, rest_of_handle_cse2,\n+\trest_of_handle_gcse, rest_of_handle_loop_optimize,\n+\trest_of_handle_loop2, rest_of_handle_jump2): Likewise.\n+\t* regclass.c (reg_scan): Likewise, for the declaration.\n+\t* rtl.h (reg_scan): Likewise, for the prototype.\n+\n 2005-01-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Don't call"}, {"sha": "cac7768c98189bb508a95ab29da6342a93642aa3", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -1,5 +1,5 @@\n /* Basic block reordering routines for the GNU compiler.\n-   Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1920,7 +1920,7 @@ fix_edges_for_rarely_executed_code (edge *crossing_edges,\n       if (!HAS_LONG_UNCOND_BRANCH)\n \t{\n \t  fix_crossing_unconditional_branches ();\n-\t  reg_scan (get_insns(), max_reg_num (), 1);\n+\t  reg_scan (get_insns(), max_reg_num ());\n \t}\n \n       add_reg_crossing_jump_notes ();"}, {"sha": "2b765c821d870487a655ef038df4141a2c130788", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -858,7 +858,7 @@ loop_optimize (rtx f, FILE *dumpfile, int flags)\n   /* Now find all register lifetimes.  This must be done after\n      find_and_verify_loops, because it might reorder the insns in the\n      function.  */\n-  reg_scan (f, max_reg_before_loop, 1);\n+  reg_scan (f, max_reg_before_loop);\n \n   /* This must occur after reg_scan so that registers created by gcse\n      will have entries in the register tables."}, {"sha": "1d835589b44c80a66e65a9835d1a8c989e88b0a3", "filename": "gcc/passes.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -734,7 +734,7 @@ rest_of_handle_tracer (void)\n     dump_flow_info (dump_file);\n   tracer (0);\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n   close_dump_file (DFI_tracer, print_rtl_with_bb, get_insns ());\n }\n \n@@ -750,13 +750,13 @@ rest_of_handle_if_conversion (void)\n       if (dump_file)\n \tdump_flow_info (dump_file);\n       cleanup_cfg (CLEANUP_EXPENSIVE);\n-      reg_scan (get_insns (), max_reg_num (), 0);\n+      reg_scan (get_insns (), max_reg_num ());\n       if_convert (0);\n     }\n \n   timevar_push (TV_JUMP);\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n   timevar_pop (TV_JUMP);\n \n   close_dump_file (DFI_ce1, print_rtl_with_bb, get_insns ());\n@@ -807,7 +807,7 @@ rest_of_handle_web (void)\n \n   timevar_pop (TV_WEB);\n   close_dump_file (DFI_web, print_rtl_with_bb, get_insns ());\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n }\n \n /* Do branch profiling and static profile estimation passes.  */\n@@ -883,7 +883,7 @@ rest_of_handle_cfg (void)\n     {\n       /* Alias analysis depends on this information and mark_constant_function\n        depends on alias analysis.  */\n-      reg_scan (get_insns (), max_reg_num (), 1);\n+      reg_scan (get_insns (), max_reg_num ());\n       mark_constant_function ();\n     }\n \n@@ -898,7 +898,7 @@ rest_of_handle_jump_bypass (void)\n   open_dump_file (DFI_bypass, current_function_decl);\n \n   cleanup_cfg (CLEANUP_EXPENSIVE);\n-  reg_scan (get_insns (), max_reg_num (), 1);\n+  reg_scan (get_insns (), max_reg_num ());\n \n   if (bypass_jumps (dump_file))\n     {\n@@ -959,8 +959,7 @@ rest_of_handle_life (void)\n #endif\n   life_analysis (dump_file, PROP_FINAL);\n   if (optimize)\n-    cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_UPDATE_LIFE\n-\t\t | CLEANUP_LOG_LINKS\n+    cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE | CLEANUP_LOG_LINKS\n \t\t | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n \n   if (extra_warnings)\n@@ -1001,7 +1000,7 @@ rest_of_handle_cse (void)\n     dump_flow_info (dump_file);\n   timevar_push (TV_CSE);\n \n-  reg_scan (get_insns (), max_reg_num (), 1);\n+  reg_scan (get_insns (), max_reg_num ());\n \n   tem = cse_main (get_insns (), max_reg_num (), dump_file);\n   if (tem)\n@@ -1053,7 +1052,7 @@ rest_of_handle_cse2 (void)\n       cleanup_cfg (CLEANUP_EXPENSIVE);\n       timevar_pop (TV_JUMP);\n     }\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n   close_dump_file (DFI_cse2, print_rtl_with_bb, get_insns ());\n   timevar_pop (TV_CSE2);\n \n@@ -1083,7 +1082,7 @@ rest_of_handle_gcse (void)\n   if (flag_expensive_optimizations)\n     {\n       timevar_push (TV_CSE);\n-      reg_scan (get_insns (), max_reg_num (), 1);\n+      reg_scan (get_insns (), max_reg_num ());\n       tem2 = cse_main (get_insns (), max_reg_num (), dump_file);\n       purge_all_dead_edges (0);\n       delete_trivially_dead_insns (get_insns (), max_reg_num ());\n@@ -1104,7 +1103,7 @@ rest_of_handle_gcse (void)\n       if (flag_expensive_optimizations)\n \t{\n \t  timevar_push (TV_CSE);\n-\t  reg_scan (get_insns (), max_reg_num (), 1);\n+\t  reg_scan (get_insns (), max_reg_num ());\n \t  tem2 = cse_main (get_insns (), max_reg_num (), dump_file);\n \t  purge_all_dead_edges (0);\n \t  delete_trivially_dead_insns (get_insns (), max_reg_num ());\n@@ -1155,7 +1154,7 @@ rest_of_handle_loop_optimize (void)\n \n       /* The regscan pass is currently necessary as the alias\n \t analysis code depends on this information.  */\n-      reg_scan (get_insns (), max_reg_num (), 1);\n+      reg_scan (get_insns (), max_reg_num ());\n     }\n   cleanup_barriers ();\n   loop_optimize (get_insns (), dump_file, do_prefetch);\n@@ -1228,7 +1227,7 @@ rest_of_handle_loop2 (void)\n \n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n   if (dump_file)\n     dump_flow_info (dump_file);\n   close_dump_file (DFI_loop2, print_rtl_with_bb, get_insns ());\n@@ -1390,7 +1389,7 @@ rest_of_handle_jump2 (void)\n     expected_value_to_br_prob ();\n \n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n-  reg_scan (get_insns (), max_reg_num (), 0);\n+  reg_scan (get_insns (), max_reg_num ());\n   if (dump_file)\n     dump_flow_info (dump_file);\n   cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_PRE_LOOP"}, {"sha": "adfab02ad2c4218fa1a2bf5b29055b16c9eadd85", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -2305,7 +2305,7 @@ int max_parallel;\n static int max_set_parallel;\n \n void\n-reg_scan (rtx f, unsigned int nregs, int repeat ATTRIBUTE_UNUSED)\n+reg_scan (rtx f, unsigned int nregs)\n {\n   rtx insn;\n "}, {"sha": "7f9a7df40db2c4b60e9d245bafc73bfebfd3aa17", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c80a0f261bda57f3c3fbbe4ebb876f081ad21a1a", "patch": "@@ -1,6 +1,6 @@\n /* Register Transfer Language (RTL) definitions for GCC\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2061,7 +2061,7 @@ extern void init_fake_stack_mems (void);\n extern void init_reg_sets (void);\n extern void regclass_init (void);\n extern void regclass (rtx, int, FILE *);\n-extern void reg_scan (rtx, unsigned int, int);\n+extern void reg_scan (rtx, unsigned int);\n extern void reg_scan_update (rtx, rtx, unsigned int);\n extern void fix_register (const char *, int, int);\n extern void init_subregs_of_mode (void);"}]}