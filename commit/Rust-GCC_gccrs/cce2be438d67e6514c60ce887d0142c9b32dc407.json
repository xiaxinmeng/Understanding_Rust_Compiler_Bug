{"sha": "cce2be438d67e6514c60ce887d0142c9b32dc407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlMmJlNDM4ZDY3ZTY1MTRjNjBjZTg4N2QwMTQyYzliMzJkYzQwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T16:31:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T16:31:38Z"}, "message": "decl.c (start_decl): Remove redundant linkage check.\n\n\t* decl.c (start_decl): Remove redundant linkage check.\n\t* typeck.c (c_expand_return): Handle the case that valtype\n\tis wider than the functions return type.\n\nFrom-SVN: r21950", "tree": {"sha": "787f1a2859f32f07454560dbb41cd83af7079dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/787f1a2859f32f07454560dbb41cd83af7079dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce2be438d67e6514c60ce887d0142c9b32dc407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce2be438d67e6514c60ce887d0142c9b32dc407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce2be438d67e6514c60ce887d0142c9b32dc407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce2be438d67e6514c60ce887d0142c9b32dc407/comments", "author": null, "committer": null, "parents": [{"sha": "5637343af3448a1e1fbe54c97fa9bccfb0bc5477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5637343af3448a1e1fbe54c97fa9bccfb0bc5477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5637343af3448a1e1fbe54c97fa9bccfb0bc5477"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "d171e64820b7e963005cc898deb405845ec199a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cce2be438d67e6514c60ce887d0142c9b32dc407", "patch": "@@ -1,3 +1,12 @@\n+1998-08-24  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (start_decl): Remove redundant linkage check.\n+\n+1998-08-24  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* typeck.c (c_expand_return): Handle the case that valtype\n+\tis wider than the functions return type.\n+\n 1998-08-24  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (CLASS_TYPE_P): New macro."}, {"sha": "8d3d6d9e492953a9c6a386a770b48a43bd8b0d8d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cce2be438d67e6514c60ce887d0142c9b32dc407", "patch": "@@ -6642,26 +6642,6 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   /* Corresponding pop_obstacks is done in `cp_finish_decl'.  */\n   push_obstacks_nochange ();\n \n-  /* [basic.link]: A name with no linkage (notably, the name of a class or\n-     enumeration declared in a local scope) shall not be used to declare an\n-     entity with linkage.\n-\n-     Only check this for public decls for now.  */\n-  if (TREE_PUBLIC (tem))\n-    {\n-      tree t = no_linkage_check (TREE_TYPE (tem));\n-      if (t)\n-\t{\n-\t  if (ANON_AGGRNAME_P (TYPE_IDENTIFIER (t)))\n-\t    {\n-\t      if (TREE_CODE (tem) == FUNCTION_DECL)\n-\t\tcp_pedwarn (\"public decl `%#D' uses anonymous type\", tem);\n-\t    }\n-\t  else\n-\t    cp_pedwarn (\"non-local decl `%#D' uses local type `%T'\", tem, t);\n-\t}\n-    }\n-\n #if 0\n   /* We have no way of knowing whether the initializer will need to be\n      evaluated at run-time or not until we've parsed it, so let's just put\n@@ -7939,9 +7919,10 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       if (t)\n \t{\n \t  if (ANON_AGGRNAME_P (TYPE_IDENTIFIER (t)))\n-\t    cp_pedwarn (\"function `%#D' uses anonymous type\", decl);\n+\t    cp_pedwarn (\"non-local function `%#D' uses anonymous type\", decl);\n \t  else\n-\t    cp_pedwarn (\"function `%#D' uses local type `%T'\", decl, t);\n+\t    cp_pedwarn (\"non-local function `%#D' uses local type `%T'\",\n+\t\t\tdecl, t);\n \t}\n     }\n "}, {"sha": "5800f79eef98dc07379345cf611ad155161bcd16", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce2be438d67e6514c60ce887d0142c9b32dc407/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cce2be438d67e6514c60ce887d0142c9b32dc407", "patch": "@@ -7362,10 +7362,18 @@ c_expand_return (retval)\n     }\n   else\n     {\n+      tree functype = TREE_TYPE (TREE_TYPE (current_function_decl));\n+\n+      /* First convert the value to the function's return type, then\n+\t to the type of return value's location to handle the\n+         case that functype is thiner than the valtype. */\n+\n       retval = convert_for_initialization\n-\t(NULL_TREE, valtype, retval, LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n+\t(NULL_TREE, functype, retval, LOOKUP_NORMAL|LOOKUP_ONLYCONVERTING,\n \t \"return\", NULL_TREE, 0);\n \n+      retval = convert (valtype, retval);\n+\n       if (retval == error_mark_node)\n \t{\n \t  /* Avoid warning about control reaching end of function.  */"}]}