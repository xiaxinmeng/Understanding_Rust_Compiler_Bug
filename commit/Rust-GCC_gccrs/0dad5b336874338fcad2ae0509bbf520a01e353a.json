{"sha": "0dad5b336874338fcad2ae0509bbf520a01e353a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhZDViMzM2ODc0MzM4ZmNhZDJhZTA1MDliYmY1MjBhMDFlMzUzYQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T15:56:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T15:56:35Z"}, "message": "[ARM][GCC][1/3x]: MVE intrinsics with ternary operands.\n\nThis patch supports following MVE ACLE intrinsics with ternary operands.\n\nvabavq_s8, vabavq_s16, vabavq_s32, vbicq_m_n_s16, vbicq_m_n_s32, vbicq_m_n_u16, vbicq_m_n_u32, vcmpeqq_m_f16, vcmpeqq_m_f32, vcvtaq_m_s16_f16, vcvtaq_m_u16_f16, vcvtaq_m_s32_f32, vcvtaq_m_u32_f32, vcvtq_m_f16_s16, vcvtq_m_f16_u16, vcvtq_m_f32_s32, vcvtq_m_f32_u32, vqrshrnbq_n_s16, vqrshrnbq_n_u16, vqrshrnbq_n_s32, vqrshrnbq_n_u32, vqrshrunbq_n_s16, vqrshrunbq_n_s32, vrmlaldavhaq_s32, vrmlaldavhaq_u32, vshlcq_s8, vshlcq_u8, vshlcq_s16, vshlcq_u16, vshlcq_s32, vshlcq_u32, vabavq_s8, vabavq_s16, vabavq_s32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (TERNOP_UNONE_UNONE_UNONE_IMM_QUALIFIERS):\n\tDefine qualifier for ternary operands.\n\t(TERNOP_UNONE_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vabavq_s8): Define macro.\n\t(vabavq_s16): Likewise.\n\t(vabavq_s32): Likewise.\n\t(vbicq_m_n_s16): Likewise.\n\t(vbicq_m_n_s32): Likewise.\n\t(vbicq_m_n_u16): Likewise.\n\t(vbicq_m_n_u32): Likewise.\n\t(vcmpeqq_m_f16): Likewise.\n\t(vcmpeqq_m_f32): Likewise.\n\t(vcvtaq_m_s16_f16): Likewise.\n\t(vcvtaq_m_u16_f16): Likewise.\n\t(vcvtaq_m_s32_f32): Likewise.\n\t(vcvtaq_m_u32_f32): Likewise.\n\t(vcvtq_m_f16_s16): Likewise.\n\t(vcvtq_m_f16_u16): Likewise.\n\t(vcvtq_m_f32_s32): Likewise.\n\t(vcvtq_m_f32_u32): Likewise.\n\t(vqrshrnbq_n_s16): Likewise.\n\t(vqrshrnbq_n_u16): Likewise.\n\t(vqrshrnbq_n_s32): Likewise.\n\t(vqrshrnbq_n_u32): Likewise.\n\t(vqrshrunbq_n_s16): Likewise.\n\t(vqrshrunbq_n_s32): Likewise.\n\t(vrmlaldavhaq_s32): Likewise.\n\t(vrmlaldavhaq_u32): Likewise.\n\t(vshlcq_s8): Likewise.\n\t(vshlcq_u8): Likewise.\n\t(vshlcq_s16): Likewise.\n\t(vshlcq_u16): Likewise.\n\t(vshlcq_s32): Likewise.\n\t(vshlcq_u32): Likewise.\n\t(vabavq_u8): Likewise.\n\t(vabavq_u16): Likewise.\n\t(vabavq_u32): Likewise.\n\t(__arm_vabavq_s8): Define intrinsic.\n\t(__arm_vabavq_s16): Likewise.\n\t(__arm_vabavq_s32): Likewise.\n\t(__arm_vabavq_u8): Likewise.\n\t(__arm_vabavq_u16): Likewise.\n\t(__arm_vabavq_u32): Likewise.\n\t(__arm_vbicq_m_n_s16): Likewise.\n\t(__arm_vbicq_m_n_s32): Likewise.\n\t(__arm_vbicq_m_n_u16): Likewise.\n\t(__arm_vbicq_m_n_u32): Likewise.\n\t(__arm_vqrshrnbq_n_s16): Likewise.\n\t(__arm_vqrshrnbq_n_u16): Likewise.\n\t(__arm_vqrshrnbq_n_s32): Likewise.\n\t(__arm_vqrshrnbq_n_u32): Likewise.\n\t(__arm_vqrshrunbq_n_s16): Likewise.\n\t(__arm_vqrshrunbq_n_s32): Likewise.\n\t(__arm_vrmlaldavhaq_s32): Likewise.\n\t(__arm_vrmlaldavhaq_u32): Likewise.\n\t(__arm_vshlcq_s8): Likewise.\n\t(__arm_vshlcq_u8): Likewise.\n\t(__arm_vshlcq_s16): Likewise.\n\t(__arm_vshlcq_u16): Likewise.\n\t(__arm_vshlcq_s32): Likewise.\n\t(__arm_vshlcq_u32): Likewise.\n\t(__arm_vcmpeqq_m_f16): Likewise.\n\t(__arm_vcmpeqq_m_f32): Likewise.\n\t(__arm_vcvtaq_m_s16_f16): Likewise.\n\t(__arm_vcvtaq_m_u16_f16): Likewise.\n\t(__arm_vcvtaq_m_s32_f32): Likewise.\n\t(__arm_vcvtaq_m_u32_f32): Likewise.\n\t(__arm_vcvtq_m_f16_s16): Likewise.\n\t(__arm_vcvtq_m_f16_u16): Likewise.\n\t(__arm_vcvtq_m_f32_s32): Likewise.\n\t(__arm_vcvtq_m_f32_u32): Likewise.\n\t(vcvtaq_m): Define polymorphic variant.\n\t(vcvtq_m): Likewise.\n\t(vabavq): Likewise.\n\t(vshlcq): Likewise.\n\t(vbicq_m_n): Likewise.\n\t(vqrshrnbq_n): Likewise.\n\t(vqrshrunbq_n): Likewise.\n\t* config/arm/arm_mve_builtins.def\n\t(TERNOP_UNONE_UNONE_UNONE_IMM_QUALIFIERS): Use the builtin qualifer.\n\t(TERNOP_UNONE_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_IMM_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (VBICQ_M_N): Define iterator.\n\t(VCVTAQ_M): Likewise.\n\t(VCVTQ_M_TO_F): Likewise.\n\t(VQRSHRNBQ_N): Likewise.\n\t(VABAVQ): Likewise.\n\t(VSHLCQ): Likewise.\n\t(VRMLALDAVHAQ): Likewise.\n\t(mve_vbicq_m_n_<supf><mode>): Define RTL pattern.\n\t(mve_vcmpeqq_m_f<mode>): Likewise.\n\t(mve_vcvtaq_m_<supf><mode>): Likewise.\n\t(mve_vcvtq_m_to_f_<supf><mode>): Likewise.\n\t(mve_vqrshrnbq_n_<supf><mode>): Likewise.\n\t(mve_vqrshrunbq_n_s<mode>): Likewise.\n\t(mve_vrmlaldavhaq_<supf>v4si): Likewise.\n\t(mve_vabavq_<supf><mode>): Likewise.\n\t(mve_vshlcq_<supf><mode>): Likewise.\n\t(mve_vshlcq_<supf><mode>): Likewise.\n\t(mve_vshlcq_vec_<supf><mode>): Define RTL expand.\n\t(mve_vshlcq_carry_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u8.c: Likewise.", "tree": {"sha": "ffd894a6ca24392b1f434e7c95d84264c7cb34d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd894a6ca24392b1f434e7c95d84264c7cb34d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dad5b336874338fcad2ae0509bbf520a01e353a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dad5b336874338fcad2ae0509bbf520a01e353a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dad5b336874338fcad2ae0509bbf520a01e353a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dad5b336874338fcad2ae0509bbf520a01e353a/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9355dee93fce833b307c4e8e7eb6d9a7d831333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9355dee93fce833b307c4e8e7eb6d9a7d831333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9355dee93fce833b307c4e8e7eb6d9a7d831333"}], "stats": {"total": 2220, "additions": 1925, "deletions": 295}, "files": [{"sha": "508b10423be07dff9bbac422d5b565aaafdd537b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -1,3 +1,132 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (TERNOP_UNONE_UNONE_UNONE_IMM_QUALIFIERS):\n+\tDefine qualifier for ternary operands.\n+\t(TERNOP_UNONE_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vabavq_s8): Define macro.\n+\t(vabavq_s16): Likewise.\n+\t(vabavq_s32): Likewise.\n+\t(vbicq_m_n_s16): Likewise.\n+\t(vbicq_m_n_s32): Likewise.\n+\t(vbicq_m_n_u16): Likewise.\n+\t(vbicq_m_n_u32): Likewise.\n+\t(vcmpeqq_m_f16): Likewise.\n+\t(vcmpeqq_m_f32): Likewise.\n+\t(vcvtaq_m_s16_f16): Likewise.\n+\t(vcvtaq_m_u16_f16): Likewise.\n+\t(vcvtaq_m_s32_f32): Likewise.\n+\t(vcvtaq_m_u32_f32): Likewise.\n+\t(vcvtq_m_f16_s16): Likewise.\n+\t(vcvtq_m_f16_u16): Likewise.\n+\t(vcvtq_m_f32_s32): Likewise.\n+\t(vcvtq_m_f32_u32): Likewise.\n+\t(vqrshrnbq_n_s16): Likewise.\n+\t(vqrshrnbq_n_u16): Likewise.\n+\t(vqrshrnbq_n_s32): Likewise.\n+\t(vqrshrnbq_n_u32): Likewise.\n+\t(vqrshrunbq_n_s16): Likewise.\n+\t(vqrshrunbq_n_s32): Likewise.\n+\t(vrmlaldavhaq_s32): Likewise.\n+\t(vrmlaldavhaq_u32): Likewise.\n+\t(vshlcq_s8): Likewise.\n+\t(vshlcq_u8): Likewise.\n+\t(vshlcq_s16): Likewise.\n+\t(vshlcq_u16): Likewise.\n+\t(vshlcq_s32): Likewise.\n+\t(vshlcq_u32): Likewise.\n+\t(vabavq_u8): Likewise.\n+\t(vabavq_u16): Likewise.\n+\t(vabavq_u32): Likewise.\n+\t(__arm_vabavq_s8): Define intrinsic.\n+\t(__arm_vabavq_s16): Likewise.\n+\t(__arm_vabavq_s32): Likewise.\n+\t(__arm_vabavq_u8): Likewise.\n+\t(__arm_vabavq_u16): Likewise.\n+\t(__arm_vabavq_u32): Likewise.\n+\t(__arm_vbicq_m_n_s16): Likewise.\n+\t(__arm_vbicq_m_n_s32): Likewise.\n+\t(__arm_vbicq_m_n_u16): Likewise.\n+\t(__arm_vbicq_m_n_u32): Likewise.\n+\t(__arm_vqrshrnbq_n_s16): Likewise.\n+\t(__arm_vqrshrnbq_n_u16): Likewise.\n+\t(__arm_vqrshrnbq_n_s32): Likewise.\n+\t(__arm_vqrshrnbq_n_u32): Likewise.\n+\t(__arm_vqrshrunbq_n_s16): Likewise.\n+\t(__arm_vqrshrunbq_n_s32): Likewise.\n+\t(__arm_vrmlaldavhaq_s32): Likewise.\n+\t(__arm_vrmlaldavhaq_u32): Likewise.\n+\t(__arm_vshlcq_s8): Likewise.\n+\t(__arm_vshlcq_u8): Likewise.\n+\t(__arm_vshlcq_s16): Likewise.\n+\t(__arm_vshlcq_u16): Likewise.\n+\t(__arm_vshlcq_s32): Likewise.\n+\t(__arm_vshlcq_u32): Likewise.\n+\t(__arm_vcmpeqq_m_f16): Likewise.\n+\t(__arm_vcmpeqq_m_f32): Likewise.\n+\t(__arm_vcvtaq_m_s16_f16): Likewise.\n+\t(__arm_vcvtaq_m_u16_f16): Likewise.\n+\t(__arm_vcvtaq_m_s32_f32): Likewise.\n+\t(__arm_vcvtaq_m_u32_f32): Likewise.\n+\t(__arm_vcvtq_m_f16_s16): Likewise.\n+\t(__arm_vcvtq_m_f16_u16): Likewise.\n+\t(__arm_vcvtq_m_f32_s32): Likewise.\n+\t(__arm_vcvtq_m_f32_u32): Likewise.\n+\t(vcvtaq_m): Define polymorphic variant.\n+\t(vcvtq_m): Likewise.\n+\t(vabavq): Likewise.\n+\t(vshlcq): Likewise.\n+\t(vbicq_m_n): Likewise.\n+\t(vqrshrnbq_n): Likewise.\n+\t(vqrshrunbq_n): Likewise.\n+\t* config/arm/arm_mve_builtins.def\n+\t(TERNOP_UNONE_UNONE_UNONE_IMM_QUALIFIERS): Use the builtin qualifer.\n+\t(TERNOP_UNONE_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_UNONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_IMM_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (VBICQ_M_N): Define iterator.\n+\t(VCVTAQ_M): Likewise.\n+\t(VCVTQ_M_TO_F): Likewise.\n+\t(VQRSHRNBQ_N): Likewise.\n+\t(VABAVQ): Likewise.\n+\t(VSHLCQ): Likewise.\n+\t(VRMLALDAVHAQ): Likewise.\n+\t(mve_vbicq_m_n_<supf><mode>): Define RTL pattern.\n+\t(mve_vcmpeqq_m_f<mode>): Likewise.\n+\t(mve_vcvtaq_m_<supf><mode>): Likewise.\n+\t(mve_vcvtq_m_to_f_<supf><mode>): Likewise.\n+\t(mve_vqrshrnbq_n_<supf><mode>): Likewise.\n+\t(mve_vqrshrunbq_n_s<mode>): Likewise.\n+\t(mve_vrmlaldavhaq_<supf>v4si): Likewise.\n+\t(mve_vabavq_<supf><mode>): Likewise.\n+\t(mve_vshlcq_<supf><mode>): Likewise.\n+\t(mve_vshlcq_<supf><mode>): Likewise.\n+\t(mve_vshlcq_vec_<supf><mode>): Define RTL expand.\n+\t(mve_vshlcq_carry_<supf><mode>): Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "af4f3b6dddf72cb73e87aa42b8b09b7dc9a89ebe", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -433,6 +433,96 @@ arm_binop_unone_unone_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_UNONE_UNONE_NONE_QUALIFIERS \\\n   (arm_binop_unone_unone_none_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_immediate };\n+#define TERNOP_UNONE_UNONE_UNONE_IMM_QUALIFIERS \\\n+  (arm_ternop_unone_unone_unone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none, qualifier_none };\n+#define TERNOP_UNONE_UNONE_NONE_NONE_QUALIFIERS \\\n+  (arm_ternop_unone_unone_none_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_none_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_unsigned,\n+      qualifier_immediate };\n+#define TERNOP_UNONE_NONE_UNONE_IMM_QUALIFIERS \\\n+  (arm_ternop_unone_none_unone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned, qualifier_immediate };\n+#define TERNOP_NONE_NONE_UNONE_IMM_QUALIFIERS \\\n+  (arm_ternop_none_none_unone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none,\n+    qualifier_immediate };\n+#define TERNOP_UNONE_UNONE_NONE_IMM_QUALIFIERS \\\n+  (arm_ternop_unone_unone_none_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none,\n+      qualifier_unsigned };\n+#define TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_ternop_unone_unone_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate,\n+    qualifier_unsigned };\n+#define TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_ternop_unone_unone_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_none, qualifier_unsigned };\n+#define TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_ternop_unone_none_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate };\n+#define TERNOP_NONE_NONE_NONE_IMM_QUALIFIERS \\\n+  (arm_ternop_none_none_none_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_unsigned };\n+#define TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_ternop_none_none_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_immediate, qualifier_unsigned };\n+#define TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_ternop_none_none_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned, qualifier_unsigned };\n+#define TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS \\\n+  (arm_ternop_none_none_unone_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_unone_unone_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_unsigned };\n+#define TERNOP_UNONE_UNONE_UNONE_UNONE_QUALIFIERS \\\n+  (arm_ternop_unone_unone_unone_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ternop_none_none_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_none };\n+#define TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS \\\n+  (arm_ternop_none_none_none_none_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "c15bb8b38fb35473362162f1583fc26bc3dbec07", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 429, "deletions": 20, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -742,6 +742,40 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vcvttq_f16_f32(__a, __b) __arm_vcvttq_f16_f32(__a, __b)\n #define vcvtbq_f16_f32(__a, __b) __arm_vcvtbq_f16_f32(__a, __b)\n #define vaddlvaq_s32(__a, __b) __arm_vaddlvaq_s32(__a, __b)\n+#define vabavq_s8(__a, __b, __c) __arm_vabavq_s8(__a, __b, __c)\n+#define vabavq_s16(__a, __b, __c) __arm_vabavq_s16(__a, __b, __c)\n+#define vabavq_s32(__a, __b, __c) __arm_vabavq_s32(__a, __b, __c)\n+#define vbicq_m_n_s16(__a,  __imm, __p) __arm_vbicq_m_n_s16(__a,  __imm, __p)\n+#define vbicq_m_n_s32(__a,  __imm, __p) __arm_vbicq_m_n_s32(__a,  __imm, __p)\n+#define vbicq_m_n_u16(__a,  __imm, __p) __arm_vbicq_m_n_u16(__a,  __imm, __p)\n+#define vbicq_m_n_u32(__a,  __imm, __p) __arm_vbicq_m_n_u32(__a,  __imm, __p)\n+#define vcmpeqq_m_f16(__a, __b, __p) __arm_vcmpeqq_m_f16(__a, __b, __p)\n+#define vcmpeqq_m_f32(__a, __b, __p) __arm_vcmpeqq_m_f32(__a, __b, __p)\n+#define vcvtaq_m_s16_f16(__inactive, __a, __p) __arm_vcvtaq_m_s16_f16(__inactive, __a, __p)\n+#define vcvtaq_m_u16_f16(__inactive, __a, __p) __arm_vcvtaq_m_u16_f16(__inactive, __a, __p)\n+#define vcvtaq_m_s32_f32(__inactive, __a, __p) __arm_vcvtaq_m_s32_f32(__inactive, __a, __p)\n+#define vcvtaq_m_u32_f32(__inactive, __a, __p) __arm_vcvtaq_m_u32_f32(__inactive, __a, __p)\n+#define vcvtq_m_f16_s16(__inactive, __a, __p) __arm_vcvtq_m_f16_s16(__inactive, __a, __p)\n+#define vcvtq_m_f16_u16(__inactive, __a, __p) __arm_vcvtq_m_f16_u16(__inactive, __a, __p)\n+#define vcvtq_m_f32_s32(__inactive, __a, __p) __arm_vcvtq_m_f32_s32(__inactive, __a, __p)\n+#define vcvtq_m_f32_u32(__inactive, __a, __p) __arm_vcvtq_m_f32_u32(__inactive, __a, __p)\n+#define vqrshrnbq_n_s16(__a, __b,  __imm) __arm_vqrshrnbq_n_s16(__a, __b,  __imm)\n+#define vqrshrnbq_n_u16(__a, __b,  __imm) __arm_vqrshrnbq_n_u16(__a, __b,  __imm)\n+#define vqrshrnbq_n_s32(__a, __b,  __imm) __arm_vqrshrnbq_n_s32(__a, __b,  __imm)\n+#define vqrshrnbq_n_u32(__a, __b,  __imm) __arm_vqrshrnbq_n_u32(__a, __b,  __imm)\n+#define vqrshrunbq_n_s16(__a, __b,  __imm) __arm_vqrshrunbq_n_s16(__a, __b,  __imm)\n+#define vqrshrunbq_n_s32(__a, __b,  __imm) __arm_vqrshrunbq_n_s32(__a, __b,  __imm)\n+#define vrmlaldavhaq_s32(__a, __b, __c) __arm_vrmlaldavhaq_s32(__a, __b, __c)\n+#define vrmlaldavhaq_u32(__a, __b, __c) __arm_vrmlaldavhaq_u32(__a, __b, __c)\n+#define vshlcq_s8(__a,  __b,  __imm) __arm_vshlcq_s8(__a,  __b,  __imm)\n+#define vshlcq_u8(__a,  __b,  __imm) __arm_vshlcq_u8(__a,  __b,  __imm)\n+#define vshlcq_s16(__a,  __b,  __imm) __arm_vshlcq_s16(__a,  __b,  __imm)\n+#define vshlcq_u16(__a,  __b,  __imm) __arm_vshlcq_u16(__a,  __b,  __imm)\n+#define vshlcq_s32(__a,  __b,  __imm) __arm_vshlcq_s32(__a,  __b,  __imm)\n+#define vshlcq_u32(__a,  __b,  __imm) __arm_vshlcq_u32(__a,  __b,  __imm)\n+#define vabavq_u8(__a, __b, __c) __arm_vabavq_u8(__a, __b, __c)\n+#define vabavq_u16(__a, __b, __c) __arm_vabavq_u16(__a, __b, __c)\n+#define vabavq_u32(__a, __b, __c) __arm_vabavq_u32(__a, __b, __c)\n #endif\n \n __extension__ extern __inline void\n@@ -4485,6 +4519,186 @@ __arm_vaddlvaq_s32 (int64_t __a, int32x4_t __b)\n   return __builtin_mve_vaddlvaq_sv4si (__a, __b);\n }\n \n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_s8 (uint32_t __a, int8x16_t __b, int8x16_t __c)\n+{\n+  return __builtin_mve_vabavq_sv16qi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_s16 (uint32_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return __builtin_mve_vabavq_sv8hi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_s32 (uint32_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_mve_vabavq_sv4si (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_u8 (uint32_t __a, uint8x16_t __b, uint8x16_t __c)\n+{\n+  return __builtin_mve_vabavq_uv16qi(__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_u16 (uint32_t __a, uint16x8_t __b, uint16x8_t __c)\n+{\n+  return __builtin_mve_vabavq_uv8hi(__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_u32 (uint32_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_mve_vabavq_uv4si(__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbicq_m_n_s16 (int16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vbicq_m_n_sv8hi (__a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbicq_m_n_s32 (int32x4_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vbicq_m_n_sv4si (__a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbicq_m_n_u16 (uint16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vbicq_m_n_uv8hi (__a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vbicq_m_n_u32 (uint32x4_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vbicq_m_n_uv4si (__a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrnbq_n_sv8hi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrnbq_n_uv8hi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrnbq_n_sv4si (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrnbq_n_uv4si (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrunbq_n_s16 (uint8x16_t __a, int16x8_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrunbq_n_sv8hi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrunbq_n_s32 (uint16x8_t __a, int32x4_t __b, const int __imm)\n+{\n+  return __builtin_mve_vqrshrunbq_n_sv4si (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlaldavhaq_s32 (int64_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_mve_vrmlaldavhaq_sv4si (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlaldavhaq_u32 (uint64_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_mve_vrmlaldavhaq_uv4si (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_s8 (int8x16_t __a, uint32_t * __b, const int __imm)\n+{\n+  int8x16_t __res = __builtin_mve_vshlcq_vec_sv16qi (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_sv16qi (__a, *__b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_u8 (uint8x16_t __a, uint32_t * __b, const int __imm)\n+{\n+  uint8x16_t __res = __builtin_mve_vshlcq_vec_uv16qi (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_uv16qi (__a, *__b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_s16 (int16x8_t __a, uint32_t * __b, const int __imm)\n+{\n+  int16x8_t __res = __builtin_mve_vshlcq_vec_sv8hi (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_sv8hi (__a, *__b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_u16 (uint16x8_t __a, uint32_t * __b, const int __imm)\n+{\n+  uint16x8_t __res = __builtin_mve_vshlcq_vec_uv8hi (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_uv8hi (__a, *__b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_s32 (int32x4_t __a, uint32_t * __b, const int __imm)\n+{\n+  int32x4_t __res = __builtin_mve_vshlcq_vec_sv4si (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_sv4si (__a, *__b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_u32 (uint32x4_t __a, uint32_t * __b, const int __imm)\n+{\n+  uint32x4_t __res = __builtin_mve_vshlcq_vec_uv4si (__a, *__b, __imm);\n+  *__b = __builtin_mve_vshlcq_carry_uv4si (__a, *__b, __imm);\n+  return __res;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -5443,6 +5657,76 @@ __arm_vcvtbq_f16_f32 (float16x8_t __a, float32x4_t __b)\n   return __builtin_mve_vcvtbq_f16_f32v8hf (__a, __b);\n }\n \n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpeqq_m_f16 (float16x8_t __a, float16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcmpeqq_m_fv8hf (__a, __b, __p);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpeqq_m_f32 (float32x4_t __a, float32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcmpeqq_m_fv4sf (__a, __b, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_m_s16_f16 (int16x8_t __inactive, float16x8_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtaq_m_sv8hi (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_m_u16_f16 (uint16x8_t __inactive, float16x8_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtaq_m_uv8hi (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_m_s32_f32 (int32x4_t __inactive, float32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtaq_m_sv4si (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtaq_m_u32_f32 (uint32x4_t __inactive, float32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtaq_m_uv4si (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_f16_s16 (float16x8_t __inactive, int16x8_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_to_f_sv8hf (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_f16_u16 (float16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_to_f_uv8hf (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_f32_s32 (float32x4_t __inactive, int32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_to_f_sv4sf (__inactive, __a, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_f32_u32 (float32x4_t __inactive, uint32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_to_f_uv4sf (__inactive, __a, __p);\n+}\n+\n #endif\n \n enum {\n@@ -6033,25 +6317,26 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vcmpgeq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vcmpgeq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n \n-#define vcmpgeq(p0,p1) __arm_vcmpgeq(p0,p1)\n-#define __arm_vcmpgeq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n-  __typeof(p1) __p1 = (p1); \\\n-  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpgeq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpgeq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpgeq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpgeq_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpgeq_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n-\n-#define vcmpgtq_n(p0,p1) __arm_vcmpgtq_n(p0,p1)\n-#define __arm_vcmpgtq_n(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n-  __typeof(p1) __p1 = (p1); \\\n-  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8_t]: __arm_vcmpgtq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t)), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vcmpgtq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vcmpgtq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vcmpgtq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vcmpgtq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+#define vcmpeqq_m(p0,p1,p2) __arm_vcmpeqq_m(p0,p1,p2)\n+#define __arm_vcmpeqq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpeqq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpeqq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpeqq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vcmpeqq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcmpeqq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcmpeqq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8_t]: __arm_vcmpeqq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vcmpeqq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vcmpeqq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8_t]: __arm_vcmpeqq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16_t]: __arm_vcmpeqq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vcmpeqq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpeqq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpeqq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vcmpeqq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vcmpeqq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n \n #define vcmpgtq(p0,p1) __arm_vcmpgtq(p0,p1)\n #define __arm_vcmpgtq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n@@ -6676,7 +6961,60 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vcmpgtq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vcmpgtq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n \n-#else /* MVE Interger.  srinath*/\n+#define vbicq_m_n(p0,p1,p2) __arm_vbicq_m_n(p0,p1,p2)\n+#define __arm_vbicq_m_n(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vbicq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vbicq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vbicq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vbicq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1, p2));})\n+\n+#define vqrshrnbq(p0,p1,p2) __arm_vqrshrnbq(p0,p1,p2)\n+#define __arm_vqrshrnbq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrnbq_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrnbq_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqrshrnbq_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqrshrnbq_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vqrshrunbq(p0,p1,p2) __arm_vqrshrunbq(p0,p1,p2)\n+#define __arm_vqrshrunbq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrunbq_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrunbq_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2));})\n+\n+#define vshlcq(p0,p1,p2) __arm_vshlcq(p0,p1,p2)\n+#define __arm_vshlcq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vshlcq_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vshlcq_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vshlcq_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vshlcq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshlcq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshlcq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1, p2));})\n+\n+#define vcvtaq_m(p0,p1,p2) __arm_vcvtaq_m(p0,p1,p2)\n+#define __arm_vcvtaq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcvtaq_m_s16_f16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcvtaq_m_s32_f32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcvtaq_m_u16_f16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcvtaq_m_u32_f32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+\n+#define vcvtq_m(p0,p1,p2) __arm_vcvtq_m(p0,p1,p2)\n+#define __arm_vcvtq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcvtq_m_f16_s16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcvtq_m_f32_s32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcvtq_m_f16_u16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcvtq_m_f32_u32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#else /* MVE Interger.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n #define __arm_vst4q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n@@ -7653,6 +7991,77 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlsldavq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlsldavq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)));})\n \n+#define vabavq(p0,p1,p2) __arm_vabavq(p0,p1,p2)\n+#define __arm_vabavq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vabavq_s8 (__p0, __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vabavq_s16 (__p0, __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vabavq_s32 (__p0, __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vabavq_u8 (__p0, __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vabavq_u16 (__p0, __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vabavq_u32 (__p0, __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vshlcq(p0,p1,p2) __arm_vshlcq(p0,p1,p2)\n+#define __arm_vshlcq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vshlcq_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vshlcq_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vshlcq_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vshlcq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshlcq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshlcq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1, p2));})\n+\n+#define vrmlaldavhaq(p0,p1,p2) __arm_vrmlaldavhaq(p0,p1,p2)\n+#define __arm_vrmlaldavhaq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vrmlaldavhaq_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vrmlaldavhaq_u32 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vcmpeqq_m(p0,p1,p2) __arm_vcmpeqq_m(p0,p1,p2)\n+#define __arm_vcmpeqq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpeqq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpeqq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpeqq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vcmpeqq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcmpeqq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcmpeqq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8_t]: __arm_vcmpeqq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vcmpeqq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vcmpeqq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8_t]: __arm_vcmpeqq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16_t]: __arm_vcmpeqq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vcmpeqq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2));})\n+\n+#define vbicq_m_n(p0,p1,p2) __arm_vbicq_m_n(p0,p1,p2)\n+#define __arm_vbicq_m_n(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vbicq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vbicq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vbicq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vbicq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1, p2));})\n+\n+#define vqrshrnbq(p0,p1,p2) __arm_vqrshrnbq(p0,p1,p2)\n+#define __arm_vqrshrnbq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrnbq_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrnbq_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqrshrnbq_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqrshrnbq_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vqrshrunbq(p0,p1,p2) __arm_vqrshrunbq(p0,p1,p2)\n+#define __arm_vqrshrunbq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrunbq_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrunbq_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2));})\n+\n #endif /* MVE Floating point.  */\n \n #ifdef __cplusplus"}, {"sha": "3ac96305e38bd9d70843b75be1f79f18866767db", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 291, "deletions": 273, "changes": 564, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -18,276 +18,294 @@\n     along with GCC; see the file COPYING3.  If not see\n     <http://www.gnu.org/licenses/>.  */\n \n-VAR5(STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndxq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndpq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndnq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndmq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrndaq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vrev64q_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vnegq_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vdupq_n_f, v8hf, v4sf)\n-VAR2(UNOP_NONE_NONE, vabsq_f, v8hf, v4sf)\n-VAR1(UNOP_NONE_NONE, vrev32q_f, v8hf)\n-VAR1(UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n-VAR1(UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n-VAR2(UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n-VAR2(UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n-VAR3(UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vqnegq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vqabsq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vnegq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vmvnq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vdupq_n_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vclzq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vclsq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vaddvq_s, v16qi, v8hi, v4si)\n-VAR3(UNOP_SNONE_SNONE, vabsq_s, v16qi, v8hi, v4si)\n-VAR2(UNOP_SNONE_SNONE, vrev32q_s, v16qi, v8hi)\n-VAR2(UNOP_SNONE_SNONE, vmovltq_s, v16qi, v8hi)\n-VAR2(UNOP_SNONE_SNONE, vmovlbq_s, v16qi, v8hi)\n-VAR2(UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n-VAR2(UNOP_SNONE_NONE, vcvtpq_s, v8hi, v4si)\n-VAR2(UNOP_SNONE_NONE, vcvtnq_s, v8hi, v4si)\n-VAR2(UNOP_SNONE_NONE, vcvtmq_s, v8hi, v4si)\n-VAR2(UNOP_SNONE_NONE, vcvtaq_s, v8hi, v4si)\n-VAR2(UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n-VAR1(UNOP_SNONE_SNONE, vrev16q_s, v16qi)\n-VAR1(UNOP_SNONE_SNONE, vaddlvq_s, v4si)\n-VAR3(UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n-VAR3(UNOP_UNONE_UNONE, vmvnq_u, v16qi, v8hi, v4si)\n-VAR3(UNOP_UNONE_UNONE, vdupq_n_u, v16qi, v8hi, v4si)\n-VAR3(UNOP_UNONE_UNONE, vclzq_u, v16qi, v8hi, v4si)\n-VAR3(UNOP_UNONE_UNONE, vaddvq_u, v16qi, v8hi, v4si)\n-VAR2(UNOP_UNONE_UNONE, vrev32q_u, v16qi, v8hi)\n-VAR2(UNOP_UNONE_UNONE, vmovltq_u, v16qi, v8hi)\n-VAR2(UNOP_UNONE_UNONE, vmovlbq_u, v16qi, v8hi)\n-VAR2(UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n-VAR2(UNOP_UNONE_NONE, vcvtpq_u, v8hi, v4si)\n-VAR2(UNOP_UNONE_NONE, vcvtnq_u, v8hi, v4si)\n-VAR2(UNOP_UNONE_NONE, vcvtmq_u, v8hi, v4si)\n-VAR2(UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n-VAR2(UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n-VAR1(UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n-VAR1(UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n-VAR1(UNOP_UNONE_UNONE, vctp16q, hi)\n-VAR1(UNOP_UNONE_UNONE, vctp32q, hi)\n-VAR1(UNOP_UNONE_UNONE, vctp64q, hi)\n-VAR1(UNOP_UNONE_UNONE, vctp8q, hi)\n-VAR1(UNOP_UNONE_UNONE, vpnot, hi)\n-VAR2(BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n-VAR2(BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n-VAR2(BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_IMM, vcvtq_n_from_f_u, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_IMM, vcvtq_n_from_f_s, v8hi, v4si)\n-VAR4(BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n-VAR4(BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n-VAR3(BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n-VAR1(BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vsubq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vrmulhq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vrhaddq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vqsubq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vqsubq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vqaddq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vqaddq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vorrq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vornq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmulq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmulq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmulltq_int_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmullbq_int_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmulhq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmladavq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vminvq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vminq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmaxvq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vmaxq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vhsubq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpneq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vaddvaq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vaddq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_UNONE, vabdq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vshlq_r_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vrshlq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vrshlq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vqshlq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vqshlq_r_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vqrshlq_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vqrshlq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vminavq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vminaq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vmaxavq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vmaxaq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vsubq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vshlq_r_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vrshlq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vrshlq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vrmulhq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vrhaddq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqsubq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqsubq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqshlq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqshlq_r_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqrshlq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqrshlq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqrdmulhq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqrdmulhq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqdmulhq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqdmulhq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqaddq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vqaddq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vorrq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vornq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmulq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmulq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmulltq_int_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmullbq_int_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmulhq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmlsdavxq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmlsdavq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmladavxq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmladavq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vminvq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vminq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmaxvq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vmaxq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhsubq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhsubq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vaddvaq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vaddq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_NONE, vabdq_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_IMM, vshlq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_IMM, vrshrq_n_s, v16qi, v8hi, v4si)\n-VAR3(BINOP_NONE_NONE_IMM, vqshlq_n_s, v16qi, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vqmovntq_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vqmovnbq_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vmulltq_poly_p, v16qi, v8hi)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vmullbq_poly_p, v16qi, v8hi)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vmovntq_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vmovnbq_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_UNONE, vmlaldavq_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_NONE, vqmovuntq_s, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_NONE, vqmovunbq_s, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_IMM, vshlltq_n_u, v16qi, v8hi)\n-VAR2(BINOP_UNONE_UNONE_IMM, vshllbq_n_u, v16qi, v8hi)\n-VAR2(BINOP_UNONE_UNONE_IMM, vorrq_n_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_UNONE_IMM, vbicq_n_u, v8hi, v4si)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpneq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpneq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpltq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpltq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpleq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpleq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpgtq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpgtq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpgeq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpgeq_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpeqq_n_f, v8hf, v4sf)\n-VAR2(BINOP_UNONE_NONE_NONE, vcmpeqq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vsubq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vqmovntq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vqmovnbq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vqdmulltq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vqdmulltq_n_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vqdmullbq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vqdmullbq_n_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vorrq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vornq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmulq_n_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmulq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmovntq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vmovnbq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vmlsldavxq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vmlsldavq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vmlaldavxq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vmlaldavq_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_NONE, vminnmvq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vminnmq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vminnmavq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vminnmaq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmaxnmvq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmaxnmq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmaxnmavq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vmaxnmaq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, veorq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot90_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot270_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcmulq_rot180_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcmulq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcaddq_rot90_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vcaddq_rot270_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vbicq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vandq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vaddq_n_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_NONE, vabdq_f, v8hf, v4sf)\n-VAR2(BINOP_NONE_NONE_IMM, vshlltq_n_s, v16qi, v8hi)\n-VAR2(BINOP_NONE_NONE_IMM, vshllbq_n_s, v16qi, v8hi)\n-VAR2(BINOP_NONE_NONE_IMM, vorrq_n_s, v8hi, v4si)\n-VAR2(BINOP_NONE_NONE_IMM, vbicq_n_s, v8hi, v4si)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vrmlaldavhq_u, v4si)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vctp8q_m, hi)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vctp64q_m, hi)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vctp32q_m, hi)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vctp16q_m, hi)\n-VAR1(BINOP_UNONE_UNONE_UNONE, vaddlvaq_u, v4si)\n-VAR1(BINOP_NONE_NONE_NONE, vrmlsldavhxq_s, v4si)\n-VAR1(BINOP_NONE_NONE_NONE, vrmlsldavhq_s, v4si)\n-VAR1(BINOP_NONE_NONE_NONE, vrmlaldavhxq_s, v4si)\n-VAR1(BINOP_NONE_NONE_NONE, vrmlaldavhq_s, v4si)\n-VAR1(BINOP_NONE_NONE_NONE, vcvttq_f16_f32, v8hf)\n-VAR1(BINOP_NONE_NONE_NONE, vcvtbq_f16_f32, v8hf)\n-VAR1(BINOP_NONE_NONE_NONE, vaddlvaq_s, v4si)\n+VAR5 (STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndxq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndpq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndnq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndmq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndaq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrev64q_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vnegq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vdupq_n_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vabsq_f, v8hf, v4sf)\n+VAR1 (UNOP_NONE_NONE, vrev32q_f, v8hf)\n+VAR1 (UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n+VAR1 (UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n+VAR2 (UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n+VAR2 (UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n+VAR3 (UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vqnegq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vqabsq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vnegq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vmvnq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vdupq_n_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vclzq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vclsq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vaddvq_s, v16qi, v8hi, v4si)\n+VAR3 (UNOP_SNONE_SNONE, vabsq_s, v16qi, v8hi, v4si)\n+VAR2 (UNOP_SNONE_SNONE, vrev32q_s, v16qi, v8hi)\n+VAR2 (UNOP_SNONE_SNONE, vmovltq_s, v16qi, v8hi)\n+VAR2 (UNOP_SNONE_SNONE, vmovlbq_s, v16qi, v8hi)\n+VAR2 (UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtpq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtnq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtmq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtaq_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n+VAR1 (UNOP_SNONE_SNONE, vrev16q_s, v16qi)\n+VAR1 (UNOP_SNONE_SNONE, vaddlvq_s, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vmvnq_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vdupq_n_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vclzq_u, v16qi, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vaddvq_u, v16qi, v8hi, v4si)\n+VAR2 (UNOP_UNONE_UNONE, vrev32q_u, v16qi, v8hi)\n+VAR2 (UNOP_UNONE_UNONE, vmovltq_u, v16qi, v8hi)\n+VAR2 (UNOP_UNONE_UNONE, vmovlbq_u, v16qi, v8hi)\n+VAR2 (UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtpq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtnq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtmq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n+VAR1 (UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n+VAR1 (UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n+VAR1 (UNOP_UNONE_UNONE, vctp16q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp32q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp64q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp8q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vpnot, hi)\n+VAR2 (BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n+VAR2 (BINOP_NONE_UNONE_IMM, vcvtq_n_to_f_u, v8hf, v4sf)\n+VAR2 (BINOP_NONE_UNONE_UNONE, vcreateq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_IMM, vcvtq_n_from_f_u, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_from_f_s, v8hi, v4si)\n+VAR4 (BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n+VAR4 (BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n+VAR1 (BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vrmulhq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vrhaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vqaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vorrq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vornq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulltq_int_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmullbq_int_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmulhq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmladavq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vminvq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vminq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxvq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vmaxq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhsubq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vhaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, veorq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmphiq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvaq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vaddq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vabdq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_r_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqshlq_r_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vqrshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vminavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vminaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vmaxavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vmaxaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vbrsrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vrshrq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vqshlq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpltq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpleq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_NONE_IMM, vqshluq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_UNONE, vaddvq_p_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vshlq_r_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vrhaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqshlq_r_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqrdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqdmulhq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vqaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vorrq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vornq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulltq_int_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmullbq_int_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmulhq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmlsdavxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmlsdavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmladavxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmladavq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vminvq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vminq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmaxvq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vmaxq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhsubq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhsubq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vaddvaq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vaddq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vabdq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vshlq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vrshrq_n_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_IMM, vqshlq_n_s, v16qi, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vqmovntq_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vqmovnbq_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vmulltq_poly_p, v16qi, v8hi)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vmullbq_poly_p, v16qi, v8hi)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vmovntq_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vmovnbq_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_UNONE, vmlaldavq_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_NONE, vqmovuntq_s, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_NONE, vqmovunbq_s, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_IMM, vshlltq_n_u, v16qi, v8hi)\n+VAR2 (BINOP_UNONE_UNONE_IMM, vshllbq_n_u, v16qi, v8hi)\n+VAR2 (BINOP_UNONE_UNONE_IMM, vorrq_n_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_UNONE_IMM, vbicq_n_u, v8hi, v4si)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpneq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpneq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpltq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpltq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpleq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpleq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpgtq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpgtq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpgeq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpgeq_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpeqq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_UNONE_NONE_NONE, vcmpeqq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vsubq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vqmovntq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vqmovnbq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vqdmulltq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vqdmulltq_n_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vqdmullbq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vqdmullbq_n_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vorrq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vornq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmulq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmulq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmovntq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vmovnbq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vmlsldavxq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vmlsldavq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vmlaldavxq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vmlaldavq_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_NONE, vminnmvq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vminnmq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vminnmavq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vminnmaq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmaxnmvq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmaxnmq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmaxnmavq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vmaxnmaq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, veorq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot90_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot270_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot180_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot90_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot270_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vbicq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vandq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vaddq_n_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vabdq_f, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_IMM, vshlltq_n_s, v16qi, v8hi)\n+VAR2 (BINOP_NONE_NONE_IMM, vshllbq_n_s, v16qi, v8hi)\n+VAR2 (BINOP_NONE_NONE_IMM, vorrq_n_s, v8hi, v4si)\n+VAR2 (BINOP_NONE_NONE_IMM, vbicq_n_s, v8hi, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vrmlaldavhq_u, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vctp8q_m, hi)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vctp64q_m, hi)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vctp32q_m, hi)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vctp16q_m, hi)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvaq_u, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vrmlsldavhxq_s, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vrmlsldavhq_s, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vrmlaldavhxq_s, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vrmlaldavhq_s, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vcvttq_f16_f32, v8hf)\n+VAR1 (BINOP_NONE_NONE_NONE, vcvtbq_f16_f32, v8hf)\n+VAR1 (BINOP_NONE_NONE_NONE, vaddlvaq_s, v4si)\n+VAR2 (TERNOP_NONE_NONE_IMM_UNONE, vbicq_m_n_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_IMM_UNONE, vbicq_m_n_u, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vqrshrnbq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vqrshrnbq_n_u, v8hi, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlaldavhaq_s, v4si)\n+VAR1 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrmlaldavhaq_u, v4si)\n+VAR2 (TERNOP_NONE_NONE_UNONE_UNONE, vcvtq_m_to_f_u, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtq_m_to_f_s, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpeqq_m_f, v8hf, v4sf)\n+VAR3 (TERNOP_UNONE_NONE_UNONE_IMM, vshlcq_carry_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vshlcq_carry_u, v16qi, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_IMM, vqrshrunbq_n_s, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_NONE_NONE, vabavq_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_UNONE, vabavq_u, v16qi, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtaq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtaq_m_s, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vshlcq_vec_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_UNONE_IMM, vshlcq_vec_s, v16qi, v8hi, v4si)"}, {"sha": "3cdb2e71cf04d45d220f6667646d226c8015659a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 185, "deletions": 2, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -85,7 +85,11 @@\n \t\t\t VSHLLBQ_U VSHLLTQ_U VSHLLTQ_S VQMOVNTQ_U VQMOVNTQ_S\n \t\t\t VSHLLBQ_N_S VSHLLBQ_N_U VSHLLTQ_N_U VSHLLTQ_N_S\n \t\t\t VRMLALDAVHQ_U VRMLALDAVHQ_S VMULLTQ_POLY_P\n-\t\t\t VMULLBQ_POLY_P])\n+\t\t\t VMULLBQ_POLY_P VBICQ_M_N_S VBICQ_M_N_U VCMPEQQ_M_F\n+\t\t\t VCVTAQ_M_S VCVTAQ_M_U VCVTQ_M_TO_F_S VCVTQ_M_TO_F_U\n+\t\t\t VQRSHRNBQ_N_U VQRSHRNBQ_N_S VQRSHRUNBQ_N_S\n+\t\t\t VRMLALDAVHAQ_S VABAVQ_S VABAVQ_U VSHLCQ_S VSHLCQ_U\n+\t\t\t VRMLALDAVHAQ_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -146,7 +150,12 @@\n \t\t       (VQMOVNBQ_U \"u\") (VQMOVNBQ_S \"s\") (VQMOVNTQ_S \"s\")\n \t\t       (VQMOVNTQ_U \"u\") (VSHLLBQ_N_U \"u\") (VSHLLBQ_N_S \"s\")\n \t\t       (VSHLLTQ_N_U \"u\") (VSHLLTQ_N_S \"s\") (VRMLALDAVHQ_U \"u\")\n-\t\t       (VRMLALDAVHQ_S \"s\")])\n+\t\t       (VRMLALDAVHQ_S \"s\") (VBICQ_M_N_S \"s\") (VBICQ_M_N_U \"u\")\n+\t\t       (VCVTAQ_M_S \"s\") (VCVTAQ_M_U \"u\") (VCVTQ_M_TO_F_S \"s\")\n+\t\t       (VCVTQ_M_TO_F_U \"u\") (VQRSHRNBQ_N_S \"s\")\n+\t\t       (VQRSHRNBQ_N_U \"u\") (VABAVQ_S \"s\") (VABAVQ_U \"u\")\n+\t\t       (VRMLALDAVHAQ_U \"u\") (VRMLALDAVHAQ_S \"s\") (VSHLCQ_S \"s\")\n+\t\t       (VSHLCQ_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -241,6 +250,13 @@\n (define_int_iterator VSHLLBQ_N [VSHLLBQ_N_S VSHLLBQ_N_U])\n (define_int_iterator VSHLLTQ_N [VSHLLTQ_N_U VSHLLTQ_N_S])\n (define_int_iterator VRMLALDAVHQ [VRMLALDAVHQ_U VRMLALDAVHQ_S])\n+(define_int_iterator VBICQ_M_N [VBICQ_M_N_S VBICQ_M_N_U])\n+(define_int_iterator VCVTAQ_M [VCVTAQ_M_S VCVTAQ_M_U])\n+(define_int_iterator VCVTQ_M_TO_F [VCVTQ_M_TO_F_S VCVTQ_M_TO_F_U])\n+(define_int_iterator VQRSHRNBQ_N [VQRSHRNBQ_N_U VQRSHRNBQ_N_S])\n+(define_int_iterator VABAVQ [VABAVQ_S VABAVQ_U])\n+(define_int_iterator VSHLCQ [VSHLCQ_S VSHLCQ_U])\n+(define_int_iterator VRMLALDAVHAQ [VRMLALDAVHAQ_S VRMLALDAVHAQ_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -3057,3 +3073,170 @@\n   \"vrmlaldavh.<supf>32 %Q0, %R0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vbicq_m_n_s, vbicq_m_n_u])\n+;;\n+(define_insn \"mve_vbicq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VBICQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vbict.i%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vcmpeqq_m_f])\n+;;\n+(define_insn \"mve_vcmpeqq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPEQQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\teq, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vcvtaq_m_u, vcvtaq_m_s])\n+;;\n+(define_insn \"mve_vcvtaq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTAQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtat.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vcvtq_m_to_f_s, vcvtq_m_to_f_u])\n+;;\n+(define_insn \"mve_vcvtq_m_to_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTQ_M_TO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtt.f%#<V_sz_elem>.<supf>%#<V_sz_elem>\t %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vqrshrnbq_n_u, vqrshrnbq_n_s])\n+;;\n+(define_insn \"mve_vqrshrnbq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t\t\t (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQRSHRNBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshrnb.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+;;\n+;; [vqrshrunbq_n_s])\n+;;\n+(define_insn \"mve_vqrshrunbq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t\t\t (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQRSHRUNBQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshrunb.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+;;\n+;; [vrmlaldavhaq_s vrmlaldavhaq_u])\n+;;\n+(define_insn \"mve_vrmlaldavhaq_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 3 \"s_register_operand\" \"w\")]\n+\t VRMLALDAVHAQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlaldavha.<supf>32 %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vabavq_s, vabavq_u])\n+;;\n+(define_insn \"mve_vabavq_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")]\n+\t VABAVQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vabav.<supf>%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshlcq_u vshlcq_s]\n+;;\n+(define_expand \"mve_vshlcq_vec_<supf><mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_32\")\n+  (unspec:MVE_2 [(const_int 0)] VSHLCQ)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn(gen_mve_vshlcq_<supf><mode>(operands[0], ignore_wb, operands[1],\n+                                      operands[2], operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vshlcq_carry_<supf><mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_32\")\n+  (unspec:MVE_2 [(const_int 0)] VSHLCQ)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn(gen_mve_vshlcq_<supf><mode>(ignore_vec, operands[0], operands[1],\n+\t\t\t\t      operands[2], operands[3]));\n+  DONE;\n+})\n+\n+(define_insn \"mve_vshlcq_<supf><mode>\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:SI 3 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 4 \"mve_imm_32\" \"Rf\")]\n+\tVSHLCQ))\n+  (set (match_operand:SI  1 \"s_register_operand\" \"=r\")\n+       (unspec:SI [(match_dup 2)\n+\t\t   (match_dup 3)\n+\t\t   (match_dup 4)]\n+\tVSHLCQ))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vshlc %q0, %1, %4\")"}, {"sha": "15e7d6d669e0e8dbaef489de347d7e14e64e1105", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -1,3 +1,42 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_u8.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "0898103ff7d377c58fc940d43f99955bef9c15ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vabavq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s16\"  }  } */"}, {"sha": "5d920168c535c54148fabcac06e25ceb3632d951", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vabavq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s32\"  }  } */"}, {"sha": "0cfcbc5462d36c6a3a2bae6a72bdedd7e1aecea4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vabavq_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int8x16_t b, int8x16_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.s8\"  }  } */"}, {"sha": "08b75d97bc30895341af56a37ce3f9e84a696939", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vabavq_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u16\"  }  } */"}, {"sha": "d6099b9767e99925198e042ad7c50ef426c53b5e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vabavq_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u32\"  }  } */"}, {"sha": "948ffbc49e8e3d006c3af3414edf33d96d17d21a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b, uint8x16_t c)\n+{\n+  return vabavq_u8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b, uint8x16_t c)\n+{\n+  return vabavq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vabav.u8\"  }  } */"}, {"sha": "f70e5a34cbc76b8a65b09135d5b7f49626d26106", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n_s16 (a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n (a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f41169d4414ad8c34987a5cab7d8ec7670d96f6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n_s32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "add8a15c0667e74a6d360b508d46955a255494cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fa53e332bb896ca2e531f179a10cdefbbce2147f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_n_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n_u32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vbicq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "dbe2a5f5d7df6d2f51846ae8e7b6c177acc62d80", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8947375be394db7a33cb4cc398603f10000ec980", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e9aa0e4a0d7642176d0eb58a3a06cd27072f950a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_m_s16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s16_f16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m_s16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fb5b8c6f9c94ce970e8e9e1cdc7cf0f89d62b53a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_m_s32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_s32_f32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m_s32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0193a090d46643eb51bae7ded34d9f8db7b17dd3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_m_u16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u16_f16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m_u16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4233fc38911f39c8a42d001dd7c25a4ba02022e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_m_u32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_m_u32_f32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m_u32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b013a77b725e77c5b9bf3d7fbcde1889bf1a1f6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_f16_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_f16_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "75aa4c1f2e800c5d0cd06c25c4b4e5e1642c22aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_f16_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f16_u16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_f16_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "df4494413653b3b5e5eaede302364be0a9b52203", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_f32_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_f32_s32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "bea45f6bef3b10923fdad73f36732f8d97f2ca7c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_f32_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_f32_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_f32_u32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "64dff62b0a04792f1b71452c740a13c69dba22c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqrshrnbq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.s16\"  }  } */"}, {"sha": "371b4768b1f02e8b220236552e3e6f077a5e29a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqrshrnbq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.s32\"  }  } */"}, {"sha": "c0849b81f017ed3eee7f4e102662069633361c64", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqrshrnbq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.u16\"  }  } */"}, {"sha": "e70c1dcaeddd734cec0e23358f475335f5755716", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_n_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqrshrnbq_n_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnb.u32\"  }  } */"}, {"sha": "97e25705b2e884b6978a2585bffca1ad08aa3014", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqrshrunbq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunb.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqrshrunbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunb.s16\"  }  } */"}, {"sha": "fe9a42cc871737f50414c52d5f03b5f582fe8c03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_n_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqrshrunbq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunb.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqrshrunbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunb.s32\"  }  } */"}, {"sha": "d86dbb57be05fd64df67af72f44508bd984236d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlaldavhaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavha.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlaldavhaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavha.s32\"  }  } */"}, {"sha": "776d8601c459ab0f5e3cb94dfe83138d07460117", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vrmlaldavhaq_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavha.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vrmlaldavhaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavha.u32\"  }  } */"}, {"sha": "27dbccee337a181046af11ec39279eed1027ae4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, uint32_t * b)\n+{\n+  return vshlcq_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}, {"sha": "3cd034d6523723ca05e4d12e1ed9489ec490271a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, uint32_t * b)\n+{\n+  return vshlcq_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}, {"sha": "5e8e92d38ba02ba46f836b2a199d099875305af9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_s8.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, uint32_t * b)\n+{\n+  return vshlcq_s8 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}, {"sha": "dbb486ada1771727b783a11e81deae0a5866390c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u16.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32_t * b)\n+{\n+  return vshlcq_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}, {"sha": "7581bbbfa6a5fbe82d505e484bd3565912ae3cd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u32.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t * b)\n+{\n+  return vshlcq_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}, {"sha": "fa10d0691a819cd97bfc8fbe80b4f8278d0964e3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dad5b336874338fcad2ae0509bbf520a01e353a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_u8.c?ref=0dad5b336874338fcad2ae0509bbf520a01e353a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint32_t * b)\n+{\n+  return vshlcq_u8 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint32_t * b)\n+{\n+  return vshlcq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vshlc\"  }  } */"}]}