{"sha": "36221fc4ec0e13eece16f20d5e0262458d013026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyMjFmYzRlYzBlMTNlZWNlMTZmMjBkNWUwMjYyNDU4ZDAxMzAyNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-28T12:10:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-28T12:10:38Z"}, "message": "df.c (iterate_dataflow_sbitmap, [...]): Add casts to remove warnings.\n\n\t* df.c (iterate_dataflow_sbitmap, iterate_dataflow_bitmap):\n\tAdd casts to remove warnings.\n\nFrom-SVN: r47412", "tree": {"sha": "95f542577a2be02ee74c3ee5c1f80676c02ed9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f542577a2be02ee74c3ee5c1f80676c02ed9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36221fc4ec0e13eece16f20d5e0262458d013026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36221fc4ec0e13eece16f20d5e0262458d013026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36221fc4ec0e13eece16f20d5e0262458d013026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36221fc4ec0e13eece16f20d5e0262458d013026/comments", "author": null, "committer": null, "parents": [{"sha": "04203c18ad15777253ad1050c52f8cc405231a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04203c18ad15777253ad1050c52f8cc405231a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04203c18ad15777253ad1050c52f8cc405231a18"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "cec142e5a50ab55a119df0a4eb5df7439e236c13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36221fc4ec0e13eece16f20d5e0262458d013026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36221fc4ec0e13eece16f20d5e0262458d013026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36221fc4ec0e13eece16f20d5e0262458d013026", "patch": "@@ -7,6 +7,9 @@ Wed Nov 28 06:52:27 2001  Arnaud Charlet  <charlet@ACT-Europe.FR>\n \n Wed Nov 28 08:21:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* df.c (iterate_dataflow_sbitmap, iterate_dataflow_bitmap):\n+\tAdd casts to remove warnings.\n+\n \t* Makefile.in (OBJS): Sort alphabetically.\n \n \t* print-rtl.c (print_rtx): If RTX code is bad, just say so."}, {"sha": "a6a474c42160eb2f24c7eff7f2eeb36ae0b647ff", "filename": "gcc/df.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36221fc4ec0e13eece16f20d5e0262458d013026/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36221fc4ec0e13eece16f20d5e0262458d013026/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=36221fc4ec0e13eece16f20d5e0262458d013026", "patch": "@@ -3863,7 +3863,7 @@ iterative_dataflow_sbitmap (in, out, gen, kill, blocks,\n   worklist = fibheap_new ();\n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i,\n   {\n-    fibheap_insert (worklist, order[i], (void *) i); \n+    fibheap_insert (worklist, order[i], (void *) (size_t) i); \n     SET_BIT (pending, i);\n     if (dir == FORWARD)\n       sbitmap_copy (out[i], gen[i]);\n@@ -3874,18 +3874,17 @@ iterative_dataflow_sbitmap (in, out, gen, kill, blocks,\n     {\n       while (!fibheap_empty (worklist))\n \t{\n-\t  i = (int) fibheap_extract_min  (worklist);\n+\t  i = (size_t) fibheap_extract_min (worklist);\n \t  bb = BASIC_BLOCK (i);\n \t  if (!TEST_BIT (visited, bb->index))\n \t    hybrid_search_sbitmap (bb, in, out, gen, kill, dir, \n-\t\t\t\t   conf_op, transfun, visited, pending, \n-\t\t\t\t   data);\n+\t\t\t\t   conf_op, transfun, visited, pending, data);\n \t}\n       if (sbitmap_first_set_bit (pending) != -1)\n \t{\n \t  EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i,\n \t  {\n-\t    fibheap_insert (worklist, order[i], (void *) i);\n+\t    fibheap_insert (worklist, order[i], (void *) (size_t) i);\n \t  });\n \t  sbitmap_zero (visited);\n \t}\n@@ -3923,7 +3922,7 @@ iterative_dataflow_bitmap (in, out, gen, kill, blocks,\n   worklist = fibheap_new ();\n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i,\n   {\n-    fibheap_insert (worklist, order[i], (void *) i); \n+    fibheap_insert (worklist, order[i], (void *) (size_t) i);\n     SET_BIT (pending, i);\n     if (dir == FORWARD)\n       bitmap_copy (out[i], gen[i]);\n@@ -3934,18 +3933,17 @@ iterative_dataflow_bitmap (in, out, gen, kill, blocks,\n     {\n       while (!fibheap_empty (worklist))\n \t{\n-\t  i = (int) fibheap_extract_min  (worklist);\n+\t  i = (size_t) fibheap_extract_min (worklist);\n \t  bb = BASIC_BLOCK (i);\n \t  if (!TEST_BIT (visited, bb->index))\n \t    hybrid_search_bitmap (bb, in, out, gen, kill, dir, \n-\t\t\t\t  conf_op, transfun, visited, pending, \n-\t\t\t\t  data);\n+\t\t\t\t  conf_op, transfun, visited, pending, data);\n \t}\n       if (sbitmap_first_set_bit (pending) != -1)\n \t{\n \t  EXECUTE_IF_SET_IN_BITMAP (blocks, 0, i,\n \t  {\n-\t    fibheap_insert (worklist, order[i], (void *) i);\n+\t    fibheap_insert (worklist, order[i], (void *) (size_t) i);\n \t  });\n \t  sbitmap_zero (visited);\n \t}"}]}