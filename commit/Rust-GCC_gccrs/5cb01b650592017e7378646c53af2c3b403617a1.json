{"sha": "5cb01b650592017e7378646c53af2c3b403617a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiMDFiNjUwNTkyMDE3ZTczNzg2NDZjNTNhZjJjM2I0MDM2MTdhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@ultra.linux.cz", "date": "1999-07-30T21:55:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-30T21:55:06Z"}, "message": "Jakub Jelinek  <jj@ultra.linux.cz>\n\n        * config/sparc/linux64.h (CC1_SPEC): Preserve CPU specified by\n        the user if using the non-default arch size in BI_ARCH configuration.\n        * config/sparc/sol2-sld-64.h (CC1_SPEC): Ditto.\n\n        * config/sparc/sparc.md (cmp_mul_set, cmp_udiv_cc_set):\n        Fix patterns so that they actually match.\n        (cmp_sdiv_cc_set): Ditto, also don't require g0 to be zero.\n        (mulsidi3_sp64, const_mulsidi3_sp64): New patterns.\n        (const_mulsidi3_sp32): Renamed from const_mulsidi3, only on\n        TARGET_HARD_MUL32.\n        (mulsidi3): Reflect this in the expand.\n        (smulsi3_highpart): Only on TARGET_ARCH32.\n        (umulsidi3_sp64, const_umulsidi3_sp64): New patterns.\n        (const_umulsidi3_sp32): Renamed from const_umulsidi3.\n        (umulsidi3): Reflect this in the expand.\n        (umulsi3_highpart): Only on TARGET_ARCH32.\n        (divsi3_sp32): Renamed from divsi3, only on TARGET_ARCH32,\n        don't require g0 to be zero.\n        (udivsi3_sp32): Renamed from udivsi3, only on TARGET_ARCH32.\n        ({,u}divsi3): New expands.\n        ({,u}divsi3_sp64): New patterns.\n        (after lshrdi3_v8plus): Four new patterns to help combiner\n        optimizing nested mixed mode shifts.\n\n        * config/sparc/sparc.c (sparc_override_options): Use deprecated\n        v8 instructions if optimizing for UltraSPARC I, II, IIi, as it\n        speed things up. Don't use them by default on plain v9 in 64bit\n        mode, according to what SPAMv9 sais.\n\n        * config/sparc/sparc.h: Fix comments, e.g. Linux already preserves\n        top 32 bits of %[og][0-7] in signal handlers.\n        Also, TARGET_HARD_MUL32 now is only true for TARGET_ARCH32.\n\nFrom-SVN: r28346", "tree": {"sha": "4c75876851d6430c6b555f60ab1fffedcceb31f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c75876851d6430c6b555f60ab1fffedcceb31f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb01b650592017e7378646c53af2c3b403617a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb01b650592017e7378646c53af2c3b403617a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb01b650592017e7378646c53af2c3b403617a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb01b650592017e7378646c53af2c3b403617a1/comments", "author": null, "committer": null, "parents": [{"sha": "cd531a2eddbe17c94a99af2b62c05fe417b97a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd531a2eddbe17c94a99af2b62c05fe417b97a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd531a2eddbe17c94a99af2b62c05fe417b97a94"}], "stats": {"total": 350, "additions": 260, "deletions": 90}, "files": [{"sha": "ff7ea7405beb9948a9f20b5444a489c35e1f9762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -1,3 +1,38 @@\n+Fri Jul 30 14:53:56 1999  Jakub Jelinek  <jj@ultra.linux.cz>\n+\n+\t* config/sparc/linux64.h (CC1_SPEC): Preserve CPU specified by\n+\tthe user if using the non-default arch size in BI_ARCH configuration.\n+\t* config/sparc/sol2-sld-64.h (CC1_SPEC): Ditto.\n+\n+\t* config/sparc/sparc.md (cmp_mul_set, cmp_udiv_cc_set):\n+\tFix patterns so that they actually match.\n+\t(cmp_sdiv_cc_set): Ditto, also don't require g0 to be zero.\n+\t(mulsidi3_sp64, const_mulsidi3_sp64): New patterns.\n+\t(const_mulsidi3_sp32): Renamed from const_mulsidi3, only on\n+\tTARGET_HARD_MUL32.\n+\t(mulsidi3): Reflect this in the expand.\n+\t(smulsi3_highpart): Only on TARGET_ARCH32.\n+\t(umulsidi3_sp64, const_umulsidi3_sp64): New patterns.\n+\t(const_umulsidi3_sp32): Renamed from const_umulsidi3.\n+\t(umulsidi3): Reflect this in the expand.\n+\t(umulsi3_highpart): Only on TARGET_ARCH32.\n+\t(divsi3_sp32): Renamed from divsi3, only on TARGET_ARCH32,\n+\tdon't require g0 to be zero.\n+\t(udivsi3_sp32): Renamed from udivsi3, only on TARGET_ARCH32.\n+\t({,u}divsi3): New expands.\n+\t({,u}divsi3_sp64): New patterns.\n+\t(after lshrdi3_v8plus): Four new patterns to help combiner\n+\toptimizing nested mixed mode shifts.\n+\n+\t* config/sparc/sparc.c (sparc_override_options): Use deprecated\n+\tv8 instructions if optimizing for UltraSPARC I, II, IIi, as it\n+\tspeed things up. Don't use them by default on plain v9 in 64bit\n+\tmode, according to what SPAMv9 sais.\n+\n+\t* config/sparc/sparc.h: Fix comments, e.g. Linux already preserves\n+\ttop 32 bits of %[og][0-7] in signal handlers.\n+\tAlso, TARGET_HARD_MUL32 now is only true for TARGET_ARCH32.\n+\n Fri Jul 30 03:00:41 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (zvdep_imm32): Renamed from zvdep_imm."}, {"sha": "cc01c76510ca16e1855be1bfd00f73d53ca03427", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -225,15 +225,17 @@ Boston, MA 02111-1307, USA.  */\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m64:-mptr64 -mcpu=ultrasparc -mstack-bias} \\\n+%{m64:-mptr64 -mstack-bias \\\n+  %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:-mcpu=ultrasparc}}}}}}}} \\\n \"\n #else\n #define CC1_SPEC \"\\\n %{sun4:} %{target:} \\\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m32:-mptr32 -mcpu=cypress -mno-stack-bias} \\\n+%{m32:-mptr32 -mno-stack-bias \\\n+  %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:-mcpu=cypress}}}}}}}} \\\n \"\n #endif\n "}, {"sha": "aa107a8b9e4bcfb5563e3a0fcea6474c3194dd56", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -244,16 +244,19 @@\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m64:-mptr64 -mcpu=v9 -mstack-bias -mno-v8plus} \\\n+%{m64:-mptr64 -mstack-bias -mno-v8plus \\\n+  %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8*:%{!msupersparc:-mcpu=v9}}}}}}}} \\\n \"\n #else\n #define CC1_SPEC \"\\\n %{sun4:} %{target:} \\\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n-%{m32:-mptr32 -mcpu=cypress -mno-stack-bias} \\\n-%{mv8plus:-m32 -mptr32 -mcpu=cypress -mno-stack-bias} \\\n+%{m32:-mptr32 -mno-stack-bias \\\n+  %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8*:%{!msupersparc:-mcpu=cypress}}}}}}}} \\\n+%{mv8plus:-m32 -mptr32 -mno-stack-bias \\\n+  %{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:-mcpu=v9}}}}}}}} \\\n \"\n #endif\n "}, {"sha": "78a198ba98c91248725faf64071a77538e52fe3d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -213,8 +213,11 @@ sparc_override_options ()\n     /* TEMIC sparclet */\n     { \"tsc701\",     PROCESSOR_TSC701, MASK_ISA, MASK_SPARCLET },\n     { \"v9\",         PROCESSOR_V9, MASK_ISA, MASK_V9 },\n-    /* TI ultrasparc */\n-    { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9 },\n+    /* TI ultrasparc I, II, IIi */\n+    { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9\n+    /* Although insns using %y are deprecated, it is a clear win on current\n+       ultrasparcs. */\n+    \t\t\t\t\t\t    |MASK_DEPRECATED_V8_INSNS },\n     { 0, 0, 0, 0 }\n   };\n   struct cpu_table *cpu;"}, {"sha": "2933a38ee28093fe8408535c97aa952a3bcf6bf2", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -50,11 +50,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* Code model selection.\n    -mcmodel is used to select the v9 code model.\n-   Different code models aren't supported for v8 code.\n+   Different code models aren't supported for v7/8 code.\n \n    TARGET_CM_32:     32 bit address space, top 32 bits = 0,\n \t\t     pointers are 32 bits.  Note that this isn't intended\n-                     to imply a v8 abi.\n+                     to imply a v7/8 abi.\n \n    TARGET_CM_MEDLOW: 32 bit address space, top 32 bits = 0,\n                      avoid generating %uhi and %ulo terms,\n@@ -542,9 +542,8 @@ extern int target_flags;\n #define TARGET_VIS (target_flags & MASK_VIS)\n \n /* Compile for Solaris V8+.  32 bit Solaris preserves the high bits of\n-   the current out and global registers.  Linux saves the high bits on\n-   context switches but not signals.  */\n-#define MASK_V8PLUS 0x2000000                 \n+   the current out and global registers and Linux 2.2+ as well.  */\n+#define MASK_V8PLUS 0x2000000\n #define TARGET_V8PLUS (target_flags & MASK_V8PLUS)                            \n \n /* TARGET_HARD_MUL: Use hardware multiply instructions but not %y.\n@@ -555,7 +554,7 @@ extern int target_flags;\n #define TARGET_HARD_MUL32\t\t\t\t\\\n   ((TARGET_V8 || TARGET_SPARCLITE\t\t\t\\\n     || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS)\t\\\n-   && ! TARGET_V8PLUS)\n+   && ! TARGET_V8PLUS && TARGET_ARCH32)\n \n #define TARGET_HARD_MUL\t\t\t\t\t\\\n   (TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET\t\\"}, {"sha": "34e311f162010d225c1314ef9dc331fe9fb6cfed", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 205, "deletions": 77, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb01b650592017e7378646c53af2c3b403617a1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5cb01b650592017e7378646c53af2c3b403617a1", "patch": "@@ -5169,9 +5169,8 @@\n \f\n ;; Integer Multiply/Divide.\n \n-;; The 32 bit multiply/divide instructions are deprecated on v9 and shouldn't\n-;; we used.  We still use them in 32 bit v9 compilers.\n-;; The 64 bit v9 compiler will (/should) widen the args and use muldi3.\n+;; The 32 bit multiply/divide instructions are deprecated on v9, but at\n+;; least in UltraSPARC I, II and IIi it is a win tick-wise.\n \n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -5229,15 +5228,13 @@\n }\"\n   [(set_attr \"length\" \"9,8\")])\n \n-;; It is not known whether this will match.\n-\n (define_insn \"*cmp_mul_set\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mult:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n-   (set (reg:CC_NOOV 100)\n-\t(compare:CC_NOOV (mult:SI (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)))]\n+  [(set (reg:CC 100)\n+\t(compare:CC (mult:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n+\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n   \"smulcc\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"imul\")\n@@ -5253,12 +5250,11 @@\n   if (CONSTANT_P (operands[2]))\n     {\n       if (TARGET_V8PLUS)\n-\t{\n-\t  emit_insn (gen_const_mulsidi3_v8plus (operands[0], operands[1],\n-\t\t\t\t\t\toperands[2]));\n-\t  DONE;\n-\t}\n-      emit_insn (gen_const_mulsidi3 (operands[0], operands[1], operands[2]));\n+\temit_insn (gen_const_mulsidi3_v8plus (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n+      else\n+\temit_insn (gen_const_mulsidi3_sp32 (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n       DONE;\n     }\n   if (TARGET_V8PLUS)\n@@ -5308,14 +5304,22 @@\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_int 1) (const_int 2)))])\n \n+(define_insn \"*mulsidi3_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"smul\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"1\")])\n+\n ;; Extra pattern, because sign_extend of a constant isn't valid.\n \n ;; XXX\n-(define_insn \"const_mulsidi3\"\n+(define_insn \"const_mulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n-  \"TARGET_HARD_MUL\"\n+  \"TARGET_HARD_MUL32\"\n   \"*\n {\n   return TARGET_SPARCLET ? \\\"smuld\\\\t%1, %2, %L0\\\" : \\\"smul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\\\";\n@@ -5324,13 +5328,21 @@\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_int 1) (const_int 2)))])\n \n+(define_insn \"const_mulsidi3_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"smul\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"1\")])\n+\n (define_expand \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL\"\n+  \"TARGET_HARD_MUL && TARGET_ARCH32\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -5406,8 +5418,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n   \"smul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -5418,8 +5429,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n   \"smul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -5433,12 +5443,11 @@\n   if (CONSTANT_P (operands[2]))\n     {\n       if (TARGET_V8PLUS)\n-\t{\n-\t  emit_insn (gen_const_umulsidi3_v8plus (operands[0], operands[1],\n-\t\t\t\t\t\t operands[2]));\n-\t  DONE;\n-\t}\n-      emit_insn (gen_const_umulsidi3 (operands[0], operands[1], operands[2]));\n+\temit_insn (gen_const_umulsidi3_v8plus (operands[0], operands[1],\n+\t\t\t\t\t       operands[2]));\n+      else\n+\temit_insn (gen_const_umulsidi3_sp32 (operands[0], operands[1],\n+\t\t\t\t\t     operands[2]));\n       DONE;\n     }\n   if (TARGET_V8PLUS)\n@@ -5474,10 +5483,18 @@\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_int 1) (const_int 2)))])\n \n+(define_insn \"*umulsidi3_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"umul\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"1\")])\n+\n ;; Extra pattern, because sign_extend of a constant isn't valid.\n \n ;; XXX\n-(define_insn \"const_umulsidi3\"\n+(define_insn \"const_umulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"uns_small_int\" \"\")))]\n@@ -5490,6 +5507,14 @@\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_int 1) (const_int 2)))])\n \n+(define_insn \"const_umulsidi3_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"uns_small_int\" \"\")))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"umul\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"1\")])\n+\n ;; XXX\n (define_insn \"const_umulsidi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h,r\")\n@@ -5508,7 +5533,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL\"\n+  \"TARGET_HARD_MUL && TARGET_ARCH32\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -5567,8 +5592,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n   \"umul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -5579,99 +5603,128 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"uns_small_int\" \"\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n   \"umul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n ;; The v8 architecture specifies that there must be 3 instructions between\n ;; a y register write and a use of it for correct results.\n \n-;; XXX SHEESH\n-(define_insn \"divsi3\"\n+(define_expand \"divsi3\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t\t   (div:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"input_operand\" \"rI,m\")))\n+\t      (clobber (match_scratch:SI 3 \"=&r,&r\"))])]\n+  \"TARGET_V8 || TARGET_DEPRECATED_V8_INSNS\"\n+  \"\n+{\n+  if (TARGET_ARCH64)\n+    {\n+      operands[3] = gen_reg_rtx(SImode);\n+      emit_insn (gen_ashrsi3 (operands[3], operands[1], GEN_INT (31)));\n+      emit_insn (gen_divsi3_sp64 (operands[0], operands[1], operands[2],\n+\t\t\t\t  operands[3]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"divsi3_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"input_operand\" \"rI,m\")))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"(TARGET_V8\n-    || TARGET_DEPRECATED_V8_INSNS)\n-   && ! TARGET_LIVE_G0\"\n+  \"(TARGET_V8 || TARGET_DEPRECATED_V8_INSNS)\n+   && TARGET_ARCH32\"\n   \"*\n {\n   if (which_alternative == 0)\n-  if (TARGET_V9)\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n-  else\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n+    if (TARGET_V9)\n+      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n+    else\n+      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n   else\n     if (TARGET_V9)\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n+      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n     else\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n+      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n }\"\n   [(set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n \t\t      (const_int 4) (const_int 7)))])\n \n+(define_insn \"divsi3_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"input_operand\" \"rI\")))\n+   (use (match_operand:SI 3 \"register_operand\" \"r\"))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"wr\\\\t%%g0, %3, %%y\\\\n\\\\tsdiv\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn \"divdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(div:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_ARCH64\"\n   \"sdivx\\\\t%1, %2, %0\")\n \n-;; It is not known whether this will match.\n-\n-;; XXX I hope it doesn't fucking match...\n (define_insn \"*cmp_sdiv_cc_set\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"rI\")))\n-   (set (reg:CC 100)\n-\t(compare:CC (div:SI (match_dup 1) (match_dup 2))\n+  [(set (reg:CC 100)\n+\t(compare:CC (div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(div:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"(TARGET_V8\n-    || TARGET_DEPRECATED_V8_INSNS)\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_V8 || TARGET_DEPRECATED_V8_INSNS\"\n   \"*\n {\n   if (TARGET_V9)\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n+    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n   else\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%%g0, %3, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n+    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n }\"\n   [(set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n \t\t      (const_int 3) (const_int 6)))])\n \n ;; XXX\n-(define_insn \"udivsi3\"\n+(define_expand \"udivsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(udiv:SI (match_operand:SI 1 \"reg_or_nonsymb_mem_operand\" \"\")\n+\t\t (match_operand:SI 2 \"input_operand\" \"\")))]\n+  \"(TARGET_V8 || TARGET_DEPRECATED_V8_INSNS) && ! TARGET_LIVE_G0\"\n+  \"\")\n+\n+(define_insn \"udivsi3_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r,&r\")\n \t(udiv:SI (match_operand:SI 1 \"reg_or_nonsymb_mem_operand\" \"r,r,m\")\n \t\t (match_operand:SI 2 \"input_operand\" \"rI,m,r\")))]\n   \"(TARGET_V8\n     || TARGET_DEPRECATED_V8_INSNS)\n-   && ! TARGET_LIVE_G0\"\n+   && TARGET_ARCH32 && ! TARGET_LIVE_G0\"\n   \"*\n {\n   output_asm_insn (\\\"wr\\\\t%%g0, %%g0, %%y\\\", operands);\n   switch (which_alternative)\n     {\n     default:\n-  if (TARGET_V9)\n-\treturn \\\"udiv\\\\t%1, %2, %0\\\";\n       return \\\"nop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %2, %0\\\";\n     case 1:\n       return \\\"ld\\\\t%2, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %0, %0\\\";\n     case 2:\n       return \\\"ld\\\\t%1, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%0, %2, %0\\\";\n     }\n }\"\n-  [(set (attr \"length\")\n-\t(if_then_else (and (eq_attr \"isa\" \"v9\")\n-\t\t\t   (eq_attr \"alternative\" \"0\"))\n-\t\t      (const_int 2) (const_int 5)))])\n+  [(set_attr \"length\" \"5\")])\n+\n+(define_insn \"udivsi3_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(udiv:SI (match_operand:SI 1 \"reg_or_nonsymb_mem_operand\" \"r\")\n+\t\t (match_operand:SI 2 \"input_operand\" \"rI\")))]\n+  \"TARGET_DEPRECATED_V8_INSNS && TARGET_ARCH64\"\n+  \"wr\\\\t%%g0, 0, %%y\\\\n\\\\tudiv\\\\t%1, %2, %0\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"udivdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5680,16 +5733,13 @@\n   \"TARGET_ARCH64\"\n   \"udivx\\\\t%1, %2, %0\")\n \n-;; It is not known whether this will match.\n-\n-;; XXX I hope it doesn't fucking match...\n (define_insn \"*cmp_udiv_cc_set\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(udiv:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"rI\")))\n-   (set (reg:CC 100)\n-\t(compare:CC (udiv:SI (match_dup 1) (match_dup 2))\n-\t\t    (const_int 0)))]\n+  [(set (reg:CC 100)\n+\t(compare:CC (udiv:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(udiv:SI (match_dup 1) (match_dup 2)))]\n   \"(TARGET_V8\n     || TARGET_DEPRECATED_V8_INSNS)\n    && ! TARGET_LIVE_G0\"\n@@ -7251,6 +7301,84 @@\n   \"TARGET_V8PLUS\"\n   \"*return sparc_v8plus_shift (operands, insn, \\\"srlx\\\");\"\n   [(set_attr \"length\" \"5,5,6\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashiftrt:SI (subreg:SI (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t     (const_int 32)) 0)\n+\t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")))]\n+  \"TARGET_ARCH64\n+   && ((GET_CODE (operands[2]) == CONST_INT\n+        && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) < 32)\n+       || (GET_CODE (operands[2]) == CONST_DOUBLE\n+\t   && !CONST_DOUBLE_HIGH (operands[2])\n+           && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 32);\n+\n+  return \\\"srax\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:SI (subreg:SI (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t     (const_int 32)) 0)\n+\t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")))]\n+  \"TARGET_ARCH64\n+   && ((GET_CODE (operands[2]) == CONST_INT\n+        && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) < 32)\n+       || (GET_CODE (operands[2]) == CONST_DOUBLE\n+\t   && !CONST_DOUBLE_HIGH (operands[2])\n+           && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 32);\n+\n+  return \\\"srlx\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashiftrt:SI (subreg:SI (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")) 0)\n+\t\t     (match_operand:SI 3 \"small_int_or_double\" \"n\")))]\n+  \"TARGET_ARCH64\n+   && GET_CODE (operands[2]) == CONST_INT && GET_CODE (operands[3]) == CONST_INT\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) >= 32\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) < 32\n+   && (unsigned HOST_WIDE_INT) (INTVAL (operands[2]) + INTVAL (operands[3])) < 64\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]));\n+\n+  return \\\"srax\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:SI (subreg:SI (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")) 0)\n+\t\t     (match_operand:SI 3 \"small_int_or_double\" \"n\")))]\n+  \"TARGET_ARCH64\n+   && GET_CODE (operands[2]) == CONST_INT && GET_CODE (operands[3]) == CONST_INT\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) >= 32\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) < 32\n+   && (unsigned HOST_WIDE_INT) (INTVAL (operands[2]) + INTVAL (operands[3])) < 64\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]));\n+\n+  return \\\"srlx\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n \f\n ;; Unconditional and other jump instructions\n ;; On the Sparc, by setting the annul bit on an unconditional branch, the"}]}