{"sha": "8ac9d31fd90e5a28237f444567b212d152aabe17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjOWQzMWZkOTBlNWEyODIzN2Y0NDQ1NjdiMjEyZDE1MmFhYmUxNw==", "commit": {"author": {"name": "Tim Josling", "email": "tej@melbpc.org.au", "date": "2002-07-14T01:59:15Z"}, "committer": {"name": "Tim Josling", "email": "timjosling@gcc.gnu.org", "date": "2002-07-14T01:59:15Z"}, "message": "Make gengtype.c language independent.\n\nFrom-SVN: r55436", "tree": {"sha": "2f21865689bba6b9b86d1c23e3bc5f9616a18379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f21865689bba6b9b86d1c23e3bc5f9616a18379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac9d31fd90e5a28237f444567b212d152aabe17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac9d31fd90e5a28237f444567b212d152aabe17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac9d31fd90e5a28237f444567b212d152aabe17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac9d31fd90e5a28237f444567b212d152aabe17/comments", "author": null, "committer": null, "parents": [{"sha": "33ce85ffa76374fb2da94640463bf8241aac1589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ce85ffa76374fb2da94640463bf8241aac1589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ce85ffa76374fb2da94640463bf8241aac1589"}], "stats": {"total": 428, "additions": 341, "deletions": 87}, "files": [{"sha": "7d40ca1b7e0ccad83abd4eaf985bcfa25407d9bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -95,6 +95,66 @@ Thu Jul 11 11:31:12 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t(emit_move_sequence):  Don't directly split DImode constants on 32-bit\n \ttargets.\n \n+2002-07-11  Tim Josling  <tej@melbpc.org.au>\n+\n+\tRemove front end hard coding from gengtype.c.  \n+\n+\t* Makefile.in\n+\t(STAGESTUFF): add gtyp-gen.h\n+\t(GTFILES): Remove front end specific files.\n+\t(GTFILES_FILES_LANGS): New, from configure..\n+\t(GTFILES_FILES_FILES): Likewise.\n+\t(GTFILES_LANG_DIR_NAMES): Likewise.\n+\t(GTFILES_SRCDIR): Likewise.\n+\t(gtyp-gen.h): Build from configure information.\n+\t(s-gtype): Remove command line parameters from gengtype.\n+\t(gengtype.o): Remove dependency on GTFILES. Depend on gtyp-gen.h.\n+\t(mostlyclean): Delete files generated by and for gengtype.\n+\n+\t* c-config-lang.in: New file.\n+\n+\t* configure.in (all_gtfiles_files_langs): New. Accumulate files\n+\tfor each language.\n+\t(all_gtfiles_files_files): New. Accumulate language for each file\n+\taccumulated.\n+\t(gtfiles): Pick up value for C.\n+\t(srcdir): AC-SUBST this variable.\n+\t(all_gtfiles_files_langs): AC-SUBST this variable.\n+\t(all_gtfiles_files_files): AC-SUBST this variable.\n+\t\n+\t* configure: Regenerate.\n+\t\n+\t* gengtype-lex.l (parse_file): Make parameter const.\n+\n+\t* gengtype.c (toplevel): include gtyp-gen.h.\n+\t(BASE_FILE_<language> unnamed enum): Delete.\n+\t(lang_names): Delete (replaced by gtyp-gen.h)\n+\t(lang_dir_names): From gtyp-gen.h, replaces lang_names; changed\n+\tall references.\n+\t(NUM_GT_FILES): New.\n+\t(NUM_LANG_FILES): New.\n+\t(srcdir_len): New.\n+\t(NUM_BASE_FILES): Change calculation.\n+\t(open_base_files): Change prototype to avoid warning.\n+\t(startswith): Delete.\n+\t(get_file_basename): Iterate through generated language list not\n+\thard coded list.\n+\t(get_base_file_bitmap): Use generated list of files and languages.\n+\t(close_output_files): Add prototype to rmove warning.\n+\t(main): Iterate through list of generated files from gtyp-gen.h\n+\trather than command line paramaters.  Ignore duplicated file\n+\tnames. \n+\n+\t* gengtype.h (parse_file): Amend prototype for const parameter.\n+\t\n+\t* doc/sourcebuild.texi: Document gtfiles variable.\n+\n+\t* doc/gty.texi: Document changes to gtfiles variable for front\n+\tends.\n+\n+\t* objc/config-lang.in (gtfiles): Add files needed for objc front\n+\tend.\n+\n 2002-07-10  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/2454"}, {"sha": "d8315d44686c9f522da6f416e1d346bde19659de", "filename": "gcc/Makefile.in", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -755,7 +755,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-constants.h tm-preds.h \\\n  tree-check.h \\\n- s-flags s-config s-codes s-mlib s-under s-genrtl s-gtype \\\n+ s-flags s-config s-codes s-mlib s-under s-genrtl s-gtype gtyp-gen.h \\\n  s-output s-recog s-emit s-extract s-peep s-check \\\n  s-attr s-attrtab s-opinit s-preds s-constants s-crt0 \\\n  genemit$(build_exeext) genoutput$(build_exeext) genrecog$(build_exeext) \\\n@@ -1823,11 +1823,14 @@ GTFILES = $(GCONFIG_H) $(srcdir)/location.h \\\n   $(srcdir)/profile.c $(srcdir)/regclass.c $(srcdir)/reg-stack.c \\\n   $(srcdir)/sdbout.c $(srcdir)/stmt.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/tree.c $(srcdir)/varasm.c \\\n-  $(srcdir)/c-objc-common.c $(srcdir)/c-common.c $(srcdir)/c-parse.in \\\n   $(out_file) \\\n-  $(srcdir)/c-decl.c $(srcdir)/c-pragma.c \\\n   @all_gtfiles@\n \n+GTFILES_FILES_LANGS = @all_gtfiles_files_langs@\n+GTFILES_FILES_FILES = @all_gtfiles_files_files@\n+GTFILES_LANG_DIR_NAMES = @subdirs@\n+GTFILES_SRCDIR = @srcdir@\n+\n gtype-desc.h gtype-desc.c gt-except.h gt-function.h : s-gtype; @true\n gt-integrate.h gt-stmt.h gt-tree.h gt-varasm.h gt-emit-rtl.h : s-gtype; @true\n gt-explow.h gt-stor-layout.h gt-regclass.h gt-lists.h : s-gtype; @true\n@@ -1837,8 +1840,35 @@ gt-reg-stack.h gt-dependence.h : s-gtype ; @true\n gt-c-common.h gt-c-decl.h gt-c-parse.h gt-c-pragma.h : s-gtype; @true\n gt-c-objc-common.h gtype-c.h gt-location.h : s-gtype ; @true\n \n-s-gtype: gengtype$(build_exeext) $(GTFILES)\n-\t./gengtype $(GTFILES)\n+gtyp-gen.h: Makefile\n+\techo \"/* This file is machine generated.  Do not edit.  */\" > tmp-gtyp.h\n+\techo \"static const char *srcdir = \"  >> tmp-gtyp.h\n+\techo \"\\\"$(GTFILES_SRCDIR)\\\"\" >> tmp-gtyp.h\n+\techo \";\" >> tmp-gtyp.h\n+\techo \"static const char *lang_files[] = {\" >> tmp-gtyp.h\n+\tll=\"$(GTFILES_FILES_FILES)\"; \\\n+\tfor f in $$ll; do \\\n+\techo \"\\\"$$f\\\", \"; done >> tmp-gtyp.h\n+\techo \"NULL};\" >> tmp-gtyp.h\n+\techo \"static const char *langs_for_lang_files[] = {\" >> tmp-gtyp.h\n+\tff=\"$(GTFILES_FILES_LANGS)\"; \\\n+\tfor f in $$ff; do \\\n+\techo \"\\\"$$f\\\", \" ; done  >> tmp-gtyp.h\n+\techo \"NULL};\" >> tmp-gtyp.h\n+\techo \"static const char *all_files[] = {\" >> tmp-gtyp.h\n+\tgf=\"$(GTFILES)\"; \\\n+\tfor f in $$gf; do \\\n+\techo \"\\\"$$f\\\", \"; done >> tmp-gtyp.h\n+\techo \" NULL};\" >> tmp-gtyp.h\n+\techo \"static const char *lang_dir_names[] = { \\\"c\\\", \" >> tmp-gtyp.h\n+\tgf=\"$(GTFILES_LANG_DIR_NAMES)\"; \\\n+\tfor l in $$gf; do \\\n+\techo \"\\\"$$l\\\", \"; done >> tmp-gtyp.h\n+\techo \"NULL};\" >> tmp-gtyp.h\n+\t$(SHELL) $(srcdir)/move-if-change tmp-gtyp.h gtyp-gen.h \n+\n+s-gtype: gengtype$(build_exeext)\n+\t./gengtype\n \t$(STAMP) s-gtype\n \n #\f\n@@ -1977,7 +2007,7 @@ gengtype$(build_exeext) : gengtype.o gengtype-lex.o gengtype-yacc.o \\\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t gengtype.o gengtype-lex.o gengtype-yacc.o $(HOST_LIBS)\n \n-gengtype.o : gengtype.c gengtype.h $(HCONFIG_H) $(SYSTEM_H) real.h\n+gengtype.o : gengtype.c gengtype.h $(HCONFIG_H) $(SYSTEM_H) real.h gtyp-gen.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/gengtype.c $(OUTPUT_OPTION)\n \n@@ -2534,6 +2564,11 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns\n # Delete core dumps.\n \t-rm -f core */core\n+# Delete file generated for gengtype.c\n+\t-rm -f gtyp-gen.h\n+# Delete files generated by gengtype.c\n+\t-rm -f gtype-*\n+\t-rm -f gt-*\n \n # Delete all files made by compilation\n # that don't exist in the distribution."}, {"sha": "c0a786f53fdf01d5661be7c656e3109517493c69", "filename": "gcc/c-config-lang.in", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fc-config-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fc-config-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-config-lang.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -0,0 +1,26 @@\n+# Top level configure fragment for GNU C - C language.\n+# Copyright (C) 1994, 1995, 1997, 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n+\n+#This file is part of GCC.\n+\n+#GCC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GCC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GCC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 59 Temple Place - Suite 330,\n+#Boston, MA 02111-1307, USA.\n+\n+# This file c-config-lang.c is a special pseudo config-lang.in file\n+# for the language C. It has limited use, specifically to record the\n+# files used by C that have garbage collection GTY macros in them\n+# which therefore need to be scanned by gengtype.c.\n+\n+gtfiles=\"\\$(srcdir)/c-lang.c \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-objc-common.c\""}, {"sha": "cf0ea626af8ea4c95e3ba3356a01c86486b0a681", "filename": "gcc/configure", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -2244,7 +2244,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in mawk gawk nawk awk\n+for ac_prog in gawk mawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -8168,6 +8168,9 @@ all_outputs='Makefile intl/Makefile fixinc/Makefile gccbug mklibgcc mkheaders'\n all_lang_makefiles=\n # Files for gengtype\n all_gtfiles=\"$config_gtfiles\"\n+# Files for gengtype with language\n+all_gtfiles_files_langs=\n+all_gtfiles_files_files=\n \n # Add the language fragments.\n # Languages are added via two mechanisms.  Some information must be\n@@ -8208,9 +8211,31 @@ do\n \t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n \t\tall_outputs=\"$all_outputs $outputs\"\n \t\tall_gtfiles=\"$all_gtfiles $gtfiles\"\n+                for f in .. $gtfiles\n+                do\n+          \t     if test $f != \"..\"\n+                     then\n+                         all_gtfiles_files_langs=\"$all_gtfiles_files_langs ${s} \"\n+                         all_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n+                     fi\n+                done\n \tfi\n done\n \n+# Pick up gtfiles for c\n+gtfiles=\n+s=\"c\"\n+. ${srcdir}/c-config-lang.in\n+all_gtfiles=\"$all_gtfiles $gtfiles\"\n+for f in .. $gtfiles\n+do\n+     if test $f != \"..\"\n+     then\n+        all_gtfiles_files_langs=\"$all_gtfiles_files_langs ${s} \"\n+        all_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n+     fi\n+done\n+\n check_languages=\n for language in .. $all_languages\n do\n@@ -8402,6 +8427,9 @@ ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xma\n \n \n \n+\n+\n+\n \n \n \n@@ -8668,9 +8696,12 @@ s%@dollar@%$dollar%g\n s%@slibdir@%$slibdir%g\n s%@objdir@%$objdir%g\n s%@subdirs@%$subdirs%g\n+s%@srcdir@%$srcdir%g\n s%@all_boot_languages@%$all_boot_languages%g\n s%@all_compilers@%$all_compilers%g\n s%@all_gtfiles@%$all_gtfiles%g\n+s%@all_gtfiles_files_langs@%$all_gtfiles_files_langs%g\n+s%@all_gtfiles_files_files@%$all_gtfiles_files_files%g\n s%@all_lang_makefiles@%$all_lang_makefiles%g\n s%@all_languages@%$all_languages%g\n s%@all_stagestuff@%$all_stagestuff%g"}, {"sha": "da47e022cadf20f34c4e497dc4f69511b88fffe1", "filename": "gcc/configure.in", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -2408,6 +2408,9 @@ all_outputs='Makefile intl/Makefile fixinc/Makefile gccbug mklibgcc mkheaders'\n all_lang_makefiles=\n # Files for gengtype\n all_gtfiles=\"$config_gtfiles\"\n+# Files for gengtype with language\n+all_gtfiles_files_langs=\n+all_gtfiles_files_files=\n \n # Add the language fragments.\n # Languages are added via two mechanisms.  Some information must be\n@@ -2448,9 +2451,31 @@ do\n \t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n \t\tall_outputs=\"$all_outputs $outputs\"\n \t\tall_gtfiles=\"$all_gtfiles $gtfiles\"\n+                for f in .. $gtfiles\n+                do\n+          \t     if test $f != \"..\"\n+                     then\n+                         all_gtfiles_files_langs=\"$all_gtfiles_files_langs ${s} \"\n+                         all_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n+                     fi\n+                done\n \tfi\n done\n \n+# Pick up gtfiles for c\n+gtfiles=\n+s=\"c\"\n+. ${srcdir}/c-config-lang.in\n+all_gtfiles=\"$all_gtfiles $gtfiles\"\n+for f in .. $gtfiles\n+do\n+     if test $f != \"..\"\n+     then\n+        all_gtfiles_files_langs=\"$all_gtfiles_files_langs ${s} \"\n+        all_gtfiles_files_files=\"$all_gtfiles_files_files ${f} \"\n+     fi\n+done\n+\n check_languages=\n for language in .. $all_languages\n do\n@@ -2578,9 +2603,12 @@ ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xma\n \n # Substitute configuration variables\n AC_SUBST(subdirs)\n+AC_SUBST(srcdir)\n AC_SUBST(all_boot_languages)\n AC_SUBST(all_compilers)\n AC_SUBST(all_gtfiles)\n+AC_SUBST(all_gtfiles_files_langs)\n+AC_SUBST(all_gtfiles_files_files)\n AC_SUBST(all_lang_makefiles)\n AC_SUBST(all_languages)\n AC_SUBST(all_stagestuff)"}, {"sha": "7042e77e153b0837bbf738bb3b3dbc2ef2c91da6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -18,6 +18,12 @@\n \t* pt.c (template_parm_this_level_p, push_template_decl_real):\n \tPass depth as int pointer. \n \n+2002-07-11  Tim Josling  <tej@melbpc.org.au>\n+\n+\tRemove front end hard coding from gengtype.c.  \n+\n+\t* config-lang.in (gtfiles): Add files needed for this front end.\n+\n 2002-07-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (unqualified_name_lookup_error): Declare it."}, {"sha": "eeebb1aac5753508b5b74d38f8c8fd8e4bb63290", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n \n target_libs=\"${libstdcxx_version} target-gperf\"\n \n-gtfiles=\"\\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/parse.y \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/spew.c \\$(srcdir)/cp/tree.c\"\n+gtfiles=\"\\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/parse.y \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/spew.c \\$(srcdir)/cp/tree.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c\""}, {"sha": "37e87c63e7a49aa314c6cc85e06806f5dea8f2ea", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -228,14 +228,31 @@ things you need to do:\n \n @enumerate\n @item\n-You need to add the file to the list of source files the type machinery\n-scans.  For a back-end file, this is usually done automatically; if not,\n-you should add it to @code{config_gtfiles} in the appropriate port's\n-entries in @file{config.gcc}.  For a front-end file, this is done by\n-adding the filename to the @code{gtfiles} variable defined in\n-@file{config-lang.in}.  For other files, this is done by adding the\n+You need to add the file to the list of source files the type\n+machinery scans.  There are three cases: \n+\n+@enumerate a\n+@item\n+For a back-end file, this is usually done\n+automatically; if not, you should add it to @code{config_gtfiles} in\n+the appropriate port's entries in @file{config.gcc}. \n+\n+@item\n+For files shared by all front ends, this is done by adding the\n filename to the @code{GTFILES} variable in @file{Makefile.in}.\n \n+@item \n+For any other file used by a front end, this is done by adding the\n+filename to the @code{gtfiles} variable defined in\n+@file{config-lang.in}.  For C, the file is @file{c-config-lang.in}.\n+This list should include all files that have GTY macros in them that\n+are used in that front end, other than those defined in the previous\n+list items.  For example, it is common for front end writers to use\n+@file{c-common.c} and other files from the C front end, and these\n+should be included in the @file{gtfiles} variable for such front ends.\n+\n+@end enumerate\n+\n @item\n You need to include the file that the type machinery will generate in\n the source file you just changed.  The file will be called"}, {"sha": "9904b52fae91f4cfe64577ebb4a833f4e237c438", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -610,9 +610,10 @@ codes.\n @node Front End Config\n @subsubsection The Front End @file{config-lang.in} File\n \n-Each language subdirectory contains a @file{config-lang.in} file.\n-This file is a shell script that may define some variables describing\n-the language:\n+Each language subdirectory contains a @file{config-lang.in} file.  In\n+addition the main directory contains @file{c-config-lang.in}, which\n+contains limited information for the C language.  This file is a shell\n+script that may define some variables describing the language:\n \n @table @code\n @item language\n@@ -655,6 +656,12 @@ by @file{configure} substituting values in them.  This mechanism can\n be used to create a file @file{@var{language}/Makefile} from\n @file{@var{language}/Makefile.in}, but this is deprecated, building\n everything from the single @file{gcc/Makefile} is preferred.\n+@item gtfiles\n+If defined, a space-separated list of files that should be scanned by\n+gengtype.c to generate the garbage collection tables and routines for\n+this language.  This excludes the files that are common to all front\n+ends. @xref{Type Information}.\n+\n @end table\n \n @node Back End"}, {"sha": "24e0ad4798121d9a5a48e5b0f5298420a0ae40d6", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -305,7 +305,7 @@ yyerror (s)\n \n void\n parse_file (fname)\n-      char *fname;\n+      const char *fname;\n {\n   yyin = fopen (fname, \"r\");\n   lexer_line.file = fname;"}, {"sha": "d661e38440dadf28ca8d3a3604acc87ee443fc3d", "filename": "gcc/gengtype.c", "status": "modified", "additions": 103, "deletions": 65, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"hconfig.h\"\n #include \"system.h\"\n #include \"gengtype.h\"\n+#include \"gtyp-gen.h\"\n \n /* Nonzero iff an error has occurred.  */\n static int hit_error = 0;\n@@ -518,18 +519,16 @@ static outf_p output_files;\n    source file.  */\n outf_p header_file;\n \n-enum {\n-  BASE_FILE_C,\n-  BASE_FILE_OBJC,\n-  BASE_FILE_CPLUSPLUS,\n-  BASE_FILE_TREELANG,\n-  BASE_FILE_COBOL\n-};\n+/* Number of files specified in gtfiles.  */\n+#define NUM_GT_FILES (ARRAY_SIZE (all_files) - 1)\n \n-static const char *const lang_names[] = {\n-  \"c\", \"objc\", \"cp\", \"treelang\", \"cobol\", \"f\", \"ada\", \"java\"\n-};\n-#define NUM_BASE_FILES ARRAY_SIZE (lang_names)\n+/* Number of files in the language files array.  */\n+#define NUM_LANG_FILES (ARRAY_SIZE (lang_files) - 1)\n+\n+/* Length of srcdir name.  */\n+static int srcdir_len = 0;\n+\n+#define NUM_BASE_FILES (ARRAY_SIZE (lang_dir_names) - 1)\n outf_p base_files[NUM_BASE_FILES];\n \n static outf_p create_file PARAMS ((const char *, const char *));\n@@ -610,6 +609,8 @@ oprintf VPARAMS ((outf_p o, const char *format, ...))\n \n /* Open the global header file and the language-specific header files.  */\n \n+static void open_base_files PARAMS((void));\n+\n static void\n open_base_files ()\n {\n@@ -618,8 +619,8 @@ open_base_files ()\n   header_file = create_file (\"GCC\", \"gtype-desc.h\");\n \n   for (i = 0; i < NUM_BASE_FILES; i++)\n-    base_files[i] = create_file (lang_names[i], \n-\t\t\t\t xasprintf (\"gtype-%s.h\", lang_names[i]));\n+    base_files[i] = create_file (lang_dir_names[i], \n+\t\t\t\t xasprintf (\"gtype-%s.h\", lang_dir_names[i]));\n \n   /* gtype-desc.c is a little special, so we create it here.  */\n   {\n@@ -641,9 +642,6 @@ open_base_files ()\n   }\n }\n \n-#define startswith(len, c, s)  \\\n-  ((size_t)(len) >= strlen (s) && memcmp (c, s, strlen (s)) == 0)\n-\n /* Determine the pathname to F relative to $(srcdir).  */\n \n static const char *\n@@ -652,29 +650,35 @@ get_file_basename (f)\n {\n   size_t len;\n   const char *basename;\n+  unsigned i;\n   \n-  /* Determine the output file name.  */\n-  len = strlen (f);\n   basename = strrchr (f, '/');\n-  if (basename == NULL)\n-    basename = f;\n-  else\n-    basename++;\n-  if (startswith (basename - f, basename-2, \"f/\"))\n-    basename -= 2;\n-  else if (startswith (basename - f, basename-3, \"cp/\"))\n-    basename -= 3;\n-  else if (startswith (basename - f, basename-4, \"ada/\"))\n-    basename -= 4;\n-  else if (startswith (basename - f, basename-5, \"java/\"))\n-    basename -= 5;\n-  else if (startswith (basename - f, basename-5, \"objc/\"))\n-    basename -= 5;\n-  else if (startswith (basename - f, basename-9, \"treelang/\"))\n-    basename -= 9;\n-  else if (startswith (basename - f, basename-6, \"cobol/\"))\n-    basename -= 6;\n-\n+  \n+  if (!basename)\n+    return f;\n+  \n+  len = strlen (f);\n+  basename++;\n+  \n+  for (i = 1; i < NUM_BASE_FILES; i++)\n+    {\n+      const char * s1;\n+      const char * s2;\n+      int l1;\n+      int l2;\n+      s1 = basename - strlen (lang_dir_names [i]) - 1;\n+      s2 = lang_dir_names [i];\n+      l1 = strlen (s1);\n+      l2 = strlen (s2);\n+      if (l1 >= l2 && !memcmp (s1, s2, l2))\n+        {\n+          basename -= l2 + 1;\n+          if ((basename - f - 1) != srcdir_len)\n+            abort (); /* Match is wrong - should be preceded by $srcdir.  */\n+          break;\n+        }\n+    }\n+  \n   return basename;\n }\n \n@@ -692,31 +696,47 @@ get_base_file_bitmap (input_file)\n {\n   const char *basename = get_file_basename (input_file);\n   const char *slashpos = strchr (basename, '/');\n-  size_t len = strlen (basename);\n+  unsigned j;\n+  unsigned k;\n+  unsigned bitmap;\n   \n-  if (slashpos != NULL)\n+  if (slashpos)\n     {\n       size_t i;\n-      for (i = 0; i < NUM_BASE_FILES; i++)\n-\tif ((size_t)(slashpos - basename) == strlen (lang_names [i])\n-\t    && memcmp (basename, lang_names[i], strlen (lang_names[i])) == 0)\n-\t  return 1 << i;\n+      for (i = 1; i < NUM_BASE_FILES; i++)\n+\tif ((size_t)(slashpos - basename) == strlen (lang_dir_names [i])\n+\t    && memcmp (basename, lang_dir_names[i], strlen (lang_dir_names[i])) == 0)\n+          {\n+            /* It's in a language directory, set that language.  */\n+            bitmap = 1 << i;\n+            return bitmap;\n+          }\n+\n+      abort (); /* Should have found the language.  */\n     }\n-  else if (strcmp (basename, \"c-lang.c\") == 0)\n-    return 1 << BASE_FILE_C;\n-  else if (strcmp (basename, \"c-parse.in\") == 0\n-\t   || strcmp (basename, \"c-tree.h\") == 0\n-\t   || strcmp (basename, \"c-decl.c\") == 0\n-\t   || strcmp (basename, \"c-objc-common.c\") == 0)\n-    return 1 << BASE_FILE_C | 1 << BASE_FILE_OBJC;\n-  else if (startswith (len, basename, \"c-common.c\"))\n-    return 1 << BASE_FILE_C | 1 << BASE_FILE_OBJC| 1 << BASE_FILE_CPLUSPLUS\n-      |  1 << BASE_FILE_TREELANG | 1 << BASE_FILE_COBOL;\n-  else if (startswith (len, basename, \"c-\"))\n-    return 1 << BASE_FILE_C | 1 << BASE_FILE_OBJC | 1 << BASE_FILE_CPLUSPLUS;\n-  else\n-    return (1 << NUM_BASE_FILES) - 1;\n-  abort ();\n+\n+  /* If it's in any config-lang.in, then set for the languages\n+     specified.  */\n+\n+  bitmap = 0;\n+\n+  for (j = 0; j < NUM_LANG_FILES; j++)\n+    {\n+      if (!strcmp(input_file, lang_files[j]))\n+        {\n+          for (k = 0; k < NUM_BASE_FILES; k++)\n+            {\n+              if (!strcmp(lang_dir_names[k], langs_for_lang_files[j]))\n+                bitmap |= (1 << k);\n+            }\n+        }\n+    }\n+    \n+  /* Otherwise, set all languages.  */\n+  if (!bitmap)\n+    bitmap = (1 << NUM_BASE_FILES) - 1;\n+\n+  return bitmap;\n }\n \n /* An output file, suitable for definitions, that can see declarations\n@@ -765,8 +785,8 @@ get_output_file_with_visibility (input_file)\n       size_t i;\n       \n       for (i = 0; i < NUM_BASE_FILES; i++)\n-\tif (memcmp (basename, lang_names[i], strlen (lang_names[i])) == 0\n-\t    && basename[strlen(lang_names[i])] == '/')\n+\tif (memcmp (basename, lang_dir_names[i], strlen (lang_dir_names[i])) == 0\n+\t    && basename[strlen(lang_dir_names[i])] == '/')\n \t  return base_files[i];\n \n       output_name = \"gtype-desc.c\";\n@@ -798,6 +818,8 @@ get_output_file_name (input_file)\n /* Copy the output to its final destination,\n    but don't unnecessarily change modification times.  */\n \n+static void close_output_files PARAMS ((void));\n+\n static void\n close_output_files ()\n {\n@@ -1896,11 +1918,14 @@ write_gc_roots (variables)\n extern int main PARAMS ((int argc, char **argv));\n int \n main(argc, argv)\n-     int argc;\n-     char **argv;\n+     int argc ATTRIBUTE_UNUSED;\n+     char **argv ATTRIBUTE_UNUSED;\n {\n-  int i;\n+  unsigned i;\n   static struct fileloc pos = { __FILE__, __LINE__ };\n+  unsigned j;\n+  \n+  srcdir_len = strlen (srcdir);\n \n   do_typedef (\"CUMULATIVE_ARGS\",\n \t      create_scalar_type (\"CUMULATIVE_ARGS\", \n@@ -1914,8 +1939,21 @@ main(argc, argv)\n \t\t\t\t\t\t\t strlen (\"void\"))),\n \t      &pos);\n \n-  for (i = 1; i < argc; i++)\n-    parse_file (argv[i]);\n+  for (i = 0; i < NUM_GT_FILES; i++)\n+    {\n+      int dupflag = 0;\n+      /* Omit if already seen.  */\n+      for (j = 0; j < i; j++)\n+        {\n+          if (!strcmp (all_files[i], all_files[j]))\n+            {\n+              dupflag = 1;\n+              break;\n+            }\n+        }\n+      if (!dupflag)\n+        parse_file (all_files[i]);\n+    }\n \n   if (hit_error != 0)\n     exit (1);"}, {"sha": "20e496da05c99250ead94ffee28b282bc4bc03db", "filename": "gcc/gengtype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -138,7 +138,7 @@ extern void note_yacc_type PARAMS ((options_p o, pair_p fields,\n extern int yylex PARAMS((void));\n extern void yyerror PARAMS ((const char *));\n extern int yyparse PARAMS ((void));\n-extern void parse_file PARAMS ((char *name));\n+extern void parse_file PARAMS ((const char *name));\n \n /* Output file handling.  */\n "}, {"sha": "d79ac13e978fd9ea77e72b079f07e06e1705e2e1", "filename": "gcc/objc/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fobjc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Fobjc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fconfig-lang.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -33,4 +33,4 @@ stagestuff=\"\"\n \n target_libs=target-libobjc\n \n-gtfiles=\"\\$(srcdir)/objc/objc-act.h\"\n+gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-parse.in\""}, {"sha": "685c258a4f3ca6e0eb5b717eb24b06d2c61cee48", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -1,3 +1,10 @@\n+2002-07-11  Tim Josling  <tej@melbpc.org.au>\n+\n+\tRemove front end hard coding from gengtype.c.  \n+\n+\t* config-lang.in (gtfiles): Add files needed for this front\n+\tend.\n+\n 2002-07-09  Tim Josling  <tej@melbpc.org.au>\n \n \tSupport new attributes regime (Fix for PR c++/7099)."}, {"sha": "4f5a82e16686ec7a7108279efe234067c8fea41d", "filename": "gcc/treelang/config-lang.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Ftreelang%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9d31fd90e5a28237f444567b212d152aabe17/gcc%2Ftreelang%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fconfig-lang.in?ref=8ac9d31fd90e5a28237f444567b212d152aabe17", "patch": "@@ -36,5 +36,4 @@ diff_excludes=\"-x lex.c -x parse.c -x parse.h\"\n headers=\n build_by_default=\"no\"\n \n-gtfiles=\"\\$(srcdir)/treelang/tree1.c \\$(srcdir)/treelang/treelang.h\"\n-\n+gtfiles=\"\\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/treelang/tree1.c \\$(srcdir)/treelang/treelang.h\""}]}