{"sha": "31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlYjhhMTgwOWQ5MjRjYjUwYmQxMDU3ZWI5Y2ZhNzlmOTBiMmIwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-06-17T00:47:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-06-17T00:47:55Z"}, "message": "stl_algobase.h (equal): Make C++14 overloads from N3671 dispatch to traditional std::equal for...\n\n2013-06-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\t    Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/stl_algobase.h (equal): Make C++14 overloads from N3671\n\tdispatch to traditional std::equal for random-access iterators.\n\t(__equal2_aux, __equal2): Remove.\n\t(__equal::equal): Remove unused overloads.\n\t* include/bits/stl_algo.h (is_permutation): Fix typos.\n\nCo-Authored-By: Chris Jefferson <chris@bubblescope.net>\n\nFrom-SVN: r200145", "tree": {"sha": "9ccd1c9c7182e7736fb986900a07ba970e794810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ccd1c9c7182e7736fb986900a07ba970e794810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab15c50f86bc5a797d499ed48c3512d03f71c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab15c50f86bc5a797d499ed48c3512d03f71c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab15c50f86bc5a797d499ed48c3512d03f71c41"}], "stats": {"total": 128, "additions": 33, "deletions": 95}, "files": [{"sha": "cbbef59144744a5b7c73781f1bae9b9a35d4e333", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "patch": "@@ -1,3 +1,12 @@\n+2013-06-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/stl_algobase.h (equal): Make C++14 overloads from N3671\n+\tdispatch to traditional std::equal for random-access iterators.\n+\t(__equal2_aux, __equal2): Remove.\n+\t(__equal::equal): Remove unused overloads.\n+\t* include/bits/stl_algo.h (is_permutation): Fix typos.\n+\n 2013-06-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/shared_mutex (shared_lock::operator=): Add missing"}, {"sha": "9d6b466cf2ee5b008fb79a53a8d9a41af921bb65", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "patch": "@@ -4396,7 +4396,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= typename iterator_traits<_ForwardIterator2>::iterator_category;\n       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;\n       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;\n-      if (_It1_is_RA() && _It1_is_RA())\n+      if (_It1_is_RA() && _It2_is_RA())\n \t{\n \t  auto __d1 = std::distance(__first1, __last1);\n \t  auto __d2 = std::distance(__first2, __last2);\n@@ -4456,7 +4456,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= typename iterator_traits<_ForwardIterator2>::iterator_category;\n       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;\n       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;\n-      constexpr bool __ra_iters = _It1_is_RA() && _It1_is_RA();\n+      constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();\n       if (__ra_iters)\n \t{\n \t  auto __d1 = std::distance(__first1, __last1);"}, {"sha": "e1daac2dddad8b33d3fb0bf1f1d1ecd90ebece04", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 22, "deletions": 93, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31eb8a1809d924cb50bd1057eb9cfa79f90b2b01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=31eb8a1809d924cb50bd1057eb9cfa79f90b2b01", "patch": "@@ -798,19 +798,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return false;\n \t  return true;\n \t}\n-\n-#if __cplusplus > 201103L\n-      template<typename _II1, typename _II2>\n-        static bool\n-        equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-        {\n-\t  for (; __first1 != __last1 && __first2 != __last2;\n-\t      ++__first1, ++__first2)\n-\t    if (!(*__first1 == *__first2))\n-\t      return false;\n-\t  return true;\n-\t}\n-#endif\n     };\n \n   template<>\n@@ -823,17 +810,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)\n \t\t\t\t   * (__last1 - __first1));\n \t}\n-\n-#if __cplusplus > 201103L\n-      template<typename _Tp>\n-        static bool\n-        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2,\n-\t      const _Tp* __last2)\n-        {\n-\t  return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)\n-\t\t\t\t   * (__last1 - __first1));\n-\t}\n-#endif\n     };\n \n   template<typename _II1, typename _II2>\n@@ -851,66 +827,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::__equal<__simple>::equal(__first1, __last1, __first2);\n     }\n \n-#if __cplusplus > 201103L\n-  template<bool _BoolType>\n-    struct __equal2\n-    {\n-      template<typename _It>\n-\tusing _IterCat = typename iterator_traits<_It>::iterator_category;\n-      template<typename _It>\n-\tusing _IsRA = is_same<_IterCat<_It>, random_access_iterator_tag>;\n-\n-      template<typename _II1, typename _II2>\n-        static bool\n-        equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-        {\n-\t  constexpr bool __ra_iters = _IsRA<_II1>() && _IsRA<_II2>();\n-\t  if (__ra_iters)\n-\t    {\n-\t      auto __d1 = std::distance(__first1, __last1);\n-\t      auto __d2 = std::distance(__first2, __last2);\n-\t      if (__d1 != __d2)\n-\t\treturn false;\n-\t    }\n-\t  for (; __first1 != __last1 && __first2 != __last2;\n-\t       ++__first1, ++__first2)\n-\t    if (!(*__first1 == *__first2))\n-\t      return false;\n-\t  return __ra_iters || (__first1 == __last1 && __first2 == __last2);\n-\t}\n-    };\n-\n-  template<>\n-    struct __equal2<true>\n-    {\n-      template<typename _Tp>\n-        static bool\n-        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2,\n-\t      const _Tp* __last2)\n-        {\n-\t  if ((__last1 - __first1) != (__last2 - __first2))\n-\t    return false;\n-\t  return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)\n-\t\t\t\t   * (__last1 - __first1));\n-\t}\n-    };\n-\n-  template<typename _II1, typename _II2>\n-    inline bool\n-    __equal2_aux(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-    {\n-      typedef typename iterator_traits<_II1>::value_type _ValueType1;\n-      typedef typename iterator_traits<_II2>::value_type _ValueType2;\n-      const bool __simple = ((__is_integer<_ValueType1>::__value\n-\t\t\t      || __is_pointer<_ValueType1>::__value)\n-\t                     && __is_pointer<_II1>::__value\n-\t                     && __is_pointer<_II2>::__value\n-\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n-\n-      return __equal2<__simple>::equal(__first1, __last1, __first2, __last2);\n-    }\n-#endif\n-\n   template<typename, typename>\n     struct __lc_rai\n     {\n@@ -1174,10 +1090,23 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      return std::__equal2_aux(std::__niter_base(__first1),\n-\t\t\t       std::__niter_base(__last1),\n-\t\t\t       std::__niter_base(__first2),\n-\t\t\t       std::__niter_base(__last2));\n+      using _RATag = random_access_iterator_tag;\n+      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\n+      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\n+      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n+      if (_RAIters())\n+\t{\n+\t  auto __d1 = std::distance(__first1, __last1);\n+\t  auto __d2 = std::distance(__first2, __last2);\n+\t  if (__d1 != __d2)\n+\t    return false;\n+\t  return std::equal(__first1, __last1, __first2);\n+\t}\n+\n+      for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)\n+\tif (!(*__first1 == *__first2))\n+\t  return false;\n+      return __first1 == __last1 && __first2 == __last2;\n     }\n \n   /**\n@@ -1207,23 +1136,23 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n+      using _RATag = random_access_iterator_tag;\n       using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;\n       using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;\n-      using _IIter1_is_RA = is_same<_Cat1, random_access_iterator_tag>;\n-      using _IIter2_is_RA = is_same<_Cat2, random_access_iterator_tag>;\n-      constexpr bool __ra_iters = _IIter1_is_RA() && _IIter1_is_RA();\n-      if (__ra_iters)\n+      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n+      if (_RAIters())\n \t{\n \t  auto __d1 = std::distance(__first1, __last1);\n \t  auto __d2 = std::distance(__first2, __last2);\n \t  if (__d1 != __d2)\n \t    return false;\n+\t  return std::equal(__first1, __last1, __first2, __binary_pred);\n \t}\n \n       for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)\n \tif (!bool(__binary_pred(*__first1, *__first2)))\n \t  return false;\n-      return __ra_iters || (__first1 == __last1 && __first2 == __last2);\n+      return __first1 == __last1 && __first2 == __last2;\n     }\n #endif\n "}]}