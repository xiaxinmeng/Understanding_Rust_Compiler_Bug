{"sha": "33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5MTNjZmE5OWExZTBjNDNhZmQ3Y2JiM2Y0MzBiYjhlMWM1ZDU5OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-13T22:41:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-13T22:41:49Z"}, "message": "forward_list.h (forward_list<>::erase_after): Change signature per N2988, return void; simplify.\n\n2009-11-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (forward_list<>::erase_after):\n\tChange signature per N2988, return void; simplify.\n\t(_Fwd_list_base<>::_M_erase_after): Likewise return void.\n\t(forward_list<>::~forward_list): Do not call _M_erase_after\n\tunnecessarily, the base class destructor already does it.\n\t(forward_list<>::splice_after(const_iterator position,\n\tforward_list&&, const_iterator i): Check position != i and\n\tposition != ++i.\n\t* include/bits/forward_list.tcc (_Fwd_list_base<>::\n\t_M_erase_after(typename _Node_base::_Pointer): Simplify.\n\t(_Fwd_list_base<>::_M_erase_after(typename _Node_base::_Pointer,\n\ttypename _Node_base::_Pointer): Fix (remove the correct range\n\tof element) and simplify (update __pos->_M_next at the end).\n\t* testsuite/23_containers/forward_list/modifiers/3.cc: Adjust\n\tand extend.\n\t* testsuite/23_containers/forward_list/ext_pointer/\n\tmodifiers/3.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Tweak dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r154174", "tree": {"sha": "f7997fde5ba103bba93cd905dc2414591c5e5a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7997fde5ba103bba93cd905dc2414591c5e5a0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/comments", "author": null, "committer": null, "parents": [{"sha": "870875e66e092ad6014972ad81dc6d7a2c25ea95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870875e66e092ad6014972ad81dc6d7a2c25ea95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870875e66e092ad6014972ad81dc6d7a2c25ea95"}], "stats": {"total": 143, "additions": 86, "deletions": 57}, "files": [{"sha": "53a7387150f3723a8aa4054496976f63d591f817", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -1,3 +1,31 @@\n+2009-11-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (forward_list<>::erase_after):\n+\tChange signature per N2988, return void; simplify.\n+\t(_Fwd_list_base<>::_M_erase_after): Likewise return void.\n+\t(forward_list<>::~forward_list): Do not call _M_erase_after\n+\tunnecessarily, the base class destructor already does it.\n+\t(forward_list<>::splice_after(const_iterator position,\n+\tforward_list&&, const_iterator i): Check position != i and\n+\tposition != ++i.\n+\t* include/bits/forward_list.tcc (_Fwd_list_base<>::\n+\t_M_erase_after(typename _Node_base::_Pointer): Simplify.\n+\t(_Fwd_list_base<>::_M_erase_after(typename _Node_base::_Pointer,\n+\ttypename _Node_base::_Pointer): Fix (remove the correct range\n+\tof element) and simplify (update __pos->_M_next at the end).\n+\t* testsuite/23_containers/forward_list/modifiers/3.cc: Adjust\n+\tand extend.\n+\t* testsuite/23_containers/forward_list/ext_pointer/\n+\tmodifiers/3.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Tweak dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2009-11-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/algorithm: Include <utility>, per UK-300."}, {"sha": "409c93e031c1fd59a412028b8aabef87452ab0e6", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -350,10 +350,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_put_node(typename _Node::_Pointer __p)\n       { _M_get_Node_allocator().deallocate(__p, 1); }\n \n-      typename _Node_base::_Pointer\n+      void\n       _M_erase_after(typename _Node_base::_Pointer __pos);\n \n-      typename _Node_base::_Pointer\n+      void\n       _M_erase_after(typename _Node_base::_Pointer __pos, \n                      typename _Node_base::_Pointer __last);\n     };\n@@ -529,7 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  The forward_list dtor.\n        */\n       ~forward_list()\n-      { _M_erase_after(&this->_M_impl._M_head, 0); }\n+      { }\n \n       /**\n        *  @brief  The %forward_list assignment operator.\n@@ -871,7 +871,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n       {\n         forward_list __tmp(__n, __val, this->get_allocator());\n-        this->splice_after(__pos, std::move(__tmp));\n+        splice_after(__pos, std::move(__tmp));\n       }\n \n       /**\n@@ -893,7 +893,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                      _InputIterator __first, _InputIterator __last)\n         {\n           forward_list __tmp(__first, __last, this->get_allocator());\n-          this->splice_after(__pos, std::move(__tmp));\n+          splice_after(__pos, std::move(__tmp));\n         }\n \n       /**\n@@ -913,14 +913,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n       {\n         forward_list __tmp(__il, this->get_allocator());\n-        this->splice_after(__pos, std::move(__tmp));\n+        splice_after(__pos, std::move(__tmp));\n       }\n \n       /**\n        *  @brief  Removes the element pointed to by the iterator following\n        *          @c pos.\n-       *  @param  pos  Iterator pointing to element to be erased.\n-       *  @return  An iterator pointing to the next element (or end()).\n+       *  @param  pos  Iterator pointing before element to be erased.\n        *\n        *  This function will erase the element at the given position and\n        *  thus shorten the %forward_list by one.\n@@ -932,14 +931,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  is itself a pointer, the pointed-to memory is not touched in\n        *  any way.  Managing the pointer is the user's responsibility.\n        */\n-      iterator\n+      void\n       erase_after(const_iterator __pos)\n       {\n         _Node_base* __tmp = __const_pointer_cast<_Node_base*>(__pos._M_node);\n-        if (__tmp)\n-          return iterator(this->_M_erase_after(__tmp));\n-        else\n-          return end();\n+\tthis->_M_erase_after(__tmp);\n       }\n \n       /**\n@@ -948,8 +944,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *               erased.\n        *  @param  last  Iterator pointing to one past the last element to be\n        *                erased.\n-       *  @return  An iterator pointing to the element pointed to by @a last\n-       *           prior to erasing (or end()).\n        *\n        *  This function will erase the elements in the range @a\n        *  (pos,last) and shorten the %forward_list accordingly.\n@@ -961,11 +955,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  pointed-to memory is not touched in any way.  Managing the pointer\n        *  is the user's responsibility.\n        */\n-      iterator\n-      erase_after(const_iterator __pos, iterator __last)\n+      void\n+      erase_after(const_iterator __pos, const_iterator __last)\n       {\n-        _Node_base* __tmp = __const_pointer_cast<_Node_base*>(__pos._M_node);\n-        return iterator(this->_M_erase_after(__tmp, &*__last._M_node));\n+        _Node_base* __tmpp = __const_pointer_cast<_Node_base*>(__pos._M_node);\n+\t_Node_base* __tmpl = __const_pointer_cast<_Node_base*>(__last._M_node);\n+        this->_M_erase_after(__tmpp, __tmpl);\n       }\n \n       /**\n@@ -1044,18 +1039,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Insert element from another %forward_list.\n        *  @param  pos  Iterator referencing the element to insert after.\n        *  @param  list  Source list.\n-       *  @param  it  Iterator referencing the element before the element\n+       *  @param  i   Iterator referencing the element before the element\n        *              to move.\n        *\n        *  Removes the element in list @a list referenced by @a i and\n        *  inserts it into the current list after @a pos.\n        */\n       void\n       splice_after(const_iterator __pos, forward_list&& __list,\n-                   const_iterator __it)\n+                   const_iterator __i)\n       {\n-\tthis->splice_after(__pos, std::forward<forward_list>(__list),\n-\t\t\t   __it, __it._M_next());\n+\tconst_iterator __j = __i;\n+\t++__j;\n+\tif (__pos == __i || __pos == __j)\n+\t  return;\n+\n+\tsplice_after(__pos, std::move(__list), __i, __j);\n       }\n \n       /**"}, {"sha": "1575cabf1f2145df3ee7f37ac305f083dafe4c4b", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -113,42 +113,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n   template<typename _Tp, typename _Alloc>\n-    typename _Fwd_list_base<_Tp, _Alloc>::_Node_base::_Pointer\n+    void\n     _Fwd_list_base<_Tp, _Alloc>::\n     _M_erase_after(typename _Node_base::_Pointer __pos)\n     {\n-      typename _Node::_Pointer __curr \n+      typename _Node::_Pointer __curr\n         = __static_pointer_cast<typename _Node::_Pointer>(__pos->_M_next);\n-      if (__curr)\n-        {\n-          typename _Node_base::_Pointer __next = __curr->_M_next;\n-          __pos->_M_next = __next;\n-          _M_get_Node_allocator().destroy(__curr);\n-          _M_put_node(__curr);\n-        }\n-      return __pos;\n+      __pos->_M_next = __curr->_M_next;\n+      _M_get_Node_allocator().destroy(__curr);\n+      _M_put_node(__curr);\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    typename _Fwd_list_base<_Tp, _Alloc>::_Node_base::_Pointer\n+    void\n     _Fwd_list_base<_Tp, _Alloc>::\n     _M_erase_after(typename _Node_base::_Pointer __pos, \n                    typename _Node_base::_Pointer __last)\n     {\n       typename _Node::_Pointer __curr \n         = __static_pointer_cast<typename _Node::_Pointer>(__pos->_M_next);\n-      while (__curr)\n+      while (__curr != __last)\n         {\n           typename _Node::_Pointer __temp = __curr;\n           __curr = __static_pointer_cast<typename _Node::_Pointer>\n                                         (__curr->_M_next);\n           _M_get_Node_allocator().destroy(__temp);\n           _M_put_node(__temp);\n-          __pos->_M_next = __curr;\n-          if (__temp == __last)\n-            break;\n         }\n-      return __pos;\n+      __pos->_M_next = __last;\n     }\n   \n   // Called by the range constructor to implement [23.1.1]/9"}, {"sha": "5b43bbb95f9142b1d6dba026c510e9b970d42114", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -43,10 +43,7 @@ test01()\n   ++pos;\n   VERIFY(*pos == 1);\n \n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator \n-    next = fl.erase_after(pos);\n-\n-  VERIFY(*next == 1);\n+  fl.erase_after(pos);\n \n   VERIFY(*pos == 1);\n   ++pos;\n@@ -78,14 +75,20 @@ test02()\n   ++stop;\n   VERIFY(*stop == 4);\n \n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator \n-    next = fl.erase_after(pos, stop);\n-\n-  VERIFY(*next == 1);\n+  fl.erase_after(pos, stop);\n \n   VERIFY(*pos == 1);\n   ++pos;\n-  VERIFY(*pos == 5);\n+  VERIFY(*pos == 4);\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 8);\n+\n+  fl.erase_after(pos, fl.end());\n+  VERIFY(++pos == fl.end());\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 3);\n+\n+  fl.erase_after(fl.before_begin(), pos);\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 0);\n+  VERIFY(fl.empty());\n }\n \n int"}, {"sha": "69163e06e8d67ca5fcc0dd62fd16d0c888a75464", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/3.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F3.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -37,8 +37,7 @@ test01()\n   ++pos;\n   VERIFY(*pos == 1);\n \n-  std::forward_list<int>::iterator next = fl.erase_after(pos);\n-  VERIFY(*next == 1);\n+  fl.erase_after(pos);\n \n   VERIFY(*pos == 1);\n   ++pos;\n@@ -65,12 +64,20 @@ test02()\n   ++stop;\n   VERIFY(*stop == 4);\n \n-  std::forward_list<int>::iterator next = fl.erase_after(pos, stop);\n-  VERIFY(*next == 1);\n+  fl.erase_after(pos, stop);\n \n   VERIFY(*pos == 1);\n   ++pos;\n-  VERIFY(*pos == 5);\n+  VERIFY(*pos == 4);\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 8);\n+\n+  fl.erase_after(pos, fl.end());\n+  VERIFY(++pos == fl.end());\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 3);\n+\n+  fl.erase_after(fl.before_begin(), pos);\n+  VERIFY(std::distance(fl.begin(), fl.end()) == 0);\n+  VERIFY(fl.empty());\n }\n \n int"}, {"sha": "0d167718278c799f46f58cfd5290543766b25863", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "d72b9fa4c9d65cd68e7b83819b21f41d60d9da0f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "f0481a3f45386e8b6442979984e71168192d7055", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "c4a84ff38da7be26d2d631e8757b7f37cccf625d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=33913cfa99a1e0c43afd7cbb3f430bb8e1c5d599", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}]}