{"sha": "6f1087be10e5765a7dde63dca95fecf7f359d021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxMDg3YmUxMGU1NzY1YTdkZGU2M2RjYTk1ZmVjZjdmMzU5ZDAyMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-07-29T19:53:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-29T19:53:34Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Rename from set_mem_attributes and add BITPOS argument.\n\n        * emit-rtl.c (set_mem_attributes_minus_bitpos): Rename from\n        set_mem_attributes and add BITPOS argument.  Subtract it from\n        OFFSET when same is adjusted.\n        (set_mem_attributes): New wrapper function.\n        * expr.c (expand_assignment): Use set_mem_attributes_minus_bitpos;\n        remove offset adjustment hack.\n        * expr.h (set_mem_attributes_minus_bitpos): Declare.\n\nFrom-SVN: r55846", "tree": {"sha": "2f03e25d0a8da1b034e4545a18f1ffde2c8ca534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f03e25d0a8da1b034e4545a18f1ffde2c8ca534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1087be10e5765a7dde63dca95fecf7f359d021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1087be10e5765a7dde63dca95fecf7f359d021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1087be10e5765a7dde63dca95fecf7f359d021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1087be10e5765a7dde63dca95fecf7f359d021/comments", "author": null, "committer": null, "parents": [{"sha": "61ccbcfd47fc677635169421f8ecb079fa99c5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ccbcfd47fc677635169421f8ecb079fa99c5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ccbcfd47fc677635169421f8ecb079fa99c5f8"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "c38471fb1c727af01b8ac7f76a59086b163442f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f1087be10e5765a7dde63dca95fecf7f359d021", "patch": "@@ -1,3 +1,13 @@\n+2002-07-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Rename from\n+\tset_mem_attributes and add BITPOS argument.  Subtract it from\n+\tOFFSET when same is adjusted.\n+\t(set_mem_attributes): New wrapper function.\n+\t* expr.c (expand_assignment): Use set_mem_attributes_minus_bitpos;\n+\tremove offset adjustment hack.\n+\t* expr.h (set_mem_attributes_minus_bitpos): Declare.\n+\n 2002-07-29  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* Makefile.in (C_OBJS): Include c-pretty-print.o"}, {"sha": "0bba4a27f446e0309378b6c07d72cc9b2e672225", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6f1087be10e5765a7dde63dca95fecf7f359d021", "patch": "@@ -1679,19 +1679,22 @@ component_ref_for_mem_expr (ref)\n \n /* Given REF, a MEM, and T, either the type of X or the expression\n    corresponding to REF, set the memory attributes.  OBJECTP is nonzero\n-   if we are making a new object of this type.  */\n+   if we are making a new object of this type.  BITPOS is nonzero if\n+   there is an offset outstanding on T that will be applied later.  */\n \n void\n-set_mem_attributes (ref, t, objectp)\n+set_mem_attributes_minus_bitpos (ref, t, objectp, bitpos)\n      rtx ref;\n      tree t;\n      int objectp;\n+     HOST_WIDE_INT bitpos;\n {\n   HOST_WIDE_INT alias = MEM_ALIAS_SET (ref);\n   tree expr = MEM_EXPR (ref);\n   rtx offset = MEM_OFFSET (ref);\n   rtx size = MEM_SIZE (ref);\n   unsigned int align = MEM_ALIGN (ref);\n+  HOST_WIDE_INT apply_bitpos = 0;\n   tree type;\n \n   /* It can happen that type_for_mode was given a mode for which there\n@@ -1760,6 +1763,7 @@ set_mem_attributes (ref, t, objectp)\n \t{\n \t  expr = t;\n \t  offset = const0_rtx;\n+\t  apply_bitpos = bitpos;\n \t  size = (DECL_SIZE_UNIT (t)\n \t\t  && host_integerp (DECL_SIZE_UNIT (t), 1)\n \t\t  ? GEN_INT (tree_low_cst (DECL_SIZE_UNIT (t), 1)) : 0);\n@@ -1784,6 +1788,7 @@ set_mem_attributes (ref, t, objectp)\n \t{\n \t  expr = component_ref_for_mem_expr (t);\n \t  offset = const0_rtx;\n+\t  apply_bitpos = bitpos;\n \t  /* ??? Any reason the field size would be different than\n \t     the size we got from the type?  */\n \t}\n@@ -1817,13 +1822,17 @@ set_mem_attributes (ref, t, objectp)\n \t\t  if (aoff && aoff < align)\n \t            align = aoff;\n \t\t  offset = GEN_INT (ioff);\n+\t\t  apply_bitpos = bitpos;\n \t\t}\n \t    }\n \t  else if (TREE_CODE (t) == COMPONENT_REF)\n \t    {\n \t      expr = component_ref_for_mem_expr (t);\n \t      if (host_integerp (off_tree, 1))\n-\t\toffset = GEN_INT (tree_low_cst (off_tree, 1));\n+\t\t{\n+\t\t  offset = GEN_INT (tree_low_cst (off_tree, 1));\n+\t\t  apply_bitpos = bitpos;\n+\t\t}\n \t      /* ??? Any reason the field size would be different than\n \t\t the size we got from the type?  */\n \t    }\n@@ -1847,6 +1856,11 @@ set_mem_attributes (ref, t, objectp)\n \t}\n     }\n \n+  /* If we modified OFFSET based on T, then subtract the outstanding \n+     bit position offset.  */\n+  if (apply_bitpos)\n+    offset = plus_constant (offset, -(apply_bitpos / BITS_PER_UNIT));\n+\n   /* Now set the attributes we computed above.  */\n   MEM_ATTRS (ref)\n     = get_mem_attrs (alias, expr, offset, size, align, GET_MODE (ref));\n@@ -1863,6 +1877,15 @@ set_mem_attributes (ref, t, objectp)\n     MEM_IN_STRUCT_P (ref) = 1;\n }\n \n+void\n+set_mem_attributes (ref, t, objectp)\n+     rtx ref;\n+     tree t;\n+     int objectp;\n+{\n+  set_mem_attributes_minus_bitpos (ref, t, objectp, 0);\n+}\n+\n /* Set the alias set of MEM to SET.  */\n \n void"}, {"sha": "810400cf33909de7ad554c5453db2db4f7ed2237", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6f1087be10e5765a7dde63dca95fecf7f359d021", "patch": "@@ -3846,17 +3846,7 @@ expand_assignment (to, from, want_value, suggest_reg)\n \t     DECL_RTX of the parent struct.  Don't munge it.  */\n \t  to_rtx = shallow_copy_rtx (to_rtx);\n \n-\t  set_mem_attributes (to_rtx, to, 0);\n-\n-\t  /* If we changed MEM_EXPR, that means we're now referencing\n-\t     the COMPONENT_REF, which means that MEM_OFFSET must be\n-\t     relative to that field.  But we've not yet reflected BITPOS\n-\t     in TO_RTX.  This will be done in store_field.  Adjust for\n-\t     that by biasing MEM_OFFSET by -bitpos.  */\n-\t  if (MEM_EXPR (to_rtx) != old_expr && MEM_OFFSET (to_rtx)\n-\t      && (bitpos / BITS_PER_UNIT) != 0)\n-\t    set_mem_offset (to_rtx, GEN_INT (INTVAL (MEM_OFFSET (to_rtx))\n-\t\t\t\t\t     - (bitpos / BITS_PER_UNIT)));\n+\t  set_mem_attributes_minus_bitpos (to_rtx, to, 0, bitpos);\n \t}\n \n       /* Deal with volatile and readonly fields.  The former is only done"}, {"sha": "64340a2f409247d0b349ebaf914cf33a13d44a48", "filename": "gcc/expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1087be10e5765a7dde63dca95fecf7f359d021/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=6f1087be10e5765a7dde63dca95fecf7f359d021", "patch": "@@ -666,6 +666,12 @@ extern void maybe_set_unchanging PARAMS ((rtx, tree));\n    corresponding to REF, set the memory attributes.  OBJECTP is nonzero\n    if we are making a new object of this type.  */\n extern void set_mem_attributes PARAMS ((rtx, tree, int));\n+\n+/* Similar, except that BITPOS has not yet been applied to REF, so if\n+   we alter MEM_OFFSET according to T then we should subtract BITPOS\n+   expecting that it'll be added back in later.  */\n+extern void set_mem_attributes_minus_bitpos PARAMS ((rtx, tree, int,\n+\t\t\t\t\t\t     HOST_WIDE_INT));\n #endif\n \n /* Assemble the static constant template for function entry trampolines.  */"}]}