{"sha": "941c94747007e50ccaae6e94cf0402ff5bb63d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxYzk0NzQ3MDA3ZTUwY2NhYWU2ZTk0Y2YwNDAyZmY1YmI2M2Q0Mw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-14T11:59:36Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-14T11:59:36Z"}, "message": "Add tests for gcc-changelog.\n\n\t* gcc-changelog/test_email.py: New file.\n\t* gcc-changelog/test_patches.txt: New file.", "tree": {"sha": "a85e4975259accbbdb4ce47fe21fc32abdc64b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a85e4975259accbbdb4ce47fe21fc32abdc64b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941c94747007e50ccaae6e94cf0402ff5bb63d43", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl69MqgACgkQTcGC3A+n\nN4W2hAgAk9m15Mn/7EmEDEyDqIV5YssTLIrSZhfYT/qIHdzGNSWwf0Od7r1gNgO5\nP8uKucaLrEmODuqq4oq5ZrNgvsgLSC4Ci7/79Nk/oSCEKUNPoOEvNN1p6TlXYIFF\nLyLjgZQEs2xua9y3qgn66+7SH3EJltHklsCFuDo7wJUk4AYU8cLGojXx8Q7OXveC\ndG7/X8hElz6YBShYK10lkgi24tSxEoSvg12cIF2fDYry5u/hLzfdmJqgWPqnITYu\nPDaB1T5PHJnN569mGXuc7ht4UuYr7yZXdhtbm7+5ADdt60UKiXKmOEHn2p4y6dhZ\nXQFcTlzVQvm+8vLT7mncO5NRn+fStQ==\n=sytg\n-----END PGP SIGNATURE-----", "payload": "tree a85e4975259accbbdb4ce47fe21fc32abdc64b09\nparent 365e3cde4978c6a7dbfa50865720226254c016be\nauthor Martin Liska <mliska@suse.cz> 1589457576 +0200\ncommitter Martin Liska <mliska@suse.cz> 1589457576 +0200\n\nAdd tests for gcc-changelog.\n\n\t* gcc-changelog/test_email.py: New file.\n\t* gcc-changelog/test_patches.txt: New file.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941c94747007e50ccaae6e94cf0402ff5bb63d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941c94747007e50ccaae6e94cf0402ff5bb63d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941c94747007e50ccaae6e94cf0402ff5bb63d43/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "365e3cde4978c6a7dbfa50865720226254c016be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365e3cde4978c6a7dbfa50865720226254c016be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365e3cde4978c6a7dbfa50865720226254c016be"}], "stats": {"total": 2649, "additions": 2649, "deletions": 0}, "files": [{"sha": "99351f8c0c6f03e3f20ad9e7393accaec5afad86", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=941c94747007e50ccaae6e94cf0402ff5bb63d43", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/test_email.py: New file.\n+\t* gcc-changelog/test_patches.txt: New file.\n+\n 2020-05-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* vimrc: Reduce textwidth to 72 for Git commit messages."}, {"sha": "03abc763212a935e7fec2b7777b8b61ab428b4a6", "filename": "contrib/gcc-changelog/test_email.py", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=941c94747007e50ccaae6e94cf0402ff5bb63d43", "patch": "@@ -0,0 +1,260 @@\n+#!/usr/bin/env python3\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.  */\n+\n+import os\n+import tempfile\n+import unittest\n+\n+from git_email import GitEmail\n+\n+\n+script_path = os.path.dirname(os.path.realpath(__file__))\n+\n+\n+class TestGccChangelog(unittest.TestCase):\n+    def setUp(self):\n+        self.patches = {}\n+        self.temps = []\n+\n+        filename = None\n+        patch_lines = []\n+        lines = open(os.path.join(script_path, 'test_patches.txt')).read()\n+        for line in lines.split('\\n'):\n+            if line.startswith('==='):\n+                if patch_lines:\n+                    self.patches[filename] = patch_lines\n+                filename = line.split(' ')[1]\n+                patch_lines = []\n+            else:\n+                patch_lines.append(line)\n+        if patch_lines:\n+            self.patches[filename] = patch_lines\n+\n+    def tearDown(self):\n+        for t in self.temps:\n+            assert t.endswith('.patch')\n+            os.remove(t)\n+\n+    def get_git_email(self, filename, strict=False):\n+        with tempfile.NamedTemporaryFile(mode='w+', suffix='.patch',\n+                                         delete=False) as f:\n+            f.write('\\n'.join(self.patches[filename]))\n+            self.temps.append(f.name)\n+        return GitEmail(f.name, strict)\n+\n+    def from_patch_glob(self, name, strict=False):\n+        files = [f for f in self.patches.keys() if f.startswith(name)]\n+        assert len(files) == 1\n+        return self.get_git_email(files[0], strict)\n+\n+    def test_simple_patch_format(self):\n+        email = self.get_git_email('0577-aarch64-Add-an-and.patch')\n+        assert not email.errors\n+        assert len(email.changelog_entries) == 2\n+        entry = email.changelog_entries[0]\n+        assert (entry.author_lines ==\n+                [('Richard Sandiford  <richard.sandiford@arm.com>',\n+                  '2020-02-06')])\n+        assert len(entry.authors) == 1\n+        assert (entry.authors[0]\n+                == 'Richard Sandiford  <richard.sandiford@arm.com>')\n+        assert entry.folder == 'gcc'\n+        assert entry.prs == ['PR target/87763']\n+        assert len(entry.files) == 3\n+        assert entry.files[0] == 'config/aarch64/aarch64-protos.h'\n+\n+    def test_daily_bump(self):\n+        email = self.get_git_email('0085-Daily-bump.patch')\n+        assert not email.errors\n+        assert not email.changelog_entries\n+\n+    def test_deduce_changelog_entries(self):\n+        email = self.from_patch_glob('0040')\n+        assert len(email.changelog_entries) == 2\n+        assert email.changelog_entries[0].folder == 'gcc/cp'\n+        assert email.changelog_entries[0].prs == ['PR c++/90916']\n+        assert email.changelog_entries[0].files == ['pt.c']\n+        # this one is added automatically\n+        assert email.changelog_entries[1].folder == 'gcc/testsuite'\n+\n+    def test_only_changelog_updated(self):\n+        email = self.from_patch_glob('0129')\n+        assert not email.errors\n+        assert not email.changelog_entries\n+\n+    def test_wrong_mentioned_filename(self):\n+        email = self.from_patch_glob('0096')\n+        assert email.errors\n+        err = email.errors[0]\n+        assert err.message == 'file not changed in a patch'\n+        assert err.line == 'gcc/testsuite/gcc.target/aarch64/' \\\n+                           'advsimd-intrinsics/vdot-compile-3-1.c'\n+\n+    def test_missing_tab(self):\n+        email = self.from_patch_glob('0031')\n+        assert len(email.errors) == 2\n+        err = email.errors[0]\n+        assert err.message == 'line should start with a tab'\n+        assert err.line == '    * cfgloopanal.c (average_num_loop_insns): ' \\\n+                           'Free bbs when early'\n+\n+    def test_leading_changelog_format(self):\n+        email = self.from_patch_glob('0184')\n+        assert len(email.errors) == 4\n+        assert email.errors[0].line == 'gcc/c-family/c-cppbuiltins.c'\n+        assert email.errors[2].line == 'gcc/c-family/c-cppbuiltin.c'\n+\n+    def test_cannot_deduce_no_blank_line(self):\n+        email = self.from_patch_glob('0334')\n+        assert len(email.errors) == 1\n+        assert len(email.changelog_entries) == 1\n+        assert email.changelog_entries[0].folder is None\n+\n+    def test_author_lines(self):\n+        email = self.from_patch_glob('0814')\n+        assert not email.errors\n+        assert (email.changelog_entries[0].author_lines ==\n+                [('Martin Jambor  <mjambor@suse.cz>', '2020-02-19')])\n+\n+    def test_multiple_authors_and_prs(self):\n+        email = self.from_patch_glob('0735')\n+        assert len(email.changelog_entries) == 1\n+        entry = email.changelog_entries[0]\n+        assert len(entry.author_lines) == 2\n+        assert len(entry.authors) == 2\n+        assert (entry.author_lines[1] ==\n+                ('Bernd Edlinger  <bernd.edlinger@hotmail.de>', None))\n+\n+    def test_multiple_prs(self):\n+        email = self.from_patch_glob('1699')\n+        assert len(email.changelog_entries) == 2\n+        assert len(email.changelog_entries[0].prs) == 2\n+\n+    def test_missing_PR_component(self):\n+        email = self.from_patch_glob('0735')\n+        assert len(email.errors) == 1\n+        assert email.errors[0].message == 'missing PR component'\n+\n+    def test_invalid_PR_component(self):\n+        email = self.from_patch_glob('0198')\n+        assert len(email.errors) == 1\n+        assert email.errors[0].message == 'invalid PR component'\n+\n+    def test_additional_author_list(self):\n+        email = self.from_patch_glob('0342')\n+        assert (email.errors[1].message == 'additional author must prepend '\n+                                           'with tab and 4 spaces')\n+\n+    def test_trailing_whitespaces(self):\n+        email = self.get_git_email('trailing-whitespaces.patch')\n+        assert len(email.errors) == 3\n+\n+    def test_space_after_asterisk(self):\n+        email = self.from_patch_glob('1999')\n+        assert len(email.errors) == 1\n+        assert email.errors[0].message == 'one space should follow asterisk'\n+\n+    def test_long_lines(self):\n+        email = self.get_git_email('long-lines.patch')\n+        assert len(email.errors) == 1\n+        assert email.errors[0].message == 'line limit exceeds 100 characters'\n+\n+    def test_new_files(self):\n+        email = self.from_patch_glob('0030')\n+        assert not email.errors\n+\n+    def test_wrong_changelog_location(self):\n+        email = self.from_patch_glob('0043')\n+        assert len(email.errors) == 2\n+        assert (email.errors[0].message ==\n+                'wrong ChangeLog location \"gcc\", should be \"gcc/testsuite\"')\n+\n+    def test_single_author_name(self):\n+        email = self.from_patch_glob('1975')\n+        assert len(email.changelog_entries) == 2\n+        assert len(email.changelog_entries[0].author_lines) == 1\n+        assert len(email.changelog_entries[1].author_lines) == 1\n+\n+    def test_bad_first_line(self):\n+        email = self.from_patch_glob('0413')\n+        assert len(email.errors) == 1\n+\n+    def test_co_authored_by(self):\n+        email = self.from_patch_glob('1850')\n+        assert email.co_authors == ['Jakub Jelinek  <jakub@redhat.com>']\n+        output_entries = list(email.to_changelog_entries())\n+        assert len(output_entries) == 2\n+        ent0 = output_entries[0]\n+        assert ent0[1].startswith('2020-04-16  Martin Liska  '\n+                                  '<mliska@suse.cz>\\n\\t'\n+                                  '    Jakub Jelinek  <jakub@redhat.com>')\n+\n+    def test_multiple_co_author_formats(self):\n+        email = self.get_git_email('co-authored-by.patch')\n+        assert len(email.co_authors) == 3\n+        assert email.co_authors[0] == 'Jakub Jelinek  <jakub@redhat.com>'\n+        assert email.co_authors[1] == 'John Miller  <jm@example.com>'\n+        assert email.co_authors[2] == 'John Miller2  <jm2@example.com>'\n+\n+    def test_new_file_added_entry(self):\n+        email = self.from_patch_glob('1957')\n+        output_entries = list(email.to_changelog_entries())\n+        assert len(output_entries) == 2\n+        needle = ('\\t* g++.dg/cpp2a/lambda-generic-variadic20.C'\n+                  ': New file.')\n+        assert output_entries[1][1].endswith(needle)\n+        assert email.changelog_entries[1].prs == ['PR c++/94546']\n+\n+    def test_global_pr_entry(self):\n+        email = self.from_patch_glob('2004')\n+        assert not email.errors\n+        assert email.changelog_entries[0].prs == ['PR other/94629']\n+\n+    def test_unique_prs(self):\n+        email = self.get_git_email('pr-check1.patch')\n+        assert not email.errors\n+        assert email.changelog_entries[0].prs == ['PR ipa/12345']\n+        assert email.changelog_entries[1].prs == []\n+\n+    def test_multiple_prs_not_added(self):\n+        email = self.from_patch_glob('0001-Add-patch_are')\n+        assert not email.errors\n+        assert email.changelog_entries[0].prs == ['PR target/93492']\n+        assert email.changelog_entries[1].prs == ['PR target/12345']\n+        assert email.changelog_entries[2].prs == []\n+        assert email.changelog_entries[2].folder == 'gcc/testsuite'\n+\n+    def test_strict_mode(self):\n+        email = self.from_patch_glob('0001-Add-patch_are',\n+                                     True)\n+        msg = 'ChangeLog, DATESTAMP, BASE-VER and DEV-PHASE updates should ' \\\n+              'be done separately from normal commits'\n+        assert email.errors[0].message == msg\n+\n+    def test_strict_mode_normal_patch(self):\n+        email = self.get_git_email('0001-Just-test-it.patch', True)\n+        assert not email.errors\n+\n+    def test_strict_mode_datestamp_only(self):\n+        email = self.get_git_email('0002-Bump-date.patch', True)\n+        assert not email.errors\n+\n+    def test_wrong_changelog_entry(self):\n+        email = self.from_patch_glob('0020-IPA-Avoid')\n+        assert (email.errors[0].message\n+                == 'first line should start with a tab, asterisk and space')"}, {"sha": "39e4753c0ab999e388d89c213bc73f6ff299b6e9", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "added", "additions": 2384, "deletions": 0, "changes": 2384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c94747007e50ccaae6e94cf0402ff5bb63d43/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=941c94747007e50ccaae6e94cf0402ff5bb63d43", "patch": "@@ -0,0 +1,2384 @@\n+=== 0342-ARC-Propagate-uncached-type-attribute-to-each-member.patch ===\n+From 62a715c706d8482560dadfa9ead0766f3c20e434 Mon Sep 17 00:00:00 2001\n+From: Claudiu Zissulescu <claziss@gmail.com>\n+Date: Mon, 27 Jan 2020 14:51:03 +0200\n+Subject: [PATCH 0342/2034] [ARC] Propagate uncached type attribute to each\n+ member of a struct.\n+\n+Like `packed` type attribute, the ARC's `uncached` type attribute\n+needs to be propagated to each member of the struct where it is used,\n+triggering the .di flag for any access of the struct members. However,\n+any complex CFG manipulation may drop memory pointer type attributes,\n+leading to the impossibility to discriminate the direct accesses from\n+normal ones. To solve this issue, we will treat the direct memory\n+accessed specially via unspecs.\n+\n+gcc/\n+xxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n+\tPetro Karashchenko  <petro.karashchenko@ring.com>\n+\n+\t* config/arc/arc.c (arc_is_uncached_mem_p): Check struct\n+\tattributes if needed.\n+\t(prepare_move_operands): Generate special\n+\tunspec instruction for direct access.\n+\t(arc_isuncached_mem_p): Propagate uncached attribute to each\n+\tstructure member.\n+\t* config/arc/arc.md (VUNSPEC_ARC_LDDI): Define.\n+\t(VUNSPEC_ARC_STDI): Likewise.\n+\t(ALLI): New mode iterator.\n+\t(mALLI): New mode attribute.\n+\t(lddi): New instruction pattern.\n+\t(stdi): Likewise.\n+\t(stdidi_split): Split instruction for architectures which are not\n+\tsupporting ll64 option.\n+\t(lddidi_split): Likewise.\n+\n+testsuite/\n+xxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n+\tPetro Karashchenko  <petro.karashchenko@ring.com>\n+\n+\t* gcc.target/arc/uncached-1.c: Update test.\n+\t* gcc.target/arc/uncached-2.c: Likewise.\n+\t* gcc.target/arc/uncached-3.c: New test.\n+\t* gcc.target/arc/uncached-4.c: Likewise.\n+\t* gcc.target/arc/uncached-5.c: Likewise.\n+\t* gcc.target/arc/uncached-6.c: Likewise.\n+\t* gcc.target/arc/uncached-7.c: Likewise.\n+\t* gcc.target/arc/uncached-8.c: Likewise.\n+\t* gcc.target/arc/arc.exp (ll64): New predicate.\n+---\n+ gcc/ChangeLog                             |  19 ++++\n+ gcc/config/arc/arc.c                      | 118 ++++++++++++++--------\n+ gcc/config/arc/arc.md                     |  60 +++++++++++\n+ gcc/testsuite/ChangeLog                   |  11 ++\n+ gcc/testsuite/gcc.target/arc/arc.exp      |   9 ++\n+ gcc/testsuite/gcc.target/arc/uncached-1.c |   2 +-\n+ gcc/testsuite/gcc.target/arc/uncached-2.c |   2 +-\n+ gcc/testsuite/gcc.target/arc/uncached-3.c |  22 ++++\n+ gcc/testsuite/gcc.target/arc/uncached-4.c |  42 ++++++++\n+ gcc/testsuite/gcc.target/arc/uncached-5.c |  29 ++++++\n+ gcc/testsuite/gcc.target/arc/uncached-6.c |  35 +++++++\n+ gcc/testsuite/gcc.target/arc/uncached-7.c |  11 ++\n+ gcc/testsuite/gcc.target/arc/uncached-8.c |  33 ++++++\n+ 13 files changed, 351 insertions(+), 42 deletions(-)\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-3.c\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-4.c\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-5.c\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-6.c\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-7.c\n+ create mode 100644 gcc/testsuite/gcc.target/arc/uncached-8.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 91dfcd71a4b..2cc61d68cf3 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/arc/arc.c b/gcc/config/arc/arc.c\n+index 22475f2732e..e1a865f02e6 100644\n+--- a/gcc/config/arc/arc.c\n++++ b/gcc/config/arc/arc.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/arc/arc.md b/gcc/config/arc/arc.md\n+index cf7aa8d83c9..46cb254ed28 100644\n+--- a/gcc/config/arc/arc.md\n++++ b/gcc/config/arc/arc.md\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 16ddef07516..991934272e0 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/arc.exp b/gcc/testsuite/gcc.target/arc/arc.exp\n+index 8d1844edd22..501d4589c53 100644\n+--- a/gcc/testsuite/gcc.target/arc/arc.exp\n++++ b/gcc/testsuite/gcc.target/arc/arc.exp\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-1.c b/gcc/testsuite/gcc.target/arc/uncached-1.c\n+index 7a6bade81c4..fa5ecb7b7d3 100644\n+--- a/gcc/testsuite/gcc.target/arc/uncached-1.c\n++++ b/gcc/testsuite/gcc.target/arc/uncached-1.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-2.c b/gcc/testsuite/gcc.target/arc/uncached-2.c\n+index 89eed326e01..9d6bfbbb50e 100644\n+--- a/gcc/testsuite/gcc.target/arc/uncached-2.c\n++++ b/gcc/testsuite/gcc.target/arc/uncached-2.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-3.c b/gcc/testsuite/gcc.target/arc/uncached-3.c\n+new file mode 100644\n+index 00000000000..f2a317b2816\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-3.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-4.c b/gcc/testsuite/gcc.target/arc/uncached-4.c\n+new file mode 100644\n+index 00000000000..fecb16648b8\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-4.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-5.c b/gcc/testsuite/gcc.target/arc/uncached-5.c\n+new file mode 100644\n+index 00000000000..4fe0464fdde\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-5.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-6.c b/gcc/testsuite/gcc.target/arc/uncached-6.c\n+new file mode 100644\n+index 00000000000..581a9eccb3b\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-6.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-7.c b/gcc/testsuite/gcc.target/arc/uncached-7.c\n+new file mode 100644\n+index 00000000000..4001b8bd821\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-7.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/arc/uncached-8.c b/gcc/testsuite/gcc.target/arc/uncached-8.c\n+new file mode 100644\n+index 00000000000..060229b11df\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/arc/uncached-8.c\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0814-sra-Avoid-totally-scalarizing-overallping-field_decl.patch ===\n+From 665c5bad168ab63629b29ed2ce08ed042c088dc2 Mon Sep 17 00:00:00 2001\n+From: Martin Jambor <mjambor@suse.cz>\n+Date: Wed, 19 Feb 2020 11:08:40 +0100\n+Subject: [PATCH 0814/2034] sra: Avoid totally scalarizing overallping\n+ field_decls (PR 93667)\n+\n+[[no_unique_address]] C++ attribute can cause two fields of a\n+RECORD_TYPE overlap, which currently confuses the totally scalarizing\n+code into creating invalid access tree.  For GCC 10, I'd like to\n+simply disable total scalarization of types where this happens.\n+\n+For GCC 11 I'll write down a TODO item to enable total scalarization\n+of cases like this where the problematic fields are basically empty -\n+despite having a non-zero size - i.e. when they are just RECORD_TYPEs\n+without any data fields.\n+\n+2020-02-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tgcc/\n+\n+\tPR tree-optimization/93667\n+\t* tree-sra.c (scalarizable_type_p): Return false if record fields\n+\tdo not follow wach other.\n+\n+\tgcc/testsuite/\n+\n+\tPR tree-optimization/93667\n+\t* g++.dg/tree-ssa/pr93667.C: New test.\n+---\n+ gcc/ChangeLog                           |  6 ++++++\n+ gcc/testsuite/ChangeLog                 |  5 +++++\n+ gcc/testsuite/g++.dg/tree-ssa/pr93667.C | 11 +++++++++++\n+ gcc/tree-sra.c                          | 14 ++++++++++++++\n+ 4 files changed, 36 insertions(+)\n+ create mode 100644 gcc/testsuite/g++.dg/tree-ssa/pr93667.C\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 77c2a9ad810..6b53f9a2f07 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 9b4fe11a6f6..8033fa0a3bb 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/tree-ssa/pr93667.C b/gcc/testsuite/g++.dg/tree-ssa/pr93667.C\n+new file mode 100644\n+index 00000000000..d875f53d9ec\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/tree-ssa/pr93667.C\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/tree-sra.c b/gcc/tree-sra.c\n+index 0cfac0a8192..4c7d651e6b9 100644\n+--- a/gcc/tree-sra.c\n++++ b/gcc/tree-sra.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0413-SRA-Total-scalarization-after-access-propagation-PR9.patch ===\n+From 636e80eea24b780f1d5f4c14c58fc00001df8508 Mon Sep 17 00:00:00 2001\n+From: Martin Jambor <mjambor@suse.cz>\n+Date: Wed, 29 Jan 2020 13:13:13 +0100\n+Subject: [PATCH 0413/2034] SRA: Total scalarization after access propagation\n+ [PR92706]\n+\n+2020-01-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/92706\n+\t* tree-sra.c (struct access): Adjust comment of\n+\tgrp_total_scalarization.\n+\t(find_access_in_subtree): Look for single children spanning an entire\n+\taccess.\n+\t(scalarizable_type_p): Allow register accesses, adjust callers.\n+\t(completely_scalarize): Remove function.\n+\t(scalarize_elem): Likewise.\n+\t(create_total_scalarization_access): Likewise.\n+\t(sort_and_splice_var_accesses): Do not track total scalarization\n+\tflags.\n+\t(analyze_access_subtree): New parameter totally, adjust to new meaning\n+\tof grp_total_scalarization.\n+\t(analyze_access_trees): Pass new parameter to analyze_access_subtree.\n+\t(can_totally_scalarize_forest_p): New function.\n+\t(create_total_scalarization_access): Likewise.\n+\t(create_total_access_and_reshape): Likewise.\n+\t(total_should_skip_creating_access): Likewise.\n+\t(totally_scalarize_subtree): Likewise.\n+\t(analyze_all_variable_accesses): Perform total scalarization after\n+\tsubaccess propagation using the new functions above.\n+\t(initialize_constant_pool_replacements): Output initializers by\n+\ttraversing the access tree.\n+\n+\ttestsuite/\n+\t* gcc.dg/tree-ssa/pr92706-2.c: New test.\n+\t* gcc.dg/guality/pr59776.c: Xfail tests for s2.g.\n+---\n+ gcc/ChangeLog                             |  26 +\n+ gcc/testsuite/ChangeLog                   |   6 +\n+ gcc/testsuite/gcc.dg/guality/pr59776.c    |   4 +-\n+ gcc/testsuite/gcc.dg/tree-ssa/pr92706-2.c |  19 +\n+ gcc/tree-sra.c                            | 666 ++++++++++++++++------\n+ 5 files changed, 537 insertions(+), 184 deletions(-)\n+ create mode 100644 gcc/testsuite/gcc.dg/tree-ssa/pr92706-2.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 16247a59304..61da54df346 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 05518848829..38758207989 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.dg/guality/pr59776.c b/gcc/testsuite/gcc.dg/guality/pr59776.c\n+index 382abb622bb..6c1c8165b70 100644\n+--- a/gcc/testsuite/gcc.dg/guality/pr59776.c\n++++ b/gcc/testsuite/gcc.dg/guality/pr59776.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.dg/tree-ssa/pr92706-2.c b/gcc/testsuite/gcc.dg/tree-ssa/pr92706-2.c\n+new file mode 100644\n+index 00000000000..37ab9765db0\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.dg/tree-ssa/pr92706-2.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/tree-sra.c b/gcc/tree-sra.c\n+index 36106fecaf1..2b0849858de 100644\n+--- a/gcc/tree-sra.c\n++++ b/gcc/tree-sra.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0334-Do-not-generate-a-unique-fnname-for-resolver.patch ===\n+From c2bd2b4664be8b73f8fd58a64dec1e93871797cc Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Mon, 27 Jan 2020 10:48:18 +0100\n+Subject: [PATCH 0334/2034] Do not generate a unique fnname for resolver.\n+\n+\tPR target/93274\n+\t* config/i386/i386-features.c (make_resolver_func):\n+\tAlign the code with ppc64 target implementation.\n+\tDo not generate a unique name for resolver function.\n+\tPR target/93274\n+\t* gcc.target/i386/pr81213.c: Adjust to not expect\n+\ta globally unique name.\n+---\n+ gcc/ChangeLog                           |  7 +++++++\n+ gcc/config/i386/i386-features.c         | 19 ++++---------------\n+ gcc/testsuite/ChangeLog                 |  6 ++++++\n+ gcc/testsuite/gcc.target/i386/pr81213.c |  4 ++--\n+ 4 files changed, 19 insertions(+), 17 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 45075840824..59806baa757 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/i386/i386-features.c b/gcc/config/i386/i386-features.c\n+index e580b26b995..b49e6f8d408 100644\n+--- a/gcc/config/i386/i386-features.c\n++++ b/gcc/config/i386/i386-features.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 2de060843d9..22a37dd1ab2 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/i386/pr81213.c b/gcc/testsuite/gcc.target/i386/pr81213.c\n+index 13e15d5fef0..89c47529861 100644\n+--- a/gcc/testsuite/gcc.target/i386/pr81213.c\n++++ b/gcc/testsuite/gcc.target/i386/pr81213.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 1850-List-valid-pairs-for-new-and-delete-operators.patch ===\n+From d7a65edb629a010f7ef907d457343abcb569fab7 Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Thu, 16 Apr 2020 15:39:22 +0200\n+Subject: [PATCH 1850/2034] List valid pairs for new and delete operators.\n+\n+\tPR c++/94314\n+\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Drop\n+\tDECL_IS_REPLACEABLE_OPERATOR during cloning.\n+\t* tree-ssa-dce.c (valid_new_delete_pair_p): New function.\n+\t(propagate_necessity): Check operator names.\n+\n+\tPR c++/94314\n+\t* g++.dg/pr94314.C: Do not use dg-additional-options\n+\tand remove not needed stdio.h include.\n+\t* g++.dg/pr94314-2.C: Likewise.\n+\t* g++.dg/pr94314-3.C: Likewise.\n+\t* g++.dg/pr94314-4.C: New test.\n+\n+Co-Authored-By: Jakub Jelinek <jakub@redhat.com>\n+---\n+ gcc/ChangeLog                    |  9 +++\n+ gcc/cgraphclones.c               |  2 +\n+ gcc/testsuite/ChangeLog          | 10 ++++\n+ gcc/testsuite/g++.dg/pr94314-2.C |  5 +-\n+ gcc/testsuite/g++.dg/pr94314-3.C |  5 +-\n+ gcc/testsuite/g++.dg/pr94314-4.C | 30 ++++++++++\n+ gcc/testsuite/g++.dg/pr94314.C   |  5 +-\n+ gcc/tree-ssa-dce.c               | 98 ++++++++++++++++++++++++++++----\n+ 8 files changed, 142 insertions(+), 22 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/pr94314-4.C\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 74dbeeb44c6..9e499ec9c86 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cgraphclones.c b/gcc/cgraphclones.c\n+index c73b8f810f0..8f541a28b6e 100644\n+--- a/gcc/cgraphclones.c\n++++ b/gcc/cgraphclones.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 756f1d759e6..94d2312022d 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-2.C b/gcc/testsuite/g++.dg/pr94314-2.C\n+index 36b93ed6d4d..998ce601767 100644\n+--- a/gcc/testsuite/g++.dg/pr94314-2.C\n++++ b/gcc/testsuite/g++.dg/pr94314-2.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-3.C b/gcc/testsuite/g++.dg/pr94314-3.C\n+index 575ba9d8ad8..846a5d6a3d8 100644\n+--- a/gcc/testsuite/g++.dg/pr94314-3.C\n++++ b/gcc/testsuite/g++.dg/pr94314-3.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-4.C b/gcc/testsuite/g++.dg/pr94314-4.C\n+new file mode 100644\n+index 00000000000..d097f29d4ad\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/pr94314-4.C\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314.C b/gcc/testsuite/g++.dg/pr94314.C\n+index 86e651d10ba..4e5ae122e9f 100644\n+--- a/gcc/testsuite/g++.dg/pr94314.C\n++++ b/gcc/testsuite/g++.dg/pr94314.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree-ssa-dce.c b/gcc/tree-ssa-dce.c\n+index fd5f24c746c..757cfad5b5e 100644\n+--- a/gcc/tree-ssa-dce.c\n++++ b/gcc/tree-ssa-dce.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0085-Daily-bump.patch ===\n+From 03647d2e26176bb874460b67deab0c30aa715d59 Mon Sep 17 00:00:00 2001\n+From: GCC Administrator <gccadmin@gcc.gnu.org>\n+Date: Thu, 16 Jan 2020 00:16:32 +0000\n+Subject: [PATCH 0085/2034] Daily bump.\n+\n+---\n+ gcc/DATESTAMP | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/gcc/DATESTAMP b/gcc/DATESTAMP\n+index ba948c594d4..62611957f86 100644\n+--- a/gcc/DATESTAMP\n++++ b/gcc/DATESTAMP\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0040-PR90916-ICE-in-retrieve-specialization.patch ===\n+From a5a3c2dcf73aa245b0eb6f6cf56c4d03ab6056da Mon Sep 17 00:00:00 2001\n+From: Nathan Sidwell <nathans@fb.com>\n+Date: Tue, 14 Jan 2020 11:12:40 -0800\n+Subject: [PATCH 0040/2034] [PR90916] ICE in retrieve specialization\n+\n+https://gcc.gnu.org/ml/gcc-patches/2020-01/msg00809.html\n+\tPR c++/90916\n+\t* pt.c (retrieve_specialization): Get the TI from the decl or the\n+\tclasstype as appropriate.\n+---\n+ gcc/cp/ChangeLog                        |  6 ++++++\n+ gcc/cp/pt.c                             | 15 ++++++++++-----\n+ gcc/testsuite/g++.dg/template/pr90916.C |  8 ++++++++\n+ 3 files changed, 24 insertions(+), 5 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/template/pr90916.C\n+\n+diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog\n+index 004ce0fdcdf..3cc7c48b490 100644\n+--- a/gcc/cp/ChangeLog\n++++ b/gcc/cp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c\n+index fa82ecad233..4fdc74f9ca8 100644\n+--- a/gcc/cp/pt.c\n++++ b/gcc/cp/pt.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/template/pr90916.C b/gcc/testsuite/g++.dg/template/pr90916.C\n+new file mode 100644\n+index 00000000000..bdb7e7b58ef\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/template/pr90916.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 2004-amdgcn-Check-HSA-return-codes-PR94629.patch ===\n+From 966de09be91c639d66d252c9ae6ab8da5ebfca18 Mon Sep 17 00:00:00 2001\n+From: Andrew Stubbs <ams@codesourcery.com>\n+Date: Mon, 20 Apr 2020 15:25:31 +0100\n+Subject: [PATCH 2004/2034] amdgcn: Check HSA return codes [PR94629]\n+\n+Ensure that the returned status values are not ignored.  The old code was\n+not broken, but this is both safer and satisfies static analysis.\n+\n+2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR other/94629\n+\n+\tlibgomp/\n+\t* plugin/plugin-gcn.c (init_hsa_context): Check return value from\n+\thsa_iterate_agents.\n+\t(GOMP_OFFLOAD_init_device): Check return values from both calls to\n+\thsa_agent_iterate_regions.\n+---\n+ libgomp/ChangeLog           | 9 +++++++++\n+ libgomp/plugin/plugin-gcn.c | 8 ++++++++\n+ 2 files changed, 17 insertions(+)\n+\n+diff --git a/libgomp/ChangeLog b/libgomp/ChangeLog\n+index c524abbbfb6..ee1764d4ae3 100644\n+--- a/libgomp/ChangeLog\n++++ b/libgomp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libgomp/plugin/plugin-gcn.c b/libgomp/plugin/plugin-gcn.c\n+index dc72c90962c..4c6a4c03b6e 100644\n+--- a/libgomp/plugin/plugin-gcn.c\n++++ b/libgomp/plugin/plugin-gcn.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0198-Change-recursive-prepare_block_for_update-to-use-a-w.patch ===\n+From 6fc2f9337311c11dabcc464c808cbef205f17a52 Mon Sep 17 00:00:00 2001\n+From: Andrew Pinski <apinski@marvell.com>\n+Date: Tue, 21 Jan 2020 08:34:42 +0000\n+Subject: [PATCH 0198/2034] Change recursive prepare_block_for_update to use a\n+ worklist\n+\n+Reported as PR 93321, prepare_block_for_update with some huge\n+recusive inlining can go past the stack limit. Transforming this\n+recursive into worklist improves the stack usage here and we no\n+longer seg fault for the testcase.  Note the order we walk the siblings\n+change.\n+\n+ChangeLog:\n+\tPR tree-opt/93321\n+\t* tree-into-ssa.c (prepare_block_for_update_1): Split out from ...\n+\t(prepare_block_for_update): This.  Use a worklist instead of recursing.\n+---\n+ gcc/ChangeLog       |  8 ++++++\n+ gcc/tree-into-ssa.c | 59 ++++++++++++++++++++++++++++++++++++---------\n+ 2 files changed, 55 insertions(+), 12 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 8c17e5992d2..262f0d6506f 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree-into-ssa.c b/gcc/tree-into-ssa.c\n+index c27bf2ce121..6528acac31a 100644\n+--- a/gcc/tree-into-ssa.c\n++++ b/gcc/tree-into-ssa.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0184-PR-80005-Fix-__has_include.patch ===\n+From ad1a3914ae8d67c94b0d2428e3f9672e7db491a1 Mon Sep 17 00:00:00 2001\n+From: Nathan Sidwell <nathan@acm.org>\n+Date: Mon, 20 Jan 2020 05:39:59 -0800\n+Subject: [PATCH 0184/2034] [PR 80005]  Fix __has_include\n+\n+__has_include is funky in that it is macro-like from the POV of #ifdef and\n+friends, but lexes its parenthesize argument #include-like.  We were\n+failing the second part of that, because we used a forwarding macro to an\n+internal name, and hence always lexed the argument in macro-parameter\n+context.  We componded that by not setting the right flag when lexing, so\n+it didn't even know.  Mostly users got lucky.\n+\n+This reimplements the handline.\n+1) Remove the forwarding, but declare object-like macros that\n+expand to themselves.  This satisfies the #ifdef requirement\n+\n+2) Correctly set angled_brackets when lexing the parameter.  This tells\n+the lexer (a) <...> is a header name and (b) \"...\" is too (not a string).\n+\n+3) Remove the in__has_include lexer state, just tell find_file that that's\n+what's happenning, so it doesn't emit an error.\n+\n+We lose the (undocumented) ability to #undef __has_include.  That may well\n+have been an accident of implementation.  There are no tests for it.\n+\n+We gain __has_include behaviour for all users of the preprocessors -- not\n+just the C-family ones that defined a forwarding macro.\n+\n+\tlibcpp/\n+\tPR preprocessor/80005\n+\t* include/cpplib.h (BT_HAS_ATTRIBUTE): Fix comment.\n+\t* internal.h (struct lexer_state): Delete in__has_include field.\n+\t(struct spec_nodes): Rename n__has_include{,_next}__ fields.\n+\t(_cpp_defined_macro_p): New.\n+\t(_cpp_find_file): Add has_include parm.\n+\t* directives.c (lex_macro_node): Combine defined,\n+\t__has_inline{,_next} checking.\n+\t(do_ifdef, do_ifndef): Use _cpp_defined_macro_p.\n+\t(_cpp_init_directives): Refactor.\n+\t* expr.c (parse_defined): Use _cpp_defined_macro_p.\n+\t(eval_token): Adjust parse_has_include calls.\n+\t(parse_has_include): Add OP parameter.  Reimplement.\n+\t* files.c (_cpp_find_file): Add HAS_INCLUDE parm.  Use it to\n+\tinhibit error message.\n+\t(_cpp_stack_include): Adjust _cpp_find_file call.\n+\t(_cpp_fake_include, _cpp_compare_file_date): Likewise.\n+\t(open_file_failed): Remove in__has_include check.\n+\t(_cpp_has_header): Adjust _cpp_find_file call.\n+\t* identifiers.c (_cpp_init_hashtable): Don't init\n+\t__has_include{,_next} here ...\n+\t* init.c (cpp_init_builtins): ... init them here.  Define as\n+\tmacros.\n+\t(cpp_read_main_file): Adjust _cpp_find_file call.\n+\t* pch.c (cpp_read_state): Adjust __has_include{,_next} access.\n+\t* traditional.c (_cpp_scan_out_locgical_line): Likewise.\n+\n+\tgcc/c-family/\n+\tPR preprocessor/80005\n+\t* c-cppbuiltins.c (c_cpp_builtins): Don't define __has_include{,_next}.\n+\n+\tgcc/testsuite/\n+\tPR preprocessor/80005\n+\t* g++.dg/cpp1y/feat-cxx14.C: Adjust.\n+\t* g++.dg/cpp1z/feat-cxx17.C: Adjust.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Adjust.\n+\t* g++.dg/cpp/pr80005.C: New.\n+---\n+ gcc/c-family/ChangeLog                  |  5 ++++\n+ gcc/c-family/c-cppbuiltin.c             |  6 -----\n+ gcc/testsuite/ChangeLog                 |  8 +++++++\n+ gcc/testsuite/g++.dg/cpp/pr80005.C      | 24 +++++++++++++++++++\n+ gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C | 10 ++------\n+ gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C | 10 ++------\n+ gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C | 10 ++------\n+ libcpp/ChangeLog                        | 29 +++++++++++++++++++++-\n+ libcpp/directives.c                     | 29 ++++++++--------------\n+ libcpp/expr.c                           | 32 ++++++++++++-------------\n+ libcpp/files.c                          | 27 +++++++++++----------\n+ libcpp/identifiers.c                    |  3 +--\n+ libcpp/include/cpplib.h                 |  2 +-\n+ libcpp/init.c                           | 14 ++++++++++-\n+ libcpp/internal.h                       | 20 +++++++++++-----\n+ libcpp/pch.c                            |  4 ++--\n+ libcpp/traditional.c                    |  8 +++----\n+ 17 files changed, 146 insertions(+), 95 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/cpp/pr80005.C\n+\n+diff --git a/gcc/c-family/ChangeLog b/gcc/c-family/ChangeLog\n+index 09ba2c8b40f..fdddb98a74d 100644\n+--- a/gcc/c-family/ChangeLog\n++++ b/gcc/c-family/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/c-family/c-cppbuiltin.c b/gcc/c-family/c-cppbuiltin.c\n+index a6308921dc9..70a12055e27 100644\n+--- a/gcc/c-family/c-cppbuiltin.c\n++++ b/gcc/c-family/c-cppbuiltin.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index a526e32ac89..67d5f2e9e28 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/cpp/pr80005.C b/gcc/testsuite/g++.dg/cpp/pr80005.C\n+new file mode 100644\n+index 00000000000..cc752616782\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/cpp/pr80005.C\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C b/gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C\n+index a2a93f437b3..a78b6a36f36 100644\n+--- a/gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C\n++++ b/gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C b/gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C\n+index 55e56a06fe8..e6f456b2415 100644\n+--- a/gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C\n++++ b/gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C b/gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C\n+index dd15cd6af3c..82fd602f9f1 100644\n+--- a/gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C\n++++ b/gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/ChangeLog b/libcpp/ChangeLog\n+index 3249b93fe88..27a841bbdce 100644\n+--- a/libcpp/ChangeLog\n++++ b/libcpp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/directives.c b/libcpp/directives.c\n+index 983206a5838..10735c8c668 100644\n+--- a/libcpp/directives.c\n++++ b/libcpp/directives.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/expr.c b/libcpp/expr.c\n+index 317faf50208..df21a4b9fb9 100644\n+--- a/libcpp/expr.c\n++++ b/libcpp/expr.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/files.c b/libcpp/files.c\n+index 7abae7ae6ec..260e787c329 100644\n+--- a/libcpp/files.c\n++++ b/libcpp/files.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/identifiers.c b/libcpp/identifiers.c\n+index 562d8fee3b5..9627e1bf4b0 100644\n+--- a/libcpp/identifiers.c\n++++ b/libcpp/identifiers.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/include/cpplib.h b/libcpp/include/cpplib.h\n+index 1c26c365347..56cbbd82750 100644\n+--- a/libcpp/include/cpplib.h\n++++ b/libcpp/include/cpplib.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/init.c b/libcpp/init.c\n+index 2b4923e1451..e798140ef8b 100644\n+--- a/libcpp/init.c\n++++ b/libcpp/init.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/internal.h b/libcpp/internal.h\n+index 3623baf8191..5453c3bff85 100644\n+--- a/libcpp/internal.h\n++++ b/libcpp/internal.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/pch.c b/libcpp/pch.c\n+index 607f805bebe..e631050936b 100644\n+--- a/libcpp/pch.c\n++++ b/libcpp/pch.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/libcpp/traditional.c b/libcpp/traditional.c\n+index 21c63b47dd5..ff06d31a897 100644\n+--- a/libcpp/traditional.c\n++++ b/libcpp/traditional.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== long-lines.patch ===\n+From eb7c7c524556df5364f03adc20f6a9db20858484 Mon Sep 17 00:00:00 2001\n+From: Jakub Jelinek <jakub@redhat.com>\n+Date: Mon, 13 Jan 2020 14:14:57 +0100\n+Subject: [PATCH 0004/2034] tree-opt: Fix bootstrap failure in\n+ tree-ssa-forwprop.c some more PR90838\n+\n+2020-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/90838\n+\t* tree-ssa-forwprop.c (simplify_count_trailing_zeroes): Use\n+\tSCALAR_INT_TYPE_MODE directly in CTZ_DEFINED_VALUE_AT_ZERO macro and and SCALAR_INT_TYPE_MODE directly in and so\n+\targument rather than to initialize temporary for targets that\n+\tdon't use the mode argument at all.  Initialize ctzval to avoid\n+\twarning at -O0.\n+---\n+ gcc/ChangeLog           | 9 +++++++++\n+ gcc/tree-ssa-forwprop.c | 6 +++---\n+ 2 files changed, 12 insertions(+), 3 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index a195863212e..f7df07343d1 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree-ssa-forwprop.c b/gcc/tree-ssa-forwprop.c\n+index aac31d02b6c..56c470f6ecf 100644\n+--- a/gcc/tree-ssa-forwprop.c\n++++ b/gcc/tree-ssa-forwprop.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0735-PR-87488-Add-with-diagnostics-urls-configuration-opt.patch ===\n+From 458c8d6459c4005fc9886b6e25d168a6535ac415 Mon Sep 17 00:00:00 2001\n+From: Bernd Edlinger <bernd.edlinger@hotmail.de>\n+Date: Wed, 29 Jan 2020 15:31:10 +0100\n+Subject: [PATCH 0735/2034] PR 87488: Add --with-diagnostics-urls configuration\n+ option\n+\n+2020-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR 87488\n+\tPR other/93168\n+\t* config.in (DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* configure.ac (--with-diagnostics-urls): New configuration\n+\toption, based on --with-diagnostics-color.\n+\t(DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* config.h: Regenerate.\n+\t* configure: Regenerate.\n+\t* diagnostic.c (diagnostic_urls_init): Handle -1 for\n+\tDIAGNOSTICS_URLS_DEFAULT from configure-time\n+\t--with-diagnostics-urls=auto-if-env by querying for a GCC_URLS\n+\tand TERM_URLS environment variable.\n+\t* diagnostic-url.h (diagnostic_url_format): New enum type.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and change return type.\n+\t* diagnostic-color.c (parse_env_vars_for_urls): New helper function.\n+\t(auto_enable_urls): Disable URLs on xfce4-terminal, gnome-terminal,\n+\tthe linux console, and mingw.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and adjust.\n+\t* pretty-print.h (pretty_printer::show_urls): rename to...\n+\t(pretty_printer::url_format): ... this, and change to enum.\n+\t* pretty-print.c (pretty_printer::pretty_printer,\n+\tpp_begin_url, pp_end_url, test_urls): Adjust.\n+\t* doc/install.texi (--with-diagnostics-urls): Document the new\n+\tconfiguration option.\n+\t(--with-diagnostics-color): Document the existing interaction\n+\twith GCC_COLORS better.\n+\t* doc/invoke.texi (-fdiagnostics-urls): Add GCC_URLS and TERM_URLS\n+\tvindex reference.  Update description of defaults based on the above.\n+\t(-fdiagnostics-color): Update description of how -fdiagnostics-color\n+\tinteracts with GCC_COLORS.\n+---\n+ gcc/ChangeLog          |  36 +++++++++++++++\n+ gcc/config.in          |   6 +++\n+ gcc/configure          |  41 ++++++++++++++++-\n+ gcc/configure.ac       |  28 ++++++++++++\n+ gcc/diagnostic-color.c | 101 ++++++++++++++++++++++++++++++++++++++---\n+ gcc/diagnostic-url.h   |  18 +++++++-\n+ gcc/diagnostic.c       |  21 +++++++--\n+ gcc/doc/install.texi   |  15 ++++--\n+ gcc/doc/invoke.texi    |  39 ++++++++++++++--\n+ gcc/pretty-print.c     |  44 +++++++++++++++---\n+ gcc/pretty-print.h     |   5 +-\n+ 11 files changed, 328 insertions(+), 26 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index e6eb6ab4c21..22f990a3088 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config.in b/gcc/config.in\n+index 48292861842..01fb18dbbb5 100644\n+--- a/gcc/config.in\n++++ b/gcc/config.in\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/configure b/gcc/configure\n+index 5fa565a40a4..f55cdb8c77f 100755\n+--- a/gcc/configure\n++++ b/gcc/configure\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/configure.ac b/gcc/configure.ac\n+index 671b9a67d81..0e6e475950d 100644\n+--- a/gcc/configure.ac\n++++ b/gcc/configure.ac\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic-color.c b/gcc/diagnostic-color.c\n+index d5547952921..b1baded2c9e 100644\n+--- a/gcc/diagnostic-color.c\n++++ b/gcc/diagnostic-color.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic-url.h b/gcc/diagnostic-url.h\n+index 6be056941f1..d28460b928b 100644\n+--- a/gcc/diagnostic-url.h\n++++ b/gcc/diagnostic-url.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic.c b/gcc/diagnostic.c\n+index 3386f070256..e4a08f76def 100644\n+--- a/gcc/diagnostic.c\n++++ b/gcc/diagnostic.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/install.texi b/gcc/doc/install.texi\n+index 6ffafacff50..8ddebbb6267 100644\n+--- a/gcc/doc/install.texi\n++++ b/gcc/doc/install.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi\n+index bd9ecebf103..597151670be 100644\n+--- a/gcc/doc/invoke.texi\n++++ b/gcc/doc/invoke.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/pretty-print.c b/gcc/pretty-print.c\n+index 817c1059e08..dde138b0533 100644\n+--- a/gcc/pretty-print.c\n++++ b/gcc/pretty-print.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/pretty-print.h b/gcc/pretty-print.h\n+index 001468c966e..22892f12ab7 100644\n+--- a/gcc/pretty-print.h\n++++ b/gcc/pretty-print.h\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0031-Fix-typo-and-avoid-possible-memory-leak-in-average_n.patch ===\n+From b38e86ddb7a9b6d7e87d7cc0b23983d027fcbd96 Mon Sep 17 00:00:00 2001\n+From: Kewen Lin <linkw@linux.ibm.com>\n+Date: Tue, 14 Jan 2020 02:34:10 -0600\n+Subject: [PATCH 0031/2034] Fix typo and avoid possible memory leak in\n+ average_num_loop_insns\n+\n+Function average_num_loop_insns forgets to free loop body in early\n+return.  Besides, overflow comparison checks 1000000 (e6) but the\n+return value is 100000 (e5), fix this typo.\n+\n+gcc/ChangeLog\n+\n+2020-01-14  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+    * cfgloopanal.c (average_num_loop_insns): Free bbs when early\n+    return, fix typo on return value.\n+---\n+ gcc/ChangeLog     | 5 +++++\n+ gcc/cfgloopanal.c | 5 ++++-\n+ 2 files changed, 9 insertions(+), 1 deletion(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 07e5bebe909..f3301b16464 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cfgloopanal.c b/gcc/cfgloopanal.c\n+index 392b1c337c4..0b33e8272a7 100644\n+--- a/gcc/cfgloopanal.c\n++++ b/gcc/cfgloopanal.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0735-PR-87488-Add-with-diagnostics-urls-configuration-opt.patch ===\n+From 458c8d6459c4005fc9886b6e25d168a6535ac415 Mon Sep 17 00:00:00 2001\n+From: Bernd Edlinger <bernd.edlinger@hotmail.de>\n+Date: Wed, 29 Jan 2020 15:31:10 +0100\n+Subject: [PATCH 0735/2034] PR 87488: Add --with-diagnostics-urls configuration\n+ option\n+\n+2020-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR 87488\n+\tPR other/93168\n+\t* config.in (DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* configure.ac (--with-diagnostics-urls): New configuration\n+\toption, based on --with-diagnostics-color.\n+\t(DIAGNOSTICS_URLS_DEFAULT): New define.\n+\t* config.h: Regenerate.\n+\t* configure: Regenerate.\n+\t* diagnostic.c (diagnostic_urls_init): Handle -1 for\n+\tDIAGNOSTICS_URLS_DEFAULT from configure-time\n+\t--with-diagnostics-urls=auto-if-env by querying for a GCC_URLS\n+\tand TERM_URLS environment variable.\n+\t* diagnostic-url.h (diagnostic_url_format): New enum type.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and change return type.\n+\t* diagnostic-color.c (parse_env_vars_for_urls): New helper function.\n+\t(auto_enable_urls): Disable URLs on xfce4-terminal, gnome-terminal,\n+\tthe linux console, and mingw.\n+\t(diagnostic_urls_enabled_p): rename to...\n+\t(determine_url_format): ... this, and adjust.\n+\t* pretty-print.h (pretty_printer::show_urls): rename to...\n+\t(pretty_printer::url_format): ... this, and change to enum.\n+\t* pretty-print.c (pretty_printer::pretty_printer,\n+\tpp_begin_url, pp_end_url, test_urls): Adjust.\n+\t* doc/install.texi (--with-diagnostics-urls): Document the new\n+\tconfiguration option.\n+\t(--with-diagnostics-color): Document the existing interaction\n+\twith GCC_COLORS better.\n+\t* doc/invoke.texi (-fdiagnostics-urls): Add GCC_URLS and TERM_URLS\n+\tvindex reference.  Update description of defaults based on the above.\n+\t(-fdiagnostics-color): Update description of how -fdiagnostics-color\n+\tinteracts with GCC_COLORS.\n+---\n+ gcc/ChangeLog          |  36 +++++++++++++++\n+ gcc/config.in          |   6 +++\n+ gcc/configure          |  41 ++++++++++++++++-\n+ gcc/configure.ac       |  28 ++++++++++++\n+ gcc/diagnostic-color.c | 101 ++++++++++++++++++++++++++++++++++++++---\n+ gcc/diagnostic-url.h   |  18 +++++++-\n+ gcc/diagnostic.c       |  21 +++++++--\n+ gcc/doc/install.texi   |  15 ++++--\n+ gcc/doc/invoke.texi    |  39 ++++++++++++++--\n+ gcc/pretty-print.c     |  44 +++++++++++++++---\n+ gcc/pretty-print.h     |   5 +-\n+ 11 files changed, 328 insertions(+), 26 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index e6eb6ab4c21..22f990a3088 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config.in b/gcc/config.in\n+index 48292861842..01fb18dbbb5 100644\n+--- a/gcc/config.in\n++++ b/gcc/config.in\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/configure b/gcc/configure\n+index 5fa565a40a4..f55cdb8c77f 100755\n+--- a/gcc/configure\n++++ b/gcc/configure\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/configure.ac b/gcc/configure.ac\n+index 671b9a67d81..0e6e475950d 100644\n+--- a/gcc/configure.ac\n++++ b/gcc/configure.ac\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic-color.c b/gcc/diagnostic-color.c\n+index d5547952921..b1baded2c9e 100644\n+--- a/gcc/diagnostic-color.c\n++++ b/gcc/diagnostic-color.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic-url.h b/gcc/diagnostic-url.h\n+index 6be056941f1..d28460b928b 100644\n+--- a/gcc/diagnostic-url.h\n++++ b/gcc/diagnostic-url.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/diagnostic.c b/gcc/diagnostic.c\n+index 3386f070256..e4a08f76def 100644\n+--- a/gcc/diagnostic.c\n++++ b/gcc/diagnostic.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/install.texi b/gcc/doc/install.texi\n+index 6ffafacff50..8ddebbb6267 100644\n+--- a/gcc/doc/install.texi\n++++ b/gcc/doc/install.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi\n+index bd9ecebf103..597151670be 100644\n+--- a/gcc/doc/invoke.texi\n++++ b/gcc/doc/invoke.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/pretty-print.c b/gcc/pretty-print.c\n+index 817c1059e08..dde138b0533 100644\n+--- a/gcc/pretty-print.c\n++++ b/gcc/pretty-print.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/pretty-print.h b/gcc/pretty-print.h\n+index 001468c966e..22892f12ab7 100644\n+--- a/gcc/pretty-print.h\n++++ b/gcc/pretty-print.h\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== co-authored-by.patch ===\n+From d7a65edb629a010f7ef907d457343abcb569fab7 Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Thu, 16 Apr 2020 15:39:22 +0200\n+Subject: [PATCH 1850/2034] List valid pairs for new and delete operators.\n+\n+\tPR c++/94314\n+\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Drop\n+\tDECL_IS_REPLACEABLE_OPERATOR during cloning.\n+\t* tree-ssa-dce.c (valid_new_delete_pair_p): New function.\n+\t(propagate_necessity): Check operator names.\n+\n+\tPR c++/94314\n+\t* g++.dg/pr94314.C: Do not use dg-additional-options\n+\tand remove not needed stdio.h include.\n+\t* g++.dg/pr94314-2.C: Likewise.\n+\t* g++.dg/pr94314-3.C: Likewise.\n+\t* g++.dg/pr94314-4.C: New test.\n+\n+co-authored-By: Jakub Jelinek <jakub@redhat.com>\n+Co-Authored-by: John Miller <jm@example.com>\n+co-authored-by: John Miller2 <jm2@example.com>\n+---\n+ gcc/ChangeLog                    |  9 +++\n+ gcc/cgraphclones.c               |  2 +\n+ gcc/testsuite/ChangeLog          | 10 ++++\n+ gcc/testsuite/g++.dg/pr94314-2.C |  5 +-\n+ gcc/testsuite/g++.dg/pr94314-3.C |  5 +-\n+ gcc/testsuite/g++.dg/pr94314-4.C | 30 ++++++++++\n+ gcc/testsuite/g++.dg/pr94314.C   |  5 +-\n+ gcc/tree-ssa-dce.c               | 98 ++++++++++++++++++++++++++++----\n+ 8 files changed, 142 insertions(+), 22 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/pr94314-4.C\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 74dbeeb44c6..9e499ec9c86 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cgraphclones.c b/gcc/cgraphclones.c\n+index c73b8f810f0..8f541a28b6e 100644\n+--- a/gcc/cgraphclones.c\n++++ b/gcc/cgraphclones.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 756f1d759e6..94d2312022d 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-2.C b/gcc/testsuite/g++.dg/pr94314-2.C\n+index 36b93ed6d4d..998ce601767 100644\n+--- a/gcc/testsuite/g++.dg/pr94314-2.C\n++++ b/gcc/testsuite/g++.dg/pr94314-2.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-3.C b/gcc/testsuite/g++.dg/pr94314-3.C\n+index 575ba9d8ad8..846a5d6a3d8 100644\n+--- a/gcc/testsuite/g++.dg/pr94314-3.C\n++++ b/gcc/testsuite/g++.dg/pr94314-3.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314-4.C b/gcc/testsuite/g++.dg/pr94314-4.C\n+new file mode 100644\n+index 00000000000..d097f29d4ad\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/pr94314-4.C\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/g++.dg/pr94314.C b/gcc/testsuite/g++.dg/pr94314.C\n+index 86e651d10ba..4e5ae122e9f 100644\n+--- a/gcc/testsuite/g++.dg/pr94314.C\n++++ b/gcc/testsuite/g++.dg/pr94314.C\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree-ssa-dce.c b/gcc/tree-ssa-dce.c\n+index fd5f24c746c..757cfad5b5e 100644\n+--- a/gcc/tree-ssa-dce.c\n++++ b/gcc/tree-ssa-dce.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 1699-combine-Fix-split_i2i3-ICE-PR94291.patch ===\n+From c23c899aedf11069e992eed7358802b262d62f98 Mon Sep 17 00:00:00 2001\n+From: Jakub Jelinek <jakub@redhat.com>\n+Date: Tue, 7 Apr 2020 21:30:12 +0200\n+Subject: [PATCH 1699/2034] combine: Fix split_i2i3 ICE [PR94291]\n+\n+The following testcase ICEs on armv7hl-linux-gnueabi.\n+try_combine is called on:\n+(gdb) p debug_rtx (i3)\n+(insn 20 12 22 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)\n+                (const_int -4 [0xfffffffffffffffc])) [1 x+0 S4 A32])\n+        (reg:SI 125)) \"pr94291.c\":7:8 241 {*arm_movsi_insn}\n+     (expr_list:REG_DEAD (reg:SI 125)\n+        (nil)))\n+(gdb) p debug_rtx (i2)\n+(insn 12 7 20 2 (parallel [\n+            (set (reg:CC 100 cc)\n+                (compare:CC (reg:SI 121 [ <retval> ])\n+                    (const_int 0 [0])))\n+            (set (reg:SI 125)\n+                (reg:SI 121 [ <retval> ]))\n+        ]) \"pr94291.c\":7:8 248 {*movsi_compare0}\n+     (expr_list:REG_UNUSED (reg:CC 100 cc)\n+        (nil)))\n+and tries to recognize cc = r121 cmp 0; [sfp-4] = r121 parallel,\n+but that isn't recognized, so it splits it into two: split_i2i3\n+[sfp-4] = r121 followed by cc = r121 cmp 0 which is recognized, but\n+ICEs because the code below insist that the SET_DEST of newi2pat\n+(or first set in PARALLEL thereof) must be a REG or SUBREG of REG,\n+but it is a MEM in this case.  I don't see any condition that would\n+guarantee that, perhaps for the swap_i2i3 case it was somehow guaranteed.\n+\n+As the code just wants to update LOG_LINKS and LOG_LINKS are only for\n+registers, not for MEM or anything else, the patch just doesn't update those\n+if it isn't a REG or SUBREG of REG.\n+\n+2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/94291\n+\tPR rtl-optimization/84169\n+\t* combine.c (try_combine): For split_i2i3, don't assume SET_DEST\n+\tmust be a REG or SUBREG of REG; if it is not one of these, don't\n+\tupdate LOG_LINKs.\n+\n+\t* gcc.dg/pr94291.c: New test.\n+---\n+ gcc/ChangeLog                  |  8 +++++++\n+ gcc/combine.c                  | 42 +++++++++++++++++++---------------\n+ gcc/testsuite/ChangeLog        |  6 +++++\n+ gcc/testsuite/gcc.dg/pr94291.c | 14 ++++++++++++\n+ 4 files changed, 51 insertions(+), 19 deletions(-)\n+ create mode 100644 gcc/testsuite/gcc.dg/pr94291.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index a1ab9fb4ef3..12803e90b0a 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/combine.c b/gcc/combine.c\n+index 58366a6d331..cff76cd3303 100644\n+--- a/gcc/combine.c\n++++ b/gcc/combine.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 71b5a14bcbe..3cbf891d58d 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.dg/pr94291.c b/gcc/testsuite/gcc.dg/pr94291.c\n+new file mode 100644\n+index 00000000000..7daa2b01166\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.dg/pr94291.c\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0001-Add-patch_area_size-and-patch_area_entry-to-crtl.patch ===\n+From 6607bdd99994c834f92fce924abdaea3405f62dc Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Fri, 1 May 2020 21:03:10 -0700\n+Subject: [PATCH] Add patch_area_size and patch_area_entry to crtl\n+\n+Currently patchable area is at the wrong place.  It is placed immediately\n+after function label and before .cfi_startproc.  A backend should be able\n+to add a pseudo patchable area instruction durectly into RTL.  This patch\n+adds patch_area_size and patch_area_entry to crtl so that the patchable\n+area info is available in RTL passes.\n+\n+It also limits patch_area_size and patch_area_entry to 65535, which is\n+a reasonable maximum size for patchable area.\n+\n+gcc/\n+\n+\tPR target/93492\n+\t* cfgexpand.c (pass_expand::execute): Set crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* emit-rtl.h (rtl_data): Add patch_area_size and patch_area_entry.\n+\t* opts.c (common_handle_option): Limit\n+\tfunction_entry_patch_area_size and function_entry_patch_area_start\n+\tto USHRT_MAX.  Fix a typo in error message.\n+\t* varasm.c (assemble_start_function): Use crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* doc/invoke.texi: Document the maximum value for\n+\t-fpatchable-function-entry.\n+\n+gcc/c-family/\n+\n+\tPR target/12345\n+\t* c-attribs.c (handle_patchable_function_entry_attribute): Limit\n+\tvalue to USHRT_MAX (65535).\n+\n+---\n+ gcc/ChangeLog                                 | 14 ++++++++\n+ gcc/c-family/ChangeLog                        |  6 ++++\n+ gcc/c-family/c-attribs.c                      |  9 +++++\n+ gcc/cfgexpand.c                               | 33 +++++++++++++++++++\n+ gcc/doc/invoke.texi                           |  1 +\n+ gcc/emit-rtl.h                                |  6 ++++\n+ gcc/opts.c                                    |  4 ++-\n+ gcc/testsuite/ChangeLog                       |  7 ++++\n+ .../patchable_function_entry-error-1.c        |  9 +++++\n+ .../patchable_function_entry-error-2.c        |  9 +++++\n+ .../patchable_function_entry-error-3.c        | 17 ++++++++++\n+ gcc/varasm.c                                  | 30 ++---------------\n+ 12 files changed, 116 insertions(+), 29 deletions(-)\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index e85a8e8813e..fb776ba5a0e 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/c-family/ChangeLog b/gcc/c-family/ChangeLog\n+index c429b49e68c..69ea1fdc4f3 100644\n+--- a/gcc/c-family/ChangeLog\n++++ b/gcc/c-family/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/c-family/c-attribs.c b/gcc/c-family/c-attribs.c\n+index ac936d5bbbb..a101312c581 100644\n+--- a/gcc/c-family/c-attribs.c\n++++ b/gcc/c-family/c-attribs.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cfgexpand.c b/gcc/cfgexpand.c\n+index a7ec77d5c85..86efa22bf60 100644\n+--- a/gcc/cfgexpand.c\n++++ b/gcc/cfgexpand.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi\n+index 527d362533a..767d1f07801 100644\n+--- a/gcc/doc/invoke.texi\n++++ b/gcc/doc/invoke.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/emit-rtl.h b/gcc/emit-rtl.h\n+index a878efe3cf7..3d6565c8a30 100644\n+--- a/gcc/emit-rtl.h\n++++ b/gcc/emit-rtl.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/opts.c b/gcc/opts.c\n+index c212a1a57dc..3dccef39701 100644\n+--- a/gcc/opts.c\n++++ b/gcc/opts.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 176aa117904..185f9ea725e 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+new file mode 100644\n+index 00000000000..f60bf46cfe3\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+new file mode 100644\n+index 00000000000..90f88c78be7\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+new file mode 100644\n+index 00000000000..4490e5c15ca\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/varasm.c b/gcc/varasm.c\n+index 271a67abf56..f062e48071f 100644\n+--- a/gcc/varasm.c\n++++ b/gcc/varasm.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.2\n+\n+=== 1957-c-generic-lambda-forwarding-function-PR94546.patch ===\n+From aedd04caa945260ea77fd22f29b77292f7dba72e Mon Sep 17 00:00:00 2001\n+From: Jason Merrill <jason@redhat.com>\n+Date: Wed, 22 Apr 2020 02:27:54 -0400\n+Subject: [PATCH 1957/2034] c++: generic lambda forwarding function [PR94546]\n+\n+While instantiating test(Plot) we partially instantiate the generic lambda.\n+We look at forward<T>(rest)... and see that it's just replacing parameter\n+packs with new parameter packs and tries to do a direct substitution.  But\n+because register_parameter_specializations had built up a\n+NONTYPE_ARGUMENT_PACK around the new parameter pack, the substitution\n+failed.  So let's not wrap it that way.\n+\n+gcc/cp/ChangeLog\n+2020-04-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94546\n+\t* pt.c (register_parameter_specializations): If the instantiation is\n+\tstill a parameter pack, don't wrap it in a NONTYPE_ARGUMENT_PACK.\n+\t(tsubst_pack_expansion, tsubst_expr): Adjust.\n+---\n+ gcc/cp/ChangeLog                              |  7 +++++\n+ gcc/cp/pt.c                                   | 28 +++++++------------\n+ .../g++.dg/cpp2a/lambda-generic-variadic20.C  | 23 +++++++++++++++\n+ 3 files changed, 40 insertions(+), 18 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C\n+\n+diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog\n+index 640e4948130..4b6691a77f0 100644\n+--- a/gcc/cp/ChangeLog\n++++ b/gcc/cp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c\n+index 7bf249cee5c..2fe7b66707c 100644\n+--- a/gcc/cp/pt.c\n++++ b/gcc/cp/pt.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C b/gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C\n+new file mode 100644\n+index 00000000000..3d69dbb8e98\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0030-PR-c-92746-ICE-with-noexcept-of-function-concept-che.patch ===\n+From edabbec31e3bfc9a9757f80c8610706ed00e5a1a Mon Sep 17 00:00:00 2001\n+From: Jason Merrill <jason@redhat.com>\n+Date: Mon, 13 Jan 2020 18:13:46 -0500\n+Subject: [PATCH 0030/2034] \tPR c++/92746 - ICE with noexcept of function\n+ concept check.\n+\n+Another place that needs to specially handle Concepts TS function-style\n+concepts.\n+\n+\t* except.c (check_noexcept_r): Handle concept-check.\n+---\n+ gcc/cp/ChangeLog                            | 3 +++\n+ gcc/cp/except.c                             | 2 ++\n+ gcc/testsuite/g++.dg/concepts/fn-concept3.C | 6 ++++++\n+ 3 files changed, 11 insertions(+)\n+ create mode 100644 gcc/testsuite/g++.dg/concepts/fn-concept3.C\n+\n+diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog\n+index 59646c70fa4..4729e3d331d 100644\n+--- a/gcc/cp/ChangeLog\n++++ b/gcc/cp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cp/except.c b/gcc/cp/except.c\n+index e073bd4d2bc..55b4b6af442 100644\n+--- a/gcc/cp/except.c\n++++ b/gcc/cp/except.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/concepts/fn-concept3.C b/gcc/testsuite/g++.dg/concepts/fn-concept3.C\n+new file mode 100644\n+index 00000000000..ecb7f6b12f7\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/concepts/fn-concept3.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0129-Add-PR-number-to-change-log.patch ===\n+From f788c2d66a6ee1ded65dafccbc5e485d42af4808 Mon Sep 17 00:00:00 2001\n+From: Richard Sandiford <richard.sandiford@arm.com>\n+Date: Fri, 17 Jan 2020 12:22:58 +0000\n+Subject: [PATCH 0129/2034] Add PR number to change log\n+\n+---\n+ gcc/ChangeLog | 1 +\n+ 1 file changed, 1 insertion(+)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 6c6d586ca75..49ca5f92dec 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0577-aarch64-Add-an-and.patch ===\n+From bba0c624c8b1d6e54dc58091dd21b0c2ab000434 Mon Sep 17 00:00:00 2001\n+From: Richard Sandiford <richard.sandiford@arm.com>\n+Date: Mon, 3 Feb 2020 21:43:44 +0000\n+Subject: [PATCH 0577/2034] aarch64: Add an and/ior-based movk pattern\n+ [PR87763]\n+\n+This patch adds a second movk pattern that models the instruction\n+as a \"normal\" and/ior operation rather than an insertion.  It fixes\n+the third insv_1.c failure in PR87763, which was a regression from\n+GCC 8.\n+\n+2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+gcc/\n+\tPR target/87763\n+\t* config/aarch64/aarch64-protos.h (aarch64_movk_shift): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_movk_shift): New function.\n+\t* config/aarch64/aarch64.md (aarch64_movk<mode>): New pattern.\n+\n+gcc/testsuite/\n+\tPR target/87763\n+\t* gcc.target/aarch64/movk_2.c: New test.\n+---\n+ gcc/ChangeLog                             |  7 ++\n+ gcc/config/aarch64/aarch64-protos.h       |  1 +\n+ gcc/config/aarch64/aarch64.c              | 24 +++++++\n+ gcc/config/aarch64/aarch64.md             | 17 +++++\n+ gcc/testsuite/ChangeLog                   |  5 ++\n+ gcc/testsuite/gcc.target/aarch64/movk_2.c | 78 +++++++++++++++++++++++\n+ 6 files changed, 132 insertions(+)\n+ create mode 100644 gcc/testsuite/gcc.target/aarch64/movk_2.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index efbbbf08225..cea8ffee99c 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64-protos.h b/gcc/config/aarch64/aarch64-protos.h\n+index 24cc65a383a..d29975a8921 100644\n+--- a/gcc/config/aarch64/aarch64-protos.h\n++++ b/gcc/config/aarch64/aarch64-protos.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64.c b/gcc/config/aarch64/aarch64.c\n+index 6581e4cb075..6a1b4099af1 100644\n+--- a/gcc/config/aarch64/aarch64.c\n++++ b/gcc/config/aarch64/aarch64.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64.md b/gcc/config/aarch64/aarch64.md\n+index 90eebce85c0..9c1f17d0f85 100644\n+--- a/gcc/config/aarch64/aarch64.md\n++++ b/gcc/config/aarch64/aarch64.md\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 601bc336290..cdb26581b9c 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/aarch64/movk_2.c b/gcc/testsuite/gcc.target/aarch64/movk_2.c\n+new file mode 100644\n+index 00000000000..a0477ad5d42\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/aarch64/movk_2.c\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 1975-S-390-Fix-several-test-cases.patch ===\n+From 803596fe9591026a50b59ff961ebc114097677b5 Mon Sep 17 00:00:00 2001\n+From: Stefan Schulze Frielinghaus <stefansf@linux.ibm.com>\n+Date: Tue, 10 Mar 2020 10:49:28 +0100\n+Subject: [PATCH 1975/2034] S/390: Fix several test cases\n+\n+gcc/ChangeLog:\n+\n+2020-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"*<risbg_n>_ior_and_sr_ze<mode>\"): Lift from SI\n+\tmode to DSI. (\"*trunc_sidi_and_subreg_ze<clobbercc_or_nocc>\"): New\n+\tinsn pattern.\n+\n+gcc/testsuite/ChangeLog:\n+\n+2020-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/addsub-signed-overflow-1.c: Fix options.\n+\t* gcc.target/s390/addsub-signed-overflow-2.c: Fix options.\n+\t* gcc.target/s390/bswap-1.c: Fix scan assembler regex.\n+\t* gcc.target/s390/global-array-element-pic2.c: Fix scan assembler regex.\n+\t* gcc.target/s390/load-relative-check.c: Fix options.\n+\t* gcc.target/s390/morestack.c: Fix options.\n+\t* gcc.target/s390/nobp-return-mem-z900.c: Temporarily silence this case.\n+\t* gcc.target/s390/risbg-ll-1.c: Fix scan assembler regex.\n+\t* gcc.target/s390/risbg-ll-2.c: Fix scan assembler regex.\n+\t* gcc.target/s390/risbg-ll-3.c: Fix scan assembler regex.\n+\t* gcc.target/s390/target-attribute/pr82012.c: Fix error message.\n+---\n+ gcc/config/s390/s390.md                       | 39 ++++++++++++-------\n+ .../s390/addsub-signed-overflow-1.c           |  2 +-\n+ .../s390/addsub-signed-overflow-2.c           |  2 +-\n+ gcc/testsuite/gcc.target/s390/bswap-1.c       |  8 ++--\n+ .../s390/global-array-element-pic2.c          |  4 +-\n+ .../gcc.target/s390/load-relative-check.c     |  2 +-\n+ gcc/testsuite/gcc.target/s390/morestack.c     |  2 +-\n+ .../gcc.target/s390/nobp-return-mem-z900.c    | 17 ++++++--\n+ gcc/testsuite/gcc.target/s390/risbg-ll-1.c    | 13 +++----\n+ gcc/testsuite/gcc.target/s390/risbg-ll-2.c    |  6 +--\n+ gcc/testsuite/gcc.target/s390/risbg-ll-3.c    |  2 +-\n+ .../s390/target-attribute/pr82012.c           |  2 +-\n+ 12 files changed, 59 insertions(+), 40 deletions(-)\n+\n+diff --git a/gcc/config/s390/s390.md b/gcc/config/s390/s390.md\n+index 44b59659e20..cf53ef1b791 100644\n+--- a/gcc/config/s390/s390.md\n++++ b/gcc/config/s390/s390.md\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c b/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c\n+index 143220d5541..ebc02479587 100644\n+--- a/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c\n++++ b/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-1.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c b/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c\n+index 798e489cece..8bd1a764bc6 100644\n+--- a/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c\n++++ b/gcc/testsuite/gcc.target/s390/addsub-signed-overflow-2.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/bswap-1.c b/gcc/testsuite/gcc.target/s390/bswap-1.c\n+index edfcdf888c0..c11a0ea780b 100644\n+--- a/gcc/testsuite/gcc.target/s390/bswap-1.c\n++++ b/gcc/testsuite/gcc.target/s390/bswap-1.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/global-array-element-pic2.c b/gcc/testsuite/gcc.target/s390/global-array-element-pic2.c\n+index b9398a8042f..72b87d40b85 100644\n+--- a/gcc/testsuite/gcc.target/s390/global-array-element-pic2.c\n++++ b/gcc/testsuite/gcc.target/s390/global-array-element-pic2.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/load-relative-check.c b/gcc/testsuite/gcc.target/s390/load-relative-check.c\n+index 3d4671a6b3f..a55bc2442f1 100644\n+--- a/gcc/testsuite/gcc.target/s390/load-relative-check.c\n++++ b/gcc/testsuite/gcc.target/s390/load-relative-check.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/morestack.c b/gcc/testsuite/gcc.target/s390/morestack.c\n+index aa28b72aa6c..4cfa220e737 100644\n+--- a/gcc/testsuite/gcc.target/s390/morestack.c\n++++ b/gcc/testsuite/gcc.target/s390/morestack.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/nobp-return-mem-z900.c b/gcc/testsuite/gcc.target/s390/nobp-return-mem-z900.c\n+index 0b318115a8f..3d6aca1f95f 100644\n+--- a/gcc/testsuite/gcc.target/s390/nobp-return-mem-z900.c\n++++ b/gcc/testsuite/gcc.target/s390/nobp-return-mem-z900.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/risbg-ll-1.c b/gcc/testsuite/gcc.target/s390/risbg-ll-1.c\n+index 30350d04c45..1cac15820c0 100644\n+--- a/gcc/testsuite/gcc.target/s390/risbg-ll-1.c\n++++ b/gcc/testsuite/gcc.target/s390/risbg-ll-1.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/risbg-ll-2.c b/gcc/testsuite/gcc.target/s390/risbg-ll-2.c\n+index 754c17311dd..8bf1a0ff88b 100644\n+--- a/gcc/testsuite/gcc.target/s390/risbg-ll-2.c\n++++ b/gcc/testsuite/gcc.target/s390/risbg-ll-2.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/risbg-ll-3.c b/gcc/testsuite/gcc.target/s390/risbg-ll-3.c\n+index 2a2db543cd9..90d37f2c1ce 100644\n+--- a/gcc/testsuite/gcc.target/s390/risbg-ll-3.c\n++++ b/gcc/testsuite/gcc.target/s390/risbg-ll-3.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/s390/target-attribute/pr82012.c b/gcc/testsuite/gcc.target/s390/target-attribute/pr82012.c\n+index 2e1f7ae57be..ad1bf76d4d2 100644\n+--- a/gcc/testsuite/gcc.target/s390/target-attribute/pr82012.c\n++++ b/gcc/testsuite/gcc.target/s390/target-attribute/pr82012.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 1999-rs6000-Fix-C-14-vs.-C-17-ABI-bug-on-powerpc64le-PR94.patch ===\n+From a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609 Mon Sep 17 00:00:00 2001\n+From: Jakub Jelinek <jakub@redhat.com>\n+Date: Thu, 23 Apr 2020 09:59:57 +0200\n+Subject: [PATCH 1999/2034] rs6000: Fix C++14 vs. C++17 ABI bug on powerpc64le\n+ [PR94707]\n+\n+As mentioned in the PR and on IRC, the recently added struct-layout-1.exp\n+new tests FAIL on powerpc64le-linux (among other targets).\n+FAIL: tmpdir-g++.dg-struct-layout-1/t032 cp_compat_x_tst.o-cp_compat_y_tst.o execute\n+FAIL: tmpdir-g++.dg-struct-layout-1/t058 cp_compat_x_tst.o-cp_compat_y_tst.o execute\n+FAIL: tmpdir-g++.dg-struct-layout-1/t059 cp_compat_x_tst.o-cp_compat_y_tst.o execute\n+in particular.  The problem is that the presence or absence of the C++17\n+artificial empty base fields, which have non-zero TYPE_SIZE, but zero\n+DECL_SIZE, change the ABI decisions, if it is present (-std=c++17), the type\n+might not be considered homogeneous, while if it is absent (-std=c++14), it\n+can be.\n+\n+The following patch fixes that and emits a -Wpsabi inform; perhaps more\n+often than it could, because the fact that rs6000_discover_homogeneous_aggregate\n+returns true when it didn't in in GCC 7/8/9 with -std=c++17 doesn't still\n+mean it will make a different ABI decision, but the warning triggered only\n+on the test I've changed (the struct-layout-1.exp tests use -w -Wno-psabi\n+already).\n+\n+2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94707\n+\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Add\n+\tcxx17_empty_base_seen argument.  Pass it to recursive calls.\n+\tIgnore cxx17_empty_base_field_p fields after setting\n+\t*cxx17_empty_base_seen to true.\n+\t(rs6000_discover_homogeneous_aggregate): Adjust\n+\trs6000_aggregate_candidate caller.  With -Wpsabi, diagnose homogeneous\n+\taggregates with C++17 empty base fields.\n+\n+\t* g++.dg/tree-ssa/pr27830.C: Use -Wpsabi -w for -std=c++17 and higher.\n+---\n+ gcc/ChangeLog                           | 13 ++++++++++\n+ gcc/config/rs6000/rs6000-call.c         | 34 +++++++++++++++++++++----\n+ gcc/testsuite/ChangeLog                 |  3 +++\n+ gcc/testsuite/g++.dg/tree-ssa/pr27830.C |  2 ++\n+ 4 files changed, 47 insertions(+), 5 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 06f7eda0033..93c3076eb86 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/rs6000/rs6000-call.c b/gcc/config/rs6000/rs6000-call.c\n+index e08621ace27..a9ae7ab70ca 100644\n+--- a/gcc/config/rs6000/rs6000-call.c\n++++ b/gcc/config/rs6000/rs6000-call.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 684e408c1a5..245c1512c76 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/tree-ssa/pr27830.C b/gcc/testsuite/g++.dg/tree-ssa/pr27830.C\n+index 01c7fc18783..551ebc428cd 100644\n+--- a/gcc/testsuite/g++.dg/tree-ssa/pr27830.C\n++++ b/gcc/testsuite/g++.dg/tree-ssa/pr27830.C\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== 0001-Add-patch_area_size-and-patch_area_entry-to-crtl.patch ===\n+From 6607bdd99994c834f92fce924abdaea3405f62dc Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Fri, 1 May 2020 21:03:10 -0700\n+Subject: [PATCH] Add patch_area_size and patch_area_entry to crtl\n+\n+Currently patchable area is at the wrong place.  It is placed immediately\n+after function label and before .cfi_startproc.  A backend should be able\n+to add a pseudo patchable area instruction durectly into RTL.  This patch\n+adds patch_area_size and patch_area_entry to crtl so that the patchable\n+area info is available in RTL passes.\n+\n+It also limits patch_area_size and patch_area_entry to 65535, which is\n+a reasonable maximum size for patchable area.\n+\n+gcc/\n+\n+\tPR target/93492\n+\t* cfgexpand.c (pass_expand::execute): Set crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* emit-rtl.h (rtl_data): Add patch_area_size and patch_area_entry.\n+\t* opts.c (common_handle_option): Limit\n+\tfunction_entry_patch_area_size and function_entry_patch_area_start\n+\tto USHRT_MAX.  Fix a typo in error message.\n+\t* varasm.c (assemble_start_function): Use crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* doc/invoke.texi: Document the maximum value for\n+\t-fpatchable-function-entry.\n+\n+gcc/c-family/\n+\n+\tPR target/12345\n+\t* c-attribs.c (handle_patchable_function_entry_attribute): Limit\n+\tvalue to USHRT_MAX (65535).\n+\n+---\n+ gcc/ChangeLog                                 | 14 ++++++++\n+ gcc/c-family/ChangeLog                        |  6 ++++\n+ gcc/c-family/c-attribs.c                      |  9 +++++\n+ gcc/cfgexpand.c                               | 33 +++++++++++++++++++\n+ gcc/doc/invoke.texi                           |  1 +\n+ gcc/emit-rtl.h                                |  6 ++++\n+ gcc/opts.c                                    |  4 ++-\n+ gcc/testsuite/ChangeLog                       |  7 ++++\n+ .../patchable_function_entry-error-1.c        |  9 +++++\n+ .../patchable_function_entry-error-2.c        |  9 +++++\n+ .../patchable_function_entry-error-3.c        | 17 ++++++++++\n+ gcc/varasm.c                                  | 30 ++---------------\n+ 12 files changed, 116 insertions(+), 29 deletions(-)\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+ create mode 100644 gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index e85a8e8813e..fb776ba5a0e 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/c-family/ChangeLog b/gcc/c-family/ChangeLog\n+index c429b49e68c..69ea1fdc4f3 100644\n+--- a/gcc/c-family/ChangeLog\n++++ b/gcc/c-family/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/c-family/c-attribs.c b/gcc/c-family/c-attribs.c\n+index ac936d5bbbb..a101312c581 100644\n+--- a/gcc/c-family/c-attribs.c\n++++ b/gcc/c-family/c-attribs.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cfgexpand.c b/gcc/cfgexpand.c\n+index a7ec77d5c85..86efa22bf60 100644\n+--- a/gcc/cfgexpand.c\n++++ b/gcc/cfgexpand.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi\n+index 527d362533a..767d1f07801 100644\n+--- a/gcc/doc/invoke.texi\n++++ b/gcc/doc/invoke.texi\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/emit-rtl.h b/gcc/emit-rtl.h\n+index a878efe3cf7..3d6565c8a30 100644\n+--- a/gcc/emit-rtl.h\n++++ b/gcc/emit-rtl.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/opts.c b/gcc/opts.c\n+index c212a1a57dc..3dccef39701 100644\n+--- a/gcc/opts.c\n++++ b/gcc/opts.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 176aa117904..185f9ea725e 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+new file mode 100644\n+index 00000000000..f60bf46cfe3\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+new file mode 100644\n+index 00000000000..90f88c78be7\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c b/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+new file mode 100644\n+index 00000000000..4490e5c15ca\n+--- /dev/null\n++++ b/gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/varasm.c b/gcc/varasm.c\n+index 271a67abf56..f062e48071f 100644\n+--- a/gcc/varasm.c\n++++ b/gcc/varasm.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.2\n+\n+=== 0002-Bump-date.patch ===\n+From a139bafeec76732d964b99e8be3d61b3cab0359d Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Tue, 12 May 2020 09:27:51 +0200\n+Subject: [PATCH 2/2] Bump date.\n+\n+---\n+ gcc/DATESTAMP | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/gcc/DATESTAMP b/gcc/DATESTAMP\n+index c3d42a6f89a..b03d4a0feab 100644\n+--- a/gcc/DATESTAMP\n++++ b/gcc/DATESTAMP\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.2\n+\n+=== 0001-Just-test-it.patch ===\n+From 6b10b909c0b49ac7ace2cd53021b3ff7ffb2d3f4 Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Tue, 12 May 2020 09:25:54 +0200\n+Subject: [PATCH 1/2] Just test it.\n+\n+gcc/ChangeLog:\n+\n+2020-05-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/12345\n+\t* tree-vrp.c: Done.\n+\t* tree.c: Done.\n+---\n+ gcc/tree-vrp.c | 2 ++\n+ gcc/tree.c     | 3 +++\n+ 2 files changed, 5 insertions(+)\n+\n+diff --git a/gcc/tree-vrp.c b/gcc/tree-vrp.c\n+index a8861670790..32722d2c714 100644\n+--- a/gcc/tree-vrp.c\n++++ b/gcc/tree-vrp.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree.c b/gcc/tree.c\n+index 0ddf002e9eb..fa7c6b28a4e 100644\n+--- a/gcc/tree.c\n++++ b/gcc/tree.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.2\n+\n+=== trailing-whitespaces.patch ===\n+From eb7c7c524556df5364f03adc20f6a9db20858484 Mon Sep 17 00:00:00 2001\n+From: Jakub Jelinek <jakub@redhat.com>\n+Date: Mon, 13 Jan 2020 14:14:57 +0100\n+Subject: [PATCH 0004/2034] tree-opt: Fix bootstrap failure in\n+ tree-ssa-forwprop.c some more PR90838\n+\n+2020-01-13  Jakub Jelinek  <jakub@redhat.com>   \n+\n+\tPR tree-optimization/90838\n+\t* tree-ssa-forwprop.c (simplify_count_trailing_zeroes): Use\n+\tSCALAR_INT_TYPE_MODE directly in CTZ_DEFINED_VALUE_AT_ZERO macro      \n+\targument rather than to initialize temporary for targets that\n+\tdon't use the mode argument at all.  Initialize ctzval to avoid  \n+\twarning at -O0.\n+---\n+ gcc/ChangeLog           | 9 +++++++++\n+ gcc/tree-ssa-forwprop.c | 6 +++---\n+ 2 files changed, 12 insertions(+), 3 deletions(-)\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index a195863212e..f7df07343d1 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/tree-ssa-forwprop.c b/gcc/tree-ssa-forwprop.c\n+index aac31d02b6c..56c470f6ecf 100644\n+--- a/gcc/tree-ssa-forwprop.c\n++++ b/gcc/tree-ssa-forwprop.c\n+@@ -1 +1,2 @@\n+\n++\n+-- \n+2.26.1\n+\n+=== pr-check1.patch ===\n+From 5194b51ed9714808d88827531e91474895b6c706 Mon Sep 17 00:00:00 2001\n+From: Jason Merrill <jason@redhat.com>\n+Date: Thu, 16 Jan 2020 16:55:39 -0500\n+Subject: [PATCH 0121/2034] PR c++/93286 - ICE with __is_constructible and\n+ variadic template.\n+\n+Here we had been recursing in tsubst_copy_and_build if type2 was a TREE_LIST\n+because that function knew how to deal with pack expansions, and tsubst\n+didn't.  But tsubst_copy_and_build expects to be dealing with expressions,\n+so we crash when trying to convert_from_reference a type.\n+\n+gcc/cp/ChangeLog:\n+\tPR ipa/12345\n+\t* pt.c (tsubst) [TREE_LIST]: Handle pack expansion.\n+\t(tsubst_copy_and_build) [TRAIT_EXPR]: Always use tsubst for type2.\n+\n+gcc/testsuite/ChangeLog:\n+\t* g++.dg/ext/is_constructible4.C: New file.\n+---\n+ gcc/cp/ChangeLog                             |  4 ++\n+ gcc/cp/pt.c                                  | 74 ++++++++++++++++++--\n+ gcc/testsuite/g++.dg/ext/is_constructible4.C | 18 +++++\n+ 3 files changed, 89 insertions(+), 7 deletions(-)\n+ create mode 100644 gcc/testsuite/g++.dg/ext/is_constructible4.C\n+\n+diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog\n+index 3ca5d7a11b4..c37e461bcc5 100644\n+--- a/gcc/cp/ChangeLog\n++++ b/gcc/cp/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c\n+index 9bb8cc13e5f..872f8ff8f52 100644\n+--- a/gcc/cp/pt.c\n++++ b/gcc/cp/pt.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/ext/is_constructible4.C b/gcc/testsuite/g++.dg/ext/is_constructible4.C\n+new file mode 100644\n+index 00000000000..6dfe3c01661\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/ext/is_constructible4.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0020-IPA-Avoid-segfault-in-devirtualization_time_bonus-PR.patch ===\n+From 8472660b98a31b32b7d030c2cdc4d41d326364d5 Mon Sep 17 00:00:00 2001\n+From: Martin Jambor <mjambor@suse.cz>\n+Date: Mon, 13 Jan 2020 19:13:46 +0100\n+Subject: [PATCH 0020/2034] IPA: Avoid segfault in devirtualization_time_bonus\n+ (PR 93223)\n+\n+2020-01-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93223\n+\t* ipa-cp.c (devirtualization_time_bonus): Check whether isummary is\n+\tNULL.\n+\n+\ttestsuite/\n+\t* g++.dg/ipa/pr93223.C: New test.\n+---\n+ gcc/ipa-cp.c                       |  2 +-\n+ gcc/testsuite/g++.dg/ipa/pr93223.C | 62 ++++++++++++++++++++++++++++++\n+ 2 files changed, 63 insertions(+), 1 deletion(-)\n+ create mode 100644 gcc/testsuite/g++.dg/ipa/pr93223.C\n+\n+diff --git a/gcc/ipa-cp.c b/gcc/ipa-cp.c\n+index 612f3d0a89b..17da1d8e8a7 100644\n+--- a/gcc/ipa-cp.c\n++++ b/gcc/ipa-cp.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/ipa/pr93223.C b/gcc/testsuite/g++.dg/ipa/pr93223.C\n+new file mode 100644\n+index 00000000000..87f98b5e244\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/ipa/pr93223.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0043-Compare-TREE_ADDRESSABLE-and-TYPE_MODE-when-ODR-chec.patch ===\n+From 288c5324bf6e418dd94d718d1619464a4f68ff8e Mon Sep 17 00:00:00 2001\n+From: Jan Hubicka <jh@suse.cz>\n+Date: Tue, 14 Jan 2020 21:45:03 +0100\n+Subject: [PATCH 0043/2034] Compare TREE_ADDRESSABLE and TYPE_MODE when ODR\n+ checking types.\n+\n+\tPR lto/91576\n+\t* ipa-devirt.c (odr_types_equivalent_p): Compare TREE_ADDRESSABLE and\n+\tTYPE_MODE.\n+\n+\t* testsuite/g++.dg/lto/odr-8_0.C: New testcase.\n+\t* testsuite/g++.dg/lto/odr-8_1.C: New testcase.\n+---\n+ gcc/ChangeLog                      |  6 ++++++\n+ gcc/ipa-devirt.c                   | 21 +++++++++++++++++++++\n+ gcc/testsuite/ChangeLog            |  6 ++++++\n+ gcc/testsuite/g++.dg/lto/odr-8_0.C |  7 +++++++\n+ gcc/testsuite/g++.dg/lto/odr-8_1.C | 12 ++++++++++++\n+ 5 files changed, 52 insertions(+)\n+ create mode 100644 gcc/testsuite/g++.dg/lto/odr-8_0.C\n+ create mode 100644 gcc/testsuite/g++.dg/lto/odr-8_1.C\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 38165123654..33ca91a6467 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/ipa-devirt.c b/gcc/ipa-devirt.c\n+index f0031957375..b609a77701d 100644\n+--- a/gcc/ipa-devirt.c\n++++ b/gcc/ipa-devirt.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 8e3b9105188..dc42601794b 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/g++.dg/lto/odr-8_0.C b/gcc/testsuite/g++.dg/lto/odr-8_0.C\n+new file mode 100644\n+index 00000000000..59f51399fac\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/lto/odr-8_0.C\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/g++.dg/lto/odr-8_1.C b/gcc/testsuite/g++.dg/lto/odr-8_1.C\n+new file mode 100644\n+index 00000000000..742df8cc906\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/lto/odr-8_1.C\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+\n+=== 0096-GCC-PATCH-AArch64-Add-ACLE-intrinsics-for-dot-produc.patch ===\n+From 8c197c851e7528baba7cb837f34c05ba2242f705 Mon Sep 17 00:00:00 2001\n+From: Stam Markianos-Wright <stam.markianos-wright@arm.com>\n+Date: Thu, 16 Jan 2020 14:20:48 +0000\n+Subject: [PATCH 0096/2034] [GCC][PATCH][AArch64]Add ACLE intrinsics for dot\n+ product (usdot - vector, <us/su>dot - by element) for AArch64 AdvSIMD ARMv8.6\n+ Extension\n+\n+gcc/ChangeLog:\n+\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c: (enum aarch64_type_qualifiers):\n+\tNew qualifier_lane_quadtup_index, TYPES_TERNOP_SSUS,\n+\tTYPES_QUADOPSSUS_LANE_QUADTUP, TYPES_QUADOPSSSU_LANE_QUADTUP.\n+\t(aarch64_simd_expand_args): Add case SIMD_ARG_LANE_QUADTUP_INDEX.\n+\t(aarch64_simd_expand_builtin): Add qualifier_lane_quadtup_index.\n+\t* config/aarch64/aarch64-simd-builtins.def (usdot, usdot_lane,\n+\tusdot_laneq, sudot_lane,sudot_laneq): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_usdot): New.\n+\t(aarch64_<sur>dot_lane): New.\n+\t* config/aarch64/arm_neon.h (vusdot_s32): New.\n+\t(vusdotq_s32): New.\n+\t(vusdot_lane_s32): New.\n+\t(vsudot_lane_s32): New.\n+\t* config/aarch64/iterators.md (DOTPROD_I8MM): New iterator.\n+\t(UNSPEC_USDOT, UNSPEC_SUDOT): New unspecs.\n+\n+gcc/testsuite/ChangeLog:\n+\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-1.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-2.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-3.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-4.c: New test.\n+---\n+ gcc/ChangeLog                                 |  18 +++\n+ gcc/config/aarch64/aarch64-builtins.c         |  45 +++++-\n+ gcc/config/aarch64/aarch64-simd-builtins.def  |   5 +\n+ gcc/config/aarch64/aarch64-simd.md            |  34 +++++\n+ gcc/config/aarch64/arm_neon.h                 |  83 +++++++++++\n+ gcc/config/aarch64/iterators.md               |   7 +\n+ gcc/testsuite/ChangeLog                       |   7 +\n+ .../aarch64/advsimd-intrinsics/vdot-3-1.c     | 136 +++++++++++++++++\n+ .../aarch64/advsimd-intrinsics/vdot-3-2.c     | 137 ++++++++++++++++++\n+ .../aarch64/advsimd-intrinsics/vdot-3-3.c     |  31 ++++\n+ .../aarch64/advsimd-intrinsics/vdot-3-4.c     |  31 ++++\n+ 11 files changed, 531 insertions(+), 3 deletions(-)\n+ create mode 100755 gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c\n+ create mode 100755 gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c\n+ create mode 100755 gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c\n+ create mode 100755 gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c\n+\n+diff --git a/gcc/ChangeLog b/gcc/ChangeLog\n+index 9a949980699..49dcecb6777 100644\n+--- a/gcc/ChangeLog\n++++ b/gcc/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64-builtins.c b/gcc/config/aarch64/aarch64-builtins.c\n+index f0e0461b7f0..f50c4857e1c 100644\n+--- a/gcc/config/aarch64/aarch64-builtins.c\n++++ b/gcc/config/aarch64/aarch64-builtins.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64-simd-builtins.def b/gcc/config/aarch64/aarch64-simd-builtins.def\n+index 57fc5933b43..4744dd1f6b2 100644\n+--- a/gcc/config/aarch64/aarch64-simd-builtins.def\n++++ b/gcc/config/aarch64/aarch64-simd-builtins.def\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/aarch64-simd.md b/gcc/config/aarch64/aarch64-simd.md\n+index 2989096b170..9e56e8caf35 100644\n+--- a/gcc/config/aarch64/aarch64-simd.md\n++++ b/gcc/config/aarch64/aarch64-simd.md\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/arm_neon.h b/gcc/config/aarch64/arm_neon.h\n+index eaba156e26c..c96214003dd 100644\n+--- a/gcc/config/aarch64/arm_neon.h\n++++ b/gcc/config/aarch64/arm_neon.h\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/config/aarch64/iterators.md b/gcc/config/aarch64/iterators.md\n+index b9843b83c5f..83720d9802a 100644\n+--- a/gcc/config/aarch64/iterators.md\n++++ b/gcc/config/aarch64/iterators.md\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/ChangeLog b/gcc/testsuite/ChangeLog\n+index 0d8aa6063a7..8b01aa06a40 100644\n+--- a/gcc/testsuite/ChangeLog\n++++ b/gcc/testsuite/ChangeLog\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c\n+new file mode 100755\n+index 00000000000..ac4f821e771\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c\n+new file mode 100755\n+index 00000000000..96bca2356e4\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c\n+new file mode 100755\n+index 00000000000..18ecabef8dc\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c\n+new file mode 100755\n+index 00000000000..66c87d48694\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.1\n+"}]}