{"sha": "48b195373b36b34735437677b73c8b6e77dd88fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMTk1MzczYjM2YjM0NzM1NDM3Njc3YjczYzhiNmU3N2RkODhmYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-13T22:56:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-13T22:56:29Z"}, "message": "trans-expr.c (string_to_single_character): Also optimize string literals containing a single char followed only by spaces.\n\n\t* trans-expr.c (string_to_single_character): Also optimize\n\tstring literals containing a single char followed only by spaces.\n\t(gfc_trans_string_copy): Remove redundant string_to_single_character\n\tcalls.\n\nFrom-SVN: r162161", "tree": {"sha": "f5d3f3c705f04acc33aa701dcd1c7fc5a84fe813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5d3f3c705f04acc33aa701dcd1c7fc5a84fe813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b195373b36b34735437677b73c8b6e77dd88fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b195373b36b34735437677b73c8b6e77dd88fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b195373b36b34735437677b73c8b6e77dd88fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b195373b36b34735437677b73c8b6e77dd88fc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ca4be7f25a6a4237e98410f1fab2f4578d52d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca4be7f25a6a4237e98410f1fab2f4578d52d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca4be7f25a6a4237e98410f1fab2f4578d52d1f"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "e8eeffc67609810582d6fbb9ab6b7134b9b3e3ff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b195373b36b34735437677b73c8b6e77dd88fc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b195373b36b34735437677b73c8b6e77dd88fc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48b195373b36b34735437677b73c8b6e77dd88fc", "patch": "@@ -1,5 +1,10 @@\n 2010-07-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* trans-expr.c (string_to_single_character): Also optimize\n+\tstring literals containing a single char followed only by spaces.\n+\t(gfc_trans_string_copy): Remove redundant string_to_single_character\n+\tcalls.\n+\n \t* trans-decl.c (gfc_build_intrinsic_function_decls,\n \tgfc_build_builtin_function_decls): Mark functions as\n \tDECL_PURE_P or TREE_READONLY."}, {"sha": "9857f4459e50835225ad7b844ddc9152a6a4c470", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b195373b36b34735437677b73c8b6e77dd88fc/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b195373b36b34735437677b73c8b6e77dd88fc/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=48b195373b36b34735437677b73c8b6e77dd88fc", "patch": "@@ -1393,12 +1393,40 @@ string_to_single_character (tree len, tree str, int kind)\n {\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (str)));\n \n-  if (INTEGER_CST_P (len) && TREE_INT_CST_LOW (len) == 1\n-      && TREE_INT_CST_HIGH (len) == 0)\n+  if (!INTEGER_CST_P (len) || TREE_INT_CST_HIGH (len) != 0)\n+    return NULL_TREE;\n+\n+  if (TREE_INT_CST_LOW (len) == 1)\n     {\n       str = fold_convert (gfc_get_pchar_type (kind), str);\n-      return build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t      str);\n+      return build_fold_indirect_ref_loc (input_location, str);\n+    }\n+\n+  if (kind == 1\n+      && TREE_CODE (str) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (str, 0)) == ARRAY_REF\n+      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (str, 0), 0)) == STRING_CST\n+      && array_ref_low_bound (TREE_OPERAND (str, 0))\n+\t == TREE_OPERAND (TREE_OPERAND (str, 0), 1)\n+      && TREE_INT_CST_LOW (len) > 1\n+      && TREE_INT_CST_LOW (len)\n+\t == (unsigned HOST_WIDE_INT)\n+\t    TREE_STRING_LENGTH (TREE_OPERAND (TREE_OPERAND (str, 0), 0)))\n+    {\n+      tree ret = fold_convert (gfc_get_pchar_type (kind), str);\n+      ret = build_fold_indirect_ref_loc (input_location, ret);\n+      if (TREE_CODE (ret) == INTEGER_CST)\n+\t{\n+\t  tree string_cst = TREE_OPERAND (TREE_OPERAND (str, 0), 0);\n+\t  int i, len = TREE_STRING_LENGTH (string_cst);\n+\t  const char *ptr = TREE_STRING_POINTER (string_cst);\n+\n+\t  for (i = 1; i < len; i++)\n+\t    if (ptr[i] != ' ')\n+\t      return NULL_TREE;\n+\n+\t  return ret;\n+\t}\n     }\n \n   return NULL_TREE;\n@@ -3556,20 +3584,14 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n   if (dlength != NULL_TREE)\n     {\n       dlen = fold_convert (size_type_node, gfc_evaluate_now (dlength, block));\n-      dsc = string_to_single_character (slen, dest, dkind);\n+      dsc = string_to_single_character (dlen, dest, dkind);\n     }\n   else\n     {\n       dlen = build_int_cst (size_type_node, 1);\n       dsc =  dest;\n     }\n \n-  if (slength != NULL_TREE && POINTER_TYPE_P (TREE_TYPE (src)))\n-    ssc = string_to_single_character (slen, src, skind);\n-  if (dlength != NULL_TREE && POINTER_TYPE_P (TREE_TYPE (dest)))\n-    dsc = string_to_single_character (dlen, dest, dkind);\n-\n-\n   /* Assign directly if the types are compatible.  */\n   if (dsc != NULL_TREE && ssc != NULL_TREE\n       && TREE_TYPE (dsc) == TREE_TYPE (ssc))"}]}