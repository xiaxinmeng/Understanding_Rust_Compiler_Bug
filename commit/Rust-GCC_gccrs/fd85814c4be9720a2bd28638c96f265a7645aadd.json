{"sha": "fd85814c4be9720a2bd28638c96f265a7645aadd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4NTgxNGM0YmU5NzIwYTJiZDI4NjM4Yzk2ZjI2NWE3NjQ1YWFkZA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-02T15:30:30Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-03T15:51:30Z"}, "message": "testsuite: aarch64: Add tests for v[r]shrn_high intrinsics\n\nAdd tests for v[r]shrn_high Neon intrinsics. Since these intrinsics\nare only supported for AArch64, these tests are restricted to only\nrun on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-02  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrshrn_high_n.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshrn_high_n.c:\n\tNew test.", "tree": {"sha": "60f95831b28ad0ce4d5f46fa6a5ffa5a1ff48485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f95831b28ad0ce4d5f46fa6a5ffa5a1ff48485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd85814c4be9720a2bd28638c96f265a7645aadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd85814c4be9720a2bd28638c96f265a7645aadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd85814c4be9720a2bd28638c96f265a7645aadd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd85814c4be9720a2bd28638c96f265a7645aadd/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "949eab55b6f37c70cf3d9a28d59004a2a86088f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949eab55b6f37c70cf3d9a28d59004a2a86088f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949eab55b6f37c70cf3d9a28d59004a2a86088f4"}], "stats": {"total": 270, "additions": 270, "deletions": 0}, "files": [{"sha": "b570ddccde9c7cc9a22c0e23d2a852b78d9dc12a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrshrn_high_n.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd85814c4be9720a2bd28638c96f265a7645aadd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd85814c4be9720a2bd28638c96f265a7645aadd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_high_n.c?ref=fd85814c4be9720a2bd28638c96f265a7645aadd", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_0, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0, int, 32, 4) [] = { 0x5, 0x5, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t      0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0, uint, 32, 4) [] = { 0x5, 0x5, 0x0, 0x0 };\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t\t   0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0xfff8, 0xfff9, 0xfff9, 0xfffa };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xfc, 0xfc, 0xfd, 0xfd,\n+\t\t\t\t\t    0xfd, 0xfd, 0xfe, 0xfe };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xfffe, 0xfffe, 0xfffe, 0xfffe };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0xfffffffe, 0xfffffffe };\n+\n+/* Expected results with large shift amount.  */\n+VECT_VAR_DECL(expected_sh_large, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large, int, 32, 4) [] = { 0x5, 0x5, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t     0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large, uint, 32, 4) [] = { 0x5, 0x5, 0x0, 0x0 };\n+\n+#define TEST_MSG \"VRSHRN_HIGH_N\"\n+void exec_vrshrn_high_n (void)\n+{\n+  /* Basic test: y=vrshrn_high_n(r,x,v), then store the result.  */\n+#define TEST_VRSHRN_HIGH_N(T1, T2, W1, W2, N1, N2, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t\t\\\n+    vrshrn_high_n_##T2##W1(VECT_VAR(vector_res_lo, T1, W2, N1),\t\t\t\\\n+\t\t\t   VECT_VAR(vector, T1, W1, N1),\t\t\t\\\n+\t\t\t   V);\t\t\t\t\t\t\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2), VECT_VAR(vector_res, T1, W2, N2))\n+\n+  DECL_VARIABLE(vector_res_lo, int, 8, 8);\n+  DECL_VARIABLE(vector_res_lo, int, 16, 4);\n+  DECL_VARIABLE(vector_res_lo, int, 32, 2);\n+  DECL_VARIABLE(vector_res_lo, uint, 8, 8);\n+  DECL_VARIABLE(vector_res_lo, uint, 16, 4);\n+  DECL_VARIABLE(vector_res_lo, uint, 32, 2);\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill vector_res_lo with a value easy to recognise in the result vector. */\n+  VDUP(vector_res_lo, , int, s, 8, 8, 0x5);\n+  VDUP(vector_res_lo, , int, s, 16, 4, 0x5);\n+  VDUP(vector_res_lo, , int, s, 32, 2, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 8, 8, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 16, 4, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 32, 2, 0x5);\n+\n+  /* Fill input vector with 0, to check behavior on limits.  */\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+  TEST_VRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 2);\n+  TEST_VRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+#define CMT \" (with input = 0)\"\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0, CMT);\n+\n+\n+  /* Test again, with predefined input values.  */\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+  TEST_VRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 2);\n+  TEST_VRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+#undef CMT\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Fill input arbitrary values.  */\n+  VDUP(vector, q, int, s, 16, 8, 30);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFF0);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFF0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose large shift amount arbitrarily.  */\n+  TEST_VRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 7);\n+  TEST_VRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 14);\n+  TEST_VRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 31);\n+  TEST_VRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 7);\n+  TEST_VRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 16);\n+  TEST_VRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+#undef CMT\n+#define CMT \" (with large shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_sh_large, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrshrn_high_n ();\n+  return 0;\n+}"}, {"sha": "165276741dae2e3a9d71e964d35aa1901f930671", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshrn_high_n.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd85814c4be9720a2bd28638c96f265a7645aadd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshrn_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd85814c4be9720a2bd28638c96f265a7645aadd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshrn_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshrn_high_n.c?ref=fd85814c4be9720a2bd28638c96f265a7645aadd", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0xf8, 0xf8, 0xf9, 0xf9,\n+\t\t\t\t\t   0xfa, 0xfa, 0xfb, 0xfb };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0xfff8, 0xfff8, 0xfff9, 0xfff9 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xfc, 0xfc, 0xfc, 0xfc,\n+\t\t\t\t\t    0xfd, 0xfd, 0xfd, 0xfd };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xfffe, 0xfffe, 0xfffe, 0xfffe };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0xfffffffe, 0xfffffffe };\n+\n+#define TEST_MSG \"VSHRN_HIGH_N\"\n+void exec_vshrn_high_n (void)\n+{\n+  /* Basic test: y=vshrn_high_n(r,x,v), then store the result.  */\n+#define TEST_VSHRN_HIGH_N(T1, T2, W1, W2, N1, N2, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t\t\\\n+    vshrn_high_n_##T2##W1(VECT_VAR(vector_res_lo, T1, W2, N1),\t\t\t\\\n+\t\t\t  VECT_VAR(vector, T1, W1, N1),\t\t\t\t\\\n+\t\t\t  V);\t\t\t\t\t\t\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2), VECT_VAR(vector_res, T1, W2, N2))\n+\n+  DECL_VARIABLE(vector_res_lo, int, 8, 8);\n+  DECL_VARIABLE(vector_res_lo, int, 16, 4);\n+  DECL_VARIABLE(vector_res_lo, int, 32, 2);\n+  DECL_VARIABLE(vector_res_lo, uint, 8, 8);\n+  DECL_VARIABLE(vector_res_lo, uint, 16, 4);\n+  DECL_VARIABLE(vector_res_lo, uint, 32, 2);\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill vector_res_lo with a value easy to recognise in the result vector. */\n+  VDUP(vector_res_lo, , int, s, 8, 8, 0x5);\n+  VDUP(vector_res_lo, , int, s, 16, 4, 0x5);\n+  VDUP(vector_res_lo, , int, s, 32, 2, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 8, 8, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 16, 4, 0x5);\n+  VDUP(vector_res_lo, , uint, u, 32, 2, 0x5);\n+\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VSHRN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VSHRN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VSHRN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+  TEST_VSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 2);\n+  TEST_VSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vshrn_high_n ();\n+  return 0;\n+}"}]}