{"sha": "9e3be8891057eba25a95eba3fc72eb527d1d4457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzYmU4ODkxMDU3ZWJhMjVhOTVlYmEzZmM3MmViNTI3ZDFkNDQ1Nw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-04-17T19:36:02Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-04-17T19:36:02Z"}, "message": "tm.texi (TARGET_DEFAULT_TARGET_FLAGS, [...]): Use @deftypevr rather than @deftypevar.\n\n\t* doc/tm.texi (TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_MIN_ANCHOR_OFFSET, TARGET_MAX_ANCHOR_OFFSET,\n\tTARGET_HAVE_SRODATA_SECTION, TARGET_HAVE_TLS,\n\tTARGET_UNWIND_TABLES_DEFAULT, TARGET_TERMINATE_DW2_EH_FRAME_INFO):\n\tUse @deftypevr rather than @deftypevar.\n\nFrom-SVN: r146286", "tree": {"sha": "077bf1aa414ccc9c7d548ce77d77bae66e89dcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077bf1aa414ccc9c7d548ce77d77bae66e89dcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3be8891057eba25a95eba3fc72eb527d1d4457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3be8891057eba25a95eba3fc72eb527d1d4457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3be8891057eba25a95eba3fc72eb527d1d4457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3be8891057eba25a95eba3fc72eb527d1d4457/comments", "author": null, "committer": null, "parents": [{"sha": "7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3e9dc3ec5530773206a7a9c673f437d9ca0054"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "5ad860c9f75ea7e84b7830dcbde51eda56287a12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3be8891057eba25a95eba3fc72eb527d1d4457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3be8891057eba25a95eba3fc72eb527d1d4457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e3be8891057eba25a95eba3fc72eb527d1d4457", "patch": "@@ -1,3 +1,11 @@\n+2009-04-17  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* doc/tm.texi (TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_MIN_ANCHOR_OFFSET, TARGET_MAX_ANCHOR_OFFSET,\n+\tTARGET_HAVE_SRODATA_SECTION, TARGET_HAVE_TLS,\n+\tTARGET_UNWIND_TABLES_DEFAULT, TARGET_TERMINATE_DW2_EH_FRAME_INFO):\n+\tUse @deftypevr rather than @deftypevar.\n+\n 2009-04-17  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up"}, {"sha": "5718eb9be67fd7bba6eb2c3bcf222c3b80d4f641", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3be8891057eba25a95eba3fc72eb527d1d4457/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3be8891057eba25a95eba3fc72eb527d1d4457/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9e3be8891057eba25a95eba3fc72eb527d1d4457", "patch": "@@ -750,10 +750,10 @@ This variable is declared in @file{options.h}, which is included before\n any target-specific headers.\n @end deftypevar\n \n-@deftypevar {Target Hook} int TARGET_DEFAULT_TARGET_FLAGS\n+@deftypevr {Target Hook} int TARGET_DEFAULT_TARGET_FLAGS\n This variable specifies the initial value of @code{target_flags}.\n Its default setting is 0.\n-@end deftypevar\n+@end deftypevr\n \n @cindex optional hardware or system features\n @cindex features, optional, in system conventions\n@@ -5672,18 +5672,18 @@ in order to make effective use of section anchors.  It won't use\n section anchors at all unless either @code{TARGET_MIN_ANCHOR_OFFSET}\n or @code{TARGET_MAX_ANCHOR_OFFSET} is set to a nonzero value.\n \n-@deftypevar {Target Hook} HOST_WIDE_INT TARGET_MIN_ANCHOR_OFFSET\n+@deftypevr {Target Hook} HOST_WIDE_INT TARGET_MIN_ANCHOR_OFFSET\n The minimum offset that should be applied to a section anchor.\n On most targets, it should be the smallest offset that can be\n applied to a base register while still giving a legitimate address\n for every mode.  The default value is 0.\n-@end deftypevar\n+@end deftypevr\n \n-@deftypevar {Target Hook} HOST_WIDE_INT TARGET_MAX_ANCHOR_OFFSET\n+@deftypevr {Target Hook} HOST_WIDE_INT TARGET_MAX_ANCHOR_OFFSET\n Like @code{TARGET_MIN_ANCHOR_OFFSET}, but the maximum (inclusive)\n offset that should be applied to section anchors.  The default\n value is 0.\n-@end deftypevar\n+@end deftypevr\n \n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_ANCHOR (rtx @var{x})\n Write the assembly code to define section anchor @var{x}, which is a\n@@ -6831,10 +6831,10 @@ Returns true if @var{exp} should be placed into a ``small data'' section.\n The default version of this hook always returns false.\n @end deftypefn\n \n-@deftypevar {Target Hook} bool TARGET_HAVE_SRODATA_SECTION\n+@deftypevr {Target Hook} bool TARGET_HAVE_SRODATA_SECTION\n Contains the value true if the target places read-only\n ``small data'' into a separate section.  The default value is false.\n-@end deftypevar\n+@end deftypevr\n \n @deftypefn {Target Hook} bool TARGET_BINDS_LOCAL_P (tree @var{exp})\n Returns true if @var{exp} names an object for which name resolution\n@@ -6846,10 +6846,10 @@ for ELF, which has a looser model of global name binding than other\n currently supported object file formats.\n @end deftypefn\n \n-@deftypevar {Target Hook} bool TARGET_HAVE_TLS\n+@deftypevr {Target Hook} bool TARGET_HAVE_TLS\n Contains the value true if the target supports thread-local storage.\n The default value is false.\n-@end deftypevar\n+@end deftypevr\n \n \n @node PIC\n@@ -8490,10 +8490,10 @@ Define this macro if your target has ABI specified unwind tables.  Usually\n these will be output by @code{TARGET_UNWIND_EMIT}.\n @end defmac\n \n-@deftypevar {Target Hook} bool TARGET_UNWIND_TABLES_DEFAULT\n+@deftypevr {Target Hook} bool TARGET_UNWIND_TABLES_DEFAULT\n This variable should be set to @code{true} if the target ABI requires unwinding\n tables even when exceptions are not used.\n-@end deftypevar\n+@end deftypevr\n \n @defmac MUST_USE_SJLJ_EXCEPTIONS\n This macro need only be defined if @code{DWARF2_UNWIND_INFO} is\n@@ -8517,12 +8517,12 @@ minimum alignment otherwise.  @xref{SDB and DWARF}.  Only applicable if\n the target supports DWARF 2 frame unwind information.\n @end defmac\n \n-@deftypevar {Target Hook} bool TARGET_TERMINATE_DW2_EH_FRAME_INFO\n+@deftypevr {Target Hook} bool TARGET_TERMINATE_DW2_EH_FRAME_INFO\n Contains the value true if the target should add a zero word onto the\n end of a Dwarf-2 frame info section when used for exception handling.\n Default value is false if @code{EH_FRAME_SECTION_NAME} is defined, and\n true otherwise.\n-@end deftypevar\n+@end deftypevr\n \n @deftypefn {Target Hook} rtx TARGET_DWARF_REGISTER_SPAN (rtx @var{reg})\n Given a register, this hook should return a parallel of registers to"}]}