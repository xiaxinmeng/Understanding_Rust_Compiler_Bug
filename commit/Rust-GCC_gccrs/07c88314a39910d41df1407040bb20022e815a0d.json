{"sha": "07c88314a39910d41df1407040bb20022e815a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjODgzMTRhMzk5MTBkNDFkZjE0MDcwNDBiYjIwMDIyZTgxNWEwZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-12T23:27:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-12T23:27:46Z"}, "message": "call.c (convert_class_to_reference): Fix typos.\n\n\t* call.c (convert_class_to_reference): Fix typos.\n\t(build_conditional_expr): Handle errors gracefully.\n\t* class.c (push_nested_class): Likewise.\n\t* cp-tree.h (VAR_FUNCTION_OR_PARM_DECL_CHECK): New macro.\n\t(DECL_THIS_EXTERN): Use it.\n\t(DECL_THIS_STATIC): Likewise.\n\t* cvt.c (convert_to_void): Handle errors gracefully.\n\t(build_expr_type_conversion): Likewise.\n\t* decl.c (maybe_push_decl): Likewise.\n\t(start_decl_1): Likewise.\n\t(require_complete_types_for_parms): Likewise.\n\t* parse.y (structsp): Likewise.\n\t(base_class): Likewise.\n\t* parse.c: Regenerated.\n\t* pt.c (finish_member_template_decl): Likewise.\n\nFrom-SVN: r31363", "tree": {"sha": "346bfc34fca22e01d717f4fe271a9839898583a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346bfc34fca22e01d717f4fe271a9839898583a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c88314a39910d41df1407040bb20022e815a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c88314a39910d41df1407040bb20022e815a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c88314a39910d41df1407040bb20022e815a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c88314a39910d41df1407040bb20022e815a0d/comments", "author": null, "committer": null, "parents": [{"sha": "6e090c767ad2d01b5038923a8527b070792814dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e090c767ad2d01b5038923a8527b070792814dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e090c767ad2d01b5038923a8527b070792814dc"}], "stats": {"total": 868, "additions": 466, "deletions": 402}, "files": [{"sha": "281354926ff53083967606863efa3413b4efd098", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,5 +1,22 @@\n 2000-01-12  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* call.c (convert_class_to_reference): Fix typos.\n+\t(build_conditional_expr): Handle errors gracefully.\n+\t* class.c (push_nested_class): Likewise.\n+\t* cp-tree.h (VAR_FUNCTION_OR_PARM_DECL_CHECK): New macro.\n+\t(DECL_THIS_EXTERN): Use it.\n+\t(DECL_THIS_STATIC): Likewise.\n+\t* cvt.c (convert_to_void): Handle errors gracefully.\n+\t(build_expr_type_conversion): Likewise.\n+\t* decl.c (maybe_push_decl): Likewise.\n+\t(start_decl_1): Likewise.\n+\t(require_complete_types_for_parms): Likewise.\n+\t* parse.y (structsp): Likewise.\n+\t(base_class): Likewise.\n+\t* parse.c: Regenerated.\n+\t* pt.c (finish_member_template_decl): Likewise.\n+\t* typeck.c (decay_conversion): Likewise.\n+\t\n \t* cp-tree.h (dfs_skip_vbases): New function.\n \t(find_vbase_instance): Likewise.\n \t* class.c (determine_primary_base): Allow a nearly empty base to"}, {"sha": "9d577c18b7b379553cd87debe70245085887c541", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -928,10 +928,10 @@ convert_class_to_reference (t, s, expr)\n   if (!cand)\n     return NULL_TREE;\n \n-  conv = build_conv (IDENTITY_CONV, s, expr);\n+  conv = build1 (IDENTITY_CONV, s, expr);\n   conv = build_conv (USER_CONV,\n \t\t     non_reference (TREE_TYPE (TREE_TYPE (cand->fn))),\n-\t\t     expr);\n+\t\t     conv);\n   TREE_OPERAND (conv, 1) = build_expr_ptr_wrapper (cand);\n   ICS_USER_FLAG (conv) = 1;\n   if (cand->viable == -1)\n@@ -2770,6 +2770,12 @@ build_conditional_expr (arg1, arg2, arg3)\n       arg1 = arg2 = save_expr (arg1);\n     }\n \n+  /* [expr.cond]\n+  \n+     The first expr ession is implicitly converted to bool (clause\n+     _conv_).  */\n+  arg1 = cp_convert (boolean_type_node, arg1);\n+\n   /* If something has already gone wrong, just pass that fact up the\n      tree.  */\n   if (arg1 == error_mark_node \n@@ -2780,12 +2786,6 @@ build_conditional_expr (arg1, arg2, arg3)\n       || TREE_TYPE (arg3) == error_mark_node)\n     return error_mark_node;\n \n-  /* [expr.cond]\n-  \n-     The first expr ession is implicitly converted to bool (clause\n-     _conv_).  */\n-  arg1 = cp_convert (boolean_type_node, arg1);\n-\n   /* Convert from reference types to ordinary types; no expressions\n      really have reference type in C++.  */\n   arg2 = convert_from_reference (arg2);"}, {"sha": "16ef0da7d70bcb502fd2854128294880e41f72cd", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -5279,8 +5279,10 @@ push_nested_class (type, modify)\n   tree context;\n \n   /* A namespace might be passed in error cases, like A::B:C.  */\n-  if (type == NULL_TREE || type == error_mark_node || ! IS_AGGR_TYPE (type)\n+  if (type == NULL_TREE \n+      || type == error_mark_node \n       || TREE_CODE (type) == NAMESPACE_DECL\n+      || ! IS_AGGR_TYPE (type)\n       || TREE_CODE (type) == TEMPLATE_TYPE_PARM\n       || TREE_CODE (type) == TEMPLATE_TEMPLATE_PARM)\n     return;"}, {"sha": "8fe8f0b7a2ded790063a67967a577746245b41a4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -140,6 +140,16 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n     __t; })\n \n+#define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE)\t\t\t\\\n+({  const tree __t = NODE;\t\t\t\t\t\\\n+    enum tree_code __c = TREE_CODE(__t);\t\t\t\\\n+    if (__c != VAR_DECL \t\t\t\t\t\\\n+\t&& __c != FUNCTION_DECL \t\t\t\t\\\n+        && __c != PARM_DECL)\t\t\t\t\t\\\n+      tree_check_failed (__t, VAR_DECL, __FILE__,\t\t\\\n+\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n+    __t; })\n+\n #define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE)\t\t\\\n ({  const tree __t = NODE;\t\t\t\t\t\\\n     enum tree_code __c = TREE_CODE(__t);\t\t\t\\\n@@ -162,6 +172,7 @@ Boston, MA 02111-1307, USA.  */\n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n #define VAR_OR_FUNCTION_DECL_CHECK(NODE)\tNODE\n+#define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE)   NODE\n #define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE)\tNODE\n #define RECORD_OR_UNION_TYPE_CHECK(NODE)\tNODE\n \n@@ -2380,14 +2391,16 @@ extern int flag_new_for_scope;\n #define PTRMEM_CST_MEMBER(NODE) (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->member)\n \n /* Nonzero for VAR_DECL and FUNCTION_DECL node means that `extern' was\n-   specified in its declaration.  */\n+   specified in its declaration.  This can also be set for an\n+   erroneously declared PARM_DECL.  */\n #define DECL_THIS_EXTERN(NODE) \\\n-  DECL_LANG_FLAG_2 (VAR_OR_FUNCTION_DECL_CHECK (NODE))\n+  DECL_LANG_FLAG_2 (VAR_FUNCTION_OR_PARM_DECL_CHECK (NODE))\n \n /* Nonzero for VAR_DECL and FUNCTION_DECL node means that `static' was\n-   specified in its declaration.  */\n+   specified in its declaration.  This can also be set for an\n+   erroneously declared PARM_DECL.  */\n #define DECL_THIS_STATIC(NODE) \\\n-  DECL_LANG_FLAG_6 (VAR_OR_FUNCTION_DECL_CHECK (NODE))\n+  DECL_LANG_FLAG_6 (VAR_FUNCTION_OR_PARM_DECL_CHECK (NODE))\n \n /* Nonzero in FUNCTION_DECL means it is really an operator.\n    Just used to communicate formatting information to dbxout.c.  */"}, {"sha": "34acdd03fd8d93b57da4ff0c821d42d6720f441f", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,5 +1,5 @@\n /* Language-level data type conversion for GNU C++.\n-   Copyright (C) 1987-1988, 1992-1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987-1988, 1992-2000 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -851,8 +851,9 @@ convert_to_void (expr, implicit)\n      tree expr;\n      const char *implicit;\n {\n-  if (expr == error_mark_node)\n-    return expr;\n+  if (expr == error_mark_node \n+      || TREE_TYPE (expr) == error_mark_node)\n+    return error_mark_node;\n   if (!TREE_TYPE (expr))\n     return expr;\n   if (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (expr)), void_type_node))\n@@ -1092,6 +1093,9 @@ build_expr_type_conversion (desires, expr, complain)\n   expr = convert_from_reference (expr);\n   basetype = TREE_TYPE (expr);\n \n+  if (basetype == error_mark_node)\n+    return error_mark_node;\n+\n   if (! IS_AGGR_TYPE (basetype))\n     switch (TREE_CODE (basetype))\n       {"}, {"sha": "21792e0a4874a4c813de1dba641721983090c2ad", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92-98, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -4169,11 +4169,12 @@ maybe_push_decl (decl)\n   /* Add this decl to the current binding level, but not if it comes\n      from another scope, e.g. a static member variable.  TEM may equal\n      DECL or it may be a previous decl of the same name.  */\n-  if ((TREE_CODE (decl) != PARM_DECL\n-       && DECL_CONTEXT (decl) != NULL_TREE\n-       /* Definitions of namespace members outside their namespace are\n-\t  possible. */\n-       && TREE_CODE (DECL_CONTEXT (decl)) != NAMESPACE_DECL)\n+  if (decl == error_mark_node\n+      || (TREE_CODE (decl) != PARM_DECL\n+\t  && DECL_CONTEXT (decl) != NULL_TREE\n+\t  /* Definitions of namespace members outside their namespace are\n+\t     possible. */\n+\t  && TREE_CODE (DECL_CONTEXT (decl)) != NAMESPACE_DECL)\n       || (TREE_CODE (decl) == TEMPLATE_DECL && !namespace_bindings_p ())\n       || TREE_CODE (type) == UNKNOWN_TYPE\n       /* The declaration of a template specialization does not affect\n@@ -6871,7 +6872,9 @@ start_decl_1 (decl)\n   if (!initialized\n       && TREE_CODE (decl) != TYPE_DECL\n       && TREE_CODE (decl) != TEMPLATE_DECL\n-      && IS_AGGR_TYPE (type) && ! DECL_EXTERNAL (decl))\n+      && type != error_mark_node\n+      && IS_AGGR_TYPE (type) \n+      && ! DECL_EXTERNAL (decl))\n     {\n       if ((! processing_template_decl || ! uses_template_parms (type))\n \t  && TYPE_SIZE (complete_type (type)) == NULL_TREE)\n@@ -11309,10 +11312,17 @@ static void\n require_complete_types_for_parms (parms)\n      tree parms;\n {\n-  while (parms)\n+  for (; parms; parms = TREE_CHAIN (parms))\n     {\n       tree type = TREE_TYPE (parms);\n-      if (TYPE_SIZE (complete_type (type)) == NULL_TREE)\n+\n+      /* Try to complete the TYPE.  */\n+      type = complete_type (type);\n+\n+      if (type == error_mark_node)\n+\tcontinue;\n+\n+      if (TYPE_SIZE (type) == NULL_TREE)\n \t{\n \t  if (DECL_NAME (parms))\n \t    error (\"parameter `%s' has incomplete type\",\n@@ -11323,8 +11333,6 @@ require_complete_types_for_parms (parms)\n \t}\n       else\n \tlayout_decl (parms, 0);\n-\n-      parms = TREE_CHAIN (parms);\n     }\n }\n "}, {"sha": "2821100e30935c1ca91f2c9c7831e2e2dfd53532", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 376, "deletions": 370, "changes": 746, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,7 +1,6 @@\n \n /*  A Bison parser, made from parse.y\n- by  GNU Bison version 1.27\n-  */\n+    by GNU Bison version 1.28  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -699,46 +698,46 @@ static const short yyrline[] = { 0,\n   1991,  1994,  2000,  2003,  2006,  2008,  2010,  2014,  2021,  2027,\n   2032,  2038,  2040,  2045,  2048,  2051,  2053,  2055,  2059,  2063,\n   2068,  2071,  2076,  2079,  2082,  2088,  2090,  2102,  2106,  2111,\n-  2135,  2137,  2140,  2142,  2147,  2149,  2151,  2153,  2155,  2157,\n-  2161,  2169,  2172,  2174,  2178,  2185,  2191,  2197,  2203,  2213,\n-  2219,  2223,  2230,  2258,  2268,  2274,  2277,  2280,  2282,  2286,\n-  2288,  2292,  2295,  2299,  2302,  2305,  2307,  2311,  2322,  2336,\n-  2337,  2338,  2339,  2342,  2351,  2356,  2362,  2364,  2369,  2371,\n-  2373,  2375,  2377,  2379,  2382,  2392,  2399,  2424,  2430,  2433,\n-  2436,  2438,  2449,  2454,  2457,  2462,  2465,  2472,  2482,  2485,\n-  2492,  2502,  2504,  2507,  2509,  2512,  2519,  2527,  2534,  2540,\n-  2546,  2554,  2558,  2563,  2567,  2570,  2575,  2577,  2584,  2586,\n-  2589,  2592,  2597,  2601,  2606,  2616,  2619,  2623,  2627,  2636,\n-  2639,  2641,  2643,  2649,  2651,  2660,  2663,  2665,  2667,  2669,\n-  2673,  2676,  2679,  2681,  2683,  2685,  2689,  2692,  2703,  2713,\n-  2715,  2716,  2720,  2728,  2730,  2738,  2741,  2743,  2745,  2747,\n-  2751,  2754,  2757,  2759,  2761,  2763,  2767,  2770,  2773,  2775,\n-  2777,  2779,  2781,  2788,  2792,  2797,  2801,  2806,  2808,  2812,\n-  2815,  2817,  2820,  2822,  2823,  2826,  2828,  2830,  2837,  2848,\n-  2854,  2860,  2874,  2876,  2880,  2894,  2896,  2898,  2902,  2908,\n-  2921,  2924,  2929,  2942,  2948,  2950,  2951,  2952,  2960,  2965,\n-  2974,  2975,  2979,  2982,  2988,  2994,  2997,  2999,  3001,  3003,\n-  3007,  3011,  3015,  3018,  3022,  3024,  3033,  3036,  3038,  3040,\n-  3042,  3044,  3046,  3048,  3050,  3054,  3058,  3062,  3066,  3068,\n-  3070,  3072,  3074,  3076,  3078,  3080,  3082,  3090,  3092,  3093,\n-  3094,  3097,  3103,  3105,  3110,  3112,  3115,  3128,  3131,  3134,\n-  3138,  3141,  3148,  3150,  3153,  3155,  3157,  3160,  3163,  3166,\n-  3169,  3171,  3174,  3178,  3180,  3186,  3188,  3189,  3191,  3196,\n-  3198,  3200,  3202,  3204,  3207,  3208,  3210,  3213,  3214,  3217,\n-  3217,  3220,  3220,  3223,  3223,  3225,  3227,  3229,  3231,  3237,\n-  3243,  3246,  3249,  3255,  3257,  3258,  3261,  3263,  3264,  3265,\n-  3267,  3270,  3273,  3276,  3282,  3286,  3288,  3291,  3293,  3296,\n-  3300,  3302,  3305,  3307,  3310,  3327,  3335,  3338,  3340,  3342,\n-  3346,  3349,  3350,  3358,  3362,  3366,  3369,  3370,  3376,  3379,\n-  3382,  3384,  3388,  3393,  3396,  3406,  3411,  3412,  3419,  3422,\n-  3425,  3427,  3430,  3432,  3442,  3456,  3460,  3463,  3465,  3469,\n-  3473,  3476,  3479,  3481,  3485,  3487,  3494,  3501,  3504,  3508,\n-  3512,  3516,  3522,  3526,  3531,  3533,  3536,  3541,  3547,  3558,\n-  3561,  3563,  3567,  3575,  3578,  3582,  3585,  3587,  3589,  3595,\n-  3600,  3603,  3605,  3607,  3609,  3611,  3613,  3615,  3617,  3619,\n-  3621,  3623,  3625,  3627,  3629,  3631,  3633,  3635,  3637,  3639,\n-  3641,  3643,  3645,  3647,  3649,  3651,  3653,  3655,  3657,  3659,\n-  3661,  3663,  3665,  3668,  3670\n+  2137,  2139,  2142,  2144,  2149,  2151,  2153,  2155,  2157,  2159,\n+  2163,  2171,  2174,  2176,  2180,  2187,  2193,  2199,  2205,  2215,\n+  2221,  2225,  2232,  2260,  2270,  2276,  2279,  2282,  2284,  2288,\n+  2290,  2294,  2297,  2301,  2309,  2312,  2314,  2318,  2329,  2343,\n+  2344,  2345,  2346,  2349,  2358,  2363,  2369,  2371,  2376,  2378,\n+  2380,  2382,  2384,  2386,  2389,  2399,  2406,  2431,  2437,  2440,\n+  2443,  2445,  2456,  2461,  2464,  2469,  2472,  2479,  2489,  2492,\n+  2499,  2509,  2511,  2514,  2516,  2519,  2526,  2534,  2541,  2547,\n+  2553,  2561,  2565,  2570,  2574,  2577,  2582,  2584,  2591,  2593,\n+  2596,  2599,  2604,  2608,  2613,  2623,  2626,  2630,  2634,  2643,\n+  2646,  2648,  2650,  2656,  2658,  2667,  2670,  2672,  2674,  2676,\n+  2680,  2683,  2686,  2688,  2690,  2692,  2696,  2699,  2710,  2720,\n+  2722,  2723,  2727,  2735,  2737,  2745,  2748,  2750,  2752,  2754,\n+  2758,  2761,  2764,  2766,  2768,  2770,  2774,  2777,  2780,  2782,\n+  2784,  2786,  2788,  2795,  2799,  2804,  2808,  2813,  2815,  2819,\n+  2822,  2824,  2827,  2829,  2830,  2833,  2835,  2837,  2844,  2855,\n+  2861,  2867,  2881,  2883,  2887,  2901,  2903,  2905,  2909,  2915,\n+  2928,  2931,  2936,  2949,  2955,  2957,  2958,  2959,  2967,  2972,\n+  2981,  2982,  2986,  2989,  2995,  3001,  3004,  3006,  3008,  3010,\n+  3014,  3018,  3022,  3025,  3029,  3031,  3040,  3043,  3045,  3047,\n+  3049,  3051,  3053,  3055,  3057,  3061,  3065,  3069,  3073,  3075,\n+  3077,  3079,  3081,  3083,  3085,  3087,  3089,  3097,  3099,  3100,\n+  3101,  3104,  3110,  3112,  3117,  3119,  3122,  3135,  3138,  3141,\n+  3145,  3148,  3155,  3157,  3160,  3162,  3164,  3167,  3170,  3173,\n+  3176,  3178,  3181,  3185,  3187,  3193,  3195,  3196,  3198,  3203,\n+  3205,  3207,  3209,  3211,  3214,  3215,  3217,  3220,  3221,  3224,\n+  3224,  3227,  3227,  3230,  3230,  3232,  3234,  3236,  3238,  3244,\n+  3250,  3253,  3256,  3262,  3264,  3265,  3268,  3270,  3271,  3272,\n+  3274,  3277,  3280,  3283,  3289,  3293,  3295,  3298,  3300,  3303,\n+  3307,  3309,  3312,  3314,  3317,  3334,  3342,  3345,  3347,  3349,\n+  3353,  3356,  3357,  3365,  3369,  3373,  3376,  3377,  3383,  3386,\n+  3389,  3391,  3395,  3400,  3403,  3413,  3418,  3419,  3426,  3429,\n+  3432,  3434,  3437,  3439,  3449,  3463,  3467,  3470,  3472,  3476,\n+  3480,  3483,  3486,  3488,  3492,  3494,  3501,  3508,  3511,  3515,\n+  3519,  3523,  3529,  3533,  3538,  3540,  3543,  3548,  3554,  3565,\n+  3568,  3570,  3574,  3582,  3585,  3589,  3592,  3594,  3596,  3602,\n+  3607,  3610,  3612,  3614,  3616,  3618,  3620,  3622,  3624,  3626,\n+  3628,  3630,  3632,  3634,  3636,  3638,  3640,  3642,  3644,  3646,\n+  3648,  3650,  3652,  3654,  3656,  3658,  3660,  3662,  3664,  3666,\n+  3668,  3670,  3672,  3675,  3677\n };\n #endif\n \n@@ -3940,7 +3939,7 @@ static const short yycheck[] = {     4,\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n #line 3 \"/usr/lib/bison.simple\"\n-/* This file comes from bison-1.27.  */\n+/* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -4153,7 +4152,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 216 \"/usr/lib/bison.simple\"\n+#line 217 \"/usr/lib/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -6440,91 +6439,93 @@ case 480:\n \t\t    {\n \t\t      yyval.ftype.t = yyvsp[0].ftype.t;\n \t\t      /* struct B: public A; is not accepted by the WP grammar.  */\n-\t\t      if (TYPE_BINFO_BASETYPES (yyval.ftype.t) && !TYPE_SIZE (yyval.ftype.t)\n+\t\t      if (CLASS_TYPE_P (yyval.ftype.t)\n+\t\t\t  && TYPE_BINFO_BASETYPES (yyval.ftype.t) \n+\t\t\t  && !TYPE_SIZE (yyval.ftype.t)\n \t\t\t  && ! TYPE_BEING_DEFINED (yyval.ftype.t))\n \t\t\tcp_error (\"base clause without member specification for `%#T'\",\n \t\t\t\t  yyval.ftype.t);\n \t\t    }\n \t\t;\n     break;}\n case 484:\n-#line 2143 \"parse.y\"\n+#line 2145 \"parse.y\"\n { if (pedantic && !in_system_header)\n \t\t    pedwarn (\"comma at end of enumerator list\"); ;\n     break;}\n case 486:\n-#line 2150 \"parse.y\"\n+#line 2152 \"parse.y\"\n { error (\"storage class specifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 487:\n-#line 2152 \"parse.y\"\n+#line 2154 \"parse.y\"\n { error (\"type specifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 488:\n-#line 2154 \"parse.y\"\n+#line 2156 \"parse.y\"\n { error (\"type qualifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;\n     break;}\n case 489:\n-#line 2156 \"parse.y\"\n+#line 2158 \"parse.y\"\n { error (\"no body nor ';' separates two class, struct or union declarations\"); ;\n     break;}\n case 490:\n-#line 2158 \"parse.y\"\n+#line 2160 \"parse.y\"\n { yyval.ttype = build_decl_list (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 491:\n-#line 2163 \"parse.y\"\n+#line 2165 \"parse.y\"\n { \n \t\t  current_aggr = yyvsp[-1].ttype; \n \t\t  yyval.ttype = yyvsp[0].ttype; \n \t\t;\n     break;}\n case 492:\n-#line 2171 \"parse.y\"\n+#line 2173 \"parse.y\"\n { current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 493:\n-#line 2173 \"parse.y\"\n+#line 2175 \"parse.y\"\n { yyungetc ('{', 1); ;\n     break;}\n case 494:\n-#line 2175 \"parse.y\"\n+#line 2177 \"parse.y\"\n { yyungetc (':', 1); ;\n     break;}\n case 495:\n-#line 2180 \"parse.y\"\n+#line 2182 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-2].ttype;\n \t\t  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = 1;\n \t\t;\n     break;}\n case 496:\n-#line 2186 \"parse.y\"\n+#line 2188 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-3].ttype;\n \t\t  yyval.ftype.t = handle_class_head (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = 1;\n \t\t;\n     break;}\n case 497:\n-#line 2192 \"parse.y\"\n+#line 2194 \"parse.y\"\n {\n \t\t  current_aggr = yyvsp[-2].ttype;\n \t\t  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = 1;\n \t\t;\n     break;}\n case 498:\n-#line 2198 \"parse.y\"\n+#line 2200 \"parse.y\"\n { \n \t\t  current_aggr = yyvsp[-1].ttype; \n \t\t  yyval.ftype.t = yyvsp[0].ttype;\n \t\t  yyval.ftype.new_type_flag = 0;\n \t\t;\n     break;}\n case 499:\n-#line 2204 \"parse.y\"\n+#line 2206 \"parse.y\"\n { \n \t\t  current_aggr = yyvsp[-2].ttype; \n \t\t  yyval.ftype.t = yyvsp[0].ttype;\n@@ -6534,18 +6535,18 @@ case 499:\n \t\t;\n     break;}\n case 500:\n-#line 2215 \"parse.y\"\n+#line 2217 \"parse.y\"\n { \n \t\t  yyval.ftype.t = xref_tag (current_aggr, yyvsp[0].ttype, 1); \n \t\t  yyval.ftype.new_type_flag = 0;\n \t\t;\n     break;}\n case 501:\n-#line 2220 \"parse.y\"\n+#line 2222 \"parse.y\"\n { yyval.ttype = xref_tag (current_aggr, yyvsp[0].ttype, 0); ;\n     break;}\n case 502:\n-#line 2224 \"parse.y\"\n+#line 2226 \"parse.y\"\n { \n \t\t  yyval.ftype.t = yyvsp[-1].ttype;\n \t\t  yyval.ftype.new_type_flag = 0;\n@@ -6554,7 +6555,7 @@ case 502:\n \t\t;\n     break;}\n case 503:\n-#line 2232 \"parse.y\"\n+#line 2234 \"parse.y\"\n { \n \t\t  if (yyvsp[-1].ftype.t != error_mark_node)\n \t\t    {\n@@ -6581,53 +6582,58 @@ case 503:\n \t\t;\n     break;}\n case 504:\n-#line 2260 \"parse.y\"\n+#line 2262 \"parse.y\"\n { yyval.ttype = xref_tag (yyval.ttype, make_anon_name (), 0);\n \t\t  yyungetc ('{', 1); ;\n     break;}\n case 505:\n-#line 2270 \"parse.y\"\n+#line 2272 \"parse.y\"\n {\n \t\t  yyval.ftype.t = yyvsp[0].ttype;\n \t\t  yyval.ftype.new_type_flag = 0;\n \t\t;\n     break;}\n case 507:\n-#line 2279 \"parse.y\"\n+#line 2281 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 508:\n-#line 2281 \"parse.y\"\n+#line 2283 \"parse.y\"\n { yyungetc(':', 1); yyval.ttype = NULL_TREE; ;\n     break;}\n case 509:\n-#line 2283 \"parse.y\"\n+#line 2285 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 511:\n-#line 2289 \"parse.y\"\n+#line 2291 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 512:\n-#line 2294 \"parse.y\"\n+#line 2296 \"parse.y\"\n { yyval.ttype = finish_base_specifier (access_default_node, yyvsp[0].ttype); ;\n     break;}\n case 513:\n-#line 2296 \"parse.y\"\n+#line 2298 \"parse.y\"\n { yyval.ttype = finish_base_specifier (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 514:\n-#line 2301 \"parse.y\"\n-{ if (yyval.ttype != error_mark_node) yyval.ttype = TYPE_MAIN_DECL (yyvsp[0].ttype); ;\n+#line 2303 \"parse.y\"\n+{ if (yyval.ttype == error_mark_node)\n+\t\t    ;\n+                  else if (!TYPE_P (yyval.ttype))\n+\t\t    yyval.ttype = error_mark_node;\n+\t\t  else \n+\t\t    yyval.ttype = TYPE_MAIN_DECL (yyvsp[0].ttype); ;\n     break;}\n case 517:\n-#line 2308 \"parse.y\"\n+#line 2315 \"parse.y\"\n { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])\n \t\t    cp_error (\"`%D' access\", yyvsp[-1].ttype);\n \t\t  yyval.ttype = access_default_virtual_node; ;\n     break;}\n case 518:\n-#line 2312 \"parse.y\"\n+#line 2319 \"parse.y\"\n {\n \t\t  if (yyvsp[-2].ttype != access_default_virtual_node)\n \t\t    error (\"multiple access specifiers\");\n@@ -6640,7 +6646,7 @@ case 518:\n \t\t;\n     break;}\n case 519:\n-#line 2323 \"parse.y\"\n+#line 2330 \"parse.y\"\n { if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])\n \t\t    cp_error (\"`%D' access\", yyvsp[-1].ttype);\n \t\t  else if (yyval.ttype == access_public_node)\n@@ -6654,55 +6660,55 @@ case 519:\n \t\t;\n     break;}\n case 524:\n-#line 2344 \"parse.y\"\n+#line 2351 \"parse.y\"\n {\n \t\t  current_access_specifier = yyvsp[-1].ttype;\n                 ;\n     break;}\n case 525:\n-#line 2353 \"parse.y\"\n+#line 2360 \"parse.y\"\n { \n \t\t  finish_member_declaration (yyvsp[0].ttype);\n \t\t;\n     break;}\n case 526:\n-#line 2357 \"parse.y\"\n+#line 2364 \"parse.y\"\n { \n \t\t  finish_member_declaration (yyvsp[0].ttype);\n \t\t;\n     break;}\n case 528:\n-#line 2365 \"parse.y\"\n+#line 2372 \"parse.y\"\n { error (\"missing ';' before right brace\");\n \t\t  yyungetc ('}', 0); ;\n     break;}\n case 529:\n-#line 2370 \"parse.y\"\n+#line 2377 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 530:\n-#line 2372 \"parse.y\"\n+#line 2379 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 531:\n-#line 2374 \"parse.y\"\n+#line 2381 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 532:\n-#line 2376 \"parse.y\"\n+#line 2383 \"parse.y\"\n { yyval.ttype = finish_method (yyval.ttype); ;\n     break;}\n case 533:\n-#line 2378 \"parse.y\"\n+#line 2385 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 534:\n-#line 2380 \"parse.y\"\n+#line 2387 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  pedantic = yyvsp[-1].itype; ;\n     break;}\n case 535:\n-#line 2383 \"parse.y\"\n+#line 2390 \"parse.y\"\n {  \n \t\t  if (yyvsp[0].ttype)\n \t\t    yyval.ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6714,14 +6720,14 @@ case 535:\n \t\t;\n     break;}\n case 536:\n-#line 2393 \"parse.y\"\n+#line 2400 \"parse.y\"\n { \n \t\t  yyval.ttype = finish_member_class_template (yyvsp[-1].ftype.t); \n \t\t  finish_template_decl (yyvsp[-2].ttype);\n \t\t;\n     break;}\n case 537:\n-#line 2404 \"parse.y\"\n+#line 2411 \"parse.y\"\n {\n \t\t  /* Most of the productions for component_decl only\n \t\t     allow the creation of one new member, so we call\n@@ -6744,53 +6750,53 @@ case 537:\n \t\t;\n     break;}\n case 538:\n-#line 2425 \"parse.y\"\n+#line 2432 \"parse.y\"\n { \n \t\t  if (!yyvsp[0].itype)\n \t\t    grok_x_components (yyvsp[-1].ttype);\n \t\t  yyval.ttype = NULL_TREE; \n \t\t;\n     break;}\n case 539:\n-#line 2431 \"parse.y\"\n+#line 2438 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 540:\n-#line 2434 \"parse.y\"\n+#line 2441 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 541:\n-#line 2437 \"parse.y\"\n+#line 2444 \"parse.y\"\n { yyval.ttype = grokbitfield (NULL_TREE, NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 542:\n-#line 2439 \"parse.y\"\n+#line 2446 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 543:\n-#line 2450 \"parse.y\"\n+#line 2457 \"parse.y\"\n { tree specs, attrs;\n \t\t  split_specs_attrs (yyvsp[-4].ttype, &specs, &attrs);\n \t\t  yyval.ttype = grokfield (yyvsp[-3].ttype, specs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, attrs)); ;\n     break;}\n case 544:\n-#line 2455 \"parse.y\"\n+#line 2462 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;\n     break;}\n case 545:\n-#line 2458 \"parse.y\"\n+#line 2465 \"parse.y\"\n { yyval.ttype = do_class_using_decl (yyvsp[0].ttype); ;\n     break;}\n case 546:\n-#line 2464 \"parse.y\"\n+#line 2471 \"parse.y\"\n { yyval.itype = 0; ;\n     break;}\n case 547:\n-#line 2466 \"parse.y\"\n+#line 2473 \"parse.y\"\n { \n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t\t    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6799,7 +6805,7 @@ case 547:\n \t\t;\n     break;}\n case 548:\n-#line 2473 \"parse.y\"\n+#line 2480 \"parse.y\"\n { \n \t\t  check_multiple_declarators ();\n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n@@ -6809,11 +6815,11 @@ case 548:\n \t\t;\n     break;}\n case 549:\n-#line 2484 \"parse.y\"\n+#line 2491 \"parse.y\"\n { yyval.itype = 0; ;\n     break;}\n case 550:\n-#line 2486 \"parse.y\"\n+#line 2493 \"parse.y\"\n { \n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t\t    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);\n@@ -6822,7 +6828,7 @@ case 550:\n \t\t;\n     break;}\n case 551:\n-#line 2493 \"parse.y\"\n+#line 2500 \"parse.y\"\n { \n \t\t  check_multiple_declarators ();\n \t\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n@@ -6832,98 +6838,98 @@ case 551:\n \t\t;\n     break;}\n case 556:\n-#line 2514 \"parse.y\"\n+#line 2521 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 557:\n-#line 2520 \"parse.y\"\n+#line 2527 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 558:\n-#line 2529 \"parse.y\"\n+#line 2536 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 559:\n-#line 2535 \"parse.y\"\n+#line 2542 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 560:\n-#line 2541 \"parse.y\"\n+#line 2548 \"parse.y\"\n { split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-4].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 561:\n-#line 2547 \"parse.y\"\n+#line 2554 \"parse.y\"\n { split_specs_attrs (yyvsp[-3].ttype, &current_declspecs,\n \t\t\t\t     &prefix_attributes);\n \t\t  yyvsp[-3].ttype = current_declspecs;\n \t\t  yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 562:\n-#line 2556 \"parse.y\"\n+#line 2563 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 563:\n-#line 2559 \"parse.y\"\n+#line 2566 \"parse.y\"\n { yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 564:\n-#line 2565 \"parse.y\"\n+#line 2572 \"parse.y\"\n { yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,\n \t\t\t\t  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;\n     break;}\n case 565:\n-#line 2568 \"parse.y\"\n+#line 2575 \"parse.y\"\n { yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 566:\n-#line 2571 \"parse.y\"\n+#line 2578 \"parse.y\"\n { yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 571:\n-#line 2591 \"parse.y\"\n+#line 2598 \"parse.y\"\n { build_enumerator (yyvsp[0].ttype, NULL_TREE, current_enum_type); ;\n     break;}\n case 572:\n-#line 2593 \"parse.y\"\n+#line 2600 \"parse.y\"\n { build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype, current_enum_type); ;\n     break;}\n case 573:\n-#line 2599 \"parse.y\"\n+#line 2606 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 574:\n-#line 2602 \"parse.y\"\n+#line 2609 \"parse.y\"\n { yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 575:\n-#line 2607 \"parse.y\"\n+#line 2614 \"parse.y\"\n {\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids array dimensions with parenthesized type in new\");\n@@ -6933,93 +6939,93 @@ case 575:\n \t\t;\n     break;}\n case 576:\n-#line 2618 \"parse.y\"\n+#line 2625 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 577:\n-#line 2620 \"parse.y\"\n+#line 2627 \"parse.y\"\n { yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 578:\n-#line 2625 \"parse.y\"\n+#line 2632 \"parse.y\"\n { yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 579:\n-#line 2628 \"parse.y\"\n+#line 2635 \"parse.y\"\n { yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ftype.t); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 580:\n-#line 2638 \"parse.y\"\n+#line 2645 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 581:\n-#line 2640 \"parse.y\"\n+#line 2647 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 582:\n-#line 2642 \"parse.y\"\n+#line 2649 \"parse.y\"\n { yyval.ttype = empty_parms (); ;\n     break;}\n case 583:\n-#line 2644 \"parse.y\"\n+#line 2651 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 585:\n-#line 2652 \"parse.y\"\n+#line 2659 \"parse.y\"\n {\n \t\t  /* Provide support for '(' attributes '*' declarator ')'\n \t\t     etc */\n \t\t  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);\n \t\t;\n     break;}\n case 586:\n-#line 2662 \"parse.y\"\n+#line 2669 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 587:\n-#line 2664 \"parse.y\"\n+#line 2671 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 588:\n-#line 2666 \"parse.y\"\n+#line 2673 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 589:\n-#line 2668 \"parse.y\"\n+#line 2675 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 590:\n-#line 2670 \"parse.y\"\n+#line 2677 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 592:\n-#line 2678 \"parse.y\"\n+#line 2685 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 593:\n-#line 2680 \"parse.y\"\n+#line 2687 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 594:\n-#line 2682 \"parse.y\"\n+#line 2689 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 595:\n-#line 2684 \"parse.y\"\n+#line 2691 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 596:\n-#line 2686 \"parse.y\"\n+#line 2693 \"parse.y\"\n { push_nested_class (yyvsp[-1].ttype, 3);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype);\n \t\t  TREE_COMPLEXITY (yyval.ttype) = current_class_depth; ;\n     break;}\n case 598:\n-#line 2694 \"parse.y\"\n+#line 2701 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    {\n@@ -7031,7 +7037,7 @@ case 598:\n \t\t;\n     break;}\n case 599:\n-#line 2704 \"parse.y\"\n+#line 2711 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);\n@@ -7041,139 +7047,139 @@ case 599:\n \t\t;\n     break;}\n case 602:\n-#line 2717 \"parse.y\"\n+#line 2724 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 603:\n-#line 2722 \"parse.y\"\n+#line 2729 \"parse.y\"\n { yyval.ttype = get_type_decl (yyvsp[0].ttype); ;\n     break;}\n case 605:\n-#line 2731 \"parse.y\"\n+#line 2738 \"parse.y\"\n {\n \t\t  /* Provide support for '(' attributes '*' declarator ')'\n \t\t     etc */\n \t\t  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);\n \t\t;\n     break;}\n case 606:\n-#line 2740 \"parse.y\"\n+#line 2747 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 607:\n-#line 2742 \"parse.y\"\n+#line 2749 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 608:\n-#line 2744 \"parse.y\"\n+#line 2751 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 609:\n-#line 2746 \"parse.y\"\n+#line 2753 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 610:\n-#line 2748 \"parse.y\"\n+#line 2755 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 612:\n-#line 2756 \"parse.y\"\n+#line 2763 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 613:\n-#line 2758 \"parse.y\"\n+#line 2765 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 614:\n-#line 2760 \"parse.y\"\n+#line 2767 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 615:\n-#line 2762 \"parse.y\"\n+#line 2769 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 616:\n-#line 2764 \"parse.y\"\n+#line 2771 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 618:\n-#line 2772 \"parse.y\"\n+#line 2779 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 619:\n-#line 2774 \"parse.y\"\n+#line 2781 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 620:\n-#line 2776 \"parse.y\"\n+#line 2783 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 621:\n-#line 2778 \"parse.y\"\n+#line 2785 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 622:\n-#line 2780 \"parse.y\"\n+#line 2787 \"parse.y\"\n { enter_scope_of (yyvsp[0].ttype); ;\n     break;}\n case 623:\n-#line 2782 \"parse.y\"\n+#line 2789 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  enter_scope_of (yyval.ttype);\n \t\t;\n     break;}\n case 624:\n-#line 2790 \"parse.y\"\n+#line 2797 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 625:\n-#line 2793 \"parse.y\"\n+#line 2800 \"parse.y\"\n { got_scope = NULL_TREE;\n  \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 626:\n-#line 2799 \"parse.y\"\n+#line 2806 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 627:\n-#line 2802 \"parse.y\"\n+#line 2809 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 629:\n-#line 2809 \"parse.y\"\n+#line 2816 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 630:\n-#line 2814 \"parse.y\"\n+#line 2821 \"parse.y\"\n { yyval.ttype = build_functional_cast (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 631:\n-#line 2816 \"parse.y\"\n+#line 2823 \"parse.y\"\n { yyval.ttype = reparse_decl_as_expr (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 632:\n-#line 2818 \"parse.y\"\n+#line 2825 \"parse.y\"\n { yyval.ttype = reparse_absdcl_as_expr (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 637:\n-#line 2829 \"parse.y\"\n+#line 2836 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 638:\n-#line 2831 \"parse.y\"\n+#line 2838 \"parse.y\"\n { got_scope = yyval.ttype \n \t\t    = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype, /*complain=*/1); ;\n     break;}\n case 639:\n-#line 2839 \"parse.y\"\n+#line 2846 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    {\n@@ -7185,31 +7191,31 @@ case 639:\n \t\t;\n     break;}\n case 640:\n-#line 2849 \"parse.y\"\n+#line 2856 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = TREE_TYPE (yyval.ttype);\n \t\t;\n     break;}\n case 641:\n-#line 2855 \"parse.y\"\n+#line 2862 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 642:\n-#line 2861 \"parse.y\"\n+#line 2868 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyvsp[-1].ttype)); ;\n     break;}\n case 644:\n-#line 2877 \"parse.y\"\n+#line 2884 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 645:\n-#line 2882 \"parse.y\"\n+#line 2889 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1);\n@@ -7224,26 +7230,26 @@ case 645:\n \t\t;\n     break;}\n case 646:\n-#line 2895 \"parse.y\"\n+#line 2902 \"parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[0].ttype); ;\n     break;}\n case 647:\n-#line 2897 \"parse.y\"\n+#line 2904 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1); ;\n     break;}\n case 648:\n-#line 2899 \"parse.y\"\n+#line 2906 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[0].ttype, /*complain=*/1); ;\n     break;}\n case 649:\n-#line 2904 \"parse.y\"\n+#line 2911 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    cp_error (\"`%T' is not a class or namespace\", yyvsp[0].ttype);\n \t\t;\n     break;}\n case 650:\n-#line 2909 \"parse.y\"\n+#line 2916 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype, /*complain=*/1);\n@@ -7258,17 +7264,17 @@ case 650:\n \t\t;\n     break;}\n case 651:\n-#line 2922 \"parse.y\"\n+#line 2929 \"parse.y\"\n { got_scope = yyval.ttype \n \t\t    = make_typename_type (yyvsp[-2].ttype, yyvsp[-1].ttype, /*complain=*/1); ;\n     break;}\n case 652:\n-#line 2925 \"parse.y\"\n+#line 2932 \"parse.y\"\n { got_scope = yyval.ttype \n \t\t    = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype, /*complain=*/1); ;\n     break;}\n case 653:\n-#line 2931 \"parse.y\"\n+#line 2938 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyvsp[-1].ttype = lastiddecl;\n@@ -7282,31 +7288,31 @@ case 653:\n \t\t;\n     break;}\n case 654:\n-#line 2943 \"parse.y\"\n+#line 2950 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype));\n \t\t;\n     break;}\n case 655:\n-#line 2949 \"parse.y\"\n+#line 2956 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype)); ;\n     break;}\n case 658:\n-#line 2953 \"parse.y\"\n+#line 2960 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 659:\n-#line 2962 \"parse.y\"\n+#line 2969 \"parse.y\"\n { yyval.ttype = build_min_nt (TEMPLATE_ID_EXPR, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 660:\n-#line 2967 \"parse.y\"\n+#line 2974 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);\n@@ -7316,156 +7322,156 @@ case 660:\n \t\t;\n     break;}\n case 662:\n-#line 2976 \"parse.y\"\n+#line 2983 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 663:\n-#line 2981 \"parse.y\"\n+#line 2988 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 664:\n-#line 2983 \"parse.y\"\n+#line 2990 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; got_scope = NULL_TREE; ;\n     break;}\n case 665:\n-#line 2990 \"parse.y\"\n+#line 2997 \"parse.y\"\n { got_scope = void_type_node; ;\n     break;}\n case 666:\n-#line 2996 \"parse.y\"\n+#line 3003 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 667:\n-#line 2998 \"parse.y\"\n+#line 3005 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 668:\n-#line 3000 \"parse.y\"\n+#line 3007 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 669:\n-#line 3002 \"parse.y\"\n+#line 3009 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 670:\n-#line 3004 \"parse.y\"\n+#line 3011 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 671:\n-#line 3008 \"parse.y\"\n+#line 3015 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 673:\n-#line 3017 \"parse.y\"\n+#line 3024 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 674:\n-#line 3019 \"parse.y\"\n+#line 3026 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 676:\n-#line 3025 \"parse.y\"\n+#line 3032 \"parse.y\"\n {\n \t\t  /* Provide support for '(' attributes '*' declarator ')'\n \t\t     etc */\n \t\t  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);\n \t\t;\n     break;}\n case 677:\n-#line 3035 \"parse.y\"\n+#line 3042 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 678:\n-#line 3037 \"parse.y\"\n+#line 3044 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 679:\n-#line 3039 \"parse.y\"\n+#line 3046 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 680:\n-#line 3041 \"parse.y\"\n+#line 3048 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 681:\n-#line 3043 \"parse.y\"\n+#line 3050 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 682:\n-#line 3045 \"parse.y\"\n+#line 3052 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 683:\n-#line 3047 \"parse.y\"\n+#line 3054 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 684:\n-#line 3049 \"parse.y\"\n+#line 3056 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 685:\n-#line 3051 \"parse.y\"\n+#line 3058 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 686:\n-#line 3055 \"parse.y\"\n+#line 3062 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 688:\n-#line 3064 \"parse.y\"\n+#line 3071 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 689:\n-#line 3067 \"parse.y\"\n+#line 3074 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 690:\n-#line 3069 \"parse.y\"\n+#line 3076 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 691:\n-#line 3071 \"parse.y\"\n+#line 3078 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 692:\n-#line 3073 \"parse.y\"\n+#line 3080 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 693:\n-#line 3075 \"parse.y\"\n+#line 3082 \"parse.y\"\n { yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 694:\n-#line 3077 \"parse.y\"\n+#line 3084 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 695:\n-#line 3079 \"parse.y\"\n+#line 3086 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 696:\n-#line 3081 \"parse.y\"\n+#line 3088 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 697:\n-#line 3083 \"parse.y\"\n+#line 3090 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 704:\n-#line 3106 \"parse.y\"\n+#line 3113 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids label declarations\"); ;\n     break;}\n case 707:\n-#line 3117 \"parse.y\"\n+#line 3124 \"parse.y\"\n { \n \t\t  while (yyvsp[-1].ttype)\n \t\t    {\n@@ -7475,352 +7481,352 @@ case 707:\n \t\t;\n     break;}\n case 708:\n-#line 3130 \"parse.y\"\n+#line 3137 \"parse.y\"\n {;\n     break;}\n case 710:\n-#line 3136 \"parse.y\"\n+#line 3143 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 711:\n-#line 3138 \"parse.y\"\n+#line 3145 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 712:\n-#line 3143 \"parse.y\"\n+#line 3150 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_if_stmt ();\n \t\t  cond_stmt_keyword = \"if\";\n \t\t;\n     break;}\n case 713:\n-#line 3148 \"parse.y\"\n+#line 3155 \"parse.y\"\n { finish_if_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 714:\n-#line 3150 \"parse.y\"\n+#line 3157 \"parse.y\"\n { yyval.ttype = finish_then_clause (yyvsp[-3].ttype); ;\n     break;}\n case 716:\n-#line 3155 \"parse.y\"\n+#line 3162 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 717:\n-#line 3157 \"parse.y\"\n+#line 3164 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 718:\n-#line 3162 \"parse.y\"\n+#line 3169 \"parse.y\"\n {;\n     break;}\n case 720:\n-#line 3168 \"parse.y\"\n+#line 3175 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 721:\n-#line 3170 \"parse.y\"\n+#line 3177 \"parse.y\"\n { finish_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 722:\n-#line 3172 \"parse.y\"\n+#line 3179 \"parse.y\"\n { begin_else_clause (); ;\n     break;}\n case 723:\n-#line 3174 \"parse.y\"\n+#line 3181 \"parse.y\"\n { \n \t\t  finish_else_clause (yyvsp[-3].ttype); \n \t\t  finish_if_stmt ();\n \t\t;\n     break;}\n case 724:\n-#line 3179 \"parse.y\"\n+#line 3186 \"parse.y\"\n { finish_if_stmt (); ;\n     break;}\n case 725:\n-#line 3181 \"parse.y\"\n+#line 3188 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_while_stmt ();\n \t\t  cond_stmt_keyword = \"while\";\n \t\t;\n     break;}\n case 726:\n-#line 3186 \"parse.y\"\n+#line 3193 \"parse.y\"\n { finish_while_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 727:\n-#line 3188 \"parse.y\"\n+#line 3195 \"parse.y\"\n { finish_while_stmt (yyvsp[-3].ttype); ;\n     break;}\n case 728:\n-#line 3190 \"parse.y\"\n+#line 3197 \"parse.y\"\n { yyval.ttype = begin_do_stmt (); ;\n     break;}\n case 729:\n-#line 3192 \"parse.y\"\n+#line 3199 \"parse.y\"\n {\n \t\t  finish_do_body (yyvsp[-2].ttype);\n \t\t  cond_stmt_keyword = \"do\";\n \t\t;\n     break;}\n case 730:\n-#line 3197 \"parse.y\"\n+#line 3204 \"parse.y\"\n { finish_do_stmt (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 731:\n-#line 3199 \"parse.y\"\n+#line 3206 \"parse.y\"\n { yyval.ttype = begin_for_stmt (); ;\n     break;}\n case 732:\n-#line 3201 \"parse.y\"\n+#line 3208 \"parse.y\"\n { finish_for_init_stmt (yyvsp[-2].ttype); ;\n     break;}\n case 733:\n-#line 3203 \"parse.y\"\n+#line 3210 \"parse.y\"\n { finish_for_cond (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 734:\n-#line 3205 \"parse.y\"\n+#line 3212 \"parse.y\"\n { finish_for_expr (yyvsp[-1].ttype, yyvsp[-8].ttype); ;\n     break;}\n case 735:\n-#line 3207 \"parse.y\"\n+#line 3214 \"parse.y\"\n { finish_for_stmt (yyvsp[-3].ttype, yyvsp[-10].ttype); ;\n     break;}\n case 736:\n-#line 3209 \"parse.y\"\n+#line 3216 \"parse.y\"\n { yyval.ttype = begin_switch_stmt (); ;\n     break;}\n case 737:\n-#line 3211 \"parse.y\"\n+#line 3218 \"parse.y\"\n { finish_switch_cond (yyvsp[-1].ttype, yyvsp[-3].ttype); ;\n     break;}\n case 738:\n-#line 3213 \"parse.y\"\n+#line 3220 \"parse.y\"\n { finish_switch_stmt (yyvsp[-3].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 739:\n-#line 3215 \"parse.y\"\n+#line 3222 \"parse.y\"\n { finish_case_label (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 741:\n-#line 3218 \"parse.y\"\n+#line 3225 \"parse.y\"\n { finish_case_label (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 743:\n-#line 3221 \"parse.y\"\n+#line 3228 \"parse.y\"\n { finish_case_label (NULL_TREE, NULL_TREE); ;\n     break;}\n case 745:\n-#line 3224 \"parse.y\"\n+#line 3231 \"parse.y\"\n { finish_break_stmt (); ;\n     break;}\n case 746:\n-#line 3226 \"parse.y\"\n+#line 3233 \"parse.y\"\n { finish_continue_stmt (); ;\n     break;}\n case 747:\n-#line 3228 \"parse.y\"\n+#line 3235 \"parse.y\"\n { finish_return_stmt (NULL_TREE); ;\n     break;}\n case 748:\n-#line 3230 \"parse.y\"\n+#line 3237 \"parse.y\"\n { finish_return_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 749:\n-#line 3232 \"parse.y\"\n+#line 3239 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 750:\n-#line 3238 \"parse.y\"\n+#line 3245 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 751:\n-#line 3244 \"parse.y\"\n+#line 3251 \"parse.y\"\n { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 752:\n-#line 3248 \"parse.y\"\n+#line 3255 \"parse.y\"\n { finish_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 753:\n-#line 3250 \"parse.y\"\n+#line 3257 \"parse.y\"\n { \n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids computed gotos\");\n \t\t  finish_goto_stmt (yyvsp[-1].ttype);\n \t\t;\n     break;}\n case 754:\n-#line 3256 \"parse.y\"\n+#line 3263 \"parse.y\"\n { finish_goto_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 756:\n-#line 3259 \"parse.y\"\n+#line 3266 \"parse.y\"\n { error (\"label must be followed by statement\");\n \t\t  yyungetc ('}', 0); ;\n     break;}\n case 757:\n-#line 3262 \"parse.y\"\n+#line 3269 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 760:\n-#line 3266 \"parse.y\"\n+#line 3273 \"parse.y\"\n { do_local_using_decl (yyvsp[0].ttype); ;\n     break;}\n case 762:\n-#line 3272 \"parse.y\"\n+#line 3279 \"parse.y\"\n { yyval.ttype = begin_function_try_block (); ;\n     break;}\n case 763:\n-#line 3274 \"parse.y\"\n+#line 3281 \"parse.y\"\n { finish_function_try_block (yyvsp[-2].ttype); ;\n     break;}\n case 764:\n-#line 3276 \"parse.y\"\n+#line 3283 \"parse.y\"\n {\n \t\t  finish_function_handler_sequence (yyvsp[-4].ttype);\n \t\t  yyval.itype = yyvsp[-3].itype;\n \t\t;\n     break;}\n case 765:\n-#line 3284 \"parse.y\"\n+#line 3291 \"parse.y\"\n { yyval.ttype = begin_try_block (); ;\n     break;}\n case 766:\n-#line 3286 \"parse.y\"\n+#line 3293 \"parse.y\"\n { finish_try_block (yyvsp[-1].ttype); ;\n     break;}\n case 767:\n-#line 3288 \"parse.y\"\n+#line 3295 \"parse.y\"\n { finish_handler_sequence (yyvsp[-3].ttype); ;\n     break;}\n case 770:\n-#line 3298 \"parse.y\"\n+#line 3305 \"parse.y\"\n { yyval.ttype = begin_handler(); ;\n     break;}\n case 771:\n-#line 3300 \"parse.y\"\n+#line 3307 \"parse.y\"\n { yyval.ttype = finish_handler_parms (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 772:\n-#line 3302 \"parse.y\"\n+#line 3309 \"parse.y\"\n { finish_handler (yyvsp[-1].ttype, yyvsp[-3].ttype); ;\n     break;}\n case 775:\n-#line 3312 \"parse.y\"\n+#line 3319 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 776:\n-#line 3328 \"parse.y\"\n+#line 3335 \"parse.y\"\n { \n \t\t  check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = start_handler_parms (TREE_PURPOSE (yyvsp[-1].ftype.t),\n \t\t\t\t\t    TREE_VALUE (yyvsp[-1].ftype.t));\n \t\t;\n     break;}\n case 777:\n-#line 3337 \"parse.y\"\n+#line 3344 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 778:\n-#line 3339 \"parse.y\"\n+#line 3346 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 779:\n-#line 3341 \"parse.y\"\n+#line 3348 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 780:\n-#line 3343 \"parse.y\"\n+#line 3350 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 781:\n-#line 3348 \"parse.y\"\n+#line 3355 \"parse.y\"\n { finish_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 783:\n-#line 3351 \"parse.y\"\n+#line 3358 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids compound statements inside for initializations\");\n \t\t;\n     break;}\n case 784:\n-#line 3360 \"parse.y\"\n+#line 3367 \"parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 785:\n-#line 3363 \"parse.y\"\n+#line 3370 \"parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 786:\n-#line 3368 \"parse.y\"\n+#line 3375 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 788:\n-#line 3371 \"parse.y\"\n+#line 3378 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 789:\n-#line 3378 \"parse.y\"\n+#line 3385 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 792:\n-#line 3385 \"parse.y\"\n+#line 3392 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 793:\n-#line 3390 \"parse.y\"\n+#line 3397 \"parse.y\"\n { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 794:\n-#line 3395 \"parse.y\"\n+#line 3402 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;\n     break;}\n case 795:\n-#line 3397 \"parse.y\"\n+#line 3404 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 796:\n-#line 3408 \"parse.y\"\n+#line 3415 \"parse.y\"\n {\n \t\t  yyval.ttype = empty_parms();\n \t\t;\n     break;}\n case 798:\n-#line 3413 \"parse.y\"\n+#line 3420 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);\n \t\t  check_for_new_type (\"inside parameter list\", yyvsp[0].ftype); ;\n     break;}\n case 799:\n-#line 3421 \"parse.y\"\n+#line 3428 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;\n     break;}\n case 800:\n-#line 3423 \"parse.y\"\n+#line 3430 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 801:\n-#line 3426 \"parse.y\"\n+#line 3433 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 802:\n-#line 3428 \"parse.y\"\n+#line 3435 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t yyvsp[-1].ftype.t), 1); ;\n     break;}\n case 803:\n-#line 3431 \"parse.y\"\n+#line 3438 \"parse.y\"\n { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;\n     break;}\n case 804:\n-#line 3433 \"parse.y\"\n+#line 3440 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7832,7 +7838,7 @@ case 804:\n \t\t;\n     break;}\n case 805:\n-#line 3443 \"parse.y\"\n+#line 3450 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7845,99 +7851,99 @@ case 805:\n \t\t;\n     break;}\n case 806:\n-#line 3458 \"parse.y\"\n+#line 3465 \"parse.y\"\n { maybe_snarf_defarg (); ;\n     break;}\n case 807:\n-#line 3460 \"parse.y\"\n+#line 3467 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 810:\n-#line 3471 \"parse.y\"\n+#line 3478 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 811:\n-#line 3474 \"parse.y\"\n+#line 3481 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;\n     break;}\n case 812:\n-#line 3477 \"parse.y\"\n+#line 3484 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;\n     break;}\n case 813:\n-#line 3480 \"parse.y\"\n+#line 3487 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 814:\n-#line 3482 \"parse.y\"\n+#line 3489 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 816:\n-#line 3488 \"parse.y\"\n+#line 3495 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;\n     break;}\n case 817:\n-#line 3498 \"parse.y\"\n+#line 3505 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;\n     break;}\n case 818:\n-#line 3502 \"parse.y\"\n+#line 3509 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 819:\n-#line 3505 \"parse.y\"\n+#line 3512 \"parse.y\"\n { yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),\n \t\t\t\t\t  yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 820:\n-#line 3509 \"parse.y\"\n+#line 3516 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 821:\n-#line 3513 \"parse.y\"\n+#line 3520 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[0].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 822:\n-#line 3517 \"parse.y\"\n+#line 3524 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ttype);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 823:\n-#line 3524 \"parse.y\"\n+#line 3531 \"parse.y\"\n { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 824:\n-#line 3527 \"parse.y\"\n+#line 3534 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;\n     break;}\n case 827:\n-#line 3538 \"parse.y\"\n+#line 3545 \"parse.y\"\n { see_typename (); ;\n     break;}\n case 828:\n-#line 3543 \"parse.y\"\n+#line 3550 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);\n \t\t;\n     break;}\n case 829:\n-#line 3548 \"parse.y\"\n+#line 3555 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  if (TREE_CODE (yyval.ttype) == SCOPE_REF\n@@ -7948,197 +7954,197 @@ case 829:\n \t\t;\n     break;}\n case 830:\n-#line 3560 \"parse.y\"\n+#line 3567 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 831:\n-#line 3562 \"parse.y\"\n+#line 3569 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 832:\n-#line 3564 \"parse.y\"\n+#line 3571 \"parse.y\"\n { yyval.ttype = empty_except_spec; ;\n     break;}\n case 833:\n-#line 3569 \"parse.y\"\n+#line 3576 \"parse.y\"\n {\n \t\t  check_for_new_type (\"exception specifier\", yyvsp[0].ftype);\n \t\t  yyval.ttype = groktypename (yyvsp[0].ftype.t);\n \t\t;\n     break;}\n case 834:\n-#line 3577 \"parse.y\"\n+#line 3584 \"parse.y\"\n { yyval.ttype = add_exception_specifier (NULL_TREE, yyvsp[0].ttype, 1); ;\n     break;}\n case 835:\n-#line 3579 \"parse.y\"\n+#line 3586 \"parse.y\"\n { yyval.ttype = add_exception_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, 1); ;\n     break;}\n case 836:\n-#line 3584 \"parse.y\"\n+#line 3591 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 837:\n-#line 3586 \"parse.y\"\n+#line 3593 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 838:\n-#line 3588 \"parse.y\"\n+#line 3595 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 839:\n-#line 3590 \"parse.y\"\n+#line 3597 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 840:\n-#line 3597 \"parse.y\"\n+#line 3604 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 841:\n-#line 3602 \"parse.y\"\n+#line 3609 \"parse.y\"\n { yyval.ttype = ansi_opname[MULT_EXPR]; ;\n     break;}\n case 842:\n-#line 3604 \"parse.y\"\n+#line 3611 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;\n     break;}\n case 843:\n-#line 3606 \"parse.y\"\n+#line 3613 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;\n     break;}\n case 844:\n-#line 3608 \"parse.y\"\n+#line 3615 \"parse.y\"\n { yyval.ttype = ansi_opname[PLUS_EXPR]; ;\n     break;}\n case 845:\n-#line 3610 \"parse.y\"\n+#line 3617 \"parse.y\"\n { yyval.ttype = ansi_opname[MINUS_EXPR]; ;\n     break;}\n case 846:\n-#line 3612 \"parse.y\"\n+#line 3619 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;\n     break;}\n case 847:\n-#line 3614 \"parse.y\"\n+#line 3621 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;\n     break;}\n case 848:\n-#line 3616 \"parse.y\"\n+#line 3623 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;\n     break;}\n case 849:\n-#line 3618 \"parse.y\"\n+#line 3625 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;\n     break;}\n case 850:\n-#line 3620 \"parse.y\"\n+#line 3627 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;\n     break;}\n case 851:\n-#line 3622 \"parse.y\"\n+#line 3629 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 852:\n-#line 3624 \"parse.y\"\n+#line 3631 \"parse.y\"\n { yyval.ttype = ansi_opname[LT_EXPR]; ;\n     break;}\n case 853:\n-#line 3626 \"parse.y\"\n+#line 3633 \"parse.y\"\n { yyval.ttype = ansi_opname[GT_EXPR]; ;\n     break;}\n case 854:\n-#line 3628 \"parse.y\"\n+#line 3635 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 855:\n-#line 3630 \"parse.y\"\n+#line 3637 \"parse.y\"\n { yyval.ttype = ansi_assopname[yyvsp[0].code]; ;\n     break;}\n case 856:\n-#line 3632 \"parse.y\"\n+#line 3639 \"parse.y\"\n { yyval.ttype = ansi_opname [MODIFY_EXPR]; ;\n     break;}\n case 857:\n-#line 3634 \"parse.y\"\n+#line 3641 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 858:\n-#line 3636 \"parse.y\"\n+#line 3643 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 859:\n-#line 3638 \"parse.y\"\n+#line 3645 \"parse.y\"\n { yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;\n     break;}\n case 860:\n-#line 3640 \"parse.y\"\n+#line 3647 \"parse.y\"\n { yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;\n     break;}\n case 861:\n-#line 3642 \"parse.y\"\n+#line 3649 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;\n     break;}\n case 862:\n-#line 3644 \"parse.y\"\n+#line 3651 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;\n     break;}\n case 863:\n-#line 3646 \"parse.y\"\n+#line 3653 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;\n     break;}\n case 864:\n-#line 3648 \"parse.y\"\n+#line 3655 \"parse.y\"\n { yyval.ttype = ansi_opname[COND_EXPR]; ;\n     break;}\n case 865:\n-#line 3650 \"parse.y\"\n+#line 3657 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 866:\n-#line 3652 \"parse.y\"\n+#line 3659 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPONENT_REF]; ;\n     break;}\n case 867:\n-#line 3654 \"parse.y\"\n+#line 3661 \"parse.y\"\n { yyval.ttype = ansi_opname[MEMBER_REF]; ;\n     break;}\n case 868:\n-#line 3656 \"parse.y\"\n+#line 3663 \"parse.y\"\n { yyval.ttype = ansi_opname[CALL_EXPR]; ;\n     break;}\n case 869:\n-#line 3658 \"parse.y\"\n+#line 3665 \"parse.y\"\n { yyval.ttype = ansi_opname[ARRAY_REF]; ;\n     break;}\n case 870:\n-#line 3660 \"parse.y\"\n+#line 3667 \"parse.y\"\n { yyval.ttype = ansi_opname[NEW_EXPR]; ;\n     break;}\n case 871:\n-#line 3662 \"parse.y\"\n+#line 3669 \"parse.y\"\n { yyval.ttype = ansi_opname[DELETE_EXPR]; ;\n     break;}\n case 872:\n-#line 3664 \"parse.y\"\n+#line 3671 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;\n     break;}\n case 873:\n-#line 3666 \"parse.y\"\n+#line 3673 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;\n     break;}\n case 874:\n-#line 3669 \"parse.y\"\n+#line 3676 \"parse.y\"\n { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 875:\n-#line 3671 \"parse.y\"\n+#line 3678 \"parse.y\"\n { yyval.ttype = ansi_opname[ERROR_MARK]; ;\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 542 \"/usr/lib/bison.simple\"\n+#line 543 \"/usr/lib/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -8358,7 +8364,7 @@ case 875:\n     }\n   return 1;\n }\n-#line 3674 \"parse.y\"\n+#line 3681 \"parse.y\"\n \n \n #ifdef SPEW_DEBUG"}, {"sha": "7360eaaeaa15b311efc14f476699b6bc10b12e82", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,5 +1,5 @@\n /* YACC parser for C++ syntax.\n-   Copyright (C) 1988, 89, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 89, 93-98, 1999, 2000 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -2124,7 +2124,9 @@ structsp:\n \t\t    {\n \t\t      $$.t = $1.t;\n \t\t      /* struct B: public A; is not accepted by the WP grammar.  */\n-\t\t      if (TYPE_BINFO_BASETYPES ($$.t) && !TYPE_SIZE ($$.t)\n+\t\t      if (CLASS_TYPE_P ($$.t)\n+\t\t\t  && TYPE_BINFO_BASETYPES ($$.t) \n+\t\t\t  && !TYPE_SIZE ($$.t)\n \t\t\t  && ! TYPE_BEING_DEFINED ($$.t))\n \t\t\tcp_error (\"base clause without member specification for `%#T'\",\n \t\t\t\t  $$.t);\n@@ -2298,7 +2300,12 @@ base_class:\n \n base_class.1:\n \t  typename_sub\n-\t\t{ if ($$ != error_mark_node) $$ = TYPE_MAIN_DECL ($1); }\n+\t\t{ if ($$ == error_mark_node)\n+\t\t    ;\n+                  else if (!TYPE_P ($$))\n+\t\t    $$ = error_mark_node;\n+\t\t  else \n+\t\t    $$ = TYPE_MAIN_DECL ($1); }\n \t| nonnested_type\n \t;\n "}, {"sha": "eb0ffd1ad58f7e8f0051671783a2a64edee483ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1,5 +1,5 @@\n /* Handle parameterized types (templates) for GNU C++.\n-   Copyright (C) 1992, 93-97, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-97, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com) while at Watchmaker Computing.\n    Rewritten by Jason Merrill (jason@cygnus.com).\n \n@@ -197,6 +197,8 @@ finish_member_template_decl (decl)\n \t}\n       return NULL_TREE;\n     }\n+  else if (TREE_CODE (decl) == FIELD_DECL)\n+    cp_error (\"data member `%D' cannot be a member template\", decl);\n   else if (DECL_TEMPLATE_INFO (decl))\n     {\n       if (!DECL_TEMPLATE_SPECIALIZATION (decl))\n@@ -6214,7 +6216,9 @@ tsubst (t, args, complain, in_decl)\n \t    if (pedantic)\n \t      pedwarn (\"creating array with size zero\");\n \t  }\n-\telse if (integer_zerop (max) || INT_CST_LT (max, integer_zero_node))\n+\telse if (integer_zerop (max) \n+\t\t || (TREE_CODE (max) == INTEGER_CST \n+\t\t     && INT_CST_LT (max, integer_zero_node)))\n \t  {\n \t    /* [temp.deduct]\n "}, {"sha": "13b090abad7a9c80c214c610d21cadb387696917", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c88314a39910d41df1407040bb20022e815a0d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07c88314a39910d41df1407040bb20022e815a0d", "patch": "@@ -1705,6 +1705,9 @@ decay_conversion (exp)\n       code = TREE_CODE (type);\n     }\n \n+  if (type == error_mark_node)\n+    return error_mark_node;\n+\n   /* Constants can be used directly unless they're not loadable.  */\n   if (TREE_CODE (exp) == CONST_DECL)\n     exp = DECL_INITIAL (exp);"}]}