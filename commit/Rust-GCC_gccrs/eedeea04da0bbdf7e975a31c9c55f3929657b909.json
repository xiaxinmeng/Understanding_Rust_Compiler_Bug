{"sha": "eedeea04da0bbdf7e975a31c9c55f3929657b909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkZWVhMDRkYTBiYmRmN2U5NzVhMzFjOWM1NWYzOTI5NjU3YjkwOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-01-18T12:54:11Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-01-18T12:54:11Z"}, "message": "re PR libfortran/29649 (Force core dump on runtime library errors)\n\n2007-01-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n            Tobias Burnus  <burnus@net-b.de>\n\n       PR libfortran/29649\n       * gfortran.h (gfc_option_t): Add flag_dump_core.\n       * lang.opt: Add -fdump-core option.\n       * invoke.texi: Document the new options.\n       * trans-decl.c (gfc_build_builtin_function_decls): Add new\n         options to the call to set_std.\n       * options.c (gfc_init_options, gfc_handle_option): Set the\n         new options.\n\n2007-01-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n            Tobias Burnus  <burnus@net-b.de>\n\n       PR libfortran/29649\n       * runtime/environ.c (variable_table): New GFORTRAN_ERROR_DUMPCORE\n         environment variable.\n       * runtime/compile_options.c (set_std): Add new argument.\n       * runtime/error.c (sys_exit): Move from io/unix.c. Add coredump functionality.\n       * libgfortran.h (options_t): New dump_core and backtrace members.\n         (sys_exit): Move prototype.\n       * io/unix.c (sys_exit): Move to runtime/error.c.\n       * configure.ac: Add check for getrlimit.\n       * configure: Regenerate.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r120897", "tree": {"sha": "35528f51b61de752d5ace70f20f9840ecaf371df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35528f51b61de752d5ace70f20f9840ecaf371df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eedeea04da0bbdf7e975a31c9c55f3929657b909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedeea04da0bbdf7e975a31c9c55f3929657b909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedeea04da0bbdf7e975a31c9c55f3929657b909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedeea04da0bbdf7e975a31c9c55f3929657b909/comments", "author": null, "committer": null, "parents": [{"sha": "9521dd6bd14f4915eecc79f886b805d3e1eb1ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9521dd6bd14f4915eecc79f886b805d3e1eb1ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9521dd6bd14f4915eecc79f886b805d3e1eb1ff7"}], "stats": {"total": 150, "additions": 131, "deletions": 19}, "files": [{"sha": "55c5ecedf92a00dc1d6434f32e02e17f265abd19", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -1,3 +1,15 @@\n+2007-01-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR libfortran/29649\n+\t* gfortran.h (gfc_option_t): Add flag_dump_core.\n+\t* lang.opt: Add -fdump-core option.\n+\t* invoke.texi: Document the new options.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Add new\n+\t  options to the call to set_std.\n+\t* options.c (gfc_init_options, gfc_handle_option): Set the\n+\t  new options.\n+\n 2007-01-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30476"}, {"sha": "64739fbd2764a3c7251ed222091b7f8985a67798", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -1656,6 +1656,7 @@ typedef struct\n   int flag_f2c;\n   int flag_automatic;\n   int flag_backslash;\n+  int flag_dump_core;\n   int flag_external_blas;\n   int blas_matmul_limit;\n   int flag_cray_pointer;"}, {"sha": "9a9a00866110bc42e438f37ccde34c750f3ae587", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -121,7 +121,7 @@ by type.  Explanations are in the following sections.\n -ffixed-line-length-@var{n}  -ffixed-line-length-none @gol\n -ffree-line-length-@var{n}  -ffree-line-length-none @gol\n -fdefault-double-8  -fdefault-integer-8  -fdefault-real-8 @gol\n--fcray-pointer  -fopenmp  -frange-check }\n+-fcray-pointer  -fopenmp  -frange-check -fno-backslash }\n \n @item Error and Warning Options\n @xref{Error and Warning Options,,Options to Request or Suppress Errors\n@@ -134,7 +134,8 @@ and Warnings}.\n \n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n-@gccoptlist{-fdump-parse-tree  -ffpe-trap=@var{list}}\n+@gccoptlist{-fdump-parse-tree  -ffpe-trap=@var{list}\n+-fdump-core}\n \n @item Directory Options\n @xref{Directory Options,,Options for Directory Search}.\n@@ -559,6 +560,15 @@ zero), @samp{overflow} (overflow in a floating point operation),\n @samp{underflow} (underflow in a floating point operation),\n @samp{precision} (loss of precision during operation) and @samp{denormal}\n (operation produced a denormal value).\n+\n+@cindex -fdump-core option\n+@cindex options, -fdump-core\n+@item -fdump-core\n+@cindex core\n+Request that a core-dump file is written to disk when a runtime error\n+is encountered on systems that support core dumps. This option is\n+only effective for the compilation of the Fortran main program.\n+\n @end table\n \n @xref{Debugging Options,,Options for Debugging Your Program or GCC,"}, {"sha": "2991f7f7bda81ddea81fa6ab626d2cdefe31bd46", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -137,6 +137,10 @@ fdollar-ok\n Fortran\n Allow dollar signs in entity names\n \n+fdump-core\n+Fortran\n+Dump a core file when a runtime error occurs\n+\n fdump-parse-tree\n Fortran\n Display the code tree after parsing"}, {"sha": "cd937da8751e48053e039e980dc083442a16f71c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -84,6 +84,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_preprocessed = 0;\n   gfc_option.flag_automatic = 1;\n   gfc_option.flag_backslash = 1;\n+  gfc_option.flag_dump_core = 0;\n   gfc_option.flag_external_blas = 0;\n   gfc_option.blas_matmul_limit = 30;\n   gfc_option.flag_cray_pointer = 0;\n@@ -451,6 +452,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_backslash = value;\n       break;\n       \n+    case OPT_fdump_core:\n+      gfc_option.flag_dump_core = value;\n+      break;\n+\n     case OPT_fcray_pointer:\n       gfc_option.flag_cray_pointer = value;\n       break;"}, {"sha": "000772c2090785578c8db1cdbb4a474fef79e577", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -2375,7 +2375,8 @@ gfc_build_builtin_function_decls (void)\n   gfor_fndecl_set_std =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_std\")),\n \t\t\t\t    void_type_node,\n-\t\t\t\t    3,\n+\t\t\t\t    4,\n+\t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node,\n \t\t\t\t    gfc_int4_type_node);\n@@ -3143,6 +3144,10 @@ gfc_generate_function_code (gfc_namespace * ns)\n       arglist = gfc_chainon_list (arglist,\n \t\t\t\t  build_int_cst (gfc_int4_type_node,\n \t\t\t\t\t\t pedantic));\n+      arglist = gfc_chainon_list (arglist,\n+\t\t\t\t  build_int_cst (gfc_int4_type_node,\n+\t\t\t\t\t\t gfc_option.flag_dump_core));\n+\n       tmp = build_function_call_expr (gfor_fndecl_set_std, arglist);\n       gfc_add_expr_to_block (&body, tmp);\n     }"}, {"sha": "5295968fc4ba071bf3e87712b4ed11e27bd077f7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -1,3 +1,17 @@\n+2007-01-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR libfortran/29649\n+\t* runtime/environ.c (variable_table): New GFORTRAN_ERROR_DUMPCORE\n+\t  environment variable.\n+\t* runtime/compile_options.c (set_std): Add new argument.\n+\t* runtime/error.c (sys_exit): Move from io/unix.c. Add coredump functionality.\n+\t* libgfortran.h (options_t): New dump_core and backtrace members.\n+\t  (sys_exit): Move prototype.\n+\t* io/unix.c (sys_exit): Move to runtime/error.c.\n+\t* configure.ac: Add check for getrlimit.\n+\t* configure: Regenerate.\n+\n 2007-01-17  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgfortran/27107:"}, {"sha": "30b3eb29c7ad1467562ce6727037c95ee1cb0959", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -10270,7 +10270,8 @@ done\n \n \n \n-for ac_func in wait setmode\n+\n+for ac_func in wait setmode getrlimit\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "d97360f3275bfdad5fad0332f2ecebae5f18dc58", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -171,7 +171,7 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n-AC_CHECK_FUNCS(wait setmode)\n+AC_CHECK_FUNCS(wait setmode getrlimit)\n \n # Check for types\n AC_CHECK_TYPES([intptr_t])"}, {"sha": "08f32878fcd9378f3a7ee8643d87f68a6c4923da", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -363,15 +363,6 @@ get_oserror (void)\n }\n \n \n-/* sys_exit()-- Terminate the program with an exit code */\n-\n-void\n-sys_exit (int code)\n-{\n-  exit (code);\n-}\n-\n-\n /*********************************************************************\n     File descriptor stream functions\n *********************************************************************/"}, {"sha": "af53e4800098b51d1400d8d1c3f88bfb246ef7b2", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -355,6 +355,7 @@ typedef struct\n   int fpu_round, fpu_precision, fpe;\n \n   int sighup, sigint;\n+  int dump_core;\n }\n options_t;\n \n@@ -370,6 +371,7 @@ typedef struct\n   int allow_std;\n   int pedantic;\n   int convert;\n+  int dump_core;\n   size_t record_marker;\n   int max_subrecord_length;\n }\n@@ -549,6 +551,9 @@ internal_proto(get_args);\n #define GFC_OTOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 3 + 1)\n #define GFC_BTOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 8 + 1)\n \n+extern void sys_exit (int) __attribute__ ((noreturn));\n+internal_proto(sys_exit);\n+\n extern const char *gfc_itoa (GFC_INTEGER_LARGEST, char *, size_t);\n internal_proto(gfc_itoa);\n \n@@ -571,9 +576,6 @@ internal_proto(internal_error);\n extern const char *get_oserror (void);\n internal_proto(get_oserror);\n \n-extern void sys_exit (int) __attribute__ ((noreturn));\n-internal_proto(sys_exit);\n-\n extern void st_sprintf (char *, const char *, ...)\n   __attribute__ ((format (printf, 2, 3)));\n internal_proto(st_sprintf);"}, {"sha": "06ebc4d9023fff5f0021a73a48baff9730d829dc", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -37,17 +37,19 @@ compile_options_t compile_options;\n \n \n /* Prototypes */\n-extern void set_std (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4);\n+extern void set_std (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4,\n+\t\t     GFC_INTEGER_4);\n export_proto(set_std);\n \n \n void\n set_std (GFC_INTEGER_4 warn_std, GFC_INTEGER_4 allow_std,\n-\t GFC_INTEGER_4 pedantic)\n+\t GFC_INTEGER_4 pedantic, GFC_INTEGER_4 dump_core)\n {\n   compile_options.pedantic = pedantic;\n   compile_options.warn_std = warn_std;\n   compile_options.allow_std = allow_std;\n+  compile_options.dump_core = dump_core;\n }\n \n \n@@ -61,6 +63,7 @@ init_compile_options (void)\n   compile_options.allow_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n     | GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F77 | GFC_STD_GNU | GFC_STD_LEGACY;\n   compile_options.pedantic = 0;\n+  compile_options.dump_core = 0;\n }\n \n /* Function called by the front-end to tell us the"}, {"sha": "cc3be215c368b6209d35a770d4ed6ac2e24e7219", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -537,6 +537,11 @@ static variable variable_table[] = {\n   {\"GFORTRAN_CONVERT_UNIT\", 0, 0, init_unformatted, show_string,\n    \"Set format for unformatted files\", 0},\n \n+  /* Behaviour when encoutering a runtime error.  */\n+  {\"GFORTRAN_ERROR_DUMPCORE\", -1, &options.dump_core,\n+    init_boolean, show_boolean,\n+    \"Dump a core file (if possible) on runtime error\", -1},\n+\n   {NULL, 0, NULL, NULL, NULL, NULL, 0}\n };\n "}, {"sha": "e6713d2cc4d9ae773112e13bab7816a54afa688d", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedeea04da0bbdf7e975a31c9c55f3929657b909/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=eedeea04da0bbdf7e975a31c9c55f3929657b909", "patch": "@@ -36,8 +36,67 @@ Boston, MA 02110-1301, USA.  */\n #include <float.h>\n #include <errno.h>\n \n+#ifdef HAVE_SIGNAL_H\n+#include <signal.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_SYS_RESOURCE_H\n+#include <sys/resource.h>\n+#endif\n+\n+#ifdef HAVE_SYS_TIME_H\n+#include <sys/time.h>\n+#endif\n+\n #include \"libgfortran.h\"\n \n+#ifdef __MINGW32__\n+#define HAVE_GETPID 1\n+#include <process.h>\n+#endif\n+\n+\n+/* sys_exit()-- Terminate the program with an exit code.  */\n+\n+void\n+sys_exit (int code)\n+{\n+  /* Dump core if requested.  */\n+  if (code != 0\n+      && (options.dump_core == 1\n+\t || (options.dump_core == -1 && compile_options.dump_core == 1)))\n+    {\n+#if defined(HAVE_GETRLIMIT) && defined(RLIMIT_CORE)\n+      /* Warn if a core file cannot be produced because\n+\t of core size limit.  */\n+\n+      struct rlimit core_limit;\n+\n+      if (getrlimit (RLIMIT_CORE, &core_limit) == 0 && core_limit.rlim_cur == 0)\n+\tst_printf (\"** Warning: a core dump was requested, but the core size\"\n+\t\t   \"limit\\n**          is currently zero.\\n\\n\");\n+#endif\n+      \n+      \n+#if defined(HAVE_KILL) && defined(HAVE_GETPID) && defined(SIGQUIT)\n+      kill (getpid (), SIGQUIT);\n+#else\n+      st_printf (\"Core dump not possible, sorry.\");\n+#endif\n+    }\n+\n+  exit (code);\n+}\n+\n+\n /* Error conditions.  The tricky part here is printing a message when\n  * it is the I/O subsystem that is severely wounded.  Our goal is to\n  * try and print something making the fewest assumptions possible,"}]}