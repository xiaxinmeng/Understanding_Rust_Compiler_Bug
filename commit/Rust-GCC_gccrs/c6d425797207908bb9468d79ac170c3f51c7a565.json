{"sha": "c6d425797207908bb9468d79ac170c3f51c7a565", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkNDI1Nzk3MjA3OTA4YmI5NDY4ZDc5YWMxNzBjM2Y1MWM3YTU2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-02T16:25:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-02T16:25:44Z"}, "message": "PR libstdc++/69608 Move semantics for strstreambuf\n\nIn libstdc++ the deprecated char* streams are non-copyable, as was\nrequired pre-C++11.\n\nSince C++11 the standard implies that those streams should be copyable,\nbut doesn't specify the effects of copying them. This is surely a\ndefect, so for consistency with other implementations this change makes\nthem movable, but not copyable.\n\n\tPR libstdc++/69608\n\t* include/backward/strstream (strstreambuf): Define move constructor\n\tand move assignment operator.\n\t(istrstream, ostrstream, strstream): Likewise.\n\t* testsuite/backward/strstream_move.cc: New.\n\nFrom-SVN: r259842", "tree": {"sha": "c33075a951b6f896c60ca570ab7134d33c8d292f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33075a951b6f896c60ca570ab7134d33c8d292f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d425797207908bb9468d79ac170c3f51c7a565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d425797207908bb9468d79ac170c3f51c7a565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d425797207908bb9468d79ac170c3f51c7a565", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d425797207908bb9468d79ac170c3f51c7a565/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6476f90da4bfcb8644da32d3b4c4685a72bc84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6476f90da4bfcb8644da32d3b4c4685a72bc84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6476f90da4bfcb8644da32d3b4c4685a72bc84e"}], "stats": {"total": 306, "additions": 305, "deletions": 1}, "files": [{"sha": "c53c068d0ab3683d5cfdd78247e60dd6e52bae7b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6d425797207908bb9468d79ac170c3f51c7a565", "patch": "@@ -1,3 +1,11 @@\n+2018-05-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69608\n+\t* include/backward/strstream (strstreambuf): Define move constructor\n+\tand move assignment operator.\n+\t(istrstream, ostrstream, strstream): Likewise.\n+\t* testsuite/backward/strstream_move.cc: New.\n+\n 2018-05-01  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>\n \n \tPR libstdc++/84654"}, {"sha": "0429c28ce356904452c95a869ca6059c706289a3", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=c6d425797207908bb9468d79ac170c3f51c7a565", "patch": "@@ -81,6 +81,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     virtual ~strstreambuf();\n \n+#if __cplusplus >= 201103L\n+    strstreambuf(strstreambuf&& __rhs) noexcept\n+    : _Base(__rhs), _M_alloc_fun(__rhs._M_alloc_fun),\n+      _M_free_fun(__rhs._M_free_fun), _M_dynamic(__rhs._M_dynamic),\n+      _M_frozen(__rhs._M_frozen), _M_constant(__rhs._M_constant)\n+    {\n+      __rhs.setg(nullptr, nullptr, nullptr);\n+      __rhs.setp(nullptr, nullptr);\n+    }\n+\n+    strstreambuf&\n+    operator=(strstreambuf&& __rhs) noexcept\n+    {\n+      if (_M_dynamic && !_M_frozen)\n+\t_M_free(eback());\n+      _Base::operator=(static_cast<const _Base&>(__rhs));\n+      _M_alloc_fun = __rhs._M_alloc_fun;\n+      _M_free_fun = __rhs._M_free_fun;\n+      _M_dynamic = __rhs._M_dynamic;\n+      _M_frozen = __rhs._M_frozen;\n+      _M_constant = __rhs._M_constant;\n+      __rhs.setg(nullptr, nullptr, nullptr);\n+      __rhs.setp(nullptr, nullptr);\n+      return *this;\n+    }\n+#endif\n+\n   public:\n     void freeze(bool = true) throw ();\n     char* str() throw ();\n@@ -98,10 +125,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t     = ios_base::in | ios_base::out);\n \n   private:\n+#if __cplusplus < 201103L\n     strstreambuf&\n     operator=(const strstreambuf&);\n \n     strstreambuf(const strstreambuf&);\n+#endif\n \n     // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n     char* _M_alloc(size_t);\n@@ -110,7 +139,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Helper function used in constructors.\n     void _M_setup(char* __get, char* __put, streamsize __n) throw ();\n \n-  private:\n     // Data members.\n     void* (*_M_alloc_fun)(size_t);\n     void  (*_M_free_fun)(void*);\n@@ -130,6 +158,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     istrstream(const char*, streamsize);\n     virtual ~istrstream();\n \n+#if __cplusplus >= 201103L\n+    istrstream(istrstream&& __rhs)\n+    : istream(std::move(__rhs)), _M_buf(std::move(__rhs._M_buf))\n+    { set_rdbuf(&_M_buf); }\n+\n+    istrstream& operator=(istrstream&&) = default;\n+#endif\n+\n     _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n     char* str() throw ();\n \n@@ -145,6 +181,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ostrstream(char*, int, ios_base::openmode = ios_base::out);\n     virtual ~ostrstream();\n \n+#if __cplusplus >= 201103L\n+    ostrstream(ostrstream&& __rhs)\n+    : ostream(std::move(__rhs)), _M_buf(std::move(__rhs._M_buf))\n+    { set_rdbuf(&_M_buf); }\n+\n+    ostrstream& operator=(ostrstream&&) = default;\n+#endif\n+\n     _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n     void freeze(bool = true) throw();\n     char* str() throw ();\n@@ -167,6 +211,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n     virtual ~strstream();\n \n+#if __cplusplus >= 201103L\n+    strstream(strstream&& __rhs)\n+    : iostream(std::move(__rhs)), _M_buf(std::move(__rhs._M_buf))\n+    { set_rdbuf(&_M_buf); }\n+\n+    strstream& operator=(strstream&&) = default;\n+#endif\n+\n     _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n     void freeze(bool = true) throw ();\n     _GLIBCXX_PURE int pcount() const throw ();"}, {"sha": "7dfbd337901c882efb4caac882386c072de53ed4", "filename": "libstdc++-v3/testsuite/backward/strstream_move.cc", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d425797207908bb9468d79ac170c3f51c7a565/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fstrstream_move.cc?ref=c6d425797207908bb9468d79ac170c3f51c7a565", "patch": "@@ -0,0 +1,244 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-Wno-deprecated\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <strstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istrstream is(\"15 16\");\n+  std::istrstream is2 = std::move(is);\n+  int a;\n+  is >> a;\n+  VERIFY( !is );\n+  is2 >> a;\n+  VERIFY( is2 );\n+  VERIFY( a == 15 );\n+  std::istrstream is3 = std::move(is2);\n+  int b;\n+  is2 >> b;\n+  VERIFY( !is2 );\n+  is3 >> b;\n+  VERIFY( is3 );\n+  VERIFY( b == 16 );\n+}\n+\n+void\n+test02()\n+{\n+  std::istrstream is(\"\");\n+  int a;\n+  is >> a;\n+  VERIFY( !is );\n+  is = std::istrstream(\"17 18\");\n+  is >> a;\n+  VERIFY( is );\n+  VERIFY( a == 17 );\n+  is = std::istrstream(\"\");\n+  int b;\n+  is >> b;\n+  VERIFY( !is );\n+}\n+\n+void\n+test03()\n+{\n+  std::ostrstream os;\n+  os << \"a few chars\";  // fits in initial allocation\n+  char* s = os.str(); // os now frozen\n+  std::ostrstream os2 = std::move(os);\n+  VERIFY( os2.str() == s );\n+  VERIFY( os.str() == nullptr );\n+  os2.freeze(false);\n+\n+  os2 << \"enough additional chars to force a reallocation\";\n+  VERIFY( os2 );\n+  s = os2.str();  // os2 now frozen\n+  std::ostrstream os3 = std::move(os2);\n+  VERIFY( os3.str() == s );\n+  VERIFY( os2.str() == nullptr );\n+  delete[] s;\n+}\n+\n+void\n+test04()\n+{\n+  char buf[16];\n+  std::ostrstream os(buf, sizeof(buf));\n+  os << \"a few chars\";\n+  char* s = os.str(); // os now frozen\n+  VERIFY( s == buf );\n+  std::ostrstream os2 = std::move(os);\n+  VERIFY( os2.str() == s );\n+  VERIFY( os.str() == nullptr );\n+  os2.freeze(false);\n+\n+  os2 << \"enough additional chars to force a reallocation\";\n+  VERIFY( !os2 );\n+  s = os2.str();  // os2 now frozen\n+  VERIFY( s == buf );\n+  std::ostrstream os3 = std::move(os2);\n+  VERIFY( os3.str() == s );\n+  VERIFY( os2.str() == nullptr );\n+}\n+\n+void\n+test05()\n+{\n+  char buf[] = \"0123456789\";\n+  std::ostrstream os(buf, 1);\n+  os << \"aa\";\n+  VERIFY( !os );\n+  os = std::ostrstream(buf, 10);\n+  os << \"some chars\";\n+  VERIFY( os );\n+  VERIFY( os.pcount() == 10 );\n+  os << \"a\";\n+  VERIFY( !os );\n+  os = std::ostrstream();\n+  os << \"a\";\n+  VERIFY( os );\n+  VERIFY( os.pcount() == 1 );\n+  char* s = os.str(); // os now frozen\n+  os = std::ostrstream();\n+  os.freeze(false);   // no effect\n+  delete[] s;\n+}\n+\n+void\n+test06()\n+{\n+  char buf[] = \"15 16\";\n+  std::strstream ss(buf, 5, std::ios::in|std::ios::app);\n+  std::strstream ss2 = std::move(ss);\n+  int a;\n+  ss >> a;\n+  VERIFY( !ss );\n+  ss2 >> a;\n+  VERIFY( ss2 );\n+  VERIFY( a == 15 );\n+  std::strstream ss3 = std::move(ss2);\n+  int b;\n+  ss2 >> b;\n+  VERIFY( !ss2 );\n+  ss3 >> b;\n+  VERIFY( ss3 );\n+  VERIFY( b == 16 );\n+}\n+\n+void\n+test07()\n+{\n+  std::strstream ss;\n+  int a;\n+  ss >> a;\n+  VERIFY( !ss );\n+  char buf[] = \"17 18\";\n+  ss = std::strstream(buf, 5, std::ios::in|std::ios::app);\n+  ss >> a;\n+  VERIFY( ss );\n+  VERIFY( a == 17 );\n+  ss = std::strstream();\n+  int b;\n+  ss >> b;\n+  VERIFY( !ss );\n+}\n+\n+void\n+test08()\n+{\n+  std::strstream ss;\n+  ss << \"a few chars\";  // fits in initial allocation\n+  char* s = ss.str(); // ss now frozen\n+  std::strstream ss2 = std::move(ss);\n+  VERIFY( ss2.str() == s );\n+  VERIFY( ss.str() == nullptr );\n+  ss2.freeze(false);\n+\n+  ss2 << \"enough additional chars to force a reallocation\";\n+  VERIFY( ss2 );\n+  s = ss2.str();  // ss2 now frozen\n+  std::strstream ss3 = std::move(ss2);\n+  VERIFY( ss3.str() == s );\n+  VERIFY( ss2.str() == nullptr );\n+  delete[] s;\n+}\n+\n+void\n+test09()\n+{\n+  char buf[16];\n+  std::strstream ss(buf, sizeof(buf));\n+  ss << \"a few chars\";\n+  char* s = ss.str(); // ss now frozen\n+  VERIFY( s == buf );\n+  std::strstream ss2 = std::move(ss);\n+  VERIFY( ss2.str() == s );\n+  VERIFY( ss.str() == nullptr );\n+  ss2.freeze(false);\n+\n+  ss2 << \"enough additional chars to force a reallocation\";\n+  VERIFY( !ss2 );\n+  s = ss2.str();  // ss2 now frozen\n+  VERIFY( s == buf );\n+  std::strstream ss3 = std::move(ss2);\n+  VERIFY( ss3.str() == s );\n+  VERIFY( ss2.str() == nullptr );\n+}\n+\n+void\n+test10()\n+{\n+  char buf[] = \"0123456789\";\n+  std::strstream ss(buf, 1);\n+  ss << \"aa\";\n+  VERIFY( !ss );\n+  ss = std::strstream(buf, 10);\n+  ss << \"some chars\";\n+  VERIFY( ss );\n+  VERIFY( ss.pcount() == 10 );\n+  ss << \"a\";\n+  VERIFY( !ss );\n+  ss = std::strstream();\n+  ss << \"a\";\n+  VERIFY( ss );\n+  VERIFY( ss.pcount() == 1 );\n+  char* s = ss.str(); // ss now frozen\n+  ss = std::strstream();\n+  ss.freeze(false);   // no effect\n+  delete[] s;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test05();\n+  test06();\n+  test07();\n+  test08();\n+  test09();\n+  test10();\n+}"}]}