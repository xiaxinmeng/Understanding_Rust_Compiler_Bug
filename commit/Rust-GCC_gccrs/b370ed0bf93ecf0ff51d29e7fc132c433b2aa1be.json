{"sha": "b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "node_id": "C_kwDOANBUbNoAKGIzNzBlZDBiZjkzZWNmMGZmNTFkMjllN2ZjMTMyYzQzM2IyYWExYmU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-09T11:07:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-10T13:39:25Z"}, "message": "libstdc++: Make std::hash<basic_string<>> allocator-agnostic (LWG 3705)\n\nThis new library issue was recently moved to Tentatively Ready by an LWG\npoll, so I'm making the change on trunk.\n\nAs noted in PR libstc++/105907 the std::hash specializations for PMR\nstrings were not treated as slow hashes by the unordered containers, so\nthis change preserves that. The new specializations for custom\nallocators are also not treated as slow, for the same reason. For the\nversioned namespace (i.e. unstable ABI) we don't have to worry about\nthat, so can enable hash code caching for all basic_string\nspecializations.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (__hash_str_base): New class\n\ttemplate.\n\t(hash<basic_string<C, char_traits<C>, A>>): Define partial\n\tspecialization for each of the standard character types.\n\t(hash<string>, hash<wstring>, hash<u8string>, hash<u16string>)\n\t(hash<u32string>): Remove explicit specializations.\n\t* include/std/string (__hash_string_base): Remove class\n\ttemplate.\n\t(hash<pmr::string>, hash<pmr::wstring>, hash<pmr::u8string>)\n\t(hash<pmr::u16string>, hash<pmr::u32string>): Remove explicit\n\tspecializations.\n\t* testsuite/21_strings/basic_string/hash/hash.cc: Test with\n\tcustom allocators.\n\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc:\n\tLikewise.", "tree": {"sha": "e34dad399c36da51e8135fbe7f03773feb3c769b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e34dad399c36da51e8135fbe7f03773feb3c769b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5940b4e59f8e198dbf7e8b733561ef72a9ba2cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5940b4e59f8e198dbf7e8b733561ef72a9ba2cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5940b4e59f8e198dbf7e8b733561ef72a9ba2cbc"}], "stats": {"total": 163, "additions": 74, "deletions": 89}, "files": [{"sha": "f76ddf970c64a41c9e48e8dad8706986e63cd72a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 46, "deletions": 56, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "patch": "@@ -4226,85 +4226,75 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // DR 1182.\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3705. Hashability shouldn't depend on basic_string's allocator\n \n-#ifndef _GLIBCXX_COMPATIBILITY_CXX0X\n-  /// std::hash specialization for string.\n-  template<>\n-    struct hash<string>\n-    : public __hash_base<size_t, string>\n+  template<typename _CharT, typename _Alloc,\n+\t   typename _StrT = basic_string<_CharT, char_traits<_CharT>, _Alloc>>\n+    struct __str_hash_base\n+    : public __hash_base<size_t, _StrT>\n     {\n       size_t\n-      operator()(const string& __s) const noexcept\n-      { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n+      operator()(const _StrT& __s) const noexcept\n+      { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(_CharT)); }\n     };\n \n-  template<>\n-    struct __is_fast_hash<hash<string>> : std::false_type\n+#ifndef _GLIBCXX_COMPATIBILITY_CXX0X\n+  /// std::hash specialization for string.\n+  template<typename _Alloc>\n+    struct hash<basic_string<char, char_traits<char>, _Alloc>>\n+    : public __str_hash_base<char, _Alloc>\n     { };\n \n   /// std::hash specialization for wstring.\n-  template<>\n-    struct hash<wstring>\n-    : public __hash_base<size_t, wstring>\n-    {\n-      size_t\n-      operator()(const wstring& __s) const noexcept\n-      { return std::_Hash_impl::hash(__s.data(),\n-                                     __s.length() * sizeof(wchar_t)); }\n-    };\n+  template<typename _Alloc>\n+    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>\n+    : public __str_hash_base<wchar_t, _Alloc>\n+    { };\n \n-  template<>\n-    struct __is_fast_hash<hash<wstring>> : std::false_type\n+  template<typename _Alloc>\n+    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,\n+\t\t\t\t\t    _Alloc>>>\n+    : std::false_type\n     { };\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   /// std::hash specialization for u8string.\n-  template<>\n-    struct hash<u8string>\n-    : public __hash_base<size_t, u8string>\n-    {\n-      size_t\n-      operator()(const u8string& __s) const noexcept\n-      { return std::_Hash_impl::hash(__s.data(),\n-                                     __s.length() * sizeof(char8_t)); }\n-    };\n-\n-  template<>\n-    struct __is_fast_hash<hash<u8string>> : std::false_type\n+  template<typename _Alloc>\n+    struct hash<basic_string<char8_t, char_traits<char8_t>, _Alloc>>\n+    : public __str_hash_base<char8_t, _Alloc>\n     { };\n #endif\n \n   /// std::hash specialization for u16string.\n-  template<>\n-    struct hash<u16string>\n-    : public __hash_base<size_t, u16string>\n-    {\n-      size_t\n-      operator()(const u16string& __s) const noexcept\n-      { return std::_Hash_impl::hash(__s.data(),\n-                                     __s.length() * sizeof(char16_t)); }\n-    };\n-\n-  template<>\n-    struct __is_fast_hash<hash<u16string>> : std::false_type\n+  template<typename _Alloc>\n+    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>\n+    : public __str_hash_base<char16_t, _Alloc>\n     { };\n \n   /// std::hash specialization for u32string.\n-  template<>\n-    struct hash<u32string>\n-    : public __hash_base<size_t, u32string>\n-    {\n-      size_t\n-      operator()(const u32string& __s) const noexcept\n-      { return std::_Hash_impl::hash(__s.data(),\n-                                     __s.length() * sizeof(char32_t)); }\n-    };\n+  template<typename _Alloc>\n+    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>\n+    : public __str_hash_base<char32_t, _Alloc>\n+    { };\n \n-  template<>\n-    struct __is_fast_hash<hash<u32string>> : std::false_type\n+#if ! _GLIBCXX_INLINE_VERSION\n+  // PR libstdc++/105907 - __is_fast_hash affects unordered container ABI.\n+  template<> struct __is_fast_hash<hash<string>> : std::false_type { };\n+  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };\n+  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };\n+  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<> struct __is_fast_hash<hash<u8string>> : std::false_type { };\n+#endif\n+#else\n+  // For versioned namespace, assume every std::hash<basic_string<>> is slow.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    struct __is_fast_hash<hash<basic_string<_CharT, _Traits, _Alloc>>>\n+    : std::false_type\n     { };\n+#endif\n \n #if __cplusplus >= 201402L\n "}, {"sha": "37a4aaba9cddfece15c0a2c2ba0cc197c8ca0c36", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "patch": "@@ -69,39 +69,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using u32string = basic_string<char32_t>;\n     using wstring   = basic_string<wchar_t>;\n   } // namespace pmr\n-\n-  template<typename _Str>\n-    struct __hash_string_base\n-    : public __hash_base<size_t, _Str>\n-    {\n-      size_t\n-      operator()(const _Str& __s) const noexcept\n-      { return hash<basic_string_view<typename _Str::value_type>>{}(__s); }\n-    };\n-\n-  template<>\n-    struct hash<pmr::string>\n-    : public __hash_string_base<pmr::string>\n-    { };\n-#ifdef _GLIBCXX_USE_CHAR8_T\n-  template<>\n-    struct hash<pmr::u8string>\n-    : public __hash_string_base<pmr::u8string>\n-    { };\n-#endif\n-  template<>\n-    struct hash<pmr::u16string>\n-    : public __hash_string_base<pmr::u16string>\n-    { };\n-  template<>\n-    struct hash<pmr::u32string>\n-    : public __hash_string_base<pmr::u32string>\n-    { };\n-  template<>\n-    struct hash<pmr::wstring>\n-    : public __hash_string_base<pmr::wstring>\n-    { };\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17"}, {"sha": "7f3809926e5794fe995adf4dc306ef742aee9531", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc?ref=b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "patch": "@@ -20,6 +20,7 @@\n #include <string>\n #include <memory_resource>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // C++17 24.3.5 [basic.string.hash]\n // If S is one of these string types, SV is the corresponding string view type,\n@@ -54,9 +55,24 @@ test02()\n #endif\n }\n \n+template<typename C>\n+using String\n+  = std::basic_string<C, std::char_traits<C>, __gnu_test::SimpleAllocator<C>>;\n+\n+void\n+test03()\n+{\n+  // LWG 3705. Hashability shouldn't depend on basic_string's allocator\n+  VERIFY( test(String<char>(\"a narrow string\")) );\n+  VERIFY( test(String<char16_t>(u\"a utf-16 string\")) );\n+  VERIFY( test(String<char32_t>(U\"a utf-32 string\")) );\n+  VERIFY( test(String<wchar_t>(L\"a wide string\")) );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "0ff98ad1caa60524c4bccf806b66bb66733abf78", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash_char8_t.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc?ref=b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "patch": "@@ -21,6 +21,7 @@\n #include <string>\n #include <memory_resource>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // C++2a N4810 21.3.5 [basic.string.hash]\n // If S is one of these string types, SV is the corresponding string view type,\n@@ -55,9 +56,20 @@ test02()\n   VERIFY( hash<std::string>()(native) == hash<std::u8string>()(utf8) );\n }\n \n+void\n+test03()\n+{\n+  using Alloc = __gnu_test::SimpleAllocator<char8_t>;\n+  using Stringu8 = std::basic_string<char8_t, std::char_traits<char8_t>, Alloc>;\n+\n+  // LWG 3705. Hashability shouldn't depend on basic_string's allocator\n+  VERIFY( test(Stringu8(u8\"a utf-8 string, with custom allocator\")) );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}]}