{"sha": "646bea10e5f7be362618a8cdcf91d87ea9771fd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2YmVhMTBlNWY3YmUzNjI2MThhOGNkY2Y5MWQ4N2VhOTc3MWZkMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-16T14:53:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-16T14:53:32Z"}, "message": "tree-cfg.c (verify_gimple_assign_binary): Allow POINTER_PLUS_EXPR-like PLUS_EXPR for vectors.\n\n2009-04-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_gimple_assign_binary):\n\tAllow POINTER_PLUS_EXPR-like PLUS_EXPR for vectors.\n\t* ipa-struct-reorg.c (gen_size): Fold the built expressions.\n\t(create_general_new_stmt): Note that this function is broken.\n\nFrom-SVN: r146197", "tree": {"sha": "39a3f83699560f41244729712877b85ac31886a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a3f83699560f41244729712877b85ac31886a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646bea10e5f7be362618a8cdcf91d87ea9771fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646bea10e5f7be362618a8cdcf91d87ea9771fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646bea10e5f7be362618a8cdcf91d87ea9771fd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646bea10e5f7be362618a8cdcf91d87ea9771fd1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02e819ffd481be3a48701f535e7daad5ddaaae6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e819ffd481be3a48701f535e7daad5ddaaae6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e819ffd481be3a48701f535e7daad5ddaaae6a"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "b44225048c9b8047772c0d6ed642620126805452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=646bea10e5f7be362618a8cdcf91d87ea9771fd1", "patch": "@@ -1,3 +1,10 @@\n+2009-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_gimple_assign_binary):\n+\tAllow POINTER_PLUS_EXPR-like PLUS_EXPR for vectors.\n+\t* ipa-struct-reorg.c (gen_size): Fold the built expressions.\n+\t(create_general_new_stmt): Note that this function is broken.\n+\n 2009-04-16  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* common.opt (fhelp): Add Var(help_flag)."}, {"sha": "8b5360d00e9e34128ad98725ab0e9cde85832af9", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=646bea10e5f7be362618a8cdcf91d87ea9771fd1", "patch": "@@ -606,13 +606,17 @@ gen_size (tree num, tree type, tree *res)\n   if (exact_log2 (struct_size_int) == -1)\n     {\n       tree size = build_int_cst (TREE_TYPE (num), struct_size_int);\n-      new_stmt = gimple_build_assign_with_ops (MULT_EXPR, *res, num, size);\n+      new_stmt = gimple_build_assign (*res, fold_build2 (MULT_EXPR,\n+\t\t\t\t\t\t\t TREE_TYPE (num),\n+\t\t\t\t\t\t\t num, size));\n     }\n   else\n     {\n       tree C = build_int_cst (TREE_TYPE (num), exact_log2 (struct_size_int));\n  \n-      new_stmt = gimple_build_assign_with_ops (LSHIFT_EXPR, *res, num, C);\n+      new_stmt = gimple_build_assign (*res, fold_build2 (LSHIFT_EXPR,\n+\t\t\t\t\t\t\t TREE_TYPE (num),\n+\t\t\t\t\t\t\t num, C));\n     }\n \n   finalize_stmt (new_stmt);\n@@ -1291,6 +1295,8 @@ create_general_new_stmt (struct access_site *acc, tree new_type)\n \t    {\n \t      pos = find_pos_in_stmt (new_stmt, var);\n \t      gcc_assert (pos);\n+\t      /* ???  This misses adjustments to the type of the\n+\t         INDIRECT_REF we possibly replace the operand of.  */\n \t      *pos = new_var;\n \t    }      \n \t}"}, {"sha": "2eab9ad10fb071803e21b8b625640c8b1346e16a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646bea10e5f7be362618a8cdcf91d87ea9771fd1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=646bea10e5f7be362618a8cdcf91d87ea9771fd1", "patch": "@@ -3568,8 +3568,52 @@ verify_gimple_assign_binary (gimple stmt)\n \treturn false;\n       }\n \n+    case PLUS_EXPR:\n+      {\n+\t/* We use regular PLUS_EXPR for vectors.\n+\t   ???  This just makes the checker happy and may not be what is\n+\t   intended.  */\n+\tif (TREE_CODE (lhs_type) == VECTOR_TYPE\n+\t    && POINTER_TYPE_P (TREE_TYPE (lhs_type)))\n+\t  {\n+\t    if (TREE_CODE (rhs1_type) != VECTOR_TYPE\n+\t\t|| TREE_CODE (rhs2_type) != VECTOR_TYPE)\n+\t      {\n+\t\terror (\"invalid non-vector operands to vector valued plus\");\n+\t\treturn true;\n+\t      }\n+\t    lhs_type = TREE_TYPE (lhs_type);\n+\t    rhs1_type = TREE_TYPE (rhs1_type);\n+\t    rhs2_type = TREE_TYPE (rhs2_type);\n+\t    /* PLUS_EXPR is commutative, so we might end up canonicalizing\n+\t       the pointer to 2nd place.  */\n+\t    if (POINTER_TYPE_P (rhs2_type))\n+\t      {\n+\t\ttree tem = rhs1_type;\n+\t\trhs1_type = rhs2_type;\n+\t\trhs2_type = tem;\n+\t      }\n+\t    goto do_pointer_plus_expr_check;\n+\t  }\n+      }\n+    /* Fallthru.  */\n+    case MINUS_EXPR:\n+      {\n+\tif (POINTER_TYPE_P (lhs_type)\n+\t    || POINTER_TYPE_P (rhs1_type)\n+\t    || POINTER_TYPE_P (rhs2_type))\n+\t  {\n+\t    error (\"invalid (pointer) operands to plus/minus\");\n+\t    return true;\n+\t  }\n+\n+\t/* Continue with generic binary expression handling.  */\n+\tbreak;\n+      }\n+\n     case POINTER_PLUS_EXPR:\n       {\n+do_pointer_plus_expr_check:\n \tif (!POINTER_TYPE_P (rhs1_type)\n \t    || !useless_type_conversion_p (lhs_type, rhs1_type)\n \t    || !useless_type_conversion_p (sizetype, rhs2_type))\n@@ -3625,21 +3669,6 @@ verify_gimple_assign_binary (gimple stmt)\n \t connected to the operand types.  */\n       return verify_gimple_comparison (lhs_type, rhs1, rhs2);\n \n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-      {\n-\tif (POINTER_TYPE_P (lhs_type)\n-\t    || POINTER_TYPE_P (rhs1_type)\n-\t    || POINTER_TYPE_P (rhs2_type))\n-\t  {\n-\t    error (\"invalid (pointer) operands to plus/minus\");\n-\t    return true;\n-\t  }\n-\n-\t/* Continue with generic binary expression handling.  */\n-\tbreak;\n-      }\n-\n     case WIDEN_SUM_EXPR:\n     case WIDEN_MULT_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:"}]}