{"sha": "60f2b864499470fd9a656e771191222dcaee5a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmMmI4NjQ0OTk0NzBmZDlhNjU2ZTc3MTE5MTIyMmRjYWVlNWE0Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-14T13:42:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-14T13:42:03Z"}, "message": "re PR tree-optimization/68775 (spec2006 test case 465.tonto fails with the gcc 6.0 fortran compiler)\n\n2015-12-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68775\n\t* tree-vect-slp.c (vect_build_slp_tree): Make sure to apply\n\ta operand swapping even if replacing the op with scalars.\n\nFrom-SVN: r231617", "tree": {"sha": "7341fb2f9c43b8fc3720b2ffcaa041931d9989ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7341fb2f9c43b8fc3720b2ffcaa041931d9989ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60f2b864499470fd9a656e771191222dcaee5a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f2b864499470fd9a656e771191222dcaee5a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60f2b864499470fd9a656e771191222dcaee5a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f2b864499470fd9a656e771191222dcaee5a4c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adb48173b8a6e7cba100e890c0ec60a9fb2188c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb48173b8a6e7cba100e890c0ec60a9fb2188c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb48173b8a6e7cba100e890c0ec60a9fb2188c6"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "abffbd73b8b9e0c87767b496c2b21ce918dd2a5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f2b864499470fd9a656e771191222dcaee5a4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f2b864499470fd9a656e771191222dcaee5a4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60f2b864499470fd9a656e771191222dcaee5a4c", "patch": "@@ -1,3 +1,9 @@\n+2015-12-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68775\n+\t* tree-vect-slp.c (vect_build_slp_tree): Make sure to apply\n+\ta operand swapping even if replacing the op with scalars.\n+\n 2015-12-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* combine.c (change_zero_ext): Do not create a shift of zero length."}, {"sha": "d3559190ef70042ba8a1a2668d040d931e247e39", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f2b864499470fd9a656e771191222dcaee5a4c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f2b864499470fd9a656e771191222dcaee5a4c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=60f2b864499470fd9a656e771191222dcaee5a4c", "patch": "@@ -1044,6 +1044,20 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t\t\t   tem, npermutes, &this_tree_size,\n \t\t\t\t   max_tree_size))\n \t    {\n+\t      /* ... so if successful we can apply the operand swapping\n+\t\t to the GIMPLE IL.  This is necessary because for example\n+\t\t vect_get_slp_defs uses operand indexes and thus expects\n+\t\t canonical operand order.  This is also necessary even\n+\t\t if we end up building the operand from scalars as\n+\t\t we'll continue to process swapped operand two.  */\n+\t      for (j = 0; j < group_size; ++j)\n+\t\tif (!matches[j])\n+\t\t  {\n+\t\t    gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t    swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n+\t\t\t\t       gimple_assign_rhs2_ptr (stmt));\n+\t\t  }\n+\n \t      /* If we have all children of child built up from scalars then\n \t\t just throw that away and build it up this node from scalars.  */\n \t      if (!SLP_TREE_CHILDREN (child).is_empty ())\n@@ -1073,17 +1087,6 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t    }\n \t\t}\n \n-\t      /* ... so if successful we can apply the operand swapping\n-\t\t to the GIMPLE IL.  This is necessary because for example\n-\t\t vect_get_slp_defs uses operand indexes and thus expects\n-\t\t canonical operand order.  */\n-\t      for (j = 0; j < group_size; ++j)\n-\t\tif (!matches[j])\n-\t\t  {\n-\t\t    gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n-\t\t    swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n-\t\t\t\t       gimple_assign_rhs2_ptr (stmt));\n-\t\t  }\n \t      oprnd_info->def_stmts = vNULL;\n \t      SLP_TREE_CHILDREN (*node).quick_push (child);\n \t      continue;"}]}