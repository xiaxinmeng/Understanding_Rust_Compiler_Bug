{"sha": "7b90c63a28e85014656ecab28459dcd23c7d2457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MGM2M2EyOGU4NTAxNDY1NmVjYWIyODQ1OWRjZDIzYzdkMjQ1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-30T14:56:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-30T14:56:08Z"}, "message": "re PR tree-optimization/68501 (sqrt builtin is not used anymore)\n\n\tPR tree-optimization/68501\n\t* target.def (builtin_reciprocal): Replace the 3 arguments with\n\ta gcall * one, adjust description.\n\t* targhooks.h (default_builtin_reciprocal): Replace the 3 arguments\n\twith a gcall * one.\n\t* targhooks.c (default_builtin_reciprocal): Likewise.\n\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Use\n\ttargetm.builtin_reciprocal even on internal functions, adjust\n\tthe arguments and allow replacing an internal function with normal\n\tbuilt-in.\n\t* config/i386/i386.c (ix86_builtin_reciprocal): Replace the 3 arguments\n\twith a gcall * one.  Handle internal fns too.\n\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_builtin_reciprocal): Likewise.\n\t* doc/tm.texi (builtin_reciprocal): Document.\n\nFrom-SVN: r231075", "tree": {"sha": "85c8ca3151ec7fc442e5d5aa3ec4917317da3cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c8ca3151ec7fc442e5d5aa3ec4917317da3cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b90c63a28e85014656ecab28459dcd23c7d2457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b90c63a28e85014656ecab28459dcd23c7d2457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b90c63a28e85014656ecab28459dcd23c7d2457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b90c63a28e85014656ecab28459dcd23c7d2457/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a5a0decae0af00cf736ec2c8558c185e59e47b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5a0decae0af00cf736ec2c8558c185e59e47b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5a0decae0af00cf736ec2c8558c185e59e47b8"}], "stats": {"total": 166, "additions": 123, "deletions": 43}, "files": [{"sha": "735fbd9964c207b3cb7b8c4485eb665302abca2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -1,3 +1,21 @@\n+2015-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68501\n+\t* target.def (builtin_reciprocal): Replace the 3 arguments with\n+\ta gcall * one, adjust description.\n+\t* targhooks.h (default_builtin_reciprocal): Replace the 3 arguments\n+\twith a gcall * one.\n+\t* targhooks.c (default_builtin_reciprocal): Likewise.\n+\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Use\n+\ttargetm.builtin_reciprocal even on internal functions, adjust\n+\tthe arguments and allow replacing an internal function with normal\n+\tbuilt-in.\n+\t* config/i386/i386.c (ix86_builtin_reciprocal): Replace the 3 arguments\n+\twith a gcall * one.  Handle internal fns too.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_builtin_reciprocal): Likewise.\n+\t* doc/tm.texi (builtin_reciprocal): Document.\n+\n 2015-11-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68592"}, {"sha": "b150283569d785a5cca2b747c26ab4196f704dc9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -7103,19 +7103,21 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n    reciprocal square root builtins.  */\n \n static tree\n-aarch64_builtin_reciprocal (unsigned int fn,\n-\t\t\t    bool md_fn,\n-\t\t\t    bool)\n+aarch64_builtin_reciprocal (gcall *call)\n {\n   if (flag_trapping_math\n       || !flag_unsafe_math_optimizations\n       || optimize_size\n       || ! (aarch64_tune_params.extra_tuning_flags\n \t   & AARCH64_EXTRA_TUNE_RECIP_SQRT))\n-  {\n     return NULL_TREE;\n-  }\n \n+  if (gimple_call_internal_p (call)\n+    return NULL_TREE;\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n+  bool md_fn = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n   return aarch64_builtin_rsqrt (fn, md_fn);\n }\n "}, {"sha": "23a4273400779d79a243b1b04c9e79eb3d7a3227", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -42680,16 +42680,40 @@ ix86_vectorize_builtin_scatter (const_tree vectype,\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-ix86_builtin_reciprocal (unsigned int fn, bool md_fn, bool)\n+ix86_builtin_reciprocal (gcall *call)\n {\n   if (! (TARGET_SSE_MATH && !optimize_insn_for_size_p ()\n \t && flag_finite_math_only && !flag_trapping_math\n \t && flag_unsafe_math_optimizations))\n     return NULL_TREE;\n \n-  if (md_fn)\n+  if (gimple_call_internal_p (call))\n+    switch (gimple_call_internal_fn (call))\n+      {\n+\ttree type;\n+      case IFN_SQRT:\n+\ttype = TREE_TYPE (gimple_call_lhs (call));\n+\tswitch (TYPE_MODE (type))\n+\t  {\n+\t    /* Vectorized version of sqrt to rsqrt conversion.  */\n+\t  case V4SFmode:\n+\t    return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR);\n+\n+\t  case V8SFmode:\n+\t    return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR256);\n+\n+\t  default:\n+\t    return NULL_TREE;\n+\t  }\n+\n+      default:\n+\treturn NULL_TREE;\n+      }\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     /* Machine dependent builtins.  */\n-    switch (fn)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n       {\n \t/* Vectorized version of sqrt to rsqrt conversion.  */\n       case IX86_BUILTIN_SQRTPS_NR:\n@@ -42703,7 +42727,7 @@ ix86_builtin_reciprocal (unsigned int fn, bool md_fn, bool)\n       }\n   else\n     /* Normal builtins.  */\n-    switch (fn)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n       {\n \t/* Sqrt to rsqrt conversion.  */\n       case BUILT_IN_SQRTF:"}, {"sha": "c4e3f2fb5385f482aeb3de1a60b83b7ee7c23119", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -32643,14 +32643,42 @@ rs6000_memory_move_cost (machine_mode mode, reg_class_t rclass,\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-rs6000_builtin_reciprocal (unsigned int fn, bool md_fn,\n-\t\t\t   bool sqrt ATTRIBUTE_UNUSED)\n+rs6000_builtin_reciprocal (gcall *call)\n {\n   if (optimize_insn_for_size_p ())\n     return NULL_TREE;\n \n-  if (md_fn)\n-    switch (fn)\n+  if (gimple_call_internal_p (call))\n+    switch (gimple_call_internal_fn (call))\n+      {\n+\ttree type;\n+      case IFN_SQRT:\n+\ttype = TREE_TYPE (gimple_call_lhs (call));\n+\tswitch (TYPE_MODE (type))\n+\t  {\n+\t  case V2DFmode:\n+\t    if (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n+\t      return NULL_TREE;\n+\n+\t    return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n+\n+\t  case V4SFmode:\n+\t    if (!RS6000_RECIP_AUTO_RSQRTE_P (V4SFmode))\n+\t      return NULL_TREE;\n+\n+\t    return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_4SF];\n+\n+\t  default:\n+\t    return NULL_TREE;\n+\t  }\n+\n+      default:\n+\treturn NULL_TREE;\n+      }\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n       {\n       case VSX_BUILTIN_XVSQRTDP:\n \tif (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n@@ -32669,7 +32697,7 @@ rs6000_builtin_reciprocal (unsigned int fn, bool md_fn,\n       }\n \n   else\n-    switch (fn)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n       {\n       case BUILT_IN_SQRT:\n \tif (!RS6000_RECIP_AUTO_RSQRTE_P (DFmode))"}, {"sha": "7146ec558365f3e8c1f0dc98bb474086d8d35a05", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -5608,14 +5608,10 @@ be placed in an @code{object_block} structure.\n The default version returns true for all decls.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (unsigned @var{fn}, bool @var{md_fn}, bool @var{sqrt})\n+@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (gcall *@var{call})\n This hook should return the DECL of a function that implements reciprocal of\n-the builtin function with builtin function code @var{fn}, or\n-@code{NULL_TREE} if such a function is not available.  @var{md_fn} is true\n-when @var{fn} is a code of a machine-dependent builtin function.  When\n-@var{sqrt} is true, additional optimizations that apply only to the reciprocal\n-of a square root function are performed, and only reciprocals of @code{sqrt}\n-function are valid.\n+the builtin or internal function call @var{call}, or\n+@code{NULL_TREE} if such a function is not available.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD (void)"}, {"sha": "1d40012c5a2f6c90ea7a9c0a44b7b38b5d2da925", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -2463,13 +2463,9 @@ identical versions.\",\n DEFHOOK\n (builtin_reciprocal,\n  \"This hook should return the DECL of a function that implements reciprocal of\\n\\\n-the builtin function with builtin function code @var{fn}, or\\n\\\n-@code{NULL_TREE} if such a function is not available.  @var{md_fn} is true\\n\\\n-when @var{fn} is a code of a machine-dependent builtin function.  When\\n\\\n-@var{sqrt} is true, additional optimizations that apply only to the reciprocal\\n\\\n-of a square root function are performed, and only reciprocals of @code{sqrt}\\n\\\n-function are valid.\",\n- tree, (unsigned fn, bool md_fn, bool sqrt),\n+the builtin or internal function call @var{call}, or\\n\\\n+@code{NULL_TREE} if such a function is not available.\",\n+ tree, (gcall *call),\n  default_builtin_reciprocal)\n \n /* For a vendor-specific TYPE, return a pointer to a statically-allocated"}, {"sha": "3868230c6624305c67408d45e3796a48b8ea1b03", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -600,9 +600,7 @@ default_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n /* Reciprocal.  */\n \n tree\n-default_builtin_reciprocal (unsigned int fn ATTRIBUTE_UNUSED,\n-\t\t\t    bool md_fn ATTRIBUTE_UNUSED,\n-\t\t\t    bool sqrt ATTRIBUTE_UNUSED)\n+default_builtin_reciprocal (gcall *)\n {\n   return NULL_TREE;\n }"}, {"sha": "c8094704c0946595fbe6420022e7fc181f5ece6b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -90,7 +90,7 @@ extern tree default_builtin_vectorized_conversion (unsigned int, tree, tree);\n \n extern int default_builtin_vectorization_cost (enum vect_cost_for_stmt, tree, int);\n \n-extern tree default_builtin_reciprocal (unsigned int, bool, bool);\n+extern tree default_builtin_reciprocal (gcall *);\n \n extern HOST_WIDE_INT default_vector_alignment (const_tree);\n "}, {"sha": "66d750138a09f85d1c082e8b4ba95e29ff0f5c0b", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b90c63a28e85014656ecab28459dcd23c7d2457/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=7b90c63a28e85014656ecab28459dcd23c7d2457", "patch": "@@ -601,19 +601,17 @@ pass_cse_reciprocals::execute (function *fun)\n \n \t      if (is_gimple_call (stmt1)\n \t\t  && gimple_call_lhs (stmt1)\n-\t\t  && (fndecl = gimple_call_fndecl (stmt1))\n-\t\t  && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t\t      || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n+\t\t  && (gimple_call_internal_p (stmt1)\n+\t\t      || ((fndecl = gimple_call_fndecl (stmt1))\n+\t\t\t  && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t\t\t      || (DECL_BUILT_IN_CLASS (fndecl)\n+\t\t\t\t  == BUILT_IN_MD)))))\n \t\t{\n-\t\t  enum built_in_function code;\n-\t\t  bool md_code, fail;\n+\t\t  bool fail;\n \t\t  imm_use_iterator ui;\n \t\t  use_operand_p use_p;\n \n-\t\t  code = DECL_FUNCTION_CODE (fndecl);\n-\t\t  md_code = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n-\n-\t\t  fndecl = targetm.builtin_reciprocal (code, md_code, false);\n+\t\t  fndecl = targetm.builtin_reciprocal (as_a <gcall *> (stmt1));\n \t\t  if (!fndecl)\n \t\t    continue;\n \n@@ -639,8 +637,28 @@ pass_cse_reciprocals::execute (function *fun)\n \t\t    continue;\n \n \t\t  gimple_replace_ssa_lhs (stmt1, arg1);\n-\t\t  gimple_call_set_fndecl (stmt1, fndecl);\n-\t\t  update_stmt (stmt1);\n+\t\t  if (gimple_call_internal_p (stmt1))\n+\t\t    {\n+\t\t      auto_vec<tree, 4> args;\n+\t\t      for (unsigned int i = 0;\n+\t\t\t   i < gimple_call_num_args (stmt1); i++)\n+\t\t\targs.safe_push (gimple_call_arg (stmt1, i));\n+\t\t      gcall *stmt2 = gimple_build_call_vec (fndecl, args);\n+\t\t      gimple_call_set_lhs (stmt2, arg1);\n+\t\t      if (gimple_vdef (stmt1))\n+\t\t\t{\n+\t\t\t  gimple_set_vdef (stmt2, gimple_vdef (stmt1));\n+\t\t\t  SSA_NAME_DEF_STMT (gimple_vdef (stmt2)) = stmt2;\n+\t\t\t}\n+\t\t      gimple_set_vuse (stmt2, gimple_vuse (stmt1));\n+\t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (stmt1);\n+\t\t      gsi_replace (&gsi2, stmt2, true);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      gimple_call_set_fndecl (stmt1, fndecl);\n+\t\t      update_stmt (stmt1);\n+\t\t    }\n \t\t  reciprocal_stats.rfuncs_inserted++;\n \n \t\t  FOR_EACH_IMM_USE_STMT (stmt, ui, arg1)"}]}