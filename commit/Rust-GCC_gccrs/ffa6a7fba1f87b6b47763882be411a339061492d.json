{"sha": "ffa6a7fba1f87b6b47763882be411a339061492d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhNmE3ZmJhMWY4N2I2YjQ3NzYzODgyYmU0MTFhMzM5MDYxNDkyZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-23T08:10:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-23T09:50:04Z"}, "message": "tree-optimization/99721 - avoid SLP nodes we cannot schedule\n\nThis makes sure we'll not run into SLP scheduling issues later by\nrejecting all-constant children nodes without any scalar stmts early.\n\n2021-03-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99721\n\t* tree-vect-slp.c (vect_slp_analyze_node_operations):\n\tMake sure we can schedule the node.\n\n\t* gfortran.dg/vect/pr99721.f90: New testcase.", "tree": {"sha": "0b5285e83c389a7c14bf01d65845ab6f26f0434f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5285e83c389a7c14bf01d65845ab6f26f0434f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffa6a7fba1f87b6b47763882be411a339061492d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa6a7fba1f87b6b47763882be411a339061492d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa6a7fba1f87b6b47763882be411a339061492d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa6a7fba1f87b6b47763882be411a339061492d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fffefe3d9d1715f83c82331f2265e040f42d09fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffefe3d9d1715f83c82331f2265e040f42d09fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fffefe3d9d1715f83c82331f2265e040f42d09fe"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "651e86ac3f87bd8566bd0faea39e71ead4286a74", "filename": "gcc/testsuite/gfortran.dg/vect/pr99721.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa6a7fba1f87b6b47763882be411a339061492d/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99721.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa6a7fba1f87b6b47763882be411a339061492d/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99721.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99721.f90?ref=ffa6a7fba1f87b6b47763882be411a339061492d", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-O3\" }\n+! { dg-additional-options \"-march=armv8.3-a\" { target aarch64-*-* } }\n+subroutine sub_c\n+  complex, dimension(2,3) :: at\n+  complex, dimension(2,4) :: b\n+  complex, dimension(3,4) :: c\n+  data b / (41., 43.), 0, 0, 0, 0, 0, 0, 0/\n+  c = matmul(transpose(at), b)\n+  if (any (c /= cres)) stop\n+end subroutine sub_c"}, {"sha": "f1a2b5d60fa5815231491b0ebc1f19e6788f1cec", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa6a7fba1f87b6b47763882be411a339061492d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa6a7fba1f87b6b47763882be411a339061492d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ffa6a7fba1f87b6b47763882be411a339061492d", "patch": "@@ -3893,7 +3893,7 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"Failed cyclic SLP reference in %p\", node);\n+\t\t\t \"Failed cyclic SLP reference in %p\\n\", node);\n       return false;\n     }\n   gcc_assert (SLP_TREE_DEF_TYPE (node) == vect_internal_def);\n@@ -3907,13 +3907,26 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n   bool res = true;\n   unsigned visited_rec_start = visited_vec.length ();\n   unsigned cost_vec_rec_start = cost_vec->length ();\n+  bool seen_non_constant_child = false;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n     {\n       res = vect_slp_analyze_node_operations (vinfo, child, node_instance,\n \t\t\t\t\t      visited_set, visited_vec,\n \t\t\t\t\t      cost_vec);\n       if (!res)\n \tbreak;\n+      if (child && SLP_TREE_DEF_TYPE (child) != vect_constant_def)\n+\tseen_non_constant_child = true;\n+    }\n+  /* We're having difficulties scheduling nodes with just constant\n+     operands and no scalar stmts since we then cannot compute a stmt\n+     insertion place.  */\n+  if (!seen_non_constant_child && SLP_TREE_SCALAR_STMTS (node).is_empty ())\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"Cannot vectorize all-constant op node %p\\n\", node);\n+      res = false;\n     }\n \n   if (res)"}]}