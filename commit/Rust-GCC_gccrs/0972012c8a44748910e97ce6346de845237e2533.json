{"sha": "0972012c8a44748910e97ce6346de845237e2533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3MjAxMmM4YTQ0NzQ4OTEwZTk3Y2U2MzQ2ZGU4NDUyMzdlMjUzMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-06-12T02:02:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-06-12T02:02:14Z"}, "message": "re PR target/27158 (ICE in extract_insn with -maltivec)\n\n\n\tPR target/27158\n\t* config/rs6000/rs6000.c (const_vector_elt_as_int): New function to\n\textract a CONST_VECTOR element and interpret it as an integer.\n\t(vspltis_constant): Use const_vector_elt_as_int instead of the\n\tmacro CONST_VECTOR_ELT in order to handle FP vector modes.\n\t* config/rs6000/predicates.md (easy_vector_const): Consider\n\tfloating point ALTIVEC_VECTOR_MODEs via easy_altivec_constant.\n\nFrom-SVN: r114558", "tree": {"sha": "d60879a51c60c075a9d786af6c673703a9ec1427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60879a51c60c075a9d786af6c673703a9ec1427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0972012c8a44748910e97ce6346de845237e2533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0972012c8a44748910e97ce6346de845237e2533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0972012c8a44748910e97ce6346de845237e2533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0972012c8a44748910e97ce6346de845237e2533/comments", "author": null, "committer": null, "parents": [{"sha": "98ea97ab843355038471b526eb63b2198e4efb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ea97ab843355038471b526eb63b2198e4efb1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ea97ab843355038471b526eb63b2198e4efb1b"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "0e14efce4d77e93a494d2d0ffd4ee85c8f184e36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0972012c8a44748910e97ce6346de845237e2533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0972012c8a44748910e97ce6346de845237e2533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0972012c8a44748910e97ce6346de845237e2533", "patch": "@@ -1,3 +1,13 @@\n+2006-06-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/27158\n+\t* config/rs6000/rs6000.c (const_vector_elt_as_int): New function to\n+\textract a CONST_VECTOR element and interpret it as an integer.\n+\t(vspltis_constant): Use const_vector_elt_as_int instead of the\n+\tmacro CONST_VECTOR_ELT in order to handle FP vector modes.\n+\t* config/rs6000/predicates.md (easy_vector_const): Consider\n+\tfloating point ALTIVEC_VECTOR_MODEs via easy_altivec_constant.\n+\n 2006-06-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR middle-end/27942"}, {"sha": "f8e00ffecbeda6c82045a43e75acccc7b6246cc8", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0972012c8a44748910e97ce6346de845237e2533/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0972012c8a44748910e97ce6346de845237e2533/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=0972012c8a44748910e97ce6346de845237e2533", "patch": "@@ -278,9 +278,6 @@\n     {\n       if (zero_constant (op, mode))\n         return true;\n-      if (GET_MODE_CLASS (mode) != MODE_VECTOR_INT)\n-        return false;\n-\n       return easy_altivec_constant (op, mode);\n     }\n "}, {"sha": "6d78f84e5577378f7ed3ec09e275ec72934e3b53", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0972012c8a44748910e97ce6346de845237e2533/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0972012c8a44748910e97ce6346de845237e2533/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0972012c8a44748910e97ce6346de845237e2533", "patch": "@@ -2122,6 +2122,20 @@ num_insns_constant (rtx op, enum machine_mode mode)\n     }\n }\n \n+/* Interpret element ELT of the CONST_VECTOR OP as an integer value.\n+   If the mode of OP is MODE_VECTOR_INT, this simply returns the\n+   corresponding element of the vector, but for V4SFmode and V2SFmode,\n+   the corresponding \"float\" is interpreted as an SImode integer.  */\n+\n+static HOST_WIDE_INT\n+const_vector_elt_as_int (rtx op, unsigned int elt)\n+{\n+  rtx tmp = CONST_VECTOR_ELT (op, elt);\n+  if (GET_MODE (op) == V4SFmode\n+      || GET_MODE (op) == V2SFmode)\n+    tmp = gen_lowpart (SImode, tmp);\n+  return INTVAL (tmp);\n+}\n \n /* Return true if OP can be synthesized with a particular vspltisb, vspltish\n    or vspltisw instruction.  OP is a CONST_VECTOR.  Which instruction is used\n@@ -2141,8 +2155,7 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n   unsigned bitsize = GET_MODE_BITSIZE (inner);\n   unsigned mask = GET_MODE_MASK (inner);\n \n-  rtx last = CONST_VECTOR_ELT (op, nunits - 1);\n-  HOST_WIDE_INT val = INTVAL (last);\n+  HOST_WIDE_INT val = const_vector_elt_as_int (op, nunits - 1);\n   HOST_WIDE_INT splat_val = val;\n   HOST_WIDE_INT msb_val = val > 0 ? 0 : -1;\n \n@@ -2182,7 +2195,7 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n       else\n \tdesired_val = msb_val;\n \n-      if (desired_val != INTVAL (CONST_VECTOR_ELT (op, i)))\n+      if (desired_val != const_vector_elt_as_int (op, i))\n \treturn false;\n     }\n "}]}