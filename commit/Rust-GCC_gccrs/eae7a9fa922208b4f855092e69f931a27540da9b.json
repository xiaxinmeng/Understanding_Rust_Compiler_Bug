{"sha": "eae7a9fa922208b4f855092e69f931a27540da9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlN2E5ZmE5MjIyMDhiNGY4NTUwOTJlNjlmOTMxYTI3NTQwZGE5Yg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-10-26T14:56:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-26T14:56:05Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Remove.\n\n\n2000-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Remove.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Remove GLIBCPP_ENABLE_LONG_DOUBLE.\n\t* configure: Regenerate.\n\t* docs/configopts.html: Remove.\n\t* src/complexl.cc: Revert.\n\t* config.h.in: Remove.\n\t* include/c_std/bits/std_cmath.h: Remove guards based on\n\t_GLIBCPP_USE_LONG_DOUBLE.\n\t* include/c/bits/std_cmath.h: Same. Format. Match c_std behavior\n\twith respect to long double signatures.\n\n\t* config/os/aix/bits/ctype_noninline.h (ctype): Remove throw\n\tspecification.\n\t* config/os/newlib/bits/ctype_noninline.h (ctype): And here.\n\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/bsd/bits/ctype_noninline.h (ctype): Same.\n\nFrom-SVN: r37073", "tree": {"sha": "5fafe2d1484d668442c8cdfb95c58cf70ce361f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fafe2d1484d668442c8cdfb95c58cf70ce361f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae7a9fa922208b4f855092e69f931a27540da9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae7a9fa922208b4f855092e69f931a27540da9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae7a9fa922208b4f855092e69f931a27540da9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae7a9fa922208b4f855092e69f931a27540da9b/comments", "author": null, "committer": null, "parents": [{"sha": "cdb09fce3f32d0a844eae69b23fa26acd284c205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb09fce3f32d0a844eae69b23fa26acd284c205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdb09fce3f32d0a844eae69b23fa26acd284c205"}], "stats": {"total": 2871, "additions": 1350, "deletions": 1521}, "files": [{"sha": "1a09f546de11bfe24b23255a897af768ae612c49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -1,3 +1,25 @@\n+2000-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Remove.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Remove GLIBCPP_ENABLE_LONG_DOUBLE.\n+\t* configure: Regenerate.\n+\t* docs/configopts.html: Remove.\n+\t* src/complexl.cc: Revert.\n+\t* config.h.in: Remove.\n+\t* include/c_std/bits/std_cmath.h: Remove guards based on\n+\t_GLIBCPP_USE_LONG_DOUBLE.\n+\t* include/c/bits/std_cmath.h: Same. Format. Match c_std behavior\n+\twith respect to long double signatures.\n+\n+\t* config/os/aix/bits/ctype_noninline.h (ctype): Remove throw\n+\tspecification.\n+\t* config/os/newlib/bits/ctype_noninline.h (ctype): And here.\n+\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/bsd/bits/ctype_noninline.h (ctype): Same.\n+\n 2000-10-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/bits/std_valarray.h (valarray::valarray): Fix thinko.\n@@ -116,43 +138,6 @@\n \t* include/c_std/bits/std_cstdlib.h: abort, exit comment.\n \t* include/c_std/stdlib.h: Same here.\n \t\n-2000-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n-\n-\t* testsuite/21_strings/compare.cc (test01): Add using declarations.\n-\n-\t* include/c_std/bits/std_cerrno.h: And here.\n-\t* include/c_std/bits/std_cassert.h: Tweaks.\n-\n-\t* mkcheck.in: Simplify.\n-\t\n-\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Simplify.\n-\t(GLIBCPP_ENABLE_LONG_LONG): Same.\n-\t* aclocal.m4: Regenerate.\n-\n-\t* src/Makefile.am (c_shadow_headers): Add features.h,\n-\tbits/wrap_features.h.\n-\t* src/Makefile.in: Regenerate.\n-\t* include/c_std/features.h: New file.\n-\t* include/c_std/bits/wrap_features.h (_CPP_WRAP_FEATURES_H): New\n-\tfile. Need to have c++config.h included before this file so\n-\t_ISOC99_SOURCE around.\n-\n-\t* include/c_std/sys/cdefs.h: Hack.\n-\t* include/c_std/stdlib.h: Same, use c++config.h.\n-\t* include/c_std/bits/std_cstdlib.h: Use _GLIBCPP_HAVE_STRTOLD.\n-\n-\t* include/c_std/bits/std_cassert.h: Fix.\n-\t* include/c_std/bits/std_cerrno.h: Make consistent.\n-\n-\t* include/c_std/bits/std_csetjmp.h (setjmp): Unscope global\n-\tdeclaration from ::_C_legacy to _C_legacy.\n-\n-\t* include/c_std/bits/std_cstdio.h: same with printf.\n-\t* include/c_std/stdio.h: And here.\n-\n-\t* include/c_std/bits/std_cstdlib.h: abort, exit comment.\n-\t* include/c_std/stdlib.h: Same here.\n-\t\n 2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): New macro."}, {"sha": "a5e5e39f0eb82e2cf7c511b8879281878bb80aea", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -1433,49 +1433,6 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n ])\n \n \n-dnl\n-dnl Check for template specializations for the 'long double' type extension.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_DOUBLE\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_DOUBLE\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_DOUBLE undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_DOUBLE[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_DOUBLE\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_DOUBLE, [dnl\n-  define([GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT], ifelse($1, yes, yes, no))dnl\n-\n-  AC_ARG_ENABLE(long-double,\n-  changequote(<<, >>)dnl\n-  <<--enable-long-double      turns on 'long double' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n-  changequote([, ])dnl\n-  [case \"$enableval\" in\n-   yes) enable_long_double=yes ;;\n-   no)  enable_long_double=no ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable long double]) ;;\n-   esac],\n-  enable_long_double=GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT)dnl\n-\n-  # Check for the existance of functions used if long double is enabled.\n-  AC_CHECK_FUNC(cosl,,ac_cosl=no)\n-  AC_CHECK_FUNC(sinl,,ac_sinl=no)\n-\n-  AC_MSG_CHECKING([for enabled long double])\n-  if test x\"$ac_cosl\" = xno || test x\"$ac_sinl\" = xno; then \n-    enable_long_double=no; \n-  fi; \n-  AC_MSG_RESULT($enable_long_double)\n-\n-  dnl Option parsed, now set things appropriately\n-  if test x\"$enable_long_double\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_DOUBLE)\n-  fi\n-])\n-\n-\n dnl\n dnl Check for whether or not to do shadowed C headers.\n dnl"}, {"sha": "f9d23e53e1207b391beededdcd833ef15d58864d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -1445,49 +1445,6 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n ])\n \n \n-dnl\n-dnl Check for template specializations for the 'long double' type extension.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_DOUBLE\n-dnl --enable-long-long defines _GLIBCPP_USE_LONG_DOUBLE\n-dnl --disable-long-long leaves _GLIBCPP_USE_LONG_DOUBLE undefined\n-dnl  +  Usage:  GLIBCPP_ENABLE_LONG_DOUBLE[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n-dnl\n-dnl GLIBCPP_ENABLE_LONG_DOUBLE\n-AC_DEFUN(GLIBCPP_ENABLE_LONG_DOUBLE, [dnl\n-  define([GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT], ifelse($1, yes, yes, no))dnl\n-\n-  AC_ARG_ENABLE(long-double,\n-  changequote(<<, >>)dnl\n-  <<--enable-long-double      turns on 'long double' [default=>>GLIBCPP_ENABLE_LONG_LONG_DEFAULT],\n-  changequote([, ])dnl\n-  [case \"$enableval\" in\n-   yes) enable_long_double=yes ;;\n-   no)  enable_long_double=no ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable long double]) ;;\n-   esac],\n-  enable_long_double=GLIBCPP_ENABLE_LONG_DOUBLE_DEFAULT)dnl\n-\n-  # Check for the existance of functions used if long double is enabled.\n-  AC_CHECK_FUNC(cosl,,ac_cosl=no)\n-  AC_CHECK_FUNC(sinl,,ac_sinl=no)\n-\n-  AC_MSG_CHECKING([for enabled long double])\n-  if test x\"$ac_cosl\" = xno || test x\"$ac_sinl\" = xno; then \n-    enable_long_double=no; \n-  fi; \n-  AC_MSG_RESULT($enable_long_double)\n-\n-  dnl Option parsed, now set things appropriately\n-  if test x\"$enable_long_double\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_DOUBLE)\n-  fi\n-])\n-\n-\n dnl\n dnl Check for whether or not to do shadowed C headers.\n dnl"}, {"sha": "bda6224cda58c4231f44d3cebb0526e6c9eec981", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -9,9 +9,6 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n-// Include support for 'long double'.\n-#undef _GLIBCPP_USE_LONG_DOUBLE\n-\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n "}, {"sha": "c4e82b784c572dabde146cd4cec73cf6ada096fb", "filename": "libstdc++-v3/config/os/aix/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "24fdcdb23eac1056e9d6f9d6c8ceba65cfa2d311", "filename": "libstdc++-v3/config/os/bsd/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "bc99064b0dc51e42d60b52ad1c264c8be8a7344c", "filename": "libstdc++-v3/config/os/generic/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "63c400f2493668b5e19d73ca5151893f3f1d62ff", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(_ctype_), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "7c518406b8e8669079368459a8259664b4784bbb", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(NULL), _M_tolower(NULL),\n       _M_ctable(__ctype), _M_table(__table == 0 ? _M_ctable: __table) \n@@ -70,3 +70,4 @@\n     return __high;\n   }\n \n+"}, {"sha": "32381112d6011cff48601e50db529bffc9e762a4", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_noninline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -34,7 +34,7 @@\n // Information as gleaned from /usr/include/ctype.h\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\tsize_t __refs = 0) \n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n       _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) "}, {"sha": "526b13931dbc030d825704d954abb6cb8810e837", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 998, "deletions": 1127, "changes": 2125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=eae7a9fa922208b4f855092e69f931a27540da9b"}, {"sha": "f196740281831328ea337afac8b6cebeb44ebbbe", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -36,7 +36,6 @@ GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_LONG_LONG(yes)\n-GLIBCPP_ENABLE_LONG_DOUBLE(yes)\n GLIBCPP_ENABLE_SHADOW(no)\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY"}, {"sha": "876455bed0a16ebf47a7994f6a11dc911a8fd961", "filename": "libstdc++-v3/docs/configopts.html", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.13 2000/10/21 19:43:13 bkoz Exp $ -->\n+<!-- $Id: configopts.html,v 1.14 2000/10/25 14:41:16 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -80,13 +80,6 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         templates and the like).\n      </P>\n \n- <DT><TT>--enable-long-double </TT>\n- <DD><P>The &quot;long double&quot; type was introduced in C99.  It is\n-        provided as a GNU extension to C++98 in g++.  This flag builds\n-        support for &quot;long double&quot; into the library (specialized\n-        templates and the like).\n-     </P>\n-\n  <DT><TT>--enable-namespaces  </TT>[default]\n  <DD><P>By default, g++ currently ignores namespace <TT>std</TT> for\n         backwards compatibility.  It can be turned on with the\n@@ -192,7 +185,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.13 2000/10/21 19:43:13 bkoz Exp $\n+$Id: configopts.html,v 1.14 2000/10/25 14:41:16 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "3a8e6e5968afc9afdeee058cd4cee3d818535d42", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 320, "deletions": 243, "changes": 563, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -43,466 +43,543 @@\n \n namespace std {\n \n-  //\n-  // int\n-  //\n+  inline int \n+  abs(int i) { return i > 0 ? i : -i; }\n \n-  inline int abs(int i)\n-  { return i > 0 ? i : -i; }\n-\n-  inline long abs(long i)\n-  { return i > 0 ? i : -i; }\n-  \n-    //\n-    // float\n-    //\n+  inline long \n+  abs(long i) { return i > 0 ? i : -i; }\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSF\n-    inline float abs(float __x)\n-      { return __builtin_fabsf(__x); }\n+  inline float \n+  abs(float __x) { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n-    inline float abs(float __x)\n-      { return ::fabsf(__x); }\n+  inline float \n+  abs(float __x) { return ::fabsf(__x); }\n #else\n-    inline float abs(float __x)\n-      { return ::fabs(static_cast<double>(__x)); }\n+  inline float \n+  abs(float __x) { return ::fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ACOSF\n-    inline float acos(float __x)\n-      { return ::acosf(__x); }\n+  inline float \n+  acos(float __x) { return ::acosf(__x); }\n #else\n-    inline float acos(float __x)\n-      { return ::acos(static_cast<double>(__x)); }\n+  inline float \n+  acos(float __x) { return ::acos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ASINF\n-    inline float asin(float __x)\n-      { return ::asinf(__x); }\n+  inline float \n+  asin(float __x) { return ::asinf(__x); }\n #else\n-    inline float asin(float __x)\n-      { return ::asin(static_cast<double>(__x)); }\n+  inline float \n+  asin(float __x) { return ::asin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATANF\n-    inline float atan(float __x)\n-      { return ::atanf(__x); }\n+  inline float \n+  atan(float __x) { return ::atanf(__x); }\n #else\n-    inline float atan(float __x)\n-      { return ::atan(static_cast<double>(__x)); }\n+  inline float \n+  atan(float __x) { return ::atan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATAN2F\n-    inline float atan2(float __y, float __x)\n-      { return ::atan2f(__y, __x); }\n+  inline float \n+  atan2(float __y, float __x) { return ::atan2f(__y, __x); }\n #else\n-    inline float atan2(float __y, float __x)\n-      { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+  inline float \n+  atan2(float __y, float __x)\n+  { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_CEILF\n-    inline float ceil(float __x)\n-      { return ::ceilf(__x); }\n+  inline float \n+  ceil(float __x) { return ::ceilf(__x); }\n #else\n-    inline float ceil(float __x)\n-      { return ::ceil(static_cast<double>(__x)); }\n+  inline float \n+  ceil(float __x) { return ::ceil(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_COSF\n-    inline float cos(float __x)\n-      { return __builtin_cosf(__x); }\n+  inline float \n+  cos(float __x) { return __builtin_cosf(__x); }\n #elif _GLIBCPP_HAVE_COSF\n-    inline float cos(float __x)\n-      { return ::cosf(__x); }\n+  inline float \n+  cos(float __x) { return ::cosf(__x); }\n #else\n-    inline float cos(float __x)\n-      { return ::cos(static_cast<double>(__x)); }\n+  inline float \n+  cos(float __x) { return ::cos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_COSHF\n-    inline float cosh(float __x)\n-      { return ::coshf(__x); }\n+  inline float \n+  cosh(float __x) { return ::coshf(__x); }\n #else\n-    inline float cosh(float __x)\n-      { return ::cosh(static_cast<double>(__x)); }\n+  inline float \n+  cosh(float __x) { return ::cosh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_EXPF\n-    inline float exp(float __x)\n-      { return ::expf(__x); }\n+  inline float \n+  exp(float __x) { return ::expf(__x); }\n #else\n-    inline float exp(float __x)\n-      { return ::exp(static_cast<double>(__x)); }\n+  inline float \n+  exp(float __x) { return ::exp(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSF\n-    inline float fabs(float __x)\n-      { return __builtin_fabsf(__x); }\n+  inline float \n+  fabs(float __x) { return __builtin_fabsf(__x); }\n #elif _GLIBCPP_HAVE_FABSF\n-    inline float fabs(float __x)\n-      { return ::fabsf(__x); }\n+  inline float \n+  fabs(float __x) { return ::fabsf(__x); }\n #else\n-    inline float fabs(float __x)\n-      { return ::fabs(static_cast<double>(__x)); }\n+  inline float \n+  fabs(float __x) { return ::fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORF\n-    inline float floor(float __x)\n-      { return ::floorf(__x); }\n+  inline float \n+  floor(float __x) { return ::floorf(__x); }\n #else\n-    inline float floor(float __x)\n-      { return ::floor(static_cast<double>(__x)); }\n+  inline float \n+  floor(float __x) { return ::floor(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FMODF\n-    inline float fmod(float __x, float __y)\n-      { return ::fmodf(__x, __y); }\n+  inline float \n+  fmod(float __x, float __y) { return ::fmodf(__x, __y); }\n #else\n-    inline float fmod(float __x, float __y)\n-      { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline float \n+  fmod(float __x, float __y)\n+  { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n #if _GLIBCPP_HAVE_FREXPF\n-    inline float frexp(float __x, int* __exp)\n-      { return ::frexpf(__x, __exp); }\n+  inline float \n+  frexp(float __x, int* __exp) { return ::frexpf(__x, __exp); }\n #else\n-    inline float frexp(float __x, int* __exp)\n-      { return ::frexp(__x, __exp); }\n+  inline float \n+  frexp(float __x, int* __exp) { return ::frexp(__x, __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LDEXPF\n-    inline float ldexp(float __x, int __exp)\n-      { return ::ldexpf(__x, __exp); }\n+  inline float \n+  ldexp(float __x, int __exp) { return ::ldexpf(__x, __exp); }\n #else\n-    inline float ldexp(float __x, int __exp)\n-      { return ::ldexp(static_cast<double>(__x), __exp); }\n+  inline float \n+  ldexp(float __x, int __exp)\n+  { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LOGF\n-    inline float log(float __x)\n-      { return ::logf(__x); }\n+  inline float \n+  log(float __x) { return ::logf(__x); }\n #else\n-    inline float log(float __x)\n-      { return ::log(static_cast<double>(__x)); }\n+  inline float log(float __x)\n+  { return ::log(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_LOG10F\n-    inline float log10(float __x)\n-      { return ::log10f(__x); }\n+  inline float \n+  log10(float __x) { return ::log10f(__x); }\n #else\n-    inline float log10(float __x)\n-      { return ::log10(static_cast<double>(__x)); }\n+  inline float \n+  log10(float __x) { return ::log10(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_MODFF\n-    inline float modf(float __x, float* __iptr)\n-      { return ::modff(__x, __iptr); }\n+  inline float \n+  modf(float __x, float* __iptr) { return ::modff(__x, __iptr); }\n #else\n-    inline float modf(float __x, float* __iptr)\n-    {\n-       double __tmp;\n-       double __res = ::modf(static_cast<double>(__x), &__tmp);\n-       *__iptr = static_cast<float> (__tmp);\n-       return __res;\n-    }\n+  inline float \n+  modf(float __x, float* __iptr)\n+  {\n+    double __tmp;\n+    double __res = ::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<float>(__tmp);\n+    return __res;\n+  }\n #endif\n \n #if _GLIBCPP_HAVE_POWF\n-    inline float pow(float __x, float __y)\n-      { return ::powf(__x, __y); }\n+  inline float \n+  pow(float __x, float __y) { return ::powf(__x, __y); }\n #else\n-    inline float pow(float __x, float __y)\n-      { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+  inline float \n+  pow(float __x, float __y)\n+  { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-    float pow(float, int);\n+  float pow(float, int);\n \n #if _GLIBCPP_HAVE___BUILTIN_SINF\n-    inline float sin(float __x)\n-      { return __builtin_sinf(__x); }\n+  inline float \n+  sin(float __x) { return __builtin_sinf(__x); }\n #elif _GLIBCPP_HAVE_SINF\n-    inline float sin(float __x)\n-      { return ::sinf(__x); }\n+  inline float \n+  sin(float __x) { return ::sinf(__x); }\n #else\n-    inline float sin(float __x)\n-      { return ::sin(static_cast<double>(__x)); }\n+  inline float \n+  sin(float __x) { return ::sin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_SINHF\n-    inline float sinh(float __x)\n-      { return ::sinhf(__x); }\n+  inline float \n+  sinh(float __x) { return ::sinhf(__x); }\n #else\n-    inline float sinh(float __x)\n-      { return ::sinh(static_cast<double>(__x)); }\n+  inline float \n+  sinh(float __x) { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRTF\n-    inline float sqrt(float __x)\n-      { return __builtin_sqrtf(__x); }\n+  inline float \n+  sqrt(float __x) { return __builtin_sqrtf(__x); }\n #elif _GLIBCPP_HAVE_SQRTF\n-    inline float sqrt(float __x)\n-      { return ::sqrtf(__x); }\n+  inline float \n+  sqrt(float __x) { return ::sqrtf(__x); }\n #else\n-    inline float sqrt(float __x)\n-      { return ::sqrt(static_cast<double>(__x)); }\n+  inline float \n+  sqrt(float __x) { return ::sqrt(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANF\n-    inline float tan(float __x)\n-      { return ::tanf(__x); }\n+  inline float \n+  tan(float __x) { return ::tanf(__x); }\n #else\n-    inline float tan(float __x)\n-      { return ::tan(static_cast<double>(__x)); }\n+  inline float \n+  tan(float __x) { return ::tan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANHF\n-    inline float tanh(float __x)\n-      { return ::tanhf(__x); }\n+  inline float \n+  tanh(float __x) { return ::tanhf(__x); }\n #else\n-    inline float tanh(float __x)\n-      { return ::tanh(static_cast<double>(__x)); }\n+  inline float \n+  tanh(float __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n \n-    //\n-    // double\n-    //\n \n #if _GLIBCPP_HAVE___BUILTIN_FABS\n-    inline double abs(double __x)\n-      { return __builtin_fabs(__x); }\n+  inline double \n+  abs(double __x) { return __builtin_fabs(__x); }\n #else\n-    inline double abs(double __x)\n-      { return ::fabs(__x); }\n+  inline double \n+  abs(double __x) { return ::fabs(__x); }\n #endif\n \n-    inline double acos(double __x)\n-      { return ::acos(__x); }\n+  inline double \n+  acos(double __x) { return ::acos(__x); }\n \n-    inline double asin(double __x)\n-      { return ::asin(__x); }\n+  inline double \n+  asin(double __x) { return ::asin(__x); }\n \n-    inline double atan(double __x)\n-      { return ::atan(__x); }\n+  inline double \n+  atan(double __x) { return ::atan(__x); }\n \n-    inline double atan2(double __y, double __x)\n-      { return ::atan2(__y, __x); }\n+  inline double \n+  atan2(double __y, double __x) { return ::atan2(__y, __x); }\n \n-    inline double ceil(double __x)\n-      { return ::ceil(__x); }\n+  inline double \n+  ceil(double __x) { return ::ceil(__x); }\n \n #if _GLIBCPP_HAVE___BUILTIN_COS\n-    inline double cos(double __x)\n-      { return __builtin_cos(__x); }\n+  inline double \n+  cos(double __x) { return __builtin_cos(__x); }\n #else\n-    inline double cos(double __x)\n-      { return ::cos(__x); }\n+  inline double \n+  cos(double __x) { return ::cos(__x); }\n #endif\n \n-    inline double cosh(double __x)\n-      { return ::cosh(__x); }\n+  inline double cosh(double __x)\n+  { return ::cosh(__x); }\n \n-    inline double exp(double __x)\n-      { return ::exp(__x); }\n+  inline double \n+  exp(double __x) { return ::exp(__x); }\n \n \n #if _GLIBCPP_HAVE___BUILTIN_FABS\n-    inline double fabs(double __x)\n-      { return __builtin_fabs(__x); }\n+  inline double \n+  fabs(double __x) { return __builtin_fabs(__x); }\n #else\n-    inline double fabs(double __x)\n-      { return ::fabs(__x); }\n+  inline double \n+  fabs(double __x) { return ::fabs(__x); }\n #endif\n \n-    inline double floor(double __x)\n-      { return ::floor(__x); }\n+  inline double \n+  floor(double __x) { return ::floor(__x); }\n \n-    inline double fmod(double __x, double __y)\n-      { return ::fmod(__x, __y); }\n+  inline double \n+  fmod(double __x, double __y) { return ::fmod(__x, __y); }\n \n-    inline double frexp(double __x, int* __exp)\n-      { return ::frexp(__x, __exp); }\n+  inline double \n+  frexp(double __x, int* __exp) { return ::frexp(__x, __exp); }\n \n-    inline double ldexp(double __x, int __exp)\n-      { return ::ldexp(__x, __exp); }\n+  inline double \n+  ldexp(double __x, int __exp) { return ::ldexp(__x, __exp); }\n \n-    inline double log(double __x)\n-      { return ::log(__x); }\n+  inline double \n+  log(double __x) { return ::log(__x); }\n \n-    inline double log10(double __x)\n-      { return ::log10(__x); }\n+  inline double \n+  log10(double __x) { return ::log10(__x); }\n \n-    inline double modf(double __x, double* __iptr)\n-      { return ::modf(__x, __iptr); }\n+  inline double \n+  modf(double __x, double* __iptr) { return ::modf(__x, __iptr); }\n \n-    inline double pow(double __x, double __y)\n-      { return ::pow(__x, __y); }\n+  inline double \n+  pow(double __x, double __y) { return ::pow(__x, __y); }\n \n-    double pow (double, int);\n+  double pow (double, int);\n \n #if _GLIBCPP_HAVE___BUILTIN_SIN\n-    inline double sin(double __x)\n-      { return __builtin_sin(__x); }\n+  inline double \n+  sin(double __x) { return __builtin_sin(__x); }\n #else\n-    inline double sin(double __x)\n-      { return ::sin(__x); }\n+  inline double \n+  sin(double __x) { return ::sin(__x); }\n #endif\n \n-    inline double sinh(double __x)\n-      { return ::sinh(__x); }\n+  inline double \n+  sinh(double __x) { return ::sinh(__x); }\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRT\n-    inline double sqrt(double __x)\n-      { return __builtin_fsqrt(__x); }\n+  inline double \n+  sqrt(double __x) { return __builtin_fsqrt(__x); }\n #else\n-    inline double sqrt(double __x)\n-      { return ::sqrt(__x); }\n+  inline double \n+  sqrt(double __x) { return ::sqrt(__x); }\n #endif\n \n-    inline double tan(double __x)\n-      { return ::tan(__x); }\n+  inline double \n+  tan(double __x) { return ::tan(__x); }\n+\n+  inline double \n+  tanh(double __x) { return ::tanh(__x); }\n \n-    inline double tanh(double __x)\n-      { return ::tanh(__x); }\n \n-    //\n-    // long double\n-    //\n-#ifdef _GLIBCPP_USE_LONG_DOUBLE\n #if _GLIBCPP_HAVE___BUILTIN_FABSL\n-    inline long double abs(long double __x)\n-      { return __builtin_fabsl(__x); }\n+  inline long double \n+  abs(long double __x) { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n-    inline long double abs(long double __x)\n-      { return ::fabsl(__x); }\n+  inline long double \n+  abs(long double __x) { return ::fabsl(__x); }\n+#else\n+  inline long double \n+  abs(long double __x) { return fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ACOSL\n-    inline long double acos(long double __x)\n-      { return ::acosl(__x); }\n+  inline long double \n+  acos(long double __x) { return ::acosl(__x); }\n+#else\n+  inline long double \n+  acos(long double __x) { return ::acos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ASINL\n-    inline long double asin(long double __x)\n-      { return ::asinl(__x); }\n+  inline long double \n+  asin(long double __x) { return ::asinl(__x); }\n+#else\n+  inline long double \n+  asin(long double __x) { return ::asin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATANL\n-    inline long double atan(long double __x)\n-      { return ::atanl(__x); }\n+  inline long double \n+  atan(long double __x) { return ::atanl(__x); }\n+#else\n+  inline long double \n+  atan(long double __x) { return ::atan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_ATAN2L\n-    inline long double atan2(long double __y, long double __x)\n-      { return ::atan2l(__y, __x); }\n+  inline long double \n+  atan2(long double __y, long double __x) { return ::atan2l(__y, __x); }\n+#else\n+  inline long double \n+  atan2(long double __y, long double __x) \n+  { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_CEILL\n-    inline long double ceil(long double __x)\n-      { return ::ceill(__x); }\n+  inline long double \n+  ceil(long double __x) { return ::ceill(__x); }\n+#else\n+  inline long double \n+  ceil(long double __x) { return ::ceil(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_COSL\n-    inline long double cos(long double __x)\n-      { return __builtin_cosl(__x); }\n+  inline long double \n+  cos(long double __x) { return __builtin_cosl(__x); }\n #elif _GLIBCPP_HAVE_COSL\n-    inline long double cos(long double __x)\n-      { return ::cosl(__x); }\n+  inline long double \n+  cos(long double __x) { return ::cosl(__x); }\n+#else\n+  inline long double \n+  cos(long double __x) { return ::cos(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_COSHL\n-    inline long double cosh(long double __x)\n-      { return ::coshl(__x); }\n+  inline long double \n+  cosh(long double __x) { return ::coshl(__x); }\n+#else\n+  inline long double \n+  cosh(long double __x) { return ::cosh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_EXPL\n-    inline long double exp(long double __x)\n-      { return ::expl(__x); }\n+  inline long double \n+  exp(long double __x) { return ::expl(__x); }\n+#else\n+  inline long double \n+  exp(long double __x) { return ::exp(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_FABSL\n-    inline long double fabs(long double __x)\n-      { return __builtin_fabsl(__x); }\n+  inline long double \n+  fabs(long double __x) { return __builtin_fabsl(__x); }\n #elif _GLIBCPP_HAVE_FABSL\n-    inline long double fabs(long double __x)\n-      { return ::fabsl(__x); }\n+  inline long double \n+  fabs(long double __x) { return ::fabsl(__x); }\n+#else\n+  inline long double \n+  fabs(long double __x) { return ::fabs(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORL\n-    inline long double floor(long double __x)\n-      { return ::floorl(__x); }\n+  inline long double \n+  floor(long double __x) { return ::floorl(__x); }\n+#else\n+  inline long double \n+  floor(long double __x) { return ::floor(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_FMODL\n-    inline long double fmod(long double __x, long double __y)\n-      { return ::fmodl(__x, __y); }\n+  inline long double \n+  fmod(long double __x, long double __y) { return ::fmodl(__x, __y); }\n+#else\n+  inline long double \n+  fmod(long double __x, long double __y) \n+  { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n #if _GLIBCPP_HAVE_FREXPL\n-    inline long double frexp(long double __x, int* __exp)\n-      { return ::frexpl(__x, __exp); }\n+  inline long double \n+  frexp(long double __x, int* __exp) { return ::frexpl(__x, __exp); }\n+#else\n+  inline long double \n+  frexp(long double __x, int* __exp) \n+  { return ::frexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LDEXPL\n-    inline long double ldexp(long double __x, int __exp)\n-      { return ::ldexpl(__x, __exp); }\n+  inline long double \n+  ldexp(long double __x, int __exp) { return ::ldexpl(__x, __exp); }\n+#else\n+  inline long double \n+  ldexp(long double __x, int __exp) \n+  { return ::ldexp(static_cast<double>(__x), __exp); }\n #endif\n \n #if _GLIBCPP_HAVE_LOGL\n-    inline long double log(long double __x)\n-      { return ::logl(__x); }\n+  inline long double \n+  log(long double __x) { return ::logl(__x); }\n+#else\n+  inline long double \n+  log(long double __x) { return ::log(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_LOG10L\n-    inline long double log10(long double __x)\n-      { return ::log10l(__x); }\n+  inline long double \n+  log10(long double __x) { return ::log10l(__x); }\n+#else\n+  inline long double \n+  log10(long double __x) { return ::log10(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_MODFL\n-    inline long double modf(long double __x, long double* __iptr)\n-      { return ::modfl(__x, __iptr); }\n+  inline long double \n+  modf(long double __x, long double* __iptr) { return ::modfl(__x, __iptr); }\n+#else\n+  inline long double \n+  modf(long double __x, long double* __iptr) \n+  { \n+    double __tmp;\n+    double __res = ::modf(static_cast<double>(__x), &__tmp);\n+    * __iptr = static_cast<long double>(__tmp);\n+    return __res;\n+  }\n #endif\n \n #if _GLIBCPP_HAVE_POWL\n-    inline long double pow(long double __x, long double __y)\n-      { return ::powl(__x, __y); }\n+  inline long double \n+  pow(long double __x, long double __y) { return ::powl(__x, __y); }\n+#else\n+  inline long double \n+  pow(long double __x, long double __y) \n+  { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-    long double pow(long double, int);\n+  long double \n+  pow(long double, int);\n \n #if _GLIBCPP_HAVE___BUILTIN_SINL\n-    inline long double sin(long double __x)\n-      { return __builtin_sinl(__x); }\n+  inline long double \n+  sin(long double __x) { return __builtin_sinl(__x); }\n #elif _GLIBCPP_HAVE_SINL\n-    inline long double sin(long double __x)\n-      { return ::sinl(__x); }\n+  inline long double \n+  sin(long double __x) { return ::sinl(__x); }\n+#else\n+  inline long double \n+  sin(long double __x) { return ::sin(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_SINHL\n-    inline long double sinh(long double __x)\n-      { return ::sinhl(__x); }\n+  inline long double \n+  sinh(long double __x) { return ::sinhl(__x); }\n+#else\n+  inline long double \n+  sinh(long double __x) { return ::sinh(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRTL\n-    inline long double sqrt(long double __x)\n-      { return __builtin_sqrtl(__x); }\n+  inline long double \n+  sqrt(long double __x) { return __builtin_sqrtl(__x); }\n #elif _GLIBCPP_HAVE_SQRTL\n-    inline long double sqrt(long double __x)\n-      { return ::sqrtl(__x); }\n+  inline long double \n+  sqrt(long double __x) { return ::sqrtl(__x); }\n+#else\n+  inline long double \n+  sqrt(long double __x) { return ::sqrt(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANL\n-    inline long double tan(long double __x)\n-      { return ::tanl(__x); }\n+  inline long double \n+  tan(long double __x) { return ::tanl(__x); }\n+#else\n+  inline long double \n+  tan(long double __x) { return ::tan(static_cast<double>(__x)); }\n #endif\n \n #if _GLIBCPP_HAVE_TANHL\n-    inline long double tanh(long double __x)\n-      { return ::tanhl(__x); }\n+  inline long double \n+  tanh(long double __x) { return ::tanhl(__x); }\n+#else\n+  inline long double \n+  tanh(long double __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n-\n-#endif // _GLIBCPP_USE_LONG_DOUBLE\n } // std\n \n #endif // _CPP_CMATH\n \n \n+\n+\n+\n+\n+\n+\n+"}, {"sha": "221b81578859d626d2f8f1cc53e3c6e922469897", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -330,7 +330,6 @@ namespace _C_legacy {\n   inline double \n   _CPP_tanh_capture(double __x) { return tanh(__x); }\n \n-#ifdef _GLIBCPP_USE_LONG_DOUBLE\n #if _GLIBCPP_HAVE_ACOSL\n   inline long double \n   _CPP_acos_capture(long double __x) { return acosl(__x); }\n@@ -535,7 +534,6 @@ namespace _C_legacy {\n   inline long double \n   _CPP_tanh_capture(long double __x) { return tanh(static_cast<double>(__x)); }\n #endif\n-#endif // _GLIBCPP_USE_LONG_DOUBLE\n } // namespace _C_legacy\n \n # undef abs\n@@ -718,7 +716,6 @@ namespace std {\n   inline double \n   tanh(double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n \n-#ifdef _GLIBCPP_USE_LONG_DOUBLE\n   inline long double \n   abs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n \n@@ -796,7 +793,6 @@ namespace std {\n \n   inline long double \n   tanh(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n-#endif // _GLIBCPP_USE_LONG_DOUBLE\n \n } // namespace std\n "}, {"sha": "d904e2420b9c8ecfaa07822ce59d0bc5de536ec6", "filename": "libstdc++-v3/src/complexl.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7a9fa922208b4f855092e69f931a27540da9b/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc?ref=eae7a9fa922208b4f855092e69f931a27540da9b", "patch": "@@ -1,7 +1,3 @@\n-#include <bits/c++config.h>\n-#ifdef _GLIBCPP_USE_LONG_DOUBLE\n-/* We compile these functions only when we have the long double functions\n-   available.  */\n #define FLT long double\n #include \"complex.cc\"\n-#endif\n+"}]}