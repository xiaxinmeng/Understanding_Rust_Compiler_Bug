{"sha": "d75d4293dcc029a7b00f902d9b03416c9439af4d", "node_id": "C_kwDOANBUbNoAKGQ3NWQ0MjkzZGNjMDI5YTdiMDBmOTAyZDliMDM0MTZjOTQzOWFmNGQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-13T21:26:29Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-13T21:30:47Z"}, "message": "Improved V1TI (and V2DI) mode equality/inequality on x86_64.\n\nThis patch improves support for vector equality and inequality of\nV1TImode vectors, and V2DImode vectors with sse2 but not sse4.\nConsider the three functions below:\n\ntypedef unsigned int uv4si __attribute__ ((__vector_size__ (16)));\ntypedef unsigned long long uv2di __attribute__ ((__vector_size__ (16)));\ntypedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n\nuv4si eq_v4si(uv4si x, uv4si y) { return x == y; }\nuv2di eq_v2di(uv2di x, uv2di y) { return x == y; }\nuv1ti eq_v1ti(uv1ti x, uv1ti y) { return x == y; }\n\nThese all perform vector comparisons of 128bit SSE2 registers, generating\nthe result as a vector, where ~0 (all 1 bits) represents true and a zero\nrepresents false.  eq_v4si is trivially implemented by x86_64's pcmpeqd\ninstruction. This patch improves the other two cases:\n\nFor v2di, gcc -O2 currently generates:\n\n\tmovq    %xmm0, %rdx\n        movq    %xmm1, %rax\n        movdqa  %xmm0, %xmm2\n        cmpq    %rax, %rdx\n        movhlps %xmm2, %xmm3\n        movhlps %xmm1, %xmm4\n        sete    %al\n        movq    %xmm3, %rdx\n        movzbl  %al, %eax\n        negq    %rax\n        movq    %rax, %xmm0\n        movq    %xmm4, %rax\n        cmpq    %rax, %rdx\n        sete    %al\n        movzbl  %al, %eax\n        negq    %rax\n        movq    %rax, %xmm5\n        punpcklqdq      %xmm5, %xmm0\n        ret\n\nbut with this patch we now generate:\n\n        pcmpeqd %xmm0, %xmm1\n        pshufd  $177, %xmm1, %xmm0\n        pand    %xmm1, %xmm0\n        ret\n\nwhere the results of a V4SI comparison are shuffled and bit-wise ANDed\nto produce the desired result.  There's no change in the code generated\nfor \"-O2 -msse4\" where the compiler generates a single \"pcmpeqq\" insn.\n\nFor V1TI mode, the results are equally dramatic, where the current -O2\noutput looks like:\n\n        movaps  %xmm0, -40(%rsp)\n        movq    -40(%rsp), %rax\n        movq    -32(%rsp), %rdx\n        movaps  %xmm1, -24(%rsp)\n        movq    -24(%rsp), %rcx\n        movq    -16(%rsp), %rsi\n        xorq    %rcx, %rax\n        xorq    %rsi, %rdx\n        orq     %rdx, %rax\n        sete    %al\n        xorl    %edx, %edx\n        movzbl  %al, %eax\n        negq    %rax\n        adcq    $0, %rdx\n        movq    %rax, %xmm2\n        negq    %rdx\n        movq    %rdx, -40(%rsp)\n        movhps  -40(%rsp), %xmm2\n        movdqa  %xmm2, %xmm0\n        ret\n\nwith this patch we now generate:\n\n        pcmpeqd %xmm0, %xmm1\n        pshufd  $177, %xmm1, %xmm0\n        pand    %xmm1, %xmm0\n        pshufd  $78, %xmm0, %xmm1\n        pand    %xmm1, %xmm0\n        ret\n\nperforming a V2DI comparison, followed by a shuffle and pand, and with\n-O2 -msse4 take advantages of SSE4.1's pcmpeqq:\n\n        pcmpeqq %xmm0, %xmm1\n        pshufd  $78, %xmm1, %xmm0\n        pand    %xmm1, %xmm0\n        ret\n\n2022-05-13  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/sse.md (vec_cmpeqv2div2di): Enable for TARGET_SSE2.\n\tFor !TARGET_SSE4_1, expand as a V4SI vector comparison, followed\n\tby a pshufd and pand.\n\t(vec_cmpeqv1tiv1ti): New define_expand implementing V1TImode\n\tvector equality as a V2DImode vector comparison (see above),\n\tfollowed by a pshufd and pand.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-v1ti-veq.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-vne.c: New test case.", "tree": {"sha": "99bdb13b7dea11771d72f29801326046d4244765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bdb13b7dea11771d72f29801326046d4244765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d75d4293dcc029a7b00f902d9b03416c9439af4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75d4293dcc029a7b00f902d9b03416c9439af4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75d4293dcc029a7b00f902d9b03416c9439af4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75d4293dcc029a7b00f902d9b03416c9439af4d/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e678a2c4a76433fd4029568d28530c921e11ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e678a2c4a76433fd4029568d28530c921e11ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e678a2c4a76433fd4029568d28530c921e11ee"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "88fc5216a589cd2d954d53a9371f14558e5c4c20", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d75d4293dcc029a7b00f902d9b03416c9439af4d", "patch": "@@ -4390,13 +4390,57 @@\n \t(match_operator:V2DI 1 \"\"\n \t  [(match_operand:V2DI 2 \"register_operand\")\n \t   (match_operand:V2DI 3 \"vector_operand\")]))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_SSE2\"\n {\n-  bool ok = ix86_expand_int_vec_cmp (operands);\n+  bool ok;\n+  if (!TARGET_SSE4_1)\n+    {\n+      rtx ops[4];\n+      ops[0] = gen_reg_rtx (V4SImode);\n+      ops[2] = gen_lowpart (V4SImode, force_reg (V2DImode, operands[2]));\n+      ops[3] = gen_lowpart (V4SImode, force_reg (V2DImode, operands[3]));\n+      ops[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]), V4SImode,\n+\t\t\t       ops[2], ops[3]);\n+      ok = ix86_expand_int_vec_cmp (ops);\n+\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_sse2_pshufd (tmp1, ops[0], GEN_INT (0xb1)));\n+\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_andv4si3 (tmp2, tmp1, ops[0]));\n+\n+      emit_move_insn (operands[0], gen_lowpart (V2DImode, tmp2));\n+    }\n+  else\n+    ok = ix86_expand_int_vec_cmp (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n+(define_expand \"vec_cmpeqv1tiv1ti\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(match_operator:V1TI 1 \"\"\n+\t  [(match_operand:V1TI 2 \"register_operand\")\n+\t   (match_operand:V1TI 3 \"vector_operand\")]))]\n+  \"TARGET_SSE2\"\n+{\n+  rtx dst = gen_reg_rtx (V2DImode);\n+  rtx op1 = gen_lowpart (V2DImode, force_reg (V1TImode, operands[2]));\n+  rtx op2 = gen_lowpart (V2DImode, force_reg (V1TImode, operands[3]));\n+  rtx cmp = gen_rtx_fmt_ee (GET_CODE (operands[1]), V2DImode, op1, op2);\n+  emit_insn (gen_vec_cmpeqv2div2di (dst, cmp, op1, op2));\n+\n+  rtx tmp1 = gen_reg_rtx (V4SImode);\n+  rtx tmp2 = gen_lowpart (V4SImode, dst);\n+  emit_insn (gen_sse2_pshufd (tmp1, tmp2, GEN_INT (0x4e)));\n+\n+  rtx tmp3 = gen_reg_rtx (V4SImode);\n+  emit_insn (gen_andv4si3 (tmp3, tmp2, tmp1));\n+\n+  emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp3));\n+  DONE;\n+})\n+\n (define_expand \"vcond<V_512:mode><VF_512:mode>\"\n   [(set (match_operand:V_512 0 \"register_operand\")\n \t(if_then_else:V_512"}, {"sha": "b3837c483ee6e54263af92bb91554048a47c9ddc", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-veq.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-veq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-veq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-veq.c?ref=d75d4293dcc029a7b00f902d9b03416c9439af4d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+typedef unsigned long long uv2di __attribute__ ((__vector_size__ (16)));\n+typedef unsigned int uv4si __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti eq_v1ti(uv1ti x, uv1ti y) { return x == y; }\n+uv2di eq_v2di(uv2di x, uv2di y) { return x == y; }\n+uv4si eq_v4si(uv4si x, uv4si y) { return x == y; }\n+\n+/* { dg-final { scan-assembler-times \"pcmpeq\" 3 } } */\n+/* { dg-final { scan-assembler \"pshufd\" } } */"}, {"sha": "767b0e4b3ac6351041fd2584420575965a5c72d0", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-vne.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-vne.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d4293dcc029a7b00f902d9b03416c9439af4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-vne.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-vne.c?ref=d75d4293dcc029a7b00f902d9b03416c9439af4d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+typedef unsigned long long uv2di __attribute__ ((__vector_size__ (16)));\n+typedef unsigned int uv4si __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti eq_v1ti(uv1ti x, uv1ti y) { return x != y; }\n+uv2di eq_v2di(uv2di x, uv2di y) { return x != y; }\n+uv4si eq_v4si(uv4si x, uv4si y) { return x != y; }\n+\n+/* { dg-final { scan-assembler-times \"pcmpeq\" 6 } } */\n+/* { dg-final { scan-assembler-times \"pxor\" 3 } } */\n+/* { dg-final { scan-assembler \"pshufd\" } } */"}]}