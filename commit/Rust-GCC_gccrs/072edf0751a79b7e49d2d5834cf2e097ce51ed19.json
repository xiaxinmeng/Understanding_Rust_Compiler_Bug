{"sha": "072edf0751a79b7e49d2d5834cf2e097ce51ed19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyZWRmMDc1MWE3OWI3ZTQ5ZDJkNTgzNGNmMmUwOTdjZTUxZWQxOQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-06-09T22:09:28Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-06-09T22:09:28Z"}, "message": "Fix comments and indentation.\n\n2010-06-09  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-poly.h: Fix comments and indentation.\n\t* graphite-sese-to-poly.c: Same.\n\t(build_sese_conditions_before): Compute stmt and gbb only when needed.\n\t* tree-chrec.c: Fix comments and indentation.\n\t(tree-ssa-loop-niter.c): Same.\n\nFrom-SVN: r160508", "tree": {"sha": "d84c1a8d9648f7dcd505bd39e0953b1994054393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84c1a8d9648f7dcd505bd39e0953b1994054393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/072edf0751a79b7e49d2d5834cf2e097ce51ed19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072edf0751a79b7e49d2d5834cf2e097ce51ed19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072edf0751a79b7e49d2d5834cf2e097ce51ed19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072edf0751a79b7e49d2d5834cf2e097ce51ed19/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642d55de0e40c7bf59ab0043aeae756f004488dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642d55de0e40c7bf59ab0043aeae756f004488dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642d55de0e40c7bf59ab0043aeae756f004488dc"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "dddb0d6967da48715d40a40e504702264a13c17b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=072edf0751a79b7e49d2d5834cf2e097ce51ed19", "patch": "@@ -1,3 +1,11 @@\n+2010-06-09  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-poly.h: Fix comments and indentation.\n+\t* graphite-sese-to-poly.c: Same.\n+\t(build_sese_conditions_before): Compute stmt and gbb only when needed.\n+\t* tree-chrec.c: Fix comments and indentation.\n+\t(tree-ssa-loop-niter.c): Same.\n+\n 2010-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/42461"}, {"sha": "5f858ebaad563aa769e4a4608a3165a15653deba", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=072edf0751a79b7e49d2d5834cf2e097ce51ed19", "patch": "@@ -388,6 +388,7 @@ number_of_write_pdrs (poly_bb_p pbb)\n }\n \n /* The basic block of the PBB.  */\n+\n static inline basic_block\n pbb_bb (poly_bb_p pbb)\n {"}, {"sha": "617c57b8f17479b1cba4f2286c7331662b8181ed", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=072edf0751a79b7e49d2d5834cf2e097ce51ed19", "patch": "@@ -1328,8 +1328,7 @@ add_condition_to_pbb (poly_bb_p pbb, gimple stmt, enum tree_code code)\n \t(&right, left);\n       add_condition_to_domain (left, stmt, pbb, LT_EXPR);\n       add_condition_to_domain (right, stmt, pbb, GT_EXPR);\n-      ppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (left,\n-\t\t\t\t\t\t\t       right);\n+      ppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (left, right);\n       ppl_delete_Pointset_Powerset_C_Polyhedron (right);\n     }\n   else\n@@ -1344,20 +1343,19 @@ add_conditions_to_domain (poly_bb_p pbb)\n   unsigned int i;\n   gimple stmt;\n   gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n-  VEC (gimple, heap) *conditions = GBB_CONDITIONS (gbb);\n \n-  if (VEC_empty (gimple, conditions))\n+  if (VEC_empty (gimple, GBB_CONDITIONS (gbb)))\n     return;\n \n-  for (i = 0; VEC_iterate (gimple, conditions, i, stmt); i++)\n+  for (i = 0; VEC_iterate (gimple, GBB_CONDITIONS (gbb), i, stmt); i++)\n     switch (gimple_code (stmt))\n       {\n       case GIMPLE_COND:\n \t  {\n \t    enum tree_code code = gimple_cond_code (stmt);\n \n \t    /* The conditions for ELSE-branches are inverted.  */\n-\t    if (VEC_index (gimple, gbb->condition_cases, i) == NULL)\n+\t    if (!VEC_index (gimple, GBB_CONDITION_CASES (gbb), i))\n \t      code = invert_tree_comparison (code, false);\n \n \t    add_condition_to_pbb (pbb, stmt, code);\n@@ -1409,12 +1407,14 @@ build_sese_conditions_before (struct dom_walk_data *dw_data,\n   struct bsc *data = (struct bsc *) dw_data->global_data;\n   VEC (gimple, heap) **conditions = data->conditions;\n   VEC (gimple, heap) **cases = data->cases;\n-  gimple_bb_p gbb = gbb_from_bb (bb);\n-  gimple stmt = single_pred_cond (bb);\n+  gimple_bb_p gbb;\n+  gimple stmt;\n \n   if (!bb_in_sese_p (bb, data->region))\n     return;\n \n+  stmt = single_pred_cond (bb);\n+\n   if (stmt)\n     {\n       edge e = single_pred_edge (bb);\n@@ -1427,6 +1427,8 @@ build_sese_conditions_before (struct dom_walk_data *dw_data,\n \tVEC_safe_push (gimple, heap, *cases, NULL);\n     }\n \n+  gbb = gbb_from_bb (bb);\n+\n   if (gbb)\n     {\n       GBB_CONDITIONS (gbb) = VEC_copy (gimple, heap, *conditions);\n@@ -2924,6 +2926,7 @@ scop_canonicalize_loops (scop_p scop)\n /* Can all ivs be represented by a signed integer?\n    As CLooG might generate negative values in its expressions, signed loop ivs\n    are required in the backend. */\n+\n static bool\n scop_ivs_can_be_represented (scop_p scop)\n {\n@@ -2941,7 +2944,7 @@ scop_ivs_can_be_represented (scop_p scop)\n       if (!loop->single_iv)\n \tcontinue;\n \n-      type = TREE_TYPE(loop->single_iv);\n+      type = TREE_TYPE (loop->single_iv);\n       precision = TYPE_PRECISION (type);\n \n       if (TYPE_UNSIGNED (type)"}, {"sha": "2d152858c4d6809a392c8f103fba0dc7e3b2fb2d", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=072edf0751a79b7e49d2d5834cf2e097ce51ed19", "patch": "@@ -1230,13 +1230,15 @@ convert_affine_scev (struct loop *loop, tree type,\n }\n \f\n \n-/* Convert CHREC for the right hand side of a CREC.\n+/* Convert CHREC for the right hand side of a CHREC.\n    The increment for a pointer type is always sizetype.  */\n+\n tree\n chrec_convert_rhs (tree type, tree chrec, gimple at_stmt)\n {\n   if (POINTER_TYPE_P (type))\n-   type = sizetype;\n+    type = sizetype;\n+\n   return chrec_convert (type, chrec, at_stmt);\n }\n "}, {"sha": "c0c89113d41496a425c77165d345131e896717fb", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072edf0751a79b7e49d2d5834cf2e097ce51ed19/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=072edf0751a79b7e49d2d5834cf2e097ce51ed19", "patch": "@@ -875,11 +875,11 @@ assert_loop_rolls_lt (tree type, affine_iv *iv0, affine_iv *iv1,\n      -step + 1 <= (iv1->base - iv0->base) <= MAX - step + 1\n \n      (where MAX is the maximum value of the unsigned variant of TYPE, and\n-     the computations in this formula are performed in full precision\n-     (without overflows).\n+     the computations in this formula are performed in full precision,\n+     i.e., without overflows).\n \n      Usually, for loops with exit condition iv0->base + step * i < iv1->base,\n-     we have a condition of form iv0->base - step < iv1->base before the loop,\n+     we have a condition of the form iv0->base - step < iv1->base before the loop,\n      and for loops iv0->base < iv1->base - step * i the condition\n      iv0->base < iv1->base + step, due to loop header copying, which enable us\n      to prove the lower bound."}]}