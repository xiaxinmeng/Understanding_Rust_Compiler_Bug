{"sha": "e43257e81709a7c2f3d6f08623c1e6331b71a92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzMjU3ZTgxNzA5YTdjMmYzZDZmMDg2MjNjMWU2MzMxYjcxYTkyYQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-07-13T08:51:18Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-07-13T08:51:18Z"}, "message": "ifcvt.c (ifcvt_after_combine): New static variable.\n\n\t* ifcvt.c (ifcvt_after_combine): New static variable.\n\t(cheap_bb_rtx_cost_p): Set scale to REG_BR_PROB_BASE when optimizing\n\tfor size.\n\t(if_convert): New parameter after_combine.  Set ifcvt_after_combine.\n\t(rest_of_handle_if_conversion, rest_of_handle_if_after_combine,\n\trest_of_handle_if_after_reload): Pass new argument for if_convert.\n\nFrom-SVN: r200936", "tree": {"sha": "4b0211ebdea0bf8fbcfb0abce7580c5407e24e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0211ebdea0bf8fbcfb0abce7580c5407e24e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e43257e81709a7c2f3d6f08623c1e6331b71a92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43257e81709a7c2f3d6f08623c1e6331b71a92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43257e81709a7c2f3d6f08623c1e6331b71a92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43257e81709a7c2f3d6f08623c1e6331b71a92a/comments", "author": null, "committer": null, "parents": [{"sha": "937060bda42fba1ea592d2314ab3ec136faa1da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937060bda42fba1ea592d2314ab3ec136faa1da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937060bda42fba1ea592d2314ab3ec136faa1da0"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "61082beb3ee386bb4f7c004180d45900c4fb15e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43257e81709a7c2f3d6f08623c1e6331b71a92a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43257e81709a7c2f3d6f08623c1e6331b71a92a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e43257e81709a7c2f3d6f08623c1e6331b71a92a", "patch": "@@ -1,3 +1,12 @@\n+2013-07-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* ifcvt.c (ifcvt_after_combine): New static variable.\n+\t(cheap_bb_rtx_cost_p): Set scale to REG_BR_PROB_BASE when optimizing\n+\tfor size.\n+\t(if_convert): New parameter after_combine.  Set ifcvt_after_combine.\n+\t(rest_of_handle_if_conversion, rest_of_handle_if_after_combine,\n+\trest_of_handle_if_after_reload): Pass new argument for if_convert.\n+\n 2013-07-12  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* config/mips/mips.c (mips_expand_call): Remove empty statement."}, {"sha": "b149d54c793bcb7b2e765c193982ccf715cd287a", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e43257e81709a7c2f3d6f08623c1e6331b71a92a/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e43257e81709a7c2f3d6f08623c1e6331b71a92a/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e43257e81709a7c2f3d6f08623c1e6331b71a92a", "patch": "@@ -67,6 +67,9 @@\n \n #define NULL_BLOCK\t((basic_block) NULL)\n \n+/* True if after combine pass.  */\n+static bool ifcvt_after_combine;\n+\n /* # of IF-THEN or IF-THEN-ELSE blocks we looked at  */\n static int num_possible_if_blocks;\n \n@@ -141,11 +144,24 @@ cheap_bb_rtx_cost_p (const_basic_block bb, int scale, int max_cost)\n   rtx insn = BB_HEAD (bb);\n   bool speed = optimize_bb_for_speed_p (bb);\n \n+  /* Set scale to REG_BR_PROB_BASE to void the identical scaling\n+     applied to insn_rtx_cost when optimizing for size.  Only do\n+     this after combine because if-conversion might interfere with\n+     passes before combine.\n+\n+     Use optimize_function_for_speed_p instead of the pre-defined\n+     variable speed to make sure it is set to same value for all\n+     basic blocks in one if-conversion transformation.  */\n+  if (!optimize_function_for_speed_p (cfun) && ifcvt_after_combine)\n+    scale = REG_BR_PROB_BASE;\n   /* Our branch probability/scaling factors are just estimates and don't\n      account for cases where we can get speculation for free and other\n      secondary benefits.  So we fudge the scale factor to make speculating\n-     appear a little more profitable.  */\n-  scale += REG_BR_PROB_BASE / 8;\n+     appear a little more profitable when optimizing for performance.  */\n+  else\n+    scale += REG_BR_PROB_BASE / 8;\n+\n+\n   max_cost *= scale;\n \n   while (1)\n@@ -4337,10 +4353,11 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n   return FALSE;\n }\n \f\n-/* Main entry point for all if-conversion.  */\n+/* Main entry point for all if-conversion.  AFTER_COMBINE is true if\n+   we are after combine pass.  */\n \n static void\n-if_convert (void)\n+if_convert (bool after_combine)\n {\n   basic_block bb;\n   int pass;\n@@ -4351,6 +4368,8 @@ if_convert (void)\n       df_live_set_all_dirty ();\n     }\n \n+  /* Record whether we are after combine pass.  */\n+  ifcvt_after_combine = after_combine;\n   num_possible_if_blocks = 0;\n   num_updated_if_blocks = 0;\n   num_true_changes = 0;\n@@ -4454,7 +4473,7 @@ rest_of_handle_if_conversion (void)\n \t  dump_flow_info (dump_file, dump_flags);\n \t}\n       cleanup_cfg (CLEANUP_EXPENSIVE);\n-      if_convert ();\n+      if_convert (false);\n     }\n \n   cleanup_cfg (0);\n@@ -4495,7 +4514,7 @@ gate_handle_if_after_combine (void)\n static unsigned int\n rest_of_handle_if_after_combine (void)\n {\n-  if_convert ();\n+  if_convert (true);\n   return 0;\n }\n \n@@ -4530,7 +4549,7 @@ gate_handle_if_after_reload (void)\n static unsigned int\n rest_of_handle_if_after_reload (void)\n {\n-  if_convert ();\n+  if_convert (true);\n   return 0;\n }\n "}]}