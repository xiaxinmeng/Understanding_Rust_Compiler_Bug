{"sha": "24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlMWVlMzIxOTIxZWVkOGY5ZGM1OGNkMDk5ZmQ5ZDBmZjA5MGNlNA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-25T19:50:13Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-25T19:50:13Z"}, "message": "In gcc/objc/: 2010-11-25 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-11-25  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_build_struct): Install TYPE_OBJC_INTERFACE\n\tafter finish_struct, not before, otherwise it may be wiped out by\n\tit.  This fixes spurious warnings when a class has more than 15\n\tinstance variables.\n\nIn gcc/testsuite/:\n2010-11-25  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/ivar-problem-1.m: New.\n\t* obj-c++.dg/ivar-problem-1.mm: New.\n\nFrom-SVN: r167151", "tree": {"sha": "241bfa9c44f647a87ab4413710fcd768e6e2a2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241bfa9c44f647a87ab4413710fcd768e6e2a2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92724e1d707ea2821c9a94517ba3b830f84eb296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92724e1d707ea2821c9a94517ba3b830f84eb296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92724e1d707ea2821c9a94517ba3b830f84eb296"}], "stats": {"total": 168, "additions": 160, "deletions": 8}, "files": [{"sha": "fb1ee6a4de357b0e9df688321a995e05117d8e4b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "patch": "@@ -1,3 +1,10 @@\n+2010-11-25  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_build_struct): Install TYPE_OBJC_INTERFACE\n+\tafter finish_struct, not before, otherwise it may be wiped out by\n+\tit.  This fixes spurious warnings when a class has more than 15\n+\tinstance variables.\n+\n 2010-11-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/24358"}, {"sha": "042fa359a4f4c8763c67532c265d4983f92cd54e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "patch": "@@ -2137,10 +2137,15 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n       fields = base;\n     }\n \n-  /* NB: Calling finish_struct() may cause type TYPE_LANG_SPECIFIC fields\n-     in all variants of this RECORD_TYPE to be clobbered, but it is therein\n-     that we store protocol conformance info (e.g., 'NSObject <MyProtocol>').\n-     Hence, we must squirrel away the ObjC-specific information before calling\n+  /* NB: Calling finish_struct() may cause type TYPE_LANG_SPECIFIC\n+     fields in all variants of this RECORD_TYPE to be clobbered (this\n+     is because the C frontend stores a sorted version of the list of\n+     fields in lang_type if it deems appropriate, and will update and\n+     propagate that list to all variants ignoring the fact that we use\n+     lang_type for something else and that such propagation will wipe\n+     the objc_info away), but it is therein that we store protocol\n+     conformance info (e.g., 'NSObject <MyProtocol>').  Hence, we must\n+     squirrel away the ObjC-specific information before calling\n      finish_struct(), and then reinstate it afterwards.  */\n \n   for (t = TYPE_NEXT_VARIANT (s); t; t = TYPE_NEXT_VARIANT (t))\n@@ -2153,12 +2158,16 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n       VEC_safe_push (tree, heap, objc_info, TYPE_OBJC_INFO (t));\n     }\n \n-  /* Point the struct at its related Objective-C class.  */\n-  INIT_TYPE_OBJC_INFO (s);\n-  TYPE_OBJC_INTERFACE (s) = klass;\n-\n   s = objc_finish_struct (s, fields);\n \n+  /* Point the struct at its related Objective-C class.  We do this\n+     after calling finish_struct() because otherwise finish_struct()\n+     would wipe TYPE_OBJC_INTERFACE() out.  */\n+  if (!TYPE_HAS_OBJC_INFO (s))\n+    INIT_TYPE_OBJC_INFO (s);\n+\n+  TYPE_OBJC_INTERFACE (s) = klass;\n+\n   for (i = 0, t = TYPE_NEXT_VARIANT (s); t; t = TYPE_NEXT_VARIANT (t), i++)\n     {\n       TYPE_OBJC_INFO (t) = VEC_index (tree, objc_info, i);"}, {"sha": "9af459fddb6191e268360cb9fc8ab1c6c465eeb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "patch": "@@ -1,3 +1,8 @@\n+2010-11-25  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/ivar-problem-1.m: New.\n+\t* obj-c++.dg/ivar-problem-1.mm: New.\n+\n 2010-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/46637"}, {"sha": "4ed5afaf4ef3b3122cdaf971484a764363c18267", "filename": "gcc/testsuite/obj-c++.dg/ivar-problem-1.mm", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-problem-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-problem-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-problem-1.mm?ref=24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "patch": "@@ -0,0 +1,66 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* This test checks what happens if there are 16 instance variables.\n+   In that case, the class was not created correctly.  In this testcase,\n+   we have two classes, one with 15 variables and one with 16.  Older\n+   GCCs would generate a bogus warning for the second class but not \n+   for the first one.  This only happened for ObjC, but it's good to\n+   test ObjC++ as well.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+\n+@interface MyRootClass1\n+{\n+  Class isa;\n+  int v2;\n+  int v3;\n+  int v4;\n+  int v5;\n+  int v6;\n+  int v7;\n+  int v8;\n+  int v9;\n+  int v10;\n+  int v11;\n+  int v12;\n+  int v13;\n+  int v14;\n+  int v15;\n+}\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass1\n+- (id) init { return self; }\n+@end\n+\n+\n+@interface MyRootClass2\n+{\n+  Class isa;\n+  int v2;\n+  int v3;\n+  int v4;\n+  int v5;\n+  int v6;\n+  int v7;\n+  int v8;\n+  int v9;\n+  int v10;\n+  int v11;\n+  int v12;\n+  int v13;\n+  int v14;\n+  int v15;\n+  /* Adding the 16th variable used to cause bogus warnings to be\n+     generated.  */\n+  int v16;\n+}\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass2\n+- (id) init { return self; } /* This should not generate a bogus warning.  */\n+@end"}, {"sha": "4a877680549ace198a06bd69a2d5037e5d2635fc", "filename": "gcc/testsuite/objc.dg/ivar-problem-1.m", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-problem-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e1ee321921eed8f9dc58cd099fd9d0ff090ce4/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-problem-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-problem-1.m?ref=24e1ee321921eed8f9dc58cd099fd9d0ff090ce4", "patch": "@@ -0,0 +1,65 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* This test checks what happens if there are 16 instance variables.\n+   In that case, the class was not created correctly.  In this testcase,\n+   we have two classes, one with 15 variables and one with 16.  Older\n+   GCCs would generate a bogus warning for the second class but not \n+   for the first one.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+\n+@interface MyRootClass1\n+{\n+  Class isa;\n+  int v2;\n+  int v3;\n+  int v4;\n+  int v5;\n+  int v6;\n+  int v7;\n+  int v8;\n+  int v9;\n+  int v10;\n+  int v11;\n+  int v12;\n+  int v13;\n+  int v14;\n+  int v15;\n+}\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass1\n+- (id) init { return self; }\n+@end\n+\n+\n+@interface MyRootClass2\n+{\n+  Class isa;\n+  int v2;\n+  int v3;\n+  int v4;\n+  int v5;\n+  int v6;\n+  int v7;\n+  int v8;\n+  int v9;\n+  int v10;\n+  int v11;\n+  int v12;\n+  int v13;\n+  int v14;\n+  int v15;\n+  /* Adding the 16th variable used to cause bogus warnings to be\n+     generated.  */\n+  int v16;\n+}\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass2\n+- (id) init { return self; } /* This should not generate a bogus warning.  */\n+@end"}]}