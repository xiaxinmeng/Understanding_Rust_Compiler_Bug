{"sha": "94a21e008c4778e446321b1355f61abc75a076be", "node_id": "C_kwDOANBUbNoAKDk0YTIxZTAwOGM0Nzc4ZTQ0NjMyMWIxMzU1ZjYxYWJjNzVhMDc2YmU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-04-14T18:14:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-04-14T18:17:55Z"}, "message": "Fix build failure of Ada runtime for Aarch64 targets\n\nThe Aarch64 back-end now asserts that the main variant of scalar types\nhas TYPE_USER_ALIGN cleared, and that's not the case for scalar types\ndeclared with a confirming alignment clause in Ada.\n\ngcc/ada/\n\tPR bootstrap/109510\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <types>: Reset align\n\tto zero if its value is equal to TYPE_ALIGN and the type is scalar.\n\tSet TYPE_USER_ALIGN on the type only if align is positive.", "tree": {"sha": "f6a5e7c0b509f7414ebe35b904fa82db04a4c92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a5e7c0b509f7414ebe35b904fa82db04a4c92d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94a21e008c4778e446321b1355f61abc75a076be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a21e008c4778e446321b1355f61abc75a076be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a21e008c4778e446321b1355f61abc75a076be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a21e008c4778e446321b1355f61abc75a076be/comments", "author": null, "committer": null, "parents": [{"sha": "0d94c6df183375caaa7f672e288a2094ca813749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d94c6df183375caaa7f672e288a2094ca813749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d94c6df183375caaa7f672e288a2094ca813749"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "851a6745f771822e020f463b4e39f413a22ab1a8", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a21e008c4778e446321b1355f61abc75a076be/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a21e008c4778e446321b1355f61abc75a076be/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=94a21e008c4778e446321b1355f61abc75a076be", "patch": "@@ -4364,13 +4364,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If the alignment has not already been processed and this is not\n \t an unconstrained array type, see if an alignment is specified.\n \t If not, we pick a default alignment for atomic objects.  */\n-      if (align != 0 || TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n+      if (align > 0 || TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t;\n       else if (Known_Alignment (gnat_entity))\n \t{\n \t  align = validate_alignment (Alignment (gnat_entity), gnat_entity,\n \t\t\t\t      TYPE_ALIGN (gnu_type));\n \n+\t  /* Treat confirming clauses on scalar types like the default.  */\n+\t  if (align == TYPE_ALIGN (gnu_type) && !AGGREGATE_TYPE_P (gnu_type))\n+\t    align = 0;\n+\n \t  /* Warn on suspiciously large alignments.  This should catch\n \t     errors about the (alignment,byte)/(size,bit) discrepancy.  */\n \t  if (align > BIGGEST_ALIGNMENT && Has_Alignment_Clause (gnat_entity))\n@@ -4666,7 +4670,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    TYPE_BY_REFERENCE_P (gnu_type) = 1;\n \n \t  /* Record whether an alignment clause was specified.  */\n-\t  if (Present (Alignment_Clause (gnat_entity)))\n+\t  if (align > 0 && Present (Alignment_Clause (gnat_entity)))\n \t    TYPE_USER_ALIGN (gnu_type) = 1;\n \n \t  /* Record whether a pragma Universal_Aliasing was specified.  */"}]}