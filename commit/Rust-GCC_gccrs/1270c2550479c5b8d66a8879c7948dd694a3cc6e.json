{"sha": "1270c2550479c5b8d66a8879c7948dd694a3cc6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3MGMyNTUwNDc5YzViOGQ2NmE4ODc5Yzc5NDhkZDY5NGEzY2M2ZQ==", "commit": {"author": {"name": "Clinton Popetz", "email": "cpopetz@cygnus.com", "date": "2000-05-28T23:40:20Z"}, "committer": {"name": "Clinton Popetz", "email": "cpopetz@gcc.gnu.org", "date": "2000-05-28T23:40:20Z"}, "message": "lcm.c (make_preds_opaque): Fix comment.\n\n\t* lcm.c (make_preds_opaque): Fix comment.\n\t(optimize_mode_switching): Use NORMAL_MODE instead of\n\tMODE_USES_IN_EXIT_BLOCK.  Change leftover instance of\n\tFP_MODE_NONE to no_mode.  Rename MODE_AT_ENTRY to NORMAL_MODE.\n\tHandle insertions before an existing NOTE_INSN_BASIC_BLOCK.\n\t* tm.texi (OPTIMIZE_MODE_SWITCHING): Refer to NORMAL_MODE.\n\t(MODE_USES_IN_EXIT_BLOCK): Delete.\n\t(MODE_AT_ENTRY) Rename to NORMAL_MODE.\n\t* sh.h (MODE_USES_IN_EXIT_BLOCK): Delete.\n\t(MODE_AT_ENTRY): Rename to NORMAL_MODE.\n\t(MODE_NEEDED): Don't look for USE.\n\t(EPILOGUE_USES): Define.\n\nFrom-SVN: r34243", "tree": {"sha": "357926448ce8e064b4e214f3ed51f745241abf6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/357926448ce8e064b4e214f3ed51f745241abf6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1270c2550479c5b8d66a8879c7948dd694a3cc6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270c2550479c5b8d66a8879c7948dd694a3cc6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1270c2550479c5b8d66a8879c7948dd694a3cc6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270c2550479c5b8d66a8879c7948dd694a3cc6e/comments", "author": null, "committer": null, "parents": [{"sha": "bb078eb403f8be5f3976facaedf1c34e8a0b2f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb078eb403f8be5f3976facaedf1c34e8a0b2f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb078eb403f8be5f3976facaedf1c34e8a0b2f77"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "0a6110ac9611a5b0354da443759af1f7a036262b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1270c2550479c5b8d66a8879c7948dd694a3cc6e", "patch": "@@ -1,3 +1,18 @@\n+Sun May 28 18:37:07 2000  Clinton Popetz  <cpopetz@cygnus.com>\n+\n+\t* lcm.c (make_preds_opaque): Fix comment.\n+\t(optimize_mode_switching): Use NORMAL_MODE instead of \n+\tMODE_USES_IN_EXIT_BLOCK.  Change leftover instance of\n+\tFP_MODE_NONE to no_mode.  Rename MODE_AT_ENTRY to NORMAL_MODE.\n+\tHandle insertions before an existing NOTE_INSN_BASIC_BLOCK.\n+\t* tm.texi (OPTIMIZE_MODE_SWITCHING): Refer to NORMAL_MODE.\n+\t(MODE_USES_IN_EXIT_BLOCK): Delete.\n+\t(MODE_AT_ENTRY) Rename to NORMAL_MODE.\n+\t* sh.h (MODE_USES_IN_EXIT_BLOCK): Delete.\n+\t(MODE_AT_ENTRY): Rename to NORMAL_MODE.\n+\t(MODE_NEEDED): Don't look for USE.\n+\t(EPILOGUE_USES): Define.\n+\n Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \n \t* mklibgcc.in (all): Variable initialised to `libgcc'."}, {"sha": "07c971fed03b71123a245e2f194c4d651363b307", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1270c2550479c5b8d66a8879c7948dd694a3cc6e", "patch": "@@ -2249,19 +2249,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define OPTIMIZE_MODE_SWITCHING(ENTITY) TARGET_SH4\n \n-#define MODE_USES_IN_EXIT_BLOCK gen_rtx_USE (VOIDmode, get_fpscr_rtx ())\n+#define NORMAL_MODE(ENTITY) \\\n+   (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE) \n+\n+#define EPILOGUE_USES(REGNO)       (TARGET_SH4 && (REGNO) == FPSCR_REG)\n \n #define MODE_NEEDED(ENTITY, INSN)\t\t\t\t\t\\\n   (recog_memoized (INSN) >= 0\t\t\t\t\t\t\\\n    ? get_attr_fp_mode (INSN)\t\t\t\t\t\t\\\n-   : (GET_CODE (PATTERN (INSN)) == USE\t\t\t\t\\\n-      && rtx_equal_p (XEXP (PATTERN (INSN), 0), get_fpscr_rtx ()))\t\\\n-   ? (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)\t\t\\\n    : FP_MODE_NONE)\n \n-#define MODE_AT_ENTRY(ENTITY) \\\n-  (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)\n-\n #define MODE_PRIORITY_TO_MODE(ENTITY, N) \\\n   ((TARGET_FPU_SINGLE != 0) ^ (N) ? FP_MODE_SINGLE : FP_MODE_DOUBLE)\n "}, {"sha": "c9946543d60278d9f0c39ff87670fbb7ad6f5f65", "filename": "gcc/lcm.c", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=1270c2550479c5b8d66a8879c7948dd694a3cc6e", "patch": "@@ -840,7 +840,7 @@ static sbitmap *comp;\n static sbitmap *delete;\n static sbitmap *insert;\n \n-static struct seginfo * new_seginfo PARAMS ((int, rtx, int, HARD_REG_SET));;\n+static struct seginfo * new_seginfo PARAMS ((int, rtx, int, HARD_REG_SET));\n static void add_seginfo PARAMS ((struct bb_info *, struct seginfo *));\n static void reg_dies PARAMS ((rtx, HARD_REG_SET));\n static void reg_becomes_live PARAMS ((rtx, rtx, void *));\n@@ -850,7 +850,7 @@ static void make_preds_opaque PARAMS ((basic_block, int));\n #ifdef OPTIMIZE_MODE_SWITCHING\n \n /* This function will allocate a new BBINFO structure, initialized\n-   with the FP_MODE, INSN, and basic block BB parameters.  */\n+   with the MODE, INSN, and basic block BB parameters.  */\n \n static struct seginfo *\n new_seginfo (mode, insn, bb, regs_live)\n@@ -994,29 +994,6 @@ optimize_mode_switching (file)\n   if (! n_entities)\n     return 0;\n \n-#ifdef MODE_USES_IN_EXIT_BLOCK\n-  /* For some ABIs a particular mode setting is required at function exit.  */\n-\n-  for (eg = EXIT_BLOCK_PTR->pred; eg; eg = eg->pred_next)\n-    {\n-      int bb = eg->src->index;\n-      rtx insn = BLOCK_END (bb);\n-      rtx use = MODE_USES_IN_EXIT_BLOCK;\n-\n-      /* If the block ends with the use of the return value\n-\t and / or a return, insert the new use(s) in front of them.  */\n-      while ((GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == USE)\n-\t     || GET_CODE (insn) == JUMP_INSN)\n-\tinsn = PREV_INSN (insn);\n-\n-      use = emit_insn_after (use, insn);\n-      if (insn == BLOCK_END (bb))\n-\tBLOCK_END (bb) = use;\n-      else if (NEXT_INSN (use) == BLOCK_HEAD (bb))\n-\tBLOCK_HEAD (bb) = NEXT_INSN (insn);\n-    }\n-#endif /* MODE_USES_IN_EXIT_BLOCK */\n-\n   /* Create the bitmap vectors.  */\n \n   antic = sbitmap_vector_alloc (n_basic_blocks, n_entities);\n@@ -1071,6 +1048,29 @@ optimize_mode_switching (file)\n \t\t}\n \t    }\n \n+\t  /* If this is a predecessor of the exit block, and we must \n+\t     force a mode on exit, make note of that.  */\n+#ifdef NORMAL_MODE\n+\t  if (NORMAL_MODE (e) != no_mode && last_mode != NORMAL_MODE (e))\n+\t    for (eg = BASIC_BLOCK (bb)->succ; eg; eg = eg->succ_next)\n+\t      if (eg->dest == EXIT_BLOCK_PTR)\n+\t\t{\n+\t\t  rtx insn = BLOCK_END (bb);\n+\n+\t\t  /* Find the last insn before a USE and/or JUMP.  */\n+\t\t  while ((GET_CODE (insn) == INSN \n+\t\t\t      && GET_CODE (PATTERN (insn)) == USE)\n+\t\t\t  || GET_CODE (insn) == JUMP_INSN)\n+\t\t    insn = PREV_INSN (insn);\n+\t\t  if (insn != BLOCK_END (bb) && NEXT_INSN (insn))\n+\t\t    insn = NEXT_INSN (insn);\n+\t\t  last_mode = NORMAL_MODE (e);\n+\t\t  add_seginfo (info + bb, \n+\t\t      new_seginfo (last_mode, insn, bb, live_now));\n+\t\t  RESET_BIT (transp[bb], j);\n+\t\t} \n+#endif\n+\n \t  info[bb].computing = last_mode;\n \t  /* Check for blocks without ANY mode requirements.  */\n \t  if (last_mode == no_mode)\n@@ -1079,9 +1079,9 @@ optimize_mode_switching (file)\n \t      add_seginfo (info + bb, ptr);\n \t    }\n \t}\n-#ifdef MODE_AT_ENTRY\n+#ifdef NORMAL_MODE\n       {\n-\tint mode = MODE_AT_ENTRY (e);\n+\tint mode = NORMAL_MODE (e);\n \n \tif (mode != no_mode)\n \t  {\n@@ -1112,7 +1112,7 @@ optimize_mode_switching (file)\n \t      }\n \t  }\n       }\n-#endif /* MODE_AT_ENTRY */\n+#endif /* NORMAL_MODE */\n     }\n \n   kill = sbitmap_vector_alloc (n_basic_blocks, n_entities);\n@@ -1214,13 +1214,15 @@ optimize_mode_switching (file)\n   /* Now output the remaining mode sets in all the segments.  */\n   for (j = n_entities - 1; j >= 0; j--)\n     {\n+      int no_mode = num_modes[entity_map[j]];\n+\n       for (bb = n_basic_blocks - 1; bb >= 0; bb--)\n \t{\n \t  struct seginfo *ptr, *next;\n \t  for (ptr = bb_info[j][bb].seginfo; ptr; ptr = next)\n \t    {\n \t      next = ptr->next;\n-\t      if (ptr->mode != FP_MODE_NONE)\n+\t      if (ptr->mode != no_mode)\n \t\t{\n \t\t  rtx mode_set;\n \n@@ -1229,8 +1231,12 @@ optimize_mode_switching (file)\n \t\t  mode_set = gen_sequence ();\n \t\t  end_sequence ();\n \n-\t\t  emit_block_insn_before (mode_set, ptr->insn_ptr,\n-\t\t\t\t\t  BASIC_BLOCK (ptr->bbnum));\n+\t\t  if (NOTE_LINE_NUMBER (ptr->insn_ptr) == NOTE_INSN_BASIC_BLOCK)\n+\t\t    emit_block_insn_after (mode_set, ptr->insn_ptr,\n+    \t\t                           BASIC_BLOCK (ptr->bbnum));\n+\t\t  else\n+\t\t    emit_block_insn_before (mode_set, ptr->insn_ptr,\n+\t\t\t\t\t    BASIC_BLOCK (ptr->bbnum));\n \t\t}\n \n \t      free (ptr);"}, {"sha": "3b3f4b0283d30fbd9824ded79adeff4370ba60d8", "filename": "gcc/tm.texi", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270c2550479c5b8d66a8879c7948dd694a3cc6e/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=1270c2550479c5b8d66a8879c7948dd694a3cc6e", "patch": "@@ -7275,7 +7275,7 @@ return non-zero for any @var{entity} that that needs mode-switching.\n If you define this macro, you also have to define\n @code{NUM_MODES_FOR_MODE_SWITCHING}, @code{MODE_NEEDED},\n @code{MODE_PRIORITY_TO_MODE} and @code{EMIT_MODE_SET}.\n-@code{MODE_AT_ENTRY} and @code{MODE_USES_IN_EXIT_BLOCK} are optional.\n+@code{NORMAL_MODE} is optional.\n \n @findex NUM_MODES_FOR_MODE_SWITCHING\n @item NUM_MODES_FOR_MODE_SWITCHING\n@@ -7290,15 +7290,6 @@ In macros that take mode arguments / yield a mode result, modes are\n represented as numbers 0 .. N - 1.  N is used to specify that no mode\n switch is needed / supplied.\n \n-@findex MODE_USES_IN_EXIT_BLOCK\n-@item MODE_USES_IN_EXIT_BLOCK\n-If this macro is defined, it is called for each exit block when mode switching\n-optimization is performed.  Its return value should be the pattern of an insn,\n-or a sequence of insns.  It is emitted before the return insn / use insns at\n-the end of the exit block.\n-\n-This is done before insns are examined for their need of any mode switching.\n-\n @findex MODE_NEEDED\n @item MODE_NEEDED (@var{entity}, @var{insn})\n @var{entity} is an integer specifying a mode-switched entity.  If\n@@ -7307,11 +7298,11 @@ return an integer value not larger than the corresponding element in\n NUM_MODES_FOR_MODE_SWITCHING, to denote the mode that @var{entity} must\n be switched into prior to the execution of INSN.\n \n-@findex MODE_AT_ENTRY\n-@item MODE_AT_ENTRY (@var{entity})\n+@findex NORMAL_MODE \n+@item NORMAL_MODE (@var{entity})\n If this macro is defined, it is evaluated for every @var{entity} that needs\n mode switching.  It should evaluate to an integer, which is a mode that\n-@var{entity} is assumed to be switched to at function entry.\n+@var{entity} is assumed to be switched to at function entry and exit.\n \n @findex MODE_PRIORITY_TO_MODE\n @item MODE_PRIORITY_TO_MODE (@var{entity}, @var{n})"}]}