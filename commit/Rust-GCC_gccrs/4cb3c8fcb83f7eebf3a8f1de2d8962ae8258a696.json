{"sha": "4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiM2M4ZmNiODNmN2VlYmYzYThmMWRlMmQ4OTYyYWU4MjU4YTY5Ng==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-29T10:01:27Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-29T10:01:27Z"}, "message": "re PR fortran/32879 (Document algorithm used for random generator)\n\n2007-07-29  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/32879\n\t* intrinsic.texi (IRAND, RAND, RANDOM_NUMBER): Document algorithm\n\tused for random number generator.\n\nFrom-SVN: r127037", "tree": {"sha": "899cd9757b87b73f727d8ab2d843778dbed89e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/899cd9757b87b73f727d8ab2d843778dbed89e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa233e34c957d836e99f74c03556cbe0073f1aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa233e34c957d836e99f74c03556cbe0073f1aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa233e34c957d836e99f74c03556cbe0073f1aa7"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "ae08f231efbe3d4f87a5fb9491fbc0b6a16f251b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "patch": "@@ -1,3 +1,9 @@\n+2007-07-29  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32879\n+\t* intrinsic.texi (IRAND, RAND, RANDOM_NUMBER): Document algorithm\n+\tused for random number generator.\n+\n 2007-07-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gfortran.h, interface.c, resolve.c, symbol.c: Fix comment"}, {"sha": "7cb746ab1d54a455f927aeb48d13f6472f4402d4", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=4cb3c8fcb83f7eebf3a8f1de2d8962ae8258a696", "patch": "@@ -5764,6 +5764,11 @@ in the current sequence is returned; if @var{FLAG} is 1, the generator\n is restarted by @code{CALL SRAND(0)}; if @var{FLAG} has any other value,\n it is used as a new seed with @code{SRAND}.\n \n+This intrinsic routine is provided for backwards compatibility with\n+GNU Fortran 77. It implements a simple modulo generator as provided \n+by @command{g77}. For new code, one should consider the use of \n+@ref{RANDOM_NUMBER} as it implements a superior algorithm.\n+\n @item @emph{Standard}:\n GNU extension\n \n@@ -8200,6 +8205,11 @@ in the current sequence is returned; if @var{FLAG} is 1, the generator\n is restarted by @code{CALL SRAND(0)}; if @var{FLAG} has any other value,\n it is used as a new seed with @code{SRAND}.\n \n+This intrinsic routine is provided for backwards compatibility with\n+GNU Fortran 77. It implements a simple modulo generator as provided \n+by @command{g77}. For new code, one should consider the use of \n+@ref{RANDOM_NUMBER} as it implements a superior algorithm.\n+\n @item @emph{Standard}:\n GNU extension\n \n@@ -8245,6 +8255,24 @@ end program test_rand\n Returns a single pseudorandom number or an array of pseudorandom numbers\n from the uniform distribution over the range @math{ 0 \\leq x < 1}.\n \n+The runtime-library implements George Marsaglia's KISS (Keep It Simple \n+Stupid) random number generator (RNG). This RNG combines:\n+@enumerate\n+@item The congruential generator @math{x(n) = 69069 \\cdot x(n-1) + 1327217885}\n+with a period of @math{2^{32}},\n+@item A 3-shift shift-register generator with a period of @math{2^{32} - 1},\n+@item  Two 16-bit multiply-with-carry generators with a period of\n+@math{597273182964842497 > 2^{59}}.\n+@end enumerate\n+The overall period exceeds @math{2^{123}}.\n+\n+Please note, this RNG is thread safe if used within OpenMP directives,\n+i. e. its state will be consistent while called from multiple threads.\n+However, the KISS generator does not create random numbers in parallel \n+from multiple sources, but in sequence from a single source. If an\n+OpenMP-enabled application heavily relies on random numbers, one should \n+consider employing a dedicated parallel random number generator instead.\n+\n @item @emph{Standard}:\n F95 and later\n \n@@ -8268,15 +8296,6 @@ program test_random_number\n end program\n @end smallexample\n \n-@item @emph{Note}:\n-The implemented random number generator is thread safe if used within\n-OpenMP directives, i. e. its state will be consistent while called from\n-multiple threads. Please note that the currently implemented KISS generator \n-does not create random numbers in parallel from multiple sources, but in\n-sequence from a single source. If your OpenMP-enabled application heavily\n-relies on random numbers, you should consider employing a dedicated parallel\n-random number generator instead.\n-\n @item @emph{See also}:\n @ref{RANDOM_SEED}\n @end table"}]}