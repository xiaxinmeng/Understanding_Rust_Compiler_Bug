{"sha": "cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "node_id": "C_kwDOANBUbNoAKGNmYzA3MTAyZWYyZmYzNjc1Y2IxOTNlNGYwZTYxYzlkMmQ1YjM2OGU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-18T10:16:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:33Z"}, "message": "[Ada] Add support for \"simd\" function attribute\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Function>: Also call\n\tprocess_attributes for built-in functions.\n\t(prepend_one_attribute_pragma): Deal with \"simd\" attribute.\n\t* gcc-interface/utils.cc (handle_simd_attribute): New function.\n\t(gnat_internal_attribute_table): Add entry for \"simd\" attribute.", "tree": {"sha": "cd9c1052024ec33f5ac201abee05eec8b322b9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9c1052024ec33f5ac201abee05eec8b322b9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6734819f777dbbf9eea464baa7fc60a953dc8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6734819f777dbbf9eea464baa7fc60a953dc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6734819f777dbbf9eea464baa7fc60a953dc8a"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "2d9b41f984c4895011207ea2ba1a0c270ef35dfc", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "patch": "@@ -4002,6 +4002,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  {\n \t    gnu_decl = gnu_type;\n \t    gnu_type = TREE_TYPE (gnu_decl);\n+\t    process_attributes (&gnu_decl, &attr_list, true, gnat_entity);\n \t    break;\n \t  }\n \n@@ -6864,7 +6865,9 @@ prepend_one_attribute_pragma (struct attrib **attr_list, Node_Id gnat_pragma)\n \n       const char *const p = TREE_STRING_POINTER (gnu_arg1);\n       const bool string_args\n-\t= strcmp (p, \"target\") == 0 || strcmp (p, \"target_clones\") == 0;\n+\t= strcmp (p, \"simd\") == 0\n+\t  || strcmp (p, \"target\") == 0\n+\t  || strcmp (p, \"target_clones\") == 0;\n       gnu_arg1 = get_identifier (p);\n       if (IDENTIFIER_LENGTH (gnu_arg1) == 0)\n \treturn;"}, {"sha": "d747c639a8fd3645e0705636cdd400ce9cd0972a", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=cfc07102ef2ff3675cb193e4f0e61c9d2d5b368e", "patch": "@@ -107,6 +107,7 @@ static tree handle_flatten_attribute (tree *, tree, tree, int, bool *);\n static tree handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_simd_attribute (tree *, tree, tree, int, bool *);\n static tree handle_target_attribute (tree *, tree, tree, int, bool *);\n static tree handle_target_clones_attribute (tree *, tree, tree, int, bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int, bool *);\n@@ -185,6 +186,8 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n     handle_cold_attribute, attr_cold_hot_exclusions },\n   { \"hot\",          0, 0,  true,  false, false, false,\n     handle_hot_attribute, attr_cold_hot_exclusions },\n+  { \"simd\",         0, 1,  true,  false, false, false,\n+    handle_simd_attribute, NULL },\n   { \"target\",       1, -1, true,  false, false, false,\n     handle_target_attribute, NULL },\n   { \"target_clones\",1, -1, true,  false, false, false,\n@@ -6880,6 +6883,54 @@ handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"simd\" attribute.  */\n+\n+static tree\n+handle_simd_attribute (tree *node, tree name, tree args, int, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      tree t = get_identifier (\"omp declare simd\");\n+      tree attr = NULL_TREE;\n+      if (args)\n+\t{\n+\t  tree id = TREE_VALUE (args);\n+\n+\t  if (TREE_CODE (id) != STRING_CST)\n+\t    {\n+\t      error (\"attribute %qE argument not a string\", name);\n+\t      *no_add_attrs = true;\n+\t      return NULL_TREE;\n+\t    }\n+\n+\t  if (strcmp (TREE_STRING_POINTER (id), \"notinbranch\") == 0)\n+\t    attr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t     OMP_CLAUSE_NOTINBRANCH);\n+\t  else if (strcmp (TREE_STRING_POINTER (id), \"inbranch\") == 0)\n+\t    attr = build_omp_clause (DECL_SOURCE_LOCATION (*node),\n+\t\t\t\t     OMP_CLAUSE_INBRANCH);\n+\t  else\n+\t    {\n+\t      error (\"only %<inbranch%> and %<notinbranch%> flags are \"\n+\t\t     \"allowed for %<__simd__%> attribute\");\n+\t      *no_add_attrs = true;\n+\t      return NULL_TREE;\n+\t    }\n+\t}\n+\n+      DECL_ATTRIBUTES (*node)\n+\t= tree_cons (t, build_tree_list (NULL_TREE, attr),\n+\t\t     DECL_ATTRIBUTES (*node));\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"target\" attribute.  */\n \n static tree"}]}