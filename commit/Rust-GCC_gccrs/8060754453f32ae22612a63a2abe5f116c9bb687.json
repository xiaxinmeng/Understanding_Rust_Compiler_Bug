{"sha": "8060754453f32ae22612a63a2abe5f116c9bb687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2MDc1NDQ1M2YzMmFlMjI2MTJhNjNhMmFiZTVmMTE2YzliYjY4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T21:22:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T21:22:08Z"}, "message": "Support method expressions for interface types.\n\nFrom-SVN: r171631", "tree": {"sha": "0f41bbec80132b4f423c758ba3cfdab006d37b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f41bbec80132b4f423c758ba3cfdab006d37b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8060754453f32ae22612a63a2abe5f116c9bb687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8060754453f32ae22612a63a2abe5f116c9bb687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8060754453f32ae22612a63a2abe5f116c9bb687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8060754453f32ae22612a63a2abe5f116c9bb687/comments", "author": null, "committer": null, "parents": [{"sha": "0b3e0e9ef1cdb12edb18af5e7e8dc7ef4ecffb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3e0e9ef1cdb12edb18af5e7e8dc7ef4ecffb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3e0e9ef1cdb12edb18af5e7e8dc7ef4ecffb3a"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "78ae4fa13c074f9e492ed9590e6e1010abb5245e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8060754453f32ae22612a63a2abe5f116c9bb687/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8060754453f32ae22612a63a2abe5f116c9bb687/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8060754453f32ae22612a63a2abe5f116c9bb687", "patch": "@@ -10262,7 +10262,15 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n \n   bool is_ambiguous;\n   Method* method = nt->method_function(name, &is_ambiguous);\n+  const Typed_identifier* imethod = NULL;\n   if (method == NULL)\n+    {\n+      Interface_type* it = nt->interface_type();\n+      if (it != NULL)\n+\timethod = it->find_method(name);\n+    }\n+\n+  if (method == NULL && imethod == NULL)\n     {\n       if (!is_ambiguous)\n \terror_at(location, \"type %<%s%> has no method %<%s%>\",\n@@ -10275,7 +10283,7 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n       return Expression::make_error(location);\n     }\n \n-  if (!is_pointer && !method->is_value_method())\n+  if (method != NULL && !is_pointer && !method->is_value_method())\n     {\n       error_at(location, \"method requires pointer (use %<(*%s).%s)%>\",\n \t       nt->message_name().c_str(),\n@@ -10285,8 +10293,17 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n \n   // Build a new function type in which the receiver becomes the first\n   // argument.\n-  Function_type* method_type = method->type();\n-  gcc_assert(method_type->is_method());\n+  Function_type* method_type;\n+  if (method != NULL)\n+    {\n+      method_type = method->type();\n+      gcc_assert(method_type->is_method());\n+    }\n+  else\n+    {\n+      method_type = imethod->type()->function_type();\n+      gcc_assert(method_type != NULL && !method_type->is_method());\n+    }\n \n   const char* const receiver_name = \"$this\";\n   Typed_identifier_list* parameters = new Typed_identifier_list();\n@@ -10325,7 +10342,7 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   // simply reuse the existing function.  We use an internal hack to\n   // get the right type.\n \n-  if (is_pointer)\n+  if (method != NULL && is_pointer)\n     {\n       Named_object* mno = (method->needs_stub_method()\n \t\t\t   ? method->stub_object()\n@@ -10344,7 +10361,11 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   Named_object* vno = gogo->lookup(receiver_name, NULL);\n   gcc_assert(vno != NULL);\n   Expression* ve = Expression::make_var_reference(vno, location);\n-  Expression* bm = Type::bind_field_or_method(gogo, nt, ve, name, location);\n+  Expression* bm;\n+  if (method != NULL)\n+    bm = Type::bind_field_or_method(gogo, nt, ve, name, location);\n+  else\n+    bm = Expression::make_interface_field_reference(ve, name, location);\n \n   // Even though we found the method above, if it has an error type we\n   // may see an error here."}]}