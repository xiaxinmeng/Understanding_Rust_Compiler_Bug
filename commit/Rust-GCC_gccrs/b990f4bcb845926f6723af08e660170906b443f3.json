{"sha": "b990f4bcb845926f6723af08e660170906b443f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5MGY0YmNiODQ1OTI2ZjY3MjNhZjA4ZTY2MDE3MDkwNmI0NDNmMw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-12-11T02:08:26Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-12-11T02:08:26Z"}, "message": "pa-host.c (pa_gt_pch_use_address): Use lseek and read to copy PCH file to anonymous private map.\n\n\t* pa-host.c (pa_gt_pch_use_address): Use lseek and read to copy PCH\n\tfile to anonymous private map.\n\nFrom-SVN: r92027", "tree": {"sha": "665d79492cd373dd8c81c6479c14a49b532855a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/665d79492cd373dd8c81c6479c14a49b532855a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b990f4bcb845926f6723af08e660170906b443f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b990f4bcb845926f6723af08e660170906b443f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b990f4bcb845926f6723af08e660170906b443f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b990f4bcb845926f6723af08e660170906b443f3/comments", "author": null, "committer": null, "parents": [{"sha": "3e5bcef316b5e5562490257735d9c6be0529652c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5bcef316b5e5562490257735d9c6be0529652c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5bcef316b5e5562490257735d9c6be0529652c"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "61951ee86ac3aefe4a5c7757b4c0c8f50380d40d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b990f4bcb845926f6723af08e660170906b443f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b990f4bcb845926f6723af08e660170906b443f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b990f4bcb845926f6723af08e660170906b443f3", "patch": "@@ -1,3 +1,8 @@\n+2004-12-10  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa-host.c (pa_gt_pch_use_address): Use lseek and read to copy PCH\n+\tfile to anonymous private map.\n+\n 2004-12-10  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/18002"}, {"sha": "fed18f91451b1367d92ecfd89dea169ebfd0f627", "filename": "gcc/config/pa/pa-host.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b990f4bcb845926f6723af08e660170906b443f3/gcc%2Fconfig%2Fpa%2Fpa-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b990f4bcb845926f6723af08e660170906b443f3/gcc%2Fconfig%2Fpa%2Fpa-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-host.c?ref=b990f4bcb845926f6723af08e660170906b443f3", "patch": "@@ -22,6 +22,7 @@\n #include \"system.h\"\n #include \"coretypes.h\"\n #include <sys/mman.h>\n+#include <unistd.h>\n #include \"hosthooks.h\"\n #include \"hosthooks-def.h\"\n \n@@ -70,19 +71,19 @@ pa_gt_pch_get_address (size_t size, int fd)\n    It's not possibly to reliably mmap a file using MAP_PRIVATE to\n    a specific START address on either hpux or linux.  First we see\n    if mmap with MAP_PRIVATE works.  If it does, we are off to the\n-   races.  If it doesn't, we try an anonymous MAP_PRIVATE since the\n+   races.  If it doesn't, we try an anonymous private mmap since the\n    kernel is more likely to honor the BASE address in anonymous maps.\n-   We then mmap the file to an arbitrary location and copy the data\n-   to the anonymous private map.  This assumes of course that we\n-   don't need to change the PCH data after the file is created.\n+   We then copy the data to the anonymous private map.  This assumes\n+   of course that we don't need to change the data in the PCH file\n+   after it is created.\n \n    This approach obviously causes a performance penalty but there is\n    little else we can do given the current PCH implementation.  */\n \n static int\n pa_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n {\n-  void *addr, *faddr;\n+  void *addr;\n \n   /* We're called with size == 0 if we're not planning to load a PCH\n      file at all.  This allows the hook to free any static space that\n@@ -91,29 +92,30 @@ pa_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n     return -1;\n \n   /* Try to map the file with MAP_PRIVATE.  */\n-  addr = mmap (base, size, PROT_READ | PROT_WRITE,\n-\t       MAP_PRIVATE, fd, offset);\n+  addr = mmap (base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, offset);\n \n   if (addr == base)\n     return 1;\n \n   if (addr != (void *) MAP_FAILED)\n     munmap (addr, size);\n \n+  /* Try to make an anonymous private mmap at the desired location.  */\n   addr = mmap (base, size, PROT_READ | PROT_WRITE,\n \t       MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n \n   if (addr != base)\n-    return -1;\n+    {\n+      if (addr != (void *) MAP_FAILED)\n+        munmap (addr, size);\n+      return -1;\n+    }\n \n-  faddr = mmap (NULL, size, PROT_READ, MAP_PRIVATE,\n-\t\tfd, offset);\n-\n-  if (faddr == (void *) MAP_FAILED)\n+  if (lseek (fd, offset, SEEK_SET) == (off_t)-1)\n     return -1;\n \n-  memcpy (addr, faddr, size);\n-  munmap (faddr, size);\n+  if (read (fd, base, size) == -1)\n+    return -1;\n \n   return 1;\n }"}]}