{"sha": "e867454908aaa8192f214865b3978a104671fe45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2NzQ1NDkwOGFhYTgxOTJmMjE0ODY1YjM5NzhhMTA0NjcxZmU0NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T23:54:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T23:54:33Z"}, "message": "Permit copying hidden fields when passing method receiver.\n\nFrom-SVN: r171641", "tree": {"sha": "75add27a3bbaccf32121005399af561058dd5ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75add27a3bbaccf32121005399af561058dd5ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e867454908aaa8192f214865b3978a104671fe45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e867454908aaa8192f214865b3978a104671fe45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e867454908aaa8192f214865b3978a104671fe45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e867454908aaa8192f214865b3978a104671fe45/comments", "author": null, "committer": null, "parents": [{"sha": "2b80199f41d444c88474b32792a7e828f2a96b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b80199f41d444c88474b32792a7e828f2a96b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b80199f41d444c88474b32792a7e828f2a96b68"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "791ab073a440717fc5a8a8bed79c08bf21873da0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e867454908aaa8192f214865b3978a104671fe45", "patch": "@@ -8558,10 +8558,11 @@ Call_expression::do_check_types(Gogo*)\n       if (first_arg_type->points_to() == NULL)\n \t{\n \t  // When passing a value, we need to check that we are\n-\t  // permitted to copy it.\n+\t  // permitted to copy it.  The language permits copying\n+\t  // hidden fields for a method receiver.\n \t  std::string reason;\n-\t  if (!Type::are_assignable(fntype->receiver()->type(),\n-\t\t\t\t    first_arg_type, &reason))\n+\t  if (!Type::are_assignable_hidden_ok(fntype->receiver()->type(),\n+\t\t\t\t\t      first_arg_type, &reason))\n \t    {\n \t      if (reason.empty())\n \t\tthis->report_error(_(\"incompatible type for receiver\"));"}, {"sha": "0aef9ce4cc52b4f1f90d18635d69a12a206c2c62", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=e867454908aaa8192f214865b3978a104671fe45", "patch": "@@ -475,11 +475,14 @@ Type::are_compatible_for_binop(const Type* lhs, const Type* rhs)\n }\n \n // Return true if a value with type RHS may be assigned to a variable\n-// with type LHS.  If REASON is not NULL, set *REASON to the reason\n-// the types are not assignable.\n+// with type LHS.  If CHECK_HIDDEN_FIELDS is true, check whether any\n+// hidden fields are modified.  If REASON is not NULL, set *REASON to\n+// the reason the types are not assignable.\n \n bool\n-Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n+Type::are_assignable_check_hidden(const Type* lhs, const Type* rhs,\n+\t\t\t\t  bool check_hidden_fields,\n+\t\t\t\t  std::string* reason)\n {\n   // Do some checks first.  Make sure the types are defined.\n   if (rhs != NULL\n@@ -499,7 +502,9 @@ Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n \n       // All fields of a struct must be exported, or the assignment\n       // must be in the same package.\n-      if (rhs != NULL && rhs->forwarded()->forward_declaration_type() == NULL)\n+      if (check_hidden_fields\n+\t  && rhs != NULL\n+\t  && rhs->forwarded()->forward_declaration_type() == NULL)\n \t{\n \t  if (lhs->has_hidden_fields(NULL, reason)\n \t      || rhs->has_hidden_fields(NULL, reason))\n@@ -593,6 +598,25 @@ Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n   return false;\n }\n \n+// Return true if a value with type RHS may be assigned to a variable\n+// with type LHS.  If REASON is not NULL, set *REASON to the reason\n+// the types are not assignable.\n+\n+bool\n+Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n+{\n+  return Type::are_assignable_check_hidden(lhs, rhs, true, reason);\n+}\n+\n+// Like are_assignable but don't check for hidden fields.\n+\n+bool\n+Type::are_assignable_hidden_ok(const Type* lhs, const Type* rhs,\n+\t\t\t       std::string* reason)\n+{\n+  return Type::are_assignable_check_hidden(lhs, rhs, false, reason);\n+}\n+\n // Return true if a value with type RHS may be converted to type LHS.\n // If REASON is not NULL, set *REASON to the reason the types are not\n // convertible."}, {"sha": "3255d37ff9e58ec6014e7a93538397ba829d7b32", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867454908aaa8192f214865b3978a104671fe45/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=e867454908aaa8192f214865b3978a104671fe45", "patch": "@@ -521,6 +521,14 @@ class Type\n   static bool\n   are_assignable(const Type* lhs, const Type* rhs, std::string* reason);\n \n+  // Return true if a value with type RHS is assignable to a variable\n+  // with type LHS, ignoring any assignment of hidden fields\n+  // (unexported fields of a type imported from another package).\n+  // This is like the are_assignable method.\n+  static bool\n+  are_assignable_hidden_ok(const Type* lhs, const Type* rhs,\n+\t\t\t   std::string* reason);\n+\n   // Return true if a value with type RHS may be converted to type\n   // LHS.  If this returns false, and REASON is not NULL, it sets\n   // *REASON.\n@@ -1011,6 +1019,11 @@ class Type\n \t    : NULL);\n   }\n \n+  // Support for are_assignable and are_assignable_hidden_ok.\n+  static bool\n+  are_assignable_check_hidden(const Type* lhs, const Type* rhs,\n+\t\t\t      bool check_hidden_fields, std::string* reason);\n+\n   // Get the hash and equality functions for a type.\n   void\n   type_functions(const char** hash_fn, const char** equal_fn) const;"}, {"sha": "c66d592b7c01166418656a060180705c9620c02a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug226.dir/y.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867454908aaa8192f214865b3978a104671fe45/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug226.dir%2Fy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867454908aaa8192f214865b3978a104671fe45/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug226.dir%2Fy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug226.dir%2Fy.go?ref=e867454908aaa8192f214865b3978a104671fe45", "patch": "@@ -15,7 +15,7 @@ func f() {\n \t_ = x.T{};\n \t_ = x.T{Y:2};\n \t\n-\tok1.M();\t// ERROR \"assignment.*T\"\n+\tok1.M();\n \tbad1 := *ok;\t// ERROR \"assignment.*T\"\n \tbad2 := ok1;\t// ERROR \"assignment.*T\"\n \t*ok4 = ok1;\t// ERROR \"assignment.*T\""}]}