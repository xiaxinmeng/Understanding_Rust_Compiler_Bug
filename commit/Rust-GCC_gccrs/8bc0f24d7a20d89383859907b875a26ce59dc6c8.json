{"sha": "8bc0f24d7a20d89383859907b875a26ce59dc6c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjMGYyNGQ3YTIwZDg5MzgzODU5OTA3Yjg3NWEyNmNlNTlkYzZjOA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-09-01T18:47:44Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-09-01T18:49:40Z"}, "message": "rs6000: MMA built-in dies with incorrect sharing of tree nodes error\n\nWhen we expand our MMA built-ins into gimple, we erroneously reused the\naccumulator memory reference for both the source input value as well as\nthe destination output value.  This led to a tree sharing error.\nThe solution is to create separate memory references for the input\nand output values.\n\n2020-09-01  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/96808\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Do not\n\treuse accumulator memory reference for source and destination accesses.\n\ngcc/testsuite/\n\tPR target/96808\n\t* gcc.target/powerpc/pr96808.c: New test.", "tree": {"sha": "2dae8a0ae1ce5360567f9daa9f61be394c55385f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dae8a0ae1ce5360567f9daa9f61be394c55385f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc0f24d7a20d89383859907b875a26ce59dc6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc0f24d7a20d89383859907b875a26ce59dc6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc0f24d7a20d89383859907b875a26ce59dc6c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc0f24d7a20d89383859907b875a26ce59dc6c8/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1850c617b14eedaf60b358f3b7d4707cff73b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1850c617b14eedaf60b358f3b7d4707cff73b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1850c617b14eedaf60b358f3b7d4707cff73b8a"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "b6b45687aaeb319489d828c4f4c0f1bcdf9b3535", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc0f24d7a20d89383859907b875a26ce59dc6c8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc0f24d7a20d89383859907b875a26ce59dc6c8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=8bc0f24d7a20d89383859907b875a26ce59dc6c8", "patch": "@@ -11471,12 +11471,8 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n   /* Convert this built-in into an internal version that uses pass-by-value\n      arguments.  The internal built-in follows immediately after this one.  */\n   new_decl = rs6000_builtin_decls[fncode + 1];\n-  tree lhs, mem, op[MAX_MMA_OPERANDS];\n+  tree lhs, op[MAX_MMA_OPERANDS];\n   tree acc = gimple_call_arg (stmt, 0);\n-  if (TREE_CODE (acc) == PARM_DECL)\n-    mem = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (acc)), acc);\n-  else\n-    mem = build_simple_mem_ref (acc);\n   push_gimplify_context (true);\n \n   if ((attr & RS6000_BTC_QUAD) != 0)\n@@ -11486,7 +11482,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       op[0] = make_ssa_name (vector_quad_type_node);\n       for (unsigned i = 1; i < nopnds; i++)\n \top[i] = gimple_call_arg (stmt, i);\n-      gimplify_assign (op[0], mem, &new_seq);\n+      gimplify_assign (op[0], build_simple_mem_ref (acc), &new_seq);\n     }\n   else\n     {\n@@ -11536,7 +11532,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n     lhs = make_ssa_name (vector_quad_type_node);\n   gimple_call_set_lhs (new_call, lhs);\n   gimple_seq_add_stmt (&new_seq, new_call);\n-  gimplify_assign (mem, lhs, &new_seq);\n+  gimplify_assign (build_simple_mem_ref (acc), lhs, &new_seq);\n   pop_gimplify_context (NULL);\n   gsi_replace_with_seq (gsi, new_seq, true);\n "}, {"sha": "2d44bd51b203af19a82f40f0a11b047d5f956d5f", "filename": "gcc/testsuite/gcc.target/powerpc/pr96808.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc0f24d7a20d89383859907b875a26ce59dc6c8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96808.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc0f24d7a20d89383859907b875a26ce59dc6c8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96808.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96808.c?ref=8bc0f24d7a20d89383859907b875a26ce59dc6c8", "patch": "@@ -0,0 +1,59 @@\n+/* PR target/96808 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Verify we do not ICE on the tests below.  */\n+\n+void\n+old_ok (__vector_quad *dst, vector unsigned char vc)\n+{\n+  __vector_quad vq;\n+  __builtin_mma_xxsetaccz(&vq);\n+  __builtin_mma_xvf32gerpp(&vq, vc, vc);\n+  *dst = vq;\n+}\n+\n+void\n+test0 (__vector_quad *dst, vector unsigned char vc)\n+{\n+  __vector_quad vq[2];\n+  __builtin_mma_xxsetaccz(&vq[1]);\n+  __builtin_mma_xvf32gerpp(&vq[1], vc, vc);\n+  *dst = vq[1];\n+}\n+\n+void\n+test1 (__vector_quad *dst, vector unsigned char vc)\n+{\n+  __vector_quad vq[2][2];\n+  __builtin_mma_xxsetaccz(&vq[1][1]);\n+  __builtin_mma_xvf32gerpp(&vq[1][1], vc, vc);\n+  *dst = vq[1][1];\n+}\n+\n+void\n+test2 (__vector_quad *dst, vector unsigned char vc)\n+{\n+  struct {\n+    __vector_quad dummy;\n+    __vector_quad acc;\n+  } vq;\n+  __builtin_mma_xxsetaccz(&vq.acc);\n+  __builtin_mma_xvf32gerpp(&vq.acc, vc, vc);\n+  *dst = vq.acc;\n+}\n+\n+void\n+test3 (__vector_quad *dst, vector unsigned char vc)\n+{\n+  __builtin_mma_xxsetaccz(&dst[1]);\n+  __builtin_mma_xvf32gerpp(&dst[1], vc, vc);\n+}\n+\n+void\n+test4 (__vector_quad *dst[], vector unsigned char vc)\n+{\n+  __builtin_mma_xxsetaccz(&dst[1][2]);\n+  __builtin_mma_xvf32gerpp(&dst[1][2], vc, vc);\n+}"}]}