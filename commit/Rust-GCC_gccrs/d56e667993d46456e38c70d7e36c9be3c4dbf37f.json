{"sha": "d56e667993d46456e38c70d7e36c9be3c4dbf37f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2ZTY2Nzk5M2Q0NjQ1NmUzOGM3MGQ3ZTM2YzliZTNjNGRiZjM3Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-05T05:57:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-05T05:57:39Z"}, "message": "Use backend interface for labels and goto statements.\n\n\t* go-gcc.c (class Blabel): Define.\n\t(Gcc_backend::make_expression): New function.\n\t(get_identifier_from_string): New function.\n\t(Gcc_backend::label): New function.\n\t(Gcc_backend::label_definition_statement): New function.\n\t(Gcc_backend::goto_statement): New function.\n\t(Gcc_backend::label_address): New function.\n\t(expression_to_tree): New function.\n\t* Make-lang.in (go/expressions.o): Depend on\n\tgo/gofrontend/backend.h.\n\t(go/gogo.o): Likewise.\n\nFrom-SVN: r171968", "tree": {"sha": "577d44ef128d82982e60ea0b47f375eebb0187b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577d44ef128d82982e60ea0b47f375eebb0187b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d56e667993d46456e38c70d7e36c9be3c4dbf37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56e667993d46456e38c70d7e36c9be3c4dbf37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56e667993d46456e38c70d7e36c9be3c4dbf37f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56e667993d46456e38c70d7e36c9be3c4dbf37f/comments", "author": null, "committer": null, "parents": [{"sha": "566475c80091b451af0513f2144d853b702eb73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566475c80091b451af0513f2144d853b702eb73b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566475c80091b451af0513f2144d853b702eb73b"}], "stats": {"total": 366, "additions": 267, "deletions": 99}, "files": [{"sha": "657091a24496323debe6be8a2ed4c1ec2884cffa", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -1,3 +1,17 @@\n+2011-04-04  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.c (class Blabel): Define.\n+\t(Gcc_backend::make_expression): New function.\n+\t(get_identifier_from_string): New function.\n+\t(Gcc_backend::label): New function.\n+\t(Gcc_backend::label_definition_statement): New function.\n+\t(Gcc_backend::goto_statement): New function.\n+\t(Gcc_backend::label_address): New function.\n+\t(expression_to_tree): New function.\n+\t* Make-lang.in (go/expressions.o): Depend on\n+\tgo/gofrontend/backend.h.\n+\t(go/gogo.o): Likewise.\n+\n 2011-04-04  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc: #include \"tree-iterator.h\", \"gimple.h\", and \"gogo.h\"."}, {"sha": "0dc8942061ae69106c92b26f610d48b1559f9ee0", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -252,7 +252,7 @@ go/expressions.o: go/gofrontend/expressions.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \tintl.h $(TREE_H) $(GIMPLE_H) tree-iterator.h convert.h $(REAL_H) \\\n \trealmpfr.h $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n \tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n-\t$(GO_EXPRESSIONS_H)\n+\tgo/gofrontend/backend.h $(GO_EXPRESSIONS_H)\n go/go.o: go/gofrontend/go.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_LEX_H) \\\n \t$(GO_PARSE_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n@@ -264,7 +264,7 @@ go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n go/gogo.o: go/gofrontend/gogo.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h $(GO_LEX_H) $(GO_TYPES_H) $(GO_STATEMENTS_H) \\\n \t$(GO_EXPRESSIONS_H) go/gofrontend/dataflow.h $(GO_IMPORT_H) \\\n-\tgo/gofrontend/export.h $(GO_GOGO_H)\n+\tgo/gofrontend/export.h go/gofrontend/backend.h $(GO_GOGO_H)\n go/import.o: go/gofrontend/import.cc $(GO_SYSTEM_H) \\\n \t$(srcdir)/../include/filenames.h $(srcdir)/../include/simple-object.h \\\n \t$(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) go/gofrontend/export.h \\"}, {"sha": "ee100c6e9156492fb6430814f2f03f1f8fa52843", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -90,6 +90,14 @@ class Bfunction : public Gcc_tree\n   { }\n };\n \n+class Blabel : public Gcc_tree\n+{\n+ public:\n+  Blabel(tree t)\n+    : Gcc_tree(t)\n+  { }\n+};\n+\n // This file implements the interface between the Go frontend proper\n // and the gcc IR.  This implements specific instantiations of\n // abstract classes defined by the Go frontend proper.  The Go\n@@ -158,22 +166,46 @@ class Gcc_backend : public Backend\n \n   // Statements.\n \n-  // Create an assignment statement.\n   Bstatement*\n   assignment_statement(Bexpression* lhs, Bexpression* rhs, source_location);\n \n-  // Create a return statement.\n   Bstatement*\n   return_statement(Bfunction*, const std::vector<Bexpression*>&,\n \t\t   source_location);\n \n+  // Labels.\n+\n+  Blabel*\n+  label(Bfunction*, const std::string& name, source_location);\n+\n+  Bstatement*\n+  label_definition_statement(Blabel*);\n+\n+  Bstatement*\n+  goto_statement(Blabel*, source_location);\n+\n+  Bexpression*\n+  label_address(Blabel*, source_location);\n+\n  private:\n+  // Make a Bexpression from a tree.\n+  Bexpression*\n+  make_expression(tree t)\n+  { return new Bexpression(t); }\n+\n   // Make a Bstatement from a tree.\n   Bstatement*\n   make_statement(tree t)\n   { return new Bstatement(t); }\n };\n \n+// A helper function.\n+\n+static inline tree\n+get_identifier_from_string(const std::string& str)\n+{\n+  return get_identifier_with_length(str.data(), str.length());\n+}\n // Assignment.\n \n Bstatement*\n@@ -249,6 +281,58 @@ Gcc_backend::return_statement(Bfunction* bfunction,\n   return this->make_statement(ret);\n }\n \n+// Make a label.\n+\n+Blabel*\n+Gcc_backend::label(Bfunction* function, const std::string& name,\n+\t\t   source_location location)\n+{\n+  tree decl;\n+  if (name.empty())\n+    decl = create_artificial_label(location);\n+  else\n+    {\n+      tree id = get_identifier_from_string(name);\n+      decl = build_decl(location, LABEL_DECL, id, void_type_node);\n+      DECL_CONTEXT(decl) = function->get_tree();\n+    }\n+  return new Blabel(decl);\n+}\n+\n+// Make a statement which defines a label.\n+\n+Bstatement*\n+Gcc_backend::label_definition_statement(Blabel* label)\n+{\n+  tree lab = label->get_tree();\n+  tree ret = fold_build1_loc(DECL_SOURCE_LOCATION(lab), LABEL_EXPR,\n+\t\t\t     void_type_node, lab);\n+  return this->make_statement(ret);\n+}\n+\n+// Make a goto statement.\n+\n+Bstatement*\n+Gcc_backend::goto_statement(Blabel* label, source_location location)\n+{\n+  tree lab = label->get_tree();\n+  tree ret = fold_build1_loc(location, GOTO_EXPR, void_type_node, lab);\n+  return this->make_statement(ret);\n+}\n+\n+// Get the address of a label.\n+\n+Bexpression*\n+Gcc_backend::label_address(Blabel* label, source_location location)\n+{\n+  tree lab = label->get_tree();\n+  TREE_USED(lab) = 1;\n+  TREE_ADDRESSABLE(lab) = 1;\n+  tree ret = fold_convert_loc(location, ptr_type_node,\n+\t\t\t      build_fold_addr_expr_loc(location, lab));\n+  return this->make_expression(ret);\n+}\n+\n // The single backend.\n \n static Gcc_backend gcc_backend;\n@@ -276,6 +360,12 @@ tree_to_function(tree t)\n   return new Bfunction(t);\n }\n \n+tree\n+expression_to_tree(Bexpression* be)\n+{\n+  return be->get_tree();\n+}\n+\n tree\n statement_to_tree(Bstatement* bs)\n {"}, {"sha": "814263edc22c95f5a2f97215ad39921f64ac3323", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -27,6 +27,9 @@ class Bstatement;\n // The backend representation of a function definition.\n class Bfunction;\n \n+// The backend representation of a label.\n+class Blabel;\n+\n // A list of backend types.\n typedef std::vector<Btype*> Btypes;\n \n@@ -114,6 +117,30 @@ class Backend\n   virtual Bstatement*\n   return_statement(Bfunction*, const std::vector<Bexpression*>&,\n \t\t   source_location) = 0;\n+\n+  // Labels.\n+  \n+  // Create a new label.  NAME will be empty if this is a label\n+  // created by the frontend for a loop construct.  The location is\n+  // where the the label is defined.\n+  virtual Blabel*\n+  label(Bfunction*, const std::string& name, source_location) = 0;\n+\n+  // Create a statement which defines a label.  This statement will be\n+  // put into the codestream at the point where the label should be\n+  // defined.\n+  virtual Bstatement*\n+  label_definition_statement(Blabel*) = 0;\n+\n+  // Create a goto statement to a label.\n+  virtual Bstatement*\n+  goto_statement(Blabel*, source_location) = 0;\n+\n+  // Create an expression for the address of a label.  This is used to\n+  // get the return address of a deferred function which may call\n+  // recover.\n+  virtual Bexpression*\n+  label_address(Blabel*, source_location) = 0;\n };\n \n // The backend interface has to define this function.\n@@ -125,6 +152,7 @@ extern Backend* go_get_backend();\n \n extern Bexpression* tree_to_expr(tree);\n extern Bfunction* tree_to_function(tree);\n+extern tree expression_to_tree(Bexpression*);\n extern tree statement_to_tree(Bstatement*);\n \n #endif // !defined(GO_BACKEND_H)"}, {"sha": "afd2191e857f6fb9155e7ca89b16b8da3c2b59a8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -33,6 +33,7 @@ extern \"C\"\n #include \"import.h\"\n #include \"statements.h\"\n #include \"lex.h\"\n+#include \"backend.h\"\n #include \"expressions.h\"\n \n // Class Expression.\n@@ -12595,8 +12596,11 @@ class Label_addr_expression : public Expression\n   { return new Label_addr_expression(this->label_, this->location()); }\n \n   tree\n-  do_get_tree(Translate_context*)\n-  { return this->label_->get_addr(this->location()); }\n+  do_get_tree(Translate_context* context)\n+  {\n+    return expression_to_tree(this->label_->get_addr(context,\n+\t\t\t\t\t\t     this->location()));\n+  }\n \n  private:\n   // The label whose address we are taking."}, {"sha": "53e43c7b519deb7f04996fa714aeb343a92e03d3", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -1915,62 +1915,6 @@ Block::get_tree(Translate_context* context)\n   return bind;\n }\n \n-// Get the LABEL_DECL for a label.\n-\n-tree\n-Label::get_decl()\n-{\n-  if (this->decl_ == NULL)\n-    {\n-      tree id = get_identifier_from_string(this->name_);\n-      this->decl_ = build_decl(this->location_, LABEL_DECL, id, void_type_node);\n-      DECL_CONTEXT(this->decl_) = current_function_decl;\n-    }\n-  return this->decl_;\n-}\n-\n-// Return an expression for the address of this label.\n-\n-tree\n-Label::get_addr(source_location location)\n-{\n-  tree decl = this->get_decl();\n-  TREE_USED(decl) = 1;\n-  TREE_ADDRESSABLE(decl) = 1;\n-  return fold_convert_loc(location, ptr_type_node,\n-\t\t\t  build_fold_addr_expr_loc(location, decl));\n-}\n-\n-// Get the LABEL_DECL for an unnamed label.\n-\n-tree\n-Unnamed_label::get_decl()\n-{\n-  if (this->decl_ == NULL)\n-    this->decl_ = create_artificial_label(this->location_);\n-  return this->decl_;\n-}\n-\n-// Get the LABEL_EXPR for an unnamed label.\n-\n-tree\n-Unnamed_label::get_definition()\n-{\n-  tree t = build1(LABEL_EXPR, void_type_node, this->get_decl());\n-  SET_EXPR_LOCATION(t, this->location_);\n-  return t;\n-}\n-\n-// Return a goto to this label.\n-\n-tree\n-Unnamed_label::get_goto(source_location location)\n-{\n-  tree t = build1(GOTO_EXPR, void_type_node, this->get_decl());\n-  SET_EXPR_LOCATION(t, location);\n-  return t;\n-}\n-\n // Return the integer type to use for a size.\n \n GO_EXTERN_C"}, {"sha": "31549ac233a94cff7f396f3e0303728c99b5928c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -15,6 +15,7 @@\n #include \"dataflow.h\"\n #include \"import.h\"\n #include \"export.h\"\n+#include \"backend.h\"\n #include \"gogo.h\"\n \n // Class Gogo.\n@@ -4430,6 +4431,69 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n   return TRAVERSE_CONTINUE;\n }\n \n+// Class Label.\n+\n+// Get the backend representation for a label.\n+\n+Blabel*\n+Label::get_backend_label(Translate_context* context)\n+{\n+  if (this->blabel_ == NULL)\n+    {\n+      Function* function = context->function()->func_value();\n+      tree fndecl = function->get_decl();\n+      Bfunction* bfunction = tree_to_function(fndecl);\n+      this->blabel_ = context->backend()->label(bfunction, this->name_,\n+\t\t\t\t\t\tthis->location_);\n+    }\n+  return this->blabel_;\n+}\n+\n+// Return an expression for the address of this label.\n+\n+Bexpression*\n+Label::get_addr(Translate_context* context, source_location location)\n+{\n+  Blabel* label = this->get_backend_label(context);\n+  return context->backend()->label_address(label, location);\n+}\n+\n+// Class Unnamed_label.\n+\n+// Get the backend representation for an unnamed label.\n+\n+Blabel*\n+Unnamed_label::get_blabel(Translate_context* context)\n+{\n+  if (this->blabel_ == NULL)\n+    {\n+      Function* function = context->function()->func_value();\n+      tree fndecl = function->get_decl();\n+      Bfunction* bfunction = tree_to_function(fndecl);\n+      this->blabel_ = context->backend()->label(bfunction, \"\",\n+\t\t\t\t\t\tthis->location_);\n+    }\n+  return this->blabel_;\n+}\n+\n+// Return a statement which defines this unnamed label.\n+\n+Bstatement*\n+Unnamed_label::get_definition(Translate_context* context)\n+{\n+  Blabel* blabel = this->get_blabel(context);\n+  return context->backend()->label_definition_statement(blabel);\n+}\n+\n+// Return a goto statement to this unnamed label.\n+\n+Bstatement*\n+Unnamed_label::get_goto(Translate_context* context, source_location location)\n+{\n+  Blabel* blabel = this->get_blabel(context);\n+  return context->backend()->goto_statement(blabel, location);\n+}\n+\n // Class Package.\n \n Package::Package(const std::string& name, const std::string& unique_prefix,"}, {"sha": "cf126cdc282b43027f4bb677f362aaf3f9de01e5", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -40,6 +40,9 @@ class Translate_context;\n class Backend;\n class Export;\n class Import;\n+class Bexpression;\n+class Bstatement;\n+class Blabel;\n \n // This file declares the basic classes used to hold the internal\n // representation of Go which is built by the parser.\n@@ -2115,7 +2118,7 @@ class Label\n {\n  public:\n   Label(const std::string& name)\n-    : name_(name), location_(0), is_used_(false), decl_(NULL)\n+    : name_(name), location_(0), is_used_(false), blabel_(NULL)\n   { }\n \n   // Return the label's name.\n@@ -2151,13 +2154,15 @@ class Label\n     this->location_ = location;\n   }\n \n-  // Return the LABEL_DECL for this decl.\n-  tree\n-  get_decl();\n+  // Return the backend representation for this label.\n+  Blabel*\n+  get_backend_label(Translate_context*);\n \n-  // Return an expression for the address of this label.\n-  tree\n-  get_addr(source_location location);\n+  // Return an expression for the address of this label.  This is used\n+  // to get the return address of a deferred function to see whether\n+  // the function may call recover.\n+  Bexpression*\n+  get_addr(Translate_context*, source_location location);\n \n  private:\n   // The name of the label.\n@@ -2167,8 +2172,8 @@ class Label\n   source_location location_;\n   // Whether the label has been used.\n   bool is_used_;\n-  // The LABEL_DECL.\n-  tree decl_;\n+  // The backend representation.\n+  Blabel* blabel_;\n };\n \n // An unnamed label.  These are used when lowering loops.\n@@ -2177,7 +2182,7 @@ class Unnamed_label\n {\n  public:\n   Unnamed_label(source_location location)\n-    : location_(location), decl_(NULL)\n+    : location_(location), blabel_(NULL)\n   { }\n \n   // Get the location where the label is defined.\n@@ -2191,22 +2196,22 @@ class Unnamed_label\n   { this->location_ = location; }\n \n   // Return a statement which defines this label.\n-  tree\n-  get_definition();\n+  Bstatement*\n+  get_definition(Translate_context*);\n \n   // Return a goto to this label from LOCATION.\n-  tree\n-  get_goto(source_location location);\n+  Bstatement*\n+  get_goto(Translate_context*, source_location location);\n \n  private:\n-  // Return the LABEL_DECL to use with GOTO_EXPR.\n-  tree\n-  get_decl();\n+  // Return the backend representation.\n+  Blabel*\n+  get_blabel(Translate_context*);\n \n   // The location where the label is defined.\n   source_location location_;\n-  // The LABEL_DECL.\n-  tree decl_;\n+  // The backend representation of this label.\n+  Blabel* blabel_;\n };\n \n // An imported package."}, {"sha": "854b329d9ecc456147587fb48ea12067cebda398", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56e667993d46456e38c70d7e36c9be3c4dbf37f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=d56e667993d46456e38c70d7e36c9be3c4dbf37f", "patch": "@@ -2619,8 +2619,11 @@ class Bc_statement : public Statement\n   { return false; }\n \n   tree\n-  do_get_tree(Translate_context*)\n-  { return this->label_->get_goto(this->location()); }\n+  do_get_tree(Translate_context* context)\n+  {\n+    return statement_to_tree(this->label_->get_goto(context,\n+\t\t\t\t\t\t    this->location()));\n+  }\n \n  private:\n   // The label that this branches to.\n@@ -2692,9 +2695,12 @@ Goto_statement::do_check_types(Gogo*)\n // Return the tree for the goto statement.\n \n tree\n-Goto_statement::do_get_tree(Translate_context*)\n+Goto_statement::do_get_tree(Translate_context* context)\n {\n-  return this->build_stmt_1(GOTO_EXPR, this->label_->get_decl());\n+  Blabel* blabel = this->label_->get_backend_label(context);\n+  Bstatement* statement = context->backend()->goto_statement(blabel,\n+\t\t\t\t\t\t\t     this->location());\n+  return statement_to_tree(statement);\n }\n \n // Make a goto statement.\n@@ -2725,8 +2731,11 @@ class Goto_unnamed_statement : public Statement\n   { return false; }\n \n   tree\n-  do_get_tree(Translate_context*)\n-  { return this->label_->get_goto(this->location()); }\n+  do_get_tree(Translate_context* context)\n+  {\n+    return statement_to_tree(this->label_->get_goto(context,\n+\t\t\t\t\t\t    this->location()));\n+  }\n \n  private:\n   Unnamed_label* label_;\n@@ -2754,9 +2763,12 @@ Label_statement::do_traverse(Traverse*)\n // Return a tree defining this label.\n \n tree\n-Label_statement::do_get_tree(Translate_context*)\n+Label_statement::do_get_tree(Translate_context* context)\n {\n-  return this->build_stmt_1(LABEL_EXPR, this->label_->get_decl());\n+  Blabel* blabel = this->label_->get_backend_label(context);\n+  Bstatement* statement;\n+  statement = context->backend()->label_definition_statement(blabel);\n+  return statement_to_tree(statement);\n }\n \n // Make a label statement.\n@@ -2783,8 +2795,8 @@ class Unnamed_label_statement : public Statement\n   { return TRAVERSE_CONTINUE; }\n \n   tree\n-  do_get_tree(Translate_context*)\n-  { return this->label_->get_definition(); }\n+  do_get_tree(Translate_context* context)\n+  { return statement_to_tree(this->label_->get_definition(context)); }\n \n  private:\n   // The label.\n@@ -3134,7 +3146,10 @@ Case_clauses::Case_clause::get_constant_tree(Translate_context* context,\n     }\n \n   if (!this->is_fallthrough_)\n-    append_to_statement_list(break_label->get_goto(this->location_), stmt_list);\n+    {\n+      Bstatement* g = break_label->get_goto(context, this->location_);\n+      append_to_statement_list(statement_to_tree(g), stmt_list);\n+    }\n }\n \n // Class Case_clauses.\n@@ -3387,7 +3402,8 @@ Constant_switch_statement::do_get_tree(Translate_context* context)\n   SET_EXPR_LOCATION(s, this->location());\n   append_to_statement_list(s, &stmt_list);\n \n-  append_to_statement_list(break_label->get_definition(), &stmt_list);\n+  Bstatement* ldef = break_label->get_definition(context);\n+  append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n \n   return stmt_list;\n }\n@@ -4245,7 +4261,8 @@ Select_clauses::get_tree(Translate_context* context,\n       tree stmt_list = NULL_TREE;\n       append_to_statement_list(default_clause->get_statements_tree(context),\n \t\t\t       &stmt_list);\n-      append_to_statement_list(break_label->get_definition(), &stmt_list);\n+      Bstatement* ldef = break_label->get_definition(context);\n+      append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n       return stmt_list;\n     }\n \n@@ -4336,7 +4353,8 @@ Select_clauses::get_tree(Translate_context* context,\n \t}\n     }\n \n-  append_to_statement_list(break_label->get_definition(), &stmt_list);\n+  Bstatement* ldef = break_label->get_definition(context);\n+  append_to_statement_list(statement_to_tree(ldef), &stmt_list);\n \n   tree switch_stmt = build3(SWITCH_EXPR, sizetype, call, stmt_list, NULL_TREE);\n   SET_EXPR_LOCATION(switch_stmt, location);\n@@ -4358,10 +4376,11 @@ Select_clauses::add_clause_tree(Translate_context* context, int case_index,\n \t\t\t\t  NULL_TREE, label),\n \t\t\t   stmt_list);\n   append_to_statement_list(clause->get_statements_tree(context), stmt_list);\n-  tree g = bottom_label->get_goto(clause->statements() == NULL\n-\t\t\t\t  ? clause->location()\n-\t\t\t\t  : clause->statements()->end_location());\n-  append_to_statement_list(g, stmt_list);\n+  source_location gloc = (clause->statements() == NULL\n+\t\t\t  ? clause->location()\n+\t\t\t  : clause->statements()->end_location());\n+  Bstatement* g = bottom_label->get_goto(context, gloc);\n+  append_to_statement_list(statement_to_tree(g), stmt_list);\n }\n \n // Class Select_statement."}]}