{"sha": "3db8a1134670de6000b92253f8274442cd3e5f33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiOGExMTM0NjcwZGU2MDAwYjkyMjUzZjgyNzQ0NDJjZDNlNWYzMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-16T04:01:25Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-16T04:01:25Z"}, "message": "i386.c (ix86_va_start): Ensure all integer constant trees are constructed with a suitable tree type.\n\n\n\t* config/i386/i386.c (ix86_va_start): Ensure all integer constant\n\ttrees are constructed with a suitable tree type.\n\nFrom-SVN: r112982", "tree": {"sha": "c34af101c1173d68003ecd5c8595c7c1af29175e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34af101c1173d68003ecd5c8595c7c1af29175e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db8a1134670de6000b92253f8274442cd3e5f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db8a1134670de6000b92253f8274442cd3e5f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db8a1134670de6000b92253f8274442cd3e5f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db8a1134670de6000b92253f8274442cd3e5f33/comments", "author": null, "committer": null, "parents": [{"sha": "f5f701ad0010445cfff157bda3d08441ab0e82f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f701ad0010445cfff157bda3d08441ab0e82f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f701ad0010445cfff157bda3d08441ab0e82f4"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "10b55b19dd1a0c7a19cfa087b2765ef50fe3adc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8a1134670de6000b92253f8274442cd3e5f33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8a1134670de6000b92253f8274442cd3e5f33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3db8a1134670de6000b92253f8274442cd3e5f33", "patch": "@@ -1,3 +1,8 @@\n+2006-04-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (ix86_va_start): Ensure all integer constant\n+\ttrees are constructed with a suitable tree type.\n+\n 2006-04-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* tree.c (integer_zerop): Ignore TREE_CONSTANT_OVERFLOW."}, {"sha": "4d3a972e38671a0d2c1ee0175d0f94f65dd44a2d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db8a1134670de6000b92253f8274442cd3e5f33/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db8a1134670de6000b92253f8274442cd3e5f33/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3db8a1134670de6000b92253f8274442cd3e5f33", "patch": "@@ -4122,6 +4122,7 @@ ix86_va_start (tree valist, rtx nextarg)\n   HOST_WIDE_INT words, n_gpr, n_fpr;\n   tree f_gpr, f_fpr, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, t;\n+  tree type;\n \n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT)\n@@ -4152,35 +4153,39 @@ ix86_va_start (tree valist, rtx nextarg)\n \n   if (cfun->va_list_gpr_size)\n     {\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n-\t\t  build_int_cst (NULL_TREE, n_gpr * 8));\n+      type = TREE_TYPE (gpr);\n+      t = build2 (MODIFY_EXPR, type, gpr,\n+\t\t  build_int_cst (type, n_gpr * 8));\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }\n \n   if (cfun->va_list_fpr_size)\n     {\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n-\t\t  build_int_cst (NULL_TREE, n_fpr * 16 + 8*REGPARM_MAX));\n+      type = TREE_TYPE (fpr);\n+      t = build2 (MODIFY_EXPR, type, fpr,\n+\t\t  build_int_cst (type, n_fpr * 16 + 8*REGPARM_MAX));\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }\n \n   /* Find the overflow area.  */\n-  t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n+  type = TREE_TYPE (ovf);\n+  t = make_tree (type, virtual_incoming_args_rtx);\n   if (words != 0)\n-    t = build2 (PLUS_EXPR, TREE_TYPE (ovf), t,\n-\t        build_int_cst (NULL_TREE, words * UNITS_PER_WORD));\n-  t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n+    t = build2 (PLUS_EXPR, type, t,\n+\t        build_int_cst (type, words * UNITS_PER_WORD));\n+  t = build2 (MODIFY_EXPR, type, ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   if (cfun->va_list_gpr_size || cfun->va_list_fpr_size)\n     {\n       /* Find the register save area.\n \t Prologue of the function save it right above stack frame.  */\n-      t = make_tree (TREE_TYPE (sav), frame_pointer_rtx);\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n+      type = TREE_TYPE (sav);\n+      t = make_tree (type, frame_pointer_rtx);\n+      t = build2 (MODIFY_EXPR, type, sav, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }"}]}