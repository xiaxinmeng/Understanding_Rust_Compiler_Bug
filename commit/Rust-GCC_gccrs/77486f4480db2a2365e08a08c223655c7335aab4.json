{"sha": "77486f4480db2a2365e08a08c223655c7335aab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0ODZmNDQ4MGRiMmEyMzY1ZTA4YTA4YzIyMzY1NWM3MzM1YWFiNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-11-20T14:56:29Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-11-20T14:56:29Z"}, "message": "combine.c (try_combine): Prefer to delete dead SETs inside a PARALLEL over keeping them.\n\n\t* combine.c (try_combine): Prefer to delete dead SETs inside\n\ta PARALLEL over keeping them.\n\nFrom-SVN: r217865", "tree": {"sha": "b43ce0107d0425bef9d42e79249a9ccb04f04e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b43ce0107d0425bef9d42e79249a9ccb04f04e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77486f4480db2a2365e08a08c223655c7335aab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77486f4480db2a2365e08a08c223655c7335aab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77486f4480db2a2365e08a08c223655c7335aab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77486f4480db2a2365e08a08c223655c7335aab4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43ae6da22f75cc705ce870c29e1bb7cc542020e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ae6da22f75cc705ce870c29e1bb7cc542020e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ae6da22f75cc705ce870c29e1bb7cc542020e0"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "4f89b0847082b8d4feae8d479a11e956ffd1c5c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77486f4480db2a2365e08a08c223655c7335aab4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77486f4480db2a2365e08a08c223655c7335aab4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77486f4480db2a2365e08a08c223655c7335aab4", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (try_combine): Prefer to delete dead SETs inside\n+\ta PARALLEL over keeping them.\n+\n 2014-11-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (combine_validate_cost): Always print the insn costs"}, {"sha": "1808f9702fbac1c656c703329387108f5068bcc2", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77486f4480db2a2365e08a08c223655c7335aab4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77486f4480db2a2365e08a08c223655c7335aab4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=77486f4480db2a2365e08a08c223655c7335aab4", "patch": "@@ -3265,29 +3265,25 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \tRTVEC_ELT (newpat_vec_with_clobbers, i) = XVECEXP (newpat, 0, i);\n     }\n \n-  /* Is the result of combination a valid instruction?  */\n-  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+  /* We have recognized nothing yet.  */\n+  insn_code_number = -1;\n+\n+  /* See if this is a PARALLEL of two SETs where one SET's destination is\n+     a register that is unused and this isn't marked as an instruction that\n+     might trap in an EH region.  In that case, we just need the other SET.\n+     We prefer this over the PARALLEL.\n \n-  /* If the result isn't valid, see if it is a PARALLEL of two SETs where\n-     the second SET's destination is a register that is unused and isn't\n-     marked as an instruction that might trap in an EH region.  In that case,\n-     we just need the first SET.   This can occur when simplifying a divmod\n-     insn.  We *must* test for this case here because the code below that\n-     splits two independent SETs doesn't handle this case correctly when it\n-     updates the register status.\n+     This can occur when simplifying a divmod insn.  We *must* test for this\n+     case here because the code below that splits two independent SETs doesn't\n+     handle this case correctly when it updates the register status.\n \n      It's pointless doing this if we originally had two sets, one from\n      i3, and one from i2.  Combining then splitting the parallel results\n      in the original i2 again plus an invalid insn (which we delete).\n      The net effect is only to move instructions around, which makes\n-     debug info less accurate.\n+     debug info less accurate.  */\n \n-     Also check the case where the first SET's destination is unused.\n-     That would not cause incorrect code, but does cause an unneeded\n-     insn to remain.  */\n-\n-  if (insn_code_number < 0\n-      && !(added_sets_2 && i1 == 0)\n+  if (!(added_sets_2 && i1 == 0)\n       && GET_CODE (newpat) == PARALLEL\n       && XVECLEN (newpat, 0) == 2\n       && GET_CODE (XVECEXP (newpat, 0, 0)) == SET\n@@ -3296,6 +3292,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n     {\n       rtx set0 = XVECEXP (newpat, 0, 0);\n       rtx set1 = XVECEXP (newpat, 0, 1);\n+      rtx oldpat = newpat;\n \n       if (((REG_P (SET_DEST (set1))\n \t    && find_reg_note (i3, REG_UNUSED, SET_DEST (set1)))\n@@ -3322,8 +3319,15 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t  if (insn_code_number >= 0)\n \t    changed_i3_dest = 1;\n \t}\n+\n+      if (insn_code_number < 0)\n+\tnewpat = oldpat;\n     }\n \n+  /* Is the result of combination a valid instruction?  */\n+  if (insn_code_number < 0)\n+    insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\n   /* If we were combining three insns and the result is a simple SET\n      with no ASM_OPERANDS that wasn't recognized, try to split it into two\n      insns.  There are two ways to do this.  It can be split using a"}]}