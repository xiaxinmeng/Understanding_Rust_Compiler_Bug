{"sha": "8b9a03d644fb55566180aeec291b64ca23f3c77b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5YTAzZDY0NGZiNTU1NjYxODBhZWVjMjkxYjY0Y2EyM2YzYzc3Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-03-08T12:17:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-03-08T12:17:36Z"}, "message": "tree-if-conv.c: fix ICE seen with -fno-tree-forwprop (PR tree-optimization/84178)\n\nPR tree-optimization/84178 reports a couple of source files that ICE inside\nifcvt when compiled with -03 -fno-tree-forwprop (trunk and gcc 7).\n\nBoth cases involve problems with ifcvt's per-BB gimplified predicates.\n\nTestcase 1 fails this assertion within release_bb_predicate during cleanup:\n\n283\t      if (flag_checking)\n284\t\tfor (gimple_stmt_iterator i = gsi_start (stmts);\n285\t\t     !gsi_end_p (i); gsi_next (&i))\n286\t\t  gcc_assert (! gimple_use_ops (gsi_stmt (i)));\n\nThe testcase contains a division in the loop, which leads to\nif_convertible_loop_p returning false (due to gimple_could_trap_p being true\nfor the division).  This happens *after* the per-BB gimplified predicates\nhave been created in predicate_bbs (loop).\nHence tree_if_conversion bails out to \"cleanup\", but the gimplified predicates\nexist and make use of SSA names; for example this conjunction for two BB\nconditions:\n\n  _4 = h4.1_112 != 0;\n  _175 = (signed char) _117;\n  _176 = _175 >= 0;\n  _174 = _4 & _176;\n\nis using SSA names.\n\nThis assertion was added in r236498 (aka c3deca2519d97c55876869c57cf11ae1e5c6cf8b):\n\n    2016-05-20  Richard Biener  <rguenther@suse.de>\n\n        * tree-if-conv.c (add_bb_predicate_gimplified_stmts): Use\n        gimple_seq_add_seq_without_update.\n        (release_bb_predicate): Assert we have no operands to free.\n        (if_convertible_loop_p_1): Calculate post dominators later.\n        Do not free BB predicates here.\n        (combine_blocks): Do not recompute BB predicates.\n        (version_loop_for_if_conversion): Save BB predicates around\n        loop versioning.\n\n        * gcc.dg/tree-ssa/ifc-cd.c: Adjust.\n\nThe following patch fixes this by adding a call to gimple_seq_discard\nto release_bb_predicate.  It also updates the assertion, so that\ninstead of asserting the stmts have no imm uses, instead assert that\nthey weren't added to a bb before discarding them (otherwise discarding\nthem would be a bug).  We know this is the case because\ninsert_gimplified_predicates has:\n\n\t  /* Once the sequence is code generated, set it to NULL.  */\n\t  set_bb_predicate_gimplified_stmts (bb, NULL);\n\nbut asserting it seems appropriate as a double-check.\n\nThe patch doesn't address the 2nd issue within PR tree-optimization/84178.\n\ngcc/ChangeLog:\n\tPR tree-optimization/84178\n\t* tree-if-conv.c (release_bb_predicate): Remove the\n\tthe assertion that the stmts have NULL use_ops.\n\tDiscard the statements, asserting that they haven't\n\tyet been added to a BB.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/84178\n\t* gcc.c-torture/compile/pr84178-1.c: New test.\n\nFrom-SVN: r258363", "tree": {"sha": "80840c52f2627628a01d8115df1fa6bb0e984818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80840c52f2627628a01d8115df1fa6bb0e984818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9a03d644fb55566180aeec291b64ca23f3c77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a03d644fb55566180aeec291b64ca23f3c77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9a03d644fb55566180aeec291b64ca23f3c77b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a03d644fb55566180aeec291b64ca23f3c77b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24b830b6cde4ed227661d29ba985565f23a2bf96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b830b6cde4ed227661d29ba985565f23a2bf96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b830b6cde4ed227661d29ba985565f23a2bf96"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "e1c40c310a0e67de8dfc37f0aafb5e5cb62ec987", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b9a03d644fb55566180aeec291b64ca23f3c77b", "patch": "@@ -1,3 +1,11 @@\n+2018-03-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/84178\n+\t* tree-if-conv.c (release_bb_predicate): Remove the\n+\tthe assertion that the stmts have NULL use_ops.\n+\tDiscard the statements, asserting that they haven't\n+\tyet been added to a BB.\n+\n 2018-03-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84746"}, {"sha": "eb8ade6cb6802d12c392e42405e026ecd4c2106d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b9a03d644fb55566180aeec291b64ca23f3c77b", "patch": "@@ -1,3 +1,8 @@\n+2018-03-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/84178\n+\t* gcc.c-torture/compile/pr84178-1.c: New test.\n+\n 2018-03-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* lib/target-supports.exp: Do not return zero from a ifunc"}, {"sha": "49f2c893054f1b3b4405942b95c0b24cfad245e5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr84178-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84178-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84178-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84178-1.c?ref=8b9a03d644fb55566180aeec291b64ca23f3c77b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-fno-tree-forwprop\" } */\n+\n+int zy, h4;\n+\n+void\n+r8 (long int mu, int *jr, int *fi, short int dv)\n+{\n+  do\n+    {\n+      int tx;\n+\n+      tx = !!h4 ? (zy / h4) : 1;\n+      mu = tx;\n+      *jr = (((unsigned char) mu > (254 >> dv)) ? 0 : (unsigned char) tx) + *fi;\n+    } while (*jr == 0);\n+\n+  r8 (mu, jr, fi, 1);\n+}"}, {"sha": "5467f3fa4e041fc00c584ba450adad9600de0a14", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a03d644fb55566180aeec291b64ca23f3c77b/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8b9a03d644fb55566180aeec291b64ca23f3c77b", "patch": "@@ -271,20 +271,22 @@ init_bb_predicate (basic_block bb)\n   set_bb_predicate (bb, boolean_true_node);\n }\n \n-/* Release the SSA_NAMEs associated with the predicate of basic block BB,\n-   but don't actually free it.  */\n+/* Release the SSA_NAMEs associated with the predicate of basic block BB.  */\n \n static inline void\n release_bb_predicate (basic_block bb)\n {\n   gimple_seq stmts = bb_predicate_gimplified_stmts (bb);\n   if (stmts)\n     {\n+      /* Ensure that these stmts haven't yet been added to a bb.  */\n       if (flag_checking)\n \tfor (gimple_stmt_iterator i = gsi_start (stmts);\n \t     !gsi_end_p (i); gsi_next (&i))\n-\t  gcc_assert (! gimple_use_ops (gsi_stmt (i)));\n+\t  gcc_assert (! gimple_bb (gsi_stmt (i)));\n \n+      /* Discard them.  */\n+      gimple_seq_discard (stmts);\n       set_bb_predicate_gimplified_stmts (bb, NULL);\n     }\n }"}]}