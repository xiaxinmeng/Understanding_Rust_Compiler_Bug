{"sha": "bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzMTYyMGNlYmM3OTU1ZmYyZjRmOTc1MjkyZGNiZTljNmYwMjZhNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-09T22:46:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-09T22:46:51Z"}, "message": "Don't fold conversion from a constant variable.\n\n\t* call.c (convert_like_real): Remove \"inner\" parameter.\n\tDon't replace a constant with its value.\n\t* cp-gimplify.c (cp_fully_fold): Use cp_fold_rvalue.\n\nFrom-SVN: r249083", "tree": {"sha": "ecb9d5e98930e4812bbaf1fff2e77e347fde4ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb9d5e98930e4812bbaf1fff2e77e347fde4ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09649fdc609c79ea5acb9668636c7d8a5f64a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09649fdc609c79ea5acb9668636c7d8a5f64a7c"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "8949f6b56f68196494619087f8f86533c751b26a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "patch": "@@ -1,5 +1,9 @@\n 2017-06-09  Jason Merrill  <jason@redhat.com>\n \n+\t* call.c (convert_like_real): Remove \"inner\" parameter.\n+\tDon't replace a constant with its value.\n+\t* cp-gimplify.c (cp_fully_fold): Use cp_fold_rvalue.\n+\n \t* pt.c (convert_nontype_argument): Check NULLPTR_TYPE_P rather than\n \tnullptr_node.\n "}, {"sha": "5e65bfbff4b56d2676427d1fc3a724f3a88924b2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "patch": "@@ -147,14 +147,14 @@ static int joust (struct z_candidate *, struct z_candidate *, bool,\n static int compare_ics (conversion *, conversion *);\n static tree build_over_call (struct z_candidate *, int, tsubst_flags_t);\n #define convert_like(CONV, EXPR, COMPLAIN)\t\t\t\\\n-  convert_like_real ((CONV), (EXPR), NULL_TREE, 0, 0,\t\t\\\n+  convert_like_real ((CONV), (EXPR), NULL_TREE, 0,\t\t\\\n \t\t     /*issue_conversion_warnings=*/true,\t\\\n \t\t     /*c_cast_p=*/false, (COMPLAIN))\n #define convert_like_with_context(CONV, EXPR, FN, ARGNO, COMPLAIN )\t\\\n-  convert_like_real ((CONV), (EXPR), (FN), (ARGNO), 0,\t\t\t\\\n+  convert_like_real ((CONV), (EXPR), (FN), (ARGNO),\t\t\t\\\n \t\t     /*issue_conversion_warnings=*/true,\t\t\\\n \t\t     /*c_cast_p=*/false, (COMPLAIN))\n-static tree convert_like_real (conversion *, tree, tree, int, int, bool,\n+static tree convert_like_real (conversion *, tree, tree, int, bool,\n \t\t\t       bool, tsubst_flags_t);\n static void op_error (location_t, enum tree_code, enum tree_code, tree,\n \t\t      tree, tree, bool);\n@@ -6552,7 +6552,7 @@ maybe_print_user_conv_context (conversion *convs)\n \n static tree\n convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n-\t\t   int inner, bool issue_conversion_warnings,\n+\t\t   bool issue_conversion_warnings,\n \t\t   bool c_cast_p, tsubst_flags_t complain)\n {\n   tree totype = convs->type;\n@@ -6606,7 +6606,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t      totype);\n \t      if (complained)\n \t\tprint_z_candidate (loc, \"candidate is:\", t->cand);\n-\t      expr = convert_like_real (t, expr, fn, argnum, 1,\n+\t      expr = convert_like_real (t, expr, fn, argnum,\n \t\t\t\t\t/*issue_conversion_warnings=*/false,\n \t\t\t\t\t/*c_cast_p=*/false,\n \t\t\t\t\tcomplain);\n@@ -6623,14 +6623,14 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    }\n \t  else if (t->kind == ck_user || !t->bad_p)\n \t    {\n-\t      expr = convert_like_real (t, expr, fn, argnum, 1,\n+\t      expr = convert_like_real (t, expr, fn, argnum,\n \t\t\t\t\t/*issue_conversion_warnings=*/false,\n \t\t\t\t\t/*c_cast_p=*/false,\n \t\t\t\t\tcomplain);\n \t      break;\n \t    }\n \t  else if (t->kind == ck_ambig)\n-\t    return convert_like_real (t, expr, fn, argnum, 1,\n+\t    return convert_like_real (t, expr, fn, argnum,\n \t\t\t\t      /*issue_conversion_warnings=*/false,\n \t\t\t\t      /*c_cast_p=*/false,\n \t\t\t\t      complain);\n@@ -6734,18 +6734,6 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n       if (type_unknown_p (expr))\n \texpr = instantiate_type (totype, expr, complain);\n-      /* Convert a constant to its underlying value, unless we are\n-\t about to bind it to a reference, in which case we need to\n-\t leave it as an lvalue.  */\n-      if (inner >= 0)\n-        {   \n-          expr = scalar_constant_value (expr);\n-          if (expr == null_node && INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (totype))\n-            /* If __null has been converted to an integer type, we do not\n-               want to warn about uses of EXPR as an integer, rather than\n-               as a pointer.  */\n-            expr = build_int_cst (totype, 0);\n-        }\n       return expr;\n     case ck_ambig:\n       /* We leave bad_p off ck_ambig because overload resolution considers\n@@ -6776,7 +6764,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (expr), ix, val)\n \t  {\n \t    tree sub = convert_like_real (convs->u.list[ix], val, fn, argnum,\n-\t\t\t\t\t  1, false, false, complain);\n+\t\t\t\t\t  false, false, complain);\n \t    if (sub == error_mark_node)\n \t      return sub;\n \t    if (!BRACE_ENCLOSED_INITIALIZER_P (val)\n@@ -6832,7 +6820,6 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     };\n \n   expr = convert_like_real (next_conversion (convs), expr, fn, argnum,\n-\t\t\t    convs->kind == ck_ref_bind ? -1 : 1,\n \t\t\t    convs->kind == ck_ref_bind ? issue_conversion_warnings : false, \n \t\t\t    c_cast_p,\n \t\t\t    complain);\n@@ -10173,7 +10160,7 @@ perform_direct_initialization_if_possible (tree type,\n   if (!conv || conv->bad_p)\n     expr = NULL_TREE;\n   else\n-    expr = convert_like_real (conv, expr, NULL_TREE, 0, 0,\n+    expr = convert_like_real (conv, expr, NULL_TREE, 0,\n \t\t\t      /*issue_conversion_warnings=*/false,\n \t\t\t      c_cast_p,\n \t\t\t      complain);"}, {"sha": "e3802f1820b55fb38f32fcb5cd13186d5c487c6d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf31620cebc7955ff2f4f975292dcbe9c6f026a5/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=bf31620cebc7955ff2f4f975292dcbe9c6f026a5", "patch": "@@ -1935,20 +1935,6 @@ cxx_omp_disregard_value_expr (tree decl, bool shared)\n \t && DECL_OMP_PRIVATIZED_MEMBER (decl);\n }\n \n-/* Perform folding on expression X.  */\n-\n-tree\n-cp_fully_fold (tree x)\n-{\n-  if (processing_template_decl)\n-    return x;\n-  /* FIXME cp_fold ought to be a superset of maybe_constant_value so we don't\n-     have to call both.  */\n-  if (cxx_dialect >= cxx11)\n-    x = maybe_constant_value (x);\n-  return cp_fold (x);\n-}\n-\n /* Fold expression X which is used as an rvalue if RVAL is true.  */\n \n static tree\n@@ -1980,6 +1966,20 @@ cp_fold_rvalue (tree x)\n   return cp_fold_maybe_rvalue (x, true);\n }\n \n+/* Perform folding on expression X.  */\n+\n+tree\n+cp_fully_fold (tree x)\n+{\n+  if (processing_template_decl)\n+    return x;\n+  /* FIXME cp_fold ought to be a superset of maybe_constant_value so we don't\n+     have to call both.  */\n+  if (cxx_dialect >= cxx11)\n+    x = maybe_constant_value (x);\n+  return cp_fold_rvalue (x);\n+}\n+\n /* c-common interface to cp_fold.  If IN_INIT, this is in a static initializer\n    and certain changes are made to the folding done.  Or should be (FIXME).  We\n    never touch maybe_const, as it is only used for the C front-end"}]}