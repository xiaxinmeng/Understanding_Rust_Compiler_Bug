{"sha": "ad9ec7b3c5969c776bc28e18292be09981abaa6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ZWM3YjNjNTk2OWM3NzZiYzI4ZTE4MjkyYmUwOTk4MWFiYWE2YQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2014-07-01T02:10:31Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-07-01T02:10:31Z"}, "message": "re PR libstdc++/61424 (std::regex matches right to left, not leftmost longest)\n\n\tPR libstdc++/61424\n\t* include/bits/regex.tcc (__regex_algo_impl<>): Use DFS for ECMAScript,\n\tnot just regex containing back-references.\n\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_disjunction):\n\texchange _M_next and _M_alt for alternative operator,\n\tmaking matching from left to right.\n\t* include/bits/regex_executor.h (_State_info<>::_M_get_sol_pos):\n\tAdd position tracking fom DFS.\n\t* include/bits/regex_executor.tcc (_Executor<>::_M_main_dispatch,\n\t_Executor<>::_M_dfs): Likewise.\n\t* include/bits/regex_scanner.h: Remove unused enum entry.\n\t* testsuite/28_regex/algorithms/regex_search/61424.cc: New\n\ttestcase from PR.\n\nFrom-SVN: r212184", "tree": {"sha": "88aab4a08a668b5a2e116189f2dd62d4878258ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88aab4a08a668b5a2e116189f2dd62d4878258ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9ec7b3c5969c776bc28e18292be09981abaa6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9ec7b3c5969c776bc28e18292be09981abaa6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9ec7b3c5969c776bc28e18292be09981abaa6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9ec7b3c5969c776bc28e18292be09981abaa6a/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25f28ff0ea8202215b7432f9ade8cb51b01a0185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f28ff0ea8202215b7432f9ade8cb51b01a0185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f28ff0ea8202215b7432f9ade8cb51b01a0185"}], "stats": {"total": 131, "additions": 123, "deletions": 8}, "files": [{"sha": "75e4841626cae67eb87395e039fda03622d7030f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -1,3 +1,19 @@\n+2014-07-01  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/61424\n+\t* include/bits/regex.tcc (__regex_algo_impl<>): Use DFS for ECMAScript,\n+\tnot just regex containing back-references.\n+\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_disjunction):\n+\texchange _M_next and _M_alt for alternative operator,\n+\tmaking matching from left to right.\n+\t* include/bits/regex_executor.h (_State_info<>::_M_get_sol_pos):\n+\tAdd position tracking fom DFS.\n+\t* include/bits/regex_executor.tcc (_Executor<>::_M_main_dispatch,\n+\t_Executor<>::_M_dfs): Likewise.\n+\t* include/bits/regex_scanner.h: Remove unused enum entry.\n+\t* testsuite/28_regex/algorithms/regex_search/61424.cc: New\n+\ttestcase from PR.\n+\n 2014-06-30  Jason Merrill  <jason@redhat.com>\n \n \t* libsupc++/cxxabi.h (class __pbase_type_info): __pointer_catch"}, {"sha": "3322379a5b81c46d01047c8679bfd833e4480348", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -71,6 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_REGEX_USE_THOMPSON_NFA if they need to use this approach.\n       bool __ret;\n       if (!__re._M_automaton->_M_has_backref\n+\t  && !(__re._M_flags & regex_constants::ECMAScript)\n #ifndef _GLIBCXX_REGEX_USE_THOMPSON_NFA\n \t  && __policy == _RegexExecutorPolicy::_S_alternate\n #endif"}, {"sha": "f15f7dd0f7b3dd22d5a358a0adc856be7aa79ffd", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -103,9 +103,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  auto __end = _M_nfa._M_insert_dummy();\n \t  __alt1._M_append(__end);\n \t  __alt2._M_append(__end);\n+\t  // __alt2 is state._M_next, __alt1 is state._M_alt. The executor\n+\t  // executes _M_alt before _M_next, as well as executing left\n+\t  // alternative before right one.\n \t  _M_stack.push(_StateSeqT(_M_nfa,\n-\t\t\t\t   _M_nfa._M_insert_alt(__alt1._M_start,\n-\t\t\t\t\t\t\t__alt2._M_start, false),\n+\t\t\t\t   _M_nfa._M_insert_alt(__alt2._M_start,\n+\t\t\t\t\t\t\t__alt1._M_start, false),\n \t\t\t\t   __end));\n \t}\n     }"}, {"sha": "40d3443d9855f139c12b03e70ce264d41d3685b1", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -173,6 +173,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  void _M_queue(_StateIdT __i, const _ResultsVec& __res)\n \t  { _M_match_queue.emplace_back(__i, __res); }\n \n+\t  // Dummy implementations for BFS mode.\n+\t  _BiIter* _M_get_sol_pos() { return nullptr; }\n+\n \t  // Saves states that need to be considered for the next character.\n \t  vector<pair<_StateIdT, _ResultsVec>>\t_M_match_queue;\n \t  // Indicates which states are already visited.\n@@ -192,11 +195,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  bool _M_visited(_StateIdT) const { return false; }\n \t  void _M_queue(_StateIdT, const _ResultsVec&) { }\n \n+\t  _BiIter* _M_get_sol_pos() { return &_M_sol_pos; }\n+\n \t  // To record current solution.\n \t  _StateIdT _M_start;\n+\t  _BiIter   _M_sol_pos;\n \t};\n \n-\n     public:\n       _ResultsVec                                           _M_cur_results;\n       _BiIter                                               _M_current;"}, {"sha": "38b8ff270130908f3e33d8d55e2169c1d75a2e1c", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -82,6 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_main_dispatch(_Match_mode __match_mode, __dfs)\n     {\n       _M_has_sol = false;\n+      *_M_states._M_get_sol_pos() = _BiIter();\n       _M_cur_results = _M_results;\n       _M_dfs(__match_mode, _M_states._M_start);\n       return _M_has_sol;\n@@ -338,7 +339,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  && (_M_flags & regex_constants::match_not_null))\n \t\t_M_has_sol = false;\n \t      if (_M_has_sol)\n-\t\t_M_results = _M_cur_results;\n+\t\t{\n+\t\t  if (_M_nfa._M_flags & regex_constants::ECMAScript)\n+\t\t    _M_results = _M_cur_results;\n+\t\t  else // POSIX\n+\t\t    {\n+\t\t      _GLIBCXX_DEBUG_ASSERT(_M_states._M_get_sol_pos());\n+\t\t      // Here's POSIX's logic: match the longest one. However\n+\t\t      // we never know which one (lhs or rhs of \"|\") is longer\n+\t\t      // unless we try both of them and compare the results.\n+\t\t      // The member variable _M_sol_pos records the end\n+\t\t      // position of the last successful match. It's better\n+\t\t      // to be larger, because POSIX regex is always greedy.\n+\t\t      // TODO: This could be slow.\n+\t\t      if (*_M_states._M_get_sol_pos() == _BiIter()\n+\t\t\t  || std::distance(_M_begin,\n+\t\t\t\t\t   *_M_states._M_get_sol_pos())\n+\t\t\t     < std::distance(_M_begin, _M_current))\n+\t\t\t{\n+\t\t\t  *_M_states._M_get_sol_pos() = _M_current;\n+\t\t\t  _M_results = _M_cur_results;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -354,9 +377,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  break;\n \tcase _S_opcode_alternative:\n-\t  _M_dfs(__match_mode, __state._M_alt);\n-\t  if (!__dfs_mode || !_M_has_sol)\n-\t    _M_dfs(__match_mode, __state._M_next);\n+\t  if (_M_nfa._M_flags & regex_constants::ECMAScript)\n+\t    {\n+\t      // TODO: Let DFS support ECMAScript's alternative operation.\n+\t      _GLIBCXX_DEBUG_ASSERT(!__dfs_mode);\n+\t      _M_dfs(__match_mode, __state._M_alt);\n+\t      // Pick lhs if it matches. Only try rhs if it doesn't.\n+\t      if (!_M_has_sol)\n+\t\t_M_dfs(__match_mode, __state._M_next);\n+\t    }\n+\t  else\n+\t    {\n+\t      // Try both and compare the result.\n+\t      // See \"case _S_opcode_accept:\" handling above.\n+\t      _M_dfs(__match_mode, __state._M_alt);\n+\t      auto __has_sol = _M_has_sol;\n+\t      _M_has_sol = false;\n+\t      _M_dfs(__match_mode, __state._M_next);\n+\t      _M_has_sol |= __has_sol;\n+\t    }\n \t  break;\n \tdefault:\n \t  _GLIBCXX_DEBUG_ASSERT(false);"}, {"sha": "5552226bdfb167da5f523c2ad1d4e415ac5e3041", "filename": "libstdc++-v3/include/bits/regex_scanner.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -67,7 +67,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_token_or,\n       _S_token_closure0,\n       _S_token_closure1,\n-      _S_token_ungreedy,\n       _S_token_line_begin,\n       _S_token_line_end,\n       _S_token_word_bound, // neg if _M_value[0] == 'n'"}, {"sha": "bdccb4a454e6d7eda7a39ff22abf3b3a5addac67", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/61424.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61424.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9ec7b3c5969c776bc28e18292be09981abaa6a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61424.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61424.cc?ref=ad9ec7b3c5969c776bc28e18292be09981abaa6a", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/61424\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace std;\n+using namespace __gnu_test;\n+\n+int main()\n+{\n+  regex_constants::syntax_option_type grammar[] = {\n+    regex_constants::ECMAScript, regex_constants::extended,\n+    regex_constants::awk, regex_constants::egrep\n+  };\n+\n+  string sol[] = {\n+      \"tour\",\n+      \"tournament\",\n+      \"tournament\",\n+      \"tournament\",\n+  };\n+  int i = 0;\n+  for (auto g : grammar)\n+  {\n+    regex re(\"tour|tournament|tourn\", g);\n+    const char str[] = \"tournament\";\n+    cmatch m;\n+    VERIFY(regex_search_debug(str, m, re));\n+    VERIFY(sol[i] == m[0]);\n+    i++;\n+  }\n+}"}]}