{"sha": "5f9fac6ca86458ef21ab91ca471429d63f954003", "node_id": "C_kwDOANBUbNoAKDVmOWZhYzZjYTg2NDU4ZWYyMWFiOTFjYTQ3MTQyOWQ2M2Y5NTQwMDM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T07:00:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T07:00:41Z"}, "message": "c++: Fix up mangling ICE with void{} [PR106863]\n\nWe ICE on the following testcase during mangling, finish_compound_literal\nreturns for void{} void_node and the mangler doesn't handle it.\nHandling void_node in the mangler seems problematic to me, because\nwe don't know for which case it has been created.\nThe following patch arranges to mangle it as other compound literals\nwith no operands, so it demangles as void{}, by returning a void type\nCOMPOUND_LITERAL_P with no elements if processing_template_decl.\nOtherwise it keeps returning void_node.\n\n2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106863\n\t* semantics.cc (finish_compound_literal): For void{}, if\n\tprocessing_template_decl return a COMPOUND_LITERAL_P\n\tCONSTRUCTOR rather than void_node.\n\n\t* g++.dg/cpp0x/dr2351-2.C: New test.", "tree": {"sha": "9a76e76ff9cc24216013920e23ebf787d4040073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a76e76ff9cc24216013920e23ebf787d4040073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9fac6ca86458ef21ab91ca471429d63f954003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9fac6ca86458ef21ab91ca471429d63f954003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9fac6ca86458ef21ab91ca471429d63f954003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9fac6ca86458ef21ab91ca471429d63f954003/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ba985145ffa8e2078033fc1f1cf22851707a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ba985145ffa8e2078033fc1f1cf22851707a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ba985145ffa8e2078033fc1f1cf22851707a8e"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "82f9dd8dd4e662ca6b79bfb9dea4e4815e5c3644", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9fac6ca86458ef21ab91ca471429d63f954003/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9fac6ca86458ef21ab91ca471429d63f954003/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=5f9fac6ca86458ef21ab91ca471429d63f954003", "patch": "@@ -3164,7 +3164,14 @@ finish_compound_literal (tree type, tree compound_literal,\n     {\n       /* DR2351 */\n       if (VOID_TYPE_P (type) && CONSTRUCTOR_NELTS (compound_literal) == 0)\n-\treturn void_node;\n+\t{\n+\t  if (!processing_template_decl)\n+\t    return void_node;\n+\t  TREE_TYPE (compound_literal) = type;\n+\t  TREE_HAS_CONSTRUCTOR (compound_literal) = 1;\n+\t  CONSTRUCTOR_IS_DEPENDENT (compound_literal) = 0;\n+\t  return compound_literal;\n+\t}\n       else if (VOID_TYPE_P (type)\n \t       && processing_template_decl\n \t       && maybe_zero_constructor_nelts (compound_literal))"}, {"sha": "deb1718072e63dcedfc8fb95e4bdd3ec4e26d3e6", "filename": "gcc/testsuite/g++.dg/cpp0x/dr2351-2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9fac6ca86458ef21ab91ca471429d63f954003/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9fac6ca86458ef21ab91ca471429d63f954003/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351-2.C?ref=5f9fac6ca86458ef21ab91ca471429d63f954003", "patch": "@@ -0,0 +1,16 @@\n+// DR2351\n+// { dg-do compile { target c++11 } }\n+\n+void bar (int);\n+\n+template <typename T>\n+auto foo (T t) -> decltype (bar (t), void{})\n+{\n+  return bar (t);\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+}"}]}