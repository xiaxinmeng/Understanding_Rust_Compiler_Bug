{"sha": "0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0YmYxZDM3MThkOWViNTJmYWU0OTcwNDU1YmFlYWZkYTE5Y2NkNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-11T14:14:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-11T14:14:04Z"}, "message": "re PR tree-optimization/35869 (ICE in calc_dfs_tree at -O2 -gnatp after VRP optimization)\n\n2008-04-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/35869\n\t* tree-vrp.c (execute_vrp): Move switch statement update after\n\tjump threading.  Schedule another cfg cleanup run.\n\n\t* gcc.c-torture/compile/pr35869.c: New testcase.\n\nFrom-SVN: r134197", "tree": {"sha": "8d81f7c50475db8eb044f51fad1b4c6dcec08003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d81f7c50475db8eb044f51fad1b4c6dcec08003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f3f27a4e02cd762fe26e57901680275d6394072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3f27a4e02cd762fe26e57901680275d6394072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3f27a4e02cd762fe26e57901680275d6394072"}], "stats": {"total": 90, "additions": 76, "deletions": 14}, "files": [{"sha": "1c50391c4cde50612c14e85bfd5cdc1c26d4c62d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "patch": "@@ -1,3 +1,9 @@\n+2008-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/35869\n+\t* tree-vrp.c (execute_vrp): Move switch statement update after\n+\tjump threading.  Schedule another cfg cleanup run.\n+\n 2008-04-11  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \tPR c/35744"}, {"sha": "35112f287f48509d1301ba16961dabca2ac96af5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "patch": "@@ -1,3 +1,8 @@\n+2008-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/35869\n+\t* gcc.c-torture/compile/pr35869.c: New testcase.\n+\n 2008-04-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sse-13.c: Move __builtin_ia32_round* to new"}, {"sha": "e83c0e86bedda0889ad334723b7758735c76b7bd", "filename": "gcc/testsuite/gcc.c-torture/compile/pr35869.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35869.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35869.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35869.c?ref=0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "patch": "@@ -0,0 +1,47 @@\n+struct texture_stage_op\n+{\n+    unsigned int carg1, carg2, carg0;\n+    unsigned int aarg1, aarg2, aarg0;\n+    unsigned int dst;\n+};\n+\n+static const char *debug_register(unsigned int reg) {\n+    switch(reg) {\n+        case 0x8921: return \"GL_REG_0_ATI\";\n+        case 0x8923: return \"GL_REG_2_ATI\";\n+        case 0x0: return \"GL_ZERO\";\n+        case 0x1: return \"GL_ONE\";\n+        default: return \"Unknown register\\n\";\n+    }\n+}\n+\n+static unsigned int find_tmpreg(struct texture_stage_op op[8]) {\n+    int i;\n+    int tex_used[8];\n+\n+    for(i = 0; i < 8; i++) {\n+        if(op[i].carg1 == 0x00000002 ) {\n+            tex_used[i] = 1;\n+        }\n+    }\n+\n+    for(i = 1; i < 6; i++) {\n+        if(!tex_used[i]) {\n+                return 0x8921 + i;\n+        }\n+    }\n+    return 0;\n+}\n+\n+extern f(const char*);\n+\n+void g() {\n+    struct texture_stage_op op[8];\n+    unsigned int tmparg = find_tmpreg(op);\n+    unsigned int dstreg;\n+\n+    if(tmparg == 0x0) return;\n+    dstreg = tmparg;\n+    f(debug_register(dstreg));\n+    return;\n+}"}, {"sha": "76477c850ac6edb293254f05409b96757a005f31", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4bf1d3718d9eb52fae4970455baeafda19ccd6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "patch": "@@ -6734,20 +6734,6 @@ execute_vrp (void)\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n   vrp_finalize ();\n \n-  /* Remove dead edges from SWITCH_EXPR optimization.  This leaves the\n-     CFG in a broken state and requires a cfg_cleanup run.  */\n-  for (i = 0; VEC_iterate (edge, to_remove_edges, i, e); ++i)\n-    remove_edge (e);\n-  /* Update SWITCH_EXPR case label vector.  */\n-  for (i = 0; VEC_iterate (switch_update, to_update_switch_stmts, i, su); ++i)\n-    SWITCH_LABELS (su->stmt) = su->vec;\n-\n-  if (VEC_length (edge, to_remove_edges) > 0)\n-    free_dominance_info (CDI_DOMINATORS);\n-\n-  VEC_free (edge, heap, to_remove_edges);\n-  VEC_free (switch_update, heap, to_update_switch_stmts);\n-\n   /* ASSERT_EXPRs must be removed before finalizing jump threads\n      as finalizing jump threads calls the CFG cleanup code which\n      does not properly handle ASSERT_EXPRs.  */\n@@ -6761,6 +6747,24 @@ execute_vrp (void)\n   update_ssa (TODO_update_ssa);\n \n   finalize_jump_threads ();\n+\n+  /* Remove dead edges from SWITCH_EXPR optimization.  This leaves the\n+     CFG in a broken state and requires a cfg_cleanup run.  */\n+  for (i = 0; VEC_iterate (edge, to_remove_edges, i, e); ++i)\n+    remove_edge (e);\n+  /* Update SWITCH_EXPR case label vector.  */\n+  for (i = 0; VEC_iterate (switch_update, to_update_switch_stmts, i, su); ++i)\n+    SWITCH_LABELS (su->stmt) = su->vec;\n+\n+  if (VEC_length (edge, to_remove_edges) > 0)\n+    {\n+      free_dominance_info (CDI_DOMINATORS);\n+      cleanup_tree_cfg ();\n+    }\n+\n+  VEC_free (edge, heap, to_remove_edges);\n+  VEC_free (switch_update, heap, to_update_switch_stmts);\n+\n   scev_finalize ();\n   loop_optimizer_finalize ();\n "}]}