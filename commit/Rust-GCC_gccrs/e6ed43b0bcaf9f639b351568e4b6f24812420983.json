{"sha": "e6ed43b0bcaf9f639b351568e4b6f24812420983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlZDQzYjBiY2FmOWY2MzliMzUxNTY4ZTRiNmYyNDgxMjQyMDk4Mw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-12T09:20:00Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-12T09:20:00Z"}, "message": "optabs.c (vector_compare_rtx): Change prototype.\n\n2012-10-12  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* optabs.c (vector_compare_rtx): Change prototype.\n\t(expand_vec_cond_expr): Handle VEC_COND_EXPR whose first operand\n\tis not a comparison.\n\t* gimplify.c (gimplify_expr): Handle VEC_COND_EXPR.\n\nFrom-SVN: r192393", "tree": {"sha": "73742261d3406e6d52ca7c2f1160f753923c5a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73742261d3406e6d52ca7c2f1160f753923c5a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6ed43b0bcaf9f639b351568e4b6f24812420983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ed43b0bcaf9f639b351568e4b6f24812420983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ed43b0bcaf9f639b351568e4b6f24812420983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ed43b0bcaf9f639b351568e4b6f24812420983/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf90c4cd8e91c2e3d6dbb25af5ca31fba535fde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf90c4cd8e91c2e3d6dbb25af5ca31fba535fde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf90c4cd8e91c2e3d6dbb25af5ca31fba535fde1"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "0784c8a7825979a05cde59eadaf90990779d5f7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6ed43b0bcaf9f639b351568e4b6f24812420983", "patch": "@@ -1,3 +1,10 @@\n+2012-10-12  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* optabs.c (vector_compare_rtx): Change prototype.\n+\t(expand_vec_cond_expr): Handle VEC_COND_EXPR whose first operand\n+\tis not a comparison.\n+\t* gimplify.c (gimplify_expr): Handle VEC_COND_EXPR.\n+\n 2012-10-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/54894"}, {"sha": "b83a6346eca50d29577ec290c2d2c5aa10d21c39", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e6ed43b0bcaf9f639b351568e4b6f24812420983", "patch": "@@ -7683,6 +7683,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  }\n \n \tcase FMA_EXPR:\n+\tcase VEC_COND_EXPR:\n \tcase VEC_PERM_EXPR:\n \t  /* Classified as tcc_expression.  */\n \t  goto expr_3;"}, {"sha": "a63394d1312fb13cacd384173597adf1e8709c47", "filename": "gcc/optabs.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ed43b0bcaf9f639b351568e4b6f24812420983/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e6ed43b0bcaf9f639b351568e4b6f24812420983", "patch": "@@ -6388,20 +6388,14 @@ get_rtx_code (enum tree_code tcode, bool unsignedp)\n    unsigned operators. Do not generate compare instruction.  */\n \n static rtx\n-vector_compare_rtx (tree cond, bool unsignedp, enum insn_code icode)\n+vector_compare_rtx (enum tree_code tcode, tree t_op0, tree t_op1,\n+\t\t    bool unsignedp, enum insn_code icode)\n {\n   struct expand_operand ops[2];\n-  enum rtx_code rcode;\n-  tree t_op0, t_op1;\n   rtx rtx_op0, rtx_op1;\n+  enum rtx_code rcode = get_rtx_code (tcode, unsignedp);\n \n-  /* This is unlikely. While generating VEC_COND_EXPR, auto vectorizer\n-     ensures that condition is a relational operation.  */\n-  gcc_assert (COMPARISON_CLASS_P (cond));\n-\n-  rcode = get_rtx_code (TREE_CODE (cond), unsignedp);\n-  t_op0 = TREE_OPERAND (cond, 0);\n-  t_op1 = TREE_OPERAND (cond, 1);\n+  gcc_assert (TREE_CODE_CLASS (tcode) == tcc_comparison);\n \n   /* Expand operands.  */\n   rtx_op0 = expand_expr (t_op0, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op0)),\n@@ -6684,11 +6678,26 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   enum machine_mode mode = TYPE_MODE (vec_cond_type);\n   enum machine_mode cmp_op_mode;\n   bool unsignedp;\n+  tree op0a, op0b;\n+  enum tree_code tcode;\n \n-  gcc_assert (COMPARISON_CLASS_P (op0));\n+  if (COMPARISON_CLASS_P (op0))\n+    {\n+      op0a = TREE_OPERAND (op0, 0);\n+      op0b = TREE_OPERAND (op0, 1);\n+      tcode = TREE_CODE (op0);\n+    }\n+  else\n+    {\n+      /* Fake op0 < 0.  */\n+      gcc_assert (!TYPE_UNSIGNED (TREE_TYPE (op0)));\n+      op0a = op0;\n+      op0b = build_zero_cst (TREE_TYPE (op0));\n+      tcode = LT_EXPR;\n+    }\n+  unsignedp = TYPE_UNSIGNED (TREE_TYPE (op0a));\n+  cmp_op_mode = TYPE_MODE (TREE_TYPE (op0a));\n \n-  unsignedp = TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op0, 0)));\n-  cmp_op_mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (op0, 0)));\n \n   gcc_assert (GET_MODE_SIZE (mode) == GET_MODE_SIZE (cmp_op_mode)\n \t      && GET_MODE_NUNITS (mode) == GET_MODE_NUNITS (cmp_op_mode));\n@@ -6697,7 +6706,7 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   if (icode == CODE_FOR_nothing)\n     return 0;\n \n-  comparison = vector_compare_rtx (op0, unsignedp, icode);\n+  comparison = vector_compare_rtx (tcode, op0a, op0b, unsignedp, icode);\n   rtx_op1 = expand_normal (op1);\n   rtx_op2 = expand_normal (op2);\n "}]}