{"sha": "c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1NWUxYjNlYWRhZjFjN2U3NTFhMmM3Y2UxZDQxOGM2ZGI4NDYzYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T03:22:03Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T03:22:03Z"}, "message": "c++: variadic class template placeholder deduction [PR97134]\n\ndo_class_deduction handles specially the case where we're deducing one\nplaceholder from another equivalent one, but here the initializer passed\nto do_class_deduction is wrapped in an EXPR_PACK_EXPANSION (we're being\ncalled from unify during get_partial_spec_bindings).  This patch makes\ndo_class_deduction look through EXPR_PACK_EXPANSIONs so that we detect\nthis case as well.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97134\n\t* pt.c (do_class_deduction): Look through EXPR_PACK_EXPANSION\n\twhen checking if the initializer is an equivalent class\n\tplaceholder template parameter.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97134\n\t* g++.dg/cpp2a/nontype-class43.C: New test.", "tree": {"sha": "6c05c93bba896feb39bfe252e6761351c83877bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c05c93bba896feb39bfe252e6761351c83877bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a/comments", "author": null, "committer": null, "parents": [{"sha": "59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "6b63edda60d26a34f2507f3feec979c17f2a46b7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "patch": "@@ -29286,7 +29286,11 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n     return ptype;\n \n   /* Initializing one placeholder from another.  */\n-  if (init && TREE_CODE (init) == TEMPLATE_PARM_INDEX\n+  if (init\n+      && (TREE_CODE (init) == TEMPLATE_PARM_INDEX\n+\t  || (TREE_CODE (init) == EXPR_PACK_EXPANSION\n+\t      && (TREE_CODE (PACK_EXPANSION_PATTERN (init))\n+\t\t  == TEMPLATE_PARM_INDEX)))\n       && is_auto (TREE_TYPE (init))\n       && CLASS_PLACEHOLDER_TEMPLATE (TREE_TYPE (init)) == tmpl)\n     return cp_build_qualified_type (TREE_TYPE (init), cp_type_quals (ptype));"}, {"sha": "f51684f7a62e4f6bfa20d0d08577069549c8b6c1", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class43.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class43.C?ref=c755e1b3eadaf1c7e751a2c7ce1d418c6db8463a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/97134\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T>\n+struct templ {};\n+\n+template<templ... Vs>\n+struct wrapper {};\n+\n+template<templ... Vs> requires true\n+struct wrapper<Vs...> {};"}]}