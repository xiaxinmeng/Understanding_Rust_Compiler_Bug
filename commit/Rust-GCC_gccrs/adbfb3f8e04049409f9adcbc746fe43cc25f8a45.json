{"sha": "adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiZmIzZjhlMDQwNDk0MDlmOWFkY2JjNzQ2ZmU0M2NjMjVmOGE0NQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gmx.de", "date": "2015-01-17T11:07:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-01-17T11:07:57Z"}, "message": "re PR fortran/60334 (Segmentation fault on character pointer assignments)\n\n2015-01-17  Andre Vehreschild  <vehre@gmx.de>\n\n\tPR fortran/60334\n\t* trans-decl.c (gfc_get_symbol_decl):Use a ref on the string\n\tlength when the symbol is declared to be a result.\n\t* trans-expr.c (gfc_conv_procedure_call): Strip deref on the\n\tstring length when functions are nested and the string length\n\tis a reference already.\n\n2015-01-17  Andre Vehreschild  <vehre@gmx.de>\n\n\tPR fortran/60334\n\t* gfortran.dg/deferred_type_param_6.f90: Add tests for this PR.\n\nFrom-SVN: r219798", "tree": {"sha": "dceacc6b17bbb450a57dc347da50377d03f638f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dceacc6b17bbb450a57dc347da50377d03f638f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/comments", "author": {"login": "vehre", "id": 4761547, "node_id": "MDQ6VXNlcjQ3NjE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4761547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vehre", "html_url": "https://github.com/vehre", "followers_url": "https://api.github.com/users/vehre/followers", "following_url": "https://api.github.com/users/vehre/following{/other_user}", "gists_url": "https://api.github.com/users/vehre/gists{/gist_id}", "starred_url": "https://api.github.com/users/vehre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vehre/subscriptions", "organizations_url": "https://api.github.com/users/vehre/orgs", "repos_url": "https://api.github.com/users/vehre/repos", "events_url": "https://api.github.com/users/vehre/events{/privacy}", "received_events_url": "https://api.github.com/users/vehre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c39435736f0509200cb5f20022dc19bf722a98a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39435736f0509200cb5f20022dc19bf722a98a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39435736f0509200cb5f20022dc19bf722a98a0"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "eb02d88d8d182d88d5c7a059651c024c6ef0351b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "patch": "@@ -1,3 +1,12 @@\n+2015-01-17  Andre Vehreschild  <vehre@gmx.de>\n+\n+\tPR fortran/60334\n+\t* trans-decl.c (gfc_get_symbol_decl):Use a ref on the string\n+\tlength when the symbol is declared to be a result.\n+\t* trans-expr.c (gfc_conv_procedure_call): Strip deref on the\n+\tstring length when functions are nested and the string length\n+\tis a reference already.\n+\n 2015-01-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45290"}, {"sha": "a73620fe1bb58d2f54f2ff906181010d445661e5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "patch": "@@ -1370,12 +1370,30 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t     (sym->ts.u.cl->passed_length == sym->ts.u.cl->backend_decl))\n \t    sym->ts.u.cl->backend_decl = NULL_TREE;\n \n-\t  if (sym->ts.deferred && fun_or_res\n-\t\t&& sym->ts.u.cl->passed_length == NULL\n-\t\t&& sym->ts.u.cl->backend_decl)\n+\t  if (sym->ts.deferred && byref)\n \t    {\n-\t      sym->ts.u.cl->passed_length = sym->ts.u.cl->backend_decl;\n-\t      sym->ts.u.cl->backend_decl = NULL_TREE;\n+\t      /* The string length of a deferred char array is stored in the\n+\t\t parameter at sym->ts.u.cl->backend_decl as a reference and\n+\t\t marked as a result.  Exempt this variable from generating a\n+\t\t temporary for it.  */\n+\t      if (sym->attr.result)\n+\t\t{\n+\t\t  /* We need to insert a indirect ref for param decls.  */\n+\t\t  if (sym->ts.u.cl->backend_decl\n+\t\t      && TREE_CODE (sym->ts.u.cl->backend_decl) == PARM_DECL)\n+\t\t    sym->ts.u.cl->backend_decl =\n+\t\t\tbuild_fold_indirect_ref (sym->ts.u.cl->backend_decl);\n+\t\t}\n+\t      /* For all other parameters make sure, that they are copied so\n+\t\t that the value and any modifications are local to the routine\n+\t\t by generating a temporary variable.  */\n+\t      else if (sym->attr.function\n+\t\t       && sym->ts.u.cl->passed_length == NULL\n+\t\t       && sym->ts.u.cl->backend_decl)\n+\t\t{\n+\t\t  sym->ts.u.cl->passed_length = sym->ts.u.cl->backend_decl;\n+\t\t  sym->ts.u.cl->backend_decl = NULL_TREE;\n+\t\t}\n \t    }\n \n \t  if (sym->ts.u.cl->backend_decl == NULL_TREE)"}, {"sha": "420d6ad59ee2cf99c8f34ba3c36a9daa8bf65d1e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "patch": "@@ -5010,10 +5010,18 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t so that the value can be returned.  */\n       if (parmse.string_length && fsym && fsym->ts.deferred)\n \t{\n-\t  tmp = parmse.string_length;\n-\t  if (TREE_CODE (tmp) != VAR_DECL)\n-\t    tmp = gfc_evaluate_now (parmse.string_length, &se->pre);\n-\t  parmse.string_length = gfc_build_addr_expr (NULL_TREE, tmp);\n+\t  if (INDIRECT_REF_P (parmse.string_length))\n+\t    /* In chains of functions/procedure calls the string_length already\n+\t       is a pointer to the variable holding the length.  Therefore\n+\t       remove the deref on call.  */\n+\t    parmse.string_length = TREE_OPERAND (parmse.string_length, 0);\n+\t  else\n+\t    {\n+\t      tmp = parmse.string_length;\n+\t      if (TREE_CODE (tmp) != VAR_DECL)\n+\t\ttmp = gfc_evaluate_now (parmse.string_length, &se->pre);\n+\t      parmse.string_length = gfc_build_addr_expr (NULL_TREE, tmp);\n+\t    }\n \t}\n \n       /* Character strings are passed as two parameters, a length and a"}, {"sha": "dcebc53fad3f19d1e539fd8cfdceaf255da4e4e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "patch": "@@ -1,3 +1,8 @@\n+2015-01-17  Andre Vehreschild  <vehre@gmx.de>\n+\n+\tPR fortran/60334\n+\t* gfortran.dg/deferred_type_param_6.f90: Add tests for this PR.\n+\n 2015-01-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/52773\n@@ -834,7 +839,7 @@\n \t* g++.dg/tsan/atomic_free.C: Likewise.\n \t* g++.dg/tsan/atomic_free2.C: Likewise.\n \t* g++.dg/tsan/cond_race.C: Likewise.\n-\t* g++.dg/tsan/tsan_barrier.h: Copied from c-c++-common/tsan. \n+\t* g++.dg/tsan/tsan_barrier.h: Copied from c-c++-common/tsan.\n \n 2015-01-08  Hans-Peter Nilsson  <hp@axis.com>\n "}, {"sha": "a2fabe87acf2cb89b918fbc660f6cf1db56aebb5", "filename": "gcc/testsuite/gfortran.dg/deferred_type_param_6.f90", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adbfb3f8e04049409f9adcbc746fe43cc25f8a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90?ref=adbfb3f8e04049409f9adcbc746fe43cc25f8a45", "patch": "@@ -2,15 +2,23 @@\n !\n ! PR fortran/51055\n ! PR fortran/49110\n-!\n+! PR fortran/60334\n \n subroutine test()\n   implicit none\n   integer :: i = 5\n   character(len=:), allocatable :: s1\n+  character(len=:), pointer :: s2\n+  character(len=5), target :: fifeC = 'FIVEC'\n   call sub(s1, i)\n   if (len(s1) /= 5) call abort()\n   if (s1 /= \"ZZZZZ\") call abort()\n+  s2 => subfunc()\n+  if (len(s2) /= 5) call abort()\n+  if (s2 /= \"FIVEC\") call abort()\n+  s1 = addPrefix(subfunc())\n+  if (len(s1) /= 7) call abort()\n+  if (s1 /= \"..FIVEC\") call abort()\n contains\n   subroutine sub(str,j)\n     character(len=:), allocatable :: str\n@@ -19,6 +27,17 @@ subroutine sub(str,j)\n     if (len(str) /= 5) call abort()\n     if (str /= \"ZZZZZ\") call abort()\n   end subroutine sub\n+  function subfunc() result(res)\n+    character(len=:), pointer :: res\n+    res => fifec\n+    if (len(res) /= 5) call abort()\n+    if (res /= \"FIVEC\") call abort()\n+  end function subfunc\n+  function addPrefix(str) result(res)\n+    character(len=:), pointer :: str\n+    character(len=:), allocatable :: res\n+    res = \"..\" // str\n+  end function addPrefix\n end subroutine test\n \n program a"}]}