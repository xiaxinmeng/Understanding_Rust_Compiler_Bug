{"sha": "a1f009a65fd70df0962e0d5b94aba313520df357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFmMDA5YTY1ZmQ3MGRmMDk2MmUwZDViOTRhYmEzMTM1MjBkZjM1Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-12T17:28:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-12T17:28:36Z"}, "message": "PR77528 partially revert r244278 and define default constructors\n\n\tPR libstdc++/77528\n\t* include/bits/stl_queue.h (queue, priority_queue): Remove default\n\tmember-initializers and define default constructors as templates with\n\tconstraints.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* testsuite/23_containers/priority_queue/requirements/constructible.cc:\n\tNew.\n\t* testsuite/23_containers/priority_queue/requirements/\n\texplicit_instantiation/1.cc: Test more instantiations.\n\t* testsuite/23_containers/priority_queue/requirements/\n\texplicit_instantiation/1_c++98.cc: Likewise.\n\t* testsuite/23_containers/queue/requirements/constructible.cc: New.\n\t* testsuite/23_containers/stack/requirements/constructible.cc: New.\n\nFrom-SVN: r244374", "tree": {"sha": "cf31d11b0fdf99bd93175ef05c7d44353ea12594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf31d11b0fdf99bd93175ef05c7d44353ea12594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1f009a65fd70df0962e0d5b94aba313520df357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f009a65fd70df0962e0d5b94aba313520df357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f009a65fd70df0962e0d5b94aba313520df357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f009a65fd70df0962e0d5b94aba313520df357/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27282dadbfc2c0a23ca3a2c285b9a71e0e5376d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27282dadbfc2c0a23ca3a2c285b9a71e0e5376d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27282dadbfc2c0a23ca3a2c285b9a71e0e5376d8"}], "stats": {"total": 180, "additions": 158, "deletions": 22}, "files": [{"sha": "8bf7d07b9e9fbb9108cbc7311122811de355c7a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -1,5 +1,19 @@\n 2017-01-12  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/77528\n+\t* include/bits/stl_queue.h (queue, priority_queue): Remove default\n+\tmember-initializers and define default constructors as templates with\n+\tconstraints.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* testsuite/23_containers/priority_queue/requirements/constructible.cc:\n+\tNew.\n+\t* testsuite/23_containers/priority_queue/requirements/\n+\texplicit_instantiation/1.cc: Test more instantiations.\n+\t* testsuite/23_containers/priority_queue/requirements/\n+\texplicit_instantiation/1_c++98.cc: Likewise.\n+\t* testsuite/23_containers/queue/requirements/constructible.cc: New.\n+\t* testsuite/23_containers/stack/requirements/constructible.cc: New.\n+\n \tPR libstdc++/66284\n \t* doc/xml/manual/intro.xml: Document LWG 2781 change.\n \t* doc/html/*: Regenerate."}, {"sha": "3a52367bf40e8142294821d93a523d139dbb63f9", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -131,12 +131,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  of private: to allow derivation.  But none of the other\n        *  containers allow for derivation.  Odd.)\n        */\n-      /// @c c is the underlying container.\n-#if __cplusplus >= 201103L\n-      _Sequence c{};\n-#else\n+       ///  @c c is the underlying container.\n       _Sequence c;\n-#endif\n \n     public:\n       /**\n@@ -147,7 +143,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       queue(const _Sequence& __c = _Sequence())\n       : c(__c) { }\n #else\n-      queue() = default;\n+      template<typename _Seq = _Sequence, typename _Requires = typename\n+\t       enable_if<is_default_constructible<_Seq>::value>::type>\n+\tqueue()\n+\t: c() { }\n \n       explicit\n       queue(const _Sequence& __c)\n@@ -446,13 +445,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     protected:\n       //  See queue::c for notes on these names.\n-#if __cplusplus >= 201103L\n-      _Sequence c{};\n-      _Compare   comp{};\n-#else\n-      _Sequence c;\n+      _Sequence  c;\n       _Compare   comp;\n-#endif\n \n     public:\n       /**\n@@ -465,17 +459,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : c(__s), comp(__x)\n       { std::make_heap(c.begin(), c.end(), comp); }\n #else\n-      priority_queue() = default;\n+      template<typename _Seq = _Sequence, typename _Requires = typename\n+\t       enable_if<__and_<is_default_constructible<_Compare>,\n+                                is_default_constructible<_Seq>>::value>::type>\n+\tpriority_queue()\n+\t: c(), comp() { }\n \n       explicit\n-      priority_queue(const _Compare& __x,\n-\t\t     const _Sequence& __s)\n+      priority_queue(const _Compare& __x, const _Sequence& __s)\n       : c(__s), comp(__x)\n       { std::make_heap(c.begin(), c.end(), comp); }\n \n       explicit\n-      priority_queue(const _Compare& __x,\n-\t\t     _Sequence&& __s = _Sequence())\n+      priority_queue(const _Compare& __x, _Sequence&& __s = _Sequence())\n       : c(std::move(__s)), comp(__x)\n       { std::make_heap(c.begin(), c.end(), comp); }\n "}, {"sha": "094ce65386ccfde87180d20b50f654d1b072d61f", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -129,11 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     protected:\n       //  See queue::c for notes on this name.\n-#if __cplusplus >= 201103L\n-      _Sequence c{};\n-#else\n       _Sequence c;\n-#endif\n \n     public:\n       // XXX removed old def ctor, added def arg to this one to match 14882\n@@ -145,7 +141,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       stack(const _Sequence& __c = _Sequence())\n       : c(__c) { }\n #else\n-      stack() = default;\n+      template<typename _Seq = _Sequence, typename _Requires = typename\n+\t       enable_if<is_default_constructible<_Seq>::value>::type>\n+\tstack()\n+\t: c() { }\n \n       explicit\n       stack(const _Sequence& __c)"}, {"sha": "fa412f33771d8c1f99ef22c0a9db88c12e3d253f", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/constructible.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fconstructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fconstructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fconstructible.cc?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <queue>\n+\n+using std::priority_queue;\n+using std::vector;\n+\n+template<typename A>\n+constexpr bool default_constructible()\n+{ return std::is_default_constructible<A>::value; }\n+\n+static_assert(default_constructible<priority_queue<int>>(),\n+\t      \"priority_queue<int>\");\n+\n+struct NonDefaultConstructible : vector<int> {\n+  NonDefaultConstructible(int) { }\n+};\n+struct Cmp : std::less<int> {\n+  Cmp(int) { }\n+};\n+static_assert(\n+    !default_constructible<priority_queue<int, NonDefaultConstructible>>(),\n+    \"priority_queue<int, NonDefaultConstructible>\");\n+static_assert(\n+    !default_constructible<priority_queue<int, NonDefaultConstructible, Cmp>>(),\n+    \"priority_queue<int, NonDefaultConstructible, Cmp>\");\n+static_assert(\n+    !default_constructible<priority_queue<int, vector<int>, Cmp>>(),\n+    \"priority_queue<int, vector<int>, Cmp>\");"}, {"sha": "6386d1d9f661a286e0cd6544a706e64969c9c72d", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -31,3 +31,5 @@ struct Cmp : std::less<int> {\n   Cmp(int) { }\n };\n template class std::priority_queue<int, NonDefaultConstructible>;\n+template class std::priority_queue<int, NonDefaultConstructible, Cmp>;\n+template class std::priority_queue<int, std::vector<int>, Cmp>;"}, {"sha": "c9530cb5cd54b1bc3df06501095c81be3284fea4", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/explicit_instantiation/1_c++98.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B98.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B98.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fexplicit_instantiation%2F1_c%2B%2B98.cc?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -30,4 +30,6 @@ struct NonDefaultConstructible : std::vector<int> {\n struct Cmp : std::less<int> {\n   Cmp(int) { }\n };\n+template class std::priority_queue<int, NonDefaultConstructible>;\n template class std::priority_queue<int, NonDefaultConstructible, Cmp>;\n+template class std::priority_queue<int, std::vector<int>, Cmp>;"}, {"sha": "99a8b840d967c56e15edc4e6754eb1b98d534dfe", "filename": "libstdc++-v3/testsuite/23_containers/queue/requirements/constructible.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fconstructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fconstructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fconstructible.cc?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <queue>\n+\n+using std::queue;\n+\n+template<typename A>\n+constexpr bool default_constructible()\n+{ return std::is_default_constructible<A>::value; }\n+\n+static_assert(default_constructible<queue<int>>(), \"queue<int>\");\n+\n+struct NonDefaultConstructible : std::deque<int> {\n+  NonDefaultConstructible(int) { }\n+};\n+static_assert(!default_constructible<queue<int, NonDefaultConstructible>>(),\n+\t      \"queue<int, NonDefaultConstructible>\");"}, {"sha": "0d6e174a79646584cb9d2caf44433e09c68fea3c", "filename": "libstdc++-v3/testsuite/23_containers/stack/requirements/constructible.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fconstructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1f009a65fd70df0962e0d5b94aba313520df357/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fconstructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fconstructible.cc?ref=a1f009a65fd70df0962e0d5b94aba313520df357", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of library containers.\n+\n+#include <stack>\n+\n+using std::stack;\n+\n+template<typename A>\n+constexpr bool default_constructible()\n+{ return std::is_default_constructible<A>::value; }\n+\n+static_assert(default_constructible<stack<int>>(), \"stack<int>\");\n+\n+struct NonDefaultConstructible : std::deque<int> {\n+  NonDefaultConstructible(int) { }\n+};\n+static_assert(!default_constructible<stack<int, NonDefaultConstructible>>(),\n+\t      \"stack<int, NonDefaultConstructible>\");"}]}