{"sha": "974afa584b18a3713eb4ada1b5d657ca0f94f498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YWZhNTg0YjE4YTM3MTNlYjRhZGExYjVkNjU3Y2EwZjk0ZjQ5OA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2016-12-01T03:03:55Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2016-12-01T03:03:55Z"}, "message": "re PR libstdc++/71500 (regex::icase only works on first character in a range)\n\n\tPR libstdc++/71500\n\t* include/bits/regex.h (basic_regex::basic_regex): Use ECMAScript\n\twhen the syntax is not specified.\n\t* include/bits/regex_compiler.h (_RegexTranslator,\n\t_RegexTranslatorBase): Partially support icase in ranges.\n\t* include/bits/regex_compiler.tcc (_BracketMatcher::_M_apply):\n\tRefactor _M_apply to make the control flow easier to follow, and\n\tcall _M_translator._M_match_range as added previously.\n\t* testsuite/28_regex/traits/char/icase.cc: Add new tests.\n\t* testsuite/28_regex/traits/char/user_defined.cc: Add new tests.\n\nFrom-SVN: r243093", "tree": {"sha": "99b6e42fe5cfb1174faef0662f47640649cba2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b6e42fe5cfb1174faef0662f47640649cba2a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974afa584b18a3713eb4ada1b5d657ca0f94f498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974afa584b18a3713eb4ada1b5d657ca0f94f498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974afa584b18a3713eb4ada1b5d657ca0f94f498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974afa584b18a3713eb4ada1b5d657ca0f94f498/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f09127808018c479214478d3f79e0ac40a3c55b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f09127808018c479214478d3f79e0ac40a3c55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f09127808018c479214478d3f79e0ac40a3c55b"}], "stats": {"total": 310, "additions": 261, "deletions": 49}, "files": [{"sha": "cd4f5aeecdbeb559a19a196791a5c910106bbecd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -1,3 +1,16 @@\n+2016-11-31  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/71500\n+\t* include/bits/regex.h (basic_regex::basic_regex): Use ECMAScript\n+\twhen the syntax is not specified.\n+\t* include/bits/regex_compiler.h (_RegexTranslator,\n+\t_RegexTranslatorBase): Partially support icase in ranges.\n+\t* include/bits/regex_compiler.tcc (_BracketMatcher::_M_apply):\n+\tRefactor _M_apply to make the control flow easier to follow, and\n+\tcall _M_translator._M_match_range as added previously.\n+\t* testsuite/28_regex/traits/char/icase.cc: Add new tests.\n+\t* testsuite/28_regex/traits/char/user_defined.cc: Add new tests.\n+\n 2016-11-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tFix testsuite failures caused by the patch implementing LWG 2534."}, {"sha": "224d3dbb68f71440c57b9b9d0872cbb329718b88", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -762,7 +762,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       template<typename _FwdIter>\n \tbasic_regex(_FwdIter __first, _FwdIter __last, locale_type __loc,\n \t\t    flag_type __f)\n-\t: _M_flags(__f), _M_loc(std::move(__loc)),\n+\t: _M_flags((__f & (ECMAScript | basic | extended | awk | grep | egrep))\n+\t\t   ? __f : (__f | ECMAScript)),\n+\t_M_loc(std::move(__loc)),\n \t_M_automaton(__detail::__compile_nfa<_FwdIter, _Rx_traits>(\n \t  std::move(__first), std::move(__last), _M_loc, _M_flags))\n \t{ }"}, {"sha": "318cb3bd6a5e42f64a66a3e1a700a8ab30cc339f", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 88, "deletions": 14, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -30,6 +30,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n+  template<typename>\n+    class regex_traits;\n+\n+_GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -207,17 +216,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [28.13.14]\n   template<typename _TraitsT, bool __icase, bool __collate>\n-    class _RegexTranslator\n+    class _RegexTranslatorBase\n     {\n     public:\n       typedef typename _TraitsT::char_type\t      _CharT;\n       typedef typename _TraitsT::string_type\t      _StringT;\n-      typedef typename std::conditional<__collate,\n-\t\t\t\t\t_StringT,\n-\t\t\t\t\t_CharT>::type _StrTransT;\n+      typedef _StringT _StrTransT;\n \n       explicit\n-      _RegexTranslator(const _TraitsT& __traits)\n+      _RegexTranslatorBase(const _TraitsT& __traits)\n       : _M_traits(__traits)\n       { }\n \n@@ -235,23 +242,86 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _StrTransT\n       _M_transform(_CharT __ch) const\n       {\n-\treturn _M_transform_impl(__ch, typename integral_constant<bool,\n-\t\t\t\t __collate>::type());\n+\t_StrTransT __str(1, __ch);\n+\treturn _M_traits.transform(__str.begin(), __str.end());\n       }\n \n-    private:\n+      // See LWG 523. It's not efficiently implementable when _TraitsT is not\n+      // std::regex_traits<>, and __collate is true. See specializations for\n+      // implementations of other cases.\n+      bool\n+      _M_match_range(const _StrTransT& __first, const _StrTransT& __last,\n+\t\t     const _StrTransT& __s) const\n+      { return __first <= __s && __s <= __last; }\n+\n+    protected:\n+      bool _M_in_range_icase(_CharT __first, _CharT __last, _CharT __ch) const\n+      {\n+\ttypedef std::ctype<_CharT> __ctype_type;\n+\tconst auto& __fctyp = use_facet<__ctype_type>(this->_M_traits.getloc());\n+\tauto __lower = __fctyp.tolower(__ch);\n+\tauto __upper = __fctyp.toupper(__ch);\n+\treturn (__first <= __lower && __lower <= __last)\n+\t  || (__first <= __upper && __upper <= __last);\n+      }\n+\n+      const _TraitsT& _M_traits;\n+    };\n+\n+  template<typename _TraitsT, bool __icase, bool __collate>\n+    class _RegexTranslator\n+    : public _RegexTranslatorBase<_TraitsT, __icase, __collate>\n+    {\n+    public:\n+      typedef _RegexTranslatorBase<_TraitsT, __icase, __collate> _Base;\n+      using _Base::_Base;\n+    };\n+\n+  template<typename _TraitsT, bool __icase>\n+    class _RegexTranslator<_TraitsT, __icase, false>\n+    : public _RegexTranslatorBase<_TraitsT, __icase, false>\n+    {\n+    public:\n+      typedef _RegexTranslatorBase<_TraitsT, __icase, false> _Base;\n+      typedef typename _Base::_CharT _CharT;\n+      typedef _CharT _StrTransT;\n+\n+      using _Base::_Base;\n+\n       _StrTransT\n-      _M_transform_impl(_CharT __ch, false_type) const\n+      _M_transform(_CharT __ch) const\n       { return __ch; }\n \n-      _StrTransT\n-      _M_transform_impl(_CharT __ch, true_type) const\n+      bool\n+      _M_match_range(_CharT __first, _CharT __last, _CharT __ch) const\n       {\n-\t_StrTransT __str = _StrTransT(1, _M_translate(__ch));\n-\treturn _M_traits.transform(__str.begin(), __str.end());\n+\tif (!__icase)\n+\t  return __first <= __ch && __ch <= __last;\n+\treturn this->_M_in_range_icase(__first, __last, __ch);\n       }\n+    };\n \n-      const _TraitsT& _M_traits;\n+  template<typename _CharType>\n+    class _RegexTranslator<std::regex_traits<_CharType>, true, true>\n+    : public _RegexTranslatorBase<std::regex_traits<_CharType>, true, true>\n+    {\n+    public:\n+      typedef _RegexTranslatorBase<std::regex_traits<_CharType>, true, true>\n+\t_Base;\n+      typedef typename _Base::_CharT _CharT;\n+      typedef typename _Base::_StrTransT _StrTransT;\n+\n+      using _Base::_Base;\n+\n+      bool\n+      _M_match_range(const _StrTransT& __first, const _StrTransT& __last,\n+\t\t     const _StrTransT& __str) const\n+      {\n+\t__glibcxx_assert(__first.size() == 1);\n+\t__glibcxx_assert(__last.size() == 1);\n+\t__glibcxx_assert(__str.size() == 1);\n+\treturn this->_M_in_range_icase(__first[0], __last[0], __str[0]);\n+      }\n     };\n \n   template<typename _TraitsT>\n@@ -272,6 +342,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _StrTransT\n       _M_transform(_CharT __ch) const\n       { return __ch; }\n+\n+      bool\n+      _M_match_range(_CharT __first, _CharT __last, _CharT __ch) const\n+      { return __first <= __ch && __ch <= __last; }\n     };\n \n   template<typename _TraitsT, bool __is_ecma, bool __icase, bool __collate>"}, {"sha": "07e56d50c50775f604ba93702699f2533a8b3f67", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -612,37 +612,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _BracketMatcher<_TraitsT, __icase, __collate>::\n     _M_apply(_CharT __ch, false_type) const\n     {\n-      bool __ret = std::binary_search(_M_char_set.begin(), _M_char_set.end(),\n-\t\t\t\t      _M_translator._M_translate(__ch));\n-      if (!__ret)\n-\t{\n-\t  auto __s = _M_translator._M_transform(__ch);\n-\t  for (auto& __it : _M_range_set)\n-\t    if (__it.first <= __s && __s <= __it.second)\n-\t      {\n-\t\t__ret = true;\n-\t\tbreak;\n-\t      }\n-\t  if (_M_traits.isctype(__ch, _M_class_set))\n-\t    __ret = true;\n-\t  else if (std::find(_M_equiv_set.begin(), _M_equiv_set.end(),\n-\t\t\t     _M_traits.transform_primary(&__ch, &__ch+1))\n-\t\t   != _M_equiv_set.end())\n-\t    __ret = true;\n-\t  else\n-\t    {\n-\t      for (auto& __it : _M_neg_class_set)\n-\t\tif (!_M_traits.isctype(__ch, __it))\n-\t\t  {\n-\t\t    __ret = true;\n-\t\t    break;\n-\t\t  }\n-\t    }\n-\t}\n-      if (_M_is_non_matching)\n-\treturn !__ret;\n-      else\n-\treturn __ret;\n+      return [this, __ch]\n+      {\n+\tif (std::binary_search(_M_char_set.begin(), _M_char_set.end(),\n+\t\t\t       _M_translator._M_translate(__ch)))\n+\t  return true;\n+\tauto __s = _M_translator._M_transform(__ch);\n+\tfor (auto& __it : _M_range_set)\n+\t  if (_M_translator._M_match_range(__it.first, __it.second, __s))\n+\t    return true;\n+\tif (_M_traits.isctype(__ch, _M_class_set))\n+\t  return true;\n+\tif (std::find(_M_equiv_set.begin(), _M_equiv_set.end(),\n+\t\t      _M_traits.transform_primary(&__ch, &__ch+1))\n+\t    != _M_equiv_set.end())\n+\t  return true;\n+\tfor (auto& __it : _M_neg_class_set)\n+\t  if (!_M_traits.isctype(__ch, __it))\n+\t    return true;\n+\treturn false;\n+      }() ^ _M_is_non_matching;\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "97bbd079f517bea803ba2f8d6bf61fadad8d1cc1", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/icase.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ficase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ficase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ficase.cc?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run { target c++11 } }\n+\n+//\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.7 Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test01()\n+{\n+  {\n+    regex re(\"[T-f]\", regex::icase);\n+\n+    VERIFY(regex_match(\"A\", re));\n+    VERIFY(regex_match(\"F\", re));\n+    VERIFY(regex_match(\"a\", re));\n+    VERIFY(regex_match(\"f\", re));\n+\n+    VERIFY(!regex_match(\"G\", re));\n+    VERIFY(!regex_match(\"S\", re));\n+    VERIFY(!regex_match(\"g\", re));\n+    VERIFY(!regex_match(\"s\", re));\n+\n+    VERIFY(regex_match(\"T\", re));\n+    VERIFY(regex_match(\"Z\", re));\n+    VERIFY(regex_match(\"t\", re));\n+    VERIFY(regex_match(\"z\", re));\n+  }\n+  // icase works with std::regex_traits<>, because we know how it's implemented.\n+  {\n+    regex re(\"[T-f]\", regex::icase | regex::collate);\n+\n+    VERIFY(regex_match(\"A\", re));\n+    VERIFY(regex_match(\"F\", re));\n+    VERIFY(regex_match(\"a\", re));\n+    VERIFY(regex_match(\"f\", re));\n+\n+    VERIFY(!regex_match(\"G\", re));\n+    VERIFY(!regex_match(\"S\", re));\n+    VERIFY(!regex_match(\"g\", re));\n+    VERIFY(!regex_match(\"s\", re));\n+\n+    VERIFY(regex_match(\"T\", re));\n+    VERIFY(regex_match(\"Z\", re));\n+    VERIFY(regex_match(\"t\", re));\n+    VERIFY(regex_match(\"z\", re));\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5888ce1b4a04330f69aeac58060d968ddd10c643", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/user_defined.cc", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974afa584b18a3713eb4ada1b5d657ca0f94f498/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc?ref=974afa584b18a3713eb4ada1b5d657ca0f94f498", "patch": "@@ -30,6 +30,9 @@\n \n using namespace std;\n \n+bool called_transform = false;\n+bool called_nocase = false;\n+\n template<typename CharT>\n   class MyRegexTraits\n   : public regex_traits<CharT>\n@@ -40,14 +43,71 @@ template<typename CharT>\n     {\n       return c+1;\n     }\n+\n+    CharT\n+    translate_nocase(CharT c) const\n+    {\n+      called_nocase = true;\n+      return regex_traits<CharT>::translate_nocase(c);\n+    }\n+\n+    template<typename FwdIt>\n+      basic_string<CharT>\n+      transform(FwdIt begin, FwdIt end) const\n+      {\n+\tcalled_transform = true;\n+\treturn regex_traits<CharT>::transform(begin, end);\n+      }\n   };\n \n void\n test01()\n {\n-  basic_regex<char, MyRegexTraits<char>> re(\".\");\n-  VERIFY(!regex_match(\"\\n\", re));\n-  VERIFY(!regex_match(\"\\r\", re));\n+  {\n+    basic_regex<char, MyRegexTraits<char>> re(\".\");\n+    VERIFY(!regex_match(\"\\n\", re));\n+    VERIFY(!regex_match(\"\\r\", re));\n+  }\n+  {\n+    VERIFY(!called_transform);\n+    basic_regex<char, MyRegexTraits<char>> re(\"[a]\", regex::collate);\n+    VERIFY(regex_match(\"a\", re));\n+    VERIFY(exchange(called_transform, false));\n+  }\n+  {\n+    VERIFY(!called_nocase);\n+    basic_regex<char, MyRegexTraits<char>> re(\"[a]\", regex::icase);\n+    VERIFY(regex_match(\"A\", re));\n+    VERIFY(exchange(called_nocase, false));\n+  }\n+  {\n+    basic_regex<char, MyRegexTraits<char>> re(\"[T-f]\", regex::icase);\n+    VERIFY(regex_match(\"A\", re));\n+    VERIFY(regex_match(\"F\", re));\n+    VERIFY(regex_match(\"a\", re));\n+    VERIFY(regex_match(\"f\", re));\n+\n+    VERIFY(!regex_match(\"G\", re));\n+    VERIFY(!regex_match(\"S\", re));\n+    VERIFY(!regex_match(\"g\", re));\n+    VERIFY(!regex_match(\"s\", re));\n+\n+    VERIFY(regex_match(\"T\", re));\n+    VERIFY(regex_match(\"Z\", re));\n+    VERIFY(regex_match(\"t\", re));\n+    VERIFY(regex_match(\"z\", re));\n+  }\n+  // icase doesn't participate with the presence of collate and user-defined traits.\n+  {\n+    basic_regex<char, MyRegexTraits<char>> re(\"[T-f]\", regex::icase | regex::collate);\n+    VERIFY(!regex_match(\"A\", re));\n+    VERIFY(!regex_match(\"S\", re));\n+    VERIFY(regex_match(\"T\", re));\n+    VERIFY(regex_match(\"Z\", re));\n+    VERIFY(regex_match(\"a\", re));\n+    VERIFY(regex_match(\"f\", re));\n+    VERIFY(!regex_match(\"g\", re));\n+  }\n }\n \n int main()"}]}