{"sha": "04a90bec0962d8033af1178899f1bf3501ff062e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhOTBiZWMwOTYyZDgwMzNhZjExNzg4OTlmMWJmMzUwMWZmMDYyZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-12-09T21:29:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-12-09T21:29:15Z"}, "message": "Eliminate FOR_ALL_BB macro.\n\ngcc/\n\t* basic-block.h (FOR_ALL_BB): Eliminate macro.\n\n\t* cfg.c (alloc_aux_for_blocks, clear_aux_for_blocks): Replace\n\tuses of FOR_ALL_BB with FOR_ALL_BB_FN, making uses of cfun explicit.\n\n\t* cfganal.c (inverted_post_order_compute): Likewise.\n\t* cfgcleanup.c (try_optimize_cfg): Likewise.\n\t* cfgexpand.c (add_scope_conflicts): Likewise.\n\t* cfghooks.c (dump_flow_info, account_profile_record): Likewise.\n\t* cfgrtl.c (relink_block_chain): Likewise.\n\t* dce.c (mark_artificial_uses): Likewise.\n\t* df-core.c (df_set_blocks, df_compute_cfg_image, df_dump): Likewise.\n\t* df-problems.c (df_lr_verify_solution_start,\n\tdf_lr_verify_solution_end, df_lr_verify_transfer_functions,\n\tdf_live_verify_solution_start, df_live_verify_solution_end,\n\tdf_live_set_all_dirty, df_live_verify_transfer_functions,\n\tdf_md_local_comput): Likewise.\n\t* df-scan.c (df_scan_free_internal, df_scan_alloc)\n\tdf_reorganize_refs_by_insn, df_scan_verify): Likewise.\n\t* dominance.c (compute_dom_fast_query, calculate_dominance_info,\n\tfree_dominance_info): Likewise.\n\t* dse.c (dse_step1, dse_step3, dse_step4, dse_step6): Likewise.\n\t* graph.c (draw_cfg_edges): Likewise.\n\t* graphite-scop-detection.c (print_graphite_scop_statistics,\n\tdot_all_scops_1): Likewise.\n\t* graphite.c (print_global_statistics,\n\tprint_graphite_scop_statistics): Likewise.\n\t* ira.c (do_reload): Likewise.\n\t* loop-init.c (loop_optimizer_finalize): Likewise.\n\t* lto-streamer-in.c (input_function): Likewise.\n\t* lto-streamer-out.c (output_function): Likewise.\n\t* mcf.c (adjust_cfg_counts): Likewise.\n\t* predict.c (estimate_loops): Likewise.\n\t* sched-rgn.c (haifa_find_rgns): Likewise.\n\t* tree-cfg.c (split_critical_edges): Likewise.\n \t* tree-dfa.c (renumber_gimple_stmt_uids): Likewise.\n\t* tree-loop-distribution.c (tree_loop_distribution): Likewise.\n\t* tree-ssa-pre.c (compute_antic, insert, init_pre): Likewise.\n\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n\t* var-tracking.c (vt_initialize, vt_finalize): Likewise.\n\t* vtable-verify.c (vtable_verify_main): Likewise.\n\t* web.c (web_main): Likewise.\n\nFrom-SVN: r205830", "tree": {"sha": "6527002294a85c8c75581da8c201ffa8e0109d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6527002294a85c8c75581da8c201ffa8e0109d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a90bec0962d8033af1178899f1bf3501ff062e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a90bec0962d8033af1178899f1bf3501ff062e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a90bec0962d8033af1178899f1bf3501ff062e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a90bec0962d8033af1178899f1bf3501ff062e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f42035e387241ab4225dfe948d5947ac3a6b883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f42035e387241ab4225dfe948d5947ac3a6b883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f42035e387241ab4225dfe948d5947ac3a6b883"}], "stats": {"total": 182, "additions": 112, "deletions": 70}, "files": [{"sha": "846d5b35556341596acd0c1d3a013343a078ab84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1,3 +1,48 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (FOR_ALL_BB): Eliminate macro.\n+\n+\t* cfg.c (alloc_aux_for_blocks, clear_aux_for_blocks): Replace\n+\tuses of FOR_ALL_BB with FOR_ALL_BB_FN, making uses of cfun explicit.\n+\n+\t* cfganal.c (inverted_post_order_compute): Likewise.\n+\t* cfgcleanup.c (try_optimize_cfg): Likewise.\n+\t* cfgexpand.c (add_scope_conflicts): Likewise.\n+\t* cfghooks.c (dump_flow_info, account_profile_record): Likewise.\n+\t* cfgrtl.c (relink_block_chain): Likewise.\n+\t* dce.c (mark_artificial_uses): Likewise.\n+\t* df-core.c (df_set_blocks, df_compute_cfg_image, df_dump): Likewise.\n+\t* df-problems.c (df_lr_verify_solution_start,\n+\tdf_lr_verify_solution_end, df_lr_verify_transfer_functions,\n+\tdf_live_verify_solution_start, df_live_verify_solution_end,\n+\tdf_live_set_all_dirty, df_live_verify_transfer_functions,\n+\tdf_md_local_comput): Likewise.\n+\t* df-scan.c (df_scan_free_internal, df_scan_alloc)\n+\tdf_reorganize_refs_by_insn, df_scan_verify): Likewise.\n+\t* dominance.c (compute_dom_fast_query, calculate_dominance_info,\n+\tfree_dominance_info): Likewise.\n+\t* dse.c (dse_step1, dse_step3, dse_step4, dse_step6): Likewise.\n+\t* graph.c (draw_cfg_edges): Likewise.\n+\t* graphite-scop-detection.c (print_graphite_scop_statistics,\n+\tdot_all_scops_1): Likewise.\n+\t* graphite.c (print_global_statistics,\n+\tprint_graphite_scop_statistics): Likewise.\n+\t* ira.c (do_reload): Likewise.\n+\t* loop-init.c (loop_optimizer_finalize): Likewise.\n+\t* lto-streamer-in.c (input_function): Likewise.\n+\t* lto-streamer-out.c (output_function): Likewise.\n+\t* mcf.c (adjust_cfg_counts): Likewise.\n+\t* predict.c (estimate_loops): Likewise.\n+\t* sched-rgn.c (haifa_find_rgns): Likewise.\n+\t* tree-cfg.c (split_critical_edges): Likewise.\n+ \t* tree-dfa.c (renumber_gimple_stmt_uids): Likewise.\n+\t* tree-loop-distribution.c (tree_loop_distribution): Likewise.\n+\t* tree-ssa-pre.c (compute_antic, insert, init_pre): Likewise.\n+\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n+\t* var-tracking.c (vt_initialize, vt_finalize): Likewise.\n+\t* vtable-verify.c (vtable_verify_main): Likewise.\n+\t* web.c (web_main): Likewise.\n+\n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (FOR_EACH_BB_REVERSE): Eliminate macro."}, {"sha": "b323a1f17435f7e201766591fd0d8c40caeb9393", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -362,9 +362,6 @@ struct GTY(()) control_flow_graph {\n /* Cycles through _all_ basic blocks, even the fake ones (entry and\n    exit block).  */\n \n-#define FOR_ALL_BB(BB) \\\n-  for (BB = ENTRY_BLOCK_PTR_FOR_FN (cfun); BB; BB = BB->next_bb)\n-\n #define FOR_ALL_BB_FN(BB, FN) \\\n   for (BB = ENTRY_BLOCK_PTR_FOR_FN (FN); BB; BB = BB->next_bb)\n "}, {"sha": "d4d00a48424fa96bac34c5bd10534996a796ce2a", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -576,7 +576,7 @@ alloc_aux_for_blocks (int size)\n     {\n       basic_block bb;\n \n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \talloc_aux_for_block (bb, size);\n     }\n }\n@@ -588,7 +588,7 @@ clear_aux_for_blocks (void)\n {\n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     bb->aux = NULL;\n }\n "}, {"sha": "d7e03822fb867501dac59de1e10c1e0e0656ec12", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -784,7 +784,7 @@ inverted_post_order_compute (int *post_order)\n   bitmap_clear (visited);\n \n   /* Put all blocks that have no successor into the initial work list.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     if (EDGE_COUNT (bb->succs) == 0)\n       {\n         /* Push the initial edge on to the stack.  */"}, {"sha": "684ab0fa22a05f5dfb65b9f0ee728b13cd2024a3", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -2864,7 +2864,7 @@ try_optimize_cfg (int mode)\n       while (changed);\n     }\n \n-  FOR_ALL_BB (b)\n+  FOR_ALL_BB_FN (b, cfun)\n     b->flags &= ~(BB_FORWARDER_BLOCK | BB_NONTHREADABLE_BLOCK);\n \n   return changed_overall;"}, {"sha": "a73bd411926847fc5d06ddb69e317d3448b6bf48", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -498,7 +498,7 @@ add_scope_conflicts (void)\n \n      We then do a mostly classical bitmap liveness algorithm.  */\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     bb->aux = BITMAP_ALLOC (&stack_var_bitmap_obstack);\n \n   rpo = XNEWVEC (int, last_basic_block_for_fn (cfun));\n@@ -525,7 +525,7 @@ add_scope_conflicts (void)\n \n   free (rpo);\n   BITMAP_FREE (work);\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     BITMAP_FREE (bb->aux);\n }\n "}, {"sha": "7a16887e45840a8eebe9ce6b04edfe47a2c52162", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -325,7 +325,7 @@ dump_flow_info (FILE *file, int flags)\n \n   fprintf (file, \"\\n%d basic blocks, %d edges.\\n\", n_basic_blocks_for_fn (cfun),\n \t   n_edges_for_fn (cfun));\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     dump_bb (file, bb, 0, flags);\n \n   putc ('\\n', file);\n@@ -1408,7 +1408,7 @@ account_profile_record (struct profile_record *record, int after_pass)\n   int sum;\n   gcov_type lsum;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n    {\n       if (bb != EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t  && profile_status_for_fn (cfun) != PROFILE_ABSENT)"}, {"sha": "1a632498a6442acd979b3d6aab8eb305508c27ef", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -3619,7 +3619,7 @@ relink_block_chain (bool stay_in_cfglayout_mode)\n   EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb = prev_bb;\n \n   /* Then, clean up the aux fields.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bb->aux = NULL;\n       if (!stay_in_cfglayout_mode)"}, {"sha": "7e8278faaf63e9b3b250cc36ed7c281947709757", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -663,7 +663,7 @@ mark_artificial_uses (void)\n   struct df_link *defs;\n   df_ref *use_rec;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       for (use_rec = df_get_artificial_uses (bb->index);\n \t   *use_rec; use_rec++)"}, {"sha": "045b54f4b821a0d35b0ba3bcdb04e73d00681461", "filename": "gcc/df-core.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -549,7 +549,7 @@ df_set_blocks (bitmap blocks)\n \t\t    {\n \t\t      basic_block bb;\n \t\t      bitmap_initialize (&blocks_to_reset, &df_bitmap_obstack);\n-\t\t      FOR_ALL_BB (bb)\n+\t\t      FOR_ALL_BB_FN (bb, cfun)\n \t\t\t{\n \t\t\t  bitmap_set_bit (&blocks_to_reset, bb->index);\n \t\t\t}\n@@ -1720,15 +1720,15 @@ df_compute_cfg_image (void)\n   int i;\n   int * map;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       size += EDGE_COUNT (bb->succs);\n     }\n \n   map = XNEWVEC (int, size);\n   map[0] = size;\n   i = 1;\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       edge_iterator ei;\n       edge e;\n@@ -2021,7 +2021,7 @@ df_dump (FILE *file)\n   basic_block bb;\n   df_dump_start (file);\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       df_print_bb_index (bb, file);\n       df_dump_top (bb, file);"}, {"sha": "4b926b6ee741bbff8cba44a4e41cc8cf2906c62e", "filename": "gcc/df-problems.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1176,7 +1176,7 @@ df_lr_verify_solution_start (void)\n   problem_data->in = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n   problem_data->out = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bitmap_initialize (&problem_data->in[bb->index], &problem_data->lr_bitmaps);\n       bitmap_initialize (&problem_data->out[bb->index], &problem_data->lr_bitmaps);\n@@ -1205,7 +1205,7 @@ df_lr_verify_solution_end (void)\n        in df_lr_finalize for details.  */\n     df_lr->solutions_dirty = false;\n   else\n-    FOR_ALL_BB (bb)\n+    FOR_ALL_BB_FN (bb, cfun)\n       {\n \tif ((!bitmap_equal_p (&problem_data->in[bb->index], DF_LR_IN (bb)))\n \t    || (!bitmap_equal_p (&problem_data->out[bb->index], DF_LR_OUT (bb))))\n@@ -1217,7 +1217,7 @@ df_lr_verify_solution_end (void)\n \n   /* Cannot delete them immediately because you may want to dump them\n      if the comparison fails.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bitmap_clear (&problem_data->in[bb->index]);\n       bitmap_clear (&problem_data->out[bb->index]);\n@@ -1294,7 +1294,7 @@ df_lr_verify_transfer_functions (void)\n   bitmap_initialize (&saved_use, &bitmap_default_obstack);\n   bitmap_initialize (&all_blocks, &bitmap_default_obstack);\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       struct df_lr_bb_info *bb_info = df_lr_get_bb_info (bb->index);\n       bitmap_set_bit (&all_blocks, bb->index);\n@@ -1713,7 +1713,7 @@ df_live_verify_solution_start (void)\n   problem_data->in = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n   problem_data->out = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bitmap_initialize (&problem_data->in[bb->index], &problem_data->live_bitmaps);\n       bitmap_initialize (&problem_data->out[bb->index], &problem_data->live_bitmaps);\n@@ -1736,7 +1736,7 @@ df_live_verify_solution_end (void)\n   if (!problem_data->out)\n     return;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       if ((!bitmap_equal_p (&problem_data->in[bb->index], DF_LIVE_IN (bb)))\n \t  || (!bitmap_equal_p (&problem_data->out[bb->index], DF_LIVE_OUT (bb))))\n@@ -1748,7 +1748,7 @@ df_live_verify_solution_end (void)\n \n   /* Cannot delete them immediately because you may want to dump them\n      if the comparison fails.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bitmap_clear (&problem_data->in[bb->index]);\n       bitmap_clear (&problem_data->out[bb->index]);\n@@ -1814,7 +1814,7 @@ void\n df_live_set_all_dirty (void)\n {\n   basic_block bb;\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     bitmap_set_bit (df_live->out_of_date_transfer_functions,\n \t\t    bb->index);\n }\n@@ -1840,7 +1840,7 @@ df_live_verify_transfer_functions (void)\n \n   df_grow_insn_info ();\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       struct df_live_bb_info *bb_info = df_live_get_bb_info (bb->index);\n       bitmap_set_bit (&all_blocks, bb->index);\n@@ -4316,7 +4316,7 @@ df_md_local_compute (bitmap all_blocks)\n   bitmap_clear (&seen_in_insn);\n \n   frontiers = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     bitmap_initialize (&frontiers[bb->index], &bitmap_default_obstack);\n \n   compute_dominance_frontiers (frontiers);\n@@ -4334,7 +4334,7 @@ df_md_local_compute (bitmap all_blocks)\n \t}\n     }\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     bitmap_clear (&frontiers[bb->index]);\n   free (frontiers);\n }"}, {"sha": "a35b12fbebba710e342ed16f7e3949b417697520", "filename": "gcc/df-scan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -213,7 +213,7 @@ df_scan_free_internal (void)\n \t}\n     }\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       unsigned int bb_index = bb->index;\n       struct df_scan_bb_info *bb_info = df_scan_get_bb_info (bb_index);\n@@ -355,7 +355,7 @@ df_scan_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n   df_grow_insn_info ();\n   df_grow_bb_info (df_scan);\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       unsigned int bb_index = bb->index;\n       struct df_scan_bb_info *bb_info = df_scan_get_bb_info (bb_index);\n@@ -1887,7 +1887,7 @@ df_reorganize_refs_by_insn (struct df_ref_info *ref_info,\n     }\n   else\n     {\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \toffset = df_reorganize_refs_by_insn_bb (bb, offset, ref_info,\n \t\t\t\t\t\tinclude_defs, include_uses,\n \t\t\t\t\t\tinclude_eq_uses);\n@@ -4569,7 +4569,7 @@ df_scan_verify (void)\n      clear a mark that has not been set as this means that the ref in\n      the block or insn was not in the reg chain.  */\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     df_bb_verify (bb);\n \n   /* (4) See if all reg chains are traversed a second time.  This time"}, {"sha": "579712ca245b2a00f7f514d2aeabb032f148ee8b", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -176,7 +176,7 @@ enum df_ref_order\n     DF_REF_ORDER_BY_REG_WITH_NOTES,\n \n     /* Organize the refs in insn order.  The insns are ordered within a\n-       block, and the blocks are ordered by FOR_ALL_BB.  */\n+       block, and the blocks are ordered by FOR_ALL_BB_FN.  */\n     DF_REF_ORDER_BY_INSN,\n \n     /* For uses, the refs within eq notes may be added for"}, {"sha": "77f94716cf6225a04691f908a496c756b56eac66", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -624,7 +624,7 @@ compute_dom_fast_query (enum cdi_direction dir)\n   if (dom_computed[dir_index] == DOM_OK)\n     return;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       if (!bb->dom[dir_index]->father)\n \tassign_dfs_numbers (bb->dom[dir_index], &num);\n@@ -652,7 +652,7 @@ calculate_dominance_info (enum cdi_direction dir)\n     {\n       gcc_assert (!n_bbs_in_dom_tree[dir_index]);\n \n-      FOR_ALL_BB (b)\n+      FOR_ALL_BB_FN (b, cfun)\n \t{\n \t  b->dom[dir_index] = et_new_tree (b);\n \t}\n@@ -689,7 +689,7 @@ free_dominance_info (enum cdi_direction dir)\n   if (!dom_info_available_p (dir))\n     return;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       et_free_tree_force (bb->dom[dir_index]);\n       bb->dom[dir_index] = NULL;"}, {"sha": "958097d2d1c4c2e137db18aa302531b3fc5c0d62", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -2708,7 +2708,7 @@ dse_step1 (void)\n   bitmap_set_bit (all_blocks, ENTRY_BLOCK);\n   bitmap_set_bit (all_blocks, EXIT_BLOCK);\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       insn_info_t ptr;\n       bb_info_t bb_info = (bb_info_t) pool_alloc (bb_info_pool);\n@@ -3290,7 +3290,7 @@ dse_step3 (bool for_spills)\n \n   bitmap_ones (unreachable_blocks);\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bb_info_t bb_info = bb_table[bb->index];\n       if (bb_info->gen)\n@@ -3469,7 +3469,7 @@ dse_step4 (void)\n       basic_block bb;\n \n       fprintf (dump_file, \"\\n\\n*** Global dataflow info after analysis.\\n\");\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \t{\n \t  bb_info_t bb_info = bb_table[bb->index];\n \n@@ -3617,7 +3617,7 @@ dse_step6 (void)\n {\n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bb_info_t bb_info = bb_table[bb->index];\n       insn_info_t insn_info = bb_info->last_insn;"}, {"sha": "545de44a6a91e4a90abaf26864b6b654519467c6", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -255,7 +255,7 @@ draw_cfg_edges (pretty_printer *pp, struct function *fun)\n {\n   basic_block bb;\n   mark_dfs_back_edges ();\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     draw_cfg_node_succ_edges (pp, fun->funcdef_no, bb);\n \n   /* Add an invisible edge from ENTRY to EXIT, to improve the graph layout.  */"}, {"sha": "fea15e55abe95e41b30ae3ab567dfc2447020b66", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1114,7 +1114,7 @@ print_graphite_scop_statistics (FILE* file, scop_p scop)\n \n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator psi;\n       loop_p loop = bb->loop_father;\n@@ -1450,7 +1450,7 @@ dot_all_scops_1 (FILE *file, vec<scop_p> scops)\n \n   fprintf (file, \"digraph all {\\n\");\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       int part_of_scop = false;\n \n@@ -1557,7 +1557,7 @@ dot_all_scops_1 (FILE *file, vec<scop_p> scops)\n       fprintf (file, \"  </TABLE>>, shape=box, style=\\\"setlinewidth(0)\\\"]\\n\");\n     }\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t      fprintf (file, \"%d -> %d;\\n\", bb->index, e->dest->index);"}, {"sha": "8af040257db01d4bb1fb9c0ce7b437e351ddaeb2", "filename": "gcc/graphite.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -94,7 +94,7 @@ print_global_statistics (FILE* file)\n \n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator psi;\n \n@@ -150,7 +150,7 @@ print_graphite_scop_statistics (FILE* file, scop_p scop)\n \n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator psi;\n       loop_p loop = bb->loop_father;"}, {"sha": "d6462ca72030c4f714dfeac597fbcedf631e4d9e", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -5443,7 +5443,7 @@ do_reload (void)\n \t  loop_optimizer_finalize ();\n \t  free_dominance_info (CDI_DOMINATORS);\n \t}\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \tbb->loop_father = NULL;\n       current_loops = NULL;\n       \n@@ -5492,7 +5492,7 @@ do_reload (void)\n \t  loop_optimizer_finalize ();\n \t  free_dominance_info (CDI_DOMINATORS);\n \t}\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \tbb->loop_father = NULL;\n       current_loops = NULL;\n       "}, {"sha": "8c5553b983fb40eba52add790482d4c2e0d497e7", "filename": "gcc/loop-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -169,7 +169,7 @@ loop_optimizer_finalize (void)\n   ggc_free (current_loops);\n   current_loops = NULL;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bb->loop_father = NULL;\n     }"}, {"sha": "9d4466be0c53648c8542424e3555abdb808b4042", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -976,7 +976,7 @@ input_function (tree fn_decl, struct data_in *data_in,\n   /* Fix up the call statements that are mentioned in the callgraph\n      edges.  */\n   set_gimple_stmt_max_uid (cfun, 0);\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -991,7 +991,7 @@ input_function (tree fn_decl, struct data_in *data_in,\n \t}\n     }\n   stmts = (gimple *) xcalloc (gimple_stmt_max_uid (fn), sizeof (gimple));\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator bsi = gsi_start_phis (bb);\n       while (!gsi_end_p (bsi))"}, {"sha": "a88274e89dda1869fcd4ae0748cdecaa255087df", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1868,7 +1868,7 @@ output_function (struct cgraph_node *node)\n \t virtual PHIs get re-computed on-the-fly which would make numbers\n \t inconsistent.  */\n       set_gimple_stmt_max_uid (cfun, 0);\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \t{\n \t  gimple_stmt_iterator gsi;\n \t  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -1887,7 +1887,7 @@ output_function (struct cgraph_node *node)\n \t}\n       /* To avoid keeping duplicate gimple IDs in the statements, renumber\n \t virtual phis now.  */\n-      FOR_ALL_BB (bb)\n+      FOR_ALL_BB_FN (bb, cfun)\n \t{\n \t  gimple_stmt_iterator gsi;\n \t  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "146b43c13773d89fafed2ba81b2c2bdad40e1d71", "filename": "gcc/mcf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1245,7 +1245,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t\t     sum_edge_counts (EXIT_BLOCK_PTR_FOR_FN (cfun)->preds);\n \n   /* Compute edge probabilities.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       if (bb->count)\n         {"}, {"sha": "a5ad34f601afcaa7e0db0beab680377a95244c61", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -2757,7 +2757,7 @@ estimate_loops (void)\n     estimate_loops_at_level (current_loops->tree_root->inner);\n \n   /* Now propagate the frequencies through all the blocks.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       bitmap_set_bit (tovisit, bb->index);\n     }"}, {"sha": "863cd1de2d06a380b93c5ccb4812adf39d7cdb17", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -745,7 +745,7 @@ haifa_find_rgns (void)\n     }\n \n   /* Reset ->aux field used by EDGE_PASSED.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       edge_iterator ei;\n       edge e;"}, {"sha": "03e177af58f22c263398b2b2a11bfcd7c85e1c24", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -7940,7 +7940,7 @@ split_critical_edges (void)\n      expensive.  So we want to enable recording of edge to CASE_LABEL_EXPR\n      mappings around the calls to split_edge.  */\n   start_recording_case_labels ();\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n         {"}, {"sha": "302822c1f207ea06910a32cb632b6a8a1fa57b99", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -80,7 +80,7 @@ renumber_gimple_stmt_uids (void)\n   basic_block bb;\n \n   set_gimple_stmt_max_uid (cfun, 0);\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator bsi;\n       for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))"}, {"sha": "7d86b08fb215fdcbd6d15d6873589afe51d6a001", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -1677,7 +1677,7 @@ tree_loop_distribution (void)\n   basic_block bb;\n   control_dependences *cd = NULL;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "c46d9ae3a9d63c47bb3467d038e7881ecd4fa6c8", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -2444,7 +2444,7 @@ compute_antic (void)\n   has_abnormal_preds = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   bitmap_clear (has_abnormal_preds);\n \n-  FOR_ALL_BB (block)\n+  FOR_ALL_BB_FN (block, cfun)\n     {\n       edge_iterator ei;\n       edge e;\n@@ -3659,7 +3659,7 @@ insert (void)\n   basic_block bb;\n   int num_iterations = 0;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     NEW_SETS (bb) = bitmap_set_new ();\n \n   while (new_stuff)\n@@ -3672,7 +3672,7 @@ insert (void)\n       /* Clear the NEW sets before the next iteration.  We have already\n          fully propagated its contents.  */\n       if (new_stuff)\n-\tFOR_ALL_BB (bb)\n+\tFOR_ALL_BB_FN (bb, cfun)\n \t  bitmap_set_free (NEW_SETS (bb));\n     }\n   statistics_histogram_event (cfun, \"insert iterations\", num_iterations);\n@@ -4671,7 +4671,7 @@ init_pre (void)\n \t\t\t\t       sizeof (struct bitmap_set), 30);\n   pre_expr_pool = create_alloc_pool (\"pre_expr nodes\",\n \t\t\t\t     sizeof (struct pre_expr_d), 30);\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       EXP_GEN (bb) = bitmap_set_new ();\n       PHI_GEN (bb) = bitmap_set_new ();"}, {"sha": "fc8041fd1dd0e2b0cc5d34836f16bd59705fbfbf", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -509,7 +509,7 @@ ssa_prop_init (void)\n \n   /* Initially assume that every edge in the CFG is not executable.\n      (including the edges coming out of the entry block).  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n "}, {"sha": "f38cbe15bbc095e8142bf9152976b62620ad4eef", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -9847,7 +9847,7 @@ vt_initialize (void)\n   changed_variables.create (10);\n \n   /* Init the IN and OUT sets.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       VTI (bb)->visited = false;\n       VTI (bb)->flooded = false;\n@@ -10186,7 +10186,7 @@ vt_finalize (void)\n       VTI (bb)->mos.release ();\n     }\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     {\n       dataflow_set_destroy (&VTI (bb)->in);\n       dataflow_set_destroy (&VTI (bb)->out);"}, {"sha": "dabb77b9d106d7a63eed208a7aab21e053f667d7", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -735,7 +735,7 @@ vtable_verify_main (void)\n   unsigned int ret = 1;\n   basic_block bb;\n \n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n       verify_bb_vtables (bb);\n \n   return ret;"}, {"sha": "d281f45b2301b67948370b4430f5f4c0df9cf459", "filename": "gcc/web.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a90bec0962d8033af1178899f1bf3501ff062e/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=04a90bec0962d8033af1178899f1bf3501ff062e", "patch": "@@ -351,7 +351,7 @@ web_main (void)\n   df_set_flags (DF_DEFER_INSN_RESCAN);\n \n   /* Assign ids to the uses.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     {\n       unsigned int uid = INSN_UID (insn);\n@@ -379,7 +379,7 @@ web_main (void)\n   use_entry = XCNEWVEC (struct web_entry, uses_num);\n \n   /* Produce the web.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     {\n       unsigned int uid = INSN_UID (insn);\n@@ -404,7 +404,7 @@ web_main (void)\n \n   /* Update the instruction stream, allocating new registers for split pseudos\n      in progress.  */\n-  FOR_ALL_BB (bb)\n+  FOR_ALL_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     {\n       unsigned int uid = INSN_UID (insn);"}]}