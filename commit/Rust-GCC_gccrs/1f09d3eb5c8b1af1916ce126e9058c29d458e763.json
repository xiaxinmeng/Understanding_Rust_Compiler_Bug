{"sha": "1f09d3eb5c8b1af1916ce126e9058c29d458e763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwOWQzZWI1YzhiMWFmMTkxNmNlMTI2ZTkwNThjMjlkNDU4ZTc2Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-02T03:23:01Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-02T03:23:01Z"}, "message": "ia64.c (got_symbolic_operand): Do require a symbol+offset operand to have its offset be zero mod 0x3fff when...\n\n\t* config/ia64/ia64.c (got_symbolic_operand): Do require a\n\tsymbol+offset operand to have its offset be zero mod 0x3fff\n\twhen GOT entries are in use.  Clarify logic in SYMBOL_REF\n\tcase.  Clarify comments.\n\t(ia64_expand_load_address): Split a symbol+offset load when\n\tthe offset is nonzero mod 0x3fff, not 0x1fff.\ntestsuite:\n\t* gcc.dg/ia64-got-1.c: New test case.\n\nFrom-SVN: r85426", "tree": {"sha": "3beb5733c041e5c84f148b4953d0af7123ac6241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3beb5733c041e5c84f148b4953d0af7123ac6241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f09d3eb5c8b1af1916ce126e9058c29d458e763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f09d3eb5c8b1af1916ce126e9058c29d458e763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f09d3eb5c8b1af1916ce126e9058c29d458e763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f09d3eb5c8b1af1916ce126e9058c29d458e763/comments", "author": null, "committer": null, "parents": [{"sha": "72fba2df33f22f1a57b276cb07d0820f726358e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fba2df33f22f1a57b276cb07d0820f726358e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72fba2df33f22f1a57b276cb07d0820f726358e0"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "31af54e5adcd86c03fdabfe98764331fe330a5d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f09d3eb5c8b1af1916ce126e9058c29d458e763", "patch": "@@ -1,3 +1,12 @@\n+2004-08-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.c (got_symbolic_operand): Do require a\n+\tsymbol+offset operand to have its offset be zero mod 0x3fff\n+\twhen GOT entries are in use.  Clarify logic in SYMBOL_REF\n+\tcase.  Clarify comments.\n+\t(ia64_expand_load_address): Split a symbol+offset load when\n+\tthe offset is nonzero mod 0x3fff, not 0x1fff.\n+\n 2004-08-01  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Just abort"}, {"sha": "66e51ea80813cffc5b6c5386edcaef2cc8294c7b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1f09d3eb5c8b1af1916ce126e9058c29d458e763", "patch": "@@ -471,6 +471,7 @@ got_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   switch (GET_CODE (op))\n     {\n     case CONST:\n+      /* Accept only (plus (symbol_ref) (const_int)).  */\n       op = XEXP (op, 0);\n       if (GET_CODE (op) != PLUS)\n \treturn 0;\n@@ -479,11 +480,20 @@ got_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       op = XEXP (op, 1);\n       if (GET_CODE (op) != CONST_INT)\n \treturn 0;\n+\n+     /* Ok if we're not using GOT entries at all.  */\n+     if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n       return 1;\n+      \n+     /* The low 14 bits of the constant have been forced to zero\n+\tby ia64_expand_load_address, so that we do not use up so\n+\tmany GOT entries.  Prevent cse from undoing this.  */\n+     return (INTVAL (op) & 0x3fff) == 0;\n \n     case SYMBOL_REF:\n-      if (SYMBOL_REF_SMALL_ADDR_P (op))\n-\treturn 0;\n+      /* This sort of load should not be used for things in sdata.  */\n+      return !SYMBOL_REF_SMALL_ADDR_P (op);\n+\n     case LABEL_REF:\n       return 1;\n \n@@ -1125,7 +1135,7 @@ ia64_expand_load_address (rtx dest, rtx src)\n   if (GET_CODE (src) == CONST\n       && GET_CODE (XEXP (src, 0)) == PLUS\n       && GET_CODE (XEXP (XEXP (src, 0), 1)) == CONST_INT\n-      && (INTVAL (XEXP (XEXP (src, 0), 1)) & 0x1fff) != 0)\n+      && (INTVAL (XEXP (XEXP (src, 0), 1)) & 0x3fff) != 0)\n     {\n       rtx sym = XEXP (XEXP (src, 0), 0);\n       HOST_WIDE_INT ofs, hi, lo;"}, {"sha": "433700b936e93cb6551999de6173c9fe2913b60a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f09d3eb5c8b1af1916ce126e9058c29d458e763", "patch": "@@ -1,12 +1,16 @@\n+2004-08-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.dg/ia64-got-1.c: New test case.\n+\n 2004-08-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16489\n \t* g++.dg/init/null1.C: New test.\n \t* g++.dg/tc1/dr76.C: Adjust error marker.\n-\t\n+\n \tPR c++/16529\n \t* g++.dg/parse/namespace10.C: New test.\n-\t\n+\n \tPR c++/16810\n \t* g++.dg/inherit/ptrmem2.C: New test.\n \n@@ -31,8 +35,8 @@\n \n 2004-07-30  Richard Henderson  <rth@redhat.com>\n \n-        * gfortran.fortran-torture/execute/intrinsic_nearest.f90: Disable\n-        tests of nearest around zero.\n+\t* gfortran.fortran-torture/execute/intrinsic_nearest.f90: Disable\n+\ttests of nearest around zero.\n \n 2004-07-30  Andrew Pinski  <apinski@apple.com>\n \n@@ -86,7 +90,7 @@\n \n \t* gcc.dg/darwin-bool-1.c: New test.\n \t* gcc.dg/darwin-bool-2.c: New test.\n-\t\n+\n 2004-07-28  Richard Henderson  <rth@redhat.com>\n \n \t* gfortran.fortran-torture/execute/intrinsic_spacing.f90: Pass"}, {"sha": "d53560f81568cd09553276ac470501dd8086614a", "filename": "gcc/testsuite/gcc.dg/ia64-got-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-got-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f09d3eb5c8b1af1916ce126e9058c29d458e763/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-got-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-got-1.c?ref=1f09d3eb5c8b1af1916ce126e9058c29d458e763", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target ia64*-*-* } } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+\n+/* { dg-final { scan-assembler \"@ltoffx\\\\(object#\\\\)\" } } */\n+/* { dg-final { scan-assembler \"@ltoffx\\\\(object#\\[-+\\]16384\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]1\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]8191\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]8192\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]8193\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]16383\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\\\\(object#\\[-+\\]16385\\\\)\" } } */\n+\n+/* must not be in sdata */\n+extern char object[];\n+\n+#define r(n) char *r_##n (void) { return &object[n]; }\n+#define R(n) char *R_##n (void) { return &object[-n]; }\n+\n+#define t(n) r(n) R(n)\n+\n+t(0) t(1)\n+t(8191) t(8192) t(8193)\n+t(16383) t(16384) t(16385)"}]}