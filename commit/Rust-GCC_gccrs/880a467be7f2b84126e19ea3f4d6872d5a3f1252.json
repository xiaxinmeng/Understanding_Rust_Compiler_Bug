{"sha": "880a467be7f2b84126e19ea3f4d6872d5a3f1252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwYTQ2N2JlN2YyYjg0MTI2ZTE5ZWEzZjRkNjg3MmQ1YTNmMTI1Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2014-04-03T13:41:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2014-04-03T13:41:55Z"}, "message": "invoke.texi (Wnon-virtual-dtor): Adjust documentation.\n\n\t* doc/invoke.texi (Wnon-virtual-dtor): Adjust documentation.\n\t(Weffc++): Remove Scott's numbering, merge lists and reference\n\tWnon-virtual-dtor.\n\n\tc-family/\n\t* c.opt (Wnon-virtual-dtor): Auto set when Weffc++.\n\n\tcp/\n\t* class.c (accessible_nvdtor_p): New.\n\t(check_bases): Don't check base destructor here ...\n\t(check_bases_and_members): ... check them here.  Trigger on\n\tWnon-virtual-dtor flag.\n\t(finish_struct_1): Use accessible_nvdtor_p.\n\n\ttestsuite/\n\t* g++.dg/warn/Wnvdtor.C: Add non-polymorphic case.\n\t* g++.dg/warn/Wnvdtor-2.C: New.\n\t* g++.dg/warn/Wnvdtor-3.C: New.\n\t* g++.dg/warn/Wnvdtor-4.C: New.\n\t* g++.dg/warn/Weff1.C: Delete.\n\t* g++.old-deja/g++.benjamin/15309-1.C: Delete.\n\t* g++.old-deja/g++.benjamin/15309-2.C: Delete.\n\nFrom-SVN: r209056", "tree": {"sha": "8b8e9e063ebd4925080cfaaf28f2c840cedb712f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b8e9e063ebd4925080cfaaf28f2c840cedb712f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880a467be7f2b84126e19ea3f4d6872d5a3f1252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880a467be7f2b84126e19ea3f4d6872d5a3f1252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880a467be7f2b84126e19ea3f4d6872d5a3f1252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880a467be7f2b84126e19ea3f4d6872d5a3f1252/comments", "author": null, "committer": null, "parents": [{"sha": "0886676007c494d1a74efb0512d31f36171f3b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0886676007c494d1a74efb0512d31f36171f3b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0886676007c494d1a74efb0512d31f36171f3b0c"}], "stats": {"total": 321, "additions": 235, "deletions": 86}, "files": [{"sha": "f01c4066f883bf4c152c428b5cf74af645c45343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -1,3 +1,27 @@\n+2014-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/invoke.texi (Wnon-virtual-dtor): Adjust documentation.\n+\t(Weffc++): Remove Scott's numbering, merge lists and reference\n+\tWnon-virtual-dtor.\n+\n+\tc-family/\n+\n+\tcp/\n+\t* class.c (accessible_nvdtor_p): New.\n+\t(check_bases): Don't check base destructor here ...\n+\t(check_bases_and_members): ... check them here.  Trigger on\n+\tWnon-virtual-dtor flag.\n+\t(finish_struct_1): Use accessible_nvdtor_p.\n+\n+\ttestsuite/\n+\t* g++.dg/warn/Wnvdtor.C: Add non-polymorphic case.\n+\t* g++.dg/warn/Wnvdtor-2.C: New.\n+\t* g++.dg/warn/Wnvdtor-3.C: New.\n+\t* g++.dg/warn/Wnvdtor-4.C: New.\n+\t* g++.dg/warn/Weff1.C: Delete.\n+\t* g++.old-deja/g++.benjamin/15309-1.C: Delete.\n+\t* g++.old-deja/g++.benjamin/15309-2.C: Delete.\n+\n 2014-04-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78-expand.md (movqi): Handle (SUBREG (SYMBOL_REF))"}, {"sha": "e2b047482c55abc67132011fc3152c59911def68", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -1,3 +1,7 @@\n+2014-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c.opt (Wnon-virtual-dtor): Auto set when Weffc++.\n+\n 2014-04-02  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.h (c_expand_expr): Remove declaration."}, {"sha": "2abf66cb781635e3bfa7b405652e02209a84c12b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -569,7 +569,7 @@ C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n Warn when non-templatized friend functions are declared within a template\n \n Wnon-virtual-dtor\n-C++ ObjC++ Var(warn_nonvdtor) Warning\n+C++ ObjC++ Var(warn_nonvdtor) Warning LangEnabledBy(C++ ObjC++,Weffc++)\n Warn about non-virtual destructors\n \n Wnonnull"}, {"sha": "d174767edd779f54a510f9062d5869bf62f6ed8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -1,3 +1,11 @@\n+2014-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (accessible_nvdtor_p): New.\n+\t(check_bases): Don't check base destructor here ...\n+\t(check_bases_and_members): ... check them here.  Trigger on\n+\tWnon-virtual-dtor flag.\n+\t(finish_struct_1): Use accessible_nvdtor_p.\n+\n 2014-04-01  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (process_partial_specialization): Say \"not deducible\""}, {"sha": "1dfcd918b30da4400a6112b3adad94b62c8d8681", "filename": "gcc/cp/class.c", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -149,6 +149,7 @@ static tree *build_base_field (record_layout_info, tree, splay_tree, tree *);\n static void build_base_fields (record_layout_info, splay_tree, tree *);\n static void check_methods (tree);\n static void remove_zero_width_bit_fields (tree);\n+static bool accessible_nvdtor_p (tree);\n static void check_bases (tree, int *, int *);\n static void check_bases_and_members (tree);\n static tree create_vtable_ptr (tree, tree *);\n@@ -1476,6 +1477,33 @@ inherit_targ_abi_tags (tree t)\n   mark_type_abi_tags (t, false);\n }\n \n+/* Return true, iff class T has a non-virtual destructor that is\n+   accessible from outside the class heirarchy (i.e. is public, or\n+   there's a suitable friend.  */\n+\n+static bool\n+accessible_nvdtor_p (tree t)\n+{\n+  tree dtor = CLASSTYPE_DESTRUCTORS (t);\n+\n+  /* An implicitly declared destructor is always public.  And,\n+     if it were virtual, we would have created it by now.  */\n+  if (!dtor)\n+    return true;\n+\n+  if (DECL_VINDEX (dtor))\n+    return false; /* Virtual */\n+  \n+  if (!TREE_PRIVATE (dtor) && !TREE_PROTECTED (dtor))\n+    return true;  /* Public */\n+\n+  if (CLASSTYPE_FRIEND_CLASSES (t)\n+      || DECL_FRIENDLIST (TYPE_MAIN_DECL (t)))\n+    return true;   /* Has friends */\n+\n+  return false;\n+}\n+\n /* Run through the base classes of T, updating CANT_HAVE_CONST_CTOR_P,\n    and NO_CONST_ASN_REF_P.  Also set flag bits in T based on\n    properties of the bases.  */\n@@ -1512,13 +1540,6 @@ check_bases (tree t,\n       if (!CLASSTYPE_LITERAL_P (basetype))\n         CLASSTYPE_LITERAL_P (t) = false;\n \n-      /* Effective C++ rule 14.  We only need to check TYPE_POLYMORPHIC_P\n-\t here because the case of virtual functions but non-virtual\n-\t dtor is handled in finish_struct_1.  */\n-      if (!TYPE_POLYMORPHIC_P (basetype))\n-\twarning (OPT_Weffc__,\n-\t\t \"base class %q#T has a non-virtual destructor\", basetype);\n-\n       /* If the base class doesn't have copy constructors or\n \t assignment operators that take const references, then the\n \t derived class cannot have such a member automatically\n@@ -5547,6 +5568,27 @@ check_bases_and_members (tree t)\n   TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) |= TYPE_CONTAINS_VPTR_P (t);\n   TYPE_HAS_COMPLEX_DFLT (t) |= TYPE_CONTAINS_VPTR_P (t);\n \n+  /* Warn if a base of a polymorphic type has an accessible\n+     non-virtual destructor.  It is only now that we know the class is\n+     polymorphic.  Although a polymorphic base will have a already\n+     been diagnosed during its definition, we warn on use too.  */\n+  if (TYPE_POLYMORPHIC_P (t) && warn_nonvdtor)\n+    {\n+      tree binfo, base_binfo;\n+      unsigned i;\n+      \n+      for (binfo = TYPE_BINFO (t), i = 0;\n+\t   BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n+\t{\n+\t  tree basetype = TREE_TYPE (base_binfo);\n+\n+\t  if (accessible_nvdtor_p (basetype))\n+\t    warning (OPT_Wnon_virtual_dtor,\n+\t\t     \"base class %q#T has accessible non-virtual destructor\",\n+\t\t     basetype);\n+\t}\n+    }\n+  \n   /* If the class has no user-declared constructor, but does have\n      non-static const or reference data members that can never be\n      initialized, issue a warning.  */\n@@ -6597,25 +6639,11 @@ finish_struct_1 (tree t)\n \n   /* This warning does not make sense for Java classes, since they\n      cannot have destructors.  */\n-  if (!TYPE_FOR_JAVA (t) && warn_nonvdtor && TYPE_POLYMORPHIC_P (t))\n-    {\n-      tree dtor;\n-\n-      dtor = CLASSTYPE_DESTRUCTORS (t);\n-      if (/* An implicitly declared destructor is always public.  And,\n-\t     if it were virtual, we would have created it by now.  */\n-\t  !dtor\n-\t  || (!DECL_VINDEX (dtor)\n-\t      && (/* public non-virtual */\n-\t\t  (!TREE_PRIVATE (dtor) && !TREE_PROTECTED (dtor))\n-\t\t   || (/* non-public non-virtual with friends */\n-\t\t       (TREE_PRIVATE (dtor) || TREE_PROTECTED (dtor))\n-\t\t\t&& (CLASSTYPE_FRIEND_CLASSES (t)\n-\t\t\t|| DECL_FRIENDLIST (TYPE_MAIN_DECL (t)))))))\n-\twarning (OPT_Wnon_virtual_dtor,\n-\t\t \"%q#T has virtual functions and accessible\"\n-\t\t \" non-virtual destructor\", t);\n-    }\n+  if (!TYPE_FOR_JAVA (t) && warn_nonvdtor\n+      && TYPE_POLYMORPHIC_P (t) && accessible_nvdtor_p (t))\n+    warning (OPT_Wnon_virtual_dtor,\n+\t     \"%q#T has virtual functions and accessible\"\n+\t     \" non-virtual destructor\", t);\n \n   complete_vars (t);\n "}, {"sha": "4bf686660deb98b8f3c8395b63519581b8b87e7f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -2670,9 +2670,10 @@ the compiler to never throw an exception.\n @opindex Wnon-virtual-dtor\n @opindex Wno-non-virtual-dtor\n Warn when a class has virtual functions and an accessible non-virtual\n-destructor, in which case it is possible but unsafe to delete\n-an instance of a derived class through a pointer to the base class.\n-This warning is also enabled if @option{-Weffc++} is specified.\n+destructor itself or in a base class, or has in which case it is\n+possible but unsafe to delete an instance of a derived class through a\n+pointer to the base class.  This warning is automatically enabled if\n+@option{-Weffc++} is specified.\n \n @item -Wreorder @r{(C++ and Objective-C++ only)}\n @opindex Wreorder\n@@ -2716,40 +2717,34 @@ The following @option{-W@dots{}} options are not affected by @option{-Wall}.\n @opindex Weffc++\n @opindex Wno-effc++\n Warn about violations of the following style guidelines from Scott Meyers'\n-@cite{Effective C++, Second Edition} book:\n+@cite{Effective C++} series of books:\n \n @itemize @bullet\n @item\n-Item 11:  Define a copy constructor and an assignment operator for classes\n+Define a copy constructor and an assignment operator for classes\n with dynamically-allocated memory.\n \n @item\n-Item 12:  Prefer initialization to assignment in constructors.\n+Prefer initialization to assignment in constructors.\n \n @item\n-Item 14:  Make destructors virtual in base classes.\n+Have @code{operator=} return a reference to @code{*this}.\n \n @item\n-Item 15:  Have @code{operator=} return a reference to @code{*this}.\n+Don't try to return a reference when you must return an object.\n \n @item\n-Item 23:  Don't try to return a reference when you must return an object.\n-\n-@end itemize\n-\n-Also warn about violations of the following style guidelines from\n-Scott Meyers' @cite{More Effective C++} book:\n-\n-@itemize @bullet\n-@item\n-Item 6:  Distinguish between prefix and postfix forms of increment and\n+Distinguish between prefix and postfix forms of increment and\n decrement operators.\n \n @item\n-Item 7:  Never overload @code{&&}, @code{||}, or @code{,}.\n+Never overload @code{&&}, @code{||}, or @code{,}.\n \n @end itemize\n \n+This option also enables @option{-Wnon-virtual-dtor}, which is also\n+one of the effective C++ recommendations.\n+\n When selecting this option, be aware that the standard library\n headers do not obey all of these guidelines; use @samp{grep -v}\n to filter out those warnings."}, {"sha": "b51d81ed943dcd11c67155410f27a88238ae9380", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -1,3 +1,13 @@\n+2014-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/warn/Wnvdtor.C: Add non-polymorphic case.\n+\t* g++.dg/warn/Wnvdtor-2.C: New.\n+\t* g++.dg/warn/Wnvdtor-3.C: New.\n+\t* g++.dg/warn/Wnvdtor-4.C: New.\n+\t* g++.dg/warn/Weff1.C: Delete.\n+\t* g++.old-deja/g++.benjamin/15309-1.C: Delete.\n+\t* g++.old-deja/g++.benjamin/15309-2.C: Delete.\n+\n 2014-04-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/60659"}, {"sha": "a00dc29bf5f572e7a4b0feb183e6e3e99453ed41", "filename": "gcc/testsuite/g++.dg/warn/Weff1.C", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWeff1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWeff1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWeff1.C?ref=0886676007c494d1a74efb0512d31f36171f3b0c", "patch": "@@ -1,5 +0,0 @@\n-// { dg-options \"-Weffc++\" }\n-\n-struct S {};\n-/* Base classes should have virtual destructors.  */\n-struct T : public S {}; // { dg-warning \"\" }"}, {"sha": "de7c74bdfafb82936e1a9b0893264cfec8fae2db", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-2.C", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -6,18 +6,18 @@\n // destructor, in which case it would be possible but unsafe to delete\n // an instance of a derived class through a pointer to the base class.\n \n-struct A // { dg-bogus \"non-virtual destructor\" }\n+struct A\n {\n protected:\n-  ~A();\n+  ~A(); // inaccessible - no warning\n public:\n   virtual void f() = 0;\n };\n \n-struct B // { dg-bogus \"non-virtual destructor\" }\n+struct B\n {\n private:\n-  ~B();\n+  ~B(); // inaccessible - no warning\n public:\n   virtual void f() = 0;\n };\n@@ -52,3 +52,6 @@ private:\n public:\n   virtual void f() = 0;\n };\n+\n+struct H {};\n+struct I : H {};"}, {"sha": "8ec81542ce28f301a212b39f863392d8dc7a3715", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-3.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+// { dg-options \"-Weffc++\" }\n+\n+// Warn when a class has virtual functions and accessible non-virtual\n+// destructor, in which case it would be possible but unsafe to delete\n+// an instance of a derived class through a pointer to the base class.\n+\n+struct A\n+{\n+protected:\n+  ~A(); // inaccessible - no warning\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct B\n+{\n+private:\n+  ~B(); // inaccessible - no warning\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct C // { dg-warning \"non-virtual destructor\" }\n+{\n+  virtual void f() = 0;\n+};\n+\n+struct D // { dg-warning \"non-virtual destructor\" }\n+{\n+  ~D();\n+  virtual void f() = 0;\n+};\n+\n+struct E;\n+\n+struct F // { dg-warning \"non-virtual destructor\" }\n+{\n+protected:\n+  friend class E;\n+  ~F();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct G // { dg-warning \"non-virtual destructor\" }\n+{\n+private:\n+  friend class E;\n+  ~G();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct H {};\n+struct I : H {};"}, {"sha": "f63ffdc07e6652ae8f544e500c1d56740a4a3051", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-4.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+// { dg-options \"-Weffc++ -Wno-non-virtual-dtor\" }\n+\n+// Warn when a class has virtual functions and accessible non-virtual\n+// destructor, in which case it would be possible but unsafe to delete\n+// an instance of a derived class through a pointer to the base class.\n+\n+struct A\n+{\n+protected:\n+  ~A();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct B\n+{\n+private:\n+  ~B();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct C\n+{\n+  virtual void f() = 0;\n+};\n+\n+struct D\n+{\n+  ~D();\n+  virtual void f() = 0;\n+};\n+\n+struct E;\n+\n+struct F\n+{\n+protected:\n+  friend class E;\n+  ~F();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct G\n+{\n+private:\n+  friend class E;\n+  ~G();\n+public:\n+  virtual void f() = 0;\n+};\n+\n+struct H {};\n+struct I : H {};"}, {"sha": "f03cff5b31ced686c5d1a03aa43907c613d584b9", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880a467be7f2b84126e19ea3f4d6872d5a3f1252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor.C?ref=880a467be7f2b84126e19ea3f4d6872d5a3f1252", "patch": "@@ -8,3 +8,4 @@ extern \"Java\"\n     virtual void bar( void);\n   };\n }\n+"}, {"sha": "aa5530fff7fdbaf7df4baa6a300bc9dccdc1f6f7", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/15309-1.C", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-1.C?ref=0886676007c494d1a74efb0512d31f36171f3b0c", "patch": "@@ -1,21 +0,0 @@\n-// { dg-do assemble  }\n-// { dg-options \"-Wnon-virtual-dtor -Weffc++\" }\n-// 981203 bkoz\n-// g++/15309\n-\n-class bahamian {\n-public:\n-  bahamian ();\n-  ~bahamian ();  \n-};\n-\n-class miami : public bahamian\t// { dg-warning \"\" } // WARNING -\n-{\n-public:\n-   miami ();\n-   ~miami ();\n-};\n-\n-\n-\n-"}, {"sha": "28317973127fd153d42fbb5dc4ff676428e0ff10", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/15309-2.C", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0886676007c494d1a74efb0512d31f36171f3b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F15309-2.C?ref=0886676007c494d1a74efb0512d31f36171f3b0c", "patch": "@@ -1,10 +0,0 @@\n-// { dg-do assemble  }\n-// { dg-options \"-Wnon-virtual-dtor -Weffc++\" }\n-// 981203 bkoz\n-// g++/15309\n-\n-class bermuda {  // { dg-warning \"\" } // WARNING -\n-public:\n-  virtual int func1(int); \n-  ~bermuda();\n-};"}]}