{"sha": "4c0ce3c92a54a37f44e462698caf99fb856c980f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwY2UzYzkyYTU0YTM3ZjQ0ZTQ2MjY5OGNhZjk5ZmI4NTZjOTgwZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-27T16:05:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-27T16:05:15Z"}, "message": "dwarf2out.c (enum dw_val_class): Replace dw_val_class_long_long with dw_val_class_const_double.\n\n\t* dwarf2out.c (enum dw_val_class): Replace dw_val_class_long_long\n\twith dw_val_class_const_double.\n\t(struct dw_val_struct): Replace val_long_long with val_double and\n\tadjust for above change.\n\t(output_loc_operands): Likewise.\n\t(add_AT_long_long): Rename into...\n\t(add_AT_double): ...this.\n\t(print_die): Replace dw_val_class_long_long with\n\tdw_val_class_const_double and adjust.\n\t(attr_checksum): Likewise.\n\t(same_dw_val_p): Likewise.\n\t(size_of_die): Likewise.\n\t(value_format): Likewise.\n\t(output_die): Likewise.\n\t(loc_descriptor) <CONST_DOUBLE>: Likewise.\n\t(add_const_value_attribute) <CONST_DOUBLE>: Call add_AT_double\n\tinstead of add_AT_long_long.\n\t(add_bound_info) <INTEGER_CST>: Generate the bound as an unsigned\n\tvalue with the precision of its type.\n\nFrom-SVN: r152222", "tree": {"sha": "d75c17e6755f4b269e26802007ebd86b4abe0414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75c17e6755f4b269e26802007ebd86b4abe0414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0ce3c92a54a37f44e462698caf99fb856c980f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0ce3c92a54a37f44e462698caf99fb856c980f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0ce3c92a54a37f44e462698caf99fb856c980f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0ce3c92a54a37f44e462698caf99fb856c980f/comments", "author": null, "committer": null, "parents": [{"sha": "afbd0665815715ff285dba5143ecb49d4d27990f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbd0665815715ff285dba5143ecb49d4d27990f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbd0665815715ff285dba5143ecb49d4d27990f"}], "stats": {"total": 170, "additions": 114, "deletions": 56}, "files": [{"sha": "3de881e6d568916d4bbc25154ef439bdfa3e42ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0ce3c92a54a37f44e462698caf99fb856c980f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0ce3c92a54a37f44e462698caf99fb856c980f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c0ce3c92a54a37f44e462698caf99fb856c980f", "patch": "@@ -1,14 +1,36 @@\n-2009-09-26  Andreas Schwab  <schwab@linux-m68k.org>\n+2009-09-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n-        PR c/41476\n+\t* dwarf2out.c (enum dw_val_class): Replace dw_val_class_long_long\n+\twith dw_val_class_const_double.\n+\t(struct dw_val_struct): Replace val_long_long with val_double and\n+\tadjust for above change.\n+\t(output_loc_operands): Likewise.\n+\t(add_AT_long_long): Rename into...\n+\t(add_AT_double): ...this.\n+\t(print_die): Replace dw_val_class_long_long with\n+\tdw_val_class_const_double and adjust.\n+\t(attr_checksum): Likewise.\n+\t(same_dw_val_p): Likewise.\n+\t(size_of_die): Likewise.\n+\t(value_format): Likewise.\n+\t(output_die): Likewise.\n+\t(loc_descriptor) <CONST_DOUBLE>: Likewise.\n+\t(add_const_value_attribute) <CONST_DOUBLE>: Call add_AT_double\n+\tinstead of add_AT_long_long.\n+\t(add_bound_info) <INTEGER_CST>: Generate the bound as an unsigned\n+\tvalue with the precision of its type.\n+\n+2009-09-27  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\tPR c/41476\n \t* c-typeck.c (build_conditional_expr): Use the readonly and\n \tvolatile flags of the operand types, not of the operands itself.\n \n-2009-09-25  Peter O'Gorman  <pogma@thewrittenword.com>\n+2009-09-27  Peter O'Gorman  <pogma@thewrittenword.com>\n \n \tcollect2.c (main): Look for -brtl before adding libraries.\n \n-2009-09-19  Jonathan Gray <jsg@openbsd.org>\n+2009-09-27  Jonathan Gray  <jsg@openbsd.org>\n \n \t* config.gcc: Update OpenBSD targets.\n \t* config/openbsd-stdint.h: New file."}, {"sha": "1c59d267aab4353cf214c7f2f411c714c72694a2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 88, "deletions": 52, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0ce3c92a54a37f44e462698caf99fb856c980f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0ce3c92a54a37f44e462698caf99fb856c980f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4c0ce3c92a54a37f44e462698caf99fb856c980f", "patch": "@@ -4158,7 +4158,7 @@ enum dw_val_class\n   dw_val_class_range_list,\n   dw_val_class_const,\n   dw_val_class_unsigned_const,\n-  dw_val_class_long_long,\n+  dw_val_class_const_double,\n   dw_val_class_vec,\n   dw_val_class_flag,\n   dw_val_class_die_ref,\n@@ -4192,7 +4192,7 @@ typedef struct GTY(()) dw_val_struct {\n       dw_loc_descr_ref GTY ((tag (\"dw_val_class_loc\"))) val_loc;\n       HOST_WIDE_INT GTY ((default)) val_int;\n       unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_unsigned_const\"))) val_unsigned;\n-      rtx GTY ((tag (\"dw_val_class_long_long\"))) val_long_long;\n+      double_int GTY ((tag (\"dw_val_class_const_double\"))) val_double;\n       dw_vec_const GTY ((tag (\"dw_val_class_vec\"))) val_vec;\n       struct dw_val_die_union\n \t{\n@@ -4877,22 +4877,22 @@ output_loc_operands (dw_loc_descr_ref loc)\n \t\t\t\t   \"fp or vector constant word %u\", i);\n \t  }\n \t  break;\n-\tcase dw_val_class_long_long:\n+\tcase dw_val_class_const_double:\n \t  {\n \t    unsigned HOST_WIDE_INT first, second;\n \n \t    if (WORDS_BIG_ENDIAN)\n \t      {\n-\t\tfirst = CONST_DOUBLE_HIGH (val2->v.val_long_long);\n-\t\tsecond = CONST_DOUBLE_LOW (val2->v.val_long_long);\n+\t\tfirst = val2->v.val_double.high;\n+\t\tsecond = val2->v.val_double.low;\n \t      }\n \t    else\n \t      {\n-\t\tfirst = CONST_DOUBLE_LOW (val2->v.val_long_long);\n-\t\tsecond = CONST_DOUBLE_HIGH (val2->v.val_long_long);\n+\t\tfirst = val2->v.val_double.low;\n+\t\tsecond = val2->v.val_double.high;\n \t      }\n \t    dw2_asm_output_data (HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR,\n-\t\t\t\t first, \"long long constant\");\n+\t\t\t\t first, NULL);\n \t    dw2_asm_output_data (HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR,\n \t\t\t\t second, NULL);\n \t  }\n@@ -5818,7 +5818,8 @@ static void add_AT_int (dw_die_ref, enum dwarf_attribute, HOST_WIDE_INT);\n static inline HOST_WIDE_INT AT_int (dw_attr_ref);\n static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned HOST_WIDE_INT);\n static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_ref);\n-static void add_AT_long_long (dw_die_ref, enum dwarf_attribute, rtx);\n+static void add_AT_double (dw_die_ref, enum dwarf_attribute,\n+\t\t\t   HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static inline void add_AT_vec (dw_die_ref, enum dwarf_attribute, unsigned int,\n \t\t\t       unsigned int, unsigned char *);\n static hashval_t debug_str_do_hash (const void *);\n@@ -6754,14 +6755,15 @@ AT_unsigned (dw_attr_ref a)\n /* Add an unsigned double integer attribute value to a DIE.  */\n \n static inline void\n-add_AT_long_long (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t\t  rtx val_const_double)\n+add_AT_double (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t       HOST_WIDE_INT high, unsigned HOST_WIDE_INT low)\n {\n   dw_attr_node attr;\n \n   attr.dw_attr = attr_kind;\n-  attr.dw_attr_val.val_class = dw_val_class_long_long;\n-  attr.dw_attr_val.v.val_long_long = val_const_double;\n+  attr.dw_attr_val.val_class = dw_val_class_const_double;\n+  attr.dw_attr_val.v.val_double.high = high;\n+  attr.dw_attr_val.v.val_double.low = low;\n   add_dwarf_attr (die, &attr);\n }\n \n@@ -7622,11 +7624,11 @@ print_die (dw_die_ref die, FILE *outfile)\n \tcase dw_val_class_unsigned_const:\n \t  fprintf (outfile, HOST_WIDE_INT_PRINT_UNSIGNED, AT_unsigned (a));\n \t  break;\n-\tcase dw_val_class_long_long:\n-\t  fprintf (outfile, \"constant (\" HOST_WIDE_INT_PRINT_UNSIGNED\n-\t\t\t    \",\" HOST_WIDE_INT_PRINT_UNSIGNED \")\",\n-\t\t   CONST_DOUBLE_HIGH (a->dw_attr_val.v.val_long_long),\n-\t\t   CONST_DOUBLE_LOW (a->dw_attr_val.v.val_long_long));\n+\tcase dw_val_class_const_double:\n+\t  fprintf (outfile, \"constant (\"HOST_WIDE_INT_PRINT_DEC\",\"\\\n+\t\t\t    HOST_WIDE_INT_PRINT_UNSIGNED\")\",\n+\t\t   a->dw_attr_val.v.val_double.high,\n+\t\t   a->dw_attr_val.v.val_double.low);\n \t  break;\n \tcase dw_val_class_vec:\n \t  fprintf (outfile, \"floating-point or vector constant\");\n@@ -7782,9 +7784,8 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n     case dw_val_class_unsigned_const:\n       CHECKSUM (at->dw_attr_val.v.val_unsigned);\n       break;\n-    case dw_val_class_long_long:\n-      CHECKSUM (CONST_DOUBLE_HIGH (at->dw_attr_val.v.val_long_long));\n-      CHECKSUM (CONST_DOUBLE_LOW (at->dw_attr_val.v.val_long_long));\n+    case dw_val_class_const_double:\n+      CHECKSUM (at->dw_attr_val.v.val_double);\n       break;\n     case dw_val_class_vec:\n       CHECKSUM (at->dw_attr_val.v.val_vec);\n@@ -7883,11 +7884,9 @@ same_dw_val_p (const dw_val_node *v1, const dw_val_node *v2, int *mark)\n       return v1->v.val_int == v2->v.val_int;\n     case dw_val_class_unsigned_const:\n       return v1->v.val_unsigned == v2->v.val_unsigned;\n-    case dw_val_class_long_long:\n-      return CONST_DOUBLE_HIGH (v1->v.val_long_long)\n-\t     == CONST_DOUBLE_HIGH (v2->v.val_long_long)\n-\t     && CONST_DOUBLE_LOW (v1->v.val_long_long)\n-\t\t== CONST_DOUBLE_LOW (v2->v.val_long_long);\n+    case dw_val_class_const_double:\n+      return v1->v.val_double.high == v2->v.val_double.high\n+\t     && v1->v.val_double.low == v2->v.val_double.low;\n     case dw_val_class_vec:\n       if (v1->v.val_vec.length != v2->v.val_vec.length\n \t  || v1->v.val_vec.elt_size != v2->v.val_vec.elt_size)\n@@ -8495,8 +8494,10 @@ size_of_die (dw_die_ref die)\n \tcase dw_val_class_unsigned_const:\n \t  size += constant_size (AT_unsigned (a));\n \t  break;\n-\tcase dw_val_class_long_long:\n-\t  size += 1 + 2*HOST_BITS_PER_WIDE_INT/HOST_BITS_PER_CHAR; /* block */\n+\tcase dw_val_class_const_double:\n+\t  size += 2 * HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR;\n+\t  if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t    size++; /* block */\n \t  break;\n \tcase dw_val_class_vec:\n \t  size += constant_size (a->dw_attr_val.v.val_vec.length\n@@ -8700,8 +8701,19 @@ value_format (dw_attr_ref a)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-    case dw_val_class_long_long:\n-      return DW_FORM_block1;\n+    case dw_val_class_const_double:\n+      switch (HOST_BITS_PER_WIDE_INT)\n+\t{\n+\tcase 8:\n+\t  return DW_FORM_data2;\n+\tcase 16:\n+\t  return DW_FORM_data4;\n+\tcase 32:\n+\t  return DW_FORM_data8;\n+\tcase 64:\n+\tdefault:\n+\t  return DW_FORM_block1;\n+\t}\n     case dw_val_class_vec:\n       switch (constant_size (a->dw_attr_val.v.val_vec.length\n \t\t\t     * a->dw_attr_val.v.val_vec.elt_size))\n@@ -8973,28 +8985,29 @@ output_die (dw_die_ref die)\n \t\t\t       AT_unsigned (a), \"%s\", name);\n \t  break;\n \n-\tcase dw_val_class_long_long:\n+\tcase dw_val_class_const_double:\n \t  {\n \t    unsigned HOST_WIDE_INT first, second;\n \n-\t    dw2_asm_output_data (1,\n-\t\t\t\t 2 * HOST_BITS_PER_WIDE_INT\n-\t\t\t\t / HOST_BITS_PER_CHAR,\n-\t\t\t\t \"%s\", name);\n+\t    if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t      dw2_asm_output_data (1,\n+\t\t\t\t   2 * HOST_BITS_PER_WIDE_INT\n+\t\t\t\t   / HOST_BITS_PER_CHAR,\n+\t\t\t\t   NULL);\n \n \t    if (WORDS_BIG_ENDIAN)\n \t      {\n-\t\tfirst = CONST_DOUBLE_HIGH (a->dw_attr_val.v.val_long_long);\n-\t\tsecond = CONST_DOUBLE_LOW (a->dw_attr_val.v.val_long_long);\n+\t\tfirst = a->dw_attr_val.v.val_double.high;\n+\t\tsecond = a->dw_attr_val.v.val_double.low;\n \t      }\n \t    else\n \t      {\n-\t\tfirst = CONST_DOUBLE_LOW (a->dw_attr_val.v.val_long_long);\n-\t\tsecond = CONST_DOUBLE_HIGH (a->dw_attr_val.v.val_long_long);\n+\t\tfirst = a->dw_attr_val.v.val_double.low;\n+\t\tsecond = a->dw_attr_val.v.val_double.high;\n \t      }\n \n \t    dw2_asm_output_data (HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR,\n-\t\t\t\t first, \"long long constant\");\n+\t\t\t\t first, name);\n \t    dw2_asm_output_data (HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR,\n \t\t\t\t second, NULL);\n \t  }\n@@ -11880,8 +11893,11 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t    }\n \t  else\n \t    {\n-\t      loc_result->dw_loc_oprnd2.val_class = dw_val_class_long_long;\n-\t      loc_result->dw_loc_oprnd2.v.val_long_long = rtl;\n+\t      loc_result->dw_loc_oprnd2.val_class = dw_val_class_const_double;\n+\t      loc_result->dw_loc_oprnd2.v.val_double.high\n+\t\t= CONST_DOUBLE_HIGH (rtl);\n+\t      loc_result->dw_loc_oprnd2.v.val_double.low\n+\t\t= CONST_DOUBLE_LOW (rtl);\n \t    }\n \t}\n       break;\n@@ -13354,7 +13370,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       /* Note that a CONST_DOUBLE rtx could represent either an integer or a\n \t floating-point constant.  A CONST_DOUBLE is used whenever the\n \t constant requires more than one word in order to be adequately\n-\t represented.  We output CONST_DOUBLEs as blocks.  */\n+\t represented.  */\n       {\n \tenum machine_mode mode = GET_MODE (rtl);\n \n@@ -13367,7 +13383,8 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \t    add_AT_vec (die, DW_AT_const_value, length / 4, 4, array);\n \t  }\n \telse\n-\t  add_AT_long_long (die, DW_AT_const_value, rtl);\n+\t  add_AT_double (die, DW_AT_const_value,\n+\t\t\t CONST_DOUBLE_HIGH (rtl), CONST_DOUBLE_LOW (rtl));\n       }\n       return true;\n \n@@ -14313,14 +14330,33 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \n     /* All fixed-bounds are represented by INTEGER_CST nodes.  */\n     case INTEGER_CST:\n-      if (! host_integerp (bound, 0)\n-\t  || (bound_attr == DW_AT_lower_bound\n-\t      && (((is_c_family () || is_java ()) &&  integer_zerop (bound))\n-\t\t  || (is_fortran () && integer_onep (bound)))))\n-\t/* Use the default.  */\n-\t;\n-      else\n-\tadd_AT_unsigned (subrange_die, bound_attr, tree_low_cst (bound, 0));\n+      {\n+\tunsigned int prec = simple_type_size_in_bits (TREE_TYPE (bound));\n+\n+\t/* Use the default if possible.  */\n+\tif (bound_attr == DW_AT_lower_bound\n+\t    && (((is_c_family () || is_java ()) && integer_zerop (bound))\n+\t        || (is_fortran () && integer_onep (bound))))\n+\t  ;\n+\n+\t/* Otherwise represent the bound as an unsigned value with the\n+\t   precision of its type.  The precision and signedness of the\n+\t   type will be necessary to re-interpret it unambiguously.  */\n+\telse if (prec < HOST_BITS_PER_WIDE_INT)\n+\t  {\n+\t    unsigned HOST_WIDE_INT mask\n+\t      = ((unsigned HOST_WIDE_INT) 1 << prec) - 1;\n+\t    add_AT_unsigned (subrange_die, bound_attr,\n+\t\t  \t     TREE_INT_CST_LOW (bound) & mask);\n+\t  }\n+\telse if (prec == HOST_BITS_PER_WIDE_INT\n+\t\t || TREE_INT_CST_HIGH (bound) == 0)\n+\t  add_AT_unsigned (subrange_die, bound_attr,\n+\t\t  \t   TREE_INT_CST_LOW (bound));\n+\telse\n+\t  add_AT_double (subrange_die, bound_attr, TREE_INT_CST_HIGH (bound),\n+\t\t         TREE_INT_CST_LOW (bound));\n+      }\n       break;\n \n     CASE_CONVERT:"}]}