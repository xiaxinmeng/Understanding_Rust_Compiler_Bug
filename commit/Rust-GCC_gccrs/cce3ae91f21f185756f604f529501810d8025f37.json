{"sha": "cce3ae91f21f185756f604f529501810d8025f37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlM2FlOTFmMjFmMTg1NzU2ZjYwNGY1Mjk1MDE4MTBkODAyNWYzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-12T08:28:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-12T08:28:43Z"}, "message": "re PR c++/88449 (__builtin_is_constant_evaluated misbehaves due to constexpr call caching)\n\n\tPR c++/88449\n\t* constexpr.c (struct constexpr_call): Add pretend_const_required\n\tmember.\n\t(constexpr_call_hasher::equal): Return false if pretend_const_required\n\tmembers differ.\n\t(cxx_eval_call_expression): Adjust new_call initialization.  Hash in\n\tctx->pretend_const_required.\n\n\t* g++.dg/cpp2a/is-constant-evaluated1.C: Change from dg-do compile\n\tto dg-do run.\n\t(e): Adjust comment with correct expected value.\n\t(main): Expect e == 1.\n\t* g++.dg/cpp2a/is-constant-evaluated2.C: New test.\n\nFrom-SVN: r267044", "tree": {"sha": "2233210bda4863c89aa5f5033ebaf3d4d2dc63d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2233210bda4863c89aa5f5033ebaf3d4d2dc63d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce3ae91f21f185756f604f529501810d8025f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce3ae91f21f185756f604f529501810d8025f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce3ae91f21f185756f604f529501810d8025f37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce3ae91f21f185756f604f529501810d8025f37/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f00fb3d0ba1174dee21c33162a5fdc4e583a061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f00fb3d0ba1174dee21c33162a5fdc4e583a061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f00fb3d0ba1174dee21c33162a5fdc4e583a061"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "0347daa2bd3d51e6e58c9cc9263b14a31300ad3e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cce3ae91f21f185756f604f529501810d8025f37", "patch": "@@ -1,3 +1,13 @@\n+2018-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88449\n+\t* constexpr.c (struct constexpr_call): Add pretend_const_required\n+\tmember.\n+\t(constexpr_call_hasher::equal): Return false if pretend_const_required\n+\tmembers differ.\n+\t(cxx_eval_call_expression): Adjust new_call initialization.  Hash in\n+\tctx->pretend_const_required.\n+\n 2018-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87861"}, {"sha": "81ce4cdbe756d24ffb466c8ed6a86196bf14a6e5", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=cce3ae91f21f185756f604f529501810d8025f37", "patch": "@@ -976,6 +976,8 @@ struct GTY((for_user)) constexpr_call {\n   /* The hash of this call; we remember it here to avoid having to\n      recalculate it when expanding the hash table.  */\n   hashval_t hash;\n+  /* Whether __builtin_is_constant_evaluated() should evaluate to true.  */\n+  bool pretend_const_required;\n };\n \n struct constexpr_call_hasher : ggc_ptr_hash<constexpr_call>\n@@ -1055,6 +1057,8 @@ constexpr_call_hasher::equal (constexpr_call *lhs, constexpr_call *rhs)\n     return true;\n   if (lhs->hash != rhs->hash)\n     return false;\n+  if (lhs->pretend_const_required != rhs->pretend_const_required)\n+    return false;\n   if (!constexpr_fundef_hasher::equal (lhs->fundef, rhs->fundef))\n     return false;\n   lhs_bindings = lhs->bindings;\n@@ -1503,7 +1507,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n {\n   location_t loc = cp_expr_loc_or_loc (t, input_location);\n   tree fun = get_function_named_in_call (t);\n-  constexpr_call new_call = { NULL, NULL, NULL, 0 };\n+  constexpr_call new_call\n+    = { NULL, NULL, NULL, 0, ctx->pretend_const_required };\n   bool depth_ok;\n \n   if (fun == NULL_TREE)\n@@ -1675,8 +1680,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   constexpr_call *entry = NULL;\n   if (depth_ok && !non_constant_args && ctx->strict)\n     {\n-      new_call.hash = iterative_hash_template_arg\n-\t(new_call.bindings, constexpr_fundef_hasher::hash (new_call.fundef));\n+      new_call.hash = constexpr_fundef_hasher::hash (new_call.fundef);\n+      new_call.hash\n+\t= iterative_hash_template_arg (new_call.bindings, new_call.hash);\n+      new_call.hash\n+\t= iterative_hash_object (ctx->pretend_const_required, new_call.hash);\n \n       /* If we have seen this call before, we are done.  */\n       maybe_initialize_constexpr_call_table ();"}, {"sha": "aa11d0ecb2dbe81415c9f4eaa16271047f6ae956", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cce3ae91f21f185756f604f529501810d8025f37", "patch": "@@ -1,3 +1,12 @@\n+2018-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88449\n+\t* g++.dg/cpp2a/is-constant-evaluated1.C: Change from dg-do compile\n+\tto dg-do run.\n+\t(e): Adjust comment with correct expected value.\n+\t(main): Expect e == 1.\n+\t* g++.dg/cpp2a/is-constant-evaluated2.C: New test.\n+\n 2018-12-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88155"}, {"sha": "ead36c0efb116fc8c3bf4b177f1febb9a98795ff", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated1.C?ref=cce3ae91f21f185756f604f529501810d8025f37", "patch": "@@ -1,5 +1,5 @@\n // P0595R1\n-// { dg-do compile { target c++14 } }\n+// { dg-do run { target c++14 } }\n \n template<int N> struct X { int v = N; };\n X<__builtin_is_constant_evaluated ()> x; // type X<true>\n@@ -8,7 +8,7 @@ int a = __builtin_is_constant_evaluated () ? y : 1; // initializes a to 1\n int b = __builtin_is_constant_evaluated () ? 2 : y; // initializes b to 2\n int c = y + (__builtin_is_constant_evaluated () ? 2 : y); // initializes c to 2*y\n int d = __builtin_is_constant_evaluated (); // initializes d to 1\n-int e = d + __builtin_is_constant_evaluated (); // initializes e to 0\n+int e = d + __builtin_is_constant_evaluated (); // initializes e to 1 + 0\n \n struct false_type { static constexpr bool value = false; };\n struct true_type { static constexpr bool value = true; };\n@@ -50,7 +50,7 @@ static_assert (is_same<decltype (x), X<true> >::value, \"x's type\");\n int\n main ()\n {\n-  if (a != 1 || b != 2 || c != 8 || d != 1 || e != 0 || p != 26 || q != 56)\n+  if (a != 1 || b != 2 || c != 8 || d != 1 || e != 1 || p != 26 || q != 56)\n     __builtin_abort ();\n   if (s.a != 3 || s.b != 4 || t.a != 2 || t.b != 4)\n     __builtin_abort ();"}, {"sha": "a3b377de05331e6c0c72f98d2a25c09a1bf7af0b", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated2.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce3ae91f21f185756f604f529501810d8025f37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated2.C?ref=cce3ae91f21f185756f604f529501810d8025f37", "patch": "@@ -0,0 +1,72 @@\n+// P0595R1\n+// { dg-do run { target c++14 } }\n+\n+constexpr inline bool\n+is_constant_evaluated () noexcept\n+{\n+  return __builtin_is_constant_evaluated ();\n+}\n+\n+template<int N> struct X { int v = N; };\n+X<is_constant_evaluated ()> x; // type X<true>\n+int y = 4;\n+int a = is_constant_evaluated () ? y : 1; // initializes a to 1\n+int b = is_constant_evaluated () ? 2 : y; // initializes b to 2\n+int c = y + (is_constant_evaluated () ? 2 : y); // initializes c to 2*y\n+int d = is_constant_evaluated (); // initializes d to 1\n+int e = d + is_constant_evaluated (); // initializes e to 1 + 0\n+\n+struct false_type { static constexpr bool value = false; };\n+struct true_type { static constexpr bool value = true; };\n+template<class T, class U>\n+struct is_same : false_type {};\n+template<class T>\n+struct is_same<T, T> : true_type {};\n+\n+constexpr int\n+foo (int x)\n+{\n+  const int n = is_constant_evaluated () ? 13 : 17; // n == 13\n+  int m = is_constant_evaluated () ? 13 : 17; // m might be 13 or 17 (see below)\n+  char arr[n] = {}; // char[13]\n+  return m + sizeof (arr) + x;\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  const int n = is_constant_evaluated() ? 13 : 17;\n+  X<n> x1;\n+  X<is_constant_evaluated() ? 13 : 17> x2;\n+  static_assert (is_same<decltype (x1), decltype (x2)>::value, \"x1/x2's type\");\n+  return x1.v + x2.v;\n+}\n+\n+int p = foo (0); // m == 13; initialized to 26\n+int q = p + foo (0); // m == 17 for this call; initialized to 56\n+static_assert (bar () == 26, \"bar\");\n+\n+struct S { int a, b; };\n+\n+S s = { is_constant_evaluated () ? 2 : 3, y };\n+S t = { is_constant_evaluated () ? 2 : 3, 4 };\n+\n+static_assert (is_same<decltype (x), X<true> >::value, \"x's type\");\n+\n+int\n+main ()\n+{\n+  if (a != 1 || b != 2 || c != 8 || d != 1 || e != 1 || p != 26 || q != 56)\n+    __builtin_abort ();\n+  if (s.a != 3 || s.b != 4 || t.a != 2 || t.b != 4)\n+    __builtin_abort ();\n+  if (foo (y) != 34)\n+    __builtin_abort ();\n+#if __cplusplus >= 201703L\n+  if constexpr (foo (0) != 26)\n+    __builtin_abort ();\n+#endif\n+  constexpr int w = foo (0);\n+  if (w != 26)\n+    __builtin_abort ();\n+}"}]}