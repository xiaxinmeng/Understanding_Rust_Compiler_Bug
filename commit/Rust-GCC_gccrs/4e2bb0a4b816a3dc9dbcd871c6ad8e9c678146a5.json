{"sha": "4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyYmIwYTRiODE2YTNkYzlkYmNkODcxYzZhZDhlOWM2NzgxNDZhNQ==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2006-06-23T08:25:33Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2006-06-23T08:25:33Z"}, "message": "re PR target/27789 (attribute handling fallout from DECL_INITIAL changes)\n\n\tPR target/27789\n\t* config/i386/winnt.c (ix86_handle_selectany_attribute): Move check\n\tfor initialization and setting of one_only flag to ...\n\t(i386_pe_encode_section_info): ...here.\n\t(i386_pe_dllimport_p): Check for DECL_DLLIMPORT_P also.\n\tRecheck that the symbol has not been defined.\n\ncp\n\t* decl.c (start_decl): Check that dllimports are not initialized.\n\ntestsuite\n\t* g++.dg/ext/dllimport4.C. Add more tests for invalid\n\tinitialization.\n\nFrom-SVN: r114927", "tree": {"sha": "708dd600878c8dfe4cd831930197553a97ae4c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708dd600878c8dfe4cd831930197553a97ae4c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/comments", "author": null, "committer": null, "parents": [{"sha": "ecf7b86fb84c46a26473a1f9ad148e69189e6db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf7b86fb84c46a26473a1f9ad148e69189e6db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf7b86fb84c46a26473a1f9ad148e69189e6db4"}], "stats": {"total": 122, "additions": 102, "deletions": 20}, "files": [{"sha": "28eda6eb3464b9ed82a1e792f5acbc4f7fcbe031", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -1,3 +1,12 @@\n+2006-06-23  Danny Smith   <dannysmith@users.sourceforge.net>\n+\n+\tPR target/27789\n+\t* config/i386/winnt.c (ix86_handle_selectany_attribute): Move check\n+\tfor initialization and setting of one_only flag to ...\n+\t(i386_pe_encode_section_info): ...here.\n+\t(i386_pe_dllimport_p): Check for DECL_DLLIMPORT_P also.\n+\tRecheck that the symbol has not been defined.\n+\n 2006-06-23  Richard Guenther  <rguenther@suse.de>\n \n \t* ggc-page.c (init_ggc): Do not round up the extra_order_size_table\n@@ -26,6 +35,7 @@\n \t* reload1.c (gen_reload): Call mark_jump_label on the new insns\n \tgenerated by gen_move_insn to add REG_LABEL notes if necessary.\n \n+>>>>>>> .r114926\n 2006-06-22  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/lib1funcs.asm (MIN_ESA): Delete."}, {"sha": "a46fc5b2b0218e414dd0fbad911a24f0e1daac85", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines for insn-output.c for Windows NT.\n    Contributed by Douglas Rupp (drupp@cs.washington.edu)\n-   Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+   2005, 2006  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -88,17 +88,10 @@ ix86_handle_selectany_attribute (tree *node, tree name,\n \t\t\t\t bool *no_add_attrs)\n {\n   /* The attribute applies only to objects that are initialized and have\n-     external linkage,  */\t\n-  if (TREE_CODE (*node) == VAR_DECL && TREE_PUBLIC (*node)\n-      && (DECL_INITIAL (*node)\n-          /* If an object is initialized with a ctor, the static\n-\t     initialization and destruction code for it is present in\n-\t     each unit defining the object.  The code that calls the\n-\t     ctor is protected by a link-once guard variable, so that\n-\t     the object still has link-once semantics,  */\n-    \t  || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (*node))))\n-    make_decl_one_only (*node);\n-  else\n+     external linkage.  However, we may not know about initialization\n+     until the language frontend has processed the decl. We'll check for\n+     initialization later in encode_section_info.  */\t\n+  if (TREE_CODE (*node) != VAR_DECL || !TREE_PUBLIC (*node))\n     {\t\n       error (\"%qs attribute applies only to initialized variables\"\n        \t     \" with external linkage\",  IDENTIFIER_POINTER (name));\n@@ -148,18 +141,28 @@ i386_pe_dllimport_p (tree decl)\n        && TREE_CODE (decl) != FUNCTION_DECL)\n     return false;\n \n-  /* Lookup the attribute rather than rely on the DECL_DLLIMPORT_P flag.\n+  /* Lookup the attribute in addition to checking the DECL_DLLIMPORT_P flag.\n      We may need to override an earlier decision.  */\n-  if (lookup_attribute (\"dllimport\", DECL_ATTRIBUTES (decl)))\n-    return true;\n-\n+  if (DECL_DLLIMPORT_P (decl)\n+      && lookup_attribute (\"dllimport\", DECL_ATTRIBUTES (decl)))\n+    {\n+       /* Make a final check to see if this is a definition before we generate\n+          RTL for an indirect reference.  */   \n+       if (!DECL_EXTERNAL (decl))\n+\t{\n+\t  error (\"%q+D: definition is marked as dllimport\", decl);\n+\t  DECL_DLLIMPORT_P (decl) = 0;\n+          return false;\n+        }\n+      return true;\n+    }\n   /* The DECL_DLLIMPORT_P flag was set for decls in the class definition\n      by  targetm.cxx.adjust_class_at_definition.  Check again to emit\n      warnings if the class attribute has been overridden by an\n      out-of-class definition.  */\n-  if (associated_type (decl)\n-      && lookup_attribute (\"dllimport\",\n-\t\t\t    TYPE_ATTRIBUTES (associated_type (decl))))\n+  else if (associated_type (decl)\n+           && lookup_attribute (\"dllimport\",\n+\t\t\t\tTYPE_ATTRIBUTES (associated_type (decl))))\n     return i386_pe_type_dllimport_p (decl);\n \n   return false;\n@@ -362,6 +365,22 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n \t}\n     }\n \n+  else if (TREE_CODE (decl) == VAR_DECL\n+           && lookup_attribute (\"selectany\", DECL_ATTRIBUTES (decl)))\n+    {\n+      if (DECL_INITIAL (decl)\n+ \t  /* If an object is initialized with a ctor, the static\n+\t     initialization and destruction code for it is present in\n+\t     each unit defining the object.  The code that calls the\n+\t     ctor is protected by a link-once guard variable, so that\n+\t     the object still has link-once semantics,  */\n+    \t   || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl)))\n+\tmake_decl_one_only (decl);\n+      else\n+\terror (\"%q+D:'selectany' attribute applies only to initialized objects\",\n+\t       decl);\n+    }\n+\n   /* Mark the decl so we can tell from the rtl whether the object is\n      dllexport'd or dllimport'd.  tree.c: merge_dllimport_decl_attributes\n      handles dllexport/dllimport override semantics.  */"}, {"sha": "30c66d30b5a55cb272caba6f40b92b088f244119", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -1,3 +1,8 @@\n+2006-06-23  Danny Smith   <dannysmith@users.sourceforge.net>\n+\n+\tPR target/27789\n+\t* decl.c (start_decl): Check that dllimports are not initialized.\n+\n 2006-06-22  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/27805"}, {"sha": "e3c929764fbdc1aef7898bdc2ebe306b9f615f15", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -3873,6 +3873,16 @@ start_decl (const cp_declarator *declarator,\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   cplus_decl_attributes (&decl, attributes, 0);\n \n+  /* Dllimported symbols cannot be defined.  Static data members (which\n+     can be initialized in-class and dllimported) go through grokfield,\n+     not here, so we don't need to exclude those decls when checking for\n+     a definition.  */\n+  if (initialized && DECL_DLLIMPORT_P (decl))\n+    {\n+      error (\"definition of %q#D is marked %<dllimport%>\", decl);\n+      DECL_DLLIMPORT_P (decl) = 0;\n+    }\n+\n   /* If #pragma weak was used, mark the decl weak now.  */\n   maybe_apply_pragma_weak (decl);\n "}, {"sha": "b9204ecb7268f6511e1b544ccbcd74cc8c2ad4df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -1,3 +1,9 @@\n+2006-06-23  Danny Smith   <dannysmith@users.sourceforge.net>\n+\n+\tPR target/27789\n+\t* g++.dg/ext/dllimport4.C. Add more tests for invalid\n+\tinitialization.\n+\n 2006-06-22  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/27531"}, {"sha": "2baa944b10804b989d044fbb6e7d2d1ebfd5c9f1", "filename": "gcc/testsuite/g++.dg/ext/dllimport4.C", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C?ref=4e2bb0a4b816a3dc9dbcd871c6ad8e9c678146a5", "patch": "@@ -4,3 +4,35 @@\n __attribute__((dllimport))  void bar () { }\t// { dg-error \"definition\" }\n \n __attribute__((dllimport))  int foo = 1;\t// { dg-error \"definition\" }\n+\n+void faz()\n+{\n+  __attribute__((dllimport)) int faa = 1;\t// { dg-error \"definition\" }\n+  faa++; \n+}\n+\n+__attribute__((dllimport)) int fee (1);\t\t// { dg-error \"definition\" }\n+\n+\n+// In-class initialization of a static data member is not a definition.  \n+struct  F\n+{\n+  __attribute__ ((dllimport)) static const int i = 1;  // OK\n+};\n+\n+// Reference the dllimport'd static data member.\n+void f ()\n+{\n+  const int* j = &F::i;\n+}\n+\n+struct  G\n+{\n+  __attribute__ ((dllimport)) static const int i = 1;\n+};\n+\n+// Define the static data member _without_ the dllimport.\n+// This should override the prior declaration with dllimport.\n+\n+const int G::i;\t\t//  { dg-warning \"dllimport ignored\" }\n+"}]}