{"sha": "26b84487c706cac8160048f5875f6a0e162a1095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiODQ0ODdjNzA2Y2FjODE2MDA0OGY1ODc1ZjZhMGUxNjJhMTA5NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-04-21T20:58:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T20:58:05Z"}, "message": "fold-const.c (extract_muldiv, [...]): Detect case when conversion overflows.\n\n\t* fold-const.c (extract_muldiv, case CONVERT_EXPR): Detect case\n\twhen conversion overflows.\n\nFrom-SVN: r65900", "tree": {"sha": "b5d1e352f5810d0e19651682c96a3da77f186d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d1e352f5810d0e19651682c96a3da77f186d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b84487c706cac8160048f5875f6a0e162a1095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b84487c706cac8160048f5875f6a0e162a1095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b84487c706cac8160048f5875f6a0e162a1095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b84487c706cac8160048f5875f6a0e162a1095/comments", "author": null, "committer": null, "parents": [{"sha": "1a96dc4634533d7691e4d369658b8c9cfc473a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a96dc4634533d7691e4d369658b8c9cfc473a2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a96dc4634533d7691e4d369658b8c9cfc473a2a"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "b27996f50e1f5bcff8e3999e47523d6904866452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b84487c706cac8160048f5875f6a0e162a1095/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b84487c706cac8160048f5875f6a0e162a1095/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26b84487c706cac8160048f5875f6a0e162a1095", "patch": "@@ -56,6 +56,9 @@\n \n 2003-04-21  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* fold-const.c (extract_muldiv, case CONVERT_EXPR): Detect case\n+\twhen conversion overflows.\n+\n \t* stor-layout.c (layout_decl): Don't set DECL_SIZE_UNIT if already set.\n \n \t* expr.c (store_constructor): Set RTX_UNCHANGING_P if readonly_field_p"}, {"sha": "146f40f97ac820b0f295b2a71556690673446c1f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b84487c706cac8160048f5875f6a0e162a1095/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b84487c706cac8160048f5875f6a0e162a1095/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=26b84487c706cac8160048f5875f6a0e162a1095", "patch": "@@ -4182,8 +4182,12 @@ extract_muldiv_1 (t, c, code, wide_type)\n       /* Pass the constant down and see if we can make a simplification.  If\n \t we can, replace this expression with the inner simplification for\n \t possible later conversion to our or some other type.  */\n-      if (0 != (t1 = extract_muldiv (op0, convert (TREE_TYPE (op0), c), code,\n-\t\t\t\t     code == MULT_EXPR ? ctype : NULL_TREE)))\n+      if ((t2 = convert (TREE_TYPE (op0), c)) != 0\n+\t  && TREE_CODE (t2) == INTEGER_CST\n+\t  && ! TREE_CONSTANT_OVERFLOW (t2)\n+\t  && (0 != (t1 = extract_muldiv (op0, t2, code,\n+\t\t\t\t\t code == MULT_EXPR\n+\t\t\t\t\t ? ctype : NULL_TREE))))\n \treturn t1;\n       break;\n \n@@ -5478,13 +5482,17 @@ fold (expr)\n \t      if (TREE_CODE (parg0) == MULT_EXPR\n \t\t  && TREE_CODE (parg1) != MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, parg0, marg)),\n-\t\t\t\t    parg1));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, \n+\t\t\t\t\t\t convert (type, parg0), \n+\t\t\t\t\t\t convert (type, marg))),\n+\t\t\t\t    convert (type, parg1)));\n \t      if (TREE_CODE (parg0) != MULT_EXPR\n \t\t  && TREE_CODE (parg1) == MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, parg1, marg)),\n-\t\t\t\t    parg0));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, \n+\t\t\t\t\t\t convert (type, parg1), \n+\t\t\t\t\t\t convert (type, marg))),\n+\t\t\t\t    convert (type, parg0)));\n \t    }\n \n \t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR)\n@@ -5816,7 +5824,8 @@ fold (expr)\n \t\t\t\tTREE_OPERAND (arg0, 1)));\n \n \t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,\n+\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0),\n+\t\t\t\t\t     convert (type, arg1),\n \t\t\t\t\t     code, NULL_TREE)))\n \t    return convert (type, tem);\n "}]}