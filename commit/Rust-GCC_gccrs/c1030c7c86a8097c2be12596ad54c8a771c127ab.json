{"sha": "c1030c7c86a8097c2be12596ad54c8a771c127ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwMzBjN2M4NmE4MDk3YzJiZTEyNTk2YWQ1NGM4YTc3MWMxMjdhYg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-11T10:06:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-11T10:06:22Z"}, "message": "gcc.texi, [...]: Add new section discussing language standards...\n\n\t* gcc.texi, invoke.texi: Add new section discussing language\n\tstandards; link to it where appropriate; refer to ISO C instead of\n\tANSI C.\n\nFrom-SVN: r37383", "tree": {"sha": "a4243524d8c87801ea1deed84efd82748c14c149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4243524d8c87801ea1deed84efd82748c14c149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1030c7c86a8097c2be12596ad54c8a771c127ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030c7c86a8097c2be12596ad54c8a771c127ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1030c7c86a8097c2be12596ad54c8a771c127ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030c7c86a8097c2be12596ad54c8a771c127ab/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0babc59ad83dde7de15631c84b666afefd4c32a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0babc59ad83dde7de15631c84b666afefd4c32a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0babc59ad83dde7de15631c84b666afefd4c32a2"}], "stats": {"total": 317, "additions": 241, "deletions": 76}, "files": [{"sha": "69e314ddea8341c05e9dbc3b61adea46c1b539ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1030c7c86a8097c2be12596ad54c8a771c127ab", "patch": "@@ -1,3 +1,9 @@\n+2000-11-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.texi, invoke.texi: Add new section discussing language\n+\tstandards; link to it where appropriate; refer to ISO C instead of\n+\tANSI C.\n+\n 2000-11-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* builtins.c (std_expand_builtin_va_start): Take PARM_BOUNDARY"}, {"sha": "b466cbb622ab93a526baa8917f719baf68884607", "filename": "gcc/gcc.texi", "status": "modified", "additions": 199, "deletions": 46, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=c1030c7c86a8097c2be12596ad54c8a771c127ab", "patch": "@@ -210,6 +210,7 @@ bugs.  It corresponds to GCC version 2.97.\n @menu\n @ifset USING\n * G++ and GCC::     You can compile C or C++ programs.\n+* Standards::       Language standards supported by GCC.\n * Invoking GCC::    Command options supported by @samp{gcc}.\n * Installation::    How to configure, compile and install GCC.\n * C Extensions::    GNU extensions to the C language family.\n@@ -300,6 +301,157 @@ give you comprehensive C++ source-level editing capabilities\n @c a paragraph or two about it here, and move the index entry down when\n @c there is more to point to than the general mention in the 1st par.\n \n+@node Standards\n+@chapter Language Standards Supported by GCC\n+@cindex C standard\n+@cindex C standards\n+@cindex ANSI C standard\n+@cindex ANSI C\n+@cindex ANSI C89\n+@cindex C89\n+@cindex ANSI X3.159-1989\n+@cindex X3.159-1989\n+@cindex ISO C standard\n+@cindex ISO C\n+@cindex ISO C89\n+@cindex ISO C90\n+@cindex ISO/IEC 9899\n+@cindex ISO 9899\n+@cindex C90\n+@cindex ISO C94\n+@cindex C94\n+@cindex ISO C95\n+@cindex C95\n+@cindex ISO C99\n+@cindex C99\n+@cindex ISO C9X\n+@cindex C9X\n+@cindex Technical Corrigenda\n+@cindex TC1\n+@cindex Technical Corrigendum 1\n+@cindex TC2\n+@cindex Technical Corrigendum 2\n+@cindex AMD1\n+@cindex freestanding implementation\n+@cindex freestanding environment\n+@cindex hosted implementation\n+@cindex hosted environment\n+@findex __STDC_HOSTED__\n+\n+For each language compiled by GCC for which there is a standard, GCC\n+attempts to follow one or more versions of that standard, possibly\n+with some limitations.\n+\n+GCC supports three versions of the C standard, although support for\n+the most recent version is not yet complete.\n+\n+The original ANSI C standard (X3.159-1989) was ratified in 1989 and\n+published in 1990.  This standard was ratified as an ISO standard\n+(ISO/IEC 9899:1990) later in 1990.  There were no technical\n+differences between these publications, although the sections of the\n+ANSI standard were renumbered and became clauses in the ISO standard.\n+This standard, in both its forms, is commonly known as @dfn{C89}, or\n+occasionally as @dfn{C90}, from the dates of ratification.  The ANSI\n+standard, but not the ISO standard, also came with a Rationale\n+document.  To select this standard in GCC, use one of the options\n+@samp{-ansi}, @samp{-std=c89} or @samp{-std=iso9899:1990}; to obtain\n+all the diagnostics required by the standard, you should also specify\n+@samp{-pedantic} (or @samp{-pedantic-errors} if you want them to be\n+errors rather than warnings).  @xref{C Dialect Options,,Options\n+Controlling C Dialect}.\n+\n+Errors in the 1990 ISO C standard were corrected in two Technical\n+Corrigenda published in 1994 and 1996.  GCC does not support the\n+uncorrected version.\n+\n+An amendment to the 1990 standard was published in 1995.  This\n+amendment added digraphs and @code{__STDC_VERSION__} to the language,\n+but otherwise concerned the library.  This amendment is commonly known\n+as @dfn{AMD1}; the amended standard is sometimes known as @dfn{C94} or\n+@dfn{C95}.  To select this standard in GCC, use the option\n+@samp{-std=iso9899:199409} (with, as for other standard versions,\n+@samp{-pedantic} to receive all required diagnostics).\n+\n+A new edition of the ISO C standard was published in 1999 as ISO/IEC\n+9899:1999, and is commonly known as @dfn{C99}.  GCC has incomplete\n+support for this standard version; see\n+@uref{http://gcc.gnu.org/c99status.html} for details.  To select this\n+standard, use @samp{-std=c99} or @samp{-std=iso9899:1999}.  (While in\n+development, drafts of this standard version were referred to as\n+@dfn{C9X}.)\n+\n+GCC also has some limited support for traditional (pre-ISO) C with the\n+@samp{-traditional} option.  This support may be of use for compiling\n+some very old programs that have not been updated to ISO C, but should\n+not be used for new programs.  It will not work with some modern C\n+libraries such as the GNU C library.\n+\n+By default, GCC provides some extensions to the C language that on\n+rare occasions conflict with the C standard.  @xref{C\n+Extensions,,Extensions to the C Language Family}.  Use of the\n+@samp{-std} options listed above will disable these extensions where\n+they conflict with the C standard version selected.  You may also\n+select an extended version of the C language explicitly with\n+@samp{-std=gnu89} (for C89 with GNU extensions) or @samp{-std=gnu99}\n+(for C99 with GNU extensions).  The default, if no C language dialect\n+options are given, is @samp{-std=gnu89}; this will change to\n+@samp{-std=gnu99} in some future release when the C99 support is\n+complete.  Some features that are part of the C99 standard are\n+accepted as extensions in C89 mode.\n+\n+The ISO C standard defines (in clause 4) two classes of conforming\n+implementation.  A @dfn{conforming hosted implementation} supports the\n+whole standard including all the library facilities; a @dfn{conforming\n+freestanding implementation} is only required to provide certain\n+library facilities: those in @code{<float.h>}, @code{<limits.h>},\n+@code{<stdarg.h>}, and @code{<stddef.h>}; since AMD1, also those in\n+@code{<iso646.h>}; and in C99, also those in @code{<stdbool.h>} and\n+@code{<stdint.h>}.  In addition, complex types, added in C99, are not\n+required for freestanding implementations.  The standard also defines\n+two environments for programs, a @dfn{freestanding environment},\n+required of all implementations and which may not have library\n+facilities beyond those required of freestanding implementations,\n+where the handling of program startup and termination are\n+implementation-defined, and a @dfn{hosted environment}, which is not\n+required, in which all the library facilities are provided and startup\n+is through a function @code{int main (void)} or @code{int main (int,\n+char *[])}.  An OS kernel would be a freestanding environment; a\n+program using the facilities of an operating system would normally be\n+in a hosted implementation.\n+\n+GNU CC aims towards being usable as a conforming freestanding\n+implementation, or as the compiler for a conforming hosted\n+implementation.  By default, it will act as the compiler for a hosted\n+implementation, defining @code{__STDC_HOSTED__} as @code{1} and\n+presuming that when the names of ISO C functions are used, they have\n+the semantics defined in the standard.  To make it act as a conforming\n+freestanding implementation for a freestanding environment, use the\n+option @samp{-ffreestanding}; it will then define\n+@code{__STDC_HOSTED__} to @code{0} and not make assumptions about the\n+meanings of function names from the standard library.  To build an OS\n+kernel, you may well still need to make your own arrangements for\n+linking and startup.  @xref{C Dialect Options,,Options Controlling C\n+Dialect}.\n+\n+GNU CC does not provide the library facilities required only of hosted\n+implementations, nor yet all the facilities required by C99 of\n+freestanding implementations; to use the facilities of a hosted\n+environment, you will need to find them elsewhere (for example, in the\n+GNU C library).  @xref{Standard Libraries,,Standard Libraries}.\n+\n+For references to Technical Corrigenda, Rationale documents and\n+information concerning the history of C that is available online, see\n+@uref{http://gcc.gnu.org/readings.html}\n+\n+@c FIXME: details of C++ standard.\n+@c FIXME: definitions of Java and Objective C.\n+\n+@xref{Language,,The GNU Fortran Language, g77, Using and Porting GNU\n+Fortran}, for details of the Fortran language supported by GCC.\n+\n+@xref{References,,Language Definition References, chill, GNU Chill},\n+for details of the CHILL standard.\n+\n @include invoke.texi\n \n @include install.texi\n@@ -333,7 +485,7 @@ where people's opinions differ as to what is best.\n * Fixed Headers::       GNU C uses corrected versions of system header files.\n                            This is necessary, but doesn't always work smoothly.\n * Standard Libraries::  GNU C uses the system C library, which might not be\n-                           compliant with the ISO/ANSI C standard.\n+                           compliant with the ISO C standard.\n * Disappointments::     Regrettable things we can't change, but not quite bugs.\n * C++ Misunderstandings::     Common misunderstandings with GNU C++.\n * Protoize Caveats::    Things to watch out for when using @code{protoize}.\n@@ -1039,7 +1191,7 @@ static int foo;\n will cause the linker to report an undefined symbol @code{foo}.\n Although this behavior differs from most other systems, it is not a\n bug because redefining an @code{extern} variable as @code{static}\n-is undefined in ANSI C.\n+is undefined in ISO C.\n \n @item\n AIX on the RS/6000 provides support (NLS) for environments outside of\n@@ -1165,7 +1317,7 @@ Parse errors may occur compiling X11 on a Decstation running Ultrix 4.2\n because of problems in DEC's versions of the X11 header files\n @file{X11/Xlib.h} and @file{X11/Xutil.h}.  People recommend adding\n @samp{-I/usr/include/mit} to use the MIT versions of the header files,\n-using the @samp{-traditional} switch to turn off ANSI C, or fixing the\n+using the @samp{-traditional} switch to turn off ISO C, or fixing the\n header files by adding this:\n \n @example\n@@ -1205,7 +1357,7 @@ MALLOC=gmalloc.o\n @cindex incompatibilities of GCC\n \n There are several noteworthy incompatibilities between GNU C and K&R \n-(non-ANSI) versions of C.  The @samp{-traditional} option\n+(non-ISO) versions of C.  The @samp{-traditional} option\n eliminates many of these incompatibilities, @emph{but not all}, by\n telling GNU C to behave like a K&R C compiler.\n \n@@ -1242,7 +1394,7 @@ to handle string constants the same way most C compilers do.\n @code{-2147483648} is positive.\n \n This is because 2147483648 cannot fit in the type @code{int}, so\n-(following the ANSI C rules) its data type is @code{unsigned long int}.\n+(following the ISO C rules) its data type is @code{unsigned long int}.\n Negating this value yields 2147483648 again.\n \n @item\n@@ -1257,7 +1409,7 @@ string constants.  For example, the following macro in GCC\n will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n \n The @samp{-traditional} option directs GCC to handle such cases\n-(among others) in the old-fashioned (non-ANSI) fashion.\n+(among others) in the old-fashioned (non-ISO) fashion.\n \n @cindex @code{setjmp} incompatibilities\n @cindex @code{longjmp} incompatibilities\n@@ -1308,7 +1460,7 @@ foobar (\n         hack)\n @end example\n \n-ANSI C does not permit such a construct.  It would make sense to support\n+ISO C does not permit such a construct.  It would make sense to support\n it when @samp{-traditional} is used, but it is too much work to\n implement.\n \n@@ -1340,7 +1492,7 @@ typedef int foo;\n typedef long foo bar;\n @end example\n \n-In ANSI C, this is not allowed: @code{long} and other type modifiers\n+In ISO C, this is not allowed: @code{long} and other type modifiers\n require an explicit @code{int}.  Because this criterion is expressed\n by Bison grammar rules rather than C code, the @samp{-traditional}\n flag cannot alter it.\n@@ -1370,7 +1522,7 @@ counts as a letter.'', but GCC also allows dollar signs in identifiers.\n @cindex whitespace\n @item\n PCC allows whitespace in the middle of compound assignment operators\n-such as @samp{+=}.  GCC, following the ANSI standard, does not\n+such as @samp{+=}.  GCC, following the ISO standard, does not\n allow this.  The difficulty described immediately above applies here\n too.\n \n@@ -1397,7 +1549,7 @@ C comment delimited by @samp{/*@dots{}*/}.  However,\n Many user programs contain the declaration @samp{long time ();}.  In the\n past, the system header files on many systems did not actually declare\n @code{time}, so it did not matter what type your program declared it to\n-return.  But in systems with ANSI C headers, @code{time} is declared to\n+return.  But in systems with ISO C headers, @code{time} is declared to\n return @code{time_t}, and if that is not the same as @code{long}, then\n @samp{long time ();} is erroneous.\n \n@@ -1451,7 +1603,7 @@ which appear to be two hexadecimal constants separated by the minus\n operator.  Actually, this string is a single @dfn{preprocessing token}.\n Each such token must correspond to one token in C.  Since this does not,\n GNU C prints an error message.  Although it may appear obvious that what\n-is meant is an operator and two values, the ANSI C standard specifically\n+is meant is an operator and two values, the ISO C standard specifically\n requires that this be treated as erroneous.\n \n A @dfn{preprocessing token} is a @dfn{preprocessing number} if it\n@@ -1469,7 +1621,7 @@ the minus sign.  This whitespace will end the preprocessing number.\n GCC needs to install corrected versions of some system header files.\n This is because most target systems have some header files that won't\n work with GCC unless they are changed.  Some have bugs, some are\n-incompatible with ANSI C, and some depend on special features of other\n+incompatible with ISO C, and some depend on special features of other\n compilers.\n \n Installing GCC automatically creates and installs the fixed header\n@@ -1516,14 +1668,13 @@ does mean that there's nothing for us to do about them.\n @node Standard Libraries\n @section Standard Libraries\n \n-GCC by itself attempts to be what the ISO/ANSI C standard calls a\n-@dfn{conforming freestanding implementation}.  This means all ANSI\n-C language features are available, as well as the contents of\n-@file{float.h}, @file{limits.h}, @file{stdarg.h}, and\n-@file{stddef.h}.  The rest of the C library is supplied by the\n-vendor of the operating system.  If that C library doesn't conform to\n-the C standards, then your programs might get warnings (especially when\n-using @samp{-Wall}) that you don't expect.\n+GCC by itself attempts to be a conforming freestanding implementation.\n+@xref{Standards,,Language Standards Supported by GCC}, for details of\n+what this means.  Beyond the library facilities required of such an\n+implementation, the rest of the C library is supplied by the vendor of\n+the operating system.  If that C library doesn't conform to the C\n+standards, then your programs might get warnings (especially when using\n+@samp{-Wall}) that you don't expect.\n \n For example, the @code{sprintf} function on SunOS 4.1.3 returns\n @code{char *} while the C standard says that @code{sprintf} returns an\n@@ -1533,9 +1684,11 @@ function will still return @code{char *}.\n \n If you need a Standard compliant library, then you need to find one, as\n GCC does not provide one.  The GNU C library (called @code{glibc})\n-has been ported to a number of operating systems, and provides ANSI/ISO,\n-POSIX, BSD and SystemV compatibility.  You could also ask your operating\n-system vendor if newer libraries are available.\n+provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for\n+GNU/Linux and HURD-based GNU systems; no recent version of it supports\n+other systems, though some very old versions did.  Version 2.2 of the\n+GNU C library includes nearly complete C99 support.  You could also ask\n+your operating system vendor if newer libraries are available.\n \n @node Disappointments\n @section Disappointments and Misunderstandings\n@@ -1582,10 +1735,10 @@ But in the definition of @code{foo}, the file-scope type is used\n because that is available to be inherited.  Thus, the definition and\n the prototype do not match, and you get an error.\n \n-This behavior may seem silly, but it's what the ANSI standard specifies.\n+This behavior may seem silly, but it's what the ISO standard specifies.\n It is easy enough for you to make your code work by moving the\n definition of @code{struct mumble} above the prototype.  It's not worth\n-being incompatible with ANSI C just to avoid an error for the example\n+being incompatible with ISO C just to avoid an error for the example\n shown above.\n \n @item\n@@ -1631,13 +1784,13 @@ reason for this is that in the absence of a prototype in scope,\n if the first argument is a floating point, it is passed in a\n floating point register, rather than an integer register.\n \n-If the code is rewritten to use the ANSI standard @file{stdarg.h}\n+If the code is rewritten to use the ISO standard @file{stdarg.h}\n method of variable arguments, and the prototype is in scope at\n the time of the call, everything will work fine.\n \n @item\n On the H8/300 and H8/300H, variable argument functions must be\n-implemented using the ANSI standard @file{stdarg.h} method of\n+implemented using the ISO standard @file{stdarg.h} method of\n variable arguments.  Furthermore, calls to functions using @file{stdarg.h}\n variable arguments must have a prototype for the called function\n in scope at the time of the call.\n@@ -1829,7 +1982,7 @@ For example, it can't determine argument types for declaring a\n pointer-to-function variable; this you must do by hand.  @code{protoize}\n inserts a comment containing @samp{???} each time it finds such a\n variable; so you can find all such variables by searching for this\n-string.  ANSI C does not require declaring the argument types of\n+string.  ISO C does not require declaring the argument types of\n pointer-to-function types.\n \n @item\n@@ -1951,7 +2104,7 @@ you can specify a field width explicitly.\n Making bitfields unsigned by default on particular machines where ``the\n ABI standard'' says to do so.\n \n-The ANSI C standard leaves it up to the implementation whether a bitfield\n+The ISO C standard leaves it up to the implementation whether a bitfield\n declared plain @code{int} is signed or not.  This in effect creates two\n alternative dialects of C.\n \n@@ -2010,25 +2163,25 @@ Currently, GCC defines @code{__STDC__} as long as you don't use\n @samp{-traditional}.  This provides good results in practice.\n \n Programmers normally use conditionals on @code{__STDC__} to ask whether\n-it is safe to use certain features of ANSI C, such as function\n-prototypes or ANSI token concatenation.  Since plain @samp{gcc} supports\n-all the features of ANSI C, the correct answer to these questions is\n+it is safe to use certain features of ISO C, such as function\n+prototypes or ISO token concatenation.  Since plain @samp{gcc} supports\n+all the features of ISO C, the correct answer to these questions is\n ``yes''.\n \n Some users try to use @code{__STDC__} to check for the availability of\n-certain library facilities.  This is actually incorrect usage in an ANSI\n-C program, because the ANSI C standard says that a conforming\n+certain library facilities.  This is actually incorrect usage in an ISO\n+C program, because the ISO C standard says that a conforming\n freestanding implementation should define @code{__STDC__} even though it\n does not have the library facilities.  @samp{gcc -ansi -pedantic} is a\n conforming freestanding implementation, and it is therefore required to\n-define @code{__STDC__}, even though it does not come with an ANSI C\n+define @code{__STDC__}, even though it does not come with an ISO C\n library.\n \n Sometimes people say that defining @code{__STDC__} in a compiler that\n-does not completely conform to the ANSI C standard somehow violates the\n+does not completely conform to the ISO C standard somehow violates the\n standard.  This is illogical.  The standard is a standard for compilers\n-that claim to support ANSI C, such as @samp{gcc -ansi}---not for other\n-compilers such as plain @samp{gcc}.  Whatever the ANSI C standard says\n+that claim to support ISO C, such as @samp{gcc -ansi}---not for other\n+compilers such as plain @samp{gcc}.  Whatever the ISO C standard says\n is relevant to the design of plain @samp{gcc} without @samp{-ansi} only\n for pragmatic reasons, not as a requirement.\n \n@@ -2047,13 +2200,13 @@ Programs written to compile with C++-to-C translators get the\n value of @code{__STDC__} that goes with the C compiler that is\n subsequently used.  These programs must test @code{__STDC__}\n to determine what kind of C preprocessor that compiler uses:\n-whether they should concatenate tokens in the ANSI C fashion\n+whether they should concatenate tokens in the ISO C fashion\n or in the traditional fashion.\n \n These programs work properly with GNU C++ if @code{__STDC__} is defined.\n They would not work otherwise.\n \n-In addition, many header files are written to provide prototypes in ANSI\n+In addition, many header files are written to provide prototypes in ISO\n C but not in traditional C.  Many of these header files can work without\n change in C++ provided @code{__STDC__} is defined.  If @code{__STDC__}\n is not defined, they will all fail, and will all need to be changed to\n@@ -2099,7 +2252,7 @@ arguments @samp{2, 3}, or it might get @samp{3, 2}, or even @samp{2, 2}.\n @item\n Not allowing structures with volatile fields in registers.\n \n-Strictly speaking, there is no prohibition in the ANSI C standard\n+Strictly speaking, there is no prohibition in the ISO C standard\n against allowing structures with volatile fields in registers, but\n it does not seem to make any sense and is probably not what you wanted\n to do.  So the compiler will give an error message in this case.\n@@ -2156,7 +2309,7 @@ however, the C and C++ standards specify that certain extensions are\n forbidden, and a diagnostic @emph{must} be issued by a conforming\n compiler.  The @samp{-pedantic} option tells GCC to issue warnings in\n such cases; @samp{-pedantic-errors} says to make them errors instead.\n-This does not mean that @emph{all} non-ANSI constructs get warnings\n+This does not mean that @emph{all} non-ISO constructs get warnings\n or errors.\n \n @xref{Warning Options,,Options to Request or Suppress Warnings}, for\n@@ -2913,7 +3066,7 @@ Include directives of the form:\n @noindent\n are a common source of incompatibility between VAX-C and GCC.  VAX-C\n treats this much like a standard @code{#include <foobar.h>} directive.\n-That is incompatible with the ANSI C behavior implemented by GCC: to\n+That is incompatible with the ISO C behavior implemented by GCC: to\n expand the name @code{foobar} as a macro.  Macro expansion should\n eventually yield one of the two standard formats for @code{#include}:\n \n@@ -3054,7 +3207,7 @@ The array ``address'' may not be the address of actual storage.\n \n The fact that the symbol is an array may lead to warnings where the\n variable is used.  Insert type casts to avoid the warnings.  Here is an\n-example; it takes advantage of the ANSI C feature allowing macros that\n+example; it takes advantage of the ISO C feature allowing macros that\n expand to use the same name as the macro itself.\n \n @example\n@@ -3269,7 +3422,7 @@ stored in memory, and the address of the memory location is passed to\n the subroutine.\n \n @cindex @code{longjmp} and automatic variables\n-If you use @code{longjmp}, beware of automatic variables.  ANSI C says that\n+If you use @code{longjmp}, beware of automatic variables.  ISO C says that\n automatic variables that are not declared @code{volatile} have undefined\n values after a @code{longjmp}.  And this is all GCC promises to do,\n because it is very difficult to restore register variables correctly, and\n@@ -3934,7 +4087,7 @@ used in an expression.\n @findex MULTIBYTE_CHARS\n @item MULTIBYTE_CHARS\n Define this macro to enable support for multibyte characters in the\n-input to GCC.  This requires that the host system support the ANSI C\n+input to GCC.  This requires that the host system support the ISO C\n library functions for converting multibyte characters to wide\n characters.\n "}, {"sha": "8af115ce2fabfaf8ec851fdfb564b8ee3729588c", "filename": "gcc/invoke.texi", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1030c7c86a8097c2be12596ad54c8a771c127ab/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=c1030c7c86a8097c2be12596ad54c8a771c127ab", "patch": "@@ -695,36 +695,36 @@ from C, such as C++ and Objective C) that the compiler accepts:\n \n @table @code\n @cindex ANSI support\n+@cindex ISO support\n @item -ansi\n-In C mode, support all ANSI standard C programs.  In C++ mode,\n+In C mode, support all ISO C89 programs.  In C++ mode,\n remove GNU extensions that conflict with ISO C++.\n-@c shouldn't we be saying \"ISO\"?\n \n-This turns off certain features of GCC that are incompatible with ANSI\n+This turns off certain features of GCC that are incompatible with ISO\n C (when compiling C code), or of standard C++ (when compiling C++ code),\n such as the @code{asm} and @code{typeof} keywords, and\n predefined macros such as @code{unix} and @code{vax} that identify the\n type of system you are using.  It also enables the undesirable and\n-rarely used ANSI trigraph feature.  For the C compiler, \n+rarely used ISO trigraph feature.  For the C compiler, \n it disables recognition of C++ style @samp{//} comments as well as\n the @code{inline} keyword.\n \n The alternate keywords @code{__asm__}, @code{__extension__},\n @code{__inline__} and @code{__typeof__} continue to work despite\n-@samp{-ansi}.  You would not want to use them in an ANSI C program, of\n+@samp{-ansi}.  You would not want to use them in an ISO C program, of\n course, but it is useful to put them in header files that might be included\n in compilations done with @samp{-ansi}.  Alternate predefined macros\n such as @code{__unix__} and @code{__vax__} are also available, with or\n without @samp{-ansi}.\n \n-The @samp{-ansi} option does not cause non-ANSI programs to be\n+The @samp{-ansi} option does not cause non-ISO programs to be\n rejected gratuitously.  For that, @samp{-pedantic} is required in\n addition to @samp{-ansi}.  @xref{Warning Options}.\n \n The macro @code{__STRICT_ANSI__} is predefined when the @samp{-ansi}\n option is used.  Some header files may notice this macro and refrain\n from declaring certain functions or defining certain macros that the\n-ANSI standard doesn't call for; this is to avoid interfering with any\n+ISO standard doesn't call for; this is to avoid interfering with any\n programs that might use these names for other things.\n \n Functions which would normally be builtin but do not have semantics\n@@ -776,6 +776,9 @@ features of newer standards in so far as they do not conflict with\n previous C standards.  For example, you may use @code{__restrict__} even\n when -std=c99 is not specified.\n \n+@xref{Standards,,Language Standards Supported by GCC}, for details of\n+these standard versions.\n+\n @item -fno-asm\n Do not recognize @code{asm}, @code{inline} or @code{typeof} as a\n keyword, so that code can use these words as identifiers.  You can use\n@@ -820,8 +823,11 @@ is one in which the standard library may not exist, and program startup may\n not necessarily be at @code{main}.  The most obvious example is an OS kernel.\n This is equivalent to @samp{-fno-hosted}.\n \n+@xref{Standards,,Language Standards Supported by GCC}, for details of\n+freestanding and hosted environments.\n+\n @item -trigraphs\n-Support ANSI C trigraphs.  You don't want to know about this\n+Support ISO C trigraphs.  You don't want to know about this\n brain-damage.  The @samp{-ansi} option implies @samp{-trigraphs}.\n \n @cindex traditional C language\n@@ -853,7 +859,7 @@ to @code{unsigned int}.\n Out-of-range floating point literals are not an error.\n \n @item\n-Certain constructs which ANSI regards as a single invalid preprocessing\n+Certain constructs which ISO regards as a single invalid preprocessing\n number, such as @samp{0xe-0xd}, are treated as expressions instead.\n \n @item\n@@ -865,7 +871,7 @@ separately.  (This is the same as the effect of\n @cindex @code{longjmp} and automatic variables\n @item\n All automatic variables not declared @code{register} are preserved by\n-@code{longjmp}.  Ordinarily, GNU C follows ANSI C: automatic variables\n+@code{longjmp}.  Ordinarily, GNU C follows ISO C: automatic variables\n not declared @code{volatile} may be clobbered.\n \n @item\n@@ -883,8 +889,8 @@ if your program uses names that are normally GNU C builtin functions for\n other purposes of its own.\n \n You cannot use @samp{-traditional} if you include any header files that\n-rely on ANSI C features.  Some vendors are starting to ship systems with\n-ANSI C header files and you cannot use @samp{-traditional} on such\n+rely on ISO C features.  Some vendors are starting to ship systems with\n+ISO C header files and you cannot use @samp{-traditional} on such\n systems to compile files that include any system headers.\n \n The @samp{-traditional} option also enables @samp{-traditional-cpp},\n@@ -917,7 +923,7 @@ which @code{__GNUC__} indicates are not affected by\n @samp{-traditional}).  If you need to write header files that work\n differently depending on whether @samp{-traditional} is in use, by\n testing both of these predefined macros you can distinguish four\n-situations: GNU C, traditional GNU C, other ANSI C compilers, and other\n+situations: GNU C, traditional GNU C, other ISO C compilers, and other\n old C compilers.  The predefined macro @code{__STDC_VERSION__} is also\n not defined when you use @samp{-traditional}.  @xref{Standard\n Predefined,,Standard Predefined Macros,cpp.info,The C Preprocessor},\n@@ -965,8 +971,8 @@ if your program uses names that are normally GNU C builtin functions for\n other purposes of its own.\n \n You cannot use @samp{-traditional} if you include any header files that\n-rely on ANSI C features.  Some vendors are starting to ship systems with\n-ANSI C header files and you cannot use @samp{-traditional} on such\n+rely on ISO C features.  Some vendors are starting to ship systems with\n+ISO C header files and you cannot use @samp{-traditional} on such\n systems to compile files that include any system headers.\n \n @item -fsigned-bitfields\n@@ -1000,7 +1006,7 @@ architecture for which you are compiling, single precision may be faster\n than double precision.   If you must use @samp{-traditional}, but want\n to use single precision operations when the operands are single\n precision, use this option.   This option has no effect when compiling\n-with ANSI or GNU C conventions (the default).\n+with ISO or GNU C conventions (the default).\n \n @item -fshort-wchar\n Override the underlying type for @samp{wchar_t} to be @samp{short\n@@ -1062,7 +1068,7 @@ Accept @samp{$} in identifiers.  You can also explicitly prohibit use of\n @samp{$} with the option @samp{-fno-dollars-in-identifiers}.  (GNU C allows\n @samp{$} by default on most target systems, but there are a few exceptions.)\n Traditional C allowed the character @samp{$} to form part of\n-identifiers.  However, ANSI C and C++ forbid @samp{$} in identifiers.\n+identifiers.  However, ISO C and C++ forbid @samp{$} in identifiers.\n \n @item -fno-elide-constructors\n The C++ standard allows an implementation to omit creating a temporary\n@@ -1438,7 +1444,7 @@ these escape routes; application programs should avoid them.\n \n Some users try to use @samp{-pedantic} to check programs for strict ISO\n C conformance.  They soon find that it does not do quite what they want:\n-it finds some non-ANSI practices, but not all---only those for which\n+it finds some non-ISO practices, but not all---only those for which\n ISO C @emph{requires} a diagnostic, and some others for which\n diagnostics have been added.\n \n@@ -1841,13 +1847,13 @@ probably mistaken.\n \n @item -Wtraditional (C only)\n Warn about certain constructs that behave differently in traditional and\n-ANSI C.\n+ISO C.\n \n @itemize @bullet\n @item\n Macro arguments occurring within string constants in the macro body.\n These would substitute the argument in traditional C, but are part of\n-the constant in ANSI C.\n+the constant in ISO C.\n \n @item\n A function declared external in one block and then used after the end of\n@@ -1861,13 +1867,13 @@ A non-@code{static} function declaration follows a @code{static} one.\n This construct is not accepted by some traditional C compilers.\n \n @item\n-The ANSI type of an integer constant has a different width or\n+The ISO type of an integer constant has a different width or\n signedness from its traditional type.  This warning is only issued if\n the base of the constant is ten.  I.e. hexadecimal or octal values, which\n typically represent bit patterns, are not warned about.\n \n @item\n-Usage of ANSI string concatenation is detected.\n+Usage of ISO string concatenation is detected.\n \n @item\n A function macro appears without arguments.\n@@ -2703,15 +2709,15 @@ that alter the assembler output may be confused by the optimizations\n performed when this option is not used.\n \n @item -ffast-math\n-This option allows GCC to violate some ANSI or IEEE rules and/or\n+This option allows GCC to violate some ISO or IEEE rules and/or\n specifications in the interest of optimizing code for speed.  For\n example, it allows the compiler to assume arguments to the @code{sqrt}\n function are non-negative numbers and that no floating-point values\n are NaNs.\n \n This option should never be turned on by any @samp{-O} option since\n it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ANSI rules/specifications for\n+an exact implementation of IEEE or ISO rules/specifications for\n math functions.\n \n @item -fno-math-errno\n@@ -3179,7 +3185,7 @@ Like @samp{-dD} except that the macro arguments and contents are omitted.\n Only @samp{#define @var{name}} is included in the output.\n \n @item -trigraphs\n-Support ANSI C trigraphs.  The @samp{-ansi} option also has this effect.\n+Support ISO C trigraphs.  The @samp{-ansi} option also has this effect.\n \n @item -Wp,@var{option}\n Pass @var{option} as an option to the preprocessor.  If @var{option}\n@@ -3263,7 +3269,7 @@ Do not use the standard system libraries when linking.\n Only the libraries you specify will be passed to the linker.\n The standard startup files are used normally, unless @code{-nostartfiles}\n is used.  The compiler may generate calls to memcmp, memset, and memcpy\n-for System V (and ANSI C) environments or to bcopy and bzero for\n+for System V (and ISO C) environments or to bcopy and bzero for\n BSD environments.  These entries are usually resolved by entries in\n libc.  These entry points should be supplied through some other\n mechanism when this option is specified.\n@@ -3272,7 +3278,7 @@ mechanism when this option is specified.\n Do not use the standard system startup files or libraries when linking.\n No startup files and only the libraries you specify will be passed to\n the linker. The compiler may generate calls to memcmp, memset, and memcpy\n-for System V (and ANSI C) environments or to bcopy and bzero for\n+for System V (and ISO C) environments or to bcopy and bzero for\n BSD environments.  These entries are usually resolved by entries in\n libc.  These entry points should be supplied through some other\n mechanism when this option is specified.\n@@ -3655,7 +3661,7 @@ current target machine.  Use this when running @code{cpp}.\n @item %P\n Like @samp{%p}, but puts @samp{__} before and after the name of each\n predefined macro, except for macros that start with @samp{__} or with\n-@samp{_@var{L}}, where @var{L} is an uppercase letter.  This is for ANSI\n+@samp{_@var{L}}, where @var{L} is an uppercase letter.  This is for ISO\n C.  \n \n @item %I\n@@ -7870,7 +7876,7 @@ recognize and translate multibyte characters.\n @section Running Protoize\n \n The program @code{protoize} is an optional part of GNU C.  You can use\n-it to add prototypes to a program, thus converting the program to ANSI\n+it to add prototypes to a program, thus converting the program to ISO\n C in one respect.  The companion program @code{unprotoize} does the\n reverse: it removes argument types from any prototypes that are found.\n \n@@ -7905,7 +7911,7 @@ are called.\n \n Basic conversion with @code{unprotoize} consists of rewriting most\n function declarations to remove any argument types, and rewriting\n-function definitions to the old-style pre-ANSI form.\n+function definitions to the old-style pre-ISO form.\n \n Both conversion programs print a warning for any function declaration or\n definition that they can't convert.  You can suppress these warnings"}]}