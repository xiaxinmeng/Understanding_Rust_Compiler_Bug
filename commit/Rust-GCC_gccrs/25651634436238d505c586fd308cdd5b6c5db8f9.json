{"sha": "25651634436238d505c586fd308cdd5b6c5db8f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2NTE2MzQ0MzYyMzhkNTA1YzU4NmZkMzA4Y2RkNWI2YzVkYjhmOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-12T09:02:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-12T09:02:55Z"}, "message": "Use \"oacc kernels\" attribute for OpenACC kernels\n\n\tgcc/\n\t* omp-expand.c (expand_omp_target) <GF_OMP_TARGET_KIND_OACC_KERNELS>:\n\tSet \"oacc kernels\" attribute.\n\t* omp-general.c (oacc_set_fn_attrib): Remove is_kernel formal\n\tparameter.  Adjust all users.\n\t(oacc_fn_attrib_kernels_p): Remove function.\n\t* omp-offload.c (execute_oacc_device_lower): Look for \"oacc\n\tkernels\" attribute instead of calling oacc_fn_attrib_kernels_p.\n\t* tree-ssa-loop.c (gate_oacc_kernels): Likewise.\n\t* tree-parloops.c (create_parallel_loop): If oacc_kernels_p,\n\tassert \"oacc kernels\" attribute is set.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\nFrom-SVN: r247955", "tree": {"sha": "7fddfeb04f28bb8f5eb26dde13c784b149b14de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fddfeb04f28bb8f5eb26dde13c784b149b14de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25651634436238d505c586fd308cdd5b6c5db8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25651634436238d505c586fd308cdd5b6c5db8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25651634436238d505c586fd308cdd5b6c5db8f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25651634436238d505c586fd308cdd5b6c5db8f9/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee58b02f1160548513a3d00a04acbad93c423b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee58b02f1160548513a3d00a04acbad93c423b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee58b02f1160548513a3d00a04acbad93c423b3f"}], "stats": {"total": 138, "additions": 74, "deletions": 64}, "files": [{"sha": "aeb22dfd49af2cbab8440b811024278380acd08b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -1,3 +1,16 @@\n+2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-expand.c (expand_omp_target) <GF_OMP_TARGET_KIND_OACC_KERNELS>:\n+\tSet \"oacc kernels\" attribute.\n+\t* omp-general.c (oacc_set_fn_attrib): Remove is_kernel formal\n+\tparameter.  Adjust all users.\n+\t(oacc_fn_attrib_kernels_p): Remove function.\n+\t* omp-offload.c (execute_oacc_device_lower): Look for \"oacc\n+\tkernels\" attribute instead of calling oacc_fn_attrib_kernels_p.\n+\t* tree-ssa-loop.c (gate_oacc_kernels): Likewise.\n+\t* tree-parloops.c (create_parallel_loop): If oacc_kernels_p,\n+\tassert \"oacc kernels\" attribute is set.\n+\n 2017-05-11  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c: Add support for built-in functions"}, {"sha": "7a7c7475d3124277b693252ca7feea77774793b9", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -7083,7 +7083,16 @@ expand_omp_target (struct omp_region *region)\n   exit_bb = region->exit;\n \n   if (gimple_omp_target_kind (entry_stmt) == GF_OMP_TARGET_KIND_OACC_KERNELS)\n-    mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n+    {\n+      mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n+\n+      /* Further down, both OpenACC kernels and OpenACC parallel constructs\n+\t will be mappted to BUILT_IN_GOACC_PARALLEL, and to distinguish the\n+\t two, there is an \"oacc kernels\" attribute set for OpenACC kernels.  */\n+      DECL_ATTRIBUTES (child_fn)\n+\t= tree_cons (get_identifier (\"oacc kernels\"),\n+\t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n+    }\n \n   if (offloaded)\n     {\n@@ -7266,7 +7275,6 @@ expand_omp_target (struct omp_region *region)\n   enum built_in_function start_ix;\n   location_t clause_loc;\n   unsigned int flags_i = 0;\n-  bool oacc_kernels_p = false;\n \n   switch (gimple_omp_target_kind (entry_stmt))\n     {\n@@ -7287,8 +7295,6 @@ expand_omp_target (struct omp_region *region)\n       flags_i |= GOMP_TARGET_FLAG_EXIT_DATA;\n       break;\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n-      oacc_kernels_p = true;\n-      /* FALLTHROUGH */\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n       start_ix = BUILT_IN_GOACC_PARALLEL;\n       break;\n@@ -7450,10 +7456,8 @@ expand_omp_target (struct omp_region *region)\n \targs.quick_push (get_target_arguments (&gsi, entry_stmt));\n       break;\n     case BUILT_IN_GOACC_PARALLEL:\n-      {\n-\toacc_set_fn_attrib (child_fn, clauses, oacc_kernels_p, &args);\n-\ttagging = true;\n-      }\n+      oacc_set_fn_attrib (child_fn, clauses, &args);\n+      tagging = true;\n       /* FALLTHRU */\n     case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n     case BUILT_IN_GOACC_UPDATE:"}, {"sha": "9a5ed88e2d6adb5007ee01e5498df5856fdee3e2", "filename": "gcc/omp-general.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -515,11 +515,10 @@ oacc_replace_fn_attrib (tree fn, tree dims)\n \n /* Scan CLAUSES for launch dimensions and attach them to the oacc\n    function attribute.  Push any that are non-constant onto the ARGS\n-   list, along with an appropriate GOMP_LAUNCH_DIM tag.  IS_KERNEL is\n-   true, if these are for a kernels region offload function.  */\n+   list, along with an appropriate GOMP_LAUNCH_DIM tag.  */\n \n void\n-oacc_set_fn_attrib (tree fn, tree clauses, bool is_kernel, vec<tree> *args)\n+oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n {\n   /* Must match GOMP_DIM ordering.  */\n   static const omp_clause_code ids[]\n@@ -545,9 +544,6 @@ oacc_set_fn_attrib (tree fn, tree clauses, bool is_kernel, vec<tree> *args)\n \t  non_const |= GOMP_DIM_MASK (ix);\n \t}\n       attr = tree_cons (NULL_TREE, dim, attr);\n-      /* Note kernelness with TREE_PUBLIC.  */\n-      if (is_kernel)\n-\tTREE_PUBLIC (attr) = 1;\n     }\n \n   oacc_replace_fn_attrib (fn, attr);\n@@ -616,16 +612,6 @@ oacc_get_fn_attrib (tree fn)\n   return lookup_attribute (OACC_FN_ATTRIB, DECL_ATTRIBUTES (fn));\n }\n \n-/* Return true if this oacc fn attrib is for a kernels offload\n-   region.  We use the TREE_PUBLIC flag of each dimension -- only\n-   need to check the first one.  */\n-\n-bool\n-oacc_fn_attrib_kernels_p (tree attr)\n-{\n-  return TREE_PUBLIC (TREE_VALUE (attr));\n-}\n-\n /* Extract an oacc execution dimension from FN.  FN must be an\n    offloaded function or routine that has already had its execution\n    dimensions lowered to the target-specific values.  */"}, {"sha": "d28eb4bc4f6442ae44d4b73e81137a8b29317825", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -82,11 +82,9 @@ extern int omp_max_vf (void);\n extern int omp_max_simt_vf (void);\n extern tree oacc_launch_pack (unsigned code, tree device, unsigned op);\n extern void oacc_replace_fn_attrib (tree fn, tree dims);\n-extern void oacc_set_fn_attrib (tree fn, tree clauses, bool is_kernel,\n-\t\t\t\tvec<tree> *args);\n+extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);\n extern tree oacc_build_routine_dims (tree clauses);\n extern tree oacc_get_fn_attrib (tree fn);\n-extern bool oacc_fn_attrib_kernels_p (tree attr);\n extern int oacc_get_fn_dim_size (tree fn, int axis);\n extern int oacc_get_ifn_dim_arg (const gimple *stmt);\n "}, {"sha": "d24f1317a3f48fe3ec92db618f76b3e6ebb36756", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -619,7 +619,6 @@ oacc_validate_dims (tree fn, tree attrs, int *dims, int level, unsigned used)\n   tree purpose[GOMP_DIM_MAX];\n   unsigned ix;\n   tree pos = TREE_VALUE (attrs);\n-  bool is_kernel = oacc_fn_attrib_kernels_p (attrs);\n \n   /* Make sure the attribute creator attached the dimension\n      information.  */\n@@ -666,13 +665,8 @@ oacc_validate_dims (tree fn, tree attrs, int *dims, int level, unsigned used)\n       /* Replace the attribute with new values.  */\n       pos = NULL_TREE;\n       for (ix = GOMP_DIM_MAX; ix--;)\n-\t{\n-\t  pos = tree_cons (purpose[ix],\n-\t\t\t   build_int_cst (integer_type_node, dims[ix]),\n-\t\t\t   pos);\n-\t  if (is_kernel)\n-\t    TREE_PUBLIC (pos) = 1;\n-\t}\n+\tpos = tree_cons (purpose[ix],\n+\t\t\t build_int_cst (integer_type_node, dims[ix]), pos);\n       oacc_replace_fn_attrib (fn, pos);\n     }\n }\n@@ -1455,10 +1449,16 @@ execute_oacc_device_lower ()\n   int fn_level = oacc_fn_attrib_level (attrs);\n \n   if (dump_file)\n-    fprintf (dump_file, oacc_fn_attrib_kernels_p (attrs)\n-\t     ? \"Function is kernels offload\\n\"\n-\t     : fn_level < 0 ? \"Function is parallel offload\\n\"\n-\t     : \"Function is routine level %d\\n\", fn_level);\n+    {\n+      if (fn_level >= 0)\n+\tfprintf (dump_file, \"Function is OpenACC routine level %d\\n\",\n+\t\t fn_level);\n+      else if (lookup_attribute (\"oacc kernels\",\n+\t\t\t\t DECL_ATTRIBUTES (current_function_decl)))\n+\tfprintf (dump_file, \"Function is OpenACC kernels offload\\n\");\n+      else\n+\tfprintf (dump_file, \"Function is OpenACC parallel offload\\n\");\n+    }\n \n   unsigned outer_mask = fn_level >= 0 ? GOMP_DIM_MASK (fn_level) - 1 : 0;\n   unsigned used_mask = oacc_loop_partition (loops, outer_mask);"}, {"sha": "52865d31f9335bf5cab6e1d1622b1edd0db4686f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -1,5 +1,14 @@\n 2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n+\n \t* c-c++-common/goacc/classify-kernels-unparallelized.c: New file.\n \t* c-c++-common/goacc/classify-kernels.c: Likewise.\n \t* c-c++-common/goacc/classify-parallel.c: Likewise."}, {"sha": "70ff428b9987dec358de1607c544d6387dc9f17c", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -24,16 +24,16 @@ void KERNELS ()\n }\n \n /* Check the offloaded function's attributes.\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n \n /* Check that exactly one OpenACC kernels construct is analyzed, and that it\n    can't be parallelized.\n    { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n    { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } } */\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "c8b0fda61b779efd120042d9eeea13a699c91fe5", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -20,16 +20,16 @@ void KERNELS ()\n }\n \n /* Check the offloaded function's attributes.\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n \n /* Check that exactly one OpenACC kernels construct is analyzed, and that it\n    can be parallelized.\n    { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n    { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "4f97301f5cf0a68e7b3c51406a9b515986db08d8", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -23,6 +23,6 @@ void PARALLEL ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is parallel offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "fd89fc1ec6620c31d2643ab7858b57103903c9af", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -25,6 +25,6 @@ void ROUTINE ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is routine level 1\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 1, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "9887d35b63860703795d66b0b98c9a65434edf77", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -26,16 +26,16 @@ program main\n end program main\n \n ! Check the offloaded function's attributes.\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n \n ! Check that exactly one OpenACC kernels construct is analyzed, and that it\n ! can't be parallelized.\n ! { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } }\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "69c89a96c5904285133971672ad299c2d62d7a6f", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -22,16 +22,16 @@ program main\n end program main\n \n ! Check the offloaded function's attributes.\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n \n ! Check that exactly one OpenACC kernels construct is analyzed, and that it\n ! can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "e215c79be618ce5d6ed079318f000bfed0a0db59", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -25,6 +25,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is parallel offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC parallel offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "4ca406742f9026a057f7325b926a410eb99b4158", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -24,6 +24,6 @@ end subroutine ROUTINE\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is routine level 1\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC routine level 1\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0 1, 1 1, 1 1\\\\), omp declare target, oacc function \\\\(0 0, 1 0, 1 0\\\\)\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "6ce9d8451682679dcdcd284d8b9d83106b4698c4", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -2043,10 +2043,13 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   /* Prepare the GIMPLE_OMP_PARALLEL statement.  */\n   if (oacc_kernels_p)\n     {\n+      gcc_checking_assert (lookup_attribute (\"oacc kernels\",\n+\t\t\t\t\t     DECL_ATTRIBUTES (cfun->decl)));\n+\n       tree clause = build_omp_clause (loc, OMP_CLAUSE_NUM_GANGS);\n       OMP_CLAUSE_NUM_GANGS_EXPR (clause)\n \t= build_int_cst (integer_type_node, n_threads);\n-      oacc_set_fn_attrib (cfun->decl, clause, true, NULL);\n+      oacc_set_fn_attrib (cfun->decl, clause, NULL);\n     }\n   else\n     {"}, {"sha": "10c43f32ba38764dc905cb53ecaea6c49bbeeb43", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25651634436238d505c586fd308cdd5b6c5db8f9/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=25651634436238d505c586fd308cdd5b6c5db8f9", "patch": "@@ -152,10 +152,7 @@ gate_oacc_kernels (function *fn)\n   if (!flag_openacc)\n     return false;\n \n-  tree oacc_function_attr = oacc_get_fn_attrib (fn->decl);\n-  if (oacc_function_attr == NULL_TREE)\n-    return false;\n-  if (!oacc_fn_attrib_kernels_p (oacc_function_attr))\n+  if (!lookup_attribute (\"oacc kernels\", DECL_ATTRIBUTES (fn->decl)))\n     return false;\n \n   struct loop *loop;"}]}