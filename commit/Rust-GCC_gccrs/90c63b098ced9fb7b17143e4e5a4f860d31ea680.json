{"sha": "90c63b098ced9fb7b17143e4e5a4f860d31ea680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBjNjNiMDk4Y2VkOWZiN2IxNzE0M2U0ZTVhNGY4NjBkMzFlYTY4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T09:52:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T09:52:52Z"}, "message": "[multiple changes]\n\n2010-10-21  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb, exp_intr.adb, par-ch4.adb, scn.adb, sem_ch4.adb,\n\tsem_res.adb, sem_util.adb, sinfo.ads, a-except-2005.adb: Minor\n\treformatting.\n\t* snames.ads-tmpl: Add note on Name_Some (not a reserved keyword).\n\n2010-10-21  Geert Bosch  <bosch@adacore.com>\n\n\t* ttypef.ads: Further cleanup of Safe_XXX float attributes.\n\nFrom-SVN: r165756", "tree": {"sha": "48fbc1f9e140568185208db10385d01e204813e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fbc1f9e140568185208db10385d01e204813e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90c63b098ced9fb7b17143e4e5a4f860d31ea680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c63b098ced9fb7b17143e4e5a4f860d31ea680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c63b098ced9fb7b17143e4e5a4f860d31ea680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c63b098ced9fb7b17143e4e5a4f860d31ea680/comments", "author": null, "committer": null, "parents": [{"sha": "acee84866682d56e06be28e1d81e399214cde5f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acee84866682d56e06be28e1d81e399214cde5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acee84866682d56e06be28e1d81e399214cde5f6"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "416cb95eddc26b8aa95f1f1e1f7e4c00f35065a6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -1,3 +1,14 @@\n+2010-10-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb, exp_intr.adb, par-ch4.adb, scn.adb, sem_ch4.adb,\n+\tsem_res.adb, sem_util.adb, sinfo.ads, a-except-2005.adb: Minor\n+\treformatting.\n+\t* snames.ads-tmpl: Add note on Name_Some (not a reserved keyword).\n+\n+2010-10-21  Geert Bosch  <bosch@adacore.com>\n+\n+\t* ttypef.ads: Further cleanup of Safe_XXX float attributes.\n+\n 2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb, exp_ch4.ads (Expand_Quantified_Expression): New procedure"}, {"sha": "48574e236feb7ffbccdc9d2f3c405fdf1aa3f3d7", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -1232,7 +1232,6 @@ package body Ada.Exceptions is\n               Rmsg_05 (Rmsg_05'First .. Rmsg_05'Last - 1) & ASCII.LF &\n               \"index \" & Image (Index) & \" not in \" & Image (First) &\n               \"..\" & Image (Last) & ASCII.NUL;\n-\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_05_Ext;\n@@ -1244,7 +1243,6 @@ package body Ada.Exceptions is\n               Rmsg_12 (Rmsg_12'First .. Rmsg_12'Last - 1) & ASCII.LF &\n               \"value \" & Image (Index) & \" not in \" & Image (First) &\n               \"..\" & Image (Last) & ASCII.NUL;\n-\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_12_Ext;\n@@ -1255,7 +1253,6 @@ package body Ada.Exceptions is\n \n    procedure Reraise is\n       Excep : constant EOA := Get_Current_Excep.all;\n-\n    begin\n       Abort_Defer.all;\n       Exception_Propagation.Setup_Exception (Excep, Excep, Reraised => True);\n@@ -1397,7 +1394,6 @@ package body Ada.Exceptions is\n    ---------------\n \n    procedure To_Stderr (C : Character) is\n-\n       type int is new Integer;\n \n       procedure put_char_stderr (C : int);"}, {"sha": "5717f9eecad52a5a277d6c27f59847567eb75d29", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -7399,27 +7399,30 @@ package body Exp_Ch4 is\n \n    procedure Expand_N_Quantified_Expression (N : Node_Id) is\n       Loc      : constant Source_Ptr := Sloc (N);\n-      Iterator : constant Node_Id := Loop_Parameter_Specification (N);\n-      Cond     : constant Node_Id := Condition (N);\n+      Iterator : constant Node_Id    := Loop_Parameter_Specification (N);\n+      Cond     : constant Node_Id    := Condition (N);\n \n       Actions : List_Id;\n       Decl    : Node_Id;\n       Test    : Node_Id;\n       Tnn     : Entity_Id;\n \n-      --  We expand\n+      --  We expand:\n+\n       --      for all X in range => Cond\n-      --    into\n+\n+      --  into:\n+\n       --        R := True;\n       --        for all X in range loop\n       --           if not Cond then\n       --              R := False;\n       --              exit;\n       --           end if;\n       --        end loop;\n-      --\n+\n       --  Conversely, an existentially quantified expression becomes:\n-      --\n+\n       --        R := False;\n       --        for all X in range loop\n       --           if Cond then\n@@ -7431,9 +7434,10 @@ package body Exp_Ch4 is\n    begin\n       Actions := New_List;\n       Tnn := Make_Temporary (Loc, 'T');\n-      Decl := Make_Object_Declaration (Loc,\n-        Defining_Identifier => Tnn,\n-        Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc));\n+      Decl :=\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Tnn,\n+          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc));\n \n       Append_To (Actions, Decl);\n \n@@ -7442,22 +7446,23 @@ package body Exp_Ch4 is\n \n          Test :=\n            Make_If_Statement (Loc,\n-             Condition =>\n+             Condition       =>\n                 Make_Op_Not (Loc, Relocate_Node (Cond)),\n              Then_Statements => New_List (\n                Make_Assignment_Statement (Loc,\n-                 Name => New_Occurrence_Of (Tnn, Loc),\n+                 Name       => New_Occurrence_Of (Tnn, Loc),\n                  Expression => New_Occurrence_Of (Standard_False, Loc)),\n                Make_Exit_Statement (Loc)));\n+\n       else\n          Set_Expression (Decl, New_Occurrence_Of (Standard_False, Loc));\n \n          Test :=\n            Make_If_Statement (Loc,\n-             Condition => Relocate_Node (Cond),\n+             Condition       => Relocate_Node (Cond),\n              Then_Statements => New_List (\n                Make_Assignment_Statement (Loc,\n-                 Name => New_Occurrence_Of (Tnn, Loc),\n+                 Name       => New_Occurrence_Of (Tnn, Loc),\n                  Expression => New_Occurrence_Of (Standard_True, Loc)),\n                Make_Exit_Statement (Loc)));\n       end if;\n@@ -7467,8 +7472,8 @@ package body Exp_Ch4 is\n           Iteration_Scheme =>\n             Make_Iteration_Scheme (Loc,\n               Loop_Parameter_Specification => Iterator),\n-              Statements => New_List (Test),\n-              End_Label  => Empty));\n+              Statements                   => New_List (Test),\n+              End_Label                    => Empty));\n \n       Rewrite (N,\n         Make_Expression_With_Actions (Loc,\n@@ -7507,10 +7512,10 @@ package body Exp_Ch4 is\n       function In_Left_Hand_Side (Comp : Node_Id) return Boolean is\n       begin\n          return (Nkind (Parent (Comp)) = N_Assignment_Statement\n-                   and then Comp = Name (Parent (Comp)))\n+                  and then Comp = Name (Parent (Comp)))\n            or else (Present (Parent (Comp))\n-                      and then Nkind (Parent (Comp)) in N_Subexpr\n-                      and then In_Left_Hand_Side (Parent (Comp)));\n+                     and then Nkind (Parent (Comp)) in N_Subexpr\n+                     and then In_Left_Hand_Side (Parent (Comp)));\n       end In_Left_Hand_Side;\n \n    --  Start of processing for Expand_N_Selected_Component\n@@ -7625,7 +7630,6 @@ package body Exp_Ch4 is\n \n                Disc := First_Discriminant (Ptyp);\n                Dcon := First_Elmt (Discriminant_Constraint (Ptyp));\n-\n                Discr_Loop : while Present (Dcon) loop\n                   Dval := Node (Dcon);\n "}, {"sha": "977e335567d02b49404320918e97ec6a3f3eee18", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -127,7 +127,7 @@ package body Exp_Intr is\n       --  Maximum of operand sizes\n \n    begin\n-      --  Nothing to do if the operands have the same modular type.\n+      --  Nothing to do if the operands have the same modular type\n \n       if Base_Type (T1) = Base_Type (T2)\n         and then Is_Modular_Integer_Type (T1)\n@@ -148,6 +148,7 @@ package body Exp_Intr is\n \n       Res := New_Copy (N);\n       Set_Etype (Res, T3);\n+\n       case Nkind (N) is\n          when N_Op_And =>\n             Set_Entity (Res, Standard_Op_And);"}, {"sha": "a613e1f17df56e47062e227a09e37fa9c7db34b5", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -2524,9 +2524,9 @@ package body Ch4 is\n       if Token = Tok_All then\n          Set_All_Present (Node1);\n \n-      --  We treat Some as a non-reserved keyword, so it appears to\n-      --  the scanner as an identifier. If Some is made into a reserved\n-      --  work, the check below is against Tok_Some.\n+      --  We treat Some as a non-reserved keyword, so it appears to the scanner\n+      --  as an identifier. If Some is made into a reserved word, the check\n+      --  below is against Tok_Some.\n \n       elsif Token /= Tok_Identifier\n         or else Chars (Token_Node) /= Name_Some\n@@ -2537,6 +2537,7 @@ package body Ch4 is\n \n       Scan;\n       Set_Loop_Parameter_Specification (Node1, P_Loop_Parameter_Specification);\n+\n       if Token = Tok_Arrow then\n          Scan;\n          Set_Condition (Node1, P_Expression);"}, {"sha": "6023780f0c1473cf453eb93d50760ee8aa6a1830", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -477,9 +477,7 @@ package body Scn is\n          --  check will make it into a regular identifer in earlier versions\n          --  of the language.\n \n-         if Token = Tok_Some\n-           and then Ada_Version < Ada_2012\n-         then\n+         if Token = Tok_Some and then Ada_Version < Ada_2012 then\n             null;\n          else\n             Error_Msg_Name_1 := Token_Name;"}, {"sha": "ff152f1e257424c4c24f7e7f4900f5df14a266ad", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -3188,6 +3188,7 @@ package body Sem_Ch4 is\n                 (E_Loop, Current_Scope, Sloc (N), 'L');\n \n       Iterator : Node_Id;\n+\n    begin\n       Set_Etype  (Ent,  Standard_Void_Type);\n       Set_Parent (Ent, N);\n@@ -3200,6 +3201,7 @@ package body Sem_Ch4 is\n       Analyze_Iteration_Scheme (Iterator);\n       Analyze (Condition (N));\n       End_Scope;\n+\n       Set_Etype (N, Standard_Boolean);\n    end Analyze_Quantified_Expression;\n "}, {"sha": "80b074e01943d5d3e8ac648fad8cdf5ca6c32eb3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -7758,9 +7758,9 @@ package body Sem_Res is\n          Wrong_Type (Expr, Target_Typ);\n       end if;\n \n-      --  If the target type is unconstrained, then we reset the type of\n-      --  the result from the type of the expression. For other cases, the\n-      --  actual subtype of the expression is the target type.\n+      --  If the target type is unconstrained, then we reset the type of the\n+      --  result from the type of the expression. For other cases, the actual\n+      --  subtype of the expression is the target type.\n \n       if Is_Composite_Type (Target_Typ)\n         and then not Is_Constrained (Target_Typ)"}, {"sha": "b74761894ac7dff10bedfcd96fbf2f9ebd11a32d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -5570,7 +5570,8 @@ package body Sem_Util is\n       Save_Interps (N, New_Prefix);\n \n       Rewrite (N,\n-        Make_Explicit_Dereference (Sloc (Parent (N)), Prefix => New_Prefix));\n+        Make_Explicit_Dereference (Sloc (Parent (N)),\n+          Prefix => New_Prefix));\n \n       Set_Etype (N, Designated_Type (Etype (New_Prefix)));\n \n@@ -5623,7 +5624,7 @@ package body Sem_Util is\n             end if;\n          end if;\n \n-         --  Place the reference on the entity node.\n+         --  Place the reference on the entity node\n \n          if Present (Ent) then\n             Generate_Reference (Ent, Pref);\n@@ -5652,8 +5653,8 @@ package body Sem_Util is\n \n            and then Comes_From_Source (Decl)\n \n-            --  The constant is not completed. A full object declaration\n-            --  or a pragma Import complete a deferred constant.\n+            --  The constant is not completed. A full object declaration or a\n+            --  pragma Import complete a deferred constant.\n \n            and then not Has_Completion (Defining_Identifier (Decl))\n          then\n@@ -5687,8 +5688,7 @@ package body Sem_Util is\n       Call   : Node_Id;\n    begin\n       Find_Actual (N, Formal, Call);\n-      return Present (Formal)\n-        and then Ekind (Formal) = E_Out_Parameter;\n+      return Present (Formal) and then Ekind (Formal) = E_Out_Parameter;\n    end Is_Actual_Out_Parameter;\n \n    -------------------------\n@@ -5860,9 +5860,7 @@ package body Sem_Util is\n    begin\n       --  Predicate is not relevant to subprograms\n \n-      if Is_Entity_Name (N)\n-        and then Is_Overloadable (Entity (N))\n-      then\n+      if Is_Entity_Name (N) and then Is_Overloadable (Entity (N)) then\n          return False;\n \n       elsif Is_Atomic (Etype (N))\n@@ -6015,7 +6013,7 @@ package body Sem_Util is\n    ----------------------------------------------\n \n    function Is_Dependent_Component_Of_Mutable_Object\n-     (Object : Node_Id) return   Boolean\n+     (Object : Node_Id) return Boolean\n    is\n       P           : Node_Id;\n       Prefix_Type : Entity_Id;\n@@ -6055,10 +6053,9 @@ package body Sem_Util is\n                   P_Aliased := True;\n                end if;\n \n-            --  A discriminant check on a selected component may be\n-            --  expanded into a dereference when removing side-effects.\n-            --  Recover the original node and its type, which may be\n-            --  unconstrained.\n+            --  A discriminant check on a selected component may be expanded\n+            --  into a dereference when removing side-effects. Recover the\n+            --  original node and its type, which may be unconstrained.\n \n             elsif Nkind (P) = N_Explicit_Dereference\n               and then not (Comes_From_Source (P))\n@@ -6067,7 +6064,8 @@ package body Sem_Util is\n                Prefix_Type := Etype (P);\n \n             else\n-               --  Check for prefix being an aliased component ???\n+               --  Check for prefix being an aliased component???\n+\n                null;\n \n             end if;\n@@ -6116,8 +6114,8 @@ package body Sem_Util is\n             Comp :=\n               Original_Record_Component (Entity (Selector_Name (Object)));\n \n-            --  As per AI-0017, the renaming is illegal in a generic body,\n-            --  even if the subtype is indefinite.\n+            --  As per AI-0017, the renaming is illegal in a generic body, even\n+            --  if the subtype is indefinite.\n \n             --  Ada 2005 (AI-363): In Ada 2005 an aliased object can be mutable\n "}, {"sha": "f47892a0ab150e291627e4969f8b37c3a1b5c34d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -3825,10 +3825,10 @@ package Sinfo is\n       --    for QUANTIFIER LOOP_PARAMETER_SPECIFICATION => PREDICATE |\n       --    for QUANTIFIER ITERATOR_SPECIFICATION => PREDICATE\n       --\n-      --  QUANTIFIER ::= all  |  some\n+      --  QUANTIFIER ::= all | some\n \n       --  N_Quantified_Expression\n-      --  Sloc points to token for\n+      --  Sloc points to FOR\n       --  Loop_Parameter_Specification (Node4)\n       --  Condition (Node1)\n       --  All_Present (Flag15)"}, {"sha": "4ec549e3208665f0c5cac4b802c8dd1429eb9648", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -937,6 +937,10 @@ package Snames is\n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n+   --  Note: Name_Some is here even though for now we do not treat it as being\n+   --  reserved. We treat it instead as an unreserved keyword. This may change\n+   --  in the future, but in any case it belongs in the following list.\n+\n    Name_Abort                            : constant Name_Id := N + $;\n    Name_Abs                              : constant Name_Id := N + $;\n    Name_Accept                           : constant Name_Id := N + $;"}, {"sha": "58cdbff834226ac3e0425a216e011dd4347d3f85", "filename": "gcc/ada/ttypef.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fttypef.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c63b098ced9fb7b17143e4e5a4f860d31ea680/gcc%2Fada%2Fttypef.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypef.ads?ref=90c63b098ced9fb7b17143e4e5a4f860d31ea680", "patch": "@@ -142,25 +142,25 @@ package Ttypef is\n    IEEEL_Safe_First        : constant := -16#0.FFFF_FFFF_FFFF_F8#E+256;\n    IEEEX_Safe_First        : constant := -16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n    VAXFF_Safe_First        : constant := -16#0.7FFF_FF8#E+32;\n-   VAXDF_Safe_First        : constant := -16#0.7FFF_FFFF_FFFF_FC0#E+32;\n+   VAXDF_Safe_First        : constant := -16#0.7FFF_FFFF_FFFF_FF8#E+32;\n    VAXGF_Safe_First        : constant := -16#0.7FFF_FFFF_FFFF_FC#E+256;\n    AAMPS_Safe_First        : constant := -16#0.7FFF_FF8#E+32;\n    AAMPL_Safe_First        : constant := -16#0.7FFF_FFFF_FF8#E+32;\n \n    IEEES_Safe_Large        : constant := 16#0.FFFF_FF#E+32;\n    IEEEL_Safe_Large        : constant := 16#0.FFFF_FFFF_FFFF_F8#E+256;\n    IEEEX_Safe_Large        : constant := 16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_Safe_Large        : constant := 16#0.7FFF_FC0#E+32;\n-   VAXDF_Safe_Large        : constant := 16#0.7FFF_FFFF_0000_000#E+32;\n-   VAXGF_Safe_Large        : constant := 16#0.7FFF_FFFF_FFFF_F0#E+256;\n-   AAMPS_Safe_Large        : constant := 16#0.7FFF_FC0#E+32;\n-   AAMPL_Safe_Large        : constant := 16#0.7FFF_FFFF#E+32;\n+   VAXFF_Safe_Large        : constant := 16#0.7FFF_FF8#E+32;\n+   VAXDF_Safe_Large        : constant := 16#0.7FFF_FFFF_FFFF_FF8#E+32;\n+   VAXGF_Safe_Large        : constant := 16#0.7FFF_FFFF_FFFF_FC#E+256;\n+   AAMPS_Safe_Large        : constant := 16#0.7FFF_FF8#E+32;\n+   AAMPL_Safe_Large        : constant := 16#0.7FFF_FFFF_FF8#E+32;\n \n    IEEES_Safe_Last         : constant := 16#0.FFFF_FF#E+32;\n    IEEEL_Safe_Last         : constant := 16#0.FFFF_FFFF_FFFF_F8#E+256;\n    IEEEX_Safe_Last         : constant := 16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n    VAXFF_Safe_Last         : constant := 16#0.7FFF_FF8#E+32;\n-   VAXDF_Safe_Last         : constant := 16#0.7FFF_FFFF_FFFF_FC0#E+32;\n+   VAXDF_Safe_Last         : constant := 16#0.7FFF_FFFF_FFFF_FF8#E+32;\n    VAXGF_Safe_Last         : constant := 16#0.7FFF_FFFF_FFFF_FC#E+256;\n    AAMPS_Safe_Last         : constant := 16#0.7FFF_FF8#E+32;\n    AAMPL_Safe_Last         : constant := 16#0.7FFF_FFFF_FF8#E+32;"}]}