{"sha": "21bdb106e797193b1d02abcacd6f27bb61bb12ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiZGIxMDZlNzk3MTkzYjFkMDJhYmNhY2Q2ZjI3YmI2MWJiMTJlYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-19T12:25:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-19T12:25:58Z"}, "message": "sh.c (find_sole_member): New function.\n\n\t* sh.c (find_sole_member): New function.\n\t(sh_gimplify_va_arg_expr): Use it. Allow RECORD_TYPE mode mismatch\n\tif the record's alignment is larger than the size of its only member.\n\nFrom-SVN: r103275", "tree": {"sha": "2606925fc93394a3c44f139738dadd36a1a6323f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2606925fc93394a3c44f139738dadd36a1a6323f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21bdb106e797193b1d02abcacd6f27bb61bb12ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bdb106e797193b1d02abcacd6f27bb61bb12ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bdb106e797193b1d02abcacd6f27bb61bb12ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bdb106e797193b1d02abcacd6f27bb61bb12ec/comments", "author": null, "committer": null, "parents": [{"sha": "e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27ce37987e028aeba1c9c58d8a93f5e8dbf5da0"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "9d39ac6a3737dd76afa5b873a5bc3043dd9efe32", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bdb106e797193b1d02abcacd6f27bb61bb12ec/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bdb106e797193b1d02abcacd6f27bb61bb12ec/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=21bdb106e797193b1d02abcacd6f27bb61bb12ec", "patch": "@@ -6632,6 +6632,27 @@ sh_va_start (tree valist, rtx nextarg)\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n }\n \n+/* TYPE is a RECORD_TYPE.  If there is only a single non-zero-sized\n+   member, return it.  */\n+static tree\n+find_sole_member (tree type)\n+{\n+  tree field, member = NULL_TREE;\n+\n+  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n+    {\n+      if (TREE_CODE (field) != FIELD_DECL)\n+\tcontinue;\n+      if (!DECL_SIZE (field))\n+\treturn NULL_TREE;\n+      if (integer_zerop (DECL_SIZE (field)))\n+\tcontinue;\n+      if (member)\n+\treturn NULL_TREE;\n+      member = field;\n+    }\n+  return member;\n+}\n /* Implement `va_arg'.  */\n \n static tree\n@@ -6657,6 +6678,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       tree next_o, next_o_limit, next_fp, next_fp_limit, next_stack;\n       int pass_as_float;\n       tree lab_false;\n+      tree member;\n \n       f_next_o = TYPE_FIELDS (va_list_type_node);\n       f_next_o_limit = TREE_CHAIN (f_next_o);\n@@ -6679,22 +6701,22 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \t like their member.  This is relevant if the latter has a REAL_TYPE\n \t or COMPLEX_TYPE type.  */\n       while (TREE_CODE (type) == RECORD_TYPE\n-\t     && TYPE_FIELDS (type)\n-\t     && TREE_CODE (TYPE_FIELDS (type)) == FIELD_DECL\n-\t     && (TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == REAL_TYPE\n-\t\t || TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == COMPLEX_TYPE\n-\t\t || TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == RECORD_TYPE)\n-             && TREE_CHAIN (TYPE_FIELDS (type)) == NULL_TREE)\n+\t     && (member = find_sole_member (type))\n+\t     && (TREE_CODE (TREE_TYPE (member)) == REAL_TYPE\n+\t\t || TREE_CODE (TREE_TYPE (member)) == COMPLEX_TYPE\n+\t\t || TREE_CODE (TREE_TYPE (member)) == RECORD_TYPE))\n \t{\n-\t  tree field_type = TREE_TYPE (TYPE_FIELDS (type));\n+\t  tree field_type = TREE_TYPE (member);\n \n \t  if (TYPE_MODE (type) == TYPE_MODE (field_type))\n \t    type = field_type;\n \t  else\n \t    {\n-\t      gcc_assert (TYPE_ALIGN (type)\n-\t\t\t  < GET_MODE_ALIGNMENT (TYPE_MODE (field_type)));\n-\t    break;\n+\t      gcc_assert ((TYPE_ALIGN (type)\n+\t\t\t   < GET_MODE_ALIGNMENT (TYPE_MODE (field_type)))\n+\t\t\t  || (TYPE_ALIGN (type)\n+\t\t\t      > GET_MODE_BITSIZE (TYPE_MODE (field_type))));\n+\t      break;\n \t    }\n \t}\n "}]}