{"sha": "b29fc21482c0e203136eb5d44bdc1495de3918c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5ZmMyMTQ4MmMwZTIwMzEzNmViNWQ0NGJkYzE0OTVkZTM5MThjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-14T08:38:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-14T08:38:17Z"}, "message": "testsuite: Use sync_long_long instead of sync_int_long for atomic-29.c test\n\nAs discussed, the test tests atomics on doubles which are 64-bit and so we\nshould use sync_long_long effective target instead of sync_int_long that\ncovers 64-bit atomics only on 64-bit arches.  I've added -march=pentium\nto follow what is documented for sync_long_long, I guess -march=zarch should\nbe added for s390* too, but haven't tested that.\n\nAnd using sync_long_long found a syntax error in that effective target\nimplementation, so I've fixed that too.\n\n2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n\n\t* c-c++-common/gomp/atomic-29.c: Add -march=pentium\n\tdg-additional-options for ia32.  Use sync_long_long effective target\n\tinstead of sync_int_long.\n\t* lib/target-supports.exp (check_effective_target_sync_long_long): Fix\n\ta syntax error.", "tree": {"sha": "2d36a2e80e0ecd2fed8b92b42ef9caf50a8c9ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d36a2e80e0ecd2fed8b92b42ef9caf50a8c9ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29fc21482c0e203136eb5d44bdc1495de3918c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29fc21482c0e203136eb5d44bdc1495de3918c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29fc21482c0e203136eb5d44bdc1495de3918c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29fc21482c0e203136eb5d44bdc1495de3918c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f89d5ebcca8ea8c363db39cd3946db12b11adcc"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "97fe33b392753b12ddd0a35f65a5a2f0b3d073a8", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-29.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29fc21482c0e203136eb5d44bdc1495de3918c6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29fc21482c0e203136eb5d44bdc1495de3918c6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-29.c?ref=b29fc21482c0e203136eb5d44bdc1495de3918c6", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile { target c } } */\n /* { dg-additional-options \"-O2 -fdump-tree-ompexp\" } */\n-/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 5, 5\\\\\\);\" 1 \"ompexp\" { target sync_int_long } } } */\n-/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 4, 2\\\\\\);\" 1 \"ompexp\" { target sync_int_long } } } */\n-/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 264, 5, 0\\\\\\);\" 1 \"ompexp\" { target sync_int_long } } } */\n-/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 0, 0\\\\\\);\" 1 \"ompexp\" { target sync_int_long } } } */\n-/* { dg-final { scan-tree-dump-not \"__atomic_load_8 \\\\\\(\" \"ompexp\" { target sync_int_long } } } */\n+/* { dg-additional-options \"-march=pentium\" { target ia32 } } */\n+/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 5, 5\\\\\\);\" 1 \"ompexp\" { target sync_long_long } } } */\n+/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 4, 2\\\\\\);\" 1 \"ompexp\" { target sync_long_long } } } */\n+/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 264, 5, 0\\\\\\);\" 1 \"ompexp\" { target sync_long_long } } } */\n+/* { dg-final { scan-tree-dump-times \"\\.ATOMIC_COMPARE_EXCHANGE \\\\\\(\\[^\\n\\r]*, 8, 0, 0\\\\\\);\" 1 \"ompexp\" { target sync_long_long } } } */\n+/* { dg-final { scan-tree-dump-not \"__atomic_load_8 \\\\\\(\" \"ompexp\" { target sync_long_long } } } */\n \n double x;\n "}, {"sha": "8697ceb53c9c889b256ea053e2d6ed342c22bdea", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29fc21482c0e203136eb5d44bdc1495de3918c6/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29fc21482c0e203136eb5d44bdc1495de3918c6/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b29fc21482c0e203136eb5d44bdc1495de3918c6", "patch": "@@ -8074,7 +8074,7 @@ proc check_effective_target_sync_int_128_runtime { } {\n # Note: 32bit s390 targets require -mzarch in dg-options.\n \n proc check_effective_target_sync_long_long { } {\n-    if { [istarget i?86-*-*] || [istarget x86_64-*-*])\n+    if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n \t || [istarget aarch64*-*-*]\n \t || [istarget arm*-*-*]\n \t || [istarget alpha*-*-*]"}]}