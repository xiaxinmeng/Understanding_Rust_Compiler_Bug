{"sha": "bdaae9a01aee53dd13918136baeb693323356aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhYWU5YTAxYWVlNTNkZDEzOTE4MTM2YmFlYjY5MzMyMzM1NmFhMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-13T10:46:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-13T10:46:49Z"}, "message": "(simplify_shift_count, case LSHIFTRT): Don't merge shifts of different\nmodes if first is any right shift.\n\nFrom-SVN: r9674", "tree": {"sha": "07c0d5de4230663c5e551dd4b56b48f8b79e3e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c0d5de4230663c5e551dd4b56b48f8b79e3e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdaae9a01aee53dd13918136baeb693323356aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaae9a01aee53dd13918136baeb693323356aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaae9a01aee53dd13918136baeb693323356aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaae9a01aee53dd13918136baeb693323356aa3/comments", "author": null, "committer": null, "parents": [{"sha": "e98b85444c0a7b2dfbe8bba7426c88d3230c518a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98b85444c0a7b2dfbe8bba7426c88d3230c518a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98b85444c0a7b2dfbe8bba7426c88d3230c518a"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "3b58b34b8544d51b5d694d89fb7ab79d2b6f5124", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaae9a01aee53dd13918136baeb693323356aa3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaae9a01aee53dd13918136baeb693323356aa3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bdaae9a01aee53dd13918136baeb693323356aa3", "patch": "@@ -7898,7 +7898,7 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \t\t ASHIFTRT.\n \n \t\t If the mode of this shift is not the mode of the outer shift,\n-\t\t we can't do this if either shift is ASHIFTRT or ROTATE.\n+\t\t we can't do this if either shift is a right shift or ROTATE.\n \n \t\t Finally, we can't do any of these if the mode is too wide\n \t\t unless the codes are the same.\n@@ -7909,7 +7909,8 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \t      if (code == first_code)\n \t\t{\n \t\t  if (GET_MODE (varop) != result_mode\n-\t\t      && (code == ASHIFTRT || code == ROTATE))\n+\t\t      && (code == ASHIFTRT || code == LSHIFTRT\n+\t\t\t  || code == ROTATE))\n \t\t    break;\n \n \t\t  count += first_count;\n@@ -7921,7 +7922,8 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \t\t  || (code == ROTATE && first_code == ASHIFTRT)\n \t\t  || GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT\n \t\t  || (GET_MODE (varop) != result_mode\n-\t\t      && (first_code == ASHIFTRT || first_code == ROTATE\n+\t\t      && (first_code == ASHIFTRT || first_code == LSHIFTRT\n+\t\t\t  || first_code == ROTATE\n \t\t\t  || code == ROTATE)))\n \t\tbreak;\n "}]}