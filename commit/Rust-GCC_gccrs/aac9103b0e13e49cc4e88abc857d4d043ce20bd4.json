{"sha": "aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjOTEwM2IwZTEzZTQ5Y2M0ZTg4YWJjODU3ZDRkMDQzY2UyMGJkNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2019-08-19T15:47:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2019-08-19T15:47:30Z"}, "message": "Add --with-static-standard-libraries to the top level\n\ngdb should normally not be linked with -static-libstdc++.  Currently\nthis has not caused problems, but it's incompatible with catching an\nexception thrown from a shared library -- and a subsequent patch\nchanges gdb to do just this.\n\nThis patch adds a new --with-static-standard-libraries flag to the\ntop-level configure.  It defaults to \"auto\", which means enabled if\ngcc is being built, and disabled otherwise.\n\nChangeLog\n2019-08-19  Tom Tromey  <tom@tromey.com>\n\n\t* configure: Rebuild.\n\t* configure.ac: Add --with-static-standard-libraries.\n\nFrom-SVN: r274673", "tree": {"sha": "1028bf8d37dd79dc12f8142bbe022398bae633fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1028bf8d37dd79dc12f8142bbe022398bae633fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bbc329b2498e895048ab46e83ce43c2d55cfa27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbc329b2498e895048ab46e83ce43c2d55cfa27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbc329b2498e895048ab46e83ce43c2d55cfa27"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "801ae7dc5d65c84af7e52c3fe455aac3d22982ee", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "patch": "@@ -1,3 +1,8 @@\n+2019-08-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* configure: Rebuild.\n+\t* configure.ac: Add --with-static-standard-libraries.\n+\n 2019-08-16  Alexandre Oliva <oliva@gnu.org>\n \n \t* MAINTAINERS: aoliva from @redhat.com to @gcc.gnu.org."}, {"sha": "c3ec920df13acd677664abf403420c8561cb2929", "filename": "configure", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "patch": "@@ -806,6 +806,7 @@ with_gmp\n with_gmp_include\n with_gmp_lib\n with_stage1_libs\n+with_static_standard_libraries\n with_stage1_ldflags\n with_boot_libs\n with_boot_ldflags\n@@ -1579,6 +1580,9 @@ Optional Packages:\n   --with-gmp-include=PATH specify directory for installed GMP include files\n   --with-gmp-lib=PATH     specify directory for the installed GMP library\n   --with-stage1-libs=LIBS libraries for stage1\n+  --with-static-standard-libraries\n+                          use -static-libstdc++ and -static-libgcc\n+                          (default=auto)\n   --with-stage1-ldflags=FLAGS\n                           linker flags for stage1\n   --with-boot-libs=LIBS   libraries for stage2 and later\n@@ -5877,6 +5881,23 @@ fi\n \n \n \n+# Whether or not to use -static-libstdc++ and -static-libgcc.  The\n+# default is yes if gcc is being built; no otherwise.  The reason for\n+# this default is that gdb is sometimes linked against GNU Source\n+# Highlight, which is a shared library that uses C++ exceptions.  In\n+# this case, -static-libstdc++ will cause crashes.\n+\n+# Check whether --with-static-standard-libraries was given.\n+if test \"${with_static_standard_libraries+set}\" = set; then :\n+  withval=$with_static_standard_libraries;\n+else\n+  with_static_standard_libraries=auto\n+fi\n+\n+if test \"$with_static_standard_libraries\" = auto; then\n+  with_static_standard_libraries=$have_compiler\n+fi\n+\n # Linker flags to use for stage1 or when not bootstrapping.\n \n # Check whether --with-stage1-ldflags was given.\n@@ -5891,7 +5912,8 @@ else\n  # In stage 1, default to linking libstdc++ and libgcc statically with GCC\n  # if supported.  But if the user explicitly specified the libraries to use,\n  # trust that they are doing what they want.\n- if test \"$stage1_libs\" = \"\" -a \"$have_static_libs\" = yes; then\n+ if test \"$with_static_standard_libraries\" = yes -a \"$stage1_libs\" = \"\" \\\n+     -a \"$have_static_libs\" = yes; then\n    stage1_ldflags=\"-static-libstdc++ -static-libgcc\"\n  fi\n fi"}, {"sha": "1fe97c001cc459f972b9248fbf7285a9c8cbc155", "filename": "configure.ac", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac9103b0e13e49cc4e88abc857d4d043ce20bd4/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "patch": "@@ -1640,6 +1640,19 @@ AC_ARG_WITH(stage1-libs,\n [stage1_libs=])\n AC_SUBST(stage1_libs)\n \n+# Whether or not to use -static-libstdc++ and -static-libgcc.  The\n+# default is yes if gcc is being built; no otherwise.  The reason for\n+# this default is that gdb is sometimes linked against GNU Source\n+# Highlight, which is a shared library that uses C++ exceptions.  In\n+# this case, -static-libstdc++ will cause crashes.\n+AC_ARG_WITH(static-standard-libraries,\n+[AS_HELP_STRING([--with-static-standard-libraries],\n+                [use -static-libstdc++ and -static-libgcc (default=auto)])],\n+[], [with_static_standard_libraries=auto])\n+if test \"$with_static_standard_libraries\" = auto; then\n+  with_static_standard_libraries=$have_compiler\n+fi\n+\n # Linker flags to use for stage1 or when not bootstrapping.\n AC_ARG_WITH(stage1-ldflags,\n [AS_HELP_STRING([--with-stage1-ldflags=FLAGS], [linker flags for stage1])],\n@@ -1652,7 +1665,8 @@ AC_ARG_WITH(stage1-ldflags,\n  # In stage 1, default to linking libstdc++ and libgcc statically with GCC\n  # if supported.  But if the user explicitly specified the libraries to use,\n  # trust that they are doing what they want.\n- if test \"$stage1_libs\" = \"\" -a \"$have_static_libs\" = yes; then\n+ if test \"$with_static_standard_libraries\" = yes -a \"$stage1_libs\" = \"\" \\\n+     -a \"$have_static_libs\" = yes; then\n    stage1_ldflags=\"-static-libstdc++ -static-libgcc\"\n  fi])\n AC_SUBST(stage1_ldflags)"}]}