{"sha": "5f00d0d5c2a43a37e505941c16df52ef12179d41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwMGQwZDVjMmE0M2EzN2U1MDU5NDFjMTZkZjUyZWYxMjE3OWQ0MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-17T19:27:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-17T19:27:27Z"}, "message": "Fix condition for std::variant to be copy constructible\n\nThe standard says the std::variant copy constructor is defined as\ndeleted unless all alternative types are copy constructible, but we were\nmaking it also depend on move constructible. Fix the condition and\nenhance the tests to check the semantics with pathological copy-only\ntypes (i.e. supporting copying but having deleted moves).\n\nThe enhanced tests revealed a regression in copy assignment for\nnon-trivial alternative types, where the assignment would not be\nperformed because the condition in the _Copy_assign_base visitor is\nfalse: is_same_v<remove_reference_t<T&>, remove_reference_t<const T&>>.\n\n\t* include/std/variant (__detail::__variant::_Traits::_S_copy_assign):\n\tDo not depend on whether all alternative types are move constructible.\n\t(__detail::__variant::_Copy_assign_base::operator=): Remove cv-quals\n\tfrom the operand when deciding whether to perform the assignment.\n\t* testsuite/20_util/variant/compile.cc (DeletedMoves): Define type\n\twith deleted move constructor and deleted move assignment operator.\n\t(default_ctor, copy_ctor, move_ctor, copy_assign, move_assign): Check\n\tbehaviour of variants with DeletedMoves as an alternative.\n\t* testsuite/20_util/variant/run.cc (DeletedMoves): Define same type.\n\t(move_ctor, move_assign): Check that moving a variant with a\n\tDeletedMoves alternative falls back to copying instead of moving.\n\nFrom-SVN: r270425", "tree": {"sha": "b9c620ef77a1d247c02bf749316317648c4f6c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c620ef77a1d247c02bf749316317648c4f6c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f00d0d5c2a43a37e505941c16df52ef12179d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f00d0d5c2a43a37e505941c16df52ef12179d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f00d0d5c2a43a37e505941c16df52ef12179d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f00d0d5c2a43a37e505941c16df52ef12179d41/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "990666d05a36fffbe5414c461025c3c4739333cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990666d05a36fffbe5414c461025c3c4739333cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990666d05a36fffbe5414c461025c3c4739333cc"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "0d5e490befe1a31bfc5dbc8a25ac6b2503be19df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f00d0d5c2a43a37e505941c16df52ef12179d41", "patch": "@@ -1,5 +1,17 @@\n 2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/variant (__detail::__variant::_Traits::_S_copy_assign):\n+\tDo not depend on whether all alternative types are move constructible.\n+\t(__detail::__variant::_Copy_assign_base::operator=): Remove cv-quals\n+\tfrom the operand when deciding whether to perform the assignment.\n+\t* testsuite/20_util/variant/compile.cc (DeletedMoves): Define type\n+\twith deleted move constructor and deleted move assignment operator.\n+\t(default_ctor, copy_ctor, move_ctor, copy_assign, move_assign): Check\n+\tbehaviour of variants with DeletedMoves as an alternative.\n+\t* testsuite/20_util/variant/run.cc (DeletedMoves): Define same type.\n+\t(move_ctor, move_assign): Check that moving a variant with a\n+\tDeletedMoves alternative falls back to copying instead of moving.\n+\n \t* testsuite/20_util/variant/compile.cc: Remove empty string literals\n \tfrom static_assert declarations.\n "}, {"sha": "e153363bbf39f046499733ed5a05e333c0674f61", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=5f00d0d5c2a43a37e505941c16df52ef12179d41", "patch": "@@ -279,7 +279,7 @@ namespace __variant\n       static constexpr bool _S_move_ctor =\n \t  (is_move_constructible_v<_Types> && ...);\n       static constexpr bool _S_copy_assign =\n-\t  _S_copy_ctor && _S_move_ctor\n+\t  _S_copy_ctor\n \t  && (is_copy_assignable_v<_Types> && ...);\n       static constexpr bool _S_move_assign =\n \t  _S_move_ctor\n@@ -613,7 +613,7 @@ namespace __variant\n \t\t\t  __variant::__get<__rhs_index>(*this);\n \t\t\tif constexpr (is_same_v<\n \t\t\t\t      remove_reference_t<decltype(__this_mem)>,\n-\t\t\t\t      remove_reference_t<decltype(__rhs_mem)>>)\n+\t\t\t\t      __remove_cvref_t<decltype(__rhs_mem)>>)\n \t\t\t  __this_mem = __rhs_mem;\n \t\t      }\n \t\t  }"}, {"sha": "5cc2a9460a904fcc1c04e8f7c43251a03b328453", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=5f00d0d5c2a43a37e505941c16df52ef12179d41", "patch": "@@ -63,6 +63,15 @@ struct MoveCtorOnly\n struct MoveCtorAndSwapOnly : MoveCtorOnly { };\n void swap(MoveCtorAndSwapOnly&, MoveCtorAndSwapOnly&) { }\n \n+struct DeletedMoves\n+{\n+  DeletedMoves() = default;\n+  DeletedMoves(const DeletedMoves&) = default;\n+  DeletedMoves(DeletedMoves&&) = delete;\n+  DeletedMoves& operator=(const DeletedMoves&) = default;\n+  DeletedMoves& operator=(DeletedMoves&&) = delete;\n+};\n+\n struct nonliteral\n {\n   nonliteral() { }\n@@ -81,6 +90,7 @@ void default_ctor()\n   static_assert(is_default_constructible_v<variant<string, string>>);\n   static_assert(!is_default_constructible_v<variant<AllDeleted, string>>);\n   static_assert(is_default_constructible_v<variant<string, AllDeleted>>);\n+  static_assert(is_default_constructible_v<variant<DeletedMoves>>);\n \n   static_assert(noexcept(variant<int>()));\n   static_assert(!noexcept(variant<Empty>()));\n@@ -93,6 +103,7 @@ void copy_ctor()\n   static_assert(!is_copy_constructible_v<variant<AllDeleted, string>>);\n   static_assert(is_trivially_copy_constructible_v<variant<int>>);\n   static_assert(!is_trivially_copy_constructible_v<variant<std::string>>);\n+  static_assert(is_trivially_copy_constructible_v<variant<DeletedMoves>>);\n \n   {\n     variant<int> a;\n@@ -116,6 +127,7 @@ void move_ctor()\n {\n   static_assert(is_move_constructible_v<variant<int, string>>);\n   static_assert(!is_move_constructible_v<variant<AllDeleted, string>>);\n+  static_assert(is_move_constructible_v<variant<int, DeletedMoves>>); // uses copy ctor\n   static_assert(is_trivially_move_constructible_v<variant<int>>);\n   static_assert(!is_trivially_move_constructible_v<variant<std::string>>);\n   static_assert(!noexcept(variant<int, Empty>(declval<variant<int, Empty>>())));\n@@ -157,6 +169,7 @@ void copy_assign()\n   static_assert(!is_copy_assignable_v<variant<AllDeleted, string>>);\n   static_assert(is_trivially_copy_assignable_v<variant<int>>);\n   static_assert(!is_trivially_copy_assignable_v<variant<string>>);\n+  static_assert(is_trivially_copy_assignable_v<variant<DeletedMoves>>);\n   {\n     variant<Empty> a;\n     static_assert(!noexcept(a = a));\n@@ -171,6 +184,7 @@ void move_assign()\n {\n   static_assert(is_move_assignable_v<variant<int, string>>);\n   static_assert(!is_move_assignable_v<variant<AllDeleted, string>>);\n+  static_assert(is_move_assignable_v<variant<int, DeletedMoves>>); // uses copy assignment\n   static_assert(is_trivially_move_assignable_v<variant<int>>);\n   static_assert(!is_trivially_move_assignable_v<variant<string>>);\n   {"}, {"sha": "c0f48432ca14dcebdb6c19806a67cc11e0cfd90f", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00d0d5c2a43a37e505941c16df52ef12179d41/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=5f00d0d5c2a43a37e505941c16df52ef12179d41", "patch": "@@ -57,6 +57,15 @@ struct AlwaysThrow\n   bool operator>(const AlwaysThrow&) const { VERIFY(false); }\n };\n \n+struct DeletedMoves\n+{\n+  DeletedMoves() = default;\n+  DeletedMoves(const DeletedMoves&) = default;\n+  DeletedMoves(DeletedMoves&&) = delete;\n+  DeletedMoves& operator=(const DeletedMoves&) = default;\n+  DeletedMoves& operator=(DeletedMoves&&) = delete;\n+};\n+\n void default_ctor()\n {\n   variant<monostate, string> v;\n@@ -80,6 +89,12 @@ void move_ctor()\n   VERIFY(holds_alternative<string>(u));\n   VERIFY(get<string>(u) == \"a\");\n   VERIFY(holds_alternative<string>(v));\n+\n+  variant<vector<int>, DeletedMoves> d{std::in_place_index<0>, {1, 2, 3, 4}};\n+  // DeletedMoves is not move constructible, so this uses copy ctor:\n+  variant<vector<int>, DeletedMoves> e(std::move(d));\n+  VERIFY(std::get<0>(d).size() == 4);\n+  VERIFY(std::get<0>(e).size() == 4);\n }\n \n void arbitrary_ctor()\n@@ -137,6 +152,13 @@ void move_assign()\n   VERIFY(holds_alternative<string>(u));\n   VERIFY(get<string>(u) == \"a\");\n   VERIFY(holds_alternative<string>(v));\n+\n+  variant<vector<int>, DeletedMoves> d{std::in_place_index<0>, {1, 2, 3, 4}};\n+  variant<vector<int>, DeletedMoves> e;\n+  // DeletedMoves is not move assignable, so this uses copy assignment:\n+  e = std::move(d);\n+  VERIFY(std::get<0>(d).size() == 4);\n+  VERIFY(std::get<0>(e).size() == 4);\n }\n \n void arbitrary_assign()"}]}