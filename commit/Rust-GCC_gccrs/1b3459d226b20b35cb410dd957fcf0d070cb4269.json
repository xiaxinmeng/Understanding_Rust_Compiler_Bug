{"sha": "1b3459d226b20b35cb410dd957fcf0d070cb4269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzNDU5ZDIyNmIyMGIzNWNiNDEwZGQ5NTdmY2YwZDA3MGNiNDI2OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-18T22:05:15Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-18T22:05:15Z"}, "message": "genopinit.c: Use $ for escape sequences in optab patterns.\n\n\t* genopinit.c: Use $ for escape sequences in optab patterns.\n\tRemove backslashes from optab patterns.  Change $A, $B, $C to\n\texpand to (int) whatever instead of just whatever; remove\n\texplicit (int) from all optab patterns.\n\n\t* gensupport.c (xmalloc, xrealloc, xstrdup): Provide.\n\t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c,\n\tgenextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c,\n\tgenrecog.c: Remove private copies of xmalloc, xrealloc, and\n\nFrom-SVN: r34000", "tree": {"sha": "c1e02b20d60f15a0aa07b56f35bf635004419b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e02b20d60f15a0aa07b56f35bf635004419b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3459d226b20b35cb410dd957fcf0d070cb4269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3459d226b20b35cb410dd957fcf0d070cb4269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3459d226b20b35cb410dd957fcf0d070cb4269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3459d226b20b35cb410dd957fcf0d070cb4269/comments", "author": null, "committer": null, "parents": [{"sha": "606b4c940420871b8a195c6830c0dbe64a239e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606b4c940420871b8a195c6830c0dbe64a239e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606b4c940420871b8a195c6830c0dbe64a239e76"}], "stats": {"total": 510, "additions": 124, "deletions": 386}, "files": [{"sha": "fca8db4ebb306edd329da392c52317639c71c9ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -1,3 +1,16 @@\n+2000-05-18  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* genopinit.c: Use $ for escape sequences in optab patterns.\n+\tRemove backslashes from optab patterns.  Change $A, $B, $C to\n+\texpand to (int) whatever instead of just whatever; remove\n+\texplicit (int) from all optab patterns.\n+\n+\t* gensupport.c (xmalloc, xrealloc, xstrdup): Provide.\n+\t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c,\n+\tgenextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c,\n+\tgenrecog.c: Remove private copies of xmalloc, xrealloc, and\n+\txstrdup.\n+\n 2000-05-18  Richard Henderson  <rth@cygnus.com>\n \n \t* jump.c (jump_optimize_1): Base minimum insn count during"}, {"sha": "6a593edeb21ad5b5849ea53d4d83a42e5e94b3f9", "filename": "gcc/genattr.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -183,32 +183,6 @@ write_units (num_units, multiplicity, simultaneity,\n   printf (\"#define INSN_QUEUE_SIZE %d\\n\", q_size);\n }\n \n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n-\n extern int main PARAMS ((int, char **));\n \n int"}, {"sha": "db4634d98636c3e872938442503fb52608798970", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -5856,32 +5856,6 @@ extend_range (range, min, max)\n   if (range->max < max) range->max = max;\n }\n \n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n-\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n static rtx\n copy_rtx_unchanging (orig)\n      register rtx orig;"}, {"sha": "eac688367c0849b3eccc60a28b02b98902aab8e1", "filename": "gcc/gencodes.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -45,32 +45,6 @@ gen_insn (insn)\n \t    insn_code_number);\n }\n \n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n-\n extern int main PARAMS ((int, char **));\n \n int"}, {"sha": "6508c39d906067fcec34522b48ef0a9c845d8037", "filename": "gcc/genconfig.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -238,33 +238,6 @@ gen_peephole (peep)\n   for (i = 0; i < XVECLEN (peep, 0); i++)\n     walk_insn_part (XVECEXP (peep, 0, i), 1, 0);\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "dab819bf6b103d9f028d6f08828127f106b9332a", "filename": "gcc/genemit.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -738,33 +738,6 @@ output_peephole2_scratches (split)\n \tinsn_nr++;\n     }\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "76cde0e3aec4ad4a325b90e281d3656c06a7e30f", "filename": "gcc/genextract.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -340,42 +340,6 @@ print_path (path)\n     }\n }\n \f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n-\n-char *\n-xstrdup (input)\n-  const char *input;\n-{\n-  register size_t len = strlen (input) + 1;\n-  register char *output = xmalloc (len);\n-  memcpy (output, input, len);\n-  return output;\n-}\n-\f\n extern int main PARAMS ((int, char **));\n \n int"}, {"sha": "14cb8ad9ecd4c957ae32d0577dc71c14b51fb710", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -186,33 +186,6 @@ gen_insn (insn)\n \n   obstack_grow (obstack_ptr, &insn, sizeof (rtx));\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "dcacc9fa392c0dff95cef39536752540670dba45", "filename": "gcc/genopinit.c", "status": "modified", "additions": 74, "deletions": 103, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -38,84 +38,81 @@ Boston, MA 02111-1307, USA.  */\n \n    This array contains a list of optabs that need to be initialized.  Within\n    each string, the name of the pattern to be matched against is delimited\n-   with %( and %).  In the string, %a and %b are used to match a short mode\n+   with $( and $).  In the string, $a and $b are used to match a short mode\n    name (the part of the mode name not including `mode' and converted to\n    lower-case).  When writing out the initializer, the entire string is\n-   used.  %A and %B are replaced with the full name of the mode; %a and %b\n+   used.  $A and $B are replaced with the full name of the mode; $a and $b\n    are replaced with the short form of the name, as above.\n \n-   If %N is present in the pattern, it means the two modes must be consecutive\n-   widths in the same mode class (e.g, QImode and HImode).  %I means that\n-   only integer modes should be considered for the next mode, and %F means\n+   If $N is present in the pattern, it means the two modes must be consecutive\n+   widths in the same mode class (e.g, QImode and HImode).  $I means that\n+   only integer modes should be considered for the next mode, and $F means\n    that only float modes should be considered.\n \n    For some optabs, we store the operation by RTL codes.  These are only\n-   used for comparisons.  In that case, %c and %C are the lower-case and\n+   used for comparisons.  In that case, $c and $C are the lower-case and\n    upper-case forms of the comparison, respectively.  */\n \n-/* The reason we use \\% is to avoid sequences of the form %-capletter-%\n-   which SCCS treats as magic.  This gets warnings which you should ignore.  */\n-\n const char * const optabs[] =\n-{ \"extendtab[(int) %B][(int) %A][0] = CODE_FOR_%(extend%a\\%b2%)\",\n-  \"extendtab[(int) %B][(int) %A][1] = CODE_FOR_%(zero_extend%a\\%b2%)\",\n-  \"fixtab[(int) %A][(int) %B][0] = CODE_FOR_%(fix%F\\%a%I\\%b2%)\",\n-  \"fixtab[(int) %A][(int) %B][1] = CODE_FOR_%(fixuns%F\\%a%b2%)\",\n-  \"fixtrunctab[(int) %A][(int) %B][0] = CODE_FOR_%(fix_trunc%F\\%a%I\\%b2%)\",\n-  \"fixtrunctab[(int) %A][(int) %B][1] = CODE_FOR_%(fixuns_trunc%F\\%a%I\\%b2%)\",\n-  \"floattab[(int) %B][(int) %A][0] = CODE_FOR_%(float%I\\%a%F\\%b2%)\",\n-  \"floattab[(int) %B][(int) %A][1] = CODE_FOR_%(floatuns%I\\%a%F\\%b2%)\",\n-  \"add_optab->handlers[(int) %A].insn_code = CODE_FOR_%(add%a3%)\",\n-  \"sub_optab->handlers[(int) %A].insn_code = CODE_FOR_%(sub%a3%)\",\n-  \"smul_optab->handlers[(int) %A].insn_code = CODE_FOR_%(mul%a3%)\",\n-  \"umul_highpart_optab->handlers[(int) %A].insn_code = CODE_FOR_%(umul%a3_highpart%)\",\n-  \"smul_highpart_optab->handlers[(int) %A].insn_code = CODE_FOR_%(smul%a3_highpart%)\",\n-  \"smul_widen_optab->handlers[(int) %B].insn_code = CODE_FOR_%(mul%a%b3%)%N\",\n-  \"umul_widen_optab->handlers[(int) %B].insn_code = CODE_FOR_%(umul%a%b3%)%N\",\n-  \"sdiv_optab->handlers[(int) %A].insn_code = CODE_FOR_%(div%I\\%a3%)\",\n-  \"udiv_optab->handlers[(int) %A].insn_code = CODE_FOR_%(udiv%I\\%a3%)\",\n-  \"sdivmod_optab->handlers[(int) %A].insn_code = CODE_FOR_%(divmod%a4%)\",\n-  \"udivmod_optab->handlers[(int) %A].insn_code = CODE_FOR_%(udivmod%a4%)\",\n-  \"smod_optab->handlers[(int) %A].insn_code = CODE_FOR_%(mod%a3%)\",\n-  \"umod_optab->handlers[(int) %A].insn_code = CODE_FOR_%(umod%a3%)\",\n-  \"flodiv_optab->handlers[(int) %A].insn_code = CODE_FOR_%(div%F\\%a3%)\",\n-  \"ftrunc_optab->handlers[(int) %A].insn_code = CODE_FOR_%(ftrunc%F\\%a2%)\",\n-  \"and_optab->handlers[(int) %A].insn_code = CODE_FOR_%(and%a3%)\",\n-  \"ior_optab->handlers[(int) %A].insn_code = CODE_FOR_%(ior%a3%)\",\n-  \"xor_optab->handlers[(int) %A].insn_code = CODE_FOR_%(xor%a3%)\",\n-  \"ashl_optab->handlers[(int) %A].insn_code = CODE_FOR_%(ashl%a3%)\",\n-  \"ashr_optab->handlers[(int) %A].insn_code = CODE_FOR_%(ashr%a3%)\",\n-  \"lshr_optab->handlers[(int) %A].insn_code = CODE_FOR_%(lshr%a3%)\",\n-  \"rotl_optab->handlers[(int) %A].insn_code = CODE_FOR_%(rotl%a3%)\",\n-  \"rotr_optab->handlers[(int) %A].insn_code = CODE_FOR_%(rotr%a3%)\",\n-  \"smin_optab->handlers[(int) %A].insn_code = CODE_FOR_%(smin%I\\%a3%)\",\n-  \"smin_optab->handlers[(int) %A].insn_code = CODE_FOR_%(min%F\\%a3%)\",\n-  \"smax_optab->handlers[(int) %A].insn_code = CODE_FOR_%(smax%I\\%a3%)\",\n-  \"smax_optab->handlers[(int) %A].insn_code = CODE_FOR_%(max%F\\%a3%)\",\n-  \"umin_optab->handlers[(int) %A].insn_code = CODE_FOR_%(umin%I\\%a3%)\",\n-  \"umax_optab->handlers[(int) %A].insn_code = CODE_FOR_%(umax%I\\%a3%)\",\n-  \"neg_optab->handlers[(int) %A].insn_code = CODE_FOR_%(neg%a2%)\",\n-  \"abs_optab->handlers[(int) %A].insn_code = CODE_FOR_%(abs%a2%)\",\n-  \"sqrt_optab->handlers[(int) %A].insn_code = CODE_FOR_%(sqrt%a2%)\",\n-  \"sin_optab->handlers[(int) %A].insn_code = CODE_FOR_%(sin%a2%)\",\n-  \"cos_optab->handlers[(int) %A].insn_code = CODE_FOR_%(cos%a2%)\",\n-  \"strlen_optab->handlers[(int) %A].insn_code = CODE_FOR_%(strlen%a%)\",\n-  \"one_cmpl_optab->handlers[(int) %A].insn_code = CODE_FOR_%(one_cmpl%a2%)\",\n-  \"ffs_optab->handlers[(int) %A].insn_code = CODE_FOR_%(ffs%a2%)\",\n-  \"mov_optab->handlers[(int) %A].insn_code = CODE_FOR_%(mov%a%)\",\n-  \"movstrict_optab->handlers[(int) %A].insn_code = CODE_FOR_%(movstrict%a%)\",\n-  \"cmp_optab->handlers[(int) %A].insn_code = CODE_FOR_%(cmp%a%)\",\n-  \"tst_optab->handlers[(int) %A].insn_code = CODE_FOR_%(tst%a%)\",\n-  \"bcc_gen_fctn[(int) %C] = gen_%(b%c%)\",\n-  \"setcc_gen_code[(int) %C] = CODE_FOR_%(s%c%)\",\n-  \"movcc_gen_code[(int) %A] = CODE_FOR_%(mov%acc%)\",\n-  \"cbranch_optab->handlers[(int) %A].insn_code = CODE_FOR_%(cbranch%a4%)\",\n-  \"cmov_optab->handlers[(int) %A].insn_code = CODE_FOR_%(cmov%a6%)\",\n-  \"cstore_optab->handlers[(int) %A].insn_code = CODE_FOR_%(cstore%a4%)\",\n-  \"reload_in_optab[(int) %A] = CODE_FOR_%(reload_in%a%)\",\n-  \"reload_out_optab[(int) %A] = CODE_FOR_%(reload_out%a%)\",\n-  \"movstr_optab[(int) %A] = CODE_FOR_%(movstr%a%)\",\n-  \"clrstr_optab[(int) %A] = CODE_FOR_%(clrstr%a%)\" };\n+{ \"extendtab[$B][$A][0] = CODE_FOR_$(extend$a$b2$)\",\n+  \"extendtab[$B][$A][1] = CODE_FOR_$(zero_extend$a$b2$)\",\n+  \"fixtab[$A][$B][0] = CODE_FOR_$(fix$F$a$I$b2$)\",\n+  \"fixtab[$A][$B][1] = CODE_FOR_$(fixuns$F$a$b2$)\",\n+  \"fixtrunctab[$A][$B][0] = CODE_FOR_$(fix_trunc$F$a$I$b2$)\",\n+  \"fixtrunctab[$A][$B][1] = CODE_FOR_$(fixuns_trunc$F$a$I$b2$)\",\n+  \"floattab[$B][$A][0] = CODE_FOR_$(float$I$a$F$b2$)\",\n+  \"floattab[$B][$A][1] = CODE_FOR_$(floatuns$I$a$F$b2$)\",\n+  \"add_optab->handlers[$A].insn_code = CODE_FOR_$(add$a3$)\",\n+  \"sub_optab->handlers[$A].insn_code = CODE_FOR_$(sub$a3$)\",\n+  \"smul_optab->handlers[$A].insn_code = CODE_FOR_$(mul$a3$)\",\n+  \"umul_highpart_optab->handlers[$A].insn_code = CODE_FOR_$(umul$a3_highpart$)\",\n+  \"smul_highpart_optab->handlers[$A].insn_code = CODE_FOR_$(smul$a3_highpart$)\",\n+  \"smul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(mul$a$b3$)$N\",\n+  \"umul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(umul$a$b3$)$N\",\n+  \"sdiv_optab->handlers[$A].insn_code = CODE_FOR_$(div$I$a3$)\",\n+  \"udiv_optab->handlers[$A].insn_code = CODE_FOR_$(udiv$I$a3$)\",\n+  \"sdivmod_optab->handlers[$A].insn_code = CODE_FOR_$(divmod$a4$)\",\n+  \"udivmod_optab->handlers[$A].insn_code = CODE_FOR_$(udivmod$a4$)\",\n+  \"smod_optab->handlers[$A].insn_code = CODE_FOR_$(mod$a3$)\",\n+  \"umod_optab->handlers[$A].insn_code = CODE_FOR_$(umod$a3$)\",\n+  \"flodiv_optab->handlers[$A].insn_code = CODE_FOR_$(div$F$a3$)\",\n+  \"ftrunc_optab->handlers[$A].insn_code = CODE_FOR_$(ftrunc$F$a2$)\",\n+  \"and_optab->handlers[$A].insn_code = CODE_FOR_$(and$a3$)\",\n+  \"ior_optab->handlers[$A].insn_code = CODE_FOR_$(ior$a3$)\",\n+  \"xor_optab->handlers[$A].insn_code = CODE_FOR_$(xor$a3$)\",\n+  \"ashl_optab->handlers[$A].insn_code = CODE_FOR_$(ashl$a3$)\",\n+  \"ashr_optab->handlers[$A].insn_code = CODE_FOR_$(ashr$a3$)\",\n+  \"lshr_optab->handlers[$A].insn_code = CODE_FOR_$(lshr$a3$)\",\n+  \"rotl_optab->handlers[$A].insn_code = CODE_FOR_$(rotl$a3$)\",\n+  \"rotr_optab->handlers[$A].insn_code = CODE_FOR_$(rotr$a3$)\",\n+  \"smin_optab->handlers[$A].insn_code = CODE_FOR_$(smin$I$a3$)\",\n+  \"smin_optab->handlers[$A].insn_code = CODE_FOR_$(min$F$a3$)\",\n+  \"smax_optab->handlers[$A].insn_code = CODE_FOR_$(smax$I$a3$)\",\n+  \"smax_optab->handlers[$A].insn_code = CODE_FOR_$(max$F$a3$)\",\n+  \"umin_optab->handlers[$A].insn_code = CODE_FOR_$(umin$I$a3$)\",\n+  \"umax_optab->handlers[$A].insn_code = CODE_FOR_$(umax$I$a3$)\",\n+  \"neg_optab->handlers[$A].insn_code = CODE_FOR_$(neg$a2$)\",\n+  \"abs_optab->handlers[$A].insn_code = CODE_FOR_$(abs$a2$)\",\n+  \"sqrt_optab->handlers[$A].insn_code = CODE_FOR_$(sqrt$a2$)\",\n+  \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n+  \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n+  \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\",\n+  \"one_cmpl_optab->handlers[$A].insn_code = CODE_FOR_$(one_cmpl$a2$)\",\n+  \"ffs_optab->handlers[$A].insn_code = CODE_FOR_$(ffs$a2$)\",\n+  \"mov_optab->handlers[$A].insn_code = CODE_FOR_$(mov$a$)\",\n+  \"movstrict_optab->handlers[$A].insn_code = CODE_FOR_$(movstrict$a$)\",\n+  \"cmp_optab->handlers[$A].insn_code = CODE_FOR_$(cmp$a$)\",\n+  \"tst_optab->handlers[$A].insn_code = CODE_FOR_$(tst$a$)\",\n+  \"bcc_gen_fctn[$C] = gen_$(b$c$)\",\n+  \"setcc_gen_code[$C] = CODE_FOR_$(s$c$)\",\n+  \"movcc_gen_code[$A] = CODE_FOR_$(mov$acc$)\",\n+  \"cbranch_optab->handlers[$A].insn_code = CODE_FOR_$(cbranch$a4$)\",\n+  \"cmov_optab->handlers[$A].insn_code = CODE_FOR_$(cmov$a6$)\",\n+  \"cstore_optab->handlers[$A].insn_code = CODE_FOR_$(cstore$a4$)\",\n+  \"reload_in_optab[$A] = CODE_FOR_$(reload_in$a$)\",\n+  \"reload_out_optab[$A] = CODE_FOR_$(reload_out$a$)\",\n+  \"movstr_optab[$A] = CODE_FOR_$(movstr$a$)\",\n+  \"clrstr_optab[$A] = CODE_FOR_$(clrstr$a$)\" };\n \n static void gen_insn PARAMS ((rtx));\n \n@@ -143,13 +140,13 @@ gen_insn (insn)\n       int force_consec = 0;\n       int matches = 1;\n \n-      for (pp = optabs[pindex]; pp[0] != '%' || pp[1] != '('; pp++)\n+      for (pp = optabs[pindex]; pp[0] != '$' || pp[1] != '('; pp++)\n \t;\n \n-      for (pp += 2, np = name; matches && ! (pp[0] == '%' && pp[1] == ')');\n+      for (pp += 2, np = name; matches && ! (pp[0] == '$' && pp[1] == ')');\n \t   pp++)\n \t{\n-\t  if (*pp != '%')\n+\t  if (*pp != '$')\n \t    {\n \t      if (*pp != *np++)\n \t\tbreak;\n@@ -218,7 +215,7 @@ gen_insn (insn)\n \t      }\n \t}\n \n-      if (matches && pp[0] == '%' && pp[1] == ')'\n+      if (matches && pp[0] == '$' && pp[1] == ')'\n \t  && *np == 0\n \t  && (! force_consec || (int) GET_MODE_WIDER_MODE(m1) == m2))\n \tbreak;\n@@ -238,8 +235,8 @@ gen_insn (insn)\n   /* Now write out the initialization, making all required substitutions.  */\n   for (pp = optabs[pindex]; *pp; pp++)\n     {\n-      if (*pp != '%')\n-\tprintf (\"%c\", *pp);\n+      if (*pp != '$')\n+\tputchar (*pp);\n       else\n \tswitch (*++pp)\n \t  {\n@@ -255,15 +252,16 @@ gen_insn (insn)\n \t      putchar (TOLOWER (*np));\n \t    break;\n \t  case 'A':\n-\t    printf (\"%smode\", GET_MODE_NAME(m1));\n+\t    printf (\"(int) %smode\", GET_MODE_NAME(m1));\n \t    break;\n \t  case 'B':\n-\t    printf (\"%smode\", GET_MODE_NAME(m2));\n+\t    printf (\"(int) %smode\", GET_MODE_NAME(m2));\n \t    break;\n \t  case 'c':\n \t    printf (\"%s\", GET_RTX_NAME(op));\n \t    break;\n \t  case 'C':\n+\t    printf (\"(int) \");\n \t    for (np = GET_RTX_NAME(op); *np; np++)\n \t      putchar (TOUPPER (*np));\n \t    break;\n@@ -272,33 +270,6 @@ gen_insn (insn)\n \n   printf (\";\\n\");\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "0d0ae351a7ade73b6336df7d81abddb540e3f772", "filename": "gcc/genoutput.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -862,32 +862,6 @@ gen_split (split)\n \n   place_operands (d);\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "fa8d08fdece7289b5e03789c4a69d526f8c570e2", "filename": "gcc/genpeep.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -368,32 +368,6 @@ print_code (code)\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n     putchar (TOUPPER(*p1));\n }\n-\f\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n \n extern int main PARAMS ((int, char **));\n "}, {"sha": "7c435a071df8f32401d150732ea3db7ee35583cf", "filename": "gcc/genrecog.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -2576,42 +2576,6 @@ record_insn_name (code, name)\n   insn_name_ptr[code] = new;\n }  \n \f\n-char *\n-xstrdup (input)\n-  const char *input;\n-{\n-  register size_t len = strlen (input) + 1;\n-  register char *output = xmalloc (len);\n-  memcpy (output, input, len);\n-  return output;\n-}\n-\n-PTR\n-xrealloc (old, size)\n-  PTR old;\n-  size_t size;\n-{\n-  register PTR ptr;\n-  if (old)\n-    ptr = (PTR) realloc (old, size);\n-  else\n-    ptr = (PTR) malloc (size);\n-  if (!ptr)\n-    fatal (\"virtual memory exhausted\");\n-  return ptr;\n-}\n-\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR val = (PTR) malloc (size);\n-\n-  if (val == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return val;\n-}\n-\f\n static void\n debug_decision_2 (test)\n      struct decision_test *test;"}, {"sha": "120614bcdfc574bd630668b89ecf126f4c5c34e6", "filename": "gcc/gensupport.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3459d226b20b35cb410dd957fcf0d070cb4269/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=1b3459d226b20b35cb410dd957fcf0d070cb4269", "patch": "@@ -847,3 +847,40 @@ read_md_rtx (lineno, seqnr)\n \n   return desc;\n }\n+\n+/* Until we can use the versions in libiberty.  */\n+char *\n+xstrdup (input)\n+  const char *input;\n+{\n+  register size_t len = strlen (input) + 1;\n+  register char *output = xmalloc (len);\n+  memcpy (output, input, len);\n+  return output;\n+}\n+\n+PTR\n+xrealloc (old, size)\n+  PTR old;\n+  size_t size;\n+{\n+  register PTR ptr;\n+  if (old)\n+    ptr = (PTR) realloc (old, size);\n+  else\n+    ptr = (PTR) malloc (size);\n+  if (!ptr)\n+    fatal (\"virtual memory exhausted\");\n+  return ptr;\n+}\n+\n+PTR\n+xmalloc (size)\n+  size_t size;\n+{\n+  register PTR val = (PTR) malloc (size);\n+\n+  if (val == 0)\n+    fatal (\"virtual memory exhausted\");\n+  return val;\n+}"}]}