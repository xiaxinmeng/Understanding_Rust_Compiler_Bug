{"sha": "dd25a747c916bf685457171d18712bbff325babc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyNWE3NDdjOTE2YmY2ODU0NTcxNzFkMTg3MTJiYmZmMzI1YmFiYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2008-05-25T03:58:15Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2008-05-25T03:58:15Z"}, "message": "Delete get_inner_array_type.  Use strip_array_types instead.\n\nFrom-SVN: r135858", "tree": {"sha": "10de1a929aea6ab2bd2733ac21e937d4ec186730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10de1a929aea6ab2bd2733ac21e937d4ec186730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd25a747c916bf685457171d18712bbff325babc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd25a747c916bf685457171d18712bbff325babc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd25a747c916bf685457171d18712bbff325babc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd25a747c916bf685457171d18712bbff325babc/comments", "author": null, "committer": null, "parents": [{"sha": "bcfef99b785c04701dd07510a903b8b90a6d5869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfef99b785c04701dd07510a903b8b90a6d5869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfef99b785c04701dd07510a903b8b90a6d5869"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "5c4a0b3ebdb4688d186ab0f657c8bba16cb955d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -1,3 +1,16 @@\n+2008-05-25  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* c-common.c (strip_array_types): Move function to..\n+\t* tree.c: ..here.\n+\t(get_inner_array_type): Delete.\n+\t* c-common.h (strip_array_types): Move declaration to..\n+\t* tree.h: ..here.\n+\t(get_inner_array_type): Delete.\n+\t* config/i386/i386.c (x86_field_alignment): Use strip_array_types.\n+\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/pa/pa.c (emit_move_sequence): Likewise.\n+\n 2008-05-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.md (*sse_prologue_save_insn): Set length"}, {"sha": "c02b442c7aa0259f6a2091acdd8f7b32c51ea464", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -4173,18 +4173,6 @@ self_promoting_args_p (const_tree parms)\n   return 1;\n }\n \n-/* Recursively examines the array elements of TYPE, until a non-array\n-   element type is found.  */\n-\n-tree\n-strip_array_types (tree type)\n-{\n-  while (TREE_CODE (type) == ARRAY_TYPE)\n-    type = TREE_TYPE (type);\n-\n-  return type;\n-}\n-\n /* Recursively remove any '*' or '&' operator from TYPE.  */\n tree\n strip_pointer_operator (tree t)"}, {"sha": "ea692230bf069c905f4ebb7cc844455b02484a81", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -738,7 +738,6 @@ extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);\n extern int self_promoting_args_p (const_tree);\n-extern tree strip_array_types (tree);\n extern tree strip_pointer_operator (tree);\n extern tree strip_pointer_or_array_types (tree);\n extern HOST_WIDE_INT c_common_to_target_charset (HOST_WIDE_INT);"}, {"sha": "369ae5848678b3c574d64852b8957215a55da041", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -23225,8 +23225,7 @@ x86_field_alignment (tree field, int computed)\n \n   if (TARGET_64BIT || TARGET_ALIGN_DOUBLE)\n     return computed;\n-  mode = TYPE_MODE (TREE_CODE (type) == ARRAY_TYPE\n-\t\t    ? get_inner_array_type (type) : type);\n+  mode = TYPE_MODE (strip_array_types (type));\n   if (mode == DFmode || mode == DCmode\n       || GET_MODE_CLASS (mode) == MODE_INT\n       || GET_MODE_CLASS (mode) == MODE_COMPLEX_INT)"}, {"sha": "009f5faf10cadfe248d670ab5fe5d4d5710eb5c7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -1712,8 +1712,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t\t    decl = TREE_OPERAND (decl, 1);\n \n \t\t  type = TREE_TYPE (decl);\n-\t\t  if (TREE_CODE (type) == ARRAY_TYPE)\n-\t\t    type = get_inner_array_type (type);\n+\t\t  type = strip_array_types (type);\n \n \t\t  if (POINTER_TYPE_P (type))\n \t\t    {"}, {"sha": "09e0fe507cff1d9e02aa0683a126dbcf9b6657a8", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -158,11 +158,10 @@\n /* This now supports a natural alignment mode.  */\n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (TARGET_ALIGN_NATURAL ? (COMPUTED) : \\\n-  (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n-\t      ? get_inner_array_type (FIELD) \\\n-\t      : TREE_TYPE (FIELD)) == DFmode \\\n-   ? MIN ((COMPUTED), 32) : (COMPUTED)))\n+  ((TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\t\\\n+    && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)\t\\\n+   ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n+   : (COMPUTED))\n \n /* AIX increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */"}, {"sha": "e83e0e9697aab3eada82f25f932f65803be4fed6", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -217,9 +217,7 @@ extern int dot_symbols;\n    ? 128\t\t\t\t\t\t\t\t\\\n    : (TARGET_64BIT\t\t\t\t\t\t\t\\\n       && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n-      && TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE\t\t\\\n-\t\t    ? get_inner_array_type (FIELD)\t\t\t\\\n-\t\t    : TREE_TYPE (FIELD)) == DFmode)\t\t\t\\\n+      && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)\t\\\n    ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n "}, {"sha": "38e069389688490dd8c6a7342787fd4ff1f0a935", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -5682,14 +5682,12 @@ build_array_type (tree elt_type, tree index_type)\n   return t;\n }\n \n-/* Return the TYPE of the elements comprising\n-   the innermost dimension of ARRAY.  */\n+/* Recursively examines the array elements of TYPE, until a non-array\n+   element type is found.  */\n \n tree\n-get_inner_array_type (const_tree array)\n+strip_array_types (tree type)\n {\n-  tree type = TREE_TYPE (array);\n-\n   while (TREE_CODE (type) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n "}, {"sha": "6b609fdd2e08e7acbc6bf4eb6155388942eb4c08", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -4011,7 +4011,7 @@ extern int tree_int_cst_sign_bit (const_tree);\n extern bool tree_expr_nonnegative_p (tree);\n extern bool tree_expr_nonnegative_warnv_p (tree, bool *);\n extern bool may_negate_without_overflow_p (const_tree);\n-extern tree get_inner_array_type (const_tree);\n+extern tree strip_array_types (tree);\n \n /* Construct various nodes representing fract or accum data types.  */\n "}, {"sha": "df30eaae50cfe6d66f663b27e47fec2dfea80f8b", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -1,3 +1,8 @@\n+2008-05-25  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* encoding.c (strip_array_types): Rename from get_inner_array_type.\n+\t(rs6000_special_round_type_align): Update.\n+\n 2008-05-09  Julian Brown  <julian@codesourcery.com>\n \n \t* Makefile.in (LTLDFLAGS): New."}, {"sha": "93395ddaffce023c4902b45352c8561060d59aab", "filename": "libobjc/encoding.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd25a747c916bf685457171d18712bbff325babc/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd25a747c916bf685457171d18712bbff325babc/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=dd25a747c916bf685457171d18712bbff325babc", "patch": "@@ -78,7 +78,7 @@ Boston, MA 02110-1301, USA.  */\n \n #define DFmode          _C_DBL\n \n-#define get_inner_array_type(TYPE)      ({const char *_field = (TYPE); \\\n+#define strip_array_types(TYPE)      ({const char *_field = (TYPE); \\\n   while (*_field == _C_ARY_B)\\\n     {\\\n       while (isdigit ((unsigned char)*++_field))\\\n@@ -115,9 +115,7 @@ static int __attribute__ ((__unused__)) not_target_flags = 0;\n #define rs6000_special_round_type_align(STRUCT, COMPUTED, SPECIFIED)\t\\\n   ({ const char *_fields = TYPE_FIELDS (STRUCT);\t\t\t\t\\\n   ((_fields != 0\t\t\t\t\t\t\t\\\n-    && TYPE_MODE (TREE_CODE (TREE_TYPE (_fields)) == ARRAY_TYPE\t\t\\\n-\t\t    ? get_inner_array_type (_fields)\t\t\t\\\n-\t\t    : TREE_TYPE (_fields)) == DFmode)\t\t\t\\\n+    && TYPE_MODE (strip_array_types (TREE_TYPE (_fields))) == DFmode)\t\\\n    ? MAX (MAX (COMPUTED, SPECIFIED), 64)\t\t\t\t\\\n    : MAX (COMPUTED, SPECIFIED));})\n /* FIXME: The word 'fixme' is insufficient to explain the wrong-ness"}]}