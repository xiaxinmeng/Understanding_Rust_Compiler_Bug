{"sha": "48abe922252d8831e7a3724173a22361d900da0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhYmU5MjIyNTJkODgzMWU3YTM3MjQxNzNhMjIzNjFkOTAwZGEwYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-05T00:07:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-05T00:07:16Z"}, "message": "Teach VRP to truncate the case ranges of a switch\n\ngcc/ChangeLog:\n\n\t* tree-vrp.c (simplify_switch_using_ranges): Try to truncate\n\tthe case label ranges that partially overlap with OP's value\n\trange.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp107.c: New test.\n\t* gcc.dg/tree-ssa/vrp108.c: New test.\n\t* gcc.dg/tree-ssa/vrp109.c: New test.\n\nFrom-SVN: r239157", "tree": {"sha": "b47577953fa80571511c54d5252f93dfb24abb32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b47577953fa80571511c54d5252f93dfb24abb32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48abe922252d8831e7a3724173a22361d900da0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48abe922252d8831e7a3724173a22361d900da0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48abe922252d8831e7a3724173a22361d900da0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48abe922252d8831e7a3724173a22361d900da0b/comments", "author": null, "committer": null, "parents": [{"sha": "383321ecc99a881f9f1a8249295d23e717cbdf7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383321ecc99a881f9f1a8249295d23e717cbdf7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383321ecc99a881f9f1a8249295d23e717cbdf7e"}], "stats": {"total": 207, "additions": 206, "deletions": 1}, "files": [{"sha": "83bdb1af7083349d349345eaaf263c6391598616", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -1,3 +1,9 @@\n+2016-08-04  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* tree-vrp.c (simplify_switch_using_ranges): Try to truncate\n+\tthe case label ranges that partially overlap with OP's value\n+\trange.\n+\n 2016-08-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/72805"}, {"sha": "6f057a416efe0bddb7e3e5d4b71fe126bdae09bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -1,3 +1,9 @@\n+2016-08-04  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* gcc.dg/tree-ssa/vrp107.c: New test.\n+\t* gcc.dg/tree-ssa/vrp108.c: New test.\n+\t* gcc.dg/tree-ssa/vrp109.c: New test.\n+\n 2016-08-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.dg/pr70920-4.c: Move dg-require-effective-target before"}, {"sha": "b74f031b1c839b544be616a0eb180f441ab4c0c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp107.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp107.c?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" }  */\n+/* { dg-final { scan-tree-dump \"case 2:\" \"vrp1\" } }  */\n+/* { dg-final { scan-tree-dump \"case 7 ... 8:\" \"vrp1\" } }  */\n+\n+extern void foo (void);\n+extern void bar (void);\n+extern void baz (void);\n+\n+void\n+test (int i)\n+{\n+  if (i >= 2 && i <= 8)\n+  switch (i)\n+    {\n+    case 1: /* Redundant label.  */\n+    case 2:\n+      bar ();\n+      break;\n+    case 7:\n+    case 8:\n+    case 9: /* Redundant label.  */\n+      baz ();\n+      break;\n+    }\n+}"}, {"sha": "49dbfb5447b57919873347def6632b1d70562dcc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp108.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp108.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp108.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp108.c?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" }  */\n+/* { dg-final { scan-tree-dump \"case 1:\" \"vrp1\" } }  */\n+/* { dg-final { scan-tree-dump \"case 9:\" \"vrp1\" } }  */\n+\n+extern void foo (void);\n+extern void bar (void);\n+extern void baz (void);\n+\n+void\n+test (int i)\n+{\n+  if (i < 2 || i > 8)\n+  switch (i)\n+    {\n+    case 1:\n+    case 2: /* Redundant label.  */\n+      bar ();\n+      break;\n+    case 7: /* Redundant label.  */\n+    case 8: /* Redundant label.  */\n+    case 9:\n+      baz ();\n+      break;\n+    }\n+}"}, {"sha": "86299a9c59779364ae5268336b4e06f41386bb3e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp109.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp109.c?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" }  */\n+/* { dg-final { scan-tree-dump \"case 9 ... 10:\" \"vrp1\" } }  */\n+/* { dg-final { scan-tree-dump \"case 17 ... 18:\" \"vrp1\" } }  */\n+/* { dg-final { scan-tree-dump \"case 27 ... 30:\" \"vrp1\" } }  */\n+\n+extern void foo (void);\n+extern void bar (void);\n+\n+void\n+test1 (int i)\n+{\n+  if (i != 7 && i != 8)\n+    switch (i)\n+      {\n+      case 1:\n+      case 2:\n+        foo ();\n+        break;\n+      case 7: /* Redundant label.  */\n+      case 8: /* Redundant label.  */\n+      case 9:\n+      case 10:\n+        bar ();\n+        break;\n+      }\n+}\n+\n+void\n+test3 (int i)\n+{\n+  if (i != 19 && i != 20)\n+    switch (i)\n+      {\n+      case 1:\n+      case 2:\n+        foo ();\n+        break;\n+      case 17:\n+      case 18:\n+      case 19: /* Redundant label.  */\n+      case 20: /* Redundant label.  */\n+        bar ();\n+        break;\n+      }\n+}\n+\n+void\n+test2 (int i)\n+{\n+  if (i != 28 && i != 29)\n+    switch (i)\n+      {\n+      case 1:\n+      case 2:\n+        foo ();\n+        break;\n+      /* No redundancy.  */\n+      case 27:\n+      case 28:\n+      case 29:\n+      case 30:\n+        bar ();\n+        break;\n+      }\n+}"}, {"sha": "cee6424b009ea868eade1f872c88ada822bb8564", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48abe922252d8831e7a3724173a22361d900da0b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=48abe922252d8831e7a3724173a22361d900da0b", "patch": "@@ -9593,7 +9593,7 @@ static bool\n simplify_switch_using_ranges (gswitch *stmt)\n {\n   tree op = gimple_switch_index (stmt);\n-  value_range *vr;\n+  value_range *vr = NULL;\n   bool take_default;\n   edge e;\n   edge_iterator ei;\n@@ -9633,6 +9633,84 @@ simplify_switch_using_ranges (gswitch *stmt)\n \n   n = gimple_switch_num_labels (stmt);\n \n+  /* We can truncate the case label ranges that partially overlap with OP's\n+     value range.  */\n+  size_t min_idx = 1, max_idx = 0;\n+  if (vr != NULL)\n+    find_case_label_range (stmt, vr->min, vr->max, &min_idx, &max_idx);\n+  if (min_idx <= max_idx)\n+    {\n+      tree min_label = gimple_switch_label (stmt, min_idx);\n+      tree max_label = gimple_switch_label (stmt, max_idx);\n+\n+      if (vr->type == VR_RANGE)\n+\t{\n+\t  /* If OP's value range is [2,8] and the low label range is\n+\t     0 ... 3, truncate the label's range to 2 .. 3.  */\n+\t  if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t      && CASE_HIGH (min_label) != NULL_TREE\n+\t      && tree_int_cst_compare (CASE_HIGH (min_label), vr->min) >= 0)\n+\t    CASE_LOW (min_label) = vr->min;\n+\n+\t  /* If OP's value range is [2,8] and the high label range is\n+\t     7 ... 10, truncate the label's range to 7 .. 8.  */\n+\t  if (tree_int_cst_compare (CASE_LOW (max_label), vr->max) <= 0\n+\t      && CASE_HIGH (max_label) != NULL_TREE\n+\t      && tree_int_cst_compare (CASE_HIGH (max_label), vr->max) > 0)\n+\t    CASE_HIGH (max_label) = vr->max;\n+\t}\n+      else if (vr->type == VR_ANTI_RANGE)\n+\t{\n+\t  tree one_cst = build_one_cst (TREE_TYPE (op));\n+\n+\t  if (min_label == max_label)\n+\t    {\n+\t      /* If OP's value range is ~[7,8] and the label's range is\n+\t\t 7 ... 10, truncate the label's range to 9 ... 10.  */\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) == 0\n+\t\t  && CASE_HIGH (min_label) != NULL_TREE\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->max) > 0)\n+\t\tCASE_LOW (min_label)\n+\t\t  = int_const_binop (PLUS_EXPR, vr->max, one_cst);\n+\n+\t      /* If OP's value range is ~[7,8] and the label's range is\n+\t\t 5 ... 8, truncate the label's range to 5 ... 6.  */\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t\t  && CASE_HIGH (min_label) != NULL_TREE\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->max) == 0)\n+\t\tCASE_HIGH (min_label)\n+\t\t  = int_const_binop (MINUS_EXPR, vr->min, one_cst);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* If OP's value range is ~[2,8] and the low label range is\n+\t\t 0 ... 3, truncate the label's range to 0 ... 1.  */\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t\t  && CASE_HIGH (min_label) != NULL_TREE\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->min) >= 0)\n+\t\tCASE_HIGH (min_label)\n+\t\t  = int_const_binop (MINUS_EXPR, vr->min, one_cst);\n+\n+\t      /* If OP's value range is ~[2,8] and the high label range is\n+\t\t 7 ... 10, truncate the label's range to 9 ... 10.  */\n+\t      if (tree_int_cst_compare (CASE_LOW (max_label), vr->max) <= 0\n+\t\t  && CASE_HIGH (max_label) != NULL_TREE\n+\t\t  && tree_int_cst_compare (CASE_HIGH (max_label), vr->max) > 0)\n+\t\tCASE_LOW (max_label)\n+\t\t  = int_const_binop (PLUS_EXPR, vr->max, one_cst);\n+\t    }\n+\t}\n+\n+      /* Canonicalize singleton case ranges.  */\n+      if (tree_int_cst_equal (CASE_LOW (min_label), CASE_HIGH (min_label)))\n+\tCASE_HIGH (min_label) = NULL_TREE;\n+      if (tree_int_cst_equal (CASE_LOW (max_label), CASE_HIGH (max_label)))\n+\tCASE_HIGH (max_label) = NULL_TREE;\n+    }\n+\n+  /* We can also eliminate case labels that lie completely outside OP's value\n+     range.  */\n+\n   /* Bail out if this is just all edges taken.  */\n   if (i == 1\n       && j == n - 1"}]}