{"sha": "9d77af56e7fbe51db303f87b38a191fa81595b8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3N2FmNTZlN2ZiZTUxZGIzMDNmODdiMzhhMTkxZmE4MTU5NWI4ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-19T16:22:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-19T16:22:02Z"}, "message": "g-expect-vms.adb, [...]: Add pragma Warnings (Off) for unassigned IN OUT arguments\n\n2007-12-19  Robert Dewar  <dewar@adacore.com>\n\n\t* g-expect-vms.adb, g-expect.adb, s-poosiz.adb: \n\tAdd pragma Warnings (Off) for unassigned IN OUT arguments\n\n\t* sem_warn.adb (Output_Reference): Suppress messages for internal names\n\t(Check_References): Extensive changes to tune up warnings\n\t(Output_Non_Modifed_In_Out_Warnings): Changes to tune up warnings\n\t(Has_Pragma_Unmodifed_Check_Spec): New function\n\t(Check_References): Implement pragma Unmodified\n\t(Warn_On_Unassigned_Out_Parameter): Implement pragma Unmodified\n\n\t* par-prag.adb: Dummy entry for pragma Unmodified\n\n\t* sem_prag.adb: Implement pragma Unmodified\n\n\t* einfo.ads, einfo.adb: (Has_Pragma_Unmodified): New flag\n\t(Proc_Next_Component_Or_Discriminant): Fix typo.\n\tUpdate comments.\n\n\t* sem_util.adb (Note_Possible_Modification): Add processinng for pragma\n\tUnmodified.\n\t(Reset_Analyzed_Flags): Use Traverse_Proc instead of Traverse_Func,\n\tbecause the former already takes care of discarding the result.\n\t(Mark_Coextensions): Remove ununused initial value from Is_Dynamic.\n\tAdd comment.\n\n\t* snames.h, snames.ads, snames.adb: Add entry for pragma Unmodified\n\nFrom-SVN: r131068", "tree": {"sha": "04693c1133b45828714a8b06bf6425f20c2f00f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04693c1133b45828714a8b06bf6425f20c2f00f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d77af56e7fbe51db303f87b38a191fa81595b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d77af56e7fbe51db303f87b38a191fa81595b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d77af56e7fbe51db303f87b38a191fa81595b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d77af56e7fbe51db303f87b38a191fa81595b8d/comments", "author": null, "committer": null, "parents": [{"sha": "41d4f4a794638918620b77fc226abd61438e5af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d4f4a794638918620b77fc226abd61438e5af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d4f4a794638918620b77fc226abd61438e5af0"}], "stats": {"total": 1388, "additions": 787, "deletions": 601}, "files": [{"sha": "d8be3e75932df5b37a84fdcc83ee77061df451d1", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -494,8 +494,8 @@ package body Einfo is\n \n    --    Renamed_In_Spec                 Flag231\n    --    Implemented_By_Entry            Flag232\n+   --    Has_Pragma_Unmodified           Flag233\n \n-   --    (unused)                        Flag233\n    --    (unused)                        Flag234\n    --    (unused)                        Flag235\n    --    (unused)                        Flag236\n@@ -1362,6 +1362,11 @@ package body Einfo is\n       return Flag179 (Id);\n    end Has_Pragma_Pure_Function;\n \n+   function Has_Pragma_Unmodified (Id : E) return B is\n+   begin\n+      return Flag233 (Id);\n+   end Has_Pragma_Unmodified;\n+\n    function Has_Pragma_Unreferenced (Id : E) return B is\n    begin\n       return Flag180 (Id);\n@@ -3712,6 +3717,11 @@ package body Einfo is\n       Set_Flag179 (Id, V);\n    end Set_Has_Pragma_Pure_Function;\n \n+   procedure Set_Has_Pragma_Unmodified (Id : E; V : B := True) is\n+   begin\n+      Set_Flag233 (Id, V);\n+   end Set_Has_Pragma_Unmodified;\n+\n    procedure Set_Has_Pragma_Unreferenced (Id : E; V : B := True) is\n    begin\n       Set_Flag180 (Id, V);\n@@ -7275,6 +7285,7 @@ package body Einfo is\n       W (\"Has_Pragma_Preelab_Init\",         Flag221 (Id));\n       W (\"Has_Pragma_Pure\",                 Flag203 (Id));\n       W (\"Has_Pragma_Pure_Function\",        Flag179 (Id));\n+      W (\"Has_Pragma_Unmodified\",           Flag233 (Id));\n       W (\"Has_Pragma_Unreferenced\",         Flag180 (Id));\n       W (\"Has_Pragma_Unreferenced_Objects\", Flag212 (Id));\n       W (\"Has_Primitive_Operations\",        Flag120 (Id));\n@@ -8446,7 +8457,13 @@ package body Einfo is\n \n    procedure Proc_Next_Component_Or_Discriminant (N : in out Node_Id) is\n    begin\n-      N := Next_Component (N);\n+      N := Next_Entity (N);\n+      while Present (N) loop\n+         exit when Ekind (N) = E_Component\n+                     or else\n+                   Ekind (N) = E_Discriminant;\n+         N := Next_Entity (N);\n+      end loop;\n    end Proc_Next_Component_Or_Discriminant;\n \n    procedure Proc_Next_Discriminant              (N : in out Node_Id) is"}, {"sha": "6a98477c3c322414e0d92655dd938f3b86a605e4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -1532,6 +1532,8 @@ package Einfo is\n --      Present in E_Variable and E_Constant entities. Set if the entity is\n --      declared in a local procedure p and is accessed in a procedure nested\n --      inside p. Only set when VM_Target /= No_VM currently.\n+--      Why only set it under those conditions, sounds reasonable to always\n+--      set this flag when appropriate ???\n \n --    Has_Nested_Block_With_Handler (Flag101)\n --       Present in scope entities. Set if there is a nested block within the\n@@ -1619,9 +1621,15 @@ package Einfo is\n --       Pure_Function was given for the entity. In some cases, we need to\n --       know that Is_Pure was explicitly set using this pragma.\n \n+--    Has_Pragma_Unmodified (Flag233)\n+--       Present in all entities. Can only be set for variables (E_Variable,\n+--       E_Out_Parameter, E_In_Out_Parameter). Set if a valid pragma Unmodified\n+--       applies to the variable, indicating that no warning should be given\n+--       if the entity is never modified.\n+\n --    Has_Pragma_Unreferenced (Flag180)\n --       Present in all entities. Set if a valid pragma Unreferenced applies\n---       to the pragma, indicating that no warning should be given if the\n+--       to the entity, indicating that no warning should be given if the\n --       entity has no references, but a warning should be given if it is\n --       in fact referenced. For private types, this flag is set in both the\n --       private entity and full entity if the pragma applies to either.\n@@ -2402,8 +2410,8 @@ package Einfo is\n --       extended Import pragmas. Can only be set for OpenVMS versions of GNAT.\n \n --    Is_Ordinary_Fixed_Point_Type (synthesized)\n---       Applies to all entities, true for ordinary fixed point types\n---       and subtypes\n+--       Applies to all entities, true for ordinary fixed point types and\n+--       subtypes.\n \n --    Is_Overriding_Operation (Flag39)\n --       Present in subprograms. Set if the subprogram is a primitive\n@@ -2479,8 +2487,8 @@ package Einfo is\n \n --    Is_Primitive (Flag218)\n --       Present in overloadable entities and in generic subprograms. Set to\n---       indicate that this is a primitive operation of some type, which may be\n---       a tagged type or a non-tagged type. Used to verify overriding\n+--       indicate that this is a primitive operation of some type, which may\n+--       be a tagged type or a non-tagged type. Used to verify overriding\n --       indicators in bodies.\n \n --    Is_Primitive_Wrapper (Flag195)\n@@ -2650,14 +2658,14 @@ package Einfo is\n --       associated with accessibility level.\n \n --    Is_True_Constant (Flag163)\n---       This flag applies to all entities for constants and variables. Set\n---       in constants and variables which have an initial value specified but\n---       which are never assigned, partially or in the whole. For variables, it\n---       means that the variable was initialized but never modified, and hence\n---       can be treated as a constant by the code generator. For a constant, it\n---       means that the constant was not modified by generated code (e.g. to\n---       set a discriminant in an init proc). Assignments by user or generated\n---       code will reset this flag.\n+--       Present in all entities for constants and variables. Set in constants\n+--       and variables which have an initial value specified but which are\n+--       never assigned, partially or in the whole. For variables, it means\n+--       that the variable was initialized but never modified, and hence can be\n+--       treated as a constant by the code generator. For a constant, it means\n+--       that the constant was not modified by generated code (e.g. to set a\n+--       discriminant in an init proc). Assignments by user or generated code\n+--       will reset this flag.\n --\n --       Note: there is one situation in which the back end does not permit\n --       this flag to be set, even if no assignments are generated. This is\n@@ -3378,7 +3386,7 @@ package Einfo is\n --       the Scope will be the parent package, and for a non-child package,\n --       the Scope will be Standard.\n \n---    Scope_Depth (synth)\n+--    Scope_Depth (synthesized)\n --       Applies to program units, blocks, concurrent types and entries,\n --       and also to record types, i.e. to any entity that can appear on\n --       the scope stack. Yields the scope depth value, which for those\n@@ -4473,6 +4481,7 @@ package Einfo is\n    --    Has_Pragma_Pack                     (Flag121)  (base type only)\n    --    Has_Pragma_Pure                     (Flag203)\n    --    Has_Pragma_Pure_Function            (Flag179)\n+   --    Has_Pragma_Unmodified               (Flag233)\n    --    Has_Pragma_Unreferenced             (Flag180)\n    --    Has_Private_Declaration             (Flag155)\n    --    Has_Qualified_Name                  (Flag161)\n@@ -5781,6 +5790,7 @@ package Einfo is\n    function Has_Pragma_Preelab_Init             (Id : E) return B;\n    function Has_Pragma_Pure                     (Id : E) return B;\n    function Has_Pragma_Pure_Function            (Id : E) return B;\n+   function Has_Pragma_Unmodified               (Id : E) return B;\n    function Has_Pragma_Unreferenced             (Id : E) return B;\n    function Has_Pragma_Unreferenced_Objects     (Id : E) return B;\n    function Has_Primitive_Operations            (Id : E) return B;\n@@ -6322,6 +6332,7 @@ package Einfo is\n    procedure Set_Has_Pragma_Preelab_Init         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure                 (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure_Function        (Id : E; V : B := True);\n+   procedure Set_Has_Pragma_Unmodified           (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced_Objects (Id : E; V : B := True);\n    procedure Set_Has_Primitive_Operations        (Id : E; V : B := True);\n@@ -6644,7 +6655,7 @@ package Einfo is\n      renames Proc_Next_Component;\n \n    procedure Next_Component_Or_Discriminant (N : in out Node_Id)\n-     renames Proc_Next_Component;\n+     renames Proc_Next_Component_Or_Discriminant;\n \n    procedure Next_Discriminant              (N : in out Node_Id)\n      renames Proc_Next_Discriminant;\n@@ -6931,6 +6942,7 @@ package Einfo is\n    pragma Inline (Has_Pragma_Preelab_Init);\n    pragma Inline (Has_Pragma_Pure);\n    pragma Inline (Has_Pragma_Pure_Function);\n+   pragma Inline (Has_Pragma_Unmodified);\n    pragma Inline (Has_Pragma_Unreferenced);\n    pragma Inline (Has_Pragma_Unreferenced_Objects);\n    pragma Inline (Has_Primitive_Operations);\n@@ -7343,6 +7355,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Preelab_Init);\n    pragma Inline (Set_Has_Pragma_Pure);\n    pragma Inline (Set_Has_Pragma_Pure_Function);\n+   pragma Inline (Set_Has_Pragma_Unmodified);\n    pragma Inline (Set_Has_Pragma_Unreferenced);\n    pragma Inline (Set_Has_Pragma_Unreferenced_Objects);\n    pragma Inline (Set_Has_Primitive_Operations);"}, {"sha": "d3d9eb6109eee11b1591484c5e38d1f9467dc7aa", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -1082,6 +1082,9 @@ package body GNAT.Expect is\n       Args  : System.Address)\n    is\n       pragma Warnings (Off, Pid);\n+      pragma Warnings (Off, Pipe1);\n+      pragma Warnings (Off, Pipe2);\n+      pragma Warnings (Off, Pipe3);\n \n    begin\n       --  Since the code between fork and exec on VMS executes\n@@ -1099,14 +1102,14 @@ package body GNAT.Expect is\n       --  Since we are still called from the parent process, there is no way\n       --  currently we can cleanly close the unneeded ends of the pipes, but\n       --  this doesn't really matter.\n+\n       --  We could close Pipe1.Output, Pipe2.Input, Pipe3.Input.\n \n       Dup2 (Pipe1.Input,  GNAT.OS_Lib.Standin);\n       Dup2 (Pipe2.Output, GNAT.OS_Lib.Standout);\n       Dup2 (Pipe3.Output, GNAT.OS_Lib.Standerr);\n \n       Portable_Execvp (Pid.Pid'Access, Cmd & ASCII.Nul, Args);\n-\n    end Set_Up_Child_Communications;\n \n    ---------------------------\n@@ -1156,6 +1159,9 @@ package body GNAT.Expect is\n       Pipe3 : in out Pipe_Type)\n    is\n       pragma Warnings (Off, Pid);\n+      pragma Warnings (Off, Pipe1);\n+      pragma Warnings (Off, Pipe2);\n+      pragma Warnings (Off, Pipe3);\n \n    begin\n "}, {"sha": "99e6f638af4bd307eadcf7fd8787a5b2a81d05ce", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -1190,6 +1190,9 @@ package body GNAT.Expect is\n       Args  : System.Address)\n    is\n       pragma Warnings (Off, Pid);\n+      pragma Warnings (Off, Pipe1);\n+      pragma Warnings (Off, Pipe2);\n+      pragma Warnings (Off, Pipe3);\n \n       Input  : File_Descriptor;\n       Output : File_Descriptor;\n@@ -1210,7 +1213,8 @@ package body GNAT.Expect is\n       --  Since we are still called from the parent process, there is no way\n       --  currently we can cleanly close the unneeded ends of the pipes, but\n       --  this doesn't really matter.\n-      --  We could close Pipe1.Output, Pipe2.Input, Pipe3.Input.\n+\n+      --  We could close Pipe1.Output, Pipe2.Input, Pipe3.Input\n \n       Dup2 (Pipe1.Input,  GNAT.OS_Lib.Standin);\n       Dup2 (Pipe2.Output, GNAT.OS_Lib.Standout);\n@@ -1298,6 +1302,9 @@ package body GNAT.Expect is\n       Pipe3 : in out Pipe_Type)\n    is\n       pragma Warnings (Off, Pid);\n+      pragma Warnings (Off, Pipe1);\n+      pragma Warnings (Off, Pipe2);\n+      pragma Warnings (Off, Pipe3);\n    begin\n       Close (Pipe1.Input);\n       Close (Pipe2.Output);"}, {"sha": "5f49f9f82bd3e523142fd37e87f3d51913d4d6f6", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -1181,6 +1181,7 @@ begin\n            Pragma_Unimplemented_Unit            |\n            Pragma_Universal_Aliasing            |\n            Pragma_Universal_Data                |\n+           Pragma_Unmodified                    |\n            Pragma_Unreferenced                  |\n            Pragma_Unreferenced_Objects          |\n            Pragma_Unreserve_All_Interrupts      |"}, {"sha": "a86f1d113fc8d66eef27f3b9595439b7686a32db", "filename": "gcc/ada/s-poosiz.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fs-poosiz.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fs-poosiz.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-poosiz.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -301,6 +301,8 @@ package body System.Pool_Size is\n          Storage_Size : SSE.Storage_Count;\n          Alignment    : SSE.Storage_Count)\n       is\n+         pragma Warnings (Off, Pool);\n+\n          Align_Size : constant SSE.Storage_Count :=\n                         ((Storage_Size + Alignment - 1) / Alignment) *\n                                                                  Alignment;"}, {"sha": "f0f31cbb6290f20cec26443dbaf8a465112d5f78", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -10755,6 +10755,54 @@ package body Sem_Prag is\n                Error_Pragma (\"?pragma% ignored (applies only to AAMP)\");\n             end if;\n \n+         ----------------\n+         -- Unmodified --\n+         ----------------\n+\n+         --  pragma Unmodified (local_Name {, local_Name});\n+\n+         when Pragma_Unmodified => Unmodified : declare\n+            Arg_Node : Node_Id;\n+            Arg_Expr : Node_Id;\n+            Arg_Ent  : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_At_Least_N_Arguments (1);\n+\n+            --  Loop through arguments\n+\n+            Arg_Node := Arg1;\n+            while Present (Arg_Node) loop\n+               Check_No_Identifier (Arg_Node);\n+\n+               --  Note: the analyze call done by Check_Arg_Is_Local_Name\n+               --  will in fact generate reference, so that the entity will\n+               --  have a reference, which will inhibit any warnings about\n+               --  it not being referenced, and also properly show up in the\n+               --  ali file as a reference. But this reference is recorded\n+               --  before the Has_Pragma_Unreferenced flag is set, so that\n+               --  no warning is generated for this reference.\n+\n+               Check_Arg_Is_Local_Name (Arg_Node);\n+               Arg_Expr := Get_Pragma_Arg (Arg_Node);\n+\n+               if Is_Entity_Name (Arg_Expr) then\n+                  Arg_Ent := Entity (Arg_Expr);\n+\n+                  if not Is_Assignable (Arg_Ent) then\n+                     Error_Pragma_Arg\n+                       (\"pragma% can only be applied to a variable\",\n+                        Arg_Expr);\n+                  else\n+                     Set_Has_Pragma_Unmodified (Arg_Ent);\n+                  end if;\n+               end if;\n+\n+               Next (Arg_Node);\n+            end loop;\n+         end Unmodified;\n+\n          ------------------\n          -- Unreferenced --\n          ------------------\n@@ -11501,6 +11549,7 @@ package body Sem_Prag is\n       Pragma_Unimplemented_Unit            => -1,\n       Pragma_Universal_Aliasing            => -1,\n       Pragma_Universal_Data                => -1,\n+      Pragma_Unmodified                    => -1,\n       Pragma_Unreferenced                  => -1,\n       Pragma_Unreferenced_Objects          => -1,\n       Pragma_Unreserve_All_Interrupts      => -1,"}, {"sha": "344122a0df040ce210a29ab79be749847ee78b56", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -7398,7 +7398,9 @@ package body Sem_Util is\n    -----------------------\n \n    procedure Mark_Coextensions (Context_Nod : Node_Id; Root_Nod : Node_Id) is\n-      Is_Dynamic : Boolean := False;\n+      Is_Dynamic : Boolean;\n+      --  Indicates whether the context causes nested coextensions to be\n+      --  dynamic or static\n \n       function Mark_Allocator (N : Node_Id) return Traverse_Result;\n       --  Recognize an allocator node and label it as a dynamic coextension\n@@ -7932,6 +7934,10 @@ package body Sem_Util is\n                if Comes_From_Source (Exp)\n                  or else Modification_Comes_From_Source\n                then\n+                  if Has_Pragma_Unmodified (Ent) then\n+                     Error_Msg_NE (\"?pragma Unmodified given for &!\", N, Ent);\n+                  end if;\n+\n                   Set_Never_Set_In_Source (Ent, False);\n                end if;\n \n@@ -8565,16 +8571,12 @@ package body Sem_Util is\n          return OK;\n       end Clear_Analyzed;\n \n-      function Reset_Analyzed is\n-        new Traverse_Func (Clear_Analyzed);\n-\n-      Discard : Traverse_Result;\n-      pragma Warnings (Off, Discard);\n+      procedure Reset_Analyzed is new Traverse_Proc (Clear_Analyzed);\n \n    --  Start of processing for Reset_Analyzed_Flags\n \n    begin\n-      Discard := Reset_Analyzed (N);\n+      Reset_Analyzed (N);\n    end Reset_Analyzed_Flags;\n \n    ---------------------------"}, {"sha": "46a6954bc21b3f5a413df0334376b839781761e0", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 162, "deletions": 77, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -61,6 +61,16 @@ package body Sem_Warn is\n      Table_Increment      => Alloc.Unreferenced_Entities_Increment,\n      Table_Name           => \"Unreferenced_Entities\");\n \n+   --  The following table collects potential warnings for IN OUT parameters\n+   --  that are referenced but not modified. These warnings are processed when\n+   --  the front end calls the procedure Output_Non_Modifed_In_Out_Warnings.\n+   --  The reason that we defer output of these messages is that we want to\n+   --  detect the case where the relevant procedure is used as a generic actual\n+   --  in an instantation, since we suppress the warnings in this case. The\n+   --  flag Used_As_Generic_Actual will be set in this case, but will not be\n+   --  set till later. Similarly, we suppress the message if the address of\n+   --  the procedure is taken, where the flag Address_Taken may be set later.\n+\n    package In_Out_Warnings is new Table.Table (\n      Table_Component_Type => Entity_Id,\n      Table_Index_Type     => Nat,\n@@ -84,6 +94,12 @@ package body Sem_Warn is\n    --  If E is a parameter entity for a subprogram body, then this function\n    --  returns the corresponding spec entity, if not, E is returned unchanged.\n \n+   function Has_Pragma_Unmodified_Check_Spec (E : Entity_Id) return Boolean;\n+   --  Tests Has_Pragma_Unmodified flag for entity E. If E is not a formal,\n+   --  this is simply the setting of the flag Has_Pragma_Unmodified. If E is\n+   --  a body formal, the setting of the flag in the corresponding spec is\n+   --  also checked (and True returned if either flag is True).\n+\n    function Has_Pragma_Unreferenced_Check_Spec (E : Entity_Id) return Boolean;\n    --  Tests Has_Pragma_Unreferenced flag for entity E. If E is not a formal,\n    --  this is simply the setting of the flag Has_Pragma_Unreferenced. If E is\n@@ -551,8 +567,9 @@ package body Sem_Warn is\n    ----------------------\n \n    procedure Check_References (E : Entity_Id; Anod : Node_Id := Empty) is\n-      E1 : Entity_Id;\n-      UR : Node_Id;\n+      E1  : Entity_Id;\n+      E1T : Entity_Id;\n+      UR  : Node_Id;\n \n       function Body_Formal\n         (E                : Entity_Id;\n@@ -653,6 +670,12 @@ package body Sem_Warn is\n \n       procedure Output_Reference_Error (M : String) is\n       begin\n+         --  Never issue messages for internal names\n+\n+         if Is_Internal_Name (Chars (E1)) then\n+            return;\n+         end if;\n+\n          --  Don't output message for IN OUT formal unless we have the warning\n          --  flag specifically set. It is a bit odd to distinguish IN OUT\n          --  formals from other cases. This distinction is historical in\n@@ -792,14 +815,18 @@ package body Sem_Warn is\n \n       E1 := First_Entity (E);\n       while Present (E1) loop\n+         E1T := Etype (E1);\n \n          --  We only look at source entities with warning flag on. We also\n          --  ignore objects whose type or base type has warnings suppressed.\n+         --  We also don't issue warnings within instances, since the proper\n+         --  place for such warnings is on the template when it is compiled.\n \n          if Comes_From_Source (E1)\n            and then not Warnings_Off (E1)\n-           and then not Warnings_Off (Etype (E1))\n-           and then not Warnings_Off (Base_Type (Etype (E1)))\n+           and then not Warnings_Off (E1T)\n+           and then not Warnings_Off (Base_Type (E1T))\n+           and then Instantiation_Location (Sloc (E1)) = No_Location\n          then\n             --  We are interested in variables and out/in-out parameters, but\n             --  we exclude protected types, too complicated to worry about.\n@@ -832,8 +859,10 @@ package body Sem_Warn is\n                then\n                   null;\n \n+               --  Special processing for access types\n+\n                elsif Present (UR)\n-                 and then Is_Access_Type (Etype (E1))\n+                 and then Is_Access_Type (E1T)\n                then\n                   --  For access types, the only time we made a UR entry was\n                   --  for a dereference, and so we post the appropriate warning\n@@ -852,10 +881,8 @@ package body Sem_Warn is\n                --  the package.\n \n                elsif Warn_On_Constant\n-                 and then ((Ekind (E1) = E_Variable\n-                              and then Has_Initial_Value (E1))\n-                             or else\n-                            Ekind (E1) = E_In_Out_Parameter)\n+                 and then (Ekind (E1) = E_Variable\n+                             and then Has_Initial_Value (E1))\n                  and then Never_Set_In_Source_Check_Spec (E1)\n                  and then not Address_Taken (E1)\n                  and then not Generic_Package_Spec_Entity (E1)\n@@ -875,73 +902,29 @@ package body Sem_Warn is\n                   --  the case of exception choice (and a bit more too, but not\n                   --  worth doing more investigation here).\n \n-                  elsif Is_RTE (Etype (E1), RE_Exception_Occurrence) then\n+                  elsif Is_RTE (E1T, RE_Exception_Occurrence) then\n                      null;\n \n                   --  Here we give the warning if referenced and no pragma\n-                  --  Unreferenced is present.\n+                  --  Unreferenced or Unmodified is present.\n \n                   else\n+                     --  Variable case\n+\n                      if Ekind (E1) = E_Variable then\n                         if Referenced_Check_Spec (E1)\n                           and then not Has_Pragma_Unreferenced_Check_Spec (E1)\n+                          and then not Has_Pragma_Unmodified_Check_Spec (E1)\n                         then\n                            Error_Msg_N\n                              (\"?& is not modified, \"\n                               & \"could be declared constant!\",\n                               E1);\n                         end if;\n-\n-                     else pragma Assert (Ekind (E1) = E_In_Out_Parameter);\n-                        if Referenced_Check_Spec (E1)\n-                          and then\n-                            not Has_Pragma_Unreferenced_Check_Spec (E1)\n-                        then\n-                           --  Suppress warning if private type, since in this\n-                           --  case it may be quite reasonable for the logical\n-                           --  view to be in out, even if the implementation\n-                           --  ends up using access types.\n-\n-                           if Has_Private_Declaration (Etype (E1)) then\n-                              null;\n-\n-                           --  Suppress warning for any composite type, since\n-                           --  for composites it seems quite reasonable to pass\n-                           --  a value of the composite type and then modify\n-                           --  just a component.\n-\n-                           elsif Is_Composite_Type (Etype (E1)) then\n-                              null;\n-\n-                           --  Suppress warning for parameter of dispatching\n-                           --  operation, since it is quite reasonable to have\n-                           --  an operation that is overridden, and for some\n-                           --  subclasses needs to be IN OUT and for others\n-                           --  the parameter does not happen to be assigned.\n-\n-                           elsif Is_Dispatching_Operation\n-                             (Scope (Goto_Spec_Entity (E1)))\n-                           then\n-                              null;\n-\n-                           --  OK, looks like warning for an IN OUT parameter\n-                           --  that could be IN makes sense, but we delay the\n-                           --  output of the warning, pending possibly finding\n-                           --  out later on that the associated subprogram is\n-                           --  used as a generic actual, or its address/access\n-                           --  is taken. In these two cases, we suppress the\n-                           --  warning because the context may force use of IN\n-                           --  OUT, even if in this particular case the formal\n-                           --  is not modifed.\n-\n-                           else\n-                              In_Out_Warnings.Append (E1);\n-                           end if;\n-                        end if;\n                      end if;\n                   end if;\n \n-                  --  Other cases of a variable never set in source\n+               --  Other cases of a variable or parameter never set in source\n \n                elsif Never_Set_In_Source_Check_Spec (E1)\n \n@@ -971,26 +954,89 @@ package body Sem_Warn is\n                   --  never referenced, since again it seems odd to rely on\n                   --  default initialization to set an out parameter value.\n \n-                 and then (Is_Access_Type (Etype (E1))\n+                 and then (Is_Access_Type (E1T)\n                             or else Ekind (E1) = E_Out_Parameter\n-                            or else not Is_Fully_Initialized_Type (Etype (E1)))\n+                            or else not Is_Fully_Initialized_Type (E1T))\n                then\n                   --  Do not output complaint about never being assigned a\n                   --  value if a pragma Unreferenced applies to the variable\n                   --  we are examining, or if it is a parameter, if there is\n                   --  a pragma Unreferenced for the corresponding spec.\n \n                   if Has_Pragma_Unreferenced_Check_Spec (E1)\n-                    or else Has_Pragma_Unreferenced_Objects (Etype (E1))\n+                    or else Has_Pragma_Unreferenced_Objects (E1T)\n                   then\n                      null;\n \n-                  --  Case of unreferenced formal\n+                  --  IN OUT parameter case where parameter is referenced. We\n+                  --  separate this out, since this is the case where we delay\n+                  --  output of the warning until more information is available\n+                  --  (about use in an instantiation or address being taken).\n+\n+                  elsif Ekind (E1) = E_In_Out_Parameter\n+                    and then Referenced_Check_Spec (E1)\n+                  then\n+                     --  Suppress warning if private type, and the procedure\n+                     --  has a separate declaration in a different unit. This\n+                     --  is the case where the client of a package sees only\n+                     --  the private type, and it it may be quite reasonable\n+                     --  for the logical view to be in out, even if the\n+                     --  implementation ends up using access types or some\n+                     --  other method to achieve the local effect of a\n+                     --  modification. On the other hand if the spec and body\n+                     --  are in the same unit, we are in the package body and\n+                     --  there we less  excuse for a junk IN OUT parameter.\n+\n+                     if Has_Private_Declaration (E1T)\n+                       and then Present (Spec_Entity (E1))\n+                       and then not In_Same_Source_Unit (E1, Spec_Entity (E1))\n+                     then\n+                        null;\n+\n+                     --  Suppress warning for any parameter of a dispatching\n+                     --  operation, since it is quite reasonable to have an\n+                     --  operation that is overridden, and for some subclasses\n+                     --  needs to be IN OUT and for others the parameter does\n+                     --  not happen to be assigned.\n+\n+                     elsif Is_Dispatching_Operation\n+                             (Scope (Goto_Spec_Entity (E1)))\n+                     then\n+                        null;\n+\n+                     --  Suppress warning if composite type containing any\n+                     --  access element component, since the logical effect\n+                     --  of modifying a parameter may be achieved by modifying\n+                     --  a referenced entity.\n+\n+                     elsif Is_Composite_Type (E1T)\n+                       and then Has_Access_Values (E1T)\n+                     then\n+                        null;\n+\n+                     --  OK, looks like warning for an IN OUT parameter that\n+                     --  could be IN makes sense, but we delay the output of\n+                     --  the warning, pending possibly finding out later on\n+                     --  that the associated subprogram is used as a generic\n+                     --  actual, or its address/access is taken. In these two\n+                     --  cases, we suppress the warning because the context may\n+                     --  force use of IN OUT, even if in this particular case\n+                     --  the formal is not modifed.\n+\n+                     else\n+                        In_Out_Warnings.Append (E1);\n+                     end if;\n+\n+                  --  Other cases of formals\n \n                   elsif Is_Formal (E1) then\n                      if Referenced_Check_Spec (E1) then\n-                        Output_Reference_Error\n-                          (\"?formal parameter& is read but never assigned!\");\n+                        if not Has_Pragma_Unmodified_Check_Spec (E1) then\n+                           Output_Reference_Error\n+                             (\"?formal parameter& is read but \"\n+                              & \"never assigned!\");\n+                        end if;\n+\n                      else\n                         Output_Reference_Error\n                           (\"?formal parameter& is not referenced!\");\n@@ -1054,7 +1100,9 @@ package body Sem_Warn is\n                   --  are only for functions, and functions do not allow OUT\n                   --  parameters.)\n \n-                  if Nkind (UR) = N_Simple_Return_Statement then\n+                  if Nkind (UR) = N_Simple_Return_Statement\n+                    and then not Has_Pragma_Unmodified_Check_Spec (E1)\n+                  then\n                      Error_Msg_NE\n                        (\"?OUT parameter& not set before return\", UR, E1);\n \n@@ -1073,7 +1121,7 @@ package body Sem_Warn is\n                            Comp : Entity_Id;\n \n                         begin\n-                           Comp := First_Entity (Etype (E1));\n+                           Comp := First_Entity (E1T);\n                            while Present (Comp) loop\n                               if Ekind (Comp) = E_Component\n                                 and then Nkind (Parent (Comp)) =\n@@ -1235,7 +1283,7 @@ package body Sem_Warn is\n                and then ((Ekind (E1) /= E_Variable\n                              and then Ekind (E1) /= E_Constant\n                              and then Ekind (E1) /= E_Component)\n-                           or else not Is_Task_Type (Etype (E1)))\n+                           or else not Is_Task_Type (E1T))\n \n                --  For subunits, only place warnings on the main unit itself,\n                --  since parent units are not completely compiled\n@@ -2219,6 +2267,23 @@ package body Sem_Warn is\n       end if;\n    end Goto_Spec_Entity;\n \n+   --------------------------------------\n+   -- Has_Pragma_Unmodified_Check_Spec --\n+   --------------------------------------\n+\n+   function Has_Pragma_Unmodified_Check_Spec\n+     (E : Entity_Id) return Boolean\n+   is\n+   begin\n+      if Is_Formal (E) and then Present (Spec_Entity (E)) then\n+         return Has_Pragma_Unmodified (E)\n+                  or else\n+                Has_Pragma_Unmodified (Spec_Entity (E));\n+      else\n+         return Has_Pragma_Unmodified (E);\n+      end if;\n+   end Has_Pragma_Unmodified_Check_Spec;\n+\n    ----------------------------------------\n    -- Has_Pragma_Unreferenced_Check_Spec --\n    ----------------------------------------\n@@ -2344,16 +2409,31 @@ package body Sem_Warn is\n \n          begin\n             --  Suppress warning in specific cases (see details in comments for\n-            --  No_Warn_On_In_Out).\n+            --  No_Warn_On_In_Out), or if there is a pragma Unmodified.\n \n-            if No_Warn_On_In_Out (E1) then\n+            if No_Warn_On_In_Out (E1)\n+              or else Has_Pragma_Unmodified_Check_Spec (E1)\n+            then\n                null;\n \n             --  Here we generate the warning\n \n             else\n-               Error_Msg_N (\"?formal parameter & is not modified!\", E1);\n-               Error_Msg_N (\"\\?mode could be IN instead of `IN OUT`!\", E1);\n+               --  If -gnatwc is set then output message that we could be IN\n+\n+               if Warn_On_Constant then\n+                  Error_Msg_N (\"?formal parameter & is not modified!\", E1);\n+                  Error_Msg_N (\"\\?mode could be IN instead of `IN OUT`!\", E1);\n+\n+               --  We do not generate warnings for IN OUT parameters unless we\n+               --  have at least -gnatwu. This is deliberately inconsistent\n+               --  with the treatment of variables, but otherwise we get too\n+               --  many unexpected warnings in default mode.\n+\n+               elsif Check_Unreferenced then\n+                  Error_Msg_N (\"?formal parameter& is read but \"\n+                               & \"never assigned!\", E1);\n+               end if;\n \n                --  Kill any other warnings on this entity, since this is the\n                --  one that should dominate any other unreferenced warning.\n@@ -3349,10 +3429,12 @@ package body Sem_Warn is\n                     and then not Is_Return_Object (E)\n                     and then not Is_Aliased (E)\n                     and then No (Renamed_Object (E))\n-\n                   then\n-                     Error_Msg_N\n-                       (\"?variable & is assigned but never read!\", E);\n+                     if not Has_Pragma_Unmodified_Check_Spec (E) then\n+                        Error_Msg_N\n+                          (\"?variable & is assigned but never read!\", E);\n+                     end if;\n+\n                      Set_Last_Assignment (E, Empty);\n                   end if;\n \n@@ -3532,9 +3614,12 @@ package body Sem_Warn is\n                if No (N) then\n \n                   --  Don't give this for OUT and IN OUT formals, since\n-                  --  clearly caller may reference the assigned value.\n+                  --  clearly caller may reference the assigned value. Also\n+                  --  never give such warnings for internal variables.\n \n-                  if Ekind (Ent) = E_Variable then\n+                  if Ekind (Ent) = E_Variable\n+                    and then not Is_Internal_Name (Chars (Ent))\n+                  then\n                      if Referenced_As_Out_Parameter (Ent) then\n                         Error_Msg_NE\n                           (\"?& modified by call, but value never referenced\","}, {"sha": "6b3e9eea76378512ecce17ef4ae3289ef12264b1", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -326,6 +326,7 @@ package body Snames is\n      \"unchecked_union#\" &\n      \"unimplemented_unit#\" &\n      \"universal_aliasing#\" &\n+     \"unmodified#\" &\n      \"unreferenced#\" &\n      \"unreferenced_objects#\" &\n      \"unreserve_all_interrupts#\" &"}, {"sha": "2b4d47b101c14600e980ee48e5b7126f0f5947eb", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 488, "deletions": 486, "changes": 974, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -519,13 +519,14 @@ package Snames is\n    Name_Unchecked_Union                : constant Name_Id := N + 265; -- GNAT\n    Name_Unimplemented_Unit             : constant Name_Id := N + 266; -- GNAT\n    Name_Universal_Aliasing             : constant Name_Id := N + 267; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 268; -- GNAT\n-   Name_Unreferenced_Objects           : constant Name_Id := N + 269; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 270; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 271;\n-   Name_Volatile_Components            : constant Name_Id := N + 272;\n-   Name_Weak_External                  : constant Name_Id := N + 273; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 273;\n+   Name_Unmodified                     : constant Name_Id := N + 268; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 269; -- GNAT\n+   Name_Unreferenced_Objects           : constant Name_Id := N + 270; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 271; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 272;\n+   Name_Volatile_Components            : constant Name_Id := N + 273;\n+   Name_Weak_External                  : constant Name_Id := N + 274; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 274;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -536,119 +537,119 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 274;\n-   Name_Ada                            : constant Name_Id := N + 274;\n-   Name_Assembler                      : constant Name_Id := N + 275;\n-   Name_CIL                            : constant Name_Id := N + 276;\n-   Name_COBOL                          : constant Name_Id := N + 277;\n-   Name_CPP                            : constant Name_Id := N + 278;\n-   Name_Fortran                        : constant Name_Id := N + 279;\n-   Name_Intrinsic                      : constant Name_Id := N + 280;\n-   Name_Java                           : constant Name_Id := N + 281;\n-   Name_Stdcall                        : constant Name_Id := N + 282;\n-   Name_Stubbed                        : constant Name_Id := N + 283;\n-   Last_Convention_Name                : constant Name_Id := N + 283;\n+   First_Convention_Name               : constant Name_Id := N + 275;\n+   Name_Ada                            : constant Name_Id := N + 275;\n+   Name_Assembler                      : constant Name_Id := N + 276;\n+   Name_CIL                            : constant Name_Id := N + 277;\n+   Name_COBOL                          : constant Name_Id := N + 278;\n+   Name_CPP                            : constant Name_Id := N + 279;\n+   Name_Fortran                        : constant Name_Id := N + 280;\n+   Name_Intrinsic                      : constant Name_Id := N + 281;\n+   Name_Java                           : constant Name_Id := N + 282;\n+   Name_Stdcall                        : constant Name_Id := N + 283;\n+   Name_Stubbed                        : constant Name_Id := N + 284;\n+   Last_Convention_Name                : constant Name_Id := N + 284;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 284;\n-   Name_Assembly                       : constant Name_Id := N + 285;\n+   Name_Asm                            : constant Name_Id := N + 285;\n+   Name_Assembly                       : constant Name_Id := N + 286;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 286;\n+   Name_Default                        : constant Name_Id := N + 287;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are preset as synonyms for CPP\n \n-   Name_C_Plus_Plus                    : constant Name_Id := N + 287;\n+   Name_C_Plus_Plus                    : constant Name_Id := N + 288;\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 288;\n-   Name_Win32                          : constant Name_Id := N + 289;\n+   Name_DLL                            : constant Name_Id := N + 289;\n+   Name_Win32                          : constant Name_Id := N + 290;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 290;\n-   Name_Attribute_Name                 : constant Name_Id := N + 291;\n-   Name_Body_File_Name                 : constant Name_Id := N + 292;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 293;\n-   Name_Check                          : constant Name_Id := N + 294;\n-   Name_Casing                         : constant Name_Id := N + 295;\n-   Name_Code                           : constant Name_Id := N + 296;\n-   Name_Component                      : constant Name_Id := N + 297;\n-   Name_Component_Size_4               : constant Name_Id := N + 298;\n-   Name_Copy                           : constant Name_Id := N + 299;\n-   Name_D_Float                        : constant Name_Id := N + 300;\n-   Name_Descriptor                     : constant Name_Id := N + 301;\n-   Name_Dot_Replacement                : constant Name_Id := N + 302;\n-   Name_Dynamic                        : constant Name_Id := N + 303;\n-   Name_Entity                         : constant Name_Id := N + 304;\n-   Name_Entry_Count                    : constant Name_Id := N + 305;\n-   Name_External_Name                  : constant Name_Id := N + 306;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 307;\n-   Name_Form                           : constant Name_Id := N + 308;\n-   Name_G_Float                        : constant Name_Id := N + 309;\n-   Name_Gcc                            : constant Name_Id := N + 310;\n-   Name_Gnat                           : constant Name_Id := N + 311;\n-   Name_GPL                            : constant Name_Id := N + 312;\n-   Name_IEEE_Float                     : constant Name_Id := N + 313;\n-   Name_Ignore                         : constant Name_Id := N + 314;\n-   Name_Info                           : constant Name_Id := N + 315;\n-   Name_Internal                       : constant Name_Id := N + 316;\n-   Name_Link_Name                      : constant Name_Id := N + 317;\n-   Name_Lowercase                      : constant Name_Id := N + 318;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 319;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 320;\n-   Name_Max_Size                       : constant Name_Id := N + 321;\n-   Name_Mechanism                      : constant Name_Id := N + 322;\n-   Name_Message                        : constant Name_Id := N + 323;\n-   Name_Mixedcase                      : constant Name_Id := N + 324;\n-   Name_Modified_GPL                   : constant Name_Id := N + 325;\n-   Name_Name                           : constant Name_Id := N + 326;\n-   Name_NCA                            : constant Name_Id := N + 327;\n-   Name_No                             : constant Name_Id := N + 328;\n-   Name_No_Dependence                  : constant Name_Id := N + 329;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 330;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 331;\n-   Name_No_Requeue                     : constant Name_Id := N + 332;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 333;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 334;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 335;\n-   Name_On                             : constant Name_Id := N + 336;\n-   Name_Parameter_Types                : constant Name_Id := N + 337;\n-   Name_Reference                      : constant Name_Id := N + 338;\n-   Name_Restricted                     : constant Name_Id := N + 339;\n-   Name_Result_Mechanism               : constant Name_Id := N + 340;\n-   Name_Result_Type                    : constant Name_Id := N + 341;\n-   Name_Runtime                        : constant Name_Id := N + 342;\n-   Name_SB                             : constant Name_Id := N + 343;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 344;\n-   Name_Section                        : constant Name_Id := N + 345;\n-   Name_Semaphore                      : constant Name_Id := N + 346;\n-   Name_Simple_Barriers                : constant Name_Id := N + 347;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 348;\n-   Name_State                          : constant Name_Id := N + 349;\n-   Name_Static                         : constant Name_Id := N + 350;\n-   Name_Stack_Size                     : constant Name_Id := N + 351;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 352;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 353;\n-   Name_Task_Type                      : constant Name_Id := N + 354;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 355;\n-   Name_Top_Guard                      : constant Name_Id := N + 356;\n-   Name_UBA                            : constant Name_Id := N + 357;\n-   Name_UBS                            : constant Name_Id := N + 358;\n-   Name_UBSB                           : constant Name_Id := N + 359;\n-   Name_Unit_Name                      : constant Name_Id := N + 360;\n-   Name_Unknown                        : constant Name_Id := N + 361;\n-   Name_Unrestricted                   : constant Name_Id := N + 362;\n-   Name_Uppercase                      : constant Name_Id := N + 363;\n-   Name_User                           : constant Name_Id := N + 364;\n-   Name_VAX_Float                      : constant Name_Id := N + 365;\n-   Name_VMS                            : constant Name_Id := N + 366;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 367;\n-   Name_Working_Storage                : constant Name_Id := N + 368;\n+   Name_As_Is                          : constant Name_Id := N + 291;\n+   Name_Attribute_Name                 : constant Name_Id := N + 292;\n+   Name_Body_File_Name                 : constant Name_Id := N + 293;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 294;\n+   Name_Check                          : constant Name_Id := N + 295;\n+   Name_Casing                         : constant Name_Id := N + 296;\n+   Name_Code                           : constant Name_Id := N + 297;\n+   Name_Component                      : constant Name_Id := N + 298;\n+   Name_Component_Size_4               : constant Name_Id := N + 299;\n+   Name_Copy                           : constant Name_Id := N + 300;\n+   Name_D_Float                        : constant Name_Id := N + 301;\n+   Name_Descriptor                     : constant Name_Id := N + 302;\n+   Name_Dot_Replacement                : constant Name_Id := N + 303;\n+   Name_Dynamic                        : constant Name_Id := N + 304;\n+   Name_Entity                         : constant Name_Id := N + 305;\n+   Name_Entry_Count                    : constant Name_Id := N + 306;\n+   Name_External_Name                  : constant Name_Id := N + 307;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 308;\n+   Name_Form                           : constant Name_Id := N + 309;\n+   Name_G_Float                        : constant Name_Id := N + 310;\n+   Name_Gcc                            : constant Name_Id := N + 311;\n+   Name_Gnat                           : constant Name_Id := N + 312;\n+   Name_GPL                            : constant Name_Id := N + 313;\n+   Name_IEEE_Float                     : constant Name_Id := N + 314;\n+   Name_Ignore                         : constant Name_Id := N + 315;\n+   Name_Info                           : constant Name_Id := N + 316;\n+   Name_Internal                       : constant Name_Id := N + 317;\n+   Name_Link_Name                      : constant Name_Id := N + 318;\n+   Name_Lowercase                      : constant Name_Id := N + 319;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 320;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 321;\n+   Name_Max_Size                       : constant Name_Id := N + 322;\n+   Name_Mechanism                      : constant Name_Id := N + 323;\n+   Name_Message                        : constant Name_Id := N + 324;\n+   Name_Mixedcase                      : constant Name_Id := N + 325;\n+   Name_Modified_GPL                   : constant Name_Id := N + 326;\n+   Name_Name                           : constant Name_Id := N + 327;\n+   Name_NCA                            : constant Name_Id := N + 328;\n+   Name_No                             : constant Name_Id := N + 329;\n+   Name_No_Dependence                  : constant Name_Id := N + 330;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 331;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 332;\n+   Name_No_Requeue                     : constant Name_Id := N + 333;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 334;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 335;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 336;\n+   Name_On                             : constant Name_Id := N + 337;\n+   Name_Parameter_Types                : constant Name_Id := N + 338;\n+   Name_Reference                      : constant Name_Id := N + 339;\n+   Name_Restricted                     : constant Name_Id := N + 340;\n+   Name_Result_Mechanism               : constant Name_Id := N + 341;\n+   Name_Result_Type                    : constant Name_Id := N + 342;\n+   Name_Runtime                        : constant Name_Id := N + 343;\n+   Name_SB                             : constant Name_Id := N + 344;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 345;\n+   Name_Section                        : constant Name_Id := N + 346;\n+   Name_Semaphore                      : constant Name_Id := N + 347;\n+   Name_Simple_Barriers                : constant Name_Id := N + 348;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 349;\n+   Name_State                          : constant Name_Id := N + 350;\n+   Name_Static                         : constant Name_Id := N + 351;\n+   Name_Stack_Size                     : constant Name_Id := N + 352;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 353;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 354;\n+   Name_Task_Type                      : constant Name_Id := N + 355;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 356;\n+   Name_Top_Guard                      : constant Name_Id := N + 357;\n+   Name_UBA                            : constant Name_Id := N + 358;\n+   Name_UBS                            : constant Name_Id := N + 359;\n+   Name_UBSB                           : constant Name_Id := N + 360;\n+   Name_Unit_Name                      : constant Name_Id := N + 361;\n+   Name_Unknown                        : constant Name_Id := N + 362;\n+   Name_Unrestricted                   : constant Name_Id := N + 363;\n+   Name_Uppercase                      : constant Name_Id := N + 364;\n+   Name_User                           : constant Name_Id := N + 365;\n+   Name_VAX_Float                      : constant Name_Id := N + 366;\n+   Name_VMS                            : constant Name_Id := N + 367;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 368;\n+   Name_Working_Storage                : constant Name_Id := N + 369;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -662,466 +663,466 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 369;\n-   Name_Abort_Signal                   : constant Name_Id := N + 369; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 370;\n-   Name_Address                        : constant Name_Id := N + 371;\n-   Name_Address_Size                   : constant Name_Id := N + 372; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 373;\n-   Name_Alignment                      : constant Name_Id := N + 374;\n-   Name_Asm_Input                      : constant Name_Id := N + 375; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 376; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 377; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 378; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 379;\n-   Name_Bit_Position                   : constant Name_Id := N + 380; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 381;\n-   Name_Callable                       : constant Name_Id := N + 382;\n-   Name_Caller                         : constant Name_Id := N + 383;\n-   Name_Code_Address                   : constant Name_Id := N + 384; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 385;\n-   Name_Compose                        : constant Name_Id := N + 386;\n-   Name_Constrained                    : constant Name_Id := N + 387;\n-   Name_Count                          : constant Name_Id := N + 388;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 389; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 390;\n-   Name_Delta                          : constant Name_Id := N + 391;\n-   Name_Denorm                         : constant Name_Id := N + 392;\n-   Name_Digits                         : constant Name_Id := N + 393;\n-   Name_Elaborated                     : constant Name_Id := N + 394; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 395; -- Ada 83\n-   Name_Enabled                        : constant Name_Id := N + 396; -- GNAT\n-   Name_Enum_Rep                       : constant Name_Id := N + 397; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 398; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 399;\n-   Name_External_Tag                   : constant Name_Id := N + 400;\n-   Name_Fast_Math                      : constant Name_Id := N + 401; -- GNAT\n-   Name_First                          : constant Name_Id := N + 402;\n-   Name_First_Bit                      : constant Name_Id := N + 403;\n-   Name_Fixed_Value                    : constant Name_Id := N + 404; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 405;\n-   Name_Has_Access_Values              : constant Name_Id := N + 406; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 407; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 408;\n-   Name_Img                            : constant Name_Id := N + 409; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 410; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 411; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 412;\n-   Name_Last_Bit                       : constant Name_Id := N + 413;\n-   Name_Leading_Part                   : constant Name_Id := N + 414;\n-   Name_Length                         : constant Name_Id := N + 415;\n-   Name_Machine_Emax                   : constant Name_Id := N + 416;\n-   Name_Machine_Emin                   : constant Name_Id := N + 417;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 418;\n-   Name_Machine_Overflows              : constant Name_Id := N + 419;\n-   Name_Machine_Radix                  : constant Name_Id := N + 420;\n-   Name_Machine_Rounding               : constant Name_Id := N + 421; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 422;\n-   Name_Machine_Size                   : constant Name_Id := N + 423; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 424; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 425;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 426; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 427; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 428; -- Ada 05\n-   Name_Model_Emin                     : constant Name_Id := N + 429;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 430;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 431;\n-   Name_Model_Small                    : constant Name_Id := N + 432;\n-   Name_Modulus                        : constant Name_Id := N + 433;\n-   Name_Null_Parameter                 : constant Name_Id := N + 434; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 435; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 436;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 437; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 438;\n-   Name_Pos                            : constant Name_Id := N + 439;\n-   Name_Position                       : constant Name_Id := N + 440;\n-   Name_Priority                       : constant Name_Id := N + 441; -- Ada 05\n-   Name_Range                          : constant Name_Id := N + 442;\n-   Name_Range_Length                   : constant Name_Id := N + 443; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 444;\n-   Name_Safe_Emax                      : constant Name_Id := N + 445; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 446;\n-   Name_Safe_Large                     : constant Name_Id := N + 447; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 448;\n-   Name_Safe_Small                     : constant Name_Id := N + 449; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 450;\n-   Name_Scaling                        : constant Name_Id := N + 451;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 452;\n-   Name_Size                           : constant Name_Id := N + 453;\n-   Name_Small                          : constant Name_Id := N + 454;\n-   Name_Storage_Size                   : constant Name_Id := N + 455;\n-   Name_Storage_Unit                   : constant Name_Id := N + 456; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 457; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 458;\n-   Name_Target_Name                    : constant Name_Id := N + 459; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 460;\n-   Name_To_Address                     : constant Name_Id := N + 461; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 462; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 463; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 464;\n-   Name_Unchecked_Access               : constant Name_Id := N + 465;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 466;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 467; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 468; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 469; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 470;\n-   Name_Valid                          : constant Name_Id := N + 471;\n-   Name_Value_Size                     : constant Name_Id := N + 472; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 473;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 474; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 475; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 476;\n-   Name_Width                          : constant Name_Id := N + 477;\n-   Name_Word_Size                      : constant Name_Id := N + 478; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 370;\n+   Name_Abort_Signal                   : constant Name_Id := N + 370; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 371;\n+   Name_Address                        : constant Name_Id := N + 372;\n+   Name_Address_Size                   : constant Name_Id := N + 373; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 374;\n+   Name_Alignment                      : constant Name_Id := N + 375;\n+   Name_Asm_Input                      : constant Name_Id := N + 376; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 377; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 378; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 379; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 380;\n+   Name_Bit_Position                   : constant Name_Id := N + 381; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 382;\n+   Name_Callable                       : constant Name_Id := N + 383;\n+   Name_Caller                         : constant Name_Id := N + 384;\n+   Name_Code_Address                   : constant Name_Id := N + 385; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 386;\n+   Name_Compose                        : constant Name_Id := N + 387;\n+   Name_Constrained                    : constant Name_Id := N + 388;\n+   Name_Count                          : constant Name_Id := N + 389;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 390; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 391;\n+   Name_Delta                          : constant Name_Id := N + 392;\n+   Name_Denorm                         : constant Name_Id := N + 393;\n+   Name_Digits                         : constant Name_Id := N + 394;\n+   Name_Elaborated                     : constant Name_Id := N + 395; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 396; -- Ada 83\n+   Name_Enabled                        : constant Name_Id := N + 397; -- GNAT\n+   Name_Enum_Rep                       : constant Name_Id := N + 398; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 399; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 400;\n+   Name_External_Tag                   : constant Name_Id := N + 401;\n+   Name_Fast_Math                      : constant Name_Id := N + 402; -- GNAT\n+   Name_First                          : constant Name_Id := N + 403;\n+   Name_First_Bit                      : constant Name_Id := N + 404;\n+   Name_Fixed_Value                    : constant Name_Id := N + 405; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 406;\n+   Name_Has_Access_Values              : constant Name_Id := N + 407; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 408; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 409;\n+   Name_Img                            : constant Name_Id := N + 410; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 411; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 412; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 413;\n+   Name_Last_Bit                       : constant Name_Id := N + 414;\n+   Name_Leading_Part                   : constant Name_Id := N + 415;\n+   Name_Length                         : constant Name_Id := N + 416;\n+   Name_Machine_Emax                   : constant Name_Id := N + 417;\n+   Name_Machine_Emin                   : constant Name_Id := N + 418;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 419;\n+   Name_Machine_Overflows              : constant Name_Id := N + 420;\n+   Name_Machine_Radix                  : constant Name_Id := N + 421;\n+   Name_Machine_Rounding               : constant Name_Id := N + 422; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 423;\n+   Name_Machine_Size                   : constant Name_Id := N + 424; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 425; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 426;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 427; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 428; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 429; -- Ada 05\n+   Name_Model_Emin                     : constant Name_Id := N + 430;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 431;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 432;\n+   Name_Model_Small                    : constant Name_Id := N + 433;\n+   Name_Modulus                        : constant Name_Id := N + 434;\n+   Name_Null_Parameter                 : constant Name_Id := N + 435; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 436; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 437;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 438; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 439;\n+   Name_Pos                            : constant Name_Id := N + 440;\n+   Name_Position                       : constant Name_Id := N + 441;\n+   Name_Priority                       : constant Name_Id := N + 442; -- Ada 05\n+   Name_Range                          : constant Name_Id := N + 443;\n+   Name_Range_Length                   : constant Name_Id := N + 444; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 445;\n+   Name_Safe_Emax                      : constant Name_Id := N + 446; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 447;\n+   Name_Safe_Large                     : constant Name_Id := N + 448; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 449;\n+   Name_Safe_Small                     : constant Name_Id := N + 450; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 451;\n+   Name_Scaling                        : constant Name_Id := N + 452;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 453;\n+   Name_Size                           : constant Name_Id := N + 454;\n+   Name_Small                          : constant Name_Id := N + 455;\n+   Name_Storage_Size                   : constant Name_Id := N + 456;\n+   Name_Storage_Unit                   : constant Name_Id := N + 457; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 458; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 459;\n+   Name_Target_Name                    : constant Name_Id := N + 460; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 461;\n+   Name_To_Address                     : constant Name_Id := N + 462; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 463; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 464; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 465;\n+   Name_Unchecked_Access               : constant Name_Id := N + 466;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 467;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 468; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 469; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 470; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 471;\n+   Name_Valid                          : constant Name_Id := N + 472;\n+   Name_Value_Size                     : constant Name_Id := N + 473; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 474;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 475; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 476; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 477;\n+   Name_Width                          : constant Name_Id := N + 478;\n+   Name_Word_Size                      : constant Name_Id := N + 479; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 479;\n-   Name_Adjacent                       : constant Name_Id := N + 479;\n-   Name_Ceiling                        : constant Name_Id := N + 480;\n-   Name_Copy_Sign                      : constant Name_Id := N + 481;\n-   Name_Floor                          : constant Name_Id := N + 482;\n-   Name_Fraction                       : constant Name_Id := N + 483;\n-   Name_Image                          : constant Name_Id := N + 484;\n-   Name_Input                          : constant Name_Id := N + 485;\n-   Name_Machine                        : constant Name_Id := N + 486;\n-   Name_Max                            : constant Name_Id := N + 487;\n-   Name_Min                            : constant Name_Id := N + 488;\n-   Name_Model                          : constant Name_Id := N + 489;\n-   Name_Pred                           : constant Name_Id := N + 490;\n-   Name_Remainder                      : constant Name_Id := N + 491;\n-   Name_Rounding                       : constant Name_Id := N + 492;\n-   Name_Succ                           : constant Name_Id := N + 493;\n-   Name_Truncation                     : constant Name_Id := N + 494;\n-   Name_Value                          : constant Name_Id := N + 495;\n-   Name_Wide_Image                     : constant Name_Id := N + 496;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 497;\n-   Name_Wide_Value                     : constant Name_Id := N + 498;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 499;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 499;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 480;\n+   Name_Adjacent                       : constant Name_Id := N + 480;\n+   Name_Ceiling                        : constant Name_Id := N + 481;\n+   Name_Copy_Sign                      : constant Name_Id := N + 482;\n+   Name_Floor                          : constant Name_Id := N + 483;\n+   Name_Fraction                       : constant Name_Id := N + 484;\n+   Name_Image                          : constant Name_Id := N + 485;\n+   Name_Input                          : constant Name_Id := N + 486;\n+   Name_Machine                        : constant Name_Id := N + 487;\n+   Name_Max                            : constant Name_Id := N + 488;\n+   Name_Min                            : constant Name_Id := N + 489;\n+   Name_Model                          : constant Name_Id := N + 490;\n+   Name_Pred                           : constant Name_Id := N + 491;\n+   Name_Remainder                      : constant Name_Id := N + 492;\n+   Name_Rounding                       : constant Name_Id := N + 493;\n+   Name_Succ                           : constant Name_Id := N + 494;\n+   Name_Truncation                     : constant Name_Id := N + 495;\n+   Name_Value                          : constant Name_Id := N + 496;\n+   Name_Wide_Image                     : constant Name_Id := N + 497;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 498;\n+   Name_Wide_Value                     : constant Name_Id := N + 499;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 500;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 500;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 500;\n-   Name_Output                         : constant Name_Id := N + 500;\n-   Name_Read                           : constant Name_Id := N + 501;\n-   Name_Write                          : constant Name_Id := N + 502;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 502;\n+   First_Procedure_Attribute           : constant Name_Id := N + 501;\n+   Name_Output                         : constant Name_Id := N + 501;\n+   Name_Read                           : constant Name_Id := N + 502;\n+   Name_Write                          : constant Name_Id := N + 503;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 503;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 503;\n-   Name_Elab_Body                      : constant Name_Id := N + 503; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 504; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 505;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 504;\n+   Name_Elab_Body                      : constant Name_Id := N + 504; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 505; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 506;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 506;\n-   Name_Base                           : constant Name_Id := N + 506;\n-   Name_Class                          : constant Name_Id := N + 507;\n-   Name_Stub_Type                      : constant Name_Id := N + 508;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 508;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 508;\n-   Last_Attribute_Name                 : constant Name_Id := N + 508;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 507;\n+   Name_Base                           : constant Name_Id := N + 507;\n+   Name_Class                          : constant Name_Id := N + 508;\n+   Name_Stub_Type                      : constant Name_Id := N + 509;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 509;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 509;\n+   Last_Attribute_Name                 : constant Name_Id := N + 509;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 509;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 509;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 510;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 510;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 510;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 510;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 511;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 511;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 511;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 511;\n-   Name_Priority_Queuing               : constant Name_Id := N + 512;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 512;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 512;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 512;\n+   Name_Priority_Queuing               : constant Name_Id := N + 513;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 513;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Within_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 513;\n-   Name_EDF_Across_Priorities          : constant Name_Id := N + 513;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 514;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 514;\n+   Name_EDF_Across_Priorities          : constant Name_Id := N + 514;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 515;\n    Name_Non_Preemptive_Within_Priorities\n                                        : constant Name_Id := N + 513;\n-   Name_Round_Robin_Within_Priorities  : constant Name_Id := N + 515;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 515;\n+   Name_Round_Robin_Within_Priorities  : constant Name_Id := N + 516;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 516;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 516;\n-   Name_Access_Check                   : constant Name_Id := N + 516;\n-   Name_Accessibility_Check            : constant Name_Id := N + 517;\n-   Name_Alignment_Check                : constant Name_Id := N + 518; -- GNAT\n-   Name_Discriminant_Check             : constant Name_Id := N + 519;\n-   Name_Division_Check                 : constant Name_Id := N + 520;\n-   Name_Elaboration_Check              : constant Name_Id := N + 521;\n-   Name_Index_Check                    : constant Name_Id := N + 522;\n-   Name_Length_Check                   : constant Name_Id := N + 523;\n-   Name_Overflow_Check                 : constant Name_Id := N + 524;\n-   Name_Range_Check                    : constant Name_Id := N + 525;\n-   Name_Storage_Check                  : constant Name_Id := N + 526;\n-   Name_Tag_Check                      : constant Name_Id := N + 527;\n-   Name_Validity_Check                 : constant Name_Id := N + 528; -- GNAT\n-   Name_All_Checks                     : constant Name_Id := N + 529;\n-   Last_Check_Name                     : constant Name_Id := N + 529;\n+   First_Check_Name                    : constant Name_Id := N + 517;\n+   Name_Access_Check                   : constant Name_Id := N + 517;\n+   Name_Accessibility_Check            : constant Name_Id := N + 518;\n+   Name_Alignment_Check                : constant Name_Id := N + 519; -- GNAT\n+   Name_Discriminant_Check             : constant Name_Id := N + 520;\n+   Name_Division_Check                 : constant Name_Id := N + 521;\n+   Name_Elaboration_Check              : constant Name_Id := N + 522;\n+   Name_Index_Check                    : constant Name_Id := N + 523;\n+   Name_Length_Check                   : constant Name_Id := N + 524;\n+   Name_Overflow_Check                 : constant Name_Id := N + 525;\n+   Name_Range_Check                    : constant Name_Id := N + 526;\n+   Name_Storage_Check                  : constant Name_Id := N + 527;\n+   Name_Tag_Check                      : constant Name_Id := N + 528;\n+   Name_Validity_Check                 : constant Name_Id := N + 529; -- GNAT\n+   Name_All_Checks                     : constant Name_Id := N + 530;\n+   Last_Check_Name                     : constant Name_Id := N + 530;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 530;\n-   Name_Abs                            : constant Name_Id := N + 531;\n-   Name_Accept                         : constant Name_Id := N + 532;\n-   Name_And                            : constant Name_Id := N + 533;\n-   Name_All                            : constant Name_Id := N + 534;\n-   Name_Array                          : constant Name_Id := N + 535;\n-   Name_At                             : constant Name_Id := N + 536;\n-   Name_Begin                          : constant Name_Id := N + 537;\n-   Name_Body                           : constant Name_Id := N + 538;\n-   Name_Case                           : constant Name_Id := N + 539;\n-   Name_Constant                       : constant Name_Id := N + 540;\n-   Name_Declare                        : constant Name_Id := N + 541;\n-   Name_Delay                          : constant Name_Id := N + 542;\n-   Name_Do                             : constant Name_Id := N + 543;\n-   Name_Else                           : constant Name_Id := N + 544;\n-   Name_Elsif                          : constant Name_Id := N + 545;\n-   Name_End                            : constant Name_Id := N + 546;\n-   Name_Entry                          : constant Name_Id := N + 547;\n-   Name_Exception                      : constant Name_Id := N + 548;\n-   Name_Exit                           : constant Name_Id := N + 549;\n-   Name_For                            : constant Name_Id := N + 550;\n-   Name_Function                       : constant Name_Id := N + 551;\n-   Name_Generic                        : constant Name_Id := N + 552;\n-   Name_Goto                           : constant Name_Id := N + 553;\n-   Name_If                             : constant Name_Id := N + 554;\n-   Name_In                             : constant Name_Id := N + 555;\n-   Name_Is                             : constant Name_Id := N + 556;\n-   Name_Limited                        : constant Name_Id := N + 557;\n-   Name_Loop                           : constant Name_Id := N + 558;\n-   Name_New                            : constant Name_Id := N + 559;\n-   Name_Not                            : constant Name_Id := N + 560;\n-   Name_Null                           : constant Name_Id := N + 561;\n-   Name_Of                             : constant Name_Id := N + 562;\n-   Name_Or                             : constant Name_Id := N + 563;\n-   Name_Others                         : constant Name_Id := N + 564;\n-   Name_Out                            : constant Name_Id := N + 565;\n-   Name_Package                        : constant Name_Id := N + 566;\n-   Name_Pragma                         : constant Name_Id := N + 567;\n-   Name_Private                        : constant Name_Id := N + 568;\n-   Name_Procedure                      : constant Name_Id := N + 569;\n-   Name_Raise                          : constant Name_Id := N + 570;\n-   Name_Record                         : constant Name_Id := N + 571;\n-   Name_Rem                            : constant Name_Id := N + 572;\n-   Name_Renames                        : constant Name_Id := N + 573;\n-   Name_Return                         : constant Name_Id := N + 574;\n-   Name_Reverse                        : constant Name_Id := N + 575;\n-   Name_Select                         : constant Name_Id := N + 576;\n-   Name_Separate                       : constant Name_Id := N + 577;\n-   Name_Subtype                        : constant Name_Id := N + 578;\n-   Name_Task                           : constant Name_Id := N + 579;\n-   Name_Terminate                      : constant Name_Id := N + 580;\n-   Name_Then                           : constant Name_Id := N + 581;\n-   Name_Type                           : constant Name_Id := N + 582;\n-   Name_Use                            : constant Name_Id := N + 583;\n-   Name_When                           : constant Name_Id := N + 584;\n-   Name_While                          : constant Name_Id := N + 585;\n-   Name_With                           : constant Name_Id := N + 586;\n-   Name_Xor                            : constant Name_Id := N + 587;\n+   Name_Abort                          : constant Name_Id := N + 531;\n+   Name_Abs                            : constant Name_Id := N + 532;\n+   Name_Accept                         : constant Name_Id := N + 533;\n+   Name_And                            : constant Name_Id := N + 534;\n+   Name_All                            : constant Name_Id := N + 535;\n+   Name_Array                          : constant Name_Id := N + 536;\n+   Name_At                             : constant Name_Id := N + 537;\n+   Name_Begin                          : constant Name_Id := N + 538;\n+   Name_Body                           : constant Name_Id := N + 539;\n+   Name_Case                           : constant Name_Id := N + 540;\n+   Name_Constant                       : constant Name_Id := N + 541;\n+   Name_Declare                        : constant Name_Id := N + 542;\n+   Name_Delay                          : constant Name_Id := N + 543;\n+   Name_Do                             : constant Name_Id := N + 544;\n+   Name_Else                           : constant Name_Id := N + 545;\n+   Name_Elsif                          : constant Name_Id := N + 546;\n+   Name_End                            : constant Name_Id := N + 547;\n+   Name_Entry                          : constant Name_Id := N + 548;\n+   Name_Exception                      : constant Name_Id := N + 549;\n+   Name_Exit                           : constant Name_Id := N + 550;\n+   Name_For                            : constant Name_Id := N + 551;\n+   Name_Function                       : constant Name_Id := N + 552;\n+   Name_Generic                        : constant Name_Id := N + 553;\n+   Name_Goto                           : constant Name_Id := N + 554;\n+   Name_If                             : constant Name_Id := N + 555;\n+   Name_In                             : constant Name_Id := N + 556;\n+   Name_Is                             : constant Name_Id := N + 557;\n+   Name_Limited                        : constant Name_Id := N + 558;\n+   Name_Loop                           : constant Name_Id := N + 559;\n+   Name_New                            : constant Name_Id := N + 560;\n+   Name_Not                            : constant Name_Id := N + 561;\n+   Name_Null                           : constant Name_Id := N + 562;\n+   Name_Of                             : constant Name_Id := N + 563;\n+   Name_Or                             : constant Name_Id := N + 564;\n+   Name_Others                         : constant Name_Id := N + 565;\n+   Name_Out                            : constant Name_Id := N + 566;\n+   Name_Package                        : constant Name_Id := N + 567;\n+   Name_Pragma                         : constant Name_Id := N + 568;\n+   Name_Private                        : constant Name_Id := N + 569;\n+   Name_Procedure                      : constant Name_Id := N + 570;\n+   Name_Raise                          : constant Name_Id := N + 571;\n+   Name_Record                         : constant Name_Id := N + 572;\n+   Name_Rem                            : constant Name_Id := N + 573;\n+   Name_Renames                        : constant Name_Id := N + 574;\n+   Name_Return                         : constant Name_Id := N + 575;\n+   Name_Reverse                        : constant Name_Id := N + 576;\n+   Name_Select                         : constant Name_Id := N + 577;\n+   Name_Separate                       : constant Name_Id := N + 578;\n+   Name_Subtype                        : constant Name_Id := N + 579;\n+   Name_Task                           : constant Name_Id := N + 580;\n+   Name_Terminate                      : constant Name_Id := N + 581;\n+   Name_Then                           : constant Name_Id := N + 582;\n+   Name_Type                           : constant Name_Id := N + 583;\n+   Name_Use                            : constant Name_Id := N + 584;\n+   Name_When                           : constant Name_Id := N + 585;\n+   Name_While                          : constant Name_Id := N + 586;\n+   Name_With                           : constant Name_Id := N + 587;\n+   Name_Xor                            : constant Name_Id := N + 588;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 588;\n-   Name_Divide                          : constant Name_Id := N + 588;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 589;\n-   Name_Exception_Information           : constant Name_Id := N + 590;\n-   Name_Exception_Message               : constant Name_Id := N + 591;\n-   Name_Exception_Name                  : constant Name_Id := N + 592;\n-   Name_File                            : constant Name_Id := N + 593;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 594;\n-   Name_Import_Address                  : constant Name_Id := N + 595;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 596;\n-   Name_Import_Value                    : constant Name_Id := N + 597;\n-   Name_Is_Negative                     : constant Name_Id := N + 598;\n-   Name_Line                            : constant Name_Id := N + 599;\n-   Name_Rotate_Left                     : constant Name_Id := N + 600;\n-   Name_Rotate_Right                    : constant Name_Id := N + 601;\n-   Name_Shift_Left                      : constant Name_Id := N + 602;\n-   Name_Shift_Right                     : constant Name_Id := N + 603;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 604;\n-   Name_Source_Location                 : constant Name_Id := N + 605;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 606;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 607;\n-   Name_To_Pointer                      : constant Name_Id := N + 608;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 608;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 589;\n+   Name_Divide                          : constant Name_Id := N + 589;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 590;\n+   Name_Exception_Information           : constant Name_Id := N + 591;\n+   Name_Exception_Message               : constant Name_Id := N + 592;\n+   Name_Exception_Name                  : constant Name_Id := N + 593;\n+   Name_File                            : constant Name_Id := N + 594;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 595;\n+   Name_Import_Address                  : constant Name_Id := N + 596;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 597;\n+   Name_Import_Value                    : constant Name_Id := N + 598;\n+   Name_Is_Negative                     : constant Name_Id := N + 599;\n+   Name_Line                            : constant Name_Id := N + 600;\n+   Name_Rotate_Left                     : constant Name_Id := N + 601;\n+   Name_Rotate_Right                    : constant Name_Id := N + 602;\n+   Name_Shift_Left                      : constant Name_Id := N + 603;\n+   Name_Shift_Right                     : constant Name_Id := N + 604;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 605;\n+   Name_Source_Location                 : constant Name_Id := N + 606;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 607;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 608;\n+   Name_To_Pointer                      : constant Name_Id := N + 609;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 609;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 609;\n+   Name_Free                           : constant Name_Id := N + 610;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 610;\n-   Name_Abstract                       : constant Name_Id := N + 610;\n-   Name_Aliased                        : constant Name_Id := N + 611;\n-   Name_Protected                      : constant Name_Id := N + 612;\n-   Name_Until                          : constant Name_Id := N + 613;\n-   Name_Requeue                        : constant Name_Id := N + 614;\n-   Name_Tagged                         : constant Name_Id := N + 615;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 615;\n+   First_95_Reserved_Word              : constant Name_Id := N + 611;\n+   Name_Abstract                       : constant Name_Id := N + 611;\n+   Name_Aliased                        : constant Name_Id := N + 612;\n+   Name_Protected                      : constant Name_Id := N + 613;\n+   Name_Until                          : constant Name_Id := N + 614;\n+   Name_Requeue                        : constant Name_Id := N + 615;\n+   Name_Tagged                         : constant Name_Id := N + 616;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 616;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 616;\n+   Name_Raise_Exception                : constant Name_Id := N + 617;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 617;\n-   Name_Archive_Builder                : constant Name_Id := N + 618;\n-   Name_Archive_Indexer                : constant Name_Id := N + 619;\n-   Name_Archive_Suffix                 : constant Name_Id := N + 620;\n-   Name_Binder                         : constant Name_Id := N + 621;\n-   Name_Binder_Prefix                  : constant Name_Id := N + 622;\n-   Name_Body_Suffix                    : constant Name_Id := N + 623;\n-   Name_Builder                        : constant Name_Id := N + 624;\n-   Name_Builder_Switches               : constant Name_Id := N + 625;\n-   Name_Compiler                       : constant Name_Id := N + 626;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 627;\n-   Name_Config_Body_File_Name          : constant Name_Id := N + 628;\n-   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 629;\n-   Name_Config_File_Switches           : constant Name_Id := N + 630;\n-   Name_Config_File_Unique             : constant Name_Id := N + 631;\n-   Name_Config_Spec_File_Name          : constant Name_Id := N + 632;\n-   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 633;\n-   Name_Cross_Reference                : constant Name_Id := N + 634;\n-   Name_Default_Language               : constant Name_Id := N + 635;\n-   Name_Default_Switches               : constant Name_Id := N + 636;\n-   Name_Dependency_Driver              : constant Name_Id := N + 637;\n-   Name_Dependency_File_Kind           : constant Name_Id := N + 638;\n-   Name_Dependency_Switches            : constant Name_Id := N + 639;\n-   Name_Driver                         : constant Name_Id := N + 640;\n-   Name_Excluded_Source_Dirs           : constant Name_Id := N + 641;\n-   Name_Excluded_Source_Files          : constant Name_Id := N + 642;\n-   Name_Exec_Dir                       : constant Name_Id := N + 643;\n-   Name_Executable                     : constant Name_Id := N + 644;\n-   Name_Executable_Suffix              : constant Name_Id := N + 645;\n-   Name_Extends                        : constant Name_Id := N + 646;\n-   Name_Externally_Built               : constant Name_Id := N + 647;\n-   Name_Finder                         : constant Name_Id := N + 648;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 649;\n-   Name_Global_Config_File             : constant Name_Id := N + 650;\n-   Name_Gnatls                         : constant Name_Id := N + 651;\n-   Name_Gnatstub                       : constant Name_Id := N + 652;\n-   Name_Implementation                 : constant Name_Id := N + 653;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 654;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 655;\n-   Name_Include_Switches               : constant Name_Id := N + 656;\n-   Name_Include_Path                   : constant Name_Id := N + 657;\n-   Name_Include_Path_File              : constant Name_Id := N + 658;\n-   Name_Language_Kind                  : constant Name_Id := N + 659;\n-   Name_Language_Processing            : constant Name_Id := N + 660;\n-   Name_Languages                      : constant Name_Id := N + 661;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 662;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 663;\n-   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 664;\n-   Name_Library_Builder                : constant Name_Id := N + 665;\n-   Name_Library_Dir                    : constant Name_Id := N + 666;\n-   Name_Library_GCC                    : constant Name_Id := N + 667;\n-   Name_Library_Interface              : constant Name_Id := N + 668;\n-   Name_Library_Kind                   : constant Name_Id := N + 669;\n-   Name_Library_Name                   : constant Name_Id := N + 670;\n-   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 671;\n-   Name_Library_Options                : constant Name_Id := N + 672;\n-   Name_Library_Partial_Linker         : constant Name_Id := N + 673;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 674;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 675;\n-   Name_Library_Support                : constant Name_Id := N + 676;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 677;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 678;\n-   Name_Library_Version                : constant Name_Id := N + 679;\n-   Name_Library_Version_Switches       : constant Name_Id := N + 680;\n-   Name_Linker                         : constant Name_Id := N + 681;\n-   Name_Linker_Executable_Option       : constant Name_Id := N + 682;\n-   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 683;\n-   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 684;\n-   Name_Local_Config_File              : constant Name_Id := N + 685;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 686;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 687;\n-   Name_Mapping_File_Switches          : constant Name_Id := N + 688;\n-   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 689;\n-   Name_Mapping_Body_Suffix            : constant Name_Id := N + 690;\n-   Name_Metrics                        : constant Name_Id := N + 691;\n-   Name_Naming                         : constant Name_Id := N + 692;\n-   Name_Objects_Path                   : constant Name_Id := N + 693;\n-   Name_Objects_Path_File              : constant Name_Id := N + 694;\n-   Name_Object_Dir                     : constant Name_Id := N + 695;\n-   Name_Pic_Option                     : constant Name_Id := N + 696;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 697;\n-   Name_Prefix                         : constant Name_Id := N + 698;\n-   Name_Project                        : constant Name_Id := N + 699;\n-   Name_Roots                          : constant Name_Id := N + 700;\n-   Name_Required_Switches              : constant Name_Id := N + 701;\n-   Name_Run_Path_Option                : constant Name_Id := N + 702;\n-   Name_Runtime_Project                : constant Name_Id := N + 703;\n-   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 704;\n-   Name_Shared_Library_Prefix          : constant Name_Id := N + 705;\n-   Name_Shared_Library_Suffix          : constant Name_Id := N + 706;\n-   Name_Separate_Suffix                : constant Name_Id := N + 707;\n-   Name_Source_Dirs                    : constant Name_Id := N + 708;\n-   Name_Source_Files                   : constant Name_Id := N + 709;\n-   Name_Source_List_File               : constant Name_Id := N + 710;\n-   Name_Spec                           : constant Name_Id := N + 711;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 712;\n-   Name_Specification                  : constant Name_Id := N + 713;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 714;\n-   Name_Specification_Suffix           : constant Name_Id := N + 715;\n-   Name_Stack                          : constant Name_Id := N + 716;\n-   Name_Switches                       : constant Name_Id := N + 717;\n-   Name_Symbolic_Link_Supported        : constant Name_Id := N + 718;\n-   Name_Toolchain_Description          : constant Name_Id := N + 719;\n-   Name_Toolchain_Version              : constant Name_Id := N + 720;\n-   Name_Runtime_Library_Dir            : constant Name_Id := N + 721;\n+   Name_Ada_Roots                      : constant Name_Id := N + 618;\n+   Name_Archive_Builder                : constant Name_Id := N + 619;\n+   Name_Archive_Indexer                : constant Name_Id := N + 620;\n+   Name_Archive_Suffix                 : constant Name_Id := N + 621;\n+   Name_Binder                         : constant Name_Id := N + 622;\n+   Name_Binder_Prefix                  : constant Name_Id := N + 623;\n+   Name_Body_Suffix                    : constant Name_Id := N + 624;\n+   Name_Builder                        : constant Name_Id := N + 625;\n+   Name_Builder_Switches               : constant Name_Id := N + 626;\n+   Name_Compiler                       : constant Name_Id := N + 627;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 628;\n+   Name_Config_Body_File_Name          : constant Name_Id := N + 629;\n+   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 630;\n+   Name_Config_File_Switches           : constant Name_Id := N + 631;\n+   Name_Config_File_Unique             : constant Name_Id := N + 632;\n+   Name_Config_Spec_File_Name          : constant Name_Id := N + 633;\n+   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 634;\n+   Name_Cross_Reference                : constant Name_Id := N + 635;\n+   Name_Default_Language               : constant Name_Id := N + 636;\n+   Name_Default_Switches               : constant Name_Id := N + 637;\n+   Name_Dependency_Driver              : constant Name_Id := N + 638;\n+   Name_Dependency_File_Kind           : constant Name_Id := N + 639;\n+   Name_Dependency_Switches            : constant Name_Id := N + 640;\n+   Name_Driver                         : constant Name_Id := N + 641;\n+   Name_Excluded_Source_Dirs           : constant Name_Id := N + 642;\n+   Name_Excluded_Source_Files          : constant Name_Id := N + 643;\n+   Name_Exec_Dir                       : constant Name_Id := N + 644;\n+   Name_Executable                     : constant Name_Id := N + 645;\n+   Name_Executable_Suffix              : constant Name_Id := N + 646;\n+   Name_Extends                        : constant Name_Id := N + 647;\n+   Name_Externally_Built               : constant Name_Id := N + 648;\n+   Name_Finder                         : constant Name_Id := N + 649;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 650;\n+   Name_Global_Config_File             : constant Name_Id := N + 651;\n+   Name_Gnatls                         : constant Name_Id := N + 652;\n+   Name_Gnatstub                       : constant Name_Id := N + 653;\n+   Name_Implementation                 : constant Name_Id := N + 654;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 655;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 656;\n+   Name_Include_Switches               : constant Name_Id := N + 657;\n+   Name_Include_Path                   : constant Name_Id := N + 658;\n+   Name_Include_Path_File              : constant Name_Id := N + 659;\n+   Name_Language_Kind                  : constant Name_Id := N + 660;\n+   Name_Language_Processing            : constant Name_Id := N + 661;\n+   Name_Languages                      : constant Name_Id := N + 662;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 663;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 664;\n+   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 665;\n+   Name_Library_Builder                : constant Name_Id := N + 666;\n+   Name_Library_Dir                    : constant Name_Id := N + 667;\n+   Name_Library_GCC                    : constant Name_Id := N + 668;\n+   Name_Library_Interface              : constant Name_Id := N + 669;\n+   Name_Library_Kind                   : constant Name_Id := N + 670;\n+   Name_Library_Name                   : constant Name_Id := N + 671;\n+   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 672;\n+   Name_Library_Options                : constant Name_Id := N + 673;\n+   Name_Library_Partial_Linker         : constant Name_Id := N + 674;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 675;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 676;\n+   Name_Library_Support                : constant Name_Id := N + 677;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 678;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 679;\n+   Name_Library_Version                : constant Name_Id := N + 680;\n+   Name_Library_Version_Switches       : constant Name_Id := N + 681;\n+   Name_Linker                         : constant Name_Id := N + 682;\n+   Name_Linker_Executable_Option       : constant Name_Id := N + 683;\n+   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 684;\n+   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 685;\n+   Name_Local_Config_File              : constant Name_Id := N + 686;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 687;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 688;\n+   Name_Mapping_File_Switches          : constant Name_Id := N + 689;\n+   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 690;\n+   Name_Mapping_Body_Suffix            : constant Name_Id := N + 691;\n+   Name_Metrics                        : constant Name_Id := N + 692;\n+   Name_Naming                         : constant Name_Id := N + 693;\n+   Name_Objects_Path                   : constant Name_Id := N + 694;\n+   Name_Objects_Path_File              : constant Name_Id := N + 695;\n+   Name_Object_Dir                     : constant Name_Id := N + 696;\n+   Name_Pic_Option                     : constant Name_Id := N + 697;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 698;\n+   Name_Prefix                         : constant Name_Id := N + 699;\n+   Name_Project                        : constant Name_Id := N + 700;\n+   Name_Roots                          : constant Name_Id := N + 701;\n+   Name_Required_Switches              : constant Name_Id := N + 702;\n+   Name_Run_Path_Option                : constant Name_Id := N + 703;\n+   Name_Runtime_Project                : constant Name_Id := N + 704;\n+   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 705;\n+   Name_Shared_Library_Prefix          : constant Name_Id := N + 706;\n+   Name_Shared_Library_Suffix          : constant Name_Id := N + 707;\n+   Name_Separate_Suffix                : constant Name_Id := N + 708;\n+   Name_Source_Dirs                    : constant Name_Id := N + 709;\n+   Name_Source_Files                   : constant Name_Id := N + 710;\n+   Name_Source_List_File               : constant Name_Id := N + 711;\n+   Name_Spec                           : constant Name_Id := N + 712;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 713;\n+   Name_Specification                  : constant Name_Id := N + 714;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 715;\n+   Name_Specification_Suffix           : constant Name_Id := N + 716;\n+   Name_Stack                          : constant Name_Id := N + 717;\n+   Name_Switches                       : constant Name_Id := N + 718;\n+   Name_Symbolic_Link_Supported        : constant Name_Id := N + 719;\n+   Name_Toolchain_Description          : constant Name_Id := N + 720;\n+   Name_Toolchain_Version              : constant Name_Id := N + 721;\n+   Name_Runtime_Library_Dir            : constant Name_Id := N + 722;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 722;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 723;\n \n    --  Ada 2005 reserved words\n \n-   First_2005_Reserved_Word            : constant Name_Id := N + 723;\n-   Name_Interface                      : constant Name_Id := N + 723;\n-   Name_Overriding                     : constant Name_Id := N + 724;\n-   Name_Synchronized                   : constant Name_Id := N + 725;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 725;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 724;\n+   Name_Interface                      : constant Name_Id := N + 724;\n+   Name_Overriding                     : constant Name_Id := N + 725;\n+   Name_Synchronized                   : constant Name_Id := N + 726;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 726;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 725;\n+   Last_Predefined_Name                : constant Name_Id := N + 726;\n \n    ---------------------------------------\n    -- Subtypes Defining Name Categories --\n@@ -1498,6 +1499,7 @@ package Snames is\n       Pragma_Unchecked_Union,\n       Pragma_Unimplemented_Unit,\n       Pragma_Universal_Aliasing,\n+      Pragma_Unmodified,\n       Pragma_Unreferenced,\n       Pragma_Unreferenced_Objects,\n       Pragma_Unreserve_All_Interrupts,"}, {"sha": "e8c94b506ca4941de2a80e7ee624d765377a106f", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d77af56e7fbe51db303f87b38a191fa81595b8d/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=9d77af56e7fbe51db303f87b38a191fa81595b8d", "patch": "@@ -367,17 +367,18 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Unchecked_Union               148\n #define  Pragma_Unimplemented_Unit            149\n #define  Pragma_Universal_Aliasing            150\n-#define  Pragma_Unreferenced                  151\n-#define  Pragma_Unreferenced_Objects          152\n-#define  Pragma_Unreserve_All_Interrupts      153\n-#define  Pragma_Volatile                      154\n-#define  Pragma_Volatile_Components           155\n-#define  Pragma_Weak_External                 156\n-#define  Pragma_AST_Entry                     157\n-#define  Pragma_Fast_Math                     158\n-#define  Pragma_Interface                     159\n-#define  Pragma_Priority                      160\n-#define  Pragma_Storage_Size                  161\n-#define  Pragma_Storage_Unit                  162\n+#define  Pragma_Unmodified                    151\n+#define  Pragma_Unreferenced                  152\n+#define  Pragma_Unreferenced_Objects          153\n+#define  Pragma_Unreserve_All_Interrupts      154\n+#define  Pragma_Volatile                      155\n+#define  Pragma_Volatile_Components           156\n+#define  Pragma_Weak_External                 157\n+#define  Pragma_AST_Entry                     158\n+#define  Pragma_Fast_Math                     159\n+#define  Pragma_Interface                     160\n+#define  Pragma_Priority                      161\n+#define  Pragma_Storage_Size                  162\n+#define  Pragma_Storage_Unit                  163\n \n /* End of snames.h (C version of Snames package spec) */"}]}