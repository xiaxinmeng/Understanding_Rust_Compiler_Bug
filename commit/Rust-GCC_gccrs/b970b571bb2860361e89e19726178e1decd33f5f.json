{"sha": "b970b571bb2860361e89e19726178e1decd33f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3MGI1NzFiYjI4NjAzNjFlODllMTk3MjYxNzhlMWRlY2QzM2Y1Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-28T13:48:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-28T13:48:28Z"}, "message": "* exp_util.ads: Minor reformatting.\n\nFrom-SVN: r136090", "tree": {"sha": "0f0e4d9a7e8d9b7547582dd0db40bf239e054ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f0e4d9a7e8d9b7547582dd0db40bf239e054ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b970b571bb2860361e89e19726178e1decd33f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b970b571bb2860361e89e19726178e1decd33f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b970b571bb2860361e89e19726178e1decd33f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b970b571bb2860361e89e19726178e1decd33f5f/comments", "author": null, "committer": null, "parents": [{"sha": "dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "5e57147b7201241883917584a4512c3d6329e73d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b970b571bb2860361e89e19726178e1decd33f5f/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b970b571bb2860361e89e19726178e1decd33f5f/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=b970b571bb2860361e89e19726178e1decd33f5f", "patch": "@@ -205,6 +205,7 @@ package Exp_Util is\n    --  index values. For composite types, the result includes two declarations:\n    --  one for a generated function that computes the image without using\n    --  concatenation, and one for the variable that holds the result.\n+   --\n    --  If In_Init_Proc is true, the call is part of the initialization of\n    --  a component of a composite type, and the enclosing initialization\n    --  procedure must be flagged as using the secondary stack. If In_Init_Proc\n@@ -382,7 +383,7 @@ package Exp_Util is\n       Name_Req : Boolean := False);\n    --  Force the evaluation of the expression right away. Similar behavior\n    --  to Remove_Side_Effects when Variable_Ref is set to TRUE. That is to\n-   --  say, it removes the side-effects and capture the values of the\n+   --  say, it removes the side-effects and captures the values of the\n    --  variables. Remove_Side_Effects guarantees that multiple evaluations\n    --  of the same expression won't generate multiple side effects, whereas\n    --  Force_Evaluation further guarantees that all evaluations will yield\n@@ -476,7 +477,7 @@ package Exp_Util is\n    --  Node N is an object reference. This function returns True if it is\n    --  possible that the object may not be aligned according to the normal\n    --  default alignment requirement for its type (e.g. if it appears in a\n-   --  packed record, or as part of a component that has a component clause.\n+   --  packed record, or as part of a component that has a component clause.)\n \n    function Is_Renamed_Object (N : Node_Id) return Boolean;\n    --  Returns True if the node N is a renamed object. An expression is\n@@ -564,12 +565,12 @@ package Exp_Util is\n    --  returned only if the replacement is safe.\n \n    function Possible_Bit_Aligned_Component (N : Node_Id) return Boolean;\n-   --  This function is used in processing the assignment of a record or\n-   --  indexed component. The argument N is either the left hand or right\n-   --  hand side of an assignment, and this function determines if there\n-   --  is a record component reference where the record may be bit aligned\n-   --  in a manner that causes trouble for the back end (see description\n-   --  of Exp_Util.Component_May_Be_Bit_Aligned for further details).\n+   --  This function is used during processing the assignment of a record or\n+   --  indexed component. The argument N is either the left hand or right hand\n+   --  side of an assignment, and this function determines if there is a record\n+   --  component reference where the record may be bit aligned in a manner that\n+   --  causes trouble for the back end (see Component_May_Be_Bit_Aligned for\n+   --  further details).\n \n    procedure Remove_Side_Effects\n      (Exp          : Node_Id;"}]}