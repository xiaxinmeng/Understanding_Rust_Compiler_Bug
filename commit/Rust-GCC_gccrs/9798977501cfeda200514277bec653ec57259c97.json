{"sha": "9798977501cfeda200514277bec653ec57259c97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5ODk3NzUwMWNmZWRhMjAwNTE0Mjc3YmVjNjUzZWM1NzI1OWM5Nw==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-16T09:54:12Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-16T09:54:12Z"}, "message": "(FIXED_REGNO_P): Pseudos can't be fixed regs.\n\nFrom-SVN: r3757", "tree": {"sha": "ee785720e2673d66fc4acbae111453e812ace1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee785720e2673d66fc4acbae111453e812ace1ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9798977501cfeda200514277bec653ec57259c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9798977501cfeda200514277bec653ec57259c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9798977501cfeda200514277bec653ec57259c97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9798977501cfeda200514277bec653ec57259c97/comments", "author": null, "committer": null, "parents": [{"sha": "ad0c9fa19945b1349c9a126e283170bc113ee08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0c9fa19945b1349c9a126e283170bc113ee08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0c9fa19945b1349c9a126e283170bc113ee08a"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "f328ef8a9f2c8a9b12e9668b714959545d8b0b53", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9798977501cfeda200514277bec653ec57259c97/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9798977501cfeda200514277bec653ec57259c97/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=9798977501cfeda200514277bec653ec57259c97", "patch": "@@ -438,11 +438,13 @@ struct table_elt\n    but not if it is an overlapping register.  */\n #ifdef OVERLAPPING_REGNO_P\n #define FIXED_REGNO_P(N)  \\\n-  (((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\t\\\n+  (((N) == FRAME_POINTER_REGNUM\t\t\t\t\\\n+    || ((N) < FIRST_PSEUDO_REGISTER && fixed_regs[N]))\t\\\n    && ! OVERLAPPING_REGNO_P ((N)))\n #else\n #define FIXED_REGNO_P(N)  \\\n-  ((N) == FRAME_POINTER_REGNUM || fixed_regs[N])\n+  ((N) == FRAME_POINTER_REGNUM\t\t\t\t\\\n+   || ((N) < FIRST_PSEUDO_REGISTER && fixed_regs[N]))\n #endif\n \n /* Compute cost of X, as stored in the `cost' field of a table_elt.  Fixed\n@@ -4472,9 +4474,11 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n    Otherwise, return X, possibly with one or more operands\n    modified by recursive calls to this function.\n \n-   If X is a register whose contents are known, we do NOT\n-   return those contents.  This is because an instruction that\n-   uses a register is usually faster than one that uses a constant.\n+   If X is a register whose contents are known, we may or may not\n+   return those contents.  An instruction that uses a register is usually\n+   faster than one that uses a constant.  But on machines with few hard\n+   regs, using a register instead of a constant increases register life,\n+   hurting register allocation.\n \n    INSN is the insn that we may be modifying.  If it is 0, make a copy\n    of X before modifying it.  */"}]}