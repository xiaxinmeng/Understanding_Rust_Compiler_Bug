{"sha": "2284f91b110a72392473ec763f64c1e7ea12a1d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4NGY5MWIxMTBhNzIzOTI0NzNlYzc2M2Y2NGMxZTdlYTEyYTFkMA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-04-23T13:50:37Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-04-23T13:50:37Z"}, "message": "Initial revision\n\nFrom-SVN: r13967", "tree": {"sha": "1d8b494f248fe37b58e3e3b4abc228b0660fd96a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d8b494f248fe37b58e3e3b4abc228b0660fd96a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2284f91b110a72392473ec763f64c1e7ea12a1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2284f91b110a72392473ec763f64c1e7ea12a1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2284f91b110a72392473ec763f64c1e7ea12a1d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2284f91b110a72392473ec763f64c1e7ea12a1d0/comments", "author": null, "committer": null, "parents": [{"sha": "263967e71dd4fff21dddb0cd8122a83091510843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263967e71dd4fff21dddb0cd8122a83091510843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263967e71dd4fff21dddb0cd8122a83091510843"}], "stats": {"total": 2281, "additions": 2281, "deletions": 0}, "files": [{"sha": "7de6200c184737392c134b2125000b0274450ea8", "filename": "gcc/install.texi", "status": "added", "additions": 2281, "deletions": 0, "changes": 2281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2284f91b110a72392473ec763f64c1e7ea12a1d0/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2284f91b110a72392473ec763f64c1e7ea12a1d0/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=2284f91b110a72392473ec763f64c1e7ea12a1d0", "patch": "@@ -0,0 +1,2281 @@\n+@c Copyright (C) 1988,89,92,93,94,95,96 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@c The text of this file appears in the file INSTALL\n+@c in the GCC distribution, as well as in the GCC manual.\n+\n+@ifclear INSTALLONLY\n+@node Installation\n+@chapter Installing GNU CC\n+@end ifclear\n+@cindex installing GNU CC\n+\n+@menu\n+* Configurations::    Configurations Supported by GNU CC.\n+* Other Dir::     Compiling in a separate directory (not where the source is).\n+* Cross-Compiler::   Building and installing a cross-compiler.\n+* Sun Install::   See below for installation on the Sun.\n+* VMS Install::   See below for installation on VMS.\n+* Collect2::\t  How @code{collect2} works; how it finds @code{ld}.\n+* Header Dirs::   Understanding the standard header file directories.\n+@end menu\n+\n+Here is the procedure for installing GNU CC on a Unix system.  See\n+@ref{VMS Install}, for VMS systems.  In this section we assume you\n+compile in the same directory that contains the source files; see\n+@ref{Other Dir}, to find out how to compile in a separate directory on Unix\n+systems.\n+\n+You cannot install GNU C by itself on MSDOS; it will not compile under\n+any MSDOS compiler except itself.  You need to get the complete\n+compilation package DJGPP, which includes binaries as well as sources,\n+and includes all the necessary compilation tools and libraries.\n+\n+@enumerate\n+@item\n+If you have built GNU CC previously in the same directory for a\n+different target machine, do @samp{make distclean} to delete all files\n+that might be invalid.  One of the files this deletes is\n+@file{Makefile}; if @samp{make distclean} complains that @file{Makefile}\n+does not exist, it probably means that the directory is already suitably\n+clean.\n+\n+@item\n+On a System V release 4 system, make sure @file{/usr/bin} precedes\n+@file{/usr/ucb} in @code{PATH}.  The @code{cc} command in\n+@file{/usr/ucb} uses libraries which have bugs.\n+\n+@item\n+Specify the host, build and target machine configurations.  You do this\n+by running the file @file{configure}.\n+\n+The @dfn{build} machine is the system which you are using, the\n+@dfn{host} machine is the system where you want to run the resulting\n+compiler (normally the build machine), and the @dfn{target} machine is\n+the system for which you want the compiler to generate code.\n+\n+If you are building a compiler to produce code for the machine it runs\n+on (a native compiler), you normally do not need to specify any operands\n+to @file{configure}; it will try to guess the type of machine you are on\n+and use that as the build, host and target machines.  So you don't need\n+to specify a configuration when building a native compiler unless\n+@file{configure} cannot figure out what your configuration is or guesses\n+wrong.\n+\n+In those cases, specify the build machine's @dfn{configuration name}\n+with the @samp{--build} option; the host and target will default to be\n+the same as the build machine.  (If you are building a cross-compiler,\n+see @ref{Cross-Compiler}.)\n+\n+Here is an example:\n+\n+@smallexample\n+./configure --build=sparc-sun-sunos4.1\n+@end smallexample\n+\n+A configuration name may be canonical or it may be more or less\n+abbreviated.\n+\n+A canonical configuration name has three parts, separated by dashes.\n+It looks like this: @samp{@var{cpu}-@var{company}-@var{system}}.\n+(The three parts may themselves contain dashes; @file{configure}\n+can figure out which dashes serve which purpose.)  For example,\n+@samp{m68k-sun-sunos4.1} specifies a Sun 3.\n+\n+You can also replace parts of the configuration by nicknames or aliases.\n+For example, @samp{sun3} stands for @samp{m68k-sun}, so\n+@samp{sun3-sunos4.1} is another way to specify a Sun 3.  You can also\n+use simply @samp{sun3-sunos}, since the version of SunOS is assumed by\n+default to be version 4.\n+\n+You can specify a version number after any of the system types, and some\n+of the CPU types.  In most cases, the version is irrelevant, and will be\n+ignored.  So you might as well specify the version if you know it.\n+\n+See @ref{Configurations}, for a list of supported configuration names and\n+notes on many of the configurations.  You should check the notes in that\n+section before proceeding any further with the installation of GNU CC.\n+\n+There are four additional options you can specify independently to\n+describe variant hardware and software configurations.  These are\n+@samp{--with-gnu-as}, @samp{--with-gnu-ld}, @samp{--with-stabs} and\n+@samp{--nfp}.\n+\n+@table @samp\n+@item --with-gnu-as\n+If you will use GNU CC with the GNU assembler (GAS), you should declare\n+this by using the @samp{--with-gnu-as} option when you run\n+@file{configure}.\n+\n+Using this option does not install GAS.  It only modifies the output of\n+GNU CC to work with GAS.  Building and installing GAS is up to you.\n+\n+Conversely, if you @emph{do not} wish to use GAS and do not specify\n+@samp{--with-gnu-as} when building GNU CC, it is up to you to make sure\n+that GAS is not installed.  GNU CC searches for a program named\n+@code{as} in various directories; if the program it finds is GAS, then\n+it runs GAS.  If you are not sure where GNU CC finds the assembler it is\n+using, try specifying @samp{-v} when you run it.\n+\n+The systems where it makes a difference whether you use GAS are@*\n+@samp{hppa1.0-@var{any}-@var{any}}, @samp{hppa1.1-@var{any}-@var{any}},\n+@samp{i386-@var{any}-sysv}, @samp{i386-@var{any}-isc},@*\n+@samp{i860-@var{any}-bsd}, @samp{m68k-bull-sysv},@*\n+@samp{m68k-hp-hpux}, @samp{m68k-sony-bsd},@*\n+@samp{m68k-altos-sysv}, @samp{m68000-hp-hpux},@*\n+@samp{m68000-att-sysv}, @samp{@var{any}-lynx-lynxos},\n+and @samp{mips-@var{any}}).\n+On any other system, @samp{--with-gnu-as} has no effect.\n+\n+On the systems listed above (except for the HP-PA, for ISC on the\n+386, and for @samp{mips-sgi-irix5.*}), if you use GAS, you should also\n+use the GNU linker (and specify @samp{--with-gnu-ld}).\n+\n+@item --with-gnu-ld\n+Specify the option @samp{--with-gnu-ld} if you plan to use the GNU\n+linker with GNU CC.\n+\n+This option does not cause the GNU linker to be installed; it just\n+modifies the behavior of GNU CC to work with the GNU linker.\n+Specifically, it inhibits the installation of @code{collect2}, a program\n+which otherwise serves as a front-end for the system's linker on most\n+configurations.\n+\n+@item --with-stabs\n+On MIPS based systems and on Alphas, you must specify whether you want\n+GNU CC to create the normal ECOFF debugging format, or to use BSD-style\n+stabs passed through the ECOFF symbol table.  The normal ECOFF debug\n+format cannot fully handle languages other than C.  BSD stabs format can\n+handle other languages, but it only works with the GNU debugger GDB.\n+\n+Normally, GNU CC uses the ECOFF debugging format by default; if you\n+prefer BSD stabs, specify @samp{--with-stabs} when you configure GNU\n+CC.\n+\n+No matter which default you choose when you configure GNU CC, the user\n+can use the @samp{-gcoff} and @samp{-gstabs+} options to specify explicitly\n+the debug format for a particular compilation.\n+\n+@samp{--with-stabs} is meaningful on the ISC system on the 386, also, if\n+@samp{--with-gas} is used.  It selects use of stabs debugging\n+information embedded in COFF output.  This kind of debugging information\n+supports C++ well; ordinary COFF debugging information does not.\n+\n+@samp{--with-stabs} is also meaningful on 386 systems running SVR4.  It\n+selects use of stabs debugging information embedded in ELF output.  The\n+C++ compiler currently (2.6.0) does not support the DWARF debugging\n+information normally used on 386 SVR4 platforms; stabs provide a\n+workable alternative.  This requires gas and gdb, as the normal SVR4\n+tools can not generate or interpret stabs.\n+\n+@item --nfp\n+On certain systems, you must specify whether the machine has a floating\n+point unit.  These systems include @samp{m68k-sun-sunos@var{n}} and\n+@samp{m68k-isi-bsd}.  On any other system, @samp{--nfp} currently has no\n+effect, though perhaps there are other systems where it could usefully\n+make a difference.\n+\n+@cindex Objective C threads\n+@cindex threads, Objective C\n+@item --enable-objcthreads=@var{type}\n+Certain systems, notably Linux, can't be relied on to supply a threads\n+facility for the Objective C runtime and so will default to\n+single-threaded runtime.  They may, however, have a library threads\n+implementation available, in which case threads can be enabled with this\n+option by supplying a suitable @var{type}, probably @samp{posix}.\n+The possibilities for @var{type} are @samp{single}, @samp{posix},\n+@samp{win32}, @samp{solaris}, @samp{irix} and @samp{mach}.\n+@end table\n+\n+The @file{configure} script searches subdirectories of the source\n+directory for other compilers that are to be integrated into GNU CC.\n+The GNU compiler for C++, called G++ is in a subdirectory named\n+@file{cp}.  @file{configure} inserts rules into @file{Makefile} to build\n+all of those compilers.\n+\n+Here we spell out what files will be set up by @code{configure}.  Normally\n+you need not be concerned with these files.\n+\n+@itemize @bullet\n+@item\n+@ifset INTERNALS\n+A file named @file{config.h} is created that contains a @samp{#include}\n+of the top-level config file for the machine you will run the compiler\n+on (@pxref{Config}).  This file is responsible for defining information\n+about the host machine.  It includes @file{tm.h}.\n+@end ifset\n+@ifclear INTERNALS\n+A file named @file{config.h} is created that contains a @samp{#include}\n+of the top-level config file for the machine you will run the compiler\n+on (@pxref{Config,,The Configuration File, gcc.info, Using and Porting\n+GCC}).  This file is responsible for defining information about the host\n+machine.  It includes @file{tm.h}.\n+@end ifclear\n+\n+The top-level config file is located in the subdirectory @file{config}.\n+Its name is always @file{xm-@var{something}.h}; usually\n+@file{xm-@var{machine}.h}, but there are some exceptions.\n+\n+If your system does not support symbolic links, you might want to\n+set up @file{config.h} to contain a @samp{#include} command which\n+refers to the appropriate file.\n+\n+@item\n+A file named @file{tconfig.h} is created which includes the top-level config\n+file for your target machine.  This is used for compiling certain\n+programs to run on that machine.\n+\n+@item\n+A file named @file{tm.h} is created which includes the\n+machine-description macro file for your target machine.  It should be in\n+the subdirectory @file{config} and its name is often\n+@file{@var{machine}.h}.\n+\n+@item\n+The command file @file{configure} also constructs the file\n+@file{Makefile} by adding some text to the template file\n+@file{Makefile.in}.  The additional text comes from files in the\n+@file{config} directory, named @file{t-@var{target}} and\n+@file{x-@var{host}}.  If these files do not exist, it means nothing\n+needs to be added for a given target or host.\n+@end itemize\n+\n+@item\n+The standard directory for installing GNU CC is @file{/usr/local/lib}.\n+If you want to install its files somewhere else, specify\n+@samp{--prefix=@var{dir}} when you run @file{configure}.  Here @var{dir}\n+is a directory name to use instead of @file{/usr/local} for all purposes\n+with one exception: the directory @file{/usr/local/include} is searched\n+for header files no matter where you install the compiler.  To override\n+this name, use the @code{--local-prefix} option below.\n+\n+@item\n+Specify @samp{--local-prefix=@var{dir}} if you want the compiler to\n+search directory @file{@var{dir}/include} for locally installed header\n+files @emph{instead} of @file{/usr/local/include}.\n+\n+You should specify @samp{--local-prefix} @strong{only} if your site has\n+a different convention (not @file{/usr/local}) for where to put\n+site-specific files.\n+\n+The default value for @samp{--local-prefix} is @file{/usr/local}\n+regardless of the value of @samp{--prefix}.  Specifying @samp{--prefix}\n+has no effect on which directory GNU CC searches for local header files.\n+This may seem counterintuitive, but actually it is logical.\n+\n+The purpose of @samp{--prefix} is to specify where to @emph{install GNU\n+CC}.  The local header files in @file{/usr/local/include}---if you put\n+any in that directory---are not part of GNU CC.  They are part of other\n+programs---perhaps many others.  (GNU CC installs its own header files\n+in another directory which is based on the @samp{--prefix} value.)\n+\n+@strong{Do not} specify @file{/usr} as the @samp{--local-prefix}!  The\n+directory you use for @samp{--local-prefix} @strong{must not} contain\n+any of the system's standard header files.  If it did contain them,\n+certain programs would be miscompiled (including GNU Emacs, on certain\n+targets), because this would override and nullify the header file\n+corrections made by the @code{fixincludes} script.\n+\n+Indications are that people who use this option use it based on\n+mistaken ideas of what it is for.  People use it as if it specified\n+where to install part of GNU CC.  Perhaps they make this assumption\n+because installing GNU CC creates the directory.\n+\n+@cindex Bison parser generator\n+@cindex parser generator, Bison\n+@item\n+Make sure the Bison parser generator is installed.  (This is\n+unnecessary if the Bison output files @file{c-parse.c} and\n+@file{cexp.c} are more recent than @file{c-parse.y} and @file{cexp.y}\n+and you do not plan to change the @samp{.y} files.)\n+\n+Bison versions older than Sept 8, 1988 will produce incorrect output\n+for @file{c-parse.c}.\n+\n+@item\n+If you have chosen a configuration for GNU CC which requires other GNU\n+tools (such as GAS or the GNU linker) instead of the standard system\n+tools, install the required tools in the build directory under the names\n+@file{as}, @file{ld} or whatever is appropriate.  This will enable the\n+compiler to find the proper tools for compilation of the program\n+@file{enquire}.\n+\n+Alternatively, you can do subsequent compilation using a value of the\n+@code{PATH} environment variable such that the necessary GNU tools come\n+before the standard system tools.\n+\n+@item\n+Build the compiler.  Just type @samp{make LANGUAGES=c} in the compiler\n+directory.\n+\n+@samp{LANGUAGES=c} specifies that only the C compiler should be\n+compiled.  The makefile normally builds compilers for all the supported\n+languages; currently, C, C++ and Objective C.  However, C is the only\n+language that is sure to work when you build with other non-GNU C\n+compilers.  In addition, building anything but C at this stage is a\n+waste of time.\n+\n+In general, you can specify the languages to build by typing the\n+argument @samp{LANGUAGES=\"@var{list}\"}, where @var{list} is one or more\n+words from the list @samp{c}, @samp{c++}, and @samp{objective-c}.  If\n+you have any additional GNU compilers as subdirectories of the GNU CC\n+source directory, you may also specify their names in this list.\n+\n+Ignore any warnings you may see about ``statement not reached'' in\n+@file{insn-emit.c}; they are normal.  Also, warnings about ``unknown\n+escape sequence'' are normal in @file{genopinit.c} and perhaps some\n+other files.  Likewise, you should ignore warnings about ``constant is\n+so large that it is unsigned'' in @file{insn-emit.c} and\n+@file{insn-recog.c} and a warning about a comparison always being zero\n+in @file{enquire.o}.  Any other compilation errors may represent bugs in\n+the port to your machine or operating system, and\n+@ifclear INSTALLONLY\n+should be investigated and reported (@pxref{Bugs}).\n+@end ifclear\n+@ifset INSTALLONLY\n+should be investigated and reported.\n+@end ifset\n+\n+Some commercial compilers fail to compile GNU CC because they have bugs\n+or limitations.  For example, the Microsoft compiler is said to run out\n+of macro space.  Some Ultrix compilers run out of expression space; then\n+you need to break up the statement where the problem happens.\n+\n+@item\n+If you are building a cross-compiler, stop here.  @xref{Cross-Compiler}.\n+\n+@cindex stage1\n+@item\n+Move the first-stage object files and executables into a subdirectory\n+with this command:\n+\n+@smallexample\n+make stage1\n+@end smallexample\n+\n+The files are moved into a subdirectory named @file{stage1}.\n+Once installation is complete, you may wish to delete these files\n+with @code{rm -r stage1}.\n+\n+@item\n+If you have chosen a configuration for GNU CC which requires other GNU\n+tools (such as GAS or the GNU linker) instead of the standard system\n+tools, install the required tools in the @file{stage1} subdirectory\n+under the names @file{as}, @file{ld} or whatever is appropriate.  This\n+will enable the stage 1 compiler to find the proper tools in the\n+following stage.\n+\n+Alternatively, you can do subsequent compilation using a value of the\n+@code{PATH} environment variable such that the necessary GNU tools come\n+before the standard system tools.\n+\n+@item\n+Recompile the compiler with itself, with this command:\n+\n+@smallexample\n+make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2\"\n+@end smallexample\n+\n+This is called making the stage 2 compiler.\n+\n+The command shown above builds compilers for all the supported\n+languages.  If you don't want them all, you can specify the languages to\n+build by typing the argument @samp{LANGUAGES=\"@var{list}\"}.  @var{list}\n+should contain one or more words from the list @samp{c}, @samp{c++},\n+@samp{objective-c}, and @samp{proto}.  Separate the words with spaces.\n+@samp{proto} stands for the programs @code{protoize} and\n+@code{unprotoize}; they are not a separate language, but you use\n+@code{LANGUAGES} to enable or disable their installation.\n+\n+If you are going to build the stage 3 compiler, then you might want to\n+build only the C language in stage 2.\n+\n+Once you have built the stage 2 compiler, if you are short of disk\n+space, you can delete the subdirectory @file{stage1}.\n+\n+On a 68000 or 68020 system lacking floating point hardware,\n+unless you have selected a @file{tm.h} file that expects by default\n+that there is no such hardware, do this instead:\n+\n+@smallexample\n+make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2 -msoft-float\"\n+@end smallexample\n+\n+@item\n+If you wish to test the compiler by compiling it with itself one more\n+time, install any other necessary GNU tools (such as GAS or the GNU\n+linker) in the @file{stage2} subdirectory as you did in the\n+@file{stage1} subdirectory, then do this:\n+\n+@smallexample\n+make stage2\n+make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\"\n+@end smallexample\n+\n+@noindent\n+This is called making the stage 3 compiler.  Aside from the @samp{-B}\n+option, the compiler options should be the same as when you made the\n+stage 2 compiler.  But the @code{LANGUAGES} option need not be the\n+same.  The command shown above builds compilers for all the supported\n+languages; if you don't want them all, you can specify the languages to\n+build by typing the argument @samp{LANGUAGES=\"@var{list}\"}, as described\n+above.\n+\n+If you do not have to install any additional GNU tools, you may use the\n+command\n+\n+@smallexample\n+make bootstrap LANGUAGES=@var{language-list} BOOT_CFLAGS=@var{option-list}\n+@end smallexample\n+\n+@noindent\n+instead of making @file{stage1}, @file{stage2}, and performing\n+the two compiler builds.\n+\n+@item\n+Then compare the latest object files with the stage 2 object\n+files---they ought to be identical, aside from time stamps (if any).\n+\n+On some systems, meaningful comparison of object files is impossible;\n+they always appear ``different.''  This is currently true on Solaris and\n+some systems that use ELF object file format.  On some versions of Irix\n+on SGI machines and DEC Unix (OSF/1) on Alpha systems, you will not be\n+able to compare the files without specifying @file{-save-temps}; see the\n+description of individual systems above to see if you get comparison\n+failures.  You may have similar problems on other systems.\n+\n+Use this command to compare the files:\n+\n+@smallexample\n+make compare\n+@end smallexample\n+\n+This will mention any object files that differ between stage 2 and stage\n+3.  Any difference, no matter how innocuous, indicates that the stage 2\n+compiler has compiled GNU CC incorrectly, and is therefore a potentially\n+@ifclear INSTALLONLY\n+serious bug which you should investigate and report (@pxref{Bugs}).\n+@end ifclear\n+@ifset INSTALLONLY\n+serious bug which you should investigate and report.\n+@end ifset\n+\n+If your system does not put time stamps in the object files, then this\n+is a faster way to compare them (using the Bourne shell):\n+\n+@smallexample\n+for file in *.o; do\n+cmp $file stage2/$file\n+done\n+@end smallexample\n+\n+If you have built the compiler with the @samp{-mno-mips-tfile} option on\n+MIPS machines, you will not be able to compare the files.\n+\n+@item\n+Install the compiler driver, the compiler's passes and run-time support\n+with @samp{make install}.  Use the same value for @code{CC},\n+@code{CFLAGS} and @code{LANGUAGES} that you used when compiling the\n+files that are being installed.  One reason this is necessary is that\n+some versions of Make have bugs and recompile files gratuitously when\n+you do this step.  If you use the same variable values, those files will\n+be recompiled properly.\n+\n+For example, if you have built the stage 2 compiler, you can use the\n+following command:\n+\n+@smallexample\n+make install CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O\" LANGUAGES=\"@var{list}\"\n+@end smallexample\n+\n+@noindent\n+This copies the files @file{cc1}, @file{cpp} and @file{libgcc.a} to\n+files @file{cc1}, @file{cpp} and @file{libgcc.a} in the directory\n+@file{/usr/local/lib/gcc-lib/@var{target}/@var{version}}, which is where\n+the compiler driver program looks for them.  Here @var{target} is the\n+target machine type specified when you ran @file{configure}, and\n+@var{version} is the version number of GNU CC.  This naming scheme\n+permits various versions and/or cross-compilers to coexist.\n+It also copies the executables for compilers for other languages\n+(e.g., @file{cc1plus} for C++) to the same directory.\n+\n+This also copies the driver program @file{xgcc} into\n+@file{/usr/local/bin/gcc}, so that it appears in typical execution\n+search paths.  It also copies @file{gcc.1} into\n+@file{/usr/local/man/man1} and info pages into @file{/usr/local/info}.\n+\n+On some systems, this command causes recompilation of some files.  This\n+is usually due to bugs in @code{make}.  You should either ignore this\n+problem, or use GNU Make.\n+\n+@cindex @code{alloca} and SunOS\n+@strong{Warning: there is a bug in @code{alloca} in the Sun library.  To\n+avoid this bug, be sure to install the executables of GNU CC that were\n+compiled by GNU CC.  (That is, the executables from stage 2 or 3, not\n+stage 1.)  They use @code{alloca} as a built-in function and never the\n+one in the library.}\n+\n+(It is usually better to install GNU CC executables from stage 2 or 3,\n+since they usually run faster than the ones compiled with some other\n+compiler.)\n+\n+@item\n+If you're going to use C++, it's likely that you need to also install\n+the libg++ distribution.  It should be available from the same\n+place where you got the GNU C distribution.  Just as GNU C does not\n+distribute a C runtime library, it also does not include a C++ run-time\n+library.  All I/O functionality, special class libraries, etc., are\n+available in the libg++ distribution.\n+\n+@item\n+GNU CC includes a runtime library for Objective-C because it is an\n+integral part of the language.  You can find the files associated with\n+the library in the subdirectory @file{objc}.  The GNU Objective-C\n+Runtime Library requires header files for the target's C library in\n+order to be compiled,and also requires the header files for the target's\n+thread library if you want thread support.  @xref{Cross Headers,\n+Cross-Compilers and Header Files, Cross-Compilers and Header Files}, for\n+discussion about header files issues for cross-compilation.\n+\n+When you run @file{configure}, it picks the appropriate Objective-C\n+thread implementation file for the target platform.  In some situations,\n+you may wish to choose a different back-end as some platforms support\n+multiple thread implementations or you may wish to disable thread\n+support completely.  You do this by specifying a value for the\n+@var{OBJC_THREAD_FILE} makefile variable on the command line when you\n+run make, for example:\n+\n+@smallexample\n+make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\" OBJC_THREAD_FILE=thr-single\n+@end smallexample\n+\n+@noindent\n+Below is a list of the currently available back-ends.\n+\n+@itemize @bullet\n+@item thr-single\n+Disable thread support, should work for all platforms.\n+@item thr-decosf1\n+DEC OSF/1 thread support.\n+@item thr-irix\n+SGI IRIX thread support.\n+@item thr-mach\n+Generic MACH thread support, known to work on NEXTSTEP.\n+@item thr-os2\n+IBM OS/2 thread support.\n+@item thr-posix\n+Generix POSIX thread support.\n+@item thr-pthreads\n+PCThreads on Linux-based GNU systems.\n+@item thr-solaris\n+SUN Solaris thread support.\n+@item thr-win32\n+Microsoft Win32 API thread support.\n+@end itemize\n+@end enumerate\n+\n+@node Configurations\n+@section Configurations Supported by GNU CC\n+@cindex configurations supported by GNU CC\n+\n+Here are the possible CPU types:\n+\n+@quotation\n+@c gmicro, alliant, spur and tahoe omitted since they don't work.\n+1750a, a29k, alpha, arm, c@var{n}, clipper, dsp16xx, elxsi, h8300,\n+hppa1.0, hppa1.1, i370, i386, i486, i586, i860, i960, m68000, m68k,\n+m88k, mips, mipsel, mips64, mips64el, ns32k, powerpc, powerpcle,\n+pyramid, romp, rs6000, sh, sparc, sparclite, sparc64, vax, we32k.\n+@end quotation\n+\n+Here are the recognized company names.  As you can see, customary\n+abbreviations are used rather than the longer official names.\n+\n+@c What should be done about merlin, tek*, dolphin?\n+@quotation\n+acorn, alliant, altos, apollo, apple, att, bull,\n+cbm, convergent, convex, crds, dec, dg, dolphin,\n+elxsi, encore, harris, hitachi, hp, ibm, intergraph, isi,\n+mips, motorola, ncr, next, ns, omron, plexus,\n+sequent, sgi, sony, sun, tti, unicom, wrs.\n+@end quotation\n+\n+The company name is meaningful only to disambiguate when the rest of\n+the information supplied is insufficient.  You can omit it, writing\n+just @samp{@var{cpu}-@var{system}}, if it is not needed.  For example,\n+@samp{vax-ultrix4.2} is equivalent to @samp{vax-dec-ultrix4.2}.\n+\n+Here is a list of system types:\n+\n+@quotation\n+386bsd, aix, acis, amigados, aos, aout, aux, bosx, bsd, clix, coff, ctix, cxux,\n+dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms, genix, gnu, gnu/linux,\n+hiux, hpux, iris, irix, isc, luna, lynxos, mach, minix, msdos, mvs,\n+netbsd, newsos, nindy, ns, osf, osfrose, ptx, riscix, riscos, rtu, sco, sim,\n+solaris, sunos, sym, sysv, udi, ultrix, unicos, uniplus, unos, vms, vsta,\n+vxworks, winnt, xenix.\n+@end quotation\n+\n+@noindent\n+You can omit the system type; then @file{configure} guesses the\n+operating system from the CPU and company.\n+\n+You can add a version number to the system type; this may or may not\n+make a difference.  For example, you can write @samp{bsd4.3} or\n+@samp{bsd4.4} to distinguish versions of BSD.  In practice, the version\n+number is most needed for @samp{sysv3} and @samp{sysv4}, which are often\n+treated differently.\n+\n+If you specify an impossible combination such as @samp{i860-dg-vms},\n+then you may get an error message from @file{configure}, or it may\n+ignore part of the information and do the best it can with the rest.\n+@file{configure} always prints the canonical name for the alternative\n+that it used.  GNU CC does not support all possible alternatives.\n+\n+Often a particular model of machine has a name.  Many machine names are\n+recognized as aliases for CPU/company combinations.  Thus, the machine\n+name @samp{sun3}, mentioned above, is an alias for @samp{m68k-sun}.\n+Sometimes we accept a company name as a machine name, when the name is\n+popularly used for a particular machine.  Here is a table of the known\n+machine names:\n+\n+@quotation\n+3300, 3b1, 3b@var{n}, 7300, altos3068, altos,\n+apollo68, att-7300, balance,\n+convex-c@var{n}, crds, decstation-3100,\n+decstation, delta, encore,\n+fx2800, gmicro, hp7@var{nn}, hp8@var{nn},\n+hp9k2@var{nn}, hp9k3@var{nn}, hp9k7@var{nn},\n+hp9k8@var{nn}, iris4d, iris, isi68,\n+m3230, magnum, merlin, miniframe,\n+mmax, news-3600, news800, news, next,\n+pbd, pc532, pmax, powerpc, powerpcle, ps2, risc-news,\n+rtpc, sun2, sun386i, sun386, sun3,\n+sun4, symmetry, tower-32, tower.\n+@end quotation\n+\n+@noindent\n+Remember that a machine name specifies both the cpu type and the company\n+name.\n+If you want to install your own homemade configuration files, you can\n+use @samp{local} as the company name to access them.  If you use\n+configuration @samp{@var{cpu}-local}, the configuration name\n+without the cpu prefix\n+is used to form the configuration file names.\n+\n+Thus, if you specify @samp{m68k-local}, configuration uses\n+files @file{m68k.md}, @file{local.h}, @file{m68k.c},\n+@file{xm-local.h}, @file{t-local}, and @file{x-local}, all in the\n+directory @file{config/m68k}.\n+\n+Here is a list of configurations that have special treatment or special\n+things you must know:\n+\n+@table @samp\n+@item 1750a-*-*\n+MIL-STD-1750A processors.\n+\n+The MIL-STD-1750A cross configuration produces output for\n+@code{as1750}, an assembler/linker available under the GNU Public\n+License for the 1750A. @code{as1750} can be obtained at \n+@emph{ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/}.\n+A similarly licensed simulator for\n+the 1750A is available from same address.\n+\n+You should ignore a fatal error during the building of libgcc (libgcc is\n+not yet implemented for the 1750A.)\n+\n+The @code{as1750} assembler requires the file @file{ms1750.inc}, which is\n+found in the directory @file{config/1750a}.\n+\n+GNU CC produced the same sections as the Fairchild F9450 C Compiler,\n+namely:\n+\n+@table @code\n+@item Normal\n+The program code section.\n+\n+@item Static\n+The read/write (RAM) data section.\n+\n+@item Konst\n+The read-only (ROM) constants section.\n+\n+@item Init\n+Initialization section (code to copy KREL to SREL).\n+@end table\n+\n+The smallest addressable unit is 16 bits (BITS_PER_UNIT is 16).  This\n+means that type `char' is represented with a 16-bit word per character.\n+The 1750A's \"Load/Store Upper/Lower Byte\" instructions are not used by\n+GNU CC.\n+\n+@item alpha-*-osf1\n+Systems using processors that implement the DEC Alpha architecture and\n+are running the DEC Unix (OSF/1) operating system, for example the DEC\n+Alpha AXP systems.  (VMS on the Alpha is not currently supported by GNU\n+CC.)\n+\n+GNU CC writes a @samp{.verstamp} directive to the assembler output file\n+unless it is built as a cross-compiler.  It gets the version to use from\n+the system header file @file{/usr/include/stamp.h}.  If you install a\n+new version of DEC Unix, you should rebuild GCC to pick up the new version\n+stamp.\n+\n+Note that since the Alpha is a 64-bit architecture, cross-compilers from\n+32-bit machines will not generate code as efficient as that generated\n+when the compiler is running on a 64-bit machine because many\n+optimizations that depend on being able to represent a word on the\n+target in an integral value on the host cannot be performed.  Building\n+cross-compilers on the Alpha for 32-bit machines has only been tested in\n+a few cases and may not work properly.\n+\n+@code{make compare} may fail on old versions of DEC Unix unless you add\n+@samp{-save-temps} to @code{CFLAGS}.  On these systems, the name of the\n+assembler input file is stored in the object file, and that makes\n+comparison fail if it differs between the @code{stage1} and\n+@code{stage2} compilations.  The option @samp{-save-temps} forces a\n+fixed name to be used for the assembler input file, instead of a\n+randomly chosen name in @file{/tmp}.  Do not add @samp{-save-temps}\n+unless the comparisons fail without that option.  If you add\n+@samp{-save-temps}, you will have to manually delete the @samp{.i} and\n+@samp{.s} files after each series of compilations.\n+\n+GNU CC now supports both the native (ECOFF) debugging format used by DBX\n+and GDB and an encapsulated STABS format for use only with GDB.  See the\n+discussion of the @samp{--with-stabs} option of @file{configure} above\n+for more information on these formats and how to select them.\n+\n+There is a bug in DEC's assembler that produces incorrect line numbers\n+for ECOFF format when the @samp{.align} directive is used.  To work\n+around this problem, GNU CC will not emit such alignment directives\n+while writing ECOFF format debugging information even if optimization is\n+being performed.  Unfortunately, this has the very undesirable\n+side-effect that code addresses when @samp{-O} is specified are\n+different depending on whether or not @samp{-g} is also specified.\n+\n+To avoid this behavior, specify @samp{-gstabs+} and use GDB instead of\n+DBX.  DEC is now aware of this problem with the assembler and hopes to\n+provide a fix shortly.\n+\n+@item arm\n+Advanced RISC Machines ARM-family processors.  These are often used in\n+embedded applications.  There are no standard Unix configurations.\n+This configuration corresponds to the basic instruction sequences and will\n+produce a.out format object modules.\n+\n+You may need to make a variant of the file @file{arm.h} for your particular\n+configuration.\n+\n+@item arm-*-riscix\n+The ARM2 or ARM3 processor running RISC iX, Acorn's port of BSD Unix.  If\n+you are running a version of RISC iX prior to 1.2 then you must specify\n+the version number during configuration.  Note that the assembler\n+shipped with RISC iX does not support stabs debugging information; a\n+new version of the assembler, with stabs support included, is now\n+available from Acorn.\n+\n+@item a29k\n+AMD Am29k-family processors.  These are normally used in embedded\n+applications.  There are no standard Unix configurations.\n+This configuration\n+corresponds to AMD's standard calling sequence and binary interface\n+and is compatible with other 29k tools.\n+\n+You may need to make a variant of the file @file{a29k.h} for your\n+particular configuration.\n+\n+@item a29k-*-bsd\n+AMD Am29050 used in a system running a variant of BSD Unix.\n+\n+@item decstation-*\n+DECstations can support three different personalities: Ultrix,\n+DEC OSF/1, and OSF/rose.  To configure GCC for these platforms\n+use the following configurations:\n+\n+@table @samp\n+@item decstation-ultrix\n+Ultrix configuration.\n+\n+@item decstation-osf1\n+Dec's version of OSF/1.\n+\n+@item decstation-osfrose\n+Open Software Foundation reference port of OSF/1 which uses the\n+OSF/rose object file format instead of ECOFF.  Normally, you\n+would not select this configuration.\n+@end table\n+\n+The MIPS C compiler needs to be told to increase its table size\n+for switch statements with the @samp{-Wf,-XNg1500} option in\n+order to compile @file{cp/parse.c}.  If you use the @samp{-O2}\n+optimization option, you also need to use @samp{-Olimit 3000}.\n+Both of these options are automatically generated in the\n+@file{Makefile} that the shell script @file{configure} builds.\n+If you override the @code{CC} make variable and use the MIPS\n+compilers, you may need to add @samp{-Wf,-XNg1500 -Olimit 3000}.\n+\n+@item elxsi-elxsi-bsd\n+The Elxsi's C compiler has known limitations that prevent it from\n+compiling GNU C.  Please contact @code{mrs@@cygnus.com} for more details.\n+\n+@item dsp16xx\n+A port to the AT&T DSP1610 family of processors.\n+\n+@ignore\n+@item fx80\n+Alliant FX/8 computer.  Note that the standard installed C compiler in\n+Concentrix 5.0 has a bug which prevent it from compiling GNU CC\n+correctly.  You can patch the compiler bug as follows:\n+\n+@smallexample\n+cp /bin/pcc ./pcc\n+adb -w ./pcc - << EOF\n+15f6?w 6610\n+EOF\n+@end smallexample\n+\n+Then you must use the @samp{-ip12} option when compiling GNU CC\n+with the patched compiler, as shown here:\n+\n+@smallexample\n+make CC=\"./pcc -ip12\" CFLAGS=-w\n+@end smallexample\n+\n+Note also that Alliant's version of DBX does not manage to work with the\n+output from GNU CC.\n+@end ignore\n+\n+@item h8300-*-*\n+The calling convention and structure layout has changed in release 2.6.\n+All code must be recompiled.  The calling convention now passes the\n+first three arguments in function calls in registers.  Structures are no\n+longer a multiple of 2 bytes.\n+\n+@item hppa*-*-*\n+There are several variants of the HP-PA processor which run a variety\n+of operating systems.  GNU CC must be configured to use the correct\n+processor type and operating system, or GNU CC will not function correctly.\n+The easiest way to handle this problem is to @emph{not} specify a target\n+when configuring GNU CC, the @file{configure} script will try to automatically\n+determine the right processor type and operating system.\n+\n+@samp{-g} does not work on HP-UX, since that system uses a peculiar\n+debugging format which GNU CC does not know about.  However, @samp{-g}\n+will work if you also use GAS and GDB in conjunction with GCC.  We\n+highly recommend using GAS for all HP-PA configurations.\n+\n+You should be using GAS-2.6 (or later) along with GDB-4.16 (or later).  These\n+can be retrieved from all the traditional GNU ftp archive sites.\n+\n+GAS will need to be installed into a directory before @code{/bin},\n+@code{/usr/bin}, and @code{/usr/ccs/bin} in your search path.  You\n+should install GAS before you build GNU CC.\n+\n+To enable debugging, you must configure GNU CC with the @samp{--with-gnu-as}\n+option before building.\n+\n+@item i370-*-*\n+This port is very preliminary and has many known bugs.  We hope to\n+have a higher-quality port for this machine soon.\n+\n+@item i386-*-linuxoldld\n+Use this configuration to generate a.out binaries on Linux if you do not\n+have gas/binutils version 2.5.2 or later installed. This is an obsolete\n+configuration.\n+\n+@item i386-*-linuxaout\n+Use this configuration to generate a.out binaries on Linux. This configuration\n+is being superseded. You must use gas/binutils version 2.5.2 or\n+later.\n+\n+@item i386-*-linux\n+Use this configuration to generate ELF binaries on Linux.  You must\n+use gas/binutils version 2.5.2 or later.\n+\n+@item i386-*-sco\n+Compilation with RCC is recommended.  Also, it may be a good idea to\n+link with GNU malloc instead of the malloc that comes with the system.\n+\n+@item i386-*-sco3.2v4\n+Use this configuration for SCO release 3.2 version 4.\n+\n+@item i386-*-sco3.2v5*\n+Use this for SCO Open Server Release 5.0.  GNU CC can generate ELF\n+binaries (if you specify @samp{-melf}) or COFF binaries (the default).\n+If you are going to build your compiler in ELF mode (once you have\n+bootstrapped the first stage compiler) you @strong{must} specify\n+@samp{-melf} as part of CC, @emph{not} CFLAGS.  You should\n+use some variant of: @samp{CC=\"stage1/xgcc -melf\" CFLAGS=\"-Bstage1/\"} etc.\n+If you do not do this, the boostrap will generate completely bogus versions\n+of libgcc.a generated.\n+\n+You must have TLS597 (from ftp.sco.com/TLS) installed for ELF\n+binaries to work correctly. Note that Open Server 5.0.2 @emph{does}\n+need TLS597 installed.\n+\n+@item i386-*-isc\n+It may be a good idea to link with GNU malloc instead of the malloc that\n+comes with the system.\n+\n+In ISC version 4.1, @file{sed} core dumps when building\n+@file{deduced.h}.  Use the version of @file{sed} from version 4.0.\n+\n+@item i386-*-esix\n+It may be good idea to link with GNU malloc instead of the malloc that\n+comes with the system.\n+\n+@item i386-ibm-aix\n+You need to use GAS version 2.1 or later, and LD from\n+GNU binutils version 2.2 or later.\n+\n+@item i386-sequent-bsd\n+Go to the Berkeley universe before compiling.  In addition, you probably\n+need to create a file named @file{string.h} containing just one line:\n+@samp{#include <strings.h>}.\n+\n+@item i386-sequent-ptx1*\n+Sequent DYNIX/ptx 1.x.\n+\n+@item i386-sequent-ptx2*\n+Sequent DYNIX/ptx 2.x.\n+\n+@item i386-sun-sunos4\n+You may find that you need another version of GNU CC to begin\n+bootstrapping with, since the current version when built with the\n+system's own compiler seems to get an infinite loop compiling part of\n+@file{libgcc2.c}.  GNU CC version 2 compiled with GNU CC (any version)\n+seems not to have this problem.\n+\n+See @ref{Sun Install}, for information on installing GNU CC on Sun\n+systems.\n+\n+@item i[345]86-*-winnt3.5\n+This version requires a GAS that has not let been released.  Until it\n+is, you can get a prebuilt binary version via anonymous ftp from\n+@file{cs.washington.edu:pub/gnat} or @file{cs.nyu.edu:pub/gnat}. You\n+must also use the Microsoft header files from the Windows NT 3.5 SDK.\n+Find these on the CDROM in the @file{/mstools/h} directory dated 9/4/94.  You\n+must use a fixed version of Microsoft linker made especially for NT 3.5,\n+which is also is available on the NT 3.5 SDK CDROM.  If you do not have\n+this linker, can you also use the linker from Visual C/C++ 1.0 or 2.0.\n+\n+Installing GNU CC for NT builds a wrapper linker, called @file{ld.exe},\n+which mimics the behaviour of Unix @file{ld} in the specification of\n+libraries (@samp{-L} and @samp{-l}).  @file{ld.exe} looks for both Unix\n+and Microsoft named libraries.  For example, if you specify\n+@samp{-lfoo}, @file{ld.exe} will look first for @file{libfoo.a}\n+and then for @file{foo.lib}.\n+\n+You may install GNU CC for Windows NT in one of two ways, depending on\n+whether or not you have a Unix-like shell and various Unix-like\n+utilities.\n+\n+@enumerate\n+@item\n+If you do not have a Unix-like shell and few Unix-like utilities, you\n+will use a DOS style batch script called @file{configure.bat}.  Invoke\n+it as @code{configure winnt} from an MSDOS console window or from the\n+program manager dialog box.  @file{configure.bat} assumes you have\n+already installed and have in your path a Unix-like @file{sed} program\n+which is used to create a working @file{Makefile} from @file{Makefile.in}.\n+\n+@file{Makefile} uses the Microsoft Nmake program maintenance utility and\n+the Visual C/C++ V8.00 compiler to build GNU CC.  You need only have the\n+utilities @file{sed} and @file{touch} to use this installation method,\n+which only automatically builds the compiler itself.  You must then\n+examine what @file{fixinc.winnt} does, edit the header files by hand and\n+build @file{libgcc.a} manually.\n+\n+@item\n+The second type of installation assumes you are running a Unix-like\n+shell, have a complete suite of Unix-like utilities in your path, and\n+have a previous version of GNU CC already installed, either through\n+building it via the above installation method or acquiring a pre-built\n+binary.  In this case, use the @file{configure} script in the normal\n+fashion.\n+@end enumerate\n+\n+@item i860-intel-osf1\n+This is the Paragon.\n+@ifset INSTALLONLY\n+If you have version 1.0 of the operating system, you need to take\n+special steps to build GNU CC due to peculiarities of the system.  Newer\n+system versions have no problem.  See the section `Installation Problems'\n+in the GNU CC Manual.\n+@end ifset\n+@ifclear INSTALLONLY\n+If you have version 1.0 of the operating system,\n+see @ref{Installation Problems}, for special things you need to do to\n+compensate for peculiarities in the system.\n+@end ifclear\n+\n+@item *-lynx-lynxos\n+LynxOS 2.2 and earlier comes with GNU CC 1.x already installed as\n+@file{/bin/gcc}.  You should compile with this instead of @file{/bin/cc}.\n+You can tell GNU CC to use the GNU assembler and linker, by specifying\n+@samp{--with-gnu-as --with-gnu-ld} when configuring.  These will produce\n+COFF format object files and executables;  otherwise GNU CC will use the\n+installed tools, which produce a.out format executables.\n+\n+@item m68000-hp-bsd\n+HP 9000 series 200 running BSD.  Note that the C compiler that comes\n+with this system cannot compile GNU CC; contact @code{law@@cs.utah.edu}\n+to get binaries of GNU CC for bootstrapping.\n+\n+@item m68k-altos\n+Altos 3068.  You must use the GNU assembler, linker and debugger.\n+Also, you must fix a kernel bug.  Details in the file @file{README.ALTOS}.\n+\n+@item m68k-apple-aux\n+Apple Macintosh running A/UX.\n+You may configure GCC  to use either the system assembler and\n+linker or the GNU assembler and linker.  You should use the GNU configuration\n+if you can, especially if you also want to use GNU C++.  You enabled\n+that configuration with + the @samp{--with-gnu-as} and @samp{--with-gnu-ld}\n+options to @code{configure}.\n+\n+Note the C compiler that comes\n+with this system cannot compile GNU CC.  You can fine binaries of GNU CC\n+for bootstrapping on @code{jagubox.gsfc.nasa.gov}.\n+You will also a patched version of @file{/bin/ld} there that\n+raises some of the arbitrary limits found in the original.\n+\n+@item m68k-att-sysv\n+AT&T 3b1, a.k.a. 7300 PC.  Special procedures are needed to compile GNU\n+CC with this machine's standard C compiler, due to bugs in that\n+compiler.  You can bootstrap it more easily with\n+previous versions of GNU CC if you have them.\n+\n+Installing GNU CC on the 3b1 is difficult if you do not already have\n+GNU CC running, due to bugs in the installed C compiler.  However,\n+the following procedure might work.  We are unable to test it.\n+\n+@enumerate\n+@item\n+Comment out the @samp{#include \"config.h\"} line on line 37 of\n+@file{cccp.c} and do @samp{make cpp}.  This makes a preliminary version\n+of GNU cpp.\n+\n+@item\n+Save the old @file{/lib/cpp} and copy the preliminary GNU cpp to that\n+file name.\n+\n+@item\n+Undo your change in @file{cccp.c}, or reinstall the original version,\n+and do @samp{make cpp} again.\n+\n+@item\n+Copy this final version of GNU cpp into @file{/lib/cpp}.\n+\n+@findex obstack_free\n+@item\n+Replace every occurrence of @code{obstack_free} in the file\n+@file{tree.c} with @code{_obstack_free}.\n+\n+@item\n+Run @code{make} to get the first-stage GNU CC.\n+\n+@item\n+Reinstall the original version of @file{/lib/cpp}.\n+\n+@item\n+Now you can compile GNU CC with itself and install it in the normal\n+fashion.\n+@end enumerate\n+\n+@item m68k-bull-sysv\n+Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GNU CC works\n+either with native assembler or GNU assembler. You can use\n+GNU assembler with native coff generation by providing @samp{--with-gnu-as} to\n+the configure script or use GNU assembler with dbx-in-coff encapsulation\n+by providing @samp{--with-gnu-as --stabs}. For any problem with native\n+assembler or for availability of the DPX/2 port of GAS, contact\n+@code{F.Pierresteguy@@frcl.bull.fr}.\n+\n+@item m68k-crds-unox\n+Use @samp{configure unos} for building on Unos.\n+\n+The Unos assembler is named @code{casm} instead of @code{as}.  For some\n+strange reason linking @file{/bin/as} to @file{/bin/casm} changes the\n+behavior, and does not work.  So, when installing GNU CC, you should\n+install the following script as @file{as} in the subdirectory where\n+the passes of GCC are installed:\n+\n+@example\n+#!/bin/sh\n+casm $*\n+@end example\n+\n+The default Unos library is named @file{libunos.a} instead of\n+@file{libc.a}.  To allow GNU CC to function, either change all\n+references to @samp{-lc} in @file{gcc.c} to @samp{-lunos} or link\n+@file{/lib/libc.a} to @file{/lib/libunos.a}.\n+\n+@cindex @code{alloca}, for Unos\n+When compiling GNU CC with the standard compiler, to overcome bugs in\n+the support of @code{alloca}, do not use @samp{-O} when making stage 2.\n+Then use the stage 2 compiler with @samp{-O} to make the stage 3\n+compiler.  This compiler will have the same characteristics as the usual\n+stage 2 compiler on other systems.  Use it to make a stage 4 compiler\n+and compare that with stage 3 to verify proper compilation.\n+\n+(Perhaps simply defining @code{ALLOCA} in @file{x-crds} as described in\n+the comments there will make the above paragraph superfluous.  Please\n+inform us of whether this works.)\n+\n+Unos uses memory segmentation instead of demand paging, so you will need\n+a lot of memory.  5 Mb is barely enough if no other tasks are running.\n+If linking @file{cc1} fails, try putting the object files into a library\n+and linking from that library.\n+\n+@item m68k-hp-hpux\n+HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0 has a bug in\n+the assembler that prevents compilation of GNU CC.  To fix it, get patch\n+PHCO_4484 from HP.\n+\n+In addition, if you wish to use gas @samp{--with-gnu-as} you must use\n+gas version 2.1 or later, and you must use the GNU linker version 2.1 or\n+later.  Earlier versions of gas relied upon a program which converted the\n+gas output into the native HP/UX format, but that program has not been\n+kept up to date.  gdb does not understand that native HP/UX format, so\n+you must use gas if you wish to use gdb.\n+\n+@item m68k-sun\n+Sun 3.  We do not provide a configuration file to use the Sun FPA by\n+default, because programs that establish signal handlers for floating\n+point traps inherently cannot work with the FPA.\n+\n+See @ref{Sun Install}, for information on installing GNU CC on Sun\n+systems.\n+\n+@item m88k-*-svr3\n+Motorola m88k running the AT&T/Unisoft/Motorola V.3 reference port.\n+These systems tend to use the Green Hills C, revision 1.8.5, as the\n+standard C compiler.  There are apparently bugs in this compiler that\n+result in object files differences between stage 2 and stage 3.  If this\n+happens, make the stage 4 compiler and compare it to the stage 3\n+compiler.  If the stage 3 and stage 4 object files are identical, this\n+suggests you encountered a problem with the standard C compiler; the\n+stage 3 and 4 compilers may be usable.\n+\n+It is best, however, to use an older version of GNU CC for bootstrapping\n+if you have one.\n+\n+@item m88k-*-dgux\n+Motorola m88k running DG/UX.  To build 88open BCS native or cross\n+compilers on DG/UX, specify the configuration name as\n+@samp{m88k-*-dguxbcs} and build in the 88open BCS software development\n+environment.  To build ELF native or cross compilers on DG/UX, specify\n+@samp{m88k-*-dgux} and build in the DG/UX ELF development environment.\n+You set the software development environment by issuing\n+@samp{sde-target} command and specifying either @samp{m88kbcs} or\n+@samp{m88kdguxelf} as the operand.\n+\n+If you do not specify a configuration name, @file{configure} guesses the\n+configuration based on the current software development environment.\n+\n+@item m88k-tektronix-sysv3\n+Tektronix XD88 running UTekV 3.2e.  Do not turn on\n+optimization while building stage1 if you bootstrap with\n+the buggy Green Hills compiler.  Also, The bundled LAI\n+System V NFS is buggy so if you build in an NFS mounted\n+directory, start from a fresh reboot, or avoid NFS all together.\n+Otherwise you may have trouble getting clean comparisons\n+between stages.\n+\n+@item mips-mips-bsd\n+MIPS machines running the MIPS operating system in BSD mode.  It's\n+possible that some old versions of the system lack the functions\n+@code{memcpy}, @code{memcmp}, and @code{memset}.  If your system lacks\n+these, you must remove or undo the definition of\n+@code{TARGET_MEM_FUNCTIONS} in @file{mips-bsd.h}.\n+\n+The MIPS C compiler needs to be told to increase its table size\n+for switch statements with the @samp{-Wf,-XNg1500} option in\n+order to compile @file{cp/parse.c}.  If you use the @samp{-O2}\n+optimization option, you also need to use @samp{-Olimit 3000}.\n+Both of these options are automatically generated in the\n+@file{Makefile} that the shell script @file{configure} builds.\n+If you override the @code{CC} make variable and use the MIPS\n+compilers, you may need to add @samp{-Wf,-XNg1500 -Olimit 3000}.\n+\n+@item mips-mips-riscos*\n+The MIPS C compiler needs to be told to increase its table size\n+for switch statements with the @samp{-Wf,-XNg1500} option in\n+order to compile @file{cp/parse.c}.  If you use the @samp{-O2}\n+optimization option, you also need to use @samp{-Olimit 3000}.\n+Both of these options are automatically generated in the\n+@file{Makefile} that the shell script @file{configure} builds.\n+If you override the @code{CC} make variable and use the MIPS\n+compilers, you may need to add @samp{-Wf,-XNg1500 -Olimit 3000}.\n+\n+MIPS computers running RISC-OS can support four different\n+personalities: default, BSD 4.3, System V.3, and System V.4\n+(older versions of RISC-OS don't support V.4).  To configure GCC\n+for these platforms use the following configurations:\n+\n+@table @samp\n+@item mips-mips-riscos@code{rev}\n+Default configuration for RISC-OS, revision @code{rev}.\n+\n+@item mips-mips-riscos@code{rev}bsd\n+BSD 4.3 configuration for RISC-OS, revision @code{rev}.\n+\n+@item mips-mips-riscos@code{rev}sysv4\n+System V.4 configuration for RISC-OS, revision @code{rev}.\n+\n+@item mips-mips-riscos@code{rev}sysv\n+System V.3 configuration for RISC-OS, revision @code{rev}.\n+@end table\n+\n+The revision @code{rev} mentioned above is the revision of\n+RISC-OS to use.  You must reconfigure GCC when going from a\n+RISC-OS revision 4 to RISC-OS revision 5.  This has the effect of\n+avoiding a linker\n+@ifclear INSTALLONLY\n+bug (see @ref{Installation Problems}, for more details).\n+@end ifclear\n+@ifset INSTALLONLY\n+bug.\n+@end ifset\n+\n+@item mips-sgi-*\n+In order to compile GCC on an SGI running IRIX 4, the \"c.hdr.lib\"\n+option must be installed from the CD-ROM supplied from Silicon Graphics.\n+This is found on the 2nd CD in release 4.0.1.\n+\n+In order to compile GCC on an SGI running IRIX 5, the \"compiler_dev.hdr\"\n+subsystem must be installed from the IDO CD-ROM supplied by Silicon\n+Graphics.\n+\n+@code{make compare} may fail on version 5 of IRIX unless you add\n+@samp{-save-temps} to @code{CFLAGS}.  On these systems, the name of the\n+assembler input file is stored in the object file, and that makes\n+comparison fail if it differs between the @code{stage1} and\n+@code{stage2} compilations.  The option @samp{-save-temps} forces a\n+fixed name to be used for the assembler input file, instead of a\n+randomly chosen name in @file{/tmp}.  Do not add @samp{-save-temps}\n+unless the comparisons fail without that option.  If you do you\n+@samp{-save-temps}, you will have to manually delete the @samp{.i} and\n+@samp{.s} files after each series of compilations.\n+\n+The MIPS C compiler needs to be told to increase its table size\n+for switch statements with the @samp{-Wf,-XNg1500} option in\n+order to compile @file{cp/parse.c}.  If you use the @samp{-O2}\n+optimization option, you also need to use @samp{-Olimit 3000}.\n+Both of these options are automatically generated in the\n+@file{Makefile} that the shell script @file{configure} builds.\n+If you override the @code{CC} make variable and use the MIPS\n+compilers, you may need to add @samp{-Wf,-XNg1500 -Olimit 3000}.\n+\n+On Irix version 4.0.5F, and perhaps on some other versions as well,\n+there is an assembler bug that reorders instructions incorrectly.  To\n+work around it, specify the target configuration\n+@samp{mips-sgi-irix4loser}.  This configuration inhibits assembler\n+optimization.\n+\n+In a compiler configured with target @samp{mips-sgi-irix4}, you can turn\n+off assembler optimization by using the @samp{-noasmopt} option.  This\n+compiler option passes the option @samp{-O0} to the assembler, to\n+inhibit reordering.\n+\n+The @samp{-noasmopt} option can be useful for testing whether a problem\n+is due to erroneous assembler reordering.  Even if a problem does not go\n+away with @samp{-noasmopt}, it may still be due to assembler\n+reordering---perhaps GNU CC itself was miscompiled as a result.\n+\n+To enable debugging under Irix 5, you must use GNU as 2.5 or later,\n+and use the @samp{--with-gnu-as} configure option when configuring gcc.\n+GNU as is distributed as part of the binutils package.\n+\n+@item mips-sony-sysv\n+Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2 (which\n+uses ELF instead of COFF).  Support for 5.0.2 will probably be provided\n+soon by volunteers.  In particular, the linker does not like the\n+code generated by GCC when shared libraries are linked in.\n+\n+@item ns32k-encore\n+Encore ns32000 system.  Encore systems are supported only under BSD.\n+\n+@item ns32k-*-genix\n+National Semiconductor ns32000 system.  Genix has bugs in @code{alloca}\n+and @code{malloc}; you must get the compiled versions of these from GNU\n+Emacs.\n+\n+@item ns32k-sequent\n+Go to the Berkeley universe before compiling.  In addition, you probably\n+need to create a file named @file{string.h} containing just one line:\n+@samp{#include <strings.h>}.\n+\n+@item ns32k-utek\n+UTEK ns32000 system (``merlin'').  The C compiler that comes with this\n+system cannot compile GNU CC; contact @samp{tektronix!reed!mason} to get\n+binaries of GNU CC for bootstrapping.\n+\n+@item romp-*-aos\n+@itemx romp-*-mach\n+The only operating systems supported for the IBM RT PC are AOS and\n+MACH.  GNU CC does not support AIX running on the RT.  We recommend you\n+compile GNU CC with an earlier version of itself; if you compile GNU CC\n+with @code{hc}, the Metaware compiler, it will work, but you will get\n+mismatches between the stage 2 and stage 3 compilers in various files.\n+These errors are minor differences in some floating-point constants and\n+can be safely ignored; the stage 3 compiler is correct.\n+\n+@item rs6000-*-aix\n+@itemx powerpc-*-aix\n+Various early versions of each release of the IBM XLC compiler will not\n+bootstrap GNU CC.  Symptoms include differences between the stage2 and\n+stage3 object files, and errors when compiling @file{libgcc.a} or\n+@file{enquire}.  Known problematic releases include: xlc-1.2.1.8,\n+xlc-1.3.0.0 (distributed with AIX 3.2.5), and xlc-1.3.0.19.  Both\n+xlc-1.2.1.28 and xlc-1.3.0.24 (PTF 432238) are known to produce working\n+versions of GNU CC, but most other recent releases correctly bootstrap\n+GNU CC.  Also, releases of AIX prior to AIX 3.2.4 include a version of\n+the IBM assembler which does not accept debugging directives: assembler\n+updates are available as PTFs.  Also, if you are using AIX 3.2.5 or\n+greater and the GNU assembler, you must have a version modified after\n+October 16th, 1995 in order for the GNU C compiler to build.  See the\n+file @file{README.RS6000} for more details on of these problems.\n+\n+GNU CC does not yet support the 64-bit PowerPC instructions.\n+\n+Objective C does not work on this architecture because it makes assumptions\n+that are incompatible with the calling conventions.\n+\n+AIX on the RS/6000 provides support (NLS) for environments outside of\n+the United States.  Compilers and assemblers use NLS to support\n+locale-specific representations of various objects including\n+floating-point numbers (\".\" vs \",\" for separating decimal fractions).\n+There have been problems reported where the library linked with GNU CC\n+does not produce the same floating-point formats that the assembler\n+accepts.  If you have this problem, set the LANG environment variable to\n+\"C\" or \"En_US\".\n+\n+Due to changes in the way that GNU CC invokes the binder (linker) for AIX\n+4.1, you may now receive warnings of duplicate symbols from the link step\n+that were not reported before.  The assembly files generated by GNU CC for\n+AIX have always included multiple symbol definitions for certain global\n+variable and function declarations in the original program.  The warnings\n+should not prevent the linker from producing a correct library or runnable\n+executable.\n+\n+By default, AIX 4.1 produces code that can be used on either Power or\n+PowerPC processors.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpc-*-elf\n+@itemx powerpc-*-sysv4\n+PowerPC system in big endian mode, running System V.4.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpc-*-linux\n+PowerPC system in big endian mode, running Linux.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpc-*-eabiaix\n+Embedded PowerPC system in big endian mode with -mcall-aix selected as\n+the default.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpc-*-eabisim\n+Embedded PowerPC system in big endian mode for use in running under the\n+PSIM simulator.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpc-*-eabi\n+Embedded PowerPC system in big endian mode.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpcle-*-elf\n+@itemx powerpcle-*-sysv4\n+PowerPC system in little endian mode, running System V.4.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpcle-*-solaris2*\n+PowerPC system in little endian mode, running Solaris 2.5.1 or higher.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+Beta versions of the Sun 4.0 compiler do not seem to be able to build\n+GNU CC correctly.  There are also problems with the host assembler and\n+linker that are fixed by using the GNU versions of these tools.\n+\n+@item powerpcle-*-eabisim\n+Embedded PowerPC system in little endian mode for use in running under\n+the PSIM simulator.\n+\n+@itemx powerpcle-*-eabi\n+Embedded PowerPC system in little endian mode.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item powerpcle-*-winnt\n+@itemx powerpcle-*-pe\n+PowerPC system in little endian mode running Windows NT.\n+\n+You can specify a default version for the @samp{-mcpu=}@var{cpu_type}\n+switch by using the configure option @samp{--with-cpu-}@var{cpu_type}.\n+\n+@item vax-dec-ultrix\n+Don't try compiling with Vax C (@code{vcc}).  It produces incorrect code\n+in some cases (for example, when @code{alloca} is used).\n+\n+Meanwhile, compiling @file{cp/parse.c} with pcc does not work because of\n+an internal table size limitation in that compiler.  To avoid this\n+problem, compile just the GNU C compiler first, and use it to recompile\n+building all the languages that you want to run.\n+\n+@item sparc-sun-*\n+@item sparc64-sun-*\n+See @ref{Sun Install}, for information on installing GNU CC on Sun\n+systems.\n+\n+@item vax-dec-vms\n+See @ref{VMS Install}, for details on how to install GNU CC on VMS.\n+\n+@item we32k-*-*\n+These computers are also known as the 3b2, 3b5, 3b20 and other similar\n+names.  (However, the 3b1 is actually a 68000; see\n+@ref{Configurations}.)\n+\n+Don't use @samp{-g} when compiling with the system's compiler.  The\n+system's linker seems to be unable to handle such a large program with\n+debugging information.\n+\n+The system's compiler runs out of capacity when compiling @file{stmt.c}\n+in GNU CC.  You can work around this by building @file{cpp} in GNU CC\n+first, then use that instead of the system's preprocessor with the\n+system's C compiler to compile @file{stmt.c}.  Here is how:\n+\n+@smallexample\n+mv /lib/cpp /lib/cpp.att\n+cp cpp /lib/cpp.gnu\n+echo '/lib/cpp.gnu -traditional $@{1+\"$@@\"@}' > /lib/cpp\n+chmod +x /lib/cpp\n+@end smallexample\n+\n+The system's compiler produces bad code for some of the GNU CC\n+optimization files.  So you must build the stage 2 compiler without\n+optimization.  Then build a stage 3 compiler with optimization.\n+That executable should work.  Here are the necessary commands:\n+\n+@smallexample\n+make LANGUAGES=c CC=stage1/xgcc CFLAGS=\"-Bstage1/ -g\"\n+make stage2\n+make CC=stage2/xgcc CFLAGS=\"-Bstage2/ -g -O\"\n+@end smallexample\n+\n+You may need to raise the ULIMIT setting to build a C++ compiler,\n+as the file @file{cc1plus} is larger than one megabyte.\n+@end table\n+\n+@node Other Dir\n+@section Compilation in a Separate Directory\n+@cindex other directory, compilation in\n+@cindex compilation in a separate directory\n+@cindex separate directory, compilation in\n+\n+If you wish to build the object files and executables in a directory\n+other than the one containing the source files, here is what you must\n+do differently:\n+\n+@enumerate\n+@item\n+Make sure you have a version of Make that supports the @code{VPATH}\n+feature.  (GNU Make supports it, as do Make versions on most BSD\n+systems.)\n+\n+@item\n+If you have ever run @file{configure} in the source directory, you must undo\n+the configuration.  Do this by running:\n+\n+@example\n+make distclean\n+@end example\n+\n+@item\n+Go to the directory in which you want to build the compiler before\n+running @file{configure}:\n+\n+@example\n+mkdir gcc-sun3\n+cd gcc-sun3\n+@end example\n+\n+On systems that do not support symbolic links, this directory must be\n+on the same file system as the source code directory.\n+\n+@item\n+Specify where to find @file{configure} when you run it:\n+\n+@example\n+../gcc/configure @dots{}\n+@end example\n+\n+This also tells @code{configure} where to find the compiler sources;\n+@code{configure} takes the directory from the file name that was used to\n+invoke it.  But if you want to be sure, you can specify the source\n+directory with the @samp{--srcdir} option, like this:\n+\n+@example\n+../gcc/configure --srcdir=../gcc @var{other options}\n+@end example\n+\n+The directory you specify with @samp{--srcdir} need not be the same\n+as the one that @code{configure} is found in.\n+@end enumerate\n+\n+Now, you can run @code{make} in that directory.  You need not repeat the\n+configuration steps shown above, when ordinary source files change.  You\n+must, however, run @code{configure} again when the configuration files\n+change, if your system does not support symbolic links.\n+\n+@node Cross-Compiler\n+@section Building and Installing a Cross-Compiler\n+@cindex cross-compiler, installation\n+\n+GNU CC can function as a cross-compiler for many machines, but not all.\n+\n+@itemize @bullet\n+@item\n+Cross-compilers for the Mips as target using the Mips assembler\n+currently do not work, because the auxiliary programs\n+@file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on\n+anything but a Mips.  It does work to cross compile for a Mips\n+if you use the GNU assembler and linker.\n+\n+@item\n+Cross-compilers between machines with different floating point formats\n+have not all been made to work.  GNU CC now has a floating point\n+emulator with which these can work, but each target machine description\n+needs to be updated to take advantage of it.\n+\n+@item\n+Cross-compilation between machines of different word sizes is\n+somewhat problematic and sometimes does not work.\n+@end itemize\n+\n+Since GNU CC generates assembler code, you probably need a\n+cross-assembler that GNU CC can run, in order to produce object files.\n+If you want to link on other than the target machine, you need a\n+cross-linker as well.  You also need header files and libraries suitable\n+for the target machine that you can install on the host machine.\n+\n+@menu\n+* Steps of Cross::      Using a cross-compiler involves several steps\n+                          that may be carried out on different machines.\n+* Configure Cross::     Configuring a cross-compiler.\n+* Tools and Libraries:: Where to put the linker and assembler, and the C library.\n+* Cross Headers::       Finding and installing header files\n+                          for a cross-compiler.\n+* Cross Runtime::       Supplying arithmetic runtime routines (@file{libgcc1.a}).\n+* Build Cross::         Actually compiling the cross-compiler.\n+@end menu\n+\n+@node Steps of Cross\n+@subsection Steps of Cross-Compilation\n+\n+To compile and run a program using a cross-compiler involves several\n+steps:\n+\n+@itemize @bullet\n+@item\n+Run the cross-compiler on the host machine to produce assembler files\n+for the target machine.  This requires header files for the target\n+machine.\n+\n+@item\n+Assemble the files produced by the cross-compiler.  You can do this\n+either with an assembler on the target machine, or with a\n+cross-assembler on the host machine.\n+\n+@item\n+Link those files to make an executable.  You can do this either with a\n+linker on the target machine, or with a cross-linker on the host\n+machine.  Whichever machine you use, you need libraries and certain\n+startup files (typically @file{crt@dots{}.o}) for the target machine.\n+@end itemize\n+\n+It is most convenient to do all of these steps on the same host machine,\n+since then you can do it all with a single invocation of GNU CC.  This\n+requires a suitable cross-assembler and cross-linker.  For some targets,\n+the GNU assembler and linker are available.\n+\n+@node Configure Cross\n+@subsection Configuring a Cross-Compiler\n+\n+To build GNU CC as a cross-compiler, you start out by running\n+@file{configure}.  Use the @samp{--target=@var{target}} to specify the\n+target type.  If @file{configure} was unable to correctly identify the\n+system you are running on, also specify the @samp{--build=@var{build}}\n+option.  For example, here is how to configure for a cross-compiler that\n+produces code for an HP 68030 system running BSD on a system that\n+@file{configure} can correctly identify:\n+\n+@smallexample\n+./configure --target=m68k-hp-bsd4.3\n+@end smallexample\n+\n+@node Tools and Libraries\n+@subsection Tools and Libraries for a Cross-Compiler\n+\n+If you have a cross-assembler and cross-linker available, you should\n+install them now.  Put them in the directory\n+@file{/usr/local/@var{target}/bin}.  Here is a table of the tools\n+you should put in this directory:\n+\n+@table @file\n+@item as\n+This should be the cross-assembler.\n+\n+@item ld\n+This should be the cross-linker.\n+\n+@item ar\n+This should be the cross-archiver: a program which can manipulate\n+archive files (linker libraries) in the target machine's format.\n+\n+@item ranlib\n+This should be a program to construct a symbol table in an archive file.\n+@end table\n+\n+The installation of GNU CC will find these programs in that directory,\n+and copy or link them to the proper place to for the cross-compiler to\n+find them when run later.\n+\n+The easiest way to provide these files is to build the Binutils package\n+and GAS.  Configure them with the same @samp{--host} and @samp{--target}\n+options that you use for configuring GNU CC, then build and install\n+them.  They install their executables automatically into the proper\n+directory.  Alas, they do not support all the targets that GNU CC\n+supports.\n+\n+If you want to install libraries to use with the cross-compiler, such as\n+a standard C library, put them in the directory\n+@file{/usr/local/@var{target}/lib}; installation of GNU CC copies\n+all the files in that subdirectory into the proper place for GNU CC to\n+find them and link with them.  Here's an example of copying some\n+libraries from a target machine:\n+\n+@example\n+ftp @var{target-machine}\n+lcd /usr/local/@var{target}/lib\n+cd /lib\n+get libc.a\n+cd /usr/lib\n+get libg.a\n+get libm.a\n+quit\n+@end example\n+\n+@noindent\n+The precise set of libraries you'll need, and their locations on\n+the target machine, vary depending on its operating system.\n+\n+@cindex start files\n+Many targets require ``start files'' such as @file{crt0.o} and\n+@file{crtn.o} which are linked into each executable; these too should be\n+placed in @file{/usr/local/@var{target}/lib}.  There may be several\n+alternatives for @file{crt0.o}, for use with profiling or other\n+compilation options.  Check your target's definition of\n+@code{STARTFILE_SPEC} to find out what start files it uses.\n+Here's an example of copying these files from a target machine:\n+\n+@example\n+ftp @var{target-machine}\n+lcd /usr/local/@var{target}/lib\n+prompt\n+cd /lib\n+mget *crt*.o\n+cd /usr/lib\n+mget *crt*.o\n+quit\n+@end example\n+\n+@node Cross Runtime\n+@subsection @file{libgcc.a} and Cross-Compilers\n+\n+Code compiled by GNU CC uses certain runtime support functions\n+implicitly.  Some of these functions can be compiled successfully with\n+GNU CC itself, but a few cannot be.  These problem functions are in the\n+source file @file{libgcc1.c}; the library made from them is called\n+@file{libgcc1.a}.\n+\n+When you build a native compiler, these functions are compiled with some\n+other compiler--the one that you use for bootstrapping GNU CC.\n+Presumably it knows how to open code these operations, or else knows how\n+to call the run-time emulation facilities that the machine comes with.\n+But this approach doesn't work for building a cross-compiler.  The\n+compiler that you use for building knows about the host system, not the\n+target system.\n+\n+So, when you build a cross-compiler you have to supply a suitable\n+library @file{libgcc1.a} that does the job it is expected to do.\n+\n+To compile @file{libgcc1.c} with the cross-compiler itself does not\n+work.  The functions in this file are supposed to implement arithmetic\n+operations that GNU CC does not know how to open code for your target\n+machine.  If these functions are compiled with GNU CC itself, they\n+will compile into infinite recursion.\n+\n+On any given target, most of these functions are not needed.  If GNU CC\n+can open code an arithmetic operation, it will not call these functions\n+to perform the operation.  It is possible that on your target machine,\n+none of these functions is needed.  If so, you can supply an empty\n+library as @file{libgcc1.a}.\n+\n+Many targets need library support only for multiplication and division.\n+If you are linking with a library that contains functions for\n+multiplication and division, you can tell GNU CC to call them directly\n+by defining the macros @code{MULSI3_LIBCALL}, and the like.  These\n+macros need to be defined in the target description macro file.  For\n+some targets, they are defined already.  This may be sufficient to\n+avoid the need for libgcc1.a; if so, you can supply an empty library.\n+\n+Some targets do not have floating point instructions; they need other\n+functions in @file{libgcc1.a}, which do floating arithmetic.\n+Recent versions of GNU CC have a file which emulates floating point.\n+With a certain amount of work, you should be able to construct a\n+floating point emulator that can be used as @file{libgcc1.a}.  Perhaps\n+future versions will contain code to do this automatically and\n+conveniently.  That depends on whether someone wants to implement it.\n+\n+Some embedded targets come with all the necessary @file{libgcc1.a}\n+routines written in C or assembler.  These targets build\n+@file{libgcc1.a} automatically and you do not need to do anything\n+special for them.  Other embedded targets do not need any\n+@file{libgcc1.a} routines since all the necessary operations are\n+supported by the hardware.\n+\n+If your target system has another C compiler, you can configure GNU CC\n+as a native compiler on that machine, build just @file{libgcc1.a} with\n+@samp{make libgcc1.a} on that machine, and use the resulting file with\n+the cross-compiler.  To do this, execute the following on the target\n+machine:\n+\n+@example\n+cd @var{target-build-dir}\n+./configure --host=sparc --target=sun3\n+make libgcc1.a\n+@end example\n+\n+@noindent\n+And then this on the host machine:\n+\n+@example\n+ftp @var{target-machine}\n+binary\n+cd @var{target-build-dir}\n+get libgcc1.a\n+quit\n+@end example\n+\n+Another way to provide the functions you need in @file{libgcc1.a} is to\n+define the appropriate @code{perform_@dots{}} macros for those\n+functions.  If these definitions do not use the C arithmetic operators\n+that they are meant to implement, you should be able to compile them\n+with the cross-compiler you are building.  (If these definitions already\n+exist for your target file, then you are all set.)\n+\n+To build @file{libgcc1.a} using the perform macros, use\n+@samp{LIBGCC1=libgcc1.a OLDCC=./xgcc} when building the compiler.\n+Otherwise, you should place your replacement library under the name\n+@file{libgcc1.a} in the directory in which you will build the\n+cross-compiler, before you run @code{make}.\n+\n+@node Cross Headers\n+@subsection Cross-Compilers and Header Files\n+\n+If you are cross-compiling a standalone program or a program for an\n+embedded system, then you may not need any header files except the few\n+that are part of GNU CC (and those of your program).  However, if you\n+intend to link your program with a standard C library such as\n+@file{libc.a}, then you probably need to compile with the header files\n+that go with the library you use.\n+\n+The GNU C compiler does not come with these files, because (1) they are\n+system-specific, and (2) they belong in a C library, not in a compiler.\n+\n+If the GNU C library supports your target machine, then you can get the\n+header files from there (assuming you actually use the GNU library when\n+you link your program).\n+\n+If your target machine comes with a C compiler, it probably comes with\n+suitable header files also.  If you make these files accessible from the host\n+machine, the cross-compiler can use them also.\n+\n+Otherwise, you're on your own in finding header files to use when\n+cross-compiling.\n+\n+When you have found suitable header files, put them in the directory\n+@file{/usr/local/@var{target}/include}, before building the cross\n+compiler.  Then installation will run fixincludes properly and install\n+the corrected versions of the header files where the compiler will use\n+them.\n+\n+Provide the header files before you build the cross-compiler, because\n+the build stage actually runs the cross-compiler to produce parts of\n+@file{libgcc.a}.  (These are the parts that @emph{can} be compiled with\n+GNU CC.)  Some of them need suitable header files.\n+\n+Here's an example showing how to copy the header files from a target\n+machine.  On the target machine, do this:\n+\n+@example\n+(cd /usr/include; tar cf - .) > tarfile\n+@end example\n+\n+Then, on the host machine, do this:\n+\n+@example\n+ftp @var{target-machine}\n+lcd /usr/local/@var{target}/include\n+get tarfile\n+quit\n+tar xf tarfile\n+@end example\n+\n+@node Build Cross\n+@subsection Actually Building the Cross-Compiler\n+\n+Now you can proceed just as for compiling a single-machine compiler\n+through the step of building stage 1.  If you have not provided some\n+sort of @file{libgcc1.a}, then compilation will give up at the point\n+where it needs that file, printing a suitable error message.  If you\n+do provide @file{libgcc1.a}, then building the compiler will automatically\n+compile and link a test program called @file{libgcc1-test}; if you get\n+errors in the linking, it means that not all of the necessary routines\n+in @file{libgcc1.a} are available.\n+\n+You must provide the header file @file{float.h}.  One way to do this is\n+to compile @file{enquire} and run it on your target machine.  The job of\n+@file{enquire} is to run on the target machine and figure out by\n+experiment the nature of its floating point representation.\n+@file{enquire} records its findings in the header file @file{float.h}.\n+If you can't produce this file by running @file{enquire} on the target\n+machine, then you will need to come up with a suitable @file{float.h} in\n+some other way (or else, avoid using it in your programs).\n+\n+Do not try to build stage 2 for a cross-compiler.  It doesn't work to\n+rebuild GNU CC as a cross-compiler using the cross-compiler, because\n+that would produce a program that runs on the target machine, not on the\n+host.  For example, if you compile a 386-to-68030 cross-compiler with\n+itself, the result will not be right either for the 386 (because it was\n+compiled into 68030 code) or for the 68030 (because it was configured\n+for a 386 as the host).  If you want to compile GNU CC into 68030 code,\n+whether you compile it on a 68030 or with a cross-compiler on a 386, you\n+must specify a 68030 as the host when you configure it.\n+\n+To install the cross-compiler, use @samp{make install}, as usual.\n+\n+@node Sun Install\n+@section Installing GNU CC on the Sun\n+@cindex Sun installation\n+@cindex installing GNU CC on the Sun\n+\n+On Solaris (version 2.1), do not use the linker or other tools in\n+@file{/usr/ucb} to build GNU CC.  Use @code{/usr/ccs/bin}.\n+\n+Make sure the environment variable @code{FLOAT_OPTION} is not set when\n+you compile @file{libgcc.a}.  If this option were set to @code{f68881}\n+when @file{libgcc.a} is compiled, the resulting code would demand to be\n+linked with a special startup file and would not link properly without\n+special pains.\n+\n+@cindex @code{alloca}, for SunOS\n+There is a bug in @code{alloca} in certain versions of the Sun library.\n+To avoid this bug, install the binaries of GNU CC that were compiled by\n+GNU CC.  They use @code{alloca} as a built-in function and never the one\n+in the library.\n+\n+Some versions of the Sun compiler crash when compiling GNU CC.  The\n+problem is a segmentation fault in cpp.  This problem seems to be due to\n+the bulk of data in the environment variables.  You may be able to avoid\n+it by using the following command to compile GNU CC with Sun CC:\n+\n+@example\n+make CC=\"TERMCAP=x OBJS=x LIBFUNCS=x STAGESTUFF=x cc\"\n+@end example\n+\n+SunOS 4.1.3 and 4.1.3_U1 have bugs that can cause intermittent core\n+dumps when compiling GNU CC.  A common symptom is an\n+internal compiler error which does not recur if you run it again.\n+To fix the problem, install Sun recommended patch 100726 (for SunOS 4.1.3)\n+or 101508 (for SunOS 4.1.3_U1), or upgrade to a later SunOS release.\n+\n+@node VMS Install\n+@section Installing GNU CC on VMS\n+@cindex VMS installation\n+@cindex installing GNU CC on VMS\n+\n+The VMS version of GNU CC is distributed in a backup saveset containing\n+both source code and precompiled binaries.\n+\n+To install the @file{gcc} command so you can use the compiler easily, in\n+the same manner as you use the VMS C compiler, you must install the VMS CLD\n+file for GNU CC as follows:\n+\n+@enumerate\n+@item\n+Define the VMS logical names @samp{GNU_CC} and @samp{GNU_CC_INCLUDE}\n+to point to the directories where the GNU CC executables\n+(@file{gcc-cpp.exe}, @file{gcc-cc1.exe}, etc.) and the C include files are\n+kept respectively.  This should be done with the commands:@refill\n+\n+@smallexample\n+$ assign /system /translation=concealed -\n+  disk:[gcc.] gnu_cc\n+$ assign /system /translation=concealed -\n+  disk:[gcc.include.] gnu_cc_include\n+@end smallexample\n+\n+@noindent\n+with the appropriate disk and directory names.  These commands can be\n+placed in your system startup file so they will be executed whenever\n+the machine is rebooted.  You may, if you choose, do this via the\n+@file{GCC_INSTALL.COM} script in the @file{[GCC]} directory.\n+\n+@item\n+Install the @file{GCC} command with the command line:\n+\n+@smallexample\n+$ set command /table=sys$common:[syslib]dcltables -\n+  /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc\n+$ install replace sys$common:[syslib]dcltables\n+@end smallexample\n+\n+@item\n+To install the help file, do the following:\n+\n+@smallexample\n+$ library/help sys$library:helplib.hlb gcc.hlp\n+@end smallexample\n+\n+@noindent\n+Now you can invoke the compiler with a command like @samp{gcc /verbose\n+file.c}, which is equivalent to the command @samp{gcc -v -c file.c} in\n+Unix.\n+@end enumerate\n+\n+If you wish to use GNU C++ you must first install GNU CC, and then\n+perform the following steps:\n+\n+@enumerate\n+@item\n+Define the VMS logical name @samp{GNU_GXX_INCLUDE} to point to the\n+directory where the preprocessor will search for the C++ header files.\n+This can be done with the command:@refill\n+\n+@smallexample\n+$ assign /system /translation=concealed -\n+  disk:[gcc.gxx_include.] gnu_gxx_include\n+@end smallexample\n+\n+@noindent\n+with the appropriate disk and directory name.  If you are going to be\n+using libg++, this is where the libg++ install procedure will install\n+the libg++ header files.\n+\n+@item\n+Obtain the file @file{gcc-cc1plus.exe}, and place this in the same\n+directory that @file{gcc-cc1.exe} is kept.\n+\n+The GNU C++ compiler can be invoked with a command like @samp{gcc /plus\n+/verbose file.cc}, which is equivalent to the command @samp{g++ -v -c\n+file.cc} in Unix.\n+@end enumerate\n+\n+We try to put corresponding binaries and sources on the VMS distribution\n+tape.  But sometimes the binaries will be from an older version than the\n+sources, because we don't always have time to update them.  (Use the\n+@samp{/version} option to determine the version number of the binaries and\n+compare it with the source file @file{version.c} to tell whether this is\n+so.)  In this case, you should use the binaries you get to recompile the\n+sources.  If you must recompile, here is how:\n+\n+@enumerate\n+@item\n+Execute the command procedure @file{vmsconfig.com} to set up the files\n+@file{tm.h}, @file{config.h}, @file{aux-output.c}, and @file{md.}, and\n+to create files @file{tconfig.h} and @file{hconfig.h}.  This procedure\n+also creates several linker option files used by @file{make-cc1.com} and\n+a data file used by @file{make-l2.com}.@refill\n+\n+@smallexample\n+$ @@vmsconfig.com\n+@end smallexample\n+\n+@item\n+Setup the logical names and command tables as defined above.  In\n+addition, define the VMS logical name @samp{GNU_BISON} to point at the\n+to the directories where the Bison executable is kept.  This should be\n+done with the command:@refill\n+\n+@smallexample\n+$ assign /system /translation=concealed -\n+  disk:[bison.] gnu_bison\n+@end smallexample\n+\n+You may, if you choose, use the @file{INSTALL_BISON.COM} script in the\n+@file{[BISON]} directory.\n+\n+@item\n+Install the @samp{BISON} command with the command line:@refill\n+\n+@smallexample\n+$ set command /table=sys$common:[syslib]dcltables -\n+  /output=sys$common:[syslib]dcltables -\n+  gnu_bison:[000000]bison\n+$ install replace sys$common:[syslib]dcltables\n+@end smallexample\n+\n+@item\n+Type @samp{@@make-gcc} to recompile everything (alternatively, submit\n+the file @file{make-gcc.com} to a batch queue).  If you wish to build\n+the GNU C++ compiler as well as the GNU CC compiler, you must first edit\n+@file{make-gcc.com} and follow the instructions that appear in the\n+comments.@refill\n+\n+@item\n+In order to use GCC, you need a library of functions which GCC compiled code\n+will call to perform certain tasks, and these functions are defined in the\n+file @file{libgcc2.c}.  To compile this you should use the command procedure\n+@file{make-l2.com}, which will generate the library @file{libgcc2.olb}.\n+@file{libgcc2.olb} should be built using the compiler built from\n+the same distribution that @file{libgcc2.c} came from, and\n+@file{make-gcc.com} will automatically do all of this for you.\n+\n+To install the library, use the following commands:@refill\n+\n+@smallexample\n+$ library gnu_cc:[000000]gcclib/delete=(new,eprintf)\n+$ library gnu_cc:[000000]gcclib/delete=L_*\n+$ library libgcc2/extract=*/output=libgcc2.obj\n+$ library gnu_cc:[000000]gcclib libgcc2.obj\n+@end smallexample\n+\n+The first command simply removes old modules that will be replaced with\n+modules from @file{libgcc2} under different module names.  The modules\n+@code{new} and @code{eprintf} may not actually be present in your\n+@file{gcclib.olb}---if the VMS librarian complains about those modules\n+not being present, simply ignore the message and continue on with the\n+next command.  The second command removes the modules that came from the\n+previous version of the library @file{libgcc2.c}.\n+\n+Whenever you update the compiler on your system, you should also update the\n+library with the above procedure.\n+\n+@item\n+You may wish to build GCC in such a way that no files are written to the\n+directory where the source files reside.  An example would be the when\n+the source files are on a read-only disk.  In these cases, execute the\n+following DCL commands (substituting your actual path names):\n+\n+@smallexample\n+$ assign dua0:[gcc.build_dir.]/translation=concealed, -\n+         dua1:[gcc.source_dir.]/translation=concealed  gcc_build\n+$ set default gcc_build:[000000]\n+@end smallexample\n+\n+@noindent\n+where the directory @file{dua1:[gcc.source_dir]} contains the source\n+code, and the directory @file{dua0:[gcc.build_dir]} is meant to contain\n+all of the generated object files and executables.  Once you have done\n+this, you can proceed building GCC as described above.  (Keep in mind\n+that @file{gcc_build} is a rooted logical name, and thus the device\n+names in each element of the search list must be an actual physical\n+device name rather than another rooted logical name).\n+\n+@item\n+@strong{If you are building GNU CC with a previous version of GNU CC,\n+you also should check to see that you have the newest version of the\n+assembler}.  In particular, GNU CC version 2 treats global constant\n+variables slightly differently from GNU CC version 1, and GAS version\n+1.38.1 does not have the patches required to work with GCC version 2.\n+If you use GAS 1.38.1, then @code{extern const} variables will not have\n+the read-only bit set, and the linker will generate warning messages\n+about mismatched psect attributes for these variables.  These warning\n+messages are merely a nuisance, and can safely be ignored.\n+\n+If you are compiling with a version of GNU CC older than 1.33, specify\n+@samp{/DEFINE=(\"inline=\")} as an option in all the compilations.  This\n+requires editing all the @code{gcc} commands in @file{make-cc1.com}.\n+(The older versions had problems supporting @code{inline}.)  Once you\n+have a working 1.33 or newer GNU CC, you can change this file back.\n+\n+@item\n+If you want to build GNU CC with the VAX C compiler, you will need to\n+make minor changes in @file{make-cccp.com} and @file{make-cc1.com}\n+to choose alternate definitions of @code{CC}, @code{CFLAGS}, and\n+@code{LIBS}.  See comments in those files.  However, you must\n+also have a working version of the GNU assembler (GNU as, aka GAS) as\n+it is used as the back-end for GNU CC to produce binary object modules\n+and is not included in the GNU CC sources.  GAS is also needed to\n+compile @file{libgcc2} in order to build @file{gcclib} (see above);\n+@file{make-l2.com} expects to be able to find it operational in\n+@file{gnu_cc:[000000]gnu-as.exe}.\n+\n+To use GNU CC on VMS, you need the VMS driver programs\n+@file{gcc.exe}, @file{gcc.com}, and @file{gcc.cld}.  They are\n+distributed with the VMS binaries (@file{gcc-vms}) rather than the\n+GNU CC sources.  GAS is also included in @file{gcc-vms}, as is Bison.\n+\n+Once you have successfully built GNU CC with VAX C, you should use the\n+resulting compiler to rebuild itself.  Before doing this, be sure to\n+restore the @code{CC}, @code{CFLAGS}, and @code{LIBS} definitions in\n+@file{make-cccp.com} and @file{make-cc1.com}.  The second generation\n+compiler will be able to take advantage of many optimizations that must\n+be suppressed when building with other compilers.\n+@end enumerate\n+\n+Under previous versions of GNU CC, the generated code would occasionally\n+give strange results when linked with the sharable @file{VAXCRTL} library.\n+Now this should work.\n+\n+Even with this version, however, GNU CC itself should not be linked with\n+the sharable @file{VAXCRTL}.  The version of @code{qsort} in\n+@file{VAXCRTL} has a bug (known to be present in VMS versions V4.6\n+through V5.5) which causes the compiler to fail.\n+\n+The executables are generated by @file{make-cc1.com} and\n+@file{make-cccp.com} use the object library version of @file{VAXCRTL} in\n+order to make use of the @code{qsort} routine in @file{gcclib.olb}.  If\n+you wish to link the compiler executables with the shareable image\n+version of @file{VAXCRTL}, you should edit the file @file{tm.h} (created\n+by @file{vmsconfig.com}) to define the macro @code{QSORT_WORKAROUND}.\n+\n+@code{QSORT_WORKAROUND} is always defined when GNU CC is compiled with\n+VAX C, to avoid a problem in case @file{gcclib.olb} is not yet\n+available.\n+\n+@node Collect2\n+@section @code{collect2}\n+\n+Many target systems do not have support in the assembler and linker for\n+``constructors''---initialization functions to be called before the\n+official ``start'' of @code{main}.  On such systems, GNU CC uses a\n+utility called @code{collect2} to arrange to call these functions at\n+start time.\n+\n+The program @code{collect2} works by linking the program once and\n+looking through the linker output file for symbols with particular names\n+indicating they are constructor functions.  If it finds any, it\n+creates a new temporary @samp{.c} file containing a table of them,\n+compiles it, and links the program a second time including that file.\n+\n+@findex __main\n+@cindex constructors, automatic calls\n+The actual calls to the constructors are carried out by a subroutine\n+called @code{__main}, which is called (automatically) at the beginning\n+of the body of @code{main} (provided @code{main} was compiled with GNU\n+CC).  Calling @code{__main} is necessary, even when compiling C code, to\n+allow linking C and C++ object code together.  (If you use\n+@samp{-nostdlib}, you get an unresolved reference to @code{__main},\n+since it's defined in the standard GCC library.  Include @samp{-lgcc} at\n+the end of your compiler command line to resolve this reference.)\n+\n+The program @code{collect2} is installed as @code{ld} in the directory\n+where the passes of the compiler are installed.  When @code{collect2}\n+needs to find the @emph{real} @code{ld}, it tries the following file\n+names:\n+\n+@itemize @bullet\n+@item\n+@file{real-ld} in the directories listed in the compiler's search\n+directories.\n+\n+@item\n+@file{real-ld} in the directories listed in the environment variable\n+@code{PATH}.\n+\n+@item\n+The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n+if specified.\n+\n+@item\n+@file{ld} in the compiler's search directories, except that\n+@code{collect2} will not execute itself recursively.\n+\n+@item\n+@file{ld} in @code{PATH}.\n+@end itemize\n+\n+``The compiler's search directories'' means all the directories where\n+@code{gcc} searches for passes of the compiler.  This includes\n+directories that you specify with @samp{-B}.\n+\n+Cross-compilers search a little differently:\n+\n+@itemize @bullet\n+@item\n+@file{real-ld} in the compiler's search directories.\n+\n+@item\n+@file{@var{target}-real-ld} in @code{PATH}.\n+\n+@item\n+The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n+if specified.\n+\n+@item\n+@file{ld} in the compiler's search directories.\n+\n+@item\n+@file{@var{target}-ld} in @code{PATH}.\n+@end itemize\n+\n+@code{collect2} explicitly avoids running @code{ld} using the file name\n+under which @code{collect2} itself was invoked.  In fact, it remembers\n+up a list of such names---in case one copy of @code{collect2} finds\n+another copy (or version) of @code{collect2} installed as @code{ld} in a\n+second place in the search path.\n+\n+@code{collect2} searches for the utilities @code{nm} and @code{strip}\n+using the same algorithm as above for @code{ld}.\n+\n+@node Header Dirs\n+@section Standard Header File Directories\n+\n+@code{GCC_INCLUDE_DIR} means the same thing for native and cross.  It is\n+where GNU CC stores its private include files, and also where GNU CC\n+stores the fixed include files.  A cross compiled GNU CC runs\n+@code{fixincludes} on the header files in @file{$(tooldir)/include}.\n+(If the cross compilation header files need to be fixed, they must be\n+installed before GNU CC is built.  If the cross compilation header files\n+are already suitable for ANSI C and GNU CC, nothing special need be\n+done).\n+\n+@code{GPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n+is where @code{g++} looks first for header files.  @code{libg++}\n+installs only target independent header files in that directory.\n+\n+@code{LOCAL_INCLUDE_DIR} is used only for a native compiler.  It is\n+normally @file{/usr/local/include}.  GNU CC searches this directory so\n+that users can install header files in @file{/usr/local/include}.\n+\n+@code{CROSS_INCLUDE_DIR} is used only for a cross compiler.  GNU CC\n+doesn't install anything there.\n+\n+@code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It\n+is the place for other packages to install header files that GNU CC will\n+use.  For a cross-compiler, this is the equivalent of\n+@file{/usr/include}.  When you build a cross-compiler,\n+@code{fixincludes} processes any header files in this directory."}]}