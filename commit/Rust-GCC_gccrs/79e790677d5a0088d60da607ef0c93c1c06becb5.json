{"sha": "79e790677d5a0088d60da607ef0c93c1c06becb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllNzkwNjc3ZDVhMDA4OGQ2MGRhNjA3ZWYwYzkzYzFjMDZiZWNiNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-12-10T00:38:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-12-10T00:38:36Z"}, "message": "howto.html: Update.\n\n2007-12-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/ext/howto.html: Update.\n\t* docs/html/ext/sgiexts.html: Same.\n\t* docs/html/ext/concurrence.html: New. Document extensions.\n\t* docs/html/17_intro/api.html: Move some bits...\n\t* docs/html/17_intro/backwards_compatibility.html: here. New. Add\n\tcompatibility suggestions, move existing ones.\n\t* docs/html/17_intro/howto.html: Update info.\n\t* docs/html/18_support/howto.html: Tweak.\n\t* docs/html/faq/index.html: Update thread info.\n\t* docs/html/documentation.html: Add links.\n\t* docs/html/20_util/allocator.html: Update info.\n\t* include/precompiled/stdc++.h: Add C++0x includes if appropriate.\n\t* testsuite/17_intro/headers/c++200x/all.cc: Same.\n\nFrom-SVN: r130732", "tree": {"sha": "fd8a2c1f9d4504553b1ef84e02282972137daf4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8a2c1f9d4504553b1ef84e02282972137daf4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e790677d5a0088d60da607ef0c93c1c06becb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e790677d5a0088d60da607ef0c93c1c06becb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e790677d5a0088d60da607ef0c93c1c06becb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e790677d5a0088d60da607ef0c93c1c06becb5/comments", "author": null, "committer": null, "parents": [{"sha": "6e2215152b7b92c812177a72de69df442137bf41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2215152b7b92c812177a72de69df442137bf41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2215152b7b92c812177a72de69df442137bf41"}], "stats": {"total": 2874, "additions": 2128, "deletions": 746}, "files": [{"sha": "730cf4f1aa5b85052b2199e358116977284fee0d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -1,3 +1,19 @@\n+2007-12-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/ext/howto.html: Update.\n+\t* docs/html/ext/sgiexts.html: Same.\n+\t* docs/html/ext/concurrence.html: New. Document extensions.\n+\t* docs/html/17_intro/api.html: Move some bits...\n+\t* docs/html/17_intro/backwards_compatibility.html: here. New. Add\n+\tcompatibility suggestions, move existing ones.\n+\t* docs/html/17_intro/howto.html: Update info.\n+\t* docs/html/18_support/howto.html: Tweak.\n+\t* docs/html/faq/index.html: Update thread info.\n+\t* docs/html/documentation.html: Add links.\n+\t* docs/html/20_util/allocator.html: Update info.\n+\t* include/precompiled/stdc++.h: Add C++0x includes if appropriate.\n+\t* testsuite/17_intro/headers/c++200x/all.cc: Same.\n+\n 2007-12-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/util/testsuite_allocator.h,"}, {"sha": "983d044b7c9a8d56a48f34838455727c6ddd6628", "filename": "libstdc++-v3/docs/html/17_intro/api.html", "status": "modified", "additions": 159, "deletions": 464, "changes": 623, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fapi.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -5,8 +5,8 @@\n \n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n <head>\n-   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik), Felix Natter\" />\n-   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, API, deprecate backward\" />\n+   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, API, evolution, deprecate\" />\n    <meta name=\"DESCRIPTION\" content=\"API evolution and deprecation history\" />\n    <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n    <title>API Evolution and Deprecation History</title>\n@@ -22,573 +22,268 @@ <h1 class=\"centered\"><a name=\"top\">API Evolution and Deprecation History</a></h1\n <p class=\"fineprint\"><em>\n    The latest version of this document is always available at\n    <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/api.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/abi.html</a>.\n+   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/api.html</a>.\n </em></p>\n \n <p><em>\n    To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n </em></p>\n \n <!-- ####################################################### -->\n+\n <hr />\n <h3 class=\"left\">\n-  <a name=\"C++ API v1\">First.</a>\n+  <a name=\"intro\">API Evolution, Deprecation, and History of User Visible Changes</a>\n </h3>\n \n-<p>2.72</p>\n-<p> The first generation GNU C++ library was called libg++. It had a\n-working relationship with at least two kinds of dinosaur. Sadly, the\n-details were not pried away from the estate.\n+<p> A list of user-visible changes, by release version.\n </p>\n \n-<p>\n+<h3 class=\"left\">\n+  <a name=\"3.0\">3.0</a>\n+</h3>\n \n+<p>\n+Extensions moved to <code>include/ext</code>.\n </p>\n \n-<p>Known Issues include many of the limitations of its immediate ancestor.</p> \n-\n-<h5>No <code>ios_base</code></h5>\n-\n-<p> At least some older implementations don't have <code>std::ios_base</code>, so you should use <code>std::ios::badbit</code>, <code>std::ios::failbit</code> and <code>std::ios::eofbit</code> and <code>std::ios::goodbit</code>.\n+<p>\n+Include files from the SGI/HP sources that pre-date the ISO standard\n+are added. These files are placed into\n+the <code>include/backward</code> directory and a deprecated warning\n+is added that notifies on inclusion (<code>-Wno-deprecated</code>\n+deactivates the warning.)\n </p>\n \n-<h5>No <code>cout</code> in <code>ostream.h</code>, no <code>cin</code> in <code>istream.h</code></h5>\n-\n-<p>\n-\tIn earlier versions of the standard,\n-\t<tt>&lt;fstream.h&gt;</tt>,\n-\t<tt>&lt;ostream.h&gt;</tt>\n-\tand <tt>&lt;istream.h&gt;</tt>\n-\tused to define\n-\t<code>cout</code>, <code>cin</code> and so on. ISO C++ specifies that one needs to include\n-\t<tt>&lt;iostream&gt;</tt>\n-\texplicitly to get the required definitions.\n- </p>\n-<p> Some include adjustment may be required.</p>\n+<p>Deprecated include &lt;backward/strstream&gt; added.</p>\n \n+<p>Removal of include &lt;builtinbuf.h&gt;, &lt;indstream.h&gt;, &lt;parsestream.h&gt;, &lt;PlotFile.h&gt;, &lt;SFile.h&gt;, &lt;stdiostream.h&gt;, and &lt;stream.h&gt;.</p>\n \n-<p>This project is no longer maintained or supported, and the sources\n-archived.  The code is considered replaced and rewritten.\n-</p>\n \n-<hr />\n <h3 class=\"left\">\n-  <a name=\"C++ API v1\">Second.</a>\n+  <a name=\"3.1\">3.1</a>\n </h3>\n-<p> The second generation GNU C++ library was called libstdc++, or\n-libstdc++-v2. It was a separate GNU project, although reliably paired\n-with GCC. It spans the time between libg++ and pre-ISO C++.\n-</p>\n-\n-<p>egcs 1.x</p>\n-<p>2.95</p>\n-<p>2.96</p>\n \n-<p>Portability Notes</p>\n-<p>Implementation Limitations</p>\n-\n-<h5>Namespace <code>std::</code> not supported.</h5>\n-\n-<p>\n-      Some care is required to support C++ compiler and or library\n-      implementation that do not have the standard library in\n-      <code>namespace std</code>.\n-    </p>\n-<p>\n-   The following sections list some possible solutions to support compilers\n-   that cannot ignore <code>std::</code>-qualified names.\n- </p>\n-\n-<p> First, see if the compiler has a flag for this. Namespace\n-      back-portability-issues are generally not a problem for g++\n-      compilers that do not have libstdc++ in <code>std::</code>, as\n-      the compilers use <code>-fno-honor-std</code> (ignore\n-      <code>std::</code>, <code>:: = std::</code>) by default. That\n-      is, the responsibility for enabling or disabling\n-      <code>std::</code> is on the user; the maintainer does not have\n-      to care about it. This probably applies to some other compilers\n-      as well.\n-    </p>\n-\n-<p>Second, experiment with a variety of pre-processor tricks.</p>\n-\n-<p> By defining <code>std</code> as a macro, fully-qualified namespace calls become global. Volia. \n-\t      \n-<pre class=\"programlisting\">\n-#ifdef WICKEDLY_OLD_COMPILER\n-# define std\n-#endif\n-</pre>\n-(thanks to Juergen Heinzl who posted this solution on gnu.gcc.help)\n-\n-<p>Define a macro <code>NAMESPACE_STD</code>, which is defined to\n-either &quot;&quot; or &quot;std&quot; based on a compile-type\n-test. On GNU systems, this can be done with autotools by means of an\n-autoconf test (see below) for <code>HAVE_NAMESPACE_STD</code>, then\n-using that to set a value for the <code>NAMESPACE_STD</code> macro.\n-At that point, one is able to use <code>NAMESPACE_STD::string</code>,\n-which will evaluate to <code>std::string</code> or\n-<code>::string</code> (ie, in the global namespace on systems that do\n-not put <code>string</code> in <code>std::</code>). </p>\n-\n-<p> \t\n-<pre>\n-dnl @synopsis AC_CXX_HAVE_STD_NAMESPACE\n-dnl\n-dnl If the compiler supports the std namespace, define\n-dnl HAVE_STD_NAMESPACE.\n-dnl\n-dnl @category Cxx\n-dnl @author Todd Veldhuizen\n-dnl @author Luc Maisonobe <luc@spaceroots.org>\n-dnl @version 2004-02-04\n-dnl @license AllPermissive\n-\n-AC_DEFUN([AC_CXX_HAVE_STD_NAMESPACE],\n-[AC_CACHE_CHECK(whether the compiler supports the std namespace,\n-ac_cv_cxx_have_std_namespace,\n-[AC_LANG_SAVE\n- AC_LANG_CPLUSPLUS\n- AC_TRY_COMPILE([#include <iostream>\n-\tstd::istream& is = std::cin;\n-\t],[return 0;],\n- ac_cv_cxx_have_std_namespace=yes, ac_cv_cxx_have_std_namespace=no)\n- AC_LANG_RESTORE\n-])\n-if test \"$ac_cv_cxx_have_std_namespace\" = yes; then\n-  AC_DEFINE(HAVE_STD_NAMESPACE,,[define if the compiler supports the std namespace])\n-fi\n-])\n-</pre>\n-\n-<h5>Illegal iterator usage.</h5>\n <p>\n-      The following illustrate implementation-allowed illegal iterator\n-      use, and then correct use.  <div class=\"itemizedlist\"><ul\n-      type=\"disc\"> <li><p>you cannot do\n-      <code>ostream::operator&lt;&lt;(iterator)</code> to print the\n-      address of the iterator =&gt; use <code>operator&lt;&lt;\n-      &amp;*iterator</code> instead ?\n-\t  </p></li>\n-<li><p>you cannot clear an iterator's reference\n-\t    (<code>iterator = 0</code>) =&gt; use\n-\t    <code>iterator = iterator_type();</code> ?\n-\t  </p></li>\n-<li><p>\n-<code>if (iterator)</code> won't work any\n-\t    more =&gt; use <code>if (iterator != iterator_type())</code>\n-\t    ?</p></li>\n-</ul>\n+Extensions from SGI/HP moved from <code>namespace std</code>\n+to <code>namespace __gnu_cxx</code>. As part of this, the following\n+new includes are\n+added: &lt;ext/algorithm&gt;, &lt;ext/functional&gt;, &lt;ext/iterator&gt;, &lt;ext/memory&gt;, and &lt;ext/numeric&gt;.\n+</p>\n \n-<h5><code>isspace</code> from <tt>&lt;cctype&gt;</tt> is a macro\n-</h5>\n+<p>\n+Extensions to <code>basic_filebuf</code> introduced: <code>__gnu_cxx::enc_filebuf</code>, and <code>__gnu_cxx::stdio_filebuf</code>.\n+</p>\n \n-<p> Glibc 2.0.x and 2.1.x define <tt>&lt;ctype.h&gt;</tt>\n-functionality as macros (isspace, isalpha etc.).    \n+<p>\n+Extensions to tree data structures added in &lt;ext/rb_tree&gt;.\n </p>\n \n <p>\n-This implementations of libstdc++, however, keep these functions as\n-macros, and so it is not back-portable to use fully qualified\n-names. For example:\n+Removal of &lt;ext/tree&gt;, moved to &lt;backward/tree.h&gt;.\n </p>\n \n-<pre> \n-#include &lt;cctype&gt; \n-int main() { std::isspace('X'); } \n-</pre> \n \n-<p>Results in something like this:\n-</p>\n+<h3 class=\"left\">\n+  <a name=\"3.2\">3.2</a>\n+</h3>\n+<p>Symbol versioning introduced for shared library.</p>\n \n-<pre> \n-std:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int) _ISspace ) ; \n-</pre>\n+<p>Removal of include &lt;backward/strstream.h&gt;.</p>\n \n+<h3 class=\"left\">\n+  <a name=\"3.3\">3.3</a>\n+</h3>\n+<p>Allocator changes. Change <code>__malloc_alloc</code> to <code>malloc_allocator</code> and <code>__new_alloc</code> to <code>new_allocator</code>. </p>\n \n-<p> A solution is to modify a header-file so that the compiler tells\n-<tt>&lt;ctype.h&gt;</tt> to define functions instead of macros:\n-</p>\n+<p>Error handling in iostreams cleaned up, made consistent. </p>\n \n-<pre>\n-// This keeps isalnum, et al from being propagated as macros. \n-#if __linux__\n-# define __NO_CTYPE 1\n-#endif\n-</pre>\n \n-<p>Then, include &lt;ctype.h&gt;\n+<h3 class=\"left\">\n+  <a name=\"3.4\">3.4</a>\n+</h3>\n+<p>\n+Large file support.\n </p>\n \n-<p>\n-Another problem arises if you put a <code>using namespace std;</code>\n-declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This\n-will result in ambiguities between the definitions in the global\n-namespace (<tt>&lt;ctype.h&gt;</tt>) and the definitions in namespace\n-<code>std::</code> (<code>&lt;cctype&gt;</code>).    \n+<p> Extensions for generic characters and <code>char_traits</code> added in &lt;ext/pod_char_traits.h&gt;.\n </p>\n \n-<h5>No <code>vector::at</code>, <code>deque::at</code>, <code>string::at</code></h5>\n+<p>\n+Support for <code>wchar_t</code> specializations of <code>basic_filebuf</code> enhanced to support <code>UTF-8</code> and <code>Unicode</code>, depending on host. More hosts support basic <code>wchar_t</code> functionality.\n+</p>\n \n <p>\n-      One solution is to add an autoconf-test for this:\n-</p>\n-<pre>\n-AC_MSG_CHECKING(for container::at)\n-AC_TRY_COMPILE(\n-[\n-#include &lt;vector&gt;\n-#include &lt;deque&gt;\n-#include &lt;string&gt;\n-\t\n-using namespace std;\n-],\n-[\n-deque&lt;int&gt; test_deque(3);\n-test_deque.at(2);\n-vector&lt;int&gt; test_vector(2);\n-test_vector.at(1);\n-string test_string(&quot;test_string&quot;);\n-test_string.at(3);\n-],\n-[AC_MSG_RESULT(yes)\n-AC_DEFINE(HAVE_CONTAINER_AT)],\n-[AC_MSG_RESULT(no)])\n-</pre>\n+Support for <code>char_traits</code> beyond builtin types.\n+</p>\n \n <p>\n-If you are using other (non-GNU) compilers it might be a good idea\n-to check for <code>string::at</code> separately.\n+Conformant <code>allocator</code> class and usage in containers. As\n+part of this, the following extensions are\n+added: &lt;ext/bitmap_allocator.h&gt;, &lt;ext/debug_allocator.h&gt;, &lt;ext/mt_allocator.h&gt;, &lt;ext/malloc_allocator.h&gt;,&lt;ext/new_allocator.h&gt;, &lt;ext/pool_allocator.h&gt;.\n </p>\n \n-<h5>No <code>std::char_traits&lt;char&gt;::eof</code></h5>\n \n <p>\n-Use some kind of autoconf test, plus this:\n-</p>      \n-<pre> \n-#ifdef HAVE_CHAR_TRAITS\n-#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n-#else\n-#define CPP_EOF EOF\n-#endif\n-</pre>\n-\n-<h5>No <code>string::clear</code></h5>\n+Debug mode first appears.\n+</p>\n \n <p>\n-      There are two functions for deleting the contents of a string:\n-      <code>clear</code> and <code>erase</code> (the latter\n-      returns the string).\n-      <pre class=\"programlisting\">\n-\tvoid \n-\tclear() { _M_mutate(0, this-&gt;size(), 0); }\n-      </pre>\n-      <pre class=\"programlisting\">\n-\tbasic_string&amp; \n-\terase(size_type __pos = 0, size_type __n = npos)\n-\t{ \n-\treturn this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n-\t_M_data(), _M_data()); \n-\t}\n-      </pre>\n-      Unfortunately, ut <code>clear</code> is not\n-      implemented in this version, so you should use\n-      <code>erase</code> (which is probably faster than\n-      <code>operator=(charT*)</code>).\n-</p>\n-\n-<h5>Removal of <code>ostream::form</code> and\n-<code>istream::scan</code> extensions.</h5>\n-\n-<p> These are no longer supported. Please use\n-   <a href=\"#sec-stringstream\" title=\"Using stringstreams\">\n-    stringstreams</a> instead.\t\n-</p>\n-\n-<h5>No <code>basic_stringbuf</code>, <code>basic_stringstream<code></h5>\n+PCH support.\n+</p>\n \n <p>\n-      Libstdc++ provides the new\n-      <code>i/ostringstream</code>-classes, (<tt>&lt;sstream&gt;</tt>), but for compatibility\n-      with older implementations you still have to use\n-      <code>i/ostrstream</code> (<tt>&lt;strstream&gt;</tt>):\n-      <pre >\n-\t#ifdef HAVE_SSTREAM\n-\t#include &lt;sstream&gt;\n-\t#else\n-\t#include &lt;strstream&gt;\n-\t#endif\n-      </pre>\n-      <div class=\"itemizedlist\"><ul type=\"disc\">\n-<li><p> <code>strstream</code> is considered to be\n-\t    deprecated\n-\t  </p></li>\n-<li><p> <code>strstream</code> is limited to\n-\t    <code>char</code>\n-\t  </p></li>\n-<li><p> with <code>ostringstream</code> you don't\n-\t    have to take care of terminating the string or freeing its\n-\t    memory\n-\t  </p></li>\n-<li><p> <code>istringstream</code> can be re-filled\n-\t    (clear(); str(input);)\n-\t  </p></li>\n-</ul></div>\n-<p>\n-      You can then use output-stringstreams like this:\n-      <pre >\n-\t#ifdef HAVE_SSTREAM\n-\tstd::ostringstream oss;\n-\t#else\n-\tstd::ostrstream oss;\n-\t#endif\n-\toss &lt;&lt; &quot;Name=&quot; &lt;&lt; m_name &lt;&lt; &quot;, number=&quot; &lt;&lt; m_number &lt;&lt; std::endl;\n-\t...\n-\t#ifndef HAVE_SSTREAM\n-\toss &lt;&lt; std::ends; // terminate the char*-string\n-\t#endif\n-\t// str() returns char* for ostrstream and a string for ostringstream\n-\t// this also causes ostrstream to think that the buffer's memory\n-\t// is yours\n-\tm_label.set_text(oss.str());\n-\t#ifndef HAVE_SSTREAM\n-\t// let the ostrstream take care of freeing the memory\n-\toss.freeze(false);\n-\t#endif\n-      </pre>\n-<p>\n-      Input-stringstreams can be used similarly:\n-</p>\n-      \n-<pre> \n-std::string input;\n-...\n-#ifdef HAVE_SSTREAM\n-std::istringstream iss(input);\n-#else\n-std::istrstream iss(input.c_str());\n-#endif\n-\n-int i;\n-iss &gt;&gt; i; \n-</pre>\n-\n-<p> One (the only?) restriction is that an istrstream cannot be re-filled:\n-</p>\n-      \n-<pre >\n-std::istringstream iss(numerator);\n-iss &gt;&gt; m_num;\n-// this is not possible with istrstream\n-iss.clear();\n-iss.str(denominator);\n-iss &gt;&gt; m_den;\n- </pre>\n- \n-<p>\n-If you don't care about speed, you can put these conversions in\n-      a template-function:\n-</p>      \n-<pre >\n-template &lt;class X&gt;\n-void fromString(const string&amp; input, X&amp; any)\n-{\n-#ifdef HAVE_SSTREAM\n-std::istringstream iss(input);\n-#else\n-std::istrstream iss(input.c_str());\n-#endif\n-X temp;\n-iss &gt;&gt; temp;\n-if (iss.fail())\n-throw runtime_error(..)\n-any = temp;\n-}\n-</pre>\n-\n-<p> Another example of using stringstreams is in <a href=\"../21_strings/howto.html\" target=\"_top\">this howto</a>.\n+Macro guard for libstdc++ changed, from _GLIBCPP_ to _GLIBCXX_.\n </p>\n \n-<p> There is additional information in the libstdc++-v2 info files, in\n-particular &quot;info iostream&quot;.\n+<p>\n+Extension &lt;ext/stdio_sync_filebuf.h&gt; added.\n </p>\n \n-<h5>Little or no wide character support</h5>\n-\n-<h5>No templatized iostreams</h5>\n-\n-<h5>Thread safety issues.</h5>\n-\n-<p>This project is no longer maintained or supported, and the sources\n-archived.  The code is considered replaced and rewritten.\n+<p>\n+Extension &lt;ext/demangle.h&gt; added.\n </p>\n \n \n-<hr />\n <h3 class=\"left\">\n-  <a name=\"C++ API v1\">Third.</a>\n+  <a name=\"4.0\">4.0</a>\n </h3>\n-<p> The third generation GNU C++ library is called libstdc++, or\n-libstdc++-v3.\n+<p>\n+TR1 features first appear.\n </p>\n \n-      <p>The subset commonly known as the Standard Template Library\n-         (chapters 23 through 25, mostly) is adapted from the final release\n-         of the SGI STL, with extensive changes.\n-      </p>\n-\n-      <p>A more formal description of the V3 goals can be found in the\n-         official <a href=\"../17_intro/DESIGN\">design document</a>.\n-      </p>\n-\n-\n-<p>Portability Notes</p>\n-\n-<h5>Pre-ISO headers moved to backwards</h5>\n-<p> The pre-ISO C++ headers (iostream.h etc.) are available, but inclusion\n-      generates a warning that you are using deprecated headers.    \n+<p>\n+Extension allocator &lt;ext/array_allocator.h&gt; added.\n </p>\n \n-    <p>This compatibility layer is constructed by including the\n-    standard C++ headers, and injecting any items in\n-    <code>std::</code> into the global namespace.\n-   </p>\n-   <p>For those of you new to ISO C++ (welcome, time travelers!), no,\n-      that isn't a typo. Yes, the headers really have new names.\n-      Marshall Cline's C++ FAQ Lite has a good explanation in <a\n-      href=\"http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.4\">item\n-      [27.4]</a>.\n-   </p>\n-\n-<p> Some include adjustment may be required.</p>\n-\n-<h5>Extension headers hash_map, hash_set moved to ext</h5>\n+<p>\n+Extension <code>codecvt</code> specializations moved to &lt;ext/codecvt_specializations.h&gt;.\n+</p>\n \n-<p> Header files <code>hash_map</code> and <code>hash_set</code>\n-moved to <code>ext/hash_map</code> and <code>ext/hash_set</code>,\n-respectively. At the same time, all types in these files are enclosed\n-in <code>namespace __gnu_cxx</code>.\n+<p>\n+Removal of &lt;ext/demangle.h&gt;.\n </p>\n \n \n-<h5>\n-No <code>ios::nocreate/ios::noreplace</code>.\n-</h5>\n+<h3 class=\"left\">\n+  <a name=\"4.1\">4.1</a>\n+</h3>\n \n-<p> The existence of <code>ios::nocreate</code> being used for\n-input-streams has been confirmed, most probably because the author\n-thought it would be more correct to specify nocreate explicitly.  So\n-it can be left out for input-streams.\n+<p>\n+Removal of &lt;cassert&gt; from all standard headers: now has to be explicitly included for <code>std::assert</code> calls.\n </p>\n \n-<p>For output streams, &quot;nocreate&quot; is probably the default,\n-unless you specify <code>std::ios::trunc</code> ? To be safe, you can\n-open the file for reading, check if it has been opened, and then\n-decide whether you want to create/replace or not. To my knowledge,\n-even older implementations support <code>app</code>, <code>ate</code>\n-and <code>trunc</code> (except for <code>app</code> ?).\n+<p> Extensions for policy-based data structures first added. New includes,\n+types, namespace <code>pb_assoc</code>.\n </p>\n \n \n-<h5>\n-No <code>stream::attach(int fd)</code>.\n-</h5>\n-\n-<p>\n-      Phil Edwards writes: It was considered and rejected for the ISO\n-      standard.  Not all environments use file descriptors.  Of those\n-      that do, not all of them use integers to represent them.\n-    </p>  \n \n-<p>\n-      For a portable solution (among systems which use\n-      filedescriptors), you need to implement a subclass of\n-      <code>std::streambuf</code> (or\n-      <code>std::basic_streambuf&lt;..&gt;</code>) which opens a file\n-      given a descriptor, and then pass an instance of this to the\n-      stream-constructor. \n-    </p>\n-\n-<p>\n-      An extension is available that implements this.\n-      <code>&lt;ext/stdio_filebuf.h&gt;</code> contains a derived class called\n-      <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></a>.\n-      This class can be constructed from a C <code>FILE*</code> or a file\n-      descriptor, and provides the <code>fd()</code> function.\n-    </p>\n-\n-<p>\n- For another example of this, refer to\n-      <a href=\"http://www.josuttis.com/cppcode/fdstream.html\" target=\"_top\">fdstream example</a> \n-      by Nicolai Josuttis.\n+<p> Extensions for typelists added in &lt;ext/typelist.h&gt;.\n </p>\n \n-<p><a href=\"http://gcc.gnu.org/bugzilla/buglist.cgi?cmdtype=runnamed&namedcmd=libstdc%2B%2B\">Known Issues</a></p>\n-\n-<h5>\n-container iterator types are not necessarily container value_type*\n-</h5>\n-\n-<p>API History, User Visible Changes</p>\n+<p> Extension for policy-based <code>basic_string</code> first added: <code>__gnu_cxx::__versa_string</code> in &lt;ext/vstring.h&gt;.\n+</p>\n \n-<p>3.0.0</p>\n+<h3 class=\"left\">\n+  <a name=\"4.2\">4.2</a>\n+</h3>\n \n+<p> Default visibility attributes applied to <code>namespace std</code>. Support for <code>-fvisibility</code>.\n+</p>\n \n-<p>3.1.0</p>\n-<p>3.2.0</p>\n-<p>3.3.0</p>\n+<p>TR1 &lt;random&gt;, &lt;complex&gt;, and C compatibility headers added.</p>\n \n+<p> Extensions for concurrent programming consolidated\n+into &lt;ext/concurrence.h&gt; and &lt;ext/atomicity.h&gt;,\n+including change of namespace to <code>__gnu_cxx</code> in some\n+cases. Added types\n+include <code>_Lock_policy</code>, <code>__concurrence_lock_error</code>, <code>__concurrence_unlock_error</code>, <code>__mutex</code>, <code>__scoped_lock</code>.</p>\n \n-<p>3.4.0</p>\n+<p> Extensions for type traits consolidated\n+into &lt;ext/type_traits.h&gt;. Additional traits are added\n+(<code>__conditional_type</code>, <code>__enable_if</code>, others.)\n+</p>\n \n-Macro guard for libstdc++ changed, from _GLIBCPP_ to _GLIBCXX_, to\n-accomodate a request from the C Pre Processor maintainer.\n+<p> Extensions for policy-based data structures revised. New includes,\n+types, namespace moved to <code>__pb_ds</code>.\n+</p>\n \n-<p>4.0.0</p>\n-<p>4.1.0</p>\n+<p> Extensions for debug mode modified: now nested in <code>namespace\n+std::__debug</code> and extensions in <code>namespace\n+__gnu_cxx::__debug</code>.</p>\n \n-<cassert> how has to be explicitly included for <code>std::assert</code> calls.\n+<p> Extensions added: &lt;ext/typelist.h&gt;\n+and &lt;ext/throw_allocator.h&gt;.\n+</p>\n \n-<p>4.2.0</p>\n+<h3 class=\"left\">\n+  <a name=\"4.3\">4.3</a>\n+</h3>\n \n-<p>4.3.0</p>\n+<p>\n+C++0X features first appear.\n+</p>\n \n-Header streamlining.\n+<p>TR1 &lt;regex&gt; and &lt;cmath&gt;'s mathematical special function added.</p>\n \n+<p>\n Backward include edit.\n+</p>\n+<ul>\n+  <li> Removed: &lt;algobase.h&gt; &lt;algo.h&gt; &lt;alloc.h&gt; &lt;bvector.h&gt; &lt;complex.h&gt;\n+defalloc.h&gt; &lt;deque.h&gt; &lt;fstream.h&gt; &lt;function.h&gt; &lt;hash_map.h&gt; &lt;hash_set.h&gt;\n+hashtable.h&gt; &lt;heap.h&gt; &lt;iomanip.h&gt; &lt;iostream.h&gt; &lt;istream.h&gt; &lt;iterator.h&gt;\n+list.h&gt; &lt;map.h&gt; &lt;multimap.h&gt; &lt;multiset.h&gt; &lt;new.h&gt; &lt;ostream.h&gt; &lt;pair.h&gt; &lt;queue.h&gt;\n+rope.h&gt; &lt;set.h&gt; &lt;slist.h&gt; &lt;stack.h&gt; &lt;streambuf.h&gt; &lt;stream.h&gt; &lt;tempbuf.h&gt;\n+&lt;tree.h&gt; &lt;vector.h&gt;\n+  </li>\n+  <li> Added: &lt;hash_map&gt; and &lt;hash_set&gt;</li>\n+  <li> Added in C++0x: &lt;auto_ptr.h&gt; and &lt;binders.h&gt;</li>\n+</ul>\n \n-PCH files built but not installed. \n-\n-Namespace pb_ds moved to __gnu_pb_ds.\n+<p>\n+Header dependency streamlining.\n+</p>\n \n-C++OX features appear.\n+<ul>\n+  <li>&lt;algorithm&gt; no longer includes &lt;climits&gt;, &lt;cstring&gt;, or &lt;iosfwd&gt; </li>\n+  <li>&lt;bitset&gt; no longer includes &lt;istream&gt; or &lt;ostream&gt;, adds &lt;iosfwd&gt; </li>\n+  <li>&lt;functional&gt; no longer includes &lt;cstddef&gt;</li>\n+  <li>&lt;iomanip&gt; no longer includes &lt;istream&gt;, &lt;istream&gt;, or &lt;functional&gt;, adds &lt;ioswd&gt; </li>\n+  <li>&lt;numeric&gt; no longer includes &lt;iterator&gt;</li>\n+  <li>&lt;string&gt; no longer includes &lt;algorithm&gt; or &lt;memory&gt;</li>\n+\n+  <li>&lt;valarray&gt; no longer includes &lt;numeric&gt; or &lt;cstdlib&gt;</li>\n+  <li>&lt;tr1/hashtable&gt; no longer includes &lt;memory&gt; or &lt;functional&gt;</li>\n+  <li>&lt;tr1/memory&gt; no longer includes &lt;algorithm&gt;</li>\n+  <li>&lt;tr1/random&gt; no longer includes &lt;algorithm&gt; or &lt;fstream&gt;</li>\n+</ul>\n \n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"C++ API v1\">Fourth, and future</a>\n-</h3>\n+<p>\n+Debug mode for &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n+</p>\n \n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"Deprecation\">Deprecation and Backwards Compatibility</a>\n-</h3>\n+<p>\n+Parallel mode first appears.\n+</p>\n \n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"Links\">Links</a>\n-</h3>\n+<p>Variadic template implementations of items in &lt;tuple&gt; and\n+    &lt;functional&gt;. \n+</p>\n \n-<p>\n-<a href=\"http://www.kegel.com/gcc/gcc4.html\">Migrating to gcc-4.1</a>, by Dan Kegel.\n+<p>Default <code>what</code> implementations give more elaborate\n+    exception strings for <code>bad_cast</code>,\n+    <code>bad_typeid</code>, <code>bad_exception</code>, and\n+    <code>bad_alloc</code>.\n </p>\n \n <p>\n-<a href=\"http://lists.debian.org/debian-gcc/2006/03/msg00405.html\">Building the whole Debian archive with GCC 4.1: a summary</a>, by Martin Michlmayr\n+PCH binary files no longer installed. Instead, the source files are installed. \n </p>\n \n <p>\n-<a href=\"http://annwm.lbl.gov/~leggett/Atlas/gcc-3.2.html\">Migration guide for GCC-3.2</a>\n+Namespace pb_ds moved to __gnu_pb_ds.\n </p>\n \n </body>"}, {"sha": "bc1497bdde0b6685b49a16a93ced787d43f2c675", "filename": "libstdc++-v3/docs/html/17_intro/backwards_compatibility.html", "status": "added", "additions": 1073, "deletions": 0, "changes": 1073, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fbackwards_compatibility.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fbackwards_compatibility.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fbackwards_compatibility.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -0,0 +1,1073 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!DOCTYPE html\n+          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n+<head>\n+   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik), Felix Natter\" />\n+   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, API, backward, compatibility\" />\n+   <meta name=\"DESCRIPTION\" content=\"Backwards Compatibility\" />\n+   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n+   <title>Backwards Compatibility</title>\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n+<link rel=\"Start\" href=\"documentation.html\" type=\"text/html\"\n+  title=\"GNU C++ Standard Library\" />\n+<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n+</head>\n+<body>\n+\n+<h1 class=\"centered\"><a name=\"top\">Backwards Compatibility</a></h1>\n+\n+<p class=\"fineprint\"><em>\n+   The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/backwards_compatibility.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/backwards_compatibility.html</a>.\n+</em></p>\n+\n+<p><em>\n+   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n+</em></p>\n+\n+<!-- ####################################################### -->\n+<hr />\n+<h3 class=\"left\">\n+  <a name=\"v1\">First.</a>\n+</h3>\n+\n+<p> The first generation GNU C++ library was called libg++.  It was a\n+separate GNU project, although reliably paired with GCC. Rumors imply\n+that it had a working relationship with at least two kinds of\n+dinosaur.\n+</p>\n+\n+<p>Known Issues include many of the limitations of its immediate ancestor.</p> \n+\n+<p>Portability notes and known implementation limitations are as follows.</p>\n+\n+<h5>No <code>ios_base</code></h5>\n+\n+<p> At least some older implementations don't have <code>std::ios_base</code>, so you should use <code>std::ios::badbit</code>, <code>std::ios::failbit</code> and <code>std::ios::eofbit</code> and <code>std::ios::goodbit</code>.\n+</p>\n+\n+<h5>No <code>cout</code> in <code>ostream.h</code>, no <code>cin</code> in <code>istream.h</code></h5>\n+\n+<p>\n+\tIn earlier versions of the standard,\n+\t<tt>&lt;fstream.h&gt;</tt>,\n+\t<tt>&lt;ostream.h&gt;</tt>\n+\tand <tt>&lt;istream.h&gt;</tt>\n+\tused to define\n+\t<code>cout</code>, <code>cin</code> and so on. ISO C++ specifies that one needs to include\n+\t<tt>&lt;iostream&gt;</tt>\n+\texplicitly to get the required definitions.\n+ </p>\n+<p> Some include adjustment may be required.</p>\n+\n+\n+<p>This project is no longer maintained or supported, and the sources\n+archived.  The code is considered replaced and rewritten.\n+</p>\n+\n+<hr />\n+<h3 class=\"left\">\n+  <a name=\"v2\">Second.</a>\n+</h3>\n+<p> The second generation GNU C++ library was called libstdc++, or\n+libstdc++-v2. It spans the time between libg++ and pre-ISO C++\n+standardization and is usually associated with the following GCC\n+releases: egcs 1.x, gcc 2.95, and gcc 2.96.\n+</p>\n+\n+<p> The STL portions of this library are based on SGI/HP STL release 3.11.\n+</p>\n+\n+<p>Portability notes and known implementation limitations are as follows.</p>\n+\n+<h5>Namespace <code>std::</code> not supported</h5>\n+\n+<p>\n+      Some care is required to support C++ compiler and or library\n+      implementation that do not have the standard library in\n+      <code>namespace std</code>.\n+    </p>\n+<p>\n+   The following sections list some possible solutions to support compilers\n+   that cannot ignore <code>std::</code>-qualified names.\n+ </p>\n+\n+<p> First, see if the compiler has a flag for this. Namespace\n+      back-portability-issues are generally not a problem for g++\n+      compilers that do not have libstdc++ in <code>std::</code>, as\n+      the compilers use <code>-fno-honor-std</code> (ignore\n+      <code>std::</code>, <code>:: = std::</code>) by default. That\n+      is, the responsibility for enabling or disabling\n+      <code>std::</code> is on the user; the maintainer does not have\n+      to care about it. This probably applies to some other compilers\n+      as well.\n+    </p>\n+\n+<p>Second, experiment with a variety of pre-processor tricks.</p>\n+\n+<p> By defining <code>std</code> as a macro, fully-qualified namespace calls become global. Volia. </p>\n+\t      \n+<pre>\n+#ifdef WICKEDLY_OLD_COMPILER\n+# define std\n+#endif\n+</pre>\n+(thanks to Juergen Heinzl who posted this solution on gnu.gcc.help)\n+\n+<p>Another pre-processor based approach is to define a\n+macro <code>NAMESPACE_STD</code>, which is defined to either\n+&quot;&quot; or &quot;std&quot; based on a compile-type test. On GNU\n+systems, this can be done with autotools by means of an autoconf test\n+(see below) for <code>HAVE_NAMESPACE_STD</code>, then using that to\n+set a value for the <code>NAMESPACE_STD</code> macro.  At that point,\n+one is able to use <code>NAMESPACE_STD::string</code>, which will\n+evaluate to <code>std::string</code> or\n+<code>::string</code> (ie, in the global namespace on systems that do\n+not put <code>string</code> in <code>std::</code>). </p>\n+\n+<pre style=\"background: #c0c0c0\">\n+dnl @synopsis AC_CXX_NAMESPACE_STD\n+dnl\n+dnl If the compiler supports namespace std, define\n+dnl HAVE_NAMESPACE_STD.\n+dnl\n+dnl @category Cxx\n+dnl @author Todd Veldhuizen\n+dnl @author Luc Maisonobe <luc@spaceroots.org>\n+dnl @version 2004-02-04\n+dnl @license AllPermissive\n+AC_DEFUN([AC_CXX_NAMESPACE_STD], [\n+  AC_CACHE_CHECK(if g++ supports namespace std,\n+  ac_cv_cxx_have_std_namespace,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include <iostream> \n+                  std::istream& is = std::cin;],,\n+  ac_cv_cxx_have_std_namespace=yes, ac_cv_cxx_have_std_namespace=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_have_std_namespace\" = yes; then\n+    AC_DEFINE(HAVE_NAMESPACE_STD,,[Define if g++ supports namespace std. ])\n+  fi\n+])\n+</pre>\n+\n+<h5>Illegal iterator usage</h5>\n+<p>\n+      The following illustrate implementation-allowed illegal iterator\n+      use, and then correct use.  \n+</p>\n+\n+<ul> <li><p>you cannot do\n+      <code>ostream::operator&lt;&lt;(iterator)</code> to print the\n+      address of the iterator =&gt; use <code>operator&lt;&lt;\n+      &amp;*iterator</code> instead\n+\t  </p></li>\n+<li><p>you cannot clear an iterator's reference\n+\t    (<code>iterator = 0</code>) =&gt; use\n+\t    <code>iterator = iterator_type();</code>\n+\t  </p></li>\n+<li><p>\n+<code>if (iterator)</code> won't work any\n+\t    more =&gt; use <code>if (iterator != iterator_type())</code>\n+\t    </p></li>\n+</ul>\n+\n+<h5><code>isspace</code> from <tt>&lt;cctype&gt;</tt> is a macro\n+</h5>\n+\n+<p> Glibc 2.0.x and 2.1.x define <tt>&lt;ctype.h&gt;</tt>\n+functionality as macros (isspace, isalpha etc.).    \n+</p>\n+\n+<p>\n+This implementations of libstdc++, however, keep these functions as\n+macros, and so it is not back-portable to use fully qualified\n+names. For example:\n+</p>\n+\n+<pre> \n+#include &lt;cctype&gt; \n+int main() { std::isspace('X'); } \n+</pre> \n+\n+<p>Results in something like this:\n+</p>\n+\n+<pre> \n+std:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int) _ISspace ) ; \n+</pre>\n+\n+\n+<p> A solution is to modify a header-file so that the compiler tells\n+<tt>&lt;ctype.h&gt;</tt> to define functions instead of macros:\n+</p>\n+\n+<pre>\n+// This keeps isalnum, et al from being propagated as macros. \n+#if __linux__\n+# define __NO_CTYPE 1\n+#endif\n+</pre>\n+\n+<p>Then, include &lt;ctype.h&gt;\n+</p>\n+\n+<p>\n+Another problem arises if you put a <code>using namespace std;</code>\n+declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This\n+will result in ambiguities between the definitions in the global\n+namespace (<tt>&lt;ctype.h&gt;</tt>) and the definitions in namespace\n+<code>std::</code> (<code>&lt;cctype&gt;</code>).    \n+</p>\n+\n+<h5>No <code>vector::at</code>, <code>deque::at</code>, <code>string::at</code></h5>\n+\n+<p>\n+      One solution is to add an autoconf-test for this:\n+</p>\n+<pre style=\"background: #c0c0c0\">\n+AC_MSG_CHECKING(for container::at)\n+AC_TRY_COMPILE(\n+[\n+#include &lt;vector&gt;\n+#include &lt;deque&gt;\n+#include &lt;string&gt;\n+\t\n+using namespace std;\n+],\n+[\n+deque&lt;int&gt; test_deque(3);\n+test_deque.at(2);\n+vector&lt;int&gt; test_vector(2);\n+test_vector.at(1);\n+string test_string(&quot;test_string&quot;);\n+test_string.at(3);\n+],\n+[AC_MSG_RESULT(yes)\n+AC_DEFINE(HAVE_CONTAINER_AT)],\n+[AC_MSG_RESULT(no)])\n+</pre>\n+\n+<p>\n+If you are using other (non-GNU) compilers it might be a good idea\n+to check for <code>string::at</code> separately.\n+</p>\n+\n+<h5>No <code>std::char_traits&lt;char&gt;::eof</code></h5>\n+\n+<p>\n+Use some kind of autoconf test, plus this:\n+</p>      \n+<pre> \n+#ifdef HAVE_CHAR_TRAITS\n+#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+#else\n+#define CPP_EOF EOF\n+#endif\n+</pre>\n+\n+<h5>No <code>string::clear</code></h5>\n+\n+<p>\n+      There are two functions for deleting the contents of a string:\n+      <code>clear</code> and <code>erase</code> (the latter\n+      returns the string).\n+</p>\n+      \n+<pre>\n+void \n+clear() { _M_mutate(0, this-&gt;size(), 0); }\n+</pre>\n+<pre>\n+basic_string&amp; \n+erase(size_type __pos = 0, size_type __n = npos)\n+{ \n+  return this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n+                          _M_data(), _M_data()); \n+}\n+</pre>\n+\n+<p>\n+      Unfortunately, ut <code>clear</code> is not\n+      implemented in this version, so you should use\n+      <code>erase</code> (which is probably faster than\n+      <code>operator=(charT*)</code>).\n+</p>\n+\n+<h5>Removal of <code>ostream::form</code> and\n+<code>istream::scan</code> extensions</h5>\n+\n+<p> These are no longer supported. Please use\n+   <a href=\"#sec-stringstream\" title=\"Using stringstreams\">\n+    stringstreams</a> instead.\t\n+</p>\n+\n+<h5>No <code>basic_stringbuf</code>, <code>basic_stringstream</code></h5>\n+\n+<p>\n+Although the ISO standard \n+<code>i/ostringstream</code>-classes are provided, (<tt>&lt;sstream&gt;</tt>), for compatibility with older implementations the pre-ISO <code>i/ostrstream</code> (<tt>&lt;strstream&gt;</tt>) interface is also provided, with these caveats:\n+</p>\n+\n+      <div class=\"itemizedlist\"><ul type=\"disc\">\n+<li><p> <code>strstream</code> is considered to be\n+\t    deprecated\n+\t  </p></li>\n+<li><p> <code>strstream</code> is limited to\n+\t    <code>char</code>\n+\t  </p></li>\n+<li><p> with <code>ostringstream</code> you don't\n+\t    have to take care of terminating the string or freeing its\n+\t    memory\n+\t  </p></li>\n+<li><p> <code>istringstream</code> can be re-filled\n+\t    (clear(); str(input);)\n+\t  </p></li>\n+</ul></div>\n+<p>\n+      You can then use output-stringstreams like this:\n+</p>\n+       \n+<pre>\n+#ifdef HAVE_SSTREAM\n+# include &lt;sstream&gt;\n+#else\n+# include &lt;strstream&gt;\n+#endif\n+\n+#ifdef HAVE_SSTREAM\n+  std::ostringstream oss;\n+#else\n+  std::ostrstream oss;\n+#endif\n+\n+oss &lt;&lt; &quot;Name=&quot; &lt;&lt; m_name &lt;&lt; &quot;, number=&quot; &lt;&lt; m_number &lt;&lt; std::endl;\n+...\n+#ifndef HAVE_SSTREAM\n+  oss &lt;&lt; std::ends; // terminate the char*-string\n+#endif\n+\n+// str() returns char* for ostrstream and a string for ostringstream\n+// this also causes ostrstream to think that the buffer's memory\n+// is yours\n+m_label.set_text(oss.str());\n+#ifndef HAVE_SSTREAM\n+  // let the ostrstream take care of freeing the memory\n+  oss.freeze(false);\n+#endif\n+</pre>\n+\n+<p>\n+      Input-stringstreams can be used similarly:\n+</p>\n+      \n+<pre> \n+std::string input;\n+...\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+\n+int i;\n+iss &gt;&gt; i; \n+</pre>\n+\n+<p> One (the only?) restriction is that an istrstream cannot be re-filled:\n+</p>\n+      \n+<pre>\n+std::istringstream iss(numerator);\n+iss &gt;&gt; m_num;\n+// this is not possible with istrstream\n+iss.clear();\n+iss.str(denominator);\n+iss &gt;&gt; m_den;\n+ </pre>\n+ \n+<p>\n+If you don't care about speed, you can put these conversions in\n+      a template-function:\n+</p>      \n+<pre>\n+template &lt;class X&gt;\n+void fromString(const string&amp; input, X&amp; any)\n+{\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+X temp;\n+iss &gt;&gt; temp;\n+if (iss.fail())\n+throw runtime_error(..)\n+any = temp;\n+}\n+</pre>\n+\n+<p> Another example of using stringstreams is in <a href=\"../21_strings/howto.html\" target=\"_top\">this howto</a>.\n+</p>\n+\n+<p> There is additional information in the libstdc++-v2 info files, in\n+particular &quot;info iostream&quot;.\n+</p>\n+\n+<h5>Little or no wide character support</h5>\n+\n+<h5>No templatized iostreams</h5>\n+\n+<h5>Thread safety issues</h5>\n+\n+<p>This project is no longer maintained or supported, and the sources\n+archived.  The code is considered replaced and rewritten.\n+</p>\n+\n+\n+<hr />\n+<h3 class=\"left\">\n+  <a name=\"v3\">Third.</a>\n+</h3>\n+<p> The third generation GNU C++ library is called libstdc++, or\n+libstdc++-v3.\n+</p>\n+\n+      <p>The subset commonly known as the Standard Template Library\n+         (chapters 23 through 25, mostly) is adapted from the final release\n+         of the SGI STL (version 3.3), with extensive changes.\n+      </p>\n+\n+      <p>A more formal description of the V3 goals can be found in the\n+         official <a href=\"../17_intro/DESIGN\">design document</a>.\n+      </p>\n+\n+<p>Portability notes and known implementation limitations are as follows.</p>\n+\n+<h5>Pre-ISO headers moved to backwards or removed</h5>\n+\n+<p> The pre-ISO C++ headers\n+      (<code>iostream.h</code>, <code>defalloc.h</code> etc.) are\n+      available, unlike previous libstdc++ versions, but inclusion\n+      generates a warning that you are using deprecated headers.\n+</p>\n+\n+    <p>This compatibility layer is constructed by including the\n+    standard C++ headers, and injecting any items in\n+    <code>std::</code> into the global namespace.\n+   </p>\n+   <p>For those of you new to ISO C++ (welcome, time travelers!), no,\n+      that isn't a typo. Yes, the headers really have new names.\n+      Marshall Cline's C++ FAQ Lite has a good explanation in <a\n+      href=\"http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.4\">item\n+      [27.4]</a>.\n+   </p>\n+\n+<p> Some include adjustment may be required. What follows is an\n+autoconf test that defines <code>PRE_STDCXX_HEADERS</code> when they\n+exist.</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_PRE_STDCXX\n+AC_DEFUN([AC_HEADER_PRE_STDCXX], [\n+  AC_CACHE_CHECK(for pre-ISO C++ include files,\n+  ac_cv_cxx_pre_stdcxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Wno-deprecated\"\t\n+\n+  # Omit defalloc.h, as compilation with newer compilers is problematic.\n+  AC_TRY_COMPILE([\n+  #include &lt;new.h&gt;\n+  #include &lt;iterator.h&gt;\n+  #include &lt;alloc.h&gt;\n+  #include &lt;set.h&gt;\n+  #include &lt;hashtable.h&gt;\n+  #include &lt;hash_set.h&gt;\n+  #include &lt;fstream.h&gt;\n+  #include &lt;tempbuf.h&gt;\n+  #include &lt;istream.h&gt;\n+  #include &lt;bvector.h&gt;\n+  #include &lt;stack.h&gt;\n+  #include &lt;rope.h&gt;\n+  #include &lt;complex.h&gt;\n+  #include &lt;ostream.h&gt;\n+  #include &lt;heap.h&gt;\n+  #include &lt;iostream.h&gt;\n+  #include &lt;function.h&gt;\n+  #include &lt;multimap.h&gt;\n+  #include &lt;pair.h&gt;\n+  #include &lt;stream.h&gt;\n+  #include &lt;iomanip.h&gt;\n+  #include &lt;slist.h&gt;\n+  #include &lt;tree.h&gt;\n+  #include &lt;vector.h&gt;\n+  #include &lt;deque.h&gt;\n+  #include &lt;multiset.h&gt;\n+  #include &lt;list.h&gt;\n+  #include &lt;map.h&gt;\n+  #include &lt;algobase.h&gt;\n+  #include &lt;hash_map.h&gt;\n+  #include &lt;algo.h&gt;\n+  #include &lt;queue.h&gt;\n+  #include &lt;streambuf.h&gt;\n+  ],,\n+  ac_cv_cxx_pre_stdcxx=yes, ac_cv_cxx_pre_stdcxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_pre_stdcxx\" = yes; then\n+    AC_DEFINE(PRE_STDCXX_HEADERS,,[Define if pre-ISO C++ header files are present. ])\n+  fi\n+])\n+</pre>\n+\n+<p>Porting between pre-ISO headers and ISO headers is simple: headers\n+like &lt;vector.h&gt; can be replaced with &lt;vector&gt; and a using\n+directive <code>using namespace std;</code> can be put at the global\n+scope. This should be enough to get this code compiling, assuming the\n+other usage is correct.\n+</p>\n+\n+<h5>Extension headers hash_map, hash_set moved to ext or backwards</h5>\n+\n+<p> Header files <code>hash_map</code> and <code>hash_set</code> moved\n+to <code>ext/hash_map</code> and <code>ext/hash_set</code>,\n+respectively. At the same time, all types in these files are enclosed\n+in <code>namespace __gnu_cxx</code>. Later versions move deprecate\n+these files, and suggest using TR1's <code>unordered_map</code>\n+and <code>unordered_set</code> instead.\n+</p>\n+\n+<p>The following autoconf tests check for working HP/SGI hash containers.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_EXT_HASH_MAP\n+AC_DEFUN([AC_HEADER_EXT_HASH_MAP], [\n+  AC_CACHE_CHECK(for ext/hash_map,\n+  ac_cv_cxx_ext_hash_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include <ext/hash_map>], [using __gnu_cxx::hash_map;],\n+  ac_cv_cxx_ext_hash_map=yes, ac_cv_cxx_ext_hash_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_map\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_MAP,,[Define if ext/hash_map is present. ])\n+  fi\n+])\n+</pre>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_EXT_HASH_SET\n+AC_DEFUN([AC_HEADER_EXT_HASH_SET], [\n+  AC_CACHE_CHECK(for ext/hash_set,\n+  ac_cv_cxx_ext_hash_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include <ext/hash_set>], [using __gnu_cxx::hash_set;],\n+  ac_cv_cxx_ext_hash_set=yes, ac_cv_cxx_ext_hash_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_set\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_SET,,[Define if ext/hash_set is present. ])\n+  fi\n+])\n+</pre>\n+\n+\n+<h5>\n+No <code>ios::nocreate/ios::noreplace</code>.\n+</h5>\n+\n+<p> The existence of <code>ios::nocreate</code> being used for\n+input-streams has been confirmed, most probably because the author\n+thought it would be more correct to specify nocreate explicitly.  So\n+it can be left out for input-streams.\n+</p>\n+\n+<p>For output streams, &quot;nocreate&quot; is probably the default,\n+unless you specify <code>std::ios::trunc</code> ? To be safe, you can\n+open the file for reading, check if it has been opened, and then\n+decide whether you want to create/replace or not. To my knowledge,\n+even older implementations support <code>app</code>, <code>ate</code>\n+and <code>trunc</code> (except for <code>app</code> ?).\n+</p>\n+\n+\n+<h5>\n+No <code>stream::attach(int fd)</code>\n+</h5>\n+\n+<p>\n+      Phil Edwards writes: It was considered and rejected for the ISO\n+      standard.  Not all environments use file descriptors.  Of those\n+      that do, not all of them use integers to represent them.\n+    </p>  \n+\n+<p>\n+      For a portable solution (among systems which use\n+      filedescriptors), you need to implement a subclass of\n+      <code>std::streambuf</code> (or\n+      <code>std::basic_streambuf&lt;..&gt;</code>) which opens a file\n+      given a descriptor, and then pass an instance of this to the\n+      stream-constructor. \n+    </p>\n+\n+<p>\n+      An extension is available that implements this.\n+      <code>&lt;ext/stdio_filebuf.h&gt;</code> contains a derived class called\n+      <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></a>.\n+      This class can be constructed from a C <code>FILE*</code> or a file\n+      descriptor, and provides the <code>fd()</code> function.\n+    </p>\n+\n+<p>\n+ For another example of this, refer to\n+      <a href=\"http://www.josuttis.com/cppcode/fdstream.html\" target=\"_top\">fdstream example</a> \n+      by Nicolai Josuttis.\n+</p>\n+\n+<h5>\n+Support for C++98 dialect.\n+</h5>\n+\n+<p>Check for complete library coverage of the C++1998/2003 standard.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+\n+# AC_HEADER_STDCXX_98\n+AC_DEFUN([AC_HEADER_STDCXX_98], [\n+  AC_CACHE_CHECK(for ISO C++ 98 include files,\n+  ac_cv_cxx_stdcxx_98,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctime&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_98=yes, ac_cv_cxx_stdcxx_98=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_98\" = yes; then\n+    AC_DEFINE(STDCXX_98_HEADERS,,[Define if ISO C++ 1998 header files are present. ])\n+  fi\n+])\n+</pre>\n+\n+\n+<h5>\n+Support for C++TR1 dialect.\n+</h5>\n+\n+<p>Check for library coverage of the TR1 standard.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+\n+# AC_HEADER_STDCXX_TR1\n+AC_DEFUN([AC_HEADER_STDCXX_TR1], [\n+  AC_CACHE_CHECK(for ISO C++ TR1 include files,\n+  ac_cv_cxx_stdcxx_tr1,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  #include &lt;tr1/array&gt;\n+  #include &lt;tr1/ccomplex&gt;\n+  #include &lt;tr1/cctype&gt;\n+  #include &lt;tr1/cfenv&gt;\n+  #include &lt;tr1/cfloat&gt;\n+  #include &lt;tr1/cinttypes&gt;\n+  #include &lt;tr1/climits&gt;\n+  #include &lt;tr1/cmath&gt;\n+  #include &lt;tr1/complex&gt;\n+  #include &lt;tr1/cstdarg&gt;\n+  #include &lt;tr1/cstdbool&gt;\n+  #include &lt;tr1/cstdint&gt;\n+  #include &lt;tr1/cstdio&gt;\n+  #include &lt;tr1/cstdlib&gt;\n+  #include &lt;tr1/ctgmath&gt;\n+  #include &lt;tr1/ctime&gt;\n+  #include &lt;tr1/cwchar&gt;\n+  #include &lt;tr1/cwctype&gt;\n+  #include &lt;tr1/functional&gt;\n+  #include &lt;tr1/memory&gt;\n+  #include &lt;tr1/random&gt;\n+  #include &lt;tr1/regex&gt;\n+  #include &lt;tr1/tuple&gt;\n+  #include &lt;tr1/type_traits&gt;\n+  #include &lt;tr1/unordered_set&gt;\n+  #include &lt;tr1/unordered_map&gt;\n+  #include &lt;tr1/utility&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_tr1=yes, ac_cv_cxx_stdcxx_tr1=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_tr1\" = yes; then\n+    AC_DEFINE(STDCXX_TR1_HEADERS,,[Define if ISO C++ TR1 header files are present. ])\n+  fi\n+])\n+</pre>\n+\n+<p>An alternative is to check just for specific TR1 includes, such as &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_TR1_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for tr1/unordered_map,\n+  ac_cv_cxx_tr1_unordered_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_map&gt;], [using std::tr1::unordered_map;],\n+  ac_cv_cxx_tr1_unordered_map=yes, ac_cv_cxx_tr1_unordered_map=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_MAP,,[Define if tr1/unordered_map is present. ])\n+  fi\n+])\n+</pre>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_TR1_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for tr1/unordered_set,\n+  ac_cv_cxx_tr1_unordered_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_set&gt;], [using std::tr1::unordered_set;],\n+  ac_cv_cxx_tr1_unordered_set=yes, ac_cv_cxx_tr1_unordered_set=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_SET,,[Define if tr1/unordered_set is present. ])\n+  fi\n+])\n+</pre>\n+\n+\n+\n+<h5>\n+Support for C++0x dialect.\n+</h5>\n+\n+<p>Check for baseline language coverage in the compiler for the C++0xstandard.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_COMPILE_STDCXX_OX\n+AC_DEFUN([AC_COMPILE_STDCXX_0X], [\n+  AC_CACHE_CHECK(if g++ supports C++0x features without additional flags,\n+  ac_cv_cxx_compile_cxx0x_native,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&& cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_native=yes, ac_cv_cxx_compile_cxx0x_native=no)\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=c++0x,\n+  ac_cv_cxx_compile_cxx0x_cxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&& cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_cxx=yes, ac_cv_cxx_compile_cxx0x_cxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=gnu++0x,\n+  ac_cv_cxx_compile_cxx0x_gxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&& cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_gxx=yes, ac_cv_cxx_compile_cxx0x_gxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  if test \"$ac_cv_cxx_compile_cxx0x_native\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_cxx\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_gxx\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+  fi\n+])\n+</pre>\n+\n+\n+<p>Check for library coverage of the C++0xstandard.\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+\n+# AC_HEADER_STDCXX_0X\n+AC_DEFUN([AC_HEADER_STDCXX_0X], [\n+  AC_CACHE_CHECK(for ISO C++ 0x include files,\n+  ac_cv_cxx_stdcxx_0x,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;ccomplex&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfenv&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;cinttypes&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstdbool&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdint&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctgmath&gt;\n+    #include &lt;ctime&gt;\n+    #include &lt;cwchar&gt;\n+    #include &lt;cwctype&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;array&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;random&gt;\n+    #include &lt;regex&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;tuple&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;type_traits&gt;\n+    #include &lt;unordered_map&gt;\n+    #include &lt;unordered_set&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_0x=yes, ac_cv_cxx_stdcxx_0x=no)\n+  AC_LANG_RESTORE\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_0x\" = yes; then\n+    AC_DEFINE(STDCXX_0X_HEADERS,,[Define if ISO C++ 0x header files are present. ])\n+  fi\n+])\n+</pre>\n+\n+<p>As is the case for TR1 support, these autoconf macros can be made for a finer-grained, per-header-file check. For &lt;unordered_map&gt;\n+</p>\n+\n+<pre style=\"background: #c0c0c0\">\n+\n+# AC_HEADER_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for unordered_map,\n+  ac_cv_cxx_unordered_map,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_map&gt;], [using std::unordered_map;],\n+  ac_cv_cxx_unordered_map=yes, ac_cv_cxx_unordered_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_MAP,,[Define if unordered_map is present. ])\n+  fi\n+])\n+</pre>\n+\n+<pre style=\"background: #c0c0c0\">\n+# AC_HEADER_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for unordered_set,\n+  ac_cv_cxx_unordered_set,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_set&gt;], [using std::unordered_set;],\n+  ac_cv_cxx_unordered_set=yes, ac_cv_cxx_unordered_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_SET,,[Define if unordered_set is present. ])\n+  fi\n+])\n+</pre>\n+\n+\n+<h5>\n+Container iterator_type is not necessarily container value_type*\n+</h5>\n+\n+\n+<hr />\n+<h3 class=\"left\">\n+  <a name=\"v4\">Fourth, and future</a>\n+</h3>\n+\n+<hr />\n+<h3 class=\"left\">\n+  <a name=\"Links\">Links</a>\n+</h3>\n+\n+<p>\n+<a href=\"http://www.kegel.com/gcc/gcc4.html\">Migrating to gcc-4.1</a>, by Dan Kegel.\n+</p>\n+\n+<p>\n+<a href=\"http://lists.debian.org/debian-gcc/2006/03/msg00405.html\">Building the whole Debian archive with GCC 4.1: a summary</a>, by Martin Michlmayr\n+</p>\n+\n+<p>\n+<a href=\"http://annwm.lbl.gov/~leggett/Atlas/gcc-3.2.html\">Migration guide for GCC-3.2</a>\n+</p>\n+\n+</body>\n+</html>\n+"}, {"sha": "3e1bba08acbf53892dbc237a888188dc3b9340c3", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 397, "deletions": 202, "changes": 599, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -34,123 +34,309 @@ <h1 class=\"centered\"><a name=\"top\">Chapter 17:  Library Introduction</a></h1>\n <hr />\n <h1>Contents</h1>\n <ul>\n-   <li><a href=\"#2.1\">Header Files</a></li>\n-   <li><a href=\"#5\">Implementation specific behavior</a></li>\n+   <li><a href=\"#2.0\">Header Files</a></li>\n+   <li><a href=\"#3.0\">Namespaces</a></li>\n    <li><a href=\"#6\">Macros</a></li>\n-   <li><a href=\"#3\">Multithreading</a></li>\n+   <li><a href=\"#5\">Implementation specific behavior</a></li>\n+   <li><a href=\"#7\">Multithreading</a></li>\n </ul>\n \n <hr />\n \n <!-- ####################################################### -->\n \n-<h2><a name=\"2.1\">Header Files</a></h2>\n-   <p>The C++ standard specifies 50 header files that must be\n+<h2><a name=\"2.0\">Header Files</a></h2>\n+   <p>The C++ standard specifies the entire set of header files that must be\n       available to all hosted implementations.  Actually, the word\n       &quot;files&quot; is a misnomer, since the contents of the headers\n       don't necessarily have to be in any kind of external file.  The\n-      only rule is that when one <code>#include</code>'s a certain header, the\n-      contents of that header, as defined by the Standard, become\n+      only rule is that when one <code>#include</code>'s a header, the\n+      contents of that header become\n       available, no matter how.\n    </p>\n \n-<p>C++98/03 include files:\n+<p>That said, in practice files are used.</p>\n+\n+<p> There are two main types of include files: header files related to\n+a specific version of the ISO C++ standard (called Standard Headers),\n+and all others (TR1, C++ ABI, and Extensions).</p>\n+\n+<p>Two dialects of standard headers are supported, corresponding to\n+the 1998 standard as updated for 2003, and the draft of the upcoming\n+200x standard.\n+</p>\n+\n+<p>C++98/03 include files. These are available in the default compilation mode, ie <code>-std=c++98</code> or <code>-std=gnu++98</code>. \n </p>\n-<pre>\n-C++ Library Headers\n-algorithm\tios      \tnew     \tstack\n-bitset\t\tiosfwd   \tnumeric \tstdexcept\n-complex     \tiostream \tostream \tstreambuf\n-    \t\tistream  \tqueue      \tstring\n-deque      \titerator \t\t\t\n-exception  \tlimits   \t\t\ttypeinfo\n-fstream    \tlist     \tset\n-functional \tlocale   \tmap\n-iomanip    \tmemory   \tsstream \t\n-\n-C++ Headers for C Library Facilities\n-cassert   \tcfloat        \tcmath         \tcstddef     \n-ccomplex  \t\t     \tcsetjmp       \tcstdio      \tctime\n-cctype    \tciso646       \tcsignal\t\t\t    \t\n-cerrno    \tclimits       \tcstdarg       \tcstdlib     \tcwchar\n-\t    \tclocale       \t\t      \tcstring     \tcwctype\n-</pre>\n \n-<p>C++0x include files:\n+<center><table border=\"1\"><caption>C++98 Library Headers</caption>\n+<tr><td>&lt;algorithm&gt;</td><td>&lt;iomanip&gt;</td><td>&lt;list&gt;</td><td>&lt;ostream&gt;</td><td>&lt;streambuf&gt;</td></tr>\n+<tr><td>&lt;bitset&gt;</td><td>&lt;ios&gt;</td><td>&lt;locale&gt;</td><td>&lt;queue&gt;</td><td>&lt;string&gt;</td></tr>\n+<tr><td>&lt;complex&gt;</td><td>&lt;iosfwd&gt;</td><td>&lt;map&gt;</td><td>&lt;set&gt;</td><td>&lt;typeinfo&gt;</td></tr>\n+<tr><td>&lt;deque&gt;</td><td>&lt;iostream&gt;</td><td>&lt;memory&gt;</td><td>&lt;sstream&gt;</td><td>&lt;utility&gt;</td></tr>\n+<tr><td>&lt;exception&gt;</td><td>&lt;istream&gt;</td><td>&lt;new&gt;</td><td>&lt;stack&gt;</td><td>&lt;valarray&gt;</td></tr>\n+<tr><td>&lt;fstream&gt;</td><td>&lt;iterator&gt;</td><td>&lt;numeric&gt;</td><td>&lt;stdexcept&gt;</td><td>&lt;vector&gt;</td></tr>\n+<tr><td>&lt;functional&gt;</td><td>&lt;limits&gt;</td></tr>\n+</table></center>\n+\n+<p></p>\n+\n+<center><table border=\"1\"><caption>C++98 Headers for C Library Facilities</caption>\n+<tr><td>&lt;cassert&gt;</td><td>&lt;ciso646&gt;</td><td>&lt;csetjmp&gt;</td><td>&lt;cstdio&gt;</td><td>&lt;ctime&gt;</td></tr>\n+<tr><td>&lt;cctype&gt;</td><td>&lt;climits&gt;</td><td>&lt;csignal&gt;</td><td>&lt;cstdlib&gt;</td><td>&lt;cwchar&gt;</td></tr>\n+<tr><td>&lt;cerrno&gt;</td><td>&lt;clocale&gt;</td><td>&lt;cstdarg&gt;</td><td>&lt;cstring&gt;</td><td>&lt;cwctype&gt;</td></tr>\n+<tr><td>&lt;cfloat&gt;</td><td>&lt;cmath&gt;</td><td>&lt;cstddef&gt;</td></tr>\n+</table></center>\n+\n+<p>C++0x include files. These are only available in C++0x compilation mode, ie <code>-std=c++0x</code> or <code>-std=gnu++0x</code>. \n </p>\n+\n+<center><table border=\"1\"><caption>C++0x Library Headers</caption>\n+<tr><td>&lt;algorithm&gt;</td><td>&lt;iomanip&gt;</td><td>&lt;locale&gt;</td><td>&lt;regex&gt;</td><td>&lt;tuple&gt;</td></tr>\n+<tr><td>&lt;array&gt;</td><td>&lt;ios&gt;</td><td>&lt;map&gt;</td><td>&lt;set&gt;</td><td>&lt;typeinfo&gt;</td></tr>\n+<tr><td>&lt;bitset&gt;</td><td>&lt;iosfwd&gt;</td><td>&lt;memory&gt;</td><td>&lt;sstream&gt;</td><td>&lt;type_traits&gt;</td></tr>\n+<tr><td>&lt;complex&gt;</td><td>&lt;iostream&gt;</td><td>&lt;new&gt;</td><td>&lt;stack&gt;</td><td>&lt;unordered_map&gt;</td></tr>\n+<tr><td>&lt;deque&gt;</td><td>&lt;istream&gt;</td><td>&lt;numeric&gt;</td><td>&lt;stdexcept&gt;</td><td>&lt;unordered_set&gt;</td></tr>\n+<tr><td>&lt;exception&gt;</td><td>&lt;iterator&gt;</td><td>&lt;ostream&gt;</td><td>&lt;streambuf&gt;</td><td>&lt;utility&gt;</td></tr>\n+<tr><td>&lt;fstream&gt;</td><td>&lt;limits&gt;</td><td>&lt;queue&gt;</td><td>&lt;string&gt;</td><td>&lt;valarray&gt;</td></tr>\n+<tr><td>&lt;functional&gt;</td><td>&lt;list&gt;</td><td>&lt;random&gt;</td><td>&lt;system_error&gt;</td><td>&lt;vector&gt;</td></tr>\n+</table></center>\n+\n+<p></p>\n+\n+<center><table border=\"1\"><caption>C++0x Headers for C Library Facilities</caption>\n+<tr><td>&lt;cassert&gt;</td><td>&lt;cfloat&gt;</td><td>&lt;cmath&gt;</td><td>&lt;cstddef&gt;</td><td>&lt;ctgmath&gt;</td></tr>\n+<tr><td>&lt;ccomplex&gt;</td><td>&lt;cinttypes&gt;</td><td>&lt;csetjmp&gt;</td><td>&lt;cstdint&gt;</td><td>&lt;ctime&gt;</td></tr>\n+<tr><td>&lt;cctype&gt;</td><td>&lt;ciso646&gt;</td><td>&lt;csignal&gt;</td><td>&lt;cstdio&gt;</td><td>&lt;cuchar&gt;</td></tr>\n+<tr><td>&lt;cerrno&gt;</td><td>&lt;climits&gt;</td><td>&lt;cstdarg&gt;</td><td>&lt;cstdlib&gt;</td><td>&lt;cwchar&gt;</td></tr>\n+<tr><td>&lt;cfenv&gt;</td><td>&lt;clocale&gt;</td><td>&lt;cstdbool&gt;</td><td>&lt;cstring&gt;</td><td>&lt;cwctype&gt;</td></tr>\n+</table></center>\n+\n+\n+<p>In addition, TR1 includes as:\n+</p>\n+\n+<center><table border=\"1\"><caption>TR1 Library Headers</caption>\n+<tr><td>&lt;tr1/array&gt;</td><td>&lt;tr1/memory&gt;</td><td>&lt;tr1/regex&gt;</td><td>&lt;tr1/type_traits&gt;</td><td>&lt;tr1/unordered_set&gt;</td></tr>\n+<tr><td>&lt;tr1/complex&gt;</td><td>&lt;tr1/random&gt;</td><td>&lt;tr1/tuple&gt;</td><td>&lt;tr1/unordered_map&gt;</td><td>&lt;tr1/utility&gt;</td></tr>\n+<tr><td>&lt;tr1/functional&gt;</td></tr>\n+</table></center>\n+\n+<p></p>\n+\n+<center><table border=\"1\"><caption>TR1 Headers for C Library Facilities</caption>\n+<tr><td>&lt;tr1/cmath&gt;</td><td>&lt;tr1/cfloat&gt;</td><td>&lt;tr1/cstdarg&gt;</td><td>&lt;tr1/cstdio&gt;</td><td>&lt;tr1/ctime&gt;</td></tr>\n+<tr><td>&lt;tr1/ccomplex&gt;</td><td>&lt;tr1/cinttypes&gt;</td><td>&lt;tr1/cstdbool&gt;</td><td>&lt;tr1/cstdlib&gt;</td><td>&lt;tr1/cwchar&gt;</td></tr>\n+<tr><td>&lt;tr1/cfenv&gt;</td><td>&lt;tr1/climits&gt;</td><td>&lt;tr1/cstdint&gt;</td><td>&lt;tr1/ctgmath&gt;</td><td>&lt;tr1/cwctype&gt;<td></tr>\n+</table></center>\n+\n+<p>Also included are files for the C++ ABI interface:\n+</p>\n+<center><table border=\"1\"><caption>C++ ABI Headers</caption>\n+<tr><td>&lt;cxxabi.h&gt;</td><td>&lt;cxxabi_forced.h&gt;</td></tr>\n+</table></center>\n+\n+<p>And a large variety of extensions.\n+</p>\n+\n+<center><table border=\"1\"><caption>Extension Headers</caption>\n+<tr><td>&lt;ext/algorithm&gt;</td><td>&lt;ext/debug_allocator.h&gt;</td><td>&lt;ext/mt_allocator.h&gt;</td><td>&lt;ext/pod_char_traits.h&gt;</td><td>&lt;ext/stdio_sync_filebuf.h&gt;</td></tr>\n+<tr><td>&lt;ext/array_allocator.h&gt;</td><td>&lt;ext/enc_filebuf.h&gt;</td><td>&lt;ext/new_allocator.h&gt;</td><td>&lt;ext/pool_allocator.h&gt;</td><td>&lt;ext/throw_allocator.h&gt;</td></tr>\n+<tr><td>&lt;ext/atomicity.h&gt;</td><td>&lt;ext/functional&gt;</td><td>&lt;ext/numeric&gt;</td><td>&lt;ext/rb_tree&gt;</td><td>&lt;ext/typelist.h&gt;<td></tr>\n+<tr><td>&lt;ext/bitmap_allocator.h&gt;</td><td>&lt;ext/iterator&gt;</td><td>&lt;ext/numeric_traits.h&gt;</td><td>&lt;ext/rope&gt;</td><td>&lt;ext/type_traits.h&gt;</td></tr>\n+<tr><td>&lt;ext/codecvt_specializations.h&gt;</td><td>&lt;ext/malloc_allocator.h&gt;</td><td>&lt;ext/pb_ds/assoc_container.h&gt;</td><td>&lt;ext/slist&gt;</td><td>&lt;ext/vstring.h&gt;</td></tr>\n+<tr><td>&lt;ext/concurrence.h&gt;</td><td>&lt;ext/memory&gt;</td><td>&lt;ext/pb_ds/priority_queue.h&gt;</td><td>&lt;ext/stdio_filebuf.h&gt;</td></tr>\n+</table></center>\n+\n+<p></p>\n+\n+<center><table border=\"1\"><caption>Extension Debug Headers</caption>\n+<tr><td>&lt;debug/bitset&gt;</td><td>&lt;debug/list&gt;</td><td>&lt;debug/set&gt;</td><td>&lt;debug/unordered_map&gt;</td><td>&lt;debug/vector&gt;</td></tr>\n+<tr><td>&lt;debug/deque&gt;</td><td>&lt;debug/map&gt;</td><td>&lt;debug/string&gt;</td><td>&lt;debug/unordered_set&gt;</td></tr>\n+</table></center>\n+\n+<p></p>\n+\n+<center><table border=\"1\"><caption>Extension Parallel Headers</caption>\n+<tr><td>&lt;parallel/algorithm&gt;</td><td>&lt;parallel/numeric&gt;</td></tr>\n+</table></center>\n+\n+<hr />\n+<h2><a name=\"2.1\">Recipes for mixing headers</code></a></h2>\n+\n+<p> A few simple rules.\n+</p>\n+\n+<p>First, mixing different dialects of the standard headers is not\n+possible. It's an all-or-nothing affair. Thus, code like\n+</p>\n+\n <pre>\n-C++ Library Headers\n-algorithm\tios      \tnew     \tstack\n-array      \tiosfwd   \tnumeric \tstdexcept\n-bitset     \tiostream \tostream \tstreambuf\n-complex    \tistream  \tqueue      \tstring\n-deque      \titerator \trandom\t\tsystem_error\n-exception  \tlimits   \tregex      \ttuple\n-fstream    \tlist     \tset        \ttype_traits\n-functional \tlocale   \tmap        \ttypeinfo\n-iomanip    \tmemory   \tsstream \t\n-\n-C++ Headers for C Library Facilities\n-cassert   \tcfloat        \tcmath         \tcstddef     \tctgmath\n-ccomplex  \tcinttypes     \tcsetjmp       \tcstdio      \tctime\n-cctype    \tciso646       \tcsignal       \tcstdint     \tcuchar\n-cerrno    \tclimits       \tcstdarg       \tcstdlib     \tcwchar\n-cfenv     \tclocale       \tcstdbool      \tcstring     \tcwctype\n+#include &lt;array&gt;\n+#include &lt;functional&gt;\n </pre>\n \n-<p>In addition, TR1 includes as:\n+<p>Implies C++0x mode. To use the entities in &lt;array&gt;, the C++0x\n+compilation mode must be used, which implies the C++0x functionality\n+(and deprecations) in &lt;functional&gt; will be present.\n+</p>\n+\n+<p>Second, the other headers can be included with either dialect of\n+the standard headers, although features and types specific to C++0x\n+are still only enabled when in C++0x compilation mode. So, to use\n+rvalue references with <code>__gnu_cxx::vstring</code>, or to use the\n+debug-mode versions of <code>std::unordered_map</code>, one must use\n+the <code>std=gnu++0x</code> compiler flag. (Or <code>std=c++0x</code>, of course.)\n </p>\n+\n+<p>A special case of the second rule is the mixing of TR1 and C++0x\n+facilities. It is possible (although not especially prudent) to\n+include both the TR1 version and the C++0x version of header in the\n+same translation unit:\n+</p>\n+\n <pre>\n-C++ Library Headers\n-tr1/array, tr1/complex, tr1/functional, tr1/memory, tr1/random,\n-tr1/regex, tr1/tuple, tr1/type_traits, tr1/unordered_map,\n-tr1/unordered_set, tr1/utility\n-\n-C++ Headers for C Library Facilities\n-tr1/cmath, tr1/ccomplex, tr1/cfenv, tr1/cfloat, tr1/cinttypes,\n-tr1/climits, tr1/cstdarg, tr1/cstdbool, tr1/cstdint, tr1/cstdio,\n-tr1/cstdlib, tr1/ctgmath, tr1/ctime, tr1/cwchar, tr1/cwctype\n-\n-C++ Compatibility Headers for C Library Facilities\n-tr1/complex.h, tr1/ctype.h, tr1/float.h, tr1/limits.h, tr1/math.h,\n-tr1/stdarg.h, tr1/stdbool.h, tr1/stdint.h, tr1/stdio.h, tr1/stdlib.h,\n-tr1/tgmath.h, tr1/wchar.h, tr1/wctype.h\n+#include &lt;tr1/type_traits&gt;\n+#include &lt;type_traits&gt;\n </pre>\n \n+<p> Several parts of C++0x diverge quite substantially from TR1 predecessors.\n+</p>\n+\n+\n <hr />\n-<h2><a name=\"2.2\">Headers and <code>namespace std::</code></a></h2>\n+<h2><a name=\"2.2\">The C Headers and <code>namespace std</code></a></h2>\n <p>\n-\tYou should not use the C-headers (except for system-level\n-\theaders) from C++ programs. Instead, you should use a set of\n-\theaders that are named by prepending 'c' and, as usual,\n-\tomitting the extension (.h). For example, instead of using\n-\t<tt>&lt;math.h&gt;</tt>, you\n-\tshould use <tt>&lt;cmath&gt;</tt>. In some cases this has\n-\tthe advantage that the C++-header is more standardized than\n-\tthe C-header (i.e. <tt>&lt;ctime&gt;</tt> (almost)\n-\tcorresponds to either <tt>&lt;time.h&gt;</tt> or <tt>&lt;sys/time.h&gt;</tt>).\n-\n-\tThe standard specifies that if you include the C-style header\n-\t(<tt>&lt;math.h&gt;</tt> in\n-\tthis case), the symbols will be available both in the global\n-\tnamespace and in namespace <code>std::</code> (but\n-\tlibstdc++ does not yet have fully compliant headers) On the\n-\tother hand, if you include only the new header (i.e. <tt>&lt;cmath&gt;</tt>), the symbols\n-\twill only be defined in namespace <code>std::</code>\n-\t(and macros will be converted to inline-functions).\n+\tThe standard specifies that if one includes the C-style header\n+\t(&lt;math.h&gt; in this case), the symbols will be available\n+\tin the global namespace and perhaps in\n+\tnamespace <code>std::</code> (but this is no longer a firm\n+\trequirement.) One the other hand, including the C++-style\n+\theader (&lt;cmath&gt;) guarantees that the entities will be\n+\tfound in namespace std and perhaps in the global namespace.\n       </p>\n \n-<p>FIXME: this is no longer accurate.</p>\n-\n <p>\n-\tFor more information on this, and for information on how the\n-\tGNU C++ implementation might reuse (&quot;shadow&quot;) the C\n-\tlibrary-functions, have a look at <a href=\"http://www.cantrip.org/cheaders.html\" target=\"_top\">\n-\t  www.cantrip.org</a>.\n-      </p>\n+Usage of C++-style headers is recommended, as then\n+C-linkage names can be disambiguated by explicit qualification, such\n+as by <code>std::abort</code>. In addition, the C++-style headers can\n+use function overloading to provide a simpler interface to certain\n+families of C-functions. For instance in &lt;cmath&gt;, the\n+function <code>std::sin</code> has overloads for all the builtin\n+floating-point types. This means that <code>std::sin</code> can be\n+used uniformly, instead of a combination\n+of <code>std::sinf</code>, <code>std::sin</code>,\n+and <code>std::sinl</code>.\n+</p>\n+\n+<hr />\n+<h2><a name=\"2.3\">Precompiled Headers</a></h2>\n+\n+<p>There are three base header files that are provided. They can be\n+used to precompile the standard headers and extensions into binary\n+files that may the be used to speed compiles that use these headers.\n+</p>\n+\n+\n+<ul>\n+<li>stdc++.h\n+<p>Includes all standard headers. Actual content varies depending on\n+language dialect.\n+</p>\n+</li>\n+\n+<li>stdtr1c++.h\n+<p>Includes all of &lt;stdc++.h&gt;, and adds all the TR1 headers.\n+</p>\n+</li>\n+\n+<li>extc++.h\n+<p>Includes all of &lt;stdtr1c++.h&gt;, and adds all the Extension headers.\n+</p></li>\n+</ul>\n+\n+<p>How to construct a .gch file from one of these base header files.</p>\n+\n+<p>First, find the include directory for the compiler. One way to do\n+this is:</p>\n+\n+<pre>\n+g++ -v hello.cc\n+\n+#include <...> search starts here:\n+ /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0\n+...\n+End of search list.\n+</pre>\n+\n+\n+<p>Then, create a precompiled header file with the same flags that\n+will be used to compile other projects.</p>\n+\n+<pre>\n+g++ -Winvalid-pch -x c++-header -g -O2 -o ./stdc++.h.gch /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/x86_64-unknown-linux-gnu/bits/stdc++.h\n+</pre>\n+\n+<p>The resulting file will be quite large: the current size is around\n+thirty megabytes. </p>\n+\n+<p>How to use the resulting file.</p>\n+\n+<pre>\n+g++ -I. -include stdc++.h  -H -g -O2 hello.cc \n+</pre>\n+\n+<p>Verification that the PCH file is being used is easy:</p>\n+\n+<pre>\n+g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n+! ./stdc++.h.gch\n+. /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/iostream\n+. /mnt/share/bld/H-x86-gcc.20071201include/c++/4.3.0/string\n+</pre>\n+\n+<p>The exclamation point to the left of the <code>stdc++.h.gch</code> listing means that the generated PCH file was used, and thus the </p>\n+<p></p>\n+\n+<p> Detailed information about creating precompiled header files can be found in the GCC <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html\">documentation</a>.\n+</p>\n+\n \n <hr />\n-<h2><a name=\"2.5\">Namespace <code>std::</code></a></h2>\n+<h2><a name=\"3.0\">Namespaces</a></h2>\n+\n+\n+<p> There are three main namespaces.\n+</p>\n+\n+<ul>\n+<li>std\n+<p>The ISO C++ standards specify that \"all library entities are defined\n+within namespace std.\" This includes namepaces nested\n+within <code>namespace std</code>, such as <code>namespace\n+std::tr1</code>.\n+</p>\n+</li>\n+<li>abi\n+<p>Specified by the C++ ABI. This ABI specifies a number of type and\n+function APIs supplemental to those required by the ISO C++ Standard,\n+but necessary for interoperability.\n+</p>\n+</li>\n+\n+<li>__gnu_\n+<p>Indicating one of several GNU extensions. Choices\n+include <code>__gnu_cxx</code>, <code>__gnu_debug</code>, <code>__gnu_parallel</code>,\n+and <code>__gnu_pbds</code>.\n+</p></li>\n+</ul>\n+\n+<p> A complete list of implementation namespaces (including namespace contents) is available in the generated source <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html\">documentation</a>. \n+</p>\n+\n+\n+<hr />\n+<h2><a name=\"3.1\">Namespace <code>std::</code></a></h2>\n \n <p>\n       One standard requirement is that the library components are defined\n@@ -167,37 +353,46 @@ <h2><a name=\"2.5\">Namespace <code>std::</code></a></h2>\n qualified name</i></span> for each library symbol\n (i.e. <code>std::string</code>, <code>std::cout</code>) Always can be\n used, and usually enhanced, by strategic use of typedefs. (In the\n-cases where the qualified verbage becomes unweidly.)\n+cases where the qualified verbiage becomes unwieldy.)\n \t  </p></li>\n </ul></div>\n \n <hr />\n-<h2><a name=\"2.6\">Using namespace composition</a></h2>\n+<h2><a name=\"3.2\">Using namespace composition</a></h2>\n \n <p>\n-\t<a href=\"http://gtkmm.sourceforge.net\" target=\"_top\">Gtk--</a> defines\n-\tmost of its classes in namespace Gtk::. Thus, it was possible to\n-\tadapt Gtk-- to namespace std:: by using a C++-feature called\n+Best practice in programming suggests sequestering new data or\n+functionality in a sanely-named, unique namespace whenever\n+possible. This is considered an advantage over dumping everything in\n+the global namespace, as then name look-up can be explicitly enabled or\n+disabled as above, symbols are consistently mangled without repetitive\n+naming prefixes or macros, etc.\n+</p>\n+\n+<p>For instance, consider a project that defines most of its classes in <code>namespace gtk</code>. It is possible to\n+\tadapt <code>namespace gtk</code> to <code>namespace std</code> by using a C++-feature called\n \t<span class=\"emphasis\"><i>namespace composition</i></span>. This is what happens if\n-\tyou put a <span class=\"emphasis\"><i>using</i></span>-declaration into a\n+\ta <span class=\"emphasis\"><i>using</i></span>-declaration is put into a\n \tnamespace-definition: the imported symbol(s) gets imported into the\n \tcurrently active namespace(s). For example:\n </p>\n-\t<pre class=\"programlisting\">\n-\t  namespace Gtk {\n-\t  using std::string;\n-\t  class Window { ... }\n-\t  }\n-\t</pre>\n+<pre class=\"programlisting\">\n+namespace gtk \n+{\n+  using std::string;\n+  using std::tr1::array;\n+\n+  class Window { ... };\n+}\n+</pre>\n <p>\n \tIn this example, <code>std::string</code> gets imported into\n-\tnamespace Gtk::.  The result is that you don't have to use\n-\t<code>std::string</code> in this header, but still\n+\t<code>namespace gtk</code>.  The result is that use of\n+\t<code>std::string</code> inside namespace gtk can just use <code>string</code>, without the explicit qualification. \n+\tAs an added bonus, \n \t<code>std::string</code> does not get imported into\n-\tthe global namespace (::) unless the user does\n-\t<code>using namespace Gtk;</code> (which is not recommended\n-\tpractice for Gtk--, so it is not a problem).  Additionally, the\n-\t<code>using</code>-declarations are wrapped in macros that\n+\tthe global namespace.  Additionally, a more elaborate arrangement can be made for backwards compatibility and portability, whereby the\n+\t<code>using</code>-declarations can wrapped in macros that\n \tare set based on autoconf-tests to either &quot;&quot; or i.e. <code>using\n \t  std::string;</code> (depending on whether the system has\n \tlibstdc++ in <code>std::</code> or not).  (ideas from\n@@ -206,7 +401,103 @@ <h2><a name=\"2.6\">Using namespace composition</a></h2>\n </p>\n \n <hr />\n-<h2><a name=\"3\">The Standard C++ library and multithreading</a></h2>\n+<h2><a name=\"6\">Macros for libstdc++</a></h2>\n+\n+   <p>All pre-processor switches and configurations are all gathered\n+      in the file <code>c++config.h</code>, which is generated during\n+      the libstdc++ configuration and build process, and included by\n+      files part of the public libstdc++ API. Most of these macros\n+      should not be used by consumers of libstdc++, and are reserved\n+      for internal implementation use. <strong>These macros cannot be\n+      redefined</strong>. However, a select handful of these macro\n+      control libstdc++ extensions and extra features, or provide\n+      versioning information for the API, and are able to be used.\n+   </p>\n+\n+   <p>All library macros begin with <code>_GLIBCXX_</code> (except for\n+   versions 3.1.x to 3.3.x, which use <code>_GLIBCPP_</code>).\n+   </p>\n+\n+   <p>Below is the macro which users may check for library version\n+      information. </p>\n+\n+    <dl>\n+    <dt><code>__GLIBCXX__</code></dt> <dd>The current version of\n+    libstdc++ in compressed ISO date format, form of an unsigned\n+    long. For details on the value of this particular macro for a\n+    particular release, please consult this <a href=\"abi.html\">\n+    document</a>.</dd> </dl>\n+\n+   <p>Below are the macros which users may change with #define/#undef or\n+      with -D/-U compiler flags.  The default state of the symbol is\n+      listed.</p>\n+\n+   <p>&quot;Configurable&quot; (or &quot;Not configurable&quot;) means\n+      that the symbol is initially chosen (or not) based on\n+      --enable/--disable options at library build and configure time\n+      (documented <a href=\"../configopts.html\">here</a>), with the\n+      various --enable/--disable choices being translated to\n+      #define/#undef).\n+   </p> \n+\n+   <p> &quot;ABI&quot; means that changing from the default value may\n+  mean changing the ABI of compiled code. In other words, these\n+  choices control code which has already been compiled (i.e., in a\n+  binary such as libstdc++.a/.so).  If you explicitly #define or\n+  #undef these macros, the <em>headers</em> may see different code\n+  paths, but the <em>libraries</em> which you link against will not.\n+  Experimenting with different values with the expectation of\n+  consistent linkage requires changing the config headers before\n+  building/installing the library.\n+   </p>   \n+\n+    <dl>\n+    <dt><code>_GLIBCXX_DEPRECATED</code></dt>\n+    <dd>Defined by default. Not configurable. ABI-changing. Turning this off\n+        removes older ARM-style iostreams code, and other anachronisms\n+        from the API.  This macro is dependent on the version of the\n+        standard being tracked, and as a result may give different results for\n+        <code>-std=c++98</code> and <code>-std=c++0x</code>. This may\n+        be useful in updating old C++ code which no longer meet the\n+        requirements of the language, or for checking current code\n+        against new language standards.  </dd>\n+\n+    <dt><code>_GLIBCXX_FORCE_NEW</code></dt> <dd>Undefined by\n+    default. When defined, memory allocation and allocators controlled\n+    by libstdc++ call operator new/delete without caching and\n+    pooling. Configurable via\n+    <code>--enable-libstdcxx-allocator</code>. ABI-changing.\n+    </dd>\n+\n+\n+    <dt><code>_GLIBCXX_CONCEPT_CHECKS</code></dt> <dd>Undefined by\n+    default.  Configurable via <code>--enable-concept-checks</code>.\n+    When defined, performs compile-time checking on certain template\n+    instantiations to detect violations of the requirements of the\n+    standard.  This is described in more detail <a\n+    href=\"../19_diagnostics/howto.html#3\">here</a>.</dd>\n+\n+    <dt><code>_GLIBCXX_DEBUG</code></dt>\n+    <dd>Undefined by default. When defined, compiles\n+    user code using the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n+    mode</a>.\n+    </dd>\n+    <dt><code>_GLIBCXX_DEBUG_PEDANTIC</code></dt>\n+    <dd>Undefined by default. When defined while\n+    compiling with the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n+    mode</a>, makes the debug mode extremely picky by making the use\n+    of libstdc++ extensions and libstdc++-specific behavior into\n+    errors.\n+    </dd>\n+    <dt><code>_GLIBCXX_PARALLEL</code></dt>\n+    <dd>Undefined by default. When defined, compiles\n+    user code using the <a href=\"../ext/parallel_mode.html\">libstdc++ parallel\n+    mode</a>.\n+    </dd>\n+    </dl>\n+\n+<hr />\n+<h2><a name=\"7\">The Standard C++ library and multithreading</a></h2>\n    <p>This section discusses issues surrounding the proper compilation\n       of multithreaded applications which use the Standard C++\n       library.  This information is GCC-specific since the C++\n@@ -419,107 +710,11 @@ <h2><a name=\"5\">Behavior specific to libstdc++</a></h2>\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n-<hr />\n-<h2><a name=\"6\">Macros for libstdc++</a></h2>\n-\n-   <p>All pre-processor switches and configurations are all gathered\n-      in the file <code>c++config.h</code>, which is generated during\n-      the libstdc++ configuration and build process, and included by\n-      files part of the public libstdc++ API. Most of these macros\n-      should not be used by consumers of libstdc++, and are reserved\n-      for internal implementation use. <strong>These macros cannot be\n-      redefined</strong>. However, a select handful of these macro\n-      control libstdc++ extensions and extra features, or provide\n-      versioning information for the API, and are able to be used.\n-   </p>\n-\n-   <p>All library macros begin with <code>_GLIBCXX_</code> (except for\n-   versions 3.1.x to 3.3.x, which use <code>_GLIBCPP_</code>).\n-   </p>\n-\n-   <p>Below is the macro which users may check for library version\n-      information. </p>\n-\n-    <dl>\n-    <dt><code>__GLIBCXX__</code></dt> <dd>The current version of\n-    libstdc++ in compressed ISO date format, form of an unsigned\n-    long. For details on the value of this particular macro for a\n-    particular release, please consult this <a href=\"abi.html\">\n-    document</a>.</dd> </dl>\n-\n-   <p>Below are the macros which users may change with #define/#undef or\n-      with -D/-U compiler flags.  The default state of the symbol is\n-      listed.</p>\n-\n-   <p>&quot;Configurable&quot; (or &quot;Not configurable&quot;) means\n-      that the symbol is initially chosen (or not) based on\n-      --enable/--disable options at library build and configure time\n-      (documented <a href=\"../configopts.html\">here</a>), with the\n-      various --enable/--disable choices being translated to\n-      #define/#undef).\n-   </p> \n-\n-   <p> &quot;ABI&quot; means that changing from the default value may\n-  mean changing the ABI of compiled code. In other words, these\n-  choices control code which has already been compiled (i.e., in a\n-  binary such as libstdc++.a/.so).  If you explicitly #define or\n-  #undef these macros, the <em>headers</em> may see different code\n-  paths, but the <em>libraries</em> which you link against will not.\n-  Experimenting with different values with the expectation of\n-  consistent linkage requires changing the config headers before\n-  building/installing the library.\n-   </p>   \n-\n-    <dl>\n-    <dt><code>_GLIBCXX_DEPRECATED</code></dt>\n-    <dd>Defined by default. Not configurable. ABI-changing. Turning this off\n-        removes older ARM-style iostreams code, and other anachronisms\n-        from the API.  This macro is dependent on the version of the\n-        standard being tracked, and as a result may give different results for\n-        <code>-std=c++98</code> and <code>-std=c++0x</code>. This may\n-        be useful in updating old C++ code which no longer meet the\n-        requirements of the language, or for checking current code\n-        against new language standards.  </dd>\n-\n-    <dt><code>_GLIBCXX_FORCE_NEW</code></dt> <dd>Undefined by\n-    default. When defined, memory allocation and allocators controlled\n-    by libstdc++ call operator new/delete without caching and\n-    pooling. Configurable via\n-    <code>--enable-libstdcxx-allocator</code>. ABI-changing.\n-    </dd>\n-\n-\n-    <dt><code>_GLIBCXX_CONCEPT_CHECKS</code></dt> <dd>Undefined by\n-    default.  Configurable via <code>--enable-concept-checks</code>.\n-    When defined, performs compile-time checking on certain template\n-    instantiations to detect violations of the requirements of the\n-    standard.  This is described in more detail <a\n-    href=\"../19_diagnostics/howto.html#3\">here</a>.</dd>\n-\n-    <dt><code>_GLIBCXX_DEBUG</code></dt>\n-    <dd>Undefined by default. When defined, compiles\n-    user code using the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n-    mode</a>.\n-    </dd>\n-    <dt><code>_GLIBCXX_DEBUG_PEDANTIC</code></dt>\n-    <dd>Undefined by default. When defined while\n-    compiling with the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n-    mode</a>, makes the debug mode extremely picky by making the use\n-    of libstdc++ extensions and libstdc++-specific behavior into\n-    errors.\n-    </dd>\n-    <dt><code>_GLIBCXX_PARALLEL</code></dt>\n-    <dd>Undefined by default. When defined, compiles\n-    user code using the <a href=\"../ext/parallel_mode.html\">libstdc++ parallel\n-    mode</a>.\n-    </dd>\n-\n     <!--\n     <dt><code></code></dt>\n     <dd>\n     </dd>\n     -->\n-    </dl>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "dc5bc2a067d9d2c852baee9dee179a69ae99b098", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -281,9 +281,6 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n    </p>\n    <pre>\n        std::set_terminate(std::abort);</pre>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n \n <p>\n    This function will attempt to write to stderr.  If your application\n@@ -292,6 +289,11 @@ <h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n     unspecified manner.\n </p>\n \n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+\n <hr />\n <h2><a name=\"5\">Dynamic memory management</a></h2>\n    <p>There are six flavors each of <code>new</code> and"}, {"sha": "951c12df36d4b0ace0ac9a154f353274dad9b69f", "filename": "libstdc++-v3/docs/html/20_util/allocator.html", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -84,34 +84,47 @@ <h3 class=\"left\">\n </h3>\n    <p>The easiest way of fulfilling the requirements is to call operator new\n       each time a container needs memory, and to call operator delete each\n-      time the container releases memory.  <strong>BUT</strong>\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\">this\n-      method is horribly slow</a>.\n-   </p>\n-   <p>Or we can keep old memory around, and reuse it in a pool to save time.\n-      The old libstdc++-v2 used a memory pool, and so do we.  As of 3.0,\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00136.html\">it's\n-      on by default</a>.  The pool is shared among all the containers in the\n-      program:  when your program's std::vector&lt;int&gt; gets cut in half\n-      and frees a bunch of its storage, that memory can be reused by the\n-      private std::list&lt;WonkyWidget&gt; brought in from a KDE library\n-      that you linked against.  And we don't have to call operators new and\n-      delete to pass the memory on, either, which is a speed bonus.\n-      <strong>BUT</strong>...\n-   </p>\n-   <p>What about threads?  No problem:  in a threadsafe environment, the\n-      memory pool is manipulated atomically, so you can grow a container in\n-      one thread and shrink it in another, etc.  <strong>BUT</strong> what\n-      if threads in libstdc++ aren't set up properly?\n-      <a href=\"../faq/index.html#5_6\">That's been answered already</a>.\n-   </p>\n-   <p><strong>BUT</strong> what if you want to use your own allocator?  What\n-      if you plan on using a runtime-loadable version of malloc() which uses\n-      shared telepathic anonymous mmap'd sections serializable over a\n-      network, so that memory requests <em>should</em> go through malloc?\n-      And what if you need to debug it?\n-   </p>\n+      time the container releases memory. This method may be \n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\">slower</a>\n+      than caching the allocations and re-using previously-allocated\n+      memory, but has the advantage of working correctly across a wide\n+      variety of hardware and operating systems, including large\n+      clusters. The <code>__gnu_cxx::new_allocator</code> implements\n+      the simple operator new and operator delete semantics, while <code>__gnu_cxx::malloc_allocator</code> implements much the same thing, only with the C language functions <code>std::malloc</code> and <code>std::free</code>.\n+   </p>\n+\n+<p> Another approach is to use intelligence within the allocator class\n+to cache allocations. This extra machinery can take a variety of\n+forms: a bitmap index, an index into an exponentially increasing\n+power-of-two-sized buckets, or simpler fixed-size pooling cache.  The\n+cache is shared among all the containers in the program: when your\n+program's std::vector&lt;int&gt; gets cut in half and frees a bunch of\n+its storage, that memory can be reused by the private\n+std::list&lt;WonkyWidget&gt; brought in from a KDE library that you\n+linked against.  And operators new and delete are not always called to\n+pass the memory on, either, which is a speed bonus. Examples of\n+allocators that use these techniques\n+are <code>__gnu_cxx::bitmap_allocator</code>, <code>__gnu_cxx::pool_allocator</code>,\n+and <code>__gnu_cxx::__mt_alloc</code>.\n+</p>\n \n+<p>Depending on the implementation techniques used, the underlying\n+operating system, and compilation environment, scaling caching\n+allocators can be tricky. In particular, order-of-destruction and\n+order-of-creation for memory pools may be difficult to pin down with\n+certainty, which may create problems when used with plugins or loading\n+and unloading shared objects in memory. As such, using caching\n+allocators on systems that do not\n+support <code>abi::__cxa_atexit</code> is not recommended.\n+</p>\n+\n+   <p>Versions of libstdc++ prior to 3.4 cache allocations in a memory\n+   pool, instead of passing through to call the global allocation\n+   operators (ie, <code>__gnu_cxx::pool_allocator</code>).  More\n+   recent versions default to the\n+   simpler <code>__gnu_cxx::new_allocator</code>.\n+   </p>\n+ \n <h3 class=\"left\">\n   <a name=\"stdallocator\">Implementation details of <code>std::allocator</code></a>\n </h3>\n@@ -335,6 +348,11 @@ <h3 class=\"left\">\n     <td>&lt;ext/array_allocator.h&gt;</td>\n     <td>4.0.0</td>\n   </tr>\n+  <tr>\n+    <td>__gnu_cxx::throw_allocator&lt;T&gt;</td>\n+    <td>&lt;ext/throw_allocator.h&gt;</td>\n+    <td>4.2.0</td>\n+  </tr>\n </table>\n \n    <p>More details on each of these extension allocators follows. </p>\n@@ -370,6 +388,12 @@ <h3 class=\"left\">\n          When a pointer is passed to <code>deallocate()</code>, the stored\n          size is checked, and assert() is used to guarantee they match. \n      </p>\n+     </li>\n+      <li><code>throw_allocator</code> \n+     <p> Includes memory tracking and marking abilities as well as hooks for\n+     throwing exceptinos at configurable intervals (including random,\n+     all, none). \n+     </p>\n      </li>\n      <li><code>__pool_alloc</code>\n      <p> A high-performance, single pool allocator.  The reusable"}, {"sha": "d2a736fb5d2a1276cc050437a8c19797970f3b99", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -26,21 +26,14 @@ <h2><a name=\"3\">Table of Contents</a></h2>\n annex D, extensions as described by TR1, and future C++ library\n standards still in progress. For those who want to see exactly how far\n the project has come, or just want the latest bleeding-edge code, the\n-up-to-date source is always publically available over anonymous SVN,\n+up-to-date source is always publicly available over anonymous SVN,\n and can be browsed over the <a\n href=\"http://gcc.gnu.org/svn.html\">web</a>.\n </p>\n \n <p>Stable versions of libstdc++ are included with releases of\n    <a href=\"http://gcc.gnu.org/releases.html\">the GCC compilers</a>.\n </p>\n-<!--\n-  The list below is automatically generated.  To make changes in the text,\n-  edit the appropriate HOWTO file and run \"make\" in this directory.  In\n-  those files, you may reorder entries as you like, but DO NOT change the\n-  \"#number\"s in anchors, for they are used elsewhere and in bookmarks.\n--->\n-<!-- beginlist -->\n   <ul>\n    <li>Introduction\n    <ul>\n@@ -77,26 +70,27 @@ <h2><a name=\"3\">Table of Contents</a></h2>\n       <ul>\n          <li>Header Files\n          <ul>\n-         <li><a href=\"17_intro/howto.html#2.1\">Available headers</a></li>\n-         <li><a href=\"17_intro/howto.html#2.2\">Headers and <code>namespace std</code></a></li>\n-         <li>Pre-compiled headers</li>\n+         <li><a href=\"17_intro/howto.html#2.0\">Available headers</a></li>\n+         <li><a href=\"17_intro/howto.html#2.1\">Mixing headers</a></li>\n+         <li><a href=\"17_intro/howto.html#2.2\">The C Headers and <code>namespace std</code></a></li>\n+         <li><a href=\"17_intro/howto.html#2.3\">Precompiled Headers</a></li>\n          </ul>\n \t </li>\n \n          <li>Namespaces\n          <ul>\n-         <li><a href=\"17_intro/howto.html#2.5\">Namespace <code>std::</code></a></li>\n-         <li><a href=\"17_intro/howto.html#2.6\">Using namespace composition</a></li>\n+         <li><a href=\"17_intro/howto.html#3.0\">Available namespaces</li>\n+         <li><a href=\"17_intro/howto.html#3.1\">Namespace <code>std::</code></a></li>\n+         <li><a href=\"17_intro/howto.html#3.2\">Using namespace composition</a></li>\n          </ul>\n \t </li>\n          <li><a href=\"17_intro/howto.html#6\">Macros</a></li>\n+         <li>Command line options</li>\n \n  \t<li>Concurrency\n          <ul>\n-         <li>Atomic Operations</li>\n-         <li><a href=\"17_intro/howto.html#3\">Thread safety overview</a></li>\n-\n \t  <li><a href=\"faq/index.html#5_6\">Is it thread safe?</a></li>\n+         <li><a href=\"17_intro/howto.html#7\">Thread safety history and evolution</a></li>\n \t  <li><a href=\"23_containers/howto.html#3\">Containers</a></li>\n \t  <li><a href=\"27_io/howto.html#9\">IO</a></li>\n          </ul>\n@@ -122,8 +116,15 @@ <h2><a name=\"3\">Table of Contents</a></h2>\n \n    <li>Diagnostics\n    <ul>\n+     <li>Exceptions\n+\n+     <ul>\n      <li>Exception class hierarchy</li>\n      <li><a href=\"19_diagnostics/howto.html#1\">Adding data to exceptions</a></li>\n+     <li>Cancellation</li>\n+     </ul>\n+     </li>\n+\n      <li><a href=\"19_diagnostics/howto.html#3\">Concept checking</a></li>\n    </ul>\n    </li>\n@@ -248,6 +249,7 @@ <h2><a name=\"3\">Table of Contents</a></h2>\n </ul>\n </li>\n      <li><a href=\"ext/../18_support/howto.html#6\">Demangling</a></li>\n+     <li><a href=\"ext/concurrence.html\">Concurrency: Threads and Atomics</a></li>\n    </ul>\n    </li>\n \n@@ -277,6 +279,7 @@ <h2><a name=\"3\">Table of Contents</a></h2>\n      <li><a href=\"17_intro/porting.html\">Porting to new hardware or operating systems.</a></li>\n      <li><a href=\"17_intro/abi.html\">ABI Policy and Guidelines</a></li>\n      <li><a href=\"17_intro/api.html\">API Evolution and Deprecation History</a></li>\n+     <li><a href=\"17_intro/backwards_compatibility.html\">Backwards Compatibility</a></li>\n </ul>\n </li>\n "}, {"sha": "e621bc90f123a45bae371efd754866f7022c684f", "filename": "libstdc++-v3/docs/html/ext/concurrence.html", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fconcurrence.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fconcurrence.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fconcurrence.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -0,0 +1,342 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!DOCTYPE html\n+          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n+<head>\n+   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, MT, thread, pthread, mutex, loc, atomic\" />\n+   <meta name=\"DESCRIPTION\" content=\"Concurrency Support\" />\n+   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n+   <title>Concurrency Support</title>\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n+<link rel=\"Start\" href=\"documentation.html\" type=\"text/html\"\n+  title=\"GNU C++ Standard Library\" />\n+<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n+</head>\n+<body>\n+\n+<h1 class=\"centered\"><a name=\"top\">Concurrency Support</a></h1>\n+\n+<p class=\"fineprint\"><em>\n+   The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/concurrence.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/concurrence.html</a>.\n+</em></p>\n+\n+<p><em>\n+   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n+</em></p>\n+\n+\n+<!-- ####################################################### -->\n+\n+<hr />\n+\n+\n+<p>The interface for concurrency support is divided into two files:\n+&lt;ext/atomicity.h&gt; which provides support for atomic operations,\n+and &lt;ext/concurrence.h&gt;, which provides mutex and lock objects\n+as well as compile-time data structures for querying thread\n+support.</p>\n+\n+<p>It is expected that support for concurrence will evolve into what\n+is specified in the draft C++0x standard.</p>\n+\n+<h3 class=\"left\">\n+  <a name=\"atomic_api\">Atomics Interface</a>\n+</h3>\n+\n+<p>\n+Two functions and one type form the base of atomic support. \n+</p>\n+\n+\n+<p>The type <code>_Atomic_word</code> is a signed integral type\n+supporting atomic operations.\n+</p>\n+\n+<p>\n+The two functions functions are:\n+</p>\n+\n+<pre>\n+_Atomic_word\n+__exchange_and_add_dispatch(volatile _Atomic_word*, int);\n+\n+void\n+__atomic_add_dispatch(volatile _Atomic_word*, int);\n+</pre>\n+\n+<p>Both of these functions are declared in the header file\n+&lt;ext/atomicity.h&gt;, and are in <code>namespace __gnu_cxx</code>.\n+</p>\n+\n+<ul>\n+<li>\n+<code>\n+__exchange_and_add_dispatch\n+</code>\n+<p>Adds the second argument's value to the first argument. Returns the old value.\n+</p>\n+</li>\n+<li>\n+<code>\n+__atomic_add_dispatch\n+</code>\n+<p>Adds the second argument's value to the first argument. Has no return value.\n+</p>\n+</li>\n+</ul>\n+\n+</p>\n+These functions forward to one of several specialized helper\n+functions, depending on the circumstances. For instance, \n+</p>\n+\n+<p>\n+<code>\n+__exchange_and_add_dispatch\n+</code>\n+</p>\n+\n+<p>\n+Calls through to either of:\n+</p>\n+\n+<ul>\n+<li><code>__exchange_and_add</code>\n+<p>Multi-thread version. Inlined if compiler-generated builtin atomics\n+can be used, otherwise resolved at link time to a non-builtin code\n+sequence.\n+</p>\n+</li>\n+\n+<li><code>__exchange_and_add_single</code> \n+<p>Single threaded version. Inlined.</p>\n+</li>\n+</ul>\n+\n+<p>However, only <code>__exchange_and_add_dispatch</code>\n+and <code>__atomic_add_dispatch</code> should be used. These functions\n+can be used in a portable manner, regardless of the specific\n+environment. They are carefully designed to provide optimum efficiency\n+and speed, abstracting out atomic accesses when they are not required\n+(even on hosts that support compiler intrinsics for atomic\n+operations.)\n+</p>\n+\n+<p>\n+In addition, there are two macros\n+</p>\n+\n+<p>\n+<code>\n+_GLIBCXX_READ_MEM_BARRIER \n+</code>\n+</p>\n+<p>\n+<code>\n+GLIBCXX_WRITE_MEM_BARRIER \n+</code>\n+</p>\n+\n+<p>\n+Which expand to the appropriate write and read barrier required by the\n+host hardware and operating system.\n+</p>\n+\n+<h3 class=\"left\">\n+  <a name=\"pthread_api\">Pthread Interface</a>\n+</h3>\n+\n+<p>A thin layer above IEEE 1003.1 (ie pthreads) is used to abastract\n+the thread interface for GCC. This layer is called \"gthread,\" and is\n+comprised of one header file that wraps the host's default thread layer with\n+a POSIX-like interfaces.\n+</p>\n+\n+<p> The file &lt;gthr-default.h&gt; points to the deduced wrapper for\n+the current host. In libstdc++ implementation files,\n+&lt;bits/gthr.h&gt; is used to select the proper gthreads file.\n+</p>\n+\n+<p>Within libstdc++ sources, all calls to underlying thread functionality\n+use this layer. More detail as to the specific interface can be found in the source <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/gthr_8h-source.html\">documentation</a>.\n+</p>\n+\n+<p>By design, the gthread layer is interoperable with the types,\n+functions, and usage found in the usual &lt;pthread.h&gt; file,\n+including <code>pthread_t</code>, <code>pthread_once_t</code>, <code>pthread_create</code>,\n+etc.\n+</p>\n+\n+<h3 class=\"left\">\n+  <a name=\"concur_api\">Concurrence Interface</a>\n+</h3>\n+\n+<p>The file &lt;ext/concurrence.h&gt; contains all the higher-level\n+constructs for playing with threads. In contrast to the atomics layer,\n+the concurrence layer consists largely of types. All types are defined within <code>namespace __gnu_cxx</code>.\n+</p>\n+\n+<p>\n+These types can be used in a portable manner, regardless of the\n+specific environment. They are carefully designed to provide optimum\n+efficiency and speed, abstracting out underlying thread calls and\n+accesses when compiling for single-threaded situations (even on hosts\n+that support multiple threads.)\n+</p>\n+\n+<p>The enumerated type <code>_Lock_policy</code> details the set of\n+available locking\n+policies: <code>_S_single</code>, <code>_S_mutex</code>,\n+and <code>_S_atomic</code>.\n+</p>\n+\n+<ul>\n+<li><code>_S_single</code>\n+<p>Indicates single-threaded code that does not need locking.\n+</p>\n+\n+</li>\n+<li><code>_S_mutex</code>\n+<p>Indicates multi-threaded code using thread-layer abstractions.\n+</p>\n+</li>\n+<li><code>_S_atomic</code>\n+<p>Indicates multi-threaded code using atomic operations.\n+</p>\n+</li>\n+</ul>\n+\n+<p>The compile-time constant <code>__default_lock_policy</code> is set\n+to one of the three values above, depending on characteristics of the\n+host environment and the current compilation flags.\n+</p>\n+\n+<p>Two more datatypes make up the rest of the\n+interface: <code>__mutex</code>, and <code>__scoped_lock</code>.\n+</p>\n+\n+<p>\n+</p>\n+\n+<p>The scoped lock idiom is well-discussed within the C++\n+community. This version takes a <code>__mutex</code> reference, and\n+locks it during construction of <code>__scoped_locke</code> and\n+unlocks it during destruction. This is an efficient way of locking\n+critical sections, while retaining exception-safety.\n+</p>\n+\n+<p>Typical usage of the last two constructs is demonstrated as follows:\n+</p>\n+\n+<pre>\n+#include &lt;ext/concurrence.h&gt;\n+\n+namespace\n+{\n+  __gnu_cxx::__mutex safe_base_mutex;\n+} // anonymous namespace\n+\n+namespace other\n+{\n+  void\n+  foo()\n+  {\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    for (int i = 0; i < max;  ++i)\n+      {\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter->_M_next;\n+\t__old->_M_detach_single();\n+      }\n+}\n+</pre>\n+\n+<p>In this sample code, an anonymous namespace is used to keep\n+the <code>__mutex</code> private to the compilation unit,\n+and <code>__scoped_lock</code> is used to guard access to the critical\n+section within the for loop, locking the mutex on creation and freeing\n+the mutex as control moves out of this block.\n+</p>\n+\n+<p>Several exception classes are used to keep track of\n+concurrence-related errors. These classes\n+are: <code>__concurrence_lock_error</code>, <code>__concurrence_unlock_error</code>, <code>__concurrence_wait_error</code>,\n+and <code>__concurrence_broadcast_error</code>.\n+</p>\n+\n+\n+\n+<h3 class=\"left\">\n+  <a name=\"atomic_impl\">Details on builtin atomic support and library fallbacks</a>\n+</h3>\n+\n+<p>The functions for atomic operations described above are either\n+implemented via compiler intrinsics (if the underlying host is\n+capable) or by library fallbacks.</p>\n+\n+<p>Compiler intrinsics (builtins) are always preferred.  However, as\n+the compiler builtins for atomics are not universally implemented,\n+using them directly is problematic, and can result in undefined\n+function calls. (An example of an undefined symbol from the use\n+of <code>__sync_fetch_and_add</code> on an unsupported host is a\n+missing reference to <code>__sync_fetch_and_add_4</code>.)\n+</p>\n+\n+<p>In addition, on some hosts the compiler intrinsics are enabled\n+conditionally, via the <code>-march</code> command line flag. This makes\n+usage vary depending on the target hardware and the flags used during\n+compile.\n+</p>\n+\n+<p> If builtins are possible, <code>_GLIBCXX_ATOMIC_BUILTINS</code>\n+will be defined.\n+</p>\n+\n+\n+<p>For the following hosts, intrinsics are enabled by default.\n+</p>\n+\n+<ul>\n+  <li>alpha</li>\n+  <li>ia64</li>\n+  <li>powerpc</li>\n+  <li>s390</li>\n+</ul>\n+\n+<p>For others, some form of <code>-march</code> may work. On\n+non-ancient x86 hardware, <code>-march=native</code> usually does the\n+trick.</p>\n+\n+<p> For hosts without compiler intrinsics, but with capable\n+hardware, hand-crafted assembly is selected. This is the case for the following hosts:\n+</p>\n+\n+<ul>\n+  <li>cris</li>\n+  <li>hppa</li>\n+  <li>i386</li>\n+  <li>i486</li>\n+  <li>m48k</li>\n+  <li>mips</li>\n+  <li>sparc</li>\n+</ul>\n+\n+<p>And for the rest, a simulated atomic lock via pthreads.\n+</p>\n+\n+<p> Detailed information about compiler intrinsics for atomic operations can be found in the GCC <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html\"> documentation</a>.\n+</p>\n+\n+<p> More details on the library fallbacks from the porting <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/porting.html#Thread%20safety\">section</a>.\n+</p>\n+\n+\n+\n+</body>\n+</html>\n+"}, {"sha": "2e88c660a61709f5889b0d26298c038a8c56451b", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -74,18 +74,13 @@ <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n       are deprecated but available as backwards-compatible extensions,\n       as discussed further below.  <code>&lt;rope&gt;</code> is the\n       SGI specialization for large strings (&quot;rope,&quot;\n-      &quot;large strings,&quot; get it?  love those SGI folks).\n+      &quot;large strings,&quot; get it? Love that geeky humor.)\n       <code>&lt;slist&gt;</code> is a singly-linked list, for when the\n       doubly-linked <code>list&lt;&gt;</code> is too much space\n       overhead, and <code>&lt;rb_tree&gt;</code> exposes the red-black\n       tree classes used in the implementation of the standard maps and\n       sets.\n    </p>\n-   <p>Okay, about those hashing classes... these classes have been\n-   deprecated by the unordered_set, unordered_multiset, unordered_map,\n-   unordered_multimap containers in TR1 and the upcoming C++0x, and\n-   may be removed in future releases.\n-   </p>\n    <p>Each of the associative containers map, multimap, set, and multiset\n       have a counterpart which uses a\n       <a href=\"http://www.sgi.com/tech/stl/HashFunction.html\">hashing\n@@ -111,11 +106,13 @@ <h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n    components, and if you aren't scared about the possibility of\n    pathological cases, you'll probably get better performance from\n    hash_map.</em></blockquote>\n-   <p>(Side note:  for those of you wondering, <strong>&quot;Why wasn't a hash\n-      table included in the Standard in the first #!$@ place?&quot;</strong>\n-      I'll give a quick answer:  it was proposed, but too late and in too\n-      unorganized a fashion.)\n+\n+   <p>Okay, about the SGI hashing classes... these classes have been\n+   deprecated by the unordered_set, unordered_multiset, unordered_map,\n+   unordered_multimap containers in TR1 and the upcoming C++0x, and\n+   may be removed in future releases.\n    </p>\n+\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>"}, {"sha": "64b8e3138c19e163a9fe7a3c44025e59c752c82c", "filename": "libstdc++-v3/docs/html/ext/sgiexts.html", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fsgiexts.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -9,7 +9,7 @@\n    <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++, GCC, g++, STL, SGI\" />\n    <meta name=\"DESCRIPTION\" content=\"SGI extensions preserved in libstdc++.\" />\n    <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>SGI extensions to the library in libstdc++</title>\n+   <title>HP/SGI STL extensions</title>\n <link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n <link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n   title=\"GNU C++ Standard Library\" />\n@@ -19,29 +19,29 @@\n </head>\n <body>\n \n-<h1 class=\"centered\"><a name=\"top\">SGI extensions to the library in\n-libstdc++</a></h1>\n+<h1 class=\"centered\"><a name=\"top\">HP/SGI STL extensions</a></h1>\n \n-<p>This page describes the extensions that SGI made to their version of the\n-   STL subset of the Standard C++ Library.  For a time we\n-   <a href=\"../faq/index.html#5_3\">tracked and imported changes and updates\n-   from most of the SGI STL</a>, up through their (apparently) final release.\n-   Their extensions were mostly preserved.\n+<p>This page describes the extensions that SGI made to the STL subset\n+   of the Standard C++ Library, which also includes work from the\n+   originating HP codebase.  This work is the basis for much of\n+   libstdc++, and where possible these extensions have been\n+   preserved.\n </p>\n \n-<p>They are listed according to the chapters of the library that they\n-   extend (see <a href=\"../documentation.html#3\">the chapter-specific notes</a>\n-   for a description).  Not every chapter may have extensions, and the\n-   extensions may come and go.  Also, this page is incomplete because the\n-   author is pressed for time.  Check back often; the latest change was on\n-   $Date: 2003/04/16 17:02:47 $ (UTC).\n+<p>What follows is a listing of these extensions, according to the\n+   chapters of the library that they extend\n+   (see <a href=\"../documentation.html#3\">the chapter-specific\n+   notes</a> for a description).  Not every chapter has extensions,\n+   and existing extensions may be removed (or moved) as their\n+   functionality is standardized.\n </p>\n \n-<p>Descriptions range from the scanty to the verbose.  You should also check\n-   the <a href=\"../documentation.html#4\">generated documentation</a> for notes\n-   and comments, especially for entries marked with '*'.  For more complete\n-   doumentation, see the SGI website.  For <em>really</em> complete\n-   documentation, buy a copy of Matt Austern's book.  *grin*\n+<p>Descriptions range from the scanty to the verbose.  Also check\n+   the <a href=\"../documentation.html#4\">generated documentation</a>\n+   for notes and comments, especially for entries marked with '*'.\n+   For more complete doumentation, see the SGI website.\n+   For <em>really</em> complete documentation, consider perusing a\n+   copy of Matt Austern's book \"Generic Programming and the STL.\"\n </p>\n \n <p>Back to the <a href=\"howto.html\">libstdc++ extensions</a>."}, {"sha": "ff6cd65c9a6ee419951ba0e014fefa94ada0d5d7", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -1052,14 +1052,26 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n \n <hr />\n    <h2><a name=\"5_6\">5.6 Is libstdc++ thread-safe?</a></h2>\n-      <p>libstdc++ strives to be thread-safe when all of the following\n+      <p>The library strives to be thread-safe when all of the following\n          conditions are met:\n       </p>\n       <ul>\n        <li>The system's libc is itself thread-safe,</li>\n-       <li><code>gcc -v</code> reports a thread model other than 'single',</li>\n-       <li>[pre-3.3 only] a non-generic implementation of atomicity.h\n-           exists for the architecture in question.</li>\n+       <li>The compiler in use reports a thread model other than 'single'. This can be tested via output from <code>gcc -v</code>. Multi-thread capable versions of gcc output something like this:\n+<pre>\n+%gcc -v\n+Using built-in specs.\n+...\n+Thread model: posix\n+gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)\n+</pre>\n+\n+<p>Look for \"Thread model\" lines that aren't equal to \"single.\"</p>\n+ </li>\n+       <li>Requisite command-line flags are used for atomic operations and threading. Examples of this include <code>-pthread</code> and <code>-march=native</code>, although specifics vary depending on the host environment. See <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html\">Machine Dependent Options</a>.</li>\n+       <li>An implementation of atomicity.h functions\n+           exists for the architecture in question. See the internals documentation for more <a href=\"../ext/concurrence.html\">details</a>.</li>\n+\n       </ul>\n       <p>The user-code must guard against concurrent method calls which may\n          access any particular library object's state.  Typically, the"}, {"sha": "7e7c2682ea1428e280947a9796bb06b3ab6b1e8f", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -1,6 +1,6 @@\n // C++ includes used for precompiling -*- C++ -*-\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,6 +51,17 @@\n #include <cstring>\n #include <ctime>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <ccomplex>\n+#include <cfenv>\n+#include <cinttypes>\n+#include <cstdbool>\n+#include <cstdint>\n+#include <ctgmath>\n+#include <cwchar>\n+#include <cwctype>\n+#endif\n+\n // C++\n #include <algorithm>\n #include <bitset>\n@@ -84,3 +95,14 @@\n #include <utility>\n #include <valarray>\n #include <vector>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <array>\n+#include <random>\n+#include <regex>\n+#include <system_error>\n+#include <tuple>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#endif"}, {"sha": "f1ed7cf38b589643beffa7fb6103169c6ca795e2", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e790677d5a0088d60da607ef0c93c1c06becb5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=79e790677d5a0088d60da607ef0c93c1c06becb5", "patch": "@@ -121,6 +121,7 @@\n #include <stdexcept>\n #include <streambuf>\n #include <string>\n+#include <system_error>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>"}]}