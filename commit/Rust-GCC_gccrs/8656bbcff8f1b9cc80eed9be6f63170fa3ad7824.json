{"sha": "8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY1NmJiY2ZmOGYxYjljYzgwZWVkOWJlNmY2MzE3MGZhM2FkNzgyNA==", "commit": {"author": {"name": "Shiva Chen", "email": "shiva0217@gmail.com", "date": "2018-04-05T03:25:20Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-05T03:25:20Z"}, "message": "[NDS32] Add constraint for lwi45.fe instruction.\n\ngcc/\n\t* config/nds32/constraints.md (Ufe): New memory constraint.\n\t* config/nds32/nds32-md-auxiliary.c (nds32_mem_format,\n\tnds32_output_16bit_load): Consider r8 register for lwi45.fe format.\n\t* config/nds32/nds32.c (nds32_print_operand): Output lwi45.fe\n\toperands.\n\t* config/nds32/nds32.h (nds32_16bit_address_type): Add ADDRESS_R8_IMM7U.\n\t* config/nds32/nds32.md (*mov<mode>): Adjust pattern.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\n\nFrom-SVN: r259121", "tree": {"sha": "419d6918919f08e510daa33cffff0493336a7761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/419d6918919f08e510daa33cffff0493336a7761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/comments", "author": {"login": "ShivaChen", "id": 32083954, "node_id": "MDQ6VXNlcjMyMDgzOTU0", "avatar_url": "https://avatars.githubusercontent.com/u/32083954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShivaChen", "html_url": "https://github.com/ShivaChen", "followers_url": "https://api.github.com/users/ShivaChen/followers", "following_url": "https://api.github.com/users/ShivaChen/following{/other_user}", "gists_url": "https://api.github.com/users/ShivaChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShivaChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShivaChen/subscriptions", "organizations_url": "https://api.github.com/users/ShivaChen/orgs", "repos_url": "https://api.github.com/users/ShivaChen/repos", "events_url": "https://api.github.com/users/ShivaChen/events{/privacy}", "received_events_url": "https://api.github.com/users/ShivaChen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9774a97af284e42882cd30b7ba352e3dea8c9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9774a97af284e42882cd30b7ba352e3dea8c9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9774a97af284e42882cd30b7ba352e3dea8c9ed"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "021c0977521ff4eacab3b7334faa04d438de9945", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -1,3 +1,14 @@\n+2018-04-05  Shiva Chen  <shiva0217@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* config/nds32/constraints.md (Ufe): New memory constraint.\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_mem_format,\n+\tnds32_output_16bit_load): Consider r8 register for lwi45.fe format.\n+\t* config/nds32/nds32.c (nds32_print_operand): Output lwi45.fe\n+\toperands.\n+\t* config/nds32/nds32.h (nds32_16bit_address_type): Add ADDRESS_R8_IMM7U.\n+\t* config/nds32/nds32.md (*mov<mode>): Adjust pattern.\n+\n 2018-04-05  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.md: Use optimize_size in the condition for"}, {"sha": "46b925f059f96c5c8eeb34857ee9fff58f72659c", "filename": "gcc/config/nds32/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstraints.md?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -296,6 +296,12 @@\n        (match_test \"(nds32_mem_format (op) == ADDRESS_REG)\n \t\t    && (GET_MODE (op) == SImode)\")))\n \n+(define_memory_constraint \"Ufe\"\n+  \"Memory constraint for fe format\"\n+  (and (match_code \"mem\")\n+       (match_test \"nds32_mem_format (op) == ADDRESS_R8_IMM7U\n+\t\t    && (GET_MODE (op) == SImode)\")))\n+\n (define_memory_constraint \"U37\"\n   \"Memory constraint for 37 format\"\n   (and (match_code \"mem\")"}, {"sha": "38958999c700114687a2cf21965bd18f05434a02", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -925,6 +925,10 @@ nds32_mem_format (rtx op)\n \tcase E_SImode:\n \tcase E_SFmode:\n \tcase E_DFmode:\n+\t  /* r8 imply fe format.  */\n+\t  if ((regno == 8) &&\n+\t      (val >= -128 && val <= -4 && (val % 4 == 0)))\n+\t    return ADDRESS_R8_IMM7U;\n \t  /* fp imply 37 format.  */\n \t  if ((regno == FP_REGNUM) &&\n \t      (val >= 0 && val < 512 && (val % 4 == 0)))\n@@ -1009,6 +1013,9 @@ nds32_output_16bit_load (rtx *operands, int byte)\n       snprintf (pattern, sizeof (pattern), \"l%ci333.bi\\t%%0, %%1\", size);\n       output_asm_insn (pattern, operands);\n       break;\n+    case ADDRESS_R8_IMM7U:\n+      output_asm_insn (\"lwi45.fe\\t%0, %e1\", operands);\n+      break;\n     case ADDRESS_FP_IMM7U:\n       output_asm_insn (\"lwi37\\t%0, %1\", operands);\n       break;"}, {"sha": "eedf6f56df1628fbf17c7af3184991f20289c8b4", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -2422,6 +2422,14 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n       /* No need to handle following process, so return immediately.  */\n       return;\n \n+    case 'e':\n+      gcc_assert (MEM_P (x)\n+\t\t  && GET_CODE (XEXP (x, 0)) == PLUS\n+\t\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT);\n+      fprintf (stream, HOST_WIDE_INT_PRINT_DEC, INTVAL (XEXP (XEXP (x, 0), 1)));\n+\n+      /* No need to handle following process, so return immediately.  */\n+      return;\n     case 'B':\n       /* Use exact_log2() to search the 1-bit position.  */\n       gcc_assert (CONST_INT_P (x));"}, {"sha": "1f3c48c59bef679a2ff43fe95aa55b1b703c59ab", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -113,6 +113,8 @@ enum nds32_16bit_address_type\n   ADDRESS_LO_REG_IMM3U,\n   /* post_inc [lo_reg + imm3u]: 333 format address.  */\n   ADDRESS_POST_INC_LO_REG_IMM3U,\n+  /* [$r8 + imm7u]: r8 imply address.  */\n+  ADDRESS_R8_IMM7U,\n   /* [$fp + imm7u]: fp imply address.  */\n   ADDRESS_FP_IMM7U,\n   /* [$sp + imm7u]: sp imply address.  */"}, {"sha": "dd50f7a62e0470f51de905d718e718b0ee9248c0", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8656bbcff8f1b9cc80eed9be6f63170fa3ad7824/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=8656bbcff8f1b9cc80eed9be6f63170fa3ad7824", "patch": "@@ -193,8 +193,8 @@\n })\n \n (define_insn \"*mov<mode>\"\n-  [(set (match_operand:QIHISI 0 \"nonimmediate_operand\" \"=r, r, U45, U33, U37, U45, m,   l,   l,   l,   d, r,    d,    r,    r,    r\")\n-\t(match_operand:QIHISI 1 \"nds32_move_operand\"   \" r, r,   l,   l,   l,   d, r, U45, U33, U37, U45, m, Ip05, Is05, Is20, Ihig\"))]\n+  [(set (match_operand:QIHISI 0 \"nonimmediate_operand\" \"=r, r, U45, U33, U37, U45, m,   l,   l,   l,   d,   d, r,    d,    r,    r,    r\")\n+\t(match_operand:QIHISI 1 \"nds32_move_operand\"   \" r, r,   l,   l,   l,   d, r, U45, U33, U37, U45, Ufe, m, Ip05, Is05, Is20, Ihig\"))]\n   \"register_operand(operands[0], <MODE>mode)\n    || register_operand(operands[1], <MODE>mode)\"\n {\n@@ -215,23 +215,24 @@\n     case 8:\n     case 9:\n     case 10:\n-      return nds32_output_16bit_load (operands, <byte>);\n     case 11:\n-      return nds32_output_32bit_load (operands, <byte>);\n+      return nds32_output_16bit_load (operands, <byte>);\n     case 12:\n-      return \"movpi45\\t%0, %1\";\n+      return nds32_output_32bit_load (operands, <byte>);\n     case 13:\n-      return \"movi55\\t%0, %1\";\n+      return \"movpi45\\t%0, %1\";\n     case 14:\n-      return \"movi\\t%0, %1\";\n+      return \"movi55\\t%0, %1\";\n     case 15:\n+      return \"movi\\t%0, %1\";\n+    case 16:\n       return \"sethi\\t%0, hi20(%1)\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\"   \"alu,alu,store,store,store,store,store,load,load,load,load,load,alu,alu,alu,alu\")\n-   (set_attr \"length\" \"  2,  4,    2,    2,    2,    2,    4,   2,   2,   2,   2,   4,  2,  2,  4,  4\")])\n+  [(set_attr \"type\"   \"alu,alu,store,store,store,store,store,load,load,load,load,load,load,alu,alu,alu,alu\")\n+   (set_attr \"length\" \"  2,  4,    2,    2,    2,    2,    4,   2,   2,   2,   2,   2,   4,  2,  2,  4,  4\")])\n \n \n ;; We use nds32_symbolic_operand to limit that only CONST/SYMBOL_REF/LABEL_REF"}]}