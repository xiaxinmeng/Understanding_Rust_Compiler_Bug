{"sha": "91a17a346ef6b2f901a3fe4077228d918a98a8b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhMTdhMzQ2ZWY2YjJmOTAxYTNmZTQwNzcyMjhkOTE4YTk4YThiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-09T12:47:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-09T12:47:22Z"}, "message": "tree-flow.h (struct ptr_info_def): Make escape_mask a ENUM_BITFIELD.\n\n2007-11-09  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (struct ptr_info_def): Make escape_mask a\n\tENUM_BITFIELD.\n\t(struct ptr_info_def): Likewise.\n\t(enum escape_type): Also use bit zero.\n\nFrom-SVN: r130041", "tree": {"sha": "60e612eb97df78babf1d3f9bbad35916c5e01f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e612eb97df78babf1d3f9bbad35916c5e01f68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a17a346ef6b2f901a3fe4077228d918a98a8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a17a346ef6b2f901a3fe4077228d918a98a8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a17a346ef6b2f901a3fe4077228d918a98a8b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a17a346ef6b2f901a3fe4077228d918a98a8b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aaa40131a37f28ffc3f1788b66293248b4abb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaa40131a37f28ffc3f1788b66293248b4abb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaa40131a37f28ffc3f1788b66293248b4abb5c"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "6dc7fedf38f3eca44fdcd772b46eff8d2918b6c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a17a346ef6b2f901a3fe4077228d918a98a8b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a17a346ef6b2f901a3fe4077228d918a98a8b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91a17a346ef6b2f901a3fe4077228d918a98a8b5", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (struct ptr_info_def): Make escape_mask a\n+\tENUM_BITFIELD.\n+\t(struct ptr_info_def): Likewise.\n+\t(enum escape_type): Also use bit zero.\n+\n 2007-11-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33604"}, {"sha": "02e9543dd687678450e1a10d4f7d7f36b98f709a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a17a346ef6b2f901a3fe4077228d918a98a8b5/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a17a346ef6b2f901a3fe4077228d918a98a8b5/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=91a17a346ef6b2f901a3fe4077228d918a98a8b5", "patch": "@@ -40,6 +40,25 @@ typedef struct basic_block_def *basic_block;\n #endif\n struct static_var_ann_d;\n \n+/* The reasons a variable may escape a function.  */\n+enum escape_type \n+{\n+  NO_ESCAPE = 0,\t\t\t/* Doesn't escape.  */\n+  ESCAPE_STORED_IN_GLOBAL = 1 << 0,\n+  ESCAPE_TO_ASM = 1 << 1,\t\t/* Passed by address to an assembly\n+\t\t\t\t\t   statement.  */\n+  ESCAPE_TO_CALL = 1 << 2,\t\t/* Escapes to a function call.  */\n+  ESCAPE_BAD_CAST = 1 << 3,\t\t/* Cast from pointer to integer */\n+  ESCAPE_TO_RETURN = 1 << 4,\t\t/* Returned from function.  */\n+  ESCAPE_TO_PURE_CONST = 1 << 5,\t/* Escapes to a pure or constant\n+\t\t\t\t\t   function call.  */\n+  ESCAPE_IS_GLOBAL = 1 << 6,\t\t/* Is a global variable.  */\n+  ESCAPE_IS_PARM = 1 << 7,\t\t/* Is an incoming function argument.  */\n+  ESCAPE_UNKNOWN = 1 << 8\t\t/* We believe it escapes for\n+\t\t\t\t\t   some reason not enumerated\n+\t\t\t\t\t   above.  */\n+};\n+\n /* Memory reference statistics for individual memory symbols,\n    collected during alias analysis.  */\n struct mem_sym_stats_d GTY(())\n@@ -228,6 +247,9 @@ struct ptr_info_def GTY(())\n   /* Nonzero if this pointer points to NULL.  */\n   unsigned int pt_null : 1;\n \n+  /* Mask of reasons this pointer's value escapes the function  */\n+  ENUM_BITFIELD (escape_type) escape_mask : 9;\n+\n   /* Set of variables that this pointer may point to.  */\n   bitmap pt_vars;\n \n@@ -236,9 +258,6 @@ struct ptr_info_def GTY(())\n      pointer will be represented by this memory tag, instead of the type\n      tag computed by TBAA.  */\n   tree name_mem_tag;\n-\n-  /* Mask of reasons this pointer's value escapes the function  */\n-  unsigned int escape_mask;\n };\n \n \n@@ -343,13 +362,17 @@ struct var_ann_d GTY(())\n   unsigned is_heapvar : 1;\n \n   /* True if the variable is call clobbered.  */\n-  unsigned int call_clobbered : 1;\n+  unsigned call_clobbered : 1;\n \n   /* This field describes several \"no alias\" attributes that some\n      symbols are known to have.  See the enum's definition for more\n      information on each attribute.  */\n   ENUM_BITFIELD (noalias_state) noalias_state : 2;\n \n+  /* Mask of values saying the reasons why this variable has escaped\n+     the function.  */\n+  ENUM_BITFIELD (escape_type) escape_mask : 9;\n+\n   /* Memory partition tag assigned to this symbol.  */\n   tree mpt;\n \n@@ -376,10 +399,6 @@ struct var_ann_d GTY(())\n   /* If this variable is a structure, this fields holds an array\n      of symbols representing each of the fields of the structure.  */\n   VEC(tree,gc) *subvars;\n-\n-  /* Mask of values saying the reasons why this variable has escaped\n-     the function.  */\n-  unsigned int escape_mask;\n };\n \n /* Container for variable annotation used by hashtable for annotations for\n@@ -1033,25 +1052,6 @@ enum move_pos\n extern enum move_pos movement_possibility (tree);\n char *get_lsm_tmp_name (tree, unsigned);\n \n-/* The reasons a variable may escape a function.  */\n-enum escape_type \n-{\n-  NO_ESCAPE = 0,\t\t\t/* Doesn't escape.  */\n-  ESCAPE_STORED_IN_GLOBAL = 1 << 1,\n-  ESCAPE_TO_ASM = 1 << 2,\t\t/* Passed by address to an assembly\n-\t\t\t\t\t   statement.  */\n-  ESCAPE_TO_CALL = 1 << 3,\t\t/* Escapes to a function call.  */\n-  ESCAPE_BAD_CAST = 1 << 4,\t\t/* Cast from pointer to integer */\n-  ESCAPE_TO_RETURN = 1 << 5,\t\t/* Returned from function.  */\n-  ESCAPE_TO_PURE_CONST = 1 << 6,\t/* Escapes to a pure or constant\n-\t\t\t\t\t   function call.  */\n-  ESCAPE_IS_GLOBAL = 1 << 7,\t\t/* Is a global variable.  */\n-  ESCAPE_IS_PARM = 1 << 8,\t\t/* Is an incoming function argument.  */\n-  ESCAPE_UNKNOWN = 1 << 9\t\t/* We believe it escapes for\n-\t\t\t\t\t   some reason not enumerated\n-\t\t\t\t\t   above.  */\n-};\n-\n /* In tree-flow-inline.h  */\n static inline bool is_call_clobbered (const_tree);\n static inline void mark_call_clobbered (tree, unsigned int);"}]}