{"sha": "7e2791428f91a88bfe3762fa1456f435fc25e2b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyNzkxNDI4ZjkxYTg4YmZlMzc2MmZhMTQ1NmY0MzVmYzI1ZTJiMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-14T00:00:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-14T00:00:27Z"}, "message": "re PR fortran/39865 (ICE in gfc_conv_scalarized_array_ref)\n\n\tPR fortran/39865\n\t* io.c (resolve_tag_format): CHARACTER array in FMT= argument\n\tisn't an extension.  Reject non-CHARACTER array element of\n\tassumed shape or pointer or assumed size array.\n\t* trans-array.c (array_parameter_size): New function.\n\t(gfc_conv_array_parameter): Add size argument.  Call\n\tarray_parameter_size if it is non-NULL.\n\t* trans-array.h (gfc_conv_array_parameter): Adjust prototype.\n\t* trans-expr.c (gfc_conv_function_call, gfc_trans_arrayfunc_assign):\n\tAdjust callers.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_loc): Likewise.\n\t* trans-io.c (gfc_convert_array_to_string): Rewritten.\n\n\t* gfortran.dg/pr39865.f90: New test.\n\t* gfortran.dg/hollerith.f90: Don't expect errors for CHARACTER\n\tarrays in FMT=.\n\t* gfortran.dg/hollerith_f95.f90: Likewise.\n\t* gfortran.dg/hollerith6.f90: New test.\n\t* gfortran.dg/hollerith7.f90: New test.\n\nFrom-SVN: r147507", "tree": {"sha": "939aa9b645af6be87061269b8b1cd513bd796d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939aa9b645af6be87061269b8b1cd513bd796d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2791428f91a88bfe3762fa1456f435fc25e2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2791428f91a88bfe3762fa1456f435fc25e2b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2791428f91a88bfe3762fa1456f435fc25e2b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2791428f91a88bfe3762fa1456f435fc25e2b0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00b0c19b4bbfa483925a177ed3e6ce2e1f42444b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b0c19b4bbfa483925a177ed3e6ce2e1f42444b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b0c19b4bbfa483925a177ed3e6ce2e1f42444b"}], "stats": {"total": 391, "additions": 311, "deletions": 80}, "files": [{"sha": "db5f3731722016aeab09821a319598a4b5a77ddb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -1,3 +1,18 @@\n+2009-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/39865\n+\t* io.c (resolve_tag_format): CHARACTER array in FMT= argument\n+\tisn't an extension.  Reject non-CHARACTER array element of\n+\tassumed shape or pointer or assumed size array.\n+\t* trans-array.c (array_parameter_size): New function.\n+\t(gfc_conv_array_parameter): Add size argument.  Call\n+\tarray_parameter_size if it is non-NULL.\n+\t* trans-array.h (gfc_conv_array_parameter): Adjust prototype.\n+\t* trans-expr.c (gfc_conv_function_call, gfc_trans_arrayfunc_assign):\n+\tAdjust callers.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_loc): Likewise.\n+\t* trans-io.c (gfc_convert_array_to_string): Rewritten.\n+\n 2009-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.h (gfc_code): Rename struct member expr to expr1."}, {"sha": "c902257f095fbe6c66a3d17385d2fb4f13feeb4f", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -1,5 +1,5 @@\n /* Deal with I/O statements & related stuff.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -1234,8 +1234,11 @@ resolve_tag_format (const gfc_expr *e)\n   /* If e's rank is zero and e is not an element of an array, it should be\n      of integer or character type.  The integer variable should be\n      ASSIGNED.  */\n-  if (e->symtree == NULL || e->symtree->n.sym->as == NULL\n-      || e->symtree->n.sym->as->rank == 0)\n+  if (e->rank == 0\n+      && (e->expr_type != EXPR_VARIABLE\n+\t  || e->symtree == NULL\n+\t  || e->symtree->n.sym->as == NULL\n+\t  || e->symtree->n.sym->as->rank == 0))\n     {\n       if (e->ts.type != BT_CHARACTER && e->ts.type != BT_INTEGER)\n \t{\n@@ -1266,20 +1269,34 @@ resolve_tag_format (const gfc_expr *e)\n       return SUCCESS;\n     }\n \n-  /* If rank is nonzero, we allow the type to be character under GFC_STD_GNU\n-     and other type under GFC_STD_LEGACY. It may be assigned an Hollerith\n-     constant.  */\n-  if (e->ts.type == BT_CHARACTER)\n-    {\n-      if (gfc_notify_std (GFC_STD_GNU, \"Extension: Character array \"\n-\t\t\t  \"in FORMAT tag at %L\", &e->where) == FAILURE)\n-\treturn FAILURE;\n-    }\n-  else\n+  /* If rank is nonzero and type is not character, we allow it under GFC_STD_LEGACY.\n+     It may be assigned an Hollerith constant.  */\n+  if (e->ts.type != BT_CHARACTER)\n     {\n       if (gfc_notify_std (GFC_STD_LEGACY, \"Extension: Non-character \"\n \t\t\t  \"in FORMAT tag at %L\", &e->where) == FAILURE)\n \treturn FAILURE;\n+\n+      if (e->rank == 0 && e->symtree->n.sym->as->type == AS_ASSUMED_SHAPE)\n+\t{\n+\t  gfc_error (\"Non-character assumed shape array element in FORMAT\"\n+\t\t     \" tag at %L\", &e->where);\n+\t  return FAILURE;\n+\t}\n+\n+      if (e->rank == 0 && e->symtree->n.sym->as->type == AS_ASSUMED_SIZE)\n+\t{\n+\t  gfc_error (\"Non-character assumed size array element in FORMAT\"\n+\t\t     \" tag at %L\", &e->where);\n+\t  return FAILURE;\n+\t}\n+\n+      if (e->rank == 0 && e->symtree->n.sym->attr.pointer)\n+\t{\n+\t  gfc_error (\"Non-character pointer array element in FORMAT tag at %L\",\n+\t\t     &e->where);\n+\t  return FAILURE;\n+\t}\n     }\n \n   return SUCCESS;"}, {"sha": "f4276ca133c584b24dc24ce67bb89d78eb8ae967", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -5339,13 +5339,41 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n   gfc_cleanup_loop (&loop);\n }\n \n+/* Helper function for gfc_conv_array_parameter if array size needs to be\n+   computed.  */\n+\n+static void\n+array_parameter_size (tree desc, gfc_expr *expr, tree *size)\n+{\n+  tree elem;\n+  if (GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n+    *size = GFC_TYPE_ARRAY_SIZE (TREE_TYPE (desc));\n+  else if (expr->rank > 1)\n+    *size = build_call_expr (gfor_fndecl_size0, 1,\n+\t\t\t     gfc_build_addr_expr (NULL, desc));\n+  else\n+    {\n+      tree ubound = gfc_conv_descriptor_ubound (desc, gfc_index_zero_node);\n+      tree lbound = gfc_conv_descriptor_lbound (desc, gfc_index_zero_node);\n+\n+      *size = fold_build2 (MINUS_EXPR, gfc_array_index_type, ubound, lbound);\n+      *size = fold_build2 (PLUS_EXPR, gfc_array_index_type, *size,\n+\t\t\t   gfc_index_one_node);\n+      *size = fold_build2 (MAX_EXPR, gfc_array_index_type, *size,\n+\t\t\t   gfc_index_zero_node);\n+    }\n+  elem = TYPE_SIZE_UNIT (gfc_get_element_type (TREE_TYPE (desc)));\n+  *size = fold_build2 (MULT_EXPR, gfc_array_index_type, *size,\n+\t\t       fold_convert (gfc_array_index_type, elem));\n+}\n \n /* Convert an array for passing as an actual parameter.  */\n /* TODO: Optimize passing g77 arrays.  */\n \n void\n gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n-\t\t\t  const gfc_symbol *fsym, const char *proc_name)\n+\t\t\t  const gfc_symbol *fsym, const char *proc_name,\n+\t\t\t  tree *size)\n {\n   tree ptr;\n   tree desc;\n@@ -5394,17 +5422,20 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n             se->expr = tmp;\n           else\n \t    se->expr = gfc_build_addr_expr (NULL_TREE, tmp);\n+\t  if (size)\n+\t    array_parameter_size (tmp, expr, size);\n \t  return;\n         }\n       if (sym->attr.allocatable)\n         {\n \t  if (sym->attr.dummy || sym->attr.result)\n \t    {\n \t      gfc_conv_expr_descriptor (se, expr, ss);\n-\t      se->expr = gfc_conv_array_data (se->expr);\n+\t      tmp = se->expr;\n \t    }\n-\t  else\n-\t    se->expr = gfc_conv_array_data (tmp);\n+\t  if (size)\n+\t    array_parameter_size (tmp, expr, size);\n+\t  se->expr = gfc_conv_array_data (tmp);\n           return;\n         }\n     }\n@@ -5413,6 +5444,8 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n     {\n       /* Result of the enclosing function.  */\n       gfc_conv_expr_descriptor (se, expr, ss);\n+      if (size)\n+\tarray_parameter_size (se->expr, expr, size);\n       se->expr = gfc_build_addr_expr (NULL_TREE, se->expr);\n \n       if (g77 && TREE_TYPE (TREE_TYPE (se->expr)) != NULL_TREE\n@@ -5426,6 +5459,9 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n       /* Every other type of array.  */\n       se->want_pointer = 1;\n       gfc_conv_expr_descriptor (se, expr, ss);\n+      if (size)\n+\tarray_parameter_size (build_fold_indirect_ref (se->expr),\n+\t\t\t\t  expr, size);\n     }\n \n   /* Deallocate the allocatable components of structures that are"}, {"sha": "3f8809d84c60bd51a5779d1138099dfb11870380", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -106,7 +106,7 @@ void gfc_conv_tmp_ref (gfc_se *);\n void gfc_conv_expr_descriptor (gfc_se *, gfc_expr *, gfc_ss *);\n /* Convert an array for passing as an actual function parameter.  */\n void gfc_conv_array_parameter (gfc_se *, gfc_expr *, gfc_ss *, int,\n-\t\t\t       const gfc_symbol *, const char *);\n+\t\t\t       const gfc_symbol *, const char *, tree *);\n /* Evaluate and transpose a matrix expression.  */\n void gfc_conv_array_transpose (gfc_se *, gfc_expr *);\n "}, {"sha": "cf17598c9f64b1e80deecf4348766988225757fc", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -2424,7 +2424,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      f = f || !sym->attr.always_explicit;\n \t  \n \t      argss = gfc_walk_expr (arg->expr);\n-\t      gfc_conv_array_parameter (se, arg->expr, argss, f, NULL, NULL);\n+\t      gfc_conv_array_parameter (se, arg->expr, argss, f,\n+\t\t\t\t\tNULL, NULL, NULL);\n \t    }\n \n \t  /* TODO -- the following two lines shouldn't be necessary, but\n@@ -2676,7 +2677,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\tfsym ? fsym->attr.intent : INTENT_INOUT);\n \t      else\n \t        gfc_conv_array_parameter (&parmse, e, argss, f, fsym,\n-\t\t\t\t\t  sym->name);\n+\t\t\t\t\t  sym->name, NULL);\n \n               /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is \n                  allocated on entry, it must be deallocated.  */\n@@ -4352,7 +4353,7 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n   gfc_start_block (&se.pre);\n   se.want_pointer = 1;\n \n-  gfc_conv_array_parameter (&se, expr1, ss, 0, NULL, NULL);\n+  gfc_conv_array_parameter (&se, expr1, ss, 0, NULL, NULL, NULL);\n \n   se.direct_byref = 1;\n   se.ss = gfc_walk_expr (expr2);"}, {"sha": "33cc7f569a3a6e90fbbade88bb715701d7d64156", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -4394,7 +4394,7 @@ gfc_conv_intrinsic_loc (gfc_se * se, gfc_expr * expr)\n   if (ss == gfc_ss_terminator)\n     gfc_conv_expr_reference (se, arg_expr);\n   else\n-    gfc_conv_array_parameter (se, arg_expr, ss, 1, NULL, NULL); \n+    gfc_conv_array_parameter (se, arg_expr, ss, 1, NULL, NULL, NULL);\n   se->expr= convert (gfc_get_int_type (gfc_index_integer_kind), se->expr);\n    \n   /* Create a temporary variable for loc return value.  Without this, "}, {"sha": "24f156ef0aaf2ec744918891f090d9446c0cf411", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 39, "deletions": 45, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -567,65 +567,57 @@ set_parameter_ref (stmtblock_t *block, stmtblock_t *postblock,\n \n /* Given an array expr, find its address and length to get a string. If the\n    array is full, the string's address is the address of array's first element\n-   and the length is the size of the whole array. If it is an element, the\n+   and the length is the size of the whole array.  If it is an element, the\n    string's address is the element's address and the length is the rest size of\n-   the array.\n-*/\n+   the array.  */\n \n static void\n gfc_convert_array_to_string (gfc_se * se, gfc_expr * e)\n {\n-  tree tmp;\n-  tree array;\n-  tree type;\n   tree size;\n-  int rank;\n-  gfc_symbol *sym;\n-\n-  sym = e->symtree->n.sym;\n-  rank = sym->as->rank - 1;\n \n-  if (e->ref->u.ar.type == AR_FULL)\n-    {\n-      se->expr = gfc_get_symbol_decl (sym);\n-      se->expr = gfc_conv_array_data (se->expr);\n-    }\n-  else\n+  if (e->rank == 0)\n     {\n+      tree type, array, tmp;\n+      gfc_symbol *sym;\n+      int rank;\n+\n+      /* If it is an element, we need its address and size of the rest.  */\n+      gcc_assert (e->expr_type == EXPR_VARIABLE);\n+      gcc_assert (e->ref->u.ar.type == AR_ELEMENT);\n+      sym = e->symtree->n.sym;\n+      rank = sym->as->rank - 1;\n       gfc_conv_expr (se, e);\n-    }\n-\n-  array = sym->backend_decl;\n-  type = TREE_TYPE (array);\n \n-  if (GFC_ARRAY_TYPE_P (type))\n-    size = GFC_TYPE_ARRAY_SIZE (type);\n-  else\n-    {\n-      gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n-      size = gfc_conv_array_stride (array, rank);\n-      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\tgfc_conv_array_ubound (array, rank),\n-\t\tgfc_conv_array_lbound (array, rank));\n-      tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type, tmp,\n-\t\tgfc_index_one_node);\n-      size = fold_build2 (MULT_EXPR, gfc_array_index_type, tmp, size);      \n-    }\n+      array = sym->backend_decl;\n+      type = TREE_TYPE (array);\n \n-  gcc_assert (size);\n+      if (GFC_ARRAY_TYPE_P (type))\n+\tsize = GFC_TYPE_ARRAY_SIZE (type);\n+      else\n+\t{\n+\t  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type));\n+\t  size = gfc_conv_array_stride (array, rank);\n+\t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n+\t\t\t     gfc_conv_array_ubound (array, rank),\n+\t\t\t     gfc_conv_array_lbound (array, rank));\n+\t  tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type, tmp,\n+\t\t\t     gfc_index_one_node);\n+\t  size = fold_build2 (MULT_EXPR, gfc_array_index_type, tmp, size);\n+\t}\n+      gcc_assert (size);\n \n-  /* If it is an element, we need the its address and size of the rest.  */\n-  if (e->ref->u.ar.type == AR_ELEMENT)\n-    {\n       size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n-\t\tTREE_OPERAND (se->expr, 1));\n+\t\t\t  TREE_OPERAND (se->expr, 1));\n       se->expr = gfc_build_addr_expr (NULL_TREE, se->expr);\n+      tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n+      size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n+\t\t\t  fold_convert (gfc_array_index_type, tmp));\n+      se->string_length = fold_convert (gfc_charlen_type_node, size);\n+      return;\n     }\n \n-  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n-  size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t      fold_convert (gfc_array_index_type, tmp));\n-\n+  gfc_conv_array_parameter (se, e, gfc_walk_expr (e), 1, NULL, NULL, &size);\n   se->string_length = fold_convert (gfc_charlen_type_node, size);\n }\n \n@@ -654,7 +646,9 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n \t\t     var, p->field_len, NULL_TREE);\n \n   /* Integer variable assigned a format label.  */\n-  if (e->ts.type == BT_INTEGER && e->symtree->n.sym->attr.assign == 1)\n+  if (e->ts.type == BT_INTEGER\n+      && e->rank == 0\n+      && e->symtree->n.sym->attr.assign == 1)\n     {\n       char * msg;\n       tree cond;\n@@ -680,7 +674,7 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n       if (e->ts.type == BT_CHARACTER && e->rank == 0)\n \tgfc_conv_expr (&se, e);\n       /* Array assigned Hollerith constant or character array.  */\n-      else if (e->symtree && (e->symtree->n.sym->as->rank > 0))\n+      else if (e->rank > 0 || (e->symtree && e->symtree->n.sym->as->rank > 0))\n \tgfc_convert_array_to_string (&se, e);\n       else\n \tgcc_unreachable ();"}, {"sha": "fe0bb0042d6a355d7e129b08a3f155645b39c3bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -1,3 +1,13 @@\n+2009-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/39865\n+\t* gfortran.dg/pr39865.f90: New test.\n+\t* gfortran.dg/hollerith.f90: Don't expect errors for CHARACTER\n+\tarrays in FMT=.\n+\t* gfortran.dg/hollerith_f95.f90: Likewise.\n+\t* gfortran.dg/hollerith6.f90: New test.\n+\t* gfortran.dg/hollerith7.f90: New test.\n+\n 2009-05-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR cpp/36674"}, {"sha": "21cbf66bdf6dc0ea3db0a776148f20df48153273", "filename": "gcc/testsuite/gfortran.dg/hollerith.f90", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -99,10 +99,4 @@ subroutine test (h)\n \n ! { dg-warning \"Non-character in FORMAT tag\" \"\" { target *-*-* } 39 }\n \n-! { dg-warning \"Character array in FORMAT tag\" \"\" { target *-*-* } 43 }\n-\n-! { dg-warning \"Character array in FORMAT tag\" \"\" { target *-*-* } 45 }\n-\n-! { dg-warning \"Character array in FORMAT tag\" \"\" { target *-*-* } 47 }\n-\n ! { dg-warning \"Hollerith constant\" \"\" { target *-*-* } 51 }"}, {"sha": "93e857dd5119bfb83767b0378073c70043a89860", "filename": "gcc/testsuite/gfortran.dg/hollerith6.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith6.f90?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -0,0 +1,35 @@\n+! PR fortran/39865\n+! { dg-do run }\n+\n+subroutine foo (a)\n+  integer(kind=4) :: a(1, 3)\n+  character(len=40) :: t\n+  write (t, fmt=a(1,2)) 1, 2, 3, 4, 5, 6, 7, 8\n+  if (t .ne. '   1   2   3   4   5   6   7   8') call abort\n+end subroutine foo\n+  interface\n+    subroutine foo (a)\n+      integer(kind=4) :: a(1, 3)\n+    end subroutine foo\n+  end interface\n+  integer(kind=4) :: b(1,3)\n+  character(len=40) :: t\n+  b(1,1) = 4HXXXX\n+  b(1,2) = 4H (8I\n+  b(1,3) = 2H4)\n+  write (t, fmt=b(1,2)) 1, 2, 3, 4, 5, 6, 7, 8\n+  if (t .ne. '   1   2   3   4   5   6   7   8') call abort\n+  call foo (b)\n+end\n+\n+! { dg-warning \"Non-character in FORMAT tag\" \"FMT\" { target *-*-* } 7 }\n+! { dg-warning \"Non-character in FORMAT tag\" \"FMT\" { target *-*-* } 20 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 17 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 17 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 18 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 18 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 19 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 19 }"}, {"sha": "8e2fb4fec12b92d705a1fd8bc886d1ad6ba33d6e", "filename": "gcc/testsuite/gfortran.dg/hollerith7.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith7.f90?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -0,0 +1,52 @@\n+! PR fortran/39865\n+! { dg-do compile }\n+\n+subroutine foo (a)\n+  integer(kind=4), target :: a(1:, 1:)\n+  integer(kind=4), pointer :: b(:, :)\n+  b => a\n+  write (*, fmt=a(1,2)) 1, 2, 3, 4, 5, 6, 7, 8\n+  write (*, fmt=b(1,2)) 1, 2, 3, 4, 5, 6, 7, 8\n+end subroutine foo\n+subroutine bar (a, b)\n+  character :: b(2,*)\n+  integer :: a(*)\n+  write (*, fmt=b) 1, 2, 3\n+  write (*, fmt=a) 1, 2, 3\n+  write (*, fmt=a(2)) 1, 2, 3\n+end subroutine\n+  interface\n+    subroutine foo (a)\n+      integer(kind=4), target :: a(:, :)\n+    end subroutine foo\n+  end interface\n+  integer(kind=4) :: a(2, 3)\n+  a = 4HXXXX\n+  a(2,2) = 4H (8I\n+  a(1,3) = 2H4)\n+  a(2,3) = 1H \n+  call foo (a(2:2,:))\n+end\n+\n+! { dg-warning \"Non-character in FORMAT tag\" \"FMT\" { target *-*-* } 8 }\n+! { dg-error \"Non-character assumed shape array element in FORMAT tag\" \"element\" { target *-*-* } 8 }\n+\n+! { dg-warning \"Non-character in FORMAT tag\" \"FMT\" { target *-*-* } 9 }\n+! { dg-error \"Non-character pointer array element in FORMAT tag\" \"element\" { target *-*-* } 9 }\n+\n+! { dg-error \"reference to the assumed size array\" \"assumed-size\" { target *-*-* } 14 }\n+! { dg-error \"reference to the assumed size array\" \"assumed-size\" { target *-*-* } 15 }\n+! { dg-warning \"Non-character in FORMAT tag\" \"FMT\" { target *-*-* } 16 }\n+! { dg-error \"Non-character assumed size array element in FORMAT tag\" \"element\" { target *-*-* } 16 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 24 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 24 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 25 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 25 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 26 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 26 }\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 27 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 27 }"}, {"sha": "4d7fda8c72e537be87660fd5ca31ebfc2e8116f5", "filename": "gcc/testsuite/gfortran.dg/hollerith_f95.f90", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_f95.f90?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -91,10 +91,3 @@ subroutine test (h)\n ! { dg-error \"Non-character in FORMAT tag\" \"\" { target *-*-* } 38 }\n \n ! { dg-error \"Non-character in FORMAT tag\" \"\" { target *-*-* } 40 }\n-\n-! { dg-error \"Character array in FORMAT tag\" \"\" { target *-*-* } 44 }\n-\n-! { dg-error \"Character array in FORMAT tag\" \"\" { target *-*-* } 46 }\n-\n-! { dg-error \"Character array in FORMAT tag\" \"\" { target *-*-* } 48 }\n-"}, {"sha": "fac34367422a50a048578348a792493694d476b2", "filename": "gcc/testsuite/gfortran.dg/pr39865.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39865.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2791428f91a88bfe3762fa1456f435fc25e2b0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39865.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39865.f90?ref=7e2791428f91a88bfe3762fa1456f435fc25e2b0", "patch": "@@ -0,0 +1,84 @@\n+! PR fortran/39865\n+! { dg-do run }\n+\n+subroutine f1 (a)\n+  character(len=1) :: a(7:)\n+  character(len=12) :: b\n+  character(len=1) :: c(2:10)\n+  write (b, a) 'Hell', 'o wo', 'rld!'\n+  if (b .ne. 'Hello world!') call abort\n+  write (b, a(:)) 'hell', 'o Wo', 'rld!'\n+  if (b .ne. 'hello World!') call abort\n+  write (b, a(8:)) 'Hell', 'o wo', 'rld!'\n+  if (b .ne. 'Hello world!') call abort\n+  c(2) = ' '\n+  c(3) = '('\n+  c(4) = '3'\n+  c(5) = 'A'\n+  c(6) = '4'\n+  c(7) = ')'\n+  write (b, c) 'hell', 'o Wo', 'rld!'\n+  if (b .ne. 'hello World!') call abort\n+  write (b, c(:)) 'Hell', 'o wo', 'rld!'\n+  if (b .ne. 'Hello world!') call abort\n+  write (b, c(3:)) 'hell', 'o Wo', 'rld!'\n+  if (b .ne. 'hello World!') call abort\n+end subroutine f1\n+\n+subroutine f2 (a)\n+  character(len=1) :: a(10:,20:)\n+  character(len=12) :: b\n+  write (b, a) 'Hell', 'o wo', 'rld!'\n+  if (b .ne. 'Hello world!') call abort\n+  write (b, a) 'hell', 'o Wo', 'rld!'\n+  if (b .ne. 'hello World!') call abort\n+end subroutine f2\n+\n+function f3 ()\n+  character(len=1) :: f3(5)\n+  f3(1) = '('\n+  f3(2) = '3'\n+  f3(3) = 'A'\n+  f3(4) = '4'\n+  f3(5) = ')'\n+end function f3\n+\n+  interface\n+    subroutine f1 (a)\n+      character(len=1) :: a(:)\n+    end\n+  end interface\n+  interface\n+    subroutine f2 (a)\n+      character(len=1) :: a(:,:)\n+    end\n+  end interface\n+  interface\n+    function f3 ()\n+      character(len=1) :: f3(5)\n+    end\n+  end interface\n+  integer :: i, j\n+  character(len=1) :: e (6, 7:9), f (3,2), g (10)\n+  character(len=12) :: b\n+  e = 'X'\n+  e(2,8) = ' '\n+  e(3,8) = '('\n+  e(4,8) = '3'\n+  e(2,9) = 'A'\n+  e(3,9) = '4'\n+  e(4,9) = ')'\n+  f = e(2:4,8:9)\n+  g = 'X'\n+  g(2) = ' '\n+  g(3) = '('\n+  g(4) = '3'\n+  g(5) = 'A'\n+  g(6) = '4'\n+  g(7) = ')'\n+  call f1 (g(2:7))\n+  call f2 (f)\n+  call f2 (e(2:4,8:9))\n+  write (b, f3 ()) 'Hell', 'o wo', 'rld!'\n+  if (b .ne. 'Hello world!') call abort\n+end"}]}