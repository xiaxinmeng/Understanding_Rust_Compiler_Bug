{"sha": "e4320d7da0bc4987254988c321b0e8d8c90d0e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzMjBkN2RhMGJjNDk4NzI1NDk4OGMzMjFiMGU4ZDhjOTBkMGU1NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-11-02T16:59:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-11-02T16:59:30Z"}, "message": "fmaq.c (fmaq): Merge from GLIBC.\n\n2012-11-01  Tobias Burnus  <burnus@net-b.de>\n            Joseph Myers  <joseph@codesourcery.com>\n\n        * math/fmaq.c (fmaq): Merge from GLIBC. Handle cases\n        with small x * y using scaling, not as x * y + z.\n        * math/lgammaq.c (lgammaq): Fix signgam handling.\n\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r193099", "tree": {"sha": "3926f14e41a87d8ec72a6c34a19e95e7035654f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3926f14e41a87d8ec72a6c34a19e95e7035654f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4320d7da0bc4987254988c321b0e8d8c90d0e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4320d7da0bc4987254988c321b0e8d8c90d0e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4320d7da0bc4987254988c321b0e8d8c90d0e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4320d7da0bc4987254988c321b0e8d8c90d0e55/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2a1b46987236a338f9cd96fa42b64af9ffb5a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a1b46987236a338f9cd96fa42b64af9ffb5a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a1b46987236a338f9cd96fa42b64af9ffb5a80"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "f1b4ce9b816ef1bfe556525e0efa103682bd81bd", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=e4320d7da0bc4987254988c321b0e8d8c90d0e55", "patch": "@@ -1,3 +1,10 @@\n+2012-11-01  Tobias Burnus  <burnus@net-b.de>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* math/fmaq.c (fmaq): Merge from GLIBC. Handle cases\n+\twith small x * y using scaling, not as x * y + z.\n+\t* math/lgammaq.c (lgammaq): Fix signgam handling.\n+\n 2012-11-01  Tobias Burnus  <burnus@net-b.de>\n \n \t* Makefile.am (libquadmath_la_SOURCES): Add new math/* files."}, {"sha": "e5a9d37627d6ef4cf87dbbd100a5bfcbeaae5a4f", "filename": "libquadmath/math/fmaq.c", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2Fmath%2Ffmaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2Fmath%2Ffmaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaq.c?ref=e4320d7da0bc4987254988c321b0e8d8c90d0e55", "patch": "@@ -73,6 +73,37 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t  || u.ieee.exponent + v.ieee.exponent\n \t     < IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG - 2)\n \treturn x * y + z;\n+      /* If x * y is less than 1/4 of FLT128_DENORM_MIN, neither the\n+\t result nor whether there is underflow depends on its exact\n+\t value, only on its sign.  */\n+      if (u.ieee.exponent + v.ieee.exponent\n+\t  < IEEE854_FLT128_DOUBLE_BIAS - FLT128_MANT_DIG - 2)\n+\t{\n+\t  int neg = u.ieee.negative ^ v.ieee.negative;\n+\t  __float128 tiny = neg ? -0x1p-16494L : 0x1p-16494L;\n+\t  if (w.ieee.exponent >= 3)\n+\t    return tiny + z;\n+\t  /* Scaling up, adding TINY and scaling down produces the\n+\t     correct result, because in round-to-nearest mode adding\n+\t     TINY has no effect and in other modes double rounding is\n+\t     harmless.  But it may not produce required underflow\n+\t     exceptions.  */\n+\t  v.value = z * 0x1p114L + tiny;\n+\t  if (TININESS_AFTER_ROUNDING\n+\t      ? v.ieee.exponent < 115\n+\t      : (w.ieee.exponent == 0\n+\t\t || (w.ieee.exponent == 1\n+\t\t     && w.ieee.negative != neg\n+\t\t     && w.ieee.mantissa3 == 0\n+\t\t     && w.ieee.mantissa2 == 0\n+\t\t     && w.ieee.mantissa1 == 0\n+\t\t     && w.ieee.mantissa0 == 0)))\n+\t    {\n+\t      volatile __float128 force_underflow = x * y;\n+\t      (void) force_underflow;\n+\t    }\n+\t  return v.value * 0x1p-114L;\n+\t}\n       if (u.ieee.exponent + v.ieee.exponent\n \t  >= 0x7fff + IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG)\n \t{\n@@ -228,17 +259,17 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t for proper rounding.  */\n       if (v.ieee.exponent == 226)\n \t{\n-         /* If the exponent would be in the normal range when\n-            rounding to normal precision with unbounded exponent\n-            range, the exact result is known and spurious underflows\n-            must be avoided on systems detecting tininess after\n-            rounding.  */\n-         if (TININESS_AFTER_ROUNDING)\n-           {\n-             w.value = a1 + u.value;\n-             if (w.ieee.exponent == 227)\n-               return w.value * 0x1p-226L;\n-           }\n+\t  /* If the exponent would be in the normal range when\n+\t     rounding to normal precision with unbounded exponent\n+\t     range, the exact result is known and spurious underflows\n+\t     must be avoided on systems detecting tininess after\n+\t     rounding.  */\n+\t  if (TININESS_AFTER_ROUNDING)\n+\t    {\n+\t      w.value = a1 + u.value;\n+\t      if (w.ieee.exponent == 227)\n+\t\treturn w.value * 0x1p-226L;\n+\t    }\n \t  /* v.ieee.mant_low & 2 is LSB bit of the result before rounding,\n \t     v.ieee.mant_low & 1 is the round bit and j is our sticky\n \t     bit. */"}, {"sha": "485939af1b43f972631b62603f4dd62214c49f58", "filename": "libquadmath/math/lgammaq.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2Fmath%2Flgammaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4320d7da0bc4987254988c321b0e8d8c90d0e55/libquadmath%2Fmath%2Flgammaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flgammaq.c?ref=e4320d7da0bc4987254988c321b0e8d8c90d0e55", "patch": "@@ -759,19 +759,18 @@ lgammaq (__float128 x)\n {\n   __float128 p, q, w, z, nx;\n   int i, nn;\n-  int sign;\n+\n+  signgam = 1;\n \n   if (! finiteq (x))\n     return x * x;\n \n   if (x == 0.0Q)\n     {\n       if (signbitq (x))\n-\tsign = -1;\n+\tsigngam = -1;\n     }\n \n-  signgam = sign;\n-\n   if (x < 0.0Q)\n     {\n       q = -x;\n@@ -780,20 +779,18 @@ lgammaq (__float128 x)\n \treturn (one / (p - p));\n       i = p;\n       if ((i & 1) == 0)\n-\tsign = -1;\n+\tsigngam = -1;\n       else\n-\tsign = 1;\n+\tsigngam = 1;\n       z = q - p;\n       if (z > 0.5Q)\n \t{\n \t  p += 1.0Q;\n \t  z = p - q;\n \t}\n       z = q * sinq (PIQ * z);\n-      signgam = sign;\n-\n       if (z == 0.0Q)\n-\treturn (sign * huge * huge);\n+\treturn (signgam * huge * huge);\n       w = lgammaq (q);\n       z = logq (PIQ / z) - w;\n       return (z);\n@@ -1025,7 +1022,7 @@ lgammaq (__float128 x)\n     }\n \n   if (x > MAXLGM)\n-    return (sign * huge * huge);\n+    return (signgam * huge * huge);\n \n   q = ls2pi - x;\n   q = (x - 0.5Q) * logq (x) + q;"}]}