{"sha": "d173e68599639b825a1e12884fa35c00a024bee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3M2U2ODU5OTYzOWI4MjVhMWUxMjg4NGZhMzVjMDBhMDI0YmVlNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-29T00:34:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-29T00:34:09Z"}, "message": "re PR c++/12850 (memory consumption for heavy template instantiations tripled since 3.3)\n\n\n\tPR c++/12850\n\t* cgraph.c (cgraph_remove_node): Clear out saved/insns/arguments and\n\tinitial pointers.\n\t* cgraphunit.c (cgraph_finalize_function): Clear out DECL_SAVED_INSNS\n\tfor functions that will be only inlined.\n\t(cgraph_mark_function_to_output): Likewise.\n\t(cgraph_expand_function): Sanity check that DECL_DEFER_OUTPUT is clear;\n\tdo not clear function body.\n\t* tree-optimize.c (clear_decl_rtl): Use decl_function_context.\n\t(tree_rest_of_compilation): Reorganize the logic releasing function\n\tbody to use callgraph datastructure.\n\nFrom-SVN: r76822", "tree": {"sha": "66950d896c4e79e9db825a8c670c14a160a7f554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66950d896c4e79e9db825a8c670c14a160a7f554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d173e68599639b825a1e12884fa35c00a024bee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d173e68599639b825a1e12884fa35c00a024bee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d173e68599639b825a1e12884fa35c00a024bee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d173e68599639b825a1e12884fa35c00a024bee4/comments", "author": null, "committer": null, "parents": [{"sha": "ba9d552e03a1b1d0daa792d157d5268020300afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9d552e03a1b1d0daa792d157d5268020300afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9d552e03a1b1d0daa792d157d5268020300afc"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "aa89542097549f7506e34332b8be426cf2a8e203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d173e68599639b825a1e12884fa35c00a024bee4", "patch": "@@ -1,3 +1,17 @@\n+2004-01-29  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/12850\n+\t* cgraph.c (cgraph_remove_node): Clear out saved/insns/arguments and\n+\tinitial pointers.\n+\t* cgraphunit.c (cgraph_finalize_function): Clear out DECL_SAVED_INSNS\n+\tfor functions that will be only inlined.\n+\t(cgraph_mark_function_to_output): Likewise.\n+\t(cgraph_expand_function): Sanity check that DECL_DEFER_OUTPUT is clear;\n+\tdo not clear function body.\n+\t* tree-optimize.c (clear_decl_rtl): Use decl_function_context.\n+\t(tree_rest_of_compilation): Reorganize the logic releasing function\n+\tbody to use callgraph datastructure.\n+\n 2004-01-28  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md: Change predicate of a peephole2 pattern from reg_or_0_operand"}, {"sha": "e9d0b243bc4cf1458bb0ed05382df5c382f8f7cc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=d173e68599639b825a1e12884fa35c00a024bee4", "patch": "@@ -235,6 +235,9 @@ cgraph_remove_node (struct cgraph_node *node)\n   if (node->next)\n     node->next->previous = node->previous;\n   DECL_SAVED_TREE (node->decl) = NULL;\n+  DECL_SAVED_INSNS (node->decl) = NULL;\n+  DECL_ARGUMENTS (node->decl) = NULL;\n+  DECL_INITIAL (node->decl) = error_mark_node;\n   slot = \n     htab_find_slot_with_hash (cgraph_hash, DECL_ASSEMBLER_NAME (node->decl),\n \t\t\t      IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME"}, {"sha": "f68bd2a34df5226033ecfb9e5bc03f596ae085d1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=d173e68599639b825a1e12884fa35c00a024bee4", "patch": "@@ -228,6 +228,11 @@ cgraph_finalize_function (tree decl, bool nested)\n   /* If we've not yet emitted decl, tell the debug info about it.  */\n   if (!TREE_ASM_WRITTEN (decl))\n     (*debug_hooks->deferred_inline_function) (decl);\n+\n+  /* We will never really output the function body, clear the SAVED_INSNS array\n+     early then.  */\n+  if (DECL_EXTERNAL (decl))\n+    DECL_SAVED_INSNS (decl) = NULL;\n }\n \n /* Walk tree and record all calls.  Called via walk_tree.  */\n@@ -476,6 +481,8 @@ cgraph_mark_functions_to_output (void)\n \t  && !TREE_ASM_WRITTEN (decl) && !node->origin\n \t  && !DECL_EXTERNAL (decl))\n \tnode->output = 1;\n+      else\n+        DECL_SAVED_INSNS (decl) = NULL;\n     }\n }\n \n@@ -525,9 +532,9 @@ cgraph_expand_function (struct cgraph_node *node)\n   /* Generate RTL for the body of DECL.  Nested functions are expanded\n      via lang_expand_decl_stmt.  */\n   (*lang_hooks.callgraph.expand_function) (decl);\n+  if (DECL_DEFER_OUTPUT (decl))\n+    abort ();\n \n-  if (!cgraph_function_possibly_inlined_p (decl))\n-    DECL_SAVED_TREE (decl) = NULL;\n   current_function_decl = NULL;\n }\n "}, {"sha": "e42fa06ef569fb1a8e5f9613d8c23d650e335ec0", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d173e68599639b825a1e12884fa35c00a024bee4/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=d173e68599639b825a1e12884fa35c00a024bee4", "patch": "@@ -65,13 +65,13 @@ clear_decl_rtl (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n     {\n     case VAR_DECL:\n       nonstatic_p = !TREE_STATIC (t) && !DECL_EXTERNAL (t);\n-      local_p = DECL_CONTEXT (t) == data;\n+      local_p = decl_function_context (t) == data;\n       break;\n \n     case PARM_DECL:\n     case LABEL_DECL:\n       nonstatic_p = true;\n-      local_p = DECL_CONTEXT (t) == data;\n+      local_p = decl_function_context (t) == data;\n       break;\n \n     case RESULT_DECL:\n@@ -205,18 +205,22 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n   walk_tree_without_duplicates (&DECL_SAVED_TREE (fndecl),\n \t\t\t\tclear_decl_rtl,\n \t\t\t\tfndecl);\n-\n-  if (DECL_SAVED_INSNS (fndecl) == 0 && !nested_p && !flag_inline_trees)\n+  if (!cgraph_function_possibly_inlined_p (fndecl))\n     {\n-      /* Stop pointing to the local nodes about to be freed.\n-\t But DECL_INITIAL must remain nonzero so we know this\n-\t was an actual function definition.\n-\t For a nested function, this is done in c_pop_function_context.\n-\t If rest_of_compilation set this to 0, leave it 0.  */\n-      if (DECL_INITIAL (fndecl) != 0)\n-\tDECL_INITIAL (fndecl) = error_mark_node;\n-\n-      DECL_ARGUMENTS (fndecl) = 0;\n+      DECL_SAVED_TREE (fndecl) = NULL;\n+      if (DECL_SAVED_INSNS (fndecl) == 0\n+\t  && !cgraph_node (fndecl)->origin)\n+\t{\n+\t  /* Stop pointing to the local nodes about to be freed.\n+\t     But DECL_INITIAL must remain nonzero so we know this\n+\t     was an actual function definition.\n+\t     For a nested function, this is done in c_pop_function_context.\n+\t     If rest_of_compilation set this to 0, leave it 0.  */\n+\t  if (DECL_INITIAL (fndecl) != 0)\n+\t    DECL_INITIAL (fndecl) = error_mark_node;\n+\n+\t  DECL_ARGUMENTS (fndecl) = 0;\n+\t}\n     }\n \n   input_location = saved_loc;"}]}