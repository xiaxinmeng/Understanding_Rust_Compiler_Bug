{"sha": "acf63f8c062cc57d127c9bc65af2b60c3548bcab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmNjNmOGMwNjJjYzU3ZDEyN2M5YmM2NWFmMmI2MGMzNTQ4YmNhYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-03-26T07:38:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:38:00Z"}, "message": "exp_aggr.adb (Replace_Type): When checking for self-reference...\n\n2008-03-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Replace_Type): When checking for self-reference, verify\n\tthat the prefix of an attribute is the type of the aggregate being\n\texpanded.\n\nFrom-SVN: r133558", "tree": {"sha": "6ea71650a49d9af81f485f4799abf29488bc4b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ea71650a49d9af81f485f4799abf29488bc4b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf63f8c062cc57d127c9bc65af2b60c3548bcab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf63f8c062cc57d127c9bc65af2b60c3548bcab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf63f8c062cc57d127c9bc65af2b60c3548bcab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf63f8c062cc57d127c9bc65af2b60c3548bcab/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b8d33ef1d3979b83e0085ab8a87b06b48399441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d33ef1d3979b83e0085ab8a87b06b48399441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8d33ef1d3979b83e0085ab8a87b06b48399441"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "c334150b84ad538c19f266c56bfc2717a33237b3", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf63f8c062cc57d127c9bc65af2b60c3548bcab/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf63f8c062cc57d127c9bc65af2b60c3548bcab/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=acf63f8c062cc57d127c9bc65af2b60c3548bcab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1990,12 +1990,11 @@ package body Exp_Aggr is\n              Selector_Name => Make_Identifier (Loc, Name_uController));\n          Set_Assignment_OK (Ref);\n \n-         --  Ada 2005 (AI-287): Give support to aggregates of limited\n-         --  types. If the type is intrinsically_limited the controller\n-         --  is limited as well. If it is tagged and limited then so is\n-         --  the controller. Otherwise an untagged type may have limited\n-         --  components without its full view being limited, so the\n-         --  controller is not limited.\n+         --  Ada 2005 (AI-287): Give support to aggregates of limited types.\n+         --  If the type is intrinsically limited the controller is limited as\n+         --  well. If it is tagged and limited then so is the controller.\n+         --  Otherwise an untagged type may have limited components without its\n+         --  full view being limited, so the controller is not limited.\n \n          if Nkind (Target) = N_Identifier then\n             Target_Type := Etype (Target);\n@@ -2016,8 +2015,8 @@ package body Exp_Aggr is\n          end if;\n \n          --  If the target has not been analyzed yet, as will happen with\n-         --  delayed expansion, use the given type (either the aggregate\n-         --  type or an ancestor) to determine limitedness.\n+         --  delayed expansion, use the given type (either the aggregate type\n+         --  or an ancestor) to determine limitedness.\n \n          if No (Target_Type) then\n             Target_Type := Typ;\n@@ -2214,8 +2213,8 @@ package body Exp_Aggr is\n                   Outer_Typ := Etype (Outer_Typ);\n                end loop;\n \n-               --  Attach it to the outer record controller to the\n-               --  external final list\n+               --  Attach it to the outer record controller to the external\n+               --  final list.\n \n                if Outer_Typ = Init_Typ then\n                   Append_List_To (L,\n@@ -2322,19 +2321,29 @@ package body Exp_Aggr is\n       end Gen_Ctrl_Actions_For_Aggr;\n \n       function Replace_Type (Expr : Node_Id) return Traverse_Result;\n-      --  If the aggregate contains a self-reference, traverse each\n-      --  expression to replace a possible self-reference with a reference\n-      --  to the proper component of the target of the assignment.\n+      --  If the aggregate contains a self-reference, traverse each expression\n+      --  to replace a possible self-reference with a reference to the proper\n+      --  component of the target of the assignment.\n \n       ------------------\n       -- Replace_Type --\n       ------------------\n \n       function Replace_Type (Expr : Node_Id) return Traverse_Result is\n       begin\n+         --  Note regarding the Root_Type test below: Aggregate components for\n+         --  self-referential types include attribute references to the current\n+         --  instance, of the form: Typ'access, etc.. These references are\n+         --  rewritten as references to the target of the aggregate: the\n+         --  left-hand side of an assignment, the entity in a declaration,\n+         --  or a temporary. Without this test, we would improperly extended\n+         --  this rewriting to attribute references whose prefix was not the\n+         --  type of the aggregate.\n+\n          if Nkind (Expr) = N_Attribute_Reference\n-           and  then Is_Entity_Name (Prefix (Expr))\n+           and then Is_Entity_Name (Prefix (Expr))\n            and then Is_Type (Entity (Prefix (Expr)))\n+           and then Root_Type (Etype (N)) = Root_Type (Entity (Prefix (Expr)))\n          then\n             if Is_Entity_Name (Lhs) then\n                Rewrite (Prefix (Expr),\n@@ -2394,7 +2403,7 @@ package body Exp_Aggr is\n \n             --     init-proc (T(tmp));  if T is constrained and\n             --     init-proc (S(tmp));  where S applies an appropriate\n-            --                           constraint if T is unconstrained\n+            --                          constraint if T is unconstrained\n \n             if Is_Entity_Name (A) and then Is_Type (Entity (A)) then\n                Ancestor_Is_Subtype_Mark := True;\n@@ -2533,7 +2542,7 @@ package body Exp_Aggr is\n \n                --  Make the assignment without usual controlled actions since\n                --  we only want the post adjust but not the pre finalize here\n-               --  Add manual adjust when necessary\n+               --  Add manual adjust when necessary.\n \n                Assign := New_List (\n                  Make_OK_Assignment_Statement (Loc,"}]}