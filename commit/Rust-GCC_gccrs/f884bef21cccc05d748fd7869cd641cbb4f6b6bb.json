{"sha": "f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4NGJlZjIxY2NjYzA1ZDc0OGZkNzg2OWNkNjQxY2JiNGY2YjZiYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-05-13T08:06:45Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-05-13T08:06:45Z"}, "message": "[Fortran] OpenMP - permit lastprivate in distribute + SIMD fixes (PR94690)\n\ngcc/fortran/\n2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR fortran/94690\n        * openmp.c (OMP_DISTRIBUTE_CLAUSES): Add OMP_CLAUSE_LASTPRIVATE.\n        (gfc_resolve_do_iterator): Skip the private handling for SIMD as\n        that is handled by ME code.\n\t* trans-openmp.c (gfc_trans_omp_do): Don't add private/lastprivate\n\tfor dovar_found == 0, unless !simple.\n\nlibgomp/\n2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR fortran/94690\n\t* testsuite/libgomp.fortran/pr66199-3.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-4.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-5.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-6.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-7.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-8.f90: New.\n\t* testsuite/libgomp.fortran/pr66199-9.f90: New.", "tree": {"sha": "ed7ca416894ca3fa773b4bb4edebb46e593bb2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed7ca416894ca3fa773b4bb4edebb46e593bb2fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d96f7b92415b7a277a87e7825efc958030e20b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d96f7b92415b7a277a87e7825efc958030e20b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d96f7b92415b7a277a87e7825efc958030e20b6"}], "stats": {"total": 494, "additions": 479, "deletions": 15}, "files": [{"sha": "9ce70f7b46130f2eda4c4bfbf254c6a3348268eb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -1,3 +1,12 @@\n+2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94690\n+\t* openmp.c (OMP_DISTRIBUTE_CLAUSES): Add OMP_CLAUSE_LASTPRIVATE.\n+\t(gfc_resolve_do_iterator): Skip the private handling for SIMD as\n+\tthat is handled by ME code.\n+\t* trans-openmp.c (gfc_trans_omp_do): Don't add private/lastprivate\n+\tfor dovar_found == 0, unless !simple.\n+\n 2020-05-11  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95053"}, {"sha": "310d4e030d27e80e7564346edcebcb3e2ce24690", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -2595,7 +2595,7 @@ gfc_match_oacc_routine (void)\n    | OMP_CLAUSE_SHARED | OMP_CLAUSE_REDUCTION)\n #define OMP_DISTRIBUTE_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n-   | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_DIST_SCHEDULE)\n+   | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_DIST_SCHEDULE)\n #define OMP_SINGLE_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE)\n #define OMP_ORDERED_CLAUSES \\\n@@ -5682,6 +5682,31 @@ gfc_resolve_do_iterator (gfc_code *code, gfc_symbol *sym, bool add_clause)\n   if (omp_current_ctx->sharing_clauses->contains (sym))\n     return;\n \n+  if (omp_current_ctx->is_openmp && omp_current_ctx->code->block)\n+    {\n+      /* SIMD is handled differently and, hence, ignored here.  */\n+      gfc_code *omp_code = omp_current_ctx->code->block;\n+      for ( ; omp_code->next; omp_code = omp_code->next)\n+\tswitch (omp_code->op)\n+\t  {\n+\t  case EXEC_OMP_SIMD:\n+\t  case EXEC_OMP_DO_SIMD:\n+\t  case EXEC_OMP_PARALLEL_DO_SIMD:\n+\t  case EXEC_OMP_DISTRIBUTE_SIMD:\n+\t  case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:\n+\t  case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+\t  case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\t  case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+\t  case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+\t  case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+\t  case EXEC_OMP_TARGET_SIMD:\n+\t  case EXEC_OMP_TASKLOOP_SIMD:\n+\t    return;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+\n   if (! omp_current_ctx->private_iterators->add (sym) && add_clause)\n     {\n       gfc_omp_clauses *omp_clauses = omp_current_ctx->code->ext.omp_clauses;"}, {"sha": "8cf851eb6e30fdfd4d08612d1d7951200eaad3e9", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -4262,23 +4262,22 @@ gfc_trans_omp_do (gfc_code *code, gfc_exec_op op, stmtblock_t *pblock,\n \t\tbreak;\n \t      }\n \t}\n-      if (!dovar_found)\n+      if (!dovar_found && op == EXEC_OMP_SIMD)\n \t{\n-\t  if (op == EXEC_OMP_SIMD)\n+\t  if (collapse == 1)\n \t    {\n-\t      if (collapse == 1)\n-\t\t{\n-\t\t  tmp = build_omp_clause (input_location, OMP_CLAUSE_LINEAR);\n-\t\t  OMP_CLAUSE_LINEAR_STEP (tmp) = step;\n-\t\t  OMP_CLAUSE_LINEAR_NO_COPYIN (tmp) = 1;\n-\t\t}\n-\t      else\n-\t\ttmp = build_omp_clause (input_location, OMP_CLAUSE_LASTPRIVATE);\n-\t      if (!simple)\n-\t\tdovar_found = 2;\n+\t      tmp = build_omp_clause (input_location, OMP_CLAUSE_LINEAR);\n+\t      OMP_CLAUSE_LINEAR_STEP (tmp) = step;\n+\t      OMP_CLAUSE_LINEAR_NO_COPYIN (tmp) = 1;\n+\t      OMP_CLAUSE_DECL (tmp) = dovar_decl;\n+\t      omp_clauses = gfc_trans_add_clause (tmp, omp_clauses);\n \t    }\n-\t  else\n-\t    tmp = build_omp_clause (input_location, OMP_CLAUSE_PRIVATE);\n+\t  if (!simple)\n+\t    dovar_found = 2;\n+\t}\n+      else if (!dovar_found && !simple)\n+\t{\n+\t  tmp = build_omp_clause (input_location, OMP_CLAUSE_PRIVATE);\n \t  OMP_CLAUSE_DECL (tmp) = dovar_decl;\n \t  omp_clauses = gfc_trans_add_clause (tmp, omp_clauses);\n \t}"}, {"sha": "104c527f9c7290ea50a1c3db5886c991510a3f39", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -1,3 +1,14 @@\n+2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94690\n+\t* testsuite/libgomp.fortran/pr66199-3.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-4.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-5.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-6.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-7.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-8.f90: New.\n+\t* testsuite/libgomp.fortran/pr66199-9.f90: New.\n+\n 2020-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/target-39.c: New test."}, {"sha": "7c596dc173935dfcbbfa752a3540360229282077", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-3.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-3.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199 \n+\n+module m\n+  integer u(0:1024-1), v(0:1024-1), w(0:1024-1)\n+contains\n+\n+integer(8) function f1 (a, b)\n+  implicit none\n+  integer, value :: a, b\n+  integer(8) :: d\n+  !$omp parallel do lastprivate (d) default(none) firstprivate (a, b) shared(u, v, w)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+  end do\n+  f1 = d\n+end\n+\n+integer(8) function f2 (a, b, c)\n+  implicit none\n+  integer, value :: a, b, c\n+  integer(8) :: d, e\n+  !$omp parallel do lastprivate (d) default(none) firstprivate (a, b) shared(u, v, w) linear(c:5) lastprivate(e)\n+  do d = a, b-1\n+      u(d) = v(d) + w(d)\n+      c = c + 5\n+      e = c\n+  end do\n+  f2 = d + c + e\n+end\n+\n+integer(8) function f3 (a1, b1, a2, b2)\n+  implicit none\n+  integer, value :: a1, b1, a2, b2\n+  integer(8) d1, d2\n+  !$omp parallel do default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  f3 = d1 + d2\n+end\n+end module m\n+\n+program main\n+  use m\n+  if (f1 (0, 1024) /= 1024) stop 1\n+  if (f2 (0, 1024, 17) /= 1024 + 2 * (17 + 5 * 1024)) stop 2\n+  if (f3 (0, 32, 0, 32) /= 64) stop 3\n+end program main"}, {"sha": "17b62a6bb955c8973e450263f1e3fda53f7c3111", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-4.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-4.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer u(0:1023), v(0:1023), w(0:1023)\n+  !$omp declare target (u, v, w)\n+\n+contains\n+\n+subroutine f1 (a, b)\n+  integer a, b, d\n+  !$omp target teams distribute parallel do default(none) firstprivate (a, b) shared(u, v, w)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+  end do\n+end\n+\n+subroutine f2 (a, b, c)\n+  integer a, b, c, d, e\n+  !$omp target teams distribute parallel do default(none) firstprivate (a, b, c) shared(u, v, w) lastprivate(d, e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+end\n+\n+subroutine f3 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target teams distribute parallel do default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) &\n+  !$omp&       lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+end\n+\n+subroutine f4 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target teams distribute parallel do default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) &\n+  !$omp&       collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+end\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+  call f1 (0, 1024)\n+  call f2 (0, 1024, 17)\n+  call f3 (0, 32, 0, 32)\n+  call f4 (0, 32, 0, 32)\n+end"}, {"sha": "9482f08fc029184d80584e64b41ff6b0eb753e84", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-5.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-5.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer u(0:1023), v(0:1023), w(0:1023)\n+  !$omp declare target (u, v, w)\n+\n+contains\n+\n+integer function f1 (a, b)\n+  integer :: a, b, d\n+  !$omp target map(from: d)\n+  !$omp teams distribute parallel do simd default(none) firstprivate (a, b) shared(u, v, w)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+  end do\n+  !$omp end target\n+  f1 = d\n+end\n+\n+integer function f2 (a, b, c)\n+  integer :: a, b, c, d, e\n+  !$omp target map(from: d, e)\n+  !$omp teams distribute parallel do simd default(none) firstprivate (a, b, c) shared(u, v, w) linear(d) lastprivate(e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+  !$omp end target\n+  f2 = d + e\n+end\n+\n+integer function f3 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams distribute parallel do simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) &\n+  !$omp&      collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end target\n+  f3 = d1 + d2\n+end\n+\n+integer function f4 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams distribute parallel do simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end target\n+  f4 = d1 + d2\n+end\n+end module\n+\n+program main\n+  use m\n+  implicit none\n+  if (f1 (0, 1024) /= 1024) stop 1\n+  if (f2 (0, 1024, 17) /= 1024 + (17 + 5 * 1023)) stop 2\n+  if (f3 (0, 32, 0, 32) /= 64) stop 3\n+  if (f4 (0, 32, 0, 32) /= 64) stop 3\n+end"}, {"sha": "f73f6833bb5acedf6e77c79ebd83e74ec25cf8b9", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-6.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-6.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer :: u(0:1023), v(0:1023), w(0:1023)\n+  !$omp declare target (u, v, w)\n+\n+contains\n+\n+integer function f2 (a, b, c)\n+  integer :: a, b, c, d, e\n+  !$omp target map(from: d, e)\n+  !$omp teams distribute parallel do default(none) firstprivate (a, b, c) shared(u, v, w) lastprivate(d, e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+  !$omp end target\n+  f2 = d + e\n+end\n+\n+integer function f3 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams distribute parallel do default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end target\n+  f3 = d1 + d2\n+end\n+end module m\n+\n+use m\n+  if (f2 (0, 1024, 17) /= 1024 + (17 + 5 * 1023)) stop 1\n+  if (f3 (0, 32, 0, 32) /= 64) stop 2\n+end"}, {"sha": "2bd94683163732594ffa11401ca5991e9212f84c", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-7.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-7.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,72 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer u(1024), v(1024), w(1024)\n+  !$omp declare target (v, u, w)\n+\n+contains\n+\n+integer function f1 (a, b)\n+  integer :: a, b, d\n+  !$omp target map(from: d)\n+  !$omp teams distribute simd default(none) firstprivate (a, b) shared(u, v, w)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+  end do\n+  !$omp end teams distribute simd\n+  !$omp end target\n+  f1 = d\n+end\n+\n+integer function f2 (a, b, c)\n+  integer a, b, c, d, e\n+  !$omp target map(from: d, e)\n+  !$omp teams distribute simd default(none) firstprivate (a, b, c) shared(u, v, w) linear(d) lastprivate(e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+  !$omp end teams distribute simd\n+  !$omp end target\n+  f2 = d + e\n+end\n+\n+integer function f3 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams distribute simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end teams distribute simd\n+  !$omp end target\n+  f3 = d1 + d2\n+end\n+\n+integer function f4 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams distribute simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end teams distribute simd\n+  !$omp end target\n+  f4 = d1 + d2\n+end\n+end module\n+\n+use m\n+  if (f1 (0, 1024) /= 1024) stop 1\n+  if (f2 (0, 1024, 17) /= 1024 + (17 + 5 * 1023)) stop 2\n+  if (f3 (0, 32, 0, 32) /= 64) stop 3\n+  if (f4 (0, 32, 0, 32) /= 64) stop 4\n+end"}, {"sha": "8a21c6f2b2a50f7ae4167c4184d33cdf80e6473c", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-8.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-8.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer u(0:1023), v(0:1023), w(0:1023)\n+  !$omp declare target (u, v, w)\n+\n+contains\n+\n+integer function f1 (a, b)\n+  integer :: a, b, d\n+  !$omp target map(from: d)\n+  !$omp teams default(none) shared(a, b, d, u, v, w)\n+  !$omp distribute simd firstprivate (a, b)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f1 = d\n+end\n+\n+integer function f2 (a, b, c)\n+  integer a, b, c, d, e\n+  !$omp target map(from: d, e)\n+  !$omp teams default(none) firstprivate (a, b, c) shared(d, e, u, v, w)\n+  !$omp distribute simd linear(d) lastprivate(e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f2 = d + e\n+end\n+\n+integer function f3 (a1, b1, a2, b2)\n+  integer a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams default(none) shared(a1, b1, a2, b2, d1, d2, u, v, w)\n+  !$omp distribute simd firstprivate (a1, b1, a2, b2) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f3 = d1 + d2\n+end\n+\n+integer function f4 (a1, b1, a2, b2)\n+  integer a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams default(none) firstprivate (a1, b1, a2, b2) shared(d1, d2, u, v, w)\n+  !$omp distribute simd collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f4 = d1 + d2\n+end\n+end module m\n+\n+use m\n+  if (f1 (0, 1024) /= 1024) stop 1\n+  if (f2 (0, 1024, 17) /= 1024 + (17 + 5 * 1023)) stop 2\n+  if (f3 (0, 32, 0, 32) /= 64) stop 3\n+  if (f4 (0, 32, 0, 32) /= 64) stop 4\n+end"}, {"sha": "5dde7f83116efc5881fb20242a8b06920f6e9716", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-9.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884bef21cccc05d748fd7869cd641cbb4f6b6bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-9.f90?ref=f884bef21cccc05d748fd7869cd641cbb4f6b6bb", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+!\n+! PR fortran/94690\n+! PR middle-end/66199\n+\n+module m\n+  implicit none\n+  integer u(1024), v(1024), w(1024)\n+  !$omp declare target (u, v, w)\n+\n+contains\n+\n+integer function f2 (a, b, c)\n+  integer :: a, b, c, d, e\n+  !$omp target map(from: d, e)\n+  !$omp teams default(none) firstprivate (a, b, c) shared(d, e, u, v, w)\n+  !$omp distribute lastprivate(d, e)\n+  do d = a, b-1\n+    u(d) = v(d) + w(d)\n+    e = c + d * 5\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f2 = d + e\n+end\n+\n+integer function f3 (a1, b1, a2, b2)\n+  integer :: a1, b1, a2, b2, d1, d2\n+  !$omp target map(from: d1, d2)\n+  !$omp teams default(none) shared(a1, b1, a2, b2, d1, d2, u, v, w)\n+  !$omp distribute firstprivate (a1, b1, a2, b2) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1-1\n+    do d2 = a2, b2-1\n+      u(d1 * 32 + d2) = v(d1 * 32 + d2) + w(d1 * 32 + d2)\n+    end do\n+  end do\n+  !$omp end teams\n+  !$omp end target\n+  f3 = d1 + d2\n+end\n+end module\n+\n+use m\n+  if (f2 (0, 1024, 17) /= 1024 + (17 + 5 * 1023)) stop 1\n+  if (f3 (0, 32, 0, 32) /= 64) stop 2\n+end"}]}