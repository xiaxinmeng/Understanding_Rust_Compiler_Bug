{"sha": "7d9088c2a39062a44997bd58b10c4a796155f1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5MDg4YzJhMzkwNjJhNDQ5OTdiZDU4YjEwYzRhNzk2MTU1ZjFhMw==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2014-03-31T13:24:13Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-03-31T13:24:13Z"}, "message": "avx512fintrin.h (__v32hi): Define type.\n\n2014-03-27  Ulrich Drepper  <drepper@gmail.com>\n\n        * config/i386/avx512fintrin.h (__v32hi): Define type.\n        (__v64qi): Likewise.\n        (_mm512_set1_epi8): Define.\n        (_mm512_set1_epi16): Define.\n        (_mm512_set4_epi32): Define.\n        (_mm512_set4_epi64): Define.\n        (_mm512_set4_pd): Define.\n        (_mm512_set4_ps): Define.\n        (_mm512_setr4_epi64): Define.\n        (_mm512_setr4_epi32): Define.\n        (_mm512_setr4_pd): Define.\n        (_mm512_setr4_ps): Define.\n        (_mm512_setzero_epi32): Define.\n--This line, and those belowi will be ignored--\n\nM    gcc/ChangeLog\nM    gcc/config/i386/avx512fintrin.h\n\nFrom-SVN: r208959", "tree": {"sha": "75e13fc4285072597d5872bbc2cf833d9aa064e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75e13fc4285072597d5872bbc2cf833d9aa064e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9088c2a39062a44997bd58b10c4a796155f1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9088c2a39062a44997bd58b10c4a796155f1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9088c2a39062a44997bd58b10c4a796155f1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9088c2a39062a44997bd58b10c4a796155f1a3/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "750dc2785325a13222b39b5bd87c286736830392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750dc2785325a13222b39b5bd87c286736830392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750dc2785325a13222b39b5bd87c286736830392"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "46e1072671f6289391e26ec8788c4c70206acaf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9088c2a39062a44997bd58b10c4a796155f1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9088c2a39062a44997bd58b10c4a796155f1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9088c2a39062a44997bd58b10c4a796155f1a3", "patch": "@@ -1,3 +1,19 @@\n+2014-03-31  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* config/i386/avx512fintrin.h (__v32hi): Define type.\n+\t(__v64qi): Likewise.\n+\t(_mm512_set1_epi8): Define.\n+\t(_mm512_set1_epi16): Define.\n+\t(_mm512_set4_epi32): Define.\n+\t(_mm512_set4_epi64): Define.\n+\t(_mm512_set4_pd): Define.\n+\t(_mm512_set4_ps): Define.\n+\t(_mm512_setr4_epi64): Define.\n+\t(_mm512_setr4_epi32): Define.\n+\t(_mm512_setr4_pd): Define.\n+\t(_mm512_setr4_ps): Define.\n+\t(_mm512_setzero_epi32): Define.\n+\n 2014-03-31  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/60647"}, {"sha": "314895ad7cdb1c473069f38baaf6755cdb479c27", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9088c2a39062a44997bd58b10c4a796155f1a3/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9088c2a39062a44997bd58b10c4a796155f1a3/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=7d9088c2a39062a44997bd58b10c4a796155f1a3", "patch": "@@ -39,6 +39,8 @@ typedef double __v8df __attribute__ ((__vector_size__ (64)));\n typedef float __v16sf __attribute__ ((__vector_size__ (64)));\n typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+typedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n@@ -130,6 +132,32 @@ _mm512_undefined_si512 (void)\n   return __Y;\n }\n \n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set1_epi8 (char __A)\n+{\n+  return __extension__ (__m512i)(__v64qi)\n+\t { __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A };\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set1_epi16 (short __A)\n+{\n+  return __extension__ (__m512i)(__v32hi)\n+\t { __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A,\n+\t   __A, __A, __A, __A, __A, __A, __A, __A };\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_pd (double __A)\n@@ -152,6 +180,54 @@ _mm512_set1_ps (float __A)\n \t\t\t\t\t\t (__mmask16) -1);\n }\n \n+/* Create the vector [A B C D A B C D A B C D A B C D].  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set4_epi32 (int __A, int __B, int __C, int __D)\n+{\n+  return __extension__ (__m512i)(__v16si)\n+\t { __D, __C, __B, __A, __D, __C, __B, __A,\n+\t   __D, __C, __B, __A, __D, __C, __B, __A };\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set4_epi64 (long long __A, long long __B, long long __C,\n+\t\t   long long __D)\n+{\n+  return __extension__ (__m512i) (__v8di)\n+\t { __D, __C, __B, __A, __D, __C, __B, __A };\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set4_pd (double __A, double __B, double __C, double __D)\n+{\n+  return __extension__ (__m512d)\n+\t { __D, __C, __B, __A, __D, __C, __B, __A };\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set4_ps (float __A, float __B, float __C, float __D)\n+{\n+  return __extension__ (__m512)\n+\t { __D, __C, __B, __A, __D, __C, __B, __A,\n+\t   __D, __C, __B, __A, __D, __C, __B, __A };\n+}\n+\n+#define _mm512_setr4_epi64(e0,e1,e2,e3)\t\t\t\t\t      \\\n+  _mm512_set4_epi64(e3,e2,e1,e0)\n+\n+#define _mm512_setr4_epi32(e0,e1,e2,e3)\t\t\t\t\t      \\\n+  _mm512_set4_epi32(e3,e2,e1,e0)\n+\n+#define _mm512_setr4_pd(e0,e1,e2,e3)\t\t\t\t\t      \\\n+  _mm512_set4_pd(e3,e2,e1,e0)\n+\n+#define _mm512_setr4_ps(e0,e1,e2,e3)\t\t\t\t\t      \\\n+  _mm512_set4_ps(e3,e2,e1,e0)\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_setzero_ps (void)\n@@ -167,6 +243,13 @@ _mm512_setzero_pd (void)\n   return __extension__ (__m512d) { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\n }\n \n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_setzero_epi32 (void)\n+{\n+  return __extension__ (__m512i)(__v8di){ 0, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_setzero_si512 (void)"}]}