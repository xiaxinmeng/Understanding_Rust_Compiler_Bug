{"sha": "761041be912de3a0344a507dbb718a49a9c19434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxMDQxYmU5MTJkZTNhMDM0NGE1MDdkYmI3MThhNDlhOWMxOTQzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-05-17T08:35:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-05-17T08:35:01Z"}, "message": "re PR middle-end/27415 (Iteration var in firstprivate or reduction clauses not reported)\n\n\tPR middle-end/27415\n\t* tree.h (OMP_PARALLEL_COMBINED): Define.\n\t* gimplify.c (struct gimplify_omp_ctx): Add is_combined_parallel field.\n\t(new_omp_context): Add is_combined_parallel argument.\n\t(gimplify_scan_omp_clauses): Add in_combined_parallel argument, adjust\n\tnew_omp_context caller.\n\t(gimplify_omp_parallel, gimplify_omp_for, gimplify_omp_workshare):\n\tAdjust gimplify_scan_omp_clauses callers.\n\t(omp_is_private): Issue errors if iteration variable is firstprivate\n\tor reduction in the current context.\n\t* c-parser.c (c_parser_omp_parallel): Set OMP_PARALLEL_COMBINED\n\ton combined parallel workshare constructs.\ncp/\n\t* parser.c (cp_parser_omp_parallel): Set OMP_PARALLEL_COMBINED\n\ton combined parallel workshare constructs.\n\t* pt.c (tsubst_expr): Copy OMP_PARALLEL_COMBINED flag.\nfortran/\n\t* trans-openmp.c (gfc_trans_omp_parallel_do,\n\tgfc_trans_omp_parallel_sections, gfc_trans_omp_parallel_workshare): Set\n\tOMP_PARALLEL_COMBINED flag.\ntestsuite/\n\t* gcc.dg/gomp/pr27415.c: New test.\n\t* g++.dg/gomp/pr27415.C: New test.\n\nFrom-SVN: r113846", "tree": {"sha": "7de49861b990eff224e646e29a3ad1dd59004468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de49861b990eff224e646e29a3ad1dd59004468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761041be912de3a0344a507dbb718a49a9c19434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761041be912de3a0344a507dbb718a49a9c19434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761041be912de3a0344a507dbb718a49a9c19434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761041be912de3a0344a507dbb718a49a9c19434/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c5cbea7a14ac6b674443a6d3e0865a696af18ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5cbea7a14ac6b674443a6d3e0865a696af18ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5cbea7a14ac6b674443a6d3e0865a696af18ce"}], "stats": {"total": 183, "additions": 175, "deletions": 8}, "files": [{"sha": "862e2bf72744ca5819516a0c251988cb5cf47cb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -1,3 +1,18 @@\n+2006-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27415\n+\t* tree.h (OMP_PARALLEL_COMBINED): Define.\n+\t* gimplify.c (struct gimplify_omp_ctx): Add is_combined_parallel field.\n+\t(new_omp_context): Add is_combined_parallel argument.\n+\t(gimplify_scan_omp_clauses): Add in_combined_parallel argument, adjust\n+\tnew_omp_context caller.\n+\t(gimplify_omp_parallel, gimplify_omp_for, gimplify_omp_workshare):\n+\tAdjust gimplify_scan_omp_clauses callers.\n+\t(omp_is_private): Issue errors if iteration variable is firstprivate\n+\tor reduction in the current context.\n+\t* c-parser.c (c_parser_omp_parallel): Set OMP_PARALLEL_COMBINED\n+\ton combined parallel workshare constructs.\n+\n 2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (GCC_OBJS): Replace options.o with gcc-options.o."}, {"sha": "8f6cafda28486e318771b8add1b198a4e4a4e8a0", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -7651,6 +7651,7 @@ c_parser_omp_parallel (c_parser *parser)\n       if (stmt)\n \tOMP_FOR_CLAUSES (stmt) = ws_clause;\n       stmt = c_finish_omp_parallel (par_clause, block);\n+      OMP_PARALLEL_COMBINED (stmt) = 1;\n       break;\n \n     case PRAGMA_OMP_PARALLEL_SECTIONS:\n@@ -7660,6 +7661,7 @@ c_parser_omp_parallel (c_parser *parser)\n       if (stmt)\n \tOMP_SECTIONS_CLAUSES (stmt) = ws_clause;\n       stmt = c_finish_omp_parallel (par_clause, block);\n+      OMP_PARALLEL_COMBINED (stmt) = 1;\n       break;\n \n     default:"}, {"sha": "8a318578fb3d93c6121b3642fdcdd415e1ce1663", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -1,3 +1,10 @@\n+2006-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27415\n+\t* parser.c (cp_parser_omp_parallel): Set OMP_PARALLEL_COMBINED\n+\ton combined parallel workshare constructs.\n+\t* pt.c (tsubst_expr): Copy OMP_PARALLEL_COMBINED flag.\n+\n 2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/26885"}, {"sha": "28c5007dafce60b1bd886092debbf4100ac460ae", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -18842,7 +18842,10 @@ cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok)\n     }\n \n   cp_parser_end_omp_structured_block (parser, save);\n-  return finish_omp_parallel (par_clause, block);\n+  stmt = finish_omp_parallel (par_clause, block);\n+  if (p_kind != PRAGMA_OMP_PARALLEL)\n+    OMP_PARALLEL_COMBINED (stmt) = 1;\n+  return stmt;\n }\n \n /* OpenMP 2.5:"}, {"sha": "ea3ff411b8ddac9c641218ce1cd849c92aafe381", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -8456,7 +8456,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\targs, complain, in_decl);\n       stmt = begin_omp_parallel ();\n       tsubst_expr (OMP_PARALLEL_BODY (t), args, complain, in_decl);\n-      finish_omp_parallel (tmp, stmt);\n+      OMP_PARALLEL_COMBINED (finish_omp_parallel (tmp, stmt))\n+\t= OMP_PARALLEL_COMBINED (t);\n       break;\n \n     case OMP_FOR:"}, {"sha": "2e4f8fb3eb189109195238ffe16528288b168197", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -1,3 +1,10 @@\n+2006-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27415\n+\t* trans-openmp.c (gfc_trans_omp_parallel_do,\n+\tgfc_trans_omp_parallel_sections, gfc_trans_omp_parallel_workshare): Set\n+\tOMP_PARALLEL_COMBINED flag.\n+\n 2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/26885"}, {"sha": "b7c6f9e3bfb9fd245843855b83361335a634964e", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -1095,6 +1095,7 @@ gfc_trans_omp_parallel_do (gfc_code *code)\n   else\n     poplevel (0, 0, 0);\n   stmt = build4_v (OMP_PARALLEL, stmt, omp_clauses, NULL, NULL);\n+  OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -1119,6 +1120,7 @@ gfc_trans_omp_parallel_sections (gfc_code *code)\n   else\n     poplevel (0, 0, 0);\n   stmt = build4_v (OMP_PARALLEL, stmt, omp_clauses, NULL, NULL);\n+  OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -1143,6 +1145,7 @@ gfc_trans_omp_parallel_workshare (gfc_code *code)\n   else\n     poplevel (0, 0, 0);\n   stmt = build4_v (OMP_PARALLEL, stmt, omp_clauses, NULL, NULL);\n+  OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }"}, {"sha": "a4389741e23dbe198defdfc892c54ec3e547ea06", "filename": "gcc/gimplify.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -73,6 +73,7 @@ struct gimplify_omp_ctx\n   location_t location;\n   enum omp_clause_default_kind default_kind;\n   bool is_parallel;\n+  bool is_combined_parallel;\n };\n \n struct gimplify_ctx\n@@ -259,7 +260,7 @@ splay_tree_compare_decl_uid (splay_tree_key xa, splay_tree_key xb)\n /* Create a new omp construct that deals with variable remapping.  */\n \n static struct gimplify_omp_ctx *\n-new_omp_context (bool is_parallel)\n+new_omp_context (bool is_parallel, bool is_combined_parallel)\n {\n   struct gimplify_omp_ctx *c;\n \n@@ -269,6 +270,7 @@ new_omp_context (bool is_parallel)\n   c->privatized_types = pointer_set_create ();\n   c->location = input_location;\n   c->is_parallel = is_parallel;\n+  c->is_combined_parallel = is_combined_parallel;\n   c->default_kind = OMP_CLAUSE_DEFAULT_SHARED;\n \n   return c;\n@@ -4452,6 +4454,18 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl)\n \t  else\n \t    return false;\n \t}\n+      else if ((n->value & GOVD_EXPLICIT) != 0\n+\t       && (ctx == gimplify_omp_ctxp\n+\t\t   || (ctx->is_combined_parallel\n+\t\t       && gimplify_omp_ctxp->outer_context == ctx)))\n+\t{\n+\t  if ((n->value & GOVD_FIRSTPRIVATE) != 0)\n+\t    error (\"iteration variable %qs should not be firstprivate\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t  else if ((n->value & GOVD_REDUCTION) != 0)\n+\t    error (\"iteration variable %qs should not be reduction\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t}\n       return true;\n     }\n \n@@ -4467,12 +4481,13 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl)\n    and previous omp contexts.  */\n \n static void\n-gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel)\n+gimplify_scan_omp_clauses (tree *list_p, tree *pre_p, bool in_parallel,\n+\t\t\t   bool in_combined_parallel)\n {\n   struct gimplify_omp_ctx *ctx, *outer_ctx;\n   tree c;\n \n-  ctx = new_omp_context (in_parallel);\n+  ctx = new_omp_context (in_parallel, in_combined_parallel);\n   outer_ctx = ctx->outer_context;\n \n   while ((c = *list_p) != NULL)\n@@ -4717,7 +4732,8 @@ gimplify_omp_parallel (tree *expr_p, tree *pre_p)\n {\n   tree expr = *expr_p;\n \n-  gimplify_scan_omp_clauses (&OMP_PARALLEL_CLAUSES (expr), pre_p, true);\n+  gimplify_scan_omp_clauses (&OMP_PARALLEL_CLAUSES (expr), pre_p, true,\n+\t\t\t     OMP_PARALLEL_COMBINED (expr));\n \n   push_gimplify_context ();\n \n@@ -4743,7 +4759,7 @@ gimplify_omp_for (tree *expr_p, tree *pre_p)\n \n   for_stmt = *expr_p;\n \n-  gimplify_scan_omp_clauses (&OMP_FOR_CLAUSES (for_stmt), pre_p, false);\n+  gimplify_scan_omp_clauses (&OMP_FOR_CLAUSES (for_stmt), pre_p, false, false);\n \n   t = OMP_FOR_INIT (for_stmt);\n   gcc_assert (TREE_CODE (t) == MODIFY_EXPR);\n@@ -4825,7 +4841,7 @@ gimplify_omp_workshare (tree *expr_p, tree *pre_p)\n {\n   tree stmt = *expr_p;\n \n-  gimplify_scan_omp_clauses (&OMP_CLAUSES (stmt), pre_p, false);\n+  gimplify_scan_omp_clauses (&OMP_CLAUSES (stmt), pre_p, false, false);\n   gimplify_to_stmt_list (&OMP_BODY (stmt));\n   gimplify_adjust_omp_clauses (&OMP_CLAUSES (stmt));\n "}, {"sha": "b5339b2ec1b8b92030c332a46113c9b5f7faff09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -1,3 +1,9 @@\n+2006-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27415\n+\t* gcc.dg/gomp/pr27415.c: New test.\n+\t* g++.dg/gomp/pr27415.C: New test.\n+\n 2006-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/27549"}, {"sha": "81f0ed5c6b7bc163283683a0b2cf990cb8f53398", "filename": "gcc/testsuite/g++.dg/gomp/pr27415.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27415.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27415.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr27415.C?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -0,0 +1,50 @@\n+// PR middle-end/27415\n+// { dg-do compile }\n+\n+void\n+test1 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel\n+#pragma omp for firstprivate (i)\t\t// { dg-error \"should not be firstprivate\" }\n+  for (i = 0; i < 10; i++)\n+    ;\n+}\n+\n+void\n+test2 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel for firstprivate (i)\n+  for (i = 0; i < 10; i++)\t\t\t// { dg-error \"should not be firstprivate\" }\n+    ;\n+}\n+\n+void\n+test3 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel\n+#pragma omp for reduction (+:i)\t\t\t// { dg-error \"should not be reduction\" }\n+  for (i = 0; i < 10; i++)\n+    ;\n+}\n+\n+void\n+test4 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel for reduction (*:i)\n+  for (i = 0; i < 10; i++)\t\t\t// { dg-error \"should not be reduction\" }\n+    ;\n+}\n+\n+void\n+test5 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel firstprivate (i)\n+#pragma omp for\n+  for (i = 0; i < 10; i++)\n+    ;\n+}"}, {"sha": "418eaf678e986664b7d556e4ebc28c153f7ce334", "filename": "gcc/testsuite/gcc.dg/gomp/pr27415.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27415.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27415.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27415.c?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -0,0 +1,50 @@\n+/* PR middle-end/27415 */\n+/* { dg-do compile } */\n+\n+void\n+test1 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel\n+#pragma omp for firstprivate (i)\t\t/* { dg-error \"should not be firstprivate\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+}\n+\n+void\n+test2 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel for firstprivate (i)\n+  for (i = 0; i < 10; i++)\t\t\t/* { dg-error \"should not be firstprivate\" } */\n+    ;\n+}\n+\n+void\n+test3 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel\n+#pragma omp for reduction (+:i)\t\t\t/* { dg-error \"should not be reduction\" } */\n+  for (i = 0; i < 10; i++)\n+    ;\n+}\n+\n+void\n+test4 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel for reduction (*:i)\n+  for (i = 0; i < 10; i++)\t\t\t/* { dg-error \"should not be reduction\" } */\n+    ;\n+}\n+\n+void\n+test5 (void)\n+{\n+  int i = 0;\n+#pragma omp parallel firstprivate (i)\n+#pragma omp for\n+  for (i = 0; i < 10; i++)\n+    ;\n+}"}, {"sha": "55a5d8f8618c1adb946dcda0b18ffc9326a47ef0", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761041be912de3a0344a507dbb718a49a9c19434/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=761041be912de3a0344a507dbb718a49a9c19434", "patch": "@@ -443,6 +443,8 @@ struct tree_common GTY(())\n \t   OMP_RETURN\n        OMP_SECTION_LAST in\n \t   OMP_SECTION\n+       OMP_PARALLEL_COMBINED in\n+\t   OMP_PARALLEL\n \n    protected_flag:\n \n@@ -1583,6 +1585,11 @@ struct tree_constructor GTY(())\n #define OMP_RETURN_NOWAIT(NODE) \\\n   TREE_PRIVATE (OMP_RETURN_CHECK (NODE))\n \n+/* True on an OMP_PARALLEL statement if it represents an explicit\n+   combined parallel work-sharing constructs.  */\n+#define OMP_PARALLEL_COMBINED(NODE) \\\n+  TREE_PRIVATE (OMP_PARALLEL_CHECK (NODE))\n+\n /* True on a PRIVATE clause if its decl is kept around for debugging\n    information only and its DECL_VALUE_EXPR is supposed to point\n    to what it has been remapped to.  */"}]}