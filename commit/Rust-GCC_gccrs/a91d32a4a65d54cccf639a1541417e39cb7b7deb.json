{"sha": "a91d32a4a65d54cccf639a1541417e39cb7b7deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxZDMyYTRhNjVkNTRjY2NmNjM5YTE1NDE0MTdlMzljYjdiN2RlYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-11T16:06:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-11T16:06:19Z"}, "message": "i386.md (\"*movtf_internal): Penalize moves to and from integer registers.\n\n        * config/i386/i386.md (\"*movtf_internal): Penalize moves to and\n        from integer registers.\n        (FP mode splitters): Handle TFmode.\n\nFrom-SVN: r125623", "tree": {"sha": "74580421e82c86eea4148a21a575f891102c7d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74580421e82c86eea4148a21a575f891102c7d2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a91d32a4a65d54cccf639a1541417e39cb7b7deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91d32a4a65d54cccf639a1541417e39cb7b7deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91d32a4a65d54cccf639a1541417e39cb7b7deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91d32a4a65d54cccf639a1541417e39cb7b7deb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a9007db0c3a30eb10e768cb57eebeb43ee96eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9007db0c3a30eb10e768cb57eebeb43ee96eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9007db0c3a30eb10e768cb57eebeb43ee96eae"}], "stats": {"total": 119, "additions": 63, "deletions": 56}, "files": [{"sha": "e821198ea833ee52ec22fcba93bbcfb392658611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91d32a4a65d54cccf639a1541417e39cb7b7deb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91d32a4a65d54cccf639a1541417e39cb7b7deb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a91d32a4a65d54cccf639a1541417e39cb7b7deb", "patch": "@@ -1,3 +1,9 @@\n+2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (\"*movtf_internal): Penalize moves to and\n+\tfrom integer registers.\n+\t(FP mode splitters): Handle TFmode.\n+\n 2007-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-structalias.c (find_what_p_points_to): Return false"}, {"sha": "905e1c19c1afd3cba390c65ab94fd207f830c5db", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91d32a4a65d54cccf639a1541417e39cb7b7deb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91d32a4a65d54cccf639a1541417e39cb7b7deb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a91d32a4a65d54cccf639a1541417e39cb7b7deb", "patch": "@@ -3015,6 +3015,59 @@\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n \n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n+{\n+  ix86_expand_move (TFmode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*movtf_internal\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?r,?o\")\n+\t(match_operand:TF 1 \"general_operand\" \"xm,x,C,roF,Fr\"))]\n+  \"TARGET_64BIT\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+      if (get_attr_mode (insn) == MODE_V4SF)\n+\treturn \"movaps\\t{%1, %0|%0, %1}\";\n+      else\n+\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n+    case 2:\n+      if (get_attr_mode (insn) == MODE_V4SF)\n+\treturn \"xorps\\t%0, %0\";\n+      else\n+\treturn \"pxor\\t%0, %0\";\n+    case 3:\n+    case 4:\n+\treturn \"#\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"ssemov,ssemov,sselog1,*,*\")\n+   (set (attr \"mode\")\n+        (cond [(eq_attr \"alternative\" \"0,2\")\n+\t\t (if_then_else\n+\t\t   (ne (symbol_ref \"optimize_size\")\n+\t\t       (const_int 0))\n+\t\t   (const_string \"V4SF\")\n+\t\t   (const_string \"TI\"))\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t (if_then_else\n+\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n+\t\t\t    (const_int 0))\n+\t\t\t(ne (symbol_ref \"optimize_size\")\n+\t\t\t    (const_int 0)))\n+\t\t   (const_string \"V4SF\")\n+\t\t   (const_string \"TI\"))]\n+\t       (const_string \"DI\")))])\n+\n (define_split\n   [(set (match_operand 0 \"nonimmediate_operand\" \"\")\n \t(match_operand 1 \"general_operand\" \"\"))]\n@@ -3067,7 +3120,8 @@\n \t(float_extend (match_operand 1 \"memory_operand\" \"\")))]\n   \"reload_completed\n    && MEM_P (operands[1])\n-   && (GET_MODE (operands[0]) == XFmode\n+   && (GET_MODE (operands[0]) == TFmode\n+       || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == SFmode\n        || GET_MODE (operands[0]) == DFmode)\n    && (operands[2] = find_constant_src (insn))\"\n@@ -3128,64 +3182,11 @@\n     operands[1] = CONST1_RTX (<MODE>mode);\n })\n \n-(define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_64BIT\"\n-{\n-  ix86_expand_move (TFmode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"*movtf_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o,x,x,xm\")\n-\t(match_operand:TF 1 \"general_operand\" \"riFo,riF,C,xm,x\"))]\n-  \"TARGET_64BIT\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-    case 1:\n-      return \"#\";\n-    case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"xorps\\t%0, %0\";\n-      else\n-\treturn \"pxor\\t%0, %0\";\n-    case 3:\n-    case 4:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"*,*,sselog1,ssemov,ssemov\")\n-   (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"2,3\")\n-\t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n-\t\t       (const_int 0))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"4\")\n-\t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n-\t\t\t    (const_int 0)))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"DI\")))])\n-\n (define_split\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:TF 1 \"general_operand\" \"\"))]\n-  \"reload_completed && !SSE_REG_P (operands[0])\n-   && !SSE_REG_P (operands[1])\"\n+  \"reload_completed\n+   && !(SSE_REG_P (operands[0]) || SSE_REG_P (operands[1]))\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \f"}]}