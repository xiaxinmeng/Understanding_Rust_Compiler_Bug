{"sha": "bffc62707f731f20ded6993e734a361945684955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmYzYyNzA3ZjczMWYyMGRlZDY5OTNlNzM0YTM2MTk0NTY4NDk1NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-07-12T16:21:06Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-07-12T16:21:06Z"}, "message": "PR c/86453 - error: type variant differs by TYPE_PACKED in free_lang_data since r255469\n\ngcc/ChangeLog:\n\n\tPR c/86453\n\t* attribs.c (decl_attributes): Reject conflicting attributes before\n\tcalling attribute handlers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/86453\n\t* c-c++-common/Wattributes.c: Adjust.\n\t* gcc.dg/Wattributes-10.c: New test.\n\t* g++.dg/Wattributes-3.C: Adjust.\n\t* gcc.dg/Wattributes-6.c: Adjust.\n\t* gcc.dg/pr18079.c: Adjust.\n\t* gcc.dg/torture/pr42363.c: Adjust.\n\nFrom-SVN: r262596", "tree": {"sha": "7e6a96f4b17dd71beeab910912fa849d752ec72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6a96f4b17dd71beeab910912fa849d752ec72f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bffc62707f731f20ded6993e734a361945684955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bffc62707f731f20ded6993e734a361945684955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bffc62707f731f20ded6993e734a361945684955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bffc62707f731f20ded6993e734a361945684955/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d59442fae8496e716b98dba1d812011e2b351a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59442fae8496e716b98dba1d812011e2b351a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59442fae8496e716b98dba1d812011e2b351a07"}], "stats": {"total": 127, "additions": 89, "deletions": 38}, "files": [{"sha": "7e24d18175ac7e47bfa6defe3b032c57a3501160", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -1,3 +1,9 @@\n+2018-07-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/86453\n+\t* attribs.c (decl_attributes): Reject conflicting attributes before\n+\tcalling attribute handlers.\n+\n 2018-07-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* dumpfile.c (gcc::dump_manager::get_dump_file_name): Add PART"}, {"sha": "efc879ba47674f606231213ee210fc93ae7a64a3", "filename": "gcc/attribs.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -672,6 +672,35 @@ decl_attributes (tree *node, tree attributes, int flags,\n \n       bool no_add_attrs = false;\n \n+      /* Check for exclusions with other attributes on the current\n+\t declation as well as the last declaration of the same\n+\t symbol already processed (if one exists).  Detect and\n+\t reject incompatible attributes.  */\n+      bool built_in = flags & ATTR_FLAG_BUILT_IN;\n+      if (spec->exclude\n+\t  && (flag_checking || !built_in))\n+\t{\n+\t  /* Always check attributes on user-defined functions.\n+\t     Check them on built-ins only when -fchecking is set.\n+\t     Ignore __builtin_unreachable -- it's both const and\n+\t     noreturn.  */\n+\n+\t  if (!built_in\n+\t      || !DECL_P (*anode)\n+\t      || (DECL_FUNCTION_CODE (*anode) != BUILT_IN_UNREACHABLE\n+\t\t  && (DECL_FUNCTION_CODE (*anode)\n+\t\t      != BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE)))\n+\t    {\n+\t      bool no_add = diag_attr_exclusions (last_decl, *anode, name, spec);\n+\t      if (!no_add && anode != node)\n+\t\tno_add = diag_attr_exclusions (last_decl, *node, name, spec);\n+\t      no_add_attrs |= no_add;\n+\t    }\n+\t}\n+\n+      if (no_add_attrs)\n+\tcontinue;\n+\n       if (spec->handler != NULL)\n \t{\n \t  int cxx11_flag =\n@@ -695,33 +724,6 @@ decl_attributes (tree *node, tree attributes, int flags,\n \t    returned_attrs = chainon (ret, returned_attrs);\n \t}\n \n-      /* If the attribute was successfully handled on its own and is\n-\t about to be added check for exclusions with other attributes\n-\t on the current declation as well as the last declaration of\n-\t the same symbol already processed (if one exists).  */\n-      bool built_in = flags & ATTR_FLAG_BUILT_IN;\n-      if (spec->exclude\n-\t  && !no_add_attrs\n-\t  && (flag_checking || !built_in))\n-\t{\n-\t  /* Always check attributes on user-defined functions.\n-\t     Check them on built-ins only when -fchecking is set.\n-\t     Ignore __builtin_unreachable -- it's both const and\n-\t     noreturn.  */\n-\n-\t  if (!built_in\n-\t      || !DECL_P (*anode)\n-\t      || (DECL_FUNCTION_CODE (*anode) != BUILT_IN_UNREACHABLE\n-\t\t  && (DECL_FUNCTION_CODE (*anode)\n-\t\t      != BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE)))\n-\t    {\n-\t      bool no_add = diag_attr_exclusions (last_decl, *anode, name, spec);\n-\t      if (!no_add && anode != node)\n-\t\tno_add = diag_attr_exclusions (last_decl, *node, name, spec);\n-\t      no_add_attrs |= no_add;\n-\t    }\n-\t}\n-\n       /* Layout the decl in case anything changed.  */\n       if (spec->type_required && DECL_P (*node)\n \t  && (VAR_P (*node)"}, {"sha": "7e8c380a691819f75688582857286361fab1dc0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -1,3 +1,13 @@\n+2018-07-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/86453\n+\t* c-c++-common/Wattributes.c: Adjust.\n+\t* gcc.dg/Wattributes-10.c: New test.\n+\t* g++.dg/Wattributes-3.C: Adjust.\n+\t* gcc.dg/Wattributes-6.c: Adjust.\n+\t* gcc.dg/pr18079.c: Adjust.\n+\t* gcc.dg/torture/pr42363.c: Adjust.\n+\n 2018-07-12  Julia Koval  <julia.koval@intel.com>\n \n \t * gcc.target/i386/avx512vl-vpclmulqdq-2.c: Remove 128bit"}, {"sha": "6925d4eaacdee35c8001bb3ac8e1368e805cbc78", "filename": "gcc/testsuite/c-c++-common/Wattributes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -39,13 +39,13 @@ PackedPacked { int i; };\n    aligned and packed on a function declaration.  */\n \n void ATTR ((aligned (8), packed))\n-faligned8_1 (void);           /* { dg-warning \".packed. attribute ignored\" } */\n+faligned8_1 (void);           /* { dg-warning \"ignoring attribute .packed. because it conflicts with attribute .aligned.\" } */\n \n void ATTR ((aligned (8)))\n-faligned8_2 (void);           /* { dg-message \"previous declaration here\" \"\" { xfail *-*-* } } */\n+faligned8_2 (void);           /* { dg-message \"previous declaration here\" } */\n \n void ATTR ((packed))\n-faligned8_2 (void);           /* { dg-warning \".packed. attribute ignored\" } */\n+faligned8_2 (void);           /* { dg-warning \"ignoring attribute .packed. because it conflicts with attribute .aligned.\" } */\n \n /* Exercise the handling of the mutually exclusive attributes\n    always_inline and noinline (in that order).  */"}, {"sha": "208ec6696551b9f0fbfc94c2854d480cc8781e27", "filename": "gcc/testsuite/g++.dg/Wattributes-3.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWattributes-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWattributes-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWattributes-3.C?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -26,6 +26,8 @@ B::operator char () const { return 0; }\n \n ATTR ((__noinline__))\n B::operator int () const      // { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" }\n+// { dg-warning \"function might not be inlinable\" \"\" { target *-*-* } .-1 }\n+\n {\n   return 0;\n }\n@@ -43,6 +45,7 @@ C::operator char () { return 0; }\n \n ATTR ((__noinline__))\n C::operator short ()           // { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" }\n+// { dg-warning \"function might not be inlinable\" \"\" { target *-*-* } .-1 }\n { return 0; }\n \n inline ATTR ((__noinline__))"}, {"sha": "f88d7a2fb46a6f6687fc12a27e47c8975974ade3", "filename": "gcc/testsuite/gcc.dg/Wattributes-10.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-10.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/86453 - error: type variant differs by TYPE_PACKED in\n+   free_lang_data since r255469\n+   { dg-do compile }\n+   { dg-options \"-Wall -ftrack-macro-expansion=0\" } */\n+\n+#define A(expr) do { int a[1 - 2 * !(expr)]; (void)&a; } while (0)\n+\n+struct S\n+{\n+  int* __attribute__ ((aligned (16))) paligned;\n+  int* __attribute__ ((packed)) ppacked;                  /* { dg-warning \".packed. attribute ignored for type .int \\\\\\*.\" } */\n+\n+  int* __attribute__ ((aligned (16), packed)) qaligned;   /* { dg-warning \"ignoring attribute .packed. because it conflicts with attribute .aligned.\" } */\n+  int* __attribute__ ((packed, aligned (16))) qpacked;    /* { dg-warning \".packed. attribute ignored for type .int \\\\\\*.\" } */\n+} s;\n+\n+void test (void)\n+{\n+  /* Verify that attributes reported ignored really are ignored\n+     and not applied.  */\n+\n+  A (__alignof__ (s.paligned) == 16);\n+  A (__alignof__ (s.ppacked) < 16);\n+  A (__alignof__ (s.qaligned) == 16);\n+  A (__alignof__ (s.qpacked) == __alignof__ (s.paligned));\n+}"}, {"sha": "b2ea7db183351dfece8b5b8c3904f4719a27aa37", "filename": "gcc/testsuite/gcc.dg/Wattributes-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -39,13 +39,13 @@ PackedPacked { int i; };\n    aligned and packed on a function declaration.  */\n \n void ATTR ((aligned (8), packed))\n-faligned8_1 (void);           /* { dg-warning \".packed. attribute ignored\" } */\n+faligned8_1 (void);           /* { dg-warning \"ignoring attribute .packed. because it conflicts with attribute .aligned.\" } */\n \n void ATTR ((aligned (8)))\n-faligned8_2 (void);           /* { dg-message \"previous declaration here\" \"\" { xfail *-*-* } } */\n+faligned8_2 (void);           /* { dg-message \"previous declaration here\" } */\n \n void ATTR ((packed))\n-faligned8_2 (void);           /* { dg-warning \".packed. attribute ignored\" } */\n+faligned8_2 (void);           /* { dg-warning \"ignoring attribute .packed. because it conflicts with attribute .aligned.\" } */\n \n /* Exercise the handling of the mutually exclusive attributes\n    always_inline and noinline (in that order).  */"}, {"sha": "a37dc1880b23cda73d7b1e3e0e93bcf4c1b9af34", "filename": "gcc/testsuite/gcc.dg/pr18079.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18079.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18079.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18079.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -6,28 +6,28 @@ __attribute__ ((noinline))\n __attribute__ ((always_inline))\n int\n fn1 (int r)\n-{ /* { dg-warning \"attribute ignored due to conflict\" } */\n+{ /* { dg-warning \"ignoring attribute .always_inline. because it conflicts with attribute .noinline.\" } */\n   return r & 4;\n }\n \n __attribute__ ((noinline, always_inline))\n int\n fn2 (int r)\n-{ /* { dg-warning \"attribute ignored due to conflict\" } */\n+{ /* { dg-warning \"ignoring attribute .always_inline. because it conflicts with attribute .noinline.\" } */\n   return r & 4;\n }\n \n __attribute__ ((always_inline))\n __attribute__ ((noinline))\n inline int\n fn3 (int r)\n-{ /* { dg-warning \"attribute ignored due to conflict\" } */\n+{ /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n   return r & 8;\n }\n \n __attribute__ ((always_inline, noinline))\n inline int\n fn4 (int r)\n-{ /* { dg-warning \"attribute ignored due to conflict\" } */\n+{ /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n   return r & 8;\n }"}, {"sha": "e4c3861a46d1f4437060b4f4b64943e19d05cd90", "filename": "gcc/testsuite/gcc.dg/torture/pr42363.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffc62707f731f20ded6993e734a361945684955/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c?ref=bffc62707f731f20ded6993e734a361945684955", "patch": "@@ -54,7 +54,11 @@ static int __attribute__ ((pure, const, noreturn))\n barf (void) {\n   /* { dg-warning \"ignoring attribute .const.\" \"const\" { target *-*-* } .-1 } */\n   /* { dg-warning \"ignoring attribute .noreturn.\" \"noreturn\" { target *-*-* } .-2 } */\n-} /* { dg-warning \"does return\" } */\n+\n+  /* The noreturn attribute is ignored so verify there is no warning\n+     for returning from the function:\n+     { dg-bogus \"does return\" } */\n+}\n \n static int __attribute__ ((pure, const))\n bark (void) {   /* { dg-warning \"ignoring attribute .const.\" } */"}]}