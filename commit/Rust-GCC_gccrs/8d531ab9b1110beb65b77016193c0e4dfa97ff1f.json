{"sha": "8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1MzFhYjliMTExMGJlYjY1Yjc3MDE2MTkzYzBlNGRmYTk3ZmYxZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-27T05:56:16Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-27T05:56:16Z"}, "message": "i386-interix.h: Remove uses of \"register\" specifier in declarations of arguments and local...\n\n\t* config/i386/i386-interix.h: Remove uses of \"register\"\n\tspecifier in declarations of arguments and local variables.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/i386elf.h: Likewise.\n\t* config/i386/ptx4-i.h: Likewise.\n\t* config/i386/sysv4.h: Likewise.\n\nFrom-SVN: r75170", "tree": {"sha": "27532d93ed7cb1481ec00faa500c1ccc22042588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27532d93ed7cb1481ec00faa500c1ccc22042588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/comments", "author": null, "committer": null, "parents": [{"sha": "632e19ec0540cec7a1f2fcf14f1428520cf4411e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632e19ec0540cec7a1f2fcf14f1428520cf4411e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632e19ec0540cec7a1f2fcf14f1428520cf4411e"}], "stats": {"total": 148, "additions": 76, "deletions": 72}, "files": [{"sha": "ea84f4479ca5bf962d06775cb6c45b9dd1ade825", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -1,3 +1,12 @@\n+2003-12-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/i386-interix.h: Remove uses of \"register\"\n+\tspecifier in declarations of arguments and local variables.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386elf.h: Likewise.\n+\t* config/i386/ptx4-i.h: Likewise.\n+\t* config/i386/sysv4.h: Likewise.\n+\n 2003-12-26  Fariborz Jahanian <fjahanian@apple.com>\n \t    Geoffrey Keating <geoffk@apple.com>\n \t    David Edelsohn <edelsohn@gnu.org>"}, {"sha": "4f21789c99d9ed20c0ff0026de43f8e7133e4834", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -145,13 +145,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register const unsigned char *_limited_str =\t\t\t\\\n+      const unsigned char *_limited_str =\t\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n-      register unsigned ch;\t\t\t\t\t\t\\\n+      unsigned ch;\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register int escape = ESCAPES[ch];\t\t\t\t\\\n+\t  int escape = ESCAPES[ch];\t\t\t\t\t\\\n \t  switch (escape)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t    case 0:\t\t\t\t\t\t\t\\\n@@ -181,13 +181,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register const unsigned char *_ascii_bytes =\t\t\t\\\n+      const unsigned char *_ascii_bytes =\t\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n-      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n-      register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n+      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register const unsigned char *p;\t\t\t\t\\\n+\t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "d4653ace834068280e474b4ea632c805f6e0baaf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 48, "deletions": 53, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -3441,7 +3441,7 @@ const_int_1_31_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n    reference and a constant.  */\n \n int\n-symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -3485,7 +3485,7 @@ symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n /* Return true if the operand contains a @GOT or @GOTOFF reference.  */\n \n int\n-pic_symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+pic_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != CONST)\n     return 0;\n@@ -3548,7 +3548,7 @@ local_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n /* Test for various thread-local symbols.  */\n \n int\n-tls_symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+tls_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n@@ -3564,29 +3564,27 @@ tls_symbolic_operand_1 (rtx op, enum tls_model kind)\n }\n \n int\n-global_dynamic_symbolic_operand (register rtx op,\n+global_dynamic_symbolic_operand (rtx op,\n \t\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return tls_symbolic_operand_1 (op, TLS_MODEL_GLOBAL_DYNAMIC);\n }\n \n int\n-local_dynamic_symbolic_operand (register rtx op,\n+local_dynamic_symbolic_operand (rtx op,\n \t\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return tls_symbolic_operand_1 (op, TLS_MODEL_LOCAL_DYNAMIC);\n }\n \n int\n-initial_exec_symbolic_operand (register rtx op,\n-\t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED)\n+initial_exec_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return tls_symbolic_operand_1 (op, TLS_MODEL_INITIAL_EXEC);\n }\n \n int\n-local_exec_symbolic_operand (register rtx op,\n-\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED)\n+local_exec_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return tls_symbolic_operand_1 (op, TLS_MODEL_LOCAL_EXEC);\n }\n@@ -3657,47 +3655,46 @@ constant_call_address_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n /* Match exactly zero and one.  */\n \n int\n-const0_operand (register rtx op, enum machine_mode mode)\n+const0_operand (rtx op, enum machine_mode mode)\n {\n   return op == CONST0_RTX (mode);\n }\n \n int\n-const1_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+const1_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return op == const1_rtx;\n }\n \n /* Match 2, 4, or 8.  Used for leal multiplicands.  */\n \n int\n-const248_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+const248_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) == 2 || INTVAL (op) == 4 || INTVAL (op) == 8));\n }\n \n int\n-const_0_to_3_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+const_0_to_3_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) < 4);\n }\n \n int\n-const_0_to_7_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+const_0_to_7_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) < 8);\n }\n \n int\n-const_0_to_15_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+const_0_to_15_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) < 16);\n }\n \n int\n-const_0_to_255_operand (register rtx op,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED)\n+const_0_to_255_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) < 256);\n }\n@@ -3706,7 +3703,7 @@ const_0_to_255_operand (register rtx op,\n /* True if this is a constant appropriate for an increment or decrement.  */\n \n int\n-incdec_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+incdec_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* On Pentium4, the inc and dec operations causes extra dependency on flag\n      registers, since carry flag is not set.  */\n@@ -3735,7 +3732,7 @@ shiftdi_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n    Which would only happen in pathological cases.  */\n \n int\n-reg_no_sp_operand (register rtx op, enum machine_mode mode)\n+reg_no_sp_operand (rtx op, enum machine_mode mode)\n {\n   rtx t = op;\n   if (GET_CODE (t) == SUBREG)\n@@ -3747,7 +3744,7 @@ reg_no_sp_operand (register rtx op, enum machine_mode mode)\n }\n \n int\n-mmx_reg_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+mmx_reg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return MMX_REG_P (op);\n }\n@@ -3756,7 +3753,7 @@ mmx_reg_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n    general_operand.  */\n \n int\n-general_no_elim_operand (register rtx op, enum machine_mode mode)\n+general_no_elim_operand (rtx op, enum machine_mode mode)\n {\n   rtx t = op;\n   if (GET_CODE (t) == SUBREG)\n@@ -3777,7 +3774,7 @@ general_no_elim_operand (register rtx op, enum machine_mode mode)\n    register_operand or const_int.  */\n \n int\n-nonmemory_no_elim_operand (register rtx op, enum machine_mode mode)\n+nonmemory_no_elim_operand (rtx op, enum machine_mode mode)\n {\n   rtx t = op;\n   if (GET_CODE (t) == SUBREG)\n@@ -3794,7 +3791,7 @@ nonmemory_no_elim_operand (register rtx op, enum machine_mode mode)\n    otherwise work like register_operand.  */\n \n int\n-index_register_operand (register rtx op, enum machine_mode mode)\n+index_register_operand (rtx op, enum machine_mode mode)\n {\n   rtx t = op;\n   if (GET_CODE (t) == SUBREG)\n@@ -3815,7 +3812,7 @@ index_register_operand (register rtx op, enum machine_mode mode)\n /* Return true if op is a Q_REGS class register.  */\n \n int\n-q_regs_operand (register rtx op, enum machine_mode mode)\n+q_regs_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n@@ -3827,7 +3824,7 @@ q_regs_operand (register rtx op, enum machine_mode mode)\n /* Return true if op is an flags register.  */\n \n int\n-flags_reg_operand (register rtx op, enum machine_mode mode)\n+flags_reg_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n@@ -3837,7 +3834,7 @@ flags_reg_operand (register rtx op, enum machine_mode mode)\n /* Return true if op is a NON_Q_REGS class register.  */\n \n int\n-non_q_regs_operand (register rtx op, enum machine_mode mode)\n+non_q_regs_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n@@ -3885,7 +3882,7 @@ vector_move_operand (rtx op, enum machine_mode mode)\n    a segment override.  */\n \n int\n-no_seg_address_operand (register rtx op, enum machine_mode mode)\n+no_seg_address_operand (rtx op, enum machine_mode mode)\n {\n   struct ix86_address parts;\n \n@@ -3930,7 +3927,7 @@ sse_comparison_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n /* Return 1 if OP is a valid comparison operator in valid mode.  */\n int\n-ix86_comparison_operator (register rtx op, enum machine_mode mode)\n+ix86_comparison_operator (rtx op, enum machine_mode mode)\n {\n   enum machine_mode inmode;\n   enum rtx_code code = GET_CODE (op);\n@@ -3971,7 +3968,7 @@ ix86_comparison_operator (register rtx op, enum machine_mode mode)\n /* Return 1 if OP is a valid comparison operator testing carry flag\n    to be set.  */\n int\n-ix86_carry_flag_operator (register rtx op, enum machine_mode mode)\n+ix86_carry_flag_operator (rtx op, enum machine_mode mode)\n {\n   enum machine_mode inmode;\n   enum rtx_code code = GET_CODE (op);\n@@ -4003,7 +4000,7 @@ ix86_carry_flag_operator (register rtx op, enum machine_mode mode)\n /* Return 1 if OP is a comparison operator that can be issued by fcmov.  */\n \n int\n-fcmov_comparison_operator (register rtx op, enum machine_mode mode)\n+fcmov_comparison_operator (rtx op, enum machine_mode mode)\n {\n   enum machine_mode inmode;\n   enum rtx_code code = GET_CODE (op);\n@@ -4040,8 +4037,7 @@ fcmov_comparison_operator (register rtx op, enum machine_mode mode)\n /* Return 1 if OP is a binary operator that can be promoted to wider mode.  */\n \n int\n-promotable_binary_operator (register rtx op,\n-\t\t\t    enum machine_mode mode ATTRIBUTE_UNUSED)\n+promotable_binary_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))\n     {\n@@ -4065,7 +4061,7 @@ promotable_binary_operator (register rtx op,\n    into registers.  */\n \n int\n-cmp_fp_expander_operand (register rtx op, enum machine_mode mode)\n+cmp_fp_expander_operand (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4077,7 +4073,7 @@ cmp_fp_expander_operand (register rtx op, enum machine_mode mode)\n /* Match an SI or HImode register for a zero_extract.  */\n \n int\n-ext_register_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+ext_register_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   int regno;\n   if ((!TARGET_64BIT || GET_MODE (op) != DImode)\n@@ -4096,7 +4092,7 @@ ext_register_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n    OP is the expression matched, and MODE is its mode.  */\n \n int\n-binary_fp_operator (register rtx op, enum machine_mode mode)\n+binary_fp_operator (rtx op, enum machine_mode mode)\n {\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n@@ -4115,13 +4111,13 @@ binary_fp_operator (register rtx op, enum machine_mode mode)\n }\n \n int\n-mult_operator (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+mult_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return GET_CODE (op) == MULT;\n }\n \n int\n-div_operator (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+div_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return GET_CODE (op) == DIV;\n }\n@@ -4137,7 +4133,7 @@ arith_or_logical_operator (rtx op, enum machine_mode mode)\n /* Returns 1 if OP is memory operand with a displacement.  */\n \n int\n-memory_displacement_operand (register rtx op, enum machine_mode mode)\n+memory_displacement_operand (rtx op, enum machine_mode mode)\n {\n   struct ix86_address parts;\n \n@@ -4179,7 +4175,7 @@ cmpsi_operand (rtx op, enum machine_mode mode)\n    modRM array.  */\n \n int\n-long_memory_operand (register rtx op, enum machine_mode mode)\n+long_memory_operand (rtx op, enum machine_mode mode)\n {\n   if (! memory_operand (op, mode))\n     return 0;\n@@ -4375,8 +4371,8 @@ standard_sse_constant_p (rtx x)\n int\n symbolic_reference_mentioned_p (rtx op)\n {\n-  register const char *fmt;\n-  register int i;\n+  const char *fmt;\n+  int i;\n \n   if (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF)\n     return 1;\n@@ -4386,7 +4382,7 @@ symbolic_reference_mentioned_p (rtx op)\n     {\n       if (fmt[i] == 'E')\n \t{\n-\t  register int j;\n+\t  int j;\n \n \t  for (j = XVECLEN (op, i) - 1; j >= 0; j--)\n \t    if (symbolic_reference_mentioned_p (XVECEXP (op, i, j)))\n@@ -5052,7 +5048,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n static void\n ix86_emit_save_regs (void)\n {\n-  register int regno;\n+  int regno;\n   rtx insn;\n \n   for (regno = FIRST_PSEUDO_REGISTER - 1; regno >= 0; regno--)\n@@ -5429,7 +5425,7 @@ ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n    strictly valid, but still used for computing length of lea instruction.  */\n \n static int\n-ix86_decompose_address (register rtx addr, struct ix86_address *out)\n+ix86_decompose_address (rtx addr, struct ix86_address *out)\n {\n   rtx base = NULL_RTX;\n   rtx index = NULL_RTX;\n@@ -5791,7 +5787,7 @@ legitimate_pic_operand_p (rtx x)\n    in PIC mode.  */\n \n int\n-legitimate_pic_address_disp_p (register rtx disp)\n+legitimate_pic_address_disp_p (rtx disp)\n {\n   bool saw_plus;\n \n@@ -5905,7 +5901,7 @@ legitimate_pic_address_disp_p (register rtx disp)\n    be recognized.  */\n \n int\n-legitimate_address_p (enum machine_mode mode, register rtx addr, int strict)\n+legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;\n@@ -6473,8 +6469,7 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)\n    See comments by legitimize_pic_address in i386.c for details.  */\n \n rtx\n-legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n-\t\t    enum machine_mode mode)\n+legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n {\n   int changed = 0;\n   unsigned log;\n@@ -6614,8 +6609,8 @@ legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n \n       if (GET_CODE (XEXP (x, 0)) == REG)\n \t{\n-\t  register rtx temp = gen_reg_rtx (Pmode);\n-\t  register rtx val  = force_operand (XEXP (x, 1), temp);\n+\t  rtx temp = gen_reg_rtx (Pmode);\n+\t  rtx val  = force_operand (XEXP (x, 1), temp);\n \t  if (val != temp)\n \t    emit_move_insn (temp, val);\n \n@@ -6625,8 +6620,8 @@ legitimize_address (register rtx x, register rtx oldx ATTRIBUTE_UNUSED,\n \n       else if (GET_CODE (XEXP (x, 1)) == REG)\n \t{\n-\t  register rtx temp = gen_reg_rtx (Pmode);\n-\t  register rtx val  = force_operand (XEXP (x, 0), temp);\n+\t  rtx temp = gen_reg_rtx (Pmode);\n+\t  rtx val  = force_operand (XEXP (x, 0), temp);\n \t  if (val != temp)\n \t    emit_move_insn (temp, val);\n \n@@ -7508,7 +7503,7 @@ print_operand (FILE *file, rtx x, int code)\n /* Print a memory operand whose address is ADDR.  */\n \n void\n-print_operand_address (FILE *file, register rtx addr)\n+print_operand_address (FILE *file, rtx addr)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;"}, {"sha": "ed6b41aa9b3fc8a515e00a001ee4ce8e12acc064", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -65,13 +65,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register const unsigned char *_ascii_bytes =\t\t\t\\\n+      const unsigned char *_ascii_bytes =\t\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n-      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n-      register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n+      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register const unsigned char *p;\t\t\t\t\\\n+\t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "5fcd074f48b3574c47303c7a325a1b2994587e01", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -57,13 +57,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register const unsigned char *_ascii_bytes =\t\t\t\\\n+      const unsigned char *_ascii_bytes =\t\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n-      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n-      register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n+      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register const unsigned char *p;\t\t\t\t\\\n+\t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "244700637ececf3cd2812e7393f3826683fa3753", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d531ab9b1110beb65b77016193c0e4dfa97ff1f/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=8d531ab9b1110beb65b77016193c0e4dfa97ff1f", "patch": "@@ -52,13 +52,13 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      register const unsigned char *_ascii_bytes =\t\t\t\\\n+      const unsigned char *_ascii_bytes =\t\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n-      register const unsigned char *limit = _ascii_bytes + (LENGTH);\t\\\n-      register unsigned bytes_in_chunk = 0;\t\t\t\t\\\n+      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n+      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  register const unsigned char *p;\t\t\t\t\\\n+\t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      fputc ('\\n', (FILE));\t\t\t\t\t\\"}]}