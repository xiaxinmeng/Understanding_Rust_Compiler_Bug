{"sha": "e3c4580e400367dfceec3e4c0539b43fcb4ed340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjNDU4MGU0MDAzNjdkZmNlZWMzZTRjMDUzOWI0M2ZjYjRlZDM0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-24T16:08:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-24T16:08:50Z"}, "message": "einfo.ads (Size_Depends_On_Discriminant): Adjust description.\n\n\t* einfo.ads (Size_Depends_On_Discriminant): Adjust description.\n\t* layout.adb (Compute_Size_Depends_On_Discriminant): New procedure\n\tto compute Set_Size_Depends_On_Discriminant.\n\t(Layout_Type): Call it on array types in back-end layout mode.\n\t* sem_util.adb (Requires_Transient_Scope): Return true for array\n\ttypes only if the size depends on the value of discriminants.\n\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Use the RHS\n\ttype if the RHS is a call to a function that returns an unconstrained\n\ttype with default discriminant.\n\nFrom-SVN: r171402", "tree": {"sha": "b9005d8dcb786199a152d4e3d91717ba40010452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9005d8dcb786199a152d4e3d91717ba40010452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3c4580e400367dfceec3e4c0539b43fcb4ed340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c4580e400367dfceec3e4c0539b43fcb4ed340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c4580e400367dfceec3e4c0539b43fcb4ed340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c4580e400367dfceec3e4c0539b43fcb4ed340/comments", "author": null, "committer": null, "parents": [{"sha": "cf4a36dfe1135dce070ac1d5a570e00a3eaac0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4a36dfe1135dce070ac1d5a570e00a3eaac0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4a36dfe1135dce070ac1d5a570e00a3eaac0be"}], "stats": {"total": 160, "additions": 151, "deletions": 9}, "files": [{"sha": "a76fb316494df12770af9fdf66eb526e1af7e095", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -1,3 +1,15 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Size_Depends_On_Discriminant): Adjust description.\n+\t* layout.adb (Compute_Size_Depends_On_Discriminant): New procedure\n+\tto compute Set_Size_Depends_On_Discriminant.\n+\t(Layout_Type): Call it on array types in back-end layout mode.\n+\t* sem_util.adb (Requires_Transient_Scope): Return true for array\n+\ttypes only if the size depends on the value of discriminants.\n+\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Use the RHS\n+\ttype if the RHS is a call to a function that returns an unconstrained\n+\ttype with default discriminant.\n+\n 2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Remove obsolete case of"}, {"sha": "051688ae376e7f5135be24911eef8ff62755d084", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                         --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3573,8 +3573,8 @@ package Einfo is\n --    Size_Depends_On_Discriminant (Flag177)\n --       Present in all entities for types and subtypes. Indicates that the\n --       size of the type depends on the value of one or more discriminants.\n---       Currently, this flag is only set in front end layout mode for arrays\n---       which have one or more bounds depending on a discriminant value.\n+--       Currently, this flag is only set for arrays which have one or more\n+--       bounds depending on a discriminant value.\n \n --    Size_Known_At_Compile_Time (Flag92)\n --       Present in all entities for types and subtypes. Indicates that the"}, {"sha": "78f5fd94c336d63940568200306321f84814601a", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -186,7 +186,7 @@ known_alignment (tree exp)\n static tree\n find_common_type (tree t1, tree t2)\n {\n-  /* ??? As of today, various constructs lead here with types of different\n+  /* ??? As of today, various constructs lead to here with types of different\n      sizes even when both constants (e.g. tagged types, packable vs regular\n      component types, padded vs unpadded types, ...).  While some of these\n      would better be handled upstream (types should be made consistent before\n@@ -609,6 +609,15 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t       && !integer_zerop (TYPE_SIZE (right_type)))\n \toperation_type = left_type;\n \n+      /* If we have a call to a function that returns an unconstrained type\n+\t with default discriminant on the RHS, use the RHS type (which is\n+\t padded) as we cannot compute the size of the actual assignment.  */\n+      else if (TREE_CODE (right_operand) == CALL_EXPR\n+\t       && TYPE_IS_PADDING_P (right_type)\n+\t       && CONTAINS_PLACEHOLDER_P\n+\t\t  (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (right_type)))))\n+\toperation_type = right_type;\n+\n       /* Find the best type to use for copying between aggregate types.  */\n       else if (((TREE_CODE (left_type) == ARRAY_TYPE\n \t\t && TREE_CODE (right_type) == ARRAY_TYPE)"}, {"sha": "7ae89b53f27c6a511aa4a1481c18d82acf150373", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,6 +109,12 @@ package body Layout is\n    --  are of an enumeration type (so that the subtraction cannot be\n    --  done directly) by applying the Pos operator to Hi/Lo first.\n \n+   procedure Compute_Size_Depends_On_Discriminant (E : Entity_Id);\n+   --  Given an array type or an array subtype E, compute whether its size\n+   --  depends on the value of one or more discriminants and set the flag\n+   --  Size_Depends_On_Discriminant accordingly. This need not be called\n+   --  in front end layout mode since it does the computation on its own.\n+\n    function Expr_From_SO_Ref\n      (Loc  : Source_Ptr;\n       D    : SO_Ref;\n@@ -1289,6 +1295,49 @@ package body Layout is\n       end if;\n    end Layout_Array_Type;\n \n+   ------------------------------------------\n+   -- Compute_Size_Depends_On_Discriminant --\n+   ------------------------------------------\n+\n+   procedure Compute_Size_Depends_On_Discriminant (E : Entity_Id) is\n+      Indx : Node_Id;\n+      Ityp : Entity_Id;\n+      Lo   : Node_Id;\n+      Hi   : Node_Id;\n+      Res  : Boolean := False;\n+   begin\n+      --  Loop to process array indexes\n+\n+      Indx := First_Index (E);\n+      while Present (Indx) loop\n+         Ityp := Etype (Indx);\n+\n+         --  If an index of the array is a generic formal type then there is\n+         --  no point in determining a size for the array type.\n+\n+         if Is_Generic_Type (Ityp) then\n+            return;\n+         end if;\n+\n+         Lo := Type_Low_Bound (Ityp);\n+         Hi := Type_High_Bound (Ityp);\n+\n+         if (Nkind (Lo) = N_Identifier\n+               and then Ekind (Entity (Lo)) = E_Discriminant)\n+           or else (Nkind (Hi) = N_Identifier\n+                      and then Ekind (Entity (Hi)) = E_Discriminant)\n+         then\n+            Res := True;\n+         end if;\n+\n+         Next_Index (Indx);\n+      end loop;\n+\n+      if Res then\n+         Set_Size_Depends_On_Discriminant (E);\n+      end if;\n+   end Compute_Size_Depends_On_Discriminant;\n+\n    -------------------\n    -- Layout_Object --\n    -------------------\n@@ -2631,6 +2680,15 @@ package body Layout is\n                   Set_Alignment (E, Uint_1);\n                end if;\n             end if;\n+\n+            --  We need to know whether the size depends on the value of one\n+            --  or more discriminants to select the return mechanism. Skip if\n+            --  errors are present, to prevent cascaded messages.\n+\n+            if Serious_Errors_Detected = 0 then\n+               Compute_Size_Depends_On_Discriminant (E);\n+            end if;\n+\n          end if;\n       end if;\n "}, {"sha": "3a6ca5f34566d6f4577c53e82ba818a347b59b91", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -10473,11 +10473,11 @@ package body Sem_Util is\n          if Requires_Transient_Scope (Component_Type (Typ)) then\n             return True;\n \n-         --  Otherwise, we only need a transient scope if the size is not\n-         --  known at compile time.\n+         --  Otherwise, we only need a transient scope if the size depends on\n+         --  the value of one or more discriminants.\n \n          else\n-            return not Size_Known_At_Compile_Time (Typ);\n+            return Size_Depends_On_Discriminant (Typ);\n          end if;\n \n       --  All other cases do not require a transient scope"}, {"sha": "dab36a8c6842dfd552ae563c9aac69a2fe5f429f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -1,3 +1,8 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array16.ad[sb]: New test.\n+\t* gnat.dg/array16.ads: New helper.\n+\n 2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/derived_type2.adb: New test."}, {"sha": "18abf8f8199d61fb8ac39be387dab94628a06276", "filename": "gcc/testsuite/gnat.dg/array16.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.adb?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -0,0 +1,22 @@\n+package body Array16 is\n+\n+  function F1 (A : access My_T1) return My_T1 is\n+  begin\n+    return A.all;\n+  end;\n+\n+  function F2 (A : access My_T2) return My_T2 is\n+  begin\n+    return A.all;\n+  end;\n+\n+  procedure Proc (A : access My_T1; B : access My_T2) is\n+    L1 : My_T1 := F1(A);\n+    L2 : My_T2 := F2(B);\n+  begin\n+    if L1.D = 0 and then L2(1) = 0 then\n+      raise Program_Error;\n+    end if;\n+  end;\n+\n+end Array16;"}, {"sha": "69452c98f3ae525b11c8554aea5d98606f2adad5", "filename": "gcc/testsuite/gnat.dg/array16.ads", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray16.ads?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn -fdump-tree-optimized\" }\n+\n+with Array16_Pkg;\n+\n+package Array16 is\n+\n+  type T1 (D : Integer) is record\n+    case D is\n+      when 1 => I : Integer;\n+      when others => null;\n+    end case;\n+  end record;\n+\n+  type Arr is array (Integer range <>) of Integer;\n+\n+  type My_T1 is new T1 (Array16_Pkg.N);\n+  type My_T2 is new Arr (1 .. Integer'Min (2, Array16_Pkg.N));\n+\n+  function F1 (A : access My_T1) return My_T1;\n+  pragma Inline (F1);\n+\n+  function F2 (A : access My_T2) return My_T2;\n+  pragma Inline (F2);\n+\n+  procedure Proc (A : access My_T1; B : access My_T2);\n+\n+end Array16;\n+\n+-- { dg-final { scan-tree-dump-not \"secondary_stack\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "93447978cd4c2ea92151ef1356a99f060ee2480e", "filename": "gcc/testsuite/gnat.dg/array16_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c4580e400367dfceec3e4c0539b43fcb4ed340/gcc%2Ftestsuite%2Fgnat.dg%2Farray16_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray16_pkg.ads?ref=e3c4580e400367dfceec3e4c0539b43fcb4ed340", "patch": "@@ -0,0 +1,5 @@\n+package Array16_Pkg is\n+\n+  function N return Integer;\n+\n+end Array16_Pkg;"}]}