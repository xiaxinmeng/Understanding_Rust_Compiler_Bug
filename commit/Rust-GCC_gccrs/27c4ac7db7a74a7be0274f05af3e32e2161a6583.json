{"sha": "27c4ac7db7a74a7be0274f05af3e32e2161a6583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjNGFjN2RiN2E3NGE3YmUwMjc0ZjA1YWYzZTMyZTIxNjFhNjU4Mw==", "commit": {"author": {"name": "Maxim Blumenthal", "email": "maxim.blumenthal@intel.com", "date": "2015-07-22T17:19:31Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2015-07-22T17:19:31Z"}, "message": "re PR libgomp/66950 (FAIL: libgomp.fortran/examples-4/simd-7.f90   -O0  execution test)\n\n2015-07-22  Maxim Blumenthal  <maxim.blumenthal@intel.com>\n\n\tPR libgomp/66950\n\t* testsuite/libgomp.c/examples-4/simd-7.c (N): Change to 30 from 45.\n\t(fib_ref): New function.\n\t(fib): Correct corner cases in the recursion.\n\t(main): Replace the non-simd loop with fib_ref call.\n\t* testsuite/libgomp.fortran/examples-4/simd-7.f90: (fib_ref): New\n\tsubroutine.\n\t(fibonacci): Lower the parameter N to 30.  Correct accordingly check\n\tfor the last array element value.  Replace the non-simd loop with\n\tfib_ref call.  Remove redundant b_ref array.  Remove the comparison\n\tof the last array element with according Fibonacci sequence element.\n\t(fib): Correct corner cases in the recursion.\n\nFrom-SVN: r226080", "tree": {"sha": "a74c00aa96cbb32759da71a0fb1850a630b9e8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74c00aa96cbb32759da71a0fb1850a630b9e8a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c4ac7db7a74a7be0274f05af3e32e2161a6583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c4ac7db7a74a7be0274f05af3e32e2161a6583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c4ac7db7a74a7be0274f05af3e32e2161a6583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c4ac7db7a74a7be0274f05af3e32e2161a6583/comments", "author": null, "committer": null, "parents": [{"sha": "19e18903509cecc57e073de78e04f7603cf8e166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e18903509cecc57e073de78e04f7603cf8e166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e18903509cecc57e073de78e04f7603cf8e166"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "d8d37cf7329261e62a60417c840f2a99c0cb9ff8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=27c4ac7db7a74a7be0274f05af3e32e2161a6583", "patch": "@@ -1,3 +1,18 @@\n+2015-07-22  Maxim Blumenthal  <maxim.blumenthal@intel.com>\n+\n+\tPR libgomp/66950\n+\t* testsuite/libgomp.c/examples-4/simd-7.c (N): Change to 30 from 45.\n+\t(fib_ref): New function.\n+\t(fib): Correct corner cases in the recursion.\n+\t(main): Replace the non-simd loop with fib_ref call.\n+\t* testsuite/libgomp.fortran/examples-4/simd-7.f90: (fib_ref): New\n+\tsubroutine.\n+\t(fibonacci): Lower the parameter N to 30.  Correct accordingly check\n+\tfor the last array element value.  Replace the non-simd loop with\n+\tfib_ref call.  Remove redundant b_ref array.  Remove the comparison\n+\tof the last array element with according Fibonacci sequence element.\n+\t(fib): Correct corner cases in the recursion.\n+\n 2015-07-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* target.c (gomp_offload_image_to_device): Rename to ..."}, {"sha": "732cd9179f6e1bb380ce345deceb2f2518d43750", "filename": "libgomp/testsuite/libgomp.c/examples-4/simd-7.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2Ftestsuite%2Flibgomp.c%2Fexamples-4%2Fsimd-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2Ftestsuite%2Flibgomp.c%2Fexamples-4%2Fsimd-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fexamples-4%2Fsimd-7.c?ref=27c4ac7db7a74a7be0274f05af3e32e2161a6583", "patch": "@@ -5,17 +5,27 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n-#define N 45\n+#define N 30\n int a[N], a_ref[N], b[N];\n \n #pragma omp declare simd inbranch\n int fib( int n )\n {\n-   if (n <= 2)\n-      return n;\n-   else {\n-      return fib(n-1) + fib(n-2);\n-   }\n+  if (n <= 1)\n+    return n;\n+  else\n+    return fib(n-1) + fib(n-2);\n+}\n+\n+void fib_ref()\n+{\n+  int i;\n+\n+  a_ref[0] = 0;\n+  a_ref[1] = 1;\n+\n+  for (i=2; i < N; i++)\n+    a_ref[i] = a_ref[i-2] + a_ref[i-1];\n }\n \n int main(void)\n@@ -30,8 +40,7 @@ int main(void)\n   for (i=0; i < N; i++)\n     a[i] = fib(b[i]);\n \n-  for (i=0; i < N; i++)\n-    a_ref[i] = fib(b[i]);\n+  fib_ref ();\n \n   for (i=0; i < N; i++)\n     if (a[i] != a_ref[i])"}, {"sha": "7560657050391f358d1af790b8bc873901458500", "filename": "libgomp/testsuite/libgomp.fortran/examples-4/simd-7.f90", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fexamples-4%2Fsimd-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c4ac7db7a74a7be0274f05af3e32e2161a6583/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fexamples-4%2Fsimd-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fexamples-4%2Fsimd-7.f90?ref=27c4ac7db7a74a7be0274f05af3e32e2161a6583", "patch": "@@ -4,9 +4,9 @@\n \n program fibonacci\n    implicit none\n-   integer,parameter :: N=45\n+   integer,parameter :: N=30\n    integer           :: a(0:N-1), b(0:N-1)\n-   integer           :: a_ref(0:N-1), b_ref(0:N-1)\n+   integer           :: a_ref(0:N-1)\n    integer           :: i\n    integer, external :: fib\n \n@@ -15,35 +15,39 @@ program fibonacci\n       b(i) = i\n    end do\n \n-   do i = 0,N-1\n-      b_ref(i) = i\n-   end do\n-\n    !$omp simd\n    do i=0,N-1\n       a(i) = fib(b(i))\n    end do\n \n-   do i=0,N-1\n-      a_ref(i) = fib(b_ref(i))\n-   end do\n+   call fib_ref (a_ref, N)\n \n    do i = 0, N-1\n      if (a(i) .ne. a_ref(i)) call abort ()\n    end do\n \n-   if (a(44) .ne. 1134903170) call abort()\n-\n end program\n \n recursive function fib(n) result(r)\n !$omp declare simd(fib) inbranch\n    integer  :: n, r\n \n-   if (n <= 2) then\n-      r = n\n+   if (n <= 1) then\n+       r = n\n    else\n       r = fib(n-1) + fib(n-2)\n    endif\n \n end function fib\n+\n+subroutine fib_ref(a_ref, n)\n+   integer  :: n, a_ref(0:n-1)\n+\n+   a_ref(0) = 0\n+   a_ref(1) = 1\n+\n+   do i = 2, n-1\n+     a_ref(i) = a_ref(i-1) + a_ref(i-2)\n+   end do\n+\n+end subroutine fib_ref"}]}