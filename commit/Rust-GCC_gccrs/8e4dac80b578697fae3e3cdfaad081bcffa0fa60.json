{"sha": "8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU0ZGFjODBiNTc4Njk3ZmFlM2UzY2RmYWFkMDgxYmNmZmEwZmE2MA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-10-21T13:17:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T13:17:43Z"}, "message": "sem_res.adb, [...]: Minor reformatting.\n\n2010-10-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb, exp_ch13.adb: Minor reformatting.\n\n2010-10-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch3.adb (Check_Or_Process_Discriminant): Reject illegal attempt\n\tto provide a tagged full view as the completion of an untagged partial\n\tview if the partial view has a discriminant with default.\n\nFrom-SVN: r165775", "tree": {"sha": "8c1fa86559373187743fbc8509ce7ea28259fc8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1fa86559373187743fbc8509ce7ea28259fc8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/comments", "author": null, "committer": null, "parents": [{"sha": "77a74ed7f000c8381733dcce7849621bd56b2f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a74ed7f000c8381733dcce7849621bd56b2f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a74ed7f000c8381733dcce7849621bd56b2f90"}], "stats": {"total": 113, "additions": 78, "deletions": 35}, "files": [{"sha": "587474f438712b89f62ac1ab265f5cac877e6c46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "patch": "@@ -1,3 +1,13 @@\n+2010-10-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb, exp_ch13.adb: Minor reformatting.\n+\n+2010-10-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Or_Process_Discriminant): Reject illegal attempt\n+\tto provide a tagged full view as the completion of an untagged partial\n+\tview if the partial view has a discriminant with default.\n+\n 2010-10-21  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies."}, {"sha": "eaf90f7c02bead74ed31090732beba6ba9103e89", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "patch": "@@ -105,8 +105,8 @@ package body Exp_Ch13 is\n       --  is build by connecting the component predicates with AND THEN.\n \n       procedure Add_Call (T : Entity_Id);\n-      --  Includes a call statement to the predicate function for type T in\n-      --  Expr if T has predicates and Predicate_Function (T) is non-empty.\n+      --  Includes a call to the predicate function for type T in Expr if T\n+      --  has predicates and Predicate_Function (T) is non-empty.\n \n       procedure Add_Predicates;\n       --  Appends expressions for any Predicate pragmas in the rep item chain\n@@ -125,15 +125,12 @@ package body Exp_Ch13 is\n          Exp : Node_Id;\n \n       begin\n-         if Present (T)\n-           and then Present (Predicate_Function (T))\n-         then\n+         if Present (T) and then Present (Predicate_Function (T)) then\n             Exp :=\n               Make_Predicate_Call\n                 (T,\n                  Convert_To (T,\n-                   Make_Identifier (Loc,\n-                     Chars => Object_Name)));\n+                   Make_Identifier (Loc, Chars => Object_Name)));\n \n             if No (Expr) then\n                Expr := Exp;\n@@ -170,9 +167,8 @@ package body Exp_Ch13 is\n          begin\n             --  Case of entity name referencing the type\n \n-            if Is_Entity_Name (N)\n-              and then Entity (N) = Typ\n-            then\n+            if Is_Entity_Name (N) and then Entity (N) = Typ then\n+\n                --  Replace with object\n \n                Rewrite (N,\n@@ -183,13 +179,15 @@ package body Exp_Ch13 is\n \n                return Skip;\n \n-            --  Not an instance of the type entity, keep going\n+            --  Not an occurrence of the type entity, keep going\n \n             else\n                return OK;\n             end if;\n          end Replace_Node;\n \n+      --  Start of processing for Add_Predicates\n+\n       begin\n          Ritem := First_Rep_Item (Typ);\n          while Present (Ritem) loop\n@@ -208,7 +206,7 @@ package body Exp_Ch13 is\n                --  looking for the type entity, doing the needed substitution.\n                --  The preanalysis is done with the special OK_To_Reference\n                --  flag set on the type, so that if we get an occurrence of\n-               --  this type, it will be reognized as legitimate.\n+               --  this type, it will be recognized as legitimate.\n \n                Set_OK_To_Reference (Typ, True);\n                Preanalyze_Spec_Expression (Arg2, Standard_Boolean);\n@@ -241,7 +239,7 @@ package body Exp_Ch13 is\n    begin\n       --  Initialize for construction of statement list\n \n-      Expr := Empty;\n+      Expr  := Empty;\n       FDecl := Empty;\n       FBody := Empty;\n \n@@ -289,6 +287,7 @@ package body Exp_Ch13 is\n                loop\n                   Elmt := First_Elmt (Iface_List);\n                   exit when No (Elmt);\n+\n                   Add_Call (Node (Elmt));\n                   Remove_Elmt (Iface_List, Elmt);\n                end loop;\n@@ -313,10 +312,8 @@ package body Exp_Ch13 is\n              Parameter_Specifications => New_List (\n                Make_Parameter_Specification (Loc,\n                  Defining_Identifier =>\n-                   Make_Defining_Identifier (Loc,\n-                     Chars => Object_Name),\n-                 Parameter_Type =>\n-                   New_Occurrence_Of (Typ, Loc))),\n+                   Make_Defining_Identifier (Loc, Chars => Object_Name),\n+                 Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n              Result_Definition        =>\n                New_Occurrence_Of (Standard_Boolean, Loc));\n \n@@ -336,8 +333,7 @@ package body Exp_Ch13 is\n              Parameter_Specifications => New_List (\n                Make_Parameter_Specification (Loc,\n                  Defining_Identifier =>\n-                   Make_Defining_Identifier (Loc,\n-                     Chars => Object_Name),\n+                   Make_Defining_Identifier (Loc, Chars => Object_Name),\n                  Parameter_Type =>\n                    New_Occurrence_Of (Typ, Loc))),\n              Result_Definition        =>\n@@ -737,7 +733,7 @@ package body Exp_Ch13 is\n          end;\n       end if;\n \n-      --  Pop scope if we intalled one for the analysis\n+      --  Pop scope if we installed one for the analysis\n \n       if In_Other_Scope then\n          if Ekind (Current_Scope) = E_Package then"}, {"sha": "f29e747c5efb23440e01347a5cfaf2dfc436e2b1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "patch": "@@ -284,9 +284,11 @@ package body Sem_Ch3 is\n      (N    : Node_Id;\n       T    : Entity_Id;\n       Prev : Entity_Id := Empty);\n-   --  If T is the full declaration of an incomplete or private type, check the\n-   --  conformance of the discriminants, otherwise process them. Prev is the\n-   --  entity of the partial declaration, if any.\n+   --  If N is the full declaration of the completion T of an incomplete or\n+   --  private type, check its discriminants (which are already known to be\n+   --  conformant with those of the partial view, see Find_Type_Name),\n+   --  otherwise process them. Prev is the entity of the partial declaration,\n+   --  if any.\n \n    procedure Check_Real_Bound (Bound : Node_Id);\n    --  Check given bound for being of real type and static. If not, post an\n@@ -9589,7 +9591,9 @@ package body Sem_Ch3 is\n    --  If an incomplete or private type declaration was already given for the\n    --  type, the discriminants may have already been processed if they were\n    --  present on the incomplete declaration. In this case a full conformance\n-   --  check is performed otherwise just process them.\n+   --  check has been performed in Find_Type_Name, and we then recheck here\n+   --  some properties that can't be checked on the partial view alone.\n+   --  Otherwise we call Process_Discriminants.\n \n    procedure Check_Or_Process_Discriminants\n      (N    : Node_Id;\n@@ -9599,19 +9603,46 @@ package body Sem_Ch3 is\n    begin\n       if Has_Discriminants (T) then\n \n-         --  Make the discriminants visible to component declarations\n+         --  Discriminants are already set on T if they were already present\n+         --  on the partial view. Make them visible to component declarations.\n \n          declare\n             D    : Entity_Id;\n-            Prev : Entity_Id;\n+            --  Discriminant on T (full view) referencing expression on partial\n+            --  view.\n+\n+            Prev_D : Entity_Id;\n+            --  Entity of corresponding discriminant on partial view\n \n+            New_D : Node_Id;\n+            --  Discriminant specification for full view, expression is the\n+            --  syntactic copy on full view (which has been checked for\n+            --  conformance with partial view), only used here to post error\n+            --  message.\n          begin\n             D := First_Discriminant (T);\n+            New_D := First (Discriminant_Specifications (N));\n+\n             while Present (D) loop\n-               Prev := Current_Entity (D);\n+               Prev_D := Current_Entity (D);\n                Set_Current_Entity (D);\n                Set_Is_Immediately_Visible (D);\n-               Set_Homonym (D, Prev);\n+               Set_Homonym (D, Prev_D);\n+\n+               --  Handle the case where there is an untagged partial view and\n+               --  the full view is tagged: must disallow discriminants with\n+               --  defaults. However suppress the error here if it was already\n+               --  reported on the default expression of the partial view.\n+\n+               if Is_Tagged_Type (T)\n+                    and then Present (Expression (Parent (D)))\n+                    and then not Error_Posted (Expression (Parent (D)))\n+               then\n+                  Error_Msg_N\n+                    (\"discriminants of tagged type \"\n+                     & \"cannot have defaults\",\n+                     Expression (New_D));\n+               end if;\n \n                --  Ada 2005 (AI-230): Access discriminant allowed in\n                --  non-limited record types.\n@@ -9625,6 +9656,7 @@ package body Sem_Ch3 is\n                end if;\n \n                Next_Discriminant (D);\n+               Next (New_D);\n             end loop;\n          end;\n \n@@ -16354,13 +16386,18 @@ package body Sem_Ch3 is\n                  (\"discriminant defaults not allowed for formal type\",\n                   Expression (Discr));\n \n-            --  Tagged types declarations cannot have defaulted discriminants,\n-            --  but an untagged private type with defaulted discriminants can\n-            --  have a tagged completion.\n-\n             elsif Is_Tagged_Type (Current_Scope)\n-              and then Comes_From_Source (N)\n+                    and then Comes_From_Source (N)\n             then\n+               --  Note: see also similar test in Check_Or_Process_\n+               --  Discriminants, to handle the (illegal) case of the\n+               --  completion of an untagged view with discriminants\n+               --  with defaults by a tagged full view. We skip the check if\n+               --  Discr does not come from source to account for the case of\n+               --  an untagged derived type providing defaults for a renamed\n+               --  discriminant from a private nontagged ancestor with a tagged\n+               --  full view (ACATS B460006).\n+\n                Error_Msg_N\n                  (\"discriminants of tagged type cannot have defaults\",\n                   Expression (Discr));"}, {"sha": "7c823a8b2612031dad79d890d6d15780bec471b8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4dac80b578697fae3e3cdfaad081bcffa0fa60/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=8e4dac80b578697fae3e3cdfaad081bcffa0fa60", "patch": "@@ -3848,8 +3848,8 @@ package body Sem_Res is\n \n             Eval_Actual (A);\n \n-            --  If it is a named association, treat the selector_name as\n-            --  a proper identifier, and mark the corresponding entity.\n+            --  If it is a named association, treat the selector_name as a\n+            --  proper identifier, and mark the corresponding entity.\n \n             if Nkind (Parent (A)) = N_Parameter_Association then\n                Set_Entity (Selector_Name (Parent (A)), F);"}]}