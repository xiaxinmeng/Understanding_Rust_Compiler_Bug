{"sha": "7a613929211d2cbf23e3bb84449fc6e8784d282d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2MTM5MjkyMTFkMmNiZjIzZTNiYjg0NDQ5ZmM2ZTg3ODRkMjgyZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-12-19T22:05:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-12-19T22:05:28Z"}, "message": "fwprop.c (forward_propagate_subreg): Skip the SIGN/ZERO_EXTEND optimization if the source register is already extended.\n\ngcc/\n\t* fwprop.c (forward_propagate_subreg): Skip the SIGN/ZERO_EXTEND\n\toptimization if the source register is already extended.\n\nFrom-SVN: r182504", "tree": {"sha": "d85d6b18ecb9ac9bd6cda93a35bfe777c53a9b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85d6b18ecb9ac9bd6cda93a35bfe777c53a9b57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a613929211d2cbf23e3bb84449fc6e8784d282d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a613929211d2cbf23e3bb84449fc6e8784d282d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a613929211d2cbf23e3bb84449fc6e8784d282d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a613929211d2cbf23e3bb84449fc6e8784d282d/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "373203331a996c31730602ff42127b93cf1ecdad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373203331a996c31730602ff42127b93cf1ecdad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373203331a996c31730602ff42127b93cf1ecdad"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "92be4a07fe41f4b8fca1076baf6e1eeaf2bb5961", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a613929211d2cbf23e3bb84449fc6e8784d282d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a613929211d2cbf23e3bb84449fc6e8784d282d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a613929211d2cbf23e3bb84449fc6e8784d282d", "patch": "@@ -1,3 +1,8 @@\n+2011-12-19  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* fwprop.c (forward_propagate_subreg): Skip the SIGN/ZERO_EXTEND\n+\toptimization if the source register is already extended.\n+\n 2011-12-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* lower-subreg.c (can_decompose_p): Check every word of a hard"}, {"sha": "4fab5b060725edabb848f39a77a9e51649047825", "filename": "gcc/fwprop.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a613929211d2cbf23e3bb84449fc6e8784d282d/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a613929211d2cbf23e3bb84449fc6e8784d282d/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=7a613929211d2cbf23e3bb84449fc6e8784d282d", "patch": "@@ -1112,7 +1112,18 @@ forward_propagate_subreg (df_ref use, rtx def_insn, rtx def_set)\n   /* If this is a SUBREG of a ZERO_EXTEND or SIGN_EXTEND, and the SUBREG\n      is the low part of the reg being extended then just use the inner\n      operand.  Don't do this if the ZERO_EXTEND or SIGN_EXTEND insn will\n-     be removed due to it matching a LOAD_EXTEND_OP load from memory.  */\n+     be removed due to it matching a LOAD_EXTEND_OP load from memory,\n+     or due to the operation being a no-op when applied to registers.\n+     For example, if we have:\n+\n+\t A: (set (reg:DI X) (sign_extend:DI (reg:SI Y)))\n+\t B: (... (subreg:SI (reg:DI X)) ...)\n+\n+     and mode_rep_extended says that Y is already sign-extended,\n+     the backend will typically allow A to be combined with the\n+     definition of Y or, failing that, allow A to be deleted after\n+     reload through register tying.  Introducing more uses of Y\n+     prevents both optimisations.  */\n   else if (subreg_lowpart_p (use_reg))\n     {\n       use_insn = DF_REF_INSN (use);\n@@ -1123,6 +1134,8 @@ forward_propagate_subreg (df_ref use, rtx def_insn, rtx def_set)\n \t  && REGNO (XEXP (src, 0)) >= FIRST_PSEUDO_REGISTER\n \t  && GET_MODE (XEXP (src, 0)) == use_mode\n \t  && !free_load_extend (src, def_insn)\n+\t  && (targetm.mode_rep_extended (use_mode, GET_MODE (src))\n+\t      != (int) GET_CODE (src))\n \t  && all_uses_available_at (def_insn, use_insn))\n \treturn try_fwprop_subst (use, DF_REF_LOC (use), XEXP (src, 0),\n \t\t\t\t def_insn, false);"}]}