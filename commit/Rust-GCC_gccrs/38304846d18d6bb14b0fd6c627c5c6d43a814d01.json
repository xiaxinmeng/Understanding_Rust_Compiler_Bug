{"sha": "38304846d18d6bb14b0fd6c627c5c6d43a814d01", "node_id": "C_kwDOANBUbNoAKDM4MzA0ODQ2ZDE4ZDZiYjE0YjBmZDZjNjI3YzVjNmQ0M2E4MTRkMDE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T20:38:47Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T20:38:47Z"}, "message": "c++: partial ordering with memfn ptr cst [PR108104]\n\nHere we're triggering an overzealous assert in unify during partial\nordering since the member function pointer constants are represented as\nordinary CONSTRUCTORs (with TYPE_PTRMEMFUNC_P TREE_TYPE) but the assert\nexpects COMPOUND_LITERAL_P constructors.\n\n\tPR c++/108104\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (unify) <default>: Relax assert to accept any\n\tCONSTRUCTOR parm, not just COMPOUND_LITERAL_P one.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/ptrmem33.C: New test.", "tree": {"sha": "8f6474af6dd0b50f264b3736c481a7cbbd7965d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6474af6dd0b50f264b3736c481a7cbbd7965d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38304846d18d6bb14b0fd6c627c5c6d43a814d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38304846d18d6bb14b0fd6c627c5c6d43a814d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38304846d18d6bb14b0fd6c627c5c6d43a814d01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38304846d18d6bb14b0fd6c627c5c6d43a814d01/comments", "author": null, "committer": null, "parents": [{"sha": "12abd5a7d13209f79664ea603b3f3517f71b8c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12abd5a7d13209f79664ea603b3f3517f71b8c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12abd5a7d13209f79664ea603b3f3517f71b8c4f"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "efd4eaa9afda762d7bb1a01a6b3ede61d416a230", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38304846d18d6bb14b0fd6c627c5c6d43a814d01/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38304846d18d6bb14b0fd6c627c5c6d43a814d01/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=38304846d18d6bb14b0fd6c627c5c6d43a814d01", "patch": "@@ -24873,7 +24873,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       if (is_overloaded_fn (parm) || type_unknown_p (parm))\n \treturn unify_success (explain_p);\n       gcc_assert (EXPR_P (parm)\n-\t\t  || COMPOUND_LITERAL_P (parm)\n+\t\t  || TREE_CODE (parm) == CONSTRUCTOR\n \t\t  || TREE_CODE (parm) == TRAIT_EXPR);\n     expr:\n       /* We must be looking at an expression.  This can happen with"}, {"sha": "dca741ae5e2a793acb7199bf3faa6efbe2a947f9", "filename": "gcc/testsuite/g++.dg/template/ptrmem33.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38304846d18d6bb14b0fd6c627c5c6d43a814d01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38304846d18d6bb14b0fd6c627c5c6d43a814d01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem33.C?ref=38304846d18d6bb14b0fd6c627c5c6d43a814d01", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/108104\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  void x();\n+  void y();\n+};\n+\n+enum State { On };\n+\n+template<State state, void (A::*)()>\n+struct B {\n+  static void f();\n+};\n+\n+template<State state>\n+struct B<state, nullptr> {\n+  static void g();\n+};\n+\n+template<State state>\n+struct B<state, &A::y> {\n+  static void h();\n+};\n+\n+int main() {\n+  B<State::On, &A::x>::f();\n+  B<State::On, nullptr>::g();\n+  B<State::On, &A::y>::h();\n+}"}]}