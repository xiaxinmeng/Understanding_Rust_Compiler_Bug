{"sha": "096f8215d2172ca4177cb26035e748d8f182fc8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2ZjgyMTVkMjE3MmNhNDE3N2NiMjYwMzVlNzQ4ZDhmMTgyZmM4Zg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-05-11T03:13:27Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-05-11T05:09:27Z"}, "message": "vect: Add costing_for_scalar parameter to init_cost hook\n\nrs6000 port function rs6000_density_test wants to differentiate the\ncurrent cost model is for the scalar version of a loop or block, or\nthe vector version.  As Richi suggested, this patch introduces one\nnew parameter costing_for_scalar to init_cost hook to pass down this\ninformation explicitly.\n\ngcc/ChangeLog:\n\n\t* doc/tm.texi: Regenerated.\n\t* target.def (init_cost): Add new parameter costing_for_scalar.\n\t* targhooks.c (default_init_cost): Adjust for new parameter.\n\t* targhooks.h (default_init_cost): Likewise.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Likewise.\n\t(vect_compute_single_scalar_iteration_cost): Likewise.\n\t(vect_analyze_loop_2): Likewise.\n\t* tree-vect-slp.c (_bb_vec_info::_bb_vec_info): Likewise.\n\t(vect_bb_vectorization_profitable_p): Likewise.\n\t* tree-vectorizer.h (init_cost): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_init_cost): Likewise.\n\t* config/i386/i386.c (ix86_init_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_init_cost): Likewise.", "tree": {"sha": "e16da3ffb4a5a674682742234c5d47abc96e9d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e16da3ffb4a5a674682742234c5d47abc96e9d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096f8215d2172ca4177cb26035e748d8f182fc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f8215d2172ca4177cb26035e748d8f182fc8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f8215d2172ca4177cb26035e748d8f182fc8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f8215d2172ca4177cb26035e748d8f182fc8f/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b084bfd43a8b72d8db8702ff9cb316482662cb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b084bfd43a8b72d8db8702ff9cb316482662cb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b084bfd43a8b72d8db8702ff9cb316482662cb90"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "85fd80e29bb22b96587eb538555e41ad86dd4e0a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -14388,7 +14388,7 @@ struct aarch64_vector_costs\n \n /* Implement TARGET_VECTORIZE_INIT_COST.  */\n void *\n-aarch64_init_cost (class loop *)\n+aarch64_init_cost (class loop *, bool)\n {\n   return new aarch64_vector_costs;\n }"}, {"sha": "915f89f571abe66996e98053add1333ad89a4a8f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -22289,7 +22289,7 @@ ix86_noce_conversion_profitable_p (rtx_insn *seq, struct noce_if_info *if_info)\n /* Implement targetm.vectorize.init_cost.  */\n \n static void *\n-ix86_init_cost (class loop *)\n+ix86_init_cost (class loop *, bool)\n {\n   unsigned *cost = XNEWVEC (unsigned, 3);\n   cost[vect_prologue] = cost[vect_body] = cost[vect_epilogue] = 0;"}, {"sha": "1ef5149ad2e28c8d25d34c6d8dfa5aabde43a3d0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -5296,7 +5296,7 @@ rs6000_density_test (rs6000_cost_data *data)\n /* Implement targetm.vectorize.init_cost.  */\n \n static void *\n-rs6000_init_cost (struct loop *loop_info)\n+rs6000_init_cost (struct loop *loop_info, bool)\n {\n   rs6000_cost_data *data = XNEW (struct _rs6000_cost_data);\n   data->loop_info = loop_info;"}, {"sha": "85ea939556065d6f2ad56033d8b49c5a1db12600", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -6120,8 +6120,8 @@ type @code{internal_fn}) should be considered expensive when the mask is\n all zeros.  GCC can then try to branch around the instruction instead.\n @end deftypefn\n \n-@deftypefn {Target Hook} {void *} TARGET_VECTORIZE_INIT_COST (class loop *@var{loop_info})\n-This hook should initialize target-specific data structures in preparation for modeling the costs of vectorizing a loop or basic block.  The default allocates three unsigned integers for accumulating costs for the prologue, body, and epilogue of the loop or basic block.  If @var{loop_info} is non-NULL, it identifies the loop being vectorized; otherwise a single block is being vectorized.\n+@deftypefn {Target Hook} {void *} TARGET_VECTORIZE_INIT_COST (class loop *@var{loop_info}, bool @var{costing_for_scalar})\n+This hook should initialize target-specific data structures in preparation for modeling the costs of vectorizing a loop or basic block.  The default allocates three unsigned integers for accumulating costs for the prologue, body, and epilogue of the loop or basic block.  If @var{loop_info} is non-NULL, it identifies the loop being vectorized; otherwise a single block is being vectorized.  If @var{costing_for_scalar} is true, it indicates the current cost model is for the scalar version of a loop or block; otherwise it is for the vector version.\n @end deftypefn\n \n @deftypefn {Target Hook} unsigned TARGET_VECTORIZE_ADD_STMT_COST (class vec_info *@var{}, void *@var{data}, int @var{count}, enum vect_cost_for_stmt @var{kind}, class _stmt_vec_info *@var{stmt_info}, tree @var{vectype}, int @var{misalign}, enum vect_cost_model_location @var{where})"}, {"sha": "bbaf6b4f3a08bab4d3594869e6f720f036998054", "filename": "gcc/target.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -2004,9 +2004,11 @@ DEFHOOK\n  \"allocates three unsigned integers for accumulating costs for the prologue, \"\n  \"body, and epilogue of the loop or basic block.  If @var{loop_info} is \"\n  \"non-NULL, it identifies the loop being vectorized; otherwise a single block \"\n- \"is being vectorized.\",\n+ \"is being vectorized.  If @var{costing_for_scalar} is true, it indicates the \"\n+ \"current cost model is for the scalar version of a loop or block; otherwise \"\n+ \"it is for the vector version.\",\n  void *,\n- (class loop *loop_info),\n+ (class loop *loop_info, bool costing_for_scalar),\n  default_init_cost)\n \n /* Target function to record N statements of the given kind using the"}, {"sha": "2e0fdb797e093f4c9ef560403d7c37ea2d8a684b", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -1373,7 +1373,8 @@ default_empty_mask_is_expensive (unsigned ifn)\n    array of three unsigned ints, set it to zero, and return its address.  */\n \n void *\n-default_init_cost (class loop *loop_info ATTRIBUTE_UNUSED)\n+default_init_cost (class loop *loop_info ATTRIBUTE_UNUSED,\n+\t\t   bool costing_for_scalar ATTRIBUTE_UNUSED)\n {\n   unsigned *cost = XNEWVEC (unsigned, 3);\n   cost[vect_prologue] = cost[vect_body] = cost[vect_epilogue] = 0;"}, {"sha": "b537038c0aaf72da0a8198efdb4f8076e46aed05", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -117,7 +117,7 @@ extern opt_machine_mode default_vectorize_related_mode (machine_mode,\n \t\t\t\t\t\t\tpoly_uint64);\n extern opt_machine_mode default_get_mask_mode (machine_mode);\n extern bool default_empty_mask_is_expensive (unsigned);\n-extern void *default_init_cost (class loop *);\n+extern void *default_init_cost (class loop *, bool);\n extern unsigned default_add_stmt_cost (class vec_info *, void *, int,\n \t\t\t\t       enum vect_cost_for_stmt,\n \t\t\t\t       class _stmt_vec_info *, tree, int,"}, {"sha": "f10e66a2465b624dd761e8e62113893fc841befb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -813,7 +813,7 @@ bb_in_loop_p (const_basic_block bb, const void *data)\n    stmt_vec_info structs for all the stmts in LOOP_IN.  */\n \n _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n-  : vec_info (vec_info::loop, init_cost (loop_in), shared),\n+  : vec_info (vec_info::loop, init_cost (loop_in, false), shared),\n     loop (loop_in),\n     bbs (XCNEWVEC (basic_block, loop->num_nodes)),\n     num_itersm1 (NULL_TREE),\n@@ -1284,7 +1284,7 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n     }\n \n   /* Now accumulate cost.  */\n-  void *target_cost_data = init_cost (loop);\n+  void *target_cost_data = init_cost (loop, true);\n   stmt_info_for_cost *si;\n   int j;\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n@@ -2723,7 +2723,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   /* Reset target cost data.  */\n   destroy_cost_data (LOOP_VINFO_TARGET_COST_DATA (loop_vinfo));\n   LOOP_VINFO_TARGET_COST_DATA (loop_vinfo)\n-    = init_cost (LOOP_VINFO_LOOP (loop_vinfo));\n+    = init_cost (LOOP_VINFO_LOOP (loop_vinfo), false);\n   /* Reset accumulated rgroup information.  */\n   release_vec_loop_controls (&LOOP_VINFO_MASKS (loop_vinfo));\n   release_vec_loop_controls (&LOOP_VINFO_LENS (loop_vinfo));"}, {"sha": "0ec92b0f0cacac8b484976b1309d657b4620bf54", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -3690,7 +3690,9 @@ vect_detect_hybrid_slp (loop_vec_info loop_vinfo)\n /* Initialize a bb_vec_info struct for the statements in BBS basic blocks.  */\n \n _bb_vec_info::_bb_vec_info (vec<basic_block> _bbs, vec_info_shared *shared)\n-  : vec_info (vec_info::bb, init_cost (NULL), shared), bbs (_bbs), roots (vNULL)\n+  : vec_info (vec_info::bb, init_cost (NULL, false), shared),\n+    bbs (_bbs),\n+    roots (vNULL)\n {\n   for (unsigned i = 0; i < bbs.length (); ++i)\n     {\n@@ -4530,7 +4532,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n \t  continue;\n \t}\n \n-      void *scalar_target_cost_data = init_cost (NULL);\n+      void *scalar_target_cost_data = init_cost (NULL, true);\n       do\n \t{\n \t  add_stmt_cost (bb_vinfo, scalar_target_cost_data,\n@@ -4544,7 +4546,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n       destroy_cost_data (scalar_target_cost_data);\n \n       /* Complete the target-specific vector cost calculation.  */\n-      void *vect_target_cost_data = init_cost (NULL);\n+      void *vect_target_cost_data = init_cost (NULL, false);\n       do\n \t{\n \t  add_stmt_cost (bb_vinfo, vect_target_cost_data,"}, {"sha": "8d1ffafdbf0d0563729f2f8fe058fe7378b14316", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f8215d2172ca4177cb26035e748d8f182fc8f/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=096f8215d2172ca4177cb26035e748d8f182fc8f", "patch": "@@ -1455,9 +1455,9 @@ int vect_get_stmt_cost (enum vect_cost_for_stmt type_of_cost)\n /* Alias targetm.vectorize.init_cost.  */\n \n static inline void *\n-init_cost (class loop *loop_info)\n+init_cost (class loop *loop_info, bool costing_for_scalar)\n {\n-  return targetm.vectorize.init_cost (loop_info);\n+  return targetm.vectorize.init_cost (loop_info, costing_for_scalar);\n }\n \n extern void dump_stmt_cost (FILE *, void *, int, enum vect_cost_for_stmt,"}]}