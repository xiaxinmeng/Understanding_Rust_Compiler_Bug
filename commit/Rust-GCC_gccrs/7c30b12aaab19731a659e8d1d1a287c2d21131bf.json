{"sha": "7c30b12aaab19731a659e8d1d1a287c2d21131bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzMGIxMmFhYWIxOTczMWE2NTllOGQxZDFhMjg3YzJkMjExMzFiZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-02-02T19:53:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-02-02T19:53:59Z"}, "message": "c-common.h (DECL_UNNAMED_BIT_FIELD): New.\n\n/c-family\n2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-common.h (DECL_UNNAMED_BIT_FIELD): New.\n\n/c\n2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-typeck.c (really_start_incremental_init, push_init_level,\n\tset_nonincremental_init, output_init_element, process_init_element):\n\tUse DECL_UNNAMED_BIT_FIELD.\n\n/cp\n2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* class.c (is_really_empty_class): Use DECL_UNNAMED_BIT_FIELD.\n\t* constexpr.c (cx_check_missing_mem_inits): Likewise.\n\t* decl.c (next_initializable_field, find_decomp_class_base,\n\tcp_finish_decomp): Likewise.\n\t* typeck2.c (process_init_constructor_record): Likewise.\n\nFrom-SVN: r257348", "tree": {"sha": "e48d1877fab55b806ceb1df0cdf7f960c8e3fd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48d1877fab55b806ceb1df0cdf7f960c8e3fd96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c30b12aaab19731a659e8d1d1a287c2d21131bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c30b12aaab19731a659e8d1d1a287c2d21131bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c30b12aaab19731a659e8d1d1a287c2d21131bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c30b12aaab19731a659e8d1d1a287c2d21131bf/comments", "author": null, "committer": null, "parents": [{"sha": "dacdc68f3bd5e7c4de0dd54f9dcb1465686ac01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacdc68f3bd5e7c4de0dd54f9dcb1465686ac01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dacdc68f3bd5e7c4de0dd54f9dcb1465686ac01a"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "02b2b1ab9ee537e675718987383ed23ee394afe7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -1,3 +1,7 @@\n+2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-common.h (DECL_UNNAMED_BIT_FIELD): New.\n+\n 2018-02-02  Julia Koval  <julia.koval@intel.com>\n \n \t* c-common.h (omp_clause_mask): Move to wide_int_bitmask.h."}, {"sha": "775d46893c3d60a990525d389e343e3e97f1cc8c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -940,6 +940,10 @@ extern void c_parse_final_cleanups (void);\n #define CLEAR_DECL_C_BIT_FIELD(NODE) \\\n   (DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE)) = 0)\n \n+/* True if the decl was an unnamed bitfield.  */\n+#define DECL_UNNAMED_BIT_FIELD(NODE) \\\n+  (DECL_C_BIT_FIELD (NODE) && !DECL_NAME (NODE))\n+\n extern tree do_case (location_t, tree, tree);\n extern tree build_stmt (location_t, enum tree_code, ...);\n extern tree build_real_imag_expr (location_t, enum tree_code, tree);"}, {"sha": "97ae43c40c6c7872e81baafde6f64efef1c63da0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -1,3 +1,9 @@\n+2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-typeck.c (really_start_incremental_init, push_init_level,\n+\tset_nonincremental_init, output_init_element, process_init_element):\n+\tUse DECL_UNNAMED_BIT_FIELD.\n+\n 2018-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81779"}, {"sha": "b35c2c06e08bcce0f63f44ac83da84395aabb975", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -7955,8 +7955,7 @@ really_start_incremental_init (tree type)\n       constructor_fields = TYPE_FIELDS (constructor_type);\n       /* Skip any nameless bit fields at the beginning.  */\n       while (constructor_fields != NULL_TREE\n-\t     && DECL_C_BIT_FIELD (constructor_fields)\n-\t     && DECL_NAME (constructor_fields) == NULL_TREE)\n+\t     && DECL_UNNAMED_BIT_FIELD (constructor_fields))\n \tconstructor_fields = DECL_CHAIN (constructor_fields);\n \n       constructor_unfilled_fields = constructor_fields;\n@@ -8161,8 +8160,7 @@ push_init_level (location_t loc, int implicit,\n       constructor_fields = TYPE_FIELDS (constructor_type);\n       /* Skip any nameless bit fields at the beginning.  */\n       while (constructor_fields != NULL_TREE\n-\t     && DECL_C_BIT_FIELD (constructor_fields)\n-\t     && DECL_NAME (constructor_fields) == NULL_TREE)\n+\t     && DECL_UNNAMED_BIT_FIELD (constructor_fields))\n \tconstructor_fields = DECL_CHAIN (constructor_fields);\n \n       constructor_unfilled_fields = constructor_fields;\n@@ -8930,8 +8928,7 @@ set_nonincremental_init (struct obstack * braced_init_obstack)\n       constructor_unfilled_fields = TYPE_FIELDS (constructor_type);\n       /* Skip any nameless bit fields at the beginning.  */\n       while (constructor_unfilled_fields != NULL_TREE\n-\t     && DECL_C_BIT_FIELD (constructor_unfilled_fields)\n-\t     && DECL_NAME (constructor_unfilled_fields) == NULL_TREE)\n+\t     && DECL_UNNAMED_BIT_FIELD (constructor_unfilled_fields))\n \tconstructor_unfilled_fields = TREE_CHAIN (constructor_unfilled_fields);\n \n     }\n@@ -9300,8 +9297,7 @@ output_init_element (location_t loc, tree value, tree origtype,\n \n       /* Skip any nameless bit fields.  */\n       while (constructor_unfilled_fields != NULL_TREE\n-\t     && DECL_C_BIT_FIELD (constructor_unfilled_fields)\n-\t     && DECL_NAME (constructor_unfilled_fields) == NULL_TREE)\n+\t     && DECL_UNNAMED_BIT_FIELD (constructor_unfilled_fields))\n \tconstructor_unfilled_fields =\n \t  DECL_CHAIN (constructor_unfilled_fields);\n     }\n@@ -9665,8 +9661,8 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t\t  constructor_unfilled_fields = DECL_CHAIN (constructor_fields);\n \t\t  /* Skip any nameless bit fields.  */\n \t\t  while (constructor_unfilled_fields != 0\n-\t\t\t && DECL_C_BIT_FIELD (constructor_unfilled_fields)\n-\t\t\t && DECL_NAME (constructor_unfilled_fields) == 0)\n+\t\t\t && (DECL_UNNAMED_BIT_FIELD\n+\t\t\t     (constructor_unfilled_fields)))\n \t\t    constructor_unfilled_fields =\n \t\t      DECL_CHAIN (constructor_unfilled_fields);\n \t\t}\n@@ -9675,8 +9671,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t  constructor_fields = DECL_CHAIN (constructor_fields);\n \t  /* Skip any nameless bit fields at the beginning.  */\n \t  while (constructor_fields != NULL_TREE\n-\t\t && DECL_C_BIT_FIELD (constructor_fields)\n-\t\t && DECL_NAME (constructor_fields) == NULL_TREE)\n+\t\t && DECL_UNNAMED_BIT_FIELD (constructor_fields))\n \t    constructor_fields = DECL_CHAIN (constructor_fields);\n \t}\n       else if (TREE_CODE (constructor_type) == UNION_TYPE)"}, {"sha": "0681826cd4c1135667f44ab8272875912e0d5387", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -1,3 +1,11 @@\n+2018-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* class.c (is_really_empty_class): Use DECL_UNNAMED_BIT_FIELD.\n+\t* constexpr.c (cx_check_missing_mem_inits): Likewise.\n+\t* decl.c (next_initializable_field, find_decomp_class_base,\n+\tcp_finish_decomp): Likewise.\n+\t* typeck2.c (process_init_constructor_record): Likewise.\n+\n 2018-02-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84181 - ICE with lambda parm in template argument."}, {"sha": "a4098ac872eeb7a08950d20acd91741961f6b140", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -8202,7 +8202,7 @@ is_really_empty_class (tree type)\n \tif (TREE_CODE (field) == FIELD_DECL\n \t    && !DECL_ARTIFICIAL (field)\n \t    /* An unnamed bit-field is not a data member.  */\n-\t    && (DECL_NAME (field) || !DECL_C_BIT_FIELD (field))\n+\t    && !DECL_UNNAMED_BIT_FIELD (field)\n \t    && !is_really_empty_class (TREE_TYPE (field)))\n \t  return false;\n       return true;"}, {"sha": "93dd8ae049c3d6957c10988dacd1e358c17605df", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -783,7 +783,7 @@ cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n \t  tree ftype;\n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n-\t  if (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n+\t  if (DECL_UNNAMED_BIT_FIELD (field))\n \t    continue;\n \t  if (DECL_ARTIFICIAL (field))\n \t    continue;"}, {"sha": "01ce9fb6d6992dd2872fbb6a9c729046dbf30592", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -5634,7 +5634,7 @@ next_initializable_field (tree field)\n {\n   while (field\n \t && (TREE_CODE (field) != FIELD_DECL\n-\t     || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n+\t     || DECL_UNNAMED_BIT_FIELD (field)\n \t     || (DECL_ARTIFICIAL (field)\n \t\t && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field)))))\n     field = DECL_CHAIN (field);\n@@ -7208,7 +7208,7 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     if (TREE_CODE (field) != FIELD_DECL\n \t|| DECL_ARTIFICIAL (field)\n-\t|| (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n+\t|| DECL_UNNAMED_BIT_FIELD (field))\n       continue;\n     else if (ret)\n       return type;\n@@ -7646,7 +7646,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n       for (tree field = TYPE_FIELDS (btype); field; field = TREE_CHAIN (field))\n \tif (TREE_CODE (field) != FIELD_DECL\n \t    || DECL_ARTIFICIAL (field)\n-\t    || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n+\t    || DECL_UNNAMED_BIT_FIELD (field))\n \t  continue;\n \telse\n \t  eltscnt++;\n@@ -7663,7 +7663,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n       for (tree field = TYPE_FIELDS (btype); field; field = TREE_CHAIN (field))\n \tif (TREE_CODE (field) != FIELD_DECL\n \t    || DECL_ARTIFICIAL (field)\n-\t    || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n+\t    || DECL_UNNAMED_BIT_FIELD (field))\n \t  continue;\n \telse\n \t  {"}, {"sha": "899d60e8535d2a61e65f8a56d8ec808099d7a083", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c30b12aaab19731a659e8d1d1a287c2d21131bf/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7c30b12aaab19731a659e8d1d1a287c2d21131bf", "patch": "@@ -1395,14 +1395,14 @@ process_init_constructor_record (tree type, tree init, int nested,\n       tree next;\n       tree type;\n \n-      if (!DECL_NAME (field) && DECL_C_BIT_FIELD (field))\n-\tcontinue;\n-\n       if (TREE_CODE (field) != FIELD_DECL\n \t  || (DECL_ARTIFICIAL (field)\n \t      && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field))))\n \tcontinue;\n \n+      if (DECL_UNNAMED_BIT_FIELD (field))\n+\tcontinue;\n+\n       /* If this is a bitfield, first convert to the declared type.  */\n       type = TREE_TYPE (field);\n       if (DECL_BIT_FIELD_TYPE (field))\n@@ -1547,14 +1547,15 @@ process_init_constructor_record (tree type, tree init, int nested,\n \t      for (field = TYPE_FIELDS (type);\n \t\t   field; field = DECL_CHAIN (field))\n \t\t{\n-\t\t  if (!DECL_NAME (field) && DECL_C_BIT_FIELD (field))\n-\t\t    continue;\n \t\t  if (TREE_CODE (field) != FIELD_DECL\n \t\t      || (DECL_ARTIFICIAL (field)\n \t\t\t  && !(cxx_dialect >= cxx17\n \t\t\t       && DECL_FIELD_IS_BASE (field))))\n \t\t    continue;\n \n+\t\t  if (DECL_UNNAMED_BIT_FIELD (field))\n+\t\t    continue;\n+\n \t\t  if (ce->index == field || ce->index == DECL_NAME (field))\n \t\t    break;\n \t\t  if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))"}]}