{"sha": "5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRkY2Y3ZWRiOWZkMzc1ZDkyZjdlYjFlOWY1MGYyMGY2ODQ5ZTBjNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2013-10-14T13:24:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:24:49Z"}, "message": "sem_prag.adb (Analyze_Depends_In_Decl_Part): Rename Outputs_Seen to All_Outputs_Seen and update all occurrences of the variable.\n\n2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Depends_In_Decl_Part):\n\tRename Outputs_Seen to All_Outputs_Seen and update all occurrences\n\tof the variable.\n\t(Analyze_Input_Output): Add an item to\n\tAll_Inputs_Seen when it is an input or a self-referential output.\n\t(Check_Mode): Comment reformatting.\n\t(Analyze_Abstract_State): Remove the restriction that an Export state\n\tmust also have mode Input_Only or Output_Only.\n\nFrom-SVN: r203547", "tree": {"sha": "551c1ba780262348594c25cae75df485eff67ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551c1ba780262348594c25cae75df485eff67ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "fe4623ba200fed6bfd495e41ceef282db7cfd1ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "patch": "@@ -1,3 +1,14 @@\n+2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part):\n+\tRename Outputs_Seen to All_Outputs_Seen and update all occurrences\n+\tof the variable.\n+\t(Analyze_Input_Output): Add an item to\n+\tAll_Inputs_Seen when it is an input or a self-referential output.\n+\t(Check_Mode): Comment reformatting.\n+\t(Analyze_Abstract_State): Remove the restriction that an Export state\n+\tmust also have mode Input_Only or Output_Only.\n+\n 2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb: Flag 263 is now known as Has_Visible_Refinement."}, {"sha": "e6a1bd6801c0405a602d6dc115d2262c6113378c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "patch": "@@ -482,16 +482,17 @@ package body Sem_Prag is\n \n       All_Inputs_Seen : Elist_Id := No_Elist;\n       --  A list containing the entities of all the inputs processed so far.\n-      --  This Elist is populated with unique entities because the same input\n+      --  The list is populated with unique entities because the same input\n       --  may appear in multiple input lists.\n \n+      All_Outputs_Seen : Elist_Id := No_Elist;\n+      --  A list containing the entities of all the outputs processed so far.\n+      --  The list is populated with unique entities because output items are\n+      --  unique in a dependence relation.\n+\n       Global_Seen : Boolean := False;\n       --  A flag set when pragma Global has been processed\n \n-      Outputs_Seen : Elist_Id := No_Elist;\n-      --  A list containing the entities of all the outputs processed so far.\n-      --  The elements of this list may come from different output lists.\n-\n       Null_Output_Seen : Boolean := False;\n       --  A flag used to track the legality of a null output\n \n@@ -766,13 +767,19 @@ package body Sem_Prag is\n                      --  output. Such input items cannot appear in other input\n                      --  lists.\n \n-                     if Null_Output_Seen\n+                     if Is_Input\n+                       and then Null_Output_Seen\n                        and then Contains (All_Inputs_Seen, Item_Id)\n                      then\n                         Error_Msg_N\n                           (\"input of a null output list appears in multiple \"\n                            & \"input lists\", Item);\n-                     else\n+                     end if;\n+\n+                     --  Add an input or a self-referential output to the list\n+                     --  of all processed inputs.\n+\n+                     if Is_Input or else Self_Ref then\n                         Add_Item (Item_Id, All_Inputs_Seen);\n                      end if;\n \n@@ -862,7 +869,7 @@ package body Sem_Prag is\n                Is_Input  => False,\n                Self_Ref  => Self_Ref,\n                Top_Level => True,\n-               Seen      => Outputs_Seen,\n+               Seen      => All_Outputs_Seen,\n                Null_Seen => Null_Output_Seen);\n \n             Next (Output);\n@@ -900,6 +907,15 @@ package body Sem_Prag is\n          --  Input\n \n          if Is_Input then\n+\n+            --  \"In\" and \"in out\" parameters already have the proper mode to\n+            --  act as input. \"Out\" parameters are valid inputs only when their\n+            --  type is unconstrained or tagged as their discriminants, array\n+            --  bouns or tags can be read. In general, states and variables\n+            --  are considered to have mode \"in out\" unless they are moded by\n+            --  pragma [Refined_]Global. In that case, the item must appear in\n+            --  an input global list.\n+\n             if (Ekind (Item_Id) = E_Out_Parameter\n                  and then not Is_Unconstrained_Or_Tagged_Item (Item_Id))\n               or else\n@@ -913,8 +929,10 @@ package body Sem_Prag is\n \n          elsif Self_Ref then\n \n-            --  A self-referential state or variable must appear in both input\n-            --  and output lists of a subprogram.\n+            --  In general, states and variables are considered to have mode\n+            --  \"in out\" unless they are explicitly moded by pragma [Refined_]\n+            --  Global. If this is the case, then the item must appear in both\n+            --  an input and output global list.\n \n             if Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n                if Global_Seen\n@@ -928,20 +946,28 @@ package body Sem_Prag is\n \n             --  A self-referential out parameter of an unconstrained or tagged\n             --  type acts as an input because the discriminants, array bounds\n-            --  or the tag may be read.\n+            --  or the tag may be read. Note that the presence of [Refined_]\n+            --  Global is not significant here because the item is a parameter.\n \n             elsif Ekind (Item_Id) = E_Out_Parameter\n               and then Is_Unconstrained_Or_Tagged_Item (Item_Id)\n             then\n                null;\n \n-            --  Self-referential parameter\n+            --  The remaining cases are \"in\", \"in out\" and \"out\" parameters. To\n+            --  qualify as self-referential item, the parameter must be of mode\n+            --  \"in out\".\n \n             elsif Ekind (Item_Id) /= E_In_Out_Parameter then\n                Error_Msg_NE (\"item & must have mode in out\", Item, Item_Id);\n             end if;\n \n-         --  Regular output\n+         --  Output\n+\n+         --  \"In out\" and \"ou\" parameters already have the proper mode to act\n+         --  as output. In general, states and variables are considered to have\n+         --  mode \"in out\" unless they are moded by pragma [Refined_]Global.\n+         --  In that case, the item must appear in an output global list.\n \n          elsif Ekind (Item_Id) = E_In_Parameter\n            or else\n@@ -1416,7 +1442,7 @@ package body Sem_Prag is\n          --  dependency.\n \n          Check_Usage (Subp_Inputs, All_Inputs_Seen, True);\n-         Check_Usage (Subp_Outputs, Outputs_Seen, False);\n+         Check_Usage (Subp_Outputs, All_Outputs_Seen, False);\n          Check_Function_Return;\n \n       --  Dependency clauses appear as component associations of an aggregate\n@@ -1480,7 +1506,7 @@ package body Sem_Prag is\n          --  dependency.\n \n          Check_Usage (Subp_Inputs, All_Inputs_Seen, True);\n-         Check_Usage (Subp_Outputs, Outputs_Seen, False);\n+         Check_Usage (Subp_Outputs, All_Outputs_Seen, False);\n          Check_Function_Return;\n \n       --  The top level dependency relation is malformed\n@@ -9122,9 +9148,13 @@ package body Sem_Prag is\n                      Next (Opt);\n                   end loop;\n \n-                  --  External requires exactly one Input_Only or Output_Only\n+                  --  External may appear on its own or with exactly one option\n+                  --  Input_Only or Output_Only, but not both.\n \n-                  if External_Seen and then Input_Seen = Output_Seen then\n+                  if External_Seen\n+                    and then Input_Seen\n+                    and then Output_Seen\n+                  then\n                      Error_Msg_N\n                        (\"option External requires exactly one option \"\n                         & \"Input_Only or Output_Only\", State);"}]}