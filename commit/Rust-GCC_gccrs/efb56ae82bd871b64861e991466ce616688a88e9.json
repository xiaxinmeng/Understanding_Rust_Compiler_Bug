{"sha": "efb56ae82bd871b64861e991466ce616688a88e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiNTZhZTgyYmQ4NzFiNjQ4NjFlOTkxNDY2Y2U2MTY2ODhhODhlOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-12T22:19:31Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-12T22:19:31Z"}, "message": "[nvptx] Enable setting vector length using -fopenacc-dim -- testcases\n\nAdd some test-cases that set vector length using -fopenacc-dim.\n\n2019-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c: New test.\n\t* testsuite/libgomp.oacc-fortran/gemm-2.f90: New test.\n\nFrom-SVN: r267897", "tree": {"sha": "357f0f12227dbdf5de243b44a80da043fa52b4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/357f0f12227dbdf5de243b44a80da043fa52b4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb56ae82bd871b64861e991466ce616688a88e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb56ae82bd871b64861e991466ce616688a88e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb56ae82bd871b64861e991466ce616688a88e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb56ae82bd871b64861e991466ce616688a88e9/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c2ff1684dd33a4ec2ea7b91c0ada9cf371bf75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2ff1684dd33a4ec2ea7b91c0ada9cf371bf75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2ff1684dd33a4ec2ea7b91c0ada9cf371bf75f"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "c279edfe2f36d58cf754abf8b21e549cb503de46", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=efb56ae82bd871b64861e991466ce616688a88e9", "patch": "@@ -1,3 +1,10 @@\n+2019-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/gemm-2.f90: New test.\n+\n 2019-01-12  Tom de Vries  <tdevries@suse.de>\n \n \t* plugin/plugin-nvptx.c (nvptx_exec): Update error message."}, {"sha": "f6ca263166d7fa68618c1dc94968d360aedd5c4d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c?ref=efb56ae82bd871b64861e991466ce616688a88e9", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-fopenacc-dim=::128\" } */\n+\n+/* Minimized from ref-1.C.  */\n+\n+#include <stdio.h>\n+\n+#pragma acc routine vector\n+void __attribute__((noinline, noclone))\n+Vector (int *ptr, int n, const int inc)\n+{\n+  #pragma acc loop vector\n+  for (unsigned ix = 0; ix < n; ix++)\n+    ptr[ix] += inc;\n+}\n+\n+int\n+main (void)\n+{\n+  const int n = 32, m=32;\n+\n+  int ary[m][n];\n+  unsigned ix,  iy;\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      ary[ix][iy] = (1 << 16) + (ix << 8) + iy;\n+\n+  int err = 0;\n+\n+#pragma acc parallel copy (ary)\n+  {\n+    Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n+  }\n+\n+  for (ix = m; ix--;)\n+    for (iy = n; iy--;)\n+      if (ary[ix][iy] != ((1 << 24) + (ix << 8) + iy))\n+\t{\n+\t  printf (\"ary[%u][%u] = %x expected %x\\n\",\n+\t\t  ix, iy, ary[ix][iy], ((1 << 24) + (ix << 8) + iy));\n+\t  err++;\n+\t}\n+\n+  if (err)\n+    {\n+      printf (\"%d failed\\n\", err);\n+      return 1;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8b5b2a4a92d568da6f6f45482daad2b8f55fd098", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-2.c?ref=efb56ae82bd871b64861e991466ce616688a88e9", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-fopenacc-dim=::128\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+#pragma acc parallel copyin (a,b) copyout (c)\n+  {\n+#pragma acc loop vector\n+    for (unsigned int i = 0; i < n; i++)\n+      c[i] = a[i] + b[i];\n+  }\n+\n+  for (unsigned int i = 0; i < n; ++i)\n+    if (c[i] != (i % 3) + (i % 5))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=128\" } */"}, {"sha": "e60f1c28db4ac5417f19699e463459a5a3b5725e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-5.c?ref=efb56ae82bd871b64861e991466ce616688a88e9", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-fopenacc-dim=:2:128\" } */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+#pragma acc parallel copyin (a,b) copyout (c)\n+  {\n+#pragma acc loop worker\n+    for (unsigned int i = 0; i < 4; i++)\n+#pragma acc loop vector\n+      for (unsigned int j = 0; j < n / 4; j++)\n+\tc[(i * N / 4) + j] = a[(i * N / 4) + j] + b[(i * N / 4) + j];\n+  }\n+\n+  for (unsigned int i = 0; i < n; ++i)\n+    if (c[i] != (i % 3) + (i % 5))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 2, 128\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=2, vectors=128\" } */"}, {"sha": "fe108732a5fd5fe8f82dbae684b173311410b532", "filename": "libgomp/testsuite/libgomp.oacc-fortran/gemm-2.f90", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb56ae82bd871b64861e991466ce616688a88e9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90?ref=efb56ae82bd871b64861e991466ce616688a88e9", "patch": "@@ -0,0 +1,80 @@\n+! Exercise three levels of parallelism using SGEMM from BLAS.\n+\n+! { dg-do run }\n+! { dg-additional-options \"-fopenacc-dim=::128\" }\n+\n+! Implicitly set vector_length to 128 using -fopenacc-dim.\n+subroutine openacc_sgemm (m, n, k, alpha, a, b, beta, c)\n+  integer :: m, n, k\n+  real :: alpha, beta\n+  real :: a(k,*), b(k,*), c(m,*)\n+\n+  integer :: i, j, l\n+  real :: temp\n+\n+  !$acc parallel loop copy(c(1:m,1:n)) copyin(a(1:k,1:m),b(1:k,1:n)) firstprivate (temp)\n+  do j = 1, n\n+     !$acc loop\n+     do i = 1, m\n+        temp = 0.0\n+        !$acc loop reduction(+:temp)\n+        do l = 1, k\n+           temp = temp + a(l,i)*b(l,j)\n+        end do\n+        if(beta == 0.0) then\n+           c(i,j) = alpha*temp\n+        else\n+           c(i,j) = alpha*temp + beta*c(i,j)\n+        end if\n+     end do\n+  end do\n+end subroutine openacc_sgemm\n+\n+subroutine host_sgemm (m, n, k, alpha, a, b, beta, c)\n+  integer :: m, n, k\n+  real :: alpha, beta\n+  real :: a(k,*), b(k,*), c(m,*)\n+\n+  integer :: i, j, l\n+  real :: temp\n+\n+  do j = 1, n\n+     do i = 1, m\n+        temp = 0.0\n+        do l = 1, k\n+           temp = temp + a(l,i)*b(l,j)\n+        end do\n+        if(beta == 0.0) then\n+           c(i,j) = alpha*temp\n+        else\n+           c(i,j) = alpha*temp + beta*c(i,j)\n+        end if\n+     end do\n+  end do\n+end subroutine host_sgemm\n+\n+program main\n+  integer, parameter :: M = 100, N = 50, K = 2000\n+  real :: a(K, M), b(K, N), c(M, N), d (M, N), e (M, N)\n+  real alpha, beta\n+  integer i, j\n+\n+  a(:,:) = 1.0\n+  b(:,:) = 0.25\n+\n+  c(:,:) = 0.0\n+  d(:,:) = 0.0\n+  e(:,:) = 0.0\n+\n+  alpha = 1.05\n+  beta = 1.25\n+\n+  call openacc_sgemm (M, N, K, alpha, a, b, beta, c)\n+  call host_sgemm (M, N, K, alpha, a, b, beta, e)\n+\n+  do i = 1, m\n+     do j = 1, n\n+        if (c(i,j) /= e(i,j)) call abort\n+     end do\n+  end do\n+end program main"}]}