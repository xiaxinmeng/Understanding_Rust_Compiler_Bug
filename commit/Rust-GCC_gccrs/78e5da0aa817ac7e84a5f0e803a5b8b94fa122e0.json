{"sha": "78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlNWRhMGFhODE3YWM3ZTg0YTVmMGU4MDNhNWI4Yjk0ZmExMjJlMA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-05-21T13:36:04Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-05-21T13:36:04Z"}, "message": "PR90545, gcc.target/powerpc/fold-vec-splats-floatdouble.c fails\n\nI figure a tweak to register_move_cost is better than sprinkling ?s\nin instruction operand alternatives.\n\n\tPR target/90545\n\t* config/rs6000/rs6000.c (rs6000_register_move_cost): Increase\n\tpower9 direct move cost.\n\t* testsuite/gcc.target/powerpc/fold-vec-splats-floatdouble.c:\n\tCorrect comments and rename functions to suit parameters.\n\nFrom-SVN: r271464", "tree": {"sha": "742d0f748538ef5a69eb6d4ce8d8a55f84539ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742d0f748538ef5a69eb6d4ce8d8a55f84539ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f8b89f092467f9550cb2aa873c2e30ac809c08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8b89f092467f9550cb2aa873c2e30ac809c08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8b89f092467f9550cb2aa873c2e30ac809c08a"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "eff11afb0d27cfdae07139b49bfafa1533cc35f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "patch": "@@ -1,3 +1,11 @@\n+2019-05-21  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/90545\n+\t* config/rs6000/rs6000.c (rs6000_register_move_cost): Increase\n+\tpower9 direct move cost.\n+\t* testsuite/gcc.target/powerpc/fold-vec-splats-floatdouble.c:\n+\tCorrect comments and rename functions to suit parameters.\n+\n 2019-05-21  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/90510"}, {"sha": "693f2e1c91ff4815987a4f2dcd3c63912068a95e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "patch": "@@ -34657,8 +34657,14 @@ rs6000_register_move_cost (machine_mode mode,\n \t{\n \t  if (TARGET_DIRECT_MOVE)\n \t    {\n+\t      /* Keep the cost for direct moves above that for within\n+\t\t a register class even if the actual processor cost is\n+\t\t comparable.  We do this because a direct move insn\n+\t\t can't be a nop, whereas with ideal register\n+\t\t allocation a move within the same class might turn\n+\t\t out to be a nop.  */\n \t      if (rs6000_tune == PROCESSOR_POWER9)\n-\t\tret = 2 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n+\t\tret = 3 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n \t      else\n \t\tret = 4 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n \t      /* SFmode requires a conversion when moving between gprs"}, {"sha": "3c7cc7c9a67088b07b781ccbce259841ada678f9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splats-floatdouble.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-floatdouble.c?ref=78e5da0aa817ac7e84a5f0e803a5b8b94fa122e0", "patch": "@@ -8,20 +8,20 @@\n #include <altivec.h>\n \n vector float\n-test1d (float x)\n+test1f (float x)\n {\n   return vec_splats (x);\n }\n \n vector double\n-test1f (double x)\n+test1d (double x)\n {\n   return vec_splats (x);\n }\n \n-// float test generates the permute instruction.\n+// double test generates the permute instruction.\n /* { dg-final { scan-assembler-times \"xxpermdi\" 1 } } */\n \n-// double test generates a convert (double to single non-signalling) followed by a splat.\n+// float test generates a convert (double to single non-signalling) followed by a splat.\n /* { dg-final { scan-assembler-times {\\mxscvdpspn?\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mvspltw\\M|\\mxxspltw\\M} 1 } } */"}]}