{"sha": "e063a0486f7c503732da742bfa4d27e222ccc52f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2M2EwNDg2ZjdjNTAzNzMyZGE3NDJiZmE0ZDI3ZTIyMmNjYzUyZg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-06-29T17:01:35Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-29T17:01:35Z"}, "message": "re PR fortran/15963 (Error when comparing characters in restricted expression)\n\nfortran/\nPR fortran/15963\n* expr.c (check_intrinsic_op): Allow comparison of characters.\nMake logic easier.\n\ntestsuite/\nPR fortran/15963\n* gfortran.fortran-torture/execute/initialization_1.f90: New test.\n\nFrom-SVN: r83859", "tree": {"sha": "b83774bb232127fd4ea92cf995002971484653b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83774bb232127fd4ea92cf995002971484653b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e063a0486f7c503732da742bfa4d27e222ccc52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e063a0486f7c503732da742bfa4d27e222ccc52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e063a0486f7c503732da742bfa4d27e222ccc52f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e063a0486f7c503732da742bfa4d27e222ccc52f/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e73bd25031f3c7ea03a29c469fbbd4b6db6f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e73bd25031f3c7ea03a29c469fbbd4b6db6f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e73bd25031f3c7ea03a29c469fbbd4b6db6f8e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9193234effc4cf9fd504282e11f24084b88b5265", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e063a0486f7c503732da742bfa4d27e222ccc52f", "patch": "@@ -1,3 +1,9 @@\n+2004-06-22  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/15963\n+\t* expr.c (check_intrinsic_op): Allow comparison of characters.\n+\tMake logic easier.\n+\n 2004-06-26  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \tAndrew Vaught  <andyv@firstinter.net>\n "}, {"sha": "e9ed27040eee86ac4183e2afd6c8676d8fcd0b17", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e063a0486f7c503732da742bfa4d27e222ccc52f", "patch": "@@ -1167,6 +1167,17 @@ check_intrinsic_op (gfc_expr * e, try (*check_function) (gfc_expr *))\n     case INTRINSIC_GE:\n     case INTRINSIC_LT:\n     case INTRINSIC_LE:\n+      if ((*check_function) (e->op2) == FAILURE)\n+\treturn FAILURE;\n+      \n+      if (!(et0 (e->op1) == BT_CHARACTER && et0 (e->op2) == BT_CHARACTER)\n+\t  && !(numeric_type (et0 (e->op1)) && numeric_type (et0 (e->op2))))\n+\t{\n+\t  gfc_error (\"Numeric or CHARACTER operands are required in \"\n+\t\t     \"expression at %L\", &e->where);\n+         return FAILURE;\n+\t}\n+      break;\n \n     case INTRINSIC_PLUS:\n     case INTRINSIC_MINUS:\n@@ -1179,10 +1190,8 @@ check_intrinsic_op (gfc_expr * e, try (*check_function) (gfc_expr *))\n       if (!numeric_type (et0 (e->op1)) || !numeric_type (et0 (e->op2)))\n \tgoto not_numeric;\n \n-      if (e->operator != INTRINSIC_POWER)\n-\tbreak;\n-\n-      if (check_function == check_init_expr && et0 (e->op2) != BT_INTEGER)\n+      if (e->operator == INTRINSIC_POWER\n+\t  && check_function == check_init_expr && et0 (e->op2) != BT_INTEGER)\n \t{\n \t  gfc_error (\"Exponent at %L must be INTEGER for an initialization \"\n \t\t     \"expression\", &e->op2->where);"}, {"sha": "ae3a5d2c1b009ca3fae491a12d7dcfab15d60004", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e063a0486f7c503732da742bfa4d27e222ccc52f", "patch": "@@ -1,3 +1,8 @@\n+2004-06-25  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/15963\n+\t* gfortran.fortran-torture/execute/initialization_1.f90: New test.\n+\n 2004-06-29  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/tree-ssa/20040430-1.c: Expect zero if's."}, {"sha": "2ccb45a2388bfd4ed7252593890c13b30774bb6a", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/initialization_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Finitialization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e063a0486f7c503732da742bfa4d27e222ccc52f/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Finitialization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Finitialization_1.f90?ref=e063a0486f7c503732da742bfa4d27e222ccc52f", "patch": "@@ -0,0 +1,10 @@\n+! PR 15963 -- checks character comparison in initialization expressions\n+character(8), parameter :: a(5) = (/ \"H\", \"E\", \"L\", \"L\", \"O\" /)\n+call x(a)\n+contains\n+subroutine x(a)\n+character(8), intent(in) :: a(:)\n+integer :: b(count(a < 'F'))\n+if (size(b) /= 1) call abort()\n+end subroutine x\n+end"}]}