{"sha": "adb31ad60d29824ac9d3a699b937f31a8632798b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiMzFhZDYwZDI5ODI0YWM5ZDNhNjk5YjkzN2YzMWE4NjMyNzk4Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-08T15:46:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-08T15:46:28Z"}, "message": "istream.tcc (getline(char_type*, streamsize, char_type), [...]): Restore a generic version of the functions...\n\n2004-11-08  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/istream.tcc (getline(char_type*, streamsize,\n\tchar_type), ignore(streamsize), ignore(streamsize, int_type)):\n\tRestore a generic version of the functions, not using the\n\tprotected members of basic_streambuf.\n\t* include/std/std_istream.h (getline(char_type*, streamsize,\n\tchar_type), ignore(streamsize), ignore(streamsize, int_type)):\n\tDeclare optimized specializations for char and wchar_t.\n\t* src/istream.cc: New file, define the latter.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r90268", "tree": {"sha": "b575696a6bc27aaebd9e0eb5902c1870af61a812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b575696a6bc27aaebd9e0eb5902c1870af61a812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb31ad60d29824ac9d3a699b937f31a8632798b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb31ad60d29824ac9d3a699b937f31a8632798b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb31ad60d29824ac9d3a699b937f31a8632798b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb31ad60d29824ac9d3a699b937f31a8632798b/comments", "author": null, "committer": null, "parents": [{"sha": "1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7cd4a5e5d48b9026c110ba32560b7a9a3ad2d3"}], "stats": {"total": 683, "additions": 538, "deletions": 145}, "files": [{"sha": "62f996c11d964301ae1ba222ccddfe48ab88dd87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -1,3 +1,16 @@\n+2004-11-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/istream.tcc (getline(char_type*, streamsize,\n+\tchar_type), ignore(streamsize), ignore(streamsize, int_type)):\n+\tRestore a generic version of the functions, not using the\n+\tprotected members of basic_streambuf.\n+\t* include/std/std_istream.h (getline(char_type*, streamsize,\n+\tchar_type), ignore(streamsize), ignore(streamsize, int_type)):\n+\tDeclare optimized specializations for char and wchar_t.\n+\t* src/istream.cc: New file, define the latter.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\n 2004-11-07  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/performance/27_io/ifstream_getline-2.cc: New."}, {"sha": "b467376b78981551be8c0fff845ffa89f1f3e4f4", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 79, "deletions": 139, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -584,61 +584,43 @@ namespace std\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb)\n-\t{\n+        {\n           try\n-\t    {\n-\t      const int_type __idelim = traits_type::to_int_type(__delim);\n-\t      const int_type __eof = traits_type::eof();\n-\t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sgetc();\n-\t      \n-\t      while (_M_gcount + 1 < __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof)\n-\t\t     && !traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n-\t\t\t\t\t\t\t  - __sb->gptr()),\n-\t\t\t\t\t       streamsize(__n - _M_gcount\n-\t\t\t\t\t\t\t  - 1));\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t       __size,\n-\t\t\t\t\t\t\t       __delim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      traits_type::copy(__s, __sb->gptr(), __size);\n-\t\t      __s += __size;\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      *__s++ = traits_type::to_char_type(__c);\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\n-\t\t}\n-\n-\t      if (traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  ++_M_gcount;\t\t  \n-\t\t  __sb->sbumpc();\n-\t\t}\n-\t      else\n-\t\t__err |= ios_base::failbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t}\n+            {\n+              const int_type __idelim = traits_type::to_int_type(__delim);\n+              const int_type __eof = traits_type::eof();\n+              __streambuf_type* __sb = this->rdbuf();\n+              int_type __c = __sb->sgetc();\n+\n+              while (_M_gcount + 1 < __n\n+                     && !traits_type::eq_int_type(__c, __eof)\n+                     && !traits_type::eq_int_type(__c, __idelim))\n+                {\n+                  *__s++ = traits_type::to_char_type(__c);\n+                  __c = __sb->snextc();\n+                  ++_M_gcount;\n+                }\n+              if (traits_type::eq_int_type(__c, __eof))\n+                __err |= ios_base::eofbit;\n+              else\n+                {\n+                  if (traits_type::eq_int_type(__c, __idelim))\n+                    {\n+                      __sb->sbumpc();\n+                      ++_M_gcount;\n+                    }\n+                  else\n+                    __err |= ios_base::failbit;\n+                }\n+            }\n+          catch(...)\n+            { this->_M_setstate(ios_base::badbit); }\n+        }\n       *__s = char_type();\n       if (!_M_gcount)\n-\t__err |= ios_base::failbit;\n+        __err |= ios_base::failbit;\n       if (__err)\n-\tthis->setstate(__err);\n+        this->setstate(__err);\n       return *this;\n     }\n \n@@ -680,48 +662,31 @@ namespace std\n     {\n       if (__n == 1)\n \treturn ignore();\n-      \n+\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const int_type __eof = traits_type::eof();\n-\t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sgetc();\n-\t      \n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof))\n-\t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n-\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n-\t\t}\n+        {\n+          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+          try\n+            {\n+              const int_type __eof = traits_type::eof();\n+              __streambuf_type* __sb = this->rdbuf();\n+              int_type __c = __eof;\n+\n+              if (__n != numeric_limits<streamsize>::max())\n+                --__n;\n+              while (_M_gcount <= __n\n+                     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n+\t\t++_M_gcount;\n \t      if (traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n+                __err |= ios_base::eofbit;\n+            }\n+          catch(...)\n+            { this->_M_setstate(ios_base::badbit); }\n+          if (__err)\n+            this->setstate(__err);\n+        }\n       return *this;\n     }\n \n@@ -736,56 +701,31 @@ namespace std\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n-\t      const int_type __eof = traits_type::eof();\n-\t      __streambuf_type* __sb = this->rdbuf();\n-\t      int_type __c = __sb->sgetc();\n-\n-\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n-\t      if (__bound)\n-\t\t--__n;\n-\t      while (_M_gcount <= __n\n-\t\t     && !traits_type::eq_int_type(__c, __eof)\n-\t\t     && !traits_type::eq_int_type(__c, __delim))\n-\t\t{\n-\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n-\t\t  if (__bound)\n-\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n-\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t       __size,\n-\t\t\t\t\t\t\t       __cdelim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      __sb->gbump(__size);\n-\t\t      _M_gcount += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n-\t\t}\n-\t      if (traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      else if (traits_type::eq_int_type(__c, __delim))\n-\t\t{\n-\t\t  ++_M_gcount;\n-\t\t  __sb->sbumpc();\n-\t\t}\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n+        {\n+          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+          try\n+            {\n+              const int_type __eof = traits_type::eof();\n+              __streambuf_type* __sb = this->rdbuf();\n+              int_type __c = __eof;\n+\n+              if (__n != numeric_limits<streamsize>::max())\n+                --__n;\n+              while (_M_gcount <= __n\n+                     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n+                {\n+                  ++_M_gcount;\n+                  if (traits_type::eq_int_type(__c, __delim))\n+                    break;\n+                }\n+              if (traits_type::eq_int_type(__c, __eof))\n+                __err |= ios_base::eofbit;\n+            }\n+          catch(...)\n+            { this->_M_setstate(ios_base::badbit); }\n+          if (__err)\n+            this->setstate(__err);\n+        }\n       return *this;\n     }\n "}, {"sha": "28b0fdd5c6005a487393b0ccba80001d48f42772", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -574,7 +574,40 @@ namespace std\n       explicit \n       basic_istream(): _M_gcount(streamsize(0)) { }\n     };\n+\n+  // Explicit specialization declarations, defined in src/istream.cc.\n+  template<> \n+    basic_istream<char>& \n+    basic_istream<char>::\n+    getline(char_type* __s, streamsize __n, char_type __delim);\n+  \n+  template<>\n+    basic_istream<char>&\n+    basic_istream<char>::\n+    ignore(streamsize __n);\n   \n+  template<>\n+    basic_istream<char>&\n+    basic_istream<char>::\n+    ignore(streamsize __n, int_type __delim);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<> \n+    basic_istream<wchar_t>& \n+    basic_istream<wchar_t>::\n+    getline(char_type* __s, streamsize __n, char_type __delim);\n+\n+  template<>\n+    basic_istream<wchar_t>&\n+    basic_istream<wchar_t>::\n+    ignore(streamsize __n);\n+  \n+  template<>\n+    basic_istream<wchar_t>&\n+    basic_istream<wchar_t>::\n+    ignore(streamsize __n, int_type __delim);\n+#endif\n+\n   /**\n    *  @brief  Performs setup work for input streams.\n    *\n@@ -693,13 +726,13 @@ namespace std\n     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);\n   \n   template<class _Traits>\n-    basic_istream<char,_Traits>&\n-    operator>>(basic_istream<char,_Traits>& __in, unsigned char* __s)\n+    basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n     { return (__in >> reinterpret_cast<char*>(__s)); }\n \n   template<class _Traits>\n-    basic_istream<char,_Traits>&\n-    operator>>(basic_istream<char,_Traits>& __in, signed char* __s)\n+    basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n     { return (__in >> reinterpret_cast<char*>(__s)); }\n   //@}\n "}, {"sha": "67e17cf78790d8fb5ea741d0df983e92a7b18c84", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -126,6 +126,7 @@ sources = \\\n \text-inst.cc \\\n \tio-inst.cc \\\n \tistream-inst.cc \\\n+\tistream.cc \\\n \tlocale-inst.cc \\\n \tlocale-misc-inst.cc \\\n \tmisc-inst.cc \\"}, {"sha": "e49698c903e413fd4fa6c846469d3556ab61b415", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -71,8 +71,8 @@ am__objects_3 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n \tstdexcept.lo strstream.lo tree.lo allocator-inst.lo \\\n \tconcept-inst.lo fstream-inst.lo ext-inst.lo io-inst.lo \\\n-\tistream-inst.lo locale-inst.lo locale-misc-inst.lo misc-inst.lo \\\n-\tostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n+\tistream-inst.lo istream.lo locale-inst.lo locale-misc-inst.lo \\\n+\tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo $(am__objects_1) $(am__objects_2)\n am_libstdc___la_OBJECTS = $(am__objects_3)\n@@ -336,6 +336,7 @@ sources = \\\n \text-inst.cc \\\n \tio-inst.cc \\\n \tistream-inst.cc \\\n+\tistream.cc \\\n \tlocale-inst.cc \\\n \tlocale-misc-inst.cc \\\n \tmisc-inst.cc \\"}, {"sha": "7725ab4c138a4e18e9905a5dc5ef958279b1b749", "filename": "libstdc++-v3/src/istream.cc", "status": "added", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb31ad60d29824ac9d3a699b937f31a8632798b/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=adb31ad60d29824ac9d3a699b937f31a8632798b", "patch": "@@ -0,0 +1,405 @@\n+// Input streams -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.6.1  Input streams\n+//\n+\n+#include <istream>\n+\n+namespace std\n+{\n+  template<>\n+    basic_istream<char>&\n+    basic_istream<char>::\n+    getline(char_type* __s, streamsize __n, char_type __delim)\n+    {\n+      _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      sentry __cerb(*this, true);\n+      if (__cerb)\n+\t{\n+          try\n+\t    {\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\t      \n+\t      while (_M_gcount + 1 < __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof)\n+\t\t     && !traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - _M_gcount\n+\t\t\t\t\t\t\t  - 1));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t       __size,\n+\t\t\t\t\t\t\t       __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      traits_type::copy(__s, __sb->gptr(), __size);\n+\t\t      __s += __size;\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      *__s++ = traits_type::to_char_type(__c);\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++_M_gcount;\t\t  \n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t}\n+      *__s = char_type();\n+      if (!_M_gcount)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\tthis->setstate(__err);\n+      return *this;\n+    }\n+\n+  template<>\n+    basic_istream<char>&\n+    basic_istream<char>::\n+    ignore(streamsize __n)\n+    {\n+      if (__n == 1)\n+\treturn ignore();\n+      \n+      _M_gcount = 0;\n+      sentry __cerb(*this, true);\n+      if (__cerb && __n > 0)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\t      \n+\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n+\t      if (__bound)\n+\t\t--__n;\n+\t      while (_M_gcount <= __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof))\n+\t\t{\n+\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n+\t\t  if (__bound)\n+\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n+\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<>\n+    basic_istream<char>&\n+    basic_istream<char>::\n+    ignore(streamsize __n, int_type __delim)\n+    {\n+      if (traits_type::eq_int_type(__delim, traits_type::eof()))\n+\treturn ignore(__n);\n+\n+      _M_gcount = 0;\n+      sentry __cerb(*this, true);\n+      if (__cerb && __n > 0)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\n+\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n+\t      if (__bound)\n+\t\t--__n;\n+\t      while (_M_gcount <= __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof)\n+\t\t     && !traits_type::eq_int_type(__c, __delim))\n+\t\t{\n+\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n+\t\t  if (__bound)\n+\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n+\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t       __size,\n+\t\t\t\t\t\t\t       __cdelim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t\t{\n+\t\t  ++_M_gcount;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    basic_istream<wchar_t>&\n+    basic_istream<wchar_t>::\n+    getline(char_type* __s, streamsize __n, char_type __delim)\n+    {\n+      _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      sentry __cerb(*this, true);\n+      if (__cerb)\n+\t{\n+          try\n+\t    {\n+\t      const int_type __idelim = traits_type::to_int_type(__delim);\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\t      \n+\t      while (_M_gcount + 1 < __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof)\n+\t\t     && !traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - _M_gcount\n+\t\t\t\t\t\t\t  - 1));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t       __size,\n+\t\t\t\t\t\t\t       __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      traits_type::copy(__s, __sb->gptr(), __size);\n+\t\t      __s += __size;\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      *__s++ = traits_type::to_char_type(__c);\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++_M_gcount;\t\t  \n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t}\n+      *__s = char_type();\n+      if (!_M_gcount)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\tthis->setstate(__err);\n+      return *this;\n+    }\n+\n+  template<>\n+    basic_istream<wchar_t>&\n+    basic_istream<wchar_t>::\n+    ignore(streamsize __n)\n+    {\n+      if (__n == 1)\n+\treturn ignore();\n+      \n+      _M_gcount = 0;\n+      sentry __cerb(*this, true);\n+      if (__cerb && __n > 0)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\t      \n+\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n+\t      if (__bound)\n+\t\t--__n;\n+\t      while (_M_gcount <= __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof))\n+\t\t{\n+\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n+\t\t  if (__bound)\n+\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n+\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<>\n+    basic_istream<wchar_t>&\n+    basic_istream<wchar_t>::\n+    ignore(streamsize __n, int_type __delim)\n+    {\n+      if (traits_type::eq_int_type(__delim, traits_type::eof()))\n+\treturn ignore(__n);\n+\n+      _M_gcount = 0;\n+      sentry __cerb(*this, true);\n+      if (__cerb && __n > 0)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\n+\n+\t      const bool __bound = __n != numeric_limits<streamsize>::max();\n+\t      if (__bound)\n+\t\t--__n;\n+\t      while (_M_gcount <= __n\n+\t\t     && !traits_type::eq_int_type(__c, __eof)\n+\t\t     && !traits_type::eq_int_type(__c, __delim))\n+\t\t{\n+\t\t  streamsize __size = __sb->egptr() - __sb->gptr();\n+\t\t  if (__bound)\n+\t\t    __size = std::min(__size, streamsize(__n - _M_gcount + 1));\n+\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t       __size,\n+\t\t\t\t\t\t\t       __cdelim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __sb->gbump(__size);\n+\t\t      _M_gcount += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\t      if (traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (traits_type::eq_int_type(__c, __delim))\n+\t\t{\n+\t\t  ++_M_gcount;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+#endif\n+} // namespace std"}]}