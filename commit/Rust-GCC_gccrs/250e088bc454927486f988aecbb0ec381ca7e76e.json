{"sha": "250e088bc454927486f988aecbb0ec381ca7e76e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwZTA4OGJjNDU0OTI3NDg2Zjk4OGFlY2JiMGVjMzgxY2E3ZTc2ZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:02:10Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:02:10Z"}, "message": "[arm] Allow +opt on arbitrary cpu and architecture\n\n\nThis is the main patch to provide the infrastructure for adding\nfeature extensions to CPU and architecture specifications.  It does not,\nhowever, add all the extensions that we intend to support (just a small\nnumber to permit some basic testing).  Now, instead of having specific\nentries in the architecture table for variants such as armv8-a+crc, the\ncrc extension is specified as an optional component of the armv8-a\narchitecture entry.  Similar control can be added to CPU option names.\nIn both cases the list of permitted options is controlled by the main\narchitecture or CPU name to prevent arbitrary cross-products of options.\n\n\t* config/arm/arm-cpus.in (armv8-a): Add options crc, simd crypto and\n\tnofp.\n\t(armv8-a+crc): Delete.\n\t(armv8.1-a): Add options simd, crypto and nofp.\n\t(armv8.2-a): Add options fp16, simd, crypto and nofp.\n\t(armv8.2-a+fp16): Delete.\n\t(armv8-m.main): Add option dsp.\n\t(armv8-m.main+dsp): Delete.\n\t(cortex-a8): Add fpu.  Add nofp option.\n\t(cortex-a9): Add fpu.  Add nofp and nosimd options.\n\t* config/arm/parsecpu.awk (gen_data): Generate option tables and\n\tlink to main cpu and architecture data structures.\n\t(gen_comm_data): Only put isa attributes from the main architecture\n\tin common tables.\n\t(option): New statement for architecture and CPU entries.\n\t* arm.c (struct cpu_option): New structure.\n\t(struct processors): Add entry for options.\n\t(arm_unrecognized_feature): New function.\n\t(arm_parse_arch_cpu_name): Ignore any characters after the first\n\t'+' character.\n\t(arm_parse_arch_cpu_feature): New function.\n\t(arm_configure_build_target): Separate out any CPU and architecture\n\tfeatures and parse separately.  Don't error out if -mfpu=auto is\n\tused with only an architecture string.\n\t(arm_print_asm_arch_directives): New function.\n\t(arm_file_start): Call it.\n\t* config/arm/arm-cpu-cdata.h: Regenerated.\n\t* config/arm/arm-cpu-data.h: Likewise.\n\t* config/arm/arm-tables.opt: Likewise.\n\nFrom-SVN: r249282", "tree": {"sha": "b100fabc54e3e90172a096b9189694e581394044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b100fabc54e3e90172a096b9189694e581394044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/250e088bc454927486f988aecbb0ec381ca7e76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250e088bc454927486f988aecbb0ec381ca7e76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250e088bc454927486f988aecbb0ec381ca7e76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250e088bc454927486f988aecbb0ec381ca7e76e/comments", "author": null, "committer": null, "parents": [{"sha": "53c5aa9909dda24e7b770ffb62a3aae9d5d8e5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c5aa9909dda24e7b770ffb62a3aae9d5d8e5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c5aa9909dda24e7b770ffb62a3aae9d5d8e5d4"}], "stats": {"total": 737, "additions": 579, "deletions": 158}, "files": [{"sha": "67ebd1cc49f0d4ee425946dcdeaceb5621ab31a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -1,3 +1,35 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv8-a): Add options crc, simd crypto and\n+\tnofp.\n+\t(armv8-a+crc): Delete.\n+\t(armv8.1-a): Add options simd, crypto and nofp.\n+\t(armv8.2-a): Add options fp16, simd, crypto and nofp.\n+\t(armv8.2-a+fp16): Delete.\n+\t(armv8-m.main): Add option dsp.\n+\t(armv8-m.main+dsp): Delete.\n+\t(cortex-a8): Add fpu.  Add nofp option.\n+\t(cortex-a9): Add fpu.  Add nofp and nosimd options.\n+\t* config/arm/parsecpu.awk (gen_data): Generate option tables and\n+\tlink to main cpu and architecture data structures.\n+\t(gen_comm_data): Only put isa attributes from the main architecture\n+\tin common tables.\n+\t(option): New statement for architecture and CPU entries.\n+\t* arm.c (struct cpu_option): New structure.\n+\t(struct processors): Add entry for options.\n+\t(arm_unrecognized_feature): New function.\n+\t(arm_parse_arch_cpu_name): Ignore any characters after the first\n+\t'+' character.\n+\t(arm_parse_arch_cpu_feature): New function.\n+\t(arm_configure_build_target): Separate out any CPU and architecture\n+\tfeatures and parse separately.\tDon't error out if -mfpu=auto is\n+\tused with only an architecture string.\n+\t(arm_print_asm_arch_directives): New function.\n+\t(arm_file_start): Call it.\n+\t* config/arm/arm-cpu-cdata.h: Regenerated.\n+\t* config/arm/arm-cpu-data.h: Likewise.\n+\t* config/arm/arm-tables.opt: Likewise.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/elf.h (ASM_SPEC): Only pass -mfpu through to the"}, {"sha": "a64413dc45fddb3dbd5bd62f1cea1f92bbff5615", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -577,13 +577,15 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-a8\",\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a9\",\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,\n       isa_nobit\n     },\n   },\n@@ -693,49 +695,49 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n   {\n     \"cortex-a32\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a35\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a53\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a57\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a72\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"exynos-m1\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n@@ -749,28 +751,28 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n   {\n     \"cortex-a57.cortex-a53\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a72.cortex-a53\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73.cortex-a35\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73.cortex-a53\",\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n       isa_nobit\n     },\n   },\n@@ -784,7 +786,7 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n   {\n     \"cortex-m33\",\n     {\n-      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      ISA_ARMv8m_main,\n       isa_nobit\n     },\n   },\n@@ -977,13 +979,6 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n       isa_nobit\n     },\n   },\n-  {\n-    \"armv8-a+crc\",\n-    {\n-      ISA_ARMv8a,isa_bit_crc32,\n-      isa_nobit\n-    },\n-  },\n   {\n     \"armv8.1-a\",\n     {\n@@ -998,13 +993,6 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n       isa_nobit\n     },\n   },\n-  {\n-    \"armv8.2-a+fp16\",\n-    {\n-      ISA_ARMv8_2a,isa_bit_fp16,\n-      isa_nobit\n-    },\n-  },\n   {\n     \"armv8-m.base\",\n     {\n@@ -1019,13 +1007,6 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n       isa_nobit\n     },\n   },\n-  {\n-    \"armv8-m.main+dsp\",\n-    {\n-      ISA_ARMv8m_main,isa_bit_ARMv7em,\n-      isa_nobit\n-    },\n-  },\n   {\n     \"iwmmxt\",\n     {"}, {"sha": "6ec0d3bc7d3290b66cef02a3534914fe744e5f29", "filename": "gcc/config/arm/arm-cpu-data.h", "status": "modified", "additions": 253, "deletions": 44, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-data.h?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -20,6 +20,26 @@\n    License along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+static const struct cpu_option cpu_opttab_cortexa8[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_NEON,ISA_VFPv3, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa9[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_NEON,ISA_VFPv3, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n static const struct processors all_cores[] =\n {\n   {\n@@ -31,6 +51,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv2,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -42,6 +63,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv2,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -53,6 +75,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv2,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -64,6 +87,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -75,6 +99,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -86,6 +111,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -97,6 +123,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -108,6 +135,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -119,6 +147,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -130,6 +159,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -141,6 +171,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -152,6 +183,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -163,6 +195,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -174,6 +207,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -185,6 +219,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -196,6 +231,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -207,6 +243,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -218,6 +255,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -229,6 +267,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -240,6 +279,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_slowmul_tune\n   },\n   {\n@@ -251,6 +291,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3m,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -262,6 +303,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3m,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -273,6 +315,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv3m,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -284,6 +327,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -295,6 +339,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -306,6 +351,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_strongarm_tune\n   },\n   {\n@@ -317,6 +363,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_strongarm_tune\n   },\n   {\n@@ -328,6 +375,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_strongarm_tune\n   },\n   {\n@@ -339,6 +387,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_strongarm_tune\n   },\n   {\n@@ -350,6 +399,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -361,6 +411,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -372,6 +423,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -383,6 +435,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -394,6 +447,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -405,6 +459,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -416,6 +471,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -427,6 +483,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -438,6 +495,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -449,6 +507,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -460,6 +519,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -471,6 +531,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -482,6 +543,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -493,6 +555,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -504,6 +567,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -515,6 +579,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5t,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -526,6 +591,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -537,6 +603,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -548,6 +615,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -559,6 +627,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -570,6 +639,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -581,6 +651,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -592,6 +663,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fastmul_tune\n   },\n   {\n@@ -604,6 +676,7 @@ static const struct processors all_cores[] =\n       isa_bit_xscale,\n       isa_nobit\n     },\n+    NULL,\n     &arm_xscale_tune\n   },\n   {\n@@ -615,6 +688,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n       isa_nobit\n     },\n+    NULL,\n     &arm_xscale_tune\n   },\n   {\n@@ -626,6 +700,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n       isa_nobit\n     },\n+    NULL,\n     &arm_xscale_tune\n   },\n   {\n@@ -637,6 +712,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -648,6 +724,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -659,6 +736,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -670,6 +748,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     &arm_fa726te_tune\n   },\n   {\n@@ -681,6 +760,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5tej,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -692,6 +772,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv5tej,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -703,6 +784,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6j,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -715,6 +797,7 @@ static const struct processors all_cores[] =\n       ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -726,6 +809,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -738,6 +822,7 @@ static const struct processors all_cores[] =\n       ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -749,6 +834,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6k,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -761,6 +847,7 @@ static const struct processors all_cores[] =\n       ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n+    NULL,\n     &arm_9e_tune\n   },\n   {\n@@ -772,6 +859,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6t2,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6t2_tune\n   },\n   {\n@@ -784,6 +872,7 @@ static const struct processors all_cores[] =\n       ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6t2_tune\n   },\n   {\n@@ -795,6 +884,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -806,6 +896,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -817,6 +908,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -828,6 +920,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -839,6 +932,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -850,6 +944,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -861,6 +956,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7a,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -872,6 +968,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7a,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a5_tune\n   },\n   {\n@@ -883,6 +980,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a7_tune\n   },\n   {\n@@ -892,8 +990,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,\n       isa_nobit\n     },\n+    cpu_opttab_cortexa8,\n     &arm_cortex_a8_tune\n   },\n   {\n@@ -903,8 +1003,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,\n       isa_nobit\n     },\n+    cpu_opttab_cortexa9,\n     &arm_cortex_a9_tune\n   },\n   {\n@@ -916,6 +1018,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -927,6 +1030,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a15_tune\n   },\n   {\n@@ -938,6 +1042,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -949,6 +1054,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7r,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -960,6 +1066,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7r,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -972,6 +1079,7 @@ static const struct processors all_cores[] =\n       isa_bit_adiv,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -984,6 +1092,7 @@ static const struct processors all_cores[] =\n       isa_bit_adiv,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -996,6 +1105,7 @@ static const struct processors all_cores[] =\n       isa_bit_adiv,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_tune\n   },\n   {\n@@ -1008,6 +1118,7 @@ static const struct processors all_cores[] =\n       isa_quirk_no_volatile_ce,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_m7_tune\n   },\n   {\n@@ -1019,6 +1130,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7em,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v7m_tune\n   },\n   {\n@@ -1031,6 +1143,7 @@ static const struct processors all_cores[] =\n       isa_quirk_cm3_ldrd,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v7m_tune\n   },\n   {\n@@ -1042,6 +1155,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7a,\n       isa_nobit\n     },\n+    NULL,\n     &arm_marvell_pj4_tune\n   },\n   {\n@@ -1053,6 +1167,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a15_tune\n   },\n   {\n@@ -1064,6 +1179,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -1072,9 +1188,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a35_tune\n   },\n   {\n@@ -1083,9 +1201,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a35_tune\n   },\n   {\n@@ -1094,9 +1214,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a53_tune\n   },\n   {\n@@ -1105,9 +1227,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1116,9 +1240,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1127,9 +1253,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1138,9 +1266,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_exynosm1_tune\n   },\n   {\n@@ -1152,6 +1282,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv8a,\n       isa_nobit\n     },\n+    NULL,\n     &arm_xgene1_tune\n   },\n   {\n@@ -1160,9 +1291,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1171,9 +1304,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1182,9 +1317,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1193,9 +1330,11 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8A\", BASE_ARCH_8A,\n     {\n-      ISA_ARMv8a,isa_bit_crc32,\n+      ISA_ARMv8a,\n+      isa_bit_crc32,\n       isa_nobit\n     },\n+    NULL,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1207,6 +1346,7 @@ static const struct processors all_cores[] =\n       ISA_ARMv8m_base,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v6m_tune\n   },\n   {\n@@ -1215,12 +1355,78 @@ static const struct processors all_cores[] =\n     (TF_LDSCHED),\n     \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n     {\n-      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      ISA_ARMv8m_main,\n+      isa_bit_ARMv7em,\n       isa_nobit\n     },\n+    NULL,\n     &arm_v7m_tune\n   },\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL, NULL}\n+};\n+\n+static const struct cpu_option arch_opttab_armv8_a[] = {\n+  {\n+    \"crc\", false,\n+    { isa_bit_crc32, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv8_1_a[] = {\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv8_2_a[] = {\n+  {\n+    \"fp16\", false,\n+    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv8_m_main[] = {\n+  {\n+    \"dsp\", false,\n+    { isa_bit_ARMv7em, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n };\n \n static const struct processors all_architectures[] =\n@@ -1233,6 +1439,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv2,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1243,6 +1450,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv2,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1253,6 +1461,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv3,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1263,6 +1472,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv3m,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1273,6 +1483,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv4,isa_bit_mode26,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1283,6 +1494,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv4t,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1293,6 +1505,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1303,6 +1516,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5t,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1313,6 +1527,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5e,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1323,6 +1538,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1333,6 +1549,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5tej,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1343,6 +1560,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1353,6 +1571,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6j,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1363,6 +1582,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6k,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1373,6 +1593,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6z,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1383,6 +1604,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1393,6 +1615,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1403,6 +1626,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6t2,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1413,6 +1637,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1423,6 +1648,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6m,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1433,6 +1659,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1443,6 +1670,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7a,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1453,6 +1681,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1463,6 +1692,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7r,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1473,6 +1703,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7m,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1483,6 +1714,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7em,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1493,16 +1725,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv8a,\n       isa_nobit\n     },\n-    NULL\n-  },\n-  {\n-    \"armv8-a+crc\", TARGET_CPU_cortexa53,\n-    (TF_CO_PROC),\n-    \"8A\", BASE_ARCH_8A,\n-    {\n-      ISA_ARMv8a,isa_bit_crc32,\n-      isa_nobit\n-    },\n+    arch_opttab_armv8_a,\n     NULL\n   },\n   {\n@@ -1513,6 +1736,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv8_1a,\n       isa_nobit\n     },\n+    arch_opttab_armv8_1_a,\n     NULL\n   },\n   {\n@@ -1523,16 +1747,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv8_2a,\n       isa_nobit\n     },\n-    NULL\n-  },\n-  {\n-    \"armv8.2-a+fp16\", TARGET_CPU_cortexa53,\n-    (TF_CO_PROC),\n-    \"8A\", BASE_ARCH_8A,\n-    {\n-      ISA_ARMv8_2a,isa_bit_fp16,\n-      isa_nobit\n-    },\n+    arch_opttab_armv8_2_a,\n     NULL\n   },\n   {\n@@ -1543,6 +1758,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv8m_base,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1553,16 +1769,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv8m_main,\n       isa_nobit\n     },\n-    NULL\n-  },\n-  {\n-    \"armv8-m.main+dsp\", TARGET_CPU_cortexm33,\n-    (TF_CO_PROC),\n-    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n-    {\n-      ISA_ARMv8m_main,isa_bit_ARMv7em,\n-      isa_nobit\n-    },\n+    arch_opttab_armv8_m_main,\n     NULL\n   },\n   {\n@@ -1573,6 +1780,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n   {\n@@ -1583,9 +1791,10 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n       isa_nobit\n     },\n+    NULL,\n     NULL\n   },\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL, NULL}\n };\n \n const struct arm_fpu_desc all_fpus[] ="}, {"sha": "6c9346cc9adc454a1941aa648a1683453062a3bd", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -237,36 +237,33 @@ begin arch armv8-a\n  tune flags CO_PROC\n  base 8A\n  isa ARMv8a\n+ option crc add bit_crc32\n+ option simd add FP_ARMv8 NEON\n+ option crypto add FP_ARMv8 NEON CRYPTO\n+ option nofp remove FP_ARMv8 NEON CRYPTO\n end arch armv8-a\n \n-begin arch armv8-a+crc\n- tune for cortex-a53\n- tune flags CO_PROC\n- base 8A\n- isa ARMv8a bit_crc32\n-end arch armv8-a+crc\n-\n begin arch armv8.1-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n  isa ARMv8_1a\n+ option simd add FP_ARMv8 NEON\n+ option crypto add FP_ARMv8 NEON CRYPTO\n+ option nofp remove FP_ARMv8 NEON CRYPTO\n end arch armv8.1-a\n \n begin arch armv8.2-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n  isa ARMv8_2a\n+ option fp16 add bit_fp16 FP_ARMv8 NEON\n+ option simd add FP_ARMv8 NEON\n+ option crypto add FP_ARMv8 NEON CRYPTO\n+ option nofp remove bit_fp16 FP_ARMv8 NEON CRYPTO\n end arch armv8.2-a\n \n-begin arch armv8.2-a+fp16\n- tune for cortex-a53\n- tune flags CO_PROC\n- base 8A\n- isa ARMv8_2a bit_fp16\n-end arch armv8.2-a+fp16\n-\n begin arch armv8-m.base\n  tune for cortex-m23\n  base 8M_BASE\n@@ -278,15 +275,9 @@ begin arch armv8-m.main\n  tune flags CO_PROC\n  base 8M_MAIN\n  isa ARMv8m_main\n+ option dsp add bit_ARMv7em\n end arch armv8-m.main\n \n-begin arch armv8-m.main+dsp\n- tune for cortex-m33\n- tune flags CO_PROC\n- base 8M_MAIN\n- isa ARMv8m_main bit_ARMv7em\n-end arch armv8-m.main+dsp\n-\n begin arch iwmmxt\n  tune for iwmmxt\n  tune flags LDSCHED STRONG XSCALE\n@@ -310,6 +301,7 @@ end arch iwmmxt2\n #   architecture <name>\n #   [fpu <name>]\n #   [isa <additional-isa-flags-list>]\n+#   [option <name> add|remove <isa-list>]*\n #   [costs <name>]\n # end cpu <name>\n #\n@@ -847,13 +839,18 @@ begin cpu cortex-a8\n  cname cortexa8\n  tune flags LDSCHED\n  architecture armv7-a\n+ fpu neon-vfpv3\n+ option nofp remove NEON VFPv3\n  costs cortex_a8\n end cpu cortex-a8\n \n begin cpu cortex-a9\n  cname cortexa9\n  tune flags LDSCHED\n  architecture armv7-a\n+ fpu neon-vfpv3\n+ option nofp remove NEON VFPv3\n+ option nosimd remove NEON\n  costs cortex_a9\n end cpu cortex-a9\n "}, {"sha": "0f50c64f4b1239191d9d178f78249537b288a73d", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -434,31 +434,22 @@ EnumValue\n Enum(arm_arch) String(armv8-a) Value(26)\n \n EnumValue\n-Enum(arm_arch) String(armv8-a+crc) Value(27)\n+Enum(arm_arch) String(armv8.1-a) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(armv8.1-a) Value(28)\n+Enum(arm_arch) String(armv8.2-a) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a) Value(29)\n+Enum(arm_arch) String(armv8-m.base) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a+fp16) Value(30)\n+Enum(arm_arch) String(armv8-m.main) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(31)\n+Enum(arm_arch) String(iwmmxt) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(32)\n-\n-EnumValue\n-Enum(arm_arch) String(armv8-m.main+dsp) Value(33)\n-\n-EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(34)\n-\n-EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(35)\n+Enum(arm_arch) String(iwmmxt2) Value(32)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "f35a1c2fc1bcd5321fb256b55b48d9d310a02ee0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 160, "deletions": 31, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -975,14 +975,22 @@ int arm_regs_in_sequence[] =\n \f\n /* Initialization code.  */\n \n+struct cpu_option\n+{\n+  const char *const name;\n+  bool remove;\n+  const enum isa_feature isa_bits[isa_num_bits];\n+};\n+\n struct processors\n {\n   const char *const name;\n   enum processor_type core;\n   unsigned int tune_flags;\n   const char *arch;\n   enum base_architecture base_arch;\n-  enum isa_feature isa_bits[isa_num_bits];\n+  const enum isa_feature isa_bits[isa_num_bits];\n+  const struct cpu_option* const opttab;\n   const struct tune_params *const tune;\n };\n \n@@ -3068,9 +3076,13 @@ arm_parse_arch_cpu_name (const struct processors *list, const char *optname,\n \t\t\t const char *target)\n {\n   const struct processors *entry;\n+  const char *end  = strchr (target, '+');\n+  size_t len = end ? end - target : strlen (target);\n+\n   for (entry = list; entry->name != NULL; entry++)\n     {\n-      if (streq (entry->name, target))\n+      if (strncmp (entry->name, target, len) == 0\n+\t  && entry->name[len] == '\\0')\n \treturn entry;\n     }\n \n@@ -3079,6 +3091,92 @@ arm_parse_arch_cpu_name (const struct processors *list, const char *optname,\n   return NULL;\n }\n \n+/* OPT isn't a recognized feature.  Print a suitable error message and\n+   suggest a possible value.  Always print the list of permitted\n+   values.  */\n+static void\n+arm_unrecognized_feature (const char *opt, size_t len,\n+\t\t\t  const struct processors *target)\n+{\n+  char *this_opt = XALLOCAVEC (char, len+1);\n+  auto_vec<const char*> candidates;\n+\n+  strncpy (this_opt, opt, len);\n+  this_opt[len] = 0;\n+\n+  error_at (input_location, \"%qs does not support feature %qs\", target->name,\n+\t    this_opt);\n+  for (const cpu_option *list = target->opttab; list->name != NULL; list++)\n+    candidates.safe_push (list->name);\n+\n+  char *s;\n+  const char *hint = candidates_list_and_hint (this_opt, s, candidates);\n+\n+  if (hint)\n+    inform (input_location, \"valid feature names are: %s; did you mean %qs?\",\n+\t    s, hint);\n+  else\n+    inform (input_location, \"valid feature names are: %s\", s);\n+\n+  XDELETEVEC (s);\n+}\n+\n+/* Parse any feature extensions to add to (or remove from) the\n+   permitted ISA selection.  */\n+static void\n+arm_parse_arch_cpu_features (sbitmap isa, const struct processors *target,\n+\t\t\t     const char *opts_in)\n+{\n+  const char *opts = opts_in;\n+\n+  if (!opts)\n+    return;\n+\n+  if (!target->opttab)\n+    {\n+      error_at (input_location, \"%s does not take any feature options\",\n+\t\ttarget->name);\n+      return;\n+    }\n+\n+  while (opts)\n+    {\n+      gcc_assert (*opts == '+');\n+      const struct cpu_option *entry;\n+      const char *end = strchr (++opts, '+');\n+      size_t len = end ? end - opts : strlen (opts);\n+      bool matched = false;\n+\n+      for (entry = target->opttab; !matched && entry->name != NULL; entry++)\n+\t{\n+\t  if (strncmp (entry->name, opts, len) == 0\n+\t      && entry->name[len] == '\\0')\n+\t    {\n+\t      if (isa)\n+\t\t{\n+\t\t  const enum isa_feature *f = entry->isa_bits;\n+\t\t  if (entry->remove)\n+\t\t    {\n+\t\t      while (*f != isa_nobit)\n+\t\t\tbitmap_clear_bit (isa, *(f++));\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      while (*f != isa_nobit)\n+\t\t\tbitmap_set_bit (isa, *(f++));\n+\t\t    }\n+\t\t}\n+\t      matched = true;\n+\t    }\n+\t}\n+\n+      if (!matched)\n+\tarm_unrecognized_feature (opts, len, target);\n+\n+      opts = end;\n+    }\n+}\n+\n static sbitmap isa_all_fpubits;\n static sbitmap isa_quirkbits;\n \n@@ -3095,35 +3193,50 @@ arm_configure_build_target (struct arm_build_target *target,\n   const struct processors *arm_selected_arch = NULL;\n   const struct processors *arm_selected_cpu = NULL;\n   const struct arm_fpu_desc *arm_selected_fpu = NULL;\n+  const char *tune_opts = NULL;\n+  const char *arch_opts = NULL;\n+  const char *cpu_opts = NULL;\n \n   bitmap_clear (target->isa);\n   target->core_name = NULL;\n   target->arch_name = NULL;\n \n   if (opts_set->x_arm_arch_string)\n-    arm_selected_arch = arm_parse_arch_cpu_name (all_architectures,\n-\t\t\t\t\t\t \"-march\",\n-\t\t\t\t\t\t opts->x_arm_arch_string);\n+    {\n+      arm_selected_arch = arm_parse_arch_cpu_name (all_architectures,\n+\t\t\t\t\t\t   \"-march\",\n+\t\t\t\t\t\t   opts->x_arm_arch_string);\n+      arch_opts = strchr (opts->x_arm_arch_string, '+');\n+    }\n+\n   if (opts_set->x_arm_cpu_string)\n     {\n       arm_selected_cpu = arm_parse_arch_cpu_name (all_cores, \"-mcpu\",\n \t\t\t\t\t\t  opts->x_arm_cpu_string);\n+      cpu_opts = strchr (opts->x_arm_cpu_string, '+');\n       arm_selected_tune = arm_selected_cpu;\n+      /* If taking the tuning from -mcpu, we don't need to rescan the\n+\t options for tuning.  */\n     }\n \n   if (opts_set->x_arm_tune_string)\n-    arm_selected_tune = arm_parse_arch_cpu_name (all_cores, \"-mtune\",\n-\t\t\t\t\t\t opts->x_arm_tune_string);\n+    {\n+      arm_selected_tune = arm_parse_arch_cpu_name (all_cores, \"-mtune\",\n+\t\t\t\t\t\t   opts->x_arm_tune_string);\n+      tune_opts = strchr (opts->x_arm_tune_string, '+');\n+    }\n \n   if (arm_selected_arch)\n     {\n       arm_initialize_isa (target->isa, arm_selected_arch->isa_bits);\n+      arm_parse_arch_cpu_features (target->isa, arm_selected_arch, arch_opts);\n \n       if (arm_selected_cpu)\n \t{\n \t  auto_sbitmap cpu_isa (isa_num_bits);\n \n \t  arm_initialize_isa (cpu_isa, arm_selected_cpu->isa_bits);\n+\t  arm_parse_arch_cpu_features (cpu_isa, arm_selected_cpu, cpu_opts);\n \t  bitmap_xor (cpu_isa, cpu_isa, target->isa);\n \t  /* Ignore any bits that are quirk bits.  */\n \t  bitmap_and_compl (cpu_isa, cpu_isa, isa_quirkbits);\n@@ -3163,6 +3276,7 @@ arm_configure_build_target (struct arm_build_target *target,\n     {\n       target->core_name = arm_selected_cpu->name;\n       arm_initialize_isa (target->isa, arm_selected_cpu->isa_bits);\n+      arm_parse_arch_cpu_features (target->isa, arm_selected_cpu, cpu_opts);\n     }\n   /* If the user did not specify a processor, choose one for them.  */\n   else\n@@ -3283,14 +3397,12 @@ arm_configure_build_target (struct arm_build_target *target,\n       bitmap_and_compl (target->isa, target->isa, isa_all_fpubits);\n       bitmap_ior (target->isa, target->isa, fpu_bits);\n     }\n-  else if (target->core_name == NULL)\n-    /* To support this we need to be able to parse FPU feature options\n-       from the architecture string.  */\n-    sorry (\"-mfpu=auto not currently supported without an explicit CPU.\");\n \n   /* The selected cpu may be an architecture, so lookup tuning by core ID.  */\n   if (!arm_selected_tune)\n     arm_selected_tune = &all_cores[arm_selected_cpu->core];\n+  else /* Validate the features passed to -mtune.  */\n+    arm_parse_arch_cpu_features (NULL, arm_selected_tune, tune_opts);\n \n   /* Finish initializing the target structure.  */\n   target->arch_pp_name = arm_selected_cpu->arch;\n@@ -26165,6 +26277,39 @@ arm_print_tune_info (void)\n \t       (int) current_tune->sched_autopref);\n }\n \n+/* Print .arch and .arch_extension directives corresponding to the\n+   current architecture configuration.  */\n+static void\n+arm_print_asm_arch_directives ()\n+{\n+  const struct processors *arch\n+    = arm_parse_arch_cpu_name (all_architectures, \"-march\",\n+\t\t\t       arm_active_target.arch_name);\n+  auto_sbitmap opt_bits (isa_num_bits);\n+\n+  gcc_assert (arch);\n+\n+  asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_active_target.arch_name);\n+  if (!arch->opttab)\n+    return;\n+\n+  for (const struct cpu_option *opt = arch->opttab; opt->name != NULL; opt++)\n+    {\n+      if (!opt->remove)\n+\t{\n+\t  arm_initialize_isa (opt_bits, opt->isa_bits);\n+\n+\t  /* If every feature bit of this option is set in the target\n+\t     ISA specification, print out the option name.  However,\n+\t     don't print anything if all the bits are part of the\n+\t     FPU specification.  */\n+\t  if (bitmap_subset_p (opt_bits, arm_active_target.isa)\n+\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits))\n+\t    asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", opt->name);\n+\t}\n+    }\n+}\n+\n static void\n arm_file_start (void)\n {\n@@ -26179,7 +26324,7 @@ arm_file_start (void)\n \t assembler would not need to know about all new CPU names as\n \t they are added.  */\n       if (!arm_active_target.core_name)\n-        {\n+\t{\n \t  /* armv7ve doesn't support any extensions.  */\n \t  if (strcmp (arm_active_target.arch_name, \"armv7ve\") == 0)\n \t    {\n@@ -26192,24 +26337,8 @@ arm_file_start (void)\n \t      asm_fprintf (asm_out_file, \"\\t.arch_extension mp\\n\");\n \t    }\n \t  else\n-\t    {\n-\t      const char* pos = strchr (arm_active_target.arch_name, '+');\n-\t      if (pos)\n-\t\t{\n-\t\t  char buf[32];\n-\t\t  gcc_assert (strlen (arm_active_target.arch_name)\n-\t\t\t      <= sizeof (buf) / sizeof (*pos));\n-\t\t  strncpy (buf, arm_active_target.arch_name,\n-\t\t\t   (pos - arm_active_target.arch_name) * sizeof (*pos));\n-\t\t  buf[pos - arm_active_target.arch_name] = '\\0';\n-\t\t  asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", buf);\n-\t\t  asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", pos + 1);\n-\t\t}\n-\t      else\n-\t\tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\",\n-\t\t\t     arm_active_target.arch_name);\n-\t    }\n-        }\n+\t    arm_print_asm_arch_directives ();\n+\t}\n       else if (strncmp (arm_active_target.core_name, \"generic\", 7) == 0)\n \tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\",\n \t\t     arm_active_target.core_name + 8);\n@@ -26233,7 +26362,7 @@ arm_file_start (void)\n \t}\n \n       /* Some of these attributes only apply when the corresponding features\n-         are used.  However we don't have any easy way of figuring this out.\n+\t are used.  However we don't have any easy way of figuring this out.\n \t Conservatively record the setting that would have been used.  */\n \n       if (flag_rounding_math)"}, {"sha": "c95d9228a3e531b7d332dfd543e85e085515bdef", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 96, "deletions": 14, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250e088bc454927486f988aecbb0ec381ca7e76e/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=250e088bc454927486f988aecbb0ec381ca7e76e", "patch": "@@ -117,11 +117,28 @@ function gen_headers () {\n function gen_data () {\n     boilerplate(\"C\")\n \n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tif (cpus[n] in cpu_opts) {\n+\t    print \"static const struct cpu_option cpu_opttab_\" \\\n+\t\tcpu_cnames[cpus[n]] \"[] = {\"\n+\t    nopts = split (cpu_opts[cpus[n]], opts)\n+\t    for (opt = 1; opt <= nopts; opt++) {\n+\t\tprint \"  {\"\n+\t\tprint \"    \\\"\" opts[opt] \"\\\", \" \\\n+\t\t    cpu_opt_remove[cpus[n],opts[opt]] \",\"\n+\t\tprint \"    { \" cpu_opt_isa[cpus[n],opts[opt]] \", isa_nobit }\"\n+\t\tprint \"  },\"\n+\t    }\n+\t    print \"  { NULL, false, {isa_nobit}}\"\n+\t    print \"};\\n\"\n+\t}\n+    }\n+\n     print \"static const struct processors all_cores[] =\"\n     print \"{\"\n \n-    ncpus = split (cpu_list, cpus)\n-\n     for (n = 1; n <= ncpus; n++) {\n \tprint \"  {\"\n \tprint \"    \\\"\" cpus[n] \"\\\",\"\n@@ -137,30 +154,60 @@ function gen_data () {\n \tif (cpus[n] in cpu_tune_flags) {\n \t    print \"    (\" cpu_tune_flags[cpus[n]] \"),\"\n \t} else print \"    0,\"\n-\tif (! (cpu_arch[cpus[n]] in arch_isa)) {\n-\t    fatal(\"unknown arch \" cpu_arch[cpus[n]] \" for cpu \" cpus[n])\n+\tnfeats = split (cpu_arch[cpus[n]], feats, \"+\")\n+\tif (! (feats[1] in arch_isa)) {\n+\t    fatal(\"unknown arch \" feats[1] \" for cpu \" cpus[n])\n \t}\n-\tprint \"    \\\"\" arch_base[cpu_arch[cpus[n]]] \"\\\", BASE_ARCH_\" \\\n-\t    arch_base[cpu_arch[cpus[n]]] \",\"\n+\tprint \"    \\\"\" arch_base[feats[1]] \"\\\", BASE_ARCH_\" \\\n+\t    arch_base[feats[1]] \",\"\n \tprint \"    {\"\n-\tprint \"      \" arch_isa[cpu_arch[cpus[n]]] \",\"\n+\tprint \"      \" arch_isa[feats[1]] \",\"\n+\tfor (m = 2; m <= nfeats; m++) {\n+\t    if (! ((feats[1], feats[m]) in arch_opt_isa)) {\n+\t\tfatal(\"unknown feature \" feats[m] \" for architecture \" feats[1])\n+\t    }\n+\t    if (arch_opt_remove[feats[1],feats[m]] == \"true\") {\n+\t\tfatal(\"cannot remove features from architecture specs\")\n+\t    }\n+\t    print \"      \" arch_opt_isa[feats[1],feats[m]] \",\"\n+\t}\n \tif (cpus[n] in cpu_fpu) print \"      \" fpu_isa[cpu_fpu[cpus[n]]] \",\"\n \tif (cpus[n] in cpu_isa) print \"      \" cpu_isa[cpus[n]] \",\"\n \tprint \"      isa_nobit\"\n \tprint \"    },\"\n+\tif (cpus[n] in cpu_opts) {\n+\t    print \"    cpu_opttab_\" cpu_cnames[cpus[n]] \",\"\n+\t} else print \"    NULL,\"\n \tprint \"    &arm_\" cpu_cost[cpus[n]] \"_tune\"\n \tprint \"  },\"\n     }\n \n     print \"  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0,\" \\\n-\t\" {isa_nobit}, NULL}\"\n+\t\" {isa_nobit}, NULL, NULL}\"\n     print \"};\\n\"\n \n+    narchs = split (arch_list, archs)\n+\n+    for (n = 1; n <= narchs; n++) {\n+\tif (archs[n] in arch_opts) {\n+\t    print \"static const struct cpu_option arch_opttab_\" \\\n+\t\tarch_cnames[archs[n]] \"[] = {\"\n+\t    nopts = split (arch_opts[archs[n]], opts)\n+\t    for (opt = 1; opt <= nopts; opt++) {\n+\t\tprint \"  {\"\n+\t\tprint \"    \\\"\" opts[opt] \"\\\", \" \\\n+\t\t    arch_opt_remove[archs[n],opts[opt]] \",\"\n+\t\tprint \"    { \" arch_opt_isa[archs[n],opts[opt]] \", isa_nobit }\"\n+\t\tprint \"  },\"\n+\t    }\n+\t    print \"  { NULL, false, {isa_nobit}}\"\n+\t    print \"};\\n\"\n+\t}\n+    }\n+\n     print \"static const struct processors all_architectures[] =\"\n     print \"{\"\n \n-    narchs = split (arch_list, archs)\n-\n     for (n = 1; n <= narchs; n++) {\n \tprint \"  {\"\n \tif (! (arch_tune_for[archs[n]] in cpu_cnames)) {\n@@ -178,12 +225,15 @@ function gen_data () {\n \tprint \"      \" arch_isa[archs[n]] \",\"\n \tprint \"      isa_nobit\"\n \tprint \"    },\"\n+\tif (archs[n] in arch_opts) {\n+\t    print \"    arch_opttab_\" arch_cnames[archs[n]] \",\"\n+\t} else print \"    NULL,\"\n \tprint \"    NULL\"\n \tprint \"  },\"\n     }\n \n     print \"  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0,\" \\\n-\t\" {isa_nobit}, NULL}\"\n+\t\" {isa_nobit}, NULL, NULL}\"\n     print \"};\\n\"\n \n     print \"const struct arm_fpu_desc all_fpus[] =\"\n@@ -215,11 +265,15 @@ function gen_comm_data () {\n     for (n = 1; n <= ncpus; n++) {\n \tprint \"  {\"\n \tprint \"    \\\"\" cpus[n] \"\\\",\"\n-\tif (! (cpu_arch[cpus[n]] in arch_isa)) {\n-\t    fatal(\"unknown arch \" cpu_arch[cpus[n]] \" for cpu \" cpus[n])\n+\t# Just truncate the architecture name at the beginning of the\n+\t# extensions.  We don't need any of those here (at present).\n+\tarch_name = cpu_arch[cpus[n]];\n+\tsub(\"+.*\", \"\", arch_name)\n+\tif (! (arch_name in arch_isa)) {\n+\t    fatal(\"unknown arch \" arch_name \" for cpu \" cpus[n])\n \t}\n \tprint \"    {\"\n-\tprint \"      \" arch_isa[cpu_arch[cpus[n]]] \",\"\n+\tprint \"      \" arch_isa[arch_name] \",\"\n \tif (cpus[n] in cpu_fpu)\tprint \"      \" fpu_isa[cpu_fpu[cpus[n]]] \",\"\n \tif (cpus[n] in cpu_isa)\tprint \"      \" cpu_isa[cpus[n]] \",\"\n \tprint \"      isa_nobit\"\n@@ -382,6 +436,8 @@ BEGIN {\n \tfatal(\"arch definition lacks an \\\"isa\\\" statement\")\n     }\n     arch_list = arch_list \" \" arch_name\n+    arch_cnames[arch_name] = arch_name\n+    gsub(/[-+.]/, \"_\", arch_cnames[arch_name])\n     arch_name = \"\"\n     parse_ok = 1\n }\n@@ -453,6 +509,32 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^[ \t]*option / {\n+    name=$2\n+    if ($3 == \"add\") {\n+\tremove = \"false\"\n+    } else if ($3 == \"remove\") {\n+\tremove = \"true\"\n+    } else fatal(\"syntax: option <name> add|remove isa-list\")\n+    flags=\"\"\n+    flag_count = NF\n+    for (n = 4; n <= flag_count; n++) {\n+\tif (n == 4) {\n+\t    flags = isa_pfx($n)\n+\t} else flags = flags \",\" isa_pfx($n)\n+    }\n+    if (cpu_name != \"\") {\n+\tcpu_opts[cpu_name] = cpu_opts[cpu_name] \" \" name\n+\tcpu_opt_remove[cpu_name,name] = remove\n+\tcpu_opt_isa[cpu_name,name] = flags\n+    } else if (arch_name != \"\") {\n+\tarch_opts[arch_name] = arch_opts[arch_name] \" \" name\n+\tarch_opt_remove[arch_name,name] = remove\n+\tarch_opt_isa[arch_name,name] = flags\n+    } else fatal(\"\\\"option\\\" outside of cpu or arch block\")\n+    parse_ok = 1\n+}\n+\n /^[ \t]*costs / {\n     if (cpu_name == \"\") fatal(\"\\\"costs\\\" outside of cpu block\")\n     cpu_cost[cpu_name] = $2"}]}