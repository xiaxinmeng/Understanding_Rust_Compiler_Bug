{"sha": "3f85558f2472d16219674988f4bd850bc285911b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4NTU1OGYyNDcyZDE2MjE5Njc0OTg4ZjRiZDg1MGJjMjg1OTExYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-09-16T00:48:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-16T00:48:52Z"}, "message": "* c-typeck.c (comptypes): Handle zero-length arrays properly.\n\nFrom-SVN: r45641", "tree": {"sha": "8d6ab78fd636b37014133303f1681a7382f2be32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d6ab78fd636b37014133303f1681a7382f2be32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f85558f2472d16219674988f4bd850bc285911b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f85558f2472d16219674988f4bd850bc285911b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f85558f2472d16219674988f4bd850bc285911b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f85558f2472d16219674988f4bd850bc285911b/comments", "author": null, "committer": null, "parents": [{"sha": "c6c04fcab33d550750947961382c898323f2fcf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c04fcab33d550750947961382c898323f2fcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c04fcab33d550750947961382c898323f2fcf9"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "e36dcc210a3b679a737b4d85ffc65f857a1b1c4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85558f2472d16219674988f4bd850bc285911b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85558f2472d16219674988f4bd850bc285911b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f85558f2472d16219674988f4bd850bc285911b", "patch": "@@ -1,3 +1,7 @@\n+2001-09-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-typeck.c (comptypes): Handle zero-length arrays properly.\n+\n 2001-09-15  Roman Lechtchinsky  <rl@cs.tu-berlin.de>\n \n \t* c-common.c (c_promoting_integer_type_p): Handle ?Imode types."}, {"sha": "3298062e8d7023fed0e84718ec6b6588f73f1a9f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85558f2472d16219674988f4bd850bc285911b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85558f2472d16219674988f4bd850bc285911b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3f85558f2472d16219674988f4bd850bc285911b", "patch": "@@ -505,6 +505,8 @@ comptypes (type1, type2)\n       {\n \ttree d1 = TYPE_DOMAIN (t1);\n \ttree d2 = TYPE_DOMAIN (t2);\n+\tbool d1_variable, d2_variable;\n+\tbool d1_zero, d2_zero;\n \tval = 1;\n \n \t/* Target types must match incl. qualifiers.  */\n@@ -513,14 +515,25 @@ comptypes (type1, type2)\n \t  return 0;\n \n \t/* Sizes must match unless one is missing or variable.  */\n-\tif (d1 == 0 || d2 == 0 || d1 == d2\n-\t    || TREE_CODE (TYPE_MIN_VALUE (d1)) != INTEGER_CST\n-\t    || TREE_CODE (TYPE_MIN_VALUE (d2)) != INTEGER_CST\n-\t    || TREE_CODE (TYPE_MAX_VALUE (d1)) != INTEGER_CST\n-\t    || TREE_CODE (TYPE_MAX_VALUE (d2)) != INTEGER_CST)\n+\tif (d1 == 0 || d2 == 0 || d1 == d2)\n \t  break;\n \n-\tif (! tree_int_cst_equal (TYPE_MIN_VALUE (d1), TYPE_MIN_VALUE (d2))\n+\td1_zero = ! TYPE_MAX_VALUE (d1);\n+\td2_zero = ! TYPE_MAX_VALUE (d2);\n+\n+\td1_variable = (! d1_zero\n+\t\t       && (TREE_CODE (TYPE_MIN_VALUE (d1)) != INTEGER_CST\n+\t\t\t   || TREE_CODE (TYPE_MAX_VALUE (d1)) != INTEGER_CST));\n+\td2_variable = (! d2_zero\n+\t\t       && (TREE_CODE (TYPE_MIN_VALUE (d2)) != INTEGER_CST\n+\t\t\t   || TREE_CODE (TYPE_MAX_VALUE (d2)) != INTEGER_CST));\n+\n+\tif (d1_variable || d2_variable)\n+\t  break;\n+\tif (d1_zero && d2_zero)\n+\t  break;\n+\tif (d1_zero || d2_zero\n+\t    || ! tree_int_cst_equal (TYPE_MIN_VALUE (d1), TYPE_MIN_VALUE (d2))\n \t    || ! tree_int_cst_equal (TYPE_MAX_VALUE (d1), TYPE_MAX_VALUE (d2)))\n \t  val = 0;\n "}, {"sha": "f5321e45238d9f7de21e5ab2f8d8b4305e5f264d", "filename": "gcc/testsuite/gcc.dg/array-5.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85558f2472d16219674988f4bd850bc285911b/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85558f2472d16219674988f4bd850bc285911b/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c?ref=3f85558f2472d16219674988f4bd850bc285911b", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Check compatibility of array declarations.  */\n+\n+/* Incomplete decl matches.  */\n+extern char arr0[];\n+char arr0[1];\n+\n+/* Two integral expressions must be the same.  Note that 0 is\n+   a gcc extension, but it should work like any other constant.  */\n+extern char arr1[1];\n+char arr1[1];\n+extern char arr2[0];\n+char arr2[0];\n+extern char arr3[0];            /* { dg-error \"previous declaration\" } */\n+char arr3[1];                   /* { dg-error \"conflicting types\" } */\n+\n+/* Variable size matches.  */\n+void func(int n, int m)\n+{\n+  /* The next two are from the example in c99 6.7.5.2/9.  */\n+  {\n+    /* Invalid: not compatible because 4 != 6.  */\n+    int a[n][6][m];\n+    int (*p)[4][n+1];\n+    p = a;\t\t\t/* { dg-error \"incompatible\" } */\n+  }\n+  {\n+    /* Compatible, but defined behavior only if n == 6 and m == n+1.  */\n+    int c[n][n][6][m];\n+    int (*r)[n][n][n+1];\n+    r = c;\n+  }\n+  {\n+    /* Compatible, but undefined behavior; (2, 2) is not a constant\n+       expression, and thus A is a VLA.  */\n+    int a[(2, 2)];\n+    int (*p)[3];\n+    p = a; /* { dg-bogus \"incompatible\" \"bad vla handling\" { xfail *-*-* } } */\n+  }\n+}"}]}