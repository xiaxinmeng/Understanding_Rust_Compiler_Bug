{"sha": "ef389dadd4f082e13b076f14a123bf506e158da4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzODlkYWRkNGYwODJlMTNiMDc2ZjE0YTEyM2JmNTA2ZTE1OGRhNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-08T15:51:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-08T15:51:59Z"}, "message": "libstdc++: Add comparison operators to types from Numerics clause\n\nSome more C++20 changes from P1614R2, \"The Mothership has Landed\".\n\n\t* include/bits/slice_array.h (operator==(const slice&, const slice&)):\n\tDefine for C++20.\n\t* include/std/complex (operator==(const T&, const complex<T>&))\n\t(operator!=(const complex<T>&, const complex<T>&))\n\t(operator!=(const complex<T>&, const T&))\n\t(operator!=(const T&, const complex<T>&)): Do not declare for C++20.\n\t* testsuite/26_numerics/slice/compare.cc: New test.", "tree": {"sha": "aff0c327563eda85858e55d215e4e761b5349e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff0c327563eda85858e55d215e4e761b5349e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef389dadd4f082e13b076f14a123bf506e158da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef389dadd4f082e13b076f14a123bf506e158da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef389dadd4f082e13b076f14a123bf506e158da4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef389dadd4f082e13b076f14a123bf506e158da4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b84abcc46fb4270172584ac5a4b46d70e93259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b84abcc46fb4270172584ac5a4b46d70e93259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b84abcc46fb4270172584ac5a4b46d70e93259"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "37ffbcf7b95930ebbcbd34e6018b31d051d70db2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef389dadd4f082e13b076f14a123bf506e158da4", "patch": "@@ -1,5 +1,13 @@\n 2020-04-08  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/slice_array.h (operator==(const slice&, const slice&)):\n+\tDefine for C++20.\n+\t* include/std/complex (operator==(const T&, const complex<T>&))\n+\t(operator!=(const complex<T>&, const complex<T>&))\n+\t(operator!=(const complex<T>&, const T&))\n+\t(operator!=(const T&, const complex<T>&)): Do not declare for C++20.\n+\t* testsuite/26_numerics/slice/compare.cc: New test.\n+\n \t* include/std/charconv (to_chars_result, from_chars_result): Add\n \tdefaulted equality comparisons for C++20.\n \t* testsuite/20_util/from_chars/compare.cc: New test."}, {"sha": "de33342e2520e674387d0fda2fbeb17ef805ce94", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=ef389dadd4f082e13b076f14a123bf506e158da4", "patch": "@@ -78,6 +78,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ///  Return array stride of slice.\n     size_t stride() const;\n \n+#if __cpp_impl_three_way_comparison >= 201907L\n+    /// Equality comparison\n+    friend bool operator==(const slice&, const slice&) = default;\n+#endif\n+\n   private:\n     size_t _M_off;                      // offset\n     size_t _M_sz;\t\t\t// size"}, {"sha": "f2917b8c368649d4ae08e52ff9bc99a4e6716858", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=ef389dadd4f082e13b076f14a123bf506e158da4", "patch": "@@ -468,6 +468,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const complex<_Tp>& __x, const _Tp& __y)\n     { return __x.real() == __y && __x.imag() == _Tp(); }\n \n+#if !(__cpp_impl_three_way_comparison >= 201907L)\n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator==(const _Tp& __x, const complex<_Tp>& __y)\n@@ -490,6 +491,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const _Tp& __x, const complex<_Tp>& __y)\n     { return __x != __y.real() || _Tp() != __y.imag(); }\n+#endif\n   //@}\n \n   ///  Extraction operator for complex values."}, {"sha": "4459cf22eb64f073997d4b3ed900023a68cd0ce8", "filename": "libstdc++-v3/testsuite/26_numerics/slice/compare.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice%2Fcompare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef389dadd4f082e13b076f14a123bf506e158da4/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice%2Fcompare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice%2Fcompare.cc?ref=ef389dadd4f082e13b076f14a123bf506e158da4", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::slice s1(1, 2, 3);\n+  VERIFY( s1 == s1 );\n+  VERIFY( !(s1 != s1) );\n+  std::slice s2(1, 2, 3);\n+  VERIFY( s2 == s1 );\n+  VERIFY( !(s2 != s1) );\n+  std::slice s3(3, 2, 3);\n+  VERIFY( s3 != s1 );\n+  VERIFY( !(s3 == s1) );\n+  std::slice s4(1, 3, 3);\n+  VERIFY( s4 != s1 );\n+  VERIFY( !(s4 == s1) );\n+  std::slice s5(1, 2, 4);\n+  VERIFY( s5 != s1 );\n+  VERIFY( !(s5 == s1) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}