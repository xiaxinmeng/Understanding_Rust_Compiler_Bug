{"sha": "efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlZWU2N2Y0YzlmZDAyMWQyNTk0ZTAyNzFjODRiN2U5MGU2M2QzZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-11-16T11:44:30Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-11-16T11:44:30Z"}, "message": "Set default to -fomit-frame-pointer\n\nAlmost all targets add an explict -fomit-frame-pointer in the target specific\noptions.  Rather than doing this in a target-specific way, do this in the\ngeneric options so it works identically across all targets.  In many cases the\ntarget no longer needs to define TARGET_OPTION_OPTIMIZATION_TABLE, reducing\nthe amount of target code.\n\n    gcc/\n\t* opts.c (default_options_table): Add OPT_fomit_frame_pointer entry.\n\t* common/config/alpha/alpha-common.c (TARGET_OPTION_OPTIMIZATION_TABLE):\n \tRemove OPT_fomit_frame_pointer entry.\n\t* common/config/arc/arc-common.c: Likewise.\n\t* common/config/arm/arm-common.c: Likewise.\n\t* common/config/avr/avr-common.c: Likewise.\n\t* common/config/c6x/c6x-common.c: Likewise.\n\t* common/config/cr16/cr16-common.c: Likewise.\n\t* common/config/cris/cris-common.c: Likewise.\n\t* common/config/epiphany/epiphany-common.c: Likewise.\n\t* common/config/fr30/fr30-common.c: Likewise.\n\t* common/config/frv/frv-common.c: Likewise.\n\t* common/config/ia64/ia64-common.c: Likewise.\n\t* common/config/iq2000/iq2000-common.c: Likewise.\n\t* common/config/lm32/lm32-common.c: Likewise.\n\t* common/config/m32r/m32r-common.c: Likewise.\n\t* common/config/mcore/mcore-common.c: Likewise.\n\t* common/config/microblaze/microblaze-common.c: Likewise.\n\t* common/config/mips/mips-common.c: Likewise.\n\t* common/config/mmix/mmix-common.c: Likewise.\n\t* common/config/mn10300/mn10300-common.c: Likewise.\n\t* common/config/nios2/nios2-common.c: Likewise.\n\t* common/config/pa/pa-common.c: Likewise.\n\t* common/config/pdp11/pdp11-common.c: Likewise.\n\t* common/config/powerpcspe/powerpcspe-common.c: Likewise.\n\t* common/config/riscv/riscv-common.c: Likewise.\n\t* common/config/rs6000/rs6000-common.c: Likewise.\n\t* common/config/rx/rx-common.c: Likewise.\n\t* common/config/s390/s390-common.c: Likewise.\n\t* common/config/sh/sh-common.c: Likewise.\n\t* common/config/sparc/sparc-common.c: Likewise.\n\t* common/config/tilegx/tilegx-common.c: Likewise.\n\t* common/config/tilepro/tilepro-common.c: Likewise.\n\t* common/config/v850/v850-common.c: Likewise.\n\t* common/config/visium/visium-common.c: Likewise.\n\t* common/config/xstormy16/xstormy16-common.c: Likewise.\n\t* common/config/xtensa/xtensa-common.c: Likewise.\n\n    doc/\n\t* invoke.texi (-fomit-frame-pointer): Update documentation.\n\nFrom-SVN: r254815", "tree": {"sha": "432424fb9e6c33f3153f0e3ae0eda180a2acf6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432424fb9e6c33f3153f0e3ae0eda180a2acf6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/comments", "author": null, "committer": null, "parents": [{"sha": "9e780144ce070e286c4a0d467ed170408e1b3b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e780144ce070e286c4a0d467ed170408e1b3b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e780144ce070e286c4a0d467ed170408e1b3b47"}], "stats": {"total": 251, "additions": 55, "deletions": 196}, "files": [{"sha": "f9a429369d6a869bdf2df735adcf4591a34cc297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -1,3 +1,44 @@\n+2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* opts.c (default_options_table): Add OPT_fomit_frame_pointer entry.\n+\t* common/config/alpha/alpha-common.c (TARGET_OPTION_OPTIMIZATION_TABLE):\n+\tRemove OPT_fomit_frame_pointer entry.\n+\t* common/config/arc/arc-common.c: Likewise.\n+\t* common/config/arm/arm-common.c: Likewise.\n+\t* common/config/avr/avr-common.c: Likewise.\n+\t* common/config/c6x/c6x-common.c: Likewise.\n+\t* common/config/cr16/cr16-common.c: Likewise.\n+\t* common/config/cris/cris-common.c: Likewise.\n+\t* common/config/epiphany/epiphany-common.c: Likewise.\n+\t* common/config/fr30/fr30-common.c: Likewise.\n+\t* common/config/frv/frv-common.c: Likewise.\n+\t* common/config/ia64/ia64-common.c: Likewise.\n+\t* common/config/iq2000/iq2000-common.c: Likewise.\n+\t* common/config/lm32/lm32-common.c: Likewise.\n+\t* common/config/m32r/m32r-common.c: Likewise.\n+\t* common/config/mcore/mcore-common.c: Likewise.\n+\t* common/config/microblaze/microblaze-common.c: Likewise.\n+\t* common/config/mips/mips-common.c: Likewise.\n+\t* common/config/mmix/mmix-common.c: Likewise.\n+\t* common/config/mn10300/mn10300-common.c: Likewise.\n+\t* common/config/nios2/nios2-common.c: Likewise.\n+\t* common/config/pa/pa-common.c: Likewise.\n+\t* common/config/pdp11/pdp11-common.c: Likewise.\n+\t* common/config/powerpcspe/powerpcspe-common.c: Likewise.\n+\t* common/config/riscv/riscv-common.c: Likewise.\n+\t* common/config/rs6000/rs6000-common.c: Likewise.\n+\t* common/config/rx/rx-common.c: Likewise.\n+\t* common/config/s390/s390-common.c: Likewise.\n+\t* common/config/sh/sh-common.c: Likewise.\n+\t* common/config/sparc/sparc-common.c: Likewise.\n+\t* common/config/tilegx/tilegx-common.c: Likewise.\n+\t* common/config/tilepro/tilepro-common.c: Likewise.\n+\t* common/config/v850/v850-common.c: Likewise.\n+\t* common/config/visium/visium-common.c: Likewise.\n+\t* common/config/xstormy16/xstormy16-common.c: Likewise.\n+\t* common/config/xtensa/xtensa-common.c: Likewise.\n+\t* invoke.texi (-fomit-frame-pointer): Update documentation.\n+\n 2017-11-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-cfg.c (gimple_find_sub_bbs): Do not compute freq."}, {"sha": "3a7d28d16225478e2fdae42c5610e55dc0b68c6f", "filename": "gcc/common/config/alpha/alpha-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options alpha_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Enable redundant extension instructions removal at -O2 and higher.  */\n     { OPT_LEVELS_2_PLUS, OPT_free, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "c437313ba4192b1d6c79b047b40b02e5b7a4facb", "filename": "gcc/common/config/arc/arc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -47,7 +47,6 @@ arc_option_init_struct (struct gcc_options *opts)\n static const struct default_options arc_option_optimization_table[] =\n   {\n     { OPT_LEVELS_SIZE, OPT_fsection_anchors, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_mRcq, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_mRcw, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_msize_level_, NULL, 1 },"}, {"sha": "5ae20fea916a636d078b9e1aa2b4e866b9da1259", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -36,7 +36,6 @@ static const struct default_options arm_option_optimization_table[] =\n   {\n     /* Enable section anchors by default at -O1 or higher.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };"}, {"sha": "9bf0e0d0932b1da4ec2a91a980f87d9654f6072b", "filename": "gcc/common/config/avr/avr-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -27,7 +27,6 @@\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options avr_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     // The only effect of -fcaller-saves might be that it triggers\n     // a frame without need when it tries to be smart around calls.\n     { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },"}, {"sha": "ec698a82e18e67785539da5c4359c60f1621d90e", "filename": "gcc/common/config/c6x/c6x-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fc6x%2Fc6x-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -32,7 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement overriding of the optimization options.  */\n static const struct default_options c6x_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_frename_registers, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fmodulo_sched, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_freciprocal_math, NULL, 1 },"}, {"sha": "a106fcbfde0c02497450e659bc8afb14109b2b21", "filename": "gcc/common/config/cr16/cr16-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fcr16%2Fcr16-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fcr16%2Fcr16-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fcr16%2Fcr16-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,14 +24,4 @@\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options cr16_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE cr16_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "79f976d07210cb719d7e0f998b1a08ba5e39a9e6", "filename": "gcc/common/config/cris/cris-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -26,14 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options cris_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* TARGET_HANDLE_OPTION worker.  We just store the values into local\n    variables here.  Checks for correct semantics are in\n    cris_option_override.  */\n@@ -98,7 +90,5 @@ cris_handle_option (struct gcc_options *opts,\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION cris_handle_option\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE cris_option_optimization_table\n \n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "f837a6293b3dcea2b7b45b5c79c0a12f5d1c7ccd", "filename": "gcc/common/config/epiphany/epiphany-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -38,7 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options epiphany_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Enable section anchors by default at -O1 or higher.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "1dd001ecf7e410d9939960355bde40bada739db6", "filename": "gcc/common/config/fr30/fr30-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,17 +24,7 @@\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options fr30_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE fr30_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "77062bbf2f4b6d3463181303fc2643c804add98c", "filename": "gcc/common/config/frv/frv-common.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -32,13 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #define MASK_DEFAULT_ALLOC_CC\t0\n #endif\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options frv_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n   (MASK_DEFAULT_ALLOC_CC\t\t\t\\\n@@ -48,7 +41,5 @@ static const struct default_options frv_option_optimization_table[] =\n    | MASK_VLIW_BRANCH\t\t\t\t\\\n    | MASK_MULTI_CE\t\t\t\t\\\n    | MASK_NESTED_CE)\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE frv_option_optimization_table\n \n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "ab8c33b577ff83ae82cb847929baedd6aa92ecc4", "filename": "gcc/common/config/ia64/ia64-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement overriding of the optimization options.  */\n static const struct default_options ia64_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n     SUBTARGET_OPTIMIZATION_OPTIONS,\n #endif"}, {"sha": "04f9f670133cd10c7a0e9353e98cc0839c0b189a", "filename": "gcc/common/config/iq2000/iq2000-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,14 +24,4 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options iq2000_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE iq2000_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "7bd0ab072ddbb25b70e4993cb483503f0ee29926", "filename": "gcc/common/config/lm32/lm32-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -25,16 +25,6 @@\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options lm32_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE lm32_option_optimization_table\n-\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n "}, {"sha": "b56dbb8311c6c6fdd3e44b1bff110937ac66422f", "filename": "gcc/common/config/m32r/m32r-common.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -26,12 +26,6 @@\n #include \"opts.h\"\n #include \"flags.h\"\n \n-static const struct default_options m32r_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -65,8 +59,6 @@ m32r_handle_option (struct gcc_options *opts,\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_CPU_DEFAULT\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION m32r_handle_option\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE m32r_option_optimization_table\n \n #undef  TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info"}, {"sha": "77958bb88ed643c757e4285c47c71bef81ed9870", "filename": "gcc/common/config/mcore/mcore-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -33,7 +33,6 @@\n static const struct default_options mcore_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_ffunction_cse, NULL, 0 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n     { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n     { OPT_LEVELS_ALL, OPT_fschedule_insns2, NULL, 0 },"}, {"sha": "448a7acd539a73986c0541ef3e915fe457f37401", "filename": "gcc/common/config/microblaze/microblaze-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,17 +24,7 @@\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options microblaze_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n \n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE microblaze_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "07ba06049cb43c0167363f4e371d0f5e7769b264", "filename": "gcc/common/config/mips/mips-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -56,16 +56,6 @@ mips_handle_option (struct gcc_options *opts,\n     }\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options mips_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mips_option_optimization_table\n-\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n   (TARGET_DEFAULT\t\t\t\t\\"}, {"sha": "f73ad980cd36718d9689f42dbd11f0afb4096244", "filename": "gcc/common/config/mmix/mmix-common.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,18 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options mmix_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mmix_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "74fa463d8d01844201aa8d832e32c6b4b1c1ea47", "filename": "gcc/common/config/mn10300/mn10300-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -29,7 +29,6 @@\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options mn10300_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* The STC algorithm produces the smallest code at -Os.  */\n     { OPT_LEVELS_2_PLUS, OPT_freorder_blocks_algorithm_, NULL,\n       REORDER_BLOCKS_ALGORITHM_STC },"}, {"sha": "36750ad1d3b91e64f4af519d7796caae6d146d76", "filename": "gcc/common/config/nios2/nios2-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fnios2%2Fnios2-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options nios2_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_mfast_sw_div, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };"}, {"sha": "ea943b9e04786ff31172f9533a7f157273f9602c", "filename": "gcc/common/config/pa/pa-common.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -26,13 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options pa_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -68,8 +61,6 @@ pa_handle_option (struct gcc_options *opts,\n     }\n }\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE pa_option_optimization_table\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n #undef TARGET_HANDLE_OPTION"}, {"sha": "6c3044f042c5cd24cfee6b4f11088c0735d7360c", "filename": "gcc/common/config/pdp11/pdp11-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -26,14 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options pdp11_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_3_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -70,8 +62,6 @@ pdp11_option_init_struct (struct gcc_options *opts)\n   (MASK_FPU | MASK_45 | TARGET_UNIX_ASM_DEFAULT)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION pdp11_handle_option\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE pdp11_option_optimization_table\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT pdp11_option_init_struct\n "}, {"sha": "0458c4070861e4cd761bdd2fd6b13b2721933e11", "filename": "gcc/common/config/powerpcspe/powerpcspe-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -31,7 +31,6 @@\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options rs6000_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "0408cb384cd8875419d9c287d52b1b8d9f3548d7", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -117,7 +117,6 @@ riscv_handle_option (struct gcc_options *opts,\n static const struct default_options riscv_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_free, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };"}, {"sha": "915c4694fe5108f1dfc154cfb44f3d51caf2a340", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -31,7 +31,6 @@\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options rs6000_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "ef6f82302a3c0101fff91ca14d5062e465b3a5b6", "filename": "gcc/common/config/rx/rx-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -70,19 +70,9 @@ rx_handle_option (struct gcc_options *opts,\n   return true;\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options rx_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef  TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION\t\t\trx_handle_option\n \n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE\trx_option_optimization_table\n-\n #undef  TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n "}, {"sha": "b53ea6e30a969e7b32d1f15c01c5ec62717b1d95", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -56,8 +56,6 @@ EXPORTED_CONST int processor_flags_table[] =\n \n static const struct default_options s390_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-\n     /* Enable -fsched-pressure by default when optimizing.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n "}, {"sha": "395da07bd7d301037e18c6d8530f75d916c9fbac", "filename": "gcc/common/config/sh/sh-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Set default optimization options.  */\n static const struct default_options sh_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n     { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "87fcac49486d947f2c32d4416475acb3df81c172", "filename": "gcc/common/config/sparc/sparc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -27,7 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options sparc_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Enable redundant extension instructions removal at -O2 and higher.  */\n     { OPT_LEVELS_2_PLUS, OPT_free, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "7fca8bb08f1258080db8ce51f8f84b74d2796d8d", "filename": "gcc/common/config/tilegx/tilegx-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ftilegx%2Ftilegx-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ftilegx%2Ftilegx-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ftilegx%2Ftilegx-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -29,7 +29,6 @@\n #include \"flags.h\"\n \n static const struct default_options tilegx_option_optimization_table[] = {\n-  {OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1},\n   /* Scheduling and bundling are super important for our architecture, so\n      enable them at -O1. */\n   {OPT_LEVELS_1_PLUS, OPT_fschedule_insns, NULL, 1},"}, {"sha": "9dddf6528e56894a3e86a67e7c42a9a1f68d6f0c", "filename": "gcc/common/config/tilepro/tilepro-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ftilepro%2Ftilepro-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Ftilepro%2Ftilepro-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ftilepro%2Ftilepro-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -29,7 +29,6 @@\n #include \"flags.h\"\n \n static const struct default_options tilepro_option_optimization_table[] = {\n-  {OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1},\n   /* Scheduling and bundling are super important for our architecture, so\n      enable them at -O1. */\n   {OPT_LEVELS_1_PLUS, OPT_fschedule_insns, NULL, 1},"}, {"sha": "b30f9cb0b673ef1621d2538b1ac82bece1547042", "filename": "gcc/common/config/v850/v850-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -111,7 +111,6 @@ v850_handle_option (struct gcc_options *opts,\n \n static const struct default_options v850_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Note - we no longer enable MASK_EP when optimizing.  This is\n        because of a hardware bug which stops the SLD and SST instructions\n        from correctly detecting some hazards.  If the user is sure that"}, {"sha": "7d7c647c03b0c1d74515df999c5b6cff939aaa7d", "filename": "gcc/common/config/visium/visium-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fvisium%2Fvisium-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fvisium%2Fvisium-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fvisium%2Fvisium-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -25,14 +25,4 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Set default optimization options.  */\n-static const struct default_options visium_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE visium_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "eb24c6fbdd57d208b5a96bc7ab78279eaad6a8bd", "filename": "gcc/common/config/xstormy16/xstormy16-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -24,14 +24,4 @@\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options xstorym16_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE xstorym16_option_optimization_table\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "53ad976b5000dd23e33a0b7682fb7b08984f4d36", "filename": "gcc/common/config/xtensa/xtensa-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n \n static const struct default_options xtensa_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     /* Reordering blocks for Xtensa is not a good idea unless the\n        compiler understands the range of conditional branches.\n        Currently all branch relaxation for Xtensa is handled in the"}, {"sha": "6384bc62a1318dc572cf7ce00f9207331b5e21ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -7322,6 +7322,7 @@ compilation time.\n -fipa-reference @gol\n -fmerge-constants @gol\n -fmove-loop-invariants @gol\n+-fomit-frame-pointer @gol\n -freorder-blocks @gol\n -fshrink-wrap @gol\n -fshrink-wrap-separate @gol\n@@ -7346,9 +7347,6 @@ compilation time.\n -ftree-ter @gol\n -funit-at-a-time}\n \n-@option{-O} also turns on @option{-fomit-frame-pointer} on machines\n-where doing so does not interfere with debugging.\n-\n @item -O2\n @opindex O2\n Optimize even more.  GCC performs nearly all supported optimizations\n@@ -7500,29 +7498,18 @@ The default is @option{-ffp-contract=fast}.\n \n @item -fomit-frame-pointer\n @opindex fomit-frame-pointer\n-Don't keep the frame pointer in a register for functions that\n-don't need one.  This avoids the instructions to save, set up and\n-restore frame pointers; it also makes an extra register available\n-in many functions.  @strong{It also makes debugging impossible on\n-some machines.}\n-\n-On some machines, such as the VAX, this flag has no effect, because\n-the standard calling sequence automatically handles the frame pointer\n-and nothing is saved by pretending it doesn't exist.  The\n-machine-description macro @code{FRAME_POINTER_REQUIRED} controls\n-whether a target machine supports this flag.  @xref{Registers,,Register\n-Usage, gccint, GNU Compiler Collection (GCC) Internals}.\n-\n-The default setting (when not optimizing for\n-size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets is\n-@option{-fomit-frame-pointer}.  You can configure GCC with the\n-@option{--enable-frame-pointer} configure option to change the default.\n-\n-Note that @option{-fno-omit-frame-pointer} doesn't force a new stack\n-frame for all functions if it isn't otherwise needed, and hence doesn't\n-guarantee a new frame pointer for all functions.\n+Omit the frame pointer in functions that don't need one.  This avoids the\n+instructions to save, set up and restore the frame pointer; on many targets\n+it also makes an extra register available.\n \n-Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+On some targets this flag has no effect because the standard calling sequence\n+always uses a frame pointer, so it cannot be omitted.\n+\n+Note that @option{-fno-omit-frame-pointer} doesn't guarantee the frame pointer\n+is used in all functions.  Several targets always omit the frame pointer in\n+leaf functions.\n+\n+Enabled by default at @option{-O} and higher.\n \n @item -foptimize-sibling-calls\n @opindex foptimize-sibling-calls\n@@ -16817,9 +16804,7 @@ Certain other options, such as @option{-mid-shared-library} and\n @opindex momit-leaf-frame-pointer\n Don't keep the frame pointer in a register for leaf functions.  This\n avoids the instructions to save, set up and restore frame pointers and\n-makes an extra register available in leaf functions.  The option\n-@option{-fomit-frame-pointer} removes the frame pointer for all functions,\n-which might make debugging harder.\n+makes an extra register available in leaf functions.\n \n @item -mspecld-anomaly\n @opindex mspecld-anomaly"}, {"sha": "ab3f4aefed32c0a265221678c87549958bb50ccb", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efeee67f4c9fd021d2594e0271c84b7e90e63d3d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=efeee67f4c9fd021d2594e0271c84b7e90e63d3d", "patch": "@@ -476,6 +476,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_ftree_pta, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fssa_phiopt, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_builtin_call_dce, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n \n     /* -O2 optimizations.  */\n     { OPT_LEVELS_2_PLUS, OPT_finline_small_functions, NULL, 1 },"}]}