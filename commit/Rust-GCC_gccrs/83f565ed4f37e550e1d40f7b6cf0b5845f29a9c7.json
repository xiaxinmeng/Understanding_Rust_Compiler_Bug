{"sha": "83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmNTY1ZWQ0ZjM3ZTU1MGUxZDQwZjdiNmNmMGI1ODQ1ZjI5YTljNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-07T08:49:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-07T08:49:37Z"}, "message": "openmp: Improve composite simd vectorization\n\n> > I was really hoping bbs 4 and 5 would be one loop (the one I set safelen\n> > and force_vectorize etc. for) and that basic blocks 6 and 7 would be\n> > together with that inner loop another loop, but apparently loop discovery\n> > thinks it is just one loop.\n> > Any ideas what I'm doing wrong or is there any way how to make it two loops\n> > (that would also survive all the cfg cleanups until vectorization)?\n>\n> The early CFG looks like we have a common header with two latches\n> so it boils down to how we disambiguate those in the end (we seem\n> to unify the latches via a forwarder).  IIRC OMP lowering builds\n> loops itself, could it not do the appropriate disambiguation itself?\n\nI realized I emit the same stmts on both paths (before goto doit; and before\nfalling through it), at least the MIN_EXPR and PLUS_EXPR, so by forcing\nthere an extra bb which does those two and having the \"doit\" label before\nthat the innermost loop doesn't have multiple latches anymore and so is\nvectorized fine.\n\n2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp-expand.c (expand_omp_simd): Don't emit MIN_EXPR and PLUS_EXPR\n\tat the end of entry_bb and innermost init_bb, instead force arguments\n\tfor MIN_EXPR into temporaries in both cases and jump to a new bb that\n\tperforms MIN_EXPR and PLUS_EXPR.\n\n\t* gcc.dg/gomp/simd-2.c: New test.\n\t* gcc.dg/gomp/simd-3.c: New test.", "tree": {"sha": "bb7bbda573e19900da9e4c94d79b4bdfa77773af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb7bbda573e19900da9e4c94d79b4bdfa77773af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc77ce3a4c70730b4e38d68f88693eadbdc8712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc77ce3a4c70730b4e38d68f88693eadbdc8712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc77ce3a4c70730b4e38d68f88693eadbdc8712"}], "stats": {"total": 121, "additions": 117, "deletions": 4}, "files": [{"sha": "0d3008994e8b2781ee03fd827f7a8be44c8d44df", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "patch": "@@ -6347,6 +6347,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n   tree n2var = NULL_TREE;\n   tree n2v = NULL_TREE;\n   tree *nonrect_bounds = NULL;\n+  tree min_arg1 = NULL_TREE, min_arg2 = NULL_TREE;\n   if (fd->collapse > 1)\n     {\n       if (broken_loop || gimple_omp_for_combined_into_p (fd->for_stmt))\n@@ -6406,9 +6407,10 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t\t\t     fold_convert (itype, fd->loops[i].step));\n \t  t = fold_convert (type, t);\n \t  tree t2 = fold_build2 (MINUS_EXPR, type, n2, n1);\n-\t  t = fold_build2 (MIN_EXPR, type, t2, t);\n-\t  t = fold_build2 (PLUS_EXPR, type, fd->loop.v, t);\n-\t  expand_omp_build_assign (&gsi, n2var, t);\n+\t  min_arg1 = create_tmp_var (type);\n+\t  expand_omp_build_assign (&gsi, min_arg1, t2);\n+\t  min_arg2 = create_tmp_var (type);\n+\t  expand_omp_build_assign (&gsi, min_arg2, t);\n \t}\n       else\n \t{\n@@ -6815,7 +6817,16 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t\t}\n \t      else\n \t\tt = counts[i + 1];\n-\t      t = fold_build2 (MIN_EXPR, type, t2, t);\n+\t      expand_omp_build_assign (&gsi, min_arg1, t2);\n+\t      expand_omp_build_assign (&gsi, min_arg2, t);\n+\t      e = split_block (init_bb, last_stmt (init_bb));\n+\t      gsi = gsi_after_labels (e->dest);\n+\t      init_bb = e->dest;\n+\t      remove_edge (FALLTHRU_EDGE (entry_bb));\n+\t      make_edge (entry_bb, init_bb, EDGE_FALLTHRU);\n+\t      set_immediate_dominator (CDI_DOMINATORS, init_bb, entry_bb);\n+\t      set_immediate_dominator (CDI_DOMINATORS, l1_bb, init_bb);\n+\t      t = fold_build2 (MIN_EXPR, type, min_arg1, min_arg2);\n \t      t = fold_build2 (PLUS_EXPR, type, fd->loop.v, t);\n \t      expand_omp_build_assign (&gsi, n2var, t);\n \t    }"}, {"sha": "7ac3eb4444a985d8f40555e68dcbc5c5902d5694", "filename": "gcc/testsuite/gcc.dg/gomp/simd-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-2.c?ref=83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-vect-details\" } */\n+/* { dg-additional-options \"-mavx\" { target avx } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-9]\\[0-9]* loops in function\" 5 \"vect\" } } */\n+\n+int a[10000][128];\n+\n+void\n+foo (void)\n+{\n+  #pragma omp for simd schedule (simd: dynamic, 32) collapse(2)\n+  for (int i = 0; i < 10000; i++)\n+    for (int j = 0; j < 128; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp parallel for simd schedule (simd: dynamic, 32) collapse(2)\n+  for (int i = 0; i < 10000; i++)\n+    for (int j = 0; j < 128; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+baz (void)\n+{\n+  #pragma omp distribute parallel for simd schedule (simd: dynamic, 32) collapse(2)\n+  for (int i = 0; i < 10000; i++)\n+    for (int j = 0; j < 128; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+qux (void)\n+{\n+  #pragma omp distribute simd dist_schedule (static, 128) collapse(2)\n+  for (int i = 0; i < 10000; i++)\n+    for (int j = 0; j < 128; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+corge (void)\n+{\n+  #pragma omp taskloop simd collapse(2)\n+  for (int i = 0; i < 10000; i++)\n+    for (int j = 0; j < 128; j++)\n+      a[i][j] += 3;\n+}"}, {"sha": "13e1346da03a2f6a38eea902d2ab2cf61c54b644", "filename": "gcc/testsuite/gcc.dg/gomp/simd-3.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-3.c?ref=83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-vect-details\" } */\n+/* { dg-additional-options \"-mavx\" { target avx } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-9]\\[0-9]* loops in function\" 5 \"vect\" } } */\n+\n+int a[1024][1024];\n+\n+void\n+foo (void)\n+{\n+  #pragma omp for simd collapse(2)\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < i; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp parallel for simd collapse(2)\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < i; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+baz (void)\n+{\n+  #pragma omp distribute parallel for simd collapse(2)\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < i; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+qux (void)\n+{\n+  #pragma omp distribute simd collapse(2)\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < i; j++)\n+      a[i][j] += 3;\n+}\n+\n+void\n+corge (void)\n+{\n+  #pragma omp taskloop simd collapse(2)\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < i; j++)\n+      a[i][j] += 3;\n+}"}]}