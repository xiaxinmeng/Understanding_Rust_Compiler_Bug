{"sha": "c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxNzkxZTAxZWEzYjBmZWNkYmY0Mjk1NDhmYmVhMzhlMGYzYjVlMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2000-01-07T18:33:12Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2000-01-07T18:33:12Z"}, "message": "rs6000.c (processor_target_table): Add power3 as alias for 630.\n\n\t* rs6000.c (processor_target_table): Add power3 as alias for 630.\n\t* aix43.h: Revert Aug 2 change.\n\t(HAS_INIT_SECTION): Define, not visible yet.\n\t(LD_INIT_SWITCH): Define, not visible yet.\n\t* t-aix43 (MULTILIB_OPTIONS): Revert Aug 2 change.\n\n\t* glimits.h (__LONG_MAX__): Recognize 64-bit AIX too.\n\n\t* collect2.c (main): Expand ld2 size further.\n\t(export_object_lst): Cast assignment to avoid warning.\n\t(main, LD_INIT_SWITCH): Add AIX 4.2+ -binitfini support.\n\t(scan_prog_file, COFF): Do not collect initialization or\n\tfinalization functions generated for entire shared object if\n\tinit/fini support present.\n\nFrom-SVN: r31275", "tree": {"sha": "1d0f42ae5da15ff4a9963d5d8d5609986e2fd53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d0f42ae5da15ff4a9963d5d8d5609986e2fd53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/comments", "author": null, "committer": null, "parents": [{"sha": "f6cad4c9e950e2985565e7d0ca6bc2eb6af2c776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cad4c9e950e2985565e7d0ca6bc2eb6af2c776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6cad4c9e950e2985565e7d0ca6bc2eb6af2c776"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "103c9a513f1bbace6f2ad6890aa6effe810e6913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -1,3 +1,20 @@\n+2000-01-07  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.c (processor_target_table): Add power3 as alias for 630.\n+\t* aix43.h: Revert Aug 2 change.\n+\t(HAS_INIT_SECTION): Define, not visible yet.\n+\t(LD_INIT_SWITCH): Define, not visible yet.\n+\t* t-aix43 (MULTILIB_OPTIONS): Revert Aug 2 change.\n+\n+\t* glimits.h (__LONG_MAX__): Recognize 64-bit AIX too.\n+\n+\t* collect2.c (main): Expand ld2 size further.\n+\t(export_object_lst): Cast assignment to avoid warning.\n+\t(main, LD_INIT_SWITCH): Add AIX 4.2+ -binitfini support.\n+\t(scan_prog_file, COFF): Do not collect initialization or\n+\tfinalization functions generated for entire shared object if\n+\tinit/fini support present.\n+\n 2000-01-07  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/elfos.h: Tidy up formatting of marcos.  Make sure\n@@ -6,7 +23,7 @@\n \t* config/svr4.h: Add #include \"elfos.h\" and remove duplicate\n \tdefinitions.\n \n-2000-01-07  Matt Austern <austern@sgi.com>\n+2000-01-07  Matt Austern  <austern@sgi.com>\n \n \t* fold-const.c (real_hex_to_f): Remove duplicate declaration of\n \texpon."}, {"sha": "2fe380028e614a1fa445cbc85e55a7c28c19d6ec", "filename": "gcc/collect2.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -884,7 +884,7 @@ main (argc, argv)\n      set first, in case a diagnostic is issued.  */\n \n   ld1 = (const char **)(ld1_argv = (char **) xcalloc(sizeof (char *), argc+3));\n-  ld2 = (const char **)(ld2_argv = (char **) xcalloc(sizeof (char *), argc+6));\n+  ld2 = (const char **)(ld2_argv = (char **) xcalloc(sizeof (char *), argc+10));\n   object = (const char **)(object_lst = (char **) xcalloc(sizeof (char *), argc));\n \n #ifdef DEBUG\n@@ -1263,7 +1263,7 @@ main (argc, argv)\n   /* The AIX linker will discard static constructors in object files if\n      nothing else in the file is referenced, so look at them first.  */\n   {\n-      char **export_object_lst = object_lst;\n+      const char **export_object_lst = (const char **)object_lst;\n \n       while (export_object_lst < object)\n \tscan_prog_file (*export_object_lst++, PASS_OBJ);\n@@ -1462,11 +1462,21 @@ main (argc, argv)\n \n   /* Tell the linker that we have initializer and finalizer functions.  */\n #ifdef LD_INIT_SWITCH\n+#ifdef COLLECT_EXPORT_LIST\n+  {\n+    /* option name + functions + colons + NULL */\n+    char *buf = xmalloc (strlen (LD_INIT_SWITCH)\n+\t\t\t + strlen(initname) + strlen(fininame) + 3);\n+    sprintf (buf, \"%s:%s:%s\", LD_INIT_SWITCH, initname, fininame);\n+    *ld2++ = buf;\n+  }\n+#else\n   *ld2++ = LD_INIT_SWITCH;\n   *ld2++ = initname;\n   *ld2++ = LD_FINI_SWITCH;\n   *ld2++ = fininame;\n #endif\n+#endif\n \n #ifdef COLLECT_EXPORT_LIST\n   if (shared_obj)\n@@ -2786,7 +2796,8 @@ scan_prog_file (prog_name, which_pass)\n \t\t      switch (is_ctor_dtor (name))\n \t\t\t{\n \t\t\tcase 1:\n-\t\t\t  if (! is_shared) add_to_list (&constructors, name);\n+\t\t\t  if (! is_shared)\n+\t\t\t    add_to_list (&constructors, name);\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n@@ -2801,7 +2812,8 @@ scan_prog_file (prog_name, which_pass)\n \t\t\t  break;\n \n \t\t\tcase 2:\n-\t\t\t  if (! is_shared) add_to_list (&destructors, name);\n+\t\t\t  if (! is_shared)\n+\t\t\t    add_to_list (&destructors, name);\n #ifdef COLLECT_EXPORT_LIST\n \t\t\t  if (which_pass == PASS_OBJ)\n \t\t\t    add_to_list (&exports, name);\n@@ -2817,13 +2829,17 @@ scan_prog_file (prog_name, which_pass)\n \n #ifdef COLLECT_EXPORT_LIST\n \t\t\tcase 3:\n+#ifndef LD_INIT_SWITCH\n \t\t\t  if (is_shared)\n \t\t\t    add_to_list (&constructors, name);\n+#endif\n \t\t\t  break;\n \n \t\t\tcase 4:\n+#ifndef LD_INIT_SWITCH\n \t\t\t  if (is_shared)\n \t\t\t    add_to_list (&destructors, name);\n+#endif\n \t\t\t  break;\n #endif\n \n@@ -2841,7 +2857,8 @@ scan_prog_file (prog_name, which_pass)\n \t\t\t    {\n \t\t\t      if (which_pass == PASS_OBJ && (! export_flag))\n \t\t\t\tadd_to_list (&exports, name);\n-\t\t\t      else if (! is_shared && which_pass == PASS_FIRST\n+\t\t\t      else if (! is_shared\n+\t\t\t\t       && which_pass == PASS_FIRST\n \t\t\t\t       && import_flag\n \t\t\t\t       && is_in_list(name, undefined.first))\n \t\t\t\tadd_to_list (&imports, name);\n@@ -2850,14 +2867,13 @@ scan_prog_file (prog_name, which_pass)\n \t\t\t  continue;\n \t\t\t}\n \n-#if !defined(EXTENDED_COFF)\n \t\t      if (debug)\n+#if !defined(EXTENDED_COFF)\n \t\t\tfprintf (stderr, \"\\tsec=%d class=%d type=%s%o %s\\n\",\n \t\t\t\t symbol.n_scnum, symbol.n_sclass,\n \t\t\t\t (symbol.n_type ? \"0\" : \"\"), symbol.n_type,\n \t\t\t\t name);\n #else\n-\t\t      if (debug)\n \t\t\tfprintf (stderr,\n \t\t\t\t \"\\tiss = %5d, value = %5ld, index = %5d, name = %s\\n\",\n \t\t\t\t symbol.iss, (long) symbol.value, symbol.index, name);"}, {"sha": "8b0c6fb6b05b46c8837b156e9058852ed0b5b7e9", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -26,8 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\\\n-  {\"64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC}, \\\n-  {\"32\",\t\t- (MASK_64BIT | MASK_POWERPC64)},\t\\\n+  {\"aix64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC}, \\\n+  {\"aix32\",\t\t- (MASK_64BIT | MASK_POWERPC64)},\t\\\n   {\"xl-call\", \t\tMASK_XL_CALL},\t\t\t\t\\\n   {\"no-xl-call\",\t- MASK_XL_CALL}, \t\t\t\\\n   {\"threads\",\t\t0},\t\t\t\t\t\\\n@@ -48,25 +48,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-m64 and POWER architecture are incompatible.\");\t\\\n+      warning (\"-maix64 and POWER architecture are incompatible.\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! (target_flags & MASK_POWERPC64))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-m64 requires PowerPC64 architecture remain enabled.\"); \\\n+      warning (\"-maix64 requires PowerPC64 architecture remain enabled.\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0);\n \n #include \"rs6000/rs6000.h\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"-u %{m64:-a64 -mppc64} %(asm_cpu)\"\n+#define ASM_SPEC \"-u %{maix64:-a64 -mppc64} %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amonst the various targets\n    for handling -mcpu=xxx switches.  */\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n-\"%{!mcpu*: %{!m64: \\\n+\"%{!mcpu*: %{!maix64: \\\n   %{mpower: %{!mpower2: -mpwr}} \\\n   %{mpower2: -mpwr2} \\\n   %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n@@ -104,7 +104,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n-   %{m64: -D__64BIT__ -D_ARCH_PPC}\\\n+   %{maix64: -D__64BIT__ -D_ARCH_PPC}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n    %{mthreads: -D_THREAD_SAFE}\\\n    %(cpp_cpu)\"\n@@ -113,7 +113,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    for handling -mcpu=xxx switches.  */\n #undef CPP_CPU_SPEC\n #define CPP_CPU_SPEC \\\n-\"%{!mcpu*: %{!m64: \\\n+\"%{!mcpu*: %{!maix64: \\\n   %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n   %{mpower2: -D_ARCH_PWR2} \\\n   %{mpowerpc*: -D_ARCH_PPC} \\\n@@ -182,24 +182,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n    %{p:-L/lib/profiled -L/usr/lib/profiled}\\\n-   %{!m64:%{!shared:%{g*:-lg}}}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n    %{mpe:-L/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n    %{mthreads:-L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a}\\\n    %{!mthreads:-lc}\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n-   %{static:-bnso %(link_syscalls) } %{!m64:%{!shared:%{g*: %(link_libg) }}}\\\n-   %{shared:-bM:SRE %{!e:-bnoentry}} %{m64:-b64}\"\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:\\\n    %{mpe:%{pg:/usr/lpp/ppe.poe/lib/gcrt0.o}\\\n          %{!pg:%{p:/usr/lpp/ppe.poe/lib/mcrt0.o}\\\n                %{!p:/usr/lpp/ppe.poe/lib/crt0.o}}}\\\n    %{!mpe:\\\n-     %{m64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n-     %{!m64:\\\n+     %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+     %{!maix64:\\\n        %{mthreads:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n        %{!mthreads:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}}\"\n \n@@ -213,3 +213,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef RS6000_CALL_GLUE\n #define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+\n+#if 0\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+#endif"}, {"sha": "06f2a7894818e659d1a84e2f3d783cdcc612f7a8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -185,6 +185,9 @@ rs6000_override_options (default_cpu)\n \t {\"power2\", PROCESSOR_POWER,\n \t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n \t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n+\t {\"power3\", PROCESSOR_PPC630,\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT},\n \t {\"powerpc\", PROCESSOR_POWERPC,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},"}, {"sha": "205070082963ef110b0944d380e2d16ffba803a5", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -18,7 +18,7 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n # different processor models\n \n MULTILIB_OPTIONS\t= msoft-float \\\n-\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/m64\n+\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/maix64\n \n MULTILIB_DIRNAMES\t= soft-float \\\n \t\t\t  common power powerpc ppc64"}, {"sha": "a766f81bdd522084621580ab1d0e1851146f7e1a", "filename": "gcc/glimits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71791e01ea3b0fecdbf429548fbea38e0f3b5e1/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=c71791e01ea3b0fecdbf429548fbea38e0f3b5e1", "patch": "@@ -64,7 +64,7 @@\n /* Minimum and maximum values a `signed long int' can hold.\n    (Same as `int').  */\n #ifndef __LONG_MAX__\n-#if defined (__alpha__) || (defined (__sparc__) && defined(__arch64__)) || defined (__sparcv9)\n+#if defined (__alpha__) || (defined (_ARCH_PPC) && defined (__64BIT__)) || (defined (__sparc__) && defined(__arch64__)) || defined (__sparcv9)\n #define __LONG_MAX__ 9223372036854775807L\n #else\n #define __LONG_MAX__ 2147483647L"}]}