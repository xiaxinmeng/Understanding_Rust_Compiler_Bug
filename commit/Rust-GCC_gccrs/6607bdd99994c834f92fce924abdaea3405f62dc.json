{"sha": "6607bdd99994c834f92fce924abdaea3405f62dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwN2JkZDk5OTk0YzgzNGY5MmZjZTkyNGFiZGFlYTM0MDVmNjJkYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-02T04:03:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-02T04:04:01Z"}, "message": "Add patch_area_size and patch_area_entry to crtl\n\nCurrently patchable area is at the wrong place.  It is placed immediately\nafter function label and before .cfi_startproc.  A backend should be able\nto add a pseudo patchable area instruction durectly into RTL.  This patch\nadds patch_area_size and patch_area_entry to crtl so that the patchable\narea info is available in RTL passes.\n\nIt also limits patch_area_size and patch_area_entry to 65535, which is\na reasonable maximum size for patchable area.\n\ngcc/\n\n\tPR target/93492\n\t* cfgexpand.c (pass_expand::execute): Set crtl->patch_area_size\n\tand crtl->patch_area_entry.\n\t* emit-rtl.h (rtl_data): Add patch_area_size and patch_area_entry.\n\t* opts.c (common_handle_option): Limit\n\tfunction_entry_patch_area_size and function_entry_patch_area_start\n\tto USHRT_MAX.  Fix a typo in error message.\n\t* varasm.c (assemble_start_function): Use crtl->patch_area_size\n\tand crtl->patch_area_entry.\n\t* doc/invoke.texi: Document the maximum value for\n\t-fpatchable-function-entry.\n\ngcc/c-family/\n\n\tPR target/93492\n\t* c-attribs.c (handle_patchable_function_entry_attribute): Limit\n\tvalue to USHRT_MAX (65535).\n\ngcc/testsuite/\n\n\tPR target/93492\n\t* c-c++-common/patchable_function_entry-error-1.c: New test.\n\t* c-c++-common/patchable_function_entry-error-2.c: Likewise.\n\t* c-c++-common/patchable_function_entry-error-3.c: Likewise.", "tree": {"sha": "9263654efb733aa5e0fdd7c218ab784c96ae69e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9263654efb733aa5e0fdd7c218ab784c96ae69e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6607bdd99994c834f92fce924abdaea3405f62dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6607bdd99994c834f92fce924abdaea3405f62dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6607bdd99994c834f92fce924abdaea3405f62dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6607bdd99994c834f92fce924abdaea3405f62dc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c42a01bce298d1578bd0421db1d463739cdf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c42a01bce298d1578bd0421db1d463739cdf2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c42a01bce298d1578bd0421db1d463739cdf2b"}], "stats": {"total": 145, "additions": 116, "deletions": 29}, "files": [{"sha": "fb776ba5a0e09351084de2197d054fc4a297faa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -1,3 +1,17 @@\n+2020-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/93492\n+\t* cfgexpand.c (pass_expand::execute): Set crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* emit-rtl.h (rtl_data): Add patch_area_size and patch_area_entry.\n+\t* opts.c (common_handle_option): Limit\n+\tfunction_entry_patch_area_size and function_entry_patch_area_start\n+\tto USHRT_MAX.  Fix a typo in error message.\n+\t* varasm.c (assemble_start_function): Use crtl->patch_area_size\n+\tand crtl->patch_area_entry.\n+\t* doc/invoke.texi: Document the maximum value for\n+\t-fpatchable-function-entry.\n+\n 2020-05-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/i386/darwin.h: Repair SUBTARGET_INIT_BUILTINS."}, {"sha": "69ea1fdc4f35e4f262342aa1ad875c29dc146b30", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/93492\n+\t* c-attribs.c (handle_patchable_function_entry_attribute): Limit\n+\tvalue to USHRT_MAX (65535).\n+\n 2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-format.c (PP_FORMAT_CHAR_TABLE): Add %{ and %}."}, {"sha": "a101312c5817cb918d64961372580801cd84622c", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -4553,6 +4553,15 @@ handle_patchable_function_entry_attribute (tree *, tree name, tree args,\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n+\n+      if (tree_to_uhwi (val) > USHRT_MAX)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute argument %qE is out of range (> 65535)\",\n+\t\t   name, val);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n     }\n   return NULL_TREE;\n }"}, {"sha": "86efa22bf60b6b9315e86eb934239cd3dd467849", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -6656,6 +6656,39 @@ pass_expand::execute (function *fun)\n   if (crtl->tail_call_emit)\n     fixup_tail_calls ();\n \n+  unsigned HOST_WIDE_INT patch_area_size = function_entry_patch_area_size;\n+  unsigned HOST_WIDE_INT patch_area_entry = function_entry_patch_area_start;\n+\n+  tree patchable_function_entry_attr\n+    = lookup_attribute (\"patchable_function_entry\",\n+\t\t\tDECL_ATTRIBUTES (cfun->decl));\n+  if (patchable_function_entry_attr)\n+    {\n+      tree pp_val = TREE_VALUE (patchable_function_entry_attr);\n+      tree patchable_function_entry_value1 = TREE_VALUE (pp_val);\n+\n+      patch_area_size = tree_to_uhwi (patchable_function_entry_value1);\n+      patch_area_entry = 0;\n+      if (TREE_CHAIN (pp_val) != NULL_TREE)\n+\t{\n+\t  tree patchable_function_entry_value2\n+\t    = TREE_VALUE (TREE_CHAIN (pp_val));\n+\t  patch_area_entry = tree_to_uhwi (patchable_function_entry_value2);\n+\t}\n+    }\n+\n+  if (patch_area_entry > patch_area_size)\n+    {\n+      if (patch_area_size > 0)\n+\twarning (OPT_Wattributes,\n+\t\t \"patchable function entry %wu exceeds size %wu\",\n+\t\t patch_area_entry, patch_area_size);\n+      patch_area_entry = 0;\n+    }\n+\n+  crtl->patch_area_size = patch_area_size;\n+  crtl->patch_area_entry = patch_area_entry;\n+\n   /* BB subdivision may have created basic blocks that are only reachable\n      from unlikely bbs but not marked as such in the profile.  */\n   if (optimize)"}, {"sha": "767d1f07801cdf9219a5a02493fcc1af861f4887", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -14112,6 +14112,7 @@ If @code{N=0}, no pad location is recorded.\n The NOP instructions are inserted at---and maybe before, depending on\n @var{M}---the function entry address, even before the prologue.\n \n+The maximum value of @var{N} and @var{M} is 65535.\n @end table\n \n "}, {"sha": "3d6565c8a30d8da0bae32a09584ef5c7f2671074", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -173,6 +173,12 @@ struct GTY(()) rtl_data {\n         local stack.  */\n   unsigned int stack_alignment_estimated;\n \n+  /* How many NOP insns to place at each function entry by default.  */\n+  unsigned short patch_area_size;\n+\n+  /* How far the real asm entry point is into this area.  */\n+  unsigned short patch_area_entry;\n+\n   /* For reorg.  */\n \n   /* Nonzero if function being compiled called builtin_return_addr or"}, {"sha": "3dccef3970131902e93cf45df8de7d11d4251c98", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -2615,10 +2615,12 @@ common_handle_option (struct gcc_options *opts,\n \t    function_entry_patch_area_start = 0;\n \t  }\n \tif (function_entry_patch_area_size < 0\n+\t    || function_entry_patch_area_size > USHRT_MAX\n \t    || function_entry_patch_area_start < 0\n+\t    || function_entry_patch_area_start > USHRT_MAX\n \t    || function_entry_patch_area_size \n \t\t< function_entry_patch_area_start)\n-\t  error (\"invalid arguments for %<-fpatchable_function_entry%>\");\n+\t  error (\"invalid arguments for %<-fpatchable-function-entry%>\");\n \tfree (patch_area_arg);\n       }\n       break;"}, {"sha": "185f9ea725e711e465d484286f380e311f62d50e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -1,3 +1,10 @@\n+2020-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/93492\n+\t* c-c++-common/patchable_function_entry-error-1.c: New test.\n+\t* c-c++-common/patchable_function_entry-error-2.c: Likewise.\n+\t* c-c++-common/patchable_function_entry-error-3.c: Likewise.\n+\n 2020-05-01  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/90880"}, {"sha": "f60bf46cfe3cda742c1efb3bc4c634f10098b9d0", "filename": "gcc/testsuite/c-c++-common/patchable_function_entry-error-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-1.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! { nvptx*-*-* visium-*-* } } } } */\n+/* { dg-options \"-O2 -fpatchable-function-entry=65536,1\" } */\n+/* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */\n+/* { dg-error \"invalid arguments for '-fpatchable-function-entry'\" \"\" { target *-*-* } 0 } */\n+\n+void\n+foo (void)\n+{\n+}"}, {"sha": "90f88c78be7e9aee2ff8effb7c69847b625aa2f5", "filename": "gcc/testsuite/c-c++-common/patchable_function_entry-error-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-2.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! { nvptx*-*-* visium-*-* } } } } */\n+/* { dg-options \"-O2 -fpatchable-function-entry=1,65536\" } */\n+/* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */\n+/* { dg-error \"invalid arguments for '-fpatchable-function-entry'\" \"\" { target *-*-* } 0 } */\n+\n+void\n+foo (void)\n+{\n+}"}, {"sha": "4490e5c15caf20ebde6565447a15c7de73ed9e5f", "filename": "gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! { nvptx*-*-* visium-*-* } } } } */\n+/* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */\n+\n+void\n+ __attribute__((patchable_function_entry(65536)))\n+foo1 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+}\n+\n+void\n+ __attribute__((patchable_function_entry(65536,1)))\n+foo2 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+}\n+\n+void\n+ __attribute__((patchable_function_entry(65536,65536)))\n+foo3 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+}"}, {"sha": "f062e48071fefb82e0603a2f74b7fc89cbe96350", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6607bdd99994c834f92fce924abdaea3405f62dc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6607bdd99994c834f92fce924abdaea3405f62dc", "patch": "@@ -1857,34 +1857,8 @@ assemble_start_function (tree decl, const char *fnname)\n   if (DECL_PRESERVE_P (decl))\n     targetm.asm_out.mark_decl_preserved (fnname);\n \n-  unsigned HOST_WIDE_INT patch_area_size = function_entry_patch_area_size;\n-  unsigned HOST_WIDE_INT patch_area_entry = function_entry_patch_area_start;\n-\n-  tree patchable_function_entry_attr\n-    = lookup_attribute (\"patchable_function_entry\", DECL_ATTRIBUTES (decl));\n-  if (patchable_function_entry_attr)\n-    {\n-      tree pp_val = TREE_VALUE (patchable_function_entry_attr);\n-      tree patchable_function_entry_value1 = TREE_VALUE (pp_val);\n-\n-      patch_area_size = tree_to_uhwi (patchable_function_entry_value1);\n-      patch_area_entry = 0;\n-      if (TREE_CHAIN (pp_val) != NULL_TREE)\n-\t{\n-\t  tree patchable_function_entry_value2\n-\t    = TREE_VALUE (TREE_CHAIN (pp_val));\n-\t  patch_area_entry = tree_to_uhwi (patchable_function_entry_value2);\n-\t}\n-    }\n-\n-  if (patch_area_entry > patch_area_size)\n-    {\n-      if (patch_area_size > 0)\n-\twarning (OPT_Wattributes,\n-\t\t \"patchable function entry %wu exceeds size %wu\",\n-\t\t patch_area_entry, patch_area_size);\n-      patch_area_entry = 0;\n-    }\n+  unsigned short patch_area_size = crtl->patch_area_size;\n+  unsigned short patch_area_entry = crtl->patch_area_entry;\n \n   /* Emit the patching area before the entry label, if any.  */\n   if (patch_area_entry > 0)"}]}