{"sha": "08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzMjdkZmE3M2MzY2MyZGFmMTVhMGM0NDA1YWUxYmNmYTk0MGVmMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-25T22:54:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-25T22:54:23Z"}, "message": "compiler: clean up unresolved placeholders for pointer types\n    \n    Add a new helper routine Type::finish_pointer_types that walks through\n    the pointer type cache and looks for placeholder types that may have\n    been created at some point before conversion of named types, and\n    invokes Type::finish_backend() on said placeholders.  This is needed\n    to handle cases where the compiler manufactures a pointer type as part\n    of lowering, then a placeholder is created for it due to a call to\n    Type::backend_type_size(), but there is no explicit reference to the\n    type in user code.\n    \n    Reviewed-on: https://go-review.googlesource.com/51131\n\nFrom-SVN: r250548", "tree": {"sha": "d45157c11b96e49a3175cd09161923fe1925180c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d45157c11b96e49a3175cd09161923fe1925180c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/comments", "author": null, "committer": null, "parents": [{"sha": "c2830789baaa2c6fd41adcc2c02a757ab59c843c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2830789baaa2c6fd41adcc2c02a757ab59c843c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2830789baaa2c6fd41adcc2c02a757ab59c843c"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "78905fe39c4779a86b6267ea361934354968317e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "patch": "@@ -1,4 +1,4 @@\n-e1bd9ea4dc16e228164c92a12c5229ddf20f2b50\n+61ce3b80ab20cb1f16960c1784bc0937abaa440a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ca4b454a2381a06f52b1b151d0b5066a7078a0dd", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "patch": "@@ -4824,6 +4824,8 @@ Gogo::convert_named_types()\n   Runtime::convert_types(this);\n \n   this->named_types_are_converted_ = true;\n+\n+  Type::finish_pointer_types(this);\n }\n \n // Convert all names types in a set of bindings."}, {"sha": "91d6091f54496031eba8a383ad722c2c3a0a9d82", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "patch": "@@ -5516,21 +5516,55 @@ Pointer_type::do_import(Import* imp)\n   return Type::make_pointer_type(to);\n }\n \n+// Cache of pointer types. Key is \"to\" type, value is pointer type\n+// that points to key.\n+\n+Type::Pointer_type_table Type::pointer_types;\n+\n // Make a pointer type.\n \n Pointer_type*\n Type::make_pointer_type(Type* to_type)\n {\n-  typedef Unordered_map(Type*, Pointer_type*) Hashtable;\n-  static Hashtable pointer_types;\n-  Hashtable::const_iterator p = pointer_types.find(to_type);\n+  Pointer_type_table::const_iterator p = pointer_types.find(to_type);\n   if (p != pointer_types.end())\n     return p->second;\n   Pointer_type* ret = new Pointer_type(to_type);\n   pointer_types[to_type] = ret;\n   return ret;\n }\n \n+// This helper is invoked immediately after named types have been\n+// converted, to clean up any unresolved pointer types remaining in\n+// the pointer type cache.\n+//\n+// The motivation for this routine: occasionally the compiler creates\n+// some specific pointer type as part of a lowering operation (ex:\n+// pointer-to-void), then Type::backend_type_size() is invoked on the\n+// type (which creates a Btype placeholder for it), that placeholder\n+// passed somewhere along the line to the back end, but since there is\n+// no reference to the type in user code, there is never a call to\n+// Type::finish_backend for the type (hence the Btype remains as an\n+// unresolved placeholder).  Calling this routine will clean up such\n+// instances.\n+\n+void\n+Type::finish_pointer_types(Gogo* gogo)\n+{\n+  for (Pointer_type_table::const_iterator i = pointer_types.begin();\n+       i != pointer_types.end();\n+       ++i)\n+    {\n+      Pointer_type* pt = i->second;\n+      Type_btypes::iterator tbti = Type::type_btypes.find(pt);\n+      if (tbti != Type::type_btypes.end() && tbti->second.is_placeholder)\n+        {\n+          pt->finish_backend(gogo, tbti->second.btype);\n+          tbti->second.is_placeholder = false;\n+        }\n+    }\n+}\n+\n // The nil type.  We use a special type for nil because it is not the\n // same as any other type.  In C term nil has type void*, but there is\n // no such type in Go."}, {"sha": "f659f3848456fb0187e5f33c2a37bca01e0c07fd", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=08327dfa73c3cc2daf15a0c4405ae1bcfa940ef3", "patch": "@@ -504,6 +504,9 @@ class Type\n   static Pointer_type*\n   make_pointer_type(Type*);\n \n+  static void\n+  finish_pointer_types(Gogo* gogo);\n+\n   static Type*\n   make_nil_type();\n \n@@ -1341,6 +1344,12 @@ class Type\n \n   static Type_functions type_functions_table;\n \n+  // Cache for reusing existing pointer types; maps from pointed-to-type\n+  // to pointer type.\n+  typedef Unordered_map(Type*, Pointer_type*) Pointer_type_table;\n+\n+  static Pointer_type_table pointer_types;\n+\n   // The type classification.\n   Type_classification classification_;\n   // The backend representation of the type, once it has been"}]}