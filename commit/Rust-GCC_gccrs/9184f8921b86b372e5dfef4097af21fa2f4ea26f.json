{"sha": "9184f8921b86b372e5dfef4097af21fa2f4ea26f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4NGY4OTIxYjg2YjM3MmU1ZGZlZjQwOTdhZjIxZmEyZjRlYTI2Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-28T05:12:22Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-28T05:12:22Z"}, "message": "i386.c (TARGET_PROMOTE_PROTOTYPES): New.\n\n\t* config/i386/i386.c (TARGET_PROMOTE_PROTOTYPES): New.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t* config/i386/i386.h (STRUCT_VALUE_INCOMING): Remove.\n\t(STRUCT_VALUE): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\nFrom-SVN: r76778", "tree": {"sha": "79f6db5fe1d6f9e2a05155e6c619e25b20e183b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f6db5fe1d6f9e2a05155e6c619e25b20e183b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9184f8921b86b372e5dfef4097af21fa2f4ea26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9184f8921b86b372e5dfef4097af21fa2f4ea26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9184f8921b86b372e5dfef4097af21fa2f4ea26f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9184f8921b86b372e5dfef4097af21fa2f4ea26f/comments", "author": null, "committer": null, "parents": [{"sha": "4cce9dd84a4d942ad6a443038aa80f301aa3784a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cce9dd84a4d942ad6a443038aa80f301aa3784a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cce9dd84a4d942ad6a443038aa80f301aa3784a"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "e44a7daf559a6f74f2dce9926dc57f3f8dcdea6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9184f8921b86b372e5dfef4097af21fa2f4ea26f", "patch": "@@ -1,3 +1,11 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/i386.c (TARGET_PROMOTE_PROTOTYPES): New.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t* config/i386/i386.h (STRUCT_VALUE_INCOMING): Remove.\n+\t(STRUCT_VALUE): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\n 2004-01-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/pa/pa.c (emit_move_sequence): Check that operand1 is a"}, {"sha": "df7efd1f314250fe8abd4e0e4e0214b9c5c918d6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9184f8921b86b372e5dfef4097af21fa2f4ea26f", "patch": "@@ -1024,6 +1024,12 @@ static void init_ext_80387_constants (void);\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST ix86_build_builtin_va_list\n \n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* The svr4 ABI for the i386 says that records and unions are returned"}, {"sha": "f49f8b4bed677babfd0b05bbd5e56a9aa3705308", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9184f8921b86b372e5dfef4097af21fa2f4ea26f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9184f8921b86b372e5dfef4097af21fa2f4ea26f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for IA-32.\n    Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1207,15 +1207,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define GOT_SYMBOL_NAME \"_GLOBAL_OFFSET_TABLE_\"\n \n-/* Register in which address to store a structure value\n-   arrives in the function.  On the 386, the prologue\n-   copies this from the stack to register %eax.  */\n-#define STRUCT_VALUE_INCOMING 0\n-\n-/* Place in which caller passes the structure value address.\n-   0 means push the value on the stack like an argument.  */\n-#define STRUCT_VALUE 0\n-\n /* A C expression which can inhibit the returning of certain function\n    values in registers, based on the type of value.  A nonzero value\n    says to return the function value in memory, just as large\n@@ -2589,11 +2580,6 @@ enum ix86_builtins\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* When a prototype says `char' or `short', really pass an `int'.\n-   (The 386 can't easily push less than an int.)  */\n-\n-#define PROMOTE_PROTOTYPES 1\n-\n /* A macro to update M and UNSIGNEDP when an object whose type is\n    TYPE and which has the specified mode and signedness is to be\n    stored in a register.  This macro is only called when TYPE is a"}]}