{"sha": "cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2N2U1ZDVmMTM4ZGJkZmY0ZWM4NTllNDAyMGU4MDkxY2IwM2FhNw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-01T22:33:02Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-01T22:33:08Z"}, "message": "Add locus to TupleField and pass it and union variants to HIR class\n\nTupleField was missing a Location field and we dropped to locus when\nlowering Union fields to HIR.", "tree": {"sha": "21fbf1574ca5be1da5802f60820661d35167183c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21fbf1574ca5be1da5802f60820661d35167183c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/comments", "author": null, "committer": null, "parents": [{"sha": "389fd74a3f3e9422a965263b6961b51295c55976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389fd74a3f3e9422a965263b6961b51295c55976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/389fd74a3f3e9422a965263b6961b51295c55976"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "6b0021a8b11948c74bbe2469005f80be3c32f1e3", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "patch": "@@ -2002,9 +2002,10 @@ struct TupleField\n \n   std::unique_ptr<Type> field_type;\n \n-  // should this store location info?\n   NodeId node_id;\n \n+  Location locus;\n+\n public:\n   // Returns whether tuple field has outer attributes.\n   bool has_outer_attributes () const { return !outer_attrs.empty (); }\n@@ -2014,17 +2015,17 @@ struct TupleField\n   bool has_visibility () const { return !visibility.is_error (); }\n \n   // Complete constructor\n-  TupleField (std::unique_ptr<Type> field_type, Visibility vis,\n+  TupleField (std::unique_ptr<Type> field_type, Visibility vis, Location locus,\n \t      std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : outer_attrs (std::move (outer_attrs)), visibility (std::move (vis)),\n       field_type (std::move (field_type)),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ()), locus (locus)\n   {}\n \n   // Copy constructor with clone\n   TupleField (TupleField const &other)\n     : outer_attrs (other.outer_attrs), visibility (other.visibility),\n-      node_id (other.node_id)\n+      node_id (other.node_id), locus (other.locus)\n   {\n     // guard to prevent null dereference (only required if error)\n     if (other.field_type != nullptr)\n@@ -2039,6 +2040,7 @@ struct TupleField\n     visibility = other.visibility;\n     outer_attrs = other.outer_attrs;\n     node_id = other.node_id;\n+    locus = other.locus;\n \n     // guard to prevent null dereference (only required if error)\n     if (other.field_type != nullptr)\n@@ -2059,12 +2061,14 @@ struct TupleField\n   // Creates an error state tuple field.\n   static TupleField create_error ()\n   {\n-    return TupleField (nullptr, Visibility::create_error ());\n+    return TupleField (nullptr, Visibility::create_error (), Location ());\n   }\n \n   std::string as_string () const;\n \n-  NodeId get_node_id () const { return node_id; };\n+  NodeId get_node_id () const { return node_id; }\n+\n+  Location get_locus () const { return locus; }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }"}, {"sha": "d49d2b22bf02801c028a84cceb996230ad35a0e3", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "patch": "@@ -111,12 +111,10 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t     mappings->get_next_localdef_id (\n \t\t\t\t       crate_num));\n \n-      // FIXME\n-      // AST::TupleField is missing Location info\n-      Location field_locus;\n       HIR::TupleField translated_field (mapping,\n \t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\tfield_locus, field.get_outer_attrs ());\n+\t\t\t\t\tfield.get_locus (),\n+\t\t\t\t\tfield.get_outer_attrs ());\n       fields.push_back (std::move (translated_field));\n       return true;\n     });"}, {"sha": "c4c00ac0bee33a71f6b0159a516b648a9497ac01", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "patch": "@@ -187,12 +187,10 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t     mappings->get_next_localdef_id (\n \t\t\t\t       crate_num));\n \n-      // FIXME\n-      // AST::StructField is missing Location info\n-      Location field_locus;\n       HIR::StructField translated_field (mapping, field.get_field_name (),\n \t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field_locus, field.get_outer_attrs ());\n+\t\t\t\t\t field.get_locus (),\n+\t\t\t\t\t field.get_outer_attrs ());\n       fields.push_back (std::move (translated_field));\n       return true;\n     });\n@@ -240,12 +238,9 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t     mappings->get_next_localdef_id (\n \t\t\t\t       crate_num));\n \n-      // FIXME\n-      // AST::StructField is missing Location info\n-      Location variant_locus;\n       HIR::StructField translated_variant (mapping, variant.get_field_name (),\n \t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant_locus,\n+\t\t\t\t\t   vis, variant.get_locus (),\n \t\t\t\t\t   variant.get_outer_attrs ());\n       variants.push_back (std::move (translated_variant));\n       return true;"}, {"sha": "9eb212b4e728368a86b75aa07e1a96b162275798", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67e5d5f138dbdff4ec859e4020e8091cb03aa7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=cd67e5d5f138dbdff4ec859e4020e8091cb03aa7", "patch": "@@ -4295,6 +4295,8 @@ Parser<ManagedTokenSource>::parse_tuple_field ()\n   // parse visibility if it exists\n   AST::Visibility vis = parse_visibility ();\n \n+  Location locus = lexer.peek_token ()->get_locus ();\n+\n   // parse type, which is required\n   std::unique_ptr<AST::Type> field_type = parse_type ();\n   if (field_type == nullptr)\n@@ -4308,7 +4310,7 @@ Parser<ManagedTokenSource>::parse_tuple_field ()\n       return AST::TupleField::create_error ();\n     }\n \n-  return AST::TupleField (std::move (field_type), std::move (vis),\n+  return AST::TupleField (std::move (field_type), std::move (vis), locus,\n \t\t\t  std::move (outer_attrs));\n }\n "}]}