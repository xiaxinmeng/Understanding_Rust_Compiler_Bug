{"sha": "5f262d13207ecf0e799fd10c479d14a7808ce9ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyNjJkMTMyMDdlY2YwZTc5OWZkMTBjNDc5ZDE0YTc4MDhjZTlhZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-10-08T04:41:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2010-10-08T04:41:14Z"}, "message": "re PR debug/45656 (gfortran.dg/forall_4.f90 -O3, wrong code with -g)\n\nPR debug/45656\n* cse.c (cse_extended_basic_block): Preserve cc0 info across\ndebug isnsn.  Skip them when searching for cc0 setter.\n(set_live_p): Skip debug insns when searching for cc0 user.\n\nFrom-SVN: r165150", "tree": {"sha": "e38ea77aaf10e63ebd3309b86fe474c00f24eb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e38ea77aaf10e63ebd3309b86fe474c00f24eb06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f262d13207ecf0e799fd10c479d14a7808ce9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f262d13207ecf0e799fd10c479d14a7808ce9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f262d13207ecf0e799fd10c479d14a7808ce9ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f262d13207ecf0e799fd10c479d14a7808ce9ae/comments", "author": null, "committer": null, "parents": [{"sha": "7de9e0a108c8bde8750dc0575afbb4aaa6bf978f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de9e0a108c8bde8750dc0575afbb4aaa6bf978f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de9e0a108c8bde8750dc0575afbb4aaa6bf978f"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "7168df046ff3a94a0fffc7db8025cf89fb815a82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f262d13207ecf0e799fd10c479d14a7808ce9ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f262d13207ecf0e799fd10c479d14a7808ce9ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f262d13207ecf0e799fd10c479d14a7808ce9ae", "patch": "@@ -1,3 +1,10 @@\n+2010-10-08  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/45656\n+\t* cse.c (cse_extended_basic_block): Preserve cc0 info across\n+\tdebug isnsn.  Skip them when searching for cc0 setter.\n+\t(set_live_p): Skip debug insns when searching for cc0 user.\n+\n 2010-10-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/45673"}, {"sha": "6adb799d87476a7c8bd1f3d1a35e53ce16262095", "filename": "gcc/cse.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f262d13207ecf0e799fd10c479d14a7808ce9ae/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f262d13207ecf0e799fd10c479d14a7808ce9ae/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=5f262d13207ecf0e799fd10c479d14a7808ce9ae", "patch": "@@ -6348,29 +6348,31 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n \t\trecorded_label_ref = true;\n \n #ifdef HAVE_cc0\n-\t      /* If the previous insn set CC0 and this insn no longer\n-\t\t references CC0, delete the previous insn.  Here we use\n-\t\t fact that nothing expects CC0 to be valid over an insn,\n-\t\t which is true until the final pass.  */\n-\t      {\n-\t\trtx prev_insn, tem;\n-\n-\t\tprev_insn = PREV_INSN (insn);\n-\t\tif (prev_insn && NONJUMP_INSN_P (prev_insn)\n-\t\t    && (tem = single_set (prev_insn)) != 0\n-\t\t    && SET_DEST (tem) == cc0_rtx\n-\t\t    && ! reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n-\t\t  delete_insn (prev_insn);\n-\t      }\n-\n-\t      /* If this insn is not the last insn in the basic block,\n-\t\t it will be PREV_INSN(insn) in the next iteration.  If\n-\t\t we recorded any CC0-related information for this insn,\n-\t\t remember it.  */\n-\t      if (insn != BB_END (bb))\n+\t      if (NONDEBUG_INSN_P (insn))\n \t\t{\n-\t\t  prev_insn_cc0 = this_insn_cc0;\n-\t\t  prev_insn_cc0_mode = this_insn_cc0_mode;\n+\t\t  /* If the previous insn sets CC0 and this insn no\n+\t\t     longer references CC0, delete the previous insn.\n+\t\t     Here we use fact that nothing expects CC0 to be\n+\t\t     valid over an insn, which is true until the final\n+\t\t     pass.  */\n+\t\t  rtx prev_insn, tem;\n+\n+\t\t  prev_insn = prev_nonnote_nondebug_insn (insn);\n+\t\t  if (prev_insn && NONJUMP_INSN_P (prev_insn)\n+\t\t      && (tem = single_set (prev_insn)) != NULL_RTX\n+\t\t      && SET_DEST (tem) == cc0_rtx\n+\t\t      && ! reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n+\t\t    delete_insn (prev_insn);\n+\n+\t\t  /* If this insn is not the last insn in the basic\n+\t\t     block, it will be PREV_INSN(insn) in the next\n+\t\t     iteration.  If we recorded any CC0-related\n+\t\t     information for this insn, remember it.  */\n+\t\t  if (insn != BB_END (bb))\n+\t\t    {\n+\t\t      prev_insn_cc0 = this_insn_cc0;\n+\t\t      prev_insn_cc0_mode = this_insn_cc0_mode;\n+\t\t    }\n \t\t}\n #endif\n \t    }\n@@ -6713,7 +6715,7 @@ set_live_p (rtx set, rtx insn ATTRIBUTE_UNUSED, /* Only used with HAVE_cc0.  */\n #ifdef HAVE_cc0\n   else if (GET_CODE (SET_DEST (set)) == CC0\n \t   && !side_effects_p (SET_SRC (set))\n-\t   && ((tem = next_nonnote_insn (insn)) == 0\n+\t   && ((tem = next_nonnote_nondebug_insn (insn)) == NULL_RTX\n \t       || !INSN_P (tem)\n \t       || !reg_referenced_p (cc0_rtx, PATTERN (tem))))\n     return false;"}]}