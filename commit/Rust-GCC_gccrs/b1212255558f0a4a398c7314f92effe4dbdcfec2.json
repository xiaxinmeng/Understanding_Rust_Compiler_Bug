{"sha": "b1212255558f0a4a398c7314f92effe4dbdcfec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyMTIyNTU1NThmMGE0YTM5OGM3MzE0ZjkyZWZmZTRkYmRjZmVjMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-11-21T00:46:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-11-21T00:46:24Z"}, "message": "C: hints for missing stdlib includes for macros and types\n\nThe C frontend already \"knows\" about many common functions in\nthe C standard library:\n\n  test.c: In function 'test':\n  test.c:3:3: warning: implicit declaration of function 'printf' [-Wimplicit-function-declaration]\n     printf (\"hello world\\n\");\n     ^~~~~~\n  test.c:3:3: warning: incompatible implicit declaration of built-in function 'printf'\n  test.c:3:3: note: include '<stdio.h>' or provide a declaration of 'printf'\n\nand which header file they are in.\n\nHowever it doesn't know about various types and macros:\n\ntest.c:1:13: error: 'NULL' undeclared here (not in a function)\n void *ptr = NULL;\n             ^~~~\n\nThis patch uses the name_hint/deferred_diagnostic machinery to\nadd hints for missing C standard library headers for some of the\nmost common type and macro names.\n\nFor example, the above becomes:\ntest.c:1:13: error: 'NULL' undeclared here (not in a function)\n void *ptr = NULL;\n             ^~~~\ntest.c:1:13: note: 'NULL' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?\n\ngcc/c/ChangeLog:\n\t* c-decl.c (get_c_name_hint): New function.\n\t(class suggest_missing_header): New class.\n\t(lookup_name_fuzzy): Call get_c_name_hint and use it to\n\tsuggest missing headers to the user.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/spellcheck-stdlib.c: New test case.\n\nFrom-SVN: r254979", "tree": {"sha": "21b4a30929c43eb96e39856f306ac8ee9bdbcf69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b4a30929c43eb96e39856f306ac8ee9bdbcf69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1212255558f0a4a398c7314f92effe4dbdcfec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1212255558f0a4a398c7314f92effe4dbdcfec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1212255558f0a4a398c7314f92effe4dbdcfec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1212255558f0a4a398c7314f92effe4dbdcfec2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01ada12136c64ad9ff305f456637d43b9f6d4356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ada12136c64ad9ff305f456637d43b9f6d4356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ada12136c64ad9ff305f456637d43b9f6d4356"}], "stats": {"total": 158, "additions": 156, "deletions": 2}, "files": [{"sha": "b60a8e70d48e169ef330000f35b2b022f6cb18b0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b1212255558f0a4a398c7314f92effe4dbdcfec2", "patch": "@@ -1,3 +1,10 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (get_c_name_hint): New function.\n+\t(class suggest_missing_header): New class.\n+\t(lookup_name_fuzzy): Call get_c_name_hint and use it to\n+\tsuggest missing headers to the user.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-decl.c: Define INCLUDE_UNIQUE_PTR before including system.h."}, {"sha": "ae45e9a88f87a74f91165387f449dc149180e5a6", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b1212255558f0a4a398c7314f92effe4dbdcfec2", "patch": "@@ -3992,6 +3992,83 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n   return NULL_TREE;\n }\n \n+/* Subroutine of lookup_name_fuzzy for handling unrecognized names\n+   for some of the most common names within the C standard library.\n+   Given non-NULL NAME, return the header name defining it within the C\n+   standard library (with '<' and '>'), or NULL.  */\n+\n+static const char *\n+get_c_name_hint (const char *name)\n+{\n+  struct std_name_hint\n+  {\n+    const char *name;\n+    const char *header;\n+  };\n+  static const std_name_hint hints[] = {\n+    /* <errno.h>.  */\n+    {\"errno\", \"<errno.h>\"},\n+\n+    /* <stdarg.h>.  */\n+    {\"va_list\", \"<stdarg.h>\"},\n+\n+    /* <stddef.h>.  */\n+    {\"NULL\", \"<stddef.h>\"},\n+    {\"ptrdiff_t\", \"<stddef.h>\"},\n+    {\"wchar_t\", \"<stddef.h>\"},\n+    {\"size_t\", \"<stddef.h>\"},\n+\n+    /* <stdio.h>.  */\n+    {\"BUFSIZ\", \"<stdio.h>\"},\n+    {\"EOF\", \"<stdio.h>\"},\n+    {\"FILE\", \"<stdio.h>\"},\n+    {\"FILENAME_MAX\", \"<stdio.h>\"},\n+    {\"fpos_t\", \"<stdio.h>\"},\n+    {\"stderr\", \"<stdio.h>\"},\n+    {\"stdin\", \"<stdio.h>\"},\n+    {\"stdout\", \"<stdio.h>\"}\n+  };\n+  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n+  for (size_t i = 0; i < num_hints; i++)\n+    {\n+      if (0 == strcmp (name, hints[i].name))\n+\treturn hints[i].header;\n+    }\n+  return NULL;\n+}\n+\n+/* Subclass of deferred_diagnostic for suggesting to the user\n+   that they have missed a #include.  */\n+\n+class suggest_missing_header : public deferred_diagnostic\n+{\n+ public:\n+  suggest_missing_header (location_t loc, const char *name,\n+\t\t\t  const char *header_hint)\n+  : deferred_diagnostic (loc), m_name_str (name), m_header_hint (header_hint)\n+  {\n+    gcc_assert (name);\n+    gcc_assert (header_hint);\n+  }\n+\n+  ~suggest_missing_header ()\n+  {\n+    if (is_suppressed_p ())\n+      return;\n+\n+    gcc_rich_location richloc (get_location ());\n+    maybe_add_include_fixit (&richloc, m_header_hint);\n+    inform (&richloc,\n+\t    \"%qs is defined in header %qs;\"\n+\t    \" did you forget to %<#include %s%>?\",\n+\t    m_name_str, m_header_hint, m_header_hint);\n+  }\n+\n+ private:\n+  const char *m_name_str;\n+  const char *m_header_hint;\n+};\n+\n /* Look for the closest match for NAME within the currently valid\n    scopes.\n \n@@ -4006,13 +4083,24 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n    identifier to the C frontend.\n \n    It also looks for start_typename keywords, to detect \"singed\" vs \"signed\"\n-   typos.  */\n+   typos.\n+\n+   Use LOC for any deferred diagnostics.  */\n \n name_hint\n-lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t)\n+lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n+  /* First, try some well-known names in the C standard library, in case\n+     the user forgot a #include.  */\n+  const char *header_hint = get_c_name_hint (IDENTIFIER_POINTER (name));\n+  if (header_hint)\n+    return name_hint (NULL,\n+\t\t      new suggest_missing_header (loc,\n+\t\t\t\t\t\t  IDENTIFIER_POINTER (name),\n+\t\t\t\t\t\t  header_hint));\n+\n   best_match<tree, tree> bm (name);\n \n   /* Look within currently valid scopes.  */"}, {"sha": "d1911dff6c9097218bfbf95ef78476b3c7bdb0d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1212255558f0a4a398c7314f92effe4dbdcfec2", "patch": "@@ -1,3 +1,7 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/spellcheck-stdlib.c: New test case.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/72786"}, {"sha": "85a21c3840082496f509a6bdb1e694a9e3cf2493", "filename": "gcc/testsuite/gcc.dg/spellcheck-stdlib.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1212255558f0a4a398c7314f92effe4dbdcfec2/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c?ref=b1212255558f0a4a398c7314f92effe4dbdcfec2", "patch": "@@ -0,0 +1,55 @@\n+/* Missing <stddef.h>.  */\n+\n+void *ptr = NULL; /* { dg-error \"'NULL' undeclared here\" } */\n+/* { dg-message \"'NULL' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+ptrdiff_t pd; /* { dg-error \"unknown type name 'ptrdiff_t'\" } */\n+/* { dg-message \"'ptrdiff_t' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+wchar_t wc; /* { dg-error \"unknown type name 'wchar_t'\" } */\n+/* { dg-message \"'wchar_t' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+size_t sz; /* { dg-error \"unknown type name 'size_t'\" } */\n+/* { dg-message \"'size_t' is defined in header '<stddef.h>'; did you forget to '#include <stddef.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+/* Missing <stdio.h>.  */\n+\n+void test_stdio_h (void)\n+{\n+  FILE *f; /* { dg-error \"unknown type name 'FILE'\" } */\n+  /* { dg-message \"'FILE' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  char buf[BUFSIZ]; /* { dg-error \"'BUFSIZ' undeclared\" } */\n+  /* { dg-message \"'BUFSIZ' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  char buf2[FILENAME_MAX]; /* { dg-error \"'FILENAME_MAX' undeclared\" } */\n+  /* { dg-message \"'FILENAME_MAX' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  stderr; /* { dg-error \"'stderr' undeclared\" } */\n+  /* { dg-message \"'stderr' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  stdin; /* { dg-error \"'stdin' undeclared\" } */\n+  /* { dg-message \"'stdin' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  stdout; /* { dg-error \"'stdout' undeclared\" } */\n+  /* { dg-message \"'stdout' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+\n+  EOF; /* { dg-error \"'EOF' undeclared\" } */\n+  /* { dg-message \"'EOF' is defined in header '<stdio.h>'; did you forget to '#include <stdio.h>'?\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+/* Missing <errno.h>.  */\n+\n+int test_errno_h (void)\n+{\n+  return errno; /* { dg-error \"'errno' undeclared\" } */\n+  /* { dg-message \"'errno' is defined in header '<errno.h>'; did you forget to '#include <errno.h>'?\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+/* Missing <stdarg.h>.  */\n+\n+void test_stdarg_h (void)\n+{\n+  va_list ap; /* { dg-error \"unknown type name 'va_list'\" } */\n+  /* { dg-message \"'va_list' is defined in header '<stdarg.h>'; did you forget to '#include <stdarg.h>'?\" \"\" { target *-*-* } .-1 } */\n+}"}]}