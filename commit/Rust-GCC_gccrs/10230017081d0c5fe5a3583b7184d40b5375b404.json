{"sha": "10230017081d0c5fe5a3583b7184d40b5375b404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyMzAwMTcwODFkMGM1ZmU1YTM1ODNiNzE4NGQ0MGI1Mzc1YjQwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-14T08:37:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-14T08:37:41Z"}, "message": "genmatch.c (add_operator): Allow CONSTRUCTOR.\n\n2014-11-14  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (add_operator): Allow CONSTRUCTOR.\n\t(dt_node::gen_kids): Handle CONSTRUCTOR not as GENERIC.\n\t(parser::parse_op): Allow to iterate over predicates.\n\nFrom-SVN: r217541", "tree": {"sha": "404570d7f13d6b5d75f9d23557a8a39fbaa8fc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/404570d7f13d6b5d75f9d23557a8a39fbaa8fc18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10230017081d0c5fe5a3583b7184d40b5375b404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10230017081d0c5fe5a3583b7184d40b5375b404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10230017081d0c5fe5a3583b7184d40b5375b404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10230017081d0c5fe5a3583b7184d40b5375b404/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "899c78aee8e5bf75ade2364a586dcee039c25ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899c78aee8e5bf75ade2364a586dcee039c25ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899c78aee8e5bf75ade2364a586dcee039c25ede"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "07c321ac733c775d76dd811d80fcca303df2019f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10230017081d0c5fe5a3583b7184d40b5375b404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10230017081d0c5fe5a3583b7184d40b5375b404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10230017081d0c5fe5a3583b7184d40b5375b404", "patch": "@@ -1,3 +1,9 @@\n+2014-11-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (add_operator): Allow CONSTRUCTOR.\n+\t(dt_node::gen_kids): Handle CONSTRUCTOR not as GENERIC.\n+\t(parser::parse_op): Allow to iterate over predicates.\n+\n 2014-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.ac (--with-diagnostics-color): New configure"}, {"sha": "fdd02a5358ac04879b2d15e5b551cf3e0512bb50", "filename": "gcc/genmatch.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10230017081d0c5fe5a3583b7184d40b5375b404/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10230017081d0c5fe5a3583b7184d40b5375b404/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=10230017081d0c5fe5a3583b7184d40b5375b404", "patch": "@@ -310,7 +310,9 @@ add_operator (enum tree_code code, const char *id,\n       /* For {REAL,IMAG}PART_EXPR and VIEW_CONVERT_EXPR.  */\n       && strcmp (tcc, \"tcc_reference\") != 0\n       /* To have INTEGER_CST and friends as \"predicate operators\".  */\n-      && strcmp (tcc, \"tcc_constant\") != 0)\n+      && strcmp (tcc, \"tcc_constant\") != 0\n+      /* And allow CONSTRUCTOR for vector initializers.  */\n+      && !(code == CONSTRUCTOR))\n     return;\n   operator_id *op = new operator_id (code, id, nargs, tcc);\n   id_base **slot = operators->find_slot_with_hash (op, op->hashval, INSERT);\n@@ -2013,7 +2015,8 @@ dt_node::gen_kids (FILE *f, bool gimple)\n \t  dt_operand *op = as_a<dt_operand *> (kids[i]);\n \t  if (expr *e = dyn_cast <expr *> (op->op))\n \t    {\n-\t      if (e->ops.length () == 0)\n+\t      if (e->ops.length () == 0\n+\t\t  && (!gimple || !(*e->operation == CONSTRUCTOR)))\n \t\tgeneric_exprs.safe_push (op);\n \t      else if (e->operation->kind == id_base::FN)\n \t\t{\n@@ -3030,6 +3033,14 @@ parser::parse_op ()\n \t\t expression.  */\n \t      op = new expr (opr);\n \t    }\n+\t  else if (user_id *code = dyn_cast <user_id *> (opr))\n+\t    {\n+\t      if (code->nargs != 0)\n+\t\tfatal_at (token, \"using an operator with operands as predicate\");\n+\t      /* Parse the zero-operand operator \"predicates\" as\n+\t\t expression.  */\n+\t      op = new expr (opr);\n+\t    }\n \t  else if (predicate_id *p = dyn_cast <predicate_id *> (opr))\n \t    op = new predicate (p);\n \t  else"}]}