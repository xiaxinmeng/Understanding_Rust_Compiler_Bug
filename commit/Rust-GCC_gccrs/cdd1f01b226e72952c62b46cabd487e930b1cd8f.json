{"sha": "cdd1f01b226e72952c62b46cabd487e930b1cd8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMWYwMWIyMjZlNzI5NTJjNjJiNDZjYWJkNDg3ZTkzMGIxY2Q4Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-31T06:52:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-31T06:52:48Z"}, "message": "flow.c (update_life_info): Zap life info after cleanup_cfg.\n\n        * flow.c (update_life_info): Zap life info after cleanup_cfg.\n        (regno_uninitialized): Use correct live at function entry set.\n        (regno_clobbered_at_setjmp): Likewise.\n\nFrom-SVN: r62172", "tree": {"sha": "87e598f6cf03da7f910adcf911b22a2ac55cf24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87e598f6cf03da7f910adcf911b22a2ac55cf24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd1f01b226e72952c62b46cabd487e930b1cd8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1f01b226e72952c62b46cabd487e930b1cd8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd1f01b226e72952c62b46cabd487e930b1cd8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1f01b226e72952c62b46cabd487e930b1cd8f/comments", "author": null, "committer": null, "parents": [{"sha": "6bc82793404b62c93b1544135e013db3e65c65cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc82793404b62c93b1544135e013db3e65c65cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc82793404b62c93b1544135e013db3e65c65cd"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "4c8920154c733464a6bbe93f9307496a330ea015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1f01b226e72952c62b46cabd487e930b1cd8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1f01b226e72952c62b46cabd487e930b1cd8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdd1f01b226e72952c62b46cabd487e930b1cd8f", "patch": "@@ -1,3 +1,11 @@\n+2003-01-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (update_life_info): Zap life info after cleanup_cfg.\n+\t(regno_uninitialized): Use correct live at function entry set.\n+\t(regno_clobbered_at_setjmp): Likewise.\n+\n+\t* expr.c (store_expr): Promote all MEM intermediates to regs.\n+\n 2003-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/arm/arm.c: Fix comment typos."}, {"sha": "24f869153c0e2b2fab20ae75605d5f56d1202ebf", "filename": "gcc/flow.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1f01b226e72952c62b46cabd487e930b1cd8f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1f01b226e72952c62b46cabd487e930b1cd8f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=cdd1f01b226e72952c62b46cabd487e930b1cd8f", "patch": "@@ -693,6 +693,16 @@ update_life_info (blocks, extent, prop_flags)\n \t     partial improvement (see MAX_MEM_SET_LIST_LEN usage).\n \t     Further improvement may be possible.  */\n \t  cleanup_cfg (CLEANUP_EXPENSIVE);\n+\n+\t  /* Zap the life information from the last round.  If we don't \n+\t     do this, we can wind up with registers that no longer appear\n+\t     in the code being marked live at entry, which twiggs bogus\n+\t     warnings from regno_uninitialized.  */\n+\t  FOR_EACH_BB (bb)\n+\t    {\n+\t      CLEAR_REG_SET (bb->global_live_at_start);\n+\t      CLEAR_REG_SET (bb->global_live_at_end);\n+\t    }\n \t}\n \n       /* If asked, remove notes from the blocks we'll update.  */\n@@ -2379,7 +2389,7 @@ regno_uninitialized (regno)\n \t      || FUNCTION_ARG_REGNO_P (regno))))\n     return 0;\n \n-  return REGNO_REG_SET_P (ENTRY_BLOCK_PTR->next_bb->global_live_at_start, regno);\n+  return REGNO_REG_SET_P (ENTRY_BLOCK_PTR->global_live_at_end, regno);\n }\n \n /* 1 if register REGNO was alive at a place where `setjmp' was called\n@@ -2394,7 +2404,7 @@ regno_clobbered_at_setjmp (regno)\n     return 0;\n \n   return ((REG_N_SETS (regno) > 1\n-\t   || REGNO_REG_SET_P (ENTRY_BLOCK_PTR->next_bb->global_live_at_start, regno))\n+\t   || REGNO_REG_SET_P (ENTRY_BLOCK_PTR->global_live_at_end, regno))\n \t  && REGNO_REG_SET_P (regs_live_at_setjmp, regno));\n }\n \f"}]}