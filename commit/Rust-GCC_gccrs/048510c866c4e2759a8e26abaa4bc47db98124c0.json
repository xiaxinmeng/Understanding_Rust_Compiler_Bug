{"sha": "048510c866c4e2759a8e26abaa4bc47db98124c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4NTEwYzg2NmM0ZTI3NTlhOGUyNmFiYWE0YmM0N2RiOTgxMjRjMA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-08T21:29:56Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-08T21:29:56Z"}, "message": "re PR fortran/44649 ([OOP] F2008: storage_size intrinsic (also working for polymorphic types))\n\n2010-07-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44649\n\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_C_SIZEOF,GFC_ISYM_STORAGE_SIZE.\n\t* intrinsic.h (gfc_check_c_sizeof,gfc_check_storage_size,\n\tgfc_resolve_storage_size): New prototypes.\n\t* check.c (gfc_check_c_sizeof,gfc_check_storage_size): New functions.\n\t* intrinsic.c (add_functions): Add STORAGE_SIZE.\n\t* iresolve.c (gfc_resolve_storage_size): New function.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof): Handle polymorphic\n\targuments.\n\t(gfc_conv_intrinsic_storage_size): New function.\n\t(gfc_conv_intrinsic_function): Handle STORAGE_SIZE.\n\n2010-07-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44649\n\t* gfortran.dg/c_sizeof_1.f90: Modified.\n\t* gfortran.dg/storage_size_1.f08: New.\n\t* gfortran.dg/storage_size_2.f08: New.\n\nFrom-SVN: r161977", "tree": {"sha": "2c2688fd89455d0aaad357e44fa2022e5e323962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2688fd89455d0aaad357e44fa2022e5e323962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048510c866c4e2759a8e26abaa4bc47db98124c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048510c866c4e2759a8e26abaa4bc47db98124c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048510c866c4e2759a8e26abaa4bc47db98124c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048510c866c4e2759a8e26abaa4bc47db98124c0/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df15c3d3a09de53400da2a844e2af40ca1dbc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df15c3d3a09de53400da2a844e2af40ca1dbc0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df15c3d3a09de53400da2a844e2af40ca1dbc0c"}], "stats": {"total": 215, "additions": 211, "deletions": 4}, "files": [{"sha": "1a9e71f29cd441822565e2838048e8a77a0d7174", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -1,3 +1,17 @@\n+2010-07-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44649\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_C_SIZEOF,GFC_ISYM_STORAGE_SIZE.\n+\t* intrinsic.h (gfc_check_c_sizeof,gfc_check_storage_size,\n+\tgfc_resolve_storage_size): New prototypes.\n+\t* check.c (gfc_check_c_sizeof,gfc_check_storage_size): New functions.\n+\t* intrinsic.c (add_functions): Add STORAGE_SIZE.\n+\t* iresolve.c (gfc_resolve_storage_size): New function.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof): Handle polymorphic\n+\targuments.\n+\t(gfc_conv_intrinsic_storage_size): New function.\n+\t(gfc_conv_intrinsic_function): Handle STORAGE_SIZE.\n+\n 2010-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/44847"}, {"sha": "7578775ef42545f0d51a4056c60c23cd67e3f327", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -3045,6 +3045,20 @@ gfc_check_sizeof (gfc_expr *arg ATTRIBUTE_UNUSED)\n }\n \n \n+gfc_try\n+gfc_check_c_sizeof (gfc_expr *arg)\n+{\n+  if (verify_c_interop (&arg->ts) != SUCCESS)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must be be an \"\n+\t\t \"interoperable data entity\", gfc_current_intrinsic_arg[0],\n+\t\t gfc_current_intrinsic, &arg->where);\n+      return FAILURE;\n+    }\n+  return SUCCESS;\n+}\n+\n+\n gfc_try\n gfc_check_sleep_sub (gfc_expr *seconds)\n {\n@@ -4559,3 +4573,27 @@ gfc_check_and (gfc_expr *i, gfc_expr *j)\n \n   return SUCCESS;\n }\n+\n+\n+gfc_try\n+gfc_check_storage_size (gfc_expr *a ATTRIBUTE_UNUSED, gfc_expr *kind)\n+{\n+  if (kind == NULL)\n+    return SUCCESS;\n+\n+  if (type_check (kind, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (kind, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind->expr_type != EXPR_CONSTANT)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a constant\",\n+\t\t gfc_current_intrinsic_arg[1], gfc_current_intrinsic,\n+\t\t &kind->where);\n+      return FAILURE;\n+    }\n+\n+  return SUCCESS;\n+}"}, {"sha": "37979268c65d8bafed9c86ec11016a5b225b1fe8", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -348,6 +348,7 @@ enum gfc_isym_id\n   GFC_ISYM_CPU_TIME,\n   GFC_ISYM_CSHIFT,\n   GFC_ISYM_CTIME,\n+  GFC_ISYM_C_SIZEOF,\n   GFC_ISYM_DATE_AND_TIME,\n   GFC_ISYM_DBLE,\n   GFC_ISYM_DIGITS,\n@@ -504,6 +505,7 @@ enum gfc_isym_id\n   GFC_ISYM_SRAND,\n   GFC_ISYM_SR_KIND,\n   GFC_ISYM_STAT,\n+  GFC_ISYM_STORAGE_SIZE,\n   GFC_ISYM_SUM,\n   GFC_ISYM_SYMLINK,\n   GFC_ISYM_SYMLNK,"}, {"sha": "87d9c800df0063230863f12b64fb0872f2019c06", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -2459,7 +2459,10 @@ add_functions (void)\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"sizeof\", GFC_ISYM_SIZEOF, GFC_STD_GNU);\n-  make_alias (\"c_sizeof\", GFC_STD_F2008);\n+  \n+  add_sym_1 (\"c_sizeof\", GFC_ISYM_C_SIZEOF, CLASS_INQUIRY, ACTUAL_NO,\n+\t     BT_INTEGER, ii, GFC_STD_F2008, gfc_check_c_sizeof, NULL, NULL,\n+\t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   add_sym_1 (\"spacing\", GFC_ISYM_SPACING, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_spacing, gfc_resolve_spacing,\n@@ -2500,6 +2503,12 @@ add_functions (void)\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n+  add_sym_2 (\"storage_size\", GFC_ISYM_STORAGE_SIZE, CLASS_INQUIRY, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_storage_size, NULL, gfc_resolve_storage_size,\n+\t     a, BT_UNKNOWN, 0, REQUIRED,\n+\t     kind, BT_INTEGER, di, OPTIONAL);\n+  \n   add_sym_3red (\"sum\", GFC_ISYM_SUM, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t\tgfc_check_product_sum, gfc_simplify_sum, gfc_resolve_sum,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,"}, {"sha": "f5da7a0649c43f1078a9c85c0b47508d91c7f754", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -133,10 +133,12 @@ gfc_try gfc_check_size (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sign (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_signal (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sizeof (gfc_expr *);\n+gfc_try gfc_check_c_sizeof (gfc_expr *);\n gfc_try gfc_check_sngl (gfc_expr *);\n gfc_try gfc_check_spread (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_srand (gfc_expr *);\n gfc_try gfc_check_stat (gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_storage_size (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sum (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_symlnk (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_transfer (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -494,6 +496,7 @@ void gfc_resolve_spacing (gfc_expr *, gfc_expr *);\n void gfc_resolve_spread (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_sqrt (gfc_expr *, gfc_expr *);\n void gfc_resolve_stat (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_storage_size (gfc_expr *f, gfc_expr *a, gfc_expr *kind);\n void gfc_resolve_srand (gfc_code *);\n void gfc_resolve_sum (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_symlnk (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "c09ae9738fa6f1ab0359f9eca894cc0a0d1173c8", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -2318,6 +2318,18 @@ gfc_resolve_ftell (gfc_expr *f, gfc_expr *u)\n }\n \n \n+void\n+gfc_resolve_storage_size (gfc_expr *f, gfc_expr *a ATTRIBUTE_UNUSED,\n+\t\t\t  gfc_expr *kind)\n+{\n+  f->ts.type = BT_INTEGER;\n+  if (kind)\n+    f->ts.kind = mpz_get_si (kind->value.integer);\n+  else\n+    f->ts.kind = gfc_default_integer_kind;\n+}\n+\n+\n void\n gfc_resolve_sum (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n {"}, {"sha": "b899618b60c0007aa80f239ea508aa602903b05d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -3885,6 +3885,9 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \n   if (ss == gfc_ss_terminator)\n     {\n+      if (arg->ts.type == BT_CLASS)\n+\tgfc_add_component_ref (arg, \"$data\");\n+\n       gfc_conv_expr_reference (&argse, arg);\n \n       type = TREE_TYPE (build_fold_indirect_ref_loc (input_location,\n@@ -3934,6 +3937,56 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n }\n \n \n+static void\n+gfc_conv_intrinsic_storage_size (gfc_se *se, gfc_expr *expr)\n+{\n+  gfc_expr *arg;\n+  gfc_ss *ss;\n+  gfc_se argse,eight;\n+  tree type, result_type, tmp;\n+\n+  arg = expr->value.function.actual->expr;\n+  gfc_init_se (&eight, NULL);\n+  gfc_conv_expr (&eight, gfc_get_int_expr (expr->ts.kind, NULL, 8));\n+  \n+  gfc_init_se (&argse, NULL);\n+  ss = gfc_walk_expr (arg);\n+  result_type = gfc_get_int_type (expr->ts.kind);\n+\n+  if (ss == gfc_ss_terminator)\n+    {\n+      if (arg->ts.type == BT_CLASS)\n+      {\n+\tgfc_add_component_ref (arg, \"$vptr\");\n+\tgfc_add_component_ref (arg, \"$size\");\n+\tgfc_conv_expr (&argse, arg);\n+\ttmp = fold_convert (result_type, argse.expr);\n+\tgoto done;\n+      }\n+\n+      gfc_conv_expr_reference (&argse, arg);\n+      type = TREE_TYPE (build_fold_indirect_ref_loc (input_location, \n+\t\t\t\t\t\t     argse.expr));\n+    }\n+  else\n+    {\n+      argse.want_pointer = 0;\n+      gfc_conv_expr_descriptor (&argse, arg, ss);\n+      type = gfc_get_element_type (TREE_TYPE (argse.expr));\n+    }\n+    \n+  /* Obtain the argument's word length.  */\n+  if (arg->ts.type == BT_CHARACTER)\n+    tmp = size_of_string_in_bytes (arg->ts.kind, argse.string_length);\n+  else\n+    tmp = fold_convert (result_type, size_in_bytes (type)); \n+\n+done:\n+  se->expr = fold_build2 (MULT_EXPR, result_type, tmp, eight.expr);\n+  gfc_add_block_to_block (&se->pre, &argse.pre);\n+}\n+\n+\n /* Intrinsic string comparison functions.  */\n \n static void\n@@ -5270,9 +5323,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_SIZEOF:\n+    case GFC_ISYM_C_SIZEOF:\n       gfc_conv_intrinsic_sizeof (se, expr);\n       break;\n \n+    case GFC_ISYM_STORAGE_SIZE:\n+      gfc_conv_intrinsic_storage_size (se, expr);\n+      break;\n+\n     case GFC_ISYM_SPACING:\n       gfc_conv_intrinsic_spacing (se, expr);\n       break;"}, {"sha": "52a54e9da28efaf6f5bd76a7594a435970f7ee90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -1,3 +1,10 @@\n+2010-07-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44649\n+\t* gfortran.dg/c_sizeof_1.f90: Modified.\n+\t* gfortran.dg/storage_size_1.f08: New.\n+\t* gfortran.dg/storage_size_2.f08: New.\n+\n 2010-07-08  Mikael Pettersson  <mikpe@it.uu.se>\n \n \t* gcc.c-torture/execute/20100708-1.c: New test."}, {"sha": "b30bdc5285e9f069593ea4a8a56807db7c38c6e9", "filename": "gcc/testsuite/gfortran.dg/c_sizeof_1.f90", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_sizeof_1.f90?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -1,8 +1,12 @@\n ! { dg-do run }\n ! Support F2008's c_sizeof()\n !\n-integer(4) :: i, j(10)\n-character(4),parameter :: str(1) = \"abcd\"\n+use iso_c_binding, only: c_int, c_char, c_ptr, c_intptr_t, c_null_ptr\n+\n+integer(kind=c_int) :: i, j(10)\n+character(kind=c_char,len=4),parameter :: str(1) = \"abcd\"\n+type(c_ptr) :: cptr\n+integer(c_intptr_t) :: iptr\n \n ! Using F2008's C_SIZEOF\n i = c_sizeof(i)\n@@ -18,9 +22,10 @@\n if (i /= 4) call abort()\n \n i = c_sizeof(str(1)(1:3))\n-print *, i\n if (i /= 3) call abort()\n \n+write(*,*) c_sizeof(cptr), c_sizeof(iptr), c_sizeof(C_NULL_PTR)\n+\n ! Using GNU's SIZEOF\n i = sizeof(i)\n if (i /= 4) call abort()\n@@ -36,5 +41,6 @@\n \n i = sizeof(str(1)(1:3))\n if (i /= 3) call abort()\n+\n end\n "}, {"sha": "ade9dfc30b019e3967d784946dd5c86dccfc9cd9", "filename": "gcc/testsuite/gfortran.dg/storage_size_1.f08", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_1.f08?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+!\n+! PR 44649: [OOP] F2008: storage_size intrinsic\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+type :: t\n+  integer(4) :: i\n+  real(4) :: r\n+end type\n+\n+type,extends(t) :: t2\n+  integer(4) :: j\n+end type\n+\n+type(t) :: a\n+type(t), dimension(1:3) :: b\n+class(t), allocatable :: cp\n+\n+allocate(t2::cp)\n+\n+if (sizeof(a)        /=  8) call abort()\n+if (storage_size(a)  /= 64) call abort()\n+\n+if (sizeof(b)        /= 24) call abort()\n+if (storage_size(b)  /= 64) call abort()\n+\n+if (sizeof(cp)       /=  8) call abort()\n+if (storage_size(cp) /= 96) call abort()\n+\n+end"}, {"sha": "50de9575e74b338345136601abd0bdc2dc407b9e", "filename": "gcc/testsuite/gfortran.dg/storage_size_2.f08", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_2.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048510c866c4e2759a8e26abaa4bc47db98124c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_2.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_2.f08?ref=048510c866c4e2759a8e26abaa4bc47db98124c0", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! PR 44649: [OOP] F2008: storage_size intrinsic\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+use iso_c_binding, only: c_int\n+\n+type, bind(c) :: t \n+  integer(c_int) :: j\n+end type\n+\n+integer(4) :: i1\n+integer(c_int) :: i2\n+type(t) :: x\n+\n+print *,c_sizeof(i1)                ! { dg-error \"must be be an interoperable data entity\" }\n+print *,c_sizeof(i2)\n+print *,c_sizeof(x)\n+print *, c_sizeof(ran())            ! { dg-error \"must be be an interoperable data entity\" }\n+\n+print *,storage_size(1.0,4)\n+print *,storage_size(1.0,3.2)       ! { dg-error \"must be INTEGER\" }\n+print *,storage_size(1.0,(/1,2/))   ! { dg-error \"must be a scalar\" }\n+print *,storage_size(1.0,irand())   ! { dg-error \"must be a constant\" }\n+\n+end"}]}