{"sha": "070b4df8a06539b661c134d436ea4207099fdcf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwYjRkZjhhMDY1MzliNjYxYzEzNGQ0MzZlYTQyMDcwOTlmZGNmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-01T12:13:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-01T12:41:02Z"}, "message": "libstdc++: Replace reserved identifier _T with _Tp (PR 94901)\n\nThe libstdc++ manual documents that _T can not be used, because it's a\nmacro in system headers on some targets.\n\n\tPR libstdc++/94901\n\t* include/std/type_traits (__is_complete_or_unbounded): Replace\n\tBADNAME _T with _Tp.\n\t* testsuite/17_intro/badnames.cc: New test.", "tree": {"sha": "a76e163dd4ae055acc9562c43b01caf5f2ea2763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76e163dd4ae055acc9562c43b01caf5f2ea2763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070b4df8a06539b661c134d436ea4207099fdcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b4df8a06539b661c134d436ea4207099fdcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070b4df8a06539b661c134d436ea4207099fdcf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b4df8a06539b661c134d436ea4207099fdcf0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eee6d219617123a94cf0872821b1f78c2a9b8f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eee6d219617123a94cf0872821b1f78c2a9b8f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eee6d219617123a94cf0872821b1f78c2a9b8f1"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "f699a1bc59e9e44d2b73a16030d7d80f529fc800", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=070b4df8a06539b661c134d436ea4207099fdcf0", "patch": "@@ -1,3 +1,10 @@\n+2020-05-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94901\n+\t* include/std/type_traits (__is_complete_or_unbounded): Replace\n+\tBADNAME _T with _Tp.\n+\t* testsuite/17_intro/badnames.cc: New test.\n+\n 2020-04-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/89510"}, {"sha": "bc9a45b3746b93c1287b3cfaa1fba04484a09864", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=070b4df8a06539b661c134d436ea4207099fdcf0", "patch": "@@ -197,8 +197,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Helper functions that return false_type for incomplete classes,\n   // incomplete unions and arrays of known bound from those.\n \n-  template <typename _T, size_t = sizeof(_T)>\n-    constexpr true_type __is_complete_or_unbounded(__type_identity<_T>)\n+  template <typename _Tp, size_t = sizeof(_Tp)>\n+    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)\n     { return {}; }\n \n   template <typename _TypeIdentity,"}, {"sha": "aabd01255e2d81f133f250b60b8608db38897029", "filename": "libstdc++-v3/testsuite/17_intro/badnames.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fbadnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b4df8a06539b661c134d436ea4207099fdcf0/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fbadnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fbadnames.cc?ref=070b4df8a06539b661c134d436ea4207099fdcf0", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target x86_64-*-linux* } }\n+\n+// Names taken from coding_style.bad_identifiers in the libstdc++ manual.\n+// We can't test this on all targets, because these names are used in\n+// non-GCC system headers. Test on x86_64-linux where we know these particular\n+// names aren't used.\n+\n+// For Solaris:\n+#define _B\t\t_B is a BADNAME\n+#define _C\t\t_C is a BADNAME\n+#define _L\t\t_L is a BADNAME\n+#define _N\t\t_N is a BADNAME\n+#define _P\t\t_P is a BADNAME\n+#define _S\t\t_S is a BADNAME\n+#define _U\t\t_U is a BADNAME\n+#define _X\t\t_X is a BADNAME\n+#define _E1\t\t_E1 is a BADNAME\n+#define _E2\t\t_E2 is a BADNAME\n+#define _E3\t\t_E3 is a BADNAME\n+#define _E4\t\t_E4 is a BADNAME\n+#define _E5\t\t_E5 is a BADNAME\n+#define _E6\t\t_E6 is a BADNAME\n+#define _E7\t\t_E7 is a BADNAME\n+#define _E8\t\t_E8 is a BADNAME\n+#define _E9\t\t_E9 is a BADNAME\n+\t// ..\n+#define _E24\t\t_E24 is a BADNAME\n+\n+// Irix adds:\n+#define _A\t\t_A is a BADNAME\n+#define _G\t\t_G is a BADNAME\n+\n+// MS adds:\n+#define _T\t\t_T is a BADNAME\n+\n+// BSD adds:\n+#define __used\t\t__used is a BADNAME\n+#define __unused\t__unused is a BADNAME\n+        // __inline\t(glibc uses this so can't test here)\n+        // _Complex\t(glibc uses this so can't test here)\n+#define __istype\t__istype is a BADNAME\n+#define __maskrune\t__maskrune is a BADNAME\n+#define __tolower\t__tolower is a BADNAME\n+#define __toupper\t__toupper is a BADNAME\n+#define __wchar_t\t__wchar_t is a BADNAME\n+#define __wint_t\t__wint_t is a BADNAME\n+        // _res\n+        // _res_ext\n+\t// __tg_*\n+\n+// VxWorks adds:\n+#define _C2\t\t_C2 is a BADNAME\n+\n+\n+#include <bits/stdc++.h>"}]}