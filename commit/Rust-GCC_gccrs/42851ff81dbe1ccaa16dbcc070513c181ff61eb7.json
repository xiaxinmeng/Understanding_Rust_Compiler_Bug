{"sha": "42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4NTFmZjgxZGJlMWNjYWExNmRiY2MwNzA1MTNjMTgxZmY2MWViNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-11T18:00:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-11T18:00:55Z"}, "message": "i386.md (*cmp<X87MODEF:mode>_<SWI24:mode>_i387): Do not use float_operator operator predicate.\n\n\t* config/i386/i386.md (*cmp<X87MODEF:mode>_<SWI24:mode>_i387):\n\tDo not use float_operator operator predicate.\n\t(*cmp<X87MODEF:mode>_<SWI24:mode>_cc_i387): Ditto.\n\t* config/i386/predicates.md (float_operator): Remove predicate.\n\n\t* config/i386/i386.md (*jcc<mode>_0_i387): Remove insn pattern.\n\t(*jccxf_i387): Ditto.\n\t(*jcc<mode>_i387): Ditto.\n\t(*jccu<mode>_i387): Ditto.\n\t(*jcc<X87MODEF:mode>_<SWI24:mode>_i387): Ditto.\n\t(*jcc_*_i387 splitters): Remove.\n\t* config/i386/i386-protos.h (ix86_split_fp_branch): Remove prototype.\n\t* config/i386/i386.c (ix86_split_fp_branch): Remove.\n\t* config/i386/predicates.md (ix86_swapped_fp_comparison_operator):\n\tRemove predicate.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/387-ficom-1.c: New test.\n\nFrom-SVN: r253653", "tree": {"sha": "8845dba2c3913f984ce31625e5a54b141791faba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8845dba2c3913f984ce31625e5a54b141791faba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/comments", "author": null, "committer": null, "parents": [{"sha": "9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66"}], "stats": {"total": 258, "additions": 71, "deletions": 187}, "files": [{"sha": "6f148dc051c111dba680d7c940b72a28356facc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -1,3 +1,23 @@\n+2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*cmp<X87MODEF:mode>_<SWI24:mode>_i387):\n+\tDo not use float_operator operator predicate.\n+\t(*cmp<X87MODEF:mode>_<SWI24:mode>_cc_i387): Ditto.\n+\t* config/i386/predicates.md (float_operator): Remove predicate.\n+\n+2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*jcc<mode>_0_i387): Remove insn pattern.\n+\t(*jccxf_i387): Ditto.\n+\t(*jcc<mode>_i387): Ditto.\n+\t(*jccu<mode>_i387): Ditto.\n+\t(*jcc<X87MODEF:mode>_<SWI24:mode>_i387): Ditto.\n+\t(*jcc_*_i387 splitters): Remove.\n+\t* config/i386/i386-protos.h (ix86_split_fp_branch): Remove prototype.\n+\t* config/i386/i386.c (ix86_split_fp_branch): Remove.\n+\t* config/i386/predicates.md (ix86_swapped_fp_comparison_operator):\n+\tRemove predicate.\n+\n 2017-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.h (slow_safe_scale_64bit): New function.\n@@ -43,7 +63,7 @@\n \t(ix86_atom_sched_reorder): Declare.\n \t* i386/i386.c Move all CPU cost tables to x86-tune-costs.h.\n \t(COSTS_N_BYTES): Move to x86-tune-costs.h.\n-\t(DUMMY_STRINGOP_ALGS):x86-tune-costs.h.\n+\t(DUMMY_STRINGOP_ALGS):Move to x86-tune-costs.h.\n \t(rip_relative_addr_p): Rename to ...\n \t(ix86_rip_relative_addr_p): ... this one; export.\n \t(memory_address_length): Update."}, {"sha": "6a7cdd3ed737f3b32dcc6a3c4ed85c85789b84c7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -166,9 +166,6 @@ extern void ix86_asm_output_function_label (FILE *, const char *, tree);\n extern void ix86_call_abi_override (const_tree);\n extern int ix86_reg_parm_stack_space (const_tree);\n \n-extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx,\n-\t\t\t\t  rtx, rtx, rtx);\n-\n extern bool ix86_libc_has_function (enum function_class fn_class);\n \n extern void x86_order_regs_for_local_alloc (void);"}, {"sha": "ca060b529d2c74dc54d5862557bbdc63960fa4d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -22259,31 +22259,6 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n     }\n }\n \n-/* Split branch based on floating point condition.  */\n-void\n-ix86_split_fp_branch (enum rtx_code code, rtx op1, rtx op2,\n-\t\t      rtx target1, rtx target2, rtx tmp)\n-{\n-  rtx condition;\n-  rtx_insn *i;\n-\n-  if (target2 != pc_rtx)\n-    {\n-      std::swap (target1, target2);\n-      code = reverse_condition_maybe_unordered (code);\n-    }\n-\n-  condition = ix86_expand_fp_compare (code, op1, op2,\n-\t\t\t\t      tmp);\n-\n-  i = emit_jump_insn (gen_rtx_SET\n-\t\t      (pc_rtx,\n-\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t     condition, target1, target2)));\n-  if (split_branch_probability.initialized_p ())\n-    add_reg_br_prob_note (i, split_branch_probability);\n-}\n-\n void\n ix86_expand_setcc (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n {"}, {"sha": "9e1f85f2993b93ef101295c4ad8773bbe77b8256", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 141, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -1612,8 +1612,8 @@\n \t(unspec:HI\n \t  [(compare:CCFP\n \t     (match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t     (match_operator:X87MODEF 3 \"float_operator\"\n-\t       [(match_operand:SWI24 2 \"memory_operand\" \"m\")]))]\n+\t     (float:X87MODEF\n+\t       (match_operand:SWI24 2 \"memory_operand\" \"m\")))]\n \t  UNSPEC_FNSTSW))]\n   \"TARGET_80387\n    && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n@@ -1628,8 +1628,8 @@\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n \t  (match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t  (match_operator:X87MODEF 3 \"float_operator\"\n-\t    [(match_operand:SWI24 2 \"memory_operand\" \"m\")])))\n+\t  (float:X87MODEF\n+\t    (match_operand:SWI24 2 \"memory_operand\" \"m\"))))\n    (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n   \"TARGET_80387 && TARGET_SAHF && !TARGET_CMOVE\n    && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n@@ -1640,7 +1640,7 @@\n \t(unspec:HI\n \t  [(compare:CCFP\n \t     (match_dup 1)\n-\t     (match_op_dup 3 [(match_dup 2)]))]\n+\t     (float:X87MODEF (match_dup 2)))]\n \tUNSPEC_FNSTSW))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n@@ -12032,142 +12032,6 @@\n   if (! ix86_comparison_operator (operands[0], VOIDmode))\n     FAIL;\n })\n-\n-;; Define combination compare-and-branch fp compare instructions to help\n-;; combine.\n-\n-(define_insn \"*jcc<mode>_0_i387\"\n-  [(set (pc)\n-\t(if_then_else (match_operator:CCFP 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:X87MODEF 2 \"const0_operand\")])\n-\t  (label_ref (match_operand 3))\n-\t  (pc)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 4 \"=a\"))]\n-  \"TARGET_80387 && !TARGET_CMOVE\"\n-  \"#\")\n-\n-(define_insn \"*jccxf_i387\"\n-  [(set (pc)\n-\t(if_then_else (match_operator:CCFP 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:XF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")])\n-\t  (label_ref (match_operand 3))\n-\t  (pc)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 4 \"=a\"))]\n-  \"TARGET_80387 && !TARGET_CMOVE\"\n-  \"#\")\n-\n-(define_insn \"*jcc<mode>_i387\"\n-  [(set (pc)\n-\t(if_then_else (match_operator:CCFP 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:MODEF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm\")])\n-\t  (label_ref (match_operand 3))\n-\t  (pc)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 4 \"=a\"))]\n-  \"TARGET_80387 && !TARGET_CMOVE\"\n-  \"#\")\n-\n-(define_insn \"*jccu<mode>_i387\"\n-  [(set (pc)\n-\t(if_then_else (match_operator:CCFPU 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:X87MODEF 2 \"register_operand\" \"f\")])\n-\t  (label_ref (match_operand 3))\n-\t  (pc)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 4 \"=a\"))]\n-  \"TARGET_80387 && !TARGET_CMOVE\"\n-  \"#\")\n-\n-(define_split\n-  [(set (pc)\n-\t(if_then_else (match_operator 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:X87MODEF 1 \"register_operand\")\n-\t\t\t (match_operand:X87MODEF 2 \"nonimmediate_operand\")])\n-\t  (match_operand 3)\n-\t  (match_operand 4)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))]\n-  \"TARGET_80387 && !TARGET_CMOVE\n-   && reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_fp_branch (GET_CODE (operands[0]), operands[1], operands[2],\n-\t                operands[3], operands[4], NULL_RTX);\n-  DONE;\n-})\n-\n-(define_split\n-  [(set (pc)\n-\t(if_then_else (match_operator 0 \"ix86_fp_comparison_operator\"\n-\t\t\t[(match_operand:X87MODEF 1 \"register_operand\")\n-\t\t\t (match_operand:X87MODEF 2 \"general_operand\")])\n-\t  (match_operand 3)\n-\t  (match_operand 4)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 5))]\n-  \"TARGET_80387 && !TARGET_CMOVE\n-   && reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_fp_branch (GET_CODE (operands[0]), operands[1], operands[2],\n-\t\t\toperands[3], operands[4], operands[5]);\n-  DONE;\n-})\n-\n-;; The order of operands in *jcc<fp>_<int>_i387 is forced by combine in\n-;; simplify_comparison () function. Float operator is treated as RTX_OBJ\n-;; with a precedence over other operators and is always put in the first\n-;; place. Swap condition and operands to match ficom instruction.\n-\n-(define_insn \"*jcc<X87MODEF:mode>_<SWI24:mode>_i387\"\n-  [(set (pc)\n-\t(if_then_else\n-\t  (match_operator:CCFP 0 \"ix86_swapped_fp_comparison_operator\"\n-\t    [(match_operator:X87MODEF 1 \"float_operator\"\n-\t      [(match_operand:SWI24 2 \"nonimmediate_operand\" \"m\")])\n-\t     (match_operand:X87MODEF 3 \"register_operand\" \"f\")])\n-\t  (label_ref (match_operand 4))\n-\t  (pc)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 5 \"=a\"))]\n-  \"TARGET_80387 && !TARGET_CMOVE\n-   && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n-       || optimize_function_for_size_p (cfun))\"\n-  \"#\")\n-\n-(define_split\n-  [(set (pc)\n-\t(if_then_else\n-\t  (match_operator:CCFP 0 \"ix86_swapped_fp_comparison_operator\"\n-\t    [(match_operator:X87MODEF 1 \"float_operator\"\n-\t      [(match_operand:SWI24 2 \"memory_operand\")])\n-\t     (match_operand:X87MODEF 3 \"register_operand\")])\n-\t  (match_operand 4)\n-\t  (match_operand 5)))\n-   (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:CCFP FLAGS_REG))\n-   (clobber (match_scratch:HI 6))]\n-  \"TARGET_80387 && !TARGET_CMOVE\n-   && reload_completed\"\n-  [(const_int 0)]\n-{\n-  ix86_split_fp_branch (swap_condition (GET_CODE (operands[0])), operands[3],\n-\t\t        gen_rtx_FLOAT (GET_MODE (operands[1]), operands[2]),\n-\t\t\toperands[4], operands[5], operands[6]);\n-  DONE;\n-})\n \f\n ;; Unconditional and other jump instructions\n "}, {"sha": "0917fad15d41ae55205965df691c6883b9ab3082", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -1387,19 +1387,6 @@\n                (match_operand 0 \"comparison_operator\")\n                (match_operand 0 \"ix86_trivial_fp_comparison_operator\")))\n \n-;; Same as above, but for swapped comparison used in *jcc<fp>_<int>_i387.\n-(define_predicate \"ix86_swapped_fp_comparison_operator\"\n-  (match_operand 0 \"comparison_operator\")\n-{\n-  enum rtx_code code = GET_CODE (op);\n-  bool ret;\n-\n-  PUT_CODE (op, swap_condition (code));\n-  ret = ix86_fp_comparison_operator (op, mode);\n-  PUT_CODE (op, code);\n-  return ret;\n-})\n-\n ;; Nearly general operand, but accept any const_double, since we wish\n ;; to be able to drop them into memory rather than have them get pulled\n ;; into registers.\n@@ -1423,10 +1410,6 @@\n (define_predicate \"plusminuslogic_operator\"\n   (match_code \"plus,minus,and,ior,xor\"))\n \n-;; Return true if this is a float extend operation.\n-(define_predicate \"float_operator\"\n-  (match_code \"float\"))\n-\n ;; Return true for ARITHMETIC_P.\n (define_predicate \"arith_or_logical_operator\"\n   (match_code \"plus,mult,and,ior,xor,smin,smax,umin,umax,compare,minus,div,"}, {"sha": "b85e93cafd0bde12bffca8d7d5ef423a34c397c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -1,3 +1,7 @@\n+2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/387-ficom-1.c: New test.\n+\n 2017-10-11  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/struct-layout-1_generate.c (generate_fields): Fix typo in"}, {"sha": "8c73ddcb2da1089a37d596a54f649c7745ecc177", "filename": "gcc/testsuite/gcc.target/i386/387-ficom-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42851ff81dbe1ccaa16dbcc070513c181ff61eb7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-1.c?ref=42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=i386\" } } */\n+/* { dg-options \"-O2 -march=i386 -ffast-math -masm=att\" } */\n+\n+extern short s;\n+\n+int test_f_s (short x)\n+{\n+  return (float)x > s;\n+}\n+\n+int test_d_s (short x)\n+{\n+  return (double)x < s;\n+}\n+\n+int test_ld_s (short x)\n+{\n+  return (long double)x == s;\n+}\n+\n+extern int i;\n+\n+int test_f_i (int x)\n+{\n+  return (float)i >= x;\n+}\n+\n+int test_d_i (int x)\n+{\n+  return (double)i <= x;\n+}\n+\n+int test_ld_i (int x)\n+{\n+  return (long double)i != x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ficomps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ficompl\" 3 } } */"}]}