{"sha": "ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlZjhjZTRiNDNhMzZhNzVlM2M3ZGY4YTg2OTY4NjZmYzM5OGE1Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-01T08:46:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-01T08:46:10Z"}, "message": "c-common.c (unsigned_conversion_warning, [...]): Use new hooks.\n\n\t* c-common.c (unsigned_conversion_warning, convert_and_check,\n\tunsigned_type, signed_type, shorten_compare,\n\tc_common_get_alias_set, c_common_nodes_and_builtins): Use new hooks.\n\t(unsigned_type, signed_type, signed_or_unsigned_type): Rename.\n\t* c-common.h (unsigned_type, signed_type, signed_or_unsigned_type):\n\tNew.\n\t* c-decl.c (grokdeclarator): Update.\n\t* c-format.c (check_format_types): Update.\n\t* c-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\t* c-typeck.c (build_binary_op, convert_for_assignment): Update.\n\t* convert.c (convert_to_integer): Use new hooks.\n\t* expmed.c (make_tree): Use new hooks.\n\t* expr.c (store_expr): Use new hooks.\n\t* fold-const.c (operand_equal_for_comparison_p, build_range_check,\n\tall_ones_mask_p, unextend, fold): Use new hooks.\n\t* langhooks.h (struct lang_hooks_for_types): New hooks.\n\t* tree.h (signed_or_unsigned_type, signed_type,\n\tunsigned_type): Remove.\nada:\n\t* gigi.h (unsigned_type, signed_type, signed_or_unsigned_type):\n\tRename.\n\t* misc.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\t* trans.c (tree_transform, convert_with_check): Update.\n\t* utils.c (unsigned_type, signed_type, signed_or_unsigned_type):\n\tRename.\ncp:\n\t* cp-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\t* decl.c (grokdeclarator): Update.\n\t* mangle.c (write_integer_cst): Update.\n\t* typeck.c (build_binary_op): Update.\nf:\n\t* com.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\t(unsigned_type, signed_type, signed_or_unsigned_type): Rename.\njava:\n\t* expr.c (build_java_binop): Update.\n\t* java-tree.h (java_signed_type, java_unsigned_type,\n\tjava_signed_or_unsigned_type): Update.\n\t* lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\t* parse.y (patch_binop): Update.\n\t* typeck.c (signed_or_unsigned_type, unsigned_type,\n\tsigned_type): Update.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n\nFrom-SVN: r51684", "tree": {"sha": "a06146fa6279ee4373ef4b809f8c3aedca99fb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a06146fa6279ee4373ef4b809f8c3aedca99fb3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/comments", "author": null, "committer": null, "parents": [{"sha": "c7a39ea995852db80b150e9b24c68f56461aff6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a39ea995852db80b150e9b24c68f56461aff6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a39ea995852db80b150e9b24c68f56461aff6d"}], "stats": {"total": 410, "additions": 262, "deletions": 148}, "files": [{"sha": "ba1c60b723ba7d1e90f2f8718ae383c503939c03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1,3 +1,28 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (unsigned_conversion_warning, convert_and_check,\n+\tunsigned_type, signed_type, shorten_compare,\n+\tc_common_get_alias_set, c_common_nodes_and_builtins): Use new hooks.\n+\t(unsigned_type, signed_type, signed_or_unsigned_type): Rename.\n+\t* c-common.h (unsigned_type, signed_type, signed_or_unsigned_type):\n+\tNew.\n+\t* c-decl.c (grokdeclarator): Update.\n+\t* c-format.c (check_format_types): Update.\n+\t* c-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\t* c-typeck.c (build_binary_op, convert_for_assignment): Update.\n+\t* convert.c (convert_to_integer): Use new hooks.\n+\t* expmed.c (make_tree): Use new hooks.\n+\t* expr.c (store_expr): Use new hooks.\n+\t* fold-const.c (operand_equal_for_comparison_p, build_range_check,\n+\tall_ones_mask_p, unextend, fold): Use new hooks.\n+\t* langhooks.h (struct lang_hooks_for_types): New hooks.\n+\t* tree.h (signed_or_unsigned_type, signed_type,\n+\tunsigned_type): Remove.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\n 2002-03-31  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/unwind-ia64.c (alloc_spill_area): Fix offset."}, {"sha": "8e7367f6cb482e231e7588a4d9d305f124c2f171", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1,3 +1,13 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gigi.h (unsigned_type, signed_type, signed_or_unsigned_type):\n+\tRename.\n+\t* misc.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\t* trans.c (tree_transform, convert_with_check): Update.\n+\t* utils.c (unsigned_type, signed_type, signed_or_unsigned_type):\n+\tRename.\n+\n 2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gigi.h (finish_incomplete_decl): Rename."}, {"sha": "32fcaef7c41e11fbfa1b0ede979a7a9b192f52a0", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -430,14 +430,14 @@ extern tree gnat_type_for_size\t\tPARAMS ((unsigned, int));\n extern tree gnat_type_for_mode\t\tPARAMS ((enum machine_mode, int));\n \n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n-extern tree unsigned_type\t\tPARAMS ((tree));\n+extern tree gnat_unsigned_type\t\tPARAMS ((tree));\n \n /* Return the signed version of a TYPE_NODE, a scalar type.  */\n-extern tree signed_type\t\t\tPARAMS ((tree));\n+extern tree gnat_signed_type\t\tPARAMS ((tree));\n \n /* Return a type the same as TYPE except unsigned or signed according to\n    UNSIGNEDP.  */\n-extern tree signed_or_unsigned_type\tPARAMS ((int, tree));\n+extern tree gnat_signed_or_unsigned_type PARAMS ((int, tree));\n \n /* This routine is called in tree.c to print an error message for invalid use\n    of an incomplete type.  */"}, {"sha": "866afc3a0237f1ccad2880075049a999f1bd59b3", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -124,6 +124,12 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_TYPE_FOR_MODE\tgnat_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE\t\tgnat_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE\tgnat_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gnat_signed_or_unsigned_type\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "19c7b01bbf79ab7ae19d1ddc79c0f156f3a45fa2", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1348,7 +1348,7 @@ tree_transform (gnat_node)\n \t\t/* 'Length or 'Range_Length.  */\n \t\t{\n \t\t  tree gnu_compute_type\n-\t\t    = signed_or_unsigned_type\n+\t\t    = gnat_signed_or_unsigned_type\n \t\t      (0, get_base_type (gnu_result_type));\n \n \t\t  gnu_result\n@@ -1867,10 +1867,10 @@ tree_transform (gnat_node)\n \t   so we may need to choose a different type.  */\n \tif (Nkind (gnat_node) == N_Op_Shift_Right\n \t    && ! TREE_UNSIGNED (gnu_type))\n-\t  gnu_type = unsigned_type (gnu_type);\n+\t  gnu_type = gnat_unsigned_type (gnu_type);\n \telse if (Nkind (gnat_node) == N_Op_Shift_Right_Arithmetic\n \t\t && TREE_UNSIGNED (gnu_type))\n-\t  gnu_type = signed_type (gnu_type);\n+\t  gnu_type = gnat_signed_type (gnu_type);\n \n \tif (gnu_type != gnu_result_type)\n \t  {\n@@ -4674,17 +4674,17 @@ convert_with_check (gnat_type, gnu_expr, overflow_p, range_p, truncate_p)\n \t comparing them properly.  Likewise, convert the upper bounds\n \t to unsigned types.  */\n       if (INTEGRAL_TYPE_P (gnu_in_basetype) && TREE_UNSIGNED (gnu_in_basetype))\n-\tgnu_in_lb = convert (signed_type (gnu_in_basetype), gnu_in_lb);\n+\tgnu_in_lb = convert (gnat_signed_type (gnu_in_basetype), gnu_in_lb);\n \n       if (INTEGRAL_TYPE_P (gnu_in_basetype)\n \t  && ! TREE_UNSIGNED (gnu_in_basetype))\n-\tgnu_in_ub = convert (unsigned_type (gnu_in_basetype), gnu_in_ub);\n+\tgnu_in_ub = convert (gnat_unsigned_type (gnu_in_basetype), gnu_in_ub);\n \n       if (INTEGRAL_TYPE_P (gnu_base_type) && TREE_UNSIGNED (gnu_base_type))\n-\tgnu_out_lb = convert (signed_type (gnu_base_type), gnu_out_lb);\n+\tgnu_out_lb = convert (gnat_signed_type (gnu_base_type), gnu_out_lb);\n \n       if (INTEGRAL_TYPE_P (gnu_base_type) && ! TREE_UNSIGNED (gnu_base_type))\n-\tgnu_out_ub = convert (unsigned_type (gnu_base_type), gnu_out_ub);\n+\tgnu_out_ub = convert (gnat_unsigned_type (gnu_base_type), gnu_out_ub);\n \n       /* Check each bound separately and only if the result bound\n \t is tighter than the bound on the input type.  Note that all the"}, {"sha": "58b7af6445ae2ac23460b5d7920b2fabdf210134", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -2022,7 +2022,7 @@ gnat_type_for_mode (mode, unsignedp)\n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n \n tree\n-unsigned_type (type_node)\n+gnat_unsigned_type (type_node)\n      tree type_node;\n {\n   tree type = gnat_type_for_size (TYPE_PRECISION (type_node), 1);\n@@ -2046,7 +2046,7 @@ unsigned_type (type_node)\n /* Return the signed version of a TYPE_NODE, a scalar type.  */\n \n tree\n-signed_type (type_node)\n+gnat_signed_type (type_node)\n      tree type_node;\n {\n   tree type = gnat_type_for_size (TYPE_PRECISION (type_node), 0);\n@@ -2071,7 +2071,7 @@ signed_type (type_node)\n    UNSIGNEDP.  */\n \n tree\n-signed_or_unsigned_type (unsignedp, type)\n+gnat_signed_or_unsigned_type (unsignedp, type)\n      int unsignedp;\n      tree type;\n {"}, {"sha": "04cd3c462e8738e6430194e397f42d3afaa2e515", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -757,13 +757,15 @@ void\n unsigned_conversion_warning (result, operand)\n      tree result, operand;\n {\n+  tree type = TREE_TYPE (result);\n+\n   if (TREE_CODE (operand) == INTEGER_CST\n-      && TREE_CODE (TREE_TYPE (result)) == INTEGER_TYPE\n-      && TREE_UNSIGNED (TREE_TYPE (result))\n+      && TREE_CODE (type) == INTEGER_TYPE\n+      && TREE_UNSIGNED (type)\n       && skip_evaluation == 0\n-      && !int_fits_type_p (operand, TREE_TYPE (result)))\n+      && !int_fits_type_p (operand, type))\n     {\n-      if (!int_fits_type_p (operand, signed_type (TREE_TYPE (result))))\n+      if (!int_fits_type_p (operand, c_common_signed_type (type)))\n \t/* This detects cases like converting -129 or 256 to unsigned char.  */\n \twarning (\"large integer implicitly truncated to unsigned type\");\n       else if (warn_conversion)\n@@ -812,7 +814,8 @@ convert_and_check (type, expr)\n \t       don't warn unless pedantic.  */\n \t    if ((pedantic\n \t\t || TREE_UNSIGNED (type)\n-\t\t || ! constant_fits_type_p (expr, unsigned_type (type)))\n+\t\t || ! constant_fits_type_p (expr,\n+\t\t\t\t\t    c_common_unsigned_type (type)))\n \t        && skip_evaluation == 0)\n \t      warning (\"overflow in implicit constant conversion\");\n \t}\n@@ -1435,7 +1438,7 @@ c_common_type_for_mode (mode, unsignedp)\n \n /* Return an unsigned type the same as TYPE in other respects.  */\n tree\n-unsigned_type (type)\n+c_common_unsigned_type (type)\n      tree type;\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);\n@@ -1464,13 +1467,13 @@ unsigned_type (type)\n   if (type1 == intQI_type_node)\n     return unsigned_intQI_type_node;\n \n-  return signed_or_unsigned_type (1, type);\n+  return c_common_signed_or_unsigned_type (1, type);\n }\n \n /* Return a signed type the same as TYPE in other respects.  */\n \n tree\n-signed_type (type)\n+c_common_signed_type (type)\n      tree type;\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);\n@@ -1499,14 +1502,14 @@ signed_type (type)\n   if (type1 == unsigned_intQI_type_node)\n     return intQI_type_node;\n \n-  return signed_or_unsigned_type (0, type);\n+  return c_common_signed_or_unsigned_type (0, type);\n }\n \n /* Return a type the same as TYPE except unsigned or\n    signed according to UNSIGNEDP.  */\n \n tree\n-signed_or_unsigned_type (unsignedp, type)\n+c_common_signed_or_unsigned_type (unsignedp, type)\n      int unsignedp;\n      tree type;\n {\n@@ -1755,7 +1758,8 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n       int unsignedp = TREE_UNSIGNED (*restype_ptr);\n       tree val;\n \n-      type = signed_or_unsigned_type (unsignedp0, TREE_TYPE (primop0));\n+      type = c_common_signed_or_unsigned_type (unsignedp0,\n+\t\t\t\t\t       TREE_TYPE (primop0));\n \n       /* If TYPE is an enumeration, then we need to get its min/max\n \t values from it's underlying integral type, not the enumerated\n@@ -1767,7 +1771,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n       minval = TYPE_MIN_VALUE (type);\n \n       if (unsignedp && !unsignedp0)\n-\t*restype_ptr = signed_type (*restype_ptr);\n+\t*restype_ptr = c_common_signed_type (*restype_ptr);\n \n       if (TREE_TYPE (primop1) != *restype_ptr)\n \tprimop1 = convert (*restype_ptr, primop1);\n@@ -1864,7 +1868,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t      default:\n \t\tbreak;\n \t      }\n-\t  type = unsigned_type (type);\n+\t  type = c_common_unsigned_type (type);\n \t}\n \n       if (!max_gt && !unsignedp0 && TREE_CODE (primop0) != INTEGER_CST)\n@@ -1916,15 +1920,19 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t   && TYPE_PRECISION (TREE_TYPE (primop1)) < TYPE_PRECISION (*restype_ptr))\n     {\n       type = common_type (TREE_TYPE (primop0), TREE_TYPE (primop1));\n-      type = signed_or_unsigned_type (unsignedp0\n-\t\t\t\t      || TREE_UNSIGNED (*restype_ptr),\n-\t\t\t\t      type);\n+      type = c_common_signed_or_unsigned_type (unsignedp0\n+\t\t\t\t\t       || TREE_UNSIGNED (*restype_ptr),\n+\t\t\t\t\t       type);\n       /* Make sure shorter operand is extended the right way\n \t to match the longer operand.  */\n-      primop0 = convert (signed_or_unsigned_type (unsignedp0, TREE_TYPE (primop0)),\n-\t\t\t primop0);\n-      primop1 = convert (signed_or_unsigned_type (unsignedp1, TREE_TYPE (primop1)),\n-\t\t\t primop1);\n+      primop0\n+\t= convert (c_common_signed_or_unsigned_type (unsignedp0,\n+\t\t\t\t\t\t     TREE_TYPE (primop0)),\n+\t\t   primop0);\n+      primop1\n+\t= convert (c_common_signed_or_unsigned_type (unsignedp1,\n+\t\t\t\t\t\t     TREE_TYPE (primop1)),\n+\t\t   primop1);\n     }\n   else\n     {\n@@ -1947,7 +1955,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t\t so suppress the warning.  */\n \t      if (extra_warnings && !in_system_header\n \t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n-\t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n+\t\t\t&& ! TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t     primop0))))\n \t\twarning (\"comparison of unsigned expression >= 0 is always true\");\n \t      value = boolean_true_node;\n@@ -1956,7 +1964,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t    case LT_EXPR:\n \t      if (extra_warnings && !in_system_header\n \t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n-\t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n+\t\t\t&& ! TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t\t     primop0))))\n \t\twarning (\"comparison of unsigned expression < 0 is always false\");\n \t      value = boolean_false_node;\n@@ -2365,7 +2373,7 @@ c_common_get_alias_set (t)\n      variant as canonical.  */\n   if (TREE_CODE (t) == INTEGER_TYPE && TREE_UNSIGNED (t))\n     {\n-      tree t1 = signed_type (t);\n+      tree t1 = c_common_signed_type (t);\n \n       /* t1 == t can happen for boolean nodes which are always unsigned.  */\n       if (t1 != t)\n@@ -2621,7 +2629,7 @@ c_common_nodes_and_builtins ()\n      and this must agree, even if long and int are the same size.  */\n   c_size_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (SIZE_TYPE)));\n-  signed_size_type_node = signed_type (c_size_type_node);\n+  signed_size_type_node = c_common_signed_type (c_size_type_node);\n   set_sizetype (c_size_type_node);\n \n   build_common_tree_nodes_2 (flag_short_double);\n@@ -2690,8 +2698,8 @@ c_common_nodes_and_builtins ()\n     }\n   else\n     {\n-      signed_wchar_type_node = signed_type (wchar_type_node);\n-      unsigned_wchar_type_node = unsigned_type (wchar_type_node);\n+      signed_wchar_type_node = c_common_signed_type (wchar_type_node);\n+      unsigned_wchar_type_node = c_common_unsigned_type (wchar_type_node);\n     }\n \n   /* This is for wide string constants.  */\n@@ -2709,7 +2717,7 @@ c_common_nodes_and_builtins ()\n   default_function_type = build_function_type (integer_type_node, NULL_TREE);\n   ptrdiff_type_node\n     = TREE_TYPE (identifier_global_value (get_identifier (PTRDIFF_TYPE)));\n-  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n+  unsigned_ptrdiff_type_node = c_common_unsigned_type (ptrdiff_type_node);\n \n   (*lang_hooks.decls.pushdecl)\n     (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),"}, {"sha": "5dde85a8ee3d81bddc40d2c30a091482b8731069", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -510,6 +510,9 @@ extern void c_common_insert_default_attributes\tPARAMS ((tree));\n extern tree c_common_type_for_mode\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t\t int));\n extern tree c_common_type_for_size\t\tPARAMS ((unsigned int, int));\n+extern tree c_common_unsigned_type\t\tPARAMS ((tree));\n+extern tree c_common_signed_type\t\tPARAMS ((tree));\n+extern tree c_common_signed_or_unsigned_type\tPARAMS ((int, tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_alignof\t\t\t\tPARAMS ((tree));"}, {"sha": "773beda78279767a442d73065bdaacfc686acaf7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -4160,7 +4160,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       else if (type == char_type_node)\n \ttype = unsigned_char_type_node;\n       else if (typedef_decl)\n-\ttype = unsigned_type (type);\n+\ttype = c_common_unsigned_type (type);\n       else\n \ttype = unsigned_type_node;\n     }\n@@ -4370,7 +4370,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  tree itype = NULL_TREE;\n \t  tree size = TREE_OPERAND (declarator, 1);\n \t  /* The index is a signed object `sizetype' bits wide.  */\n-\t  tree index_type = signed_type (sizetype);\n+\t  tree index_type = c_common_signed_type (sizetype);\n \n \t  array_ptr_quals = TREE_TYPE (declarator);\n \t  array_parm_static = TREE_STATIC (declarator);"}, {"sha": "c1211674cdcb8922b274ea5a92590a601b44e571", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -2386,8 +2386,8 @@ check_format_types (status, types)\n \t  && TREE_CODE (cur_type) == INTEGER_TYPE\n \t  && (! pedantic || i == 0 || (i == 1 && char_type_flag))\n \t  && (TREE_UNSIGNED (wanted_type)\n-\t      ? wanted_type == unsigned_type (cur_type)\n-\t      : wanted_type == signed_type (cur_type)))\n+\t      ? wanted_type == c_common_unsigned_type (cur_type)\n+\t      : wanted_type == c_common_signed_type (cur_type)))\n \tcontinue;\n       /* Likewise, \"signed char\", \"unsigned char\" and \"char\" are\n \t equivalent but the above test won't consider them equivalent.  */"}, {"sha": "735017b1fa7e094e29b484f973a2b6a2996c2a51", "filename": "gcc/c-lang.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -88,6 +88,12 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n "}, {"sha": "2c7a89a83a91f978646efe444e0f1d4f900a886d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -2385,22 +2385,24 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      && unsigned0 == unsigned1\n \t      && (unsigned0 || !uns))\n \t    result_type\n-\t      = signed_or_unsigned_type (unsigned0,\n-\t\t\t\t\t common_type (TREE_TYPE (arg0), TREE_TYPE (arg1)));\n+\t      = c_common_signed_or_unsigned_type\n+\t      (unsigned0, common_type (TREE_TYPE (arg0), TREE_TYPE (arg1)));\n \t  else if (TREE_CODE (arg0) == INTEGER_CST\n \t\t   && (unsigned1 || !uns)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (arg1))\n \t\t       < TYPE_PRECISION (result_type))\n-\t\t   && (type = signed_or_unsigned_type (unsigned1,\n-\t\t\t\t\t\t       TREE_TYPE (arg1)),\n+\t\t   && (type\n+\t\t       = c_common_signed_or_unsigned_type (unsigned1,\n+\t\t\t\t\t\t\t   TREE_TYPE (arg1)),\n \t\t       int_fits_type_p (arg0, type)))\n \t    result_type = type;\n \t  else if (TREE_CODE (arg1) == INTEGER_CST\n \t\t   && (unsigned0 || !uns)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (arg0))\n \t\t       < TYPE_PRECISION (result_type))\n-\t\t   && (type = signed_or_unsigned_type (unsigned0,\n-\t\t\t\t\t\t       TREE_TYPE (arg0)),\n+\t\t   && (type\n+\t\t       = c_common_signed_or_unsigned_type (unsigned0,\n+\t\t\t\t\t\t\t   TREE_TYPE (arg0)),\n \t\t       int_fits_type_p (arg1, type)))\n \t    result_type = type;\n \t}\n@@ -2426,7 +2428,8 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    {\n \t      /* Do an unsigned shift if the operand was zero-extended.  */\n \t      result_type\n-\t\t= signed_or_unsigned_type (unsigned_arg, TREE_TYPE (arg0));\n+\t\t= c_common_signed_or_unsigned_type (unsigned_arg,\n+\t\t\t\t\t\t    TREE_TYPE (arg0));\n \t      /* Convert value-to-be-shifted to that type.  */\n \t      if (TREE_TYPE (op0) != result_type)\n \t\top0 = convert (result_type, op0);\n@@ -2504,15 +2507,17 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t     would fit in the result if the result were signed.  */\n \t\t  else if (TREE_CODE (uop) == INTEGER_CST\n \t\t\t   && (resultcode == EQ_EXPR || resultcode == NE_EXPR)\n-\t\t\t   && int_fits_type_p (uop, signed_type (result_type)))\n+\t\t\t   && int_fits_type_p\n+\t\t\t   (uop, c_common_signed_type (result_type)))\n \t\t    /* OK */;\n \t\t  /* Do not warn if the unsigned quantity is an enumeration\n \t\t     constant and its maximum value would fit in the result\n \t\t     if the result were signed.  */\n \t\t  else if (TREE_CODE (uop) == INTEGER_CST\n \t\t\t   && TREE_CODE (TREE_TYPE (uop)) == ENUMERAL_TYPE\n-\t\t\t   && int_fits_type_p (TYPE_MAX_VALUE (TREE_TYPE(uop)),\n-\t\t\t\t\t       signed_type (result_type)))\n+\t\t\t   && int_fits_type_p\n+\t\t\t   (TYPE_MAX_VALUE (TREE_TYPE(uop)),\n+\t\t\t    c_common_signed_type (result_type)))\n \t\t    /* OK */;\n \t\t  else\n \t\t    warning (\"comparison between signed and unsigned\");\n@@ -4161,8 +4166,8 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n \t Meanwhile, the lhs target must have all the qualifiers of the rhs.  */\n       if (VOID_TYPE_P (ttl) || VOID_TYPE_P (ttr)\n \t  || comp_target_types (type, rhstype)\n-\t  || (unsigned_type (TYPE_MAIN_VARIANT (ttl))\n-\t      == unsigned_type (TYPE_MAIN_VARIANT (ttr))))\n+\t  || (c_common_unsigned_type (TYPE_MAIN_VARIANT (ttl))\n+\t      == c_common_unsigned_type (TYPE_MAIN_VARIANT (ttr))))\n \t{\n \t  if (pedantic\n \t      && ((VOID_TYPE_P (ttl) && TREE_CODE (ttr) == FUNCTION_TYPE)"}, {"sha": "970b05cd37476845e6f7ec5f62399a0ffff26e33", "filename": "gcc/convert.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -316,10 +316,12 @@ convert_to_integer (type, expr)\n \t\t       unsigned then can safely do the work as unsigned.\n \t\t       And we may need to do it as unsigned\n \t\t       if we truncate to the original size.  */\n-\t\t    typex = ((TREE_UNSIGNED (TREE_TYPE (expr))\n-\t\t\t      || (TREE_UNSIGNED (TREE_TYPE (arg0))\n-\t\t\t\t  && TREE_UNSIGNED (TREE_TYPE (arg1))))\n-\t\t\t     ? unsigned_type (typex) : signed_type (typex));\n+\t\t    if (TREE_UNSIGNED (TREE_TYPE (expr))\n+\t\t\t|| (TREE_UNSIGNED (TREE_TYPE (arg0))\n+\t\t\t    && TREE_UNSIGNED (TREE_TYPE (arg1))))\n+\t\t      typex = (*lang_hooks.types.unsigned_type) (typex);\n+\t\t    else\n+\t\t      typex = (*lang_hooks.types.signed_type) (typex);\n \t\t    return convert (type,\n \t\t\t\t    fold (build (ex_form, typex,\n \t\t\t\t\t\t convert (typex, arg0),\n@@ -350,8 +352,10 @@ convert_to_integer (type, expr)\n \t      {\n \t\t/* Don't do unsigned arithmetic where signed was wanted,\n \t\t   or vice versa.  */\n-\t\ttypex = (TREE_UNSIGNED (TREE_TYPE (expr))\n-\t\t\t ? unsigned_type (typex) : signed_type (typex));\n+\t\tif (TREE_UNSIGNED (TREE_TYPE (expr)))\n+\t\t  typex = (*lang_hooks.types.unsigned_type) (typex);\n+\t\telse\n+\t\t  typex = (*lang_hooks.types.signed_type) (typex);\n \t\treturn convert (type,\n \t\t\t\tfold (build1 (ex_form, typex,\n \t\t\t\t\t      convert (typex,"}, {"sha": "024176e8e4faf568e1b3680ea40c0bf18dbd21bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1,3 +1,11 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\t* decl.c (grokdeclarator): Update.\n+\t* mangle.c (write_integer_cst): Update.\n+\t* typeck.c (build_binary_op): Update.\n+\n 2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine."}, {"sha": "b330fd1021ca43dccf1551e359aeed98abb14eee", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -119,6 +119,12 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "e708a6de197981f5aae49728bddc047d4b58ec0c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -10325,7 +10325,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       else if (type == char_type_node)\n \ttype = unsigned_char_type_node;\n       else if (typedef_decl)\n-\ttype = unsigned_type (type);\n+\ttype = c_common_unsigned_type (type);\n       else\n \ttype = unsigned_type_node;\n     }"}, {"sha": "88461e20bff1f8c5e667e939b740c36832141864", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1111,7 +1111,7 @@ write_integer_cst (cst)\n \t  chunk *= chunk;\n \t}\n       \n-      type = signed_or_unsigned_type (1, TREE_TYPE (cst));\n+      type = c_common_signed_or_unsigned_type (1, TREE_TYPE (cst));\n       base = build_int_2 (chunk, 0);\n       n = build_int_2 (TREE_INT_CST_LOW (cst), TREE_INT_CST_HIGH (cst));\n       TREE_TYPE (n) = TREE_TYPE (base) = type;"}, {"sha": "a68f4a2110a2bfba6aff950ff0506fb19b7ca859", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -3782,24 +3782,22 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t  == TYPE_PRECISION (TREE_TYPE (arg0)))\n \t      && unsigned0 == unsigned1\n \t      && (unsigned0 || !uns))\n-\t    result_type\n-\t      = signed_or_unsigned_type (unsigned0,\n-\t\t\t\t\t common_type (TREE_TYPE (arg0),\n-\t\t\t\t\t\t      TREE_TYPE (arg1)));\n+\t    result_type = c_common_signed_or_unsigned_type\n+\t      (unsigned0, common_type (TREE_TYPE (arg0), TREE_TYPE (arg1)));\n \t  else if (TREE_CODE (arg0) == INTEGER_CST\n \t\t   && (unsigned1 || !uns)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (arg1))\n \t\t       < TYPE_PRECISION (result_type))\n-\t\t   && (type = signed_or_unsigned_type (unsigned1,\n-\t\t\t\t\t\t       TREE_TYPE (arg1)),\n+\t\t   && (type = c_common_signed_or_unsigned_type\n+\t\t       (unsigned1, TREE_TYPE (arg1)),\n \t\t       int_fits_type_p (arg0, type)))\n \t    result_type = type;\n \t  else if (TREE_CODE (arg1) == INTEGER_CST\n \t\t   && (unsigned0 || !uns)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (arg0))\n \t\t       < TYPE_PRECISION (result_type))\n-\t\t   && (type = signed_or_unsigned_type (unsigned0,\n-\t\t\t\t\t\t       TREE_TYPE (arg0)),\n+\t\t   && (type = c_common_signed_or_unsigned_type\n+\t\t       (unsigned0, TREE_TYPE (arg0)),\n \t\t       int_fits_type_p (arg1, type)))\n \t    result_type = type;\n \t}\n@@ -3834,8 +3832,8 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    {\n \t      /* Do an unsigned shift if the operand was zero-extended.  */\n \t      result_type\n-\t\t= signed_or_unsigned_type (unsigned_arg,\n-\t\t\t\t\t   TREE_TYPE (arg0));\n+\t\t= c_common_signed_or_unsigned_type (unsigned_arg,\n+\t\t\t\t\t\t    TREE_TYPE (arg0));\n \t      /* Convert value-to-be-shifted to that type.  */\n \t      if (TREE_TYPE (op0) != result_type)\n \t\top0 = cp_convert (result_type, op0);\n@@ -3908,11 +3906,11 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t     not use the most significant bit of result_type.  */\n \t  else if ((resultcode == EQ_EXPR || resultcode == NE_EXPR)\n \t\t   && ((op0_signed && TREE_CODE (orig_op1) == INTEGER_CST\n-\t\t\t&& int_fits_type_p (orig_op1,\n-\t\t\t\t\t    signed_type (result_type)))\n+\t\t\t&& int_fits_type_p (orig_op1, c_common_signed_type\n+\t\t\t\t\t    (result_type)))\n \t\t\t|| (op1_signed && TREE_CODE (orig_op0) == INTEGER_CST\n-\t\t\t    && int_fits_type_p (orig_op0,\n-\t\t\t\t\t\tsigned_type (result_type)))))\n+\t\t\t    && int_fits_type_p (orig_op0, c_common_signed_type\n+\t\t\t\t\t\t(result_type)))))\n \t    /* OK */;\n \t  else\n \t    warning (\"comparison between signed and unsigned integer expressions\");"}, {"sha": "76b90fa2b437f33c765cc3866574511f66392150", "filename": "gcc/expmed.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -4108,21 +4108,22 @@ make_tree (type, x)\n \t\t\t  make_tree (type, XEXP (x, 1))));\n \n     case LSHIFTRT:\n+      t = (*lang_hooks.types.unsigned_type) (type);\n       return fold (convert (type,\n-\t\t\t    build (RSHIFT_EXPR, unsigned_type (type),\n-\t\t\t\t   make_tree (unsigned_type (type),\n-\t\t\t\t\t      XEXP (x, 0)),\n+\t\t\t    build (RSHIFT_EXPR, t,\n+\t\t\t\t   make_tree (t, XEXP (x, 0)),\n \t\t\t\t   make_tree (type, XEXP (x, 1)))));\n \n     case ASHIFTRT:\n+      t = (*lang_hooks.types.signed_type) (type);\n       return fold (convert (type,\n-\t\t\t    build (RSHIFT_EXPR, signed_type (type),\n-\t\t\t\t   make_tree (signed_type (type), XEXP (x, 0)),\n+\t\t\t    build (RSHIFT_EXPR, t,\n+\t\t\t\t   make_tree (t, XEXP (x, 0)),\n \t\t\t\t   make_tree (type, XEXP (x, 1)))));\n \n     case DIV:\n       if (TREE_CODE (type) != REAL_TYPE)\n-\tt = signed_type (type);\n+\tt = (*lang_hooks.types.signed_type) (type);\n       else\n \tt = type;\n \n@@ -4131,7 +4132,7 @@ make_tree (type, x)\n \t\t\t\t   make_tree (t, XEXP (x, 0)),\n \t\t\t\t   make_tree (t, XEXP (x, 1)))));\n     case UDIV:\n-      t = unsigned_type (type);\n+      t = (*lang_hooks.types.unsigned_type) (type);\n       return fold (convert (type,\n \t\t\t    build (TRUNC_DIV_EXPR, t,\n \t\t\t\t   make_tree (t, XEXP (x, 0)),"}, {"sha": "cbbcff1a08b86b51c80b38d0ee041da243dc6a40", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -4021,11 +4021,9 @@ store_expr (exp, target, want_value)\n \t{\n \t  if (TREE_UNSIGNED (TREE_TYPE (exp))\n \t      != SUBREG_PROMOTED_UNSIGNED_P (target))\n-\t    exp\n-\t      = convert\n-\t\t(signed_or_unsigned_type (SUBREG_PROMOTED_UNSIGNED_P (target),\n-\t\t\t\t\t  TREE_TYPE (exp)),\n-\t\t exp);\n+\t    exp = convert\n+\t      ((*lang_hooks.types.signed_or_unsigned_type)\n+\t       (SUBREG_PROMOTED_UNSIGNED_P (target), TREE_TYPE (exp)), exp);\n \n \t  exp = convert ((*lang_hooks.types.type_for_mode)\n \t\t\t (GET_MODE (SUBREG_REG (target)),"}, {"sha": "2f0318caf5f4d1b9c6660ec8b4cece934cec1714", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1,3 +1,9 @@\n+Mon Apr  1 09:59:53 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\t(unsigned_type, signed_type, signed_or_unsigned_type): Rename.\n+\n Sun Mar 31 23:50:22 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (lang_print_error_function): Rename."}, {"sha": "fed208c5263f566401d90209fe7328295c288ee4", "filename": "gcc/f/com.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -263,6 +263,9 @@ struct _ffecom_concat_list_\n \n static tree ffe_type_for_mode PARAMS ((enum machine_mode, int));\n static tree ffe_type_for_size PARAMS ((unsigned int, int));\n+static tree ffe_unsigned_type PARAMS ((tree));\n+static tree ffe_signed_type PARAMS ((tree));\n+static tree ffe_signed_or_unsigned_type PARAMS ((int, tree));\n static void ffecom_init_decl_processing PARAMS ((void));\n static tree ffecom_arglist_expr_ (const char *argstring, ffebld args);\n static tree ffecom_widest_expr_type_ (ffebld list);\n@@ -14230,10 +14233,17 @@ static void ffe_mark_tree (tree);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tffe_printable_name\n #undef  LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION ffe_print_error_function\n+\n #undef  LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE\tffe_type_for_mode\n #undef  LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE\tffe_type_for_size\n+#undef  LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE\t\tffe_signed_type\n+#undef  LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE\tffe_unsigned_type\n+#undef  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE ffe_signed_or_unsigned_type\n \n /* We do not wish to use alias-set based aliasing at all.  Used in the\n    extreme (every object with its own set, with equivalences recorded) it\n@@ -14745,8 +14755,8 @@ set_block (block)\n \t\t\t\t\t   BLOCK_SUBBLOCKS (block));\n }\n \n-tree\n-signed_or_unsigned_type (unsignedp, type)\n+static tree\n+ffe_signed_or_unsigned_type (unsignedp, type)\n      int unsignedp;\n      tree type;\n {\n@@ -14773,8 +14783,8 @@ signed_or_unsigned_type (unsignedp, type)\n   return type2;\n }\n \n-tree\n-signed_type (type)\n+static tree\n+ffe_signed_type (type)\n      tree type;\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);\n@@ -15093,8 +15103,8 @@ ffe_type_for_size (bits, unsignedp)\n   return 0;\n }\n \n-tree\n-unsigned_type (type)\n+static tree\n+ffe_unsigned_type (type)\n      tree type;\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);"}, {"sha": "26bdd668bd2800ba8b47e57944a8132533a42524", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1937,9 +1937,8 @@ operand_equal_for_comparison_p (arg0, arg1, other)\n \n       /* Make sure shorter operand is extended the right way\n \t to match the longer operand.  */\n-      primarg1 = convert (signed_or_unsigned_type (unsignedp1,\n-\t\t\t\t\t\t   TREE_TYPE (primarg1)),\n-\t\t\t  primarg1);\n+      primarg1 = convert ((*lang_hooks.types.signed_or_unsigned_type)\n+\t\t\t  (unsignedp1, TREE_TYPE (primarg1)), primarg1);\n \n       if (operand_equal_p (arg0, convert (type, primarg1), 0))\n \treturn 1;\n@@ -2622,7 +2621,7 @@ all_ones_mask_p (mask, size)\n   tree tmask;\n \n   tmask = build_int_2 (~0, ~0);\n-  TREE_TYPE (tmask) = signed_type (type);\n+  TREE_TYPE (tmask) = (*lang_hooks.types.signed_type) (type);\n   force_fit_type (tmask, 0);\n   return\n     tree_int_cst_equal (mask,\n@@ -3063,7 +3062,7 @@ build_range_check (type, exp, in_p, low, high)\n \n   else if (integer_zerop (low))\n     {\n-      utype = unsigned_type (etype);\n+      utype = (*lang_hooks.types.unsigned_type) (etype);\n       return build_range_check (type, convert (utype, exp), 1, 0,\n \t\t\t\tconvert (utype, high));\n     }\n@@ -3316,7 +3315,7 @@ unextend (c, p, unsignedp, mask)\n      zero or one, and the conversion to a signed type can never overflow.\n      We could get an overflow if this conversion is done anywhere else.  */\n   if (TREE_UNSIGNED (type))\n-    temp = convert (signed_type (type), temp);\n+    temp = convert ((*lang_hooks.types.signed_type) (type), temp);\n \n   temp = const_binop (LSHIFT_EXPR, temp, size_int (modesize - 1), 0);\n   temp = const_binop (RSHIFT_EXPR, temp, size_int (modesize - p - 1), 0);\n@@ -5939,7 +5938,7 @@ fold (expr)\n \t      || TREE_CODE (arg0) == ROUND_MOD_EXPR)\n \t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n \t{\n-\t  tree newtype = unsigned_type (TREE_TYPE (arg0));\n+\t  tree newtype = (*lang_hooks.types.unsigned_type) (TREE_TYPE (arg0));\n \t  tree newmod = build (TREE_CODE (arg0), newtype,\n \t\t\t       convert (newtype, TREE_OPERAND (arg0, 0)),\n \t\t\t       convert (newtype, TREE_OPERAND (arg0, 1)));\n@@ -6114,25 +6113,18 @@ fold (expr)\n \t\t     && TREE_UNSIGNED (TREE_TYPE (arg1))\n \t\t     /* signed_type does not work on pointer types.  */\n \t\t     && INTEGRAL_TYPE_P (TREE_TYPE (arg1)))\n-\t      switch (TREE_CODE (t))\n-\t\t{\n-\t\tcase LE_EXPR:\n-\t\t  return fold (build (GE_EXPR, type,\n-\t\t\t\t      convert (signed_type (TREE_TYPE (arg0)),\n-\t\t\t\t\t       arg0),\n-\t\t\t\t      convert (signed_type (TREE_TYPE (arg1)),\n-\t\t\t\t\t       integer_zero_node)));\n-\t\tcase GT_EXPR:\n-\t\t  return fold (build (LT_EXPR, type,\n-\t\t\t\t      convert (signed_type (TREE_TYPE (arg0)),\n-\t\t\t\t\t       arg0),\n-\t\t\t\t      convert (signed_type (TREE_TYPE (arg1)),\n-\t\t\t\t\t       integer_zero_node)));\n-\n-\t\tdefault:\n-\t\t  break;\n-\t\t}\n-\n+\t      {\n+\t\tif (TREE_CODE (t) == LE_EXPR || TREE_CODE (t) == GT_EXPR)\n+\t\t  {\n+\t\t    tree st0, st1;\n+\t\t    st0 = (*lang_hooks.types.signed_type) (TREE_TYPE (arg0));\n+\t\t    st1 = (*lang_hooks.types.signed_type) (TREE_TYPE (arg1));\n+\t\t    return fold\n+\t\t      (build (TREE_CODE (t) == LE_EXPR ? GE_EXPR: LT_EXPR,\n+\t\t\t      type, convert (st0, arg0),\n+\t\t\t      convert (st1, integer_zero_node)));\n+\t\t  }\n+\t      }\n             else if (TREE_INT_CST_HIGH (arg1) == 0\n \t\t     && (TREE_INT_CST_LOW (arg1)\n \t\t\t == ((unsigned HOST_WIDE_INT) 2 << (width - 1)) - 1)\n@@ -6506,14 +6498,16 @@ fold (expr)\n \t      case GE_EXPR:\n \t      case GT_EXPR:\n \t\tif (TREE_UNSIGNED (TREE_TYPE (arg1)))\n-\t\t  arg1 = convert (signed_type (TREE_TYPE (arg1)), arg1);\n+\t\t  arg1 = convert ((*lang_hooks.types.signed_type)\n+\t\t\t\t  (TREE_TYPE (arg1)), arg1);\n \t\treturn pedantic_non_lvalue\n \t\t  (convert (type, fold (build1 (ABS_EXPR,\n \t\t\t\t\t\tTREE_TYPE (arg1), arg1))));\n \t      case LE_EXPR:\n \t      case LT_EXPR:\n \t\tif (TREE_UNSIGNED (TREE_TYPE (arg1)))\n-\t\t  arg1 = convert (signed_type (TREE_TYPE (arg1)), arg1);\n+\t\t  arg1 = convert ((lang_hooks.types.signed_type)\n+\t\t\t\t  (TREE_TYPE (arg1)), arg1);\n \t\treturn pedantic_non_lvalue\n \t\t  (negate_expr (convert (type,\n \t\t\t\t\t fold (build1 (ABS_EXPR,"}, {"sha": "269bdc2c68aa85e92851ccec4e56666b08b26267", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1,3 +1,14 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c (build_java_binop): Update.\n+\t* java-tree.h (java_signed_type, java_unsigned_type,\n+\tjava_signed_or_unsigned_type): Update.\n+\t* lang.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): New.\n+\t* parse.y (patch_binop): Update.\n+\t* typeck.c (signed_or_unsigned_type, unsigned_type,\n+\tsigned_type): Update.\n+\n 2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* lang.c (LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine."}, {"sha": "a4ecfb077c8896db29d15f6e4b4bbf449bb9ba92", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1395,7 +1395,7 @@ build_java_binop (op, type, arg1, arg2)\n     {\n     case URSHIFT_EXPR:\n       {\n-\ttree u_type = unsigned_type (type);\n+\ttree u_type = java_unsigned_type (type);\n \targ1 = convert (u_type, arg1);\n \targ1 = build_java_binop (RSHIFT_EXPR, u_type, arg1, arg2);\n \treturn convert (type, arg1);"}, {"sha": "4a55281b2e8b9474694771d5284b9579d7fa12a9", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -1041,6 +1041,9 @@ extern void java_parse_file PARAMS ((void));\n extern void java_mark_tree PARAMS ((tree));\n extern tree java_type_for_mode PARAMS ((enum machine_mode, int));\n extern tree java_type_for_size PARAMS ((unsigned int, int));\n+extern tree java_unsigned_type PARAMS ((tree));\n+extern tree java_signed_type PARAMS ((tree));\n+extern tree java_signed_or_unsigned_type PARAMS ((int, tree));\n extern void add_assume_compiled PARAMS ((const char *, int));\n extern tree lookup_class PARAMS ((tree));\n extern tree lookup_java_constructor PARAMS ((tree, tree));"}, {"sha": "05b5cedf6243fdfe14ff02cd7a72596398e1a642", "filename": "gcc/java/lang.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -237,10 +237,17 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_DECL_PRINTABLE_NAME lang_printable_name\n #undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tjava_print_error_function\n+\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE java_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE java_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE java_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE java_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE java_signed_or_unsigned_type\n \n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "436cdf0f074871b554682b3f64160de86de226ba", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -13402,7 +13402,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n       if (code == URSHIFT_EXPR && ! flag_emit_class_files)\n \t{\n \t  tree to_return;\n-          tree utype = unsigned_type (prom_type);\n+          tree utype = java_unsigned_type (prom_type);\n           op1 = convert (utype, op1);\n \t  TREE_SET_CODE (node, RSHIFT_EXPR);\n           TREE_OPERAND (node, 0) = op1;"}, {"sha": "5afa5a45879eb5b9833943f6509c43af29869f8a", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -226,7 +226,7 @@ java_type_for_size (bits, unsignedp)\n    signed according to UNSIGNEDP.  */\n \n tree\n-signed_or_unsigned_type (unsignedp, type)\n+java_signed_or_unsigned_type (unsignedp, type)\n      int unsignedp;\n      tree type;\n {\n@@ -246,20 +246,19 @@ signed_or_unsigned_type (unsignedp, type)\n /* Return a signed type the same as TYPE in other respects.  */\n \n tree\n-signed_type (type)\n+java_signed_type (type)\n      tree type;\n {\n-  return signed_or_unsigned_type (0, type);\n+  return java_signed_or_unsigned_type (0, type);\n }\n \n /* Return an unsigned type the same as TYPE in other respects.  */\n \n tree\n-unsigned_type (type)\n+java_unsigned_type (type)\n      tree type;\n {\n-  return signed_or_unsigned_type (1, type);\n-\n+  return java_signed_or_unsigned_type (1, type);\n }\n \n /* Mark EXP saying that we need to be able to take the"}, {"sha": "8e3ac96c0ea283d8af614fd8d46fd4b06346528a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -160,7 +160,10 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n-  LANG_HOOKS_TYPE_FOR_SIZE \\\n+  LANG_HOOKS_TYPE_FOR_SIZE, \\\n+  LANG_HOOKS_UNSIGNED_TYPE, \\\n+  LANG_HOOKS_SIGNED_TYPE, \\\n+  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "c3e5a39a1f01d38b15801d3548463a28e18dc191", "filename": "gcc/langhooks.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -84,6 +84,18 @@ struct lang_hooks_for_types\n   /* Given PRECISION and UNSIGNEDP, return a suitable type-tree for an\n      integer type with at least that precision.  */\n   tree (*type_for_size) PARAMS ((unsigned, int));\n+\n+  /* Given an integer type T, return a type like T but unsigned.\n+     If T is unsigned, the value is T.  */\n+  tree (*unsigned_type) PARAMS ((tree));\n+\n+  /* Given an integer type T, return a type like T but signed.\n+     If T is signed, the value is T.  */\n+  tree (*signed_type) PARAMS ((tree));\n+\n+  /* Return a type the same as TYPE except unsigned or signed\n+     according to UNSIGNEDP.  */\n+  tree (*signed_or_unsigned_type) PARAMS ((int, tree));\n };\n \n /* Language hooks related to decls and the symbol table.  */"}, {"sha": "322a66e32506bbcc6bcc8e1c935e768d8c4fd408", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -84,6 +84,12 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "8abda682bdc3cedee0ce2aaffcc9b9b66854d05f", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceef8ce4b43a36a75e3c7df8a8696866fc398a56/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ceef8ce4b43a36a75e3c7df8a8696866fc398a56", "patch": "@@ -2125,7 +2125,6 @@ extern tree make_signed_type\t\tPARAMS ((int));\n extern tree make_unsigned_type\t\tPARAMS ((int));\n extern void initialize_sizetypes\tPARAMS ((void));\n extern void set_sizetype\t\tPARAMS ((tree));\n-extern tree signed_or_unsigned_type \tPARAMS ((int, tree));\n extern void fixup_unsigned_type\t\tPARAMS ((tree));\n extern tree build_pointer_type\t\tPARAMS ((tree));\n extern tree build_reference_type \tPARAMS ((tree));\n@@ -2607,20 +2606,6 @@ extern tree get_unwidened\t\tPARAMS ((tree, tree));\n \n extern tree get_narrower\t\tPARAMS ((tree, int *));\n \n-/* Given an integer type T, return a type like T but unsigned.\n-   If T is unsigned, the value is T.\n-   The definition of this resides in language-specific code\n-   as the repertoire of available types may vary.  */\n-\n-extern tree unsigned_type\t\tPARAMS ((tree));\n-\n-/* Given an integer type T, return a type like T but signed.\n-   If T is signed, the value is T.\n-   The definition of this resides in language-specific code\n-   as the repertoire of available types may vary.  */\n-\n-extern tree signed_type\t\t\tPARAMS ((tree));\n-\n /* Given an expression EXP that may be a COMPONENT_REF or an ARRAY_REF,\n    look for nested component-refs or array-refs at constant positions\n    and find the ultimate containing object, which is returned.  */"}]}