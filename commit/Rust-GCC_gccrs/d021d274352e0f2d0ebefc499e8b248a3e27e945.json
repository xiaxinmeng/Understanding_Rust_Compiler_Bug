{"sha": "d021d274352e0f2d0ebefc499e8b248a3e27e945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyMWQyNzQzNTJlMGYyZDBlYmVmYzQ5OWU4YjI0OGEzZTI3ZTk0NQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2009-05-22T21:51:12Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2009-05-22T21:51:12Z"}, "message": "Fix PR tree-optimization/40219\n\nFrom-SVN: r147807", "tree": {"sha": "7d1b770e8c2ec2cbb8b2b5cf10cafc4692857c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1b770e8c2ec2cbb8b2b5cf10cafc4692857c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d021d274352e0f2d0ebefc499e8b248a3e27e945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d021d274352e0f2d0ebefc499e8b248a3e27e945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d021d274352e0f2d0ebefc499e8b248a3e27e945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d021d274352e0f2d0ebefc499e8b248a3e27e945/comments", "author": null, "committer": null, "parents": [{"sha": "4d7a65ea616c964b6797710e6bad610598d55df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7a65ea616c964b6797710e6bad610598d55df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7a65ea616c964b6797710e6bad610598d55df6"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "68cbe584ade3717b4061664198b7a92e07c21682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d021d274352e0f2d0ebefc499e8b248a3e27e945/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d021d274352e0f2d0ebefc499e8b248a3e27e945/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d021d274352e0f2d0ebefc499e8b248a3e27e945", "patch": "@@ -1,3 +1,10 @@\n+2009-05-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/40219\n+\t* tree.c (iterative_hash_expr): Make sure the builtin function is\n+\ta normal builtin function and not a front end or back end builtin\n+\tbefore indexing into the built_in_decls array.\n+\n 2009-05-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38964"}, {"sha": "f0e861cb5cd8f4e1be54e61e3ef461e0372aa07c", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d021d274352e0f2d0ebefc499e8b248a3e27e945/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d021d274352e0f2d0ebefc499e8b248a3e27e945/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d021d274352e0f2d0ebefc499e8b248a3e27e945", "patch": "@@ -5422,11 +5422,13 @@ iterative_hash_expr (const_tree t, hashval_t val)\n \treturn val;\n       }\n     case FUNCTION_DECL:\n-      /* When referring to a built-in FUNCTION_DECL, use the\n-\t __builtin__ form.  Otherwise nodes that compare equal\n-\t according to operand_equal_p might get different\n-\t hash codes.  */\n-      if (DECL_BUILT_IN (t) && built_in_decls[DECL_FUNCTION_CODE (t)])\n+      /* When referring to a built-in FUNCTION_DECL, use the __builtin__ form.\n+\t Otherwise nodes that compare equal according to operand_equal_p might\n+\t get different hash codes.  However, don't do this for machine specific\n+\t or front end builtins, since the function code is overloaded in those\n+\t cases.  */\n+      if (DECL_BUILT_IN_CLASS (t) == BUILT_IN_NORMAL\n+\t  && built_in_decls[DECL_FUNCTION_CODE (t)])\n \t{\n \t  t = built_in_decls[DECL_FUNCTION_CODE (t)];\n \t  code = TREE_CODE (t);"}]}