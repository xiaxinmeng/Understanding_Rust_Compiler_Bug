{"sha": "897eef7b83ea48d36bb18d1aef280bd90a2adc84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3ZWVmN2I4M2VhNDhkMzZiYjE4ZDFhZWYyODBiZDkwYTJhZGM4NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-29T16:40:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-29T16:40:07Z"}, "message": "extend.texi (Additional Floating Types): __float128 is also supported on i386 targets.\n\n\t* doc/extend.texi (Additional Floating Types): __float128 is also\n\tsupported on i386 targets.\n\nFrom-SVN: r149054", "tree": {"sha": "b6a6393ce82a2f70c2d3f9e970704eec5ccffc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6a6393ce82a2f70c2d3f9e970704eec5ccffc0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/897eef7b83ea48d36bb18d1aef280bd90a2adc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897eef7b83ea48d36bb18d1aef280bd90a2adc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897eef7b83ea48d36bb18d1aef280bd90a2adc84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897eef7b83ea48d36bb18d1aef280bd90a2adc84/comments", "author": null, "committer": null, "parents": [{"sha": "74d27244ecfc02a14355efc26855034a684daeb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d27244ecfc02a14355efc26855034a684daeb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d27244ecfc02a14355efc26855034a684daeb9"}], "stats": {"total": 147, "additions": 74, "deletions": 73}, "files": [{"sha": "10963da5780e03d7d46b9fbdacf17627ea06e301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 73, "deletions": 71, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897eef7b83ea48d36bb18d1aef280bd90a2adc84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897eef7b83ea48d36bb18d1aef280bd90a2adc84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=897eef7b83ea48d36bb18d1aef280bd90a2adc84", "patch": "@@ -1,3 +1,8 @@\n+2009-06-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* doc/extend.texi (Additional Floating Types): __float128 is also\n+\tsupported on i386 targets.\n+\n 2009-06-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/14187\n@@ -84,83 +89,83 @@\n \n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * config/i386/i386.h (enum ix86_fpcmp_strategy): New.\n-        * config/i386/i386.md (cbranchxf4, cstorexf4, cbranch<MODEF>4,\n-        cstore<MODEF>4, mov<X87MODEF>cc): Change predicate to\n-        ix86_fp_comparison_operator.\n-        (*fp_jcc_1_mixed, *fp_jcc_1_sse, *fp_jcc_1_387, *fp_jcc_2_mixed,\n-        *fp_jcc_2_sse, *fp_jcc_2_387): Delete\n-        (*fp_jcc_3_387, *fp_jcc_4_387, *fp_jcc_5_387, *fp_jcc_6_387,\n-        *fp_jcc_7_387, *fp_jcc_8<MODEF>_387): Eliminate call to\n-        !ix86_use_fcomi_compare, change ix86_fp_jump_nontrivial_p call\n-        to !TARGET_CMOVE, change predicate to ix86_fp_comparison_operator.\n-        (related splits): Change predicate to ix86_fp_comparison_operator.\n-        * config/i386/predicates.md: Use ix86_trivial_fp_comparison_operator\n-        instead of ix86_fp_comparison_codes.\n-        (ix86_trivial_fp_comparison_operator,\n-        ix86_fp_comparison_operator): New.\n-        * config/i386/i386-protos.h (ix86_fp_comparison_strategy): New.\n-        (ix86_expand_compare): Eliminate last two parameters.\n-        (ix86_fp_jump_nontrivial_p): Kill.\n-        * config/i386/i386.c (put_condition_code): Eliminate call to\n-        ix86_fp_comparison_codes and subsequent assertion.\n-        (ix86_fp_comparison_codes): Eliminate.\n-        (ix86_fp_swap_condition): New.\n-        (ix86_fp_comparison_arithmetics_cost, ix86_fp_comparison_fcomi_cost,\n-        ix86_fp_comparison_sahf_cost, ix86_use_fcomi_compare): Consolidate\n-        into ix86_fp_comparison_cost and ix86_fp_comparison_strategy.\n-        (ix86_prepare_fp_compare_args): Use ix86_fp_comparison_strategy\n-        and ix86_fp_swap_condition.\n-        (ix86_expand_fp_compare): Eliminate code for second jump/bypass jump.\n-        Use ix86_fp_comparison_strategy.\n-        (ix86_expand_compare): Likewise.  Eliminate last two arguments.\n-        (ix86_fp_jump_nontrivial_p): Eliminate.\n-        (ix86_expand_branch): Treat SFmode/DFmode/XFmode as simple.  Adjust\n-        call to ix86_expand_compare.\n-        (ix86_split_fp_branch, ix86_expand_setcc,\n-        ix86_expand_carry_flag_compare, ix86_expand_int_movcc,\n-        ix86_expand_fp_movcc): Eliminate code for second jump/bypass jump.\n+\t* config/i386/i386.h (enum ix86_fpcmp_strategy): New.\n+\t* config/i386/i386.md (cbranchxf4, cstorexf4, cbranch<MODEF>4,\n+\tcstore<MODEF>4, mov<X87MODEF>cc): Change predicate to\n+\tix86_fp_comparison_operator.\n+\t(*fp_jcc_1_mixed, *fp_jcc_1_sse, *fp_jcc_1_387, *fp_jcc_2_mixed,\n+\t*fp_jcc_2_sse, *fp_jcc_2_387): Delete\n+\t(*fp_jcc_3_387, *fp_jcc_4_387, *fp_jcc_5_387, *fp_jcc_6_387,\n+\t*fp_jcc_7_387, *fp_jcc_8<MODEF>_387): Eliminate call to\n+\t!ix86_use_fcomi_compare, change ix86_fp_jump_nontrivial_p call\n+\tto !TARGET_CMOVE, change predicate to ix86_fp_comparison_operator.\n+\t(related splits): Change predicate to ix86_fp_comparison_operator.\n+\t* config/i386/predicates.md: Use ix86_trivial_fp_comparison_operator\n+\tinstead of ix86_fp_comparison_codes.\n+\t(ix86_trivial_fp_comparison_operator,\n+\tix86_fp_comparison_operator): New.\n+\t* config/i386/i386-protos.h (ix86_fp_comparison_strategy): New.\n+\t(ix86_expand_compare): Eliminate last two parameters.\n+\t(ix86_fp_jump_nontrivial_p): Kill.\n+\t* config/i386/i386.c (put_condition_code): Eliminate call to\n+\tix86_fp_comparison_codes and subsequent assertion.\n+\t(ix86_fp_comparison_codes): Eliminate.\n+\t(ix86_fp_swap_condition): New.\n+\t(ix86_fp_comparison_arithmetics_cost, ix86_fp_comparison_fcomi_cost,\n+\tix86_fp_comparison_sahf_cost, ix86_use_fcomi_compare): Consolidate\n+\tinto ix86_fp_comparison_cost and ix86_fp_comparison_strategy.\n+\t(ix86_prepare_fp_compare_args): Use ix86_fp_comparison_strategy\n+\tand ix86_fp_swap_condition.\n+\t(ix86_expand_fp_compare): Eliminate code for second jump/bypass jump.\n+\tUse ix86_fp_comparison_strategy.\n+\t(ix86_expand_compare): Likewise.  Eliminate last two arguments.\n+\t(ix86_fp_jump_nontrivial_p): Eliminate.\n+\t(ix86_expand_branch): Treat SFmode/DFmode/XFmode as simple.  Adjust\n+\tcall to ix86_expand_compare.\n+\t(ix86_split_fp_branch, ix86_expand_setcc,\n+\tix86_expand_carry_flag_compare, ix86_expand_int_movcc,\n+\tix86_expand_fp_movcc): Eliminate code for second jump/bypass jump.\n \n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * config/arm/arm.c (arm_final_prescan_ins): Eliminate code\n-        related to jump_clobbers.\n-        * config/arm/arm.md (conds): Remove jump_clob case.\n-        (addsi3_cbranch, addsi3_cbranch_scratch, subsi3_cbranch, two\n-        splits): Change comparison_operator to arm_comparison_operator.\n-        (*arm_buneq, *arm_bltgt, *arm_buneq_reversed, *arm_bltgt_reversed):\n-        Eliminate.\n+\t* config/arm/arm.c (arm_final_prescan_ins): Eliminate code\n+\trelated to jump_clobbers.\n+\t* config/arm/arm.md (conds): Remove jump_clob case.\n+\t(addsi3_cbranch, addsi3_cbranch_scratch, subsi3_cbranch, two\n+\tsplits): Change comparison_operator to arm_comparison_operator.\n+\t(*arm_buneq, *arm_bltgt, *arm_buneq_reversed, *arm_bltgt_reversed):\n+\tEliminate.\n \n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * dojump.c (do_compare_rtx_and_jump): Try swapping the\n-        condition for floating point modes.\n-        * expmed.c (emit_store_flag_1): Move here a bigger part\n-        of emit_store_flag.\n-        (emit_store_flag): Try swapping the condition for floating point\n-        modes.\n-        * optabs.c (emit_cmp_and_jump_insns): Cope with constant op0 better.\n+\t* dojump.c (do_compare_rtx_and_jump): Try swapping the\n+\tcondition for floating point modes.\n+\t* expmed.c (emit_store_flag_1): Move here a bigger part\n+\tof emit_store_flag.\n+\t(emit_store_flag): Try swapping the condition for floating point\n+\tmodes.\n+\t* optabs.c (emit_cmp_and_jump_insns): Cope with constant op0 better.\n \n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * expr.c (expand_expr_real_1): Just use do_store_flag.\n-        (do_store_flag): Drop support for TRUTH_NOT_EXPR.  Use\n-        emit_store_flag_force.\n-        * expmed.c (emit_store_flag_force): Copy here trick\n-        previously in expand_expr_real_1.  Try reversing the comparison.\n-        (emit_store_flag_1): Work if target is NULL.\n-        (emit_store_flag): Work if target is NULL, using the result mode\n-        from the comparison.  Use split_comparison, restructure final part\n-        to simplify conditionals.\n+\t* expr.c (expand_expr_real_1): Just use do_store_flag.\n+\t(do_store_flag): Drop support for TRUTH_NOT_EXPR.  Use\n+\temit_store_flag_force.\n+\t* expmed.c (emit_store_flag_force): Copy here trick\n+\tpreviously in expand_expr_real_1.  Try reversing the comparison.\n+\t(emit_store_flag_1): Work if target is NULL.\n+\t(emit_store_flag): Work if target is NULL, using the result mode\n+\tfrom the comparison.  Use split_comparison, restructure final part\n+\tto simplify conditionals.\n \n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * builtins.c (expand_errno_check): Use do_compare_rtx_and_jump.\n-        * dojump.c (do_jump): Change handling of floating-point\n-        ops to use just do_compare_and_jump.\n-        (split_comparison): New.\n-        (do_compare_rtx_and_jump): Add here logic coming previously\n-        in do_jump, using split_comparison.\n+\t* builtins.c (expand_errno_check): Use do_compare_rtx_and_jump.\n+\t* dojump.c (do_jump): Change handling of floating-point\n+\tops to use just do_compare_and_jump.\n+\t(split_comparison): New.\n+\t(do_compare_rtx_and_jump): Add here logic coming previously\n+\tin do_jump, using split_comparison.\n \n 2009-06-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -914,8 +919,7 @@\n \n 2009-06-22  Ian Lance Taylor  <iant@google.com>\n \n-\t* config/rs6000/rs6000.opt: Move msched-epilog before\n-\tmsched-prolog.\n+\t* config/rs6000/rs6000.opt: Move msched-epilog before msched-prolog.\n \n 2009-06-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -1191,8 +1195,7 @@\n 2009-06-19  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/40482\n-\t* config/arm/arm.c (thumb_shiftable_const): Truncate val to \n-\t32 bits.\n+\t* config/arm/arm.c (thumb_shiftable_const): Truncate val to 32 bits.\n \t* config/arm/arm.md: Likewise.\n \n 2009-06-19  Ian Lance Taylor  <iant@google.com>\n@@ -1201,8 +1204,7 @@\n \tto GIMPLE_ERROR_MARK.\n \n \t* c-typeck.c (build_conditional_expr): Add op1_original_type and\n-\top2_original_type parameters.  Warn about using different enum\n-\ttypes.\n+\top2_original_type parameters.  Warn about using different enum types.\n \t* c-parser.c (c_parser_conditional_expression): Pass original\n \ttypes to build_conditional_expr.\n \t* c-tree.h (build_conditional_expr): Update declaration."}, {"sha": "2a9fffa2d06c5778d0093906e55dce6972075204", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897eef7b83ea48d36bb18d1aef280bd90a2adc84/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897eef7b83ea48d36bb18d1aef280bd90a2adc84/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=897eef7b83ea48d36bb18d1aef280bd90a2adc84", "patch": "@@ -919,8 +919,7 @@ typedef _Complex float __attribute__((mode(XC))) _Complex80;\n @end smallexample\n \n Not all targets support additional floating point types.  @code{__float80}\n-is supported on i386, x86_64 and ia64 targets and target @code{__float128}\n-is supported on x86_64 and ia64 targets.\n+and @code{__float128} types are supported on i386, x86_64 and ia64 targets.\n \n @node Half-Precision\n @section Half-Precision Floating Point"}]}