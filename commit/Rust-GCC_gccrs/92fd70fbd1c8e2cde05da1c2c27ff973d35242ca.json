{"sha": "92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmZDcwZmJkMWM4ZTJjZGUwNWRhMWMyYzI3ZmY5NzNkMzUyNDJjYQ==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2013-10-17T20:57:21Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-10-17T20:57:21Z"}, "message": "builtin-apply2.c: Skip test on arm hardfloat ABI targets.\n\n2013-10-17  Charles Bayis  <charles.baylis@linaro.org>\n\n\t* gcc.dg/builtin-apply2.c: Skip test on arm hardfloat ABI targets.\n\t* gcc.dg/tls/pr42894.c: Remove dg-options for arm*-*-* targets.\n\t* gcc.target/arm/thumb-ltu.c: Remove dg-skip-if and require\n\teffective target arm_thumb1_ok.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_fp16_ok_nocache): Don't force\n\t-mfloat-abi=soft when building for hardfloat target.\n\nFrom-SVN: r203799", "tree": {"sha": "3a56112842b17a933b537210351211c3cd0cc105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a56112842b17a933b537210351211c3cd0cc105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/comments", "author": null, "committer": null, "parents": [{"sha": "ab1c993b94cc09cf569f75c34c943f6e695a0ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1c993b94cc09cf569f75c34c943f6e695a0ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1c993b94cc09cf569f75c34c943f6e695a0ec3"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "4e7cb4f1e6b82fa0debbba850831cd4a304a7e7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "patch": "@@ -1,3 +1,13 @@\n+2013-10-17  Charles Bayis  <charles.baylis@linaro.org>\n+\n+\t* gcc.dg/builtin-apply2.c: Skip test on arm hardfloat ABI targets.\n+\t* gcc.dg/tls/pr42894.c: Remove dg-options for arm*-*-* targets.\n+\t* gcc.target/arm/thumb-ltu.c: Remove dg-skip-if and require\n+\teffective target arm_thumb1_ok.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_fp16_ok_nocache): Don't force\n+\t-mfloat-abi=soft when building for hardfloat target.\n+\n 2013-10-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/58673"}, {"sha": "869f337a9a5bb9b9e9e200c88b270136abb0dca6", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"aarch64*-*-* avr-*-* \" } { \"*\" } { \"\" } } */\n-/* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { \"arm*-*-*\" } { \"-mfloat-abi=hard\" } { \"\" } } */\n+/* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm*-*-* && arm_hf_eabi } { \"*\" } { \"\" } } */\n \n /* PR target/12503 */\n /* Origin: <pierre.nguyen-tuong@asim.lip6.fr> */"}, {"sha": "2875b494c0503e964df94fd750f82db16557b469", "filename": "gcc/testsuite/gcc.dg/tls/pr42894.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr42894.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr42894.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr42894.c?ref=92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "patch": "@@ -1,6 +1,5 @@\n /* PR target/42894 */\n /* { dg-do compile } */\n-/* { dg-options \"-march=armv5te -mthumb\" { target arm*-*-* } } */\n /* { dg-require-effective-target tls } */\n \n extern __thread int t;"}, {"sha": "d057ea34d25c1415566345a284898079ae654e81", "filename": "gcc/testsuite/gcc.target/arm/thumb-ltu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-ltu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-ltu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-ltu.c?ref=92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"incompatible options\" { arm*-*-* } { \"-march=*\" } { \"-march=armv6\" \"-march=armv6j\" \"-march=armv6z\" } } */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n /* { dg-options \"-mcpu=arm1136jf-s -mthumb -O2\" } */\n \n void f(unsigned a, unsigned b, unsigned c, unsigned d)"}, {"sha": "8701cf6c21df120f7e15e958e7ca5cd55451eee1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "patch": "@@ -2467,6 +2467,11 @@ proc check_effective_target_arm_fp16_ok_nocache { } {\n \t# Must generate floating-point instructions.\n \treturn 0\n     }\n+    if [check_effective_target_arm_hf_eabi] {\n+\t# Use existing float-abi and force an fpu which supports fp16\n+\tset et_arm_fp16_flags \"-mfpu=vfpv4\"\n+\treturn 1;\n+    }\n     if [check-flags [list \"\" { *-*-* } { \"-mfpu=*\" } { \"\" } ]] {\n         # The existing -mfpu value is OK; use it, but add softfp.\n \tset et_arm_fp16_flags \"-mfloat-abi=softfp\""}]}