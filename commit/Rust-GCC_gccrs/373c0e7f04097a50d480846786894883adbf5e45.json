{"sha": "373c0e7f04097a50d480846786894883adbf5e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYzBlN2YwNDA5N2E1MGQ0ODA4NDY3ODY4OTQ4ODNhZGJmNWU0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-12T21:36:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-12T21:36:50Z"}, "message": "re PR c++/16254 (ICE in lower_stmt, at gimple-low.c:205)\n\n        PR c++/16254\n        * fold-const.c (fold) <case CLEANUP_POINT_EXPR>: Remove.\n        * tree.c, tree.h (has_cleanups): Remove.\ncp/\n        * semantics.c (maybe_cleanup_point_expr): Don't call fold.\n        * typeck.c (condition_conversion): Likewise.\n\nFrom-SVN: r87407", "tree": {"sha": "051c6e5b7ae1bdd153f37194a1ba91a1342fe790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/051c6e5b7ae1bdd153f37194a1ba91a1342fe790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373c0e7f04097a50d480846786894883adbf5e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c0e7f04097a50d480846786894883adbf5e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373c0e7f04097a50d480846786894883adbf5e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c0e7f04097a50d480846786894883adbf5e45/comments", "author": null, "committer": null, "parents": [{"sha": "7fac672272cce6ed7e6e8ca9a54116d40f303dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fac672272cce6ed7e6e8ca9a54116d40f303dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fac672272cce6ed7e6e8ca9a54116d40f303dd7"}], "stats": {"total": 125, "additions": 14, "deletions": 111}, "files": [{"sha": "95f15457f31f397deff9c765d03e4a1edbec6238", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -1,3 +1,9 @@\n+2004-09-12  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/16254\n+\t* fold-const.c (fold) <case CLEANUP_POINT_EXPR>: Remove.\n+\t* tree.c, tree.h (has_cleanups): Remove.\n+\n 2004-09-12  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-ssa-loop-manip.c (split_loop_exit_edge): Handle non-ssaname"}, {"sha": "37f08119566f5377b9e1259ea39487240f533ab4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -1,3 +1,9 @@\n+2004-09-12  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/16254\n+\t* semantics.c (maybe_cleanup_point_expr): Don't call fold.\n+\t* typeck.c (condition_conversion): Likewise.\n+\n 2004-09-11  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/17404"}, {"sha": "1ea97a0aa86eb47a0971e0ea847926fd70422e2a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -358,7 +358,7 @@ static tree\n maybe_cleanup_point_expr (tree expr)\n {\n   if (!processing_template_decl && stmts_are_full_exprs_p ())\n-    expr = fold (build1 (CLEANUP_POINT_EXPR, TREE_TYPE (expr), expr));\n+    expr = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (expr), expr);\n   return expr;\n }\n "}, {"sha": "2169bad472fc4dad08d1a6abc747deb3bdf05cd3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -3659,7 +3659,7 @@ condition_conversion (tree expr)\n   if (processing_template_decl)\n     return expr;\n   t = perform_implicit_conversion (boolean_type_node, expr);\n-  t = fold (build1 (CLEANUP_POINT_EXPR, boolean_type_node, t));\n+  t = build1 (CLEANUP_POINT_EXPR, boolean_type_node, t);\n   return t;\n }\n \t\t"}, {"sha": "972f276d59c6373ddeef2d2f1ac0ae03580e3cc0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -8946,49 +8946,6 @@ fold (tree expr)\n \t\t\t\t\t   TREE_OPERAND (arg0, 1)))));\n       return t;\n \n-    case CLEANUP_POINT_EXPR:\n-      /* Pull arithmetic ops out of the CLEANUP_POINT_EXPR where\n-         appropriate.  */\n-      if (! has_cleanups (arg0))\n-\treturn TREE_OPERAND (t, 0);\n-\n-      {\n-\tenum tree_code code0 = TREE_CODE (arg0);\n-\tint kind0 = TREE_CODE_CLASS (code0);\n-\n-\tif (kind0 == '1' || code0 == TRUTH_NOT_EXPR)\n-\t  {\n-\t    tree arg00 = TREE_OPERAND (arg0, 0);\n-\t    return fold (build1 (code0, type,\n-\t\t\t\t fold (build1 (CLEANUP_POINT_EXPR,\n-\t\t\t\t\t       TREE_TYPE (arg00), arg00))));\n-\t  }\n-\n-\tif (kind0 == '<' || kind0 == '2'\n-\t    || code0 == TRUTH_ANDIF_EXPR || code0 == TRUTH_ORIF_EXPR\n-\t    || code0 == TRUTH_AND_EXPR   || code0 == TRUTH_OR_EXPR\n-\t    || code0 == TRUTH_XOR_EXPR)\n-\t  {\n-\t    tree arg00 = TREE_OPERAND (arg0, 0);\n-\t    tree arg01 = TREE_OPERAND (arg0, 1);\n-\n-\t    if (TREE_CONSTANT (arg00)\n-\t\t|| ((code0 == TRUTH_ANDIF_EXPR || code0 == TRUTH_ORIF_EXPR)\n-\t\t    && ! has_cleanups (arg00)))\n-\t      return fold (build2 (code0, type, arg00,\n-\t\t\t\t   fold (build1 (CLEANUP_POINT_EXPR,\n-\t\t\t\t\t\t TREE_TYPE (arg01), arg01))));\n-\n-\t    if (TREE_CONSTANT (arg01))\n-\t      return fold (build2 (code0, type,\n-\t\t\t\t   fold (build1 (CLEANUP_POINT_EXPR,\n-\t\t\t\t\t\t TREE_TYPE (arg00), arg00)),\n-\t\t\t\t   arg01));\n-\t  }\n-\n-\treturn t;\n-      }\n-\n     case CALL_EXPR:\n       /* Check for a built-in function.  */\n       if (TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR"}, {"sha": "eb121991df1c1e82bc5b59038fb19cd46eaa2aee", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -1805,67 +1805,6 @@ type_contains_placeholder_p (tree type)\n       gcc_unreachable ();\n     }\n }\n-\n-/* Return 1 if EXP contains any expressions that produce cleanups for an\n-   outer scope to deal with.  Used by fold.  */\n-\n-int\n-has_cleanups (tree exp)\n-{\n-  int i, nops, cmp;\n-\n-  if (! TREE_SIDE_EFFECTS (exp))\n-    return 0;\n-\n-  switch (TREE_CODE (exp))\n-    {\n-    case TARGET_EXPR:\n-    case WITH_CLEANUP_EXPR:\n-      return 1;\n-\n-    case CLEANUP_POINT_EXPR:\n-      return 0;\n-\n-    case CALL_EXPR:\n-      for (exp = TREE_OPERAND (exp, 1); exp; exp = TREE_CHAIN (exp))\n-\t{\n-\t  cmp = has_cleanups (TREE_VALUE (exp));\n-\t  if (cmp)\n-\t    return cmp;\n-\t}\n-      return 0;\n-\n-    case DECL_EXPR:\n-      return (DECL_INITIAL (DECL_EXPR_DECL (exp))\n-\t      && has_cleanups (DECL_INITIAL (DECL_EXPR_DECL (exp))));\n-\n-    default:\n-      break;\n-    }\n-\n-  /* This general rule works for most tree codes.  All exceptions should be\n-     handled above.  If this is a language-specific tree code, we can't\n-     trust what might be in the operand, so say we don't know\n-     the situation.  */\n-  if ((int) TREE_CODE (exp) >= (int) LAST_AND_UNUSED_TREE_CODE)\n-    return -1;\n-\n-  nops = first_rtl_op (TREE_CODE (exp));\n-  for (i = 0; i < nops; i++)\n-    if (TREE_OPERAND (exp, i) != 0)\n-      {\n-\tint type = TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (exp, i)));\n-\tif (type == 'e' || type == '<' || type == '1' || type == '2'\n-\t    || type == 'r' || type == 's')\n-\t  {\n-\t    cmp = has_cleanups (TREE_OPERAND (exp, i));\n-\t    if (cmp)\n-\t      return cmp;\n-\t  }\n-      }\n-\n-  return 0;\n-}\n \f\n /* Given a tree EXP, a FIELD_DECL F, and a replacement value R,\n    return a tree with all occurrences of references to F in a"}, {"sha": "952402521d877b648de5b161254dca7540ad74a7", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c0e7f04097a50d480846786894883adbf5e45/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=373c0e7f04097a50d480846786894883adbf5e45", "patch": "@@ -3240,11 +3240,6 @@ extern bool contains_placeholder_p (tree);\n \n extern bool type_contains_placeholder_p (tree);\n \n-/* Return 1 if EXP contains any expressions that produce cleanups for an\n-   outer scope to deal with.  Used by fold.  */\n-\n-extern int has_cleanups (tree);\n-\n /* Given a tree EXP, a FIELD_DECL F, and a replacement value R,\n    return a tree with all occurrences of references to F in a\n    PLACEHOLDER_EXPR replaced by R.   Note that we assume here that EXP"}]}