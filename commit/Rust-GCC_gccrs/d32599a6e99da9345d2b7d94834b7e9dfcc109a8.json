{"sha": "d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyNTk5YTZlOTlkYTkzNDVkMmI3ZDk0ODM0YjdlOWRmY2MxMDlhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-11-06T08:46:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-11-06T08:46:45Z"}, "message": "re PR c/41935 (ICE : tree check: expected integer_cst, have nop_expr in int_cst_value, at tree.c:8301)\n\n\tPR middle-end/41935\n\t* c-common.c (fold_offsetof_1) <case ARRAY_REF>: Don't crash for VLAs\n\tor non-constant index, allow index one past the last element and\n\tallow exceeding array bound in arrays that might be used as flexible\n\tarray members.\n\n\t* gcc.dg/pr41935.c: New test.\n\t* c-c++-common/pr41935.c: New test.\n\t* c-c++-common/builtin-offsetof.c (f0): Allow index one past the last\n\telement.\n\t* gcc.c-torture/execute/pr41935.c: New test.\n\nFrom-SVN: r153962", "tree": {"sha": "ea3cde61de4ddf98d55d21d6887d89e8f61719f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3cde61de4ddf98d55d21d6887d89e8f61719f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21a15d9f83dda328d9adfb6deede8d06b8a84c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a15d9f83dda328d9adfb6deede8d06b8a84c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a15d9f83dda328d9adfb6deede8d06b8a84c0d"}], "stats": {"total": 189, "additions": 179, "deletions": 10}, "files": [{"sha": "70ed436e13aaeeceb1383cd99de054f9944487e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -1,3 +1,11 @@\n+2009-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/41935\n+\t* c-common.c (fold_offsetof_1) <case ARRAY_REF>: Don't crash for VLAs\n+\tor non-constant index, allow index one past the last element and\n+\tallow exceeding array bound in arrays that might be used as flexible\n+\tarray members.\n+\n 2009-11-05  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/ia32intrin.h: Protect CRC32 builtins with __SSE4_2__."}, {"sha": "20b24f0c3c288a1d227da9801b467a221f4cbc4d", "filename": "gcc/c-common.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -8398,14 +8398,46 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n       off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n \n       /* Check if the offset goes beyond the upper bound of the array.  */\n-      {\n-\ttree nelts = array_type_nelts (TREE_TYPE (TREE_OPERAND (expr, 0)));\n-        HOST_WIDE_INT index = int_cst_value (t);\n-\tif (index > int_cst_value (nelts))\n-\t  warning (OPT_Warray_bounds,\n-\t\t   \"index %wd denotes an offset greater than size of %qT\",\n-\t\t   index, TREE_TYPE (TREE_OPERAND (expr, 0)));\n-      }\n+      if (code == PLUS_EXPR && TREE_CODE (t) == INTEGER_CST)\n+\t{\n+\t  tree upbound = array_ref_up_bound (expr);\n+\t  if (upbound != NULL_TREE\n+\t      && TREE_CODE (upbound) == INTEGER_CST\n+\t      && !tree_int_cst_equal (upbound,\n+\t\t\t\t      TYPE_MAX_VALUE (TREE_TYPE (upbound))))\n+\t    {\n+\t      upbound = size_binop (PLUS_EXPR, upbound,\n+\t\t\t\t    build_int_cst (TREE_TYPE (upbound), 1));\n+\t      if (tree_int_cst_lt (upbound, t))\n+\t\t{\n+\t\t  tree v;\n+\n+\t\t  for (v = TREE_OPERAND (expr, 0);\n+\t\t       TREE_CODE (v) == COMPONENT_REF;\n+\t\t       v = TREE_OPERAND (v, 0))\n+\t\t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t== RECORD_TYPE)\n+\t\t      {\n+\t\t\ttree fld_chain = TREE_CHAIN (TREE_OPERAND (v, 1));\n+\t\t\tfor (; fld_chain; fld_chain = TREE_CHAIN (fld_chain))\n+\t\t\t  if (TREE_CODE (fld_chain) == FIELD_DECL)\n+\t\t\t    break;\n+\n+\t\t\tif (fld_chain)\n+\t\t\t  break;\n+\t\t      }\n+\t\t  /* Don't warn if the array might be considered a poor\n+\t\t     man's flexible array member with a very permissive\n+\t\t     definition thereof.  */\n+\t\t  if (TREE_CODE (v) == ARRAY_REF\n+\t\t      || TREE_CODE (v) == COMPONENT_REF)\n+\t\t    warning (OPT_Warray_bounds,\n+\t\t\t     \"index %E denotes an offset \"\n+\t\t\t     \"greater than size of %qT\",\n+\t\t\t     t, TREE_TYPE (TREE_OPERAND (expr, 0)));\n+\t\t}\n+\t    }\n+\t}\n       break;\n \n     case COMPOUND_EXPR:"}, {"sha": "04ce93904a1e6d74397ee7d986cd320162307fa9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -1,3 +1,12 @@\n+2009-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/41935\n+\t* gcc.dg/pr41935.c: New test.\n+\t* c-c++-common/pr41935.c: New test.\n+\t* c-c++-common/builtin-offsetof.c (f0): Allow index one past the last\n+\telement.\n+\t* gcc.c-torture/execute/pr41935.c: New test.\n+\n 2009-11-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34180"}, {"sha": "6d97775467d31675dedb01c40ab5bce03d702ba5", "filename": "gcc/testsuite/c-c++-common/builtin-offsetof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-offsetof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-offsetof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-offsetof.c?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -21,9 +21,9 @@ f0 ()\n   __builtin_offsetof(struct A, p[0]); // { dg-error \"non constant address\" }\n   __builtin_offsetof(struct B, p[0]); // OK\n   __builtin_offsetof(struct B, p[9]); // OK\n-  __builtin_offsetof(struct B, p[10]); // { dg-warning \"greater than size\" }\n+  __builtin_offsetof(struct B, p[10]); // OK\n+  __builtin_offsetof(struct B, p[11]); // { dg-warning \"greater than size\" }\n   __builtin_offsetof(struct B, a.p); // OK\n   __builtin_offsetof(struct B, p[0]); // OK\n   __builtin_offsetof(struct B, a.p[0]); // { dg-error \"non constant address\" }\n }\n-"}, {"sha": "3279e75593d45b1d1c5656e9a5770881ba33b0a4", "filename": "gcc/testsuite/c-c++-common/pr41935.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41935.c?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-options \"-Warray-bounds\" } */\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+  int i;\n+  char p[1];\n+};\n+\n+struct B\n+{\n+  struct A a;\n+  int i;\n+};\n+\n+struct C\n+{\n+  int i;\n+  struct A a;\n+};\n+\n+union D\n+{\n+  char p[1];\n+  struct A a;\n+  struct B b;\n+  struct C c;\n+};\n+\n+struct E\n+{\n+  int i;\n+  union D d;\n+};\n+\n+struct F\n+{\n+  union D d;\n+  int i;\n+};\n+\n+union G\n+{\n+  int i;\n+  union D d;\n+};\n+\n+void\n+f0 ()\n+{\n+  __builtin_offsetof (struct A, p[4]); /* OK */\n+  __builtin_offsetof (struct B, a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (struct C, a.p[4]); /* OK */\n+  __builtin_offsetof (union D, p[4]); /* OK */\n+  __builtin_offsetof (union D, a.p[4]); /* OK */\n+  __builtin_offsetof (union D, b.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (union D, c.a.p[4]); /* OK */\n+  __builtin_offsetof (struct E, d.p[4]); /* OK */\n+  __builtin_offsetof (struct E, d.a.p[4]); /* OK */\n+  __builtin_offsetof (struct E, d.b.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (struct E, d.c.a.p[4]); /* OK */\n+  __builtin_offsetof (struct F, d.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (struct F, d.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (struct F, d.b.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (struct F, d.c.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (union G, d.p[4]); /* OK */\n+  __builtin_offsetof (union G, d.a.p[4]); /* OK */\n+  __builtin_offsetof (union G, d.b.a.p[4]); /* { dg-warning \"greater than size\" } */\n+  __builtin_offsetof (union G, d.c.a.p[4]); /* OK */\n+}"}, {"sha": "ef8d08ce0239d515461e72f1e62109e6e015673d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr41935.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41935.c?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/41935 */\n+\n+extern void abort (void);\n+\n+long int\n+foo (int n, int i, int j)\n+{\n+  typedef int T[n];\n+  struct S { int a; T b[n]; };\n+  return __builtin_offsetof (struct S, b[i][j]);\n+}\n+\n+int\n+main (void)\n+{\n+  typedef int T[5];\n+  struct S { int a; T b[5]; };\n+  if (foo (5, 2, 3)\n+      != __builtin_offsetof (struct S, b) + (5 * 2 + 3) * sizeof (int))\n+    abort ();\n+  if (foo (5, 5, 5)\n+      != __builtin_offsetof (struct S, b) + (5 * 5 + 5) * sizeof (int))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e6a1b28670ac68c3110b8b6cf394269fc829e584", "filename": "gcc/testsuite/gcc.dg/pr41935.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32599a6e99da9345d2b7d94834b7e9dfcc109a8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41935.c?ref=d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/41935 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+struct A { int a; int b[10]; };\n+\n+int\n+foo (struct A *p)\n+{\n+  return __builtin_offsetof (struct A, b[p->a]);\n+}\n+\n+int\n+main ()\n+{\n+  struct A a;\n+  a.a = 7;\n+  if (foo (&a) != 7 * sizeof (int) + __builtin_offsetof (struct A, b))\n+    abort ();\n+  a.a = 2;\n+  if (foo (&a) != 2 * sizeof (int) + __builtin_offsetof (struct A, b))\n+    abort ();\n+  return 0;\n+}"}]}